;;; prologue-1.asm
;;; The first part of the standard prologue for compiled programs
;;;
;;; Programmer: Mayer Goldberg, 2023

%define T_void 				0
%define T_nil 				1
%define T_char 				2
%define T_string 			3
%define T_closure 			4
%define T_undefined			5
%define T_boolean 			8
%define T_boolean_false 		(T_boolean | 1)
%define T_boolean_true 			(T_boolean | 2)
%define T_number 			16
%define T_integer			(T_number | 1)
%define T_fraction 			(T_number | 2)
%define T_real 				(T_number | 3)
%define T_collection 			32
%define T_pair 				(T_collection | 1)
%define T_vector 			(T_collection | 2)
%define T_symbol 			64
%define T_interned_symbol		(T_symbol | 1)
%define T_uninterned_symbol		(T_symbol | 2)

%define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
%define SOB_PAIR_CAR(reg)		qword [reg + 1]
%define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
%define SOB_STRING_LENGTH(reg)		qword [reg + 1]
%define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
%define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
%define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]

%define OLD_RBP 			qword [rbp]
%define RET_ADDR 			qword [rbp + 8 * 1]
%define ENV 				qword [rbp + 8 * 2]
%define COUNT 				qword [rbp + 8 * 3]
%define PARAM(n) 			qword [rbp + 8 * (4 + n)]
%define AND_KILL_FRAME(n)		(8 * (2 + n))

%define MAGIC				496351

%macro ENTER 0
	enter 0, 0
	and rsp, ~15
%endmacro

%macro LEAVE 0
	leave
%endmacro

%macro assert_type 2
        cmp byte [%1], %2
        jne L_error_incorrect_type
%endmacro

%define assert_void(reg)		assert_type reg, T_void
%define assert_nil(reg)			assert_type reg, T_nil
%define assert_char(reg)		assert_type reg, T_char
%define assert_string(reg)		assert_type reg, T_string
%define assert_symbol(reg)		assert_type reg, T_symbol
%define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
%define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
%define assert_closure(reg)		assert_type reg, T_closure
%define assert_boolean(reg)		assert_type reg, T_boolean
%define assert_integer(reg)		assert_type reg, T_integer
%define assert_fraction(reg)		assert_type reg, T_fraction
%define assert_real(reg)		assert_type reg, T_real
%define assert_pair(reg)		assert_type reg, T_pair
%define assert_vector(reg)		assert_type reg, T_vector

%define sob_void			(L_constants + 0)
%define sob_nil				(L_constants + 1)
%define sob_boolean_false		(L_constants + 2)
%define sob_boolean_true		(L_constants + 3)
%define sob_char_nul			(L_constants + 4)

%define bytes(n)			(n)
%define kbytes(n) 			(bytes(n) << 10)
%define mbytes(n) 			(kbytes(n) << 10)
%define gbytes(n) 			(mbytes(n) << 10)

section .data
L_constants:
	; L_constants + 0:
	db T_void
	; L_constants + 1:
	db T_nil
	; L_constants + 2:
	db T_boolean_false
	; L_constants + 3:
	db T_boolean_true
	; L_constants + 4:
	db T_char, 0x00	; #\nul
	; L_constants + 6:
	db T_string	; "null?"
	dq 5
	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
	; L_constants + 20:
	db T_string	; "pair?"
	dq 5
	db 0x70, 0x61, 0x69, 0x72, 0x3F
	; L_constants + 34:
	db T_string	; "void?"
	dq 5
	db 0x76, 0x6F, 0x69, 0x64, 0x3F
	; L_constants + 48:
	db T_string	; "char?"
	dq 5
	db 0x63, 0x68, 0x61, 0x72, 0x3F
	; L_constants + 62:
	db T_string	; "string?"
	dq 7
	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
	; L_constants + 78:
	db T_string	; "interned-symbol?"
	dq 16
	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
	; L_constants + 103:
	db T_string	; "vector?"
	dq 7
	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
	; L_constants + 119:
	db T_string	; "procedure?"
	dq 10
	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
	db 0x65, 0x3F
	; L_constants + 138:
	db T_string	; "real?"
	dq 5
	db 0x72, 0x65, 0x61, 0x6C, 0x3F
	; L_constants + 152:
	db T_string	; "fraction?"
	dq 9
	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
	db 0x3F
	; L_constants + 170:
	db T_string	; "boolean?"
	dq 8
	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
	; L_constants + 187:
	db T_string	; "number?"
	dq 7
	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
	; L_constants + 203:
	db T_string	; "collection?"
	dq 11
	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
	db 0x6F, 0x6E, 0x3F
	; L_constants + 223:
	db T_string	; "cons"
	dq 4
	db 0x63, 0x6F, 0x6E, 0x73
	; L_constants + 236:
	db T_string	; "display-sexpr"
	dq 13
	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
	db 0x73, 0x65, 0x78, 0x70, 0x72
	; L_constants + 258:
	db T_string	; "write-char"
	dq 10
	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
	db 0x61, 0x72
	; L_constants + 277:
	db T_string	; "car"
	dq 3
	db 0x63, 0x61, 0x72
	; L_constants + 289:
	db T_string	; "cdr"
	dq 3
	db 0x63, 0x64, 0x72
	; L_constants + 301:
	db T_string	; "string-length"
	dq 13
	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
	db 0x65, 0x6E, 0x67, 0x74, 0x68
	; L_constants + 323:
	db T_string	; "vector-length"
	dq 13
	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
	db 0x65, 0x6E, 0x67, 0x74, 0x68
	; L_constants + 345:
	db T_string	; "real->integer"
	dq 13
	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
	db 0x74, 0x65, 0x67, 0x65, 0x72
	; L_constants + 367:
	db T_string	; "exit"
	dq 4
	db 0x65, 0x78, 0x69, 0x74
	; L_constants + 380:
	db T_string	; "integer->real"
	dq 13
	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
	db 0x3E, 0x72, 0x65, 0x61, 0x6C
	; L_constants + 402:
	db T_string	; "fraction->real"
	dq 14
	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
	; L_constants + 425:
	db T_string	; "char->integer"
	dq 13
	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
	db 0x74, 0x65, 0x67, 0x65, 0x72
	; L_constants + 447:
	db T_string	; "integer->char"
	dq 13
	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
	db 0x3E, 0x63, 0x68, 0x61, 0x72
	; L_constants + 469:
	db T_string	; "trng"
	dq 4
	db 0x74, 0x72, 0x6E, 0x67
	; L_constants + 482:
	db T_string	; "zero?"
	dq 5
	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
	; L_constants + 496:
	db T_string	; "integer?"
	dq 8
	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
	; L_constants + 513:
	db T_string	; "__bin-apply"
	dq 11
	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
	db 0x70, 0x6C, 0x79
	; L_constants + 533:
	db T_string	; "__bin-add-rr"
	dq 12
	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
	db 0x64, 0x2D, 0x72, 0x72
	; L_constants + 554:
	db T_string	; "__bin-sub-rr"
	dq 12
	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
	db 0x62, 0x2D, 0x72, 0x72
	; L_constants + 575:
	db T_string	; "__bin-mul-rr"
	dq 12
	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
	db 0x6C, 0x2D, 0x72, 0x72
	; L_constants + 596:
	db T_string	; "__bin-div-rr"
	dq 12
	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
	db 0x76, 0x2D, 0x72, 0x72
	; L_constants + 617:
	db T_string	; "__bin-add-qq"
	dq 12
	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
	db 0x64, 0x2D, 0x71, 0x71
	; L_constants + 638:
	db T_string	; "__bin-sub-qq"
	dq 12
	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
	db 0x62, 0x2D, 0x71, 0x71
	; L_constants + 659:
	db T_string	; "__bin-mul-qq"
	dq 12
	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
	db 0x6C, 0x2D, 0x71, 0x71
	; L_constants + 680:
	db T_string	; "__bin-div-qq"
	dq 12
	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
	db 0x76, 0x2D, 0x71, 0x71
	; L_constants + 701:
	db T_string	; "__bin-add-zz"
	dq 12
	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
	db 0x64, 0x2D, 0x7A, 0x7A
	; L_constants + 722:
	db T_string	; "__bin-sub-zz"
	dq 12
	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
	db 0x62, 0x2D, 0x7A, 0x7A
	; L_constants + 743:
	db T_string	; "__bin-mul-zz"
	dq 12
	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
	db 0x6C, 0x2D, 0x7A, 0x7A
	; L_constants + 764:
	db T_string	; "__bin-div-zz"
	dq 12
	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
	db 0x76, 0x2D, 0x7A, 0x7A
	; L_constants + 785:
	db T_string	; "error"
	dq 5
	db 0x65, 0x72, 0x72, 0x6F, 0x72
	; L_constants + 799:
	db T_string	; "__bin-less-than-rr"
	dq 18
	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
	db 0x72, 0x72
	; L_constants + 826:
	db T_string	; "__bin-less-than-qq"
	dq 18
	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
	db 0x71, 0x71
	; L_constants + 853:
	db T_string	; "__bin-less-than-zz"
	dq 18
	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
	db 0x7A, 0x7A
	; L_constants + 880:
	db T_string	; "__bin-equal-rr"
	dq 14
	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
	; L_constants + 903:
	db T_string	; "__bin-equal-qq"
	dq 14
	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
	; L_constants + 926:
	db T_string	; "__bin-equal-zz"
	dq 14
	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
	; L_constants + 949:
	db T_string	; "quotient"
	dq 8
	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
	; L_constants + 966:
	db T_string	; "remainder"
	dq 9
	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
	db 0x72
	; L_constants + 984:
	db T_string	; "set-car!"
	dq 8
	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
	; L_constants + 1001:
	db T_string	; "set-cdr!"
	dq 8
	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
	; L_constants + 1018:
	db T_string	; "string-ref"
	dq 10
	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
	db 0x65, 0x66
	; L_constants + 1037:
	db T_string	; "vector-ref"
	dq 10
	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
	db 0x65, 0x66
	; L_constants + 1056:
	db T_string	; "vector-set!"
	dq 11
	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
	db 0x65, 0x74, 0x21
	; L_constants + 1076:
	db T_string	; "string-set!"
	dq 11
	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
	db 0x65, 0x74, 0x21
	; L_constants + 1096:
	db T_string	; "make-vector"
	dq 11
	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
	db 0x74, 0x6F, 0x72
	; L_constants + 1116:
	db T_string	; "make-string"
	dq 11
	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
	db 0x69, 0x6E, 0x67
	; L_constants + 1136:
	db T_string	; "numerator"
	dq 9
	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
	db 0x72
	; L_constants + 1154:
	db T_string	; "denominator"
	dq 11
	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
	db 0x74, 0x6F, 0x72
	; L_constants + 1174:
	db T_string	; "eq?"
	dq 3
	db 0x65, 0x71, 0x3F
	; L_constants + 1186:
	db T_string	; "__integer-to-fracti...
	dq 21
	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
	db 0x63, 0x74, 0x69, 0x6F, 0x6E
	; L_constants + 1216:
	db T_string	; "logand"
	dq 6
	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
	; L_constants + 1231:
	db T_string	; "logor"
	dq 5
	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
	; L_constants + 1245:
	db T_string	; "logxor"
	dq 6
	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
	; L_constants + 1260:
	db T_string	; "lognot"
	dq 6
	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
	; L_constants + 1275:
	db T_string	; "ash"
	dq 3
	db 0x61, 0x73, 0x68
	; L_constants + 1287:
	db T_string	; "symbol?"
	dq 7
	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
	; L_constants + 1303:
	db T_string	; "uninterned-symbol?"
	dq 18
	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
	db 0x6C, 0x3F
	; L_constants + 1330:
	db T_string	; "gensym?"
	dq 7
	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
	; L_constants + 1346:
	db T_string	; "gensym"
	dq 6
	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
	; L_constants + 1361:
	db T_string	; "frame"
	dq 5
	db 0x66, 0x72, 0x61, 0x6D, 0x65
	; L_constants + 1375:
	db T_string	; "break"
	dq 5
	db 0x62, 0x72, 0x65, 0x61, 0x6B
	; L_constants + 1389:
	db T_string	; "boolean-false?"
	dq 14
	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
	db 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3F
	; L_constants + 1412:
	db T_string	; "boolean-true?"
	dq 13
	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
	db 0x74, 0x72, 0x75, 0x65, 0x3F
	; L_constants + 1434:
	db T_string	; "primitive?"
	dq 10
	db 0x70, 0x72, 0x69, 0x6D, 0x69, 0x74, 0x69, 0x76
	db 0x65, 0x3F
	; L_constants + 1453:
	db T_string	; "length"
	dq 6
	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
	; L_constants + 1468:
	db T_string	; "make-list"
	dq 9
	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
	db 0x74
	; L_constants + 1486:
	db T_string	; "return"
	dq 6
	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
	; L_constants + 1501:
	db T_string	; "caar"
	dq 4
	db 0x63, 0x61, 0x61, 0x72
	; L_constants + 1514:
	db T_string	; "cadr"
	dq 4
	db 0x63, 0x61, 0x64, 0x72
	; L_constants + 1527:
	db T_string	; "cdar"
	dq 4
	db 0x63, 0x64, 0x61, 0x72
	; L_constants + 1540:
	db T_string	; "cddr"
	dq 4
	db 0x63, 0x64, 0x64, 0x72
	; L_constants + 1553:
	db T_string	; "caaar"
	dq 5
	db 0x63, 0x61, 0x61, 0x61, 0x72
	; L_constants + 1567:
	db T_string	; "caadr"
	dq 5
	db 0x63, 0x61, 0x61, 0x64, 0x72
	; L_constants + 1581:
	db T_string	; "cadar"
	dq 5
	db 0x63, 0x61, 0x64, 0x61, 0x72
	; L_constants + 1595:
	db T_string	; "caddr"
	dq 5
	db 0x63, 0x61, 0x64, 0x64, 0x72
	; L_constants + 1609:
	db T_string	; "cdaar"
	dq 5
	db 0x63, 0x64, 0x61, 0x61, 0x72
	; L_constants + 1623:
	db T_string	; "cdadr"
	dq 5
	db 0x63, 0x64, 0x61, 0x64, 0x72
	; L_constants + 1637:
	db T_string	; "cddar"
	dq 5
	db 0x63, 0x64, 0x64, 0x61, 0x72
	; L_constants + 1651:
	db T_string	; "cdddr"
	dq 5
	db 0x63, 0x64, 0x64, 0x64, 0x72
	; L_constants + 1665:
	db T_string	; "caaaar"
	dq 6
	db 0x63, 0x61, 0x61, 0x61, 0x61, 0x72
	; L_constants + 1680:
	db T_string	; "caaadr"
	dq 6
	db 0x63, 0x61, 0x61, 0x61, 0x64, 0x72
	; L_constants + 1695:
	db T_string	; "caadar"
	dq 6
	db 0x63, 0x61, 0x61, 0x64, 0x61, 0x72
	; L_constants + 1710:
	db T_string	; "caaddr"
	dq 6
	db 0x63, 0x61, 0x61, 0x64, 0x64, 0x72
	; L_constants + 1725:
	db T_string	; "cadaar"
	dq 6
	db 0x63, 0x61, 0x64, 0x61, 0x61, 0x72
	; L_constants + 1740:
	db T_string	; "cadadr"
	dq 6
	db 0x63, 0x61, 0x64, 0x61, 0x64, 0x72
	; L_constants + 1755:
	db T_string	; "caddar"
	dq 6
	db 0x63, 0x61, 0x64, 0x64, 0x61, 0x72
	; L_constants + 1770:
	db T_string	; "cadddr"
	dq 6
	db 0x63, 0x61, 0x64, 0x64, 0x64, 0x72
	; L_constants + 1785:
	db T_string	; "cdaaar"
	dq 6
	db 0x63, 0x64, 0x61, 0x61, 0x61, 0x72
	; L_constants + 1800:
	db T_string	; "cdaadr"
	dq 6
	db 0x63, 0x64, 0x61, 0x61, 0x64, 0x72
	; L_constants + 1815:
	db T_string	; "cdadar"
	dq 6
	db 0x63, 0x64, 0x61, 0x64, 0x61, 0x72
	; L_constants + 1830:
	db T_string	; "cdaddr"
	dq 6
	db 0x63, 0x64, 0x61, 0x64, 0x64, 0x72
	; L_constants + 1845:
	db T_string	; "cddaar"
	dq 6
	db 0x63, 0x64, 0x64, 0x61, 0x61, 0x72
	; L_constants + 1860:
	db T_string	; "cddadr"
	dq 6
	db 0x63, 0x64, 0x64, 0x61, 0x64, 0x72
	; L_constants + 1875:
	db T_string	; "cdddar"
	dq 6
	db 0x63, 0x64, 0x64, 0x64, 0x61, 0x72
	; L_constants + 1890:
	db T_string	; "cddddr"
	dq 6
	db 0x63, 0x64, 0x64, 0x64, 0x64, 0x72
	; L_constants + 1905:
	db T_string	; "list?"
	dq 5
	db 0x6C, 0x69, 0x73, 0x74, 0x3F
	; L_constants + 1919:
	db T_string	; "list"
	dq 4
	db 0x6C, 0x69, 0x73, 0x74
	; L_constants + 1932:
	db T_string	; "not"
	dq 3
	db 0x6E, 0x6F, 0x74
	; L_constants + 1944:
	db T_string	; "rational?"
	dq 9
	db 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x61, 0x6C
	db 0x3F
	; L_constants + 1962:
	db T_string	; "list*"
	dq 5
	db 0x6C, 0x69, 0x73, 0x74, 0x2A
	; L_constants + 1976:
	db T_string	; "whatever"
	dq 8
	db 0x77, 0x68, 0x61, 0x74, 0x65, 0x76, 0x65, 0x72
	; L_constants + 1993:
	db T_interned_symbol	; whatever
	dq L_constants + 1976
	; L_constants + 2002:
	db T_string	; "apply"
	dq 5
	db 0x61, 0x70, 0x70, 0x6C, 0x79
	; L_constants + 2016:
	db T_string	; "ormap"
	dq 5
	db 0x6F, 0x72, 0x6D, 0x61, 0x70
	; L_constants + 2030:
	db T_string	; "map"
	dq 3
	db 0x6D, 0x61, 0x70
	; L_constants + 2042:
	db T_string	; "andmap"
	dq 6
	db 0x61, 0x6E, 0x64, 0x6D, 0x61, 0x70
	; L_constants + 2057:
	db T_string	; "reverse"
	dq 7
	db 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
	; L_constants + 2073:
	db T_string	; "fold-left"
	dq 9
	db 0x66, 0x6F, 0x6C, 0x64, 0x2D, 0x6C, 0x65, 0x66
	db 0x74
	; L_constants + 2091:
	db T_string	; "append"
	dq 6
	db 0x61, 0x70, 0x70, 0x65, 0x6E, 0x64
	; L_constants + 2106:
	db T_string	; "fold-right"
	dq 10
	db 0x66, 0x6F, 0x6C, 0x64, 0x2D, 0x72, 0x69, 0x67
	db 0x68, 0x74
	; L_constants + 2125:
	db T_string	; "+"
	dq 1
	db 0x2B
	; L_constants + 2135:
	db T_integer	; 0
	dq 0
	; L_constants + 2144:
	db T_string	; "__bin_integer_to_fr...
	dq 25
	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x5F, 0x69, 0x6E
	db 0x74, 0x65, 0x67, 0x65, 0x72, 0x5F, 0x74, 0x6F
	db 0x5F, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F
	db 0x6E
	; L_constants + 2178:
	db T_interned_symbol	; +
	dq L_constants + 2125
	; L_constants + 2187:
	db T_string	; "all arguments need ...
	dq 32
	db 0x61, 0x6C, 0x6C, 0x20, 0x61, 0x72, 0x67, 0x75
	db 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x20, 0x6E, 0x65
	db 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x65
	db 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x73
	; L_constants + 2228:
	db T_string	; "-"
	dq 1
	db 0x2D
	; L_constants + 2238:
	db T_string	; "real"
	dq 4
	db 0x72, 0x65, 0x61, 0x6C
	; L_constants + 2251:
	db T_interned_symbol	; -
	dq L_constants + 2228
	; L_constants + 2260:
	db T_string	; "*"
	dq 1
	db 0x2A
	; L_constants + 2270:
	db T_integer	; 1
	dq 1
	; L_constants + 2279:
	db T_interned_symbol	; *
	dq L_constants + 2260
	; L_constants + 2288:
	db T_string	; "/"
	dq 1
	db 0x2F
	; L_constants + 2298:
	db T_interned_symbol	; /
	dq L_constants + 2288
	; L_constants + 2307:
	db T_string	; "fact"
	dq 4
	db 0x66, 0x61, 0x63, 0x74
	; L_constants + 2320:
	db T_string	; "<"
	dq 1
	db 0x3C
	; L_constants + 2330:
	db T_string	; "<="
	dq 2
	db 0x3C, 0x3D
	; L_constants + 2341:
	db T_string	; ">"
	dq 1
	db 0x3E
	; L_constants + 2351:
	db T_string	; ">="
	dq 2
	db 0x3E, 0x3D
	; L_constants + 2362:
	db T_string	; "="
	dq 1
	db 0x3D
	; L_constants + 2372:
	db T_string	; "generic-comparator"
	dq 18
	db 0x67, 0x65, 0x6E, 0x65, 0x72, 0x69, 0x63, 0x2D
	db 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x72, 0x61, 0x74
	db 0x6F, 0x72
	; L_constants + 2399:
	db T_interned_symbol	; generic-comparator
	dq L_constants + 2372
	; L_constants + 2408:
	db T_string	; "all the arguments m...
	dq 33
	db 0x61, 0x6C, 0x6C, 0x20, 0x74, 0x68, 0x65, 0x20
	db 0x61, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74
	db 0x73, 0x20, 0x6D, 0x75, 0x73, 0x74, 0x20, 0x62
	db 0x65, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72
	db 0x73
	; L_constants + 2450:
	db T_string	; "char<?"
	dq 6
	db 0x63, 0x68, 0x61, 0x72, 0x3C, 0x3F
	; L_constants + 2465:
	db T_string	; "char<=?"
	dq 7
	db 0x63, 0x68, 0x61, 0x72, 0x3C, 0x3D, 0x3F
	; L_constants + 2481:
	db T_string	; "char=?"
	dq 6
	db 0x63, 0x68, 0x61, 0x72, 0x3D, 0x3F
	; L_constants + 2496:
	db T_string	; "char>?"
	dq 6
	db 0x63, 0x68, 0x61, 0x72, 0x3E, 0x3F
	; L_constants + 2511:
	db T_string	; "char>=?"
	dq 7
	db 0x63, 0x68, 0x61, 0x72, 0x3E, 0x3D, 0x3F
	; L_constants + 2527:
	db T_string	; "char-downcase"
	dq 13
	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x64, 0x6F, 0x77
	db 0x6E, 0x63, 0x61, 0x73, 0x65
	; L_constants + 2549:
	db T_string	; "char-upcase"
	dq 11
	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x75, 0x70, 0x63
	db 0x61, 0x73, 0x65
	; L_constants + 2569:
	db T_char, 0x41	; #\A
	; L_constants + 2571:
	db T_char, 0x5A	; #\Z
	; L_constants + 2573:
	db T_char, 0x61	; #\a
	; L_constants + 2575:
	db T_char, 0x7A	; #\z
	; L_constants + 2577:
	db T_string	; "char-ci<?"
	dq 9
	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3C
	db 0x3F
	; L_constants + 2595:
	db T_string	; "char-ci<=?"
	dq 10
	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3C
	db 0x3D, 0x3F
	; L_constants + 2614:
	db T_string	; "char-ci=?"
	dq 9
	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3D
	db 0x3F
	; L_constants + 2632:
	db T_string	; "char-ci>?"
	dq 9
	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3E
	db 0x3F
	; L_constants + 2650:
	db T_string	; "char-ci>=?"
	dq 10
	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3E
	db 0x3D, 0x3F
	; L_constants + 2669:
	db T_string	; "string-downcase"
	dq 15
	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x64
	db 0x6F, 0x77, 0x6E, 0x63, 0x61, 0x73, 0x65
	; L_constants + 2693:
	db T_string	; "string-upcase"
	dq 13
	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x75
	db 0x70, 0x63, 0x61, 0x73, 0x65
	; L_constants + 2715:
	db T_string	; "list->string"
	dq 12
	db 0x6C, 0x69, 0x73, 0x74, 0x2D, 0x3E, 0x73, 0x74
	db 0x72, 0x69, 0x6E, 0x67
	; L_constants + 2736:
	db T_string	; "string->list"
	dq 12
	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x3E
	db 0x6C, 0x69, 0x73, 0x74
	; L_constants + 2757:
	db T_string	; "string<?"
	dq 8
	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3C, 0x3F
	; L_constants + 2774:
	db T_string	; "string<=?"
	dq 9
	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3C, 0x3D
	db 0x3F
	; L_constants + 2792:
	db T_string	; "string=?"
	dq 8
	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3D, 0x3F
	; L_constants + 2809:
	db T_string	; "string>=?"
	dq 9
	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3E, 0x3D
	db 0x3F
	; L_constants + 2827:
	db T_string	; "string>?"
	dq 8
	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3E, 0x3F
	; L_constants + 2844:
	db T_string	; "string-ci<?"
	dq 11
	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
	db 0x69, 0x3C, 0x3F
	; L_constants + 2864:
	db T_string	; "string-ci<=?"
	dq 12
	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
	db 0x69, 0x3C, 0x3D, 0x3F
	; L_constants + 2885:
	db T_string	; "string-ci=?"
	dq 11
	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
	db 0x69, 0x3D, 0x3F
	; L_constants + 2905:
	db T_string	; "string-ci>=?"
	dq 12
	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
	db 0x69, 0x3E, 0x3D, 0x3F
	; L_constants + 2926:
	db T_string	; "string-ci>?"
	dq 11
	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
	db 0x69, 0x3E, 0x3F
	; L_constants + 2946:
	db T_interned_symbol	; make-vector
	dq L_constants + 1096
	; L_constants + 2955:
	db T_string	; "Usage: (make-vector...
	dq 43
	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
	db 0x74, 0x6F, 0x72, 0x20, 0x73, 0x69, 0x7A, 0x65
	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
	db 0x6C, 0x74, 0x29
	; L_constants + 3007:
	db T_interned_symbol	; make-string
	dq L_constants + 1116
	; L_constants + 3016:
	db T_string	; "Usage: (make-string...
	dq 43
	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
	db 0x69, 0x6E, 0x67, 0x20, 0x73, 0x69, 0x7A, 0x65
	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
	db 0x6C, 0x74, 0x29
	; L_constants + 3068:
	db T_string	; "list->vector"
	dq 12
	db 0x6C, 0x69, 0x73, 0x74, 0x2D, 0x3E, 0x76, 0x65
	db 0x63, 0x74, 0x6F, 0x72
	; L_constants + 3089:
	db T_string	; "vector"
	dq 6
	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72
	; L_constants + 3104:
	db T_string	; "vector->list"
	dq 12
	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x3E
	db 0x6C, 0x69, 0x73, 0x74
	; L_constants + 3125:
	db T_string	; "random"
	dq 6
	db 0x72, 0x61, 0x6E, 0x64, 0x6F, 0x6D
	; L_constants + 3140:
	db T_string	; "positive?"
	dq 9
	db 0x70, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65
	db 0x3F
	; L_constants + 3158:
	db T_string	; "negative?"
	dq 9
	db 0x6E, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65
	db 0x3F
	; L_constants + 3176:
	db T_string	; "even?"
	dq 5
	db 0x65, 0x76, 0x65, 0x6E, 0x3F
	; L_constants + 3190:
	db T_integer	; 2
	dq 2
	; L_constants + 3199:
	db T_string	; "odd?"
	dq 4
	db 0x6F, 0x64, 0x64, 0x3F
	; L_constants + 3212:
	db T_string	; "abs"
	dq 3
	db 0x61, 0x62, 0x73
	; L_constants + 3224:
	db T_string	; "equal?"
	dq 6
	db 0x65, 0x71, 0x75, 0x61, 0x6C, 0x3F
	; L_constants + 3239:
	db T_string	; "assoc"
	dq 5
	db 0x61, 0x73, 0x73, 0x6F, 0x63
	; L_constants + 3253:
	db T_string	; "string-append"
	dq 13
	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x61
	db 0x70, 0x70, 0x65, 0x6E, 0x64
	; L_constants + 3275:
	db T_string	; "vector-append"
	dq 13
	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x61
	db 0x70, 0x70, 0x65, 0x6E, 0x64
	; L_constants + 3297:
	db T_string	; "string-reverse"
	dq 14
	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
	; L_constants + 3320:
	db T_string	; "vector-reverse"
	dq 14
	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
	; L_constants + 3343:
	db T_string	; "string-reverse!"
	dq 15
	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x21
	; L_constants + 3367:
	db T_string	; "vector-reverse!"
	dq 15
	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x21
	; L_constants + 3391:
	db T_string	; "make-list-thunk"
	dq 15
	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
	db 0x74, 0x2D, 0x74, 0x68, 0x75, 0x6E, 0x6B
	; L_constants + 3415:
	db T_string	; "make-string-thunk"
	dq 17
	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
	db 0x69, 0x6E, 0x67, 0x2D, 0x74, 0x68, 0x75, 0x6E
	db 0x6B
	; L_constants + 3441:
	db T_string	; "make-vector-thunk"
	dq 17
	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
	db 0x74, 0x6F, 0x72, 0x2D, 0x74, 0x68, 0x75, 0x6E
	db 0x6B
	; L_constants + 3467:
	db T_string	; "logarithm"
	dq 9
	db 0x6C, 0x6F, 0x67, 0x61, 0x72, 0x69, 0x74, 0x68
	db 0x6D
	; L_constants + 3485:
	db T_real	; 1.000000
	dq 1.000000
	; L_constants + 3494:
	db T_string	; "newline"
	dq 7
	db 0x6E, 0x65, 0x77, 0x6C, 0x69, 0x6E, 0x65
	; L_constants + 3510:
	db T_char, 0x0A	; #\newline
	; L_constants + 3512:
	db T_string	; "void"
	dq 4
	db 0x76, 0x6F, 0x69, 0x64
	; L_constants + 3525:
	db T_integer	; 6
	dq 6
	; L_constants + 3534:
	db T_integer	; 3
	dq 3
free_var_0:	; location of *
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2260

free_var_1:	; location of +
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2125

free_var_2:	; location of -
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2228

free_var_3:	; location of /
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2288

free_var_4:	; location of <
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2320

free_var_5:	; location of <=
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2330

free_var_6:	; location of =
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2362

free_var_7:	; location of >
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2341

free_var_8:	; location of >=
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2351

free_var_9:	; location of __bin-add-qq
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 617

free_var_10:	; location of __bin-add-rr
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 533

free_var_11:	; location of __bin-add-zz
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 701

free_var_12:	; location of __bin-apply
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 513

free_var_13:	; location of __bin-div-qq
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 680

free_var_14:	; location of __bin-div-rr
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 596

free_var_15:	; location of __bin-div-zz
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 764

free_var_16:	; location of __bin-equal-qq
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 903

free_var_17:	; location of __bin-equal-rr
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 880

free_var_18:	; location of __bin-equal-zz
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 926

free_var_19:	; location of __bin-less-than-qq
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 826

free_var_20:	; location of __bin-less-than-rr
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 799

free_var_21:	; location of __bin-less-than-zz
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 853

free_var_22:	; location of __bin-mul-qq
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 659

free_var_23:	; location of __bin-mul-rr
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 575

free_var_24:	; location of __bin-mul-zz
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 743

free_var_25:	; location of __bin-sub-qq
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 638

free_var_26:	; location of __bin-sub-rr
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 554

free_var_27:	; location of __bin-sub-zz
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 722

free_var_28:	; location of __bin_integer_to_fraction
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2144

free_var_29:	; location of __integer-to-fraction
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1186

free_var_30:	; location of abs
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 3212

free_var_31:	; location of andmap
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2042

free_var_32:	; location of append
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2091

free_var_33:	; location of apply
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2002

free_var_34:	; location of assoc
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 3239

free_var_35:	; location of caaaar
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1665

free_var_36:	; location of caaadr
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1680

free_var_37:	; location of caaar
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1553

free_var_38:	; location of caadar
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1695

free_var_39:	; location of caaddr
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1710

free_var_40:	; location of caadr
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1567

free_var_41:	; location of caar
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1501

free_var_42:	; location of cadaar
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1725

free_var_43:	; location of cadadr
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1740

free_var_44:	; location of cadar
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1581

free_var_45:	; location of caddar
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1755

free_var_46:	; location of cadddr
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1770

free_var_47:	; location of caddr
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1595

free_var_48:	; location of cadr
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1514

free_var_49:	; location of car
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 277

free_var_50:	; location of cdaaar
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1785

free_var_51:	; location of cdaadr
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1800

free_var_52:	; location of cdaar
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1609

free_var_53:	; location of cdadar
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1815

free_var_54:	; location of cdaddr
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1830

free_var_55:	; location of cdadr
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1623

free_var_56:	; location of cdar
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1527

free_var_57:	; location of cddaar
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1845

free_var_58:	; location of cddadr
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1860

free_var_59:	; location of cddar
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1637

free_var_60:	; location of cdddar
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1875

free_var_61:	; location of cddddr
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1890

free_var_62:	; location of cdddr
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1651

free_var_63:	; location of cddr
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1540

free_var_64:	; location of cdr
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 289

free_var_65:	; location of char->integer
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 425

free_var_66:	; location of char-ci<=?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2595

free_var_67:	; location of char-ci<?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2577

free_var_68:	; location of char-ci=?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2614

free_var_69:	; location of char-ci>=?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2650

free_var_70:	; location of char-ci>?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2632

free_var_71:	; location of char-downcase
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2527

free_var_72:	; location of char-upcase
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2549

free_var_73:	; location of char<=?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2465

free_var_74:	; location of char<?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2450

free_var_75:	; location of char=?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2481

free_var_76:	; location of char>=?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2511

free_var_77:	; location of char>?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2496

free_var_78:	; location of char?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 48

free_var_79:	; location of cons
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 223

free_var_80:	; location of eq?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1174

free_var_81:	; location of equal?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 3224

free_var_82:	; location of error
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 785

free_var_83:	; location of even?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 3176

free_var_84:	; location of fact
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2307

free_var_85:	; location of fold-left
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2073

free_var_86:	; location of fold-right
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2106

free_var_87:	; location of fraction->real
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 402

free_var_88:	; location of fraction?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 152

free_var_89:	; location of integer->char
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 447

free_var_90:	; location of integer->real
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 380

free_var_91:	; location of integer?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 496

free_var_92:	; location of list
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1919

free_var_93:	; location of list*
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1962

free_var_94:	; location of list->string
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2715

free_var_95:	; location of list->vector
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 3068

free_var_96:	; location of list?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1905

free_var_97:	; location of logarithm
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 3467

free_var_98:	; location of make-list-thunk
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 3391

free_var_99:	; location of make-string
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1116

free_var_100:	; location of make-string-thunk
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 3415

free_var_101:	; location of make-vector
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1096

free_var_102:	; location of make-vector-thunk
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 3441

free_var_103:	; location of map
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2030

free_var_104:	; location of negative?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 3158

free_var_105:	; location of newline
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 3494

free_var_106:	; location of not
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1932

free_var_107:	; location of null?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 6

free_var_108:	; location of number?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 187

free_var_109:	; location of odd?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 3199

free_var_110:	; location of ormap
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2016

free_var_111:	; location of pair?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 20

free_var_112:	; location of positive?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 3140

free_var_113:	; location of random
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 3125

free_var_114:	; location of rational?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1944

free_var_115:	; location of real
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2238

free_var_116:	; location of real?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 138

free_var_117:	; location of remainder
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 966

free_var_118:	; location of reverse
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2057

free_var_119:	; location of string->list
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2736

free_var_120:	; location of string-append
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 3253

free_var_121:	; location of string-ci<=?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2864

free_var_122:	; location of string-ci<?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2844

free_var_123:	; location of string-ci=?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2885

free_var_124:	; location of string-ci>=?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2905

free_var_125:	; location of string-ci>?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2926

free_var_126:	; location of string-downcase
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2669

free_var_127:	; location of string-length
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 301

free_var_128:	; location of string-ref
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1018

free_var_129:	; location of string-reverse
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 3297

free_var_130:	; location of string-reverse!
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 3343

free_var_131:	; location of string-set!
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1076

free_var_132:	; location of string-upcase
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2693

free_var_133:	; location of string<=?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2774

free_var_134:	; location of string<?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2757

free_var_135:	; location of string=?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2792

free_var_136:	; location of string>=?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2809

free_var_137:	; location of string>?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 2827

free_var_138:	; location of string?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 62

free_var_139:	; location of trng
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 469

free_var_140:	; location of vector
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 3089

free_var_141:	; location of vector->list
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 3104

free_var_142:	; location of vector-append
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 3275

free_var_143:	; location of vector-length
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 323

free_var_144:	; location of vector-ref
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1037

free_var_145:	; location of vector-reverse
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 3320

free_var_146:	; location of vector-reverse!
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 3367

free_var_147:	; location of vector-set!
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 1056

free_var_148:	; location of vector?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 103

free_var_149:	; location of void
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 3512

free_var_150:	; location of write-char
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 258

free_var_151:	; location of zero?
	dq .undefined_object
.undefined_object:
	db T_undefined
	dq L_constants + 482


extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
global main
section .text
main:
        enter 0, 0
        push 0
        push 0
        push Lend
        enter 0, 0
	; building closure for null?
	mov rdi, free_var_107
	mov rsi, L_code_ptr_is_null
	call bind_primitive

	; building closure for pair?
	mov rdi, free_var_111
	mov rsi, L_code_ptr_is_pair
	call bind_primitive

	; building closure for char?
	mov rdi, free_var_78
	mov rsi, L_code_ptr_is_char
	call bind_primitive

	; building closure for string?
	mov rdi, free_var_138
	mov rsi, L_code_ptr_is_string
	call bind_primitive

	; building closure for vector?
	mov rdi, free_var_148
	mov rsi, L_code_ptr_is_vector
	call bind_primitive

	; building closure for real?
	mov rdi, free_var_116
	mov rsi, L_code_ptr_is_real
	call bind_primitive

	; building closure for fraction?
	mov rdi, free_var_88
	mov rsi, L_code_ptr_is_fraction
	call bind_primitive

	; building closure for number?
	mov rdi, free_var_108
	mov rsi, L_code_ptr_is_number
	call bind_primitive

	; building closure for cons
	mov rdi, free_var_79
	mov rsi, L_code_ptr_cons
	call bind_primitive

	; building closure for write-char
	mov rdi, free_var_150
	mov rsi, L_code_ptr_write_char
	call bind_primitive

	; building closure for car
	mov rdi, free_var_49
	mov rsi, L_code_ptr_car
	call bind_primitive

	; building closure for cdr
	mov rdi, free_var_64
	mov rsi, L_code_ptr_cdr
	call bind_primitive

	; building closure for string-length
	mov rdi, free_var_127
	mov rsi, L_code_ptr_string_length
	call bind_primitive

	; building closure for vector-length
	mov rdi, free_var_143
	mov rsi, L_code_ptr_vector_length
	call bind_primitive

	; building closure for integer->real
	mov rdi, free_var_90
	mov rsi, L_code_ptr_integer_to_real
	call bind_primitive

	; building closure for fraction->real
	mov rdi, free_var_87
	mov rsi, L_code_ptr_fraction_to_real
	call bind_primitive

	; building closure for char->integer
	mov rdi, free_var_65
	mov rsi, L_code_ptr_char_to_integer
	call bind_primitive

	; building closure for integer->char
	mov rdi, free_var_89
	mov rsi, L_code_ptr_integer_to_char
	call bind_primitive

	; building closure for trng
	mov rdi, free_var_139
	mov rsi, L_code_ptr_trng
	call bind_primitive

	; building closure for zero?
	mov rdi, free_var_151
	mov rsi, L_code_ptr_is_zero
	call bind_primitive

	; building closure for integer?
	mov rdi, free_var_91
	mov rsi, L_code_ptr_is_integer
	call bind_primitive

	; building closure for __bin-apply
	mov rdi, free_var_12
	mov rsi, L_code_ptr_bin_apply
	call bind_primitive

	; building closure for __bin-add-rr
	mov rdi, free_var_10
	mov rsi, L_code_ptr_raw_bin_add_rr
	call bind_primitive

	; building closure for __bin-sub-rr
	mov rdi, free_var_26
	mov rsi, L_code_ptr_raw_bin_sub_rr
	call bind_primitive

	; building closure for __bin-mul-rr
	mov rdi, free_var_23
	mov rsi, L_code_ptr_raw_bin_mul_rr
	call bind_primitive

	; building closure for __bin-div-rr
	mov rdi, free_var_14
	mov rsi, L_code_ptr_raw_bin_div_rr
	call bind_primitive

	; building closure for __bin-add-qq
	mov rdi, free_var_9
	mov rsi, L_code_ptr_raw_bin_add_qq
	call bind_primitive

	; building closure for __bin-sub-qq
	mov rdi, free_var_25
	mov rsi, L_code_ptr_raw_bin_sub_qq
	call bind_primitive

	; building closure for __bin-mul-qq
	mov rdi, free_var_22
	mov rsi, L_code_ptr_raw_bin_mul_qq
	call bind_primitive

	; building closure for __bin-div-qq
	mov rdi, free_var_13
	mov rsi, L_code_ptr_raw_bin_div_qq
	call bind_primitive

	; building closure for __bin-add-zz
	mov rdi, free_var_11
	mov rsi, L_code_ptr_raw_bin_add_zz
	call bind_primitive

	; building closure for __bin-sub-zz
	mov rdi, free_var_27
	mov rsi, L_code_ptr_raw_bin_sub_zz
	call bind_primitive

	; building closure for __bin-mul-zz
	mov rdi, free_var_24
	mov rsi, L_code_ptr_raw_bin_mul_zz
	call bind_primitive

	; building closure for __bin-div-zz
	mov rdi, free_var_15
	mov rsi, L_code_ptr_raw_bin_div_zz
	call bind_primitive

	; building closure for error
	mov rdi, free_var_82
	mov rsi, L_code_ptr_error
	call bind_primitive

	; building closure for __bin-less-than-rr
	mov rdi, free_var_20
	mov rsi, L_code_ptr_raw_less_than_rr
	call bind_primitive

	; building closure for __bin-less-than-qq
	mov rdi, free_var_19
	mov rsi, L_code_ptr_raw_less_than_qq
	call bind_primitive

	; building closure for __bin-less-than-zz
	mov rdi, free_var_21
	mov rsi, L_code_ptr_raw_less_than_zz
	call bind_primitive

	; building closure for __bin-equal-rr
	mov rdi, free_var_17
	mov rsi, L_code_ptr_raw_equal_rr
	call bind_primitive

	; building closure for __bin-equal-qq
	mov rdi, free_var_16
	mov rsi, L_code_ptr_raw_equal_qq
	call bind_primitive

	; building closure for __bin-equal-zz
	mov rdi, free_var_18
	mov rsi, L_code_ptr_raw_equal_zz
	call bind_primitive

	; building closure for remainder
	mov rdi, free_var_117
	mov rsi, L_code_ptr_remainder
	call bind_primitive

	; building closure for string-ref
	mov rdi, free_var_128
	mov rsi, L_code_ptr_string_ref
	call bind_primitive

	; building closure for vector-ref
	mov rdi, free_var_144
	mov rsi, L_code_ptr_vector_ref
	call bind_primitive

	; building closure for vector-set!
	mov rdi, free_var_147
	mov rsi, L_code_ptr_vector_set
	call bind_primitive

	; building closure for string-set!
	mov rdi, free_var_131
	mov rsi, L_code_ptr_string_set
	call bind_primitive

	; building closure for make-vector
	mov rdi, free_var_101
	mov rsi, L_code_ptr_make_vector
	call bind_primitive

	; building closure for make-string
	mov rdi, free_var_99
	mov rsi, L_code_ptr_make_string
	call bind_primitive

	; building closure for eq?
	mov rdi, free_var_80
	mov rsi, L_code_ptr_is_eq
	call bind_primitive

	; building closure for __integer-to-fraction
	mov rdi, free_var_29
	mov rsi, L_code_ptr_integer_to_fraction
	call bind_primitive

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00c4:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00c4
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00c4
.L_lambda_simple_env_end_00c4:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00c4:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00c4
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00c4
.L_lambda_simple_params_end_00c4:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c4
	jmp .L_lambda_simple_end_00c4
.L_lambda_simple_code_00c4:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00c4
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00c4:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param x
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0115:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0115
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0115
.L_tc_recycle_frame_done_0115:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00c4:	; new closure is in rax
	mov qword [free_var_41], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00c5:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00c5
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00c5
.L_lambda_simple_env_end_00c5:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00c5:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00c5
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00c5
.L_lambda_simple_params_end_00c5:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c5
	jmp .L_lambda_simple_end_00c5
.L_lambda_simple_code_00c5:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00c5
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00c5:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param x
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0116:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0116
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0116
.L_tc_recycle_frame_done_0116:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00c5:	; new closure is in rax
	mov qword [free_var_48], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00c6:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00c6
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00c6
.L_lambda_simple_env_end_00c6:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00c6:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00c6
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00c6
.L_lambda_simple_params_end_00c6:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c6
	jmp .L_lambda_simple_end_00c6
.L_lambda_simple_code_00c6:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00c6
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00c6:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param x
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0117:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0117
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0117
.L_tc_recycle_frame_done_0117:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00c6:	; new closure is in rax
	mov qword [free_var_56], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00c7:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00c7
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00c7
.L_lambda_simple_env_end_00c7:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00c7:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00c7
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00c7
.L_lambda_simple_params_end_00c7:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c7
	jmp .L_lambda_simple_end_00c7
.L_lambda_simple_code_00c7:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00c7
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00c7:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param x
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0118:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0118
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0118
.L_tc_recycle_frame_done_0118:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00c7:	; new closure is in rax
	mov qword [free_var_63], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00c8:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00c8
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00c8
.L_lambda_simple_env_end_00c8:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00c8:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00c8
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00c8
.L_lambda_simple_params_end_00c8:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c8
	jmp .L_lambda_simple_end_00c8
.L_lambda_simple_code_00c8:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00c8
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00c8:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param x
	push rax
	push 1	; arg count
	mov rax, qword [free_var_41]	; free var caar
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0119:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0119
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0119
.L_tc_recycle_frame_done_0119:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00c8:	; new closure is in rax
	mov qword [free_var_37], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00c9:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00c9
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00c9
.L_lambda_simple_env_end_00c9:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00c9:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00c9
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00c9
.L_lambda_simple_params_end_00c9:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c9
	jmp .L_lambda_simple_end_00c9
.L_lambda_simple_code_00c9:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00c9
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00c9:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param x
	push rax
	push 1	; arg count
	mov rax, qword [free_var_48]	; free var cadr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_011a:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_011a
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_011a
.L_tc_recycle_frame_done_011a:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00c9:	; new closure is in rax
	mov qword [free_var_40], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00ca:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00ca
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00ca
.L_lambda_simple_env_end_00ca:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00ca:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00ca
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00ca
.L_lambda_simple_params_end_00ca:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ca
	jmp .L_lambda_simple_end_00ca
.L_lambda_simple_code_00ca:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00ca
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00ca:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param x
	push rax
	push 1	; arg count
	mov rax, qword [free_var_56]	; free var cdar
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_011b:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_011b
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_011b
.L_tc_recycle_frame_done_011b:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00ca:	; new closure is in rax
	mov qword [free_var_44], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00cb:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00cb
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00cb
.L_lambda_simple_env_end_00cb:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00cb:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00cb
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00cb
.L_lambda_simple_params_end_00cb:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00cb
	jmp .L_lambda_simple_end_00cb
.L_lambda_simple_code_00cb:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00cb
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00cb:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param x
	push rax
	push 1	; arg count
	mov rax, qword [free_var_63]	; free var cddr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_011c:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_011c
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_011c
.L_tc_recycle_frame_done_011c:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00cb:	; new closure is in rax
	mov qword [free_var_47], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00cc:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00cc
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00cc
.L_lambda_simple_env_end_00cc:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00cc:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00cc
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00cc
.L_lambda_simple_params_end_00cc:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00cc
	jmp .L_lambda_simple_end_00cc
.L_lambda_simple_code_00cc:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00cc
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00cc:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param x
	push rax
	push 1	; arg count
	mov rax, qword [free_var_41]	; free var caar
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_011d:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_011d
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_011d
.L_tc_recycle_frame_done_011d:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00cc:	; new closure is in rax
	mov qword [free_var_52], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00cd:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00cd
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00cd
.L_lambda_simple_env_end_00cd:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00cd:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00cd
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00cd
.L_lambda_simple_params_end_00cd:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00cd
	jmp .L_lambda_simple_end_00cd
.L_lambda_simple_code_00cd:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00cd
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00cd:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param x
	push rax
	push 1	; arg count
	mov rax, qword [free_var_48]	; free var cadr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_011e:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_011e
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_011e
.L_tc_recycle_frame_done_011e:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00cd:	; new closure is in rax
	mov qword [free_var_55], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00ce:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00ce
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00ce
.L_lambda_simple_env_end_00ce:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00ce:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00ce
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00ce
.L_lambda_simple_params_end_00ce:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ce
	jmp .L_lambda_simple_end_00ce
.L_lambda_simple_code_00ce:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00ce
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00ce:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param x
	push rax
	push 1	; arg count
	mov rax, qword [free_var_56]	; free var cdar
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_011f:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_011f
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_011f
.L_tc_recycle_frame_done_011f:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00ce:	; new closure is in rax
	mov qword [free_var_59], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00cf:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00cf
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00cf
.L_lambda_simple_env_end_00cf:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00cf:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00cf
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00cf
.L_lambda_simple_params_end_00cf:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00cf
	jmp .L_lambda_simple_end_00cf
.L_lambda_simple_code_00cf:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00cf
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00cf:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param x
	push rax
	push 1	; arg count
	mov rax, qword [free_var_63]	; free var cddr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0120:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0120
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0120
.L_tc_recycle_frame_done_0120:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00cf:	; new closure is in rax
	mov qword [free_var_62], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00d0:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00d0
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00d0
.L_lambda_simple_env_end_00d0:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00d0:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00d0
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00d0
.L_lambda_simple_params_end_00d0:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d0
	jmp .L_lambda_simple_end_00d0
.L_lambda_simple_code_00d0:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00d0
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00d0:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param x
	push rax
	push 1	; arg count
	mov rax, qword [free_var_41]	; free var caar
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_41]	; free var caar
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0121:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0121
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0121
.L_tc_recycle_frame_done_0121:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00d0:	; new closure is in rax
	mov qword [free_var_35], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00d1:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00d1
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00d1
.L_lambda_simple_env_end_00d1:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00d1:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00d1
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00d1
.L_lambda_simple_params_end_00d1:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d1
	jmp .L_lambda_simple_end_00d1
.L_lambda_simple_code_00d1:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00d1
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00d1:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param x
	push rax
	push 1	; arg count
	mov rax, qword [free_var_48]	; free var cadr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_41]	; free var caar
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0122:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0122
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0122
.L_tc_recycle_frame_done_0122:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00d1:	; new closure is in rax
	mov qword [free_var_36], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00d2:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00d2
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00d2
.L_lambda_simple_env_end_00d2:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00d2:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00d2
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00d2
.L_lambda_simple_params_end_00d2:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d2
	jmp .L_lambda_simple_end_00d2
.L_lambda_simple_code_00d2:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00d2
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00d2:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param x
	push rax
	push 1	; arg count
	mov rax, qword [free_var_56]	; free var cdar
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_41]	; free var caar
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0123:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0123
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0123
.L_tc_recycle_frame_done_0123:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00d2:	; new closure is in rax
	mov qword [free_var_38], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00d3:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00d3
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00d3
.L_lambda_simple_env_end_00d3:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00d3:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00d3
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00d3
.L_lambda_simple_params_end_00d3:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d3
	jmp .L_lambda_simple_end_00d3
.L_lambda_simple_code_00d3:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00d3
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00d3:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param x
	push rax
	push 1	; arg count
	mov rax, qword [free_var_63]	; free var cddr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_41]	; free var caar
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0124:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0124
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0124
.L_tc_recycle_frame_done_0124:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00d3:	; new closure is in rax
	mov qword [free_var_39], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00d4:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00d4
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00d4
.L_lambda_simple_env_end_00d4:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00d4:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00d4
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00d4
.L_lambda_simple_params_end_00d4:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d4
	jmp .L_lambda_simple_end_00d4
.L_lambda_simple_code_00d4:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00d4
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00d4:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param x
	push rax
	push 1	; arg count
	mov rax, qword [free_var_41]	; free var caar
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_48]	; free var cadr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0125:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0125
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0125
.L_tc_recycle_frame_done_0125:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00d4:	; new closure is in rax
	mov qword [free_var_42], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00d5:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00d5
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00d5
.L_lambda_simple_env_end_00d5:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00d5:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00d5
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00d5
.L_lambda_simple_params_end_00d5:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d5
	jmp .L_lambda_simple_end_00d5
.L_lambda_simple_code_00d5:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00d5
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00d5:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param x
	push rax
	push 1	; arg count
	mov rax, qword [free_var_48]	; free var cadr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_48]	; free var cadr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0126:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0126
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0126
.L_tc_recycle_frame_done_0126:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00d5:	; new closure is in rax
	mov qword [free_var_43], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00d6:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00d6
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00d6
.L_lambda_simple_env_end_00d6:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00d6:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00d6
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00d6
.L_lambda_simple_params_end_00d6:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d6
	jmp .L_lambda_simple_end_00d6
.L_lambda_simple_code_00d6:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00d6
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00d6:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param x
	push rax
	push 1	; arg count
	mov rax, qword [free_var_56]	; free var cdar
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_48]	; free var cadr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0127:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0127
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0127
.L_tc_recycle_frame_done_0127:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00d6:	; new closure is in rax
	mov qword [free_var_45], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00d7:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00d7
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00d7
.L_lambda_simple_env_end_00d7:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00d7:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00d7
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00d7
.L_lambda_simple_params_end_00d7:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d7
	jmp .L_lambda_simple_end_00d7
.L_lambda_simple_code_00d7:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00d7
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00d7:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param x
	push rax
	push 1	; arg count
	mov rax, qword [free_var_63]	; free var cddr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_48]	; free var cadr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0128:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0128
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0128
.L_tc_recycle_frame_done_0128:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00d7:	; new closure is in rax
	mov qword [free_var_46], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00d8:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00d8
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00d8
.L_lambda_simple_env_end_00d8:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00d8:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00d8
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00d8
.L_lambda_simple_params_end_00d8:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d8
	jmp .L_lambda_simple_end_00d8
.L_lambda_simple_code_00d8:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00d8
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00d8:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param x
	push rax
	push 1	; arg count
	mov rax, qword [free_var_41]	; free var caar
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_56]	; free var cdar
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0129:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0129
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0129
.L_tc_recycle_frame_done_0129:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00d8:	; new closure is in rax
	mov qword [free_var_50], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00d9:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00d9
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00d9
.L_lambda_simple_env_end_00d9:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00d9:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00d9
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00d9
.L_lambda_simple_params_end_00d9:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d9
	jmp .L_lambda_simple_end_00d9
.L_lambda_simple_code_00d9:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00d9
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00d9:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param x
	push rax
	push 1	; arg count
	mov rax, qword [free_var_48]	; free var cadr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_56]	; free var cdar
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_012a:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_012a
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_012a
.L_tc_recycle_frame_done_012a:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00d9:	; new closure is in rax
	mov qword [free_var_51], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00da:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00da
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00da
.L_lambda_simple_env_end_00da:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00da:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00da
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00da
.L_lambda_simple_params_end_00da:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00da
	jmp .L_lambda_simple_end_00da
.L_lambda_simple_code_00da:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00da
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00da:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param x
	push rax
	push 1	; arg count
	mov rax, qword [free_var_56]	; free var cdar
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_56]	; free var cdar
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_012b:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_012b
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_012b
.L_tc_recycle_frame_done_012b:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00da:	; new closure is in rax
	mov qword [free_var_53], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00db:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00db
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00db
.L_lambda_simple_env_end_00db:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00db:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00db
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00db
.L_lambda_simple_params_end_00db:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00db
	jmp .L_lambda_simple_end_00db
.L_lambda_simple_code_00db:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00db
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00db:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param x
	push rax
	push 1	; arg count
	mov rax, qword [free_var_63]	; free var cddr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_56]	; free var cdar
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_012c:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_012c
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_012c
.L_tc_recycle_frame_done_012c:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00db:	; new closure is in rax
	mov qword [free_var_54], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00dc:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00dc
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00dc
.L_lambda_simple_env_end_00dc:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00dc:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00dc
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00dc
.L_lambda_simple_params_end_00dc:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00dc
	jmp .L_lambda_simple_end_00dc
.L_lambda_simple_code_00dc:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00dc
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00dc:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param x
	push rax
	push 1	; arg count
	mov rax, qword [free_var_41]	; free var caar
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_63]	; free var cddr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_012d:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_012d
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_012d
.L_tc_recycle_frame_done_012d:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00dc:	; new closure is in rax
	mov qword [free_var_57], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00dd:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00dd
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00dd
.L_lambda_simple_env_end_00dd:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00dd:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00dd
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00dd
.L_lambda_simple_params_end_00dd:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00dd
	jmp .L_lambda_simple_end_00dd
.L_lambda_simple_code_00dd:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00dd
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00dd:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param x
	push rax
	push 1	; arg count
	mov rax, qword [free_var_48]	; free var cadr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_63]	; free var cddr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_012e:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_012e
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_012e
.L_tc_recycle_frame_done_012e:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00dd:	; new closure is in rax
	mov qword [free_var_58], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00de:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00de
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00de
.L_lambda_simple_env_end_00de:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00de:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00de
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00de
.L_lambda_simple_params_end_00de:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00de
	jmp .L_lambda_simple_end_00de
.L_lambda_simple_code_00de:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00de
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00de:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param x
	push rax
	push 1	; arg count
	mov rax, qword [free_var_56]	; free var cdar
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_63]	; free var cddr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_012f:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_012f
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_012f
.L_tc_recycle_frame_done_012f:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00de:	; new closure is in rax
	mov qword [free_var_60], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00df:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00df
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00df
.L_lambda_simple_env_end_00df:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00df:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00df
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00df
.L_lambda_simple_params_end_00df:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00df
	jmp .L_lambda_simple_end_00df
.L_lambda_simple_code_00df:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00df
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00df:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param x
	push rax
	push 1	; arg count
	mov rax, qword [free_var_63]	; free var cddr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_63]	; free var cddr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0130:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0130
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0130
.L_tc_recycle_frame_done_0130:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00df:	; new closure is in rax
	mov qword [free_var_61], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00e0:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00e0
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00e0
.L_lambda_simple_env_end_00e0:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00e0:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00e0
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00e0
.L_lambda_simple_params_end_00e0:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e0
	jmp .L_lambda_simple_end_00e0
.L_lambda_simple_code_00e0:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00e0
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00e0:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param e
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	jne .L_or_end_0012
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param e
	push rax
	push 1	; arg count
	mov rax, qword [free_var_111]	; free var pair?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_0097
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param e
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_96]	; free var list?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0131:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0131
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0131
.L_tc_recycle_frame_done_0131:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_0097
.L_if_else_0097:
	mov rax, L_constants + 2
.L_if_end_0097:
.L_or_end_0012:
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00e0:	; new closure is in rax
	mov qword [free_var_96], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_opt_env_loop_0019:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_opt_env_end_0019
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_opt_env_loop_0019
.L_lambda_opt_env_end_0019:
	pop rbx
	mov rsi, 0
.L_lambda_opt_params_loop_0019:	; copy params
	cmp rsi, 0
	je .L_lambda_opt_params_end_0019
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_opt_params_loop_0019
.L_lambda_opt_params_end_0019:
	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0019
	jmp .L_lambda_opt_end_0019
.L_lambda_opt_code_0019:	; lambda-opt body
	cmp qword [rsp + 8 * 2], 0
	je .L_lambda_opt_arity_check_exact_0019
	jg .L_lambda_opt_arity_check_more_0019
	push qword [rsp + 8 * 2]
	push 0
	jmp L_error_incorrect_arity_opt
.L_lambda_opt_arity_check_exact_0019:
	sub rsp, 8
	mov rax, qword[rsp + 8 *1]
	mov qword[rsp], rax  
	mov rax, qword[rsp + 8 *2] ;rax now holds env 
	mov qword[rsp + 8 * 1], rax
	mov rax, 1
	mov qword[rsp + 8 *2], rax
	mov rax, sob_nil
	mov qword[rsp + 8 * (3 + 0)], rax
	enter 0, 0
	mov rax, PARAM(0)	; param args
	leave
	ret AND_KILL_FRAME(1)
	jmp .L_lambda_opt_end_0019	; new closure is in rax
.L_lambda_opt_arity_check_more_0019:
	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
	mov r9, sob_nil
	mov rbx, rsp 
	add rbx, 3*8 	; now rbx is pointing to the first param
	dec r8	 ;to get to the top - starting at 0 not 1
	shl r8, 3
	add rbx, r8	 ;rbx now points to the last opt param that was pushed
	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
.L_lambda_opt_stack_shrink_loop_0019:
	cmp r8, 0
	je .L_lambda_opt_stack_shrink_loop_exit_0019
	mov rdi, 1+8+8 ;for pair
	call malloc;to create the pair in the stack
	mov byte [rax], T_pair ; to make it a pair
	mov rcx, qword[rbx] ;rcx is holding the param to copy
	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 	mov qword[rax+1+8],r9
	mov r9, rax ;for the recursion 
	dec r8 ;we finished copy another opt param to the list
	sub rbx, 8 ;to get the next param to copy
	jmp .L_lambda_opt_stack_shrink_loop_0019
.L_lambda_opt_stack_shrink_loop_exit_0019:
	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
	sub rcx, 1
	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
	add rsp, rcx ;shrinking the stack
	mov rax, rsp
	sub rax, rcx ;now rax is pointing on the original ret
	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
	dec r8 ;we start with param 0, not 1 
	add rax, 3 * 8;now rax is param 0
	shl r8, 3;convert to byte
	add rax, r8;now rax is the top of the stack
	mov qword[rax], r9;puting the list at the top
	sub rax, 8;rax is the adress to copy to the not optional params
	mov rbx, rsp 
	sub rbx, rcx;rbx is the ret adress in the original
	mov r10, 0;r10 is the not opt params length
	dec r10 
	shl r10, 3;to get bytes
	add rbx, 3*8;rbx is the first param
	add rbx, r10; rbx is where the address to copy to
	mov rax, rsp
	sub rax, rcx 	 ;now rax is original ret
	mov qword [rsp+2*8], 1
	mov rbx, qword[rax + 8 *1]
	mov qword [rsp + 1*8] ,rbx
	mov rbx, qword[rax]
	mov qword [rsp], rbx
	enter 0, 0
	mov rax, PARAM(0)	; param args
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_opt_end_0019:	; new closure is in rax
	mov qword [free_var_92], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00e1:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00e1
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00e1
.L_lambda_simple_env_end_00e1:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00e1:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00e1
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00e1
.L_lambda_simple_params_end_00e1:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e1
	jmp .L_lambda_simple_end_00e1
.L_lambda_simple_code_00e1:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00e1
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00e1:
	enter 0, 0
	mov rax, PARAM(0)	; param x
	cmp rax, sob_boolean_false
	je .L_if_else_0098
	mov rax, L_constants + 2
	jmp .L_if_end_0098
.L_if_else_0098:
	mov rax, L_constants + 3
.L_if_end_0098:
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00e1:	; new closure is in rax
	mov qword [free_var_106], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00e2:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00e2
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00e2
.L_lambda_simple_env_end_00e2:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00e2:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00e2
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00e2
.L_lambda_simple_params_end_00e2:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e2
	jmp .L_lambda_simple_end_00e2
.L_lambda_simple_code_00e2:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00e2
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00e2:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param q
	push rax
	push 1	; arg count
	mov rax, qword [free_var_91]	; free var integer?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	jne .L_or_end_0013
	; preparing a tail-call
	mov rax, PARAM(0)	; param q
	push rax
	push 1	; arg count
	mov rax, qword [free_var_88]	; free var fraction?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0132:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0132
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0132
.L_tc_recycle_frame_done_0132:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_or_end_0013:
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00e2:	; new closure is in rax
	mov qword [free_var_114], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	; preparing a non-tail-call
	mov rax, L_constants + 1993
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00e3:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00e3
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00e3
.L_lambda_simple_env_end_00e3:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00e3:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00e3
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00e3
.L_lambda_simple_params_end_00e3:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e3
	jmp .L_lambda_simple_end_00e3
.L_lambda_simple_code_00e3:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00e3
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00e3:
	enter 0, 0
	mov rdi, 8*1
	call malloc
	mov rbx, PARAM(0)
	mov qword[rax], rbx
	mov PARAM(0), rax
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00e4:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_00e4
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00e4
.L_lambda_simple_env_end_00e4:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00e4:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_00e4
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00e4
.L_lambda_simple_params_end_00e4:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e4
	jmp .L_lambda_simple_end_00e4
.L_lambda_simple_code_00e4:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_00e4
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00e4:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_0099
	mov rax, PARAM(0)	; param a
	jmp .L_if_end_0099
.L_if_else_0099:
	; preparing a tail-call
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, qword [free_var_79]	; free var cons
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0133:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0133
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0133
.L_tc_recycle_frame_done_0133:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_0099:
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_00e4:	; new closure is in rax
	push rax
	mov rax, PARAM(0)	; param run
	pop qword [rax]
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_opt_env_loop_001a:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_opt_env_end_001a
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_opt_env_loop_001a
.L_lambda_opt_env_end_001a:
	pop rbx
	mov rsi, 0
.L_lambda_opt_params_loop_001a:	; copy params
	cmp rsi, 1
	je .L_lambda_opt_params_end_001a
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_opt_params_loop_001a
.L_lambda_opt_params_end_001a:
	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_001a
	jmp .L_lambda_opt_end_001a
.L_lambda_opt_code_001a:	; lambda-opt body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_opt_arity_check_exact_001a
	jg .L_lambda_opt_arity_check_more_001a
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_opt
.L_lambda_opt_arity_check_exact_001a:
	sub rsp, 8
	mov rax, qword[rsp + 8 *1]
	mov qword[rsp], rax  
	mov rax, qword[rsp + 8 *2] ;rax now holds env 
	mov qword[rsp + 8 * 1], rax
	mov rax, 2
	mov qword[rsp + 8 *2], rax
	mov rax, qword[rsp + 8 * (4 + 0)]
	mov qword[rsp + 8 * (3 + 0)], rax
	mov rax, sob_nil
	mov qword[rsp + 8 * (3 + 1)], rax
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(1)	; param s
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0135:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0135
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0135
.L_tc_recycle_frame_done_0135:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(2)
	jmp .L_lambda_opt_end_001a	; new closure is in rax
.L_lambda_opt_arity_check_more_001a:
	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
	mov r9, sob_nil
	mov rbx, rsp 
	add rbx, 3*8 	; now rbx is pointing to the first param
	dec r8	 ;to get to the top - starting at 0 not 1
	shl r8, 3
	add rbx, r8	 ;rbx now points to the last opt param that was pushed
	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
.L_lambda_opt_stack_shrink_loop_001a:
	cmp r8, 1
	je .L_lambda_opt_stack_shrink_loop_exit_001a
	mov rdi, 1+8+8 ;for pair
	call malloc;to create the pair in the stack
	mov byte [rax], T_pair ; to make it a pair
	mov rcx, qword[rbx] ;rcx is holding the param to copy
	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 	mov qword[rax+1+8],r9
	mov r9, rax ;for the recursion 
	dec r8 ;we finished copy another opt param to the list
	sub rbx, 8 ;to get the next param to copy
	jmp .L_lambda_opt_stack_shrink_loop_001a
.L_lambda_opt_stack_shrink_loop_exit_001a:
	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
	sub rcx, 2
	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
	add rsp, rcx ;shrinking the stack
	mov rax, rsp
	sub rax, rcx ;now rax is pointing on the original ret
	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
	dec r8 ;we start with param 0, not 1 
	add rax, 3 * 8;now rax is param 0
	shl r8, 3;convert to byte
	add rax, r8;now rax is the top of the stack
	mov qword[rax], r9;puting the list at the top
	sub rax, 8;rax is the adress to copy to the not optional params
	mov rbx, rsp 
	sub rbx, rcx;rbx is the ret adress in the original
	mov r10, 1;r10 is the not opt params length
	dec r10 
	shl r10, 3;to get bytes
	add rbx, 3*8;rbx is the first param
	add rbx, r10; rbx is where the address to copy to
	mov r8, qword [rbx] 	;r8 is holding the param to copy
	mov qword[rax], r8
	sub rax, 8
	sub rbx, 8
	mov rax, rsp
	sub rax, rcx 	 ;now rax is original ret
	mov qword [rsp+2*8], 2
	mov rbx, qword[rax + 8 *1]
	mov qword [rsp + 1*8] ,rbx
	mov rbx, qword[rax]
	mov qword [rsp], rbx
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(1)	; param s
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0134:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0134
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0134
.L_tc_recycle_frame_done_0134:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_opt_end_001a:	; new closure is in rax
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00e3:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_93], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	; preparing a non-tail-call
	mov rax, L_constants + 1993
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00e5:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00e5
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00e5
.L_lambda_simple_env_end_00e5:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00e5:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00e5
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00e5
.L_lambda_simple_params_end_00e5:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e5
	jmp .L_lambda_simple_end_00e5
.L_lambda_simple_code_00e5:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00e5
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00e5:
	enter 0, 0
	mov rdi, 8*1
	call malloc
	mov rbx, PARAM(0)
	mov qword[rax], rbx
	mov PARAM(0), rax
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00e6:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_00e6
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00e6
.L_lambda_simple_env_end_00e6:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00e6:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_00e6
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00e6
.L_lambda_simple_params_end_00e6:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e6
	jmp .L_lambda_simple_end_00e6
.L_lambda_simple_code_00e6:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_00e6
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00e6:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_111]	; free var pair?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_009a
	; preparing a tail-call
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, qword [free_var_79]	; free var cons
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0136:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0136
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0136
.L_tc_recycle_frame_done_0136:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_009a
.L_if_else_009a:
	mov rax, PARAM(0)	; param a
.L_if_end_009a:
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_00e6:	; new closure is in rax
	push rax
	mov rax, PARAM(0)	; param run
	pop qword [rax]
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_opt_env_loop_001b:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_opt_env_end_001b
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_opt_env_loop_001b
.L_lambda_opt_env_end_001b:
	pop rbx
	mov rsi, 0
.L_lambda_opt_params_loop_001b:	; copy params
	cmp rsi, 1
	je .L_lambda_opt_params_end_001b
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_opt_params_loop_001b
.L_lambda_opt_params_end_001b:
	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_001b
	jmp .L_lambda_opt_end_001b
.L_lambda_opt_code_001b:	; lambda-opt body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_opt_arity_check_exact_001b
	jg .L_lambda_opt_arity_check_more_001b
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_opt
.L_lambda_opt_arity_check_exact_001b:
	sub rsp, 8
	mov rax, qword[rsp + 8 *1]
	mov qword[rsp], rax  
	mov rax, qword[rsp + 8 *2] ;rax now holds env 
	mov qword[rsp + 8 * 1], rax
	mov rax, 2
	mov qword[rsp + 8 *2], rax
	mov rax, qword[rsp + 8 * (4 + 0)]
	mov qword[rsp + 8 * (3 + 0)], rax
	mov rax, sob_nil
	mov qword[rsp + 8 * (3 + 1)], rax
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param f
	push rax
	push 2	; arg count
	mov rax, qword [free_var_12]	; free var __bin-apply
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0138:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0138
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0138
.L_tc_recycle_frame_done_0138:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(2)
	jmp .L_lambda_opt_end_001b	; new closure is in rax
.L_lambda_opt_arity_check_more_001b:
	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
	mov r9, sob_nil
	mov rbx, rsp 
	add rbx, 3*8 	; now rbx is pointing to the first param
	dec r8	 ;to get to the top - starting at 0 not 1
	shl r8, 3
	add rbx, r8	 ;rbx now points to the last opt param that was pushed
	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
.L_lambda_opt_stack_shrink_loop_001b:
	cmp r8, 1
	je .L_lambda_opt_stack_shrink_loop_exit_001b
	mov rdi, 1+8+8 ;for pair
	call malloc;to create the pair in the stack
	mov byte [rax], T_pair ; to make it a pair
	mov rcx, qword[rbx] ;rcx is holding the param to copy
	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 	mov qword[rax+1+8],r9
	mov r9, rax ;for the recursion 
	dec r8 ;we finished copy another opt param to the list
	sub rbx, 8 ;to get the next param to copy
	jmp .L_lambda_opt_stack_shrink_loop_001b
.L_lambda_opt_stack_shrink_loop_exit_001b:
	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
	sub rcx, 2
	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
	add rsp, rcx ;shrinking the stack
	mov rax, rsp
	sub rax, rcx ;now rax is pointing on the original ret
	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
	dec r8 ;we start with param 0, not 1 
	add rax, 3 * 8;now rax is param 0
	shl r8, 3;convert to byte
	add rax, r8;now rax is the top of the stack
	mov qword[rax], r9;puting the list at the top
	sub rax, 8;rax is the adress to copy to the not optional params
	mov rbx, rsp 
	sub rbx, rcx;rbx is the ret adress in the original
	mov r10, 1;r10 is the not opt params length
	dec r10 
	shl r10, 3;to get bytes
	add rbx, 3*8;rbx is the first param
	add rbx, r10; rbx is where the address to copy to
	mov r8, qword [rbx] 	;r8 is holding the param to copy
	mov qword[rax], r8
	sub rax, 8
	sub rbx, 8
	mov rax, rsp
	sub rax, rcx 	 ;now rax is original ret
	mov qword [rsp+2*8], 2
	mov rbx, qword[rax + 8 *1]
	mov qword [rsp + 1*8] ,rbx
	mov rbx, qword[rax]
	mov qword [rsp], rbx
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param f
	push rax
	push 2	; arg count
	mov rax, qword [free_var_12]	; free var __bin-apply
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0137:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0137
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0137
.L_tc_recycle_frame_done_0137:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_opt_end_001b:	; new closure is in rax
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00e5:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_33], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_opt_env_loop_001c:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_opt_env_end_001c
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_opt_env_loop_001c
.L_lambda_opt_env_end_001c:
	pop rbx
	mov rsi, 0
.L_lambda_opt_params_loop_001c:	; copy params
	cmp rsi, 0
	je .L_lambda_opt_params_end_001c
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_opt_params_loop_001c
.L_lambda_opt_params_end_001c:
	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_001c
	jmp .L_lambda_opt_end_001c
.L_lambda_opt_code_001c:	; lambda-opt body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_opt_arity_check_exact_001c
	jg .L_lambda_opt_arity_check_more_001c
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_opt
.L_lambda_opt_arity_check_exact_001c:
	sub rsp, 8
	mov rax, qword[rsp + 8 *1]
	mov qword[rsp], rax  
	mov rax, qword[rsp + 8 *2] ;rax now holds env 
	mov qword[rsp + 8 * 1], rax
	mov rax, 2
	mov qword[rsp + 8 *2], rax
	mov rax, qword[rsp + 8 * (4 + 0)]
	mov qword[rsp + 8 * (3 + 0)], rax
	mov rax, sob_nil
	mov qword[rsp + 8 * (3 + 1)], rax
	enter 0, 0
	; preparing a tail-call
	mov rax, L_constants + 1993
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00e9:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_00e9
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00e9
.L_lambda_simple_env_end_00e9:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00e9:	; copy params
	cmp rsi, 2
	je .L_lambda_simple_params_end_00e9
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00e9
.L_lambda_simple_params_end_00e9:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e9
	jmp .L_lambda_simple_end_00e9
.L_lambda_simple_code_00e9:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00e9
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00e9:
	enter 0, 0
	mov rdi, 8*1
	call malloc
	mov rbx, PARAM(0)
	mov qword[rax], rbx
	mov PARAM(0), rax
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00ea:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_simple_env_end_00ea
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00ea
.L_lambda_simple_env_end_00ea:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00ea:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_00ea
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00ea
.L_lambda_simple_params_end_00ea:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ea
	jmp .L_lambda_simple_end_00ea
.L_lambda_simple_code_00ea:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00ea
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00ea:
	enter 0, 0
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_111]	; free var pair?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_009d
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param s
	push rax
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, qword [free_var_103]	; free var map
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var f
	push rax
	push 2	; arg count
	mov rax, qword [free_var_33]	; free var apply
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	jne .L_or_end_0015
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param s
	push rax
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, qword [free_var_103]	; free var map
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var loop
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_013c:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_013c
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_013c
.L_tc_recycle_frame_done_013c:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_or_end_0015:
	jmp .L_if_end_009d
.L_if_else_009d:
	mov rax, L_constants + 2
.L_if_end_009d:
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00ea:	; new closure is in rax
	push rax
	mov rax, PARAM(0)	; param loop
	pop qword [rax]
	mov rax, sob_void

	; preparing a non-tail-call
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 1]	; bound var s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_111]	; free var pair?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_009e
	; preparing a tail-call
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 1]	; bound var s
	push rax
	push 1	; arg count
	mov rax, PARAM(0)	; param loop
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_013d:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_013d
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_013d
.L_tc_recycle_frame_done_013d:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_009e
.L_if_else_009e:
	mov rax, L_constants + 2
.L_if_end_009e:
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00e9:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_013e:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_013e
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_013e
.L_tc_recycle_frame_done_013e:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(2)
	jmp .L_lambda_opt_end_001c	; new closure is in rax
.L_lambda_opt_arity_check_more_001c:
	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
	mov r9, sob_nil
	mov rbx, rsp 
	add rbx, 3*8 	; now rbx is pointing to the first param
	dec r8	 ;to get to the top - starting at 0 not 1
	shl r8, 3
	add rbx, r8	 ;rbx now points to the last opt param that was pushed
	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
.L_lambda_opt_stack_shrink_loop_001c:
	cmp r8, 1
	je .L_lambda_opt_stack_shrink_loop_exit_001c
	mov rdi, 1+8+8 ;for pair
	call malloc;to create the pair in the stack
	mov byte [rax], T_pair ; to make it a pair
	mov rcx, qword[rbx] ;rcx is holding the param to copy
	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 	mov qword[rax+1+8],r9
	mov r9, rax ;for the recursion 
	dec r8 ;we finished copy another opt param to the list
	sub rbx, 8 ;to get the next param to copy
	jmp .L_lambda_opt_stack_shrink_loop_001c
.L_lambda_opt_stack_shrink_loop_exit_001c:
	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
	sub rcx, 2
	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
	add rsp, rcx ;shrinking the stack
	mov rax, rsp
	sub rax, rcx ;now rax is pointing on the original ret
	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
	dec r8 ;we start with param 0, not 1 
	add rax, 3 * 8;now rax is param 0
	shl r8, 3;convert to byte
	add rax, r8;now rax is the top of the stack
	mov qword[rax], r9;puting the list at the top
	sub rax, 8;rax is the adress to copy to the not optional params
	mov rbx, rsp 
	sub rbx, rcx;rbx is the ret adress in the original
	mov r10, 1;r10 is the not opt params length
	dec r10 
	shl r10, 3;to get bytes
	add rbx, 3*8;rbx is the first param
	add rbx, r10; rbx is where the address to copy to
	mov r8, qword [rbx] 	;r8 is holding the param to copy
	mov qword[rax], r8
	sub rax, 8
	sub rbx, 8
	mov rax, rsp
	sub rax, rcx 	 ;now rax is original ret
	mov qword [rsp+2*8], 2
	mov rbx, qword[rax + 8 *1]
	mov qword [rsp + 1*8] ,rbx
	mov rbx, qword[rax]
	mov qword [rsp], rbx
	enter 0, 0
	; preparing a tail-call
	mov rax, L_constants + 1993
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00e7:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_00e7
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00e7
.L_lambda_simple_env_end_00e7:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00e7:	; copy params
	cmp rsi, 2
	je .L_lambda_simple_params_end_00e7
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00e7
.L_lambda_simple_params_end_00e7:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e7
	jmp .L_lambda_simple_end_00e7
.L_lambda_simple_code_00e7:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00e7
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00e7:
	enter 0, 0
	mov rdi, 8*1
	call malloc
	mov rbx, PARAM(0)
	mov qword[rax], rbx
	mov PARAM(0), rax
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00e8:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_simple_env_end_00e8
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00e8
.L_lambda_simple_env_end_00e8:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00e8:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_00e8
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00e8
.L_lambda_simple_params_end_00e8:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e8
	jmp .L_lambda_simple_end_00e8
.L_lambda_simple_code_00e8:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00e8
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00e8:
	enter 0, 0
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_111]	; free var pair?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_009b
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param s
	push rax
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, qword [free_var_103]	; free var map
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var f
	push rax
	push 2	; arg count
	mov rax, qword [free_var_33]	; free var apply
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	jne .L_or_end_0014
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param s
	push rax
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, qword [free_var_103]	; free var map
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var loop
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0139:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0139
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0139
.L_tc_recycle_frame_done_0139:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_or_end_0014:
	jmp .L_if_end_009b
.L_if_else_009b:
	mov rax, L_constants + 2
.L_if_end_009b:
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00e8:	; new closure is in rax
	push rax
	mov rax, PARAM(0)	; param loop
	pop qword [rax]
	mov rax, sob_void

	; preparing a non-tail-call
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 1]	; bound var s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_111]	; free var pair?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_009c
	; preparing a tail-call
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 1]	; bound var s
	push rax
	push 1	; arg count
	mov rax, PARAM(0)	; param loop
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_013a:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_013a
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_013a
.L_tc_recycle_frame_done_013a:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_009c
.L_if_else_009c:
	mov rax, L_constants + 2
.L_if_end_009c:
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00e7:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_013b:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_013b
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_013b
.L_tc_recycle_frame_done_013b:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_opt_end_001c:	; new closure is in rax
	mov qword [free_var_110], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_opt_env_loop_001d:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_opt_env_end_001d
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_opt_env_loop_001d
.L_lambda_opt_env_end_001d:
	pop rbx
	mov rsi, 0
.L_lambda_opt_params_loop_001d:	; copy params
	cmp rsi, 0
	je .L_lambda_opt_params_end_001d
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_opt_params_loop_001d
.L_lambda_opt_params_end_001d:
	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_001d
	jmp .L_lambda_opt_end_001d
.L_lambda_opt_code_001d:	; lambda-opt body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_opt_arity_check_exact_001d
	jg .L_lambda_opt_arity_check_more_001d
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_opt
.L_lambda_opt_arity_check_exact_001d:
	sub rsp, 8
	mov rax, qword[rsp + 8 *1]
	mov qword[rsp], rax  
	mov rax, qword[rsp + 8 *2] ;rax now holds env 
	mov qword[rsp + 8 * 1], rax
	mov rax, 2
	mov qword[rsp + 8 *2], rax
	mov rax, qword[rsp + 8 * (4 + 0)]
	mov qword[rsp + 8 * (3 + 0)], rax
	mov rax, sob_nil
	mov qword[rsp + 8 * (3 + 1)], rax
	enter 0, 0
	; preparing a tail-call
	mov rax, L_constants + 1993
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00ed:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_00ed
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00ed
.L_lambda_simple_env_end_00ed:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00ed:	; copy params
	cmp rsi, 2
	je .L_lambda_simple_params_end_00ed
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00ed
.L_lambda_simple_params_end_00ed:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ed
	jmp .L_lambda_simple_end_00ed
.L_lambda_simple_code_00ed:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00ed
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00ed:
	enter 0, 0
	mov rdi, 8*1
	call malloc
	mov rbx, PARAM(0)
	mov qword[rax], rbx
	mov PARAM(0), rax
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00ee:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_simple_env_end_00ee
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00ee
.L_lambda_simple_env_end_00ee:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00ee:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_00ee
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00ee
.L_lambda_simple_params_end_00ee:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ee
	jmp .L_lambda_simple_end_00ee
.L_lambda_simple_code_00ee:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00ee
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00ee:
	enter 0, 0
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	jne .L_or_end_0018
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param s
	push rax
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, qword [free_var_103]	; free var map
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var f
	push rax
	push 2	; arg count
	mov rax, qword [free_var_33]	; free var apply
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00a1
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param s
	push rax
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, qword [free_var_103]	; free var map
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var loop
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0142:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0142
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0142
.L_tc_recycle_frame_done_0142:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00a1
.L_if_else_00a1:
	mov rax, L_constants + 2
.L_if_end_00a1:
.L_or_end_0018:
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00ee:	; new closure is in rax
	push rax
	mov rax, PARAM(0)	; param loop
	pop qword [rax]
	mov rax, sob_void

	; preparing a non-tail-call
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 1]	; bound var s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	jne .L_or_end_0019
	; preparing a non-tail-call
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 1]	; bound var s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_111]	; free var pair?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00a2
	; preparing a tail-call
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 1]	; bound var s
	push rax
	push 1	; arg count
	mov rax, PARAM(0)	; param loop
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0143:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0143
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0143
.L_tc_recycle_frame_done_0143:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00a2
.L_if_else_00a2:
	mov rax, L_constants + 2
.L_if_end_00a2:
.L_or_end_0019:
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00ed:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0144:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0144
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0144
.L_tc_recycle_frame_done_0144:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(2)
	jmp .L_lambda_opt_end_001d	; new closure is in rax
.L_lambda_opt_arity_check_more_001d:
	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
	mov r9, sob_nil
	mov rbx, rsp 
	add rbx, 3*8 	; now rbx is pointing to the first param
	dec r8	 ;to get to the top - starting at 0 not 1
	shl r8, 3
	add rbx, r8	 ;rbx now points to the last opt param that was pushed
	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
.L_lambda_opt_stack_shrink_loop_001d:
	cmp r8, 1
	je .L_lambda_opt_stack_shrink_loop_exit_001d
	mov rdi, 1+8+8 ;for pair
	call malloc;to create the pair in the stack
	mov byte [rax], T_pair ; to make it a pair
	mov rcx, qword[rbx] ;rcx is holding the param to copy
	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 	mov qword[rax+1+8],r9
	mov r9, rax ;for the recursion 
	dec r8 ;we finished copy another opt param to the list
	sub rbx, 8 ;to get the next param to copy
	jmp .L_lambda_opt_stack_shrink_loop_001d
.L_lambda_opt_stack_shrink_loop_exit_001d:
	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
	sub rcx, 2
	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
	add rsp, rcx ;shrinking the stack
	mov rax, rsp
	sub rax, rcx ;now rax is pointing on the original ret
	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
	dec r8 ;we start with param 0, not 1 
	add rax, 3 * 8;now rax is param 0
	shl r8, 3;convert to byte
	add rax, r8;now rax is the top of the stack
	mov qword[rax], r9;puting the list at the top
	sub rax, 8;rax is the adress to copy to the not optional params
	mov rbx, rsp 
	sub rbx, rcx;rbx is the ret adress in the original
	mov r10, 1;r10 is the not opt params length
	dec r10 
	shl r10, 3;to get bytes
	add rbx, 3*8;rbx is the first param
	add rbx, r10; rbx is where the address to copy to
	mov r8, qword [rbx] 	;r8 is holding the param to copy
	mov qword[rax], r8
	sub rax, 8
	sub rbx, 8
	mov rax, rsp
	sub rax, rcx 	 ;now rax is original ret
	mov qword [rsp+2*8], 2
	mov rbx, qword[rax + 8 *1]
	mov qword [rsp + 1*8] ,rbx
	mov rbx, qword[rax]
	mov qword [rsp], rbx
	enter 0, 0
	; preparing a tail-call
	mov rax, L_constants + 1993
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00eb:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_00eb
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00eb
.L_lambda_simple_env_end_00eb:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00eb:	; copy params
	cmp rsi, 2
	je .L_lambda_simple_params_end_00eb
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00eb
.L_lambda_simple_params_end_00eb:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00eb
	jmp .L_lambda_simple_end_00eb
.L_lambda_simple_code_00eb:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00eb
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00eb:
	enter 0, 0
	mov rdi, 8*1
	call malloc
	mov rbx, PARAM(0)
	mov qword[rax], rbx
	mov PARAM(0), rax
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00ec:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_simple_env_end_00ec
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00ec
.L_lambda_simple_env_end_00ec:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00ec:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_00ec
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00ec
.L_lambda_simple_params_end_00ec:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ec
	jmp .L_lambda_simple_end_00ec
.L_lambda_simple_code_00ec:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00ec
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00ec:
	enter 0, 0
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	jne .L_or_end_0016
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param s
	push rax
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, qword [free_var_103]	; free var map
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var f
	push rax
	push 2	; arg count
	mov rax, qword [free_var_33]	; free var apply
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_009f
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param s
	push rax
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, qword [free_var_103]	; free var map
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var loop
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_013f:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_013f
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_013f
.L_tc_recycle_frame_done_013f:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_009f
.L_if_else_009f:
	mov rax, L_constants + 2
.L_if_end_009f:
.L_or_end_0016:
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00ec:	; new closure is in rax
	push rax
	mov rax, PARAM(0)	; param loop
	pop qword [rax]
	mov rax, sob_void

	; preparing a non-tail-call
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 1]	; bound var s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	jne .L_or_end_0017
	; preparing a non-tail-call
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 1]	; bound var s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_111]	; free var pair?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00a0
	; preparing a tail-call
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 1]	; bound var s
	push rax
	push 1	; arg count
	mov rax, PARAM(0)	; param loop
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0140:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0140
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0140
.L_tc_recycle_frame_done_0140:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00a0
.L_if_else_00a0:
	mov rax, L_constants + 2
.L_if_end_00a0:
.L_or_end_0017:
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00eb:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0141:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0141
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0141
.L_tc_recycle_frame_done_0141:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_opt_end_001d:	; new closure is in rax
	mov qword [free_var_31], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	; preparing a non-tail-call
	mov rax, L_constants + 1993
	push rax
	mov rax, L_constants + 1993
	push rax
	push 2	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00ef:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00ef
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00ef
.L_lambda_simple_env_end_00ef:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00ef:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00ef
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00ef
.L_lambda_simple_params_end_00ef:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ef
	jmp .L_lambda_simple_end_00ef
.L_lambda_simple_code_00ef:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_00ef
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00ef:
	enter 0, 0
	mov rdi, 8*1
	call malloc
	mov rbx, PARAM(0)
	mov qword[rax], rbx
	mov PARAM(0), rax
	mov rax, sob_void

	mov rdi, 8*1
	call malloc
	mov rbx, PARAM(1)
	mov qword[rax], rbx
	mov PARAM(1), rax
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00f0:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_00f0
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00f0
.L_lambda_simple_env_end_00f0:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00f0:	; copy params
	cmp rsi, 2
	je .L_lambda_simple_params_end_00f0
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00f0
.L_lambda_simple_params_end_00f0:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f0
	jmp .L_lambda_simple_end_00f0
.L_lambda_simple_code_00f0:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_00f0
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00f0:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00a3
	mov rax, L_constants + 1
	jmp .L_if_end_00a3
.L_if_else_00a3:
	; preparing a tail-call
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param f
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var map1
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, PARAM(0)	; param f
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, qword [free_var_79]	; free var cons
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0145:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0145
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0145
.L_tc_recycle_frame_done_0145:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00a3:
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_00f0:	; new closure is in rax
	push rax
	mov rax, PARAM(0)	; param map1
	pop qword [rax]
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00f1:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_00f1
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00f1
.L_lambda_simple_env_end_00f1:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00f1:	; copy params
	cmp rsi, 2
	je .L_lambda_simple_params_end_00f1
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00f1
.L_lambda_simple_params_end_00f1:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f1
	jmp .L_lambda_simple_end_00f1
.L_lambda_simple_code_00f1:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_00f1
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00f1:
	enter 0, 0
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00a4
	mov rax, L_constants + 1
	jmp .L_if_end_00a4
.L_if_else_00a4:
	; preparing a tail-call
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s
	push rax
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var map1
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param f
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 1]	; bound var map-list
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s
	push rax
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var map1
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param f
	push rax
	push 2	; arg count
	mov rax, qword [free_var_33]	; free var apply
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, qword [free_var_79]	; free var cons
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0146:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0146
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0146
.L_tc_recycle_frame_done_0146:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00a4:
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_00f1:	; new closure is in rax
	push rax
	mov rax, PARAM(1)	; param map-list
	pop qword [rax]
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_opt_env_loop_001e:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_opt_env_end_001e
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_opt_env_loop_001e
.L_lambda_opt_env_end_001e:
	pop rbx
	mov rsi, 0
.L_lambda_opt_params_loop_001e:	; copy params
	cmp rsi, 2
	je .L_lambda_opt_params_end_001e
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_opt_params_loop_001e
.L_lambda_opt_params_end_001e:
	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_001e
	jmp .L_lambda_opt_end_001e
.L_lambda_opt_code_001e:	; lambda-opt body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_opt_arity_check_exact_001e
	jg .L_lambda_opt_arity_check_more_001e
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_opt
.L_lambda_opt_arity_check_exact_001e:
	sub rsp, 8
	mov rax, qword[rsp + 8 *1]
	mov qword[rsp], rax  
	mov rax, qword[rsp + 8 *2] ;rax now holds env 
	mov qword[rsp + 8 * 1], rax
	mov rax, 2
	mov qword[rsp + 8 *2], rax
	mov rax, qword[rsp + 8 * (4 + 0)]
	mov qword[rsp + 8 * (3 + 0)], rax
	mov rax, sob_nil
	mov qword[rsp + 8 * (3 + 1)], rax
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00a6
	mov rax, L_constants + 1
	jmp .L_if_end_00a6
.L_if_else_00a6:
	; preparing a tail-call
	mov rax, PARAM(1)	; param s
	push rax
	mov rax, PARAM(0)	; param f
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 1]	; bound var map-list
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0148:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0148
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0148
.L_tc_recycle_frame_done_0148:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00a6:
	leave
	ret AND_KILL_FRAME(2)
	jmp .L_lambda_opt_end_001e	; new closure is in rax
.L_lambda_opt_arity_check_more_001e:
	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
	mov r9, sob_nil
	mov rbx, rsp 
	add rbx, 3*8 	; now rbx is pointing to the first param
	dec r8	 ;to get to the top - starting at 0 not 1
	shl r8, 3
	add rbx, r8	 ;rbx now points to the last opt param that was pushed
	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
.L_lambda_opt_stack_shrink_loop_001e:
	cmp r8, 1
	je .L_lambda_opt_stack_shrink_loop_exit_001e
	mov rdi, 1+8+8 ;for pair
	call malloc;to create the pair in the stack
	mov byte [rax], T_pair ; to make it a pair
	mov rcx, qword[rbx] ;rcx is holding the param to copy
	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 	mov qword[rax+1+8],r9
	mov r9, rax ;for the recursion 
	dec r8 ;we finished copy another opt param to the list
	sub rbx, 8 ;to get the next param to copy
	jmp .L_lambda_opt_stack_shrink_loop_001e
.L_lambda_opt_stack_shrink_loop_exit_001e:
	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
	sub rcx, 2
	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
	add rsp, rcx ;shrinking the stack
	mov rax, rsp
	sub rax, rcx ;now rax is pointing on the original ret
	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
	dec r8 ;we start with param 0, not 1 
	add rax, 3 * 8;now rax is param 0
	shl r8, 3;convert to byte
	add rax, r8;now rax is the top of the stack
	mov qword[rax], r9;puting the list at the top
	sub rax, 8;rax is the adress to copy to the not optional params
	mov rbx, rsp 
	sub rbx, rcx;rbx is the ret adress in the original
	mov r10, 1;r10 is the not opt params length
	dec r10 
	shl r10, 3;to get bytes
	add rbx, 3*8;rbx is the first param
	add rbx, r10; rbx is where the address to copy to
	mov r8, qword [rbx] 	;r8 is holding the param to copy
	mov qword[rax], r8
	sub rax, 8
	sub rbx, 8
	mov rax, rsp
	sub rax, rcx 	 ;now rax is original ret
	mov qword [rsp+2*8], 2
	mov rbx, qword[rax + 8 *1]
	mov qword [rsp + 1*8] ,rbx
	mov rbx, qword[rax]
	mov qword [rsp], rbx
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00a5
	mov rax, L_constants + 1
	jmp .L_if_end_00a5
.L_if_else_00a5:
	; preparing a tail-call
	mov rax, PARAM(1)	; param s
	push rax
	mov rax, PARAM(0)	; param f
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 1]	; bound var map-list
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0147:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0147
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0147
.L_tc_recycle_frame_done_0147:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00a5:
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_opt_end_001e:	; new closure is in rax
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_00ef:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_103], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00f2:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00f2
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00f2
.L_lambda_simple_env_end_00f2:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00f2:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00f2
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00f2
.L_lambda_simple_params_end_00f2:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f2
	jmp .L_lambda_simple_end_00f2
.L_lambda_simple_code_00f2:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00f2
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00f2:
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(0)	; param s
	push rax
	mov rax, L_constants + 1
	push rax
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00f3:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_00f3
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00f3
.L_lambda_simple_env_end_00f3:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00f3:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_00f3
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00f3
.L_lambda_simple_params_end_00f3:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f3
	jmp .L_lambda_simple_end_00f3
.L_lambda_simple_code_00f3:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_00f3
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00f3:
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(0)	; param r
	push rax
	mov rax, PARAM(1)	; param a
	push rax
	push 2	; arg count
	mov rax, qword [free_var_79]	; free var cons
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0149:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0149
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0149
.L_tc_recycle_frame_done_0149:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_00f3:	; new closure is in rax
	push rax
	push 3	; arg count
	mov rax, qword [free_var_85]	; free var fold-left
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_014a:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_014a
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_014a
.L_tc_recycle_frame_done_014a:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00f2:	; new closure is in rax
	mov qword [free_var_118], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	; preparing a non-tail-call
	mov rax, L_constants + 1993
	push rax
	mov rax, L_constants + 1993
	push rax
	push 2	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00f4:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00f4
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00f4
.L_lambda_simple_env_end_00f4:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00f4:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00f4
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00f4
.L_lambda_simple_params_end_00f4:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f4
	jmp .L_lambda_simple_end_00f4
.L_lambda_simple_code_00f4:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_00f4
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00f4:
	enter 0, 0
	mov rdi, 8*1
	call malloc
	mov rbx, PARAM(0)
	mov qword[rax], rbx
	mov PARAM(0), rax
	mov rax, sob_void

	mov rdi, 8*1
	call malloc
	mov rbx, PARAM(1)
	mov qword[rax], rbx
	mov PARAM(1), rax
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00f5:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_00f5
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00f5
.L_lambda_simple_env_end_00f5:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00f5:	; copy params
	cmp rsi, 2
	je .L_lambda_simple_params_end_00f5
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00f5
.L_lambda_simple_params_end_00f5:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f5
	jmp .L_lambda_simple_end_00f5
.L_lambda_simple_code_00f5:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_00f5
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00f5:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param sr
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00a7
	mov rax, PARAM(0)	; param s1
	jmp .L_if_end_00a7
.L_if_else_00a7:
	; preparing a tail-call
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param sr
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param sr
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run-1
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param s1
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 1]	; bound var run-2
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_014b:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_014b
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_014b
.L_tc_recycle_frame_done_014b:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00a7:
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_00f5:	; new closure is in rax
	push rax
	mov rax, PARAM(0)	; param run-1
	pop qword [rax]
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00f6:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_00f6
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00f6
.L_lambda_simple_env_end_00f6:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00f6:	; copy params
	cmp rsi, 2
	je .L_lambda_simple_params_end_00f6
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00f6
.L_lambda_simple_params_end_00f6:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f6
	jmp .L_lambda_simple_end_00f6
.L_lambda_simple_code_00f6:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_00f6
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00f6:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param s1
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00a8
	mov rax, PARAM(1)	; param s2
	jmp .L_if_end_00a8
.L_if_else_00a8:
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s2
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param s1
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 1]	; bound var run-2
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param s1
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, qword [free_var_79]	; free var cons
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_014c:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_014c
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_014c
.L_tc_recycle_frame_done_014c:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00a8:
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_00f6:	; new closure is in rax
	push rax
	mov rax, PARAM(1)	; param run-2
	pop qword [rax]
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_opt_env_loop_001f:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_opt_env_end_001f
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_opt_env_loop_001f
.L_lambda_opt_env_end_001f:
	pop rbx
	mov rsi, 0
.L_lambda_opt_params_loop_001f:	; copy params
	cmp rsi, 2
	je .L_lambda_opt_params_end_001f
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_opt_params_loop_001f
.L_lambda_opt_params_end_001f:
	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_001f
	jmp .L_lambda_opt_end_001f
.L_lambda_opt_code_001f:	; lambda-opt body
	cmp qword [rsp + 8 * 2], 0
	je .L_lambda_opt_arity_check_exact_001f
	jg .L_lambda_opt_arity_check_more_001f
	push qword [rsp + 8 * 2]
	push 0
	jmp L_error_incorrect_arity_opt
.L_lambda_opt_arity_check_exact_001f:
	sub rsp, 8
	mov rax, qword[rsp + 8 *1]
	mov qword[rsp], rax  
	mov rax, qword[rsp + 8 *2] ;rax now holds env 
	mov qword[rsp + 8 * 1], rax
	mov rax, 1
	mov qword[rsp + 8 *2], rax
	mov rax, sob_nil
	mov qword[rsp + 8 * (3 + 0)], rax
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00aa
	mov rax, L_constants + 1
	jmp .L_if_end_00aa
.L_if_else_00aa:
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run-1
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_014e:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_014e
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_014e
.L_tc_recycle_frame_done_014e:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00aa:
	leave
	ret AND_KILL_FRAME(1)
	jmp .L_lambda_opt_end_001f	; new closure is in rax
.L_lambda_opt_arity_check_more_001f:
	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
	mov r9, sob_nil
	mov rbx, rsp 
	add rbx, 3*8 	; now rbx is pointing to the first param
	dec r8	 ;to get to the top - starting at 0 not 1
	shl r8, 3
	add rbx, r8	 ;rbx now points to the last opt param that was pushed
	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
.L_lambda_opt_stack_shrink_loop_001f:
	cmp r8, 0
	je .L_lambda_opt_stack_shrink_loop_exit_001f
	mov rdi, 1+8+8 ;for pair
	call malloc;to create the pair in the stack
	mov byte [rax], T_pair ; to make it a pair
	mov rcx, qword[rbx] ;rcx is holding the param to copy
	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 	mov qword[rax+1+8],r9
	mov r9, rax ;for the recursion 
	dec r8 ;we finished copy another opt param to the list
	sub rbx, 8 ;to get the next param to copy
	jmp .L_lambda_opt_stack_shrink_loop_001f
.L_lambda_opt_stack_shrink_loop_exit_001f:
	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
	sub rcx, 1
	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
	add rsp, rcx ;shrinking the stack
	mov rax, rsp
	sub rax, rcx ;now rax is pointing on the original ret
	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
	dec r8 ;we start with param 0, not 1 
	add rax, 3 * 8;now rax is param 0
	shl r8, 3;convert to byte
	add rax, r8;now rax is the top of the stack
	mov qword[rax], r9;puting the list at the top
	sub rax, 8;rax is the adress to copy to the not optional params
	mov rbx, rsp 
	sub rbx, rcx;rbx is the ret adress in the original
	mov r10, 0;r10 is the not opt params length
	dec r10 
	shl r10, 3;to get bytes
	add rbx, 3*8;rbx is the first param
	add rbx, r10; rbx is where the address to copy to
	mov rax, rsp
	sub rax, rcx 	 ;now rax is original ret
	mov qword [rsp+2*8], 1
	mov rbx, qword[rax + 8 *1]
	mov qword [rsp + 1*8] ,rbx
	mov rbx, qword[rax]
	mov qword [rsp], rbx
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00a9
	mov rax, L_constants + 1
	jmp .L_if_end_00a9
.L_if_else_00a9:
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run-1
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_014d:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_014d
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_014d
.L_tc_recycle_frame_done_014d:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00a9:
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_opt_end_001f:	; new closure is in rax
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_00f4:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_32], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	; preparing a non-tail-call
	mov rax, L_constants + 1993
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00f7:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00f7
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00f7
.L_lambda_simple_env_end_00f7:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00f7:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00f7
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00f7
.L_lambda_simple_params_end_00f7:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f7
	jmp .L_lambda_simple_end_00f7
.L_lambda_simple_code_00f7:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00f7
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00f7:
	enter 0, 0
	mov rdi, 8*1
	call malloc
	mov rbx, PARAM(0)
	mov qword[rax], rbx
	mov PARAM(0), rax
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00f8:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_00f8
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00f8
.L_lambda_simple_env_end_00f8:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00f8:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_00f8
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00f8
.L_lambda_simple_params_end_00f8:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f8
	jmp .L_lambda_simple_end_00f8
.L_lambda_simple_code_00f8:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 3
	je .L_lambda_simple_arity_check_ok_00f8
	push qword [rsp + 8 * 2]
	push 3
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00f8:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(2)	; param ss
	push rax
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, qword [free_var_110]	; free var ormap
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00ab
	mov rax, PARAM(1)	; param unit
	jmp .L_if_end_00ab
.L_if_else_00ab:
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(2)	; param ss
	push rax
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, qword [free_var_103]	; free var map
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(2)	; param ss
	push rax
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, qword [free_var_103]	; free var map
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(1)	; param unit
	push rax
	mov rax, PARAM(0)	; param f
	push rax
	push 3	; arg count
	mov rax, qword [free_var_33]	; free var apply
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param f
	push rax
	push 3	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_014f:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_014f
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_014f
.L_tc_recycle_frame_done_014f:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00ab:
	leave
	ret AND_KILL_FRAME(3)
.L_lambda_simple_end_00f8:	; new closure is in rax
	push rax
	mov rax, PARAM(0)	; param run
	pop qword [rax]
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_opt_env_loop_0020:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_opt_env_end_0020
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_opt_env_loop_0020
.L_lambda_opt_env_end_0020:
	pop rbx
	mov rsi, 0
.L_lambda_opt_params_loop_0020:	; copy params
	cmp rsi, 1
	je .L_lambda_opt_params_end_0020
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_opt_params_loop_0020
.L_lambda_opt_params_end_0020:
	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0020
	jmp .L_lambda_opt_end_0020
.L_lambda_opt_code_0020:	; lambda-opt body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_opt_arity_check_exact_0020
	jg .L_lambda_opt_arity_check_more_0020
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_opt
.L_lambda_opt_arity_check_exact_0020:
	sub rsp, 8
	mov rax, qword[rsp + 8 *1]
	mov qword[rsp], rax  
	mov rax, qword[rsp + 8 *2] ;rax now holds env 
	mov qword[rsp + 8 * 1], rax
	mov rax, 3
	mov qword[rsp + 8 *2], rax
	mov rax, qword[rsp + 8 * (4 + 0)]
	mov qword[rsp + 8 * (3 + 0)], rax
	mov rax, qword[rsp + 8 * (4 + 1)]
	mov qword[rsp + 8 * (3 + 1)], rax
	mov rax, sob_nil
	mov qword[rsp + 8 * (3 + 2)], rax
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(2)	; param ss
	push rax
	mov rax, PARAM(1)	; param unit
	push rax
	mov rax, PARAM(0)	; param f
	push rax
	push 3	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0151:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0151
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0151
.L_tc_recycle_frame_done_0151:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(3)
	jmp .L_lambda_opt_end_0020	; new closure is in rax
.L_lambda_opt_arity_check_more_0020:
	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
	mov r9, sob_nil
	mov rbx, rsp 
	add rbx, 3*8 	; now rbx is pointing to the first param
	dec r8	 ;to get to the top - starting at 0 not 1
	shl r8, 3
	add rbx, r8	 ;rbx now points to the last opt param that was pushed
	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
.L_lambda_opt_stack_shrink_loop_0020:
	cmp r8, 2
	je .L_lambda_opt_stack_shrink_loop_exit_0020
	mov rdi, 1+8+8 ;for pair
	call malloc;to create the pair in the stack
	mov byte [rax], T_pair ; to make it a pair
	mov rcx, qword[rbx] ;rcx is holding the param to copy
	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 	mov qword[rax+1+8],r9
	mov r9, rax ;for the recursion 
	dec r8 ;we finished copy another opt param to the list
	sub rbx, 8 ;to get the next param to copy
	jmp .L_lambda_opt_stack_shrink_loop_0020
.L_lambda_opt_stack_shrink_loop_exit_0020:
	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
	sub rcx, 3
	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
	add rsp, rcx ;shrinking the stack
	mov rax, rsp
	sub rax, rcx ;now rax is pointing on the original ret
	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
	dec r8 ;we start with param 0, not 1 
	add rax, 3 * 8;now rax is param 0
	shl r8, 3;convert to byte
	add rax, r8;now rax is the top of the stack
	mov qword[rax], r9;puting the list at the top
	sub rax, 8;rax is the adress to copy to the not optional params
	mov rbx, rsp 
	sub rbx, rcx;rbx is the ret adress in the original
	mov r10, 2;r10 is the not opt params length
	dec r10 
	shl r10, 3;to get bytes
	add rbx, 3*8;rbx is the first param
	add rbx, r10; rbx is where the address to copy to
	mov r8, qword [rbx] 	;r8 is holding the param to copy
	mov qword[rax], r8
	sub rax, 8
	sub rbx, 8
	mov r8, qword [rbx] 	;r8 is holding the param to copy
	mov qword[rax], r8
	sub rax, 8
	sub rbx, 8
	mov rax, rsp
	sub rax, rcx 	 ;now rax is original ret
	mov qword [rsp+2*8], 3
	mov rbx, qword[rax + 8 *1]
	mov qword [rsp + 1*8] ,rbx
	mov rbx, qword[rax]
	mov qword [rsp], rbx
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(2)	; param ss
	push rax
	mov rax, PARAM(1)	; param unit
	push rax
	mov rax, PARAM(0)	; param f
	push rax
	push 3	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0150:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0150
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0150
.L_tc_recycle_frame_done_0150:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(3)
.L_lambda_opt_end_0020:	; new closure is in rax
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00f7:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_85], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	; preparing a non-tail-call
	mov rax, L_constants + 1993
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00f9:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00f9
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00f9
.L_lambda_simple_env_end_00f9:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00f9:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00f9
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00f9
.L_lambda_simple_params_end_00f9:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f9
	jmp .L_lambda_simple_end_00f9
.L_lambda_simple_code_00f9:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00f9
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00f9:
	enter 0, 0
	mov rdi, 8*1
	call malloc
	mov rbx, PARAM(0)
	mov qword[rax], rbx
	mov PARAM(0), rax
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00fa:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_00fa
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00fa
.L_lambda_simple_env_end_00fa:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00fa:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_00fa
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00fa
.L_lambda_simple_params_end_00fa:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00fa
	jmp .L_lambda_simple_end_00fa
.L_lambda_simple_code_00fa:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 3
	je .L_lambda_simple_arity_check_ok_00fa
	push qword [rsp + 8 * 2]
	push 3
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00fa:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(2)	; param ss
	push rax
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, qword [free_var_110]	; free var ormap
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00ac
	mov rax, PARAM(1)	; param unit
	jmp .L_if_end_00ac
.L_if_else_00ac:
	; preparing a tail-call
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, L_constants + 1
	push rax
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(2)	; param ss
	push rax
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, qword [free_var_103]	; free var map
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(1)	; param unit
	push rax
	mov rax, PARAM(0)	; param f
	push rax
	push 3	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, qword [free_var_79]	; free var cons
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(2)	; param ss
	push rax
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, qword [free_var_103]	; free var map
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, qword [free_var_32]	; free var append
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param f
	push rax
	push 2	; arg count
	mov rax, qword [free_var_33]	; free var apply
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0152:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0152
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0152
.L_tc_recycle_frame_done_0152:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00ac:
	leave
	ret AND_KILL_FRAME(3)
.L_lambda_simple_end_00fa:	; new closure is in rax
	push rax
	mov rax, PARAM(0)	; param run
	pop qword [rax]
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_opt_env_loop_0021:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_opt_env_end_0021
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_opt_env_loop_0021
.L_lambda_opt_env_end_0021:
	pop rbx
	mov rsi, 0
.L_lambda_opt_params_loop_0021:	; copy params
	cmp rsi, 1
	je .L_lambda_opt_params_end_0021
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_opt_params_loop_0021
.L_lambda_opt_params_end_0021:
	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0021
	jmp .L_lambda_opt_end_0021
.L_lambda_opt_code_0021:	; lambda-opt body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_opt_arity_check_exact_0021
	jg .L_lambda_opt_arity_check_more_0021
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_opt
.L_lambda_opt_arity_check_exact_0021:
	sub rsp, 8
	mov rax, qword[rsp + 8 *1]
	mov qword[rsp], rax  
	mov rax, qword[rsp + 8 *2] ;rax now holds env 
	mov qword[rsp + 8 * 1], rax
	mov rax, 3
	mov qword[rsp + 8 *2], rax
	mov rax, qword[rsp + 8 * (4 + 0)]
	mov qword[rsp + 8 * (3 + 0)], rax
	mov rax, qword[rsp + 8 * (4 + 1)]
	mov qword[rsp + 8 * (3 + 1)], rax
	mov rax, sob_nil
	mov qword[rsp + 8 * (3 + 2)], rax
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(2)	; param ss
	push rax
	mov rax, PARAM(1)	; param unit
	push rax
	mov rax, PARAM(0)	; param f
	push rax
	push 3	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0154:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0154
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0154
.L_tc_recycle_frame_done_0154:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(3)
	jmp .L_lambda_opt_end_0021	; new closure is in rax
.L_lambda_opt_arity_check_more_0021:
	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
	mov r9, sob_nil
	mov rbx, rsp 
	add rbx, 3*8 	; now rbx is pointing to the first param
	dec r8	 ;to get to the top - starting at 0 not 1
	shl r8, 3
	add rbx, r8	 ;rbx now points to the last opt param that was pushed
	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
.L_lambda_opt_stack_shrink_loop_0021:
	cmp r8, 2
	je .L_lambda_opt_stack_shrink_loop_exit_0021
	mov rdi, 1+8+8 ;for pair
	call malloc;to create the pair in the stack
	mov byte [rax], T_pair ; to make it a pair
	mov rcx, qword[rbx] ;rcx is holding the param to copy
	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 	mov qword[rax+1+8],r9
	mov r9, rax ;for the recursion 
	dec r8 ;we finished copy another opt param to the list
	sub rbx, 8 ;to get the next param to copy
	jmp .L_lambda_opt_stack_shrink_loop_0021
.L_lambda_opt_stack_shrink_loop_exit_0021:
	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
	sub rcx, 3
	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
	add rsp, rcx ;shrinking the stack
	mov rax, rsp
	sub rax, rcx ;now rax is pointing on the original ret
	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
	dec r8 ;we start with param 0, not 1 
	add rax, 3 * 8;now rax is param 0
	shl r8, 3;convert to byte
	add rax, r8;now rax is the top of the stack
	mov qword[rax], r9;puting the list at the top
	sub rax, 8;rax is the adress to copy to the not optional params
	mov rbx, rsp 
	sub rbx, rcx;rbx is the ret adress in the original
	mov r10, 2;r10 is the not opt params length
	dec r10 
	shl r10, 3;to get bytes
	add rbx, 3*8;rbx is the first param
	add rbx, r10; rbx is where the address to copy to
	mov r8, qword [rbx] 	;r8 is holding the param to copy
	mov qword[rax], r8
	sub rax, 8
	sub rbx, 8
	mov r8, qword [rbx] 	;r8 is holding the param to copy
	mov qword[rax], r8
	sub rax, 8
	sub rbx, 8
	mov rax, rsp
	sub rax, rcx 	 ;now rax is original ret
	mov qword [rsp+2*8], 3
	mov rbx, qword[rax + 8 *1]
	mov qword [rsp + 1*8] ,rbx
	mov rbx, qword[rax]
	mov qword [rsp], rbx
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(2)	; param ss
	push rax
	mov rax, PARAM(1)	; param unit
	push rax
	mov rax, PARAM(0)	; param f
	push rax
	push 3	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0153:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0153
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0153
.L_tc_recycle_frame_done_0153:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(3)
.L_lambda_opt_end_0021:	; new closure is in rax
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00f9:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_86], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	; preparing a non-tail-call
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00fb:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00fb
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00fb
.L_lambda_simple_env_end_00fb:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00fb:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00fb
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00fb
.L_lambda_simple_params_end_00fb:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00fb
	jmp .L_lambda_simple_end_00fb
.L_lambda_simple_code_00fb:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 0
	je .L_lambda_simple_arity_check_ok_00fb
	push qword [rsp + 8 * 2]
	push 0
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00fb:
	enter 0, 0
	; preparing a tail-call
	mov rax, L_constants + 2187
	push rax
	mov rax, L_constants + 2178
	push rax
	push 2	; arg count
	mov rax, qword [free_var_82]	; free var error
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0155:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0155
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0155
.L_tc_recycle_frame_done_0155:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(0)
.L_lambda_simple_end_00fb:	; new closure is in rax
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00fc:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00fc
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00fc
.L_lambda_simple_env_end_00fc:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00fc:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00fc
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00fc
.L_lambda_simple_params_end_00fc:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00fc
	jmp .L_lambda_simple_end_00fc
.L_lambda_simple_code_00fc:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00fc
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00fc:
	enter 0, 0
	; preparing a tail-call
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00fd:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_00fd
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00fd
.L_lambda_simple_env_end_00fd:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00fd:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_00fd
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00fd
.L_lambda_simple_params_end_00fd:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00fd
	jmp .L_lambda_simple_end_00fd
.L_lambda_simple_code_00fd:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_00fd
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00fd:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param a
	push rax
	push 1	; arg count
	mov rax, qword [free_var_91]	; free var integer?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00b8
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_91]	; free var integer?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00af
	; preparing a tail-call
	mov rax, PARAM(1)	; param b
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, qword [free_var_11]	; free var __bin-add-zz
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0156:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0156
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0156
.L_tc_recycle_frame_done_0156:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00af
.L_if_else_00af:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_88]	; free var fraction?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00ae
	; preparing a tail-call
	mov rax, PARAM(1)	; param b
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param a
	push rax
	push 1	; arg count
	mov rax, qword [free_var_29]	; free var __integer-to-fraction
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, qword [free_var_9]	; free var __bin-add-qq
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0157:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0157
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0157
.L_tc_recycle_frame_done_0157:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00ae
.L_if_else_00ae:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_116]	; free var real?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00ad
	; preparing a tail-call
	mov rax, PARAM(1)	; param b
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param a
	push rax
	push 1	; arg count
	mov rax, qword [free_var_90]	; free var integer->real
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, qword [free_var_10]	; free var __bin-add-rr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0158:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0158
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0158
.L_tc_recycle_frame_done_0158:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00ad
.L_if_else_00ad:
	; preparing a tail-call
	push 0	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var error
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0159:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0159
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0159
.L_tc_recycle_frame_done_0159:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00ad:
.L_if_end_00ae:
.L_if_end_00af:
	jmp .L_if_end_00b8
.L_if_else_00b8:
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param a
	push rax
	push 1	; arg count
	mov rax, qword [free_var_88]	; free var fraction?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00b7
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_91]	; free var integer?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00b2
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_28]	; free var __bin_integer_to_fraction
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, qword [free_var_9]	; free var __bin-add-qq
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_015a:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_015a
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_015a
.L_tc_recycle_frame_done_015a:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00b2
.L_if_else_00b2:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_88]	; free var fraction?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00b1
	; preparing a tail-call
	mov rax, PARAM(1)	; param b
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, qword [free_var_9]	; free var __bin-add-qq
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_015b:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_015b
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_015b
.L_tc_recycle_frame_done_015b:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00b1
.L_if_else_00b1:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_116]	; free var real?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00b0
	; preparing a tail-call
	mov rax, PARAM(1)	; param b
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param a
	push rax
	push 1	; arg count
	mov rax, qword [free_var_87]	; free var fraction->real
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, qword [free_var_10]	; free var __bin-add-rr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_015c:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_015c
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_015c
.L_tc_recycle_frame_done_015c:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00b0
.L_if_else_00b0:
	; preparing a tail-call
	push 0	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var error
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_015d:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_015d
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_015d
.L_tc_recycle_frame_done_015d:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00b0:
.L_if_end_00b1:
.L_if_end_00b2:
	jmp .L_if_end_00b7
.L_if_else_00b7:
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param a
	push rax
	push 1	; arg count
	mov rax, qword [free_var_116]	; free var real?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00b6
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_91]	; free var integer?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00b5
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_90]	; free var integer->real
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, qword [free_var_10]	; free var __bin-add-rr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_015e:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_015e
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_015e
.L_tc_recycle_frame_done_015e:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00b5
.L_if_else_00b5:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_88]	; free var fraction?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00b4
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_87]	; free var fraction->real
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, qword [free_var_10]	; free var __bin-add-rr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_015f:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_015f
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_015f
.L_tc_recycle_frame_done_015f:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00b4
.L_if_else_00b4:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_116]	; free var real?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00b3
	; preparing a tail-call
	mov rax, PARAM(1)	; param b
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, qword [free_var_10]	; free var __bin-add-rr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0160:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0160
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0160
.L_tc_recycle_frame_done_0160:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00b3
.L_if_else_00b3:
	; preparing a tail-call
	push 0	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var error
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0161:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0161
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0161
.L_tc_recycle_frame_done_0161:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00b3:
.L_if_end_00b4:
.L_if_end_00b5:
	jmp .L_if_end_00b6
.L_if_else_00b6:
	; preparing a tail-call
	push 0	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var error
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0162:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0162
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0162
.L_tc_recycle_frame_done_0162:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00b6:
.L_if_end_00b7:
.L_if_end_00b8:
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_00fd:	; new closure is in rax
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00fe:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_00fe
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00fe
.L_lambda_simple_env_end_00fe:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00fe:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_00fe
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00fe
.L_lambda_simple_params_end_00fe:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00fe
	jmp .L_lambda_simple_end_00fe
.L_lambda_simple_code_00fe:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_00fe
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00fe:
	enter 0, 0
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_opt_env_loop_0022:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_opt_env_end_0022
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_opt_env_loop_0022
.L_lambda_opt_env_end_0022:
	pop rbx
	mov rsi, 0
.L_lambda_opt_params_loop_0022:	; copy params
	cmp rsi, 1
	je .L_lambda_opt_params_end_0022
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_opt_params_loop_0022
.L_lambda_opt_params_end_0022:
	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0022
	jmp .L_lambda_opt_end_0022
.L_lambda_opt_code_0022:	; lambda-opt body
	cmp qword [rsp + 8 * 2], 0
	je .L_lambda_opt_arity_check_exact_0022
	jg .L_lambda_opt_arity_check_more_0022
	push qword [rsp + 8 * 2]
	push 0
	jmp L_error_incorrect_arity_opt
.L_lambda_opt_arity_check_exact_0022:
	sub rsp, 8
	mov rax, qword[rsp + 8 *1]
	mov qword[rsp], rax  
	mov rax, qword[rsp + 8 *2] ;rax now holds env 
	mov qword[rsp + 8 * 1], rax
	mov rax, 1
	mov qword[rsp + 8 *2], rax
	mov rax, sob_nil
	mov qword[rsp + 8 * (3 + 0)], rax
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(0)	; param s
	push rax
	mov rax, L_constants + 2135
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var bin+
	push rax
	push 3	; arg count
	mov rax, qword [free_var_85]	; free var fold-left
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0164:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0164
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0164
.L_tc_recycle_frame_done_0164:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
	jmp .L_lambda_opt_end_0022	; new closure is in rax
.L_lambda_opt_arity_check_more_0022:
	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
	mov r9, sob_nil
	mov rbx, rsp 
	add rbx, 3*8 	; now rbx is pointing to the first param
	dec r8	 ;to get to the top - starting at 0 not 1
	shl r8, 3
	add rbx, r8	 ;rbx now points to the last opt param that was pushed
	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
.L_lambda_opt_stack_shrink_loop_0022:
	cmp r8, 0
	je .L_lambda_opt_stack_shrink_loop_exit_0022
	mov rdi, 1+8+8 ;for pair
	call malloc;to create the pair in the stack
	mov byte [rax], T_pair ; to make it a pair
	mov rcx, qword[rbx] ;rcx is holding the param to copy
	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 	mov qword[rax+1+8],r9
	mov r9, rax ;for the recursion 
	dec r8 ;we finished copy another opt param to the list
	sub rbx, 8 ;to get the next param to copy
	jmp .L_lambda_opt_stack_shrink_loop_0022
.L_lambda_opt_stack_shrink_loop_exit_0022:
	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
	sub rcx, 1
	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
	add rsp, rcx ;shrinking the stack
	mov rax, rsp
	sub rax, rcx ;now rax is pointing on the original ret
	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
	dec r8 ;we start with param 0, not 1 
	add rax, 3 * 8;now rax is param 0
	shl r8, 3;convert to byte
	add rax, r8;now rax is the top of the stack
	mov qword[rax], r9;puting the list at the top
	sub rax, 8;rax is the adress to copy to the not optional params
	mov rbx, rsp 
	sub rbx, rcx;rbx is the ret adress in the original
	mov r10, 0;r10 is the not opt params length
	dec r10 
	shl r10, 3;to get bytes
	add rbx, 3*8;rbx is the first param
	add rbx, r10; rbx is where the address to copy to
	mov rax, rsp
	sub rax, rcx 	 ;now rax is original ret
	mov qword [rsp+2*8], 1
	mov rbx, qword[rax + 8 *1]
	mov qword [rsp + 1*8] ,rbx
	mov rbx, qword[rax]
	mov qword [rsp], rbx
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(0)	; param s
	push rax
	mov rax, L_constants + 2135
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var bin+
	push rax
	push 3	; arg count
	mov rax, qword [free_var_85]	; free var fold-left
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0163:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0163
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0163
.L_tc_recycle_frame_done_0163:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_opt_end_0022:	; new closure is in rax
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00fe:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0165:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0165
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0165
.L_tc_recycle_frame_done_0165:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_00fc:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_1], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	; preparing a non-tail-call
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_00ff:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_00ff
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_00ff
.L_lambda_simple_env_end_00ff:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_00ff:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_00ff
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_00ff
.L_lambda_simple_params_end_00ff:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ff
	jmp .L_lambda_simple_end_00ff
.L_lambda_simple_code_00ff:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 0
	je .L_lambda_simple_arity_check_ok_00ff
	push qword [rsp + 8 * 2]
	push 0
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_00ff:
	enter 0, 0
	; preparing a tail-call
	mov rax, L_constants + 2187
	push rax
	mov rax, L_constants + 2251
	push rax
	push 2	; arg count
	mov rax, qword [free_var_82]	; free var error
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0166:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0166
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0166
.L_tc_recycle_frame_done_0166:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(0)
.L_lambda_simple_end_00ff:	; new closure is in rax
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0100:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_0100
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0100
.L_lambda_simple_env_end_0100:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0100:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_0100
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0100
.L_lambda_simple_params_end_0100:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0100
	jmp .L_lambda_simple_end_0100
.L_lambda_simple_code_0100:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0100
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0100:
	enter 0, 0
	; preparing a tail-call
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0101:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_0101
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0101
.L_lambda_simple_env_end_0101:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0101:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0101
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0101
.L_lambda_simple_params_end_0101:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0101
	jmp .L_lambda_simple_end_0101
.L_lambda_simple_code_0101:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_0101
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0101:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param a
	push rax
	push 1	; arg count
	mov rax, qword [free_var_91]	; free var integer?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00c4
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_91]	; free var integer?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00bb
	; preparing a tail-call
	mov rax, PARAM(1)	; param b
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, qword [free_var_27]	; free var __bin-sub-zz
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0167:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0167
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0167
.L_tc_recycle_frame_done_0167:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00bb
.L_if_else_00bb:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_88]	; free var fraction?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00ba
	; preparing a tail-call
	mov rax, PARAM(1)	; param b
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param a
	push rax
	push 1	; arg count
	mov rax, qword [free_var_29]	; free var __integer-to-fraction
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, qword [free_var_25]	; free var __bin-sub-qq
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0168:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0168
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0168
.L_tc_recycle_frame_done_0168:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00ba
.L_if_else_00ba:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_115]	; free var real
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00b9
	; preparing a tail-call
	mov rax, PARAM(1)	; param b
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param a
	push rax
	push 1	; arg count
	mov rax, qword [free_var_90]	; free var integer->real
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, qword [free_var_26]	; free var __bin-sub-rr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0169:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0169
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0169
.L_tc_recycle_frame_done_0169:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00b9
.L_if_else_00b9:
	; preparing a tail-call
	push 0	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var error
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_016a:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_016a
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_016a
.L_tc_recycle_frame_done_016a:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00b9:
.L_if_end_00ba:
.L_if_end_00bb:
	jmp .L_if_end_00c4
.L_if_else_00c4:
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param a
	push rax
	push 1	; arg count
	mov rax, qword [free_var_88]	; free var fraction?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00c3
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_91]	; free var integer?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00be
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_29]	; free var __integer-to-fraction
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, qword [free_var_25]	; free var __bin-sub-qq
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_016b:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_016b
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_016b
.L_tc_recycle_frame_done_016b:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00be
.L_if_else_00be:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_88]	; free var fraction?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00bd
	; preparing a tail-call
	mov rax, PARAM(1)	; param b
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, qword [free_var_25]	; free var __bin-sub-qq
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_016c:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_016c
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_016c
.L_tc_recycle_frame_done_016c:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00bd
.L_if_else_00bd:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_116]	; free var real?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00bc
	; preparing a tail-call
	mov rax, PARAM(1)	; param b
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param a
	push rax
	push 1	; arg count
	mov rax, qword [free_var_87]	; free var fraction->real
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, qword [free_var_26]	; free var __bin-sub-rr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_016d:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_016d
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_016d
.L_tc_recycle_frame_done_016d:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00bc
.L_if_else_00bc:
	; preparing a tail-call
	push 0	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var error
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_016e:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_016e
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_016e
.L_tc_recycle_frame_done_016e:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00bc:
.L_if_end_00bd:
.L_if_end_00be:
	jmp .L_if_end_00c3
.L_if_else_00c3:
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param a
	push rax
	push 1	; arg count
	mov rax, qword [free_var_116]	; free var real?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00c2
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_91]	; free var integer?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00c1
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_90]	; free var integer->real
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, qword [free_var_26]	; free var __bin-sub-rr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_016f:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_016f
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_016f
.L_tc_recycle_frame_done_016f:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00c1
.L_if_else_00c1:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_88]	; free var fraction?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00c0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_87]	; free var fraction->real
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, qword [free_var_26]	; free var __bin-sub-rr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0170:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0170
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0170
.L_tc_recycle_frame_done_0170:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00c0
.L_if_else_00c0:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_116]	; free var real?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00bf
	; preparing a tail-call
	mov rax, PARAM(1)	; param b
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, qword [free_var_26]	; free var __bin-sub-rr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0171:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0171
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0171
.L_tc_recycle_frame_done_0171:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00bf
.L_if_else_00bf:
	; preparing a tail-call
	push 0	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var error
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0172:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0172
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0172
.L_tc_recycle_frame_done_0172:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00bf:
.L_if_end_00c0:
.L_if_end_00c1:
	jmp .L_if_end_00c2
.L_if_else_00c2:
	; preparing a tail-call
	push 0	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var error
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0173:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0173
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0173
.L_tc_recycle_frame_done_0173:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00c2:
.L_if_end_00c3:
.L_if_end_00c4:
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_0101:	; new closure is in rax
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0102:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_0102
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0102
.L_lambda_simple_env_end_0102:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0102:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0102
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0102
.L_lambda_simple_params_end_0102:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0102
	jmp .L_lambda_simple_end_0102
.L_lambda_simple_code_0102:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0102
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0102:
	enter 0, 0
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_opt_env_loop_0023:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_opt_env_end_0023
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_opt_env_loop_0023
.L_lambda_opt_env_end_0023:
	pop rbx
	mov rsi, 0
.L_lambda_opt_params_loop_0023:	; copy params
	cmp rsi, 1
	je .L_lambda_opt_params_end_0023
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_opt_params_loop_0023
.L_lambda_opt_params_end_0023:
	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0023
	jmp .L_lambda_opt_end_0023
.L_lambda_opt_code_0023:	; lambda-opt body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_opt_arity_check_exact_0023
	jg .L_lambda_opt_arity_check_more_0023
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_opt
.L_lambda_opt_arity_check_exact_0023:
	sub rsp, 8
	mov rax, qword[rsp + 8 *1]
	mov qword[rsp], rax  
	mov rax, qword[rsp + 8 *2] ;rax now holds env 
	mov qword[rsp + 8 * 1], rax
	mov rax, 2
	mov qword[rsp + 8 *2], rax
	mov rax, qword[rsp + 8 * (4 + 0)]
	mov qword[rsp + 8 * (3 + 0)], rax
	mov rax, sob_nil
	mov qword[rsp + 8 * (3 + 1)], rax
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00c6
	; preparing a tail-call
	mov rax, PARAM(0)	; param a
	push rax
	mov rax, L_constants + 2135
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var bin-
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0177:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0177
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0177
.L_tc_recycle_frame_done_0177:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00c6
.L_if_else_00c6:
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s
	push rax
	mov rax, L_constants + 2135
	push rax
	mov rax, qword [free_var_1]	; free var +
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 3	; arg count
	mov rax, qword [free_var_85]	; free var fold-left
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 4	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0104:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 3
	je .L_lambda_simple_env_end_0104
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0104
.L_lambda_simple_env_end_0104:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0104:	; copy params
	cmp rsi, 2
	je .L_lambda_simple_params_end_0104
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0104
.L_lambda_simple_params_end_0104:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0104
	jmp .L_lambda_simple_end_0104
.L_lambda_simple_code_0104:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0104
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0104:
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(0)	; param b
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var a
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var bin-
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0178:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0178
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0178
.L_tc_recycle_frame_done_0178:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0104:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0179:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0179
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0179
.L_tc_recycle_frame_done_0179:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00c6:
	leave
	ret AND_KILL_FRAME(2)
	jmp .L_lambda_opt_end_0023	; new closure is in rax
.L_lambda_opt_arity_check_more_0023:
	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
	mov r9, sob_nil
	mov rbx, rsp 
	add rbx, 3*8 	; now rbx is pointing to the first param
	dec r8	 ;to get to the top - starting at 0 not 1
	shl r8, 3
	add rbx, r8	 ;rbx now points to the last opt param that was pushed
	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
.L_lambda_opt_stack_shrink_loop_0023:
	cmp r8, 1
	je .L_lambda_opt_stack_shrink_loop_exit_0023
	mov rdi, 1+8+8 ;for pair
	call malloc;to create the pair in the stack
	mov byte [rax], T_pair ; to make it a pair
	mov rcx, qword[rbx] ;rcx is holding the param to copy
	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 	mov qword[rax+1+8],r9
	mov r9, rax ;for the recursion 
	dec r8 ;we finished copy another opt param to the list
	sub rbx, 8 ;to get the next param to copy
	jmp .L_lambda_opt_stack_shrink_loop_0023
.L_lambda_opt_stack_shrink_loop_exit_0023:
	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
	sub rcx, 2
	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
	add rsp, rcx ;shrinking the stack
	mov rax, rsp
	sub rax, rcx ;now rax is pointing on the original ret
	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
	dec r8 ;we start with param 0, not 1 
	add rax, 3 * 8;now rax is param 0
	shl r8, 3;convert to byte
	add rax, r8;now rax is the top of the stack
	mov qword[rax], r9;puting the list at the top
	sub rax, 8;rax is the adress to copy to the not optional params
	mov rbx, rsp 
	sub rbx, rcx;rbx is the ret adress in the original
	mov r10, 1;r10 is the not opt params length
	dec r10 
	shl r10, 3;to get bytes
	add rbx, 3*8;rbx is the first param
	add rbx, r10; rbx is where the address to copy to
	mov r8, qword [rbx] 	;r8 is holding the param to copy
	mov qword[rax], r8
	sub rax, 8
	sub rbx, 8
	mov rax, rsp
	sub rax, rcx 	 ;now rax is original ret
	mov qword [rsp+2*8], 2
	mov rbx, qword[rax + 8 *1]
	mov qword [rsp + 1*8] ,rbx
	mov rbx, qword[rax]
	mov qword [rsp], rbx
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00c5
	; preparing a tail-call
	mov rax, PARAM(0)	; param a
	push rax
	mov rax, L_constants + 2135
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var bin-
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0174:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0174
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0174
.L_tc_recycle_frame_done_0174:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00c5
.L_if_else_00c5:
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s
	push rax
	mov rax, L_constants + 2135
	push rax
	mov rax, qword [free_var_1]	; free var +
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 3	; arg count
	mov rax, qword [free_var_85]	; free var fold-left
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 4	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0103:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 3
	je .L_lambda_simple_env_end_0103
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0103
.L_lambda_simple_env_end_0103:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0103:	; copy params
	cmp rsi, 2
	je .L_lambda_simple_params_end_0103
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0103
.L_lambda_simple_params_end_0103:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0103
	jmp .L_lambda_simple_end_0103
.L_lambda_simple_code_0103:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0103
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0103:
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(0)	; param b
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var a
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var bin-
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0175:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0175
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0175
.L_tc_recycle_frame_done_0175:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0103:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0176:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0176
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0176
.L_tc_recycle_frame_done_0176:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00c5:
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_opt_end_0023:	; new closure is in rax
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0102:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_017a:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_017a
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_017a
.L_tc_recycle_frame_done_017a:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0100:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_2], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	; preparing a non-tail-call
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0105:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_0105
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0105
.L_lambda_simple_env_end_0105:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0105:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_0105
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0105
.L_lambda_simple_params_end_0105:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0105
	jmp .L_lambda_simple_end_0105
.L_lambda_simple_code_0105:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 0
	je .L_lambda_simple_arity_check_ok_0105
	push qword [rsp + 8 * 2]
	push 0
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0105:
	enter 0, 0
	; preparing a tail-call
	mov rax, L_constants + 2187
	push rax
	mov rax, L_constants + 2279
	push rax
	push 2	; arg count
	mov rax, qword [free_var_82]	; free var error
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_017b:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_017b
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_017b
.L_tc_recycle_frame_done_017b:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(0)
.L_lambda_simple_end_0105:	; new closure is in rax
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0106:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_0106
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0106
.L_lambda_simple_env_end_0106:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0106:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_0106
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0106
.L_lambda_simple_params_end_0106:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0106
	jmp .L_lambda_simple_end_0106
.L_lambda_simple_code_0106:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0106
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0106:
	enter 0, 0
	; preparing a tail-call
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0107:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_0107
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0107
.L_lambda_simple_env_end_0107:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0107:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0107
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0107
.L_lambda_simple_params_end_0107:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0107
	jmp .L_lambda_simple_end_0107
.L_lambda_simple_code_0107:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_0107
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0107:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param a
	push rax
	push 1	; arg count
	mov rax, qword [free_var_91]	; free var integer?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00d2
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_91]	; free var integer?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00c9
	; preparing a tail-call
	mov rax, PARAM(1)	; param b
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, qword [free_var_24]	; free var __bin-mul-zz
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_017c:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_017c
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_017c
.L_tc_recycle_frame_done_017c:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00c9
.L_if_else_00c9:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_88]	; free var fraction?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00c8
	; preparing a tail-call
	mov rax, PARAM(1)	; param b
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param a
	push rax
	push 1	; arg count
	mov rax, qword [free_var_29]	; free var __integer-to-fraction
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, qword [free_var_22]	; free var __bin-mul-qq
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_017d:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_017d
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_017d
.L_tc_recycle_frame_done_017d:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00c8
.L_if_else_00c8:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_116]	; free var real?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00c7
	; preparing a tail-call
	mov rax, PARAM(1)	; param b
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param a
	push rax
	push 1	; arg count
	mov rax, qword [free_var_90]	; free var integer->real
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, qword [free_var_23]	; free var __bin-mul-rr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_017e:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_017e
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_017e
.L_tc_recycle_frame_done_017e:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00c7
.L_if_else_00c7:
	; preparing a tail-call
	push 0	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var error
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_017f:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_017f
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_017f
.L_tc_recycle_frame_done_017f:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00c7:
.L_if_end_00c8:
.L_if_end_00c9:
	jmp .L_if_end_00d2
.L_if_else_00d2:
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param a
	push rax
	push 1	; arg count
	mov rax, qword [free_var_88]	; free var fraction?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00d1
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_91]	; free var integer?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00cc
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_29]	; free var __integer-to-fraction
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, qword [free_var_22]	; free var __bin-mul-qq
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0180:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0180
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0180
.L_tc_recycle_frame_done_0180:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00cc
.L_if_else_00cc:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_88]	; free var fraction?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00cb
	; preparing a tail-call
	mov rax, PARAM(1)	; param b
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, qword [free_var_22]	; free var __bin-mul-qq
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0181:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0181
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0181
.L_tc_recycle_frame_done_0181:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00cb
.L_if_else_00cb:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_116]	; free var real?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00ca
	; preparing a tail-call
	mov rax, PARAM(1)	; param b
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param a
	push rax
	push 1	; arg count
	mov rax, qword [free_var_87]	; free var fraction->real
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, qword [free_var_23]	; free var __bin-mul-rr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0182:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0182
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0182
.L_tc_recycle_frame_done_0182:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00ca
.L_if_else_00ca:
	; preparing a tail-call
	push 0	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var error
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0183:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0183
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0183
.L_tc_recycle_frame_done_0183:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00ca:
.L_if_end_00cb:
.L_if_end_00cc:
	jmp .L_if_end_00d1
.L_if_else_00d1:
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param a
	push rax
	push 1	; arg count
	mov rax, qword [free_var_116]	; free var real?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00d0
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_91]	; free var integer?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00cf
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_90]	; free var integer->real
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, qword [free_var_23]	; free var __bin-mul-rr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0184:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0184
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0184
.L_tc_recycle_frame_done_0184:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00cf
.L_if_else_00cf:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_88]	; free var fraction?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00ce
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_87]	; free var fraction->real
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, qword [free_var_23]	; free var __bin-mul-rr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0185:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0185
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0185
.L_tc_recycle_frame_done_0185:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00ce
.L_if_else_00ce:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_116]	; free var real?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00cd
	; preparing a tail-call
	mov rax, PARAM(1)	; param b
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, qword [free_var_23]	; free var __bin-mul-rr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0186:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0186
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0186
.L_tc_recycle_frame_done_0186:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00cd
.L_if_else_00cd:
	; preparing a tail-call
	push 0	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var error
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0187:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0187
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0187
.L_tc_recycle_frame_done_0187:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00cd:
.L_if_end_00ce:
.L_if_end_00cf:
	jmp .L_if_end_00d0
.L_if_else_00d0:
	; preparing a tail-call
	push 0	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var error
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0188:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0188
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0188
.L_tc_recycle_frame_done_0188:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00d0:
.L_if_end_00d1:
.L_if_end_00d2:
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_0107:	; new closure is in rax
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0108:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_0108
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0108
.L_lambda_simple_env_end_0108:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0108:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0108
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0108
.L_lambda_simple_params_end_0108:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0108
	jmp .L_lambda_simple_end_0108
.L_lambda_simple_code_0108:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0108
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0108:
	enter 0, 0
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_opt_env_loop_0024:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_opt_env_end_0024
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_opt_env_loop_0024
.L_lambda_opt_env_end_0024:
	pop rbx
	mov rsi, 0
.L_lambda_opt_params_loop_0024:	; copy params
	cmp rsi, 1
	je .L_lambda_opt_params_end_0024
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_opt_params_loop_0024
.L_lambda_opt_params_end_0024:
	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0024
	jmp .L_lambda_opt_end_0024
.L_lambda_opt_code_0024:	; lambda-opt body
	cmp qword [rsp + 8 * 2], 0
	je .L_lambda_opt_arity_check_exact_0024
	jg .L_lambda_opt_arity_check_more_0024
	push qword [rsp + 8 * 2]
	push 0
	jmp L_error_incorrect_arity_opt
.L_lambda_opt_arity_check_exact_0024:
	sub rsp, 8
	mov rax, qword[rsp + 8 *1]
	mov qword[rsp], rax  
	mov rax, qword[rsp + 8 *2] ;rax now holds env 
	mov qword[rsp + 8 * 1], rax
	mov rax, 1
	mov qword[rsp + 8 *2], rax
	mov rax, sob_nil
	mov qword[rsp + 8 * (3 + 0)], rax
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(0)	; param s
	push rax
	mov rax, L_constants + 2270
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var bin*
	push rax
	push 3	; arg count
	mov rax, qword [free_var_85]	; free var fold-left
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_018a:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_018a
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_018a
.L_tc_recycle_frame_done_018a:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
	jmp .L_lambda_opt_end_0024	; new closure is in rax
.L_lambda_opt_arity_check_more_0024:
	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
	mov r9, sob_nil
	mov rbx, rsp 
	add rbx, 3*8 	; now rbx is pointing to the first param
	dec r8	 ;to get to the top - starting at 0 not 1
	shl r8, 3
	add rbx, r8	 ;rbx now points to the last opt param that was pushed
	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
.L_lambda_opt_stack_shrink_loop_0024:
	cmp r8, 0
	je .L_lambda_opt_stack_shrink_loop_exit_0024
	mov rdi, 1+8+8 ;for pair
	call malloc;to create the pair in the stack
	mov byte [rax], T_pair ; to make it a pair
	mov rcx, qword[rbx] ;rcx is holding the param to copy
	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 	mov qword[rax+1+8],r9
	mov r9, rax ;for the recursion 
	dec r8 ;we finished copy another opt param to the list
	sub rbx, 8 ;to get the next param to copy
	jmp .L_lambda_opt_stack_shrink_loop_0024
.L_lambda_opt_stack_shrink_loop_exit_0024:
	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
	sub rcx, 1
	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
	add rsp, rcx ;shrinking the stack
	mov rax, rsp
	sub rax, rcx ;now rax is pointing on the original ret
	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
	dec r8 ;we start with param 0, not 1 
	add rax, 3 * 8;now rax is param 0
	shl r8, 3;convert to byte
	add rax, r8;now rax is the top of the stack
	mov qword[rax], r9;puting the list at the top
	sub rax, 8;rax is the adress to copy to the not optional params
	mov rbx, rsp 
	sub rbx, rcx;rbx is the ret adress in the original
	mov r10, 0;r10 is the not opt params length
	dec r10 
	shl r10, 3;to get bytes
	add rbx, 3*8;rbx is the first param
	add rbx, r10; rbx is where the address to copy to
	mov rax, rsp
	sub rax, rcx 	 ;now rax is original ret
	mov qword [rsp+2*8], 1
	mov rbx, qword[rax + 8 *1]
	mov qword [rsp + 1*8] ,rbx
	mov rbx, qword[rax]
	mov qword [rsp], rbx
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(0)	; param s
	push rax
	mov rax, L_constants + 2270
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var bin*
	push rax
	push 3	; arg count
	mov rax, qword [free_var_85]	; free var fold-left
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0189:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0189
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0189
.L_tc_recycle_frame_done_0189:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_opt_end_0024:	; new closure is in rax
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0108:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_018b:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_018b
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_018b
.L_tc_recycle_frame_done_018b:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0106:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_0], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	; preparing a non-tail-call
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0109:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_0109
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0109
.L_lambda_simple_env_end_0109:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0109:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_0109
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0109
.L_lambda_simple_params_end_0109:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0109
	jmp .L_lambda_simple_end_0109
.L_lambda_simple_code_0109:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 0
	je .L_lambda_simple_arity_check_ok_0109
	push qword [rsp + 8 * 2]
	push 0
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0109:
	enter 0, 0
	; preparing a tail-call
	mov rax, L_constants + 2187
	push rax
	mov rax, L_constants + 2298
	push rax
	push 2	; arg count
	mov rax, qword [free_var_82]	; free var error
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_018c:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_018c
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_018c
.L_tc_recycle_frame_done_018c:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(0)
.L_lambda_simple_end_0109:	; new closure is in rax
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_010a:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_010a
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_010a
.L_lambda_simple_env_end_010a:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_010a:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_010a
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_010a
.L_lambda_simple_params_end_010a:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_010a
	jmp .L_lambda_simple_end_010a
.L_lambda_simple_code_010a:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_010a
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_010a:
	enter 0, 0
	; preparing a tail-call
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_010b:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_010b
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_010b
.L_lambda_simple_env_end_010b:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_010b:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_010b
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_010b
.L_lambda_simple_params_end_010b:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_010b
	jmp .L_lambda_simple_end_010b
.L_lambda_simple_code_010b:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_010b
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_010b:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param a
	push rax
	push 1	; arg count
	mov rax, qword [free_var_91]	; free var integer?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00de
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_91]	; free var integer?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00d5
	; preparing a tail-call
	mov rax, PARAM(1)	; param b
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, qword [free_var_15]	; free var __bin-div-zz
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_018d:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_018d
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_018d
.L_tc_recycle_frame_done_018d:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00d5
.L_if_else_00d5:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_88]	; free var fraction?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00d4
	; preparing a tail-call
	mov rax, PARAM(1)	; param b
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param a
	push rax
	push 1	; arg count
	mov rax, qword [free_var_29]	; free var __integer-to-fraction
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, qword [free_var_13]	; free var __bin-div-qq
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_018e:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_018e
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_018e
.L_tc_recycle_frame_done_018e:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00d4
.L_if_else_00d4:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_116]	; free var real?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00d3
	; preparing a tail-call
	mov rax, PARAM(1)	; param b
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param a
	push rax
	push 1	; arg count
	mov rax, qword [free_var_90]	; free var integer->real
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, qword [free_var_14]	; free var __bin-div-rr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_018f:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_018f
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_018f
.L_tc_recycle_frame_done_018f:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00d3
.L_if_else_00d3:
	; preparing a tail-call
	push 0	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var error
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0190:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0190
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0190
.L_tc_recycle_frame_done_0190:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00d3:
.L_if_end_00d4:
.L_if_end_00d5:
	jmp .L_if_end_00de
.L_if_else_00de:
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param a
	push rax
	push 1	; arg count
	mov rax, qword [free_var_88]	; free var fraction?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00dd
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_91]	; free var integer?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00d8
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_29]	; free var __integer-to-fraction
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, qword [free_var_13]	; free var __bin-div-qq
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0191:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0191
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0191
.L_tc_recycle_frame_done_0191:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00d8
.L_if_else_00d8:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_88]	; free var fraction?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00d7
	; preparing a tail-call
	mov rax, PARAM(1)	; param b
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, qword [free_var_13]	; free var __bin-div-qq
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0192:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0192
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0192
.L_tc_recycle_frame_done_0192:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00d7
.L_if_else_00d7:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_116]	; free var real?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00d6
	; preparing a tail-call
	mov rax, PARAM(1)	; param b
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param a
	push rax
	push 1	; arg count
	mov rax, qword [free_var_87]	; free var fraction->real
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, qword [free_var_14]	; free var __bin-div-rr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0193:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0193
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0193
.L_tc_recycle_frame_done_0193:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00d6
.L_if_else_00d6:
	; preparing a tail-call
	push 0	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var error
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0194:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0194
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0194
.L_tc_recycle_frame_done_0194:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00d6:
.L_if_end_00d7:
.L_if_end_00d8:
	jmp .L_if_end_00dd
.L_if_else_00dd:
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param a
	push rax
	push 1	; arg count
	mov rax, qword [free_var_116]	; free var real?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00dc
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_91]	; free var integer?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00db
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_90]	; free var integer->real
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, qword [free_var_14]	; free var __bin-div-rr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0195:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0195
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0195
.L_tc_recycle_frame_done_0195:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00db
.L_if_else_00db:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_88]	; free var fraction?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00da
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_87]	; free var fraction->real
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, qword [free_var_14]	; free var __bin-div-rr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0196:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0196
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0196
.L_tc_recycle_frame_done_0196:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00da
.L_if_else_00da:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_116]	; free var real?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00d9
	; preparing a tail-call
	mov rax, PARAM(1)	; param b
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, qword [free_var_14]	; free var __bin-div-rr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0197:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0197
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0197
.L_tc_recycle_frame_done_0197:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00d9
.L_if_else_00d9:
	; preparing a tail-call
	push 0	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var error
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0198:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0198
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0198
.L_tc_recycle_frame_done_0198:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00d9:
.L_if_end_00da:
.L_if_end_00db:
	jmp .L_if_end_00dc
.L_if_else_00dc:
	; preparing a tail-call
	push 0	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var error
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0199:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0199
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0199
.L_tc_recycle_frame_done_0199:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00dc:
.L_if_end_00dd:
.L_if_end_00de:
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_010b:	; new closure is in rax
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_010c:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_010c
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_010c
.L_lambda_simple_env_end_010c:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_010c:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_010c
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_010c
.L_lambda_simple_params_end_010c:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_010c
	jmp .L_lambda_simple_end_010c
.L_lambda_simple_code_010c:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_010c
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_010c:
	enter 0, 0
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_opt_env_loop_0025:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_opt_env_end_0025
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_opt_env_loop_0025
.L_lambda_opt_env_end_0025:
	pop rbx
	mov rsi, 0
.L_lambda_opt_params_loop_0025:	; copy params
	cmp rsi, 1
	je .L_lambda_opt_params_end_0025
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_opt_params_loop_0025
.L_lambda_opt_params_end_0025:
	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0025
	jmp .L_lambda_opt_end_0025
.L_lambda_opt_code_0025:	; lambda-opt body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_opt_arity_check_exact_0025
	jg .L_lambda_opt_arity_check_more_0025
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_opt
.L_lambda_opt_arity_check_exact_0025:
	sub rsp, 8
	mov rax, qword[rsp + 8 *1]
	mov qword[rsp], rax  
	mov rax, qword[rsp + 8 *2] ;rax now holds env 
	mov qword[rsp + 8 * 1], rax
	mov rax, 2
	mov qword[rsp + 8 *2], rax
	mov rax, qword[rsp + 8 * (4 + 0)]
	mov qword[rsp + 8 * (3 + 0)], rax
	mov rax, sob_nil
	mov qword[rsp + 8 * (3 + 1)], rax
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00e0
	; preparing a tail-call
	mov rax, PARAM(0)	; param a
	push rax
	mov rax, L_constants + 2270
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var bin/
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_019d:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_019d
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_019d
.L_tc_recycle_frame_done_019d:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00e0
.L_if_else_00e0:
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s
	push rax
	mov rax, L_constants + 2270
	push rax
	mov rax, qword [free_var_0]	; free var *
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 3	; arg count
	mov rax, qword [free_var_85]	; free var fold-left
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 4	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_010e:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 3
	je .L_lambda_simple_env_end_010e
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_010e
.L_lambda_simple_env_end_010e:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_010e:	; copy params
	cmp rsi, 2
	je .L_lambda_simple_params_end_010e
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_010e
.L_lambda_simple_params_end_010e:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_010e
	jmp .L_lambda_simple_end_010e
.L_lambda_simple_code_010e:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_010e
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_010e:
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(0)	; param b
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var a
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var bin/
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_019e:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_019e
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_019e
.L_tc_recycle_frame_done_019e:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_010e:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_019f:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_019f
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_019f
.L_tc_recycle_frame_done_019f:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00e0:
	leave
	ret AND_KILL_FRAME(2)
	jmp .L_lambda_opt_end_0025	; new closure is in rax
.L_lambda_opt_arity_check_more_0025:
	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
	mov r9, sob_nil
	mov rbx, rsp 
	add rbx, 3*8 	; now rbx is pointing to the first param
	dec r8	 ;to get to the top - starting at 0 not 1
	shl r8, 3
	add rbx, r8	 ;rbx now points to the last opt param that was pushed
	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
.L_lambda_opt_stack_shrink_loop_0025:
	cmp r8, 1
	je .L_lambda_opt_stack_shrink_loop_exit_0025
	mov rdi, 1+8+8 ;for pair
	call malloc;to create the pair in the stack
	mov byte [rax], T_pair ; to make it a pair
	mov rcx, qword[rbx] ;rcx is holding the param to copy
	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 	mov qword[rax+1+8],r9
	mov r9, rax ;for the recursion 
	dec r8 ;we finished copy another opt param to the list
	sub rbx, 8 ;to get the next param to copy
	jmp .L_lambda_opt_stack_shrink_loop_0025
.L_lambda_opt_stack_shrink_loop_exit_0025:
	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
	sub rcx, 2
	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
	add rsp, rcx ;shrinking the stack
	mov rax, rsp
	sub rax, rcx ;now rax is pointing on the original ret
	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
	dec r8 ;we start with param 0, not 1 
	add rax, 3 * 8;now rax is param 0
	shl r8, 3;convert to byte
	add rax, r8;now rax is the top of the stack
	mov qword[rax], r9;puting the list at the top
	sub rax, 8;rax is the adress to copy to the not optional params
	mov rbx, rsp 
	sub rbx, rcx;rbx is the ret adress in the original
	mov r10, 1;r10 is the not opt params length
	dec r10 
	shl r10, 3;to get bytes
	add rbx, 3*8;rbx is the first param
	add rbx, r10; rbx is where the address to copy to
	mov r8, qword [rbx] 	;r8 is holding the param to copy
	mov qword[rax], r8
	sub rax, 8
	sub rbx, 8
	mov rax, rsp
	sub rax, rcx 	 ;now rax is original ret
	mov qword [rsp+2*8], 2
	mov rbx, qword[rax + 8 *1]
	mov qword [rsp + 1*8] ,rbx
	mov rbx, qword[rax]
	mov qword [rsp], rbx
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00df
	; preparing a tail-call
	mov rax, PARAM(0)	; param a
	push rax
	mov rax, L_constants + 2270
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var bin/
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_019a:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_019a
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_019a
.L_tc_recycle_frame_done_019a:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00df
.L_if_else_00df:
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s
	push rax
	mov rax, L_constants + 2270
	push rax
	mov rax, qword [free_var_0]	; free var *
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 3	; arg count
	mov rax, qword [free_var_85]	; free var fold-left
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 4	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_010d:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 3
	je .L_lambda_simple_env_end_010d
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_010d
.L_lambda_simple_env_end_010d:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_010d:	; copy params
	cmp rsi, 2
	je .L_lambda_simple_params_end_010d
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_010d
.L_lambda_simple_params_end_010d:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_010d
	jmp .L_lambda_simple_end_010d
.L_lambda_simple_code_010d:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_010d
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_010d:
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(0)	; param b
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var a
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var bin/
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_019b:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_019b
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_019b
.L_tc_recycle_frame_done_019b:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_010d:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_019c:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_019c
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_019c
.L_tc_recycle_frame_done_019c:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00df:
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_opt_end_0025:	; new closure is in rax
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_010c:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01a0:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01a0
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01a0
.L_tc_recycle_frame_done_01a0:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_010a:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_3], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_010f:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_010f
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_010f
.L_lambda_simple_env_end_010f:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_010f:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_010f
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_010f
.L_lambda_simple_params_end_010f:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_010f
	jmp .L_lambda_simple_end_010f
.L_lambda_simple_code_010f:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_010f
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_010f:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param n
	push rax
	push 1	; arg count
	mov rax, qword [free_var_151]	; free var zero?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00e1
	mov rax, L_constants + 2270
	jmp .L_if_end_00e1
.L_if_else_00e1:
	; preparing a tail-call
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, L_constants + 2270
	push rax
	mov rax, PARAM(0)	; param n
	push rax
	push 2	; arg count
	mov rax, qword [free_var_2]	; free var -
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_84]	; free var fact
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param n
	push rax
	push 2	; arg count
	mov rax, qword [free_var_0]	; free var *
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01a1:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01a1
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01a1
.L_tc_recycle_frame_done_01a1:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00e1:
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_010f:	; new closure is in rax
	mov qword [free_var_84], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rax, L_constants + 0
	mov qword [free_var_4], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rax, L_constants + 0
	mov qword [free_var_5], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rax, L_constants + 0
	mov qword [free_var_7], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rax, L_constants + 0
	mov qword [free_var_8], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rax, L_constants + 0
	mov qword [free_var_6], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	; preparing a non-tail-call
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0110:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_0110
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0110
.L_lambda_simple_env_end_0110:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0110:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_0110
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0110
.L_lambda_simple_params_end_0110:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0110
	jmp .L_lambda_simple_end_0110
.L_lambda_simple_code_0110:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 0
	je .L_lambda_simple_arity_check_ok_0110
	push qword [rsp + 8 * 2]
	push 0
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0110:
	enter 0, 0
	; preparing a tail-call
	mov rax, L_constants + 2408
	push rax
	mov rax, L_constants + 2399
	push rax
	push 2	; arg count
	mov rax, qword [free_var_82]	; free var error
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01a2:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01a2
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01a2
.L_tc_recycle_frame_done_01a2:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(0)
.L_lambda_simple_end_0110:	; new closure is in rax
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0111:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_0111
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0111
.L_lambda_simple_env_end_0111:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0111:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_0111
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0111
.L_lambda_simple_params_end_0111:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0111
	jmp .L_lambda_simple_end_0111
.L_lambda_simple_code_0111:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0111
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0111:
	enter 0, 0
	; preparing a tail-call
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0112:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_0112
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0112
.L_lambda_simple_env_end_0112:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0112:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0112
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0112
.L_lambda_simple_params_end_0112:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0112
	jmp .L_lambda_simple_end_0112
.L_lambda_simple_code_0112:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 3
	je .L_lambda_simple_arity_check_ok_0112
	push qword [rsp + 8 * 2]
	push 3
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0112:
	enter 0, 0
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 3	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0113:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_simple_env_end_0113
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0113
.L_lambda_simple_env_end_0113:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0113:	; copy params
	cmp rsi, 3
	je .L_lambda_simple_params_end_0113
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0113
.L_lambda_simple_params_end_0113:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0113
	jmp .L_lambda_simple_end_0113
.L_lambda_simple_code_0113:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_0113
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0113:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param a
	push rax
	push 1	; arg count
	mov rax, qword [free_var_91]	; free var integer?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00ed
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_91]	; free var integer?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00e4
	; preparing a tail-call
	mov rax, PARAM(1)	; param b
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var comparator-zz
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01a3:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01a3
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01a3
.L_tc_recycle_frame_done_01a3:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00e4
.L_if_else_00e4:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_88]	; free var fraction?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00e3
	; preparing a tail-call
	mov rax, PARAM(1)	; param b
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param a
	push rax
	push 1	; arg count
	mov rax, qword [free_var_29]	; free var __integer-to-fraction
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 1]	; bound var comparator-qq
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01a4:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01a4
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01a4
.L_tc_recycle_frame_done_01a4:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00e3
.L_if_else_00e3:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_116]	; free var real?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00e2
	; preparing a tail-call
	mov rax, PARAM(1)	; param b
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param a
	push rax
	push 1	; arg count
	mov rax, qword [free_var_90]	; free var integer->real
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01a5:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01a5
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01a5
.L_tc_recycle_frame_done_01a5:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00e2
.L_if_else_00e2:
	; preparing a tail-call
	push 0	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var exit
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01a6:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01a6
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01a6
.L_tc_recycle_frame_done_01a6:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00e2:
.L_if_end_00e3:
.L_if_end_00e4:
	jmp .L_if_end_00ed
.L_if_else_00ed:
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param a
	push rax
	push 1	; arg count
	mov rax, qword [free_var_88]	; free var fraction?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00ec
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_91]	; free var integer?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00e7
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_29]	; free var __integer-to-fraction
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 1]	; bound var comparator-qq
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01a7:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01a7
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01a7
.L_tc_recycle_frame_done_01a7:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00e7
.L_if_else_00e7:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_88]	; free var fraction?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00e6
	; preparing a tail-call
	mov rax, PARAM(1)	; param b
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 1]	; bound var comparator-qq
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01a8:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01a8
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01a8
.L_tc_recycle_frame_done_01a8:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00e6
.L_if_else_00e6:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_116]	; free var real?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00e5
	; preparing a tail-call
	mov rax, PARAM(1)	; param b
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param a
	push rax
	push 1	; arg count
	mov rax, qword [free_var_87]	; free var fraction->real
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01a9:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01a9
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01a9
.L_tc_recycle_frame_done_01a9:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00e5
.L_if_else_00e5:
	; preparing a tail-call
	push 0	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var exit
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01aa:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01aa
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01aa
.L_tc_recycle_frame_done_01aa:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00e5:
.L_if_end_00e6:
.L_if_end_00e7:
	jmp .L_if_end_00ec
.L_if_else_00ec:
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param a
	push rax
	push 1	; arg count
	mov rax, qword [free_var_116]	; free var real?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00eb
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_91]	; free var integer?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00ea
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_90]	; free var integer->real
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01ab:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01ab
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01ab
.L_tc_recycle_frame_done_01ab:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00ea
.L_if_else_00ea:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_88]	; free var fraction?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00e9
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_87]	; free var fraction->real
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01ac:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01ac
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01ac
.L_tc_recycle_frame_done_01ac:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00e9
.L_if_else_00e9:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	push 1	; arg count
	mov rax, qword [free_var_116]	; free var real?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00e8
	; preparing a tail-call
	mov rax, PARAM(1)	; param b
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01ad:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01ad
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01ad
.L_tc_recycle_frame_done_01ad:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00e8
.L_if_else_00e8:
	; preparing a tail-call
	push 0	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var exit
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01ae:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01ae
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01ae
.L_tc_recycle_frame_done_01ae:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00e8:
.L_if_end_00e9:
.L_if_end_00ea:
	jmp .L_if_end_00eb
.L_if_else_00eb:
	; preparing a tail-call
	push 0	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var exit
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01af:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01af
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01af
.L_tc_recycle_frame_done_01af:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00eb:
.L_if_end_00ec:
.L_if_end_00ed:
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_0113:	; new closure is in rax
	leave
	ret AND_KILL_FRAME(3)
.L_lambda_simple_end_0112:	; new closure is in rax
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0114:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_0114
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0114
.L_lambda_simple_env_end_0114:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0114:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0114
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0114
.L_lambda_simple_params_end_0114:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0114
	jmp .L_lambda_simple_end_0114
.L_lambda_simple_code_0114:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0114
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0114:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, qword [free_var_20]	; free var __bin-less-than-rr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	mov rax, qword [free_var_19]	; free var __bin-less-than-qq
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	mov rax, qword [free_var_21]	; free var __bin-less-than-zz
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 3	; arg count
	mov rax, PARAM(0)	; param make-bin-comparator
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0115:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_simple_env_end_0115
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0115
.L_lambda_simple_env_end_0115:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0115:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0115
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0115
.L_lambda_simple_params_end_0115:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0115
	jmp .L_lambda_simple_end_0115
.L_lambda_simple_code_0115:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0115
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0115:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, qword [free_var_17]	; free var __bin-equal-rr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	mov rax, qword [free_var_16]	; free var __bin-equal-qq
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	mov rax, qword [free_var_18]	; free var __bin-equal-zz
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 3	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var make-bin-comparator
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 4	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0116:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 3
	je .L_lambda_simple_env_end_0116
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0116
.L_lambda_simple_env_end_0116:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0116:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0116
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0116
.L_lambda_simple_params_end_0116:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0116
	jmp .L_lambda_simple_end_0116
.L_lambda_simple_code_0116:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0116
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0116:
	enter 0, 0
	; preparing a tail-call
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 5	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0117:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 4
	je .L_lambda_simple_env_end_0117
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0117
.L_lambda_simple_env_end_0117:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0117:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0117
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0117
.L_lambda_simple_params_end_0117:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0117
	jmp .L_lambda_simple_end_0117
.L_lambda_simple_code_0117:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_0117
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0117:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var bin<?
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_106]	; free var not
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01b0:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01b0
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01b0
.L_tc_recycle_frame_done_01b0:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_0117:	; new closure is in rax
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 5	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0118:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 4
	je .L_lambda_simple_env_end_0118
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0118
.L_lambda_simple_env_end_0118:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0118:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0118
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0118
.L_lambda_simple_params_end_0118:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0118
	jmp .L_lambda_simple_end_0118
.L_lambda_simple_code_0118:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0118
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0118:
	enter 0, 0
	; preparing a tail-call
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 6	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0119:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 5
	je .L_lambda_simple_env_end_0119
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0119
.L_lambda_simple_env_end_0119:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0119:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0119
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0119
.L_lambda_simple_params_end_0119:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0119
	jmp .L_lambda_simple_end_0119
.L_lambda_simple_code_0119:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_0119
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0119:
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(0)	; param a
	push rax
	mov rax, PARAM(1)	; param b
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 2]
	mov rax, qword [rax + 8 * 0]	; bound var bin<?
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01b1:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01b1
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01b1
.L_tc_recycle_frame_done_01b1:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_0119:	; new closure is in rax
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 6	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_011a:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 5
	je .L_lambda_simple_env_end_011a
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_011a
.L_lambda_simple_env_end_011a:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_011a:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_011a
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_011a
.L_lambda_simple_params_end_011a:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_011a
	jmp .L_lambda_simple_end_011a
.L_lambda_simple_code_011a:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_011a
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_011a:
	enter 0, 0
	; preparing a tail-call
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 7	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_011b:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 6
	je .L_lambda_simple_env_end_011b
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_011b
.L_lambda_simple_env_end_011b:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_011b:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_011b
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_011b
.L_lambda_simple_params_end_011b:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_011b
	jmp .L_lambda_simple_end_011b
.L_lambda_simple_code_011b:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_011b
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_011b:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var bin>?
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_106]	; free var not
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01b2:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01b2
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01b2
.L_tc_recycle_frame_done_01b2:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_011b:	; new closure is in rax
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 7	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_011c:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 6
	je .L_lambda_simple_env_end_011c
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_011c
.L_lambda_simple_env_end_011c:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_011c:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_011c
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_011c
.L_lambda_simple_params_end_011c:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_011c
	jmp .L_lambda_simple_end_011c
.L_lambda_simple_code_011c:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_011c
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_011c:
	enter 0, 0
	; preparing a tail-call
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 8	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_011d:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 7
	je .L_lambda_simple_env_end_011d
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_011d
.L_lambda_simple_env_end_011d:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_011d:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_011d
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_011d
.L_lambda_simple_params_end_011d:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_011d
	jmp .L_lambda_simple_end_011d
.L_lambda_simple_code_011d:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_011d
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_011d:
	enter 0, 0
	; preparing a tail-call
	mov rax, L_constants + 1993
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 9	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_011e:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 8
	je .L_lambda_simple_env_end_011e
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_011e
.L_lambda_simple_env_end_011e:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_011e:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_011e
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_011e
.L_lambda_simple_params_end_011e:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_011e
	jmp .L_lambda_simple_end_011e
.L_lambda_simple_code_011e:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_011e
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_011e:
	enter 0, 0
	mov rdi, 8*1
	call malloc
	mov rbx, PARAM(0)
	mov qword[rax], rbx
	mov PARAM(0), rax
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 10	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_011f:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 9
	je .L_lambda_simple_env_end_011f
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_011f
.L_lambda_simple_env_end_011f:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_011f:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_011f
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_011f
.L_lambda_simple_params_end_011f:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_011f
	jmp .L_lambda_simple_end_011f
.L_lambda_simple_code_011f:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_011f
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_011f:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	jne .L_or_end_001a
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var bin-ordering
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00ee
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01b3:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01b3
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01b3
.L_tc_recycle_frame_done_01b3:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00ee
.L_if_else_00ee:
	mov rax, L_constants + 2
.L_if_end_00ee:
.L_or_end_001a:
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_011f:	; new closure is in rax
	push rax
	mov rax, PARAM(0)	; param run
	pop qword [rax]
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 10	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_opt_env_loop_0026:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 9
	je .L_lambda_opt_env_end_0026
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_opt_env_loop_0026
.L_lambda_opt_env_end_0026:
	pop rbx
	mov rsi, 0
.L_lambda_opt_params_loop_0026:	; copy params
	cmp rsi, 1
	je .L_lambda_opt_params_end_0026
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_opt_params_loop_0026
.L_lambda_opt_params_end_0026:
	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0026
	jmp .L_lambda_opt_end_0026
.L_lambda_opt_code_0026:	; lambda-opt body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_opt_arity_check_exact_0026
	jg .L_lambda_opt_arity_check_more_0026
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_opt
.L_lambda_opt_arity_check_exact_0026:
	sub rsp, 8
	mov rax, qword[rsp + 8 *1]
	mov qword[rsp], rax  
	mov rax, qword[rsp + 8 *2] ;rax now holds env 
	mov qword[rsp + 8 * 1], rax
	mov rax, 2
	mov qword[rsp + 8 *2], rax
	mov rax, qword[rsp + 8 * (4 + 0)]
	mov qword[rsp + 8 * (3 + 0)], rax
	mov rax, sob_nil
	mov qword[rsp + 8 * (3 + 1)], rax
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(1)	; param s
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01b5:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01b5
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01b5
.L_tc_recycle_frame_done_01b5:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(2)
	jmp .L_lambda_opt_end_0026	; new closure is in rax
.L_lambda_opt_arity_check_more_0026:
	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
	mov r9, sob_nil
	mov rbx, rsp 
	add rbx, 3*8 	; now rbx is pointing to the first param
	dec r8	 ;to get to the top - starting at 0 not 1
	shl r8, 3
	add rbx, r8	 ;rbx now points to the last opt param that was pushed
	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
.L_lambda_opt_stack_shrink_loop_0026:
	cmp r8, 1
	je .L_lambda_opt_stack_shrink_loop_exit_0026
	mov rdi, 1+8+8 ;for pair
	call malloc;to create the pair in the stack
	mov byte [rax], T_pair ; to make it a pair
	mov rcx, qword[rbx] ;rcx is holding the param to copy
	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 	mov qword[rax+1+8],r9
	mov r9, rax ;for the recursion 
	dec r8 ;we finished copy another opt param to the list
	sub rbx, 8 ;to get the next param to copy
	jmp .L_lambda_opt_stack_shrink_loop_0026
.L_lambda_opt_stack_shrink_loop_exit_0026:
	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
	sub rcx, 2
	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
	add rsp, rcx ;shrinking the stack
	mov rax, rsp
	sub rax, rcx ;now rax is pointing on the original ret
	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
	dec r8 ;we start with param 0, not 1 
	add rax, 3 * 8;now rax is param 0
	shl r8, 3;convert to byte
	add rax, r8;now rax is the top of the stack
	mov qword[rax], r9;puting the list at the top
	sub rax, 8;rax is the adress to copy to the not optional params
	mov rbx, rsp 
	sub rbx, rcx;rbx is the ret adress in the original
	mov r10, 1;r10 is the not opt params length
	dec r10 
	shl r10, 3;to get bytes
	add rbx, 3*8;rbx is the first param
	add rbx, r10; rbx is where the address to copy to
	mov r8, qword [rbx] 	;r8 is holding the param to copy
	mov qword[rax], r8
	sub rax, 8
	sub rbx, 8
	mov rax, rsp
	sub rax, rcx 	 ;now rax is original ret
	mov qword [rsp+2*8], 2
	mov rbx, qword[rax + 8 *1]
	mov qword [rsp + 1*8] ,rbx
	mov rbx, qword[rax]
	mov qword [rsp], rbx
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(1)	; param s
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01b4:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01b4
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01b4
.L_tc_recycle_frame_done_01b4:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_opt_end_0026:	; new closure is in rax
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_011e:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01b6:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01b6
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01b6
.L_tc_recycle_frame_done_01b6:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_011d:	; new closure is in rax
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 8	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0120:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 7
	je .L_lambda_simple_env_end_0120
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0120
.L_lambda_simple_env_end_0120:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0120:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0120
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0120
.L_lambda_simple_params_end_0120:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0120
	jmp .L_lambda_simple_end_0120
.L_lambda_simple_code_0120:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0120
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0120:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, ENV
	mov rax, qword [rax + 8 * 4]
	mov rax, qword [rax + 8 * 0]	; bound var bin<?
	push rax
	push 1	; arg count
	mov rax, PARAM(0)	; param make-run
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_4], rax
	mov rax, sob_void

	; preparing a non-tail-call
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var bin<=?
	push rax
	push 1	; arg count
	mov rax, PARAM(0)	; param make-run
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_5], rax
	mov rax, sob_void

	; preparing a non-tail-call
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var bin>?
	push rax
	push 1	; arg count
	mov rax, PARAM(0)	; param make-run
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_7], rax
	mov rax, sob_void

	; preparing a non-tail-call
	mov rax, ENV
	mov rax, qword [rax + 8 * 2]
	mov rax, qword [rax + 8 * 0]	; bound var bin>=?
	push rax
	push 1	; arg count
	mov rax, PARAM(0)	; param make-run
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_8], rax
	mov rax, sob_void

	; preparing a non-tail-call
	mov rax, ENV
	mov rax, qword [rax + 8 * 3]
	mov rax, qword [rax + 8 * 0]	; bound var bin=?
	push rax
	push 1	; arg count
	mov rax, PARAM(0)	; param make-run
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_6], rax
	mov rax, sob_void
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0120:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01b7:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01b7
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01b7
.L_tc_recycle_frame_done_01b7:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_011c:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01b8:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01b8
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01b8
.L_tc_recycle_frame_done_01b8:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_011a:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01b9:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01b9
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01b9
.L_tc_recycle_frame_done_01b9:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0118:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01ba:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01ba
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01ba
.L_tc_recycle_frame_done_01ba:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0116:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01bb:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01bb
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01bb
.L_tc_recycle_frame_done_01bb:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0115:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01bc:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01bc
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01bc
.L_tc_recycle_frame_done_01bc:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0114:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01bd:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01bd
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01bd
.L_tc_recycle_frame_done_01bd:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0111:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rax, L_constants + 0
	mov qword [free_var_74], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rax, L_constants + 0
	mov qword [free_var_73], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rax, L_constants + 0
	mov qword [free_var_75], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rax, L_constants + 0
	mov qword [free_var_77], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rax, L_constants + 0
	mov qword [free_var_76], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	; preparing a non-tail-call
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0121:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_0121
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0121
.L_lambda_simple_env_end_0121:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0121:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_0121
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0121
.L_lambda_simple_params_end_0121:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0121
	jmp .L_lambda_simple_end_0121
.L_lambda_simple_code_0121:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0121
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0121:
	enter 0, 0
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_opt_env_loop_0027:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_opt_env_end_0027
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_opt_env_loop_0027
.L_lambda_opt_env_end_0027:
	pop rbx
	mov rsi, 0
.L_lambda_opt_params_loop_0027:	; copy params
	cmp rsi, 1
	je .L_lambda_opt_params_end_0027
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_opt_params_loop_0027
.L_lambda_opt_params_end_0027:
	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0027
	jmp .L_lambda_opt_end_0027
.L_lambda_opt_code_0027:	; lambda-opt body
	cmp qword [rsp + 8 * 2], 0
	je .L_lambda_opt_arity_check_exact_0027
	jg .L_lambda_opt_arity_check_more_0027
	push qword [rsp + 8 * 2]
	push 0
	jmp L_error_incorrect_arity_opt
.L_lambda_opt_arity_check_exact_0027:
	sub rsp, 8
	mov rax, qword[rsp + 8 *1]
	mov qword[rsp], rax  
	mov rax, qword[rsp + 8 *2] ;rax now holds env 
	mov qword[rsp + 8 * 1], rax
	mov rax, 1
	mov qword[rsp + 8 *2], rax
	mov rax, sob_nil
	mov qword[rsp + 8 * (3 + 0)], rax
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param s
	push rax
	mov rax, qword [free_var_65]	; free var char->integer
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, qword [free_var_103]	; free var map
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var comparator
	push rax
	push 2	; arg count
	mov rax, qword [free_var_33]	; free var apply
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01bf:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01bf
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01bf
.L_tc_recycle_frame_done_01bf:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
	jmp .L_lambda_opt_end_0027	; new closure is in rax
.L_lambda_opt_arity_check_more_0027:
	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
	mov r9, sob_nil
	mov rbx, rsp 
	add rbx, 3*8 	; now rbx is pointing to the first param
	dec r8	 ;to get to the top - starting at 0 not 1
	shl r8, 3
	add rbx, r8	 ;rbx now points to the last opt param that was pushed
	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
.L_lambda_opt_stack_shrink_loop_0027:
	cmp r8, 0
	je .L_lambda_opt_stack_shrink_loop_exit_0027
	mov rdi, 1+8+8 ;for pair
	call malloc;to create the pair in the stack
	mov byte [rax], T_pair ; to make it a pair
	mov rcx, qword[rbx] ;rcx is holding the param to copy
	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 	mov qword[rax+1+8],r9
	mov r9, rax ;for the recursion 
	dec r8 ;we finished copy another opt param to the list
	sub rbx, 8 ;to get the next param to copy
	jmp .L_lambda_opt_stack_shrink_loop_0027
.L_lambda_opt_stack_shrink_loop_exit_0027:
	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
	sub rcx, 1
	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
	add rsp, rcx ;shrinking the stack
	mov rax, rsp
	sub rax, rcx ;now rax is pointing on the original ret
	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
	dec r8 ;we start with param 0, not 1 
	add rax, 3 * 8;now rax is param 0
	shl r8, 3;convert to byte
	add rax, r8;now rax is the top of the stack
	mov qword[rax], r9;puting the list at the top
	sub rax, 8;rax is the adress to copy to the not optional params
	mov rbx, rsp 
	sub rbx, rcx;rbx is the ret adress in the original
	mov r10, 0;r10 is the not opt params length
	dec r10 
	shl r10, 3;to get bytes
	add rbx, 3*8;rbx is the first param
	add rbx, r10; rbx is where the address to copy to
	mov rax, rsp
	sub rax, rcx 	 ;now rax is original ret
	mov qword [rsp+2*8], 1
	mov rbx, qword[rax + 8 *1]
	mov qword [rsp + 1*8] ,rbx
	mov rbx, qword[rax]
	mov qword [rsp], rbx
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param s
	push rax
	mov rax, qword [free_var_65]	; free var char->integer
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, qword [free_var_103]	; free var map
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var comparator
	push rax
	push 2	; arg count
	mov rax, qword [free_var_33]	; free var apply
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01be:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01be
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01be
.L_tc_recycle_frame_done_01be:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_opt_end_0027:	; new closure is in rax
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0121:	; new closure is in rax
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0122:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_0122
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0122
.L_lambda_simple_env_end_0122:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0122:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_0122
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0122
.L_lambda_simple_params_end_0122:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0122
	jmp .L_lambda_simple_end_0122
.L_lambda_simple_code_0122:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0122
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0122:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, qword [free_var_4]	; free var <
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 1	; arg count
	mov rax, PARAM(0)	; param make-char-comparator
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_74], rax
	mov rax, sob_void

	; preparing a non-tail-call
	mov rax, qword [free_var_5]	; free var <=
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 1	; arg count
	mov rax, PARAM(0)	; param make-char-comparator
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_73], rax
	mov rax, sob_void

	; preparing a non-tail-call
	mov rax, qword [free_var_6]	; free var =
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 1	; arg count
	mov rax, PARAM(0)	; param make-char-comparator
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_75], rax
	mov rax, sob_void

	; preparing a non-tail-call
	mov rax, qword [free_var_7]	; free var >
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 1	; arg count
	mov rax, PARAM(0)	; param make-char-comparator
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_77], rax
	mov rax, sob_void

	; preparing a non-tail-call
	mov rax, qword [free_var_8]	; free var >=
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 1	; arg count
	mov rax, PARAM(0)	; param make-char-comparator
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_76], rax
	mov rax, sob_void
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0122:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rax, L_constants + 0
	mov qword [free_var_71], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rax, L_constants + 0
	mov qword [free_var_72], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	; preparing a non-tail-call
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, L_constants + 2569
	push rax
	push 1	; arg count
	mov rax, qword [free_var_65]	; free var char->integer
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, L_constants + 2573
	push rax
	push 1	; arg count
	mov rax, qword [free_var_65]	; free var char->integer
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, qword [free_var_2]	; free var -
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0123:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_0123
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0123
.L_lambda_simple_env_end_0123:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0123:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_0123
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0123
.L_lambda_simple_params_end_0123:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0123
	jmp .L_lambda_simple_end_0123
.L_lambda_simple_code_0123:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0123
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0123:
	enter 0, 0
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0124:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_0124
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0124
.L_lambda_simple_env_end_0124:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0124:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0124
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0124
.L_lambda_simple_params_end_0124:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0124
	jmp .L_lambda_simple_end_0124
.L_lambda_simple_code_0124:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0124
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0124:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, L_constants + 2571
	push rax
	mov rax, PARAM(0)	; param ch
	push rax
	mov rax, L_constants + 2569
	push rax
	push 3	; arg count
	mov rax, qword [free_var_73]	; free var char<=?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00ef
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var delta
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param ch
	push rax
	push 1	; arg count
	mov rax, qword [free_var_65]	; free var char->integer
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, qword [free_var_1]	; free var +
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_89]	; free var integer->char
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01c0:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01c0
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01c0
.L_tc_recycle_frame_done_01c0:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00ef
.L_if_else_00ef:
	mov rax, PARAM(0)	; param ch
.L_if_end_00ef:
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0124:	; new closure is in rax
	mov qword [free_var_71], rax
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0125:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_0125
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0125
.L_lambda_simple_env_end_0125:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0125:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0125
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0125
.L_lambda_simple_params_end_0125:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0125
	jmp .L_lambda_simple_end_0125
.L_lambda_simple_code_0125:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0125
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0125:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, L_constants + 2575
	push rax
	mov rax, PARAM(0)	; param ch
	push rax
	mov rax, L_constants + 2573
	push rax
	push 3	; arg count
	mov rax, qword [free_var_73]	; free var char<=?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00f0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var delta
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param ch
	push rax
	push 1	; arg count
	mov rax, qword [free_var_65]	; free var char->integer
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, qword [free_var_2]	; free var -
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_89]	; free var integer->char
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01c1:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01c1
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01c1
.L_tc_recycle_frame_done_01c1:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00f0
.L_if_else_00f0:
	mov rax, PARAM(0)	; param ch
.L_if_end_00f0:
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0125:	; new closure is in rax
	mov qword [free_var_72], rax
	mov rax, sob_void
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0123:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rax, L_constants + 0
	mov qword [free_var_67], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rax, L_constants + 0
	mov qword [free_var_66], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rax, L_constants + 0
	mov qword [free_var_68], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rax, L_constants + 0
	mov qword [free_var_70], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rax, L_constants + 0
	mov qword [free_var_69], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	; preparing a non-tail-call
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0126:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_0126
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0126
.L_lambda_simple_env_end_0126:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0126:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_0126
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0126
.L_lambda_simple_params_end_0126:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0126
	jmp .L_lambda_simple_end_0126
.L_lambda_simple_code_0126:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0126
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0126:
	enter 0, 0
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_opt_env_loop_0028:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_opt_env_end_0028
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_opt_env_loop_0028
.L_lambda_opt_env_end_0028:
	pop rbx
	mov rsi, 0
.L_lambda_opt_params_loop_0028:	; copy params
	cmp rsi, 1
	je .L_lambda_opt_params_end_0028
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_opt_params_loop_0028
.L_lambda_opt_params_end_0028:
	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0028
	jmp .L_lambda_opt_end_0028
.L_lambda_opt_code_0028:	; lambda-opt body
	cmp qword [rsp + 8 * 2], 0
	je .L_lambda_opt_arity_check_exact_0028
	jg .L_lambda_opt_arity_check_more_0028
	push qword [rsp + 8 * 2]
	push 0
	jmp L_error_incorrect_arity_opt
.L_lambda_opt_arity_check_exact_0028:
	sub rsp, 8
	mov rax, qword[rsp + 8 *1]
	mov qword[rsp], rax  
	mov rax, qword[rsp + 8 *2] ;rax now holds env 
	mov qword[rsp + 8 * 1], rax
	mov rax, 1
	mov qword[rsp + 8 *2], rax
	mov rax, sob_nil
	mov qword[rsp + 8 * (3 + 0)], rax
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param s
	push rax
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0128:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_simple_env_end_0128
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0128
.L_lambda_simple_env_end_0128:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0128:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0128
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0128
.L_lambda_simple_params_end_0128:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0128
	jmp .L_lambda_simple_end_0128
.L_lambda_simple_code_0128:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0128
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0128:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param ch
	push rax
	push 1	; arg count
	mov rax, qword [free_var_71]	; free var char-downcase
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_65]	; free var char->integer
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01c4:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01c4
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01c4
.L_tc_recycle_frame_done_01c4:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0128:	; new closure is in rax
	push rax
	push 2	; arg count
	mov rax, qword [free_var_103]	; free var map
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var comparator
	push rax
	push 2	; arg count
	mov rax, qword [free_var_33]	; free var apply
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01c5:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01c5
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01c5
.L_tc_recycle_frame_done_01c5:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
	jmp .L_lambda_opt_end_0028	; new closure is in rax
.L_lambda_opt_arity_check_more_0028:
	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
	mov r9, sob_nil
	mov rbx, rsp 
	add rbx, 3*8 	; now rbx is pointing to the first param
	dec r8	 ;to get to the top - starting at 0 not 1
	shl r8, 3
	add rbx, r8	 ;rbx now points to the last opt param that was pushed
	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
.L_lambda_opt_stack_shrink_loop_0028:
	cmp r8, 0
	je .L_lambda_opt_stack_shrink_loop_exit_0028
	mov rdi, 1+8+8 ;for pair
	call malloc;to create the pair in the stack
	mov byte [rax], T_pair ; to make it a pair
	mov rcx, qword[rbx] ;rcx is holding the param to copy
	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 	mov qword[rax+1+8],r9
	mov r9, rax ;for the recursion 
	dec r8 ;we finished copy another opt param to the list
	sub rbx, 8 ;to get the next param to copy
	jmp .L_lambda_opt_stack_shrink_loop_0028
.L_lambda_opt_stack_shrink_loop_exit_0028:
	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
	sub rcx, 1
	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
	add rsp, rcx ;shrinking the stack
	mov rax, rsp
	sub rax, rcx ;now rax is pointing on the original ret
	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
	dec r8 ;we start with param 0, not 1 
	add rax, 3 * 8;now rax is param 0
	shl r8, 3;convert to byte
	add rax, r8;now rax is the top of the stack
	mov qword[rax], r9;puting the list at the top
	sub rax, 8;rax is the adress to copy to the not optional params
	mov rbx, rsp 
	sub rbx, rcx;rbx is the ret adress in the original
	mov r10, 0;r10 is the not opt params length
	dec r10 
	shl r10, 3;to get bytes
	add rbx, 3*8;rbx is the first param
	add rbx, r10; rbx is where the address to copy to
	mov rax, rsp
	sub rax, rcx 	 ;now rax is original ret
	mov qword [rsp+2*8], 1
	mov rbx, qword[rax + 8 *1]
	mov qword [rsp + 1*8] ,rbx
	mov rbx, qword[rax]
	mov qword [rsp], rbx
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param s
	push rax
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0127:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_simple_env_end_0127
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0127
.L_lambda_simple_env_end_0127:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0127:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0127
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0127
.L_lambda_simple_params_end_0127:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0127
	jmp .L_lambda_simple_end_0127
.L_lambda_simple_code_0127:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0127
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0127:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param ch
	push rax
	push 1	; arg count
	mov rax, qword [free_var_71]	; free var char-downcase
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_65]	; free var char->integer
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01c2:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01c2
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01c2
.L_tc_recycle_frame_done_01c2:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0127:	; new closure is in rax
	push rax
	push 2	; arg count
	mov rax, qword [free_var_103]	; free var map
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var comparator
	push rax
	push 2	; arg count
	mov rax, qword [free_var_33]	; free var apply
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01c3:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01c3
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01c3
.L_tc_recycle_frame_done_01c3:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_opt_end_0028:	; new closure is in rax
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0126:	; new closure is in rax
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0129:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_0129
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0129
.L_lambda_simple_env_end_0129:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0129:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_0129
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0129
.L_lambda_simple_params_end_0129:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0129
	jmp .L_lambda_simple_end_0129
.L_lambda_simple_code_0129:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0129
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0129:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, qword [free_var_4]	; free var <
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 1	; arg count
	mov rax, PARAM(0)	; param make-char-ci-comparator
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_67], rax
	mov rax, sob_void

	; preparing a non-tail-call
	mov rax, qword [free_var_5]	; free var <=
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 1	; arg count
	mov rax, PARAM(0)	; param make-char-ci-comparator
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_66], rax
	mov rax, sob_void

	; preparing a non-tail-call
	mov rax, qword [free_var_6]	; free var =
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 1	; arg count
	mov rax, PARAM(0)	; param make-char-ci-comparator
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_68], rax
	mov rax, sob_void

	; preparing a non-tail-call
	mov rax, qword [free_var_7]	; free var >
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 1	; arg count
	mov rax, PARAM(0)	; param make-char-ci-comparator
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_70], rax
	mov rax, sob_void

	; preparing a non-tail-call
	mov rax, qword [free_var_8]	; free var >=
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 1	; arg count
	mov rax, PARAM(0)	; param make-char-ci-comparator
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_69], rax
	mov rax, sob_void
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0129:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rax, L_constants + 0
	mov qword [free_var_126], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rax, L_constants + 0
	mov qword [free_var_132], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	; preparing a non-tail-call
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_012a:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_012a
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_012a
.L_lambda_simple_env_end_012a:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_012a:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_012a
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_012a
.L_lambda_simple_params_end_012a:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_012a
	jmp .L_lambda_simple_end_012a
.L_lambda_simple_code_012a:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_012a
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_012a:
	enter 0, 0
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_012b:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_012b
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_012b
.L_lambda_simple_env_end_012b:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_012b:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_012b
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_012b
.L_lambda_simple_params_end_012b:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_012b
	jmp .L_lambda_simple_end_012b
.L_lambda_simple_code_012b:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_012b
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_012b:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param str
	push rax
	push 1	; arg count
	mov rax, qword [free_var_119]	; free var string->list
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var char-case-converter
	push rax
	push 2	; arg count
	mov rax, qword [free_var_103]	; free var map
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_94]	; free var list->string
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01c6:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01c6
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01c6
.L_tc_recycle_frame_done_01c6:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_012b:	; new closure is in rax
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_012a:	; new closure is in rax
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_012c:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_012c
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_012c
.L_lambda_simple_env_end_012c:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_012c:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_012c
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_012c
.L_lambda_simple_params_end_012c:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_012c
	jmp .L_lambda_simple_end_012c
.L_lambda_simple_code_012c:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_012c
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_012c:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, qword [free_var_71]	; free var char-downcase
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 1	; arg count
	mov rax, PARAM(0)	; param make-string-case-converter
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_126], rax
	mov rax, sob_void

	; preparing a non-tail-call
	mov rax, qword [free_var_72]	; free var char-upcase
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 1	; arg count
	mov rax, PARAM(0)	; param make-string-case-converter
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_132], rax
	mov rax, sob_void
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_012c:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rax, L_constants + 0
	mov qword [free_var_134], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rax, L_constants + 0
	mov qword [free_var_133], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rax, L_constants + 0
	mov qword [free_var_135], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rax, L_constants + 0
	mov qword [free_var_136], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rax, L_constants + 0
	mov qword [free_var_137], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rax, L_constants + 0
	mov qword [free_var_122], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rax, L_constants + 0
	mov qword [free_var_121], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rax, L_constants + 0
	mov qword [free_var_123], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rax, L_constants + 0
	mov qword [free_var_124], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rax, L_constants + 0
	mov qword [free_var_125], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	; preparing a non-tail-call
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_012d:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_012d
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_012d
.L_lambda_simple_env_end_012d:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_012d:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_012d
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_012d
.L_lambda_simple_params_end_012d:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_012d
	jmp .L_lambda_simple_end_012d
.L_lambda_simple_code_012d:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_012d
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_012d:
	enter 0, 0
	; preparing a tail-call
	mov rax, L_constants + 1993
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_012e:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_012e
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_012e
.L_lambda_simple_env_end_012e:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_012e:	; copy params
	cmp rsi, 2
	je .L_lambda_simple_params_end_012e
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_012e
.L_lambda_simple_params_end_012e:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_012e
	jmp .L_lambda_simple_end_012e
.L_lambda_simple_code_012e:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_012e
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_012e:
	enter 0, 0
	mov rdi, 8*1
	call malloc
	mov rbx, PARAM(0)
	mov qword[rax], rbx
	mov PARAM(0), rax
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_012f:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_simple_env_end_012f
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_012f
.L_lambda_simple_env_end_012f:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_012f:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_012f
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_012f
.L_lambda_simple_params_end_012f:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_012f
	jmp .L_lambda_simple_end_012f
.L_lambda_simple_code_012f:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 5
	je .L_lambda_simple_arity_check_ok_012f
	push qword [rsp + 8 * 2]
	push 5
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_012f:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(2)	; param len1
	push rax
	mov rax, PARAM(0)	; param i
	push rax
	push 2	; arg count
	mov rax, qword [free_var_6]	; free var =
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00f1
	; preparing a non-tail-call
	mov rax, PARAM(4)	; param len2
	push rax
	mov rax, PARAM(2)	; param len1
	push rax
	push 2	; arg count
	mov rax, qword [free_var_4]	; free var <
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00f1
.L_if_else_00f1:
	mov rax, L_constants + 2
.L_if_end_00f1:
	cmp rax, sob_boolean_false
	jne .L_or_end_001b
	; preparing a non-tail-call
	mov rax, PARAM(2)	; param len1
	push rax
	mov rax, PARAM(0)	; param i
	push rax
	push 2	; arg count
	mov rax, qword [free_var_4]	; free var <
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00f3
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param i
	push rax
	mov rax, PARAM(3)	; param str2
	push rax
	push 2	; arg count
	mov rax, qword [free_var_128]	; free var string-ref
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param i
	push rax
	mov rax, PARAM(1)	; param str1
	push rax
	push 2	; arg count
	mov rax, qword [free_var_128]	; free var string-ref
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var char<?
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	jne .L_or_end_001c
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param i
	push rax
	mov rax, PARAM(3)	; param str2
	push rax
	push 2	; arg count
	mov rax, qword [free_var_128]	; free var string-ref
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param i
	push rax
	mov rax, PARAM(1)	; param str1
	push rax
	push 2	; arg count
	mov rax, qword [free_var_128]	; free var string-ref
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 1]	; bound var char=?
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00f2
	; preparing a tail-call
	mov rax, PARAM(4)	; param len2
	push rax
	mov rax, PARAM(3)	; param str2
	push rax
	mov rax, PARAM(2)	; param len1
	push rax
	mov rax, PARAM(1)	; param str1
	push rax
	; preparing a non-tail-call
	mov rax, L_constants + 2270
	push rax
	mov rax, PARAM(0)	; param i
	push rax
	push 2	; arg count
	mov rax, qword [free_var_1]	; free var +
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 5	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01c7:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01c7
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01c7
.L_tc_recycle_frame_done_01c7:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00f2
.L_if_else_00f2:
	mov rax, L_constants + 2
.L_if_end_00f2:
.L_or_end_001c:
	jmp .L_if_end_00f3
.L_if_else_00f3:
	mov rax, L_constants + 2
.L_if_end_00f3:
.L_or_end_001b:
	leave
	ret AND_KILL_FRAME(5)
.L_lambda_simple_end_012f:	; new closure is in rax
	push rax
	mov rax, PARAM(0)	; param run
	pop qword [rax]
	mov rax, sob_void

	; preparing a tail-call
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0130:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_simple_env_end_0130
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0130
.L_lambda_simple_env_end_0130:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0130:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0130
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0130
.L_lambda_simple_params_end_0130:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0130
	jmp .L_lambda_simple_end_0130
.L_lambda_simple_code_0130:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_0130
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0130:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param str2
	push rax
	push 1	; arg count
	mov rax, qword [free_var_127]	; free var string-length
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param str1
	push rax
	push 1	; arg count
	mov rax, qword [free_var_127]	; free var string-length
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 4	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0131:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 3
	je .L_lambda_simple_env_end_0131
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0131
.L_lambda_simple_env_end_0131:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0131:	; copy params
	cmp rsi, 2
	je .L_lambda_simple_params_end_0131
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0131
.L_lambda_simple_params_end_0131:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0131
	jmp .L_lambda_simple_end_0131
.L_lambda_simple_code_0131:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_0131
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0131:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param len2
	push rax
	mov rax, PARAM(0)	; param len1
	push rax
	push 2	; arg count
	mov rax, qword [free_var_5]	; free var <=
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00f4
	; preparing a tail-call
	mov rax, PARAM(1)	; param len2
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 1]	; bound var str2
	push rax
	mov rax, PARAM(0)	; param len1
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var str1
	push rax
	mov rax, L_constants + 2135
	push rax
	push 5	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01c8:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01c8
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01c8
.L_tc_recycle_frame_done_01c8:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00f4
.L_if_else_00f4:
	; preparing a tail-call
	mov rax, PARAM(0)	; param len1
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var str1
	push rax
	mov rax, PARAM(1)	; param len2
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 1]	; bound var str2
	push rax
	mov rax, L_constants + 2135
	push rax
	push 5	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01c9:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01c9
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01c9
.L_tc_recycle_frame_done_01c9:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00f4:
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_0131:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01ca:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01ca
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01ca
.L_tc_recycle_frame_done_01ca:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_0130:	; new closure is in rax
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0132:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_simple_env_end_0132
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0132
.L_lambda_simple_env_end_0132:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0132:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0132
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0132
.L_lambda_simple_params_end_0132:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0132
	jmp .L_lambda_simple_end_0132
.L_lambda_simple_code_0132:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0132
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0132:
	enter 0, 0
	; preparing a tail-call
	mov rax, L_constants + 1993
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 4	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0133:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 3
	je .L_lambda_simple_env_end_0133
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0133
.L_lambda_simple_env_end_0133:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0133:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0133
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0133
.L_lambda_simple_params_end_0133:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0133
	jmp .L_lambda_simple_end_0133
.L_lambda_simple_code_0133:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0133
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0133:
	enter 0, 0
	mov rdi, 8*1
	call malloc
	mov rbx, PARAM(0)
	mov qword[rax], rbx
	mov PARAM(0), rax
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 5	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0134:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 4
	je .L_lambda_simple_env_end_0134
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0134
.L_lambda_simple_env_end_0134:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0134:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0134
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0134
.L_lambda_simple_params_end_0134:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0134
	jmp .L_lambda_simple_end_0134
.L_lambda_simple_code_0134:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_0134
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0134:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param strs
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	jne .L_or_end_001d
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param strs
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param str
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var binary-string<?
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00f5
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param strs
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param strs
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01cb:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01cb
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01cb
.L_tc_recycle_frame_done_01cb:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00f5
.L_if_else_00f5:
	mov rax, L_constants + 2
.L_if_end_00f5:
.L_or_end_001d:
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_0134:	; new closure is in rax
	push rax
	mov rax, PARAM(0)	; param run
	pop qword [rax]
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 5	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_opt_env_loop_0029:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 4
	je .L_lambda_opt_env_end_0029
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_opt_env_loop_0029
.L_lambda_opt_env_end_0029:
	pop rbx
	mov rsi, 0
.L_lambda_opt_params_loop_0029:	; copy params
	cmp rsi, 1
	je .L_lambda_opt_params_end_0029
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_opt_params_loop_0029
.L_lambda_opt_params_end_0029:
	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0029
	jmp .L_lambda_opt_end_0029
.L_lambda_opt_code_0029:	; lambda-opt body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_opt_arity_check_exact_0029
	jg .L_lambda_opt_arity_check_more_0029
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_opt
.L_lambda_opt_arity_check_exact_0029:
	sub rsp, 8
	mov rax, qword[rsp + 8 *1]
	mov qword[rsp], rax  
	mov rax, qword[rsp + 8 *2] ;rax now holds env 
	mov qword[rsp + 8 * 1], rax
	mov rax, 2
	mov qword[rsp + 8 *2], rax
	mov rax, qword[rsp + 8 * (4 + 0)]
	mov qword[rsp + 8 * (3 + 0)], rax
	mov rax, sob_nil
	mov qword[rsp + 8 * (3 + 1)], rax
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(1)	; param strs
	push rax
	mov rax, PARAM(0)	; param str
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01cd:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01cd
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01cd
.L_tc_recycle_frame_done_01cd:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(2)
	jmp .L_lambda_opt_end_0029	; new closure is in rax
.L_lambda_opt_arity_check_more_0029:
	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
	mov r9, sob_nil
	mov rbx, rsp 
	add rbx, 3*8 	; now rbx is pointing to the first param
	dec r8	 ;to get to the top - starting at 0 not 1
	shl r8, 3
	add rbx, r8	 ;rbx now points to the last opt param that was pushed
	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
.L_lambda_opt_stack_shrink_loop_0029:
	cmp r8, 1
	je .L_lambda_opt_stack_shrink_loop_exit_0029
	mov rdi, 1+8+8 ;for pair
	call malloc;to create the pair in the stack
	mov byte [rax], T_pair ; to make it a pair
	mov rcx, qword[rbx] ;rcx is holding the param to copy
	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 	mov qword[rax+1+8],r9
	mov r9, rax ;for the recursion 
	dec r8 ;we finished copy another opt param to the list
	sub rbx, 8 ;to get the next param to copy
	jmp .L_lambda_opt_stack_shrink_loop_0029
.L_lambda_opt_stack_shrink_loop_exit_0029:
	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
	sub rcx, 2
	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
	add rsp, rcx ;shrinking the stack
	mov rax, rsp
	sub rax, rcx ;now rax is pointing on the original ret
	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
	dec r8 ;we start with param 0, not 1 
	add rax, 3 * 8;now rax is param 0
	shl r8, 3;convert to byte
	add rax, r8;now rax is the top of the stack
	mov qword[rax], r9;puting the list at the top
	sub rax, 8;rax is the adress to copy to the not optional params
	mov rbx, rsp 
	sub rbx, rcx;rbx is the ret adress in the original
	mov r10, 1;r10 is the not opt params length
	dec r10 
	shl r10, 3;to get bytes
	add rbx, 3*8;rbx is the first param
	add rbx, r10; rbx is where the address to copy to
	mov r8, qword [rbx] 	;r8 is holding the param to copy
	mov qword[rax], r8
	sub rax, 8
	sub rbx, 8
	mov rax, rsp
	sub rax, rcx 	 ;now rax is original ret
	mov qword [rsp+2*8], 2
	mov rbx, qword[rax + 8 *1]
	mov qword [rsp + 1*8] ,rbx
	mov rbx, qword[rax]
	mov qword [rsp], rbx
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(1)	; param strs
	push rax
	mov rax, PARAM(0)	; param str
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01cc:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01cc
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01cc
.L_tc_recycle_frame_done_01cc:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_opt_end_0029:	; new closure is in rax
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0133:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01ce:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01ce
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01ce
.L_tc_recycle_frame_done_01ce:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0132:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01cf:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01cf
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01cf
.L_tc_recycle_frame_done_01cf:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_012e:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01d0:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01d0
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01d0
.L_tc_recycle_frame_done_01d0:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_012d:	; new closure is in rax
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0135:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_0135
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0135
.L_lambda_simple_env_end_0135:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0135:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_0135
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0135
.L_lambda_simple_params_end_0135:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0135
	jmp .L_lambda_simple_end_0135
.L_lambda_simple_code_0135:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0135
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0135:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, qword [free_var_75]	; free var char=?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	mov rax, qword [free_var_74]	; free var char<?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, PARAM(0)	; param make-string<?
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_134], rax
	mov rax, sob_void

	; preparing a non-tail-call
	mov rax, qword [free_var_68]	; free var char-ci=?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	mov rax, qword [free_var_67]	; free var char-ci<?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, PARAM(0)	; param make-string<?
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_122], rax
	mov rax, sob_void

	; preparing a non-tail-call
	mov rax, qword [free_var_75]	; free var char=?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	mov rax, qword [free_var_77]	; free var char>?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, PARAM(0)	; param make-string<?
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_137], rax
	mov rax, sob_void

	; preparing a non-tail-call
	mov rax, qword [free_var_68]	; free var char-ci=?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	mov rax, qword [free_var_70]	; free var char-ci>?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, PARAM(0)	; param make-string<?
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_125], rax
	mov rax, sob_void
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0135:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)

	mov rdi, rax
	call print_sexpr_if_not_void
	; preparing a non-tail-call
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0136:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_0136
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0136
.L_lambda_simple_env_end_0136:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0136:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_0136
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0136
.L_lambda_simple_params_end_0136:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0136
	jmp .L_lambda_simple_end_0136
.L_lambda_simple_code_0136:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_0136
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0136:
	enter 0, 0
	; preparing a tail-call
	mov rax, L_constants + 1993
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0137:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_0137
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0137
.L_lambda_simple_env_end_0137:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0137:	; copy params
	cmp rsi, 2
	je .L_lambda_simple_params_end_0137
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0137
.L_lambda_simple_params_end_0137:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0137
	jmp .L_lambda_simple_end_0137
.L_lambda_simple_code_0137:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0137
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0137:
	enter 0, 0
	mov rdi, 8*1
	call malloc
	mov rbx, PARAM(0)
	mov qword[rax], rbx
	mov PARAM(0), rax
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0138:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_simple_env_end_0138
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0138
.L_lambda_simple_env_end_0138:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0138:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0138
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0138
.L_lambda_simple_params_end_0138:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0138
	jmp .L_lambda_simple_end_0138
.L_lambda_simple_code_0138:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 5
	je .L_lambda_simple_arity_check_ok_0138
	push qword [rsp + 8 * 2]
	push 5
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0138:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(2)	; param len1
	push rax
	mov rax, PARAM(0)	; param i
	push rax
	push 2	; arg count
	mov rax, qword [free_var_6]	; free var =
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	jne .L_or_end_001e
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param i
	push rax
	mov rax, PARAM(3)	; param str2
	push rax
	push 2	; arg count
	mov rax, qword [free_var_128]	; free var string-ref
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param i
	push rax
	mov rax, PARAM(1)	; param str1
	push rax
	push 2	; arg count
	mov rax, qword [free_var_128]	; free var string-ref
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var char<?
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	jne .L_or_end_001e
	; preparing a non-tail-call
	mov rax, PARAM(2)	; param len1
	push rax
	mov rax, PARAM(0)	; param i
	push rax
	push 2	; arg count
	mov rax, qword [free_var_4]	; free var <
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00f7
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param i
	push rax
	mov rax, PARAM(3)	; param str2
	push rax
	push 2	; arg count
	mov rax, qword [free_var_128]	; free var string-ref
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param i
	push rax
	mov rax, PARAM(1)	; param str1
	push rax
	push 2	; arg count
	mov rax, qword [free_var_128]	; free var string-ref
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 1]	; bound var char=?
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00f6
	; preparing a tail-call
	mov rax, PARAM(4)	; param len2
	push rax
	mov rax, PARAM(3)	; param str2
	push rax
	mov rax, PARAM(2)	; param len1
	push rax
	mov rax, PARAM(1)	; param str1
	push rax
	; preparing a non-tail-call
	mov rax, L_constants + 2270
	push rax
	mov rax, PARAM(0)	; param i
	push rax
	push 2	; arg count
	mov rax, qword [free_var_1]	; free var +
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 5	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01d1:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01d1
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01d1
.L_tc_recycle_frame_done_01d1:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00f6
.L_if_else_00f6:
	mov rax, L_constants + 2
.L_if_end_00f6:
	jmp .L_if_end_00f7
.L_if_else_00f7:
	mov rax, L_constants + 2
.L_if_end_00f7:
.L_or_end_001e:
	leave
	ret AND_KILL_FRAME(5)
.L_lambda_simple_end_0138:	; new closure is in rax
	push rax
	mov rax, PARAM(0)	; param run
	pop qword [rax]
	mov rax, sob_void

	; preparing a tail-call
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0139:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_simple_env_end_0139
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0139
.L_lambda_simple_env_end_0139:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0139:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0139
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0139
.L_lambda_simple_params_end_0139:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0139
	jmp .L_lambda_simple_end_0139
.L_lambda_simple_code_0139:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_0139
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0139:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param str2
	push rax
	push 1	; arg count
	mov rax, qword [free_var_127]	; free var string-length
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param str1
	push rax
	push 1	; arg count
	mov rax, qword [free_var_127]	; free var string-length
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 4	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_013a:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 3
	je .L_lambda_simple_env_end_013a
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_013a
.L_lambda_simple_env_end_013a:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_013a:	; copy params
	cmp rsi, 2
	je .L_lambda_simple_params_end_013a
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_013a
.L_lambda_simple_params_end_013a:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_013a
	jmp .L_lambda_simple_end_013a
.L_lambda_simple_code_013a:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_013a
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_013a:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param len2
	push rax
	mov rax, PARAM(0)	; param len1
	push rax
	push 2	; arg count
	mov rax, qword [free_var_5]	; free var <=
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00f8
	; preparing a tail-call
	mov rax, PARAM(1)	; param len2
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 1]	; bound var str2
	push rax
	mov rax, PARAM(0)	; param len1
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var str1
	push rax
	mov rax, L_constants + 2135
	push rax
	push 5	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01d2:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01d2
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01d2
.L_tc_recycle_frame_done_01d2:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00f8
.L_if_else_00f8:
	; preparing a tail-call
	mov rax, PARAM(0)	; param len1
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var str1
	push rax
	mov rax, PARAM(1)	; param len2
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 1]	; bound var str2
	push rax
	mov rax, L_constants + 2135
	push rax
	push 5	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01d3:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01d3
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01d3
.L_tc_recycle_frame_done_01d3:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_00f8:
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_013a:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01d4:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01d4
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01d4
.L_tc_recycle_frame_done_01d4:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_0139:	; new closure is in rax
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_013b:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_simple_env_end_013b
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_013b
.L_lambda_simple_env_end_013b:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_013b:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_013b
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_013b
.L_lambda_simple_params_end_013b:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_013b
	jmp .L_lambda_simple_end_013b
.L_lambda_simple_code_013b:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_013b
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_013b:
	enter 0, 0
	; preparing a tail-call
	mov rax, L_constants + 1993
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 4	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_013c:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 3
	je .L_lambda_simple_env_end_013c
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_013c
.L_lambda_simple_env_end_013c:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_013c:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_013c
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_013c
.L_lambda_simple_params_end_013c:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_013c
	jmp .L_lambda_simple_end_013c
.L_lambda_simple_code_013c:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_013c
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_013c:
	enter 0, 0
	mov rdi, 8*1
	call malloc
	mov rbx, PARAM(0)
	mov qword[rax], rbx
	mov PARAM(0), rax
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 5	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_013d:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 4
	je .L_lambda_simple_env_end_013d
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_013d
.L_lambda_simple_env_end_013d:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_013d:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_013d
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_013d
.L_lambda_simple_params_end_013d:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_013d
	jmp .L_lambda_simple_end_013d
.L_lambda_simple_code_013d:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_013d
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_013d:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param strs
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	jne .L_or_end_001f
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param strs
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param str
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var binary-string<=?
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00f9
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param strs
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param strs
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01d5:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01d5
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01d5
.L_tc_recycle_frame_done_01d5:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00f9
.L_if_else_00f9:
	mov rax, L_constants + 2
.L_if_end_00f9:
.L_or_end_001f:
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_013d:	; new closure is in rax
	push rax
	mov rax, PARAM(0)	; param run
	pop qword [rax]
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 5	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_opt_env_loop_002a:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 4
	je .L_lambda_opt_env_end_002a
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_opt_env_loop_002a
.L_lambda_opt_env_end_002a:
	pop rbx
	mov rsi, 0
.L_lambda_opt_params_loop_002a:	; copy params
	cmp rsi, 1
	je .L_lambda_opt_params_end_002a
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_opt_params_loop_002a
.L_lambda_opt_params_end_002a:
	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_002a
	jmp .L_lambda_opt_end_002a
.L_lambda_opt_code_002a:	; lambda-opt body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_opt_arity_check_exact_002a
	jg .L_lambda_opt_arity_check_more_002a
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_opt
.L_lambda_opt_arity_check_exact_002a:
	sub rsp, 8
	mov rax, qword[rsp + 8 *1]
	mov qword[rsp], rax  
	mov rax, qword[rsp + 8 *2] ;rax now holds env 
	mov qword[rsp + 8 * 1], rax
	mov rax, 2
	mov qword[rsp + 8 *2], rax
	mov rax, qword[rsp + 8 * (4 + 0)]
	mov qword[rsp + 8 * (3 + 0)], rax
	mov rax, sob_nil
	mov qword[rsp + 8 * (3 + 1)], rax
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(1)	; param strs
	push rax
	mov rax, PARAM(0)	; param str
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01d7:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01d7
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01d7
.L_tc_recycle_frame_done_01d7:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(2)
	jmp .L_lambda_opt_end_002a	; new closure is in rax
.L_lambda_opt_arity_check_more_002a:
	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
	mov r9, sob_nil
	mov rbx, rsp 
	add rbx, 3*8 	; now rbx is pointing to the first param
	dec r8	 ;to get to the top - starting at 0 not 1
	shl r8, 3
	add rbx, r8	 ;rbx now points to the last opt param that was pushed
	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
.L_lambda_opt_stack_shrink_loop_002a:
	cmp r8, 1
	je .L_lambda_opt_stack_shrink_loop_exit_002a
	mov rdi, 1+8+8 ;for pair
	call malloc;to create the pair in the stack
	mov byte [rax], T_pair ; to make it a pair
	mov rcx, qword[rbx] ;rcx is holding the param to copy
	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 	mov qword[rax+1+8],r9
	mov r9, rax ;for the recursion 
	dec r8 ;we finished copy another opt param to the list
	sub rbx, 8 ;to get the next param to copy
	jmp .L_lambda_opt_stack_shrink_loop_002a
.L_lambda_opt_stack_shrink_loop_exit_002a:
	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
	sub rcx, 2
	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
	add rsp, rcx ;shrinking the stack
	mov rax, rsp
	sub rax, rcx ;now rax is pointing on the original ret
	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
	dec r8 ;we start with param 0, not 1 
	add rax, 3 * 8;now rax is param 0
	shl r8, 3;convert to byte
	add rax, r8;now rax is the top of the stack
	mov qword[rax], r9;puting the list at the top
	sub rax, 8;rax is the adress to copy to the not optional params
	mov rbx, rsp 
	sub rbx, rcx;rbx is the ret adress in the original
	mov r10, 1;r10 is the not opt params length
	dec r10 
	shl r10, 3;to get bytes
	add rbx, 3*8;rbx is the first param
	add rbx, r10; rbx is where the address to copy to
	mov r8, qword [rbx] 	;r8 is holding the param to copy
	mov qword[rax], r8
	sub rax, 8
	sub rbx, 8
	mov rax, rsp
	sub rax, rcx 	 ;now rax is original ret
	mov qword [rsp+2*8], 2
	mov rbx, qword[rax + 8 *1]
	mov qword [rsp + 1*8] ,rbx
	mov rbx, qword[rax]
	mov qword [rsp], rbx
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(1)	; param strs
	push rax
	mov rax, PARAM(0)	; param str
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01d6:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01d6
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01d6
.L_tc_recycle_frame_done_01d6:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_opt_end_002a:	; new closure is in rax
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_013c:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01d8:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01d8
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01d8
.L_tc_recycle_frame_done_01d8:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_013b:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01d9:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01d9
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01d9
.L_tc_recycle_frame_done_01d9:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0137:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01da:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01da
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01da
.L_tc_recycle_frame_done_01da:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_0136:	; new closure is in rax
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_013e:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_013e
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_013e
.L_lambda_simple_env_end_013e:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_013e:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_013e
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_013e
.L_lambda_simple_params_end_013e:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_013e
	jmp .L_lambda_simple_end_013e
.L_lambda_simple_code_013e:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_013e
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_013e:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, qword [free_var_75]	; free var char=?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	mov rax, qword [free_var_74]	; free var char<?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, PARAM(0)	; param make-string<=?
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_133], rax
	mov rax, sob_void

	; preparing a non-tail-call
	mov rax, qword [free_var_68]	; free var char-ci=?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	mov rax, qword [free_var_67]	; free var char-ci<?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, PARAM(0)	; param make-string<=?
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_121], rax
	mov rax, sob_void

	; preparing a non-tail-call
	mov rax, qword [free_var_75]	; free var char=?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	mov rax, qword [free_var_77]	; free var char>?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, PARAM(0)	; param make-string<=?
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_136], rax
	mov rax, sob_void

	; preparing a non-tail-call
	mov rax, qword [free_var_68]	; free var char-ci=?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	mov rax, qword [free_var_70]	; free var char-ci>?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, PARAM(0)	; param make-string<=?
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_124], rax
	mov rax, sob_void
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_013e:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)

	mov rdi, rax
	call print_sexpr_if_not_void
	; preparing a non-tail-call
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_013f:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_013f
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_013f
.L_lambda_simple_env_end_013f:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_013f:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_013f
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_013f
.L_lambda_simple_params_end_013f:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_013f
	jmp .L_lambda_simple_end_013f
.L_lambda_simple_code_013f:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_013f
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_013f:
	enter 0, 0
	; preparing a tail-call
	mov rax, L_constants + 1993
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0140:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_0140
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0140
.L_lambda_simple_env_end_0140:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0140:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0140
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0140
.L_lambda_simple_params_end_0140:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0140
	jmp .L_lambda_simple_end_0140
.L_lambda_simple_code_0140:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0140
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0140:
	enter 0, 0
	mov rdi, 8*1
	call malloc
	mov rbx, PARAM(0)
	mov qword[rax], rbx
	mov PARAM(0), rax
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0141:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_simple_env_end_0141
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0141
.L_lambda_simple_env_end_0141:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0141:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0141
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0141
.L_lambda_simple_params_end_0141:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0141
	jmp .L_lambda_simple_end_0141
.L_lambda_simple_code_0141:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 4
	je .L_lambda_simple_arity_check_ok_0141
	push qword [rsp + 8 * 2]
	push 4
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0141:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(3)	; param len
	push rax
	mov rax, PARAM(0)	; param i
	push rax
	push 2	; arg count
	mov rax, qword [free_var_6]	; free var =
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	jne .L_or_end_0020
	; preparing a non-tail-call
	mov rax, PARAM(3)	; param len
	push rax
	mov rax, PARAM(0)	; param i
	push rax
	push 2	; arg count
	mov rax, qword [free_var_4]	; free var <
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00fb
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param i
	push rax
	mov rax, PARAM(2)	; param str2
	push rax
	push 2	; arg count
	mov rax, qword [free_var_128]	; free var string-ref
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param i
	push rax
	mov rax, PARAM(1)	; param str1
	push rax
	push 2	; arg count
	mov rax, qword [free_var_128]	; free var string-ref
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var char=?
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00fa
	; preparing a tail-call
	mov rax, PARAM(3)	; param len
	push rax
	mov rax, PARAM(2)	; param str2
	push rax
	mov rax, PARAM(1)	; param str1
	push rax
	; preparing a non-tail-call
	mov rax, L_constants + 2270
	push rax
	mov rax, PARAM(0)	; param i
	push rax
	push 2	; arg count
	mov rax, qword [free_var_1]	; free var +
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 4	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01db:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01db
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01db
.L_tc_recycle_frame_done_01db:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00fa
.L_if_else_00fa:
	mov rax, L_constants + 2
.L_if_end_00fa:
	jmp .L_if_end_00fb
.L_if_else_00fb:
	mov rax, L_constants + 2
.L_if_end_00fb:
.L_or_end_0020:
	leave
	ret AND_KILL_FRAME(4)
.L_lambda_simple_end_0141:	; new closure is in rax
	push rax
	mov rax, PARAM(0)	; param run
	pop qword [rax]
	mov rax, sob_void

	; preparing a tail-call
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0142:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_simple_env_end_0142
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0142
.L_lambda_simple_env_end_0142:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0142:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0142
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0142
.L_lambda_simple_params_end_0142:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0142
	jmp .L_lambda_simple_end_0142
.L_lambda_simple_code_0142:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_0142
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0142:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param str2
	push rax
	push 1	; arg count
	mov rax, qword [free_var_127]	; free var string-length
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param str1
	push rax
	push 1	; arg count
	mov rax, qword [free_var_127]	; free var string-length
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 4	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0143:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 3
	je .L_lambda_simple_env_end_0143
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0143
.L_lambda_simple_env_end_0143:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0143:	; copy params
	cmp rsi, 2
	je .L_lambda_simple_params_end_0143
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0143
.L_lambda_simple_params_end_0143:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0143
	jmp .L_lambda_simple_end_0143
.L_lambda_simple_code_0143:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_0143
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0143:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param len2
	push rax
	mov rax, PARAM(0)	; param len1
	push rax
	push 2	; arg count
	mov rax, qword [free_var_6]	; free var =
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00fc
	; preparing a tail-call
	mov rax, PARAM(0)	; param len1
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 1]	; bound var str2
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var str1
	push rax
	mov rax, L_constants + 2135
	push rax
	push 4	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01dc:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01dc
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01dc
.L_tc_recycle_frame_done_01dc:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00fc
.L_if_else_00fc:
	mov rax, L_constants + 2
.L_if_end_00fc:
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_0143:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01dd:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01dd
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01dd
.L_tc_recycle_frame_done_01dd:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_0142:	; new closure is in rax
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0144:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_simple_env_end_0144
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0144
.L_lambda_simple_env_end_0144:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0144:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0144
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0144
.L_lambda_simple_params_end_0144:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0144
	jmp .L_lambda_simple_end_0144
.L_lambda_simple_code_0144:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0144
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0144:
	enter 0, 0
	; preparing a tail-call
	mov rax, L_constants + 1993
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 4	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0145:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 3
	je .L_lambda_simple_env_end_0145
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0145
.L_lambda_simple_env_end_0145:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0145:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0145
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0145
.L_lambda_simple_params_end_0145:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0145
	jmp .L_lambda_simple_end_0145
.L_lambda_simple_code_0145:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0145
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0145:
	enter 0, 0
	mov rdi, 8*1
	call malloc
	mov rbx, PARAM(0)
	mov qword[rax], rbx
	mov PARAM(0), rax
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 5	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0146:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 4
	je .L_lambda_simple_env_end_0146
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0146
.L_lambda_simple_env_end_0146:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0146:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0146
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0146
.L_lambda_simple_params_end_0146:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0146
	jmp .L_lambda_simple_end_0146
.L_lambda_simple_code_0146:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_0146
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0146:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param strs
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	jne .L_or_end_0021
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param strs
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param str
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var binary-string=?
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00fd
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param strs
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param strs
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01de:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01de
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01de
.L_tc_recycle_frame_done_01de:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00fd
.L_if_else_00fd:
	mov rax, L_constants + 2
.L_if_end_00fd:
.L_or_end_0021:
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_0146:	; new closure is in rax
	push rax
	mov rax, PARAM(0)	; param run
	pop qword [rax]
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 5	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_opt_env_loop_002b:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 4
	je .L_lambda_opt_env_end_002b
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_opt_env_loop_002b
.L_lambda_opt_env_end_002b:
	pop rbx
	mov rsi, 0
.L_lambda_opt_params_loop_002b:	; copy params
	cmp rsi, 1
	je .L_lambda_opt_params_end_002b
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_opt_params_loop_002b
.L_lambda_opt_params_end_002b:
	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_002b
	jmp .L_lambda_opt_end_002b
.L_lambda_opt_code_002b:	; lambda-opt body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_opt_arity_check_exact_002b
	jg .L_lambda_opt_arity_check_more_002b
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_opt
.L_lambda_opt_arity_check_exact_002b:
	sub rsp, 8
	mov rax, qword[rsp + 8 *1]
	mov qword[rsp], rax  
	mov rax, qword[rsp + 8 *2] ;rax now holds env 
	mov qword[rsp + 8 * 1], rax
	mov rax, 2
	mov qword[rsp + 8 *2], rax
	mov rax, qword[rsp + 8 * (4 + 0)]
	mov qword[rsp + 8 * (3 + 0)], rax
	mov rax, sob_nil
	mov qword[rsp + 8 * (3 + 1)], rax
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(1)	; param strs
	push rax
	mov rax, PARAM(0)	; param str
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01e0:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01e0
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01e0
.L_tc_recycle_frame_done_01e0:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(2)
	jmp .L_lambda_opt_end_002b	; new closure is in rax
.L_lambda_opt_arity_check_more_002b:
	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
	mov r9, sob_nil
	mov rbx, rsp 
	add rbx, 3*8 	; now rbx is pointing to the first param
	dec r8	 ;to get to the top - starting at 0 not 1
	shl r8, 3
	add rbx, r8	 ;rbx now points to the last opt param that was pushed
	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
.L_lambda_opt_stack_shrink_loop_002b:
	cmp r8, 1
	je .L_lambda_opt_stack_shrink_loop_exit_002b
	mov rdi, 1+8+8 ;for pair
	call malloc;to create the pair in the stack
	mov byte [rax], T_pair ; to make it a pair
	mov rcx, qword[rbx] ;rcx is holding the param to copy
	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 	mov qword[rax+1+8],r9
	mov r9, rax ;for the recursion 
	dec r8 ;we finished copy another opt param to the list
	sub rbx, 8 ;to get the next param to copy
	jmp .L_lambda_opt_stack_shrink_loop_002b
.L_lambda_opt_stack_shrink_loop_exit_002b:
	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
	sub rcx, 2
	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
	add rsp, rcx ;shrinking the stack
	mov rax, rsp
	sub rax, rcx ;now rax is pointing on the original ret
	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
	dec r8 ;we start with param 0, not 1 
	add rax, 3 * 8;now rax is param 0
	shl r8, 3;convert to byte
	add rax, r8;now rax is the top of the stack
	mov qword[rax], r9;puting the list at the top
	sub rax, 8;rax is the adress to copy to the not optional params
	mov rbx, rsp 
	sub rbx, rcx;rbx is the ret adress in the original
	mov r10, 1;r10 is the not opt params length
	dec r10 
	shl r10, 3;to get bytes
	add rbx, 3*8;rbx is the first param
	add rbx, r10; rbx is where the address to copy to
	mov r8, qword [rbx] 	;r8 is holding the param to copy
	mov qword[rax], r8
	sub rax, 8
	sub rbx, 8
	mov rax, rsp
	sub rax, rcx 	 ;now rax is original ret
	mov qword [rsp+2*8], 2
	mov rbx, qword[rax + 8 *1]
	mov qword [rsp + 1*8] ,rbx
	mov rbx, qword[rax]
	mov qword [rsp], rbx
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(1)	; param strs
	push rax
	mov rax, PARAM(0)	; param str
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01df:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01df
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01df
.L_tc_recycle_frame_done_01df:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_opt_end_002b:	; new closure is in rax
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0145:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01e1:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01e1
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01e1
.L_tc_recycle_frame_done_01e1:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0144:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01e2:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01e2
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01e2
.L_tc_recycle_frame_done_01e2:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0140:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01e3:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01e3
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01e3
.L_tc_recycle_frame_done_01e3:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_013f:	; new closure is in rax
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0147:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_0147
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0147
.L_lambda_simple_env_end_0147:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0147:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_0147
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0147
.L_lambda_simple_params_end_0147:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0147
	jmp .L_lambda_simple_end_0147
.L_lambda_simple_code_0147:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0147
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0147:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, qword [free_var_75]	; free var char=?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 1	; arg count
	mov rax, PARAM(0)	; param make-string=?
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_135], rax
	mov rax, sob_void

	; preparing a non-tail-call
	mov rax, qword [free_var_68]	; free var char-ci=?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 1	; arg count
	mov rax, PARAM(0)	; param make-string=?
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_123], rax
	mov rax, sob_void
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0147:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0148:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_0148
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0148
.L_lambda_simple_env_end_0148:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0148:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_0148
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0148
.L_lambda_simple_params_end_0148:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0148
	jmp .L_lambda_simple_end_0148
.L_lambda_simple_code_0148:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0148
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0148:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param e
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	jne .L_or_end_0022
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param e
	push rax
	push 1	; arg count
	mov rax, qword [free_var_111]	; free var pair?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00fe
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param e
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_96]	; free var list?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01e4:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01e4
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01e4
.L_tc_recycle_frame_done_01e4:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00fe
.L_if_else_00fe:
	mov rax, L_constants + 2
.L_if_end_00fe:
.L_or_end_0022:
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0148:	; new closure is in rax
	mov qword [free_var_96], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	; preparing a non-tail-call
	mov rax, qword [free_var_101]	; free var make-vector
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0149:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_0149
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0149
.L_lambda_simple_env_end_0149:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0149:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_0149
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0149
.L_lambda_simple_params_end_0149:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0149
	jmp .L_lambda_simple_end_0149
.L_lambda_simple_code_0149:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0149
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0149:
	enter 0, 0
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_opt_env_loop_002c:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_opt_env_end_002c
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_opt_env_loop_002c
.L_lambda_opt_env_end_002c:
	pop rbx
	mov rsi, 0
.L_lambda_opt_params_loop_002c:	; copy params
	cmp rsi, 1
	je .L_lambda_opt_params_end_002c
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_opt_params_loop_002c
.L_lambda_opt_params_end_002c:
	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_002c
	jmp .L_lambda_opt_end_002c
.L_lambda_opt_code_002c:	; lambda-opt body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_opt_arity_check_exact_002c
	jg .L_lambda_opt_arity_check_more_002c
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_opt
.L_lambda_opt_arity_check_exact_002c:
	sub rsp, 8
	mov rax, qword[rsp + 8 *1]
	mov qword[rsp], rax  
	mov rax, qword[rsp + 8 *2] ;rax now holds env 
	mov qword[rsp + 8 * 1], rax
	mov rax, 2
	mov qword[rsp + 8 *2], rax
	mov rax, qword[rsp + 8 * (4 + 0)]
	mov qword[rsp + 8 * (3 + 0)], rax
	mov rax, sob_nil
	mov qword[rsp + 8 * (3 + 1)], rax
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param xs
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_0104
	mov rax, L_constants + 0
	jmp .L_if_end_0104
.L_if_else_0104:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param xs
	push rax
	push 1	; arg count
	mov rax, qword [free_var_111]	; free var pair?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_0102
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param xs
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_0102
.L_if_else_0102:
	mov rax, L_constants + 2
.L_if_end_0102:
	cmp rax, sob_boolean_false
	je .L_if_else_0103
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param xs
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_0103
.L_if_else_0103:
	; preparing a non-tail-call
	mov rax, L_constants + 2955
	push rax
	mov rax, L_constants + 2946
	push rax
	push 2	; arg count
	mov rax, qword [free_var_82]	; free var error
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
.L_if_end_0103:
.L_if_end_0104:
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_014b:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_simple_env_end_014b
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_014b
.L_lambda_simple_env_end_014b:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_014b:	; copy params
	cmp rsi, 2
	je .L_lambda_simple_params_end_014b
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_014b
.L_lambda_simple_params_end_014b:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_014b
	jmp .L_lambda_simple_end_014b
.L_lambda_simple_code_014b:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_014b
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_014b:
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(0)	; param x
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var n
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var asm-make-vector
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01e7:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01e7
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01e7
.L_tc_recycle_frame_done_01e7:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_014b:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01e8:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01e8
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01e8
.L_tc_recycle_frame_done_01e8:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(2)
	jmp .L_lambda_opt_end_002c	; new closure is in rax
.L_lambda_opt_arity_check_more_002c:
	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
	mov r9, sob_nil
	mov rbx, rsp 
	add rbx, 3*8 	; now rbx is pointing to the first param
	dec r8	 ;to get to the top - starting at 0 not 1
	shl r8, 3
	add rbx, r8	 ;rbx now points to the last opt param that was pushed
	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
.L_lambda_opt_stack_shrink_loop_002c:
	cmp r8, 1
	je .L_lambda_opt_stack_shrink_loop_exit_002c
	mov rdi, 1+8+8 ;for pair
	call malloc;to create the pair in the stack
	mov byte [rax], T_pair ; to make it a pair
	mov rcx, qword[rbx] ;rcx is holding the param to copy
	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 	mov qword[rax+1+8],r9
	mov r9, rax ;for the recursion 
	dec r8 ;we finished copy another opt param to the list
	sub rbx, 8 ;to get the next param to copy
	jmp .L_lambda_opt_stack_shrink_loop_002c
.L_lambda_opt_stack_shrink_loop_exit_002c:
	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
	sub rcx, 2
	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
	add rsp, rcx ;shrinking the stack
	mov rax, rsp
	sub rax, rcx ;now rax is pointing on the original ret
	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
	dec r8 ;we start with param 0, not 1 
	add rax, 3 * 8;now rax is param 0
	shl r8, 3;convert to byte
	add rax, r8;now rax is the top of the stack
	mov qword[rax], r9;puting the list at the top
	sub rax, 8;rax is the adress to copy to the not optional params
	mov rbx, rsp 
	sub rbx, rcx;rbx is the ret adress in the original
	mov r10, 1;r10 is the not opt params length
	dec r10 
	shl r10, 3;to get bytes
	add rbx, 3*8;rbx is the first param
	add rbx, r10; rbx is where the address to copy to
	mov r8, qword [rbx] 	;r8 is holding the param to copy
	mov qword[rax], r8
	sub rax, 8
	sub rbx, 8
	mov rax, rsp
	sub rax, rcx 	 ;now rax is original ret
	mov qword [rsp+2*8], 2
	mov rbx, qword[rax + 8 *1]
	mov qword [rsp + 1*8] ,rbx
	mov rbx, qword[rax]
	mov qword [rsp], rbx
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param xs
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_0101
	mov rax, L_constants + 0
	jmp .L_if_end_0101
.L_if_else_0101:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param xs
	push rax
	push 1	; arg count
	mov rax, qword [free_var_111]	; free var pair?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_00ff
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param xs
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_00ff
.L_if_else_00ff:
	mov rax, L_constants + 2
.L_if_end_00ff:
	cmp rax, sob_boolean_false
	je .L_if_else_0100
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param xs
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_0100
.L_if_else_0100:
	; preparing a non-tail-call
	mov rax, L_constants + 2955
	push rax
	mov rax, L_constants + 2946
	push rax
	push 2	; arg count
	mov rax, qword [free_var_82]	; free var error
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
.L_if_end_0100:
.L_if_end_0101:
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_014a:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_simple_env_end_014a
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_014a
.L_lambda_simple_env_end_014a:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_014a:	; copy params
	cmp rsi, 2
	je .L_lambda_simple_params_end_014a
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_014a
.L_lambda_simple_params_end_014a:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_014a
	jmp .L_lambda_simple_end_014a
.L_lambda_simple_code_014a:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_014a
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_014a:
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(0)	; param x
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var n
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var asm-make-vector
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01e5:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01e5
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01e5
.L_tc_recycle_frame_done_01e5:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_014a:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01e6:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01e6
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01e6
.L_tc_recycle_frame_done_01e6:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_opt_end_002c:	; new closure is in rax
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0149:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_101], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	; preparing a non-tail-call
	mov rax, qword [free_var_99]	; free var make-string
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_014c:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_014c
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_014c
.L_lambda_simple_env_end_014c:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_014c:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_014c
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_014c
.L_lambda_simple_params_end_014c:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_014c
	jmp .L_lambda_simple_end_014c
.L_lambda_simple_code_014c:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_014c
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_014c:
	enter 0, 0
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_opt_env_loop_002d:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_opt_env_end_002d
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_opt_env_loop_002d
.L_lambda_opt_env_end_002d:
	pop rbx
	mov rsi, 0
.L_lambda_opt_params_loop_002d:	; copy params
	cmp rsi, 1
	je .L_lambda_opt_params_end_002d
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_opt_params_loop_002d
.L_lambda_opt_params_end_002d:
	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_002d
	jmp .L_lambda_opt_end_002d
.L_lambda_opt_code_002d:	; lambda-opt body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_opt_arity_check_exact_002d
	jg .L_lambda_opt_arity_check_more_002d
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_opt
.L_lambda_opt_arity_check_exact_002d:
	sub rsp, 8
	mov rax, qword[rsp + 8 *1]
	mov qword[rsp], rax  
	mov rax, qword[rsp + 8 *2] ;rax now holds env 
	mov qword[rsp + 8 * 1], rax
	mov rax, 2
	mov qword[rsp + 8 *2], rax
	mov rax, qword[rsp + 8 * (4 + 0)]
	mov qword[rsp + 8 * (3 + 0)], rax
	mov rax, sob_nil
	mov qword[rsp + 8 * (3 + 1)], rax
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param chs
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_010a
	mov rax, L_constants + 4
	jmp .L_if_end_010a
.L_if_else_010a:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param chs
	push rax
	push 1	; arg count
	mov rax, qword [free_var_111]	; free var pair?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_0108
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param chs
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_0108
.L_if_else_0108:
	mov rax, L_constants + 2
.L_if_end_0108:
	cmp rax, sob_boolean_false
	je .L_if_else_0109
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param chs
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_0109
.L_if_else_0109:
	; preparing a non-tail-call
	mov rax, L_constants + 3016
	push rax
	mov rax, L_constants + 3007
	push rax
	push 2	; arg count
	mov rax, qword [free_var_82]	; free var error
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
.L_if_end_0109:
.L_if_end_010a:
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_014e:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_simple_env_end_014e
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_014e
.L_lambda_simple_env_end_014e:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_014e:	; copy params
	cmp rsi, 2
	je .L_lambda_simple_params_end_014e
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_014e
.L_lambda_simple_params_end_014e:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_014e
	jmp .L_lambda_simple_end_014e
.L_lambda_simple_code_014e:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_014e
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_014e:
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(0)	; param ch
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var n
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var asm-make-string
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01eb:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01eb
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01eb
.L_tc_recycle_frame_done_01eb:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_014e:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01ec:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01ec
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01ec
.L_tc_recycle_frame_done_01ec:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(2)
	jmp .L_lambda_opt_end_002d	; new closure is in rax
.L_lambda_opt_arity_check_more_002d:
	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
	mov r9, sob_nil
	mov rbx, rsp 
	add rbx, 3*8 	; now rbx is pointing to the first param
	dec r8	 ;to get to the top - starting at 0 not 1
	shl r8, 3
	add rbx, r8	 ;rbx now points to the last opt param that was pushed
	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
.L_lambda_opt_stack_shrink_loop_002d:
	cmp r8, 1
	je .L_lambda_opt_stack_shrink_loop_exit_002d
	mov rdi, 1+8+8 ;for pair
	call malloc;to create the pair in the stack
	mov byte [rax], T_pair ; to make it a pair
	mov rcx, qword[rbx] ;rcx is holding the param to copy
	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 	mov qword[rax+1+8],r9
	mov r9, rax ;for the recursion 
	dec r8 ;we finished copy another opt param to the list
	sub rbx, 8 ;to get the next param to copy
	jmp .L_lambda_opt_stack_shrink_loop_002d
.L_lambda_opt_stack_shrink_loop_exit_002d:
	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
	sub rcx, 2
	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
	add rsp, rcx ;shrinking the stack
	mov rax, rsp
	sub rax, rcx ;now rax is pointing on the original ret
	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
	dec r8 ;we start with param 0, not 1 
	add rax, 3 * 8;now rax is param 0
	shl r8, 3;convert to byte
	add rax, r8;now rax is the top of the stack
	mov qword[rax], r9;puting the list at the top
	sub rax, 8;rax is the adress to copy to the not optional params
	mov rbx, rsp 
	sub rbx, rcx;rbx is the ret adress in the original
	mov r10, 1;r10 is the not opt params length
	dec r10 
	shl r10, 3;to get bytes
	add rbx, 3*8;rbx is the first param
	add rbx, r10; rbx is where the address to copy to
	mov r8, qword [rbx] 	;r8 is holding the param to copy
	mov qword[rax], r8
	sub rax, 8
	sub rbx, 8
	mov rax, rsp
	sub rax, rcx 	 ;now rax is original ret
	mov qword [rsp+2*8], 2
	mov rbx, qword[rax + 8 *1]
	mov qword [rsp + 1*8] ,rbx
	mov rbx, qword[rax]
	mov qword [rsp], rbx
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param chs
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_0107
	mov rax, L_constants + 4
	jmp .L_if_end_0107
.L_if_else_0107:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param chs
	push rax
	push 1	; arg count
	mov rax, qword [free_var_111]	; free var pair?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_0105
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param chs
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_0105
.L_if_else_0105:
	mov rax, L_constants + 2
.L_if_end_0105:
	cmp rax, sob_boolean_false
	je .L_if_else_0106
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param chs
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_0106
.L_if_else_0106:
	; preparing a non-tail-call
	mov rax, L_constants + 3016
	push rax
	mov rax, L_constants + 3007
	push rax
	push 2	; arg count
	mov rax, qword [free_var_82]	; free var error
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
.L_if_end_0106:
.L_if_end_0107:
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_014d:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_simple_env_end_014d
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_014d
.L_lambda_simple_env_end_014d:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_014d:	; copy params
	cmp rsi, 2
	je .L_lambda_simple_params_end_014d
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_014d
.L_lambda_simple_params_end_014d:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_014d
	jmp .L_lambda_simple_end_014d
.L_lambda_simple_code_014d:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_014d
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_014d:
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(0)	; param ch
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var n
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var asm-make-string
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01e9:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01e9
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01e9
.L_tc_recycle_frame_done_01e9:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_014d:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01ea:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01ea
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01ea
.L_tc_recycle_frame_done_01ea:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_opt_end_002d:	; new closure is in rax
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_014c:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_99], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	; preparing a non-tail-call
	mov rax, L_constants + 1993
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_014f:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_014f
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_014f
.L_lambda_simple_env_end_014f:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_014f:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_014f
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_014f
.L_lambda_simple_params_end_014f:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_014f
	jmp .L_lambda_simple_end_014f
.L_lambda_simple_code_014f:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_014f
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_014f:
	enter 0, 0
	mov rdi, 8*1
	call malloc
	mov rbx, PARAM(0)
	mov qword[rax], rbx
	mov PARAM(0), rax
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0150:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_0150
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0150
.L_lambda_simple_env_end_0150:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0150:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0150
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0150
.L_lambda_simple_params_end_0150:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0150
	jmp .L_lambda_simple_end_0150
.L_lambda_simple_code_0150:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_0150
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0150:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_010b
	; preparing a tail-call
	mov rax, L_constants + 0
	push rax
	mov rax, PARAM(1)	; param i
	push rax
	push 2	; arg count
	mov rax, qword [free_var_101]	; free var make-vector
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01ed:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01ed
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01ed
.L_tc_recycle_frame_done_01ed:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_010b
.L_if_else_010b:
	; preparing a tail-call
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, L_constants + 2270
	push rax
	mov rax, PARAM(1)	; param i
	push rax
	push 2	; arg count
	mov rax, qword [free_var_1]	; free var +
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0151:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_simple_env_end_0151
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0151
.L_lambda_simple_env_end_0151:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0151:	; copy params
	cmp rsi, 2
	je .L_lambda_simple_params_end_0151
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0151
.L_lambda_simple_params_end_0151:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0151
	jmp .L_lambda_simple_end_0151
.L_lambda_simple_code_0151:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0151
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0151:
	enter 0, 0
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 1]	; bound var i
	push rax
	mov rax, PARAM(0)	; param v
	push rax
	push 3	; arg count
	mov rax, qword [free_var_147]	; free var vector-set!
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)

	mov rax, PARAM(0)	; param v
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0151:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01ee:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01ee
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01ee
.L_tc_recycle_frame_done_01ee:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_010b:
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_0150:	; new closure is in rax
	push rax
	mov rax, PARAM(0)	; param run
	pop qword [rax]
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0152:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_0152
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0152
.L_lambda_simple_env_end_0152:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0152:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0152
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0152
.L_lambda_simple_params_end_0152:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0152
	jmp .L_lambda_simple_end_0152
.L_lambda_simple_code_0152:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0152
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0152:
	enter 0, 0
	; preparing a tail-call
	mov rax, L_constants + 2135
	push rax
	mov rax, PARAM(0)	; param s
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01ef:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01ef
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01ef
.L_tc_recycle_frame_done_01ef:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0152:	; new closure is in rax
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_014f:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_95], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	; preparing a non-tail-call
	mov rax, L_constants + 1993
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0153:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_0153
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0153
.L_lambda_simple_env_end_0153:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0153:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_0153
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0153
.L_lambda_simple_params_end_0153:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0153
	jmp .L_lambda_simple_end_0153
.L_lambda_simple_code_0153:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0153
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0153:
	enter 0, 0
	mov rdi, 8*1
	call malloc
	mov rbx, PARAM(0)
	mov qword[rax], rbx
	mov PARAM(0), rax
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0154:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_0154
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0154
.L_lambda_simple_env_end_0154:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0154:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0154
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0154
.L_lambda_simple_params_end_0154:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0154
	jmp .L_lambda_simple_end_0154
.L_lambda_simple_code_0154:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_0154
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0154:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_010c
	; preparing a tail-call
	mov rax, L_constants + 4
	push rax
	mov rax, PARAM(1)	; param i
	push rax
	push 2	; arg count
	mov rax, qword [free_var_99]	; free var make-string
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01f0:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01f0
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01f0
.L_tc_recycle_frame_done_01f0:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_010c
.L_if_else_010c:
	; preparing a tail-call
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, L_constants + 2270
	push rax
	mov rax, PARAM(1)	; param i
	push rax
	push 2	; arg count
	mov rax, qword [free_var_1]	; free var +
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0155:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_simple_env_end_0155
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0155
.L_lambda_simple_env_end_0155:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0155:	; copy params
	cmp rsi, 2
	je .L_lambda_simple_params_end_0155
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0155
.L_lambda_simple_params_end_0155:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0155
	jmp .L_lambda_simple_end_0155
.L_lambda_simple_code_0155:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0155
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0155:
	enter 0, 0
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 1]	; bound var i
	push rax
	mov rax, PARAM(0)	; param str
	push rax
	push 3	; arg count
	mov rax, qword [free_var_131]	; free var string-set!
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)

	mov rax, PARAM(0)	; param str
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0155:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01f1:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01f1
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01f1
.L_tc_recycle_frame_done_01f1:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_010c:
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_0154:	; new closure is in rax
	push rax
	mov rax, PARAM(0)	; param run
	pop qword [rax]
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0156:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_0156
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0156
.L_lambda_simple_env_end_0156:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0156:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0156
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0156
.L_lambda_simple_params_end_0156:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0156
	jmp .L_lambda_simple_end_0156
.L_lambda_simple_code_0156:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0156
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0156:
	enter 0, 0
	; preparing a tail-call
	mov rax, L_constants + 2135
	push rax
	mov rax, PARAM(0)	; param s
	push rax
	push 2	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01f2:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01f2
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01f2
.L_tc_recycle_frame_done_01f2:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0156:	; new closure is in rax
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0153:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_94], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_opt_env_loop_002e:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_opt_env_end_002e
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_opt_env_loop_002e
.L_lambda_opt_env_end_002e:
	pop rbx
	mov rsi, 0
.L_lambda_opt_params_loop_002e:	; copy params
	cmp rsi, 0
	je .L_lambda_opt_params_end_002e
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_opt_params_loop_002e
.L_lambda_opt_params_end_002e:
	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_002e
	jmp .L_lambda_opt_end_002e
.L_lambda_opt_code_002e:	; lambda-opt body
	cmp qword [rsp + 8 * 2], 0
	je .L_lambda_opt_arity_check_exact_002e
	jg .L_lambda_opt_arity_check_more_002e
	push qword [rsp + 8 * 2]
	push 0
	jmp L_error_incorrect_arity_opt
.L_lambda_opt_arity_check_exact_002e:
	sub rsp, 8
	mov rax, qword[rsp + 8 *1]
	mov qword[rsp], rax  
	mov rax, qword[rsp + 8 *2] ;rax now holds env 
	mov qword[rsp + 8 * 1], rax
	mov rax, 1
	mov qword[rsp + 8 *2], rax
	mov rax, sob_nil
	mov qword[rsp + 8 * (3 + 0)], rax
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(0)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_95]	; free var list->vector
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01f4:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01f4
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01f4
.L_tc_recycle_frame_done_01f4:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
	jmp .L_lambda_opt_end_002e	; new closure is in rax
.L_lambda_opt_arity_check_more_002e:
	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
	mov r9, sob_nil
	mov rbx, rsp 
	add rbx, 3*8 	; now rbx is pointing to the first param
	dec r8	 ;to get to the top - starting at 0 not 1
	shl r8, 3
	add rbx, r8	 ;rbx now points to the last opt param that was pushed
	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
.L_lambda_opt_stack_shrink_loop_002e:
	cmp r8, 0
	je .L_lambda_opt_stack_shrink_loop_exit_002e
	mov rdi, 1+8+8 ;for pair
	call malloc;to create the pair in the stack
	mov byte [rax], T_pair ; to make it a pair
	mov rcx, qword[rbx] ;rcx is holding the param to copy
	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 	mov qword[rax+1+8],r9
	mov r9, rax ;for the recursion 
	dec r8 ;we finished copy another opt param to the list
	sub rbx, 8 ;to get the next param to copy
	jmp .L_lambda_opt_stack_shrink_loop_002e
.L_lambda_opt_stack_shrink_loop_exit_002e:
	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
	sub rcx, 1
	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
	add rsp, rcx ;shrinking the stack
	mov rax, rsp
	sub rax, rcx ;now rax is pointing on the original ret
	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
	dec r8 ;we start with param 0, not 1 
	add rax, 3 * 8;now rax is param 0
	shl r8, 3;convert to byte
	add rax, r8;now rax is the top of the stack
	mov qword[rax], r9;puting the list at the top
	sub rax, 8;rax is the adress to copy to the not optional params
	mov rbx, rsp 
	sub rbx, rcx;rbx is the ret adress in the original
	mov r10, 0;r10 is the not opt params length
	dec r10 
	shl r10, 3;to get bytes
	add rbx, 3*8;rbx is the first param
	add rbx, r10; rbx is where the address to copy to
	mov rax, rsp
	sub rax, rcx 	 ;now rax is original ret
	mov qword [rsp+2*8], 1
	mov rbx, qword[rax + 8 *1]
	mov qword [rsp + 1*8] ,rbx
	mov rbx, qword[rax]
	mov qword [rsp], rbx
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(0)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_95]	; free var list->vector
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01f3:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01f3
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01f3
.L_tc_recycle_frame_done_01f3:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_opt_end_002e:	; new closure is in rax
	mov qword [free_var_140], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	; preparing a non-tail-call
	mov rax, L_constants + 1993
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0157:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_0157
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0157
.L_lambda_simple_env_end_0157:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0157:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_0157
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0157
.L_lambda_simple_params_end_0157:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0157
	jmp .L_lambda_simple_end_0157
.L_lambda_simple_code_0157:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0157
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0157:
	enter 0, 0
	mov rdi, 8*1
	call malloc
	mov rbx, PARAM(0)
	mov qword[rax], rbx
	mov PARAM(0), rax
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0158:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_0158
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0158
.L_lambda_simple_env_end_0158:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0158:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0158
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0158
.L_lambda_simple_params_end_0158:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0158
	jmp .L_lambda_simple_end_0158
.L_lambda_simple_code_0158:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 3
	je .L_lambda_simple_arity_check_ok_0158
	push qword [rsp + 8 * 2]
	push 3
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0158:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(2)	; param n
	push rax
	mov rax, PARAM(1)	; param i
	push rax
	push 2	; arg count
	mov rax, qword [free_var_4]	; free var <
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_010d
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(2)	; param n
	push rax
	; preparing a non-tail-call
	mov rax, L_constants + 2270
	push rax
	mov rax, PARAM(1)	; param i
	push rax
	push 2	; arg count
	mov rax, qword [free_var_1]	; free var +
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param str
	push rax
	push 3	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param i
	push rax
	mov rax, PARAM(0)	; param str
	push rax
	push 2	; arg count
	mov rax, qword [free_var_128]	; free var string-ref
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, qword [free_var_79]	; free var cons
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01f5:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01f5
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01f5
.L_tc_recycle_frame_done_01f5:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_010d
.L_if_else_010d:
	mov rax, L_constants + 1
.L_if_end_010d:
	leave
	ret AND_KILL_FRAME(3)
.L_lambda_simple_end_0158:	; new closure is in rax
	push rax
	mov rax, PARAM(0)	; param run
	pop qword [rax]
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0159:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_0159
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0159
.L_lambda_simple_env_end_0159:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0159:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0159
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0159
.L_lambda_simple_params_end_0159:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0159
	jmp .L_lambda_simple_end_0159
.L_lambda_simple_code_0159:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0159
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0159:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param str
	push rax
	push 1	; arg count
	mov rax, qword [free_var_127]	; free var string-length
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, L_constants + 2135
	push rax
	mov rax, PARAM(0)	; param str
	push rax
	push 3	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01f6:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01f6
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01f6
.L_tc_recycle_frame_done_01f6:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0159:	; new closure is in rax
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0157:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_119], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	; preparing a non-tail-call
	mov rax, L_constants + 1993
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_015a:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_015a
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_015a
.L_lambda_simple_env_end_015a:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_015a:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_015a
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_015a
.L_lambda_simple_params_end_015a:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_015a
	jmp .L_lambda_simple_end_015a
.L_lambda_simple_code_015a:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_015a
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_015a:
	enter 0, 0
	mov rdi, 8*1
	call malloc
	mov rbx, PARAM(0)
	mov qword[rax], rbx
	mov PARAM(0), rax
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_015b:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_015b
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_015b
.L_lambda_simple_env_end_015b:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_015b:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_015b
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_015b
.L_lambda_simple_params_end_015b:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_015b
	jmp .L_lambda_simple_end_015b
.L_lambda_simple_code_015b:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 3
	je .L_lambda_simple_arity_check_ok_015b
	push qword [rsp + 8 * 2]
	push 3
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_015b:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(2)	; param n
	push rax
	mov rax, PARAM(1)	; param i
	push rax
	push 2	; arg count
	mov rax, qword [free_var_4]	; free var <
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_010e
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(2)	; param n
	push rax
	; preparing a non-tail-call
	mov rax, L_constants + 2270
	push rax
	mov rax, PARAM(1)	; param i
	push rax
	push 2	; arg count
	mov rax, qword [free_var_1]	; free var +
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param v
	push rax
	push 3	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param i
	push rax
	mov rax, PARAM(0)	; param v
	push rax
	push 2	; arg count
	mov rax, qword [free_var_144]	; free var vector-ref
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, qword [free_var_79]	; free var cons
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01f7:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01f7
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01f7
.L_tc_recycle_frame_done_01f7:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_010e
.L_if_else_010e:
	mov rax, L_constants + 1
.L_if_end_010e:
	leave
	ret AND_KILL_FRAME(3)
.L_lambda_simple_end_015b:	; new closure is in rax
	push rax
	mov rax, PARAM(0)	; param run
	pop qword [rax]
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_015c:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_015c
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_015c
.L_lambda_simple_env_end_015c:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_015c:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_015c
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_015c
.L_lambda_simple_params_end_015c:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_015c
	jmp .L_lambda_simple_end_015c
.L_lambda_simple_code_015c:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_015c
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_015c:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param v
	push rax
	push 1	; arg count
	mov rax, qword [free_var_143]	; free var vector-length
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, L_constants + 2135
	push rax
	mov rax, PARAM(0)	; param v
	push rax
	push 3	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01f8:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01f8
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01f8
.L_tc_recycle_frame_done_01f8:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_015c:	; new closure is in rax
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_015a:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_141], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_015d:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_015d
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_015d
.L_lambda_simple_env_end_015d:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_015d:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_015d
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_015d
.L_lambda_simple_params_end_015d:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_015d
	jmp .L_lambda_simple_end_015d
.L_lambda_simple_code_015d:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_015d
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_015d:
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(0)	; param n
	push rax
	; preparing a non-tail-call
	push 0	; arg count
	mov rax, qword [free_var_139]	; free var trng
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, qword [free_var_117]	; free var remainder
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01f9:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01f9
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01f9
.L_tc_recycle_frame_done_01f9:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_015d:	; new closure is in rax
	mov qword [free_var_113], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_015e:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_015e
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_015e
.L_lambda_simple_env_end_015e:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_015e:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_015e
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_015e
.L_lambda_simple_params_end_015e:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_015e
	jmp .L_lambda_simple_end_015e
.L_lambda_simple_code_015e:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_015e
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_015e:
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(0)	; param x
	push rax
	mov rax, L_constants + 2135
	push rax
	push 2	; arg count
	mov rax, qword [free_var_4]	; free var <
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01fa:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01fa
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01fa
.L_tc_recycle_frame_done_01fa:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_015e:	; new closure is in rax
	mov qword [free_var_112], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_015f:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_015f
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_015f
.L_lambda_simple_env_end_015f:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_015f:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_015f
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_015f
.L_lambda_simple_params_end_015f:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_015f
	jmp .L_lambda_simple_end_015f
.L_lambda_simple_code_015f:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_015f
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_015f:
	enter 0, 0
	; preparing a tail-call
	mov rax, L_constants + 2135
	push rax
	mov rax, PARAM(0)	; param x
	push rax
	push 2	; arg count
	mov rax, qword [free_var_4]	; free var <
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01fb:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01fb
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01fb
.L_tc_recycle_frame_done_01fb:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_015f:	; new closure is in rax
	mov qword [free_var_104], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0160:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_0160
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0160
.L_lambda_simple_env_end_0160:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0160:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_0160
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0160
.L_lambda_simple_params_end_0160:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0160
	jmp .L_lambda_simple_end_0160
.L_lambda_simple_code_0160:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0160
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0160:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, L_constants + 3190
	push rax
	mov rax, PARAM(0)	; param n
	push rax
	push 2	; arg count
	mov rax, qword [free_var_117]	; free var remainder
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_151]	; free var zero?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01fc:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01fc
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01fc
.L_tc_recycle_frame_done_01fc:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0160:	; new closure is in rax
	mov qword [free_var_83], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0161:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_0161
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0161
.L_lambda_simple_env_end_0161:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0161:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_0161
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0161
.L_lambda_simple_params_end_0161:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0161
	jmp .L_lambda_simple_end_0161
.L_lambda_simple_code_0161:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0161
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0161:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param n
	push rax
	push 1	; arg count
	mov rax, qword [free_var_83]	; free var even?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_106]	; free var not
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01fd:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01fd
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01fd
.L_tc_recycle_frame_done_01fd:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0161:	; new closure is in rax
	mov qword [free_var_109], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0162:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_0162
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0162
.L_lambda_simple_env_end_0162:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0162:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_0162
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0162
.L_lambda_simple_params_end_0162:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0162
	jmp .L_lambda_simple_end_0162
.L_lambda_simple_code_0162:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0162
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0162:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param x
	push rax
	push 1	; arg count
	mov rax, qword [free_var_104]	; free var negative?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_010f
	; preparing a tail-call
	mov rax, PARAM(0)	; param x
	push rax
	push 1	; arg count
	mov rax, qword [free_var_2]	; free var -
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01fe:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01fe
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01fe
.L_tc_recycle_frame_done_01fe:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_010f
.L_if_else_010f:
	mov rax, PARAM(0)	; param x
.L_if_end_010f:
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0162:	; new closure is in rax
	mov qword [free_var_30], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0163:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_0163
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0163
.L_lambda_simple_env_end_0163:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0163:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_0163
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0163
.L_lambda_simple_params_end_0163:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0163
	jmp .L_lambda_simple_end_0163
.L_lambda_simple_code_0163:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_0163
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0163:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param e1
	push rax
	push 1	; arg count
	mov rax, qword [free_var_111]	; free var pair?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_0110
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param e2
	push rax
	push 1	; arg count
	mov rax, qword [free_var_111]	; free var pair?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_0110
.L_if_else_0110:
	mov rax, L_constants + 2
.L_if_end_0110:
	cmp rax, sob_boolean_false
	je .L_if_else_011c
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param e2
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param e1
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, qword [free_var_81]	; free var equal?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_0111
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param e2
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param e1
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, qword [free_var_81]	; free var equal?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_01ff:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_01ff
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_01ff
.L_tc_recycle_frame_done_01ff:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_0111
.L_if_else_0111:
	mov rax, L_constants + 2
.L_if_end_0111:
	jmp .L_if_end_011c
.L_if_else_011c:
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param e1
	push rax
	push 1	; arg count
	mov rax, qword [free_var_148]	; free var vector?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_0113
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param e2
	push rax
	push 1	; arg count
	mov rax, qword [free_var_148]	; free var vector?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_0112
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param e2
	push rax
	push 1	; arg count
	mov rax, qword [free_var_143]	; free var vector-length
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param e1
	push rax
	push 1	; arg count
	mov rax, qword [free_var_143]	; free var vector-length
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, qword [free_var_6]	; free var =
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_0112
.L_if_else_0112:
	mov rax, L_constants + 2
.L_if_end_0112:
	jmp .L_if_end_0113
.L_if_else_0113:
	mov rax, L_constants + 2
.L_if_end_0113:
	cmp rax, sob_boolean_false
	je .L_if_else_011b
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param e2
	push rax
	push 1	; arg count
	mov rax, qword [free_var_141]	; free var vector->list
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param e1
	push rax
	push 1	; arg count
	mov rax, qword [free_var_141]	; free var vector->list
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, qword [free_var_81]	; free var equal?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0200:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0200
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0200
.L_tc_recycle_frame_done_0200:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_011b
.L_if_else_011b:
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param e1
	push rax
	push 1	; arg count
	mov rax, qword [free_var_138]	; free var string?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_0115
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param e2
	push rax
	push 1	; arg count
	mov rax, qword [free_var_138]	; free var string?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_0114
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param e2
	push rax
	push 1	; arg count
	mov rax, qword [free_var_127]	; free var string-length
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param e1
	push rax
	push 1	; arg count
	mov rax, qword [free_var_127]	; free var string-length
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, qword [free_var_6]	; free var =
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_0114
.L_if_else_0114:
	mov rax, L_constants + 2
.L_if_end_0114:
	jmp .L_if_end_0115
.L_if_else_0115:
	mov rax, L_constants + 2
.L_if_end_0115:
	cmp rax, sob_boolean_false
	je .L_if_else_011a
	; preparing a tail-call
	mov rax, PARAM(1)	; param e2
	push rax
	mov rax, PARAM(0)	; param e1
	push rax
	push 2	; arg count
	mov rax, qword [free_var_135]	; free var string=?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0201:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0201
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0201
.L_tc_recycle_frame_done_0201:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_011a
.L_if_else_011a:
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param e1
	push rax
	push 1	; arg count
	mov rax, qword [free_var_108]	; free var number?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_0116
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param e2
	push rax
	push 1	; arg count
	mov rax, qword [free_var_108]	; free var number?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_0116
.L_if_else_0116:
	mov rax, L_constants + 2
.L_if_end_0116:
	cmp rax, sob_boolean_false
	je .L_if_else_0119
	; preparing a tail-call
	mov rax, PARAM(1)	; param e2
	push rax
	mov rax, PARAM(0)	; param e1
	push rax
	push 2	; arg count
	mov rax, qword [free_var_6]	; free var =
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0202:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0202
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0202
.L_tc_recycle_frame_done_0202:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_0119
.L_if_else_0119:
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param e1
	push rax
	push 1	; arg count
	mov rax, qword [free_var_78]	; free var char?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_0117
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param e2
	push rax
	push 1	; arg count
	mov rax, qword [free_var_78]	; free var char?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_0117
.L_if_else_0117:
	mov rax, L_constants + 2
.L_if_end_0117:
	cmp rax, sob_boolean_false
	je .L_if_else_0118
	; preparing a tail-call
	mov rax, PARAM(1)	; param e2
	push rax
	mov rax, PARAM(0)	; param e1
	push rax
	push 2	; arg count
	mov rax, qword [free_var_75]	; free var char=?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0203:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0203
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0203
.L_tc_recycle_frame_done_0203:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_0118
.L_if_else_0118:
	; preparing a tail-call
	mov rax, PARAM(1)	; param e2
	push rax
	mov rax, PARAM(0)	; param e1
	push rax
	push 2	; arg count
	mov rax, qword [free_var_80]	; free var eq?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0204:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0204
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0204
.L_tc_recycle_frame_done_0204:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_0118:
.L_if_end_0119:
.L_if_end_011a:
.L_if_end_011b:
.L_if_end_011c:
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_0163:	; new closure is in rax
	mov qword [free_var_81], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0164:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_0164
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0164
.L_lambda_simple_env_end_0164:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0164:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_0164
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0164
.L_lambda_simple_params_end_0164:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0164
	jmp .L_lambda_simple_end_0164
.L_lambda_simple_code_0164:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_0164
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0164:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_011e
	mov rax, L_constants + 2
	jmp .L_if_end_011e
.L_if_else_011e:
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param a
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_41]	; free var caar
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, qword [free_var_80]	; free var eq?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_011d
	; preparing a tail-call
	mov rax, PARAM(1)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0205:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0205
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0205
.L_tc_recycle_frame_done_0205:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_011d
.L_if_else_011d:
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, qword [free_var_34]	; free var assoc
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0206:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0206
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0206
.L_tc_recycle_frame_done_0206:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_011d:
.L_if_end_011e:
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_0164:	; new closure is in rax
	mov qword [free_var_34], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	; preparing a non-tail-call
	mov rax, L_constants + 1993
	push rax
	mov rax, L_constants + 1993
	push rax
	push 2	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0165:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_0165
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0165
.L_lambda_simple_env_end_0165:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0165:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_0165
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0165
.L_lambda_simple_params_end_0165:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0165
	jmp .L_lambda_simple_end_0165
.L_lambda_simple_code_0165:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_0165
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0165:
	enter 0, 0
	mov rdi, 8*1
	call malloc
	mov rbx, PARAM(0)
	mov qword[rax], rbx
	mov PARAM(0), rax
	mov rax, sob_void

	mov rdi, 8*1
	call malloc
	mov rbx, PARAM(1)
	mov qword[rax], rbx
	mov PARAM(1), rax
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0166:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_0166
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0166
.L_lambda_simple_env_end_0166:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0166:	; copy params
	cmp rsi, 2
	je .L_lambda_simple_params_end_0166
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0166
.L_lambda_simple_params_end_0166:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0166
	jmp .L_lambda_simple_end_0166
.L_lambda_simple_code_0166:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 3
	je .L_lambda_simple_arity_check_ok_0166
	push qword [rsp + 8 * 2]
	push 3
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0166:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(2)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_011f
	mov rax, PARAM(0)	; param target
	jmp .L_if_end_011f
.L_if_else_011f:
	; preparing a tail-call
	; preparing a non-tail-call
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(2)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_127]	; free var string-length
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, L_constants + 2135
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(2)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(1)	; param i
	push rax
	mov rax, PARAM(0)	; param target
	push rax
	push 5	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 1]	; bound var add
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 3	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0167:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_simple_env_end_0167
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0167
.L_lambda_simple_env_end_0167:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0167:	; copy params
	cmp rsi, 3
	je .L_lambda_simple_params_end_0167
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0167
.L_lambda_simple_params_end_0167:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0167
	jmp .L_lambda_simple_end_0167
.L_lambda_simple_code_0167:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0167
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0167:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 2]	; bound var s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param i
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var target
	push rax
	push 3	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0207:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0207
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0207
.L_tc_recycle_frame_done_0207:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0167:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0208:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0208
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0208
.L_tc_recycle_frame_done_0208:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_011f:
	leave
	ret AND_KILL_FRAME(3)
.L_lambda_simple_end_0166:	; new closure is in rax
	push rax
	mov rax, PARAM(0)	; param run
	pop qword [rax]
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0168:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_0168
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0168
.L_lambda_simple_env_end_0168:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0168:	; copy params
	cmp rsi, 2
	je .L_lambda_simple_params_end_0168
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0168
.L_lambda_simple_params_end_0168:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0168
	jmp .L_lambda_simple_end_0168
.L_lambda_simple_code_0168:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 5
	je .L_lambda_simple_arity_check_ok_0168
	push qword [rsp + 8 * 2]
	push 5
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0168:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(4)	; param limit
	push rax
	mov rax, PARAM(3)	; param j
	push rax
	push 2	; arg count
	mov rax, qword [free_var_4]	; free var <
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_0120
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(3)	; param j
	push rax
	mov rax, PARAM(2)	; param str
	push rax
	push 2	; arg count
	mov rax, qword [free_var_128]	; free var string-ref
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(1)	; param i
	push rax
	mov rax, PARAM(0)	; param target
	push rax
	push 3	; arg count
	mov rax, qword [free_var_131]	; free var string-set!
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)

	; preparing a tail-call
	mov rax, PARAM(4)	; param limit
	push rax
	; preparing a non-tail-call
	mov rax, L_constants + 2270
	push rax
	mov rax, PARAM(3)	; param j
	push rax
	push 2	; arg count
	mov rax, qword [free_var_1]	; free var +
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(2)	; param str
	push rax
	; preparing a non-tail-call
	mov rax, L_constants + 2270
	push rax
	mov rax, PARAM(1)	; param i
	push rax
	push 2	; arg count
	mov rax, qword [free_var_1]	; free var +
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param target
	push rax
	push 5	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 1]	; bound var add
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0209:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0209
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0209
.L_tc_recycle_frame_done_0209:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_0120
.L_if_else_0120:
	mov rax, PARAM(1)	; param i
.L_if_end_0120:
	leave
	ret AND_KILL_FRAME(5)
.L_lambda_simple_end_0168:	; new closure is in rax
	push rax
	mov rax, PARAM(1)	; param add
	pop qword [rax]
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_opt_env_loop_002f:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_opt_env_end_002f
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_opt_env_loop_002f
.L_lambda_opt_env_end_002f:
	pop rbx
	mov rsi, 0
.L_lambda_opt_params_loop_002f:	; copy params
	cmp rsi, 2
	je .L_lambda_opt_params_end_002f
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_opt_params_loop_002f
.L_lambda_opt_params_end_002f:
	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_002f
	jmp .L_lambda_opt_end_002f
.L_lambda_opt_code_002f:	; lambda-opt body
	cmp qword [rsp + 8 * 2], 0
	je .L_lambda_opt_arity_check_exact_002f
	jg .L_lambda_opt_arity_check_more_002f
	push qword [rsp + 8 * 2]
	push 0
	jmp L_error_incorrect_arity_opt
.L_lambda_opt_arity_check_exact_002f:
	sub rsp, 8
	mov rax, qword[rsp + 8 *1]
	mov qword[rsp], rax  
	mov rax, qword[rsp + 8 *2] ;rax now holds env 
	mov qword[rsp + 8 * 1], rax
	mov rax, 1
	mov qword[rsp + 8 *2], rax
	mov rax, sob_nil
	mov qword[rsp + 8 * (3 + 0)], rax
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(0)	; param strings
	push rax
	mov rax, L_constants + 2135
	push rax
	; preparing a non-tail-call
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param strings
	push rax
	mov rax, qword [free_var_127]	; free var string-length
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, qword [free_var_103]	; free var map
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, qword [free_var_1]	; free var +
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, qword [free_var_33]	; free var apply
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_99]	; free var make-string
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 3	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_020b:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_020b
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_020b
.L_tc_recycle_frame_done_020b:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
	jmp .L_lambda_opt_end_002f	; new closure is in rax
.L_lambda_opt_arity_check_more_002f:
	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
	mov r9, sob_nil
	mov rbx, rsp 
	add rbx, 3*8 	; now rbx is pointing to the first param
	dec r8	 ;to get to the top - starting at 0 not 1
	shl r8, 3
	add rbx, r8	 ;rbx now points to the last opt param that was pushed
	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
.L_lambda_opt_stack_shrink_loop_002f:
	cmp r8, 0
	je .L_lambda_opt_stack_shrink_loop_exit_002f
	mov rdi, 1+8+8 ;for pair
	call malloc;to create the pair in the stack
	mov byte [rax], T_pair ; to make it a pair
	mov rcx, qword[rbx] ;rcx is holding the param to copy
	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 	mov qword[rax+1+8],r9
	mov r9, rax ;for the recursion 
	dec r8 ;we finished copy another opt param to the list
	sub rbx, 8 ;to get the next param to copy
	jmp .L_lambda_opt_stack_shrink_loop_002f
.L_lambda_opt_stack_shrink_loop_exit_002f:
	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
	sub rcx, 1
	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
	add rsp, rcx ;shrinking the stack
	mov rax, rsp
	sub rax, rcx ;now rax is pointing on the original ret
	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
	dec r8 ;we start with param 0, not 1 
	add rax, 3 * 8;now rax is param 0
	shl r8, 3;convert to byte
	add rax, r8;now rax is the top of the stack
	mov qword[rax], r9;puting the list at the top
	sub rax, 8;rax is the adress to copy to the not optional params
	mov rbx, rsp 
	sub rbx, rcx;rbx is the ret adress in the original
	mov r10, 0;r10 is the not opt params length
	dec r10 
	shl r10, 3;to get bytes
	add rbx, 3*8;rbx is the first param
	add rbx, r10; rbx is where the address to copy to
	mov rax, rsp
	sub rax, rcx 	 ;now rax is original ret
	mov qword [rsp+2*8], 1
	mov rbx, qword[rax + 8 *1]
	mov qword [rsp + 1*8] ,rbx
	mov rbx, qword[rax]
	mov qword [rsp], rbx
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(0)	; param strings
	push rax
	mov rax, L_constants + 2135
	push rax
	; preparing a non-tail-call
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param strings
	push rax
	mov rax, qword [free_var_127]	; free var string-length
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, qword [free_var_103]	; free var map
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, qword [free_var_1]	; free var +
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, qword [free_var_33]	; free var apply
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_99]	; free var make-string
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 3	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_020a:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_020a
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_020a
.L_tc_recycle_frame_done_020a:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_opt_end_002f:	; new closure is in rax
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_0165:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_120], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	; preparing a non-tail-call
	mov rax, L_constants + 1993
	push rax
	mov rax, L_constants + 1993
	push rax
	push 2	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0169:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_0169
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0169
.L_lambda_simple_env_end_0169:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0169:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_0169
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0169
.L_lambda_simple_params_end_0169:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0169
	jmp .L_lambda_simple_end_0169
.L_lambda_simple_code_0169:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_0169
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0169:
	enter 0, 0
	mov rdi, 8*1
	call malloc
	mov rbx, PARAM(0)
	mov qword[rax], rbx
	mov PARAM(0), rax
	mov rax, sob_void

	mov rdi, 8*1
	call malloc
	mov rbx, PARAM(1)
	mov qword[rax], rbx
	mov PARAM(1), rax
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_016a:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_016a
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_016a
.L_lambda_simple_env_end_016a:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_016a:	; copy params
	cmp rsi, 2
	je .L_lambda_simple_params_end_016a
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_016a
.L_lambda_simple_params_end_016a:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_016a
	jmp .L_lambda_simple_end_016a
.L_lambda_simple_code_016a:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 3
	je .L_lambda_simple_arity_check_ok_016a
	push qword [rsp + 8 * 2]
	push 3
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_016a:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(2)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_107]	; free var null?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_0121
	mov rax, PARAM(0)	; param target
	jmp .L_if_end_0121
.L_if_else_0121:
	; preparing a tail-call
	; preparing a non-tail-call
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(2)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_143]	; free var vector-length
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, L_constants + 2135
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(2)	; param s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_49]	; free var car
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(1)	; param i
	push rax
	mov rax, PARAM(0)	; param target
	push rax
	push 5	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 1]	; bound var add
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 3	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_016b:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_simple_env_end_016b
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_016b
.L_lambda_simple_env_end_016b:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_016b:	; copy params
	cmp rsi, 3
	je .L_lambda_simple_params_end_016b
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_016b
.L_lambda_simple_params_end_016b:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_016b
	jmp .L_lambda_simple_end_016b
.L_lambda_simple_code_016b:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_016b
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_016b:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 2]	; bound var s
	push rax
	push 1	; arg count
	mov rax, qword [free_var_64]	; free var cdr
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param i
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var target
	push rax
	push 3	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_020c:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_020c
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_020c
.L_tc_recycle_frame_done_020c:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_016b:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_020d:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_020d
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_020d
.L_tc_recycle_frame_done_020d:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_0121:
	leave
	ret AND_KILL_FRAME(3)
.L_lambda_simple_end_016a:	; new closure is in rax
	push rax
	mov rax, PARAM(0)	; param run
	pop qword [rax]
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_016c:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_016c
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_016c
.L_lambda_simple_env_end_016c:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_016c:	; copy params
	cmp rsi, 2
	je .L_lambda_simple_params_end_016c
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_016c
.L_lambda_simple_params_end_016c:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_016c
	jmp .L_lambda_simple_end_016c
.L_lambda_simple_code_016c:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 5
	je .L_lambda_simple_arity_check_ok_016c
	push qword [rsp + 8 * 2]
	push 5
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_016c:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(4)	; param limit
	push rax
	mov rax, PARAM(3)	; param j
	push rax
	push 2	; arg count
	mov rax, qword [free_var_4]	; free var <
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_0122
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(3)	; param j
	push rax
	mov rax, PARAM(2)	; param vec
	push rax
	push 2	; arg count
	mov rax, qword [free_var_144]	; free var vector-ref
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(1)	; param i
	push rax
	mov rax, PARAM(0)	; param target
	push rax
	push 3	; arg count
	mov rax, qword [free_var_147]	; free var vector-set!
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)

	; preparing a tail-call
	mov rax, PARAM(4)	; param limit
	push rax
	; preparing a non-tail-call
	mov rax, L_constants + 2270
	push rax
	mov rax, PARAM(3)	; param j
	push rax
	push 2	; arg count
	mov rax, qword [free_var_1]	; free var +
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(2)	; param vec
	push rax
	; preparing a non-tail-call
	mov rax, L_constants + 2270
	push rax
	mov rax, PARAM(1)	; param i
	push rax
	push 2	; arg count
	mov rax, qword [free_var_1]	; free var +
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param target
	push rax
	push 5	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 1]	; bound var add
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_020e:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_020e
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_020e
.L_tc_recycle_frame_done_020e:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_0122
.L_if_else_0122:
	mov rax, PARAM(1)	; param i
.L_if_end_0122:
	leave
	ret AND_KILL_FRAME(5)
.L_lambda_simple_end_016c:	; new closure is in rax
	push rax
	mov rax, PARAM(1)	; param add
	pop qword [rax]
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_opt_env_loop_0030:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_opt_env_end_0030
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_opt_env_loop_0030
.L_lambda_opt_env_end_0030:
	pop rbx
	mov rsi, 0
.L_lambda_opt_params_loop_0030:	; copy params
	cmp rsi, 2
	je .L_lambda_opt_params_end_0030
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_opt_params_loop_0030
.L_lambda_opt_params_end_0030:
	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0030
	jmp .L_lambda_opt_end_0030
.L_lambda_opt_code_0030:	; lambda-opt body
	cmp qword [rsp + 8 * 2], 0
	je .L_lambda_opt_arity_check_exact_0030
	jg .L_lambda_opt_arity_check_more_0030
	push qword [rsp + 8 * 2]
	push 0
	jmp L_error_incorrect_arity_opt
.L_lambda_opt_arity_check_exact_0030:
	sub rsp, 8
	mov rax, qword[rsp + 8 *1]
	mov qword[rsp], rax  
	mov rax, qword[rsp + 8 *2] ;rax now holds env 
	mov qword[rsp + 8 * 1], rax
	mov rax, 1
	mov qword[rsp + 8 *2], rax
	mov rax, sob_nil
	mov qword[rsp + 8 * (3 + 0)], rax
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(0)	; param vectors
	push rax
	mov rax, L_constants + 2135
	push rax
	; preparing a non-tail-call
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param vectors
	push rax
	mov rax, qword [free_var_143]	; free var vector-length
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, qword [free_var_103]	; free var map
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, qword [free_var_1]	; free var +
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, qword [free_var_33]	; free var apply
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_101]	; free var make-vector
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 3	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0210:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0210
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0210
.L_tc_recycle_frame_done_0210:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
	jmp .L_lambda_opt_end_0030	; new closure is in rax
.L_lambda_opt_arity_check_more_0030:
	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
	mov r9, sob_nil
	mov rbx, rsp 
	add rbx, 3*8 	; now rbx is pointing to the first param
	dec r8	 ;to get to the top - starting at 0 not 1
	shl r8, 3
	add rbx, r8	 ;rbx now points to the last opt param that was pushed
	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
.L_lambda_opt_stack_shrink_loop_0030:
	cmp r8, 0
	je .L_lambda_opt_stack_shrink_loop_exit_0030
	mov rdi, 1+8+8 ;for pair
	call malloc;to create the pair in the stack
	mov byte [rax], T_pair ; to make it a pair
	mov rcx, qword[rbx] ;rcx is holding the param to copy
	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 	mov qword[rax+1+8],r9
	mov r9, rax ;for the recursion 
	dec r8 ;we finished copy another opt param to the list
	sub rbx, 8 ;to get the next param to copy
	jmp .L_lambda_opt_stack_shrink_loop_0030
.L_lambda_opt_stack_shrink_loop_exit_0030:
	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
	sub rcx, 1
	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
	add rsp, rcx ;shrinking the stack
	mov rax, rsp
	sub rax, rcx ;now rax is pointing on the original ret
	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
	dec r8 ;we start with param 0, not 1 
	add rax, 3 * 8;now rax is param 0
	shl r8, 3;convert to byte
	add rax, r8;now rax is the top of the stack
	mov qword[rax], r9;puting the list at the top
	sub rax, 8;rax is the adress to copy to the not optional params
	mov rbx, rsp 
	sub rbx, rcx;rbx is the ret adress in the original
	mov r10, 0;r10 is the not opt params length
	dec r10 
	shl r10, 3;to get bytes
	add rbx, 3*8;rbx is the first param
	add rbx, r10; rbx is where the address to copy to
	mov rax, rsp
	sub rax, rcx 	 ;now rax is original ret
	mov qword [rsp+2*8], 1
	mov rbx, qword[rax + 8 *1]
	mov qword [rsp + 1*8] ,rbx
	mov rbx, qword[rax]
	mov qword [rsp], rbx
	enter 0, 0
	; preparing a tail-call
	mov rax, PARAM(0)	; param vectors
	push rax
	mov rax, L_constants + 2135
	push rax
	; preparing a non-tail-call
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param vectors
	push rax
	mov rax, qword [free_var_143]	; free var vector-length
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, qword [free_var_103]	; free var map
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, qword [free_var_1]	; free var +
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	push rax
	push 2	; arg count
	mov rax, qword [free_var_33]	; free var apply
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_101]	; free var make-vector
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 3	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_020f:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_020f
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_020f
.L_tc_recycle_frame_done_020f:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_opt_end_0030:	; new closure is in rax
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_0169:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_142], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_016d:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_016d
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_016d
.L_lambda_simple_env_end_016d:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_016d:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_016d
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_016d
.L_lambda_simple_params_end_016d:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_016d
	jmp .L_lambda_simple_end_016d
.L_lambda_simple_code_016d:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_016d
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_016d:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param str
	push rax
	push 1	; arg count
	mov rax, qword [free_var_119]	; free var string->list
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_118]	; free var reverse
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_94]	; free var list->string
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0211:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0211
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0211
.L_tc_recycle_frame_done_0211:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_016d:	; new closure is in rax
	mov qword [free_var_129], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_016e:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_016e
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_016e
.L_lambda_simple_env_end_016e:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_016e:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_016e
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_016e
.L_lambda_simple_params_end_016e:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_016e
	jmp .L_lambda_simple_end_016e
.L_lambda_simple_code_016e:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_016e
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_016e:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param vec
	push rax
	push 1	; arg count
	mov rax, qword [free_var_141]	; free var vector->list
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_118]	; free var reverse
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, qword [free_var_95]	; free var list->vector
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0212:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0212
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0212
.L_tc_recycle_frame_done_0212:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_016e:	; new closure is in rax
	mov qword [free_var_145], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	; preparing a non-tail-call
	mov rax, L_constants + 1993
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_016f:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_016f
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_016f
.L_lambda_simple_env_end_016f:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_016f:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_016f
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_016f
.L_lambda_simple_params_end_016f:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_016f
	jmp .L_lambda_simple_end_016f
.L_lambda_simple_code_016f:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_016f
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_016f:
	enter 0, 0
	mov rdi, 8*1
	call malloc
	mov rbx, PARAM(0)
	mov qword[rax], rbx
	mov PARAM(0), rax
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0170:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_0170
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0170
.L_lambda_simple_env_end_0170:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0170:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0170
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0170
.L_lambda_simple_params_end_0170:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0170
	jmp .L_lambda_simple_end_0170
.L_lambda_simple_code_0170:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 3
	je .L_lambda_simple_arity_check_ok_0170
	push qword [rsp + 8 * 2]
	push 3
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0170:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(2)	; param j
	push rax
	mov rax, PARAM(1)	; param i
	push rax
	push 2	; arg count
	mov rax, qword [free_var_4]	; free var <
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_0123
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param i
	push rax
	mov rax, PARAM(0)	; param str
	push rax
	push 2	; arg count
	mov rax, qword [free_var_128]	; free var string-ref
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 3	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0171:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_simple_env_end_0171
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0171
.L_lambda_simple_env_end_0171:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0171:	; copy params
	cmp rsi, 3
	je .L_lambda_simple_params_end_0171
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0171
.L_lambda_simple_params_end_0171:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0171
	jmp .L_lambda_simple_end_0171
.L_lambda_simple_code_0171:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0171
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0171:
	enter 0, 0
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 2]	; bound var j
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var str
	push rax
	push 2	; arg count
	mov rax, qword [free_var_128]	; free var string-ref
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 1]	; bound var i
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var str
	push rax
	push 3	; arg count
	mov rax, qword [free_var_131]	; free var string-set!
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)

	; preparing a non-tail-call
	mov rax, PARAM(0)	; param ch
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 2]	; bound var j
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var str
	push rax
	push 3	; arg count
	mov rax, qword [free_var_131]	; free var string-set!
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)

	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, L_constants + 2270
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 2]	; bound var j
	push rax
	push 2	; arg count
	mov rax, qword [free_var_2]	; free var -
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, L_constants + 2270
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 1]	; bound var i
	push rax
	push 2	; arg count
	mov rax, qword [free_var_1]	; free var +
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var str
	push rax
	push 3	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0213:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0213
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0213
.L_tc_recycle_frame_done_0213:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0171:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0214:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0214
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0214
.L_tc_recycle_frame_done_0214:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_0123
.L_if_else_0123:
	mov rax, PARAM(0)	; param str
.L_if_end_0123:
	leave
	ret AND_KILL_FRAME(3)
.L_lambda_simple_end_0170:	; new closure is in rax
	push rax
	mov rax, PARAM(0)	; param run
	pop qword [rax]
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0172:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_0172
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0172
.L_lambda_simple_env_end_0172:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0172:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0172
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0172
.L_lambda_simple_params_end_0172:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0172
	jmp .L_lambda_simple_end_0172
.L_lambda_simple_code_0172:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0172
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0172:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param str
	push rax
	push 1	; arg count
	mov rax, qword [free_var_127]	; free var string-length
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0173:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_simple_env_end_0173
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0173
.L_lambda_simple_env_end_0173:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0173:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0173
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0173
.L_lambda_simple_params_end_0173:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0173
	jmp .L_lambda_simple_end_0173
.L_lambda_simple_code_0173:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0173
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0173:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param n
	push rax
	push 1	; arg count
	mov rax, qword [free_var_151]	; free var zero?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_0124
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var str
	jmp .L_if_end_0124
.L_if_else_0124:
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, L_constants + 2270
	push rax
	mov rax, PARAM(0)	; param n
	push rax
	push 2	; arg count
	mov rax, qword [free_var_2]	; free var -
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, L_constants + 2135
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var str
	push rax
	push 3	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0215:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0215
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0215
.L_tc_recycle_frame_done_0215:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_0124:
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0173:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0216:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0216
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0216
.L_tc_recycle_frame_done_0216:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0172:	; new closure is in rax
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_016f:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_130], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	; preparing a non-tail-call
	mov rax, L_constants + 1993
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0174:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_0174
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0174
.L_lambda_simple_env_end_0174:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0174:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_0174
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0174
.L_lambda_simple_params_end_0174:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0174
	jmp .L_lambda_simple_end_0174
.L_lambda_simple_code_0174:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0174
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0174:
	enter 0, 0
	mov rdi, 8*1
	call malloc
	mov rbx, PARAM(0)
	mov qword[rax], rbx
	mov PARAM(0), rax
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0175:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_0175
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0175
.L_lambda_simple_env_end_0175:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0175:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0175
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0175
.L_lambda_simple_params_end_0175:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0175
	jmp .L_lambda_simple_end_0175
.L_lambda_simple_code_0175:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 3
	je .L_lambda_simple_arity_check_ok_0175
	push qword [rsp + 8 * 2]
	push 3
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0175:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(2)	; param j
	push rax
	mov rax, PARAM(1)	; param i
	push rax
	push 2	; arg count
	mov rax, qword [free_var_4]	; free var <
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_0125
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param i
	push rax
	mov rax, PARAM(0)	; param vec
	push rax
	push 2	; arg count
	mov rax, qword [free_var_144]	; free var vector-ref
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 3	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0176:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_simple_env_end_0176
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0176
.L_lambda_simple_env_end_0176:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0176:	; copy params
	cmp rsi, 3
	je .L_lambda_simple_params_end_0176
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0176
.L_lambda_simple_params_end_0176:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0176
	jmp .L_lambda_simple_end_0176
.L_lambda_simple_code_0176:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0176
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0176:
	enter 0, 0
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 2]	; bound var j
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var vec
	push rax
	push 2	; arg count
	mov rax, qword [free_var_144]	; free var vector-ref
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 1]	; bound var i
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var vec
	push rax
	push 3	; arg count
	mov rax, qword [free_var_147]	; free var vector-set!
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)

	; preparing a non-tail-call
	mov rax, PARAM(0)	; param ch
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 2]	; bound var j
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var vec
	push rax
	push 3	; arg count
	mov rax, qword [free_var_147]	; free var vector-set!
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)

	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, L_constants + 2270
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 2]	; bound var j
	push rax
	push 2	; arg count
	mov rax, qword [free_var_2]	; free var -
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, L_constants + 2270
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 1]	; bound var i
	push rax
	push 2	; arg count
	mov rax, qword [free_var_1]	; free var +
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var vec
	push rax
	push 3	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0217:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0217
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0217
.L_tc_recycle_frame_done_0217:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0176:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0218:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0218
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0218
.L_tc_recycle_frame_done_0218:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_0125
.L_if_else_0125:
	mov rax, PARAM(0)	; param vec
.L_if_end_0125:
	leave
	ret AND_KILL_FRAME(3)
.L_lambda_simple_end_0175:	; new closure is in rax
	push rax
	mov rax, PARAM(0)	; param run
	pop qword [rax]
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0177:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_0177
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0177
.L_lambda_simple_env_end_0177:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0177:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0177
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0177
.L_lambda_simple_params_end_0177:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0177
	jmp .L_lambda_simple_end_0177
.L_lambda_simple_code_0177:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0177
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0177:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param vec
	push rax
	push 1	; arg count
	mov rax, qword [free_var_143]	; free var vector-length
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0178:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_simple_env_end_0178
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0178
.L_lambda_simple_env_end_0178:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0178:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0178
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0178
.L_lambda_simple_params_end_0178:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0178
	jmp .L_lambda_simple_end_0178
.L_lambda_simple_code_0178:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0178
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0178:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param n
	push rax
	push 1	; arg count
	mov rax, qword [free_var_151]	; free var zero?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_0126
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var vec
	jmp .L_if_end_0126
.L_if_else_0126:
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, L_constants + 2270
	push rax
	mov rax, PARAM(0)	; param n
	push rax
	push 2	; arg count
	mov rax, qword [free_var_2]	; free var -
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, L_constants + 2135
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var vec
	push rax
	push 3	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0219:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0219
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0219
.L_tc_recycle_frame_done_0219:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_0126:
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0178:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_021a:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_021a
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_021a
.L_tc_recycle_frame_done_021a:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0177:	; new closure is in rax
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0174:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	mov qword [free_var_146], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0179:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_0179
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0179
.L_lambda_simple_env_end_0179:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0179:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_0179
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0179
.L_lambda_simple_params_end_0179:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0179
	jmp .L_lambda_simple_end_0179
.L_lambda_simple_code_0179:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_0179
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0179:
	enter 0, 0
	; preparing a tail-call
	mov rax, L_constants + 1993
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_017a:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_017a
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_017a
.L_lambda_simple_env_end_017a:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_017a:	; copy params
	cmp rsi, 2
	je .L_lambda_simple_params_end_017a
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_017a
.L_lambda_simple_params_end_017a:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_017a
	jmp .L_lambda_simple_end_017a
.L_lambda_simple_code_017a:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_017a
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_017a:
	enter 0, 0
	mov rdi, 8*1
	call malloc
	mov rbx, PARAM(0)
	mov qword[rax], rbx
	mov PARAM(0), rax
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_017b:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_simple_env_end_017b
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_017b
.L_lambda_simple_env_end_017b:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_017b:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_017b
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_017b
.L_lambda_simple_params_end_017b:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_017b
	jmp .L_lambda_simple_end_017b
.L_lambda_simple_code_017b:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_017b
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_017b:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var n
	push rax
	mov rax, PARAM(0)	; param i
	push rax
	push 2	; arg count
	mov rax, qword [free_var_4]	; free var <
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_0127
	; preparing a tail-call
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, L_constants + 2270
	push rax
	mov rax, PARAM(0)	; param i
	push rax
	push 2	; arg count
	mov rax, qword [free_var_1]	; free var +
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param i
	push rax
	push 1	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 1]	; bound var thunk
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, qword [free_var_79]	; free var cons
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_021b:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_021b
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_021b
.L_tc_recycle_frame_done_021b:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_0127
.L_if_else_0127:
	mov rax, L_constants + 1
.L_if_end_0127:
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_017b:	; new closure is in rax
	push rax
	mov rax, PARAM(0)	; param run
	pop qword [rax]
	mov rax, sob_void

	; preparing a tail-call
	mov rax, L_constants + 2135
	push rax
	push 1	; arg count
	mov rax, PARAM(0)	; param run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_021c:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_021c
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_021c
.L_tc_recycle_frame_done_021c:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_017a:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_021d:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_021d
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_021d
.L_tc_recycle_frame_done_021d:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_0179:	; new closure is in rax
	mov qword [free_var_98], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_017c:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_017c
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_017c
.L_lambda_simple_env_end_017c:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_017c:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_017c
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_017c
.L_lambda_simple_params_end_017c:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_017c
	jmp .L_lambda_simple_end_017c
.L_lambda_simple_code_017c:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_017c
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_017c:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param n
	push rax
	push 1	; arg count
	mov rax, qword [free_var_99]	; free var make-string
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_017d:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_017d
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_017d
.L_lambda_simple_env_end_017d:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_017d:	; copy params
	cmp rsi, 2
	je .L_lambda_simple_params_end_017d
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_017d
.L_lambda_simple_params_end_017d:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_017d
	jmp .L_lambda_simple_end_017d
.L_lambda_simple_code_017d:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_017d
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_017d:
	enter 0, 0
	; preparing a tail-call
	mov rax, L_constants + 1993
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_017e:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_simple_env_end_017e
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_017e
.L_lambda_simple_env_end_017e:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_017e:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_017e
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_017e
.L_lambda_simple_params_end_017e:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_017e
	jmp .L_lambda_simple_end_017e
.L_lambda_simple_code_017e:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_017e
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_017e:
	enter 0, 0
	mov rdi, 8*1
	call malloc
	mov rbx, PARAM(0)
	mov qword[rax], rbx
	mov PARAM(0), rax
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 4	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_017f:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 3
	je .L_lambda_simple_env_end_017f
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_017f
.L_lambda_simple_env_end_017f:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_017f:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_017f
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_017f
.L_lambda_simple_params_end_017f:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_017f
	jmp .L_lambda_simple_end_017f
.L_lambda_simple_code_017f:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_017f
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_017f:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, ENV
	mov rax, qword [rax + 8 * 2]
	mov rax, qword [rax + 8 * 0]	; bound var n
	push rax
	mov rax, PARAM(0)	; param i
	push rax
	push 2	; arg count
	mov rax, qword [free_var_4]	; free var <
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_0128
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param i
	push rax
	push 1	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 2]
	mov rax, qword [rax + 8 * 1]	; bound var thunk
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param i
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var str
	push rax
	push 3	; arg count
	mov rax, qword [free_var_131]	; free var string-set!
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)

	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, L_constants + 2270
	push rax
	mov rax, PARAM(0)	; param i
	push rax
	push 2	; arg count
	mov rax, qword [free_var_1]	; free var +
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_021e:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_021e
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_021e
.L_tc_recycle_frame_done_021e:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_0128
.L_if_else_0128:
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var str
.L_if_end_0128:
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_017f:	; new closure is in rax
	push rax
	mov rax, PARAM(0)	; param run
	pop qword [rax]
	mov rax, sob_void

	; preparing a tail-call
	mov rax, L_constants + 2135
	push rax
	push 1	; arg count
	mov rax, PARAM(0)	; param run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_021f:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_021f
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_021f
.L_tc_recycle_frame_done_021f:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_017e:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0220:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0220
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0220
.L_tc_recycle_frame_done_0220:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_017d:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0221:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0221
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0221
.L_tc_recycle_frame_done_0221:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_017c:	; new closure is in rax
	mov qword [free_var_100], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0180:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_0180
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0180
.L_lambda_simple_env_end_0180:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0180:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_0180
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0180
.L_lambda_simple_params_end_0180:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0180
	jmp .L_lambda_simple_end_0180
.L_lambda_simple_code_0180:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 2
	je .L_lambda_simple_arity_check_ok_0180
	push qword [rsp + 8 * 2]
	push 2
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0180:
	enter 0, 0
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param n
	push rax
	push 1	; arg count
	mov rax, qword [free_var_101]	; free var make-vector
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 2	; new rib
	call malloc
	push rax
	mov rdi, 8 * 2	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0181:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 1
	je .L_lambda_simple_env_end_0181
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0181
.L_lambda_simple_env_end_0181:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0181:	; copy params
	cmp rsi, 2
	je .L_lambda_simple_params_end_0181
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0181
.L_lambda_simple_params_end_0181:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0181
	jmp .L_lambda_simple_end_0181
.L_lambda_simple_code_0181:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0181
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0181:
	enter 0, 0
	; preparing a tail-call
	mov rax, L_constants + 1993
	push rax
	push 1	; arg count
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 3	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0182:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 2
	je .L_lambda_simple_env_end_0182
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0182
.L_lambda_simple_env_end_0182:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0182:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0182
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0182
.L_lambda_simple_params_end_0182:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0182
	jmp .L_lambda_simple_end_0182
.L_lambda_simple_code_0182:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0182
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0182:
	enter 0, 0
	mov rdi, 8*1
	call malloc
	mov rbx, PARAM(0)
	mov qword[rax], rbx
	mov PARAM(0), rax
	mov rax, sob_void

	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 1	; new rib
	call malloc
	push rax
	mov rdi, 8 * 4	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0183:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 3
	je .L_lambda_simple_env_end_0183
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0183
.L_lambda_simple_env_end_0183:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0183:	; copy params
	cmp rsi, 1
	je .L_lambda_simple_params_end_0183
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0183
.L_lambda_simple_params_end_0183:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0183
	jmp .L_lambda_simple_end_0183
.L_lambda_simple_code_0183:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 1
	je .L_lambda_simple_arity_check_ok_0183
	push qword [rsp + 8 * 2]
	push 1
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0183:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, ENV
	mov rax, qword [rax + 8 * 2]
	mov rax, qword [rax + 8 * 0]	; bound var n
	push rax
	mov rax, PARAM(0)	; param i
	push rax
	push 2	; arg count
	mov rax, qword [free_var_4]	; free var <
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_0129
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param i
	push rax
	push 1	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 2]
	mov rax, qword [rax + 8 * 1]	; bound var thunk
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param i
	push rax
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var vec
	push rax
	push 3	; arg count
	mov rax, qword [free_var_147]	; free var vector-set!
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)

	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, L_constants + 2270
	push rax
	mov rax, PARAM(0)	; param i
	push rax
	push 2	; arg count
	mov rax, qword [free_var_1]	; free var +
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 1	; arg count
	mov rax, ENV
	mov rax, qword [rax + 8 * 0]
	mov rax, qword [rax + 8 * 0]	; bound var run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0222:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0222
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0222
.L_tc_recycle_frame_done_0222:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_0129
.L_if_else_0129:
	mov rax, ENV
	mov rax, qword [rax + 8 * 1]
	mov rax, qword [rax + 8 * 0]	; bound var vec
.L_if_end_0129:
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0183:	; new closure is in rax
	push rax
	mov rax, PARAM(0)	; param run
	pop qword [rax]
	mov rax, sob_void

	; preparing a tail-call
	mov rax, L_constants + 2135
	push rax
	push 1	; arg count
	mov rax, PARAM(0)	; param run
	mov rax, qword [rax]
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0223:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0223
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0223
.L_tc_recycle_frame_done_0223:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0182:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0224:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0224
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0224
.L_tc_recycle_frame_done_0224:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(1)
.L_lambda_simple_end_0181:	; new closure is in rax
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0225:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0225
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0225
.L_tc_recycle_frame_done_0225:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(2)
.L_lambda_simple_end_0180:	; new closure is in rax
	mov qword [free_var_102], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0184:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_0184
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0184
.L_lambda_simple_env_end_0184:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0184:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_0184
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0184
.L_lambda_simple_params_end_0184:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0184
	jmp .L_lambda_simple_end_0184
.L_lambda_simple_code_0184:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 3
	je .L_lambda_simple_arity_check_ok_0184
	push qword [rsp + 8 * 2]
	push 3
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0184:
	enter 0, 0
	; preparing a non-tail-call
	mov rax, PARAM(2)	; param n
	push rax
	push 1	; arg count
	mov rax, qword [free_var_151]	; free var zero?
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_012c
	mov rax, L_constants + 3485
	jmp .L_if_end_012c
.L_if_else_012c:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, qword [free_var_4]	; free var <
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_012b
	; preparing a tail-call
	; preparing a non-tail-call
	mov rax, PARAM(2)	; param n
	push rax
	; preparing a non-tail-call
	mov rax, PARAM(0)	; param a
	push rax
	mov rax, PARAM(1)	; param b
	push rax
	push 2	; arg count
	mov rax, qword [free_var_3]	; free var /
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 3	; arg count
	mov rax, qword [free_var_97]	; free var logarithm
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, L_constants + 3485
	push rax
	push 2	; arg count
	mov rax, qword [free_var_1]	; free var +
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0226:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0226
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0226
.L_tc_recycle_frame_done_0226:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	jmp .L_if_end_012b
.L_if_else_012b:
	; preparing a non-tail-call
	mov rax, PARAM(1)	; param b
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	push 2	; arg count
	mov rax, qword [free_var_6]	; free var =
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	cmp rax, sob_boolean_false
	je .L_if_else_012a
	mov rax, L_constants + 3485
	jmp .L_if_end_012a
.L_if_else_012a:
	; preparing a tail-call
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, L_constants + 2270
	push rax
	mov rax, PARAM(2)	; param n
	push rax
	push 2	; arg count
	mov rax, qword [free_var_2]	; free var -
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, PARAM(0)	; param a
	push rax
	mov rax, PARAM(1)	; param b
	push rax
	push 3	; arg count
	mov rax, qword [free_var_97]	; free var logarithm
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	mov rax, L_constants + 3485
	push rax
	push 2	; arg count
	mov rax, qword [free_var_3]	; free var /
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0227:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0227
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0227
.L_tc_recycle_frame_done_0227:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
.L_if_end_012a:
.L_if_end_012b:
.L_if_end_012c:
	leave
	ret AND_KILL_FRAME(3)
.L_lambda_simple_end_0184:	; new closure is in rax
	mov qword [free_var_97], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0185:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_0185
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0185
.L_lambda_simple_env_end_0185:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0185:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_0185
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0185
.L_lambda_simple_params_end_0185:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0185
	jmp .L_lambda_simple_end_0185
.L_lambda_simple_code_0185:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 0
	je .L_lambda_simple_arity_check_ok_0185
	push qword [rsp + 8 * 2]
	push 0
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0185:
	enter 0, 0
	; preparing a tail-call
	mov rax, L_constants + 3510
	push rax
	push 1	; arg count
	mov rax, qword [free_var_150]	; free var write-char
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	push qword[rbp+ 8 * 1]	 ;old ret address of f
	push qword[rbp]
	mov r15, rbp	 ;will hold the rbp we need to overwrite
 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
	add r14, 3 	 ;adding so we will get to the params 
	shl r14, 3 	 ;multiplie r14 by 8
	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
	mov r8, rsp 	; r8 now holds the lower of the stack
	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
	add r9, 3 	 ;for getting to the params
	shl r9, 3 	 ;multiplie by 8 
	add r8, r9 	 ;now r8 is holding the top of rsp
.L_tc_recycle_frame_loop_0228:
	cmp r8,rsp	 ;if we reached the end of the stack
	je .L_tc_recycle_frame_done_0228
	mov rbx, qword[r8]	 ;rbx holds the value of the stack
	mov qword[r15], rbx	 ;move the value to the top of the stack
	sub r15, 8	 ;move the top of the stack one down
	sub r8, 8	 ;move the top of the stack one down
	jmp .L_tc_recycle_frame_loop_0228
.L_tc_recycle_frame_done_0228:
	pop rbp	 ;rbp now holding the old rbp of f
	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
	jmp SOB_CLOSURE_CODE(rax)
	leave
	ret AND_KILL_FRAME(0)
.L_lambda_simple_end_0185:	; new closure is in rax
	mov qword [free_var_105], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	mov rdi, (1 + 8 + 8)	; sob closure
	call malloc
	push rax
	mov rdi, 8 * 0	; new rib
	call malloc
	push rax
	mov rdi, 8 * 1	; extended env
	call malloc
	mov rdi, ENV
	mov rsi, 0
	mov rdx, 1
.L_lambda_simple_env_loop_0186:	; ext_env[i + 1] <-- env[i]
	cmp rsi, 0
	je .L_lambda_simple_env_end_0186
	mov rcx, qword [rdi + 8 * rsi]
	mov qword [rax + 8 * rdx], rcx
	inc rsi
	inc rdx
	jmp .L_lambda_simple_env_loop_0186
.L_lambda_simple_env_end_0186:
	pop rbx
	mov rsi, 0
.L_lambda_simple_params_loop_0186:	; copy params
	cmp rsi, 0
	je .L_lambda_simple_params_end_0186
	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
	mov qword [rbx + 8 * rsi], rdx
	inc rsi
	jmp .L_lambda_simple_params_loop_0186
.L_lambda_simple_params_end_0186:
	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
	mov rbx, rax
	pop rax
	mov byte [rax], T_closure
	mov SOB_CLOSURE_ENV(rax), rbx
	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0186
	jmp .L_lambda_simple_end_0186
.L_lambda_simple_code_0186:	; lambda-simple body
	cmp qword [rsp + 8 * 2], 0
	je .L_lambda_simple_arity_check_ok_0186
	push qword [rsp + 8 * 2]
	push 0
	jmp L_error_incorrect_arity_simple
.L_lambda_simple_arity_check_ok_0186:
	enter 0, 0
	mov rax, L_constants + 0
	leave
	ret AND_KILL_FRAME(0)
.L_lambda_simple_end_0186:	; new closure is in rax
	mov qword [free_var_149], rax
	mov rax, sob_void

	mov rdi, rax
	call print_sexpr_if_not_void
	; preparing a non-tail-call
	; preparing a non-tail-call
	mov rax, L_constants + 3534
	push rax
	mov rax, L_constants + 3525
	push rax
	push 2	; arg count
	mov rax, qword [free_var_3]	; free var /
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	; preparing a non-tail-call
	mov rax, L_constants + 3190
	push rax
	mov rax, L_constants + 2270
	push rax
	push 2	; arg count
	mov rax, qword [free_var_0]	; free var *
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
	push rax
	push 2	; arg count
	mov rax, qword [free_var_1]	; free var +
	cmp byte [rax], T_undefined
	je L_error_fvar_undefined
	cmp byte [rax], T_closure
	jne L_error_non_closure
	push SOB_CLOSURE_ENV(rax)
	call SOB_CLOSURE_CODE(rax)
Lend:
	mov rdi, rax
	call print_sexpr_if_not_void

        mov rdi, fmt_memory_usage
        mov rsi, qword [top_of_memory]
        sub rsi, memory
        mov rax, 0
        ENTER
        call printf
        LEAVE
        mov rax, 0
        call exit

L_error_fvar_undefined:
        push rax
        mov rdi, qword [stderr]  ; destination
        mov rsi, fmt_undefined_free_var_1
        mov rax, 0
        ENTER
        call fprintf
        LEAVE
        pop rax
        mov rax, qword [rax + 1] ; string
        lea rdi, [rax + 1 + 8]   ; actual characters
        mov rsi, 1               ; sizeof(char)
        mov rdx, qword [rax + 1] ; string-length
        mov rcx, qword [stderr]  ; destination
        mov rax, 0
        ENTER
        call fwrite
        LEAVE
        mov rdi, [stderr]       ; destination
        mov rsi, fmt_undefined_free_var_2
        mov rax, 0
        ENTER
        call fprintf
        LEAVE
        mov rax, -10
        call exit

L_error_non_closure:
        mov rdi, qword [stderr]
        mov rsi, fmt_non_closure
        mov rax, 0
        ENTER
        call fprintf
        LEAVE
        mov rax, -2
        call exit

L_error_improper_list:
	mov rdi, qword [stderr]
	mov rsi, fmt_error_improper_list
	mov rax, 0
        ENTER
	call fprintf
        LEAVE
	mov rax, -7
	call exit

L_error_incorrect_arity_simple:
        mov rdi, qword [stderr]
        mov rsi, fmt_incorrect_arity_simple
        jmp L_error_incorrect_arity_common
L_error_incorrect_arity_opt:
        mov rdi, qword [stderr]
        mov rsi, fmt_incorrect_arity_opt
L_error_incorrect_arity_common:
        pop rdx
        pop rcx
        mov rax, 0
        ENTER
        call fprintf
        LEAVE
        mov rax, -6
        call exit

section .data
fmt_undefined_free_var_1:
        db `!!! The free variable \0`
fmt_undefined_free_var_2:
        db ` was used before it was defined.\n\0`
fmt_incorrect_arity_simple:
        db `!!! Expected %ld arguments, but given %ld\n\0`
fmt_incorrect_arity_opt:
        db `!!! Expected at least %ld arguments, but given %ld\n\0`
fmt_memory_usage:
        db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
fmt_non_closure:
        db `!!! Attempting to apply a non-closure!\n\0`
fmt_error_improper_list:
	db `!!! The argument is not a proper list!\n\0`

section .bss
memory:
	resb gbytes(1)

section .data
top_of_memory:
        dq memory

section .text
malloc:
        mov rax, qword [top_of_memory]
        add qword [top_of_memory], rdi
        ret

L_code_ptr_return:
	cmp qword [rsp + 8*2], 2
	jne L_error_arg_count_2
	mov rcx, qword [rsp + 8*3]
	assert_integer(rcx)
	mov rcx, qword [rcx + 1]
	cmp rcx, 0
	jl L_error_integer_range
	mov rax, qword [rsp + 8*4]
.L0:
        cmp rcx, 0
        je .L1
	mov rbp, qword [rbp]
	dec rcx
	jg .L0
.L1:
	mov rsp, rbp
	pop rbp
        pop rbx
        mov rcx, qword [rsp + 8*1]
        lea rsp, [rsp + 8*rcx + 8*2]
	jmp rbx

L_code_ptr_make_list:
	enter 0, 0
        cmp COUNT, 1
        je .L0
        cmp COUNT, 2
        je .L1
        jmp L_error_arg_count_12
.L0:
        mov r9, sob_void
        jmp .L2
.L1:
        mov r9, PARAM(1)
.L2:
        mov rcx, PARAM(0)
        assert_integer(rcx)
        mov rcx, qword [rcx + 1]
        cmp rcx, 0
        jl L_error_arg_negative
        mov r8, sob_nil
.L3:
        cmp rcx, 0
        jle .L4
        mov rdi, 1 + 8 + 8
        call malloc
        mov byte [rax], T_pair
        mov qword [rax + 1], r9
        mov qword [rax + 1 + 8], r8
        mov r8, rax
        dec rcx
        jmp .L3
.L4:
        mov rax, r8
        cmp COUNT, 2
        je .L5
        leave
        ret AND_KILL_FRAME(1)
.L5:
	leave
	ret AND_KILL_FRAME(2)

L_code_ptr_is_primitive:
	enter 0, 0
	cmp COUNT, 1
	jne L_error_arg_count_1
	mov rax, PARAM(0)
	assert_closure(rax)
	cmp SOB_CLOSURE_ENV(rax), 0
	jne .L_false
	mov rax, sob_boolean_true
	jmp .L_end
.L_false:
	mov rax, sob_boolean_false
.L_end:
	leave
	ret AND_KILL_FRAME(1)

L_code_ptr_length:
	enter 0, 0
	cmp COUNT, 1
	jne L_error_arg_count_1
	mov rbx, PARAM(0)
	mov rdi, 0
.L:
	cmp byte [rbx], T_nil
	je .L_end
	assert_pair(rbx)
	mov rbx, SOB_PAIR_CDR(rbx)
	inc rdi
	jmp .L
.L_end:
	call make_integer
	leave
	ret AND_KILL_FRAME(1)

L_code_ptr_break:
        cmp qword [rsp + 8 * 2], 0
        jne L_error_arg_count_0
        int3
        mov rax, sob_void
        ret AND_KILL_FRAME(0)        

L_code_ptr_frame:
        enter 0, 0
        cmp COUNT, 0
        jne L_error_arg_count_0

        mov rdi, fmt_frame
        mov rsi, qword [rbp]    ; old rbp
        mov rdx, qword [rsi + 8*1] ; ret addr
        mov rcx, qword [rsi + 8*2] ; lexical environment
        mov r8, qword [rsi + 8*3] ; count
        lea r9, [rsi + 8*4]       ; address of argument 0
        push 0
        push r9
        push r8                   ; we'll use it when printing the params
        mov rax, 0
        
        ENTER
        call printf
        LEAVE

.L:
        mov rcx, qword [rsp]
        cmp rcx, 0
        je .L_out
        mov rdi, fmt_frame_param_prefix
        mov rsi, qword [rsp + 8*2]
        mov rax, 0
        
        ENTER
        call printf
        LEAVE

        mov rcx, qword [rsp]
        dec rcx
        mov qword [rsp], rcx    ; dec arg count
        inc qword [rsp + 8*2]   ; increment index of current arg
        mov rdi, qword [rsp + 8*1] ; addr of addr current arg
        lea r9, [rdi + 8]          ; addr of next arg
        mov qword [rsp + 8*1], r9  ; backup addr of next arg
        mov rdi, qword [rdi]       ; addr of current arg
        call print_sexpr
        mov rdi, fmt_newline
        mov rax, 0
        ENTER
        call printf
        LEAVE
        jmp .L
.L_out:
        mov rdi, fmt_frame_continue
        mov rax, 0
        ENTER
        call printf
        call getchar
        LEAVE
        
        mov rax, sob_void
        leave
        ret AND_KILL_FRAME(0)
        
print_sexpr_if_not_void:
	cmp rdi, sob_void
	je .done
	call print_sexpr
	mov rdi, fmt_newline
	mov rax, 0
	ENTER
	call printf
	LEAVE
.done:
	ret

section .data
fmt_frame:
        db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
fmt_frame_param_prefix:
        db `==[param %d]==> \0`
fmt_frame_continue:
        db `Hit <Enter> to continue...\0`
fmt_newline:
	db `\n\0`
fmt_void:
	db `#<void>\0`
fmt_nil:
	db `()\0`
fmt_boolean_false:
	db `#f\0`
fmt_boolean_true:
	db `#t\0`
fmt_char_backslash:
	db `#\\\\\0`
fmt_char_dquote:
	db `#\\"\0`
fmt_char_simple:
	db `#\\%c\0`
fmt_char_null:
	db `#\\nul\0`
fmt_char_bell:
	db `#\\bell\0`
fmt_char_backspace:
	db `#\\backspace\0`
fmt_char_tab:
	db `#\\tab\0`
fmt_char_newline:
	db `#\\newline\0`
fmt_char_formfeed:
	db `#\\page\0`
fmt_char_return:
	db `#\\return\0`
fmt_char_escape:
	db `#\\esc\0`
fmt_char_space:
	db `#\\space\0`
fmt_char_hex:
	db `#\\x%02X\0`
fmt_gensym:
        db `G%ld\0`
fmt_closure:
	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
fmt_lparen:
	db `(\0`
fmt_dotted_pair:
	db ` . \0`
fmt_rparen:
	db `)\0`
fmt_space:
	db ` \0`
fmt_empty_vector:
	db `#()\0`
fmt_vector:
	db `#(\0`
fmt_real:
	db `%f\0`
fmt_fraction:
	db `%ld/%ld\0`
fmt_zero:
	db `0\0`
fmt_int:
	db `%ld\0`
fmt_unknown_scheme_object_error:
	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
	db `at address 0x%08X\n\n\0`
fmt_dquote:
	db `\"\0`
fmt_string_char:
        db `%c\0`
fmt_string_char_7:
        db `\\a\0`
fmt_string_char_8:
        db `\\b\0`
fmt_string_char_9:
        db `\\t\0`
fmt_string_char_10:
        db `\\n\0`
fmt_string_char_11:
        db `\\v\0`
fmt_string_char_12:
        db `\\f\0`
fmt_string_char_13:
        db `\\r\0`
fmt_string_char_34:
        db `\\"\0`
fmt_string_char_92:
        db `\\\\\0`
fmt_string_char_hex:
        db `\\x%X;\0`

section .text

print_sexpr:
	enter 0, 0
	mov al, byte [rdi]
	cmp al, T_void
	je .Lvoid
	cmp al, T_nil
	je .Lnil
	cmp al, T_boolean_false
	je .Lboolean_false
	cmp al, T_boolean_true
	je .Lboolean_true
	cmp al, T_char
	je .Lchar
	cmp al, T_interned_symbol
	je .Linterned_symbol
        cmp al, T_uninterned_symbol
        je .Luninterned_symbol
	cmp al, T_pair
	je .Lpair
	cmp al, T_vector
	je .Lvector
	cmp al, T_closure
	je .Lclosure
	cmp al, T_real
	je .Lreal
	cmp al, T_fraction
	je .Lfraction
	cmp al, T_integer
	je .Linteger
	cmp al, T_string
	je .Lstring

	jmp .Lunknown_sexpr_type

.Lvoid:
	mov rdi, fmt_void
	jmp .Lemit

.Lnil:
	mov rdi, fmt_nil
	jmp .Lemit

.Lboolean_false:
	mov rdi, fmt_boolean_false
	jmp .Lemit

.Lboolean_true:
	mov rdi, fmt_boolean_true
	jmp .Lemit

.Lchar:
	mov al, byte [rdi + 1]
	cmp al, ' '
	jle .Lchar_whitespace
	cmp al, 92 		; backslash
	je .Lchar_backslash
	cmp al, '"'
	je .Lchar_dquote
	and rax, 255
	mov rdi, fmt_char_simple
	mov rsi, rax
	jmp .Lemit

.Lchar_whitespace:
	cmp al, 0
	je .Lchar_null
	cmp al, 7
	je .Lchar_bell
	cmp al, 8
	je .Lchar_backspace
	cmp al, 9
	je .Lchar_tab
	cmp al, 10
	je .Lchar_newline
	cmp al, 12
	je .Lchar_formfeed
	cmp al, 13
	je .Lchar_return
	cmp al, 27
	je .Lchar_escape
	and rax, 255
	cmp al, ' '
	je .Lchar_space
	mov rdi, fmt_char_hex
	mov rsi, rax
	jmp .Lemit	

.Lchar_backslash:
	mov rdi, fmt_char_backslash
	jmp .Lemit

.Lchar_dquote:
	mov rdi, fmt_char_dquote
	jmp .Lemit

.Lchar_null:
	mov rdi, fmt_char_null
	jmp .Lemit

.Lchar_bell:
	mov rdi, fmt_char_bell
	jmp .Lemit

.Lchar_backspace:
	mov rdi, fmt_char_backspace
	jmp .Lemit

.Lchar_tab:
	mov rdi, fmt_char_tab
	jmp .Lemit

.Lchar_newline:
	mov rdi, fmt_char_newline
	jmp .Lemit

.Lchar_formfeed:
	mov rdi, fmt_char_formfeed
	jmp .Lemit

.Lchar_return:
	mov rdi, fmt_char_return
	jmp .Lemit

.Lchar_escape:
	mov rdi, fmt_char_escape
	jmp .Lemit

.Lchar_space:
	mov rdi, fmt_char_space
	jmp .Lemit

.Lclosure:
	mov rsi, qword rdi
	mov rdi, fmt_closure
	mov rdx, SOB_CLOSURE_ENV(rsi)
	mov rcx, SOB_CLOSURE_CODE(rsi)
	jmp .Lemit

.Linterned_symbol:
	mov rdi, qword [rdi + 1] ; sob_string
	mov rsi, 1		 ; size = 1 byte
	mov rdx, qword [rdi + 1] ; length
	lea rdi, [rdi + 1 + 8]	 ; actual characters
	mov rcx, qword [stdout]	 ; FILE *
	ENTER
	call fwrite
	LEAVE
	jmp .Lend

.Luninterned_symbol:
        mov rsi, qword [rdi + 1] ; gensym counter
        mov rdi, fmt_gensym
        jmp .Lemit
	
.Lpair:
	push rdi
	mov rdi, fmt_lparen
	mov rax, 0
        ENTER
	call printf
        LEAVE
	mov rdi, qword [rsp] 	; pair
	mov rdi, SOB_PAIR_CAR(rdi)
	call print_sexpr
	pop rdi 		; pair
	mov rdi, SOB_PAIR_CDR(rdi)
.Lcdr:
	mov al, byte [rdi]
	cmp al, T_nil
	je .Lcdr_nil
	cmp al, T_pair
	je .Lcdr_pair
	push rdi
	mov rdi, fmt_dotted_pair
	mov rax, 0
        ENTER
	call printf
        LEAVE
	pop rdi
	call print_sexpr
	mov rdi, fmt_rparen
	mov rax, 0
        ENTER
	call printf
        LEAVE
	leave
	ret

.Lcdr_nil:
	mov rdi, fmt_rparen
	mov rax, 0
        ENTER
	call printf
        LEAVE
	leave
	ret

.Lcdr_pair:
	push rdi
	mov rdi, fmt_space
	mov rax, 0
        ENTER
	call printf
        LEAVE
	mov rdi, qword [rsp]
	mov rdi, SOB_PAIR_CAR(rdi)
	call print_sexpr
	pop rdi
	mov rdi, SOB_PAIR_CDR(rdi)
	jmp .Lcdr

.Lvector:
	mov rax, qword [rdi + 1] ; length
	cmp rax, 0
	je .Lvector_empty
	push rdi
	mov rdi, fmt_vector
	mov rax, 0
        ENTER
	call printf
        LEAVE
	mov rdi, qword [rsp]
	push qword [rdi + 1]
	push 1
	mov rdi, qword [rdi + 1 + 8] ; v[0]
	call print_sexpr
.Lvector_loop:
	; [rsp] index
	; [rsp + 8*1] limit
	; [rsp + 8*2] vector
	mov rax, qword [rsp]
	cmp rax, qword [rsp + 8*1]
	je .Lvector_end
	mov rdi, fmt_space
	mov rax, 0
        ENTER
	call printf
        LEAVE
	mov rax, qword [rsp]
	mov rbx, qword [rsp + 8*2]
	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
	call print_sexpr
	inc qword [rsp]
	jmp .Lvector_loop

.Lvector_end:
	add rsp, 8*3
	mov rdi, fmt_rparen
	jmp .Lemit	

.Lvector_empty:
	mov rdi, fmt_empty_vector
	jmp .Lemit

.Lreal:
	push qword [rdi + 1]
	movsd xmm0, qword [rsp]
	add rsp, 8*1
	mov rdi, fmt_real
	mov rax, 1
	ENTER
	call printf
	LEAVE
	jmp .Lend

.Lfraction:
	mov rsi, qword [rdi + 1]
	mov rdx, qword [rdi + 1 + 8]
	cmp rsi, 0
	je .Lrat_zero
	cmp rdx, 1
	je .Lrat_int
	mov rdi, fmt_fraction
	jmp .Lemit

.Lrat_zero:
	mov rdi, fmt_zero
	jmp .Lemit

.Lrat_int:
	mov rdi, fmt_int
	jmp .Lemit

.Linteger:
	mov rsi, qword [rdi + 1]
	mov rdi, fmt_int
	jmp .Lemit

.Lstring:
	lea rax, [rdi + 1 + 8]
	push rax
	push qword [rdi + 1]
	mov rdi, fmt_dquote
	mov rax, 0
	ENTER
	call printf
	LEAVE
.Lstring_loop:
	; qword [rsp]: limit
	; qword [rsp + 8*1]: char *
	cmp qword [rsp], 0
	je .Lstring_end
	mov rax, qword [rsp + 8*1]
	mov al, byte [rax]
	and rax, 255
	cmp al, 7
        je .Lstring_char_7
        cmp al, 8
        je .Lstring_char_8
        cmp al, 9
        je .Lstring_char_9
        cmp al, 10
        je .Lstring_char_10
        cmp al, 11
        je .Lstring_char_11
        cmp al, 12
        je .Lstring_char_12
        cmp al, 13
        je .Lstring_char_13
        cmp al, 34
        je .Lstring_char_34
        cmp al, 92              ; \
        je .Lstring_char_92
        cmp al, ' '
        jl .Lstring_char_hex
        mov rdi, fmt_string_char
        mov rsi, rax
.Lstring_char_emit:
        mov rax, 0
        ENTER
        call printf
        LEAVE
        dec qword [rsp]
        inc qword [rsp + 8*1]
        jmp .Lstring_loop

.Lstring_char_7:
        mov rdi, fmt_string_char_7
        jmp .Lstring_char_emit

.Lstring_char_8:
        mov rdi, fmt_string_char_8
        jmp .Lstring_char_emit
        
.Lstring_char_9:
        mov rdi, fmt_string_char_9
        jmp .Lstring_char_emit

.Lstring_char_10:
        mov rdi, fmt_string_char_10
        jmp .Lstring_char_emit

.Lstring_char_11:
        mov rdi, fmt_string_char_11
        jmp .Lstring_char_emit

.Lstring_char_12:
        mov rdi, fmt_string_char_12
        jmp .Lstring_char_emit

.Lstring_char_13:
        mov rdi, fmt_string_char_13
        jmp .Lstring_char_emit

.Lstring_char_34:
        mov rdi, fmt_string_char_34
        jmp .Lstring_char_emit

.Lstring_char_92:
        mov rdi, fmt_string_char_92
        jmp .Lstring_char_emit

.Lstring_char_hex:
        mov rdi, fmt_string_char_hex
        mov rsi, rax
        jmp .Lstring_char_emit        

.Lstring_end:
	add rsp, 8 * 2
	mov rdi, fmt_dquote
	jmp .Lemit

.Lunknown_sexpr_type:
	mov rsi, fmt_unknown_scheme_object_error
	and rax, 255
	mov rdx, rax
	mov rcx, rdi
	mov rdi, qword [stderr]
	mov rax, 0
        ENTER
	call fprintf
        LEAVE
        leave
        ret

.Lemit:
	mov rax, 0
        ENTER
	call printf
        LEAVE
	jmp .Lend

.Lend:
	LEAVE
	ret

;;; rdi: address of free variable
;;; rsi: address of code-pointer
bind_primitive:
        enter 0, 0
        push rdi
        mov rdi, (1 + 8 + 8)
        call malloc
        pop rdi
        mov byte [rax], T_closure
        mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
        mov qword [rdi], rax
        mov rax, sob_void
        leave
        ret

L_code_ptr_ash:
        enter 0, 0
        cmp COUNT, 2
        jne L_error_arg_count_2
        mov rdi, PARAM(0)
        assert_integer(rdi)
        mov rcx, PARAM(1)
        assert_integer(rcx)
        mov rdi, qword [rdi + 1]
        mov rcx, qword [rcx + 1]
        cmp rcx, 0
        jl .L_negative
.L_loop_positive:
        cmp rcx, 0
        je .L_exit
        sal rdi, cl
        shr rcx, 8
        jmp .L_loop_positive
.L_negative:
        neg rcx
.L_loop_negative:
        cmp rcx, 0
        je .L_exit
        sar rdi, cl
        shr rcx, 8
        jmp .L_loop_negative
.L_exit:
        call make_integer
        leave
        ret AND_KILL_FRAME(2)

L_code_ptr_logand:
        enter 0, 0
        cmp COUNT, 2
        jne L_error_arg_count_2
        mov r8, PARAM(0)
        assert_integer(r8)
        mov r9, PARAM(1)
        assert_integer(r9)
        mov rdi, qword [r8 + 1]
        and rdi, qword [r9 + 1]
        call make_integer
        leave
        ret AND_KILL_FRAME(2)

L_code_ptr_logor:
        enter 0, 0
        cmp COUNT, 2
        jne L_error_arg_count_2
        mov r8, PARAM(0)
        assert_integer(r8)
        mov r9, PARAM(1)
        assert_integer(r9)
        mov rdi, qword [r8 + 1]
        or rdi, qword [r9 + 1]
        call make_integer
        leave
        ret AND_KILL_FRAME(2)

L_code_ptr_logxor:
        enter 0, 0
        cmp COUNT, 2
        jne L_error_arg_count_2
        mov r8, PARAM(0)
        assert_integer(r8)
        mov r9, PARAM(1)
        assert_integer(r9)
        mov rdi, qword [r8 + 1]
        xor rdi, qword [r9 + 1]
        call make_integer
        LEAVE
        ret AND_KILL_FRAME(2)

L_code_ptr_lognot:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov r8, PARAM(0)
        assert_integer(r8)
        mov rdi, qword [r8 + 1]
        not rdi
        call make_integer
        leave
        ret AND_KILL_FRAME(1)

L_code_ptr_bin_apply:
        enter 0, 0
        ;assuming we have 2 params - f and list to apply f on it
        mov rax, PARAM(0) ;save f
        mov rbx, PARAM(1) ;save s
        mov r10, qword [rbp] ;save old rbp
        mov r11, qword [rbp + 8 * 1] ;saving ret
        mov r12, SOB_CLOSURE_ENV(rax) ;saving env
        mov r8, 0 ;counter for list

.list_length_loop:
        cmp byte [rbx], T_nil ;while s!=null
        je .list_length_loop_end
        inc r8
        mov rbx, SOB_PAIR_CDR(rbx)
        jmp .list_length_loop

.list_length_loop_end:
        mov rbx, PARAM(1) ;restore s
        mov r15, r8 ;save list length
        sub r8, 2 ;the stack needs to keep the list, it's already have 2 params
        shl r8, 3 ;8 bytes for each param
        sub rbp, r8 ;allocating space for the list        
        mov r8, 0 ;counter for list


.copy_params_loop:
        cmp r8, r15
        je .copy_env_ret_rbp
        mov rcx, SOB_PAIR_CAR(rbx)
        mov qword[rbp + 8 * (4 + r8)], rcx
        mov rbx, SOB_PAIR_CDR(rbx)
        inc r8
        jmp .copy_params_loop

.copy_env_ret_rbp:
        mov qword[rbp], r10 ;in the end rbp points to the older rbp
        mov qword[rbp + 8 * 1], r11 ;restore ret
        mov qword[rbp + 8 * 2], r12 ;restore env
        mov qword[rbp + 8 * 3], r15 ;save list length
        mov rsp, r11 ;rsp points to the ret adress
        leave
        jmp SOB_CLOSURE_CODE(rax)

L_code_ptr_is_null:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov rax, PARAM(0)
        cmp byte [rax], T_nil
        jne .L_false
        mov rax, sob_boolean_true
        jmp .L_end
.L_false:
        mov rax, sob_boolean_false
.L_end:
        leave
        ret AND_KILL_FRAME(1)

L_code_ptr_is_pair:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov rax, PARAM(0)
        cmp byte [rax], T_pair
        jne .L_false
        mov rax, sob_boolean_true
        jmp .L_end
.L_false:
        mov rax, sob_boolean_false
.L_end:
        leave
        ret AND_KILL_FRAME(1)
        
L_code_ptr_is_void:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov rax, PARAM(0)
        cmp byte [rax], T_void
        jne .L_false
        mov rax, sob_boolean_true
        jmp .L_end
.L_false:
        mov rax, sob_boolean_false
.L_end:
        leave
        ret AND_KILL_FRAME(1)

L_code_ptr_is_char:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov rax, PARAM(0)
        cmp byte [rax], T_char
        jne .L_false
        mov rax, sob_boolean_true
        jmp .L_end
.L_false:
        mov rax, sob_boolean_false
.L_end:
        leave
        ret AND_KILL_FRAME(1)

L_code_ptr_is_string:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov rax, PARAM(0)
        cmp byte [rax], T_string
        jne .L_false
        mov rax, sob_boolean_true
        jmp .L_end
.L_false:
        mov rax, sob_boolean_false
.L_end:
        leave
        ret AND_KILL_FRAME(1)

L_code_ptr_is_symbol:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov r8, PARAM(0)
        and byte [r8], T_symbol
        jz .L_false
        mov rax, sob_boolean_true
        jmp .L_exit
.L_false:
        mov rax, sob_boolean_false
.L_exit:
        leave
        ret AND_KILL_FRAME(1)

L_code_ptr_is_uninterned_symbol:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov r8, PARAM(0)
        cmp byte [r8], T_uninterned_symbol
        jne .L_false
        mov rax, sob_boolean_true
        jmp .L_exit
.L_false:
        mov rax, sob_boolean_false
.L_exit:
        leave
        ret AND_KILL_FRAME(1)

L_code_ptr_is_interned_symbol:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov rax, PARAM(0)
        cmp byte [rax], T_interned_symbol
        jne .L_false
        mov rax, sob_boolean_true
        jmp .L_end
.L_false:
        mov rax, sob_boolean_false
.L_end:
        leave
        ret AND_KILL_FRAME(1)

L_code_ptr_gensym:
        enter 0, 0
        cmp COUNT, 0
        jne L_error_arg_count_0
        inc qword [gensym_count]
        mov rdi, (1 + 8)
        call malloc
        mov byte [rax], T_uninterned_symbol
        mov rcx, qword [gensym_count]
        mov qword [rax + 1], rcx
        leave
        ret AND_KILL_FRAME(0)

L_code_ptr_is_vector:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov rax, PARAM(0)
        cmp byte [rax], T_vector
        jne .L_false
        mov rax, sob_boolean_true
        jmp .L_end
.L_false:
        mov rax, sob_boolean_false
.L_end:
        leave
        ret AND_KILL_FRAME(1)

L_code_ptr_is_closure:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov rax, PARAM(0)
        cmp byte [rax], T_closure
        jne .L_false
        mov rax, sob_boolean_true
        jmp .L_end
.L_false:
        mov rax, sob_boolean_false
.L_end:
        leave
        ret AND_KILL_FRAME(1)

L_code_ptr_is_real:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov rax, PARAM(0)
        cmp byte [rax], T_real
        jne .L_false
        mov rax, sob_boolean_true
        jmp .L_end
.L_false:
        mov rax, sob_boolean_false
.L_end:
        leave
        ret AND_KILL_FRAME(1)

L_code_ptr_is_fraction:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov rax, PARAM(0)
        cmp byte [rax], T_fraction
        jne .L_false
        mov rax, sob_boolean_true
        jmp .L_end
.L_false:
        mov rax, sob_boolean_false
.L_end:
        leave
        ret AND_KILL_FRAME(1)

L_code_ptr_is_boolean:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov rax, PARAM(0)
        mov bl, byte [rax]
        and bl, T_boolean
        je .L_false
        mov rax, sob_boolean_true
        jmp .L_end
.L_false:
        mov rax, sob_boolean_false
.L_end:
        leave
        ret AND_KILL_FRAME(1)
        
L_code_ptr_is_boolean_false:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov rax, PARAM(0)
        mov bl, byte [rax]
        cmp bl, T_boolean_false
        jne .L_false
        mov rax, sob_boolean_true
        jmp .L_end
.L_false:
        mov rax, sob_boolean_false
.L_end:
        leave
        ret AND_KILL_FRAME(1)

L_code_ptr_is_boolean_true:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov rax, PARAM(0)
        mov bl, byte [rax]
        cmp bl, T_boolean_true
        jne .L_false
        mov rax, sob_boolean_true
        jmp .L_end
.L_false:
        mov rax, sob_boolean_false
.L_end:
        leave
        ret AND_KILL_FRAME(1)

L_code_ptr_is_number:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov rax, PARAM(0)
        mov bl, byte [rax]
        and bl, T_number
        jz .L_false
        mov rax, sob_boolean_true
        jmp .L_end
.L_false:
        mov rax, sob_boolean_false
.L_end:
        leave
        ret AND_KILL_FRAME(1)
        
L_code_ptr_is_collection:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov rax, PARAM(0)
        mov bl, byte [rax]
        and bl, T_collection
        je .L_false
        mov rax, sob_boolean_true
        jmp .L_end
.L_false:
        mov rax, sob_boolean_false
.L_end:
        leave
        ret AND_KILL_FRAME(1)

L_code_ptr_cons:
        enter 0, 0
        cmp COUNT, 2
        jne L_error_arg_count_2
        mov rdi, (1 + 8 + 8)
        call malloc
        mov byte [rax], T_pair
        mov rbx, PARAM(0)
        mov SOB_PAIR_CAR(rax), rbx
        mov rbx, PARAM(1)
        mov SOB_PAIR_CDR(rax), rbx
        leave
        ret AND_KILL_FRAME(2)

L_code_ptr_display_sexpr:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov rdi, PARAM(0)
        call print_sexpr
        mov rax, sob_void
        leave
        ret AND_KILL_FRAME(1)

L_code_ptr_write_char:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov rax, PARAM(0)
        assert_char(rax)
        mov al, SOB_CHAR_VALUE(rax)
        and rax, 255
        mov rdi, fmt_char
        mov rsi, rax
        mov rax, 0
        ENTER
        call printf
        LEAVE
        mov rax, sob_void
        leave
        ret AND_KILL_FRAME(1)

L_code_ptr_car:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov rax, PARAM(0)
        assert_pair(rax)
        mov rax, SOB_PAIR_CAR(rax)
        leave
        ret AND_KILL_FRAME(1)
        
L_code_ptr_cdr:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov rax, PARAM(0)
        assert_pair(rax)
        mov rax, SOB_PAIR_CDR(rax)
        leave
        ret AND_KILL_FRAME(1)
        
L_code_ptr_string_length:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov rax, PARAM(0)
        assert_string(rax)
        mov rdi, SOB_STRING_LENGTH(rax)
        call make_integer
        leave
        ret AND_KILL_FRAME(1)

L_code_ptr_vector_length:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov rax, PARAM(0)
        assert_vector(rax)
        mov rdi, SOB_VECTOR_LENGTH(rax)
        call make_integer
        leave
        ret AND_KILL_FRAME(1)

L_code_ptr_real_to_integer:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov rbx, PARAM(0)
        assert_real(rbx)
        movsd xmm0, qword [rbx + 1]
        cvttsd2si rdi, xmm0
        call make_integer
        leave
        ret AND_KILL_FRAME(1)

L_code_ptr_exit:
        enter 0, 0
        cmp COUNT, 0
        jne L_error_arg_count_0
        mov rax, 0
        call exit

L_code_ptr_integer_to_real:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov rax, PARAM(0)
        assert_integer(rax)
        push qword [rax + 1]
        cvtsi2sd xmm0, qword [rsp]
        call make_real
        leave
        ret AND_KILL_FRAME(1)

L_code_ptr_fraction_to_real:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov rax, PARAM(0)
        assert_fraction(rax)
        push qword [rax + 1]
        cvtsi2sd xmm0, qword [rsp]
        push qword [rax + 1 + 8]
        cvtsi2sd xmm1, qword [rsp]
        divsd xmm0, xmm1
        call make_real
        leave
        ret AND_KILL_FRAME(1)

L_code_ptr_char_to_integer:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov rax, PARAM(0)
        assert_char(rax)
        mov al, byte [rax + 1]
        and rax, 255
        mov rdi, rax
        call make_integer
        leave
        ret AND_KILL_FRAME(1)

L_code_ptr_integer_to_fraction:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov r8, PARAM(0)
        assert_integer(r8)
        mov rdi, (1 + 8 + 8)
        call malloc
        mov rbx, qword [r8 + 1]
        mov byte [rax], T_fraction
        mov qword [rax + 1], rbx
        mov qword [rax + 1 + 8], 1
        leave
        ret AND_KILL_FRAME(1)

L_code_ptr_integer_to_char:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov rax, PARAM(0)
        assert_integer(rax)
        mov rbx, qword [rax + 1]
        cmp rbx, 0
        jle L_error_integer_range
        cmp rbx, 256
        jge L_error_integer_range
        mov rdi, (1 + 1)
        call malloc
        mov byte [rax], T_char
        mov byte [rax + 1], bl
        leave
        ret AND_KILL_FRAME(1)

L_code_ptr_trng:
        enter 0, 0
        cmp COUNT, 0
        jne L_error_arg_count_0
        rdrand rdi
        shr rdi, 1
        call make_integer
        leave
        ret AND_KILL_FRAME(0)

L_code_ptr_is_zero:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov rax, PARAM(0)
        cmp byte [rax], T_integer
        je .L_integer
        cmp byte [rax], T_fraction
        je .L_fraction
        cmp byte [rax], T_real
        je .L_real
        jmp L_error_incorrect_type
.L_integer:
        cmp qword [rax + 1], 0
        je .L_zero
        jmp .L_not_zero
.L_fraction:
        cmp qword [rax + 1], 0
        je .L_zero
        jmp .L_not_zero
.L_real:
        pxor xmm0, xmm0
        push qword [rax + 1]
        movsd xmm1, qword [rsp]
        ucomisd xmm0, xmm1
        je .L_zero
.L_not_zero:
        mov rax, sob_boolean_false
        jmp .L_end
.L_zero:
        mov rax, sob_boolean_true
.L_end:
        leave
        ret AND_KILL_FRAME(1)

L_code_ptr_is_integer:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov rax, PARAM(0)
        cmp byte [rax], T_integer
        jne .L_false
        mov rax, sob_boolean_true
        jmp .L_exit
.L_false:
        mov rax, sob_boolean_false
.L_exit:
        leave
        ret AND_KILL_FRAME(1)

L_code_ptr_raw_bin_add_rr:
        enter 0, 0
        cmp COUNT, 2
        jne L_error_arg_count_2
        mov rbx, PARAM(0)
        assert_real(rbx)
        mov rcx, PARAM(1)
        assert_real(rcx)
        movsd xmm0, qword [rbx + 1]
        movsd xmm1, qword [rcx + 1]
        addsd xmm0, xmm1
        call make_real
        leave
        ret AND_KILL_FRAME(2)

L_code_ptr_raw_bin_sub_rr:
        enter 0, 0
        cmp COUNT, 2
        jne L_error_arg_count_2
        mov rbx, PARAM(0)
        assert_real(rbx)
        mov rcx, PARAM(1)
        assert_real(rcx)
        movsd xmm0, qword [rbx + 1]
        movsd xmm1, qword [rcx + 1]
        subsd xmm0, xmm1
        call make_real
        leave
        ret AND_KILL_FRAME(2)

L_code_ptr_raw_bin_mul_rr:
        enter 0, 0
        cmp COUNT, 2
        jne L_error_arg_count_2
        mov rbx, PARAM(0)
        assert_real(rbx)
        mov rcx, PARAM(1)
        assert_real(rcx)
        movsd xmm0, qword [rbx + 1]
        movsd xmm1, qword [rcx + 1]
        mulsd xmm0, xmm1
        call make_real
        leave
        ret AND_KILL_FRAME(2)

L_code_ptr_raw_bin_div_rr:
        enter 0, 0
        cmp COUNT, 2
        jne L_error_arg_count_2
        mov rbx, PARAM(0)
        assert_real(rbx)
        mov rcx, PARAM(1)
        assert_real(rcx)
        movsd xmm0, qword [rbx + 1]
        movsd xmm1, qword [rcx + 1]
        pxor xmm2, xmm2
        ucomisd xmm1, xmm2
        je L_error_division_by_zero
        divsd xmm0, xmm1
        call make_real
        leave
        ret AND_KILL_FRAME(2)

L_code_ptr_raw_bin_add_zz:
	enter 0, 0
	cmp COUNT, 2
	jne L_error_arg_count_2
	mov r8, PARAM(0)
	assert_integer(r8)
	mov r9, PARAM(1)
	assert_integer(r9)
	mov rdi, qword [r8 + 1]
	add rdi, qword [r9 + 1]
	call make_integer
	leave
	ret AND_KILL_FRAME(2)

L_code_ptr_raw_bin_add_qq:
        enter 0, 0
        cmp COUNT, 2
        jne L_error_arg_count_2
        mov r8, PARAM(0)
        assert_fraction(r8)
        mov r9, PARAM(1)
        assert_fraction(r9)
        mov rax, qword [r8 + 1] ; num1
        mov rbx, qword [r9 + 1 + 8] ; den 2
        cqo
        imul rbx
        mov rsi, rax
        mov rax, qword [r8 + 1 + 8] ; den1
        mov rbx, qword [r9 + 1]     ; num2
        cqo
        imul rbx
        add rsi, rax
        mov rax, qword [r8 + 1 + 8] ; den1
        mov rbx, qword [r9 + 1 + 8] ; den2
        cqo
        imul rbx
        mov rdi, rax
        call normalize_fraction
        leave
        ret AND_KILL_FRAME(2)

L_code_ptr_raw_bin_sub_zz:
	enter 0, 0
	cmp COUNT, 2
	jne L_error_arg_count_2
	mov r8, PARAM(0)
	assert_integer(r8)
	mov r9, PARAM(1)
	assert_integer(r9)
	mov rdi, qword [r8 + 1]
	sub rdi, qword [r9 + 1]
	call make_integer
	leave
	ret AND_KILL_FRAME(2)

L_code_ptr_raw_bin_sub_qq:
        enter 0, 0
        cmp COUNT, 2
        jne L_error_arg_count_2
        mov r8, PARAM(0)
        assert_fraction(r8)
        mov r9, PARAM(1)
        assert_fraction(r9)
        mov rax, qword [r8 + 1] ; num1
        mov rbx, qword [r9 + 1 + 8] ; den 2
        cqo
        imul rbx
        mov rsi, rax
        mov rax, qword [r8 + 1 + 8] ; den1
        mov rbx, qword [r9 + 1]     ; num2
        cqo
        imul rbx
        sub rsi, rax
        mov rax, qword [r8 + 1 + 8] ; den1
        mov rbx, qword [r9 + 1 + 8] ; den2
        cqo
        imul rbx
        mov rdi, rax
        call normalize_fraction
        leave
        ret AND_KILL_FRAME(2)

L_code_ptr_raw_bin_mul_zz:
	enter 0, 0
	cmp COUNT, 2
	jne L_error_arg_count_2
	mov r8, PARAM(0)
	assert_integer(r8)
	mov r9, PARAM(1)
	assert_integer(r9)
	cqo
	mov rax, qword [r8 + 1]
	mul qword [r9 + 1]
	mov rdi, rax
	call make_integer
	leave
	ret AND_KILL_FRAME(2)

L_code_ptr_raw_bin_mul_qq:
        enter 0, 0
        cmp COUNT, 2
        jne L_error_arg_count_2
        mov r8, PARAM(0)
        assert_fraction(r8)
        mov r9, PARAM(1)
        assert_fraction(r9)
        mov rax, qword [r8 + 1] ; num1
        mov rbx, qword [r9 + 1] ; num2
        cqo
        imul rbx
        mov rsi, rax
        mov rax, qword [r8 + 1 + 8] ; den1
        mov rbx, qword [r9 + 1 + 8] ; den2
        cqo
        imul rbx
        mov rdi, rax
        call normalize_fraction
        leave
        ret AND_KILL_FRAME(2)
        
L_code_ptr_raw_bin_div_zz:
	enter 0, 0
	cmp COUNT, 2
	jne L_error_arg_count_2
	mov r8, PARAM(0)
	assert_integer(r8)
	mov r9, PARAM(1)
	assert_integer(r9)
	mov rdi, qword [r9 + 1]
	cmp rdi, 0
	je L_error_division_by_zero
	mov rsi, qword [r8 + 1]
	call normalize_fraction
	leave
	ret AND_KILL_FRAME(2)

L_code_ptr_raw_bin_div_qq:
        enter 0, 0
        cmp COUNT, 2
        jne L_error_arg_count_2
        mov r8, PARAM(0)
        assert_fraction(r8)
        mov r9, PARAM(1)
        assert_fraction(r9)
        cmp qword [r9 + 1], 0
        je L_error_division_by_zero
        mov rax, qword [r8 + 1] ; num1
        mov rbx, qword [r9 + 1 + 8] ; den 2
        cqo
        imul rbx
        mov rsi, rax
        mov rax, qword [r8 + 1 + 8] ; den1
        mov rbx, qword [r9 + 1] ; num2
        cqo
        imul rbx
        mov rdi, rax
        call normalize_fraction
        leave
        ret AND_KILL_FRAME(2)
        
normalize_fraction:
        push rsi
        push rdi
        call gcd
        mov rbx, rax
        pop rax
        cqo
        idiv rbx
        mov r8, rax
        pop rax
        cqo
        idiv rbx
        mov r9, rax
        cmp r9, 0
        je .L_zero
        cmp r8, 1
        je .L_int
        mov rdi, (1 + 8 + 8)
        call malloc
        mov byte [rax], T_fraction
        mov qword [rax + 1], r9
        mov qword [rax + 1 + 8], r8
        ret
.L_zero:
        mov rdi, 0
        call make_integer
        ret
.L_int:
        mov rdi, r9
        call make_integer
        ret

iabs:
        mov rax, rdi
        cmp rax, 0
        jl .Lneg
        ret
.Lneg:
        neg rax
        ret

gcd:
        call iabs
        mov rbx, rax
        mov rdi, rsi
        call iabs
        cmp rax, 0
        jne .L0
        xchg rax, rbx
.L0:
        cmp rbx, 0
        je .L1
        cqo
        div rbx
        mov rax, rdx
        xchg rax, rbx
        jmp .L0
.L1:
        ret

L_code_ptr_error:
        enter 0, 0
        cmp COUNT, 2
        jne L_error_arg_count_2
        mov rsi, PARAM(0)
        assert_interned_symbol(rsi)
        mov rsi, PARAM(1)
        assert_string(rsi)
        mov rdi, fmt_scheme_error_part_1
        mov rax, 0
        ENTER
        call printf
        LEAVE
        mov rdi, PARAM(0)
        call print_sexpr
        mov rdi, fmt_scheme_error_part_2
        mov rax, 0
        ENTER
        call printf
        LEAVE
        mov rax, PARAM(1)       ; sob_string
        mov rsi, 1              ; size = 1 byte
        mov rdx, qword [rax + 1] ; length
        lea rdi, [rax + 1 + 8]   ; actual characters
        mov rcx, qword [stdout]  ; FILE*
	ENTER
        call fwrite
	LEAVE
        mov rdi, fmt_scheme_error_part_3
        mov rax, 0
        ENTER
        call printf
        LEAVE
        mov rax, -9
        call exit

L_code_ptr_raw_less_than_rr:
        enter 0, 0
        cmp COUNT, 2
        jne L_error_arg_count_2
        mov rsi, PARAM(0)
        assert_real(rsi)
        mov rdi, PARAM(1)
        assert_real(rdi)
        movsd xmm0, qword [rsi + 1]
        movsd xmm1, qword [rdi + 1]
        comisd xmm0, xmm1
        jae .L_false
        mov rax, sob_boolean_true
        jmp .L_exit
.L_false:
        mov rax, sob_boolean_false
.L_exit:
        leave
        ret AND_KILL_FRAME(2)
        
L_code_ptr_raw_less_than_zz:
	enter 0, 0
	cmp COUNT, 2
	jne L_error_arg_count_2
	mov r8, PARAM(0)
	assert_integer(r8)
	mov r9, PARAM(1)
	assert_integer(r9)
	mov rdi, qword [r8 + 1]
	cmp rdi, qword [r9 + 1]
	jge .L_false
	mov rax, sob_boolean_true
	jmp .L_exit
.L_false:
	mov rax, sob_boolean_false
.L_exit:
	leave
	ret AND_KILL_FRAME(2)

L_code_ptr_raw_less_than_qq:
        enter 0, 0
        cmp COUNT, 2
        jne L_error_arg_count_2
        mov rsi, PARAM(0)
        assert_fraction(rsi)
        mov rdi, PARAM(1)
        assert_fraction(rdi)
        mov rax, qword [rsi + 1] ; num1
        cqo
        imul qword [rdi + 1 + 8] ; den2
        mov rcx, rax
        mov rax, qword [rsi + 1 + 8] ; den1
        cqo
        imul qword [rdi + 1]          ; num2
        sub rcx, rax
        jge .L_false
        mov rax, sob_boolean_true
        jmp .L_exit
.L_false:
        mov rax, sob_boolean_false
.L_exit:
        leave
        ret AND_KILL_FRAME(2)

L_code_ptr_raw_equal_rr:
        enter 0, 0
        cmp COUNT, 2
        jne L_error_arg_count_2
        mov rsi, PARAM(0)
        assert_real(rsi)
        mov rdi, PARAM(1)
        assert_real(rdi)
        movsd xmm0, qword [rsi + 1]
        movsd xmm1, qword [rdi + 1]
        comisd xmm0, xmm1
        jne .L_false
        mov rax, sob_boolean_true
        jmp .L_exit
.L_false:
        mov rax, sob_boolean_false
.L_exit:
        leave
        ret AND_KILL_FRAME(2)
        
L_code_ptr_raw_equal_zz:
	enter 0, 0
	cmp COUNT, 2
	jne L_error_arg_count_2
	mov r8, PARAM(0)
	assert_integer(r8)
	mov r9, PARAM(1)
	assert_integer(r9)
	mov rdi, qword [r8 + 1]
	cmp rdi, qword [r9 + 1]
	jne .L_false
	mov rax, sob_boolean_true
	jmp .L_exit
.L_false:
	mov rax, sob_boolean_false
.L_exit:
	leave
	ret AND_KILL_FRAME(2)

L_code_ptr_raw_equal_qq:
        enter 0, 0
        cmp COUNT, 2
        jne L_error_arg_count_2
        mov rsi, PARAM(0)
        assert_fraction(rsi)
        mov rdi, PARAM(1)
        assert_fraction(rdi)
        mov rax, qword [rsi + 1] ; num1
        cqo
        imul qword [rdi + 1 + 8] ; den2
        mov rcx, rax
        mov rax, qword [rdi + 1 + 8] ; den1
        cqo
        imul qword [rdi + 1]          ; num2
        sub rcx, rax
        jne .L_false
        mov rax, sob_boolean_true
        jmp .L_exit
.L_false:
        mov rax, sob_boolean_false
.L_exit:
        leave
        ret AND_KILL_FRAME(2)

L_code_ptr_quotient:
        enter 0, 0
        cmp COUNT, 2
        jne L_error_arg_count_2
        mov rsi, PARAM(0)
        assert_integer(rsi)
        mov rdi, PARAM(1)
        assert_integer(rdi)
        mov rax, qword [rsi + 1]
        mov rbx, qword [rdi + 1]
        cmp rbx, 0
        je L_error_division_by_zero
        cqo
        idiv rbx
        mov rdi, rax
        call make_integer
        leave
        ret AND_KILL_FRAME(2)
        
L_code_ptr_remainder:
        enter 0, 0
        cmp COUNT, 2
        jne L_error_arg_count_2
        mov rsi, PARAM(0)
        assert_integer(rsi)
        mov rdi, PARAM(1)
        assert_integer(rdi)
        mov rax, qword [rsi + 1]
        mov rbx, qword [rdi + 1]
        cmp rbx, 0
        je L_error_division_by_zero
        cqo
        idiv rbx
        mov rdi, rdx
        call make_integer
        leave
        ret AND_KILL_FRAME(2)

L_code_ptr_set_car:
        enter 0, 0
        cmp COUNT, 2
        jne L_error_arg_count_2
        mov rax, PARAM(0)
        assert_pair(rax)
        mov rbx, PARAM(1)
        mov SOB_PAIR_CAR(rax), rbx
        mov rax, sob_void
        leave
        ret AND_KILL_FRAME(2)

L_code_ptr_set_cdr:
        enter 0, 0
        cmp COUNT, 2
        jne L_error_arg_count_2
        mov rax, PARAM(0)
        assert_pair(rax)
        mov rbx, PARAM(1)
        mov SOB_PAIR_CDR(rax), rbx
        mov rax, sob_void
        leave
        ret AND_KILL_FRAME(2)

L_code_ptr_string_ref:
        enter 0, 0
        cmp COUNT, 2
        jne L_error_arg_count_2
        mov rdi, PARAM(0)
        assert_string(rdi)
        mov rsi, PARAM(1)
        assert_integer(rsi)
        mov rdx, qword [rdi + 1]
        mov rcx, qword [rsi + 1]
        cmp rcx, rdx
        jge L_error_integer_range
        cmp rcx, 0
        jl L_error_integer_range
        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
        mov rdi, 2
        call malloc
        mov byte [rax], T_char
        mov byte [rax + 1], bl
        leave
        ret AND_KILL_FRAME(2)

L_code_ptr_vector_ref:
        enter 0, 0
        cmp COUNT, 2
        jne L_error_arg_count_2
        mov rdi, PARAM(0)
        assert_vector(rdi)
        mov rsi, PARAM(1)
        assert_integer(rsi)
        mov rdx, qword [rdi + 1]
        mov rcx, qword [rsi + 1]
        cmp rcx, rdx
        jge L_error_integer_range
        cmp rcx, 0
        jl L_error_integer_range
        mov rax, [rdi + 1 + 8 + 8 * rcx]
        leave
        ret AND_KILL_FRAME(2)

L_code_ptr_vector_set:
        enter 0, 0
        cmp COUNT, 3
        jne L_error_arg_count_3
        mov rdi, PARAM(0)
        assert_vector(rdi)
        mov rsi, PARAM(1)
        assert_integer(rsi)
        mov rdx, qword [rdi + 1]
        mov rcx, qword [rsi + 1]
        cmp rcx, rdx
        jge L_error_integer_range
        cmp rcx, 0
        jl L_error_integer_range
        mov rax, PARAM(2)
        mov qword [rdi + 1 + 8 + 8 * rcx], rax
        mov rax, sob_void
        leave
        ret AND_KILL_FRAME(3)

L_code_ptr_string_set:
        enter 0, 0
        cmp COUNT, 3
        jne L_error_arg_count_3
        mov rdi, PARAM(0)
        assert_string(rdi)
        mov rsi, PARAM(1)
        assert_integer(rsi)
        mov rdx, qword [rdi + 1]
        mov rcx, qword [rsi + 1]
        cmp rcx, rdx
        jge L_error_integer_range
        cmp rcx, 0
        jl L_error_integer_range
        mov rax, PARAM(2)
        assert_char(rax)
        mov al, byte [rax + 1]
        mov byte [rdi + 1 + 8 + 1 * rcx], al
        mov rax, sob_void
        leave
        ret AND_KILL_FRAME(3)

L_code_ptr_make_vector:
        enter 0, 0
        cmp COUNT, 2
        jne L_error_arg_count_2
        mov rcx, PARAM(0)
        assert_integer(rcx)
        mov rcx, qword [rcx + 1]
        cmp rcx, 0
        jl L_error_integer_range
        mov rdx, PARAM(1)
        lea rdi, [1 + 8 + 8 * rcx]
        call malloc
        mov byte [rax], T_vector
        mov qword [rax + 1], rcx
        mov r8, 0
.L0:
        cmp r8, rcx
        je .L1
        mov qword [rax + 1 + 8 + 8 * r8], rdx
        inc r8
        jmp .L0
.L1:
        leave
        ret AND_KILL_FRAME(2)
        
L_code_ptr_make_string:
        enter 0, 0
        cmp COUNT, 2
        jne L_error_arg_count_2
        mov rcx, PARAM(0)
        assert_integer(rcx)
        mov rcx, qword [rcx + 1]
        cmp rcx, 0
        jl L_error_integer_range
        mov rdx, PARAM(1)
        assert_char(rdx)
        mov dl, byte [rdx + 1]
        lea rdi, [1 + 8 + 1 * rcx]
        call malloc
        mov byte [rax], T_string
        mov qword [rax + 1], rcx
        mov r8, 0
.L0:
        cmp r8, rcx
        je .L1
        mov byte [rax + 1 + 8 + 1 * r8], dl
        inc r8
        jmp .L0
.L1:
        leave
        ret AND_KILL_FRAME(2)

L_code_ptr_numerator:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov rax, PARAM(0)
        assert_fraction(rax)
        mov rdi, qword [rax + 1]
        call make_integer
        leave
        ret AND_KILL_FRAME(1)
        
L_code_ptr_denominator:
        enter 0, 0
        cmp COUNT, 1
        jne L_error_arg_count_1
        mov rax, PARAM(0)
        assert_fraction(rax)
        mov rdi, qword [rax + 1 + 8]
        call make_integer
        leave
        ret AND_KILL_FRAME(1)

L_code_ptr_is_eq:
	enter 0, 0
	cmp COUNT, 2
	jne L_error_arg_count_2
	mov rdi, PARAM(0)
	mov rsi, PARAM(1)
	cmp rdi, rsi
	je .L_eq_true
	mov dl, byte [rdi]
	cmp dl, byte [rsi]
	jne .L_eq_false
	cmp dl, T_char
	je .L_char
	cmp dl, T_interned_symbol
	je .L_interned_symbol
        cmp dl, T_uninterned_symbol
        je .L_uninterned_symbol
	cmp dl, T_real
	je .L_real
	cmp dl, T_fraction
	je .L_fraction
        cmp dl, T_integer
        je .L_integer
	jmp .L_eq_false
.L_integer:
        mov rax, qword [rsi + 1]
        cmp rax, qword [rdi + 1]
        jne .L_eq_false
        jmp .L_eq_true
.L_fraction:
	mov rax, qword [rsi + 1]
	cmp rax, qword [rdi + 1]
	jne .L_eq_false
	mov rax, qword [rsi + 1 + 8]
	cmp rax, qword [rdi + 1 + 8]
	jne .L_eq_false
	jmp .L_eq_true
.L_real:
	mov rax, qword [rsi + 1]
	cmp rax, qword [rdi + 1]
.L_interned_symbol:
	; never reached, because interned_symbols are static!
	; but I'm keeping it in case, I'll ever change
	; the implementation
	mov rax, qword [rsi + 1]
	cmp rax, qword [rdi + 1]
.L_uninterned_symbol:
        mov r8, qword [rdi + 1]
        cmp r8, qword [rsi + 1]
        jne .L_eq_false
        jmp .L_eq_true
.L_char:
	mov bl, byte [rsi + 1]
	cmp bl, byte [rdi + 1]
	jne .L_eq_false
.L_eq_true:
	mov rax, sob_boolean_true
	jmp .L_eq_exit
.L_eq_false:
	mov rax, sob_boolean_false
.L_eq_exit:
	leave
	ret AND_KILL_FRAME(2)

make_real:
        enter 0, 0
        mov rdi, (1 + 8)
        call malloc
        mov byte [rax], T_real
        movsd qword [rax + 1], xmm0
        leave 
        ret
        
make_integer:
        enter 0, 0
        mov rsi, rdi
        mov rdi, (1 + 8)
        call malloc
        mov byte [rax], T_integer
        mov qword [rax + 1], rsi
        leave
        ret
        
L_error_integer_range:
        mov rdi, qword [stderr]
        mov rsi, fmt_integer_range
        mov rax, 0
        ENTER
        call fprintf
        LEAVE
        mov rax, -5
        call exit

L_error_arg_negative:
        mov rdi, qword [stderr]
        mov rsi, fmt_arg_negative
        mov rax, 0
        ENTER
        call fprintf
        LEAVE
        mov rax, -3
        call exit

L_error_arg_count_0:
        mov rdi, qword [stderr]
        mov rsi, fmt_arg_count_0
        mov rdx, COUNT
        mov rax, 0
        ENTER
        call fprintf
        LEAVE
        mov rax, -3
        call exit

L_error_arg_count_1:
        mov rdi, qword [stderr]
        mov rsi, fmt_arg_count_1
        mov rdx, COUNT
        mov rax, 0
        ENTER
        call fprintf
        LEAVE
        mov rax, -3
        call exit

L_error_arg_count_2:
        mov rdi, qword [stderr]
        mov rsi, fmt_arg_count_2
        mov rdx, COUNT
        mov rax, 0
        ENTER
        call fprintf
        LEAVE
        mov rax, -3
        call exit

L_error_arg_count_12:
        mov rdi, qword [stderr]
        mov rsi, fmt_arg_count_12
        mov rdx, COUNT
        mov rax, 0
        ENTER
        call fprintf
        LEAVE
        mov rax, -3
        call exit

L_error_arg_count_3:
        mov rdi, qword [stderr]
        mov rsi, fmt_arg_count_3
        mov rdx, COUNT
        mov rax, 0
        ENTER
        call fprintf
        LEAVE
        mov rax, -3
        call exit
        
L_error_incorrect_type:
        mov rdi, qword [stderr]
        mov rsi, fmt_type
        mov rax, 0
        ENTER
        call fprintf
        LEAVE
        mov rax, -4
        call exit

L_error_division_by_zero:
        mov rdi, qword [stderr]
        mov rsi, fmt_division_by_zero
        mov rax, 0
        ENTER
        call fprintf
        LEAVE
        mov rax, -8
        call exit

section .data
gensym_count:
        dq 0
fmt_char:
        db `%c\0`
fmt_arg_negative:
        db `!!! The argument cannot be negative.\n\0`
fmt_arg_count_0:
        db `!!! Expecting zero arguments. Found %d\n\0`
fmt_arg_count_1:
        db `!!! Expecting one argument. Found %d\n\0`
fmt_arg_count_12:
        db `!!! Expecting one required and one optional argument. Found %d\n\0`
fmt_arg_count_2:
        db `!!! Expecting two arguments. Found %d\n\0`
fmt_arg_count_3:
        db `!!! Expecting three arguments. Found %d\n\0`
fmt_type:
        db `!!! Function passed incorrect type\n\0`
fmt_integer_range:
        db `!!! Incorrect integer range\n\0`
fmt_division_by_zero:
        db `!!! Division by zero\n\0`
fmt_scheme_error_part_1:
        db `\n!!! The procedure \0`
fmt_scheme_error_part_2:
        db ` asked to terminate the program\n`
        db `    with the following message:\n\n\0`
fmt_scheme_error_part_3:
        db `\n\nGoodbye!\n\n\0`
