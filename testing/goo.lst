     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "return"
    97 00000007 0600000000000000        	dq 6
    98 0000000F 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
    99                                  	; L_constants + 21:
   100 00000015 11                      	db T_integer	; 1
   101 00000016 0100000000000000        	dq 1
   102                                  	; L_constants + 30:
   103 0000001E 11                      	db T_integer	; 2
   104 0000001F 0200000000000000        	dq 2
   105                                  	; L_constants + 39:
   106 00000027 11                      	db T_integer	; 3
   107 00000028 0300000000000000        	dq 3
   108                                  	; L_constants + 48:
   109 00000030 11                      	db T_integer	; 4
   110 00000031 0400000000000000        	dq 4
   111                                  	; L_constants + 57:
   112 00000039 11                      	db T_integer	; 5
   113 0000003A 0500000000000000        	dq 5
   114                                  	; L_constants + 66:
   115 00000042 11                      	db T_integer	; 6
   116 00000043 0600000000000000        	dq 6
   117                                  	; L_constants + 75:
   118 0000004B 11                      	db T_integer	; 7
   119 0000004C 0700000000000000        	dq 7
   120                                  	; L_constants + 84:
   121 00000054 11                      	db T_integer	; 8
   122 00000055 0800000000000000        	dq 8
   123                                  
   124                                  
   125                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
   126                                  global main
   127                                  section .text
   128                                  main:
   129 00000000 C8000000                        enter 0, 0
   130 00000004 6A00                            push 0
   131 00000006 6A00                            push 0
   132 00000008 68[C7020000]                    push Lend
   133 0000000D C8000000                        enter 0, 0
   134                                  
   135                                  	; preparing a non-tail-call
   136 00000011 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   137 00000016 E817040000              	call malloc
   138 0000001B 50                      	push rax
   139 0000001C BF00000000              	mov rdi, 8 * 0	; new rib
   140 00000021 E80C040000              	call malloc
   141 00000026 50                      	push rax
   142 00000027 BF08000000              	mov rdi, 8 * 1	; extended env
   143 0000002C E801040000              	call malloc
   144 00000031 488B7D10                	mov rdi, ENV
   145 00000035 BE00000000              	mov rsi, 0
   146 0000003A BA01000000              	mov rdx, 1
   147                                  .L_lambda_opt_env_loop_0005:	; ext_env[i + 1] <-- env[i]
   148 0000003F 4883FE00                	cmp rsi, 0
   149 00000043 7410                    	je .L_lambda_opt_env_end_0005
   150 00000045 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   151 00000049 48890CD0                	mov qword [rax + 8 * rdx], rcx
   152 0000004D 48FFC6                  	inc rsi
   153 00000050 48FFC2                  	inc rdx
   154 00000053 EBEA                    	jmp .L_lambda_opt_env_loop_0005
   155                                  .L_lambda_opt_env_end_0005:
   156 00000055 5B                      	pop rbx
   157 00000056 BE00000000              	mov rsi, 0
   158                                  .L_lambda_opt_params_loop_0005:	; copy params
   159 0000005B 4883FE00                	cmp rsi, 0
   160 0000005F 740E                    	je .L_lambda_opt_params_end_0005
   161 00000061 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   162 00000066 488914F3                	mov qword [rbx + 8 * rsi], rdx
   163 0000006A 48FFC6                  	inc rsi
   164 0000006D EBEC                    	jmp .L_lambda_opt_params_loop_0005
   165                                  .L_lambda_opt_params_end_0005:
   166 0000006F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   167 00000072 4889C3                  	mov rbx, rax
   168 00000075 58                      	pop rax
   169 00000076 C60004                  	mov byte [rax], T_closure
   170 00000079 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   171 0000007D 48C74009[8A000000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0005
   172 00000085 E92A010000              	jmp .L_lambda_opt_end_0005
   173                                  .L_lambda_opt_code_0005:	; lambda-opt body
   174 0000008A 48837C241002            	cmp qword [rsp + 8 * 2], 2
   175 00000090 740D                    	je .L_lambda_opt_arity_check_exact_0005
   176 00000092 7F60                    	jg .L_lambda_opt_arity_check_more_0005
   177 00000094 FF742410                	push qword [rsp + 8 * 2]
   178 00000098 6A02                    	push 2
   179 0000009A E960030000              	jmp L_error_incorrect_arity_opt
   180                                  .L_lambda_opt_arity_check_exact_0005:
   181 0000009F 4883EC08                	sub rsp, 8
   182 000000A3 488B442408              	mov rax, qword[rsp + 8 *1]
   183 000000A8 48890424                	mov qword[rsp], rax  
   184 000000AC 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
   185 000000B1 4889442408              	mov qword[rsp + 8 * 1], rax
   186 000000B6 B803000000              	mov rax, 3
   187 000000BB 4889442410              	mov qword[rsp + 8 *2], rax
   188 000000C0 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
   189 000000C5 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
   190 000000CA 488B442428              	mov rax, qword[rsp + 8 * (4 + 1)]
   191 000000CF 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
   192 000000D4 48B8-                   	mov rax, sob_nil
   192 000000D6 [0100000000000000] 
   193 000000DE 4889442428              	mov qword[rsp + 8 * (3 + 2)], rax
   194 000000E3 C8000000                	enter 0, 0
   195 000000E7 488B4530                	mov rax, PARAM(2)	; param c
   196 000000EB C9                      	leave
   197 000000EC C22800                  	ret AND_KILL_FRAME(3)
   198 000000EF E9C0000000              	jmp .L_lambda_opt_end_0005	; new closure is in rax
   199                                  .L_lambda_opt_arity_check_more_0005:
   200 000000F4 488B442410              	mov rax, qword[rsp + 2 * 8]
   201 000000F9 4889C7                  	mov rdi, rax
   202 000000FC 49B9-                   	mov r9, sob_nil
   202 000000FE [0100000000000000] 
   203 00000106 4C8B442410              	mov r8, qword[rsp+2*8]
   204                                  .L_lambda_opt_stack_shrink_loop_0005:
   205 0000010B 4983F802                	cmp r8, 2
   206 0000010F 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_0005
   207 00000111 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)]
   208 00000116 BF11000000              	mov rdi, 1+8+8	;for pair
   209 0000011B E812030000              	call malloc	 ;to create the pair in the stack
   210 00000120 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
   211 00000123 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
   212 00000127 4C894809                 	mov qword[rax+1+8],r9
   213 0000012B 4989C1                  	mov r9 , rax	 ; for the recursion 
   214 0000012E 49FFC8                  	dec r8
   215 00000131 EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_0005
   216                                  .L_lambda_opt_stack_shrink_loop_exit_0005:
   217 00000133 488B442410              	mov rax, qword[rsp + 2 * 8]
   218 00000138 BF03000000              	mov rdi, 3
   219 0000013D 4829F8                  	sub rax, rdi
   220 00000140 4889C7                  	mov rdi, rax
   221 00000143 486BC008                	imul rax,8
   222 00000147 4801C4                  	add rsp, rax
   223 0000014A 4889E0                  	mov rax, rsp
   224 0000014D 4989F8                  	mov r8, rdi
   225 00000150 4D6BC008                	imul r8, 8
   226 00000154 4C29C0                  	sub rax, r8
   227 00000157 4989C2                  	mov r10, rax	; holds the original ret in the stack
   228 0000015A 4983C218                	add r10, 8*3
   229 0000015E 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
   230 00000162 4C8B00                  	mov r8, qword[rax] ;arg count = r8
   231 00000165 4D6BC008                	imul r8,8
   232 00000169 4C01C0                  	add rax, r8
   233 0000016C 4C8908                  	mov qword[rax] ,r9
   234 0000016F 4D89D0                   	mov r8, r10
   235 00000172 4983C008                	add r8, 8 * 1
   236 00000176 4D8B08                  	mov r9,qword[r8]
   237 00000179 4D890CF8                	mov qword [r8 + rdi * 8], r9
   238 0000017D 4D89D0                  	mov r8, r10
   239 00000180 4983C000                	add r8, 8 * 0
   240 00000184 4D8B08                  	mov r9,qword[r8]
   241 00000187 4D890CF8                	mov qword [r8 + rdi * 8], r9
   242 0000018B 4983EA18                	sub r10, 8*3
   243 0000018F 48C744241003000000      	mov qword [rsp+2*8], 3
   244 00000198 498B4208                	mov rax, qword[r10 + 1 * 8]
   245 0000019C 4889442408              	mov qword[rsp + 1*8] ,rax
   246 000001A1 498B02                  	mov rax, qword[r10]
   247 000001A4 48890424                	mov qword[rsp], rax
   248 000001A8 C8000000                	enter 0, 0
   249 000001AC 488B4530                	mov rax, PARAM(2)	; param c
   250 000001B0 C9                      	leave
   251 000001B1 C22800                  	ret AND_KILL_FRAME(3)
   252                                  .L_lambda_opt_end_0005:	; new closure is in rax
   253 000001B4 50                      	push rax
   254 000001B5 6A01                    	push 1	; arg count
   255 000001B7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   256 000001BC E871020000              	call malloc
   257 000001C1 50                      	push rax
   258 000001C2 BF00000000              	mov rdi, 8 * 0	; new rib
   259 000001C7 E866020000              	call malloc
   260 000001CC 50                      	push rax
   261 000001CD BF08000000              	mov rdi, 8 * 1	; extended env
   262 000001D2 E85B020000              	call malloc
   263 000001D7 488B7D10                	mov rdi, ENV
   264 000001DB BE00000000              	mov rsi, 0
   265 000001E0 BA01000000              	mov rdx, 1
   266                                  .L_lambda_simple_env_loop_0005:	; ext_env[i + 1] <-- env[i]
   267 000001E5 4883FE00                	cmp rsi, 0
   268 000001E9 7410                    	je .L_lambda_simple_env_end_0005
   269 000001EB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   270 000001EF 48890CD0                	mov qword [rax + 8 * rdx], rcx
   271 000001F3 48FFC6                  	inc rsi
   272 000001F6 48FFC2                  	inc rdx
   273 000001F9 EBEA                    	jmp .L_lambda_simple_env_loop_0005
   274                                  .L_lambda_simple_env_end_0005:
   275 000001FB 5B                      	pop rbx
   276 000001FC BE00000000              	mov rsi, 0
   277                                  .L_lambda_simple_params_loop_0005:	; copy params
   278 00000201 4883FE00                	cmp rsi, 0
   279 00000205 740E                    	je .L_lambda_simple_params_end_0005
   280 00000207 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   281 0000020C 488914F3                	mov qword [rbx + 8 * rsi], rdx
   282 00000210 48FFC6                  	inc rsi
   283 00000213 EBEC                    	jmp .L_lambda_simple_params_loop_0005
   284                                  .L_lambda_simple_params_end_0005:
   285 00000215 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   286 00000218 4889C3                  	mov rbx, rax
   287 0000021B 58                      	pop rax
   288 0000021C C60004                  	mov byte [rax], T_closure
   289 0000021F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   290 00000223 48C74009[30020000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0005
   291 0000022B E988000000              	jmp .L_lambda_simple_end_0005
   292                                  .L_lambda_simple_code_0005:	; lambda-simple body
   293 00000230 48837C241001            	cmp qword [rsp + 8 * 2], 1
   294 00000236 740B                    	je .L_lambda_simple_arity_check_ok_0005
   295 00000238 FF742410                	push qword [rsp + 8 * 2]
   296 0000023C 6A01                    	push 1
   297 0000023E E9A8010000              	jmp L_error_incorrect_arity_simple
   298                                  .L_lambda_simple_arity_check_ok_0005:
   299 00000243 C8000000                	enter 0, 0
   300                                  	; preparing a non-tail-call
   301 00000247 48B8-                   	mov rax, L_constants + 84
   301 00000249 [5400000000000000] 
   302 00000251 50                      	push rax
   303 00000252 48B8-                   	mov rax, L_constants + 75
   303 00000254 [4B00000000000000] 
   304 0000025C 50                      	push rax
   305 0000025D 48B8-                   	mov rax, L_constants + 66
   305 0000025F [4200000000000000] 
   306 00000267 50                      	push rax
   307 00000268 48B8-                   	mov rax, L_constants + 57
   307 0000026A [3900000000000000] 
   308 00000272 50                      	push rax
   309 00000273 48B8-                   	mov rax, L_constants + 48
   309 00000275 [3000000000000000] 
   310 0000027D 50                      	push rax
   311 0000027E 48B8-                   	mov rax, L_constants + 39
   311 00000280 [2700000000000000] 
   312 00000288 50                      	push rax
   313 00000289 48B8-                   	mov rax, L_constants + 30
   313 0000028B [1E00000000000000] 
   314 00000293 50                      	push rax
   315 00000294 48B8-                   	mov rax, L_constants + 21
   315 00000296 [1500000000000000] 
   316 0000029E 50                      	push rax
   317 0000029F 6A08                    	push 8	; arg count
   318 000002A1 488B4520                	mov rax, PARAM(0)	; param f
   319 000002A5 803804                  	cmp byte [rax], T_closure
   320 000002A8 0F85DB000000            	jne L_error_non_closure
   321 000002AE FF7001                  	push SOB_CLOSURE_ENV(rax)
   322 000002B1 FF5009                  	call SOB_CLOSURE_CODE(rax)
   323 000002B4 C9                      	leave
   324 000002B5 C21800                  	ret AND_KILL_FRAME(1)
   325                                  .L_lambda_simple_end_0005:	; new closure is in rax
   326 000002B8 803804                  	cmp byte [rax], T_closure
   327 000002BB 0F85C8000000            	jne L_error_non_closure
   328 000002C1 FF7001                  	push SOB_CLOSURE_ENV(rax)
   329 000002C4 FF5009                  	call SOB_CLOSURE_CODE(rax)
   330                                  Lend:
   331 000002C7 4889C7                  	mov rdi, rax
   332 000002CA E8B8030000              	call print_sexpr_if_not_void
   333                                  
   334 000002CF 48BF-                           mov rdi, fmt_memory_usage
   334 000002D1 [F500000000000000] 
   335 000002D9 488B3425[7B010000]              mov rsi, qword [top_of_memory]
   336 000002E1 4881EE[00000000]                sub rsi, memory
   337 000002E8 B800000000                      mov rax, 0
   338                                          ENTER
    44 000002ED C8000000            <1>  enter 0, 0
    45 000002F1 4883E4F0            <1>  and rsp, ~15
   339 000002F5 E8(00000000)                    call printf
   340                                          LEAVE
    49 000002FA C9                  <1>  leave
   341 000002FB B800000000                      mov rax, 0
   342 00000300 E8(00000000)                    call exit
   343                                  
   344                                  L_error_fvar_undefined:
   345 00000305 50                              push rax
   346 00000306 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
   347 0000030E 48BE-                           mov rsi, fmt_undefined_free_var_1
   347 00000310 [5D00000000000000] 
   348 00000318 B800000000                      mov rax, 0
   349                                          ENTER
    44 0000031D C8000000            <1>  enter 0, 0
    45 00000321 4883E4F0            <1>  and rsp, ~15
   350 00000325 E8(00000000)                    call fprintf
   351                                          LEAVE
    49 0000032A C9                  <1>  leave
   352 0000032B 58                              pop rax
   353 0000032C 488B4001                        mov rax, qword [rax + 1] ; string
   354 00000330 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
   355 00000334 BE01000000                      mov rsi, 1               ; sizeof(char)
   356 00000339 488B5001                        mov rdx, qword [rax + 1] ; string-length
   357 0000033D 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
   358 00000345 B800000000                      mov rax, 0
   359                                          ENTER
    44 0000034A C8000000            <1>  enter 0, 0
    45 0000034E 4883E4F0            <1>  and rsp, ~15
   360 00000352 E8(00000000)                    call fwrite
   361                                          LEAVE
    49 00000357 C9                  <1>  leave
   362 00000358 488B3C25[00000000]              mov rdi, [stderr]       ; destination
   363 00000360 48BE-                           mov rsi, fmt_undefined_free_var_2
   363 00000362 [7400000000000000] 
   364 0000036A B800000000                      mov rax, 0
   365                                          ENTER
    44 0000036F C8000000            <1>  enter 0, 0
    45 00000373 4883E4F0            <1>  and rsp, ~15
   366 00000377 E8(00000000)                    call fprintf
   367                                          LEAVE
    49 0000037C C9                  <1>  leave
   368 0000037D 48C7C0F6FFFFFF                  mov rax, -10
   369 00000384 E8(00000000)                    call exit
   370                                  
   371                                  L_error_non_closure:
   372 00000389 488B3C25[00000000]              mov rdi, qword [stderr]
   373 00000391 48BE-                           mov rsi, fmt_non_closure
   373 00000393 [2B01000000000000] 
   374 0000039B B800000000                      mov rax, 0
   375                                          ENTER
    44 000003A0 C8000000            <1>  enter 0, 0
    45 000003A4 4883E4F0            <1>  and rsp, ~15
   376 000003A8 E8(00000000)                    call fprintf
   377                                          LEAVE
    49 000003AD C9                  <1>  leave
   378 000003AE 48C7C0FEFFFFFF                  mov rax, -2
   379 000003B5 E8(00000000)                    call exit
   380                                  
   381                                  L_error_improper_list:
   382 000003BA 488B3C25[00000000]      	mov rdi, qword [stderr]
   383 000003C2 48BE-                   	mov rsi, fmt_error_improper_list
   383 000003C4 [5301000000000000] 
   384 000003CC B800000000              	mov rax, 0
   385                                          ENTER
    44 000003D1 C8000000            <1>  enter 0, 0
    45 000003D5 4883E4F0            <1>  and rsp, ~15
   386 000003D9 E8(00000000)            	call fprintf
   387                                          LEAVE
    49 000003DE C9                  <1>  leave
   388 000003DF 48C7C0F9FFFFFF          	mov rax, -7
   389 000003E6 E8(00000000)            	call exit
   390                                  
   391                                  L_error_incorrect_arity_simple:
   392 000003EB 488B3C25[00000000]              mov rdi, qword [stderr]
   393 000003F3 48BE-                           mov rsi, fmt_incorrect_arity_simple
   393 000003F5 [9600000000000000] 
   394 000003FD EB12                            jmp L_error_incorrect_arity_common
   395                                  L_error_incorrect_arity_opt:
   396 000003FF 488B3C25[00000000]              mov rdi, qword [stderr]
   397 00000407 48BE-                           mov rsi, fmt_incorrect_arity_opt
   397 00000409 [C100000000000000] 
   398                                  L_error_incorrect_arity_common:
   399 00000411 5A                              pop rdx
   400 00000412 59                              pop rcx
   401 00000413 B800000000                      mov rax, 0
   402                                          ENTER
    44 00000418 C8000000            <1>  enter 0, 0
    45 0000041C 4883E4F0            <1>  and rsp, ~15
   403 00000420 E8(00000000)                    call fprintf
   404                                          LEAVE
    49 00000425 C9                  <1>  leave
   405 00000426 48C7C0FAFFFFFF                  mov rax, -6
   406 0000042D E8(00000000)                    call exit
   407                                  
   408                                  section .data
   409                                  fmt_undefined_free_var_1:
   410 0000005D 212121205468652066-             db `!!! The free variable \0`
   410 00000066 726565207661726961-
   410 0000006F 626C652000         
   411                                  fmt_undefined_free_var_2:
   412 00000074 207761732075736564-             db ` was used before it was defined.\n\0`
   412 0000007D 206265666F72652069-
   412 00000086 742077617320646566-
   412 0000008F 696E65642E0A00     
   413                                  fmt_incorrect_arity_simple:
   414 00000096 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   414 0000009F 74656420256C642061-
   414 000000A8 7267756D656E74732C-
   414 000000B1 206275742067697665-
   414 000000BA 6E20256C640A00     
   415                                  fmt_incorrect_arity_opt:
   416 000000C1 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   416 000000CA 746564206174206C65-
   416 000000D3 61737420256C642061-
   416 000000DC 7267756D656E74732C-
   416 000000E5 206275742067697665-
   416 000000EE 6E20256C640A00     
   417                                  fmt_memory_usage:
   418 000000F5 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   418 000000FE 20256C642062797465-
   418 00000107 73206F662064796E61-
   418 00000110 6D6963616C6C792D61-
   418 00000119 6C6C6F636174656420-
   418 00000122 6D656D6F72790A0A00 
   419                                  fmt_non_closure:
   420 0000012B 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   420 00000134 7074696E6720746F20-
   420 0000013D 6170706C792061206E-
   420 00000146 6F6E2D636C6F737572-
   420 0000014F 65210A00           
   421                                  fmt_error_improper_list:
   422 00000153 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   422 0000015C 7267756D656E742069-
   422 00000165 73206E6F7420612070-
   422 0000016E 726F706572206C6973-
   422 00000177 74210A00           
   423                                  
   424                                  section .bss
   425                                  memory:
   426 00000000 <res 40000000h>         	resb gbytes(1)
   427                                  
   428                                  section .data
   429                                  top_of_memory:
   430 0000017B [0000000000000000]              dq memory
   431                                  
   432                                  section .text
   433                                  malloc:
   434 00000432 488B0425[7B010000]              mov rax, qword [top_of_memory]
   435 0000043A 48013C25[7B010000]              add qword [top_of_memory], rdi
   436 00000442 C3                              ret
   437                                  
   438                                  L_code_ptr_return:
   439 00000443 48837C241002            	cmp qword [rsp + 8*2], 2
   440 00000449 0F85461C0000            	jne L_error_arg_count_2
   441 0000044F 488B4C2418              	mov rcx, qword [rsp + 8*3]
   442                                  	assert_integer(rcx)
    53 00000454 803911              <1>  cmp byte [%1], %2
    54 00000457 0F85D71C0000        <1>  jne L_error_incorrect_type
   443 0000045D 488B4901                	mov rcx, qword [rcx + 1]
   444 00000461 4883F900                	cmp rcx, 0
   445 00000465 0F8C5E1B0000            	jl L_error_integer_range
   446 0000046B 488B442420              	mov rax, qword [rsp + 8*4]
   447                                  .L0:
   448 00000470 4883F900                        cmp rcx, 0
   449 00000474 7409                            je .L1
   450 00000476 488B6D00                	mov rbp, qword [rbp]
   451 0000047A 48FFC9                  	dec rcx
   452 0000047D 7FF1                    	jg .L0
   453                                  .L1:
   454 0000047F 4889EC                  	mov rsp, rbp
   455 00000482 5D                      	pop rbp
   456 00000483 5B                              pop rbx
   457 00000484 488B4C2408                      mov rcx, qword [rsp + 8*1]
   458 00000489 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
   459 0000048E FFE3                    	jmp rbx
   460                                  
   461                                  L_code_ptr_make_list:
   462 00000490 C8000000                	enter 0, 0
   463 00000494 48837D1801                      cmp COUNT, 1
   464 00000499 740C                            je .L0
   465 0000049B 48837D1802                      cmp COUNT, 2
   466 000004A0 7411                            je .L1
   467 000004A2 E9231C0000                      jmp L_error_arg_count_12
   468                                  .L0:
   469 000004A7 49B9-                           mov r9, sob_void
   469 000004A9 [0000000000000000] 
   470 000004B1 EB04                            jmp .L2
   471                                  .L1:
   472 000004B3 4C8B4D28                        mov r9, PARAM(1)
   473                                  .L2:
   474 000004B7 488B4D20                        mov rcx, PARAM(0)
   475                                          assert_integer(rcx)
    53 000004BB 803911              <1>  cmp byte [%1], %2
    54 000004BE 0F85701C0000        <1>  jne L_error_incorrect_type
   476 000004C4 488B4901                        mov rcx, qword [rcx + 1]
   477 000004C8 4883F900                        cmp rcx, 0
   478 000004CC 0F8C281B0000                    jl L_error_arg_negative
   479 000004D2 49B8-                           mov r8, sob_nil
   479 000004D4 [0100000000000000] 
   480                                  .L3:
   481 000004DC 4883F900                        cmp rcx, 0
   482 000004E0 7E1D                            jle .L4
   483 000004E2 BF11000000                      mov rdi, 1 + 8 + 8
   484 000004E7 E846FFFFFF                      call malloc
   485 000004EC C60021                          mov byte [rax], T_pair
   486 000004EF 4C894801                        mov qword [rax + 1], r9
   487 000004F3 4C894009                        mov qword [rax + 1 + 8], r8
   488 000004F7 4989C0                          mov r8, rax
   489 000004FA 48FFC9                          dec rcx
   490 000004FD EBDD                            jmp .L3
   491                                  .L4:
   492 000004FF 4C89C0                          mov rax, r8
   493 00000502 48837D1802                      cmp COUNT, 2
   494 00000507 7404                            je .L5
   495 00000509 C9                              leave
   496 0000050A C21800                          ret AND_KILL_FRAME(1)
   497                                  .L5:
   498 0000050D C9                      	leave
   499 0000050E C22000                  	ret AND_KILL_FRAME(2)
   500                                  
   501                                  L_code_ptr_is_primitive:
   502 00000511 C8000000                	enter 0, 0
   503 00000515 48837D1801              	cmp COUNT, 1
   504 0000051A 0F85401B0000            	jne L_error_arg_count_1
   505 00000520 488B4520                	mov rax, PARAM(0)
   506                                  	assert_closure(rax)
    53 00000524 803804              <1>  cmp byte [%1], %2
    54 00000527 0F85071C0000        <1>  jne L_error_incorrect_type
   507 0000052D 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
   508 00000532 750C                    	jne .L_false
   509 00000534 48B8-                   	mov rax, sob_boolean_true
   509 00000536 [0300000000000000] 
   510 0000053E EB0A                    	jmp .L_end
   511                                  .L_false:
   512 00000540 48B8-                   	mov rax, sob_boolean_false
   512 00000542 [0200000000000000] 
   513                                  .L_end:
   514 0000054A C9                      	leave
   515 0000054B C21800                  	ret AND_KILL_FRAME(1)
   516                                  
   517                                  L_code_ptr_length:
   518 0000054E C8000000                	enter 0, 0
   519 00000552 48837D1801              	cmp COUNT, 1
   520 00000557 0F85031B0000            	jne L_error_arg_count_1
   521 0000055D 488B5D20                	mov rbx, PARAM(0)
   522 00000561 BF00000000              	mov rdi, 0
   523                                  .L:
   524 00000566 803B01                  	cmp byte [rbx], T_nil
   525 00000569 7412                    	je .L_end
   526                                  	assert_pair(rbx)
    53 0000056B 803B21              <1>  cmp byte [%1], %2
    54 0000056E 0F85C01B0000        <1>  jne L_error_incorrect_type
   527 00000574 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
   528 00000578 48FFC7                  	inc rdi
   529 0000057B EBE9                    	jmp .L
   530                                  .L_end:
   531 0000057D E82D1A0000              	call make_integer
   532 00000582 C9                      	leave
   533 00000583 C21800                  	ret AND_KILL_FRAME(1)
   534                                  
   535                                  L_code_ptr_break:
   536 00000586 48837C241000                    cmp qword [rsp + 8 * 2], 0
   537 0000058C 0F85991A0000                    jne L_error_arg_count_0
   538 00000592 CC                              int3
   539 00000593 48B8-                           mov rax, sob_void
   539 00000595 [0000000000000000] 
   540 0000059D C21000                          ret AND_KILL_FRAME(0)        
   541                                  
   542                                  L_code_ptr_frame:
   543 000005A0 C8000000                        enter 0, 0
   544 000005A4 48837D1800                      cmp COUNT, 0
   545 000005A9 0F857C1A0000                    jne L_error_arg_count_0
   546                                  
   547 000005AF 48BF-                           mov rdi, fmt_frame
   547 000005B1 [8301000000000000] 
   548 000005B9 488B7500                        mov rsi, qword [rbp]    ; old rbp
   549 000005BD 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
   550 000005C1 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
   551 000005C5 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
   552 000005C9 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
   553 000005CD 6A00                            push 0
   554 000005CF 4151                            push r9
   555 000005D1 4150                            push r8                   ; we'll use it when printing the params
   556 000005D3 B800000000                      mov rax, 0
   557                                          
   558                                          ENTER
    44 000005D8 C8000000            <1>  enter 0, 0
    45 000005DC 4883E4F0            <1>  and rsp, ~15
   559 000005E0 E8(00000000)                    call printf
   560                                          LEAVE
    49 000005E5 C9                  <1>  leave
   561                                  
   562                                  .L:
   563 000005E6 488B0C24                        mov rcx, qword [rsp]
   564 000005EA 4883F900                        cmp rcx, 0
   565 000005EE 7467                            je .L_out
   566 000005F0 48BF-                           mov rdi, fmt_frame_param_prefix
   566 000005F2 [BC01000000000000] 
   567 000005FA 488B742410                      mov rsi, qword [rsp + 8*2]
   568 000005FF B800000000                      mov rax, 0
   569                                          
   570                                          ENTER
    44 00000604 C8000000            <1>  enter 0, 0
    45 00000608 4883E4F0            <1>  and rsp, ~15
   571 0000060C E8(00000000)                    call printf
   572                                          LEAVE
    49 00000611 C9                  <1>  leave
   573                                  
   574 00000612 488B0C24                        mov rcx, qword [rsp]
   575 00000616 48FFC9                          dec rcx
   576 00000619 48890C24                        mov qword [rsp], rcx    ; dec arg count
   577 0000061D 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
   578 00000622 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
   579 00000627 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
   580 0000062B 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
   581 00000630 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
   582 00000633 E87B000000                      call print_sexpr
   583 00000638 48BF-                           mov rdi, fmt_newline
   583 0000063A [E801000000000000] 
   584 00000642 B800000000                      mov rax, 0
   585                                          ENTER
    44 00000647 C8000000            <1>  enter 0, 0
    45 0000064B 4883E4F0            <1>  and rsp, ~15
   586 0000064F E8(00000000)                    call printf
   587                                          LEAVE
    49 00000654 C9                  <1>  leave
   588 00000655 EB8F                            jmp .L
   589                                  .L_out:
   590 00000657 48BF-                           mov rdi, fmt_frame_continue
   590 00000659 [CD01000000000000] 
   591 00000661 B800000000                      mov rax, 0
   592                                          ENTER
    44 00000666 C8000000            <1>  enter 0, 0
    45 0000066A 4883E4F0            <1>  and rsp, ~15
   593 0000066E E8(00000000)                    call printf
   594 00000673 E8(00000000)                    call getchar
   595                                          LEAVE
    49 00000678 C9                  <1>  leave
   596                                          
   597 00000679 48B8-                           mov rax, sob_void
   597 0000067B [0000000000000000] 
   598 00000683 C9                              leave
   599 00000684 C21000                          ret AND_KILL_FRAME(0)
   600                                          
   601                                  print_sexpr_if_not_void:
   602 00000687 4881FF[00000000]        	cmp rdi, sob_void
   603 0000068E 7422                    	je .done
   604 00000690 E81E000000              	call print_sexpr
   605 00000695 48BF-                   	mov rdi, fmt_newline
   605 00000697 [E801000000000000] 
   606 0000069F B800000000              	mov rax, 0
   607                                  	ENTER
    44 000006A4 C8000000            <1>  enter 0, 0
    45 000006A8 4883E4F0            <1>  and rsp, ~15
   608 000006AC E8(00000000)            	call printf
   609                                  	LEAVE
    49 000006B1 C9                  <1>  leave
   610                                  .done:
   611 000006B2 C3                      	ret
   612                                  
   613                                  section .data
   614                                  fmt_frame:
   615 00000183 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
   615 0000018C 207265742061646472-
   615 00000195 203D2025703B206C65-
   615 0000019E 7820656E76203D2025-
   615 000001A7 703B20706172616D20-
   615 000001B0 636F756E74203D2025-
   615 000001B9 640A00             
   616                                  fmt_frame_param_prefix:
   617 000001BC 3D3D5B706172616D20-             db `==[param %d]==> \0`
   617 000001C5 25645D3D3D3E2000   
   618                                  fmt_frame_continue:
   619 000001CD 486974203C456E7465-             db `Hit <Enter> to continue...\0`
   619 000001D6 723E20746F20636F6E-
   619 000001DF 74696E75652E2E2E00 
   620                                  fmt_newline:
   621 000001E8 0A00                    	db `\n\0`
   622                                  fmt_void:
   623 000001EA 233C766F69643E00        	db `#<void>\0`
   624                                  fmt_nil:
   625 000001F2 282900                  	db `()\0`
   626                                  fmt_boolean_false:
   627 000001F5 236600                  	db `#f\0`
   628                                  fmt_boolean_true:
   629 000001F8 237400                  	db `#t\0`
   630                                  fmt_char_backslash:
   631 000001FB 235C5C00                	db `#\\\\\0`
   632                                  fmt_char_dquote:
   633 000001FF 235C2200                	db `#\\"\0`
   634                                  fmt_char_simple:
   635 00000203 235C256300              	db `#\\%c\0`
   636                                  fmt_char_null:
   637 00000208 235C6E756C00            	db `#\\nul\0`
   638                                  fmt_char_bell:
   639 0000020E 235C62656C6C00          	db `#\\bell\0`
   640                                  fmt_char_backspace:
   641 00000215 235C6261636B737061-     	db `#\\backspace\0`
   641 0000021E 636500             
   642                                  fmt_char_tab:
   643 00000221 235C74616200            	db `#\\tab\0`
   644                                  fmt_char_newline:
   645 00000227 235C6E65776C696E65-     	db `#\\newline\0`
   645 00000230 00                 
   646                                  fmt_char_formfeed:
   647 00000231 235C7061676500          	db `#\\page\0`
   648                                  fmt_char_return:
   649 00000238 235C72657475726E00      	db `#\\return\0`
   650                                  fmt_char_escape:
   651 00000241 235C65736300            	db `#\\esc\0`
   652                                  fmt_char_space:
   653 00000247 235C737061636500        	db `#\\space\0`
   654                                  fmt_char_hex:
   655 0000024F 235C782530325800        	db `#\\x%02X\0`
   656                                  fmt_gensym:
   657 00000257 47256C6400                      db `G%ld\0`
   658                                  fmt_closure:
   659 0000025C 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   659 00000265 206174203078253038-
   659 0000026E 5820656E763D307825-
   659 00000277 30385820636F64653D-
   659 00000280 3078253038583E00   
   660                                  fmt_lparen:
   661 00000288 2800                    	db `(\0`
   662                                  fmt_dotted_pair:
   663 0000028A 202E2000                	db ` . \0`
   664                                  fmt_rparen:
   665 0000028E 2900                    	db `)\0`
   666                                  fmt_space:
   667 00000290 2000                    	db ` \0`
   668                                  fmt_empty_vector:
   669 00000292 23282900                	db `#()\0`
   670                                  fmt_vector:
   671 00000296 232800                  	db `#(\0`
   672                                  fmt_real:
   673 00000299 256600                  	db `%f\0`
   674                                  fmt_fraction:
   675 0000029C 256C642F256C6400        	db `%ld/%ld\0`
   676                                  fmt_zero:
   677 000002A4 3000                    	db `0\0`
   678                                  fmt_int:
   679 000002A6 256C6400                	db `%ld\0`
   680                                  fmt_unknown_scheme_object_error:
   681 000002AA 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
   681 000002B3 6F723A20556E6B6E6F-
   681 000002BC 776E20536368656D65-
   681 000002C5 2D6F626A6563742028-
   681 000002CE 525454492030782530-
   681 000002D7 32582920           
   682 000002DB 617420616464726573-     	db `at address 0x%08X\n\n\0`
   682 000002E4 73203078253038580A-
   682 000002ED 0A00               
   683                                  fmt_dquote:
   684 000002EF 2200                    	db `\"\0`
   685                                  fmt_string_char:
   686 000002F1 256300                          db `%c\0`
   687                                  fmt_string_char_7:
   688 000002F4 5C6100                          db `\\a\0`
   689                                  fmt_string_char_8:
   690 000002F7 5C6200                          db `\\b\0`
   691                                  fmt_string_char_9:
   692 000002FA 5C7400                          db `\\t\0`
   693                                  fmt_string_char_10:
   694 000002FD 5C6E00                          db `\\n\0`
   695                                  fmt_string_char_11:
   696 00000300 5C7600                          db `\\v\0`
   697                                  fmt_string_char_12:
   698 00000303 5C6600                          db `\\f\0`
   699                                  fmt_string_char_13:
   700 00000306 5C7200                          db `\\r\0`
   701                                  fmt_string_char_34:
   702 00000309 5C2200                          db `\\"\0`
   703                                  fmt_string_char_92:
   704 0000030C 5C5C00                          db `\\\\\0`
   705                                  fmt_string_char_hex:
   706 0000030F 5C7825583B00                    db `\\x%X;\0`
   707                                  
   708                                  section .text
   709                                  
   710                                  print_sexpr:
   711 000006B3 C8000000                	enter 0, 0
   712 000006B7 8A07                    	mov al, byte [rdi]
   713 000006B9 3C00                    	cmp al, T_void
   714 000006BB 7465                    	je .Lvoid
   715 000006BD 3C01                    	cmp al, T_nil
   716 000006BF 7470                    	je .Lnil
   717 000006C1 3C09                    	cmp al, T_boolean_false
   718 000006C3 747B                    	je .Lboolean_false
   719 000006C5 3C0A                    	cmp al, T_boolean_true
   720 000006C7 0F8482000000            	je .Lboolean_true
   721 000006CD 3C02                    	cmp al, T_char
   722 000006CF 0F8489000000            	je .Lchar
   723 000006D5 3C41                    	cmp al, T_interned_symbol
   724 000006D7 0F84BF010000            	je .Linterned_symbol
   725 000006DD 3C42                            cmp al, T_uninterned_symbol
   726 000006DF 0F84E3010000                    je .Luninterned_symbol
   727 000006E5 3C21                    	cmp al, T_pair
   728 000006E7 0F84EE010000            	je .Lpair
   729 000006ED 3C22                    	cmp al, T_vector
   730 000006EF 0F84B7020000            	je .Lvector
   731 000006F5 3C04                    	cmp al, T_closure
   732 000006F7 0F8485010000            	je .Lclosure
   733 000006FD 3C13                    	cmp al, T_real
   734 000006FF 0F8448030000            	je .Lreal
   735 00000705 3C12                    	cmp al, T_fraction
   736 00000707 0F846E030000            	je .Lfraction
   737 0000070D 3C11                    	cmp al, T_integer
   738 0000070F 0F84A7030000            	je .Linteger
   739 00000715 3C03                    	cmp al, T_string
   740 00000717 0F84B2030000            	je .Lstring
   741                                  
   742 0000071D E9DC040000              	jmp .Lunknown_sexpr_type
   743                                  
   744                                  .Lvoid:
   745 00000722 48BF-                   	mov rdi, fmt_void
   745 00000724 [EA01000000000000] 
   746 0000072C E900050000              	jmp .Lemit
   747                                  
   748                                  .Lnil:
   749 00000731 48BF-                   	mov rdi, fmt_nil
   749 00000733 [F201000000000000] 
   750 0000073B E9F1040000              	jmp .Lemit
   751                                  
   752                                  .Lboolean_false:
   753 00000740 48BF-                   	mov rdi, fmt_boolean_false
   753 00000742 [F501000000000000] 
   754 0000074A E9E2040000              	jmp .Lemit
   755                                  
   756                                  .Lboolean_true:
   757 0000074F 48BF-                   	mov rdi, fmt_boolean_true
   757 00000751 [F801000000000000] 
   758 00000759 E9D3040000              	jmp .Lemit
   759                                  
   760                                  .Lchar:
   761 0000075E 8A4701                  	mov al, byte [rdi + 1]
   762 00000761 3C20                    	cmp al, ' '
   763 00000763 7E20                    	jle .Lchar_whitespace
   764 00000765 3C5C                    	cmp al, 92 		; backslash
   765 00000767 7474                    	je .Lchar_backslash
   766 00000769 3C22                    	cmp al, '"'
   767 0000076B 747F                    	je .Lchar_dquote
   768 0000076D 4825FF000000            	and rax, 255
   769 00000773 48BF-                   	mov rdi, fmt_char_simple
   769 00000775 [0302000000000000] 
   770 0000077D 4889C6                  	mov rsi, rax
   771 00000780 E9AC040000              	jmp .Lemit
   772                                  
   773                                  .Lchar_whitespace:
   774 00000785 3C00                    	cmp al, 0
   775 00000787 7472                    	je .Lchar_null
   776 00000789 3C07                    	cmp al, 7
   777 0000078B 747D                    	je .Lchar_bell
   778 0000078D 3C08                    	cmp al, 8
   779 0000078F 0F8484000000            	je .Lchar_backspace
   780 00000795 3C09                    	cmp al, 9
   781 00000797 0F848B000000            	je .Lchar_tab
   782 0000079D 3C0A                    	cmp al, 10
   783 0000079F 0F8492000000            	je .Lchar_newline
   784 000007A5 3C0C                    	cmp al, 12
   785 000007A7 0F8499000000            	je .Lchar_formfeed
   786 000007AD 3C0D                    	cmp al, 13
   787 000007AF 0F84A0000000            	je .Lchar_return
   788 000007B5 3C1B                    	cmp al, 27
   789 000007B7 0F84A7000000            	je .Lchar_escape
   790 000007BD 4825FF000000            	and rax, 255
   791 000007C3 3C20                    	cmp al, ' '
   792 000007C5 0F84A8000000            	je .Lchar_space
   793 000007CB 48BF-                   	mov rdi, fmt_char_hex
   793 000007CD [4F02000000000000] 
   794 000007D5 4889C6                  	mov rsi, rax
   795 000007D8 E954040000              	jmp .Lemit	
   796                                  
   797                                  .Lchar_backslash:
   798 000007DD 48BF-                   	mov rdi, fmt_char_backslash
   798 000007DF [FB01000000000000] 
   799 000007E7 E945040000              	jmp .Lemit
   800                                  
   801                                  .Lchar_dquote:
   802 000007EC 48BF-                   	mov rdi, fmt_char_dquote
   802 000007EE [FF01000000000000] 
   803 000007F6 E936040000              	jmp .Lemit
   804                                  
   805                                  .Lchar_null:
   806 000007FB 48BF-                   	mov rdi, fmt_char_null
   806 000007FD [0802000000000000] 
   807 00000805 E927040000              	jmp .Lemit
   808                                  
   809                                  .Lchar_bell:
   810 0000080A 48BF-                   	mov rdi, fmt_char_bell
   810 0000080C [0E02000000000000] 
   811 00000814 E918040000              	jmp .Lemit
   812                                  
   813                                  .Lchar_backspace:
   814 00000819 48BF-                   	mov rdi, fmt_char_backspace
   814 0000081B [1502000000000000] 
   815 00000823 E909040000              	jmp .Lemit
   816                                  
   817                                  .Lchar_tab:
   818 00000828 48BF-                   	mov rdi, fmt_char_tab
   818 0000082A [2102000000000000] 
   819 00000832 E9FA030000              	jmp .Lemit
   820                                  
   821                                  .Lchar_newline:
   822 00000837 48BF-                   	mov rdi, fmt_char_newline
   822 00000839 [2702000000000000] 
   823 00000841 E9EB030000              	jmp .Lemit
   824                                  
   825                                  .Lchar_formfeed:
   826 00000846 48BF-                   	mov rdi, fmt_char_formfeed
   826 00000848 [3102000000000000] 
   827 00000850 E9DC030000              	jmp .Lemit
   828                                  
   829                                  .Lchar_return:
   830 00000855 48BF-                   	mov rdi, fmt_char_return
   830 00000857 [3802000000000000] 
   831 0000085F E9CD030000              	jmp .Lemit
   832                                  
   833                                  .Lchar_escape:
   834 00000864 48BF-                   	mov rdi, fmt_char_escape
   834 00000866 [4102000000000000] 
   835 0000086E E9BE030000              	jmp .Lemit
   836                                  
   837                                  .Lchar_space:
   838 00000873 48BF-                   	mov rdi, fmt_char_space
   838 00000875 [4702000000000000] 
   839 0000087D E9AF030000              	jmp .Lemit
   840                                  
   841                                  .Lclosure:
   842 00000882 4889FE                  	mov rsi, qword rdi
   843 00000885 48BF-                   	mov rdi, fmt_closure
   843 00000887 [5C02000000000000] 
   844 0000088F 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   845 00000893 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   846 00000897 E995030000              	jmp .Lemit
   847                                  
   848                                  .Linterned_symbol:
   849 0000089C 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   850 000008A0 BE01000000              	mov rsi, 1		 ; size = 1 byte
   851 000008A5 488B5701                	mov rdx, qword [rdi + 1] ; length
   852 000008A9 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   853 000008AD 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   854                                  	ENTER
    44 000008B5 C8000000            <1>  enter 0, 0
    45 000008B9 4883E4F0            <1>  and rsp, ~15
   855 000008BD E8(00000000)            	call fwrite
   856                                  	LEAVE
    49 000008C2 C9                  <1>  leave
   857 000008C3 E97E030000              	jmp .Lend
   858                                  
   859                                  .Luninterned_symbol:
   860 000008C8 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
   861 000008CC 48BF-                           mov rdi, fmt_gensym
   861 000008CE [5702000000000000] 
   862 000008D6 E956030000                      jmp .Lemit
   863                                  	
   864                                  .Lpair:
   865 000008DB 57                      	push rdi
   866 000008DC 48BF-                   	mov rdi, fmt_lparen
   866 000008DE [8802000000000000] 
   867 000008E6 B800000000              	mov rax, 0
   868                                          ENTER
    44 000008EB C8000000            <1>  enter 0, 0
    45 000008EF 4883E4F0            <1>  and rsp, ~15
   869 000008F3 E8(00000000)            	call printf
   870                                          LEAVE
    49 000008F8 C9                  <1>  leave
   871 000008F9 488B3C24                	mov rdi, qword [rsp] 	; pair
   872 000008FD 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   873 00000901 E8ADFDFFFF              	call print_sexpr
   874 00000906 5F                      	pop rdi 		; pair
   875 00000907 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   876                                  .Lcdr:
   877 0000090B 8A07                    	mov al, byte [rdi]
   878 0000090D 3C01                    	cmp al, T_nil
   879 0000090F 7447                    	je .Lcdr_nil
   880 00000911 3C21                    	cmp al, T_pair
   881 00000913 7462                    	je .Lcdr_pair
   882 00000915 57                      	push rdi
   883 00000916 48BF-                   	mov rdi, fmt_dotted_pair
   883 00000918 [8A02000000000000] 
   884 00000920 B800000000              	mov rax, 0
   885                                          ENTER
    44 00000925 C8000000            <1>  enter 0, 0
    45 00000929 4883E4F0            <1>  and rsp, ~15
   886 0000092D E8(00000000)            	call printf
   887                                          LEAVE
    49 00000932 C9                  <1>  leave
   888 00000933 5F                      	pop rdi
   889 00000934 E87AFDFFFF              	call print_sexpr
   890 00000939 48BF-                   	mov rdi, fmt_rparen
   890 0000093B [8E02000000000000] 
   891 00000943 B800000000              	mov rax, 0
   892                                          ENTER
    44 00000948 C8000000            <1>  enter 0, 0
    45 0000094C 4883E4F0            <1>  and rsp, ~15
   893 00000950 E8(00000000)            	call printf
   894                                          LEAVE
    49 00000955 C9                  <1>  leave
   895 00000956 C9                      	leave
   896 00000957 C3                      	ret
   897                                  
   898                                  .Lcdr_nil:
   899 00000958 48BF-                   	mov rdi, fmt_rparen
   899 0000095A [8E02000000000000] 
   900 00000962 B800000000              	mov rax, 0
   901                                          ENTER
    44 00000967 C8000000            <1>  enter 0, 0
    45 0000096B 4883E4F0            <1>  and rsp, ~15
   902 0000096F E8(00000000)            	call printf
   903                                          LEAVE
    49 00000974 C9                  <1>  leave
   904 00000975 C9                      	leave
   905 00000976 C3                      	ret
   906                                  
   907                                  .Lcdr_pair:
   908 00000977 57                      	push rdi
   909 00000978 48BF-                   	mov rdi, fmt_space
   909 0000097A [9002000000000000] 
   910 00000982 B800000000              	mov rax, 0
   911                                          ENTER
    44 00000987 C8000000            <1>  enter 0, 0
    45 0000098B 4883E4F0            <1>  and rsp, ~15
   912 0000098F E8(00000000)            	call printf
   913                                          LEAVE
    49 00000994 C9                  <1>  leave
   914 00000995 488B3C24                	mov rdi, qword [rsp]
   915 00000999 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   916 0000099D E811FDFFFF              	call print_sexpr
   917 000009A2 5F                      	pop rdi
   918 000009A3 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   919 000009A7 E95FFFFFFF              	jmp .Lcdr
   920                                  
   921                                  .Lvector:
   922 000009AC 488B4701                	mov rax, qword [rdi + 1] ; length
   923 000009B0 4883F800                	cmp rax, 0
   924 000009B4 0F8484000000            	je .Lvector_empty
   925 000009BA 57                      	push rdi
   926 000009BB 48BF-                   	mov rdi, fmt_vector
   926 000009BD [9602000000000000] 
   927 000009C5 B800000000              	mov rax, 0
   928                                          ENTER
    44 000009CA C8000000            <1>  enter 0, 0
    45 000009CE 4883E4F0            <1>  and rsp, ~15
   929 000009D2 E8(00000000)            	call printf
   930                                          LEAVE
    49 000009D7 C9                  <1>  leave
   931 000009D8 488B3C24                	mov rdi, qword [rsp]
   932 000009DC FF7701                  	push qword [rdi + 1]
   933 000009DF 6A01                    	push 1
   934 000009E1 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   935 000009E5 E8C9FCFFFF              	call print_sexpr
   936                                  .Lvector_loop:
   937                                  	; [rsp] index
   938                                  	; [rsp + 8*1] limit
   939                                  	; [rsp + 8*2] vector
   940 000009EA 488B0424                	mov rax, qword [rsp]
   941 000009EE 483B442408              	cmp rax, qword [rsp + 8*1]
   942 000009F3 7436                    	je .Lvector_end
   943 000009F5 48BF-                   	mov rdi, fmt_space
   943 000009F7 [9002000000000000] 
   944 000009FF B800000000              	mov rax, 0
   945                                          ENTER
    44 00000A04 C8000000            <1>  enter 0, 0
    45 00000A08 4883E4F0            <1>  and rsp, ~15
   946 00000A0C E8(00000000)            	call printf
   947                                          LEAVE
    49 00000A11 C9                  <1>  leave
   948 00000A12 488B0424                	mov rax, qword [rsp]
   949 00000A16 488B5C2410              	mov rbx, qword [rsp + 8*2]
   950 00000A1B 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   951 00000A20 E88EFCFFFF              	call print_sexpr
   952 00000A25 48FF0424                	inc qword [rsp]
   953 00000A29 EBBF                    	jmp .Lvector_loop
   954                                  
   955                                  .Lvector_end:
   956 00000A2B 4883C418                	add rsp, 8*3
   957 00000A2F 48BF-                   	mov rdi, fmt_rparen
   957 00000A31 [8E02000000000000] 
   958 00000A39 E9F3010000              	jmp .Lemit	
   959                                  
   960                                  .Lvector_empty:
   961 00000A3E 48BF-                   	mov rdi, fmt_empty_vector
   961 00000A40 [9202000000000000] 
   962 00000A48 E9E4010000              	jmp .Lemit
   963                                  
   964                                  .Lreal:
   965 00000A4D FF7701                  	push qword [rdi + 1]
   966 00000A50 F20F100424              	movsd xmm0, qword [rsp]
   967 00000A55 4883C408                	add rsp, 8*1
   968 00000A59 48BF-                   	mov rdi, fmt_real
   968 00000A5B [9902000000000000] 
   969 00000A63 B801000000              	mov rax, 1
   970                                  	ENTER
    44 00000A68 C8000000            <1>  enter 0, 0
    45 00000A6C 4883E4F0            <1>  and rsp, ~15
   971 00000A70 E8(00000000)            	call printf
   972                                  	LEAVE
    49 00000A75 C9                  <1>  leave
   973 00000A76 E9CB010000              	jmp .Lend
   974                                  
   975                                  .Lfraction:
   976 00000A7B 488B7701                	mov rsi, qword [rdi + 1]
   977 00000A7F 488B5709                	mov rdx, qword [rdi + 1 + 8]
   978 00000A83 4883FE00                	cmp rsi, 0
   979 00000A87 7415                    	je .Lrat_zero
   980 00000A89 4883FA01                	cmp rdx, 1
   981 00000A8D 741E                    	je .Lrat_int
   982 00000A8F 48BF-                   	mov rdi, fmt_fraction
   982 00000A91 [9C02000000000000] 
   983 00000A99 E993010000              	jmp .Lemit
   984                                  
   985                                  .Lrat_zero:
   986 00000A9E 48BF-                   	mov rdi, fmt_zero
   986 00000AA0 [A402000000000000] 
   987 00000AA8 E984010000              	jmp .Lemit
   988                                  
   989                                  .Lrat_int:
   990 00000AAD 48BF-                   	mov rdi, fmt_int
   990 00000AAF [A602000000000000] 
   991 00000AB7 E975010000              	jmp .Lemit
   992                                  
   993                                  .Linteger:
   994 00000ABC 488B7701                	mov rsi, qword [rdi + 1]
   995 00000AC0 48BF-                   	mov rdi, fmt_int
   995 00000AC2 [A602000000000000] 
   996 00000ACA E962010000              	jmp .Lemit
   997                                  
   998                                  .Lstring:
   999 00000ACF 488D4709                	lea rax, [rdi + 1 + 8]
  1000 00000AD3 50                      	push rax
  1001 00000AD4 FF7701                  	push qword [rdi + 1]
  1002 00000AD7 48BF-                   	mov rdi, fmt_dquote
  1002 00000AD9 [EF02000000000000] 
  1003 00000AE1 B800000000              	mov rax, 0
  1004                                  	ENTER
    44 00000AE6 C8000000            <1>  enter 0, 0
    45 00000AEA 4883E4F0            <1>  and rsp, ~15
  1005 00000AEE E8(00000000)            	call printf
  1006                                  	LEAVE
    49 00000AF3 C9                  <1>  leave
  1007                                  .Lstring_loop:
  1008                                  	; qword [rsp]: limit
  1009                                  	; qword [rsp + 8*1]: char *
  1010 00000AF4 48833C2400              	cmp qword [rsp], 0
  1011 00000AF9 0F84EF000000            	je .Lstring_end
  1012 00000AFF 488B442408              	mov rax, qword [rsp + 8*1]
  1013 00000B04 8A00                    	mov al, byte [rax]
  1014 00000B06 4825FF000000            	and rax, 255
  1015 00000B0C 3C07                    	cmp al, 7
  1016 00000B0E 745D                            je .Lstring_char_7
  1017 00000B10 3C08                            cmp al, 8
  1018 00000B12 7465                            je .Lstring_char_8
  1019 00000B14 3C09                            cmp al, 9
  1020 00000B16 746D                            je .Lstring_char_9
  1021 00000B18 3C0A                            cmp al, 10
  1022 00000B1A 7475                            je .Lstring_char_10
  1023 00000B1C 3C0B                            cmp al, 11
  1024 00000B1E 747D                            je .Lstring_char_11
  1025 00000B20 3C0C                            cmp al, 12
  1026 00000B22 0F8481000000                    je .Lstring_char_12
  1027 00000B28 3C0D                            cmp al, 13
  1028 00000B2A 0F8485000000                    je .Lstring_char_13
  1029 00000B30 3C22                            cmp al, 34
  1030 00000B32 0F8489000000                    je .Lstring_char_34
  1031 00000B38 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  1033 00000B3A 3C20                            cmp al, ' '
  1034 00000B3C 0F8C9A000000                    jl .Lstring_char_hex
  1035 00000B42 48BF-                           mov rdi, fmt_string_char
  1035 00000B44 [F102000000000000] 
  1036 00000B4C 4889C6                          mov rsi, rax
  1037                                  .Lstring_char_emit:
  1038 00000B4F B800000000                      mov rax, 0
  1039                                          ENTER
    44 00000B54 C8000000            <1>  enter 0, 0
    45 00000B58 4883E4F0            <1>  and rsp, ~15
  1040 00000B5C E8(00000000)                    call printf
  1041                                          LEAVE
    49 00000B61 C9                  <1>  leave
  1042 00000B62 48FF0C24                        dec qword [rsp]
  1043 00000B66 48FF442408                      inc qword [rsp + 8*1]
  1044 00000B6B EB87                            jmp .Lstring_loop
  1045                                  
  1046                                  .Lstring_char_7:
  1047 00000B6D 48BF-                           mov rdi, fmt_string_char_7
  1047 00000B6F [F402000000000000] 
  1048 00000B77 EBD6                            jmp .Lstring_char_emit
  1049                                  
  1050                                  .Lstring_char_8:
  1051 00000B79 48BF-                           mov rdi, fmt_string_char_8
  1051 00000B7B [F702000000000000] 
  1052 00000B83 EBCA                            jmp .Lstring_char_emit
  1053                                          
  1054                                  .Lstring_char_9:
  1055 00000B85 48BF-                           mov rdi, fmt_string_char_9
  1055 00000B87 [FA02000000000000] 
  1056 00000B8F EBBE                            jmp .Lstring_char_emit
  1057                                  
  1058                                  .Lstring_char_10:
  1059 00000B91 48BF-                           mov rdi, fmt_string_char_10
  1059 00000B93 [FD02000000000000] 
  1060 00000B9B EBB2                            jmp .Lstring_char_emit
  1061                                  
  1062                                  .Lstring_char_11:
  1063 00000B9D 48BF-                           mov rdi, fmt_string_char_11
  1063 00000B9F [0003000000000000] 
  1064 00000BA7 EBA6                            jmp .Lstring_char_emit
  1065                                  
  1066                                  .Lstring_char_12:
  1067 00000BA9 48BF-                           mov rdi, fmt_string_char_12
  1067 00000BAB [0303000000000000] 
  1068 00000BB3 EB9A                            jmp .Lstring_char_emit
  1069                                  
  1070                                  .Lstring_char_13:
  1071 00000BB5 48BF-                           mov rdi, fmt_string_char_13
  1071 00000BB7 [0603000000000000] 
  1072 00000BBF EB8E                            jmp .Lstring_char_emit
  1073                                  
  1074                                  .Lstring_char_34:
  1075 00000BC1 48BF-                           mov rdi, fmt_string_char_34
  1075 00000BC3 [0903000000000000] 
  1076 00000BCB EB82                            jmp .Lstring_char_emit
  1077                                  
  1078                                  .Lstring_char_92:
  1079 00000BCD 48BF-                           mov rdi, fmt_string_char_92
  1079 00000BCF [0C03000000000000] 
  1080 00000BD7 E973FFFFFF                      jmp .Lstring_char_emit
  1081                                  
  1082                                  .Lstring_char_hex:
  1083 00000BDC 48BF-                           mov rdi, fmt_string_char_hex
  1083 00000BDE [0F03000000000000] 
  1084 00000BE6 4889C6                          mov rsi, rax
  1085 00000BE9 E961FFFFFF                      jmp .Lstring_char_emit        
  1086                                  
  1087                                  .Lstring_end:
  1088 00000BEE 4883C410                	add rsp, 8 * 2
  1089 00000BF2 48BF-                   	mov rdi, fmt_dquote
  1089 00000BF4 [EF02000000000000] 
  1090 00000BFC EB33                    	jmp .Lemit
  1091                                  
  1092                                  .Lunknown_sexpr_type:
  1093 00000BFE 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
  1093 00000C00 [AA02000000000000] 
  1094 00000C08 4825FF000000            	and rax, 255
  1095 00000C0E 4889C2                  	mov rdx, rax
  1096 00000C11 4889F9                  	mov rcx, rdi
  1097 00000C14 488B3C25[00000000]      	mov rdi, qword [stderr]
  1098 00000C1C B800000000              	mov rax, 0
  1099                                          ENTER
    44 00000C21 C8000000            <1>  enter 0, 0
    45 00000C25 4883E4F0            <1>  and rsp, ~15
  1100 00000C29 E8(00000000)            	call fprintf
  1101                                          LEAVE
    49 00000C2E C9                  <1>  leave
  1102 00000C2F C9                              leave
  1103 00000C30 C3                              ret
  1104                                  
  1105                                  .Lemit:
  1106 00000C31 B800000000              	mov rax, 0
  1107                                          ENTER
    44 00000C36 C8000000            <1>  enter 0, 0
    45 00000C3A 4883E4F0            <1>  and rsp, ~15
  1108 00000C3E E8(00000000)            	call printf
  1109                                          LEAVE
    49 00000C43 C9                  <1>  leave
  1110 00000C44 EB00                    	jmp .Lend
  1111                                  
  1112                                  .Lend:
  1113                                  	LEAVE
    49 00000C46 C9                  <1>  leave
  1114 00000C47 C3                      	ret
  1115                                  
  1116                                  ;;; rdi: address of free variable
  1117                                  ;;; rsi: address of code-pointer
  1118                                  bind_primitive:
  1119 00000C48 C8000000                        enter 0, 0
  1120 00000C4C 57                              push rdi
  1121 00000C4D BF11000000                      mov rdi, (1 + 8 + 8)
  1122 00000C52 E8DBF7FFFF                      call malloc
  1123 00000C57 5F                              pop rdi
  1124 00000C58 C60004                          mov byte [rax], T_closure
  1125 00000C5B 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1126 00000C63 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1127 00000C67 488907                          mov qword [rdi], rax
  1128 00000C6A 48B8-                           mov rax, sob_void
  1128 00000C6C [0000000000000000] 
  1129 00000C74 C9                              leave
  1130 00000C75 C3                              ret
  1131                                  
  1132                                  L_code_ptr_ash:
  1133 00000C76 C8000000                        enter 0, 0
  1134 00000C7A 48837D1802                      cmp COUNT, 2
  1135 00000C7F 0F8510140000                    jne L_error_arg_count_2
  1136 00000C85 488B7D20                        mov rdi, PARAM(0)
  1137                                          assert_integer(rdi)
    53 00000C89 803F11              <1>  cmp byte [%1], %2
    54 00000C8C 0F85A2140000        <1>  jne L_error_incorrect_type
  1138 00000C92 488B4D28                        mov rcx, PARAM(1)
  1139                                          assert_integer(rcx)
    53 00000C96 803911              <1>  cmp byte [%1], %2
    54 00000C99 0F8595140000        <1>  jne L_error_incorrect_type
  1140 00000C9F 488B7F01                        mov rdi, qword [rdi + 1]
  1141 00000CA3 488B4901                        mov rcx, qword [rcx + 1]
  1142 00000CA7 4883F900                        cmp rcx, 0
  1143 00000CAB 7C0F                            jl .L_negative
  1144                                  .L_loop_positive:
  1145 00000CAD 4883F900                        cmp rcx, 0
  1146 00000CB1 741B                            je .L_exit
  1147 00000CB3 48D3E7                          sal rdi, cl
  1148 00000CB6 48C1E908                        shr rcx, 8
  1149 00000CBA EBF1                            jmp .L_loop_positive
  1150                                  .L_negative:
  1151 00000CBC 48F7D9                          neg rcx
  1152                                  .L_loop_negative:
  1153 00000CBF 4883F900                        cmp rcx, 0
  1154 00000CC3 7409                            je .L_exit
  1155 00000CC5 48D3FF                          sar rdi, cl
  1156 00000CC8 48C1E908                        shr rcx, 8
  1157 00000CCC EBF1                            jmp .L_loop_negative
  1158                                  .L_exit:
  1159 00000CCE E8DC120000                      call make_integer
  1160 00000CD3 C9                              leave
  1161 00000CD4 C22000                          ret AND_KILL_FRAME(2)
  1162                                  
  1163                                  L_code_ptr_logand:
  1164 00000CD7 C8000000                        enter 0, 0
  1165 00000CDB 48837D1802                      cmp COUNT, 2
  1166 00000CE0 0F85AF130000                    jne L_error_arg_count_2
  1167 00000CE6 4C8B4520                        mov r8, PARAM(0)
  1168                                          assert_integer(r8)
    53 00000CEA 41803811            <1>  cmp byte [%1], %2
    54 00000CEE 0F8540140000        <1>  jne L_error_incorrect_type
  1169 00000CF4 4C8B4D28                        mov r9, PARAM(1)
  1170                                          assert_integer(r9)
    53 00000CF8 41803911            <1>  cmp byte [%1], %2
    54 00000CFC 0F8532140000        <1>  jne L_error_incorrect_type
  1171 00000D02 498B7801                        mov rdi, qword [r8 + 1]
  1172 00000D06 49237901                        and rdi, qword [r9 + 1]
  1173 00000D0A E8A0120000                      call make_integer
  1174 00000D0F C9                              leave
  1175 00000D10 C22000                          ret AND_KILL_FRAME(2)
  1176                                  
  1177                                  L_code_ptr_logor:
  1178 00000D13 C8000000                        enter 0, 0
  1179 00000D17 48837D1802                      cmp COUNT, 2
  1180 00000D1C 0F8573130000                    jne L_error_arg_count_2
  1181 00000D22 4C8B4520                        mov r8, PARAM(0)
  1182                                          assert_integer(r8)
    53 00000D26 41803811            <1>  cmp byte [%1], %2
    54 00000D2A 0F8504140000        <1>  jne L_error_incorrect_type
  1183 00000D30 4C8B4D28                        mov r9, PARAM(1)
  1184                                          assert_integer(r9)
    53 00000D34 41803911            <1>  cmp byte [%1], %2
    54 00000D38 0F85F6130000        <1>  jne L_error_incorrect_type
  1185 00000D3E 498B7801                        mov rdi, qword [r8 + 1]
  1186 00000D42 490B7901                        or rdi, qword [r9 + 1]
  1187 00000D46 E864120000                      call make_integer
  1188 00000D4B C9                              leave
  1189 00000D4C C22000                          ret AND_KILL_FRAME(2)
  1190                                  
  1191                                  L_code_ptr_logxor:
  1192 00000D4F C8000000                        enter 0, 0
  1193 00000D53 48837D1802                      cmp COUNT, 2
  1194 00000D58 0F8537130000                    jne L_error_arg_count_2
  1195 00000D5E 4C8B4520                        mov r8, PARAM(0)
  1196                                          assert_integer(r8)
    53 00000D62 41803811            <1>  cmp byte [%1], %2
    54 00000D66 0F85C8130000        <1>  jne L_error_incorrect_type
  1197 00000D6C 4C8B4D28                        mov r9, PARAM(1)
  1198                                          assert_integer(r9)
    53 00000D70 41803911            <1>  cmp byte [%1], %2
    54 00000D74 0F85BA130000        <1>  jne L_error_incorrect_type
  1199 00000D7A 498B7801                        mov rdi, qword [r8 + 1]
  1200 00000D7E 49337901                        xor rdi, qword [r9 + 1]
  1201 00000D82 E828120000                      call make_integer
  1202                                          LEAVE
    49 00000D87 C9                  <1>  leave
  1203 00000D88 C22000                          ret AND_KILL_FRAME(2)
  1204                                  
  1205                                  L_code_ptr_lognot:
  1206 00000D8B C8000000                        enter 0, 0
  1207 00000D8F 48837D1801                      cmp COUNT, 1
  1208 00000D94 0F85C6120000                    jne L_error_arg_count_1
  1209 00000D9A 4C8B4520                        mov r8, PARAM(0)
  1210                                          assert_integer(r8)
    53 00000D9E 41803811            <1>  cmp byte [%1], %2
    54 00000DA2 0F858C130000        <1>  jne L_error_incorrect_type
  1211 00000DA8 498B7801                        mov rdi, qword [r8 + 1]
  1212 00000DAC 48F7D7                          not rdi
  1213 00000DAF E8FB110000                      call make_integer
  1214 00000DB4 C9                              leave
  1215 00000DB5 C21800                          ret AND_KILL_FRAME(1)
  1216                                  
  1217                                  L_code_ptr_bin_apply:
  1218                                  ;;; fill in for final project!
  1219                                  
  1220                                  L_code_ptr_is_null:
  1221 00000DB8 C8000000                        enter 0, 0
  1222 00000DBC 48837D1801                      cmp COUNT, 1
  1223 00000DC1 0F8599120000                    jne L_error_arg_count_1
  1224 00000DC7 488B4520                        mov rax, PARAM(0)
  1225 00000DCB 803801                          cmp byte [rax], T_nil
  1226 00000DCE 750C                            jne .L_false
  1227 00000DD0 48B8-                           mov rax, sob_boolean_true
  1227 00000DD2 [0300000000000000] 
  1228 00000DDA EB0A                            jmp .L_end
  1229                                  .L_false:
  1230 00000DDC 48B8-                           mov rax, sob_boolean_false
  1230 00000DDE [0200000000000000] 
  1231                                  .L_end:
  1232 00000DE6 C9                              leave
  1233 00000DE7 C21800                          ret AND_KILL_FRAME(1)
  1234                                  
  1235                                  L_code_ptr_is_pair:
  1236 00000DEA C8000000                        enter 0, 0
  1237 00000DEE 48837D1801                      cmp COUNT, 1
  1238 00000DF3 0F8567120000                    jne L_error_arg_count_1
  1239 00000DF9 488B4520                        mov rax, PARAM(0)
  1240 00000DFD 803821                          cmp byte [rax], T_pair
  1241 00000E00 750C                            jne .L_false
  1242 00000E02 48B8-                           mov rax, sob_boolean_true
  1242 00000E04 [0300000000000000] 
  1243 00000E0C EB0A                            jmp .L_end
  1244                                  .L_false:
  1245 00000E0E 48B8-                           mov rax, sob_boolean_false
  1245 00000E10 [0200000000000000] 
  1246                                  .L_end:
  1247 00000E18 C9                              leave
  1248 00000E19 C21800                          ret AND_KILL_FRAME(1)
  1249                                          
  1250                                  L_code_ptr_is_void:
  1251 00000E1C C8000000                        enter 0, 0
  1252 00000E20 48837D1801                      cmp COUNT, 1
  1253 00000E25 0F8535120000                    jne L_error_arg_count_1
  1254 00000E2B 488B4520                        mov rax, PARAM(0)
  1255 00000E2F 803800                          cmp byte [rax], T_void
  1256 00000E32 750C                            jne .L_false
  1257 00000E34 48B8-                           mov rax, sob_boolean_true
  1257 00000E36 [0300000000000000] 
  1258 00000E3E EB0A                            jmp .L_end
  1259                                  .L_false:
  1260 00000E40 48B8-                           mov rax, sob_boolean_false
  1260 00000E42 [0200000000000000] 
  1261                                  .L_end:
  1262 00000E4A C9                              leave
  1263 00000E4B C21800                          ret AND_KILL_FRAME(1)
  1264                                  
  1265                                  L_code_ptr_is_char:
  1266 00000E4E C8000000                        enter 0, 0
  1267 00000E52 48837D1801                      cmp COUNT, 1
  1268 00000E57 0F8503120000                    jne L_error_arg_count_1
  1269 00000E5D 488B4520                        mov rax, PARAM(0)
  1270 00000E61 803802                          cmp byte [rax], T_char
  1271 00000E64 750C                            jne .L_false
  1272 00000E66 48B8-                           mov rax, sob_boolean_true
  1272 00000E68 [0300000000000000] 
  1273 00000E70 EB0A                            jmp .L_end
  1274                                  .L_false:
  1275 00000E72 48B8-                           mov rax, sob_boolean_false
  1275 00000E74 [0200000000000000] 
  1276                                  .L_end:
  1277 00000E7C C9                              leave
  1278 00000E7D C21800                          ret AND_KILL_FRAME(1)
  1279                                  
  1280                                  L_code_ptr_is_string:
  1281 00000E80 C8000000                        enter 0, 0
  1282 00000E84 48837D1801                      cmp COUNT, 1
  1283 00000E89 0F85D1110000                    jne L_error_arg_count_1
  1284 00000E8F 488B4520                        mov rax, PARAM(0)
  1285 00000E93 803803                          cmp byte [rax], T_string
  1286 00000E96 750C                            jne .L_false
  1287 00000E98 48B8-                           mov rax, sob_boolean_true
  1287 00000E9A [0300000000000000] 
  1288 00000EA2 EB0A                            jmp .L_end
  1289                                  .L_false:
  1290 00000EA4 48B8-                           mov rax, sob_boolean_false
  1290 00000EA6 [0200000000000000] 
  1291                                  .L_end:
  1292 00000EAE C9                              leave
  1293 00000EAF C21800                          ret AND_KILL_FRAME(1)
  1294                                  
  1295                                  L_code_ptr_is_symbol:
  1296 00000EB2 C8000000                        enter 0, 0
  1297 00000EB6 48837D1801                      cmp COUNT, 1
  1298 00000EBB 0F859F110000                    jne L_error_arg_count_1
  1299 00000EC1 4C8B4520                        mov r8, PARAM(0)
  1300 00000EC5 41802040                        and byte [r8], T_symbol
  1301 00000EC9 740C                            jz .L_false
  1302 00000ECB 48B8-                           mov rax, sob_boolean_true
  1302 00000ECD [0300000000000000] 
  1303 00000ED5 EB0A                            jmp .L_exit
  1304                                  .L_false:
  1305 00000ED7 48B8-                           mov rax, sob_boolean_false
  1305 00000ED9 [0200000000000000] 
  1306                                  .L_exit:
  1307 00000EE1 C9                              leave
  1308 00000EE2 C21800                          ret AND_KILL_FRAME(1)
  1309                                  
  1310                                  L_code_ptr_is_uninterned_symbol:
  1311 00000EE5 C8000000                        enter 0, 0
  1312 00000EE9 48837D1801                      cmp COUNT, 1
  1313 00000EEE 0F856C110000                    jne L_error_arg_count_1
  1314 00000EF4 4C8B4520                        mov r8, PARAM(0)
  1315 00000EF8 41803842                        cmp byte [r8], T_uninterned_symbol
  1316 00000EFC 750C                            jne .L_false
  1317 00000EFE 48B8-                           mov rax, sob_boolean_true
  1317 00000F00 [0300000000000000] 
  1318 00000F08 EB0A                            jmp .L_exit
  1319                                  .L_false:
  1320 00000F0A 48B8-                           mov rax, sob_boolean_false
  1320 00000F0C [0200000000000000] 
  1321                                  .L_exit:
  1322 00000F14 C9                              leave
  1323 00000F15 C21800                          ret AND_KILL_FRAME(1)
  1324                                  
  1325                                  L_code_ptr_is_interned_symbol:
  1326 00000F18 C8000000                        enter 0, 0
  1327 00000F1C 48837D1801                      cmp COUNT, 1
  1328 00000F21 0F8539110000                    jne L_error_arg_count_1
  1329 00000F27 488B4520                        mov rax, PARAM(0)
  1330 00000F2B 803841                          cmp byte [rax], T_interned_symbol
  1331 00000F2E 750C                            jne .L_false
  1332 00000F30 48B8-                           mov rax, sob_boolean_true
  1332 00000F32 [0300000000000000] 
  1333 00000F3A EB0A                            jmp .L_end
  1334                                  .L_false:
  1335 00000F3C 48B8-                           mov rax, sob_boolean_false
  1335 00000F3E [0200000000000000] 
  1336                                  .L_end:
  1337 00000F46 C9                              leave
  1338 00000F47 C21800                          ret AND_KILL_FRAME(1)
  1339                                  
  1340                                  L_code_ptr_gensym:
  1341 00000F4A C8000000                        enter 0, 0
  1342 00000F4E 48837D1800                      cmp COUNT, 0
  1343 00000F53 0F85D2100000                    jne L_error_arg_count_0
  1344 00000F59 48FF0425[15030000]              inc qword [gensym_count]
  1345 00000F61 BF09000000                      mov rdi, (1 + 8)
  1346 00000F66 E8C7F4FFFF                      call malloc
  1347 00000F6B C60042                          mov byte [rax], T_uninterned_symbol
  1348 00000F6E 488B0C25[15030000]              mov rcx, qword [gensym_count]
  1349 00000F76 48894801                        mov qword [rax + 1], rcx
  1350 00000F7A C9                              leave
  1351 00000F7B C21000                          ret AND_KILL_FRAME(0)
  1352                                  
  1353                                  L_code_ptr_is_vector:
  1354 00000F7E C8000000                        enter 0, 0
  1355 00000F82 48837D1801                      cmp COUNT, 1
  1356 00000F87 0F85D3100000                    jne L_error_arg_count_1
  1357 00000F8D 488B4520                        mov rax, PARAM(0)
  1358 00000F91 803822                          cmp byte [rax], T_vector
  1359 00000F94 750C                            jne .L_false
  1360 00000F96 48B8-                           mov rax, sob_boolean_true
  1360 00000F98 [0300000000000000] 
  1361 00000FA0 EB0A                            jmp .L_end
  1362                                  .L_false:
  1363 00000FA2 48B8-                           mov rax, sob_boolean_false
  1363 00000FA4 [0200000000000000] 
  1364                                  .L_end:
  1365 00000FAC C9                              leave
  1366 00000FAD C21800                          ret AND_KILL_FRAME(1)
  1367                                  
  1368                                  L_code_ptr_is_closure:
  1369 00000FB0 C8000000                        enter 0, 0
  1370 00000FB4 48837D1801                      cmp COUNT, 1
  1371 00000FB9 0F85A1100000                    jne L_error_arg_count_1
  1372 00000FBF 488B4520                        mov rax, PARAM(0)
  1373 00000FC3 803804                          cmp byte [rax], T_closure
  1374 00000FC6 750C                            jne .L_false
  1375 00000FC8 48B8-                           mov rax, sob_boolean_true
  1375 00000FCA [0300000000000000] 
  1376 00000FD2 EB0A                            jmp .L_end
  1377                                  .L_false:
  1378 00000FD4 48B8-                           mov rax, sob_boolean_false
  1378 00000FD6 [0200000000000000] 
  1379                                  .L_end:
  1380 00000FDE C9                              leave
  1381 00000FDF C21800                          ret AND_KILL_FRAME(1)
  1382                                  
  1383                                  L_code_ptr_is_real:
  1384 00000FE2 C8000000                        enter 0, 0
  1385 00000FE6 48837D1801                      cmp COUNT, 1
  1386 00000FEB 0F856F100000                    jne L_error_arg_count_1
  1387 00000FF1 488B4520                        mov rax, PARAM(0)
  1388 00000FF5 803813                          cmp byte [rax], T_real
  1389 00000FF8 750C                            jne .L_false
  1390 00000FFA 48B8-                           mov rax, sob_boolean_true
  1390 00000FFC [0300000000000000] 
  1391 00001004 EB0A                            jmp .L_end
  1392                                  .L_false:
  1393 00001006 48B8-                           mov rax, sob_boolean_false
  1393 00001008 [0200000000000000] 
  1394                                  .L_end:
  1395 00001010 C9                              leave
  1396 00001011 C21800                          ret AND_KILL_FRAME(1)
  1397                                  
  1398                                  L_code_ptr_is_fraction:
  1399 00001014 C8000000                        enter 0, 0
  1400 00001018 48837D1801                      cmp COUNT, 1
  1401 0000101D 0F853D100000                    jne L_error_arg_count_1
  1402 00001023 488B4520                        mov rax, PARAM(0)
  1403 00001027 803812                          cmp byte [rax], T_fraction
  1404 0000102A 750C                            jne .L_false
  1405 0000102C 48B8-                           mov rax, sob_boolean_true
  1405 0000102E [0300000000000000] 
  1406 00001036 EB0A                            jmp .L_end
  1407                                  .L_false:
  1408 00001038 48B8-                           mov rax, sob_boolean_false
  1408 0000103A [0200000000000000] 
  1409                                  .L_end:
  1410 00001042 C9                              leave
  1411 00001043 C21800                          ret AND_KILL_FRAME(1)
  1412                                  
  1413                                  L_code_ptr_is_boolean:
  1414 00001046 C8000000                        enter 0, 0
  1415 0000104A 48837D1801                      cmp COUNT, 1
  1416 0000104F 0F850B100000                    jne L_error_arg_count_1
  1417 00001055 488B4520                        mov rax, PARAM(0)
  1418 00001059 8A18                            mov bl, byte [rax]
  1419 0000105B 80E308                          and bl, T_boolean
  1420 0000105E 740C                            je .L_false
  1421 00001060 48B8-                           mov rax, sob_boolean_true
  1421 00001062 [0300000000000000] 
  1422 0000106A EB0A                            jmp .L_end
  1423                                  .L_false:
  1424 0000106C 48B8-                           mov rax, sob_boolean_false
  1424 0000106E [0200000000000000] 
  1425                                  .L_end:
  1426 00001076 C9                              leave
  1427 00001077 C21800                          ret AND_KILL_FRAME(1)
  1428                                          
  1429                                  L_code_ptr_is_boolean_false:
  1430 0000107A C8000000                        enter 0, 0
  1431 0000107E 48837D1801                      cmp COUNT, 1
  1432 00001083 0F85D70F0000                    jne L_error_arg_count_1
  1433 00001089 488B4520                        mov rax, PARAM(0)
  1434 0000108D 8A18                            mov bl, byte [rax]
  1435 0000108F 80FB09                          cmp bl, T_boolean_false
  1436 00001092 750C                            jne .L_false
  1437 00001094 48B8-                           mov rax, sob_boolean_true
  1437 00001096 [0300000000000000] 
  1438 0000109E EB0A                            jmp .L_end
  1439                                  .L_false:
  1440 000010A0 48B8-                           mov rax, sob_boolean_false
  1440 000010A2 [0200000000000000] 
  1441                                  .L_end:
  1442 000010AA C9                              leave
  1443 000010AB C21800                          ret AND_KILL_FRAME(1)
  1444                                  
  1445                                  L_code_ptr_is_boolean_true:
  1446 000010AE C8000000                        enter 0, 0
  1447 000010B2 48837D1801                      cmp COUNT, 1
  1448 000010B7 0F85A30F0000                    jne L_error_arg_count_1
  1449 000010BD 488B4520                        mov rax, PARAM(0)
  1450 000010C1 8A18                            mov bl, byte [rax]
  1451 000010C3 80FB0A                          cmp bl, T_boolean_true
  1452 000010C6 750C                            jne .L_false
  1453 000010C8 48B8-                           mov rax, sob_boolean_true
  1453 000010CA [0300000000000000] 
  1454 000010D2 EB0A                            jmp .L_end
  1455                                  .L_false:
  1456 000010D4 48B8-                           mov rax, sob_boolean_false
  1456 000010D6 [0200000000000000] 
  1457                                  .L_end:
  1458 000010DE C9                              leave
  1459 000010DF C21800                          ret AND_KILL_FRAME(1)
  1460                                  
  1461                                  L_code_ptr_is_number:
  1462 000010E2 C8000000                        enter 0, 0
  1463 000010E6 48837D1801                      cmp COUNT, 1
  1464 000010EB 0F856F0F0000                    jne L_error_arg_count_1
  1465 000010F1 488B4520                        mov rax, PARAM(0)
  1466 000010F5 8A18                            mov bl, byte [rax]
  1467 000010F7 80E310                          and bl, T_number
  1468 000010FA 740C                            jz .L_false
  1469 000010FC 48B8-                           mov rax, sob_boolean_true
  1469 000010FE [0300000000000000] 
  1470 00001106 EB0A                            jmp .L_end
  1471                                  .L_false:
  1472 00001108 48B8-                           mov rax, sob_boolean_false
  1472 0000110A [0200000000000000] 
  1473                                  .L_end:
  1474 00001112 C9                              leave
  1475 00001113 C21800                          ret AND_KILL_FRAME(1)
  1476                                          
  1477                                  L_code_ptr_is_collection:
  1478 00001116 C8000000                        enter 0, 0
  1479 0000111A 48837D1801                      cmp COUNT, 1
  1480 0000111F 0F853B0F0000                    jne L_error_arg_count_1
  1481 00001125 488B4520                        mov rax, PARAM(0)
  1482 00001129 8A18                            mov bl, byte [rax]
  1483 0000112B 80E320                          and bl, T_collection
  1484 0000112E 740C                            je .L_false
  1485 00001130 48B8-                           mov rax, sob_boolean_true
  1485 00001132 [0300000000000000] 
  1486 0000113A EB0A                            jmp .L_end
  1487                                  .L_false:
  1488 0000113C 48B8-                           mov rax, sob_boolean_false
  1488 0000113E [0200000000000000] 
  1489                                  .L_end:
  1490 00001146 C9                              leave
  1491 00001147 C21800                          ret AND_KILL_FRAME(1)
  1492                                  
  1493                                  L_code_ptr_cons:
  1494 0000114A C8000000                        enter 0, 0
  1495 0000114E 48837D1802                      cmp COUNT, 2
  1496 00001153 0F853C0F0000                    jne L_error_arg_count_2
  1497 00001159 BF11000000                      mov rdi, (1 + 8 + 8)
  1498 0000115E E8CFF2FFFF                      call malloc
  1499 00001163 C60021                          mov byte [rax], T_pair
  1500 00001166 488B5D20                        mov rbx, PARAM(0)
  1501 0000116A 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1502 0000116E 488B5D28                        mov rbx, PARAM(1)
  1503 00001172 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1504 00001176 C9                              leave
  1505 00001177 C22000                          ret AND_KILL_FRAME(2)
  1506                                  
  1507                                  L_code_ptr_display_sexpr:
  1508 0000117A C8000000                        enter 0, 0
  1509 0000117E 48837D1801                      cmp COUNT, 1
  1510 00001183 0F85D70E0000                    jne L_error_arg_count_1
  1511 00001189 488B7D20                        mov rdi, PARAM(0)
  1512 0000118D E821F5FFFF                      call print_sexpr
  1513 00001192 48B8-                           mov rax, sob_void
  1513 00001194 [0000000000000000] 
  1514 0000119C C9                              leave
  1515 0000119D C21800                          ret AND_KILL_FRAME(1)
  1516                                  
  1517                                  L_code_ptr_write_char:
  1518 000011A0 C8000000                        enter 0, 0
  1519 000011A4 48837D1801                      cmp COUNT, 1
  1520 000011A9 0F85B10E0000                    jne L_error_arg_count_1
  1521 000011AF 488B4520                        mov rax, PARAM(0)
  1522                                          assert_char(rax)
    53 000011B3 803802              <1>  cmp byte [%1], %2
    54 000011B6 0F85780F0000        <1>  jne L_error_incorrect_type
  1523 000011BC 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1524 000011BF 4825FF000000                    and rax, 255
  1525 000011C5 48BF-                           mov rdi, fmt_char
  1525 000011C7 [1D03000000000000] 
  1526 000011CF 4889C6                          mov rsi, rax
  1527 000011D2 B800000000                      mov rax, 0
  1528                                          ENTER
    44 000011D7 C8000000            <1>  enter 0, 0
    45 000011DB 4883E4F0            <1>  and rsp, ~15
  1529 000011DF E8(00000000)                    call printf
  1530                                          LEAVE
    49 000011E4 C9                  <1>  leave
  1531 000011E5 48B8-                           mov rax, sob_void
  1531 000011E7 [0000000000000000] 
  1532 000011EF C9                              leave
  1533 000011F0 C21800                          ret AND_KILL_FRAME(1)
  1534                                  
  1535                                  L_code_ptr_car:
  1536 000011F3 C8000000                        enter 0, 0
  1537 000011F7 48837D1801                      cmp COUNT, 1
  1538 000011FC 0F855E0E0000                    jne L_error_arg_count_1
  1539 00001202 488B4520                        mov rax, PARAM(0)
  1540                                          assert_pair(rax)
    53 00001206 803821              <1>  cmp byte [%1], %2
    54 00001209 0F85250F0000        <1>  jne L_error_incorrect_type
  1541 0000120F 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1542 00001213 C9                              leave
  1543 00001214 C21800                          ret AND_KILL_FRAME(1)
  1544                                          
  1545                                  L_code_ptr_cdr:
  1546 00001217 C8000000                        enter 0, 0
  1547 0000121B 48837D1801                      cmp COUNT, 1
  1548 00001220 0F853A0E0000                    jne L_error_arg_count_1
  1549 00001226 488B4520                        mov rax, PARAM(0)
  1550                                          assert_pair(rax)
    53 0000122A 803821              <1>  cmp byte [%1], %2
    54 0000122D 0F85010F0000        <1>  jne L_error_incorrect_type
  1551 00001233 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1552 00001237 C9                              leave
  1553 00001238 C21800                          ret AND_KILL_FRAME(1)
  1554                                          
  1555                                  L_code_ptr_string_length:
  1556 0000123B C8000000                        enter 0, 0
  1557 0000123F 48837D1801                      cmp COUNT, 1
  1558 00001244 0F85160E0000                    jne L_error_arg_count_1
  1559 0000124A 488B4520                        mov rax, PARAM(0)
  1560                                          assert_string(rax)
    53 0000124E 803803              <1>  cmp byte [%1], %2
    54 00001251 0F85DD0E0000        <1>  jne L_error_incorrect_type
  1561 00001257 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1562 0000125B E84F0D0000                      call make_integer
  1563 00001260 C9                              leave
  1564 00001261 C21800                          ret AND_KILL_FRAME(1)
  1565                                  
  1566                                  L_code_ptr_vector_length:
  1567 00001264 C8000000                        enter 0, 0
  1568 00001268 48837D1801                      cmp COUNT, 1
  1569 0000126D 0F85ED0D0000                    jne L_error_arg_count_1
  1570 00001273 488B4520                        mov rax, PARAM(0)
  1571                                          assert_vector(rax)
    53 00001277 803822              <1>  cmp byte [%1], %2
    54 0000127A 0F85B40E0000        <1>  jne L_error_incorrect_type
  1572 00001280 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1573 00001284 E8260D0000                      call make_integer
  1574 00001289 C9                              leave
  1575 0000128A C21800                          ret AND_KILL_FRAME(1)
  1576                                  
  1577                                  L_code_ptr_real_to_integer:
  1578 0000128D C8000000                        enter 0, 0
  1579 00001291 48837D1801                      cmp COUNT, 1
  1580 00001296 0F85C40D0000                    jne L_error_arg_count_1
  1581 0000129C 488B5D20                        mov rbx, PARAM(0)
  1582                                          assert_real(rbx)
    53 000012A0 803B13              <1>  cmp byte [%1], %2
    54 000012A3 0F858B0E0000        <1>  jne L_error_incorrect_type
  1583 000012A9 F20F104301                      movsd xmm0, qword [rbx + 1]
  1584 000012AE F2480F2CF8                      cvttsd2si rdi, xmm0
  1585 000012B3 E8F70C0000                      call make_integer
  1586 000012B8 C9                              leave
  1587 000012B9 C21800                          ret AND_KILL_FRAME(1)
  1588                                  
  1589                                  L_code_ptr_exit:
  1590 000012BC C8000000                        enter 0, 0
  1591 000012C0 48837D1800                      cmp COUNT, 0
  1592 000012C5 0F85600D0000                    jne L_error_arg_count_0
  1593 000012CB B800000000                      mov rax, 0
  1594 000012D0 E8(00000000)                    call exit
  1595                                  
  1596                                  L_code_ptr_integer_to_real:
  1597 000012D5 C8000000                        enter 0, 0
  1598 000012D9 48837D1801                      cmp COUNT, 1
  1599 000012DE 0F857C0D0000                    jne L_error_arg_count_1
  1600 000012E4 488B4520                        mov rax, PARAM(0)
  1601                                          assert_integer(rax)
    53 000012E8 803811              <1>  cmp byte [%1], %2
    54 000012EB 0F85430E0000        <1>  jne L_error_incorrect_type
  1602 000012F1 FF7001                          push qword [rax + 1]
  1603 000012F4 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1604 000012FA E8980C0000                      call make_real
  1605 000012FF C9                              leave
  1606 00001300 C21800                          ret AND_KILL_FRAME(1)
  1607                                  
  1608                                  L_code_ptr_fraction_to_real:
  1609 00001303 C8000000                        enter 0, 0
  1610 00001307 48837D1801                      cmp COUNT, 1
  1611 0000130C 0F854E0D0000                    jne L_error_arg_count_1
  1612 00001312 488B4520                        mov rax, PARAM(0)
  1613                                          assert_fraction(rax)
    53 00001316 803812              <1>  cmp byte [%1], %2
    54 00001319 0F85150E0000        <1>  jne L_error_incorrect_type
  1614 0000131F FF7001                          push qword [rax + 1]
  1615 00001322 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1616 00001328 FF7009                          push qword [rax + 1 + 8]
  1617 0000132B F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1618 00001331 F20F5EC1                        divsd xmm0, xmm1
  1619 00001335 E85D0C0000                      call make_real
  1620 0000133A C9                              leave
  1621 0000133B C21800                          ret AND_KILL_FRAME(1)
  1622                                  
  1623                                  L_code_ptr_char_to_integer:
  1624 0000133E C8000000                        enter 0, 0
  1625 00001342 48837D1801                      cmp COUNT, 1
  1626 00001347 0F85130D0000                    jne L_error_arg_count_1
  1627 0000134D 488B4520                        mov rax, PARAM(0)
  1628                                          assert_char(rax)
    53 00001351 803802              <1>  cmp byte [%1], %2
    54 00001354 0F85DA0D0000        <1>  jne L_error_incorrect_type
  1629 0000135A 8A4001                          mov al, byte [rax + 1]
  1630 0000135D 4825FF000000                    and rax, 255
  1631 00001363 4889C7                          mov rdi, rax
  1632 00001366 E8440C0000                      call make_integer
  1633 0000136B C9                              leave
  1634 0000136C C21800                          ret AND_KILL_FRAME(1)
  1635                                  
  1636                                  L_code_ptr_integer_to_fraction:
  1637 0000136F C8000000                        enter 0, 0
  1638 00001373 48837D1801                      cmp COUNT, 1
  1639 00001378 0F85E20C0000                    jne L_error_arg_count_1
  1640 0000137E 4C8B4520                        mov r8, PARAM(0)
  1641                                          assert_integer(r8)
    53 00001382 41803811            <1>  cmp byte [%1], %2
    54 00001386 0F85A80D0000        <1>  jne L_error_incorrect_type
  1642 0000138C BF11000000                      mov rdi, (1 + 8 + 8)
  1643 00001391 E89CF0FFFF                      call malloc
  1644 00001396 498B5801                        mov rbx, qword [r8 + 1]
  1645 0000139A C60012                          mov byte [rax], T_fraction
  1646 0000139D 48895801                        mov qword [rax + 1], rbx
  1647 000013A1 48C7400901000000                mov qword [rax + 1 + 8], 1
  1648 000013A9 C9                              leave
  1649 000013AA C21800                          ret AND_KILL_FRAME(1)
  1650                                  
  1651                                  L_code_ptr_integer_to_char:
  1652 000013AD C8000000                        enter 0, 0
  1653 000013B1 48837D1801                      cmp COUNT, 1
  1654 000013B6 0F85A40C0000                    jne L_error_arg_count_1
  1655 000013BC 488B4520                        mov rax, PARAM(0)
  1656                                          assert_integer(rax)
    53 000013C0 803811              <1>  cmp byte [%1], %2
    54 000013C3 0F856B0D0000        <1>  jne L_error_incorrect_type
  1657 000013C9 488B5801                        mov rbx, qword [rax + 1]
  1658 000013CD 4883FB00                        cmp rbx, 0
  1659 000013D1 0F8EF20B0000                    jle L_error_integer_range
  1660 000013D7 4881FB00010000                  cmp rbx, 256
  1661 000013DE 0F8DE50B0000                    jge L_error_integer_range
  1662 000013E4 BF02000000                      mov rdi, (1 + 1)
  1663 000013E9 E844F0FFFF                      call malloc
  1664 000013EE C60002                          mov byte [rax], T_char
  1665 000013F1 885801                          mov byte [rax + 1], bl
  1666 000013F4 C9                              leave
  1667 000013F5 C21800                          ret AND_KILL_FRAME(1)
  1668                                  
  1669                                  L_code_ptr_trng:
  1670 000013F8 C8000000                        enter 0, 0
  1671 000013FC 48837D1800                      cmp COUNT, 0
  1672 00001401 0F85240C0000                    jne L_error_arg_count_0
  1673 00001407 480FC7F7                        rdrand rdi
  1674 0000140B 48D1EF                          shr rdi, 1
  1675 0000140E E89C0B0000                      call make_integer
  1676 00001413 C9                              leave
  1677 00001414 C21000                          ret AND_KILL_FRAME(0)
  1678                                  
  1679                                  L_code_ptr_is_zero:
  1680 00001417 C8000000                        enter 0, 0
  1681 0000141B 48837D1801                      cmp COUNT, 1
  1682 00001420 0F853A0C0000                    jne L_error_arg_count_1
  1683 00001426 488B4520                        mov rax, PARAM(0)
  1684 0000142A 803811                          cmp byte [rax], T_integer
  1685 0000142D 740F                            je .L_integer
  1686 0000142F 803812                          cmp byte [rax], T_fraction
  1687 00001432 7413                            je .L_fraction
  1688 00001434 803813                          cmp byte [rax], T_real
  1689 00001437 7417                            je .L_real
  1690 00001439 E9F60C0000                      jmp L_error_incorrect_type
  1691                                  .L_integer:
  1692 0000143E 4883780100                      cmp qword [rax + 1], 0
  1693 00001443 7429                            je .L_zero
  1694 00001445 EB1B                            jmp .L_not_zero
  1695                                  .L_fraction:
  1696 00001447 4883780100                      cmp qword [rax + 1], 0
  1697 0000144C 7420                            je .L_zero
  1698 0000144E EB12                            jmp .L_not_zero
  1699                                  .L_real:
  1700 00001450 660FEFC0                        pxor xmm0, xmm0
  1701 00001454 FF7001                          push qword [rax + 1]
  1702 00001457 F20F100C24                      movsd xmm1, qword [rsp]
  1703 0000145C 660F2EC1                        ucomisd xmm0, xmm1
  1704 00001460 740C                            je .L_zero
  1705                                  .L_not_zero:
  1706 00001462 48B8-                           mov rax, sob_boolean_false
  1706 00001464 [0200000000000000] 
  1707 0000146C EB0A                            jmp .L_end
  1708                                  .L_zero:
  1709 0000146E 48B8-                           mov rax, sob_boolean_true
  1709 00001470 [0300000000000000] 
  1710                                  .L_end:
  1711 00001478 C9                              leave
  1712 00001479 C21800                          ret AND_KILL_FRAME(1)
  1713                                  
  1714                                  L_code_ptr_is_integer:
  1715 0000147C C8000000                        enter 0, 0
  1716 00001480 48837D1801                      cmp COUNT, 1
  1717 00001485 0F85D50B0000                    jne L_error_arg_count_1
  1718 0000148B 488B4520                        mov rax, PARAM(0)
  1719 0000148F 803811                          cmp byte [rax], T_integer
  1720 00001492 750C                            jne .L_false
  1721 00001494 48B8-                           mov rax, sob_boolean_true
  1721 00001496 [0300000000000000] 
  1722 0000149E EB0A                            jmp .L_exit
  1723                                  .L_false:
  1724 000014A0 48B8-                           mov rax, sob_boolean_false
  1724 000014A2 [0200000000000000] 
  1725                                  .L_exit:
  1726 000014AA C9                              leave
  1727 000014AB C21800                          ret AND_KILL_FRAME(1)
  1728                                  
  1729                                  L_code_ptr_raw_bin_add_rr:
  1730 000014AE C8000000                        enter 0, 0
  1731 000014B2 48837D1802                      cmp COUNT, 2
  1732 000014B7 0F85D80B0000                    jne L_error_arg_count_2
  1733 000014BD 488B5D20                        mov rbx, PARAM(0)
  1734                                          assert_real(rbx)
    53 000014C1 803B13              <1>  cmp byte [%1], %2
    54 000014C4 0F856A0C0000        <1>  jne L_error_incorrect_type
  1735 000014CA 488B4D28                        mov rcx, PARAM(1)
  1736                                          assert_real(rcx)
    53 000014CE 803913              <1>  cmp byte [%1], %2
    54 000014D1 0F855D0C0000        <1>  jne L_error_incorrect_type
  1737 000014D7 F20F104301                      movsd xmm0, qword [rbx + 1]
  1738 000014DC F20F104901                      movsd xmm1, qword [rcx + 1]
  1739 000014E1 F20F58C1                        addsd xmm0, xmm1
  1740 000014E5 E8AD0A0000                      call make_real
  1741 000014EA C9                              leave
  1742 000014EB C22000                          ret AND_KILL_FRAME(2)
  1743                                  
  1744                                  L_code_ptr_raw_bin_sub_rr:
  1745 000014EE C8000000                        enter 0, 0
  1746 000014F2 48837D1802                      cmp COUNT, 2
  1747 000014F7 0F85980B0000                    jne L_error_arg_count_2
  1748 000014FD 488B5D20                        mov rbx, PARAM(0)
  1749                                          assert_real(rbx)
    53 00001501 803B13              <1>  cmp byte [%1], %2
    54 00001504 0F852A0C0000        <1>  jne L_error_incorrect_type
  1750 0000150A 488B4D28                        mov rcx, PARAM(1)
  1751                                          assert_real(rcx)
    53 0000150E 803913              <1>  cmp byte [%1], %2
    54 00001511 0F851D0C0000        <1>  jne L_error_incorrect_type
  1752 00001517 F20F104301                      movsd xmm0, qword [rbx + 1]
  1753 0000151C F20F104901                      movsd xmm1, qword [rcx + 1]
  1754 00001521 F20F5CC1                        subsd xmm0, xmm1
  1755 00001525 E86D0A0000                      call make_real
  1756 0000152A C9                              leave
  1757 0000152B C22000                          ret AND_KILL_FRAME(2)
  1758                                  
  1759                                  L_code_ptr_raw_bin_mul_rr:
  1760 0000152E C8000000                        enter 0, 0
  1761 00001532 48837D1802                      cmp COUNT, 2
  1762 00001537 0F85580B0000                    jne L_error_arg_count_2
  1763 0000153D 488B5D20                        mov rbx, PARAM(0)
  1764                                          assert_real(rbx)
    53 00001541 803B13              <1>  cmp byte [%1], %2
    54 00001544 0F85EA0B0000        <1>  jne L_error_incorrect_type
  1765 0000154A 488B4D28                        mov rcx, PARAM(1)
  1766                                          assert_real(rcx)
    53 0000154E 803913              <1>  cmp byte [%1], %2
    54 00001551 0F85DD0B0000        <1>  jne L_error_incorrect_type
  1767 00001557 F20F104301                      movsd xmm0, qword [rbx + 1]
  1768 0000155C F20F104901                      movsd xmm1, qword [rcx + 1]
  1769 00001561 F20F59C1                        mulsd xmm0, xmm1
  1770 00001565 E82D0A0000                      call make_real
  1771 0000156A C9                              leave
  1772 0000156B C22000                          ret AND_KILL_FRAME(2)
  1773                                  
  1774                                  L_code_ptr_raw_bin_div_rr:
  1775 0000156E C8000000                        enter 0, 0
  1776 00001572 48837D1802                      cmp COUNT, 2
  1777 00001577 0F85180B0000                    jne L_error_arg_count_2
  1778 0000157D 488B5D20                        mov rbx, PARAM(0)
  1779                                          assert_real(rbx)
    53 00001581 803B13              <1>  cmp byte [%1], %2
    54 00001584 0F85AA0B0000        <1>  jne L_error_incorrect_type
  1780 0000158A 488B4D28                        mov rcx, PARAM(1)
  1781                                          assert_real(rcx)
    53 0000158E 803913              <1>  cmp byte [%1], %2
    54 00001591 0F859D0B0000        <1>  jne L_error_incorrect_type
  1782 00001597 F20F104301                      movsd xmm0, qword [rbx + 1]
  1783 0000159C F20F104901                      movsd xmm1, qword [rcx + 1]
  1784 000015A1 660FEFD2                        pxor xmm2, xmm2
  1785 000015A5 660F2ECA                        ucomisd xmm1, xmm2
  1786 000015A9 0F84B60B0000                    je L_error_division_by_zero
  1787 000015AF F20F5EC1                        divsd xmm0, xmm1
  1788 000015B3 E8DF090000                      call make_real
  1789 000015B8 C9                              leave
  1790 000015B9 C22000                          ret AND_KILL_FRAME(2)
  1791                                  
  1792                                  L_code_ptr_raw_bin_add_zz:
  1793 000015BC C8000000                	enter 0, 0
  1794 000015C0 48837D1802              	cmp COUNT, 2
  1795 000015C5 0F85CA0A0000            	jne L_error_arg_count_2
  1796 000015CB 4C8B4520                	mov r8, PARAM(0)
  1797                                  	assert_integer(r8)
    53 000015CF 41803811            <1>  cmp byte [%1], %2
    54 000015D3 0F855B0B0000        <1>  jne L_error_incorrect_type
  1798 000015D9 4C8B4D28                	mov r9, PARAM(1)
  1799                                  	assert_integer(r9)
    53 000015DD 41803911            <1>  cmp byte [%1], %2
    54 000015E1 0F854D0B0000        <1>  jne L_error_incorrect_type
  1800 000015E7 498B7801                	mov rdi, qword [r8 + 1]
  1801 000015EB 49037901                	add rdi, qword [r9 + 1]
  1802 000015EF E8BB090000              	call make_integer
  1803 000015F4 C9                      	leave
  1804 000015F5 C22000                  	ret AND_KILL_FRAME(2)
  1805                                  
  1806                                  L_code_ptr_raw_bin_add_qq:
  1807 000015F8 C8000000                        enter 0, 0
  1808 000015FC 48837D1802                      cmp COUNT, 2
  1809 00001601 0F858E0A0000                    jne L_error_arg_count_2
  1810 00001607 4C8B4520                        mov r8, PARAM(0)
  1811                                          assert_fraction(r8)
    53 0000160B 41803812            <1>  cmp byte [%1], %2
    54 0000160F 0F851F0B0000        <1>  jne L_error_incorrect_type
  1812 00001615 4C8B4D28                        mov r9, PARAM(1)
  1813                                          assert_fraction(r9)
    53 00001619 41803912            <1>  cmp byte [%1], %2
    54 0000161D 0F85110B0000        <1>  jne L_error_incorrect_type
  1814 00001623 498B4001                        mov rax, qword [r8 + 1] ; num1
  1815 00001627 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1816 0000162B 4899                            cqo
  1817 0000162D 48F7EB                          imul rbx
  1818 00001630 4889C6                          mov rsi, rax
  1819 00001633 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1820 00001637 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1821 0000163B 4899                            cqo
  1822 0000163D 48F7EB                          imul rbx
  1823 00001640 4801C6                          add rsi, rax
  1824 00001643 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1825 00001647 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1826 0000164B 4899                            cqo
  1827 0000164D 48F7EB                          imul rbx
  1828 00001650 4889C7                          mov rdi, rax
  1829 00001653 E8DE010000                      call normalize_fraction
  1830 00001658 C9                              leave
  1831 00001659 C22000                          ret AND_KILL_FRAME(2)
  1832                                  
  1833                                  L_code_ptr_raw_bin_sub_zz:
  1834 0000165C C8000000                	enter 0, 0
  1835 00001660 48837D1802              	cmp COUNT, 2
  1836 00001665 0F852A0A0000            	jne L_error_arg_count_2
  1837 0000166B 4C8B4520                	mov r8, PARAM(0)
  1838                                  	assert_integer(r8)
    53 0000166F 41803811            <1>  cmp byte [%1], %2
    54 00001673 0F85BB0A0000        <1>  jne L_error_incorrect_type
  1839 00001679 4C8B4D28                	mov r9, PARAM(1)
  1840                                  	assert_integer(r9)
    53 0000167D 41803911            <1>  cmp byte [%1], %2
    54 00001681 0F85AD0A0000        <1>  jne L_error_incorrect_type
  1841 00001687 498B7801                	mov rdi, qword [r8 + 1]
  1842 0000168B 492B7901                	sub rdi, qword [r9 + 1]
  1843 0000168F E81B090000              	call make_integer
  1844 00001694 C9                      	leave
  1845 00001695 C22000                  	ret AND_KILL_FRAME(2)
  1846                                  
  1847                                  L_code_ptr_raw_bin_sub_qq:
  1848 00001698 C8000000                        enter 0, 0
  1849 0000169C 48837D1802                      cmp COUNT, 2
  1850 000016A1 0F85EE090000                    jne L_error_arg_count_2
  1851 000016A7 4C8B4520                        mov r8, PARAM(0)
  1852                                          assert_fraction(r8)
    53 000016AB 41803812            <1>  cmp byte [%1], %2
    54 000016AF 0F857F0A0000        <1>  jne L_error_incorrect_type
  1853 000016B5 4C8B4D28                        mov r9, PARAM(1)
  1854                                          assert_fraction(r9)
    53 000016B9 41803912            <1>  cmp byte [%1], %2
    54 000016BD 0F85710A0000        <1>  jne L_error_incorrect_type
  1855 000016C3 498B4001                        mov rax, qword [r8 + 1] ; num1
  1856 000016C7 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1857 000016CB 4899                            cqo
  1858 000016CD 48F7EB                          imul rbx
  1859 000016D0 4889C6                          mov rsi, rax
  1860 000016D3 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1861 000016D7 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1862 000016DB 4899                            cqo
  1863 000016DD 48F7EB                          imul rbx
  1864 000016E0 4829C6                          sub rsi, rax
  1865 000016E3 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1866 000016E7 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1867 000016EB 4899                            cqo
  1868 000016ED 48F7EB                          imul rbx
  1869 000016F0 4889C7                          mov rdi, rax
  1870 000016F3 E83E010000                      call normalize_fraction
  1871 000016F8 C9                              leave
  1872 000016F9 C22000                          ret AND_KILL_FRAME(2)
  1873                                  
  1874                                  L_code_ptr_raw_bin_mul_zz:
  1875 000016FC C8000000                	enter 0, 0
  1876 00001700 48837D1802              	cmp COUNT, 2
  1877 00001705 0F858A090000            	jne L_error_arg_count_2
  1878 0000170B 4C8B4520                	mov r8, PARAM(0)
  1879                                  	assert_integer(r8)
    53 0000170F 41803811            <1>  cmp byte [%1], %2
    54 00001713 0F851B0A0000        <1>  jne L_error_incorrect_type
  1880 00001719 4C8B4D28                	mov r9, PARAM(1)
  1881                                  	assert_integer(r9)
    53 0000171D 41803911            <1>  cmp byte [%1], %2
    54 00001721 0F850D0A0000        <1>  jne L_error_incorrect_type
  1882 00001727 4899                    	cqo
  1883 00001729 498B4001                	mov rax, qword [r8 + 1]
  1884 0000172D 49F76101                	mul qword [r9 + 1]
  1885 00001731 4889C7                  	mov rdi, rax
  1886 00001734 E876080000              	call make_integer
  1887 00001739 C9                      	leave
  1888 0000173A C22000                  	ret AND_KILL_FRAME(2)
  1889                                  
  1890                                  L_code_ptr_raw_bin_mul_qq:
  1891 0000173D C8000000                        enter 0, 0
  1892 00001741 48837D1802                      cmp COUNT, 2
  1893 00001746 0F8549090000                    jne L_error_arg_count_2
  1894 0000174C 4C8B4520                        mov r8, PARAM(0)
  1895                                          assert_fraction(r8)
    53 00001750 41803812            <1>  cmp byte [%1], %2
    54 00001754 0F85DA090000        <1>  jne L_error_incorrect_type
  1896 0000175A 4C8B4D28                        mov r9, PARAM(1)
  1897                                          assert_fraction(r9)
    53 0000175E 41803912            <1>  cmp byte [%1], %2
    54 00001762 0F85CC090000        <1>  jne L_error_incorrect_type
  1898 00001768 498B4001                        mov rax, qword [r8 + 1] ; num1
  1899 0000176C 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1900 00001770 4899                            cqo
  1901 00001772 48F7EB                          imul rbx
  1902 00001775 4889C6                          mov rsi, rax
  1903 00001778 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1904 0000177C 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1905 00001780 4899                            cqo
  1906 00001782 48F7EB                          imul rbx
  1907 00001785 4889C7                          mov rdi, rax
  1908 00001788 E8A9000000                      call normalize_fraction
  1909 0000178D C9                              leave
  1910 0000178E C22000                          ret AND_KILL_FRAME(2)
  1911                                          
  1912                                  L_code_ptr_raw_bin_div_zz:
  1913 00001791 C8000000                	enter 0, 0
  1914 00001795 48837D1802              	cmp COUNT, 2
  1915 0000179A 0F85F5080000            	jne L_error_arg_count_2
  1916 000017A0 4C8B4520                	mov r8, PARAM(0)
  1917                                  	assert_integer(r8)
    53 000017A4 41803811            <1>  cmp byte [%1], %2
    54 000017A8 0F8586090000        <1>  jne L_error_incorrect_type
  1918 000017AE 4C8B4D28                	mov r9, PARAM(1)
  1919                                  	assert_integer(r9)
    53 000017B2 41803911            <1>  cmp byte [%1], %2
    54 000017B6 0F8578090000        <1>  jne L_error_incorrect_type
  1920 000017BC 498B7901                	mov rdi, qword [r9 + 1]
  1921 000017C0 4883FF00                	cmp rdi, 0
  1922 000017C4 0F849B090000            	je L_error_division_by_zero
  1923 000017CA 498B7001                	mov rsi, qword [r8 + 1]
  1924 000017CE E863000000              	call normalize_fraction
  1925 000017D3 C9                      	leave
  1926 000017D4 C22000                  	ret AND_KILL_FRAME(2)
  1927                                  
  1928                                  L_code_ptr_raw_bin_div_qq:
  1929 000017D7 C8000000                        enter 0, 0
  1930 000017DB 48837D1802                      cmp COUNT, 2
  1931 000017E0 0F85AF080000                    jne L_error_arg_count_2
  1932 000017E6 4C8B4520                        mov r8, PARAM(0)
  1933                                          assert_fraction(r8)
    53 000017EA 41803812            <1>  cmp byte [%1], %2
    54 000017EE 0F8540090000        <1>  jne L_error_incorrect_type
  1934 000017F4 4C8B4D28                        mov r9, PARAM(1)
  1935                                          assert_fraction(r9)
    53 000017F8 41803912            <1>  cmp byte [%1], %2
    54 000017FC 0F8532090000        <1>  jne L_error_incorrect_type
  1936 00001802 4983790100                      cmp qword [r9 + 1], 0
  1937 00001807 0F8458090000                    je L_error_division_by_zero
  1938 0000180D 498B4001                        mov rax, qword [r8 + 1] ; num1
  1939 00001811 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1940 00001815 4899                            cqo
  1941 00001817 48F7EB                          imul rbx
  1942 0000181A 4889C6                          mov rsi, rax
  1943 0000181D 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1944 00001821 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1945 00001825 4899                            cqo
  1946 00001827 48F7EB                          imul rbx
  1947 0000182A 4889C7                          mov rdi, rax
  1948 0000182D E804000000                      call normalize_fraction
  1949 00001832 C9                              leave
  1950 00001833 C22000                          ret AND_KILL_FRAME(2)
  1951                                          
  1952                                  normalize_fraction:
  1953 00001836 56                              push rsi
  1954 00001837 57                              push rdi
  1955 00001838 E859000000                      call gcd
  1956 0000183D 4889C3                          mov rbx, rax
  1957 00001840 58                              pop rax
  1958 00001841 4899                            cqo
  1959 00001843 48F7FB                          idiv rbx
  1960 00001846 4989C0                          mov r8, rax
  1961 00001849 58                              pop rax
  1962 0000184A 4899                            cqo
  1963 0000184C 48F7FB                          idiv rbx
  1964 0000184F 4989C1                          mov r9, rax
  1965 00001852 4983F900                        cmp r9, 0
  1966 00001856 741C                            je .L_zero
  1967 00001858 4983F801                        cmp r8, 1
  1968 0000185C 7421                            je .L_int
  1969 0000185E BF11000000                      mov rdi, (1 + 8 + 8)
  1970 00001863 E8CAEBFFFF                      call malloc
  1971 00001868 C60012                          mov byte [rax], T_fraction
  1972 0000186B 4C894801                        mov qword [rax + 1], r9
  1973 0000186F 4C894009                        mov qword [rax + 1 + 8], r8
  1974 00001873 C3                              ret
  1975                                  .L_zero:
  1976 00001874 BF00000000                      mov rdi, 0
  1977 00001879 E831070000                      call make_integer
  1978 0000187E C3                              ret
  1979                                  .L_int:
  1980 0000187F 4C89CF                          mov rdi, r9
  1981 00001882 E828070000                      call make_integer
  1982 00001887 C3                              ret
  1983                                  
  1984                                  iabs:
  1985 00001888 4889F8                          mov rax, rdi
  1986 0000188B 4883F800                        cmp rax, 0
  1987 0000188F 7C01                            jl .Lneg
  1988 00001891 C3                              ret
  1989                                  .Lneg:
  1990 00001892 48F7D8                          neg rax
  1991 00001895 C3                              ret
  1992                                  
  1993                                  gcd:
  1994 00001896 E8EDFFFFFF                      call iabs
  1995 0000189B 4889C3                          mov rbx, rax
  1996 0000189E 4889F7                          mov rdi, rsi
  1997 000018A1 E8E2FFFFFF                      call iabs
  1998 000018A6 4883F800                        cmp rax, 0
  1999 000018AA 7502                            jne .L0
  2000 000018AC 4893                            xchg rax, rbx
  2001                                  .L0:
  2002 000018AE 4883FB00                        cmp rbx, 0
  2003 000018B2 740C                            je .L1
  2004 000018B4 4899                            cqo
  2005 000018B6 48F7F3                          div rbx
  2006 000018B9 4889D0                          mov rax, rdx
  2007 000018BC 4893                            xchg rax, rbx
  2008 000018BE EBEE                            jmp .L0
  2009                                  .L1:
  2010 000018C0 C3                              ret
  2011                                  
  2012                                  L_code_ptr_error:
  2013 000018C1 C8000000                        enter 0, 0
  2014 000018C5 48837D1802                      cmp COUNT, 2
  2015 000018CA 0F85C5070000                    jne L_error_arg_count_2
  2016 000018D0 488B7520                        mov rsi, PARAM(0)
  2017                                          assert_interned_symbol(rsi)
    53 000018D4 803E41              <1>  cmp byte [%1], %2
    54 000018D7 0F8557080000        <1>  jne L_error_incorrect_type
  2018 000018DD 488B7528                        mov rsi, PARAM(1)
  2019                                          assert_string(rsi)
    53 000018E1 803E03              <1>  cmp byte [%1], %2
    54 000018E4 0F854A080000        <1>  jne L_error_incorrect_type
  2020 000018EA 48BF-                           mov rdi, fmt_scheme_error_part_1
  2020 000018EC [7B04000000000000] 
  2021 000018F4 B800000000                      mov rax, 0
  2022                                          ENTER
    44 000018F9 C8000000            <1>  enter 0, 0
    45 000018FD 4883E4F0            <1>  and rsp, ~15
  2023 00001901 E8(00000000)                    call printf
  2024                                          LEAVE
    49 00001906 C9                  <1>  leave
  2025 00001907 488B7D20                        mov rdi, PARAM(0)
  2026 0000190B E8A3EDFFFF                      call print_sexpr
  2027 00001910 48BF-                           mov rdi, fmt_scheme_error_part_2
  2027 00001912 [8F04000000000000] 
  2028 0000191A B800000000                      mov rax, 0
  2029                                          ENTER
    44 0000191F C8000000            <1>  enter 0, 0
    45 00001923 4883E4F0            <1>  and rsp, ~15
  2030 00001927 E8(00000000)                    call printf
  2031                                          LEAVE
    49 0000192C C9                  <1>  leave
  2032 0000192D 488B4528                        mov rax, PARAM(1)       ; sob_string
  2033 00001931 BE01000000                      mov rsi, 1              ; size = 1 byte
  2034 00001936 488B5001                        mov rdx, qword [rax + 1] ; length
  2035 0000193A 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  2036 0000193E 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  2037                                  	ENTER
    44 00001946 C8000000            <1>  enter 0, 0
    45 0000194A 4883E4F0            <1>  and rsp, ~15
  2038 0000194E E8(00000000)                    call fwrite
  2039                                  	LEAVE
    49 00001953 C9                  <1>  leave
  2040 00001954 48BF-                           mov rdi, fmt_scheme_error_part_3
  2040 00001956 [D104000000000000] 
  2041 0000195E B800000000                      mov rax, 0
  2042                                          ENTER
    44 00001963 C8000000            <1>  enter 0, 0
    45 00001967 4883E4F0            <1>  and rsp, ~15
  2043 0000196B E8(00000000)                    call printf
  2044                                          LEAVE
    49 00001970 C9                  <1>  leave
  2045 00001971 48C7C0F7FFFFFF                  mov rax, -9
  2046 00001978 E8(00000000)                    call exit
  2047                                  
  2048                                  L_code_ptr_raw_less_than_rr:
  2049 0000197D C8000000                        enter 0, 0
  2050 00001981 48837D1802                      cmp COUNT, 2
  2051 00001986 0F8509070000                    jne L_error_arg_count_2
  2052 0000198C 488B7520                        mov rsi, PARAM(0)
  2053                                          assert_real(rsi)
    53 00001990 803E13              <1>  cmp byte [%1], %2
    54 00001993 0F859B070000        <1>  jne L_error_incorrect_type
  2054 00001999 488B7D28                        mov rdi, PARAM(1)
  2055                                          assert_real(rdi)
    53 0000199D 803F13              <1>  cmp byte [%1], %2
    54 000019A0 0F858E070000        <1>  jne L_error_incorrect_type
  2056 000019A6 F20F104601                      movsd xmm0, qword [rsi + 1]
  2057 000019AB F20F104F01                      movsd xmm1, qword [rdi + 1]
  2058 000019B0 660F2FC1                        comisd xmm0, xmm1
  2059 000019B4 730C                            jae .L_false
  2060 000019B6 48B8-                           mov rax, sob_boolean_true
  2060 000019B8 [0300000000000000] 
  2061 000019C0 EB0A                            jmp .L_exit
  2062                                  .L_false:
  2063 000019C2 48B8-                           mov rax, sob_boolean_false
  2063 000019C4 [0200000000000000] 
  2064                                  .L_exit:
  2065 000019CC C9                              leave
  2066 000019CD C22000                          ret AND_KILL_FRAME(2)
  2067                                          
  2068                                  L_code_ptr_raw_less_than_zz:
  2069 000019D0 C8000000                	enter 0, 0
  2070 000019D4 48837D1802              	cmp COUNT, 2
  2071 000019D9 0F85B6060000            	jne L_error_arg_count_2
  2072 000019DF 4C8B4520                	mov r8, PARAM(0)
  2073                                  	assert_integer(r8)
    53 000019E3 41803811            <1>  cmp byte [%1], %2
    54 000019E7 0F8547070000        <1>  jne L_error_incorrect_type
  2074 000019ED 4C8B4D28                	mov r9, PARAM(1)
  2075                                  	assert_integer(r9)
    53 000019F1 41803911            <1>  cmp byte [%1], %2
    54 000019F5 0F8539070000        <1>  jne L_error_incorrect_type
  2076 000019FB 498B7801                	mov rdi, qword [r8 + 1]
  2077 000019FF 493B7901                	cmp rdi, qword [r9 + 1]
  2078 00001A03 7D0C                    	jge .L_false
  2079 00001A05 48B8-                   	mov rax, sob_boolean_true
  2079 00001A07 [0300000000000000] 
  2080 00001A0F EB0A                    	jmp .L_exit
  2081                                  .L_false:
  2082 00001A11 48B8-                   	mov rax, sob_boolean_false
  2082 00001A13 [0200000000000000] 
  2083                                  .L_exit:
  2084 00001A1B C9                      	leave
  2085 00001A1C C22000                  	ret AND_KILL_FRAME(2)
  2086                                  
  2087                                  L_code_ptr_raw_less_than_qq:
  2088 00001A1F C8000000                        enter 0, 0
  2089 00001A23 48837D1802                      cmp COUNT, 2
  2090 00001A28 0F8567060000                    jne L_error_arg_count_2
  2091 00001A2E 488B7520                        mov rsi, PARAM(0)
  2092                                          assert_fraction(rsi)
    53 00001A32 803E12              <1>  cmp byte [%1], %2
    54 00001A35 0F85F9060000        <1>  jne L_error_incorrect_type
  2093 00001A3B 488B7D28                        mov rdi, PARAM(1)
  2094                                          assert_fraction(rdi)
    53 00001A3F 803F12              <1>  cmp byte [%1], %2
    54 00001A42 0F85EC060000        <1>  jne L_error_incorrect_type
  2095 00001A48 488B4601                        mov rax, qword [rsi + 1] ; num1
  2096 00001A4C 4899                            cqo
  2097 00001A4E 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2098 00001A52 4889C1                          mov rcx, rax
  2099 00001A55 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  2100 00001A59 4899                            cqo
  2101 00001A5B 48F76F01                        imul qword [rdi + 1]          ; num2
  2102 00001A5F 4829C1                          sub rcx, rax
  2103 00001A62 7D0C                            jge .L_false
  2104 00001A64 48B8-                           mov rax, sob_boolean_true
  2104 00001A66 [0300000000000000] 
  2105 00001A6E EB0A                            jmp .L_exit
  2106                                  .L_false:
  2107 00001A70 48B8-                           mov rax, sob_boolean_false
  2107 00001A72 [0200000000000000] 
  2108                                  .L_exit:
  2109 00001A7A C9                              leave
  2110 00001A7B C22000                          ret AND_KILL_FRAME(2)
  2111                                  
  2112                                  L_code_ptr_raw_equal_rr:
  2113 00001A7E C8000000                        enter 0, 0
  2114 00001A82 48837D1802                      cmp COUNT, 2
  2115 00001A87 0F8508060000                    jne L_error_arg_count_2
  2116 00001A8D 488B7520                        mov rsi, PARAM(0)
  2117                                          assert_real(rsi)
    53 00001A91 803E13              <1>  cmp byte [%1], %2
    54 00001A94 0F859A060000        <1>  jne L_error_incorrect_type
  2118 00001A9A 488B7D28                        mov rdi, PARAM(1)
  2119                                          assert_real(rdi)
    53 00001A9E 803F13              <1>  cmp byte [%1], %2
    54 00001AA1 0F858D060000        <1>  jne L_error_incorrect_type
  2120 00001AA7 F20F104601                      movsd xmm0, qword [rsi + 1]
  2121 00001AAC F20F104F01                      movsd xmm1, qword [rdi + 1]
  2122 00001AB1 660F2FC1                        comisd xmm0, xmm1
  2123 00001AB5 750C                            jne .L_false
  2124 00001AB7 48B8-                           mov rax, sob_boolean_true
  2124 00001AB9 [0300000000000000] 
  2125 00001AC1 EB0A                            jmp .L_exit
  2126                                  .L_false:
  2127 00001AC3 48B8-                           mov rax, sob_boolean_false
  2127 00001AC5 [0200000000000000] 
  2128                                  .L_exit:
  2129 00001ACD C9                              leave
  2130 00001ACE C22000                          ret AND_KILL_FRAME(2)
  2131                                          
  2132                                  L_code_ptr_raw_equal_zz:
  2133 00001AD1 C8000000                	enter 0, 0
  2134 00001AD5 48837D1802              	cmp COUNT, 2
  2135 00001ADA 0F85B5050000            	jne L_error_arg_count_2
  2136 00001AE0 4C8B4520                	mov r8, PARAM(0)
  2137                                  	assert_integer(r8)
    53 00001AE4 41803811            <1>  cmp byte [%1], %2
    54 00001AE8 0F8546060000        <1>  jne L_error_incorrect_type
  2138 00001AEE 4C8B4D28                	mov r9, PARAM(1)
  2139                                  	assert_integer(r9)
    53 00001AF2 41803911            <1>  cmp byte [%1], %2
    54 00001AF6 0F8538060000        <1>  jne L_error_incorrect_type
  2140 00001AFC 498B7801                	mov rdi, qword [r8 + 1]
  2141 00001B00 493B7901                	cmp rdi, qword [r9 + 1]
  2142 00001B04 750C                    	jne .L_false
  2143 00001B06 48B8-                   	mov rax, sob_boolean_true
  2143 00001B08 [0300000000000000] 
  2144 00001B10 EB0A                    	jmp .L_exit
  2145                                  .L_false:
  2146 00001B12 48B8-                   	mov rax, sob_boolean_false
  2146 00001B14 [0200000000000000] 
  2147                                  .L_exit:
  2148 00001B1C C9                      	leave
  2149 00001B1D C22000                  	ret AND_KILL_FRAME(2)
  2150                                  
  2151                                  L_code_ptr_raw_equal_qq:
  2152 00001B20 C8000000                        enter 0, 0
  2153 00001B24 48837D1802                      cmp COUNT, 2
  2154 00001B29 0F8566050000                    jne L_error_arg_count_2
  2155 00001B2F 488B7520                        mov rsi, PARAM(0)
  2156                                          assert_fraction(rsi)
    53 00001B33 803E12              <1>  cmp byte [%1], %2
    54 00001B36 0F85F8050000        <1>  jne L_error_incorrect_type
  2157 00001B3C 488B7D28                        mov rdi, PARAM(1)
  2158                                          assert_fraction(rdi)
    53 00001B40 803F12              <1>  cmp byte [%1], %2
    54 00001B43 0F85EB050000        <1>  jne L_error_incorrect_type
  2159 00001B49 488B4601                        mov rax, qword [rsi + 1] ; num1
  2160 00001B4D 4899                            cqo
  2161 00001B4F 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2162 00001B53 4889C1                          mov rcx, rax
  2163 00001B56 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  2164 00001B5A 4899                            cqo
  2165 00001B5C 48F76F01                        imul qword [rdi + 1]          ; num2
  2166 00001B60 4829C1                          sub rcx, rax
  2167 00001B63 750C                            jne .L_false
  2168 00001B65 48B8-                           mov rax, sob_boolean_true
  2168 00001B67 [0300000000000000] 
  2169 00001B6F EB0A                            jmp .L_exit
  2170                                  .L_false:
  2171 00001B71 48B8-                           mov rax, sob_boolean_false
  2171 00001B73 [0200000000000000] 
  2172                                  .L_exit:
  2173 00001B7B C9                              leave
  2174 00001B7C C22000                          ret AND_KILL_FRAME(2)
  2175                                  
  2176                                  L_code_ptr_quotient:
  2177 00001B7F C8000000                        enter 0, 0
  2178 00001B83 48837D1802                      cmp COUNT, 2
  2179 00001B88 0F8507050000                    jne L_error_arg_count_2
  2180 00001B8E 488B7520                        mov rsi, PARAM(0)
  2181                                          assert_integer(rsi)
    53 00001B92 803E11              <1>  cmp byte [%1], %2
    54 00001B95 0F8599050000        <1>  jne L_error_incorrect_type
  2182 00001B9B 488B7D28                        mov rdi, PARAM(1)
  2183                                          assert_integer(rdi)
    53 00001B9F 803F11              <1>  cmp byte [%1], %2
    54 00001BA2 0F858C050000        <1>  jne L_error_incorrect_type
  2184 00001BA8 488B4601                        mov rax, qword [rsi + 1]
  2185 00001BAC 488B5F01                        mov rbx, qword [rdi + 1]
  2186 00001BB0 4883FB00                        cmp rbx, 0
  2187 00001BB4 0F84AB050000                    je L_error_division_by_zero
  2188 00001BBA 4899                            cqo
  2189 00001BBC 48F7FB                          idiv rbx
  2190 00001BBF 4889C7                          mov rdi, rax
  2191 00001BC2 E8E8030000                      call make_integer
  2192 00001BC7 C9                              leave
  2193 00001BC8 C22000                          ret AND_KILL_FRAME(2)
  2194                                          
  2195                                  L_code_ptr_remainder:
  2196 00001BCB C8000000                        enter 0, 0
  2197 00001BCF 48837D1802                      cmp COUNT, 2
  2198 00001BD4 0F85BB040000                    jne L_error_arg_count_2
  2199 00001BDA 488B7520                        mov rsi, PARAM(0)
  2200                                          assert_integer(rsi)
    53 00001BDE 803E11              <1>  cmp byte [%1], %2
    54 00001BE1 0F854D050000        <1>  jne L_error_incorrect_type
  2201 00001BE7 488B7D28                        mov rdi, PARAM(1)
  2202                                          assert_integer(rdi)
    53 00001BEB 803F11              <1>  cmp byte [%1], %2
    54 00001BEE 0F8540050000        <1>  jne L_error_incorrect_type
  2203 00001BF4 488B4601                        mov rax, qword [rsi + 1]
  2204 00001BF8 488B5F01                        mov rbx, qword [rdi + 1]
  2205 00001BFC 4883FB00                        cmp rbx, 0
  2206 00001C00 0F845F050000                    je L_error_division_by_zero
  2207 00001C06 4899                            cqo
  2208 00001C08 48F7FB                          idiv rbx
  2209 00001C0B 4889D7                          mov rdi, rdx
  2210 00001C0E E89C030000                      call make_integer
  2211 00001C13 C9                              leave
  2212 00001C14 C22000                          ret AND_KILL_FRAME(2)
  2213                                  
  2214                                  L_code_ptr_set_car:
  2215 00001C17 C8000000                        enter 0, 0
  2216 00001C1B 48837D1802                      cmp COUNT, 2
  2217 00001C20 0F856F040000                    jne L_error_arg_count_2
  2218 00001C26 488B4520                        mov rax, PARAM(0)
  2219                                          assert_pair(rax)
    53 00001C2A 803821              <1>  cmp byte [%1], %2
    54 00001C2D 0F8501050000        <1>  jne L_error_incorrect_type
  2220 00001C33 488B5D28                        mov rbx, PARAM(1)
  2221 00001C37 48895801                        mov SOB_PAIR_CAR(rax), rbx
  2222 00001C3B 48B8-                           mov rax, sob_void
  2222 00001C3D [0000000000000000] 
  2223 00001C45 C9                              leave
  2224 00001C46 C22000                          ret AND_KILL_FRAME(2)
  2225                                  
  2226                                  L_code_ptr_set_cdr:
  2227 00001C49 C8000000                        enter 0, 0
  2228 00001C4D 48837D1802                      cmp COUNT, 2
  2229 00001C52 0F853D040000                    jne L_error_arg_count_2
  2230 00001C58 488B4520                        mov rax, PARAM(0)
  2231                                          assert_pair(rax)
    53 00001C5C 803821              <1>  cmp byte [%1], %2
    54 00001C5F 0F85CF040000        <1>  jne L_error_incorrect_type
  2232 00001C65 488B5D28                        mov rbx, PARAM(1)
  2233 00001C69 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2234 00001C6D 48B8-                           mov rax, sob_void
  2234 00001C6F [0000000000000000] 
  2235 00001C77 C9                              leave
  2236 00001C78 C22000                          ret AND_KILL_FRAME(2)
  2237                                  
  2238                                  L_code_ptr_string_ref:
  2239 00001C7B C8000000                        enter 0, 0
  2240 00001C7F 48837D1802                      cmp COUNT, 2
  2241 00001C84 0F850B040000                    jne L_error_arg_count_2
  2242 00001C8A 488B7D20                        mov rdi, PARAM(0)
  2243                                          assert_string(rdi)
    53 00001C8E 803F03              <1>  cmp byte [%1], %2
    54 00001C91 0F859D040000        <1>  jne L_error_incorrect_type
  2244 00001C97 488B7528                        mov rsi, PARAM(1)
  2245                                          assert_integer(rsi)
    53 00001C9B 803E11              <1>  cmp byte [%1], %2
    54 00001C9E 0F8590040000        <1>  jne L_error_incorrect_type
  2246 00001CA4 488B5701                        mov rdx, qword [rdi + 1]
  2247 00001CA8 488B4E01                        mov rcx, qword [rsi + 1]
  2248 00001CAC 4839D1                          cmp rcx, rdx
  2249 00001CAF 0F8D14030000                    jge L_error_integer_range
  2250 00001CB5 4883F900                        cmp rcx, 0
  2251 00001CB9 0F8C0A030000                    jl L_error_integer_range
  2252 00001CBF 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  2253 00001CC3 BF02000000                      mov rdi, 2
  2254 00001CC8 E865E7FFFF                      call malloc
  2255 00001CCD C60002                          mov byte [rax], T_char
  2256 00001CD0 885801                          mov byte [rax + 1], bl
  2257 00001CD3 C9                              leave
  2258 00001CD4 C22000                          ret AND_KILL_FRAME(2)
  2259                                  
  2260                                  L_code_ptr_vector_ref:
  2261 00001CD7 C8000000                        enter 0, 0
  2262 00001CDB 48837D1802                      cmp COUNT, 2
  2263 00001CE0 0F85AF030000                    jne L_error_arg_count_2
  2264 00001CE6 488B7D20                        mov rdi, PARAM(0)
  2265                                          assert_vector(rdi)
    53 00001CEA 803F22              <1>  cmp byte [%1], %2
    54 00001CED 0F8541040000        <1>  jne L_error_incorrect_type
  2266 00001CF3 488B7528                        mov rsi, PARAM(1)
  2267                                          assert_integer(rsi)
    53 00001CF7 803E11              <1>  cmp byte [%1], %2
    54 00001CFA 0F8534040000        <1>  jne L_error_incorrect_type
  2268 00001D00 488B5701                        mov rdx, qword [rdi + 1]
  2269 00001D04 488B4E01                        mov rcx, qword [rsi + 1]
  2270 00001D08 4839D1                          cmp rcx, rdx
  2271 00001D0B 0F8DB8020000                    jge L_error_integer_range
  2272 00001D11 4883F900                        cmp rcx, 0
  2273 00001D15 0F8CAE020000                    jl L_error_integer_range
  2274 00001D1B 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2275 00001D20 C9                              leave
  2276 00001D21 C22000                          ret AND_KILL_FRAME(2)
  2277                                  
  2278                                  L_code_ptr_vector_set:
  2279 00001D24 C8000000                        enter 0, 0
  2280 00001D28 48837D1803                      cmp COUNT, 3
  2281 00001D2D 0F85CC030000                    jne L_error_arg_count_3
  2282 00001D33 488B7D20                        mov rdi, PARAM(0)
  2283                                          assert_vector(rdi)
    53 00001D37 803F22              <1>  cmp byte [%1], %2
    54 00001D3A 0F85F4030000        <1>  jne L_error_incorrect_type
  2284 00001D40 488B7528                        mov rsi, PARAM(1)
  2285                                          assert_integer(rsi)
    53 00001D44 803E11              <1>  cmp byte [%1], %2
    54 00001D47 0F85E7030000        <1>  jne L_error_incorrect_type
  2286 00001D4D 488B5701                        mov rdx, qword [rdi + 1]
  2287 00001D51 488B4E01                        mov rcx, qword [rsi + 1]
  2288 00001D55 4839D1                          cmp rcx, rdx
  2289 00001D58 0F8D6B020000                    jge L_error_integer_range
  2290 00001D5E 4883F900                        cmp rcx, 0
  2291 00001D62 0F8C61020000                    jl L_error_integer_range
  2292 00001D68 488B4530                        mov rax, PARAM(2)
  2293 00001D6C 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2294 00001D71 48B8-                           mov rax, sob_void
  2294 00001D73 [0000000000000000] 
  2295 00001D7B C9                              leave
  2296 00001D7C C22800                          ret AND_KILL_FRAME(3)
  2297                                  
  2298                                  L_code_ptr_string_set:
  2299 00001D7F C8000000                        enter 0, 0
  2300 00001D83 48837D1803                      cmp COUNT, 3
  2301 00001D88 0F8571030000                    jne L_error_arg_count_3
  2302 00001D8E 488B7D20                        mov rdi, PARAM(0)
  2303                                          assert_string(rdi)
    53 00001D92 803F03              <1>  cmp byte [%1], %2
    54 00001D95 0F8599030000        <1>  jne L_error_incorrect_type
  2304 00001D9B 488B7528                        mov rsi, PARAM(1)
  2305                                          assert_integer(rsi)
    53 00001D9F 803E11              <1>  cmp byte [%1], %2
    54 00001DA2 0F858C030000        <1>  jne L_error_incorrect_type
  2306 00001DA8 488B5701                        mov rdx, qword [rdi + 1]
  2307 00001DAC 488B4E01                        mov rcx, qword [rsi + 1]
  2308 00001DB0 4839D1                          cmp rcx, rdx
  2309 00001DB3 0F8D10020000                    jge L_error_integer_range
  2310 00001DB9 4883F900                        cmp rcx, 0
  2311 00001DBD 0F8C06020000                    jl L_error_integer_range
  2312 00001DC3 488B4530                        mov rax, PARAM(2)
  2313                                          assert_char(rax)
    53 00001DC7 803802              <1>  cmp byte [%1], %2
    54 00001DCA 0F8564030000        <1>  jne L_error_incorrect_type
  2314 00001DD0 8A4001                          mov al, byte [rax + 1]
  2315 00001DD3 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2316 00001DD7 48B8-                           mov rax, sob_void
  2316 00001DD9 [0000000000000000] 
  2317 00001DE1 C9                              leave
  2318 00001DE2 C22800                          ret AND_KILL_FRAME(3)
  2319                                  
  2320                                  L_code_ptr_make_vector:
  2321 00001DE5 C8000000                        enter 0, 0
  2322 00001DE9 48837D1802                      cmp COUNT, 2
  2323 00001DEE 0F85A1020000                    jne L_error_arg_count_2
  2324 00001DF4 488B4D20                        mov rcx, PARAM(0)
  2325                                          assert_integer(rcx)
    53 00001DF8 803911              <1>  cmp byte [%1], %2
    54 00001DFB 0F8533030000        <1>  jne L_error_incorrect_type
  2326 00001E01 488B4901                        mov rcx, qword [rcx + 1]
  2327 00001E05 4883F900                        cmp rcx, 0
  2328 00001E09 0F8CBA010000                    jl L_error_integer_range
  2329 00001E0F 488B5528                        mov rdx, PARAM(1)
  2330 00001E13 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2331 00001E1B E812E6FFFF                      call malloc
  2332 00001E20 C60022                          mov byte [rax], T_vector
  2333 00001E23 48894801                        mov qword [rax + 1], rcx
  2334 00001E27 41B800000000                    mov r8, 0
  2335                                  .L0:
  2336 00001E2D 4939C8                          cmp r8, rcx
  2337 00001E30 740A                            je .L1
  2338 00001E32 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2339 00001E37 49FFC0                          inc r8
  2340 00001E3A EBF1                            jmp .L0
  2341                                  .L1:
  2342 00001E3C C9                              leave
  2343 00001E3D C22000                          ret AND_KILL_FRAME(2)
  2344                                          
  2345                                  L_code_ptr_make_string:
  2346 00001E40 C8000000                        enter 0, 0
  2347 00001E44 48837D1802                      cmp COUNT, 2
  2348 00001E49 0F8546020000                    jne L_error_arg_count_2
  2349 00001E4F 488B4D20                        mov rcx, PARAM(0)
  2350                                          assert_integer(rcx)
    53 00001E53 803911              <1>  cmp byte [%1], %2
    54 00001E56 0F85D8020000        <1>  jne L_error_incorrect_type
  2351 00001E5C 488B4901                        mov rcx, qword [rcx + 1]
  2352 00001E60 4883F900                        cmp rcx, 0
  2353 00001E64 0F8C5F010000                    jl L_error_integer_range
  2354 00001E6A 488B5528                        mov rdx, PARAM(1)
  2355                                          assert_char(rdx)
    53 00001E6E 803A02              <1>  cmp byte [%1], %2
    54 00001E71 0F85BD020000        <1>  jne L_error_incorrect_type
  2356 00001E77 8A5201                          mov dl, byte [rdx + 1]
  2357 00001E7A 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2358 00001E7E E8AFE5FFFF                      call malloc
  2359 00001E83 C60003                          mov byte [rax], T_string
  2360 00001E86 48894801                        mov qword [rax + 1], rcx
  2361 00001E8A 41B800000000                    mov r8, 0
  2362                                  .L0:
  2363 00001E90 4939C8                          cmp r8, rcx
  2364 00001E93 740A                            je .L1
  2365 00001E95 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2366 00001E9A 49FFC0                          inc r8
  2367 00001E9D EBF1                            jmp .L0
  2368                                  .L1:
  2369 00001E9F C9                              leave
  2370 00001EA0 C22000                          ret AND_KILL_FRAME(2)
  2371                                  
  2372                                  L_code_ptr_numerator:
  2373 00001EA3 C8000000                        enter 0, 0
  2374 00001EA7 48837D1801                      cmp COUNT, 1
  2375 00001EAC 0F85AE010000                    jne L_error_arg_count_1
  2376 00001EB2 488B4520                        mov rax, PARAM(0)
  2377                                          assert_fraction(rax)
    53 00001EB6 803812              <1>  cmp byte [%1], %2
    54 00001EB9 0F8575020000        <1>  jne L_error_incorrect_type
  2378 00001EBF 488B7801                        mov rdi, qword [rax + 1]
  2379 00001EC3 E8E7000000                      call make_integer
  2380 00001EC8 C9                              leave
  2381 00001EC9 C21800                          ret AND_KILL_FRAME(1)
  2382                                          
  2383                                  L_code_ptr_denominator:
  2384 00001ECC C8000000                        enter 0, 0
  2385 00001ED0 48837D1801                      cmp COUNT, 1
  2386 00001ED5 0F8585010000                    jne L_error_arg_count_1
  2387 00001EDB 488B4520                        mov rax, PARAM(0)
  2388                                          assert_fraction(rax)
    53 00001EDF 803812              <1>  cmp byte [%1], %2
    54 00001EE2 0F854C020000        <1>  jne L_error_incorrect_type
  2389 00001EE8 488B7809                        mov rdi, qword [rax + 1 + 8]
  2390 00001EEC E8BE000000                      call make_integer
  2391 00001EF1 C9                              leave
  2392 00001EF2 C21800                          ret AND_KILL_FRAME(1)
  2393                                  
  2394                                  L_code_ptr_is_eq:
  2395 00001EF5 C8000000                	enter 0, 0
  2396 00001EF9 48837D1802              	cmp COUNT, 2
  2397 00001EFE 0F8591010000            	jne L_error_arg_count_2
  2398 00001F04 488B7D20                	mov rdi, PARAM(0)
  2399 00001F08 488B7528                	mov rsi, PARAM(1)
  2400 00001F0C 4839F7                  	cmp rdi, rsi
  2401 00001F0F 746C                    	je .L_eq_true
  2402 00001F11 8A17                    	mov dl, byte [rdi]
  2403 00001F13 3A16                    	cmp dl, byte [rsi]
  2404 00001F15 7572                    	jne .L_eq_false
  2405 00001F17 80FA02                  	cmp dl, T_char
  2406 00001F1A 7459                    	je .L_char
  2407 00001F1C 80FA41                  	cmp dl, T_interned_symbol
  2408 00001F1F 7440                    	je .L_interned_symbol
  2409 00001F21 80FA42                          cmp dl, T_uninterned_symbol
  2410 00001F24 7443                            je .L_uninterned_symbol
  2411 00001F26 80FA13                  	cmp dl, T_real
  2412 00001F29 742E                    	je .L_real
  2413 00001F2B 80FA12                  	cmp dl, T_fraction
  2414 00001F2E 7413                    	je .L_fraction
  2415 00001F30 80FA11                          cmp dl, T_integer
  2416 00001F33 7402                            je .L_integer
  2417 00001F35 EB52                    	jmp .L_eq_false
  2418                                  .L_integer:
  2419 00001F37 488B4601                        mov rax, qword [rsi + 1]
  2420 00001F3B 483B4701                        cmp rax, qword [rdi + 1]
  2421 00001F3F 7548                            jne .L_eq_false
  2422 00001F41 EB3A                            jmp .L_eq_true
  2423                                  .L_fraction:
  2424 00001F43 488B4601                	mov rax, qword [rsi + 1]
  2425 00001F47 483B4701                	cmp rax, qword [rdi + 1]
  2426 00001F4B 753C                    	jne .L_eq_false
  2427 00001F4D 488B4609                	mov rax, qword [rsi + 1 + 8]
  2428 00001F51 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2429 00001F55 7532                    	jne .L_eq_false
  2430 00001F57 EB24                    	jmp .L_eq_true
  2431                                  .L_real:
  2432 00001F59 488B4601                	mov rax, qword [rsi + 1]
  2433 00001F5D 483B4701                	cmp rax, qword [rdi + 1]
  2434                                  .L_interned_symbol:
  2435                                  	; never reached, because interned_symbols are static!
  2436                                  	; but I'm keeping it in case, I'll ever change
  2437                                  	; the implementation
  2438 00001F61 488B4601                	mov rax, qword [rsi + 1]
  2439 00001F65 483B4701                	cmp rax, qword [rdi + 1]
  2440                                  .L_uninterned_symbol:
  2441 00001F69 4C8B4701                        mov r8, qword [rdi + 1]
  2442 00001F6D 4C3B4601                        cmp r8, qword [rsi + 1]
  2443 00001F71 7516                            jne .L_eq_false
  2444 00001F73 EB08                            jmp .L_eq_true
  2445                                  .L_char:
  2446 00001F75 8A5E01                  	mov bl, byte [rsi + 1]
  2447 00001F78 3A5F01                  	cmp bl, byte [rdi + 1]
  2448 00001F7B 750C                    	jne .L_eq_false
  2449                                  .L_eq_true:
  2450 00001F7D 48B8-                   	mov rax, sob_boolean_true
  2450 00001F7F [0300000000000000] 
  2451 00001F87 EB0A                    	jmp .L_eq_exit
  2452                                  .L_eq_false:
  2453 00001F89 48B8-                   	mov rax, sob_boolean_false
  2453 00001F8B [0200000000000000] 
  2454                                  .L_eq_exit:
  2455 00001F93 C9                      	leave
  2456 00001F94 C22000                  	ret AND_KILL_FRAME(2)
  2457                                  
  2458                                  make_real:
  2459 00001F97 C8000000                        enter 0, 0
  2460 00001F9B BF09000000                      mov rdi, (1 + 8)
  2461 00001FA0 E88DE4FFFF                      call malloc
  2462 00001FA5 C60013                          mov byte [rax], T_real
  2463 00001FA8 F20F114001                      movsd qword [rax + 1], xmm0
  2464 00001FAD C9                              leave 
  2465 00001FAE C3                              ret
  2466                                          
  2467                                  make_integer:
  2468 00001FAF C8000000                        enter 0, 0
  2469 00001FB3 4889FE                          mov rsi, rdi
  2470 00001FB6 BF09000000                      mov rdi, (1 + 8)
  2471 00001FBB E872E4FFFF                      call malloc
  2472 00001FC0 C60011                          mov byte [rax], T_integer
  2473 00001FC3 48897001                        mov qword [rax + 1], rsi
  2474 00001FC7 C9                              leave
  2475 00001FC8 C3                              ret
  2476                                          
  2477                                  L_error_integer_range:
  2478 00001FC9 488B3C25[00000000]              mov rdi, qword [stderr]
  2479 00001FD1 48BE-                           mov rsi, fmt_integer_range
  2479 00001FD3 [4804000000000000] 
  2480 00001FDB B800000000                      mov rax, 0
  2481                                          ENTER
    44 00001FE0 C8000000            <1>  enter 0, 0
    45 00001FE4 4883E4F0            <1>  and rsp, ~15
  2482 00001FE8 E8(00000000)                    call fprintf
  2483                                          LEAVE
    49 00001FED C9                  <1>  leave
  2484 00001FEE 48C7C0FBFFFFFF                  mov rax, -5
  2485 00001FF5 E8(00000000)                    call exit
  2486                                  
  2487                                  L_error_arg_negative:
  2488 00001FFA 488B3C25[00000000]              mov rdi, qword [stderr]
  2489 00002002 48BE-                           mov rsi, fmt_arg_negative
  2489 00002004 [2003000000000000] 
  2490 0000200C B800000000                      mov rax, 0
  2491                                          ENTER
    44 00002011 C8000000            <1>  enter 0, 0
    45 00002015 4883E4F0            <1>  and rsp, ~15
  2492 00002019 E8(00000000)                    call fprintf
  2493                                          LEAVE
    49 0000201E C9                  <1>  leave
  2494 0000201F 48C7C0FDFFFFFF                  mov rax, -3
  2495 00002026 E8(00000000)                    call exit
  2496                                  
  2497                                  L_error_arg_count_0:
  2498 0000202B 488B3C25[00000000]              mov rdi, qword [stderr]
  2499 00002033 48BE-                           mov rsi, fmt_arg_count_0
  2499 00002035 [4603000000000000] 
  2500 0000203D 488B5518                        mov rdx, COUNT
  2501 00002041 B800000000                      mov rax, 0
  2502                                          ENTER
    44 00002046 C8000000            <1>  enter 0, 0
    45 0000204A 4883E4F0            <1>  and rsp, ~15
  2503 0000204E E8(00000000)                    call fprintf
  2504                                          LEAVE
    49 00002053 C9                  <1>  leave
  2505 00002054 48C7C0FDFFFFFF                  mov rax, -3
  2506 0000205B E8(00000000)                    call exit
  2507                                  
  2508                                  L_error_arg_count_1:
  2509 00002060 488B3C25[00000000]              mov rdi, qword [stderr]
  2510 00002068 48BE-                           mov rsi, fmt_arg_count_1
  2510 0000206A [6E03000000000000] 
  2511 00002072 488B5518                        mov rdx, COUNT
  2512 00002076 B800000000                      mov rax, 0
  2513                                          ENTER
    44 0000207B C8000000            <1>  enter 0, 0
    45 0000207F 4883E4F0            <1>  and rsp, ~15
  2514 00002083 E8(00000000)                    call fprintf
  2515                                          LEAVE
    49 00002088 C9                  <1>  leave
  2516 00002089 48C7C0FDFFFFFF                  mov rax, -3
  2517 00002090 E8(00000000)                    call exit
  2518                                  
  2519                                  L_error_arg_count_2:
  2520 00002095 488B3C25[00000000]              mov rdi, qword [stderr]
  2521 0000209D 48BE-                           mov rsi, fmt_arg_count_2
  2521 0000209F [D403000000000000] 
  2522 000020A7 488B5518                        mov rdx, COUNT
  2523 000020AB B800000000                      mov rax, 0
  2524                                          ENTER
    44 000020B0 C8000000            <1>  enter 0, 0
    45 000020B4 4883E4F0            <1>  and rsp, ~15
  2525 000020B8 E8(00000000)                    call fprintf
  2526                                          LEAVE
    49 000020BD C9                  <1>  leave
  2527 000020BE 48C7C0FDFFFFFF                  mov rax, -3
  2528 000020C5 E8(00000000)                    call exit
  2529                                  
  2530                                  L_error_arg_count_12:
  2531 000020CA 488B3C25[00000000]              mov rdi, qword [stderr]
  2532 000020D2 48BE-                           mov rsi, fmt_arg_count_12
  2532 000020D4 [9403000000000000] 
  2533 000020DC 488B5518                        mov rdx, COUNT
  2534 000020E0 B800000000                      mov rax, 0
  2535                                          ENTER
    44 000020E5 C8000000            <1>  enter 0, 0
    45 000020E9 4883E4F0            <1>  and rsp, ~15
  2536 000020ED E8(00000000)                    call fprintf
  2537                                          LEAVE
    49 000020F2 C9                  <1>  leave
  2538 000020F3 48C7C0FDFFFFFF                  mov rax, -3
  2539 000020FA E8(00000000)                    call exit
  2540                                  
  2541                                  L_error_arg_count_3:
  2542 000020FF 488B3C25[00000000]              mov rdi, qword [stderr]
  2543 00002107 48BE-                           mov rsi, fmt_arg_count_3
  2543 00002109 [FB03000000000000] 
  2544 00002111 488B5518                        mov rdx, COUNT
  2545 00002115 B800000000                      mov rax, 0
  2546                                          ENTER
    44 0000211A C8000000            <1>  enter 0, 0
    45 0000211E 4883E4F0            <1>  and rsp, ~15
  2547 00002122 E8(00000000)                    call fprintf
  2548                                          LEAVE
    49 00002127 C9                  <1>  leave
  2549 00002128 48C7C0FDFFFFFF                  mov rax, -3
  2550 0000212F E8(00000000)                    call exit
  2551                                          
  2552                                  L_error_incorrect_type:
  2553 00002134 488B3C25[00000000]              mov rdi, qword [stderr]
  2554 0000213C 48BE-                           mov rsi, fmt_type
  2554 0000213E [2404000000000000] 
  2555 00002146 B800000000                      mov rax, 0
  2556                                          ENTER
    44 0000214B C8000000            <1>  enter 0, 0
    45 0000214F 4883E4F0            <1>  and rsp, ~15
  2557 00002153 E8(00000000)                    call fprintf
  2558                                          LEAVE
    49 00002158 C9                  <1>  leave
  2559 00002159 48C7C0FCFFFFFF                  mov rax, -4
  2560 00002160 E8(00000000)                    call exit
  2561                                  
  2562                                  L_error_division_by_zero:
  2563 00002165 488B3C25[00000000]              mov rdi, qword [stderr]
  2564 0000216D 48BE-                           mov rsi, fmt_division_by_zero
  2564 0000216F [6504000000000000] 
  2565 00002177 B800000000                      mov rax, 0
  2566                                          ENTER
    44 0000217C C8000000            <1>  enter 0, 0
    45 00002180 4883E4F0            <1>  and rsp, ~15
  2567 00002184 E8(00000000)                    call fprintf
  2568                                          LEAVE
    49 00002189 C9                  <1>  leave
  2569 0000218A 48C7C0F8FFFFFF                  mov rax, -8
  2570 00002191 E8(00000000)                    call exit
  2571                                  
  2572                                  section .data
  2573                                  gensym_count:
  2574 00000315 0000000000000000                dq 0
  2575                                  fmt_char:
  2576 0000031D 256300                          db `%c\0`
  2577                                  fmt_arg_negative:
  2578 00000320 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
  2578 00000329 7267756D656E742063-
  2578 00000332 616E6E6F7420626520-
  2578 0000033B 6E656761746976652E-
  2578 00000344 0A00               
  2579                                  fmt_arg_count_0:
  2580 00000346 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2580 0000034F 74696E67207A65726F-
  2580 00000358 20617267756D656E74-
  2580 00000361 732E20466F756E6420-
  2580 0000036A 25640A00           
  2581                                  fmt_arg_count_1:
  2582 0000036E 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2582 00000377 74696E67206F6E6520-
  2582 00000380 617267756D656E742E-
  2582 00000389 20466F756E64202564-
  2582 00000392 0A00               
  2583                                  fmt_arg_count_12:
  2584 00000394 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2584 0000039D 74696E67206F6E6520-
  2584 000003A6 726571756972656420-
  2584 000003AF 616E64206F6E65206F-
  2584 000003B8 7074696F6E616C2061-
  2584 000003C1 7267756D656E742E20-
  2584 000003CA 466F756E642025640A-
  2584 000003D3 00                 
  2585                                  fmt_arg_count_2:
  2586 000003D4 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2586 000003DD 74696E672074776F20-
  2586 000003E6 617267756D656E7473-
  2586 000003EF 2E20466F756E642025-
  2586 000003F8 640A00             
  2587                                  fmt_arg_count_3:
  2588 000003FB 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2588 00000404 74696E672074687265-
  2588 0000040D 6520617267756D656E-
  2588 00000416 74732E20466F756E64-
  2588 0000041F 2025640A00         
  2589                                  fmt_type:
  2590 00000424 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2590 0000042D 696F6E207061737365-
  2590 00000436 6420696E636F727265-
  2590 0000043F 637420747970650A00 
  2591                                  fmt_integer_range:
  2592 00000448 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2592 00000451 7265637420696E7465-
  2592 0000045A 6765722072616E6765-
  2592 00000463 0A00               
  2593                                  fmt_division_by_zero:
  2594 00000465 212121204469766973-             db `!!! Division by zero\n\0`
  2594 0000046E 696F6E206279207A65-
  2594 00000477 726F0A00           
  2595                                  fmt_scheme_error_part_1:
  2596 0000047B 0A2121212054686520-             db `\n!!! The procedure \0`
  2596 00000484 70726F636564757265-
  2596 0000048D 2000               
  2597                                  fmt_scheme_error_part_2:
  2598 0000048F 2061736B656420746F-             db ` asked to terminate the program\n`
  2598 00000498 207465726D696E6174-
  2598 000004A1 65207468652070726F-
  2598 000004AA 6772616D0A         
  2599 000004AF 202020207769746820-             db `    with the following message:\n\n\0`
  2599 000004B8 74686520666F6C6C6F-
  2599 000004C1 77696E67206D657373-
  2599 000004CA 6167653A0A0A00     
  2600                                  fmt_scheme_error_part_3:
  2601 000004D1 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2601 000004DA 210A0A00           
