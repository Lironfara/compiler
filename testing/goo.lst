     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "return"
    97 00000007 0600000000000000        	dq 6
    98 0000000F 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
    99                                  	; L_constants + 21:
   100 00000015 11                      	db T_integer	; 1
   101 00000016 0100000000000000        	dq 1
   102                                  
   103                                  
   104                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
   105                                  global main
   106                                  section .text
   107                                  main:
   108 00000000 C8000000                        enter 0, 0
   109 00000004 6A00                            push 0
   110 00000006 6A00                            push 0
   111 00000008 68[81010000]                    push Lend
   112 0000000D C8000000                        enter 0, 0
   113                                  
   114                                  	; preparing a non-tail-call
   115 00000011 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   116 00000016 E8D1020000              	call malloc
   117 0000001B 50                      	push rax
   118 0000001C BF00000000              	mov rdi, 8 * 0	; new rib
   119 00000021 E8C6020000              	call malloc
   120 00000026 50                      	push rax
   121 00000027 BF08000000              	mov rdi, 8 * 1	; extended env
   122 0000002C E8BB020000              	call malloc
   123 00000031 488B7D10                	mov rdi, ENV
   124 00000035 BE00000000              	mov rsi, 0
   125 0000003A BA01000000              	mov rdx, 1
   126                                  .L_lambda_opt_env_loop_0001:	; ext_env[i + 1] <-- env[i]
   127 0000003F 4883FE00                	cmp rsi, 0
   128 00000043 7410                    	je .L_lambda_opt_env_end_0001
   129 00000045 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   130 00000049 48890CD0                	mov qword [rax + 8 * rdx], rcx
   131 0000004D 48FFC6                  	inc rsi
   132 00000050 48FFC2                  	inc rdx
   133 00000053 EBEA                    	jmp .L_lambda_opt_env_loop_0001
   134                                  .L_lambda_opt_env_end_0001:
   135 00000055 5B                      	pop rbx
   136 00000056 BE00000000              	mov rsi, 0
   137                                  .L_lambda_opt_params_loop_0001:	; copy params
   138 0000005B 4883FE00                	cmp rsi, 0
   139 0000005F 740E                    	je .L_lambda_opt_params_end_0001
   140 00000061 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   141 00000066 488914F3                	mov qword [rbx + 8 * rsi], rdx
   142 0000006A 48FFC6                  	inc rsi
   143 0000006D EBEC                    	jmp .L_lambda_opt_params_loop_0001
   144                                  .L_lambda_opt_params_end_0001:
   145 0000006F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   146 00000072 4889C3                  	mov rbx, rax
   147 00000075 58                      	pop rax
   148 00000076 C60004                  	mov byte [rax], T_closure
   149 00000079 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   150 0000007D 48C74009[87000000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0001
   151 00000085 EB37                    	jmp .L_lambda_opt_end_0001
   152                                  .L_lambda_opt_code_0001:	; lambda-opt body
   153 00000087 48837C241001            	cmp qword [rsp + 8 * 2], 1
   154 0000008D 740D                    	je .L_lambda_opt_arity_check_exact_0001
   155 0000008F 7F2D                    	jg .L_lambda_opt_arity_check_more_0001
   156 00000091 FF742410                	push qword [rsp + 8 * 2]
   157 00000095 6A01                    	push 1
   158 00000097 E91D020000              	jmp L_error_incorrect_arity_opt
   159                                  .L_lambda_opt_arity_check_exact_0001:
   160 0000009C 4883EC08                	sub rsp, 8
   161 000000A0 48C744241802000000      	mov qword[rsp + 8 * 3], 2
   162 000000A9 48C7442430-             	mov qword[rsp + 8 * 4+ 8*2], sob_nil
   162 000000AE [01000000]         
   163 000000B2 C8000000                	enter 0, 0
   164 000000B6 488B4520                	mov rax, PARAM(0)	; param a
   165 000000BA C9                      	leave
   166 000000BB C22000                  	ret AND_KILL_FRAME(2)
   167                                  .L_lambda_opt_end_0001:	; new closure is in rax
   168                                  .L_lambda_opt_arity_check_more_0001:
   169 000000BE 50                      	push rax
   170 000000BF 6A01                    	push 1	; arg count
   171 000000C1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   172 000000C6 E821020000              	call malloc
   173 000000CB 50                      	push rax
   174 000000CC BF00000000              	mov rdi, 8 * 0	; new rib
   175 000000D1 E816020000              	call malloc
   176 000000D6 50                      	push rax
   177 000000D7 BF08000000              	mov rdi, 8 * 1	; extended env
   178 000000DC E80B020000              	call malloc
   179 000000E1 488B7D10                	mov rdi, ENV
   180 000000E5 BE00000000              	mov rsi, 0
   181 000000EA BA01000000              	mov rdx, 1
   182                                  .L_lambda_simple_env_loop_0001:	; ext_env[i + 1] <-- env[i]
   183 000000EF 4883FE00                	cmp rsi, 0
   184 000000F3 7410                    	je .L_lambda_simple_env_end_0001
   185 000000F5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   186 000000F9 48890CD0                	mov qword [rax + 8 * rdx], rcx
   187 000000FD 48FFC6                  	inc rsi
   188 00000100 48FFC2                  	inc rdx
   189 00000103 EBEA                    	jmp .L_lambda_simple_env_loop_0001
   190                                  .L_lambda_simple_env_end_0001:
   191 00000105 5B                      	pop rbx
   192 00000106 BE00000000              	mov rsi, 0
   193                                  .L_lambda_simple_params_loop_0001:	; copy params
   194 0000010B 4883FE00                	cmp rsi, 0
   195 0000010F 740E                    	je .L_lambda_simple_params_end_0001
   196 00000111 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   197 00000116 488914F3                	mov qword [rbx + 8 * rsi], rdx
   198 0000011A 48FFC6                  	inc rsi
   199 0000011D EBEC                    	jmp .L_lambda_simple_params_loop_0001
   200                                  .L_lambda_simple_params_end_0001:
   201 0000011F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   202 00000122 4889C3                  	mov rbx, rax
   203 00000125 58                      	pop rax
   204 00000126 C60004                  	mov byte [rax], T_closure
   205 00000129 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   206 0000012D 48C74009[37010000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0001
   207 00000135 EB3B                    	jmp .L_lambda_simple_end_0001
   208                                  .L_lambda_simple_code_0001:	; lambda-simple body
   209 00000137 48837C241001            	cmp qword [rsp + 8 * 2], 1
   210 0000013D 740B                    	je .L_lambda_simple_arity_check_ok_0001
   211 0000013F FF742410                	push qword [rsp + 8 * 2]
   212 00000143 6A01                    	push 1
   213 00000145 E95B010000              	jmp L_error_incorrect_arity_simple
   214                                  .L_lambda_simple_arity_check_ok_0001:
   215 0000014A C8000000                	enter 0, 0
   216                                  	; preparing a non-tail-call
   217 0000014E 48B8-                   	mov rax, L_constants + 21
   217 00000150 [1500000000000000] 
   218 00000158 50                      	push rax
   219 00000159 6A01                    	push 1	; arg count
   220 0000015B 488B4520                	mov rax, PARAM(0)	; param f
   221 0000015F 803804                  	cmp byte [rax], T_closure
   222 00000162 0F85DB000000            	jne L_error_non_closure
   223 00000168 FF7001                  	push SOB_CLOSURE_ENV(rax)
   224 0000016B FF5009                  	call SOB_CLOSURE_CODE(rax)
   225 0000016E C9                      	leave
   226 0000016F C21800                  	ret AND_KILL_FRAME(1)
   227                                  .L_lambda_simple_end_0001:	; new closure is in rax
   228 00000172 803804                  	cmp byte [rax], T_closure
   229 00000175 0F85C8000000            	jne L_error_non_closure
   230 0000017B FF7001                  	push SOB_CLOSURE_ENV(rax)
   231 0000017E FF5009                  	call SOB_CLOSURE_CODE(rax)
   232                                  Lend:
   233 00000181 4889C7                  	mov rdi, rax
   234 00000184 E8B8030000              	call print_sexpr_if_not_void
   235                                  
   236 00000189 48BF-                           mov rdi, fmt_memory_usage
   236 0000018B [B600000000000000] 
   237 00000193 488B3425[3C010000]              mov rsi, qword [top_of_memory]
   238 0000019B 4881EE[00000000]                sub rsi, memory
   239 000001A2 B800000000                      mov rax, 0
   240                                          ENTER
    44 000001A7 C8000000            <1>  enter 0, 0
    45 000001AB 4883E4F0            <1>  and rsp, ~15
   241 000001AF E8(00000000)                    call printf
   242                                          LEAVE
    49 000001B4 C9                  <1>  leave
   243 000001B5 B800000000                      mov rax, 0
   244 000001BA E8(00000000)                    call exit
   245                                  
   246                                  L_error_fvar_undefined:
   247 000001BF 50                              push rax
   248 000001C0 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
   249 000001C8 48BE-                           mov rsi, fmt_undefined_free_var_1
   249 000001CA [1E00000000000000] 
   250 000001D2 B800000000                      mov rax, 0
   251                                          ENTER
    44 000001D7 C8000000            <1>  enter 0, 0
    45 000001DB 4883E4F0            <1>  and rsp, ~15
   252 000001DF E8(00000000)                    call fprintf
   253                                          LEAVE
    49 000001E4 C9                  <1>  leave
   254 000001E5 58                              pop rax
   255 000001E6 488B4001                        mov rax, qword [rax + 1] ; string
   256 000001EA 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
   257 000001EE BE01000000                      mov rsi, 1               ; sizeof(char)
   258 000001F3 488B5001                        mov rdx, qword [rax + 1] ; string-length
   259 000001F7 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
   260 000001FF B800000000                      mov rax, 0
   261                                          ENTER
    44 00000204 C8000000            <1>  enter 0, 0
    45 00000208 4883E4F0            <1>  and rsp, ~15
   262 0000020C E8(00000000)                    call fwrite
   263                                          LEAVE
    49 00000211 C9                  <1>  leave
   264 00000212 488B3C25[00000000]              mov rdi, [stderr]       ; destination
   265 0000021A 48BE-                           mov rsi, fmt_undefined_free_var_2
   265 0000021C [3500000000000000] 
   266 00000224 B800000000                      mov rax, 0
   267                                          ENTER
    44 00000229 C8000000            <1>  enter 0, 0
    45 0000022D 4883E4F0            <1>  and rsp, ~15
   268 00000231 E8(00000000)                    call fprintf
   269                                          LEAVE
    49 00000236 C9                  <1>  leave
   270 00000237 48C7C0F6FFFFFF                  mov rax, -10
   271 0000023E E8(00000000)                    call exit
   272                                  
   273                                  L_error_non_closure:
   274 00000243 488B3C25[00000000]              mov rdi, qword [stderr]
   275 0000024B 48BE-                           mov rsi, fmt_non_closure
   275 0000024D [EC00000000000000] 
   276 00000255 B800000000                      mov rax, 0
   277                                          ENTER
    44 0000025A C8000000            <1>  enter 0, 0
    45 0000025E 4883E4F0            <1>  and rsp, ~15
   278 00000262 E8(00000000)                    call fprintf
   279                                          LEAVE
    49 00000267 C9                  <1>  leave
   280 00000268 48C7C0FEFFFFFF                  mov rax, -2
   281 0000026F E8(00000000)                    call exit
   282                                  
   283                                  L_error_improper_list:
   284 00000274 488B3C25[00000000]      	mov rdi, qword [stderr]
   285 0000027C 48BE-                   	mov rsi, fmt_error_improper_list
   285 0000027E [1401000000000000] 
   286 00000286 B800000000              	mov rax, 0
   287                                          ENTER
    44 0000028B C8000000            <1>  enter 0, 0
    45 0000028F 4883E4F0            <1>  and rsp, ~15
   288 00000293 E8(00000000)            	call fprintf
   289                                          LEAVE
    49 00000298 C9                  <1>  leave
   290 00000299 48C7C0F9FFFFFF          	mov rax, -7
   291 000002A0 E8(00000000)            	call exit
   292                                  
   293                                  L_error_incorrect_arity_simple:
   294 000002A5 488B3C25[00000000]              mov rdi, qword [stderr]
   295 000002AD 48BE-                           mov rsi, fmt_incorrect_arity_simple
   295 000002AF [5700000000000000] 
   296 000002B7 EB12                            jmp L_error_incorrect_arity_common
   297                                  L_error_incorrect_arity_opt:
   298 000002B9 488B3C25[00000000]              mov rdi, qword [stderr]
   299 000002C1 48BE-                           mov rsi, fmt_incorrect_arity_opt
   299 000002C3 [8200000000000000] 
   300                                  L_error_incorrect_arity_common:
   301 000002CB 5A                              pop rdx
   302 000002CC 59                              pop rcx
   303 000002CD B800000000                      mov rax, 0
   304                                          ENTER
    44 000002D2 C8000000            <1>  enter 0, 0
    45 000002D6 4883E4F0            <1>  and rsp, ~15
   305 000002DA E8(00000000)                    call fprintf
   306                                          LEAVE
    49 000002DF C9                  <1>  leave
   307 000002E0 48C7C0FAFFFFFF                  mov rax, -6
   308 000002E7 E8(00000000)                    call exit
   309                                  
   310                                  section .data
   311                                  fmt_undefined_free_var_1:
   312 0000001E 212121205468652066-             db `!!! The free variable \0`
   312 00000027 726565207661726961-
   312 00000030 626C652000         
   313                                  fmt_undefined_free_var_2:
   314 00000035 207761732075736564-             db ` was used before it was defined.\n\0`
   314 0000003E 206265666F72652069-
   314 00000047 742077617320646566-
   314 00000050 696E65642E0A00     
   315                                  fmt_incorrect_arity_simple:
   316 00000057 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   316 00000060 74656420256C642061-
   316 00000069 7267756D656E74732C-
   316 00000072 206275742067697665-
   316 0000007B 6E20256C640A00     
   317                                  fmt_incorrect_arity_opt:
   318 00000082 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   318 0000008B 746564206174206C65-
   318 00000094 61737420256C642061-
   318 0000009D 7267756D656E74732C-
   318 000000A6 206275742067697665-
   318 000000AF 6E20256C640A00     
   319                                  fmt_memory_usage:
   320 000000B6 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   320 000000BF 20256C642062797465-
   320 000000C8 73206F662064796E61-
   320 000000D1 6D6963616C6C792D61-
   320 000000DA 6C6C6F636174656420-
   320 000000E3 6D656D6F72790A0A00 
   321                                  fmt_non_closure:
   322 000000EC 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   322 000000F5 7074696E6720746F20-
   322 000000FE 6170706C792061206E-
   322 00000107 6F6E2D636C6F737572-
   322 00000110 65210A00           
   323                                  fmt_error_improper_list:
   324 00000114 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   324 0000011D 7267756D656E742069-
   324 00000126 73206E6F7420612070-
   324 0000012F 726F706572206C6973-
   324 00000138 74210A00           
   325                                  
   326                                  section .bss
   327                                  memory:
   328 00000000 <res 40000000h>         	resb gbytes(1)
   329                                  
   330                                  section .data
   331                                  top_of_memory:
   332 0000013C [0000000000000000]              dq memory
   333                                  
   334                                  section .text
   335                                  malloc:
   336 000002EC 488B0425[3C010000]              mov rax, qword [top_of_memory]
   337 000002F4 48013C25[3C010000]              add qword [top_of_memory], rdi
   338 000002FC C3                              ret
   339                                  
   340                                  L_code_ptr_return:
   341 000002FD 48837C241002            	cmp qword [rsp + 8*2], 2
   342 00000303 0F85461C0000            	jne L_error_arg_count_2
   343 00000309 488B4C2418              	mov rcx, qword [rsp + 8*3]
   344                                  	assert_integer(rcx)
    53 0000030E 803911              <1>  cmp byte [%1], %2
    54 00000311 0F85D71C0000        <1>  jne L_error_incorrect_type
   345 00000317 488B4901                	mov rcx, qword [rcx + 1]
   346 0000031B 4883F900                	cmp rcx, 0
   347 0000031F 0F8C5E1B0000            	jl L_error_integer_range
   348 00000325 488B442420              	mov rax, qword [rsp + 8*4]
   349                                  .L0:
   350 0000032A 4883F900                        cmp rcx, 0
   351 0000032E 7409                            je .L1
   352 00000330 488B6D00                	mov rbp, qword [rbp]
   353 00000334 48FFC9                  	dec rcx
   354 00000337 7FF1                    	jg .L0
   355                                  .L1:
   356 00000339 4889EC                  	mov rsp, rbp
   357 0000033C 5D                      	pop rbp
   358 0000033D 5B                              pop rbx
   359 0000033E 488B4C2408                      mov rcx, qword [rsp + 8*1]
   360 00000343 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
   361 00000348 FFE3                    	jmp rbx
   362                                  
   363                                  L_code_ptr_make_list:
   364 0000034A C8000000                	enter 0, 0
   365 0000034E 48837D1801                      cmp COUNT, 1
   366 00000353 740C                            je .L0
   367 00000355 48837D1802                      cmp COUNT, 2
   368 0000035A 7411                            je .L1
   369 0000035C E9231C0000                      jmp L_error_arg_count_12
   370                                  .L0:
   371 00000361 49B9-                           mov r9, sob_void
   371 00000363 [0000000000000000] 
   372 0000036B EB04                            jmp .L2
   373                                  .L1:
   374 0000036D 4C8B4D28                        mov r9, PARAM(1)
   375                                  .L2:
   376 00000371 488B4D20                        mov rcx, PARAM(0)
   377                                          assert_integer(rcx)
    53 00000375 803911              <1>  cmp byte [%1], %2
    54 00000378 0F85701C0000        <1>  jne L_error_incorrect_type
   378 0000037E 488B4901                        mov rcx, qword [rcx + 1]
   379 00000382 4883F900                        cmp rcx, 0
   380 00000386 0F8C281B0000                    jl L_error_arg_negative
   381 0000038C 49B8-                           mov r8, sob_nil
   381 0000038E [0100000000000000] 
   382                                  .L3:
   383 00000396 4883F900                        cmp rcx, 0
   384 0000039A 7E1D                            jle .L4
   385 0000039C BF11000000                      mov rdi, 1 + 8 + 8
   386 000003A1 E846FFFFFF                      call malloc
   387 000003A6 C60021                          mov byte [rax], T_pair
   388 000003A9 4C894801                        mov qword [rax + 1], r9
   389 000003AD 4C894009                        mov qword [rax + 1 + 8], r8
   390 000003B1 4989C0                          mov r8, rax
   391 000003B4 48FFC9                          dec rcx
   392 000003B7 EBDD                            jmp .L3
   393                                  .L4:
   394 000003B9 4C89C0                          mov rax, r8
   395 000003BC 48837D1802                      cmp COUNT, 2
   396 000003C1 7404                            je .L5
   397 000003C3 C9                              leave
   398 000003C4 C21800                          ret AND_KILL_FRAME(1)
   399                                  .L5:
   400 000003C7 C9                      	leave
   401 000003C8 C22000                  	ret AND_KILL_FRAME(2)
   402                                  
   403                                  L_code_ptr_is_primitive:
   404 000003CB C8000000                	enter 0, 0
   405 000003CF 48837D1801              	cmp COUNT, 1
   406 000003D4 0F85401B0000            	jne L_error_arg_count_1
   407 000003DA 488B4520                	mov rax, PARAM(0)
   408                                  	assert_closure(rax)
    53 000003DE 803804              <1>  cmp byte [%1], %2
    54 000003E1 0F85071C0000        <1>  jne L_error_incorrect_type
   409 000003E7 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
   410 000003EC 750C                    	jne .L_false
   411 000003EE 48B8-                   	mov rax, sob_boolean_true
   411 000003F0 [0300000000000000] 
   412 000003F8 EB0A                    	jmp .L_end
   413                                  .L_false:
   414 000003FA 48B8-                   	mov rax, sob_boolean_false
   414 000003FC [0200000000000000] 
   415                                  .L_end:
   416 00000404 C9                      	leave
   417 00000405 C21800                  	ret AND_KILL_FRAME(1)
   418                                  
   419                                  L_code_ptr_length:
   420 00000408 C8000000                	enter 0, 0
   421 0000040C 48837D1801              	cmp COUNT, 1
   422 00000411 0F85031B0000            	jne L_error_arg_count_1
   423 00000417 488B5D20                	mov rbx, PARAM(0)
   424 0000041B BF00000000              	mov rdi, 0
   425                                  .L:
   426 00000420 803B01                  	cmp byte [rbx], T_nil
   427 00000423 7412                    	je .L_end
   428                                  	assert_pair(rbx)
    53 00000425 803B21              <1>  cmp byte [%1], %2
    54 00000428 0F85C01B0000        <1>  jne L_error_incorrect_type
   429 0000042E 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
   430 00000432 48FFC7                  	inc rdi
   431 00000435 EBE9                    	jmp .L
   432                                  .L_end:
   433 00000437 E82D1A0000              	call make_integer
   434 0000043C C9                      	leave
   435 0000043D C21800                  	ret AND_KILL_FRAME(1)
   436                                  
   437                                  L_code_ptr_break:
   438 00000440 48837C241000                    cmp qword [rsp + 8 * 2], 0
   439 00000446 0F85991A0000                    jne L_error_arg_count_0
   440 0000044C CC                              int3
   441 0000044D 48B8-                           mov rax, sob_void
   441 0000044F [0000000000000000] 
   442 00000457 C21000                          ret AND_KILL_FRAME(0)        
   443                                  
   444                                  L_code_ptr_frame:
   445 0000045A C8000000                        enter 0, 0
   446 0000045E 48837D1800                      cmp COUNT, 0
   447 00000463 0F857C1A0000                    jne L_error_arg_count_0
   448                                  
   449 00000469 48BF-                           mov rdi, fmt_frame
   449 0000046B [4401000000000000] 
   450 00000473 488B7500                        mov rsi, qword [rbp]    ; old rbp
   451 00000477 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
   452 0000047B 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
   453 0000047F 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
   454 00000483 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
   455 00000487 6A00                            push 0
   456 00000489 4151                            push r9
   457 0000048B 4150                            push r8                   ; we'll use it when printing the params
   458 0000048D B800000000                      mov rax, 0
   459                                          
   460                                          ENTER
    44 00000492 C8000000            <1>  enter 0, 0
    45 00000496 4883E4F0            <1>  and rsp, ~15
   461 0000049A E8(00000000)                    call printf
   462                                          LEAVE
    49 0000049F C9                  <1>  leave
   463                                  
   464                                  .L:
   465 000004A0 488B0C24                        mov rcx, qword [rsp]
   466 000004A4 4883F900                        cmp rcx, 0
   467 000004A8 7467                            je .L_out
   468 000004AA 48BF-                           mov rdi, fmt_frame_param_prefix
   468 000004AC [7D01000000000000] 
   469 000004B4 488B742410                      mov rsi, qword [rsp + 8*2]
   470 000004B9 B800000000                      mov rax, 0
   471                                          
   472                                          ENTER
    44 000004BE C8000000            <1>  enter 0, 0
    45 000004C2 4883E4F0            <1>  and rsp, ~15
   473 000004C6 E8(00000000)                    call printf
   474                                          LEAVE
    49 000004CB C9                  <1>  leave
   475                                  
   476 000004CC 488B0C24                        mov rcx, qword [rsp]
   477 000004D0 48FFC9                          dec rcx
   478 000004D3 48890C24                        mov qword [rsp], rcx    ; dec arg count
   479 000004D7 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
   480 000004DC 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
   481 000004E1 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
   482 000004E5 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
   483 000004EA 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
   484 000004ED E87B000000                      call print_sexpr
   485 000004F2 48BF-                           mov rdi, fmt_newline
   485 000004F4 [A901000000000000] 
   486 000004FC B800000000                      mov rax, 0
   487                                          ENTER
    44 00000501 C8000000            <1>  enter 0, 0
    45 00000505 4883E4F0            <1>  and rsp, ~15
   488 00000509 E8(00000000)                    call printf
   489                                          LEAVE
    49 0000050E C9                  <1>  leave
   490 0000050F EB8F                            jmp .L
   491                                  .L_out:
   492 00000511 48BF-                           mov rdi, fmt_frame_continue
   492 00000513 [8E01000000000000] 
   493 0000051B B800000000                      mov rax, 0
   494                                          ENTER
    44 00000520 C8000000            <1>  enter 0, 0
    45 00000524 4883E4F0            <1>  and rsp, ~15
   495 00000528 E8(00000000)                    call printf
   496 0000052D E8(00000000)                    call getchar
   497                                          LEAVE
    49 00000532 C9                  <1>  leave
   498                                          
   499 00000533 48B8-                           mov rax, sob_void
   499 00000535 [0000000000000000] 
   500 0000053D C9                              leave
   501 0000053E C21000                          ret AND_KILL_FRAME(0)
   502                                          
   503                                  print_sexpr_if_not_void:
   504 00000541 4881FF[00000000]        	cmp rdi, sob_void
   505 00000548 7422                    	je .done
   506 0000054A E81E000000              	call print_sexpr
   507 0000054F 48BF-                   	mov rdi, fmt_newline
   507 00000551 [A901000000000000] 
   508 00000559 B800000000              	mov rax, 0
   509                                  	ENTER
    44 0000055E C8000000            <1>  enter 0, 0
    45 00000562 4883E4F0            <1>  and rsp, ~15
   510 00000566 E8(00000000)            	call printf
   511                                  	LEAVE
    49 0000056B C9                  <1>  leave
   512                                  .done:
   513 0000056C C3                      	ret
   514                                  
   515                                  section .data
   516                                  fmt_frame:
   517 00000144 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
   517 0000014D 207265742061646472-
   517 00000156 203D2025703B206C65-
   517 0000015F 7820656E76203D2025-
   517 00000168 703B20706172616D20-
   517 00000171 636F756E74203D2025-
   517 0000017A 640A00             
   518                                  fmt_frame_param_prefix:
   519 0000017D 3D3D5B706172616D20-             db `==[param %d]==> \0`
   519 00000186 25645D3D3D3E2000   
   520                                  fmt_frame_continue:
   521 0000018E 486974203C456E7465-             db `Hit <Enter> to continue...\0`
   521 00000197 723E20746F20636F6E-
   521 000001A0 74696E75652E2E2E00 
   522                                  fmt_newline:
   523 000001A9 0A00                    	db `\n\0`
   524                                  fmt_void:
   525 000001AB 233C766F69643E00        	db `#<void>\0`
   526                                  fmt_nil:
   527 000001B3 282900                  	db `()\0`
   528                                  fmt_boolean_false:
   529 000001B6 236600                  	db `#f\0`
   530                                  fmt_boolean_true:
   531 000001B9 237400                  	db `#t\0`
   532                                  fmt_char_backslash:
   533 000001BC 235C5C00                	db `#\\\\\0`
   534                                  fmt_char_dquote:
   535 000001C0 235C2200                	db `#\\"\0`
   536                                  fmt_char_simple:
   537 000001C4 235C256300              	db `#\\%c\0`
   538                                  fmt_char_null:
   539 000001C9 235C6E756C00            	db `#\\nul\0`
   540                                  fmt_char_bell:
   541 000001CF 235C62656C6C00          	db `#\\bell\0`
   542                                  fmt_char_backspace:
   543 000001D6 235C6261636B737061-     	db `#\\backspace\0`
   543 000001DF 636500             
   544                                  fmt_char_tab:
   545 000001E2 235C74616200            	db `#\\tab\0`
   546                                  fmt_char_newline:
   547 000001E8 235C6E65776C696E65-     	db `#\\newline\0`
   547 000001F1 00                 
   548                                  fmt_char_formfeed:
   549 000001F2 235C7061676500          	db `#\\page\0`
   550                                  fmt_char_return:
   551 000001F9 235C72657475726E00      	db `#\\return\0`
   552                                  fmt_char_escape:
   553 00000202 235C65736300            	db `#\\esc\0`
   554                                  fmt_char_space:
   555 00000208 235C737061636500        	db `#\\space\0`
   556                                  fmt_char_hex:
   557 00000210 235C782530325800        	db `#\\x%02X\0`
   558                                  fmt_gensym:
   559 00000218 47256C6400                      db `G%ld\0`
   560                                  fmt_closure:
   561 0000021D 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   561 00000226 206174203078253038-
   561 0000022F 5820656E763D307825-
   561 00000238 30385820636F64653D-
   561 00000241 3078253038583E00   
   562                                  fmt_lparen:
   563 00000249 2800                    	db `(\0`
   564                                  fmt_dotted_pair:
   565 0000024B 202E2000                	db ` . \0`
   566                                  fmt_rparen:
   567 0000024F 2900                    	db `)\0`
   568                                  fmt_space:
   569 00000251 2000                    	db ` \0`
   570                                  fmt_empty_vector:
   571 00000253 23282900                	db `#()\0`
   572                                  fmt_vector:
   573 00000257 232800                  	db `#(\0`
   574                                  fmt_real:
   575 0000025A 256600                  	db `%f\0`
   576                                  fmt_fraction:
   577 0000025D 256C642F256C6400        	db `%ld/%ld\0`
   578                                  fmt_zero:
   579 00000265 3000                    	db `0\0`
   580                                  fmt_int:
   581 00000267 256C6400                	db `%ld\0`
   582                                  fmt_unknown_scheme_object_error:
   583 0000026B 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
   583 00000274 6F723A20556E6B6E6F-
   583 0000027D 776E20536368656D65-
   583 00000286 2D6F626A6563742028-
   583 0000028F 525454492030782530-
   583 00000298 32582920           
   584 0000029C 617420616464726573-     	db `at address 0x%08X\n\n\0`
   584 000002A5 73203078253038580A-
   584 000002AE 0A00               
   585                                  fmt_dquote:
   586 000002B0 2200                    	db `\"\0`
   587                                  fmt_string_char:
   588 000002B2 256300                          db `%c\0`
   589                                  fmt_string_char_7:
   590 000002B5 5C6100                          db `\\a\0`
   591                                  fmt_string_char_8:
   592 000002B8 5C6200                          db `\\b\0`
   593                                  fmt_string_char_9:
   594 000002BB 5C7400                          db `\\t\0`
   595                                  fmt_string_char_10:
   596 000002BE 5C6E00                          db `\\n\0`
   597                                  fmt_string_char_11:
   598 000002C1 5C7600                          db `\\v\0`
   599                                  fmt_string_char_12:
   600 000002C4 5C6600                          db `\\f\0`
   601                                  fmt_string_char_13:
   602 000002C7 5C7200                          db `\\r\0`
   603                                  fmt_string_char_34:
   604 000002CA 5C2200                          db `\\"\0`
   605                                  fmt_string_char_92:
   606 000002CD 5C5C00                          db `\\\\\0`
   607                                  fmt_string_char_hex:
   608 000002D0 5C7825583B00                    db `\\x%X;\0`
   609                                  
   610                                  section .text
   611                                  
   612                                  print_sexpr:
   613 0000056D C8000000                	enter 0, 0
   614 00000571 8A07                    	mov al, byte [rdi]
   615 00000573 3C00                    	cmp al, T_void
   616 00000575 7465                    	je .Lvoid
   617 00000577 3C01                    	cmp al, T_nil
   618 00000579 7470                    	je .Lnil
   619 0000057B 3C09                    	cmp al, T_boolean_false
   620 0000057D 747B                    	je .Lboolean_false
   621 0000057F 3C0A                    	cmp al, T_boolean_true
   622 00000581 0F8482000000            	je .Lboolean_true
   623 00000587 3C02                    	cmp al, T_char
   624 00000589 0F8489000000            	je .Lchar
   625 0000058F 3C41                    	cmp al, T_interned_symbol
   626 00000591 0F84BF010000            	je .Linterned_symbol
   627 00000597 3C42                            cmp al, T_uninterned_symbol
   628 00000599 0F84E3010000                    je .Luninterned_symbol
   629 0000059F 3C21                    	cmp al, T_pair
   630 000005A1 0F84EE010000            	je .Lpair
   631 000005A7 3C22                    	cmp al, T_vector
   632 000005A9 0F84B7020000            	je .Lvector
   633 000005AF 3C04                    	cmp al, T_closure
   634 000005B1 0F8485010000            	je .Lclosure
   635 000005B7 3C13                    	cmp al, T_real
   636 000005B9 0F8448030000            	je .Lreal
   637 000005BF 3C12                    	cmp al, T_fraction
   638 000005C1 0F846E030000            	je .Lfraction
   639 000005C7 3C11                    	cmp al, T_integer
   640 000005C9 0F84A7030000            	je .Linteger
   641 000005CF 3C03                    	cmp al, T_string
   642 000005D1 0F84B2030000            	je .Lstring
   643                                  
   644 000005D7 E9DC040000              	jmp .Lunknown_sexpr_type
   645                                  
   646                                  .Lvoid:
   647 000005DC 48BF-                   	mov rdi, fmt_void
   647 000005DE [AB01000000000000] 
   648 000005E6 E900050000              	jmp .Lemit
   649                                  
   650                                  .Lnil:
   651 000005EB 48BF-                   	mov rdi, fmt_nil
   651 000005ED [B301000000000000] 
   652 000005F5 E9F1040000              	jmp .Lemit
   653                                  
   654                                  .Lboolean_false:
   655 000005FA 48BF-                   	mov rdi, fmt_boolean_false
   655 000005FC [B601000000000000] 
   656 00000604 E9E2040000              	jmp .Lemit
   657                                  
   658                                  .Lboolean_true:
   659 00000609 48BF-                   	mov rdi, fmt_boolean_true
   659 0000060B [B901000000000000] 
   660 00000613 E9D3040000              	jmp .Lemit
   661                                  
   662                                  .Lchar:
   663 00000618 8A4701                  	mov al, byte [rdi + 1]
   664 0000061B 3C20                    	cmp al, ' '
   665 0000061D 7E20                    	jle .Lchar_whitespace
   666 0000061F 3C5C                    	cmp al, 92 		; backslash
   667 00000621 7474                    	je .Lchar_backslash
   668 00000623 3C22                    	cmp al, '"'
   669 00000625 747F                    	je .Lchar_dquote
   670 00000627 4825FF000000            	and rax, 255
   671 0000062D 48BF-                   	mov rdi, fmt_char_simple
   671 0000062F [C401000000000000] 
   672 00000637 4889C6                  	mov rsi, rax
   673 0000063A E9AC040000              	jmp .Lemit
   674                                  
   675                                  .Lchar_whitespace:
   676 0000063F 3C00                    	cmp al, 0
   677 00000641 7472                    	je .Lchar_null
   678 00000643 3C07                    	cmp al, 7
   679 00000645 747D                    	je .Lchar_bell
   680 00000647 3C08                    	cmp al, 8
   681 00000649 0F8484000000            	je .Lchar_backspace
   682 0000064F 3C09                    	cmp al, 9
   683 00000651 0F848B000000            	je .Lchar_tab
   684 00000657 3C0A                    	cmp al, 10
   685 00000659 0F8492000000            	je .Lchar_newline
   686 0000065F 3C0C                    	cmp al, 12
   687 00000661 0F8499000000            	je .Lchar_formfeed
   688 00000667 3C0D                    	cmp al, 13
   689 00000669 0F84A0000000            	je .Lchar_return
   690 0000066F 3C1B                    	cmp al, 27
   691 00000671 0F84A7000000            	je .Lchar_escape
   692 00000677 4825FF000000            	and rax, 255
   693 0000067D 3C20                    	cmp al, ' '
   694 0000067F 0F84A8000000            	je .Lchar_space
   695 00000685 48BF-                   	mov rdi, fmt_char_hex
   695 00000687 [1002000000000000] 
   696 0000068F 4889C6                  	mov rsi, rax
   697 00000692 E954040000              	jmp .Lemit	
   698                                  
   699                                  .Lchar_backslash:
   700 00000697 48BF-                   	mov rdi, fmt_char_backslash
   700 00000699 [BC01000000000000] 
   701 000006A1 E945040000              	jmp .Lemit
   702                                  
   703                                  .Lchar_dquote:
   704 000006A6 48BF-                   	mov rdi, fmt_char_dquote
   704 000006A8 [C001000000000000] 
   705 000006B0 E936040000              	jmp .Lemit
   706                                  
   707                                  .Lchar_null:
   708 000006B5 48BF-                   	mov rdi, fmt_char_null
   708 000006B7 [C901000000000000] 
   709 000006BF E927040000              	jmp .Lemit
   710                                  
   711                                  .Lchar_bell:
   712 000006C4 48BF-                   	mov rdi, fmt_char_bell
   712 000006C6 [CF01000000000000] 
   713 000006CE E918040000              	jmp .Lemit
   714                                  
   715                                  .Lchar_backspace:
   716 000006D3 48BF-                   	mov rdi, fmt_char_backspace
   716 000006D5 [D601000000000000] 
   717 000006DD E909040000              	jmp .Lemit
   718                                  
   719                                  .Lchar_tab:
   720 000006E2 48BF-                   	mov rdi, fmt_char_tab
   720 000006E4 [E201000000000000] 
   721 000006EC E9FA030000              	jmp .Lemit
   722                                  
   723                                  .Lchar_newline:
   724 000006F1 48BF-                   	mov rdi, fmt_char_newline
   724 000006F3 [E801000000000000] 
   725 000006FB E9EB030000              	jmp .Lemit
   726                                  
   727                                  .Lchar_formfeed:
   728 00000700 48BF-                   	mov rdi, fmt_char_formfeed
   728 00000702 [F201000000000000] 
   729 0000070A E9DC030000              	jmp .Lemit
   730                                  
   731                                  .Lchar_return:
   732 0000070F 48BF-                   	mov rdi, fmt_char_return
   732 00000711 [F901000000000000] 
   733 00000719 E9CD030000              	jmp .Lemit
   734                                  
   735                                  .Lchar_escape:
   736 0000071E 48BF-                   	mov rdi, fmt_char_escape
   736 00000720 [0202000000000000] 
   737 00000728 E9BE030000              	jmp .Lemit
   738                                  
   739                                  .Lchar_space:
   740 0000072D 48BF-                   	mov rdi, fmt_char_space
   740 0000072F [0802000000000000] 
   741 00000737 E9AF030000              	jmp .Lemit
   742                                  
   743                                  .Lclosure:
   744 0000073C 4889FE                  	mov rsi, qword rdi
   745 0000073F 48BF-                   	mov rdi, fmt_closure
   745 00000741 [1D02000000000000] 
   746 00000749 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   747 0000074D 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   748 00000751 E995030000              	jmp .Lemit
   749                                  
   750                                  .Linterned_symbol:
   751 00000756 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   752 0000075A BE01000000              	mov rsi, 1		 ; size = 1 byte
   753 0000075F 488B5701                	mov rdx, qword [rdi + 1] ; length
   754 00000763 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   755 00000767 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   756                                  	ENTER
    44 0000076F C8000000            <1>  enter 0, 0
    45 00000773 4883E4F0            <1>  and rsp, ~15
   757 00000777 E8(00000000)            	call fwrite
   758                                  	LEAVE
    49 0000077C C9                  <1>  leave
   759 0000077D E97E030000              	jmp .Lend
   760                                  
   761                                  .Luninterned_symbol:
   762 00000782 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
   763 00000786 48BF-                           mov rdi, fmt_gensym
   763 00000788 [1802000000000000] 
   764 00000790 E956030000                      jmp .Lemit
   765                                  	
   766                                  .Lpair:
   767 00000795 57                      	push rdi
   768 00000796 48BF-                   	mov rdi, fmt_lparen
   768 00000798 [4902000000000000] 
   769 000007A0 B800000000              	mov rax, 0
   770                                          ENTER
    44 000007A5 C8000000            <1>  enter 0, 0
    45 000007A9 4883E4F0            <1>  and rsp, ~15
   771 000007AD E8(00000000)            	call printf
   772                                          LEAVE
    49 000007B2 C9                  <1>  leave
   773 000007B3 488B3C24                	mov rdi, qword [rsp] 	; pair
   774 000007B7 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   775 000007BB E8ADFDFFFF              	call print_sexpr
   776 000007C0 5F                      	pop rdi 		; pair
   777 000007C1 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   778                                  .Lcdr:
   779 000007C5 8A07                    	mov al, byte [rdi]
   780 000007C7 3C01                    	cmp al, T_nil
   781 000007C9 7447                    	je .Lcdr_nil
   782 000007CB 3C21                    	cmp al, T_pair
   783 000007CD 7462                    	je .Lcdr_pair
   784 000007CF 57                      	push rdi
   785 000007D0 48BF-                   	mov rdi, fmt_dotted_pair
   785 000007D2 [4B02000000000000] 
   786 000007DA B800000000              	mov rax, 0
   787                                          ENTER
    44 000007DF C8000000            <1>  enter 0, 0
    45 000007E3 4883E4F0            <1>  and rsp, ~15
   788 000007E7 E8(00000000)            	call printf
   789                                          LEAVE
    49 000007EC C9                  <1>  leave
   790 000007ED 5F                      	pop rdi
   791 000007EE E87AFDFFFF              	call print_sexpr
   792 000007F3 48BF-                   	mov rdi, fmt_rparen
   792 000007F5 [4F02000000000000] 
   793 000007FD B800000000              	mov rax, 0
   794                                          ENTER
    44 00000802 C8000000            <1>  enter 0, 0
    45 00000806 4883E4F0            <1>  and rsp, ~15
   795 0000080A E8(00000000)            	call printf
   796                                          LEAVE
    49 0000080F C9                  <1>  leave
   797 00000810 C9                      	leave
   798 00000811 C3                      	ret
   799                                  
   800                                  .Lcdr_nil:
   801 00000812 48BF-                   	mov rdi, fmt_rparen
   801 00000814 [4F02000000000000] 
   802 0000081C B800000000              	mov rax, 0
   803                                          ENTER
    44 00000821 C8000000            <1>  enter 0, 0
    45 00000825 4883E4F0            <1>  and rsp, ~15
   804 00000829 E8(00000000)            	call printf
   805                                          LEAVE
    49 0000082E C9                  <1>  leave
   806 0000082F C9                      	leave
   807 00000830 C3                      	ret
   808                                  
   809                                  .Lcdr_pair:
   810 00000831 57                      	push rdi
   811 00000832 48BF-                   	mov rdi, fmt_space
   811 00000834 [5102000000000000] 
   812 0000083C B800000000              	mov rax, 0
   813                                          ENTER
    44 00000841 C8000000            <1>  enter 0, 0
    45 00000845 4883E4F0            <1>  and rsp, ~15
   814 00000849 E8(00000000)            	call printf
   815                                          LEAVE
    49 0000084E C9                  <1>  leave
   816 0000084F 488B3C24                	mov rdi, qword [rsp]
   817 00000853 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   818 00000857 E811FDFFFF              	call print_sexpr
   819 0000085C 5F                      	pop rdi
   820 0000085D 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   821 00000861 E95FFFFFFF              	jmp .Lcdr
   822                                  
   823                                  .Lvector:
   824 00000866 488B4701                	mov rax, qword [rdi + 1] ; length
   825 0000086A 4883F800                	cmp rax, 0
   826 0000086E 0F8484000000            	je .Lvector_empty
   827 00000874 57                      	push rdi
   828 00000875 48BF-                   	mov rdi, fmt_vector
   828 00000877 [5702000000000000] 
   829 0000087F B800000000              	mov rax, 0
   830                                          ENTER
    44 00000884 C8000000            <1>  enter 0, 0
    45 00000888 4883E4F0            <1>  and rsp, ~15
   831 0000088C E8(00000000)            	call printf
   832                                          LEAVE
    49 00000891 C9                  <1>  leave
   833 00000892 488B3C24                	mov rdi, qword [rsp]
   834 00000896 FF7701                  	push qword [rdi + 1]
   835 00000899 6A01                    	push 1
   836 0000089B 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   837 0000089F E8C9FCFFFF              	call print_sexpr
   838                                  .Lvector_loop:
   839                                  	; [rsp] index
   840                                  	; [rsp + 8*1] limit
   841                                  	; [rsp + 8*2] vector
   842 000008A4 488B0424                	mov rax, qword [rsp]
   843 000008A8 483B442408              	cmp rax, qword [rsp + 8*1]
   844 000008AD 7436                    	je .Lvector_end
   845 000008AF 48BF-                   	mov rdi, fmt_space
   845 000008B1 [5102000000000000] 
   846 000008B9 B800000000              	mov rax, 0
   847                                          ENTER
    44 000008BE C8000000            <1>  enter 0, 0
    45 000008C2 4883E4F0            <1>  and rsp, ~15
   848 000008C6 E8(00000000)            	call printf
   849                                          LEAVE
    49 000008CB C9                  <1>  leave
   850 000008CC 488B0424                	mov rax, qword [rsp]
   851 000008D0 488B5C2410              	mov rbx, qword [rsp + 8*2]
   852 000008D5 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   853 000008DA E88EFCFFFF              	call print_sexpr
   854 000008DF 48FF0424                	inc qword [rsp]
   855 000008E3 EBBF                    	jmp .Lvector_loop
   856                                  
   857                                  .Lvector_end:
   858 000008E5 4883C418                	add rsp, 8*3
   859 000008E9 48BF-                   	mov rdi, fmt_rparen
   859 000008EB [4F02000000000000] 
   860 000008F3 E9F3010000              	jmp .Lemit	
   861                                  
   862                                  .Lvector_empty:
   863 000008F8 48BF-                   	mov rdi, fmt_empty_vector
   863 000008FA [5302000000000000] 
   864 00000902 E9E4010000              	jmp .Lemit
   865                                  
   866                                  .Lreal:
   867 00000907 FF7701                  	push qword [rdi + 1]
   868 0000090A F20F100424              	movsd xmm0, qword [rsp]
   869 0000090F 4883C408                	add rsp, 8*1
   870 00000913 48BF-                   	mov rdi, fmt_real
   870 00000915 [5A02000000000000] 
   871 0000091D B801000000              	mov rax, 1
   872                                  	ENTER
    44 00000922 C8000000            <1>  enter 0, 0
    45 00000926 4883E4F0            <1>  and rsp, ~15
   873 0000092A E8(00000000)            	call printf
   874                                  	LEAVE
    49 0000092F C9                  <1>  leave
   875 00000930 E9CB010000              	jmp .Lend
   876                                  
   877                                  .Lfraction:
   878 00000935 488B7701                	mov rsi, qword [rdi + 1]
   879 00000939 488B5709                	mov rdx, qword [rdi + 1 + 8]
   880 0000093D 4883FE00                	cmp rsi, 0
   881 00000941 7415                    	je .Lrat_zero
   882 00000943 4883FA01                	cmp rdx, 1
   883 00000947 741E                    	je .Lrat_int
   884 00000949 48BF-                   	mov rdi, fmt_fraction
   884 0000094B [5D02000000000000] 
   885 00000953 E993010000              	jmp .Lemit
   886                                  
   887                                  .Lrat_zero:
   888 00000958 48BF-                   	mov rdi, fmt_zero
   888 0000095A [6502000000000000] 
   889 00000962 E984010000              	jmp .Lemit
   890                                  
   891                                  .Lrat_int:
   892 00000967 48BF-                   	mov rdi, fmt_int
   892 00000969 [6702000000000000] 
   893 00000971 E975010000              	jmp .Lemit
   894                                  
   895                                  .Linteger:
   896 00000976 488B7701                	mov rsi, qword [rdi + 1]
   897 0000097A 48BF-                   	mov rdi, fmt_int
   897 0000097C [6702000000000000] 
   898 00000984 E962010000              	jmp .Lemit
   899                                  
   900                                  .Lstring:
   901 00000989 488D4709                	lea rax, [rdi + 1 + 8]
   902 0000098D 50                      	push rax
   903 0000098E FF7701                  	push qword [rdi + 1]
   904 00000991 48BF-                   	mov rdi, fmt_dquote
   904 00000993 [B002000000000000] 
   905 0000099B B800000000              	mov rax, 0
   906                                  	ENTER
    44 000009A0 C8000000            <1>  enter 0, 0
    45 000009A4 4883E4F0            <1>  and rsp, ~15
   907 000009A8 E8(00000000)            	call printf
   908                                  	LEAVE
    49 000009AD C9                  <1>  leave
   909                                  .Lstring_loop:
   910                                  	; qword [rsp]: limit
   911                                  	; qword [rsp + 8*1]: char *
   912 000009AE 48833C2400              	cmp qword [rsp], 0
   913 000009B3 0F84EF000000            	je .Lstring_end
   914 000009B9 488B442408              	mov rax, qword [rsp + 8*1]
   915 000009BE 8A00                    	mov al, byte [rax]
   916 000009C0 4825FF000000            	and rax, 255
   917 000009C6 3C07                    	cmp al, 7
   918 000009C8 745D                            je .Lstring_char_7
   919 000009CA 3C08                            cmp al, 8
   920 000009CC 7465                            je .Lstring_char_8
   921 000009CE 3C09                            cmp al, 9
   922 000009D0 746D                            je .Lstring_char_9
   923 000009D2 3C0A                            cmp al, 10
   924 000009D4 7475                            je .Lstring_char_10
   925 000009D6 3C0B                            cmp al, 11
   926 000009D8 747D                            je .Lstring_char_11
   927 000009DA 3C0C                            cmp al, 12
   928 000009DC 0F8481000000                    je .Lstring_char_12
   929 000009E2 3C0D                            cmp al, 13
   930 000009E4 0F8485000000                    je .Lstring_char_13
   931 000009EA 3C22                            cmp al, 34
   932 000009EC 0F8489000000                    je .Lstring_char_34
   933 000009F2 3C5C                            cmp al, 92              ;         je .Lstring_char_92
   935 000009F4 3C20                            cmp al, ' '
   936 000009F6 0F8C9A000000                    jl .Lstring_char_hex
   937 000009FC 48BF-                           mov rdi, fmt_string_char
   937 000009FE [B202000000000000] 
   938 00000A06 4889C6                          mov rsi, rax
   939                                  .Lstring_char_emit:
   940 00000A09 B800000000                      mov rax, 0
   941                                          ENTER
    44 00000A0E C8000000            <1>  enter 0, 0
    45 00000A12 4883E4F0            <1>  and rsp, ~15
   942 00000A16 E8(00000000)                    call printf
   943                                          LEAVE
    49 00000A1B C9                  <1>  leave
   944 00000A1C 48FF0C24                        dec qword [rsp]
   945 00000A20 48FF442408                      inc qword [rsp + 8*1]
   946 00000A25 EB87                            jmp .Lstring_loop
   947                                  
   948                                  .Lstring_char_7:
   949 00000A27 48BF-                           mov rdi, fmt_string_char_7
   949 00000A29 [B502000000000000] 
   950 00000A31 EBD6                            jmp .Lstring_char_emit
   951                                  
   952                                  .Lstring_char_8:
   953 00000A33 48BF-                           mov rdi, fmt_string_char_8
   953 00000A35 [B802000000000000] 
   954 00000A3D EBCA                            jmp .Lstring_char_emit
   955                                          
   956                                  .Lstring_char_9:
   957 00000A3F 48BF-                           mov rdi, fmt_string_char_9
   957 00000A41 [BB02000000000000] 
   958 00000A49 EBBE                            jmp .Lstring_char_emit
   959                                  
   960                                  .Lstring_char_10:
   961 00000A4B 48BF-                           mov rdi, fmt_string_char_10
   961 00000A4D [BE02000000000000] 
   962 00000A55 EBB2                            jmp .Lstring_char_emit
   963                                  
   964                                  .Lstring_char_11:
   965 00000A57 48BF-                           mov rdi, fmt_string_char_11
   965 00000A59 [C102000000000000] 
   966 00000A61 EBA6                            jmp .Lstring_char_emit
   967                                  
   968                                  .Lstring_char_12:
   969 00000A63 48BF-                           mov rdi, fmt_string_char_12
   969 00000A65 [C402000000000000] 
   970 00000A6D EB9A                            jmp .Lstring_char_emit
   971                                  
   972                                  .Lstring_char_13:
   973 00000A6F 48BF-                           mov rdi, fmt_string_char_13
   973 00000A71 [C702000000000000] 
   974 00000A79 EB8E                            jmp .Lstring_char_emit
   975                                  
   976                                  .Lstring_char_34:
   977 00000A7B 48BF-                           mov rdi, fmt_string_char_34
   977 00000A7D [CA02000000000000] 
   978 00000A85 EB82                            jmp .Lstring_char_emit
   979                                  
   980                                  .Lstring_char_92:
   981 00000A87 48BF-                           mov rdi, fmt_string_char_92
   981 00000A89 [CD02000000000000] 
   982 00000A91 E973FFFFFF                      jmp .Lstring_char_emit
   983                                  
   984                                  .Lstring_char_hex:
   985 00000A96 48BF-                           mov rdi, fmt_string_char_hex
   985 00000A98 [D002000000000000] 
   986 00000AA0 4889C6                          mov rsi, rax
   987 00000AA3 E961FFFFFF                      jmp .Lstring_char_emit        
   988                                  
   989                                  .Lstring_end:
   990 00000AA8 4883C410                	add rsp, 8 * 2
   991 00000AAC 48BF-                   	mov rdi, fmt_dquote
   991 00000AAE [B002000000000000] 
   992 00000AB6 EB33                    	jmp .Lemit
   993                                  
   994                                  .Lunknown_sexpr_type:
   995 00000AB8 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
   995 00000ABA [6B02000000000000] 
   996 00000AC2 4825FF000000            	and rax, 255
   997 00000AC8 4889C2                  	mov rdx, rax
   998 00000ACB 4889F9                  	mov rcx, rdi
   999 00000ACE 488B3C25[00000000]      	mov rdi, qword [stderr]
  1000 00000AD6 B800000000              	mov rax, 0
  1001                                          ENTER
    44 00000ADB C8000000            <1>  enter 0, 0
    45 00000ADF 4883E4F0            <1>  and rsp, ~15
  1002 00000AE3 E8(00000000)            	call fprintf
  1003                                          LEAVE
    49 00000AE8 C9                  <1>  leave
  1004 00000AE9 C9                              leave
  1005 00000AEA C3                              ret
  1006                                  
  1007                                  .Lemit:
  1008 00000AEB B800000000              	mov rax, 0
  1009                                          ENTER
    44 00000AF0 C8000000            <1>  enter 0, 0
    45 00000AF4 4883E4F0            <1>  and rsp, ~15
  1010 00000AF8 E8(00000000)            	call printf
  1011                                          LEAVE
    49 00000AFD C9                  <1>  leave
  1012 00000AFE EB00                    	jmp .Lend
  1013                                  
  1014                                  .Lend:
  1015                                  	LEAVE
    49 00000B00 C9                  <1>  leave
  1016 00000B01 C3                      	ret
  1017                                  
  1018                                  ;;; rdi: address of free variable
  1019                                  ;;; rsi: address of code-pointer
  1020                                  bind_primitive:
  1021 00000B02 C8000000                        enter 0, 0
  1022 00000B06 57                              push rdi
  1023 00000B07 BF11000000                      mov rdi, (1 + 8 + 8)
  1024 00000B0C E8DBF7FFFF                      call malloc
  1025 00000B11 5F                              pop rdi
  1026 00000B12 C60004                          mov byte [rax], T_closure
  1027 00000B15 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1028 00000B1D 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1029 00000B21 488907                          mov qword [rdi], rax
  1030 00000B24 48B8-                           mov rax, sob_void
  1030 00000B26 [0000000000000000] 
  1031 00000B2E C9                              leave
  1032 00000B2F C3                              ret
  1033                                  
  1034                                  L_code_ptr_ash:
  1035 00000B30 C8000000                        enter 0, 0
  1036 00000B34 48837D1802                      cmp COUNT, 2
  1037 00000B39 0F8510140000                    jne L_error_arg_count_2
  1038 00000B3F 488B7D20                        mov rdi, PARAM(0)
  1039                                          assert_integer(rdi)
    53 00000B43 803F11              <1>  cmp byte [%1], %2
    54 00000B46 0F85A2140000        <1>  jne L_error_incorrect_type
  1040 00000B4C 488B4D28                        mov rcx, PARAM(1)
  1041                                          assert_integer(rcx)
    53 00000B50 803911              <1>  cmp byte [%1], %2
    54 00000B53 0F8595140000        <1>  jne L_error_incorrect_type
  1042 00000B59 488B7F01                        mov rdi, qword [rdi + 1]
  1043 00000B5D 488B4901                        mov rcx, qword [rcx + 1]
  1044 00000B61 4883F900                        cmp rcx, 0
  1045 00000B65 7C0F                            jl .L_negative
  1046                                  .L_loop_positive:
  1047 00000B67 4883F900                        cmp rcx, 0
  1048 00000B6B 741B                            je .L_exit
  1049 00000B6D 48D3E7                          sal rdi, cl
  1050 00000B70 48C1E908                        shr rcx, 8
  1051 00000B74 EBF1                            jmp .L_loop_positive
  1052                                  .L_negative:
  1053 00000B76 48F7D9                          neg rcx
  1054                                  .L_loop_negative:
  1055 00000B79 4883F900                        cmp rcx, 0
  1056 00000B7D 7409                            je .L_exit
  1057 00000B7F 48D3FF                          sar rdi, cl
  1058 00000B82 48C1E908                        shr rcx, 8
  1059 00000B86 EBF1                            jmp .L_loop_negative
  1060                                  .L_exit:
  1061 00000B88 E8DC120000                      call make_integer
  1062 00000B8D C9                              leave
  1063 00000B8E C22000                          ret AND_KILL_FRAME(2)
  1064                                  
  1065                                  L_code_ptr_logand:
  1066 00000B91 C8000000                        enter 0, 0
  1067 00000B95 48837D1802                      cmp COUNT, 2
  1068 00000B9A 0F85AF130000                    jne L_error_arg_count_2
  1069 00000BA0 4C8B4520                        mov r8, PARAM(0)
  1070                                          assert_integer(r8)
    53 00000BA4 41803811            <1>  cmp byte [%1], %2
    54 00000BA8 0F8540140000        <1>  jne L_error_incorrect_type
  1071 00000BAE 4C8B4D28                        mov r9, PARAM(1)
  1072                                          assert_integer(r9)
    53 00000BB2 41803911            <1>  cmp byte [%1], %2
    54 00000BB6 0F8532140000        <1>  jne L_error_incorrect_type
  1073 00000BBC 498B7801                        mov rdi, qword [r8 + 1]
  1074 00000BC0 49237901                        and rdi, qword [r9 + 1]
  1075 00000BC4 E8A0120000                      call make_integer
  1076 00000BC9 C9                              leave
  1077 00000BCA C22000                          ret AND_KILL_FRAME(2)
  1078                                  
  1079                                  L_code_ptr_logor:
  1080 00000BCD C8000000                        enter 0, 0
  1081 00000BD1 48837D1802                      cmp COUNT, 2
  1082 00000BD6 0F8573130000                    jne L_error_arg_count_2
  1083 00000BDC 4C8B4520                        mov r8, PARAM(0)
  1084                                          assert_integer(r8)
    53 00000BE0 41803811            <1>  cmp byte [%1], %2
    54 00000BE4 0F8504140000        <1>  jne L_error_incorrect_type
  1085 00000BEA 4C8B4D28                        mov r9, PARAM(1)
  1086                                          assert_integer(r9)
    53 00000BEE 41803911            <1>  cmp byte [%1], %2
    54 00000BF2 0F85F6130000        <1>  jne L_error_incorrect_type
  1087 00000BF8 498B7801                        mov rdi, qword [r8 + 1]
  1088 00000BFC 490B7901                        or rdi, qword [r9 + 1]
  1089 00000C00 E864120000                      call make_integer
  1090 00000C05 C9                              leave
  1091 00000C06 C22000                          ret AND_KILL_FRAME(2)
  1092                                  
  1093                                  L_code_ptr_logxor:
  1094 00000C09 C8000000                        enter 0, 0
  1095 00000C0D 48837D1802                      cmp COUNT, 2
  1096 00000C12 0F8537130000                    jne L_error_arg_count_2
  1097 00000C18 4C8B4520                        mov r8, PARAM(0)
  1098                                          assert_integer(r8)
    53 00000C1C 41803811            <1>  cmp byte [%1], %2
    54 00000C20 0F85C8130000        <1>  jne L_error_incorrect_type
  1099 00000C26 4C8B4D28                        mov r9, PARAM(1)
  1100                                          assert_integer(r9)
    53 00000C2A 41803911            <1>  cmp byte [%1], %2
    54 00000C2E 0F85BA130000        <1>  jne L_error_incorrect_type
  1101 00000C34 498B7801                        mov rdi, qword [r8 + 1]
  1102 00000C38 49337901                        xor rdi, qword [r9 + 1]
  1103 00000C3C E828120000                      call make_integer
  1104                                          LEAVE
    49 00000C41 C9                  <1>  leave
  1105 00000C42 C22000                          ret AND_KILL_FRAME(2)
  1106                                  
  1107                                  L_code_ptr_lognot:
  1108 00000C45 C8000000                        enter 0, 0
  1109 00000C49 48837D1801                      cmp COUNT, 1
  1110 00000C4E 0F85C6120000                    jne L_error_arg_count_1
  1111 00000C54 4C8B4520                        mov r8, PARAM(0)
  1112                                          assert_integer(r8)
    53 00000C58 41803811            <1>  cmp byte [%1], %2
    54 00000C5C 0F858C130000        <1>  jne L_error_incorrect_type
  1113 00000C62 498B7801                        mov rdi, qword [r8 + 1]
  1114 00000C66 48F7D7                          not rdi
  1115 00000C69 E8FB110000                      call make_integer
  1116 00000C6E C9                              leave
  1117 00000C6F C21800                          ret AND_KILL_FRAME(1)
  1118                                  
  1119                                  L_code_ptr_bin_apply:
  1120                                  ;;; fill in for final project!
  1121                                  
  1122                                  L_code_ptr_is_null:
  1123 00000C72 C8000000                        enter 0, 0
  1124 00000C76 48837D1801                      cmp COUNT, 1
  1125 00000C7B 0F8599120000                    jne L_error_arg_count_1
  1126 00000C81 488B4520                        mov rax, PARAM(0)
  1127 00000C85 803801                          cmp byte [rax], T_nil
  1128 00000C88 750C                            jne .L_false
  1129 00000C8A 48B8-                           mov rax, sob_boolean_true
  1129 00000C8C [0300000000000000] 
  1130 00000C94 EB0A                            jmp .L_end
  1131                                  .L_false:
  1132 00000C96 48B8-                           mov rax, sob_boolean_false
  1132 00000C98 [0200000000000000] 
  1133                                  .L_end:
  1134 00000CA0 C9                              leave
  1135 00000CA1 C21800                          ret AND_KILL_FRAME(1)
  1136                                  
  1137                                  L_code_ptr_is_pair:
  1138 00000CA4 C8000000                        enter 0, 0
  1139 00000CA8 48837D1801                      cmp COUNT, 1
  1140 00000CAD 0F8567120000                    jne L_error_arg_count_1
  1141 00000CB3 488B4520                        mov rax, PARAM(0)
  1142 00000CB7 803821                          cmp byte [rax], T_pair
  1143 00000CBA 750C                            jne .L_false
  1144 00000CBC 48B8-                           mov rax, sob_boolean_true
  1144 00000CBE [0300000000000000] 
  1145 00000CC6 EB0A                            jmp .L_end
  1146                                  .L_false:
  1147 00000CC8 48B8-                           mov rax, sob_boolean_false
  1147 00000CCA [0200000000000000] 
  1148                                  .L_end:
  1149 00000CD2 C9                              leave
  1150 00000CD3 C21800                          ret AND_KILL_FRAME(1)
  1151                                          
  1152                                  L_code_ptr_is_void:
  1153 00000CD6 C8000000                        enter 0, 0
  1154 00000CDA 48837D1801                      cmp COUNT, 1
  1155 00000CDF 0F8535120000                    jne L_error_arg_count_1
  1156 00000CE5 488B4520                        mov rax, PARAM(0)
  1157 00000CE9 803800                          cmp byte [rax], T_void
  1158 00000CEC 750C                            jne .L_false
  1159 00000CEE 48B8-                           mov rax, sob_boolean_true
  1159 00000CF0 [0300000000000000] 
  1160 00000CF8 EB0A                            jmp .L_end
  1161                                  .L_false:
  1162 00000CFA 48B8-                           mov rax, sob_boolean_false
  1162 00000CFC [0200000000000000] 
  1163                                  .L_end:
  1164 00000D04 C9                              leave
  1165 00000D05 C21800                          ret AND_KILL_FRAME(1)
  1166                                  
  1167                                  L_code_ptr_is_char:
  1168 00000D08 C8000000                        enter 0, 0
  1169 00000D0C 48837D1801                      cmp COUNT, 1
  1170 00000D11 0F8503120000                    jne L_error_arg_count_1
  1171 00000D17 488B4520                        mov rax, PARAM(0)
  1172 00000D1B 803802                          cmp byte [rax], T_char
  1173 00000D1E 750C                            jne .L_false
  1174 00000D20 48B8-                           mov rax, sob_boolean_true
  1174 00000D22 [0300000000000000] 
  1175 00000D2A EB0A                            jmp .L_end
  1176                                  .L_false:
  1177 00000D2C 48B8-                           mov rax, sob_boolean_false
  1177 00000D2E [0200000000000000] 
  1178                                  .L_end:
  1179 00000D36 C9                              leave
  1180 00000D37 C21800                          ret AND_KILL_FRAME(1)
  1181                                  
  1182                                  L_code_ptr_is_string:
  1183 00000D3A C8000000                        enter 0, 0
  1184 00000D3E 48837D1801                      cmp COUNT, 1
  1185 00000D43 0F85D1110000                    jne L_error_arg_count_1
  1186 00000D49 488B4520                        mov rax, PARAM(0)
  1187 00000D4D 803803                          cmp byte [rax], T_string
  1188 00000D50 750C                            jne .L_false
  1189 00000D52 48B8-                           mov rax, sob_boolean_true
  1189 00000D54 [0300000000000000] 
  1190 00000D5C EB0A                            jmp .L_end
  1191                                  .L_false:
  1192 00000D5E 48B8-                           mov rax, sob_boolean_false
  1192 00000D60 [0200000000000000] 
  1193                                  .L_end:
  1194 00000D68 C9                              leave
  1195 00000D69 C21800                          ret AND_KILL_FRAME(1)
  1196                                  
  1197                                  L_code_ptr_is_symbol:
  1198 00000D6C C8000000                        enter 0, 0
  1199 00000D70 48837D1801                      cmp COUNT, 1
  1200 00000D75 0F859F110000                    jne L_error_arg_count_1
  1201 00000D7B 4C8B4520                        mov r8, PARAM(0)
  1202 00000D7F 41802040                        and byte [r8], T_symbol
  1203 00000D83 740C                            jz .L_false
  1204 00000D85 48B8-                           mov rax, sob_boolean_true
  1204 00000D87 [0300000000000000] 
  1205 00000D8F EB0A                            jmp .L_exit
  1206                                  .L_false:
  1207 00000D91 48B8-                           mov rax, sob_boolean_false
  1207 00000D93 [0200000000000000] 
  1208                                  .L_exit:
  1209 00000D9B C9                              leave
  1210 00000D9C C21800                          ret AND_KILL_FRAME(1)
  1211                                  
  1212                                  L_code_ptr_is_uninterned_symbol:
  1213 00000D9F C8000000                        enter 0, 0
  1214 00000DA3 48837D1801                      cmp COUNT, 1
  1215 00000DA8 0F856C110000                    jne L_error_arg_count_1
  1216 00000DAE 4C8B4520                        mov r8, PARAM(0)
  1217 00000DB2 41803842                        cmp byte [r8], T_uninterned_symbol
  1218 00000DB6 750C                            jne .L_false
  1219 00000DB8 48B8-                           mov rax, sob_boolean_true
  1219 00000DBA [0300000000000000] 
  1220 00000DC2 EB0A                            jmp .L_exit
  1221                                  .L_false:
  1222 00000DC4 48B8-                           mov rax, sob_boolean_false
  1222 00000DC6 [0200000000000000] 
  1223                                  .L_exit:
  1224 00000DCE C9                              leave
  1225 00000DCF C21800                          ret AND_KILL_FRAME(1)
  1226                                  
  1227                                  L_code_ptr_is_interned_symbol:
  1228 00000DD2 C8000000                        enter 0, 0
  1229 00000DD6 48837D1801                      cmp COUNT, 1
  1230 00000DDB 0F8539110000                    jne L_error_arg_count_1
  1231 00000DE1 488B4520                        mov rax, PARAM(0)
  1232 00000DE5 803841                          cmp byte [rax], T_interned_symbol
  1233 00000DE8 750C                            jne .L_false
  1234 00000DEA 48B8-                           mov rax, sob_boolean_true
  1234 00000DEC [0300000000000000] 
  1235 00000DF4 EB0A                            jmp .L_end
  1236                                  .L_false:
  1237 00000DF6 48B8-                           mov rax, sob_boolean_false
  1237 00000DF8 [0200000000000000] 
  1238                                  .L_end:
  1239 00000E00 C9                              leave
  1240 00000E01 C21800                          ret AND_KILL_FRAME(1)
  1241                                  
  1242                                  L_code_ptr_gensym:
  1243 00000E04 C8000000                        enter 0, 0
  1244 00000E08 48837D1800                      cmp COUNT, 0
  1245 00000E0D 0F85D2100000                    jne L_error_arg_count_0
  1246 00000E13 48FF0425[D6020000]              inc qword [gensym_count]
  1247 00000E1B BF09000000                      mov rdi, (1 + 8)
  1248 00000E20 E8C7F4FFFF                      call malloc
  1249 00000E25 C60042                          mov byte [rax], T_uninterned_symbol
  1250 00000E28 488B0C25[D6020000]              mov rcx, qword [gensym_count]
  1251 00000E30 48894801                        mov qword [rax + 1], rcx
  1252 00000E34 C9                              leave
  1253 00000E35 C21000                          ret AND_KILL_FRAME(0)
  1254                                  
  1255                                  L_code_ptr_is_vector:
  1256 00000E38 C8000000                        enter 0, 0
  1257 00000E3C 48837D1801                      cmp COUNT, 1
  1258 00000E41 0F85D3100000                    jne L_error_arg_count_1
  1259 00000E47 488B4520                        mov rax, PARAM(0)
  1260 00000E4B 803822                          cmp byte [rax], T_vector
  1261 00000E4E 750C                            jne .L_false
  1262 00000E50 48B8-                           mov rax, sob_boolean_true
  1262 00000E52 [0300000000000000] 
  1263 00000E5A EB0A                            jmp .L_end
  1264                                  .L_false:
  1265 00000E5C 48B8-                           mov rax, sob_boolean_false
  1265 00000E5E [0200000000000000] 
  1266                                  .L_end:
  1267 00000E66 C9                              leave
  1268 00000E67 C21800                          ret AND_KILL_FRAME(1)
  1269                                  
  1270                                  L_code_ptr_is_closure:
  1271 00000E6A C8000000                        enter 0, 0
  1272 00000E6E 48837D1801                      cmp COUNT, 1
  1273 00000E73 0F85A1100000                    jne L_error_arg_count_1
  1274 00000E79 488B4520                        mov rax, PARAM(0)
  1275 00000E7D 803804                          cmp byte [rax], T_closure
  1276 00000E80 750C                            jne .L_false
  1277 00000E82 48B8-                           mov rax, sob_boolean_true
  1277 00000E84 [0300000000000000] 
  1278 00000E8C EB0A                            jmp .L_end
  1279                                  .L_false:
  1280 00000E8E 48B8-                           mov rax, sob_boolean_false
  1280 00000E90 [0200000000000000] 
  1281                                  .L_end:
  1282 00000E98 C9                              leave
  1283 00000E99 C21800                          ret AND_KILL_FRAME(1)
  1284                                  
  1285                                  L_code_ptr_is_real:
  1286 00000E9C C8000000                        enter 0, 0
  1287 00000EA0 48837D1801                      cmp COUNT, 1
  1288 00000EA5 0F856F100000                    jne L_error_arg_count_1
  1289 00000EAB 488B4520                        mov rax, PARAM(0)
  1290 00000EAF 803813                          cmp byte [rax], T_real
  1291 00000EB2 750C                            jne .L_false
  1292 00000EB4 48B8-                           mov rax, sob_boolean_true
  1292 00000EB6 [0300000000000000] 
  1293 00000EBE EB0A                            jmp .L_end
  1294                                  .L_false:
  1295 00000EC0 48B8-                           mov rax, sob_boolean_false
  1295 00000EC2 [0200000000000000] 
  1296                                  .L_end:
  1297 00000ECA C9                              leave
  1298 00000ECB C21800                          ret AND_KILL_FRAME(1)
  1299                                  
  1300                                  L_code_ptr_is_fraction:
  1301 00000ECE C8000000                        enter 0, 0
  1302 00000ED2 48837D1801                      cmp COUNT, 1
  1303 00000ED7 0F853D100000                    jne L_error_arg_count_1
  1304 00000EDD 488B4520                        mov rax, PARAM(0)
  1305 00000EE1 803812                          cmp byte [rax], T_fraction
  1306 00000EE4 750C                            jne .L_false
  1307 00000EE6 48B8-                           mov rax, sob_boolean_true
  1307 00000EE8 [0300000000000000] 
  1308 00000EF0 EB0A                            jmp .L_end
  1309                                  .L_false:
  1310 00000EF2 48B8-                           mov rax, sob_boolean_false
  1310 00000EF4 [0200000000000000] 
  1311                                  .L_end:
  1312 00000EFC C9                              leave
  1313 00000EFD C21800                          ret AND_KILL_FRAME(1)
  1314                                  
  1315                                  L_code_ptr_is_boolean:
  1316 00000F00 C8000000                        enter 0, 0
  1317 00000F04 48837D1801                      cmp COUNT, 1
  1318 00000F09 0F850B100000                    jne L_error_arg_count_1
  1319 00000F0F 488B4520                        mov rax, PARAM(0)
  1320 00000F13 8A18                            mov bl, byte [rax]
  1321 00000F15 80E308                          and bl, T_boolean
  1322 00000F18 740C                            je .L_false
  1323 00000F1A 48B8-                           mov rax, sob_boolean_true
  1323 00000F1C [0300000000000000] 
  1324 00000F24 EB0A                            jmp .L_end
  1325                                  .L_false:
  1326 00000F26 48B8-                           mov rax, sob_boolean_false
  1326 00000F28 [0200000000000000] 
  1327                                  .L_end:
  1328 00000F30 C9                              leave
  1329 00000F31 C21800                          ret AND_KILL_FRAME(1)
  1330                                          
  1331                                  L_code_ptr_is_boolean_false:
  1332 00000F34 C8000000                        enter 0, 0
  1333 00000F38 48837D1801                      cmp COUNT, 1
  1334 00000F3D 0F85D70F0000                    jne L_error_arg_count_1
  1335 00000F43 488B4520                        mov rax, PARAM(0)
  1336 00000F47 8A18                            mov bl, byte [rax]
  1337 00000F49 80FB09                          cmp bl, T_boolean_false
  1338 00000F4C 750C                            jne .L_false
  1339 00000F4E 48B8-                           mov rax, sob_boolean_true
  1339 00000F50 [0300000000000000] 
  1340 00000F58 EB0A                            jmp .L_end
  1341                                  .L_false:
  1342 00000F5A 48B8-                           mov rax, sob_boolean_false
  1342 00000F5C [0200000000000000] 
  1343                                  .L_end:
  1344 00000F64 C9                              leave
  1345 00000F65 C21800                          ret AND_KILL_FRAME(1)
  1346                                  
  1347                                  L_code_ptr_is_boolean_true:
  1348 00000F68 C8000000                        enter 0, 0
  1349 00000F6C 48837D1801                      cmp COUNT, 1
  1350 00000F71 0F85A30F0000                    jne L_error_arg_count_1
  1351 00000F77 488B4520                        mov rax, PARAM(0)
  1352 00000F7B 8A18                            mov bl, byte [rax]
  1353 00000F7D 80FB0A                          cmp bl, T_boolean_true
  1354 00000F80 750C                            jne .L_false
  1355 00000F82 48B8-                           mov rax, sob_boolean_true
  1355 00000F84 [0300000000000000] 
  1356 00000F8C EB0A                            jmp .L_end
  1357                                  .L_false:
  1358 00000F8E 48B8-                           mov rax, sob_boolean_false
  1358 00000F90 [0200000000000000] 
  1359                                  .L_end:
  1360 00000F98 C9                              leave
  1361 00000F99 C21800                          ret AND_KILL_FRAME(1)
  1362                                  
  1363                                  L_code_ptr_is_number:
  1364 00000F9C C8000000                        enter 0, 0
  1365 00000FA0 48837D1801                      cmp COUNT, 1
  1366 00000FA5 0F856F0F0000                    jne L_error_arg_count_1
  1367 00000FAB 488B4520                        mov rax, PARAM(0)
  1368 00000FAF 8A18                            mov bl, byte [rax]
  1369 00000FB1 80E310                          and bl, T_number
  1370 00000FB4 740C                            jz .L_false
  1371 00000FB6 48B8-                           mov rax, sob_boolean_true
  1371 00000FB8 [0300000000000000] 
  1372 00000FC0 EB0A                            jmp .L_end
  1373                                  .L_false:
  1374 00000FC2 48B8-                           mov rax, sob_boolean_false
  1374 00000FC4 [0200000000000000] 
  1375                                  .L_end:
  1376 00000FCC C9                              leave
  1377 00000FCD C21800                          ret AND_KILL_FRAME(1)
  1378                                          
  1379                                  L_code_ptr_is_collection:
  1380 00000FD0 C8000000                        enter 0, 0
  1381 00000FD4 48837D1801                      cmp COUNT, 1
  1382 00000FD9 0F853B0F0000                    jne L_error_arg_count_1
  1383 00000FDF 488B4520                        mov rax, PARAM(0)
  1384 00000FE3 8A18                            mov bl, byte [rax]
  1385 00000FE5 80E320                          and bl, T_collection
  1386 00000FE8 740C                            je .L_false
  1387 00000FEA 48B8-                           mov rax, sob_boolean_true
  1387 00000FEC [0300000000000000] 
  1388 00000FF4 EB0A                            jmp .L_end
  1389                                  .L_false:
  1390 00000FF6 48B8-                           mov rax, sob_boolean_false
  1390 00000FF8 [0200000000000000] 
  1391                                  .L_end:
  1392 00001000 C9                              leave
  1393 00001001 C21800                          ret AND_KILL_FRAME(1)
  1394                                  
  1395                                  L_code_ptr_cons:
  1396 00001004 C8000000                        enter 0, 0
  1397 00001008 48837D1802                      cmp COUNT, 2
  1398 0000100D 0F853C0F0000                    jne L_error_arg_count_2
  1399 00001013 BF11000000                      mov rdi, (1 + 8 + 8)
  1400 00001018 E8CFF2FFFF                      call malloc
  1401 0000101D C60021                          mov byte [rax], T_pair
  1402 00001020 488B5D20                        mov rbx, PARAM(0)
  1403 00001024 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1404 00001028 488B5D28                        mov rbx, PARAM(1)
  1405 0000102C 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1406 00001030 C9                              leave
  1407 00001031 C22000                          ret AND_KILL_FRAME(2)
  1408                                  
  1409                                  L_code_ptr_display_sexpr:
  1410 00001034 C8000000                        enter 0, 0
  1411 00001038 48837D1801                      cmp COUNT, 1
  1412 0000103D 0F85D70E0000                    jne L_error_arg_count_1
  1413 00001043 488B7D20                        mov rdi, PARAM(0)
  1414 00001047 E821F5FFFF                      call print_sexpr
  1415 0000104C 48B8-                           mov rax, sob_void
  1415 0000104E [0000000000000000] 
  1416 00001056 C9                              leave
  1417 00001057 C21800                          ret AND_KILL_FRAME(1)
  1418                                  
  1419                                  L_code_ptr_write_char:
  1420 0000105A C8000000                        enter 0, 0
  1421 0000105E 48837D1801                      cmp COUNT, 1
  1422 00001063 0F85B10E0000                    jne L_error_arg_count_1
  1423 00001069 488B4520                        mov rax, PARAM(0)
  1424                                          assert_char(rax)
    53 0000106D 803802              <1>  cmp byte [%1], %2
    54 00001070 0F85780F0000        <1>  jne L_error_incorrect_type
  1425 00001076 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1426 00001079 4825FF000000                    and rax, 255
  1427 0000107F 48BF-                           mov rdi, fmt_char
  1427 00001081 [DE02000000000000] 
  1428 00001089 4889C6                          mov rsi, rax
  1429 0000108C B800000000                      mov rax, 0
  1430                                          ENTER
    44 00001091 C8000000            <1>  enter 0, 0
    45 00001095 4883E4F0            <1>  and rsp, ~15
  1431 00001099 E8(00000000)                    call printf
  1432                                          LEAVE
    49 0000109E C9                  <1>  leave
  1433 0000109F 48B8-                           mov rax, sob_void
  1433 000010A1 [0000000000000000] 
  1434 000010A9 C9                              leave
  1435 000010AA C21800                          ret AND_KILL_FRAME(1)
  1436                                  
  1437                                  L_code_ptr_car:
  1438 000010AD C8000000                        enter 0, 0
  1439 000010B1 48837D1801                      cmp COUNT, 1
  1440 000010B6 0F855E0E0000                    jne L_error_arg_count_1
  1441 000010BC 488B4520                        mov rax, PARAM(0)
  1442                                          assert_pair(rax)
    53 000010C0 803821              <1>  cmp byte [%1], %2
    54 000010C3 0F85250F0000        <1>  jne L_error_incorrect_type
  1443 000010C9 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1444 000010CD C9                              leave
  1445 000010CE C21800                          ret AND_KILL_FRAME(1)
  1446                                          
  1447                                  L_code_ptr_cdr:
  1448 000010D1 C8000000                        enter 0, 0
  1449 000010D5 48837D1801                      cmp COUNT, 1
  1450 000010DA 0F853A0E0000                    jne L_error_arg_count_1
  1451 000010E0 488B4520                        mov rax, PARAM(0)
  1452                                          assert_pair(rax)
    53 000010E4 803821              <1>  cmp byte [%1], %2
    54 000010E7 0F85010F0000        <1>  jne L_error_incorrect_type
  1453 000010ED 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1454 000010F1 C9                              leave
  1455 000010F2 C21800                          ret AND_KILL_FRAME(1)
  1456                                          
  1457                                  L_code_ptr_string_length:
  1458 000010F5 C8000000                        enter 0, 0
  1459 000010F9 48837D1801                      cmp COUNT, 1
  1460 000010FE 0F85160E0000                    jne L_error_arg_count_1
  1461 00001104 488B4520                        mov rax, PARAM(0)
  1462                                          assert_string(rax)
    53 00001108 803803              <1>  cmp byte [%1], %2
    54 0000110B 0F85DD0E0000        <1>  jne L_error_incorrect_type
  1463 00001111 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1464 00001115 E84F0D0000                      call make_integer
  1465 0000111A C9                              leave
  1466 0000111B C21800                          ret AND_KILL_FRAME(1)
  1467                                  
  1468                                  L_code_ptr_vector_length:
  1469 0000111E C8000000                        enter 0, 0
  1470 00001122 48837D1801                      cmp COUNT, 1
  1471 00001127 0F85ED0D0000                    jne L_error_arg_count_1
  1472 0000112D 488B4520                        mov rax, PARAM(0)
  1473                                          assert_vector(rax)
    53 00001131 803822              <1>  cmp byte [%1], %2
    54 00001134 0F85B40E0000        <1>  jne L_error_incorrect_type
  1474 0000113A 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1475 0000113E E8260D0000                      call make_integer
  1476 00001143 C9                              leave
  1477 00001144 C21800                          ret AND_KILL_FRAME(1)
  1478                                  
  1479                                  L_code_ptr_real_to_integer:
  1480 00001147 C8000000                        enter 0, 0
  1481 0000114B 48837D1801                      cmp COUNT, 1
  1482 00001150 0F85C40D0000                    jne L_error_arg_count_1
  1483 00001156 488B5D20                        mov rbx, PARAM(0)
  1484                                          assert_real(rbx)
    53 0000115A 803B13              <1>  cmp byte [%1], %2
    54 0000115D 0F858B0E0000        <1>  jne L_error_incorrect_type
  1485 00001163 F20F104301                      movsd xmm0, qword [rbx + 1]
  1486 00001168 F2480F2CF8                      cvttsd2si rdi, xmm0
  1487 0000116D E8F70C0000                      call make_integer
  1488 00001172 C9                              leave
  1489 00001173 C21800                          ret AND_KILL_FRAME(1)
  1490                                  
  1491                                  L_code_ptr_exit:
  1492 00001176 C8000000                        enter 0, 0
  1493 0000117A 48837D1800                      cmp COUNT, 0
  1494 0000117F 0F85600D0000                    jne L_error_arg_count_0
  1495 00001185 B800000000                      mov rax, 0
  1496 0000118A E8(00000000)                    call exit
  1497                                  
  1498                                  L_code_ptr_integer_to_real:
  1499 0000118F C8000000                        enter 0, 0
  1500 00001193 48837D1801                      cmp COUNT, 1
  1501 00001198 0F857C0D0000                    jne L_error_arg_count_1
  1502 0000119E 488B4520                        mov rax, PARAM(0)
  1503                                          assert_integer(rax)
    53 000011A2 803811              <1>  cmp byte [%1], %2
    54 000011A5 0F85430E0000        <1>  jne L_error_incorrect_type
  1504 000011AB FF7001                          push qword [rax + 1]
  1505 000011AE F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1506 000011B4 E8980C0000                      call make_real
  1507 000011B9 C9                              leave
  1508 000011BA C21800                          ret AND_KILL_FRAME(1)
  1509                                  
  1510                                  L_code_ptr_fraction_to_real:
  1511 000011BD C8000000                        enter 0, 0
  1512 000011C1 48837D1801                      cmp COUNT, 1
  1513 000011C6 0F854E0D0000                    jne L_error_arg_count_1
  1514 000011CC 488B4520                        mov rax, PARAM(0)
  1515                                          assert_fraction(rax)
    53 000011D0 803812              <1>  cmp byte [%1], %2
    54 000011D3 0F85150E0000        <1>  jne L_error_incorrect_type
  1516 000011D9 FF7001                          push qword [rax + 1]
  1517 000011DC F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1518 000011E2 FF7009                          push qword [rax + 1 + 8]
  1519 000011E5 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1520 000011EB F20F5EC1                        divsd xmm0, xmm1
  1521 000011EF E85D0C0000                      call make_real
  1522 000011F4 C9                              leave
  1523 000011F5 C21800                          ret AND_KILL_FRAME(1)
  1524                                  
  1525                                  L_code_ptr_char_to_integer:
  1526 000011F8 C8000000                        enter 0, 0
  1527 000011FC 48837D1801                      cmp COUNT, 1
  1528 00001201 0F85130D0000                    jne L_error_arg_count_1
  1529 00001207 488B4520                        mov rax, PARAM(0)
  1530                                          assert_char(rax)
    53 0000120B 803802              <1>  cmp byte [%1], %2
    54 0000120E 0F85DA0D0000        <1>  jne L_error_incorrect_type
  1531 00001214 8A4001                          mov al, byte [rax + 1]
  1532 00001217 4825FF000000                    and rax, 255
  1533 0000121D 4889C7                          mov rdi, rax
  1534 00001220 E8440C0000                      call make_integer
  1535 00001225 C9                              leave
  1536 00001226 C21800                          ret AND_KILL_FRAME(1)
  1537                                  
  1538                                  L_code_ptr_integer_to_fraction:
  1539 00001229 C8000000                        enter 0, 0
  1540 0000122D 48837D1801                      cmp COUNT, 1
  1541 00001232 0F85E20C0000                    jne L_error_arg_count_1
  1542 00001238 4C8B4520                        mov r8, PARAM(0)
  1543                                          assert_integer(r8)
    53 0000123C 41803811            <1>  cmp byte [%1], %2
    54 00001240 0F85A80D0000        <1>  jne L_error_incorrect_type
  1544 00001246 BF11000000                      mov rdi, (1 + 8 + 8)
  1545 0000124B E89CF0FFFF                      call malloc
  1546 00001250 498B5801                        mov rbx, qword [r8 + 1]
  1547 00001254 C60012                          mov byte [rax], T_fraction
  1548 00001257 48895801                        mov qword [rax + 1], rbx
  1549 0000125B 48C7400901000000                mov qword [rax + 1 + 8], 1
  1550 00001263 C9                              leave
  1551 00001264 C21800                          ret AND_KILL_FRAME(1)
  1552                                  
  1553                                  L_code_ptr_integer_to_char:
  1554 00001267 C8000000                        enter 0, 0
  1555 0000126B 48837D1801                      cmp COUNT, 1
  1556 00001270 0F85A40C0000                    jne L_error_arg_count_1
  1557 00001276 488B4520                        mov rax, PARAM(0)
  1558                                          assert_integer(rax)
    53 0000127A 803811              <1>  cmp byte [%1], %2
    54 0000127D 0F856B0D0000        <1>  jne L_error_incorrect_type
  1559 00001283 488B5801                        mov rbx, qword [rax + 1]
  1560 00001287 4883FB00                        cmp rbx, 0
  1561 0000128B 0F8EF20B0000                    jle L_error_integer_range
  1562 00001291 4881FB00010000                  cmp rbx, 256
  1563 00001298 0F8DE50B0000                    jge L_error_integer_range
  1564 0000129E BF02000000                      mov rdi, (1 + 1)
  1565 000012A3 E844F0FFFF                      call malloc
  1566 000012A8 C60002                          mov byte [rax], T_char
  1567 000012AB 885801                          mov byte [rax + 1], bl
  1568 000012AE C9                              leave
  1569 000012AF C21800                          ret AND_KILL_FRAME(1)
  1570                                  
  1571                                  L_code_ptr_trng:
  1572 000012B2 C8000000                        enter 0, 0
  1573 000012B6 48837D1800                      cmp COUNT, 0
  1574 000012BB 0F85240C0000                    jne L_error_arg_count_0
  1575 000012C1 480FC7F7                        rdrand rdi
  1576 000012C5 48D1EF                          shr rdi, 1
  1577 000012C8 E89C0B0000                      call make_integer
  1578 000012CD C9                              leave
  1579 000012CE C21000                          ret AND_KILL_FRAME(0)
  1580                                  
  1581                                  L_code_ptr_is_zero:
  1582 000012D1 C8000000                        enter 0, 0
  1583 000012D5 48837D1801                      cmp COUNT, 1
  1584 000012DA 0F853A0C0000                    jne L_error_arg_count_1
  1585 000012E0 488B4520                        mov rax, PARAM(0)
  1586 000012E4 803811                          cmp byte [rax], T_integer
  1587 000012E7 740F                            je .L_integer
  1588 000012E9 803812                          cmp byte [rax], T_fraction
  1589 000012EC 7413                            je .L_fraction
  1590 000012EE 803813                          cmp byte [rax], T_real
  1591 000012F1 7417                            je .L_real
  1592 000012F3 E9F60C0000                      jmp L_error_incorrect_type
  1593                                  .L_integer:
  1594 000012F8 4883780100                      cmp qword [rax + 1], 0
  1595 000012FD 7429                            je .L_zero
  1596 000012FF EB1B                            jmp .L_not_zero
  1597                                  .L_fraction:
  1598 00001301 4883780100                      cmp qword [rax + 1], 0
  1599 00001306 7420                            je .L_zero
  1600 00001308 EB12                            jmp .L_not_zero
  1601                                  .L_real:
  1602 0000130A 660FEFC0                        pxor xmm0, xmm0
  1603 0000130E FF7001                          push qword [rax + 1]
  1604 00001311 F20F100C24                      movsd xmm1, qword [rsp]
  1605 00001316 660F2EC1                        ucomisd xmm0, xmm1
  1606 0000131A 740C                            je .L_zero
  1607                                  .L_not_zero:
  1608 0000131C 48B8-                           mov rax, sob_boolean_false
  1608 0000131E [0200000000000000] 
  1609 00001326 EB0A                            jmp .L_end
  1610                                  .L_zero:
  1611 00001328 48B8-                           mov rax, sob_boolean_true
  1611 0000132A [0300000000000000] 
  1612                                  .L_end:
  1613 00001332 C9                              leave
  1614 00001333 C21800                          ret AND_KILL_FRAME(1)
  1615                                  
  1616                                  L_code_ptr_is_integer:
  1617 00001336 C8000000                        enter 0, 0
  1618 0000133A 48837D1801                      cmp COUNT, 1
  1619 0000133F 0F85D50B0000                    jne L_error_arg_count_1
  1620 00001345 488B4520                        mov rax, PARAM(0)
  1621 00001349 803811                          cmp byte [rax], T_integer
  1622 0000134C 750C                            jne .L_false
  1623 0000134E 48B8-                           mov rax, sob_boolean_true
  1623 00001350 [0300000000000000] 
  1624 00001358 EB0A                            jmp .L_exit
  1625                                  .L_false:
  1626 0000135A 48B8-                           mov rax, sob_boolean_false
  1626 0000135C [0200000000000000] 
  1627                                  .L_exit:
  1628 00001364 C9                              leave
  1629 00001365 C21800                          ret AND_KILL_FRAME(1)
  1630                                  
  1631                                  L_code_ptr_raw_bin_add_rr:
  1632 00001368 C8000000                        enter 0, 0
  1633 0000136C 48837D1802                      cmp COUNT, 2
  1634 00001371 0F85D80B0000                    jne L_error_arg_count_2
  1635 00001377 488B5D20                        mov rbx, PARAM(0)
  1636                                          assert_real(rbx)
    53 0000137B 803B13              <1>  cmp byte [%1], %2
    54 0000137E 0F856A0C0000        <1>  jne L_error_incorrect_type
  1637 00001384 488B4D28                        mov rcx, PARAM(1)
  1638                                          assert_real(rcx)
    53 00001388 803913              <1>  cmp byte [%1], %2
    54 0000138B 0F855D0C0000        <1>  jne L_error_incorrect_type
  1639 00001391 F20F104301                      movsd xmm0, qword [rbx + 1]
  1640 00001396 F20F104901                      movsd xmm1, qword [rcx + 1]
  1641 0000139B F20F58C1                        addsd xmm0, xmm1
  1642 0000139F E8AD0A0000                      call make_real
  1643 000013A4 C9                              leave
  1644 000013A5 C22000                          ret AND_KILL_FRAME(2)
  1645                                  
  1646                                  L_code_ptr_raw_bin_sub_rr:
  1647 000013A8 C8000000                        enter 0, 0
  1648 000013AC 48837D1802                      cmp COUNT, 2
  1649 000013B1 0F85980B0000                    jne L_error_arg_count_2
  1650 000013B7 488B5D20                        mov rbx, PARAM(0)
  1651                                          assert_real(rbx)
    53 000013BB 803B13              <1>  cmp byte [%1], %2
    54 000013BE 0F852A0C0000        <1>  jne L_error_incorrect_type
  1652 000013C4 488B4D28                        mov rcx, PARAM(1)
  1653                                          assert_real(rcx)
    53 000013C8 803913              <1>  cmp byte [%1], %2
    54 000013CB 0F851D0C0000        <1>  jne L_error_incorrect_type
  1654 000013D1 F20F104301                      movsd xmm0, qword [rbx + 1]
  1655 000013D6 F20F104901                      movsd xmm1, qword [rcx + 1]
  1656 000013DB F20F5CC1                        subsd xmm0, xmm1
  1657 000013DF E86D0A0000                      call make_real
  1658 000013E4 C9                              leave
  1659 000013E5 C22000                          ret AND_KILL_FRAME(2)
  1660                                  
  1661                                  L_code_ptr_raw_bin_mul_rr:
  1662 000013E8 C8000000                        enter 0, 0
  1663 000013EC 48837D1802                      cmp COUNT, 2
  1664 000013F1 0F85580B0000                    jne L_error_arg_count_2
  1665 000013F7 488B5D20                        mov rbx, PARAM(0)
  1666                                          assert_real(rbx)
    53 000013FB 803B13              <1>  cmp byte [%1], %2
    54 000013FE 0F85EA0B0000        <1>  jne L_error_incorrect_type
  1667 00001404 488B4D28                        mov rcx, PARAM(1)
  1668                                          assert_real(rcx)
    53 00001408 803913              <1>  cmp byte [%1], %2
    54 0000140B 0F85DD0B0000        <1>  jne L_error_incorrect_type
  1669 00001411 F20F104301                      movsd xmm0, qword [rbx + 1]
  1670 00001416 F20F104901                      movsd xmm1, qword [rcx + 1]
  1671 0000141B F20F59C1                        mulsd xmm0, xmm1
  1672 0000141F E82D0A0000                      call make_real
  1673 00001424 C9                              leave
  1674 00001425 C22000                          ret AND_KILL_FRAME(2)
  1675                                  
  1676                                  L_code_ptr_raw_bin_div_rr:
  1677 00001428 C8000000                        enter 0, 0
  1678 0000142C 48837D1802                      cmp COUNT, 2
  1679 00001431 0F85180B0000                    jne L_error_arg_count_2
  1680 00001437 488B5D20                        mov rbx, PARAM(0)
  1681                                          assert_real(rbx)
    53 0000143B 803B13              <1>  cmp byte [%1], %2
    54 0000143E 0F85AA0B0000        <1>  jne L_error_incorrect_type
  1682 00001444 488B4D28                        mov rcx, PARAM(1)
  1683                                          assert_real(rcx)
    53 00001448 803913              <1>  cmp byte [%1], %2
    54 0000144B 0F859D0B0000        <1>  jne L_error_incorrect_type
  1684 00001451 F20F104301                      movsd xmm0, qword [rbx + 1]
  1685 00001456 F20F104901                      movsd xmm1, qword [rcx + 1]
  1686 0000145B 660FEFD2                        pxor xmm2, xmm2
  1687 0000145F 660F2ECA                        ucomisd xmm1, xmm2
  1688 00001463 0F84B60B0000                    je L_error_division_by_zero
  1689 00001469 F20F5EC1                        divsd xmm0, xmm1
  1690 0000146D E8DF090000                      call make_real
  1691 00001472 C9                              leave
  1692 00001473 C22000                          ret AND_KILL_FRAME(2)
  1693                                  
  1694                                  L_code_ptr_raw_bin_add_zz:
  1695 00001476 C8000000                	enter 0, 0
  1696 0000147A 48837D1802              	cmp COUNT, 2
  1697 0000147F 0F85CA0A0000            	jne L_error_arg_count_2
  1698 00001485 4C8B4520                	mov r8, PARAM(0)
  1699                                  	assert_integer(r8)
    53 00001489 41803811            <1>  cmp byte [%1], %2
    54 0000148D 0F855B0B0000        <1>  jne L_error_incorrect_type
  1700 00001493 4C8B4D28                	mov r9, PARAM(1)
  1701                                  	assert_integer(r9)
    53 00001497 41803911            <1>  cmp byte [%1], %2
    54 0000149B 0F854D0B0000        <1>  jne L_error_incorrect_type
  1702 000014A1 498B7801                	mov rdi, qword [r8 + 1]
  1703 000014A5 49037901                	add rdi, qword [r9 + 1]
  1704 000014A9 E8BB090000              	call make_integer
  1705 000014AE C9                      	leave
  1706 000014AF C22000                  	ret AND_KILL_FRAME(2)
  1707                                  
  1708                                  L_code_ptr_raw_bin_add_qq:
  1709 000014B2 C8000000                        enter 0, 0
  1710 000014B6 48837D1802                      cmp COUNT, 2
  1711 000014BB 0F858E0A0000                    jne L_error_arg_count_2
  1712 000014C1 4C8B4520                        mov r8, PARAM(0)
  1713                                          assert_fraction(r8)
    53 000014C5 41803812            <1>  cmp byte [%1], %2
    54 000014C9 0F851F0B0000        <1>  jne L_error_incorrect_type
  1714 000014CF 4C8B4D28                        mov r9, PARAM(1)
  1715                                          assert_fraction(r9)
    53 000014D3 41803912            <1>  cmp byte [%1], %2
    54 000014D7 0F85110B0000        <1>  jne L_error_incorrect_type
  1716 000014DD 498B4001                        mov rax, qword [r8 + 1] ; num1
  1717 000014E1 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1718 000014E5 4899                            cqo
  1719 000014E7 48F7EB                          imul rbx
  1720 000014EA 4889C6                          mov rsi, rax
  1721 000014ED 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1722 000014F1 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1723 000014F5 4899                            cqo
  1724 000014F7 48F7EB                          imul rbx
  1725 000014FA 4801C6                          add rsi, rax
  1726 000014FD 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1727 00001501 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1728 00001505 4899                            cqo
  1729 00001507 48F7EB                          imul rbx
  1730 0000150A 4889C7                          mov rdi, rax
  1731 0000150D E8DE010000                      call normalize_fraction
  1732 00001512 C9                              leave
  1733 00001513 C22000                          ret AND_KILL_FRAME(2)
  1734                                  
  1735                                  L_code_ptr_raw_bin_sub_zz:
  1736 00001516 C8000000                	enter 0, 0
  1737 0000151A 48837D1802              	cmp COUNT, 2
  1738 0000151F 0F852A0A0000            	jne L_error_arg_count_2
  1739 00001525 4C8B4520                	mov r8, PARAM(0)
  1740                                  	assert_integer(r8)
    53 00001529 41803811            <1>  cmp byte [%1], %2
    54 0000152D 0F85BB0A0000        <1>  jne L_error_incorrect_type
  1741 00001533 4C8B4D28                	mov r9, PARAM(1)
  1742                                  	assert_integer(r9)
    53 00001537 41803911            <1>  cmp byte [%1], %2
    54 0000153B 0F85AD0A0000        <1>  jne L_error_incorrect_type
  1743 00001541 498B7801                	mov rdi, qword [r8 + 1]
  1744 00001545 492B7901                	sub rdi, qword [r9 + 1]
  1745 00001549 E81B090000              	call make_integer
  1746 0000154E C9                      	leave
  1747 0000154F C22000                  	ret AND_KILL_FRAME(2)
  1748                                  
  1749                                  L_code_ptr_raw_bin_sub_qq:
  1750 00001552 C8000000                        enter 0, 0
  1751 00001556 48837D1802                      cmp COUNT, 2
  1752 0000155B 0F85EE090000                    jne L_error_arg_count_2
  1753 00001561 4C8B4520                        mov r8, PARAM(0)
  1754                                          assert_fraction(r8)
    53 00001565 41803812            <1>  cmp byte [%1], %2
    54 00001569 0F857F0A0000        <1>  jne L_error_incorrect_type
  1755 0000156F 4C8B4D28                        mov r9, PARAM(1)
  1756                                          assert_fraction(r9)
    53 00001573 41803912            <1>  cmp byte [%1], %2
    54 00001577 0F85710A0000        <1>  jne L_error_incorrect_type
  1757 0000157D 498B4001                        mov rax, qword [r8 + 1] ; num1
  1758 00001581 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1759 00001585 4899                            cqo
  1760 00001587 48F7EB                          imul rbx
  1761 0000158A 4889C6                          mov rsi, rax
  1762 0000158D 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1763 00001591 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1764 00001595 4899                            cqo
  1765 00001597 48F7EB                          imul rbx
  1766 0000159A 4829C6                          sub rsi, rax
  1767 0000159D 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1768 000015A1 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1769 000015A5 4899                            cqo
  1770 000015A7 48F7EB                          imul rbx
  1771 000015AA 4889C7                          mov rdi, rax
  1772 000015AD E83E010000                      call normalize_fraction
  1773 000015B2 C9                              leave
  1774 000015B3 C22000                          ret AND_KILL_FRAME(2)
  1775                                  
  1776                                  L_code_ptr_raw_bin_mul_zz:
  1777 000015B6 C8000000                	enter 0, 0
  1778 000015BA 48837D1802              	cmp COUNT, 2
  1779 000015BF 0F858A090000            	jne L_error_arg_count_2
  1780 000015C5 4C8B4520                	mov r8, PARAM(0)
  1781                                  	assert_integer(r8)
    53 000015C9 41803811            <1>  cmp byte [%1], %2
    54 000015CD 0F851B0A0000        <1>  jne L_error_incorrect_type
  1782 000015D3 4C8B4D28                	mov r9, PARAM(1)
  1783                                  	assert_integer(r9)
    53 000015D7 41803911            <1>  cmp byte [%1], %2
    54 000015DB 0F850D0A0000        <1>  jne L_error_incorrect_type
  1784 000015E1 4899                    	cqo
  1785 000015E3 498B4001                	mov rax, qword [r8 + 1]
  1786 000015E7 49F76101                	mul qword [r9 + 1]
  1787 000015EB 4889C7                  	mov rdi, rax
  1788 000015EE E876080000              	call make_integer
  1789 000015F3 C9                      	leave
  1790 000015F4 C22000                  	ret AND_KILL_FRAME(2)
  1791                                  
  1792                                  L_code_ptr_raw_bin_mul_qq:
  1793 000015F7 C8000000                        enter 0, 0
  1794 000015FB 48837D1802                      cmp COUNT, 2
  1795 00001600 0F8549090000                    jne L_error_arg_count_2
  1796 00001606 4C8B4520                        mov r8, PARAM(0)
  1797                                          assert_fraction(r8)
    53 0000160A 41803812            <1>  cmp byte [%1], %2
    54 0000160E 0F85DA090000        <1>  jne L_error_incorrect_type
  1798 00001614 4C8B4D28                        mov r9, PARAM(1)
  1799                                          assert_fraction(r9)
    53 00001618 41803912            <1>  cmp byte [%1], %2
    54 0000161C 0F85CC090000        <1>  jne L_error_incorrect_type
  1800 00001622 498B4001                        mov rax, qword [r8 + 1] ; num1
  1801 00001626 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1802 0000162A 4899                            cqo
  1803 0000162C 48F7EB                          imul rbx
  1804 0000162F 4889C6                          mov rsi, rax
  1805 00001632 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1806 00001636 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1807 0000163A 4899                            cqo
  1808 0000163C 48F7EB                          imul rbx
  1809 0000163F 4889C7                          mov rdi, rax
  1810 00001642 E8A9000000                      call normalize_fraction
  1811 00001647 C9                              leave
  1812 00001648 C22000                          ret AND_KILL_FRAME(2)
  1813                                          
  1814                                  L_code_ptr_raw_bin_div_zz:
  1815 0000164B C8000000                	enter 0, 0
  1816 0000164F 48837D1802              	cmp COUNT, 2
  1817 00001654 0F85F5080000            	jne L_error_arg_count_2
  1818 0000165A 4C8B4520                	mov r8, PARAM(0)
  1819                                  	assert_integer(r8)
    53 0000165E 41803811            <1>  cmp byte [%1], %2
    54 00001662 0F8586090000        <1>  jne L_error_incorrect_type
  1820 00001668 4C8B4D28                	mov r9, PARAM(1)
  1821                                  	assert_integer(r9)
    53 0000166C 41803911            <1>  cmp byte [%1], %2
    54 00001670 0F8578090000        <1>  jne L_error_incorrect_type
  1822 00001676 498B7901                	mov rdi, qword [r9 + 1]
  1823 0000167A 4883FF00                	cmp rdi, 0
  1824 0000167E 0F849B090000            	je L_error_division_by_zero
  1825 00001684 498B7001                	mov rsi, qword [r8 + 1]
  1826 00001688 E863000000              	call normalize_fraction
  1827 0000168D C9                      	leave
  1828 0000168E C22000                  	ret AND_KILL_FRAME(2)
  1829                                  
  1830                                  L_code_ptr_raw_bin_div_qq:
  1831 00001691 C8000000                        enter 0, 0
  1832 00001695 48837D1802                      cmp COUNT, 2
  1833 0000169A 0F85AF080000                    jne L_error_arg_count_2
  1834 000016A0 4C8B4520                        mov r8, PARAM(0)
  1835                                          assert_fraction(r8)
    53 000016A4 41803812            <1>  cmp byte [%1], %2
    54 000016A8 0F8540090000        <1>  jne L_error_incorrect_type
  1836 000016AE 4C8B4D28                        mov r9, PARAM(1)
  1837                                          assert_fraction(r9)
    53 000016B2 41803912            <1>  cmp byte [%1], %2
    54 000016B6 0F8532090000        <1>  jne L_error_incorrect_type
  1838 000016BC 4983790100                      cmp qword [r9 + 1], 0
  1839 000016C1 0F8458090000                    je L_error_division_by_zero
  1840 000016C7 498B4001                        mov rax, qword [r8 + 1] ; num1
  1841 000016CB 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1842 000016CF 4899                            cqo
  1843 000016D1 48F7EB                          imul rbx
  1844 000016D4 4889C6                          mov rsi, rax
  1845 000016D7 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1846 000016DB 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1847 000016DF 4899                            cqo
  1848 000016E1 48F7EB                          imul rbx
  1849 000016E4 4889C7                          mov rdi, rax
  1850 000016E7 E804000000                      call normalize_fraction
  1851 000016EC C9                              leave
  1852 000016ED C22000                          ret AND_KILL_FRAME(2)
  1853                                          
  1854                                  normalize_fraction:
  1855 000016F0 56                              push rsi
  1856 000016F1 57                              push rdi
  1857 000016F2 E859000000                      call gcd
  1858 000016F7 4889C3                          mov rbx, rax
  1859 000016FA 58                              pop rax
  1860 000016FB 4899                            cqo
  1861 000016FD 48F7FB                          idiv rbx
  1862 00001700 4989C0                          mov r8, rax
  1863 00001703 58                              pop rax
  1864 00001704 4899                            cqo
  1865 00001706 48F7FB                          idiv rbx
  1866 00001709 4989C1                          mov r9, rax
  1867 0000170C 4983F900                        cmp r9, 0
  1868 00001710 741C                            je .L_zero
  1869 00001712 4983F801                        cmp r8, 1
  1870 00001716 7421                            je .L_int
  1871 00001718 BF11000000                      mov rdi, (1 + 8 + 8)
  1872 0000171D E8CAEBFFFF                      call malloc
  1873 00001722 C60012                          mov byte [rax], T_fraction
  1874 00001725 4C894801                        mov qword [rax + 1], r9
  1875 00001729 4C894009                        mov qword [rax + 1 + 8], r8
  1876 0000172D C3                              ret
  1877                                  .L_zero:
  1878 0000172E BF00000000                      mov rdi, 0
  1879 00001733 E831070000                      call make_integer
  1880 00001738 C3                              ret
  1881                                  .L_int:
  1882 00001739 4C89CF                          mov rdi, r9
  1883 0000173C E828070000                      call make_integer
  1884 00001741 C3                              ret
  1885                                  
  1886                                  iabs:
  1887 00001742 4889F8                          mov rax, rdi
  1888 00001745 4883F800                        cmp rax, 0
  1889 00001749 7C01                            jl .Lneg
  1890 0000174B C3                              ret
  1891                                  .Lneg:
  1892 0000174C 48F7D8                          neg rax
  1893 0000174F C3                              ret
  1894                                  
  1895                                  gcd:
  1896 00001750 E8EDFFFFFF                      call iabs
  1897 00001755 4889C3                          mov rbx, rax
  1898 00001758 4889F7                          mov rdi, rsi
  1899 0000175B E8E2FFFFFF                      call iabs
  1900 00001760 4883F800                        cmp rax, 0
  1901 00001764 7502                            jne .L0
  1902 00001766 4893                            xchg rax, rbx
  1903                                  .L0:
  1904 00001768 4883FB00                        cmp rbx, 0
  1905 0000176C 740C                            je .L1
  1906 0000176E 4899                            cqo
  1907 00001770 48F7F3                          div rbx
  1908 00001773 4889D0                          mov rax, rdx
  1909 00001776 4893                            xchg rax, rbx
  1910 00001778 EBEE                            jmp .L0
  1911                                  .L1:
  1912 0000177A C3                              ret
  1913                                  
  1914                                  L_code_ptr_error:
  1915 0000177B C8000000                        enter 0, 0
  1916 0000177F 48837D1802                      cmp COUNT, 2
  1917 00001784 0F85C5070000                    jne L_error_arg_count_2
  1918 0000178A 488B7520                        mov rsi, PARAM(0)
  1919                                          assert_interned_symbol(rsi)
    53 0000178E 803E41              <1>  cmp byte [%1], %2
    54 00001791 0F8557080000        <1>  jne L_error_incorrect_type
  1920 00001797 488B7528                        mov rsi, PARAM(1)
  1921                                          assert_string(rsi)
    53 0000179B 803E03              <1>  cmp byte [%1], %2
    54 0000179E 0F854A080000        <1>  jne L_error_incorrect_type
  1922 000017A4 48BF-                           mov rdi, fmt_scheme_error_part_1
  1922 000017A6 [3C04000000000000] 
  1923 000017AE B800000000                      mov rax, 0
  1924                                          ENTER
    44 000017B3 C8000000            <1>  enter 0, 0
    45 000017B7 4883E4F0            <1>  and rsp, ~15
  1925 000017BB E8(00000000)                    call printf
  1926                                          LEAVE
    49 000017C0 C9                  <1>  leave
  1927 000017C1 488B7D20                        mov rdi, PARAM(0)
  1928 000017C5 E8A3EDFFFF                      call print_sexpr
  1929 000017CA 48BF-                           mov rdi, fmt_scheme_error_part_2
  1929 000017CC [5004000000000000] 
  1930 000017D4 B800000000                      mov rax, 0
  1931                                          ENTER
    44 000017D9 C8000000            <1>  enter 0, 0
    45 000017DD 4883E4F0            <1>  and rsp, ~15
  1932 000017E1 E8(00000000)                    call printf
  1933                                          LEAVE
    49 000017E6 C9                  <1>  leave
  1934 000017E7 488B4528                        mov rax, PARAM(1)       ; sob_string
  1935 000017EB BE01000000                      mov rsi, 1              ; size = 1 byte
  1936 000017F0 488B5001                        mov rdx, qword [rax + 1] ; length
  1937 000017F4 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1938 000017F8 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1939                                  	ENTER
    44 00001800 C8000000            <1>  enter 0, 0
    45 00001804 4883E4F0            <1>  and rsp, ~15
  1940 00001808 E8(00000000)                    call fwrite
  1941                                  	LEAVE
    49 0000180D C9                  <1>  leave
  1942 0000180E 48BF-                           mov rdi, fmt_scheme_error_part_3
  1942 00001810 [9204000000000000] 
  1943 00001818 B800000000                      mov rax, 0
  1944                                          ENTER
    44 0000181D C8000000            <1>  enter 0, 0
    45 00001821 4883E4F0            <1>  and rsp, ~15
  1945 00001825 E8(00000000)                    call printf
  1946                                          LEAVE
    49 0000182A C9                  <1>  leave
  1947 0000182B 48C7C0F7FFFFFF                  mov rax, -9
  1948 00001832 E8(00000000)                    call exit
  1949                                  
  1950                                  L_code_ptr_raw_less_than_rr:
  1951 00001837 C8000000                        enter 0, 0
  1952 0000183B 48837D1802                      cmp COUNT, 2
  1953 00001840 0F8509070000                    jne L_error_arg_count_2
  1954 00001846 488B7520                        mov rsi, PARAM(0)
  1955                                          assert_real(rsi)
    53 0000184A 803E13              <1>  cmp byte [%1], %2
    54 0000184D 0F859B070000        <1>  jne L_error_incorrect_type
  1956 00001853 488B7D28                        mov rdi, PARAM(1)
  1957                                          assert_real(rdi)
    53 00001857 803F13              <1>  cmp byte [%1], %2
    54 0000185A 0F858E070000        <1>  jne L_error_incorrect_type
  1958 00001860 F20F104601                      movsd xmm0, qword [rsi + 1]
  1959 00001865 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1960 0000186A 660F2FC1                        comisd xmm0, xmm1
  1961 0000186E 730C                            jae .L_false
  1962 00001870 48B8-                           mov rax, sob_boolean_true
  1962 00001872 [0300000000000000] 
  1963 0000187A EB0A                            jmp .L_exit
  1964                                  .L_false:
  1965 0000187C 48B8-                           mov rax, sob_boolean_false
  1965 0000187E [0200000000000000] 
  1966                                  .L_exit:
  1967 00001886 C9                              leave
  1968 00001887 C22000                          ret AND_KILL_FRAME(2)
  1969                                          
  1970                                  L_code_ptr_raw_less_than_zz:
  1971 0000188A C8000000                	enter 0, 0
  1972 0000188E 48837D1802              	cmp COUNT, 2
  1973 00001893 0F85B6060000            	jne L_error_arg_count_2
  1974 00001899 4C8B4520                	mov r8, PARAM(0)
  1975                                  	assert_integer(r8)
    53 0000189D 41803811            <1>  cmp byte [%1], %2
    54 000018A1 0F8547070000        <1>  jne L_error_incorrect_type
  1976 000018A7 4C8B4D28                	mov r9, PARAM(1)
  1977                                  	assert_integer(r9)
    53 000018AB 41803911            <1>  cmp byte [%1], %2
    54 000018AF 0F8539070000        <1>  jne L_error_incorrect_type
  1978 000018B5 498B7801                	mov rdi, qword [r8 + 1]
  1979 000018B9 493B7901                	cmp rdi, qword [r9 + 1]
  1980 000018BD 7D0C                    	jge .L_false
  1981 000018BF 48B8-                   	mov rax, sob_boolean_true
  1981 000018C1 [0300000000000000] 
  1982 000018C9 EB0A                    	jmp .L_exit
  1983                                  .L_false:
  1984 000018CB 48B8-                   	mov rax, sob_boolean_false
  1984 000018CD [0200000000000000] 
  1985                                  .L_exit:
  1986 000018D5 C9                      	leave
  1987 000018D6 C22000                  	ret AND_KILL_FRAME(2)
  1988                                  
  1989                                  L_code_ptr_raw_less_than_qq:
  1990 000018D9 C8000000                        enter 0, 0
  1991 000018DD 48837D1802                      cmp COUNT, 2
  1992 000018E2 0F8567060000                    jne L_error_arg_count_2
  1993 000018E8 488B7520                        mov rsi, PARAM(0)
  1994                                          assert_fraction(rsi)
    53 000018EC 803E12              <1>  cmp byte [%1], %2
    54 000018EF 0F85F9060000        <1>  jne L_error_incorrect_type
  1995 000018F5 488B7D28                        mov rdi, PARAM(1)
  1996                                          assert_fraction(rdi)
    53 000018F9 803F12              <1>  cmp byte [%1], %2
    54 000018FC 0F85EC060000        <1>  jne L_error_incorrect_type
  1997 00001902 488B4601                        mov rax, qword [rsi + 1] ; num1
  1998 00001906 4899                            cqo
  1999 00001908 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2000 0000190C 4889C1                          mov rcx, rax
  2001 0000190F 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  2002 00001913 4899                            cqo
  2003 00001915 48F76F01                        imul qword [rdi + 1]          ; num2
  2004 00001919 4829C1                          sub rcx, rax
  2005 0000191C 7D0C                            jge .L_false
  2006 0000191E 48B8-                           mov rax, sob_boolean_true
  2006 00001920 [0300000000000000] 
  2007 00001928 EB0A                            jmp .L_exit
  2008                                  .L_false:
  2009 0000192A 48B8-                           mov rax, sob_boolean_false
  2009 0000192C [0200000000000000] 
  2010                                  .L_exit:
  2011 00001934 C9                              leave
  2012 00001935 C22000                          ret AND_KILL_FRAME(2)
  2013                                  
  2014                                  L_code_ptr_raw_equal_rr:
  2015 00001938 C8000000                        enter 0, 0
  2016 0000193C 48837D1802                      cmp COUNT, 2
  2017 00001941 0F8508060000                    jne L_error_arg_count_2
  2018 00001947 488B7520                        mov rsi, PARAM(0)
  2019                                          assert_real(rsi)
    53 0000194B 803E13              <1>  cmp byte [%1], %2
    54 0000194E 0F859A060000        <1>  jne L_error_incorrect_type
  2020 00001954 488B7D28                        mov rdi, PARAM(1)
  2021                                          assert_real(rdi)
    53 00001958 803F13              <1>  cmp byte [%1], %2
    54 0000195B 0F858D060000        <1>  jne L_error_incorrect_type
  2022 00001961 F20F104601                      movsd xmm0, qword [rsi + 1]
  2023 00001966 F20F104F01                      movsd xmm1, qword [rdi + 1]
  2024 0000196B 660F2FC1                        comisd xmm0, xmm1
  2025 0000196F 750C                            jne .L_false
  2026 00001971 48B8-                           mov rax, sob_boolean_true
  2026 00001973 [0300000000000000] 
  2027 0000197B EB0A                            jmp .L_exit
  2028                                  .L_false:
  2029 0000197D 48B8-                           mov rax, sob_boolean_false
  2029 0000197F [0200000000000000] 
  2030                                  .L_exit:
  2031 00001987 C9                              leave
  2032 00001988 C22000                          ret AND_KILL_FRAME(2)
  2033                                          
  2034                                  L_code_ptr_raw_equal_zz:
  2035 0000198B C8000000                	enter 0, 0
  2036 0000198F 48837D1802              	cmp COUNT, 2
  2037 00001994 0F85B5050000            	jne L_error_arg_count_2
  2038 0000199A 4C8B4520                	mov r8, PARAM(0)
  2039                                  	assert_integer(r8)
    53 0000199E 41803811            <1>  cmp byte [%1], %2
    54 000019A2 0F8546060000        <1>  jne L_error_incorrect_type
  2040 000019A8 4C8B4D28                	mov r9, PARAM(1)
  2041                                  	assert_integer(r9)
    53 000019AC 41803911            <1>  cmp byte [%1], %2
    54 000019B0 0F8538060000        <1>  jne L_error_incorrect_type
  2042 000019B6 498B7801                	mov rdi, qword [r8 + 1]
  2043 000019BA 493B7901                	cmp rdi, qword [r9 + 1]
  2044 000019BE 750C                    	jne .L_false
  2045 000019C0 48B8-                   	mov rax, sob_boolean_true
  2045 000019C2 [0300000000000000] 
  2046 000019CA EB0A                    	jmp .L_exit
  2047                                  .L_false:
  2048 000019CC 48B8-                   	mov rax, sob_boolean_false
  2048 000019CE [0200000000000000] 
  2049                                  .L_exit:
  2050 000019D6 C9                      	leave
  2051 000019D7 C22000                  	ret AND_KILL_FRAME(2)
  2052                                  
  2053                                  L_code_ptr_raw_equal_qq:
  2054 000019DA C8000000                        enter 0, 0
  2055 000019DE 48837D1802                      cmp COUNT, 2
  2056 000019E3 0F8566050000                    jne L_error_arg_count_2
  2057 000019E9 488B7520                        mov rsi, PARAM(0)
  2058                                          assert_fraction(rsi)
    53 000019ED 803E12              <1>  cmp byte [%1], %2
    54 000019F0 0F85F8050000        <1>  jne L_error_incorrect_type
  2059 000019F6 488B7D28                        mov rdi, PARAM(1)
  2060                                          assert_fraction(rdi)
    53 000019FA 803F12              <1>  cmp byte [%1], %2
    54 000019FD 0F85EB050000        <1>  jne L_error_incorrect_type
  2061 00001A03 488B4601                        mov rax, qword [rsi + 1] ; num1
  2062 00001A07 4899                            cqo
  2063 00001A09 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2064 00001A0D 4889C1                          mov rcx, rax
  2065 00001A10 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  2066 00001A14 4899                            cqo
  2067 00001A16 48F76F01                        imul qword [rdi + 1]          ; num2
  2068 00001A1A 4829C1                          sub rcx, rax
  2069 00001A1D 750C                            jne .L_false
  2070 00001A1F 48B8-                           mov rax, sob_boolean_true
  2070 00001A21 [0300000000000000] 
  2071 00001A29 EB0A                            jmp .L_exit
  2072                                  .L_false:
  2073 00001A2B 48B8-                           mov rax, sob_boolean_false
  2073 00001A2D [0200000000000000] 
  2074                                  .L_exit:
  2075 00001A35 C9                              leave
  2076 00001A36 C22000                          ret AND_KILL_FRAME(2)
  2077                                  
  2078                                  L_code_ptr_quotient:
  2079 00001A39 C8000000                        enter 0, 0
  2080 00001A3D 48837D1802                      cmp COUNT, 2
  2081 00001A42 0F8507050000                    jne L_error_arg_count_2
  2082 00001A48 488B7520                        mov rsi, PARAM(0)
  2083                                          assert_integer(rsi)
    53 00001A4C 803E11              <1>  cmp byte [%1], %2
    54 00001A4F 0F8599050000        <1>  jne L_error_incorrect_type
  2084 00001A55 488B7D28                        mov rdi, PARAM(1)
  2085                                          assert_integer(rdi)
    53 00001A59 803F11              <1>  cmp byte [%1], %2
    54 00001A5C 0F858C050000        <1>  jne L_error_incorrect_type
  2086 00001A62 488B4601                        mov rax, qword [rsi + 1]
  2087 00001A66 488B5F01                        mov rbx, qword [rdi + 1]
  2088 00001A6A 4883FB00                        cmp rbx, 0
  2089 00001A6E 0F84AB050000                    je L_error_division_by_zero
  2090 00001A74 4899                            cqo
  2091 00001A76 48F7FB                          idiv rbx
  2092 00001A79 4889C7                          mov rdi, rax
  2093 00001A7C E8E8030000                      call make_integer
  2094 00001A81 C9                              leave
  2095 00001A82 C22000                          ret AND_KILL_FRAME(2)
  2096                                          
  2097                                  L_code_ptr_remainder:
  2098 00001A85 C8000000                        enter 0, 0
  2099 00001A89 48837D1802                      cmp COUNT, 2
  2100 00001A8E 0F85BB040000                    jne L_error_arg_count_2
  2101 00001A94 488B7520                        mov rsi, PARAM(0)
  2102                                          assert_integer(rsi)
    53 00001A98 803E11              <1>  cmp byte [%1], %2
    54 00001A9B 0F854D050000        <1>  jne L_error_incorrect_type
  2103 00001AA1 488B7D28                        mov rdi, PARAM(1)
  2104                                          assert_integer(rdi)
    53 00001AA5 803F11              <1>  cmp byte [%1], %2
    54 00001AA8 0F8540050000        <1>  jne L_error_incorrect_type
  2105 00001AAE 488B4601                        mov rax, qword [rsi + 1]
  2106 00001AB2 488B5F01                        mov rbx, qword [rdi + 1]
  2107 00001AB6 4883FB00                        cmp rbx, 0
  2108 00001ABA 0F845F050000                    je L_error_division_by_zero
  2109 00001AC0 4899                            cqo
  2110 00001AC2 48F7FB                          idiv rbx
  2111 00001AC5 4889D7                          mov rdi, rdx
  2112 00001AC8 E89C030000                      call make_integer
  2113 00001ACD C9                              leave
  2114 00001ACE C22000                          ret AND_KILL_FRAME(2)
  2115                                  
  2116                                  L_code_ptr_set_car:
  2117 00001AD1 C8000000                        enter 0, 0
  2118 00001AD5 48837D1802                      cmp COUNT, 2
  2119 00001ADA 0F856F040000                    jne L_error_arg_count_2
  2120 00001AE0 488B4520                        mov rax, PARAM(0)
  2121                                          assert_pair(rax)
    53 00001AE4 803821              <1>  cmp byte [%1], %2
    54 00001AE7 0F8501050000        <1>  jne L_error_incorrect_type
  2122 00001AED 488B5D28                        mov rbx, PARAM(1)
  2123 00001AF1 48895801                        mov SOB_PAIR_CAR(rax), rbx
  2124 00001AF5 48B8-                           mov rax, sob_void
  2124 00001AF7 [0000000000000000] 
  2125 00001AFF C9                              leave
  2126 00001B00 C22000                          ret AND_KILL_FRAME(2)
  2127                                  
  2128                                  L_code_ptr_set_cdr:
  2129 00001B03 C8000000                        enter 0, 0
  2130 00001B07 48837D1802                      cmp COUNT, 2
  2131 00001B0C 0F853D040000                    jne L_error_arg_count_2
  2132 00001B12 488B4520                        mov rax, PARAM(0)
  2133                                          assert_pair(rax)
    53 00001B16 803821              <1>  cmp byte [%1], %2
    54 00001B19 0F85CF040000        <1>  jne L_error_incorrect_type
  2134 00001B1F 488B5D28                        mov rbx, PARAM(1)
  2135 00001B23 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2136 00001B27 48B8-                           mov rax, sob_void
  2136 00001B29 [0000000000000000] 
  2137 00001B31 C9                              leave
  2138 00001B32 C22000                          ret AND_KILL_FRAME(2)
  2139                                  
  2140                                  L_code_ptr_string_ref:
  2141 00001B35 C8000000                        enter 0, 0
  2142 00001B39 48837D1802                      cmp COUNT, 2
  2143 00001B3E 0F850B040000                    jne L_error_arg_count_2
  2144 00001B44 488B7D20                        mov rdi, PARAM(0)
  2145                                          assert_string(rdi)
    53 00001B48 803F03              <1>  cmp byte [%1], %2
    54 00001B4B 0F859D040000        <1>  jne L_error_incorrect_type
  2146 00001B51 488B7528                        mov rsi, PARAM(1)
  2147                                          assert_integer(rsi)
    53 00001B55 803E11              <1>  cmp byte [%1], %2
    54 00001B58 0F8590040000        <1>  jne L_error_incorrect_type
  2148 00001B5E 488B5701                        mov rdx, qword [rdi + 1]
  2149 00001B62 488B4E01                        mov rcx, qword [rsi + 1]
  2150 00001B66 4839D1                          cmp rcx, rdx
  2151 00001B69 0F8D14030000                    jge L_error_integer_range
  2152 00001B6F 4883F900                        cmp rcx, 0
  2153 00001B73 0F8C0A030000                    jl L_error_integer_range
  2154 00001B79 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  2155 00001B7D BF02000000                      mov rdi, 2
  2156 00001B82 E865E7FFFF                      call malloc
  2157 00001B87 C60002                          mov byte [rax], T_char
  2158 00001B8A 885801                          mov byte [rax + 1], bl
  2159 00001B8D C9                              leave
  2160 00001B8E C22000                          ret AND_KILL_FRAME(2)
  2161                                  
  2162                                  L_code_ptr_vector_ref:
  2163 00001B91 C8000000                        enter 0, 0
  2164 00001B95 48837D1802                      cmp COUNT, 2
  2165 00001B9A 0F85AF030000                    jne L_error_arg_count_2
  2166 00001BA0 488B7D20                        mov rdi, PARAM(0)
  2167                                          assert_vector(rdi)
    53 00001BA4 803F22              <1>  cmp byte [%1], %2
    54 00001BA7 0F8541040000        <1>  jne L_error_incorrect_type
  2168 00001BAD 488B7528                        mov rsi, PARAM(1)
  2169                                          assert_integer(rsi)
    53 00001BB1 803E11              <1>  cmp byte [%1], %2
    54 00001BB4 0F8534040000        <1>  jne L_error_incorrect_type
  2170 00001BBA 488B5701                        mov rdx, qword [rdi + 1]
  2171 00001BBE 488B4E01                        mov rcx, qword [rsi + 1]
  2172 00001BC2 4839D1                          cmp rcx, rdx
  2173 00001BC5 0F8DB8020000                    jge L_error_integer_range
  2174 00001BCB 4883F900                        cmp rcx, 0
  2175 00001BCF 0F8CAE020000                    jl L_error_integer_range
  2176 00001BD5 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2177 00001BDA C9                              leave
  2178 00001BDB C22000                          ret AND_KILL_FRAME(2)
  2179                                  
  2180                                  L_code_ptr_vector_set:
  2181 00001BDE C8000000                        enter 0, 0
  2182 00001BE2 48837D1803                      cmp COUNT, 3
  2183 00001BE7 0F85CC030000                    jne L_error_arg_count_3
  2184 00001BED 488B7D20                        mov rdi, PARAM(0)
  2185                                          assert_vector(rdi)
    53 00001BF1 803F22              <1>  cmp byte [%1], %2
    54 00001BF4 0F85F4030000        <1>  jne L_error_incorrect_type
  2186 00001BFA 488B7528                        mov rsi, PARAM(1)
  2187                                          assert_integer(rsi)
    53 00001BFE 803E11              <1>  cmp byte [%1], %2
    54 00001C01 0F85E7030000        <1>  jne L_error_incorrect_type
  2188 00001C07 488B5701                        mov rdx, qword [rdi + 1]
  2189 00001C0B 488B4E01                        mov rcx, qword [rsi + 1]
  2190 00001C0F 4839D1                          cmp rcx, rdx
  2191 00001C12 0F8D6B020000                    jge L_error_integer_range
  2192 00001C18 4883F900                        cmp rcx, 0
  2193 00001C1C 0F8C61020000                    jl L_error_integer_range
  2194 00001C22 488B4530                        mov rax, PARAM(2)
  2195 00001C26 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2196 00001C2B 48B8-                           mov rax, sob_void
  2196 00001C2D [0000000000000000] 
  2197 00001C35 C9                              leave
  2198 00001C36 C22800                          ret AND_KILL_FRAME(3)
  2199                                  
  2200                                  L_code_ptr_string_set:
  2201 00001C39 C8000000                        enter 0, 0
  2202 00001C3D 48837D1803                      cmp COUNT, 3
  2203 00001C42 0F8571030000                    jne L_error_arg_count_3
  2204 00001C48 488B7D20                        mov rdi, PARAM(0)
  2205                                          assert_string(rdi)
    53 00001C4C 803F03              <1>  cmp byte [%1], %2
    54 00001C4F 0F8599030000        <1>  jne L_error_incorrect_type
  2206 00001C55 488B7528                        mov rsi, PARAM(1)
  2207                                          assert_integer(rsi)
    53 00001C59 803E11              <1>  cmp byte [%1], %2
    54 00001C5C 0F858C030000        <1>  jne L_error_incorrect_type
  2208 00001C62 488B5701                        mov rdx, qword [rdi + 1]
  2209 00001C66 488B4E01                        mov rcx, qword [rsi + 1]
  2210 00001C6A 4839D1                          cmp rcx, rdx
  2211 00001C6D 0F8D10020000                    jge L_error_integer_range
  2212 00001C73 4883F900                        cmp rcx, 0
  2213 00001C77 0F8C06020000                    jl L_error_integer_range
  2214 00001C7D 488B4530                        mov rax, PARAM(2)
  2215                                          assert_char(rax)
    53 00001C81 803802              <1>  cmp byte [%1], %2
    54 00001C84 0F8564030000        <1>  jne L_error_incorrect_type
  2216 00001C8A 8A4001                          mov al, byte [rax + 1]
  2217 00001C8D 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2218 00001C91 48B8-                           mov rax, sob_void
  2218 00001C93 [0000000000000000] 
  2219 00001C9B C9                              leave
  2220 00001C9C C22800                          ret AND_KILL_FRAME(3)
  2221                                  
  2222                                  L_code_ptr_make_vector:
  2223 00001C9F C8000000                        enter 0, 0
  2224 00001CA3 48837D1802                      cmp COUNT, 2
  2225 00001CA8 0F85A1020000                    jne L_error_arg_count_2
  2226 00001CAE 488B4D20                        mov rcx, PARAM(0)
  2227                                          assert_integer(rcx)
    53 00001CB2 803911              <1>  cmp byte [%1], %2
    54 00001CB5 0F8533030000        <1>  jne L_error_incorrect_type
  2228 00001CBB 488B4901                        mov rcx, qword [rcx + 1]
  2229 00001CBF 4883F900                        cmp rcx, 0
  2230 00001CC3 0F8CBA010000                    jl L_error_integer_range
  2231 00001CC9 488B5528                        mov rdx, PARAM(1)
  2232 00001CCD 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2233 00001CD5 E812E6FFFF                      call malloc
  2234 00001CDA C60022                          mov byte [rax], T_vector
  2235 00001CDD 48894801                        mov qword [rax + 1], rcx
  2236 00001CE1 41B800000000                    mov r8, 0
  2237                                  .L0:
  2238 00001CE7 4939C8                          cmp r8, rcx
  2239 00001CEA 740A                            je .L1
  2240 00001CEC 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2241 00001CF1 49FFC0                          inc r8
  2242 00001CF4 EBF1                            jmp .L0
  2243                                  .L1:
  2244 00001CF6 C9                              leave
  2245 00001CF7 C22000                          ret AND_KILL_FRAME(2)
  2246                                          
  2247                                  L_code_ptr_make_string:
  2248 00001CFA C8000000                        enter 0, 0
  2249 00001CFE 48837D1802                      cmp COUNT, 2
  2250 00001D03 0F8546020000                    jne L_error_arg_count_2
  2251 00001D09 488B4D20                        mov rcx, PARAM(0)
  2252                                          assert_integer(rcx)
    53 00001D0D 803911              <1>  cmp byte [%1], %2
    54 00001D10 0F85D8020000        <1>  jne L_error_incorrect_type
  2253 00001D16 488B4901                        mov rcx, qword [rcx + 1]
  2254 00001D1A 4883F900                        cmp rcx, 0
  2255 00001D1E 0F8C5F010000                    jl L_error_integer_range
  2256 00001D24 488B5528                        mov rdx, PARAM(1)
  2257                                          assert_char(rdx)
    53 00001D28 803A02              <1>  cmp byte [%1], %2
    54 00001D2B 0F85BD020000        <1>  jne L_error_incorrect_type
  2258 00001D31 8A5201                          mov dl, byte [rdx + 1]
  2259 00001D34 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2260 00001D38 E8AFE5FFFF                      call malloc
  2261 00001D3D C60003                          mov byte [rax], T_string
  2262 00001D40 48894801                        mov qword [rax + 1], rcx
  2263 00001D44 41B800000000                    mov r8, 0
  2264                                  .L0:
  2265 00001D4A 4939C8                          cmp r8, rcx
  2266 00001D4D 740A                            je .L1
  2267 00001D4F 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2268 00001D54 49FFC0                          inc r8
  2269 00001D57 EBF1                            jmp .L0
  2270                                  .L1:
  2271 00001D59 C9                              leave
  2272 00001D5A C22000                          ret AND_KILL_FRAME(2)
  2273                                  
  2274                                  L_code_ptr_numerator:
  2275 00001D5D C8000000                        enter 0, 0
  2276 00001D61 48837D1801                      cmp COUNT, 1
  2277 00001D66 0F85AE010000                    jne L_error_arg_count_1
  2278 00001D6C 488B4520                        mov rax, PARAM(0)
  2279                                          assert_fraction(rax)
    53 00001D70 803812              <1>  cmp byte [%1], %2
    54 00001D73 0F8575020000        <1>  jne L_error_incorrect_type
  2280 00001D79 488B7801                        mov rdi, qword [rax + 1]
  2281 00001D7D E8E7000000                      call make_integer
  2282 00001D82 C9                              leave
  2283 00001D83 C21800                          ret AND_KILL_FRAME(1)
  2284                                          
  2285                                  L_code_ptr_denominator:
  2286 00001D86 C8000000                        enter 0, 0
  2287 00001D8A 48837D1801                      cmp COUNT, 1
  2288 00001D8F 0F8585010000                    jne L_error_arg_count_1
  2289 00001D95 488B4520                        mov rax, PARAM(0)
  2290                                          assert_fraction(rax)
    53 00001D99 803812              <1>  cmp byte [%1], %2
    54 00001D9C 0F854C020000        <1>  jne L_error_incorrect_type
  2291 00001DA2 488B7809                        mov rdi, qword [rax + 1 + 8]
  2292 00001DA6 E8BE000000                      call make_integer
  2293 00001DAB C9                              leave
  2294 00001DAC C21800                          ret AND_KILL_FRAME(1)
  2295                                  
  2296                                  L_code_ptr_is_eq:
  2297 00001DAF C8000000                	enter 0, 0
  2298 00001DB3 48837D1802              	cmp COUNT, 2
  2299 00001DB8 0F8591010000            	jne L_error_arg_count_2
  2300 00001DBE 488B7D20                	mov rdi, PARAM(0)
  2301 00001DC2 488B7528                	mov rsi, PARAM(1)
  2302 00001DC6 4839F7                  	cmp rdi, rsi
  2303 00001DC9 746C                    	je .L_eq_true
  2304 00001DCB 8A17                    	mov dl, byte [rdi]
  2305 00001DCD 3A16                    	cmp dl, byte [rsi]
  2306 00001DCF 7572                    	jne .L_eq_false
  2307 00001DD1 80FA02                  	cmp dl, T_char
  2308 00001DD4 7459                    	je .L_char
  2309 00001DD6 80FA41                  	cmp dl, T_interned_symbol
  2310 00001DD9 7440                    	je .L_interned_symbol
  2311 00001DDB 80FA42                          cmp dl, T_uninterned_symbol
  2312 00001DDE 7443                            je .L_uninterned_symbol
  2313 00001DE0 80FA13                  	cmp dl, T_real
  2314 00001DE3 742E                    	je .L_real
  2315 00001DE5 80FA12                  	cmp dl, T_fraction
  2316 00001DE8 7413                    	je .L_fraction
  2317 00001DEA 80FA11                          cmp dl, T_integer
  2318 00001DED 7402                            je .L_integer
  2319 00001DEF EB52                    	jmp .L_eq_false
  2320                                  .L_integer:
  2321 00001DF1 488B4601                        mov rax, qword [rsi + 1]
  2322 00001DF5 483B4701                        cmp rax, qword [rdi + 1]
  2323 00001DF9 7548                            jne .L_eq_false
  2324 00001DFB EB3A                            jmp .L_eq_true
  2325                                  .L_fraction:
  2326 00001DFD 488B4601                	mov rax, qword [rsi + 1]
  2327 00001E01 483B4701                	cmp rax, qword [rdi + 1]
  2328 00001E05 753C                    	jne .L_eq_false
  2329 00001E07 488B4609                	mov rax, qword [rsi + 1 + 8]
  2330 00001E0B 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2331 00001E0F 7532                    	jne .L_eq_false
  2332 00001E11 EB24                    	jmp .L_eq_true
  2333                                  .L_real:
  2334 00001E13 488B4601                	mov rax, qword [rsi + 1]
  2335 00001E17 483B4701                	cmp rax, qword [rdi + 1]
  2336                                  .L_interned_symbol:
  2337                                  	; never reached, because interned_symbols are static!
  2338                                  	; but I'm keeping it in case, I'll ever change
  2339                                  	; the implementation
  2340 00001E1B 488B4601                	mov rax, qword [rsi + 1]
  2341 00001E1F 483B4701                	cmp rax, qword [rdi + 1]
  2342                                  .L_uninterned_symbol:
  2343 00001E23 4C8B4701                        mov r8, qword [rdi + 1]
  2344 00001E27 4C3B4601                        cmp r8, qword [rsi + 1]
  2345 00001E2B 7516                            jne .L_eq_false
  2346 00001E2D EB08                            jmp .L_eq_true
  2347                                  .L_char:
  2348 00001E2F 8A5E01                  	mov bl, byte [rsi + 1]
  2349 00001E32 3A5F01                  	cmp bl, byte [rdi + 1]
  2350 00001E35 750C                    	jne .L_eq_false
  2351                                  .L_eq_true:
  2352 00001E37 48B8-                   	mov rax, sob_boolean_true
  2352 00001E39 [0300000000000000] 
  2353 00001E41 EB0A                    	jmp .L_eq_exit
  2354                                  .L_eq_false:
  2355 00001E43 48B8-                   	mov rax, sob_boolean_false
  2355 00001E45 [0200000000000000] 
  2356                                  .L_eq_exit:
  2357 00001E4D C9                      	leave
  2358 00001E4E C22000                  	ret AND_KILL_FRAME(2)
  2359                                  
  2360                                  make_real:
  2361 00001E51 C8000000                        enter 0, 0
  2362 00001E55 BF09000000                      mov rdi, (1 + 8)
  2363 00001E5A E88DE4FFFF                      call malloc
  2364 00001E5F C60013                          mov byte [rax], T_real
  2365 00001E62 F20F114001                      movsd qword [rax + 1], xmm0
  2366 00001E67 C9                              leave 
  2367 00001E68 C3                              ret
  2368                                          
  2369                                  make_integer:
  2370 00001E69 C8000000                        enter 0, 0
  2371 00001E6D 4889FE                          mov rsi, rdi
  2372 00001E70 BF09000000                      mov rdi, (1 + 8)
  2373 00001E75 E872E4FFFF                      call malloc
  2374 00001E7A C60011                          mov byte [rax], T_integer
  2375 00001E7D 48897001                        mov qword [rax + 1], rsi
  2376 00001E81 C9                              leave
  2377 00001E82 C3                              ret
  2378                                          
  2379                                  L_error_integer_range:
  2380 00001E83 488B3C25[00000000]              mov rdi, qword [stderr]
  2381 00001E8B 48BE-                           mov rsi, fmt_integer_range
  2381 00001E8D [0904000000000000] 
  2382 00001E95 B800000000                      mov rax, 0
  2383                                          ENTER
    44 00001E9A C8000000            <1>  enter 0, 0
    45 00001E9E 4883E4F0            <1>  and rsp, ~15
  2384 00001EA2 E8(00000000)                    call fprintf
  2385                                          LEAVE
    49 00001EA7 C9                  <1>  leave
  2386 00001EA8 48C7C0FBFFFFFF                  mov rax, -5
  2387 00001EAF E8(00000000)                    call exit
  2388                                  
  2389                                  L_error_arg_negative:
  2390 00001EB4 488B3C25[00000000]              mov rdi, qword [stderr]
  2391 00001EBC 48BE-                           mov rsi, fmt_arg_negative
  2391 00001EBE [E102000000000000] 
  2392 00001EC6 B800000000                      mov rax, 0
  2393                                          ENTER
    44 00001ECB C8000000            <1>  enter 0, 0
    45 00001ECF 4883E4F0            <1>  and rsp, ~15
  2394 00001ED3 E8(00000000)                    call fprintf
  2395                                          LEAVE
    49 00001ED8 C9                  <1>  leave
  2396 00001ED9 48C7C0FDFFFFFF                  mov rax, -3
  2397 00001EE0 E8(00000000)                    call exit
  2398                                  
  2399                                  L_error_arg_count_0:
  2400 00001EE5 488B3C25[00000000]              mov rdi, qword [stderr]
  2401 00001EED 48BE-                           mov rsi, fmt_arg_count_0
  2401 00001EEF [0703000000000000] 
  2402 00001EF7 488B5518                        mov rdx, COUNT
  2403 00001EFB B800000000                      mov rax, 0
  2404                                          ENTER
    44 00001F00 C8000000            <1>  enter 0, 0
    45 00001F04 4883E4F0            <1>  and rsp, ~15
  2405 00001F08 E8(00000000)                    call fprintf
  2406                                          LEAVE
    49 00001F0D C9                  <1>  leave
  2407 00001F0E 48C7C0FDFFFFFF                  mov rax, -3
  2408 00001F15 E8(00000000)                    call exit
  2409                                  
  2410                                  L_error_arg_count_1:
  2411 00001F1A 488B3C25[00000000]              mov rdi, qword [stderr]
  2412 00001F22 48BE-                           mov rsi, fmt_arg_count_1
  2412 00001F24 [2F03000000000000] 
  2413 00001F2C 488B5518                        mov rdx, COUNT
  2414 00001F30 B800000000                      mov rax, 0
  2415                                          ENTER
    44 00001F35 C8000000            <1>  enter 0, 0
    45 00001F39 4883E4F0            <1>  and rsp, ~15
  2416 00001F3D E8(00000000)                    call fprintf
  2417                                          LEAVE
    49 00001F42 C9                  <1>  leave
  2418 00001F43 48C7C0FDFFFFFF                  mov rax, -3
  2419 00001F4A E8(00000000)                    call exit
  2420                                  
  2421                                  L_error_arg_count_2:
  2422 00001F4F 488B3C25[00000000]              mov rdi, qword [stderr]
  2423 00001F57 48BE-                           mov rsi, fmt_arg_count_2
  2423 00001F59 [9503000000000000] 
  2424 00001F61 488B5518                        mov rdx, COUNT
  2425 00001F65 B800000000                      mov rax, 0
  2426                                          ENTER
    44 00001F6A C8000000            <1>  enter 0, 0
    45 00001F6E 4883E4F0            <1>  and rsp, ~15
  2427 00001F72 E8(00000000)                    call fprintf
  2428                                          LEAVE
    49 00001F77 C9                  <1>  leave
  2429 00001F78 48C7C0FDFFFFFF                  mov rax, -3
  2430 00001F7F E8(00000000)                    call exit
  2431                                  
  2432                                  L_error_arg_count_12:
  2433 00001F84 488B3C25[00000000]              mov rdi, qword [stderr]
  2434 00001F8C 48BE-                           mov rsi, fmt_arg_count_12
  2434 00001F8E [5503000000000000] 
  2435 00001F96 488B5518                        mov rdx, COUNT
  2436 00001F9A B800000000                      mov rax, 0
  2437                                          ENTER
    44 00001F9F C8000000            <1>  enter 0, 0
    45 00001FA3 4883E4F0            <1>  and rsp, ~15
  2438 00001FA7 E8(00000000)                    call fprintf
  2439                                          LEAVE
    49 00001FAC C9                  <1>  leave
  2440 00001FAD 48C7C0FDFFFFFF                  mov rax, -3
  2441 00001FB4 E8(00000000)                    call exit
  2442                                  
  2443                                  L_error_arg_count_3:
  2444 00001FB9 488B3C25[00000000]              mov rdi, qword [stderr]
  2445 00001FC1 48BE-                           mov rsi, fmt_arg_count_3
  2445 00001FC3 [BC03000000000000] 
  2446 00001FCB 488B5518                        mov rdx, COUNT
  2447 00001FCF B800000000                      mov rax, 0
  2448                                          ENTER
    44 00001FD4 C8000000            <1>  enter 0, 0
    45 00001FD8 4883E4F0            <1>  and rsp, ~15
  2449 00001FDC E8(00000000)                    call fprintf
  2450                                          LEAVE
    49 00001FE1 C9                  <1>  leave
  2451 00001FE2 48C7C0FDFFFFFF                  mov rax, -3
  2452 00001FE9 E8(00000000)                    call exit
  2453                                          
  2454                                  L_error_incorrect_type:
  2455 00001FEE 488B3C25[00000000]              mov rdi, qword [stderr]
  2456 00001FF6 48BE-                           mov rsi, fmt_type
  2456 00001FF8 [E503000000000000] 
  2457 00002000 B800000000                      mov rax, 0
  2458                                          ENTER
    44 00002005 C8000000            <1>  enter 0, 0
    45 00002009 4883E4F0            <1>  and rsp, ~15
  2459 0000200D E8(00000000)                    call fprintf
  2460                                          LEAVE
    49 00002012 C9                  <1>  leave
  2461 00002013 48C7C0FCFFFFFF                  mov rax, -4
  2462 0000201A E8(00000000)                    call exit
  2463                                  
  2464                                  L_error_division_by_zero:
  2465 0000201F 488B3C25[00000000]              mov rdi, qword [stderr]
  2466 00002027 48BE-                           mov rsi, fmt_division_by_zero
  2466 00002029 [2604000000000000] 
  2467 00002031 B800000000                      mov rax, 0
  2468                                          ENTER
    44 00002036 C8000000            <1>  enter 0, 0
    45 0000203A 4883E4F0            <1>  and rsp, ~15
  2469 0000203E E8(00000000)                    call fprintf
  2470                                          LEAVE
    49 00002043 C9                  <1>  leave
  2471 00002044 48C7C0F8FFFFFF                  mov rax, -8
  2472 0000204B E8(00000000)                    call exit
  2473                                  
  2474                                  section .data
  2475                                  gensym_count:
  2476 000002D6 0000000000000000                dq 0
  2477                                  fmt_char:
  2478 000002DE 256300                          db `%c\0`
  2479                                  fmt_arg_negative:
  2480 000002E1 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
  2480 000002EA 7267756D656E742063-
  2480 000002F3 616E6E6F7420626520-
  2480 000002FC 6E656761746976652E-
  2480 00000305 0A00               
  2481                                  fmt_arg_count_0:
  2482 00000307 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2482 00000310 74696E67207A65726F-
  2482 00000319 20617267756D656E74-
  2482 00000322 732E20466F756E6420-
  2482 0000032B 25640A00           
  2483                                  fmt_arg_count_1:
  2484 0000032F 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2484 00000338 74696E67206F6E6520-
  2484 00000341 617267756D656E742E-
  2484 0000034A 20466F756E64202564-
  2484 00000353 0A00               
  2485                                  fmt_arg_count_12:
  2486 00000355 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2486 0000035E 74696E67206F6E6520-
  2486 00000367 726571756972656420-
  2486 00000370 616E64206F6E65206F-
  2486 00000379 7074696F6E616C2061-
  2486 00000382 7267756D656E742E20-
  2486 0000038B 466F756E642025640A-
  2486 00000394 00                 
  2487                                  fmt_arg_count_2:
  2488 00000395 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2488 0000039E 74696E672074776F20-
  2488 000003A7 617267756D656E7473-
  2488 000003B0 2E20466F756E642025-
  2488 000003B9 640A00             
  2489                                  fmt_arg_count_3:
  2490 000003BC 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2490 000003C5 74696E672074687265-
  2490 000003CE 6520617267756D656E-
  2490 000003D7 74732E20466F756E64-
  2490 000003E0 2025640A00         
  2491                                  fmt_type:
  2492 000003E5 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2492 000003EE 696F6E207061737365-
  2492 000003F7 6420696E636F727265-
  2492 00000400 637420747970650A00 
  2493                                  fmt_integer_range:
  2494 00000409 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2494 00000412 7265637420696E7465-
  2494 0000041B 6765722072616E6765-
  2494 00000424 0A00               
  2495                                  fmt_division_by_zero:
  2496 00000426 212121204469766973-             db `!!! Division by zero\n\0`
  2496 0000042F 696F6E206279207A65-
  2496 00000438 726F0A00           
  2497                                  fmt_scheme_error_part_1:
  2498 0000043C 0A2121212054686520-             db `\n!!! The procedure \0`
  2498 00000445 70726F636564757265-
  2498 0000044E 2000               
  2499                                  fmt_scheme_error_part_2:
  2500 00000450 2061736B656420746F-             db ` asked to terminate the program\n`
  2500 00000459 207465726D696E6174-
  2500 00000462 65207468652070726F-
  2500 0000046B 6772616D0A         
  2501 00000470 202020207769746820-             db `    with the following message:\n\n\0`
  2501 00000479 74686520666F6C6C6F-
  2501 00000482 77696E67206D657373-
  2501 0000048B 6167653A0A0A00     
  2502                                  fmt_scheme_error_part_3:
  2503 00000492 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2503 0000049B 210A0A00           
