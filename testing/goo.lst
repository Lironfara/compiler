     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "boolean-false?"
   441 0000056E 0E00000000000000        	dq 14
   442 00000576 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   443 0000057E 66616C73653F            	db 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3F
   444                                  	; L_constants + 1412:
   445 00000584 03                      	db T_string	; "boolean-true?"
   446 00000585 0D00000000000000        	dq 13
   447 0000058D 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   448 00000595 747275653F              	db 0x74, 0x72, 0x75, 0x65, 0x3F
   449                                  	; L_constants + 1434:
   450 0000059A 03                      	db T_string	; "primitive?"
   451 0000059B 0A00000000000000        	dq 10
   452 000005A3 7072696D69746976        	db 0x70, 0x72, 0x69, 0x6D, 0x69, 0x74, 0x69, 0x76
   453 000005AB 653F                    	db 0x65, 0x3F
   454                                  	; L_constants + 1453:
   455 000005AD 03                      	db T_string	; "length"
   456 000005AE 0600000000000000        	dq 6
   457 000005B6 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   458                                  	; L_constants + 1468:
   459 000005BC 03                      	db T_string	; "make-list"
   460 000005BD 0900000000000000        	dq 9
   461 000005C5 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   462 000005CD 74                      	db 0x74
   463                                  	; L_constants + 1486:
   464 000005CE 03                      	db T_string	; "return"
   465 000005CF 0600000000000000        	dq 6
   466 000005D7 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
   467                                  	; L_constants + 1501:
   468 000005DD 03                      	db T_string	; "caar"
   469 000005DE 0400000000000000        	dq 4
   470 000005E6 63616172                	db 0x63, 0x61, 0x61, 0x72
   471                                  	; L_constants + 1514:
   472 000005EA 03                      	db T_string	; "cadr"
   473 000005EB 0400000000000000        	dq 4
   474 000005F3 63616472                	db 0x63, 0x61, 0x64, 0x72
   475                                  	; L_constants + 1527:
   476 000005F7 03                      	db T_string	; "cdar"
   477 000005F8 0400000000000000        	dq 4
   478 00000600 63646172                	db 0x63, 0x64, 0x61, 0x72
   479                                  	; L_constants + 1540:
   480 00000604 03                      	db T_string	; "cddr"
   481 00000605 0400000000000000        	dq 4
   482 0000060D 63646472                	db 0x63, 0x64, 0x64, 0x72
   483                                  	; L_constants + 1553:
   484 00000611 03                      	db T_string	; "caaar"
   485 00000612 0500000000000000        	dq 5
   486 0000061A 6361616172              	db 0x63, 0x61, 0x61, 0x61, 0x72
   487                                  	; L_constants + 1567:
   488 0000061F 03                      	db T_string	; "caadr"
   489 00000620 0500000000000000        	dq 5
   490 00000628 6361616472              	db 0x63, 0x61, 0x61, 0x64, 0x72
   491                                  	; L_constants + 1581:
   492 0000062D 03                      	db T_string	; "cadar"
   493 0000062E 0500000000000000        	dq 5
   494 00000636 6361646172              	db 0x63, 0x61, 0x64, 0x61, 0x72
   495                                  	; L_constants + 1595:
   496 0000063B 03                      	db T_string	; "caddr"
   497 0000063C 0500000000000000        	dq 5
   498 00000644 6361646472              	db 0x63, 0x61, 0x64, 0x64, 0x72
   499                                  	; L_constants + 1609:
   500 00000649 03                      	db T_string	; "cdaar"
   501 0000064A 0500000000000000        	dq 5
   502 00000652 6364616172              	db 0x63, 0x64, 0x61, 0x61, 0x72
   503                                  	; L_constants + 1623:
   504 00000657 03                      	db T_string	; "cdadr"
   505 00000658 0500000000000000        	dq 5
   506 00000660 6364616472              	db 0x63, 0x64, 0x61, 0x64, 0x72
   507                                  	; L_constants + 1637:
   508 00000665 03                      	db T_string	; "cddar"
   509 00000666 0500000000000000        	dq 5
   510 0000066E 6364646172              	db 0x63, 0x64, 0x64, 0x61, 0x72
   511                                  	; L_constants + 1651:
   512 00000673 03                      	db T_string	; "cdddr"
   513 00000674 0500000000000000        	dq 5
   514 0000067C 6364646472              	db 0x63, 0x64, 0x64, 0x64, 0x72
   515                                  	; L_constants + 1665:
   516 00000681 03                      	db T_string	; "caaaar"
   517 00000682 0600000000000000        	dq 6
   518 0000068A 636161616172            	db 0x63, 0x61, 0x61, 0x61, 0x61, 0x72
   519                                  	; L_constants + 1680:
   520 00000690 03                      	db T_string	; "caaadr"
   521 00000691 0600000000000000        	dq 6
   522 00000699 636161616472            	db 0x63, 0x61, 0x61, 0x61, 0x64, 0x72
   523                                  	; L_constants + 1695:
   524 0000069F 03                      	db T_string	; "caadar"
   525 000006A0 0600000000000000        	dq 6
   526 000006A8 636161646172            	db 0x63, 0x61, 0x61, 0x64, 0x61, 0x72
   527                                  	; L_constants + 1710:
   528 000006AE 03                      	db T_string	; "caaddr"
   529 000006AF 0600000000000000        	dq 6
   530 000006B7 636161646472            	db 0x63, 0x61, 0x61, 0x64, 0x64, 0x72
   531                                  	; L_constants + 1725:
   532 000006BD 03                      	db T_string	; "cadaar"
   533 000006BE 0600000000000000        	dq 6
   534 000006C6 636164616172            	db 0x63, 0x61, 0x64, 0x61, 0x61, 0x72
   535                                  	; L_constants + 1740:
   536 000006CC 03                      	db T_string	; "cadadr"
   537 000006CD 0600000000000000        	dq 6
   538 000006D5 636164616472            	db 0x63, 0x61, 0x64, 0x61, 0x64, 0x72
   539                                  	; L_constants + 1755:
   540 000006DB 03                      	db T_string	; "caddar"
   541 000006DC 0600000000000000        	dq 6
   542 000006E4 636164646172            	db 0x63, 0x61, 0x64, 0x64, 0x61, 0x72
   543                                  	; L_constants + 1770:
   544 000006EA 03                      	db T_string	; "cadddr"
   545 000006EB 0600000000000000        	dq 6
   546 000006F3 636164646472            	db 0x63, 0x61, 0x64, 0x64, 0x64, 0x72
   547                                  	; L_constants + 1785:
   548 000006F9 03                      	db T_string	; "cdaaar"
   549 000006FA 0600000000000000        	dq 6
   550 00000702 636461616172            	db 0x63, 0x64, 0x61, 0x61, 0x61, 0x72
   551                                  	; L_constants + 1800:
   552 00000708 03                      	db T_string	; "cdaadr"
   553 00000709 0600000000000000        	dq 6
   554 00000711 636461616472            	db 0x63, 0x64, 0x61, 0x61, 0x64, 0x72
   555                                  	; L_constants + 1815:
   556 00000717 03                      	db T_string	; "cdadar"
   557 00000718 0600000000000000        	dq 6
   558 00000720 636461646172            	db 0x63, 0x64, 0x61, 0x64, 0x61, 0x72
   559                                  	; L_constants + 1830:
   560 00000726 03                      	db T_string	; "cdaddr"
   561 00000727 0600000000000000        	dq 6
   562 0000072F 636461646472            	db 0x63, 0x64, 0x61, 0x64, 0x64, 0x72
   563                                  	; L_constants + 1845:
   564 00000735 03                      	db T_string	; "cddaar"
   565 00000736 0600000000000000        	dq 6
   566 0000073E 636464616172            	db 0x63, 0x64, 0x64, 0x61, 0x61, 0x72
   567                                  	; L_constants + 1860:
   568 00000744 03                      	db T_string	; "cddadr"
   569 00000745 0600000000000000        	dq 6
   570 0000074D 636464616472            	db 0x63, 0x64, 0x64, 0x61, 0x64, 0x72
   571                                  	; L_constants + 1875:
   572 00000753 03                      	db T_string	; "cdddar"
   573 00000754 0600000000000000        	dq 6
   574 0000075C 636464646172            	db 0x63, 0x64, 0x64, 0x64, 0x61, 0x72
   575                                  	; L_constants + 1890:
   576 00000762 03                      	db T_string	; "cddddr"
   577 00000763 0600000000000000        	dq 6
   578 0000076B 636464646472            	db 0x63, 0x64, 0x64, 0x64, 0x64, 0x72
   579                                  	; L_constants + 1905:
   580 00000771 03                      	db T_string	; "list?"
   581 00000772 0500000000000000        	dq 5
   582 0000077A 6C6973743F              	db 0x6C, 0x69, 0x73, 0x74, 0x3F
   583                                  	; L_constants + 1919:
   584 0000077F 03                      	db T_string	; "list"
   585 00000780 0400000000000000        	dq 4
   586 00000788 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   587                                  	; L_constants + 1932:
   588 0000078C 03                      	db T_string	; "not"
   589 0000078D 0300000000000000        	dq 3
   590 00000795 6E6F74                  	db 0x6E, 0x6F, 0x74
   591                                  	; L_constants + 1944:
   592 00000798 03                      	db T_string	; "rational?"
   593 00000799 0900000000000000        	dq 9
   594 000007A1 726174696F6E616C        	db 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x61, 0x6C
   595 000007A9 3F                      	db 0x3F
   596                                  	; L_constants + 1962:
   597 000007AA 03                      	db T_string	; "list*"
   598 000007AB 0500000000000000        	dq 5
   599 000007B3 6C6973742A              	db 0x6C, 0x69, 0x73, 0x74, 0x2A
   600                                  	; L_constants + 1976:
   601 000007B8 03                      	db T_string	; "whatever"
   602 000007B9 0800000000000000        	dq 8
   603 000007C1 7768617465766572        	db 0x77, 0x68, 0x61, 0x74, 0x65, 0x76, 0x65, 0x72
   604                                  	; L_constants + 1993:
   605 000007C9 41                      	db T_interned_symbol	; whatever
   606 000007CA [B807000000000000]      	dq L_constants + 1976
   607                                  	; L_constants + 2002:
   608 000007D2 03                      	db T_string	; "apply"
   609 000007D3 0500000000000000        	dq 5
   610 000007DB 6170706C79              	db 0x61, 0x70, 0x70, 0x6C, 0x79
   611                                  	; L_constants + 2016:
   612 000007E0 03                      	db T_string	; "ormap"
   613 000007E1 0500000000000000        	dq 5
   614 000007E9 6F726D6170              	db 0x6F, 0x72, 0x6D, 0x61, 0x70
   615                                  	; L_constants + 2030:
   616 000007EE 03                      	db T_string	; "map"
   617 000007EF 0300000000000000        	dq 3
   618 000007F7 6D6170                  	db 0x6D, 0x61, 0x70
   619                                  	; L_constants + 2042:
   620 000007FA 03                      	db T_string	; "andmap"
   621 000007FB 0600000000000000        	dq 6
   622 00000803 616E646D6170            	db 0x61, 0x6E, 0x64, 0x6D, 0x61, 0x70
   623                                  	; L_constants + 2057:
   624 00000809 03                      	db T_string	; "reverse"
   625 0000080A 0700000000000000        	dq 7
   626 00000812 72657665727365          	db 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
   627                                  	; L_constants + 2073:
   628 00000819 03                      	db T_string	; "fold-left"
   629 0000081A 0900000000000000        	dq 9
   630 00000822 666F6C642D6C6566        	db 0x66, 0x6F, 0x6C, 0x64, 0x2D, 0x6C, 0x65, 0x66
   631 0000082A 74                      	db 0x74
   632                                  	; L_constants + 2091:
   633 0000082B 03                      	db T_string	; "append"
   634 0000082C 0600000000000000        	dq 6
   635 00000834 617070656E64            	db 0x61, 0x70, 0x70, 0x65, 0x6E, 0x64
   636                                  	; L_constants + 2106:
   637 0000083A 03                      	db T_string	; "x"
   638 0000083B 0100000000000000        	dq 1
   639 00000843 78                      	db 0x78
   640                                  	; L_constants + 2116:
   641 00000844 11                      	db T_integer	; 1
   642 00000845 0100000000000000        	dq 1
   643                                  	; L_constants + 2125:
   644 0000084D 11                      	db T_integer	; 2
   645 0000084E 0200000000000000        	dq 2
   646                                  	; L_constants + 2134:
   647 00000856 11                      	db T_integer	; 3
   648 00000857 0300000000000000        	dq 3
   649                                  free_var_0:	; location of __bin-apply
   650 0000085F [6708000000000000]      	dq .undefined_object
   651                                  .undefined_object:
   652 00000867 05                      	db T_undefined
   653 00000868 [0102000000000000]      	dq L_constants + 513
   654                                  
   655                                  free_var_1:	; location of andmap
   656 00000870 [7808000000000000]      	dq .undefined_object
   657                                  .undefined_object:
   658 00000878 05                      	db T_undefined
   659 00000879 [FA07000000000000]      	dq L_constants + 2042
   660                                  
   661                                  free_var_2:	; location of append
   662 00000881 [8908000000000000]      	dq .undefined_object
   663                                  .undefined_object:
   664 00000889 05                      	db T_undefined
   665 0000088A [2B08000000000000]      	dq L_constants + 2091
   666                                  
   667                                  free_var_3:	; location of apply
   668 00000892 [9A08000000000000]      	dq .undefined_object
   669                                  .undefined_object:
   670 0000089A 05                      	db T_undefined
   671 0000089B [D207000000000000]      	dq L_constants + 2002
   672                                  
   673                                  free_var_4:	; location of caaaar
   674 000008A3 [AB08000000000000]      	dq .undefined_object
   675                                  .undefined_object:
   676 000008AB 05                      	db T_undefined
   677 000008AC [8106000000000000]      	dq L_constants + 1665
   678                                  
   679                                  free_var_5:	; location of caaadr
   680 000008B4 [BC08000000000000]      	dq .undefined_object
   681                                  .undefined_object:
   682 000008BC 05                      	db T_undefined
   683 000008BD [9006000000000000]      	dq L_constants + 1680
   684                                  
   685                                  free_var_6:	; location of caaar
   686 000008C5 [CD08000000000000]      	dq .undefined_object
   687                                  .undefined_object:
   688 000008CD 05                      	db T_undefined
   689 000008CE [1106000000000000]      	dq L_constants + 1553
   690                                  
   691                                  free_var_7:	; location of caadar
   692 000008D6 [DE08000000000000]      	dq .undefined_object
   693                                  .undefined_object:
   694 000008DE 05                      	db T_undefined
   695 000008DF [9F06000000000000]      	dq L_constants + 1695
   696                                  
   697                                  free_var_8:	; location of caaddr
   698 000008E7 [EF08000000000000]      	dq .undefined_object
   699                                  .undefined_object:
   700 000008EF 05                      	db T_undefined
   701 000008F0 [AE06000000000000]      	dq L_constants + 1710
   702                                  
   703                                  free_var_9:	; location of caadr
   704 000008F8 [0009000000000000]      	dq .undefined_object
   705                                  .undefined_object:
   706 00000900 05                      	db T_undefined
   707 00000901 [1F06000000000000]      	dq L_constants + 1567
   708                                  
   709                                  free_var_10:	; location of caar
   710 00000909 [1109000000000000]      	dq .undefined_object
   711                                  .undefined_object:
   712 00000911 05                      	db T_undefined
   713 00000912 [DD05000000000000]      	dq L_constants + 1501
   714                                  
   715                                  free_var_11:	; location of cadaar
   716 0000091A [2209000000000000]      	dq .undefined_object
   717                                  .undefined_object:
   718 00000922 05                      	db T_undefined
   719 00000923 [BD06000000000000]      	dq L_constants + 1725
   720                                  
   721                                  free_var_12:	; location of cadadr
   722 0000092B [3309000000000000]      	dq .undefined_object
   723                                  .undefined_object:
   724 00000933 05                      	db T_undefined
   725 00000934 [CC06000000000000]      	dq L_constants + 1740
   726                                  
   727                                  free_var_13:	; location of cadar
   728 0000093C [4409000000000000]      	dq .undefined_object
   729                                  .undefined_object:
   730 00000944 05                      	db T_undefined
   731 00000945 [2D06000000000000]      	dq L_constants + 1581
   732                                  
   733                                  free_var_14:	; location of caddar
   734 0000094D [5509000000000000]      	dq .undefined_object
   735                                  .undefined_object:
   736 00000955 05                      	db T_undefined
   737 00000956 [DB06000000000000]      	dq L_constants + 1755
   738                                  
   739                                  free_var_15:	; location of cadddr
   740 0000095E [6609000000000000]      	dq .undefined_object
   741                                  .undefined_object:
   742 00000966 05                      	db T_undefined
   743 00000967 [EA06000000000000]      	dq L_constants + 1770
   744                                  
   745                                  free_var_16:	; location of caddr
   746 0000096F [7709000000000000]      	dq .undefined_object
   747                                  .undefined_object:
   748 00000977 05                      	db T_undefined
   749 00000978 [3B06000000000000]      	dq L_constants + 1595
   750                                  
   751                                  free_var_17:	; location of cadr
   752 00000980 [8809000000000000]      	dq .undefined_object
   753                                  .undefined_object:
   754 00000988 05                      	db T_undefined
   755 00000989 [EA05000000000000]      	dq L_constants + 1514
   756                                  
   757                                  free_var_18:	; location of car
   758 00000991 [9909000000000000]      	dq .undefined_object
   759                                  .undefined_object:
   760 00000999 05                      	db T_undefined
   761 0000099A [1501000000000000]      	dq L_constants + 277
   762                                  
   763                                  free_var_19:	; location of cdaaar
   764 000009A2 [AA09000000000000]      	dq .undefined_object
   765                                  .undefined_object:
   766 000009AA 05                      	db T_undefined
   767 000009AB [F906000000000000]      	dq L_constants + 1785
   768                                  
   769                                  free_var_20:	; location of cdaadr
   770 000009B3 [BB09000000000000]      	dq .undefined_object
   771                                  .undefined_object:
   772 000009BB 05                      	db T_undefined
   773 000009BC [0807000000000000]      	dq L_constants + 1800
   774                                  
   775                                  free_var_21:	; location of cdaar
   776 000009C4 [CC09000000000000]      	dq .undefined_object
   777                                  .undefined_object:
   778 000009CC 05                      	db T_undefined
   779 000009CD [4906000000000000]      	dq L_constants + 1609
   780                                  
   781                                  free_var_22:	; location of cdadar
   782 000009D5 [DD09000000000000]      	dq .undefined_object
   783                                  .undefined_object:
   784 000009DD 05                      	db T_undefined
   785 000009DE [1707000000000000]      	dq L_constants + 1815
   786                                  
   787                                  free_var_23:	; location of cdaddr
   788 000009E6 [EE09000000000000]      	dq .undefined_object
   789                                  .undefined_object:
   790 000009EE 05                      	db T_undefined
   791 000009EF [2607000000000000]      	dq L_constants + 1830
   792                                  
   793                                  free_var_24:	; location of cdadr
   794 000009F7 [FF09000000000000]      	dq .undefined_object
   795                                  .undefined_object:
   796 000009FF 05                      	db T_undefined
   797 00000A00 [5706000000000000]      	dq L_constants + 1623
   798                                  
   799                                  free_var_25:	; location of cdar
   800 00000A08 [100A000000000000]      	dq .undefined_object
   801                                  .undefined_object:
   802 00000A10 05                      	db T_undefined
   803 00000A11 [F705000000000000]      	dq L_constants + 1527
   804                                  
   805                                  free_var_26:	; location of cddaar
   806 00000A19 [210A000000000000]      	dq .undefined_object
   807                                  .undefined_object:
   808 00000A21 05                      	db T_undefined
   809 00000A22 [3507000000000000]      	dq L_constants + 1845
   810                                  
   811                                  free_var_27:	; location of cddadr
   812 00000A2A [320A000000000000]      	dq .undefined_object
   813                                  .undefined_object:
   814 00000A32 05                      	db T_undefined
   815 00000A33 [4407000000000000]      	dq L_constants + 1860
   816                                  
   817                                  free_var_28:	; location of cddar
   818 00000A3B [430A000000000000]      	dq .undefined_object
   819                                  .undefined_object:
   820 00000A43 05                      	db T_undefined
   821 00000A44 [6506000000000000]      	dq L_constants + 1637
   822                                  
   823                                  free_var_29:	; location of cdddar
   824 00000A4C [540A000000000000]      	dq .undefined_object
   825                                  .undefined_object:
   826 00000A54 05                      	db T_undefined
   827 00000A55 [5307000000000000]      	dq L_constants + 1875
   828                                  
   829                                  free_var_30:	; location of cddddr
   830 00000A5D [650A000000000000]      	dq .undefined_object
   831                                  .undefined_object:
   832 00000A65 05                      	db T_undefined
   833 00000A66 [6207000000000000]      	dq L_constants + 1890
   834                                  
   835                                  free_var_31:	; location of cdddr
   836 00000A6E [760A000000000000]      	dq .undefined_object
   837                                  .undefined_object:
   838 00000A76 05                      	db T_undefined
   839 00000A77 [7306000000000000]      	dq L_constants + 1651
   840                                  
   841                                  free_var_32:	; location of cddr
   842 00000A7F [870A000000000000]      	dq .undefined_object
   843                                  .undefined_object:
   844 00000A87 05                      	db T_undefined
   845 00000A88 [0406000000000000]      	dq L_constants + 1540
   846                                  
   847                                  free_var_33:	; location of cdr
   848 00000A90 [980A000000000000]      	dq .undefined_object
   849                                  .undefined_object:
   850 00000A98 05                      	db T_undefined
   851 00000A99 [2101000000000000]      	dq L_constants + 289
   852                                  
   853                                  free_var_34:	; location of cons
   854 00000AA1 [A90A000000000000]      	dq .undefined_object
   855                                  .undefined_object:
   856 00000AA9 05                      	db T_undefined
   857 00000AAA [DF00000000000000]      	dq L_constants + 223
   858                                  
   859                                  free_var_35:	; location of fold-left
   860 00000AB2 [BA0A000000000000]      	dq .undefined_object
   861                                  .undefined_object:
   862 00000ABA 05                      	db T_undefined
   863 00000ABB [1908000000000000]      	dq L_constants + 2073
   864                                  
   865                                  free_var_36:	; location of fraction?
   866 00000AC3 [CB0A000000000000]      	dq .undefined_object
   867                                  .undefined_object:
   868 00000ACB 05                      	db T_undefined
   869 00000ACC [9800000000000000]      	dq L_constants + 152
   870                                  
   871                                  free_var_37:	; location of integer?
   872 00000AD4 [DC0A000000000000]      	dq .undefined_object
   873                                  .undefined_object:
   874 00000ADC 05                      	db T_undefined
   875 00000ADD [F001000000000000]      	dq L_constants + 496
   876                                  
   877                                  free_var_38:	; location of list
   878 00000AE5 [ED0A000000000000]      	dq .undefined_object
   879                                  .undefined_object:
   880 00000AED 05                      	db T_undefined
   881 00000AEE [7F07000000000000]      	dq L_constants + 1919
   882                                  
   883                                  free_var_39:	; location of list*
   884 00000AF6 [FE0A000000000000]      	dq .undefined_object
   885                                  .undefined_object:
   886 00000AFE 05                      	db T_undefined
   887 00000AFF [AA07000000000000]      	dq L_constants + 1962
   888                                  
   889                                  free_var_40:	; location of list?
   890 00000B07 [0F0B000000000000]      	dq .undefined_object
   891                                  .undefined_object:
   892 00000B0F 05                      	db T_undefined
   893 00000B10 [7107000000000000]      	dq L_constants + 1905
   894                                  
   895                                  free_var_41:	; location of map
   896 00000B18 [200B000000000000]      	dq .undefined_object
   897                                  .undefined_object:
   898 00000B20 05                      	db T_undefined
   899 00000B21 [EE07000000000000]      	dq L_constants + 2030
   900                                  
   901                                  free_var_42:	; location of not
   902 00000B29 [310B000000000000]      	dq .undefined_object
   903                                  .undefined_object:
   904 00000B31 05                      	db T_undefined
   905 00000B32 [8C07000000000000]      	dq L_constants + 1932
   906                                  
   907                                  free_var_43:	; location of null?
   908 00000B3A [420B000000000000]      	dq .undefined_object
   909                                  .undefined_object:
   910 00000B42 05                      	db T_undefined
   911 00000B43 [0600000000000000]      	dq L_constants + 6
   912                                  
   913                                  free_var_44:	; location of ormap
   914 00000B4B [530B000000000000]      	dq .undefined_object
   915                                  .undefined_object:
   916 00000B53 05                      	db T_undefined
   917 00000B54 [E007000000000000]      	dq L_constants + 2016
   918                                  
   919                                  free_var_45:	; location of pair?
   920 00000B5C [640B000000000000]      	dq .undefined_object
   921                                  .undefined_object:
   922 00000B64 05                      	db T_undefined
   923 00000B65 [1400000000000000]      	dq L_constants + 20
   924                                  
   925                                  free_var_46:	; location of rational?
   926 00000B6D [750B000000000000]      	dq .undefined_object
   927                                  .undefined_object:
   928 00000B75 05                      	db T_undefined
   929 00000B76 [9807000000000000]      	dq L_constants + 1944
   930                                  
   931                                  free_var_47:	; location of reverse
   932 00000B7E [860B000000000000]      	dq .undefined_object
   933                                  .undefined_object:
   934 00000B86 05                      	db T_undefined
   935 00000B87 [0908000000000000]      	dq L_constants + 2057
   936                                  
   937                                  free_var_48:	; location of x
   938 00000B8F [970B000000000000]      	dq .undefined_object
   939                                  .undefined_object:
   940 00000B97 05                      	db T_undefined
   941 00000B98 [3A08000000000000]      	dq L_constants + 2106
   942                                  
   943                                  
   944                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
   945                                  global main
   946                                  section .text
   947                                  main:
   948 00000000 C8000000                        enter 0, 0
   949 00000004 6A00                            push 0
   950 00000006 6A00                            push 0
   951 00000008 68[925F0000]                    push Lend
   952 0000000D C8000000                        enter 0, 0
   953                                  	; building closure for null?
   954 00000011 48BF-                   	mov rdi, free_var_43
   954 00000013 [3A0B000000000000] 
   955 0000001B 48BE-                   	mov rsi, L_code_ptr_is_null
   955 0000001D [316B000000000000] 
   956 00000025 E803690000              	call bind_primitive
   957                                  
   958                                  	; building closure for pair?
   959 0000002A 48BF-                   	mov rdi, free_var_45
   959 0000002C [5C0B000000000000] 
   960 00000034 48BE-                   	mov rsi, L_code_ptr_is_pair
   960 00000036 [636B000000000000] 
   961 0000003E E8EA680000              	call bind_primitive
   962                                  
   963                                  	; building closure for fraction?
   964 00000043 48BF-                   	mov rdi, free_var_36
   964 00000045 [C30A000000000000] 
   965 0000004D 48BE-                   	mov rsi, L_code_ptr_is_fraction
   965 0000004F [8D6D000000000000] 
   966 00000057 E8D1680000              	call bind_primitive
   967                                  
   968                                  	; building closure for cons
   969 0000005C 48BF-                   	mov rdi, free_var_34
   969 0000005E [A10A000000000000] 
   970 00000066 48BE-                   	mov rsi, L_code_ptr_cons
   970 00000068 [C36E000000000000] 
   971 00000070 E8B8680000              	call bind_primitive
   972                                  
   973                                  	; building closure for car
   974 00000075 48BF-                   	mov rdi, free_var_18
   974 00000077 [9109000000000000] 
   975 0000007F 48BE-                   	mov rsi, L_code_ptr_car
   975 00000081 [6C6F000000000000] 
   976 00000089 E89F680000              	call bind_primitive
   977                                  
   978                                  	; building closure for cdr
   979 0000008E 48BF-                   	mov rdi, free_var_33
   979 00000090 [900A000000000000] 
   980 00000098 48BE-                   	mov rsi, L_code_ptr_cdr
   980 0000009A [906F000000000000] 
   981 000000A2 E886680000              	call bind_primitive
   982                                  
   983                                  	; building closure for integer?
   984 000000A7 48BF-                   	mov rdi, free_var_37
   984 000000A9 [D40A000000000000] 
   985 000000B1 48BE-                   	mov rsi, L_code_ptr_is_integer
   985 000000B3 [F571000000000000] 
   986 000000BB E86D680000              	call bind_primitive
   987                                  
   988                                  	; building closure for __bin-apply
   989 000000C0 48BF-                   	mov rdi, free_var_0
   989 000000C2 [5F08000000000000] 
   990 000000CA 48BE-                   	mov rsi, L_code_ptr_bin_apply
   990 000000CC [9D6A000000000000] 
   991 000000D4 E854680000              	call bind_primitive
   992                                  
   993 000000D9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   994 000000DE E81A600000              	call malloc
   995 000000E3 50                      	push rax
   996 000000E4 BF00000000              	mov rdi, 8 * 0	; new rib
   997 000000E9 E80F600000              	call malloc
   998 000000EE 50                      	push rax
   999 000000EF BF08000000              	mov rdi, 8 * 1	; extended env
  1000 000000F4 E804600000              	call malloc
  1001 000000F9 488B7D10                	mov rdi, ENV
  1002 000000FD BE00000000              	mov rsi, 0
  1003 00000102 BA01000000              	mov rdx, 1
  1004                                  .L_lambda_simple_env_loop_0001:	; ext_env[i + 1] <-- env[i]
  1005 00000107 4883FE00                	cmp rsi, 0
  1006 0000010B 7410                    	je .L_lambda_simple_env_end_0001
  1007 0000010D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1008 00000111 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1009 00000115 48FFC6                  	inc rsi
  1010 00000118 48FFC2                  	inc rdx
  1011 0000011B EBEA                    	jmp .L_lambda_simple_env_loop_0001
  1012                                  .L_lambda_simple_env_end_0001:
  1013 0000011D 5B                      	pop rbx
  1014 0000011E BE00000000              	mov rsi, 0
  1015                                  .L_lambda_simple_params_loop_0001:	; copy params
  1016 00000123 4883FE00                	cmp rsi, 0
  1017 00000127 740E                    	je .L_lambda_simple_params_end_0001
  1018 00000129 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1019 0000012E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1020 00000132 48FFC6                  	inc rsi
  1021 00000135 EBEC                    	jmp .L_lambda_simple_params_loop_0001
  1022                                  .L_lambda_simple_params_end_0001:
  1023 00000137 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1024 0000013A 4889C3                  	mov rbx, rax
  1025 0000013D 58                      	pop rax
  1026 0000013E C60004                  	mov byte [rax], T_closure
  1027 00000141 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1028 00000145 48C74009[52010000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0001
  1029 0000014D E9AA000000              	jmp .L_lambda_simple_end_0001
  1030                                  .L_lambda_simple_code_0001:	; lambda-simple body
  1031 00000152 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1032 00000158 740B                    	je .L_lambda_simple_arity_check_ok_0001
  1033 0000015A FF742410                	push qword [rsp + 8 * 2]
  1034 0000015E 6A01                    	push 1
  1035 00000160 E9515F0000              	jmp L_error_incorrect_arity_simple
  1036                                  .L_lambda_simple_arity_check_ok_0001:
  1037 00000165 C8000000                	enter 0, 0
  1038                                  	; preparing a tail-call
  1039                                  	; preparing a non-tail-call
  1040 00000169 488B4520                	mov rax, PARAM(0)	; param x
  1041 0000016D 50                      	push rax
  1042 0000016E 6A01                    	push 1	; arg count
  1043 00000170 488B0425[91090000]      	mov rax, qword [free_var_18]	; free var car
  1044 00000178 803805                  	cmp byte [rax], T_undefined
  1045 0000017B 0F844F5E0000            	je L_error_fvar_undefined
  1046 00000181 803804                  	cmp byte [rax], T_closure
  1047 00000184 0F85CA5E0000            	jne L_error_non_closure
  1048 0000018A FF7001                  	push SOB_CLOSURE_ENV(rax)
  1049 0000018D FF5009                  	call SOB_CLOSURE_CODE(rax)
  1050 00000190 50                      	push rax
  1051 00000191 6A01                    	push 1	; arg count
  1052 00000193 488B0425[91090000]      	mov rax, qword [free_var_18]	; free var car
  1053 0000019B 803805                  	cmp byte [rax], T_undefined
  1054 0000019E 0F842C5E0000            	je L_error_fvar_undefined
  1055 000001A4 803804                  	cmp byte [rax], T_closure
  1056 000001A7 0F85A75E0000            	jne L_error_non_closure
  1057 000001AD FF7001                  	push SOB_CLOSURE_ENV(rax)
  1058 000001B0 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1059 000001B3 FF7500                  	push qword[rbp]
  1060 000001B6 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  1061 000001B9 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  1062 000001BD 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  1063 000001C1 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  1064 000001C5 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  1065 000001C8 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  1066 000001CB 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  1067 000001D0 4983C103                	add r9, 3 	 ;for getting to the params
  1068 000001D4 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  1069 000001D8 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  1070                                  .L_tc_recycle_frame_loop_0001:
  1071 000001DB 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  1072 000001DE 7410                    	je .L_tc_recycle_frame_done_0001
  1073 000001E0 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  1074 000001E3 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  1075 000001E6 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  1076 000001EA 4983E808                	sub r8, 8	 ;move the top of the stack one down
  1077 000001EE EBEB                    	jmp .L_tc_recycle_frame_loop_0001
  1078                                  .L_tc_recycle_frame_done_0001:
  1079 000001F0 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  1080 000001F1 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  1081 000001F5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1082 000001F8 C9                      	leave
  1083 000001F9 C21800                  	ret AND_KILL_FRAME(1)
  1084                                  .L_lambda_simple_end_0001:	; new closure is in rax
  1085 000001FC 48890425[09090000]      	mov qword [free_var_10], rax
  1086 00000204 48B8-                   	mov rax, sob_void
  1086 00000206 [0000000000000000] 
  1087                                  
  1088 0000020E 4889C7                  	mov rdi, rax
  1089 00000211 E83C610000              	call print_sexpr_if_not_void
  1090 00000216 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1091 0000021B E8DD5E0000              	call malloc
  1092 00000220 50                      	push rax
  1093 00000221 BF00000000              	mov rdi, 8 * 0	; new rib
  1094 00000226 E8D25E0000              	call malloc
  1095 0000022B 50                      	push rax
  1096 0000022C BF08000000              	mov rdi, 8 * 1	; extended env
  1097 00000231 E8C75E0000              	call malloc
  1098 00000236 488B7D10                	mov rdi, ENV
  1099 0000023A BE00000000              	mov rsi, 0
  1100 0000023F BA01000000              	mov rdx, 1
  1101                                  .L_lambda_simple_env_loop_0002:	; ext_env[i + 1] <-- env[i]
  1102 00000244 4883FE00                	cmp rsi, 0
  1103 00000248 7410                    	je .L_lambda_simple_env_end_0002
  1104 0000024A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1105 0000024E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1106 00000252 48FFC6                  	inc rsi
  1107 00000255 48FFC2                  	inc rdx
  1108 00000258 EBEA                    	jmp .L_lambda_simple_env_loop_0002
  1109                                  .L_lambda_simple_env_end_0002:
  1110 0000025A 5B                      	pop rbx
  1111 0000025B BE00000000              	mov rsi, 0
  1112                                  .L_lambda_simple_params_loop_0002:	; copy params
  1113 00000260 4883FE00                	cmp rsi, 0
  1114 00000264 740E                    	je .L_lambda_simple_params_end_0002
  1115 00000266 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1116 0000026B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1117 0000026F 48FFC6                  	inc rsi
  1118 00000272 EBEC                    	jmp .L_lambda_simple_params_loop_0002
  1119                                  .L_lambda_simple_params_end_0002:
  1120 00000274 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1121 00000277 4889C3                  	mov rbx, rax
  1122 0000027A 58                      	pop rax
  1123 0000027B C60004                  	mov byte [rax], T_closure
  1124 0000027E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1125 00000282 48C74009[8F020000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0002
  1126 0000028A E9AA000000              	jmp .L_lambda_simple_end_0002
  1127                                  .L_lambda_simple_code_0002:	; lambda-simple body
  1128 0000028F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1129 00000295 740B                    	je .L_lambda_simple_arity_check_ok_0002
  1130 00000297 FF742410                	push qword [rsp + 8 * 2]
  1131 0000029B 6A01                    	push 1
  1132 0000029D E9145E0000              	jmp L_error_incorrect_arity_simple
  1133                                  .L_lambda_simple_arity_check_ok_0002:
  1134 000002A2 C8000000                	enter 0, 0
  1135                                  	; preparing a tail-call
  1136                                  	; preparing a non-tail-call
  1137 000002A6 488B4520                	mov rax, PARAM(0)	; param x
  1138 000002AA 50                      	push rax
  1139 000002AB 6A01                    	push 1	; arg count
  1140 000002AD 488B0425[900A0000]      	mov rax, qword [free_var_33]	; free var cdr
  1141 000002B5 803805                  	cmp byte [rax], T_undefined
  1142 000002B8 0F84125D0000            	je L_error_fvar_undefined
  1143 000002BE 803804                  	cmp byte [rax], T_closure
  1144 000002C1 0F858D5D0000            	jne L_error_non_closure
  1145 000002C7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1146 000002CA FF5009                  	call SOB_CLOSURE_CODE(rax)
  1147 000002CD 50                      	push rax
  1148 000002CE 6A01                    	push 1	; arg count
  1149 000002D0 488B0425[91090000]      	mov rax, qword [free_var_18]	; free var car
  1150 000002D8 803805                  	cmp byte [rax], T_undefined
  1151 000002DB 0F84EF5C0000            	je L_error_fvar_undefined
  1152 000002E1 803804                  	cmp byte [rax], T_closure
  1153 000002E4 0F856A5D0000            	jne L_error_non_closure
  1154 000002EA FF7001                  	push SOB_CLOSURE_ENV(rax)
  1155 000002ED FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1156 000002F0 FF7500                  	push qword[rbp]
  1157 000002F3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  1158 000002F6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  1159 000002FA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  1160 000002FE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  1161 00000302 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  1162 00000305 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  1163 00000308 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  1164 0000030D 4983C103                	add r9, 3 	 ;for getting to the params
  1165 00000311 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  1166 00000315 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  1167                                  .L_tc_recycle_frame_loop_0002:
  1168 00000318 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  1169 0000031B 7410                    	je .L_tc_recycle_frame_done_0002
  1170 0000031D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  1171 00000320 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  1172 00000323 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  1173 00000327 4983E808                	sub r8, 8	 ;move the top of the stack one down
  1174 0000032B EBEB                    	jmp .L_tc_recycle_frame_loop_0002
  1175                                  .L_tc_recycle_frame_done_0002:
  1176 0000032D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  1177 0000032E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  1178 00000332 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1179 00000335 C9                      	leave
  1180 00000336 C21800                  	ret AND_KILL_FRAME(1)
  1181                                  .L_lambda_simple_end_0002:	; new closure is in rax
  1182 00000339 48890425[80090000]      	mov qword [free_var_17], rax
  1183 00000341 48B8-                   	mov rax, sob_void
  1183 00000343 [0000000000000000] 
  1184                                  
  1185 0000034B 4889C7                  	mov rdi, rax
  1186 0000034E E8FF5F0000              	call print_sexpr_if_not_void
  1187 00000353 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1188 00000358 E8A05D0000              	call malloc
  1189 0000035D 50                      	push rax
  1190 0000035E BF00000000              	mov rdi, 8 * 0	; new rib
  1191 00000363 E8955D0000              	call malloc
  1192 00000368 50                      	push rax
  1193 00000369 BF08000000              	mov rdi, 8 * 1	; extended env
  1194 0000036E E88A5D0000              	call malloc
  1195 00000373 488B7D10                	mov rdi, ENV
  1196 00000377 BE00000000              	mov rsi, 0
  1197 0000037C BA01000000              	mov rdx, 1
  1198                                  .L_lambda_simple_env_loop_0003:	; ext_env[i + 1] <-- env[i]
  1199 00000381 4883FE00                	cmp rsi, 0
  1200 00000385 7410                    	je .L_lambda_simple_env_end_0003
  1201 00000387 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1202 0000038B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1203 0000038F 48FFC6                  	inc rsi
  1204 00000392 48FFC2                  	inc rdx
  1205 00000395 EBEA                    	jmp .L_lambda_simple_env_loop_0003
  1206                                  .L_lambda_simple_env_end_0003:
  1207 00000397 5B                      	pop rbx
  1208 00000398 BE00000000              	mov rsi, 0
  1209                                  .L_lambda_simple_params_loop_0003:	; copy params
  1210 0000039D 4883FE00                	cmp rsi, 0
  1211 000003A1 740E                    	je .L_lambda_simple_params_end_0003
  1212 000003A3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1213 000003A8 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1214 000003AC 48FFC6                  	inc rsi
  1215 000003AF EBEC                    	jmp .L_lambda_simple_params_loop_0003
  1216                                  .L_lambda_simple_params_end_0003:
  1217 000003B1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1218 000003B4 4889C3                  	mov rbx, rax
  1219 000003B7 58                      	pop rax
  1220 000003B8 C60004                  	mov byte [rax], T_closure
  1221 000003BB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1222 000003BF 48C74009[CC030000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0003
  1223 000003C7 E9AA000000              	jmp .L_lambda_simple_end_0003
  1224                                  .L_lambda_simple_code_0003:	; lambda-simple body
  1225 000003CC 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1226 000003D2 740B                    	je .L_lambda_simple_arity_check_ok_0003
  1227 000003D4 FF742410                	push qword [rsp + 8 * 2]
  1228 000003D8 6A01                    	push 1
  1229 000003DA E9D75C0000              	jmp L_error_incorrect_arity_simple
  1230                                  .L_lambda_simple_arity_check_ok_0003:
  1231 000003DF C8000000                	enter 0, 0
  1232                                  	; preparing a tail-call
  1233                                  	; preparing a non-tail-call
  1234 000003E3 488B4520                	mov rax, PARAM(0)	; param x
  1235 000003E7 50                      	push rax
  1236 000003E8 6A01                    	push 1	; arg count
  1237 000003EA 488B0425[91090000]      	mov rax, qword [free_var_18]	; free var car
  1238 000003F2 803805                  	cmp byte [rax], T_undefined
  1239 000003F5 0F84D55B0000            	je L_error_fvar_undefined
  1240 000003FB 803804                  	cmp byte [rax], T_closure
  1241 000003FE 0F85505C0000            	jne L_error_non_closure
  1242 00000404 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1243 00000407 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1244 0000040A 50                      	push rax
  1245 0000040B 6A01                    	push 1	; arg count
  1246 0000040D 488B0425[900A0000]      	mov rax, qword [free_var_33]	; free var cdr
  1247 00000415 803805                  	cmp byte [rax], T_undefined
  1248 00000418 0F84B25B0000            	je L_error_fvar_undefined
  1249 0000041E 803804                  	cmp byte [rax], T_closure
  1250 00000421 0F852D5C0000            	jne L_error_non_closure
  1251 00000427 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1252 0000042A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1253 0000042D FF7500                  	push qword[rbp]
  1254 00000430 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  1255 00000433 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  1256 00000437 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  1257 0000043B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  1258 0000043F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  1259 00000442 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  1260 00000445 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  1261 0000044A 4983C103                	add r9, 3 	 ;for getting to the params
  1262 0000044E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  1263 00000452 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  1264                                  .L_tc_recycle_frame_loop_0003:
  1265 00000455 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  1266 00000458 7410                    	je .L_tc_recycle_frame_done_0003
  1267 0000045A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  1268 0000045D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  1269 00000460 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  1270 00000464 4983E808                	sub r8, 8	 ;move the top of the stack one down
  1271 00000468 EBEB                    	jmp .L_tc_recycle_frame_loop_0003
  1272                                  .L_tc_recycle_frame_done_0003:
  1273 0000046A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  1274 0000046B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  1275 0000046F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1276 00000472 C9                      	leave
  1277 00000473 C21800                  	ret AND_KILL_FRAME(1)
  1278                                  .L_lambda_simple_end_0003:	; new closure is in rax
  1279 00000476 48890425[080A0000]      	mov qword [free_var_25], rax
  1280 0000047E 48B8-                   	mov rax, sob_void
  1280 00000480 [0000000000000000] 
  1281                                  
  1282 00000488 4889C7                  	mov rdi, rax
  1283 0000048B E8C25E0000              	call print_sexpr_if_not_void
  1284 00000490 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1285 00000495 E8635C0000              	call malloc
  1286 0000049A 50                      	push rax
  1287 0000049B BF00000000              	mov rdi, 8 * 0	; new rib
  1288 000004A0 E8585C0000              	call malloc
  1289 000004A5 50                      	push rax
  1290 000004A6 BF08000000              	mov rdi, 8 * 1	; extended env
  1291 000004AB E84D5C0000              	call malloc
  1292 000004B0 488B7D10                	mov rdi, ENV
  1293 000004B4 BE00000000              	mov rsi, 0
  1294 000004B9 BA01000000              	mov rdx, 1
  1295                                  .L_lambda_simple_env_loop_0004:	; ext_env[i + 1] <-- env[i]
  1296 000004BE 4883FE00                	cmp rsi, 0
  1297 000004C2 7410                    	je .L_lambda_simple_env_end_0004
  1298 000004C4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1299 000004C8 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1300 000004CC 48FFC6                  	inc rsi
  1301 000004CF 48FFC2                  	inc rdx
  1302 000004D2 EBEA                    	jmp .L_lambda_simple_env_loop_0004
  1303                                  .L_lambda_simple_env_end_0004:
  1304 000004D4 5B                      	pop rbx
  1305 000004D5 BE00000000              	mov rsi, 0
  1306                                  .L_lambda_simple_params_loop_0004:	; copy params
  1307 000004DA 4883FE00                	cmp rsi, 0
  1308 000004DE 740E                    	je .L_lambda_simple_params_end_0004
  1309 000004E0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1310 000004E5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1311 000004E9 48FFC6                  	inc rsi
  1312 000004EC EBEC                    	jmp .L_lambda_simple_params_loop_0004
  1313                                  .L_lambda_simple_params_end_0004:
  1314 000004EE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1315 000004F1 4889C3                  	mov rbx, rax
  1316 000004F4 58                      	pop rax
  1317 000004F5 C60004                  	mov byte [rax], T_closure
  1318 000004F8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1319 000004FC 48C74009[09050000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0004
  1320 00000504 E9AA000000              	jmp .L_lambda_simple_end_0004
  1321                                  .L_lambda_simple_code_0004:	; lambda-simple body
  1322 00000509 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1323 0000050F 740B                    	je .L_lambda_simple_arity_check_ok_0004
  1324 00000511 FF742410                	push qword [rsp + 8 * 2]
  1325 00000515 6A01                    	push 1
  1326 00000517 E99A5B0000              	jmp L_error_incorrect_arity_simple
  1327                                  .L_lambda_simple_arity_check_ok_0004:
  1328 0000051C C8000000                	enter 0, 0
  1329                                  	; preparing a tail-call
  1330                                  	; preparing a non-tail-call
  1331 00000520 488B4520                	mov rax, PARAM(0)	; param x
  1332 00000524 50                      	push rax
  1333 00000525 6A01                    	push 1	; arg count
  1334 00000527 488B0425[900A0000]      	mov rax, qword [free_var_33]	; free var cdr
  1335 0000052F 803805                  	cmp byte [rax], T_undefined
  1336 00000532 0F84985A0000            	je L_error_fvar_undefined
  1337 00000538 803804                  	cmp byte [rax], T_closure
  1338 0000053B 0F85135B0000            	jne L_error_non_closure
  1339 00000541 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1340 00000544 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1341 00000547 50                      	push rax
  1342 00000548 6A01                    	push 1	; arg count
  1343 0000054A 488B0425[900A0000]      	mov rax, qword [free_var_33]	; free var cdr
  1344 00000552 803805                  	cmp byte [rax], T_undefined
  1345 00000555 0F84755A0000            	je L_error_fvar_undefined
  1346 0000055B 803804                  	cmp byte [rax], T_closure
  1347 0000055E 0F85F05A0000            	jne L_error_non_closure
  1348 00000564 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1349 00000567 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1350 0000056A FF7500                  	push qword[rbp]
  1351 0000056D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  1352 00000570 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  1353 00000574 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  1354 00000578 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  1355 0000057C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  1356 0000057F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  1357 00000582 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  1358 00000587 4983C103                	add r9, 3 	 ;for getting to the params
  1359 0000058B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  1360 0000058F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  1361                                  .L_tc_recycle_frame_loop_0004:
  1362 00000592 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  1363 00000595 7410                    	je .L_tc_recycle_frame_done_0004
  1364 00000597 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  1365 0000059A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  1366 0000059D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  1367 000005A1 4983E808                	sub r8, 8	 ;move the top of the stack one down
  1368 000005A5 EBEB                    	jmp .L_tc_recycle_frame_loop_0004
  1369                                  .L_tc_recycle_frame_done_0004:
  1370 000005A7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  1371 000005A8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  1372 000005AC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1373 000005AF C9                      	leave
  1374 000005B0 C21800                  	ret AND_KILL_FRAME(1)
  1375                                  .L_lambda_simple_end_0004:	; new closure is in rax
  1376 000005B3 48890425[7F0A0000]      	mov qword [free_var_32], rax
  1377 000005BB 48B8-                   	mov rax, sob_void
  1377 000005BD [0000000000000000] 
  1378                                  
  1379 000005C5 4889C7                  	mov rdi, rax
  1380 000005C8 E8855D0000              	call print_sexpr_if_not_void
  1381 000005CD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1382 000005D2 E8265B0000              	call malloc
  1383 000005D7 50                      	push rax
  1384 000005D8 BF00000000              	mov rdi, 8 * 0	; new rib
  1385 000005DD E81B5B0000              	call malloc
  1386 000005E2 50                      	push rax
  1387 000005E3 BF08000000              	mov rdi, 8 * 1	; extended env
  1388 000005E8 E8105B0000              	call malloc
  1389 000005ED 488B7D10                	mov rdi, ENV
  1390 000005F1 BE00000000              	mov rsi, 0
  1391 000005F6 BA01000000              	mov rdx, 1
  1392                                  .L_lambda_simple_env_loop_0005:	; ext_env[i + 1] <-- env[i]
  1393 000005FB 4883FE00                	cmp rsi, 0
  1394 000005FF 7410                    	je .L_lambda_simple_env_end_0005
  1395 00000601 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1396 00000605 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1397 00000609 48FFC6                  	inc rsi
  1398 0000060C 48FFC2                  	inc rdx
  1399 0000060F EBEA                    	jmp .L_lambda_simple_env_loop_0005
  1400                                  .L_lambda_simple_env_end_0005:
  1401 00000611 5B                      	pop rbx
  1402 00000612 BE00000000              	mov rsi, 0
  1403                                  .L_lambda_simple_params_loop_0005:	; copy params
  1404 00000617 4883FE00                	cmp rsi, 0
  1405 0000061B 740E                    	je .L_lambda_simple_params_end_0005
  1406 0000061D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1407 00000622 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1408 00000626 48FFC6                  	inc rsi
  1409 00000629 EBEC                    	jmp .L_lambda_simple_params_loop_0005
  1410                                  .L_lambda_simple_params_end_0005:
  1411 0000062B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1412 0000062E 4889C3                  	mov rbx, rax
  1413 00000631 58                      	pop rax
  1414 00000632 C60004                  	mov byte [rax], T_closure
  1415 00000635 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1416 00000639 48C74009[46060000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0005
  1417 00000641 E9AA000000              	jmp .L_lambda_simple_end_0005
  1418                                  .L_lambda_simple_code_0005:	; lambda-simple body
  1419 00000646 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1420 0000064C 740B                    	je .L_lambda_simple_arity_check_ok_0005
  1421 0000064E FF742410                	push qword [rsp + 8 * 2]
  1422 00000652 6A01                    	push 1
  1423 00000654 E95D5A0000              	jmp L_error_incorrect_arity_simple
  1424                                  .L_lambda_simple_arity_check_ok_0005:
  1425 00000659 C8000000                	enter 0, 0
  1426                                  	; preparing a tail-call
  1427                                  	; preparing a non-tail-call
  1428 0000065D 488B4520                	mov rax, PARAM(0)	; param x
  1429 00000661 50                      	push rax
  1430 00000662 6A01                    	push 1	; arg count
  1431 00000664 488B0425[09090000]      	mov rax, qword [free_var_10]	; free var caar
  1432 0000066C 803805                  	cmp byte [rax], T_undefined
  1433 0000066F 0F845B590000            	je L_error_fvar_undefined
  1434 00000675 803804                  	cmp byte [rax], T_closure
  1435 00000678 0F85D6590000            	jne L_error_non_closure
  1436 0000067E FF7001                  	push SOB_CLOSURE_ENV(rax)
  1437 00000681 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1438 00000684 50                      	push rax
  1439 00000685 6A01                    	push 1	; arg count
  1440 00000687 488B0425[91090000]      	mov rax, qword [free_var_18]	; free var car
  1441 0000068F 803805                  	cmp byte [rax], T_undefined
  1442 00000692 0F8438590000            	je L_error_fvar_undefined
  1443 00000698 803804                  	cmp byte [rax], T_closure
  1444 0000069B 0F85B3590000            	jne L_error_non_closure
  1445 000006A1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1446 000006A4 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1447 000006A7 FF7500                  	push qword[rbp]
  1448 000006AA 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  1449 000006AD 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  1450 000006B1 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  1451 000006B5 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  1452 000006B9 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  1453 000006BC 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  1454 000006BF 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  1455 000006C4 4983C103                	add r9, 3 	 ;for getting to the params
  1456 000006C8 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  1457 000006CC 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  1458                                  .L_tc_recycle_frame_loop_0005:
  1459 000006CF 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  1460 000006D2 7410                    	je .L_tc_recycle_frame_done_0005
  1461 000006D4 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  1462 000006D7 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  1463 000006DA 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  1464 000006DE 4983E808                	sub r8, 8	 ;move the top of the stack one down
  1465 000006E2 EBEB                    	jmp .L_tc_recycle_frame_loop_0005
  1466                                  .L_tc_recycle_frame_done_0005:
  1467 000006E4 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  1468 000006E5 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  1469 000006E9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1470 000006EC C9                      	leave
  1471 000006ED C21800                  	ret AND_KILL_FRAME(1)
  1472                                  .L_lambda_simple_end_0005:	; new closure is in rax
  1473 000006F0 48890425[C5080000]      	mov qword [free_var_6], rax
  1474 000006F8 48B8-                   	mov rax, sob_void
  1474 000006FA [0000000000000000] 
  1475                                  
  1476 00000702 4889C7                  	mov rdi, rax
  1477 00000705 E8485C0000              	call print_sexpr_if_not_void
  1478 0000070A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1479 0000070F E8E9590000              	call malloc
  1480 00000714 50                      	push rax
  1481 00000715 BF00000000              	mov rdi, 8 * 0	; new rib
  1482 0000071A E8DE590000              	call malloc
  1483 0000071F 50                      	push rax
  1484 00000720 BF08000000              	mov rdi, 8 * 1	; extended env
  1485 00000725 E8D3590000              	call malloc
  1486 0000072A 488B7D10                	mov rdi, ENV
  1487 0000072E BE00000000              	mov rsi, 0
  1488 00000733 BA01000000              	mov rdx, 1
  1489                                  .L_lambda_simple_env_loop_0006:	; ext_env[i + 1] <-- env[i]
  1490 00000738 4883FE00                	cmp rsi, 0
  1491 0000073C 7410                    	je .L_lambda_simple_env_end_0006
  1492 0000073E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1493 00000742 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1494 00000746 48FFC6                  	inc rsi
  1495 00000749 48FFC2                  	inc rdx
  1496 0000074C EBEA                    	jmp .L_lambda_simple_env_loop_0006
  1497                                  .L_lambda_simple_env_end_0006:
  1498 0000074E 5B                      	pop rbx
  1499 0000074F BE00000000              	mov rsi, 0
  1500                                  .L_lambda_simple_params_loop_0006:	; copy params
  1501 00000754 4883FE00                	cmp rsi, 0
  1502 00000758 740E                    	je .L_lambda_simple_params_end_0006
  1503 0000075A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1504 0000075F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1505 00000763 48FFC6                  	inc rsi
  1506 00000766 EBEC                    	jmp .L_lambda_simple_params_loop_0006
  1507                                  .L_lambda_simple_params_end_0006:
  1508 00000768 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1509 0000076B 4889C3                  	mov rbx, rax
  1510 0000076E 58                      	pop rax
  1511 0000076F C60004                  	mov byte [rax], T_closure
  1512 00000772 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1513 00000776 48C74009[83070000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0006
  1514 0000077E E9AA000000              	jmp .L_lambda_simple_end_0006
  1515                                  .L_lambda_simple_code_0006:	; lambda-simple body
  1516 00000783 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1517 00000789 740B                    	je .L_lambda_simple_arity_check_ok_0006
  1518 0000078B FF742410                	push qword [rsp + 8 * 2]
  1519 0000078F 6A01                    	push 1
  1520 00000791 E920590000              	jmp L_error_incorrect_arity_simple
  1521                                  .L_lambda_simple_arity_check_ok_0006:
  1522 00000796 C8000000                	enter 0, 0
  1523                                  	; preparing a tail-call
  1524                                  	; preparing a non-tail-call
  1525 0000079A 488B4520                	mov rax, PARAM(0)	; param x
  1526 0000079E 50                      	push rax
  1527 0000079F 6A01                    	push 1	; arg count
  1528 000007A1 488B0425[80090000]      	mov rax, qword [free_var_17]	; free var cadr
  1529 000007A9 803805                  	cmp byte [rax], T_undefined
  1530 000007AC 0F841E580000            	je L_error_fvar_undefined
  1531 000007B2 803804                  	cmp byte [rax], T_closure
  1532 000007B5 0F8599580000            	jne L_error_non_closure
  1533 000007BB FF7001                  	push SOB_CLOSURE_ENV(rax)
  1534 000007BE FF5009                  	call SOB_CLOSURE_CODE(rax)
  1535 000007C1 50                      	push rax
  1536 000007C2 6A01                    	push 1	; arg count
  1537 000007C4 488B0425[91090000]      	mov rax, qword [free_var_18]	; free var car
  1538 000007CC 803805                  	cmp byte [rax], T_undefined
  1539 000007CF 0F84FB570000            	je L_error_fvar_undefined
  1540 000007D5 803804                  	cmp byte [rax], T_closure
  1541 000007D8 0F8576580000            	jne L_error_non_closure
  1542 000007DE FF7001                  	push SOB_CLOSURE_ENV(rax)
  1543 000007E1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1544 000007E4 FF7500                  	push qword[rbp]
  1545 000007E7 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  1546 000007EA 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  1547 000007EE 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  1548 000007F2 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  1549 000007F6 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  1550 000007F9 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  1551 000007FC 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  1552 00000801 4983C103                	add r9, 3 	 ;for getting to the params
  1553 00000805 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  1554 00000809 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  1555                                  .L_tc_recycle_frame_loop_0006:
  1556 0000080C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  1557 0000080F 7410                    	je .L_tc_recycle_frame_done_0006
  1558 00000811 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  1559 00000814 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  1560 00000817 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  1561 0000081B 4983E808                	sub r8, 8	 ;move the top of the stack one down
  1562 0000081F EBEB                    	jmp .L_tc_recycle_frame_loop_0006
  1563                                  .L_tc_recycle_frame_done_0006:
  1564 00000821 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  1565 00000822 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  1566 00000826 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1567 00000829 C9                      	leave
  1568 0000082A C21800                  	ret AND_KILL_FRAME(1)
  1569                                  .L_lambda_simple_end_0006:	; new closure is in rax
  1570 0000082D 48890425[F8080000]      	mov qword [free_var_9], rax
  1571 00000835 48B8-                   	mov rax, sob_void
  1571 00000837 [0000000000000000] 
  1572                                  
  1573 0000083F 4889C7                  	mov rdi, rax
  1574 00000842 E80B5B0000              	call print_sexpr_if_not_void
  1575 00000847 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1576 0000084C E8AC580000              	call malloc
  1577 00000851 50                      	push rax
  1578 00000852 BF00000000              	mov rdi, 8 * 0	; new rib
  1579 00000857 E8A1580000              	call malloc
  1580 0000085C 50                      	push rax
  1581 0000085D BF08000000              	mov rdi, 8 * 1	; extended env
  1582 00000862 E896580000              	call malloc
  1583 00000867 488B7D10                	mov rdi, ENV
  1584 0000086B BE00000000              	mov rsi, 0
  1585 00000870 BA01000000              	mov rdx, 1
  1586                                  .L_lambda_simple_env_loop_0007:	; ext_env[i + 1] <-- env[i]
  1587 00000875 4883FE00                	cmp rsi, 0
  1588 00000879 7410                    	je .L_lambda_simple_env_end_0007
  1589 0000087B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1590 0000087F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1591 00000883 48FFC6                  	inc rsi
  1592 00000886 48FFC2                  	inc rdx
  1593 00000889 EBEA                    	jmp .L_lambda_simple_env_loop_0007
  1594                                  .L_lambda_simple_env_end_0007:
  1595 0000088B 5B                      	pop rbx
  1596 0000088C BE00000000              	mov rsi, 0
  1597                                  .L_lambda_simple_params_loop_0007:	; copy params
  1598 00000891 4883FE00                	cmp rsi, 0
  1599 00000895 740E                    	je .L_lambda_simple_params_end_0007
  1600 00000897 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1601 0000089C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1602 000008A0 48FFC6                  	inc rsi
  1603 000008A3 EBEC                    	jmp .L_lambda_simple_params_loop_0007
  1604                                  .L_lambda_simple_params_end_0007:
  1605 000008A5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1606 000008A8 4889C3                  	mov rbx, rax
  1607 000008AB 58                      	pop rax
  1608 000008AC C60004                  	mov byte [rax], T_closure
  1609 000008AF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1610 000008B3 48C74009[C0080000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0007
  1611 000008BB E9AA000000              	jmp .L_lambda_simple_end_0007
  1612                                  .L_lambda_simple_code_0007:	; lambda-simple body
  1613 000008C0 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1614 000008C6 740B                    	je .L_lambda_simple_arity_check_ok_0007
  1615 000008C8 FF742410                	push qword [rsp + 8 * 2]
  1616 000008CC 6A01                    	push 1
  1617 000008CE E9E3570000              	jmp L_error_incorrect_arity_simple
  1618                                  .L_lambda_simple_arity_check_ok_0007:
  1619 000008D3 C8000000                	enter 0, 0
  1620                                  	; preparing a tail-call
  1621                                  	; preparing a non-tail-call
  1622 000008D7 488B4520                	mov rax, PARAM(0)	; param x
  1623 000008DB 50                      	push rax
  1624 000008DC 6A01                    	push 1	; arg count
  1625 000008DE 488B0425[080A0000]      	mov rax, qword [free_var_25]	; free var cdar
  1626 000008E6 803805                  	cmp byte [rax], T_undefined
  1627 000008E9 0F84E1560000            	je L_error_fvar_undefined
  1628 000008EF 803804                  	cmp byte [rax], T_closure
  1629 000008F2 0F855C570000            	jne L_error_non_closure
  1630 000008F8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1631 000008FB FF5009                  	call SOB_CLOSURE_CODE(rax)
  1632 000008FE 50                      	push rax
  1633 000008FF 6A01                    	push 1	; arg count
  1634 00000901 488B0425[91090000]      	mov rax, qword [free_var_18]	; free var car
  1635 00000909 803805                  	cmp byte [rax], T_undefined
  1636 0000090C 0F84BE560000            	je L_error_fvar_undefined
  1637 00000912 803804                  	cmp byte [rax], T_closure
  1638 00000915 0F8539570000            	jne L_error_non_closure
  1639 0000091B FF7001                  	push SOB_CLOSURE_ENV(rax)
  1640 0000091E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1641 00000921 FF7500                  	push qword[rbp]
  1642 00000924 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  1643 00000927 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  1644 0000092B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  1645 0000092F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  1646 00000933 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  1647 00000936 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  1648 00000939 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  1649 0000093E 4983C103                	add r9, 3 	 ;for getting to the params
  1650 00000942 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  1651 00000946 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  1652                                  .L_tc_recycle_frame_loop_0007:
  1653 00000949 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  1654 0000094C 7410                    	je .L_tc_recycle_frame_done_0007
  1655 0000094E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  1656 00000951 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  1657 00000954 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  1658 00000958 4983E808                	sub r8, 8	 ;move the top of the stack one down
  1659 0000095C EBEB                    	jmp .L_tc_recycle_frame_loop_0007
  1660                                  .L_tc_recycle_frame_done_0007:
  1661 0000095E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  1662 0000095F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  1663 00000963 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1664 00000966 C9                      	leave
  1665 00000967 C21800                  	ret AND_KILL_FRAME(1)
  1666                                  .L_lambda_simple_end_0007:	; new closure is in rax
  1667 0000096A 48890425[3C090000]      	mov qword [free_var_13], rax
  1668 00000972 48B8-                   	mov rax, sob_void
  1668 00000974 [0000000000000000] 
  1669                                  
  1670 0000097C 4889C7                  	mov rdi, rax
  1671 0000097F E8CE590000              	call print_sexpr_if_not_void
  1672 00000984 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1673 00000989 E86F570000              	call malloc
  1674 0000098E 50                      	push rax
  1675 0000098F BF00000000              	mov rdi, 8 * 0	; new rib
  1676 00000994 E864570000              	call malloc
  1677 00000999 50                      	push rax
  1678 0000099A BF08000000              	mov rdi, 8 * 1	; extended env
  1679 0000099F E859570000              	call malloc
  1680 000009A4 488B7D10                	mov rdi, ENV
  1681 000009A8 BE00000000              	mov rsi, 0
  1682 000009AD BA01000000              	mov rdx, 1
  1683                                  .L_lambda_simple_env_loop_0008:	; ext_env[i + 1] <-- env[i]
  1684 000009B2 4883FE00                	cmp rsi, 0
  1685 000009B6 7410                    	je .L_lambda_simple_env_end_0008
  1686 000009B8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1687 000009BC 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1688 000009C0 48FFC6                  	inc rsi
  1689 000009C3 48FFC2                  	inc rdx
  1690 000009C6 EBEA                    	jmp .L_lambda_simple_env_loop_0008
  1691                                  .L_lambda_simple_env_end_0008:
  1692 000009C8 5B                      	pop rbx
  1693 000009C9 BE00000000              	mov rsi, 0
  1694                                  .L_lambda_simple_params_loop_0008:	; copy params
  1695 000009CE 4883FE00                	cmp rsi, 0
  1696 000009D2 740E                    	je .L_lambda_simple_params_end_0008
  1697 000009D4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1698 000009D9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1699 000009DD 48FFC6                  	inc rsi
  1700 000009E0 EBEC                    	jmp .L_lambda_simple_params_loop_0008
  1701                                  .L_lambda_simple_params_end_0008:
  1702 000009E2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1703 000009E5 4889C3                  	mov rbx, rax
  1704 000009E8 58                      	pop rax
  1705 000009E9 C60004                  	mov byte [rax], T_closure
  1706 000009EC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1707 000009F0 48C74009[FD090000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0008
  1708 000009F8 E9AA000000              	jmp .L_lambda_simple_end_0008
  1709                                  .L_lambda_simple_code_0008:	; lambda-simple body
  1710 000009FD 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1711 00000A03 740B                    	je .L_lambda_simple_arity_check_ok_0008
  1712 00000A05 FF742410                	push qword [rsp + 8 * 2]
  1713 00000A09 6A01                    	push 1
  1714 00000A0B E9A6560000              	jmp L_error_incorrect_arity_simple
  1715                                  .L_lambda_simple_arity_check_ok_0008:
  1716 00000A10 C8000000                	enter 0, 0
  1717                                  	; preparing a tail-call
  1718                                  	; preparing a non-tail-call
  1719 00000A14 488B4520                	mov rax, PARAM(0)	; param x
  1720 00000A18 50                      	push rax
  1721 00000A19 6A01                    	push 1	; arg count
  1722 00000A1B 488B0425[7F0A0000]      	mov rax, qword [free_var_32]	; free var cddr
  1723 00000A23 803805                  	cmp byte [rax], T_undefined
  1724 00000A26 0F84A4550000            	je L_error_fvar_undefined
  1725 00000A2C 803804                  	cmp byte [rax], T_closure
  1726 00000A2F 0F851F560000            	jne L_error_non_closure
  1727 00000A35 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1728 00000A38 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1729 00000A3B 50                      	push rax
  1730 00000A3C 6A01                    	push 1	; arg count
  1731 00000A3E 488B0425[91090000]      	mov rax, qword [free_var_18]	; free var car
  1732 00000A46 803805                  	cmp byte [rax], T_undefined
  1733 00000A49 0F8481550000            	je L_error_fvar_undefined
  1734 00000A4F 803804                  	cmp byte [rax], T_closure
  1735 00000A52 0F85FC550000            	jne L_error_non_closure
  1736 00000A58 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1737 00000A5B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1738 00000A5E FF7500                  	push qword[rbp]
  1739 00000A61 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  1740 00000A64 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  1741 00000A68 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  1742 00000A6C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  1743 00000A70 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  1744 00000A73 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  1745 00000A76 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  1746 00000A7B 4983C103                	add r9, 3 	 ;for getting to the params
  1747 00000A7F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  1748 00000A83 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  1749                                  .L_tc_recycle_frame_loop_0008:
  1750 00000A86 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  1751 00000A89 7410                    	je .L_tc_recycle_frame_done_0008
  1752 00000A8B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  1753 00000A8E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  1754 00000A91 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  1755 00000A95 4983E808                	sub r8, 8	 ;move the top of the stack one down
  1756 00000A99 EBEB                    	jmp .L_tc_recycle_frame_loop_0008
  1757                                  .L_tc_recycle_frame_done_0008:
  1758 00000A9B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  1759 00000A9C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  1760 00000AA0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1761 00000AA3 C9                      	leave
  1762 00000AA4 C21800                  	ret AND_KILL_FRAME(1)
  1763                                  .L_lambda_simple_end_0008:	; new closure is in rax
  1764 00000AA7 48890425[6F090000]      	mov qword [free_var_16], rax
  1765 00000AAF 48B8-                   	mov rax, sob_void
  1765 00000AB1 [0000000000000000] 
  1766                                  
  1767 00000AB9 4889C7                  	mov rdi, rax
  1768 00000ABC E891580000              	call print_sexpr_if_not_void
  1769 00000AC1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1770 00000AC6 E832560000              	call malloc
  1771 00000ACB 50                      	push rax
  1772 00000ACC BF00000000              	mov rdi, 8 * 0	; new rib
  1773 00000AD1 E827560000              	call malloc
  1774 00000AD6 50                      	push rax
  1775 00000AD7 BF08000000              	mov rdi, 8 * 1	; extended env
  1776 00000ADC E81C560000              	call malloc
  1777 00000AE1 488B7D10                	mov rdi, ENV
  1778 00000AE5 BE00000000              	mov rsi, 0
  1779 00000AEA BA01000000              	mov rdx, 1
  1780                                  .L_lambda_simple_env_loop_0009:	; ext_env[i + 1] <-- env[i]
  1781 00000AEF 4883FE00                	cmp rsi, 0
  1782 00000AF3 7410                    	je .L_lambda_simple_env_end_0009
  1783 00000AF5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1784 00000AF9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1785 00000AFD 48FFC6                  	inc rsi
  1786 00000B00 48FFC2                  	inc rdx
  1787 00000B03 EBEA                    	jmp .L_lambda_simple_env_loop_0009
  1788                                  .L_lambda_simple_env_end_0009:
  1789 00000B05 5B                      	pop rbx
  1790 00000B06 BE00000000              	mov rsi, 0
  1791                                  .L_lambda_simple_params_loop_0009:	; copy params
  1792 00000B0B 4883FE00                	cmp rsi, 0
  1793 00000B0F 740E                    	je .L_lambda_simple_params_end_0009
  1794 00000B11 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1795 00000B16 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1796 00000B1A 48FFC6                  	inc rsi
  1797 00000B1D EBEC                    	jmp .L_lambda_simple_params_loop_0009
  1798                                  .L_lambda_simple_params_end_0009:
  1799 00000B1F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1800 00000B22 4889C3                  	mov rbx, rax
  1801 00000B25 58                      	pop rax
  1802 00000B26 C60004                  	mov byte [rax], T_closure
  1803 00000B29 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1804 00000B2D 48C74009[3A0B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0009
  1805 00000B35 E9AA000000              	jmp .L_lambda_simple_end_0009
  1806                                  .L_lambda_simple_code_0009:	; lambda-simple body
  1807 00000B3A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1808 00000B40 740B                    	je .L_lambda_simple_arity_check_ok_0009
  1809 00000B42 FF742410                	push qword [rsp + 8 * 2]
  1810 00000B46 6A01                    	push 1
  1811 00000B48 E969550000              	jmp L_error_incorrect_arity_simple
  1812                                  .L_lambda_simple_arity_check_ok_0009:
  1813 00000B4D C8000000                	enter 0, 0
  1814                                  	; preparing a tail-call
  1815                                  	; preparing a non-tail-call
  1816 00000B51 488B4520                	mov rax, PARAM(0)	; param x
  1817 00000B55 50                      	push rax
  1818 00000B56 6A01                    	push 1	; arg count
  1819 00000B58 488B0425[09090000]      	mov rax, qword [free_var_10]	; free var caar
  1820 00000B60 803805                  	cmp byte [rax], T_undefined
  1821 00000B63 0F8467540000            	je L_error_fvar_undefined
  1822 00000B69 803804                  	cmp byte [rax], T_closure
  1823 00000B6C 0F85E2540000            	jne L_error_non_closure
  1824 00000B72 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1825 00000B75 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1826 00000B78 50                      	push rax
  1827 00000B79 6A01                    	push 1	; arg count
  1828 00000B7B 488B0425[900A0000]      	mov rax, qword [free_var_33]	; free var cdr
  1829 00000B83 803805                  	cmp byte [rax], T_undefined
  1830 00000B86 0F8444540000            	je L_error_fvar_undefined
  1831 00000B8C 803804                  	cmp byte [rax], T_closure
  1832 00000B8F 0F85BF540000            	jne L_error_non_closure
  1833 00000B95 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1834 00000B98 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1835 00000B9B FF7500                  	push qword[rbp]
  1836 00000B9E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  1837 00000BA1 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  1838 00000BA5 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  1839 00000BA9 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  1840 00000BAD 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  1841 00000BB0 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  1842 00000BB3 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  1843 00000BB8 4983C103                	add r9, 3 	 ;for getting to the params
  1844 00000BBC 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  1845 00000BC0 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  1846                                  .L_tc_recycle_frame_loop_0009:
  1847 00000BC3 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  1848 00000BC6 7410                    	je .L_tc_recycle_frame_done_0009
  1849 00000BC8 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  1850 00000BCB 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  1851 00000BCE 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  1852 00000BD2 4983E808                	sub r8, 8	 ;move the top of the stack one down
  1853 00000BD6 EBEB                    	jmp .L_tc_recycle_frame_loop_0009
  1854                                  .L_tc_recycle_frame_done_0009:
  1855 00000BD8 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  1856 00000BD9 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  1857 00000BDD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1858 00000BE0 C9                      	leave
  1859 00000BE1 C21800                  	ret AND_KILL_FRAME(1)
  1860                                  .L_lambda_simple_end_0009:	; new closure is in rax
  1861 00000BE4 48890425[C4090000]      	mov qword [free_var_21], rax
  1862 00000BEC 48B8-                   	mov rax, sob_void
  1862 00000BEE [0000000000000000] 
  1863                                  
  1864 00000BF6 4889C7                  	mov rdi, rax
  1865 00000BF9 E854570000              	call print_sexpr_if_not_void
  1866 00000BFE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1867 00000C03 E8F5540000              	call malloc
  1868 00000C08 50                      	push rax
  1869 00000C09 BF00000000              	mov rdi, 8 * 0	; new rib
  1870 00000C0E E8EA540000              	call malloc
  1871 00000C13 50                      	push rax
  1872 00000C14 BF08000000              	mov rdi, 8 * 1	; extended env
  1873 00000C19 E8DF540000              	call malloc
  1874 00000C1E 488B7D10                	mov rdi, ENV
  1875 00000C22 BE00000000              	mov rsi, 0
  1876 00000C27 BA01000000              	mov rdx, 1
  1877                                  .L_lambda_simple_env_loop_000a:	; ext_env[i + 1] <-- env[i]
  1878 00000C2C 4883FE00                	cmp rsi, 0
  1879 00000C30 7410                    	je .L_lambda_simple_env_end_000a
  1880 00000C32 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1881 00000C36 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1882 00000C3A 48FFC6                  	inc rsi
  1883 00000C3D 48FFC2                  	inc rdx
  1884 00000C40 EBEA                    	jmp .L_lambda_simple_env_loop_000a
  1885                                  .L_lambda_simple_env_end_000a:
  1886 00000C42 5B                      	pop rbx
  1887 00000C43 BE00000000              	mov rsi, 0
  1888                                  .L_lambda_simple_params_loop_000a:	; copy params
  1889 00000C48 4883FE00                	cmp rsi, 0
  1890 00000C4C 740E                    	je .L_lambda_simple_params_end_000a
  1891 00000C4E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1892 00000C53 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1893 00000C57 48FFC6                  	inc rsi
  1894 00000C5A EBEC                    	jmp .L_lambda_simple_params_loop_000a
  1895                                  .L_lambda_simple_params_end_000a:
  1896 00000C5C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1897 00000C5F 4889C3                  	mov rbx, rax
  1898 00000C62 58                      	pop rax
  1899 00000C63 C60004                  	mov byte [rax], T_closure
  1900 00000C66 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1901 00000C6A 48C74009[770C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000a
  1902 00000C72 E9AA000000              	jmp .L_lambda_simple_end_000a
  1903                                  .L_lambda_simple_code_000a:	; lambda-simple body
  1904 00000C77 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1905 00000C7D 740B                    	je .L_lambda_simple_arity_check_ok_000a
  1906 00000C7F FF742410                	push qword [rsp + 8 * 2]
  1907 00000C83 6A01                    	push 1
  1908 00000C85 E92C540000              	jmp L_error_incorrect_arity_simple
  1909                                  .L_lambda_simple_arity_check_ok_000a:
  1910 00000C8A C8000000                	enter 0, 0
  1911                                  	; preparing a tail-call
  1912                                  	; preparing a non-tail-call
  1913 00000C8E 488B4520                	mov rax, PARAM(0)	; param x
  1914 00000C92 50                      	push rax
  1915 00000C93 6A01                    	push 1	; arg count
  1916 00000C95 488B0425[80090000]      	mov rax, qword [free_var_17]	; free var cadr
  1917 00000C9D 803805                  	cmp byte [rax], T_undefined
  1918 00000CA0 0F842A530000            	je L_error_fvar_undefined
  1919 00000CA6 803804                  	cmp byte [rax], T_closure
  1920 00000CA9 0F85A5530000            	jne L_error_non_closure
  1921 00000CAF FF7001                  	push SOB_CLOSURE_ENV(rax)
  1922 00000CB2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1923 00000CB5 50                      	push rax
  1924 00000CB6 6A01                    	push 1	; arg count
  1925 00000CB8 488B0425[900A0000]      	mov rax, qword [free_var_33]	; free var cdr
  1926 00000CC0 803805                  	cmp byte [rax], T_undefined
  1927 00000CC3 0F8407530000            	je L_error_fvar_undefined
  1928 00000CC9 803804                  	cmp byte [rax], T_closure
  1929 00000CCC 0F8582530000            	jne L_error_non_closure
  1930 00000CD2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1931 00000CD5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1932 00000CD8 FF7500                  	push qword[rbp]
  1933 00000CDB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  1934 00000CDE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  1935 00000CE2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  1936 00000CE6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  1937 00000CEA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  1938 00000CED 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  1939 00000CF0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  1940 00000CF5 4983C103                	add r9, 3 	 ;for getting to the params
  1941 00000CF9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  1942 00000CFD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  1943                                  .L_tc_recycle_frame_loop_000a:
  1944 00000D00 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  1945 00000D03 7410                    	je .L_tc_recycle_frame_done_000a
  1946 00000D05 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  1947 00000D08 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  1948 00000D0B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  1949 00000D0F 4983E808                	sub r8, 8	 ;move the top of the stack one down
  1950 00000D13 EBEB                    	jmp .L_tc_recycle_frame_loop_000a
  1951                                  .L_tc_recycle_frame_done_000a:
  1952 00000D15 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  1953 00000D16 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  1954 00000D1A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1955 00000D1D C9                      	leave
  1956 00000D1E C21800                  	ret AND_KILL_FRAME(1)
  1957                                  .L_lambda_simple_end_000a:	; new closure is in rax
  1958 00000D21 48890425[F7090000]      	mov qword [free_var_24], rax
  1959 00000D29 48B8-                   	mov rax, sob_void
  1959 00000D2B [0000000000000000] 
  1960                                  
  1961 00000D33 4889C7                  	mov rdi, rax
  1962 00000D36 E817560000              	call print_sexpr_if_not_void
  1963 00000D3B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1964 00000D40 E8B8530000              	call malloc
  1965 00000D45 50                      	push rax
  1966 00000D46 BF00000000              	mov rdi, 8 * 0	; new rib
  1967 00000D4B E8AD530000              	call malloc
  1968 00000D50 50                      	push rax
  1969 00000D51 BF08000000              	mov rdi, 8 * 1	; extended env
  1970 00000D56 E8A2530000              	call malloc
  1971 00000D5B 488B7D10                	mov rdi, ENV
  1972 00000D5F BE00000000              	mov rsi, 0
  1973 00000D64 BA01000000              	mov rdx, 1
  1974                                  .L_lambda_simple_env_loop_000b:	; ext_env[i + 1] <-- env[i]
  1975 00000D69 4883FE00                	cmp rsi, 0
  1976 00000D6D 7410                    	je .L_lambda_simple_env_end_000b
  1977 00000D6F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1978 00000D73 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1979 00000D77 48FFC6                  	inc rsi
  1980 00000D7A 48FFC2                  	inc rdx
  1981 00000D7D EBEA                    	jmp .L_lambda_simple_env_loop_000b
  1982                                  .L_lambda_simple_env_end_000b:
  1983 00000D7F 5B                      	pop rbx
  1984 00000D80 BE00000000              	mov rsi, 0
  1985                                  .L_lambda_simple_params_loop_000b:	; copy params
  1986 00000D85 4883FE00                	cmp rsi, 0
  1987 00000D89 740E                    	je .L_lambda_simple_params_end_000b
  1988 00000D8B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1989 00000D90 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1990 00000D94 48FFC6                  	inc rsi
  1991 00000D97 EBEC                    	jmp .L_lambda_simple_params_loop_000b
  1992                                  .L_lambda_simple_params_end_000b:
  1993 00000D99 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1994 00000D9C 4889C3                  	mov rbx, rax
  1995 00000D9F 58                      	pop rax
  1996 00000DA0 C60004                  	mov byte [rax], T_closure
  1997 00000DA3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1998 00000DA7 48C74009[B40D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000b
  1999 00000DAF E9AA000000              	jmp .L_lambda_simple_end_000b
  2000                                  .L_lambda_simple_code_000b:	; lambda-simple body
  2001 00000DB4 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2002 00000DBA 740B                    	je .L_lambda_simple_arity_check_ok_000b
  2003 00000DBC FF742410                	push qword [rsp + 8 * 2]
  2004 00000DC0 6A01                    	push 1
  2005 00000DC2 E9EF520000              	jmp L_error_incorrect_arity_simple
  2006                                  .L_lambda_simple_arity_check_ok_000b:
  2007 00000DC7 C8000000                	enter 0, 0
  2008                                  	; preparing a tail-call
  2009                                  	; preparing a non-tail-call
  2010 00000DCB 488B4520                	mov rax, PARAM(0)	; param x
  2011 00000DCF 50                      	push rax
  2012 00000DD0 6A01                    	push 1	; arg count
  2013 00000DD2 488B0425[080A0000]      	mov rax, qword [free_var_25]	; free var cdar
  2014 00000DDA 803805                  	cmp byte [rax], T_undefined
  2015 00000DDD 0F84ED510000            	je L_error_fvar_undefined
  2016 00000DE3 803804                  	cmp byte [rax], T_closure
  2017 00000DE6 0F8568520000            	jne L_error_non_closure
  2018 00000DEC FF7001                  	push SOB_CLOSURE_ENV(rax)
  2019 00000DEF FF5009                  	call SOB_CLOSURE_CODE(rax)
  2020 00000DF2 50                      	push rax
  2021 00000DF3 6A01                    	push 1	; arg count
  2022 00000DF5 488B0425[900A0000]      	mov rax, qword [free_var_33]	; free var cdr
  2023 00000DFD 803805                  	cmp byte [rax], T_undefined
  2024 00000E00 0F84CA510000            	je L_error_fvar_undefined
  2025 00000E06 803804                  	cmp byte [rax], T_closure
  2026 00000E09 0F8545520000            	jne L_error_non_closure
  2027 00000E0F FF7001                  	push SOB_CLOSURE_ENV(rax)
  2028 00000E12 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2029 00000E15 FF7500                  	push qword[rbp]
  2030 00000E18 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2031 00000E1B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2032 00000E1F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2033 00000E23 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2034 00000E27 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2035 00000E2A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2036 00000E2D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2037 00000E32 4983C103                	add r9, 3 	 ;for getting to the params
  2038 00000E36 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2039 00000E3A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2040                                  .L_tc_recycle_frame_loop_000b:
  2041 00000E3D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2042 00000E40 7410                    	je .L_tc_recycle_frame_done_000b
  2043 00000E42 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2044 00000E45 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2045 00000E48 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2046 00000E4C 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2047 00000E50 EBEB                    	jmp .L_tc_recycle_frame_loop_000b
  2048                                  .L_tc_recycle_frame_done_000b:
  2049 00000E52 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2050 00000E53 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2051 00000E57 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2052 00000E5A C9                      	leave
  2053 00000E5B C21800                  	ret AND_KILL_FRAME(1)
  2054                                  .L_lambda_simple_end_000b:	; new closure is in rax
  2055 00000E5E 48890425[3B0A0000]      	mov qword [free_var_28], rax
  2056 00000E66 48B8-                   	mov rax, sob_void
  2056 00000E68 [0000000000000000] 
  2057                                  
  2058 00000E70 4889C7                  	mov rdi, rax
  2059 00000E73 E8DA540000              	call print_sexpr_if_not_void
  2060 00000E78 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2061 00000E7D E87B520000              	call malloc
  2062 00000E82 50                      	push rax
  2063 00000E83 BF00000000              	mov rdi, 8 * 0	; new rib
  2064 00000E88 E870520000              	call malloc
  2065 00000E8D 50                      	push rax
  2066 00000E8E BF08000000              	mov rdi, 8 * 1	; extended env
  2067 00000E93 E865520000              	call malloc
  2068 00000E98 488B7D10                	mov rdi, ENV
  2069 00000E9C BE00000000              	mov rsi, 0
  2070 00000EA1 BA01000000              	mov rdx, 1
  2071                                  .L_lambda_simple_env_loop_000c:	; ext_env[i + 1] <-- env[i]
  2072 00000EA6 4883FE00                	cmp rsi, 0
  2073 00000EAA 7410                    	je .L_lambda_simple_env_end_000c
  2074 00000EAC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2075 00000EB0 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2076 00000EB4 48FFC6                  	inc rsi
  2077 00000EB7 48FFC2                  	inc rdx
  2078 00000EBA EBEA                    	jmp .L_lambda_simple_env_loop_000c
  2079                                  .L_lambda_simple_env_end_000c:
  2080 00000EBC 5B                      	pop rbx
  2081 00000EBD BE00000000              	mov rsi, 0
  2082                                  .L_lambda_simple_params_loop_000c:	; copy params
  2083 00000EC2 4883FE00                	cmp rsi, 0
  2084 00000EC6 740E                    	je .L_lambda_simple_params_end_000c
  2085 00000EC8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2086 00000ECD 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2087 00000ED1 48FFC6                  	inc rsi
  2088 00000ED4 EBEC                    	jmp .L_lambda_simple_params_loop_000c
  2089                                  .L_lambda_simple_params_end_000c:
  2090 00000ED6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2091 00000ED9 4889C3                  	mov rbx, rax
  2092 00000EDC 58                      	pop rax
  2093 00000EDD C60004                  	mov byte [rax], T_closure
  2094 00000EE0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2095 00000EE4 48C74009[F10E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000c
  2096 00000EEC E9AA000000              	jmp .L_lambda_simple_end_000c
  2097                                  .L_lambda_simple_code_000c:	; lambda-simple body
  2098 00000EF1 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2099 00000EF7 740B                    	je .L_lambda_simple_arity_check_ok_000c
  2100 00000EF9 FF742410                	push qword [rsp + 8 * 2]
  2101 00000EFD 6A01                    	push 1
  2102 00000EFF E9B2510000              	jmp L_error_incorrect_arity_simple
  2103                                  .L_lambda_simple_arity_check_ok_000c:
  2104 00000F04 C8000000                	enter 0, 0
  2105                                  	; preparing a tail-call
  2106                                  	; preparing a non-tail-call
  2107 00000F08 488B4520                	mov rax, PARAM(0)	; param x
  2108 00000F0C 50                      	push rax
  2109 00000F0D 6A01                    	push 1	; arg count
  2110 00000F0F 488B0425[7F0A0000]      	mov rax, qword [free_var_32]	; free var cddr
  2111 00000F17 803805                  	cmp byte [rax], T_undefined
  2112 00000F1A 0F84B0500000            	je L_error_fvar_undefined
  2113 00000F20 803804                  	cmp byte [rax], T_closure
  2114 00000F23 0F852B510000            	jne L_error_non_closure
  2115 00000F29 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2116 00000F2C FF5009                  	call SOB_CLOSURE_CODE(rax)
  2117 00000F2F 50                      	push rax
  2118 00000F30 6A01                    	push 1	; arg count
  2119 00000F32 488B0425[900A0000]      	mov rax, qword [free_var_33]	; free var cdr
  2120 00000F3A 803805                  	cmp byte [rax], T_undefined
  2121 00000F3D 0F848D500000            	je L_error_fvar_undefined
  2122 00000F43 803804                  	cmp byte [rax], T_closure
  2123 00000F46 0F8508510000            	jne L_error_non_closure
  2124 00000F4C FF7001                  	push SOB_CLOSURE_ENV(rax)
  2125 00000F4F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2126 00000F52 FF7500                  	push qword[rbp]
  2127 00000F55 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2128 00000F58 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2129 00000F5C 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2130 00000F60 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2131 00000F64 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2132 00000F67 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2133 00000F6A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2134 00000F6F 4983C103                	add r9, 3 	 ;for getting to the params
  2135 00000F73 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2136 00000F77 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2137                                  .L_tc_recycle_frame_loop_000c:
  2138 00000F7A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2139 00000F7D 7410                    	je .L_tc_recycle_frame_done_000c
  2140 00000F7F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2141 00000F82 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2142 00000F85 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2143 00000F89 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2144 00000F8D EBEB                    	jmp .L_tc_recycle_frame_loop_000c
  2145                                  .L_tc_recycle_frame_done_000c:
  2146 00000F8F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2147 00000F90 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2148 00000F94 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2149 00000F97 C9                      	leave
  2150 00000F98 C21800                  	ret AND_KILL_FRAME(1)
  2151                                  .L_lambda_simple_end_000c:	; new closure is in rax
  2152 00000F9B 48890425[6E0A0000]      	mov qword [free_var_31], rax
  2153 00000FA3 48B8-                   	mov rax, sob_void
  2153 00000FA5 [0000000000000000] 
  2154                                  
  2155 00000FAD 4889C7                  	mov rdi, rax
  2156 00000FB0 E89D530000              	call print_sexpr_if_not_void
  2157 00000FB5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2158 00000FBA E83E510000              	call malloc
  2159 00000FBF 50                      	push rax
  2160 00000FC0 BF00000000              	mov rdi, 8 * 0	; new rib
  2161 00000FC5 E833510000              	call malloc
  2162 00000FCA 50                      	push rax
  2163 00000FCB BF08000000              	mov rdi, 8 * 1	; extended env
  2164 00000FD0 E828510000              	call malloc
  2165 00000FD5 488B7D10                	mov rdi, ENV
  2166 00000FD9 BE00000000              	mov rsi, 0
  2167 00000FDE BA01000000              	mov rdx, 1
  2168                                  .L_lambda_simple_env_loop_000d:	; ext_env[i + 1] <-- env[i]
  2169 00000FE3 4883FE00                	cmp rsi, 0
  2170 00000FE7 7410                    	je .L_lambda_simple_env_end_000d
  2171 00000FE9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2172 00000FED 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2173 00000FF1 48FFC6                  	inc rsi
  2174 00000FF4 48FFC2                  	inc rdx
  2175 00000FF7 EBEA                    	jmp .L_lambda_simple_env_loop_000d
  2176                                  .L_lambda_simple_env_end_000d:
  2177 00000FF9 5B                      	pop rbx
  2178 00000FFA BE00000000              	mov rsi, 0
  2179                                  .L_lambda_simple_params_loop_000d:	; copy params
  2180 00000FFF 4883FE00                	cmp rsi, 0
  2181 00001003 740E                    	je .L_lambda_simple_params_end_000d
  2182 00001005 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2183 0000100A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2184 0000100E 48FFC6                  	inc rsi
  2185 00001011 EBEC                    	jmp .L_lambda_simple_params_loop_000d
  2186                                  .L_lambda_simple_params_end_000d:
  2187 00001013 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2188 00001016 4889C3                  	mov rbx, rax
  2189 00001019 58                      	pop rax
  2190 0000101A C60004                  	mov byte [rax], T_closure
  2191 0000101D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2192 00001021 48C74009[2E100000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000d
  2193 00001029 E9AA000000              	jmp .L_lambda_simple_end_000d
  2194                                  .L_lambda_simple_code_000d:	; lambda-simple body
  2195 0000102E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2196 00001034 740B                    	je .L_lambda_simple_arity_check_ok_000d
  2197 00001036 FF742410                	push qword [rsp + 8 * 2]
  2198 0000103A 6A01                    	push 1
  2199 0000103C E975500000              	jmp L_error_incorrect_arity_simple
  2200                                  .L_lambda_simple_arity_check_ok_000d:
  2201 00001041 C8000000                	enter 0, 0
  2202                                  	; preparing a tail-call
  2203                                  	; preparing a non-tail-call
  2204 00001045 488B4520                	mov rax, PARAM(0)	; param x
  2205 00001049 50                      	push rax
  2206 0000104A 6A01                    	push 1	; arg count
  2207 0000104C 488B0425[09090000]      	mov rax, qword [free_var_10]	; free var caar
  2208 00001054 803805                  	cmp byte [rax], T_undefined
  2209 00001057 0F84734F0000            	je L_error_fvar_undefined
  2210 0000105D 803804                  	cmp byte [rax], T_closure
  2211 00001060 0F85EE4F0000            	jne L_error_non_closure
  2212 00001066 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2213 00001069 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2214 0000106C 50                      	push rax
  2215 0000106D 6A01                    	push 1	; arg count
  2216 0000106F 488B0425[09090000]      	mov rax, qword [free_var_10]	; free var caar
  2217 00001077 803805                  	cmp byte [rax], T_undefined
  2218 0000107A 0F84504F0000            	je L_error_fvar_undefined
  2219 00001080 803804                  	cmp byte [rax], T_closure
  2220 00001083 0F85CB4F0000            	jne L_error_non_closure
  2221 00001089 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2222 0000108C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2223 0000108F FF7500                  	push qword[rbp]
  2224 00001092 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2225 00001095 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2226 00001099 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2227 0000109D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2228 000010A1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2229 000010A4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2230 000010A7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2231 000010AC 4983C103                	add r9, 3 	 ;for getting to the params
  2232 000010B0 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2233 000010B4 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2234                                  .L_tc_recycle_frame_loop_000d:
  2235 000010B7 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2236 000010BA 7410                    	je .L_tc_recycle_frame_done_000d
  2237 000010BC 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2238 000010BF 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2239 000010C2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2240 000010C6 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2241 000010CA EBEB                    	jmp .L_tc_recycle_frame_loop_000d
  2242                                  .L_tc_recycle_frame_done_000d:
  2243 000010CC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2244 000010CD 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2245 000010D1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2246 000010D4 C9                      	leave
  2247 000010D5 C21800                  	ret AND_KILL_FRAME(1)
  2248                                  .L_lambda_simple_end_000d:	; new closure is in rax
  2249 000010D8 48890425[A3080000]      	mov qword [free_var_4], rax
  2250 000010E0 48B8-                   	mov rax, sob_void
  2250 000010E2 [0000000000000000] 
  2251                                  
  2252 000010EA 4889C7                  	mov rdi, rax
  2253 000010ED E860520000              	call print_sexpr_if_not_void
  2254 000010F2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2255 000010F7 E801500000              	call malloc
  2256 000010FC 50                      	push rax
  2257 000010FD BF00000000              	mov rdi, 8 * 0	; new rib
  2258 00001102 E8F64F0000              	call malloc
  2259 00001107 50                      	push rax
  2260 00001108 BF08000000              	mov rdi, 8 * 1	; extended env
  2261 0000110D E8EB4F0000              	call malloc
  2262 00001112 488B7D10                	mov rdi, ENV
  2263 00001116 BE00000000              	mov rsi, 0
  2264 0000111B BA01000000              	mov rdx, 1
  2265                                  .L_lambda_simple_env_loop_000e:	; ext_env[i + 1] <-- env[i]
  2266 00001120 4883FE00                	cmp rsi, 0
  2267 00001124 7410                    	je .L_lambda_simple_env_end_000e
  2268 00001126 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2269 0000112A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2270 0000112E 48FFC6                  	inc rsi
  2271 00001131 48FFC2                  	inc rdx
  2272 00001134 EBEA                    	jmp .L_lambda_simple_env_loop_000e
  2273                                  .L_lambda_simple_env_end_000e:
  2274 00001136 5B                      	pop rbx
  2275 00001137 BE00000000              	mov rsi, 0
  2276                                  .L_lambda_simple_params_loop_000e:	; copy params
  2277 0000113C 4883FE00                	cmp rsi, 0
  2278 00001140 740E                    	je .L_lambda_simple_params_end_000e
  2279 00001142 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2280 00001147 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2281 0000114B 48FFC6                  	inc rsi
  2282 0000114E EBEC                    	jmp .L_lambda_simple_params_loop_000e
  2283                                  .L_lambda_simple_params_end_000e:
  2284 00001150 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2285 00001153 4889C3                  	mov rbx, rax
  2286 00001156 58                      	pop rax
  2287 00001157 C60004                  	mov byte [rax], T_closure
  2288 0000115A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2289 0000115E 48C74009[6B110000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000e
  2290 00001166 E9AA000000              	jmp .L_lambda_simple_end_000e
  2291                                  .L_lambda_simple_code_000e:	; lambda-simple body
  2292 0000116B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2293 00001171 740B                    	je .L_lambda_simple_arity_check_ok_000e
  2294 00001173 FF742410                	push qword [rsp + 8 * 2]
  2295 00001177 6A01                    	push 1
  2296 00001179 E9384F0000              	jmp L_error_incorrect_arity_simple
  2297                                  .L_lambda_simple_arity_check_ok_000e:
  2298 0000117E C8000000                	enter 0, 0
  2299                                  	; preparing a tail-call
  2300                                  	; preparing a non-tail-call
  2301 00001182 488B4520                	mov rax, PARAM(0)	; param x
  2302 00001186 50                      	push rax
  2303 00001187 6A01                    	push 1	; arg count
  2304 00001189 488B0425[80090000]      	mov rax, qword [free_var_17]	; free var cadr
  2305 00001191 803805                  	cmp byte [rax], T_undefined
  2306 00001194 0F84364E0000            	je L_error_fvar_undefined
  2307 0000119A 803804                  	cmp byte [rax], T_closure
  2308 0000119D 0F85B14E0000            	jne L_error_non_closure
  2309 000011A3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2310 000011A6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2311 000011A9 50                      	push rax
  2312 000011AA 6A01                    	push 1	; arg count
  2313 000011AC 488B0425[09090000]      	mov rax, qword [free_var_10]	; free var caar
  2314 000011B4 803805                  	cmp byte [rax], T_undefined
  2315 000011B7 0F84134E0000            	je L_error_fvar_undefined
  2316 000011BD 803804                  	cmp byte [rax], T_closure
  2317 000011C0 0F858E4E0000            	jne L_error_non_closure
  2318 000011C6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2319 000011C9 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2320 000011CC FF7500                  	push qword[rbp]
  2321 000011CF 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2322 000011D2 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2323 000011D6 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2324 000011DA 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2325 000011DE 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2326 000011E1 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2327 000011E4 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2328 000011E9 4983C103                	add r9, 3 	 ;for getting to the params
  2329 000011ED 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2330 000011F1 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2331                                  .L_tc_recycle_frame_loop_000e:
  2332 000011F4 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2333 000011F7 7410                    	je .L_tc_recycle_frame_done_000e
  2334 000011F9 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2335 000011FC 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2336 000011FF 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2337 00001203 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2338 00001207 EBEB                    	jmp .L_tc_recycle_frame_loop_000e
  2339                                  .L_tc_recycle_frame_done_000e:
  2340 00001209 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2341 0000120A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2342 0000120E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2343 00001211 C9                      	leave
  2344 00001212 C21800                  	ret AND_KILL_FRAME(1)
  2345                                  .L_lambda_simple_end_000e:	; new closure is in rax
  2346 00001215 48890425[B4080000]      	mov qword [free_var_5], rax
  2347 0000121D 48B8-                   	mov rax, sob_void
  2347 0000121F [0000000000000000] 
  2348                                  
  2349 00001227 4889C7                  	mov rdi, rax
  2350 0000122A E823510000              	call print_sexpr_if_not_void
  2351 0000122F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2352 00001234 E8C44E0000              	call malloc
  2353 00001239 50                      	push rax
  2354 0000123A BF00000000              	mov rdi, 8 * 0	; new rib
  2355 0000123F E8B94E0000              	call malloc
  2356 00001244 50                      	push rax
  2357 00001245 BF08000000              	mov rdi, 8 * 1	; extended env
  2358 0000124A E8AE4E0000              	call malloc
  2359 0000124F 488B7D10                	mov rdi, ENV
  2360 00001253 BE00000000              	mov rsi, 0
  2361 00001258 BA01000000              	mov rdx, 1
  2362                                  .L_lambda_simple_env_loop_000f:	; ext_env[i + 1] <-- env[i]
  2363 0000125D 4883FE00                	cmp rsi, 0
  2364 00001261 7410                    	je .L_lambda_simple_env_end_000f
  2365 00001263 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2366 00001267 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2367 0000126B 48FFC6                  	inc rsi
  2368 0000126E 48FFC2                  	inc rdx
  2369 00001271 EBEA                    	jmp .L_lambda_simple_env_loop_000f
  2370                                  .L_lambda_simple_env_end_000f:
  2371 00001273 5B                      	pop rbx
  2372 00001274 BE00000000              	mov rsi, 0
  2373                                  .L_lambda_simple_params_loop_000f:	; copy params
  2374 00001279 4883FE00                	cmp rsi, 0
  2375 0000127D 740E                    	je .L_lambda_simple_params_end_000f
  2376 0000127F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2377 00001284 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2378 00001288 48FFC6                  	inc rsi
  2379 0000128B EBEC                    	jmp .L_lambda_simple_params_loop_000f
  2380                                  .L_lambda_simple_params_end_000f:
  2381 0000128D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2382 00001290 4889C3                  	mov rbx, rax
  2383 00001293 58                      	pop rax
  2384 00001294 C60004                  	mov byte [rax], T_closure
  2385 00001297 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2386 0000129B 48C74009[A8120000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000f
  2387 000012A3 E9AA000000              	jmp .L_lambda_simple_end_000f
  2388                                  .L_lambda_simple_code_000f:	; lambda-simple body
  2389 000012A8 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2390 000012AE 740B                    	je .L_lambda_simple_arity_check_ok_000f
  2391 000012B0 FF742410                	push qword [rsp + 8 * 2]
  2392 000012B4 6A01                    	push 1
  2393 000012B6 E9FB4D0000              	jmp L_error_incorrect_arity_simple
  2394                                  .L_lambda_simple_arity_check_ok_000f:
  2395 000012BB C8000000                	enter 0, 0
  2396                                  	; preparing a tail-call
  2397                                  	; preparing a non-tail-call
  2398 000012BF 488B4520                	mov rax, PARAM(0)	; param x
  2399 000012C3 50                      	push rax
  2400 000012C4 6A01                    	push 1	; arg count
  2401 000012C6 488B0425[080A0000]      	mov rax, qword [free_var_25]	; free var cdar
  2402 000012CE 803805                  	cmp byte [rax], T_undefined
  2403 000012D1 0F84F94C0000            	je L_error_fvar_undefined
  2404 000012D7 803804                  	cmp byte [rax], T_closure
  2405 000012DA 0F85744D0000            	jne L_error_non_closure
  2406 000012E0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2407 000012E3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2408 000012E6 50                      	push rax
  2409 000012E7 6A01                    	push 1	; arg count
  2410 000012E9 488B0425[09090000]      	mov rax, qword [free_var_10]	; free var caar
  2411 000012F1 803805                  	cmp byte [rax], T_undefined
  2412 000012F4 0F84D64C0000            	je L_error_fvar_undefined
  2413 000012FA 803804                  	cmp byte [rax], T_closure
  2414 000012FD 0F85514D0000            	jne L_error_non_closure
  2415 00001303 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2416 00001306 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2417 00001309 FF7500                  	push qword[rbp]
  2418 0000130C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2419 0000130F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2420 00001313 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2421 00001317 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2422 0000131B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2423 0000131E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2424 00001321 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2425 00001326 4983C103                	add r9, 3 	 ;for getting to the params
  2426 0000132A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2427 0000132E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2428                                  .L_tc_recycle_frame_loop_000f:
  2429 00001331 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2430 00001334 7410                    	je .L_tc_recycle_frame_done_000f
  2431 00001336 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2432 00001339 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2433 0000133C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2434 00001340 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2435 00001344 EBEB                    	jmp .L_tc_recycle_frame_loop_000f
  2436                                  .L_tc_recycle_frame_done_000f:
  2437 00001346 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2438 00001347 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2439 0000134B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2440 0000134E C9                      	leave
  2441 0000134F C21800                  	ret AND_KILL_FRAME(1)
  2442                                  .L_lambda_simple_end_000f:	; new closure is in rax
  2443 00001352 48890425[D6080000]      	mov qword [free_var_7], rax
  2444 0000135A 48B8-                   	mov rax, sob_void
  2444 0000135C [0000000000000000] 
  2445                                  
  2446 00001364 4889C7                  	mov rdi, rax
  2447 00001367 E8E64F0000              	call print_sexpr_if_not_void
  2448 0000136C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2449 00001371 E8874D0000              	call malloc
  2450 00001376 50                      	push rax
  2451 00001377 BF00000000              	mov rdi, 8 * 0	; new rib
  2452 0000137C E87C4D0000              	call malloc
  2453 00001381 50                      	push rax
  2454 00001382 BF08000000              	mov rdi, 8 * 1	; extended env
  2455 00001387 E8714D0000              	call malloc
  2456 0000138C 488B7D10                	mov rdi, ENV
  2457 00001390 BE00000000              	mov rsi, 0
  2458 00001395 BA01000000              	mov rdx, 1
  2459                                  .L_lambda_simple_env_loop_0010:	; ext_env[i + 1] <-- env[i]
  2460 0000139A 4883FE00                	cmp rsi, 0
  2461 0000139E 7410                    	je .L_lambda_simple_env_end_0010
  2462 000013A0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2463 000013A4 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2464 000013A8 48FFC6                  	inc rsi
  2465 000013AB 48FFC2                  	inc rdx
  2466 000013AE EBEA                    	jmp .L_lambda_simple_env_loop_0010
  2467                                  .L_lambda_simple_env_end_0010:
  2468 000013B0 5B                      	pop rbx
  2469 000013B1 BE00000000              	mov rsi, 0
  2470                                  .L_lambda_simple_params_loop_0010:	; copy params
  2471 000013B6 4883FE00                	cmp rsi, 0
  2472 000013BA 740E                    	je .L_lambda_simple_params_end_0010
  2473 000013BC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2474 000013C1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2475 000013C5 48FFC6                  	inc rsi
  2476 000013C8 EBEC                    	jmp .L_lambda_simple_params_loop_0010
  2477                                  .L_lambda_simple_params_end_0010:
  2478 000013CA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2479 000013CD 4889C3                  	mov rbx, rax
  2480 000013D0 58                      	pop rax
  2481 000013D1 C60004                  	mov byte [rax], T_closure
  2482 000013D4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2483 000013D8 48C74009[E5130000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0010
  2484 000013E0 E9AA000000              	jmp .L_lambda_simple_end_0010
  2485                                  .L_lambda_simple_code_0010:	; lambda-simple body
  2486 000013E5 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2487 000013EB 740B                    	je .L_lambda_simple_arity_check_ok_0010
  2488 000013ED FF742410                	push qword [rsp + 8 * 2]
  2489 000013F1 6A01                    	push 1
  2490 000013F3 E9BE4C0000              	jmp L_error_incorrect_arity_simple
  2491                                  .L_lambda_simple_arity_check_ok_0010:
  2492 000013F8 C8000000                	enter 0, 0
  2493                                  	; preparing a tail-call
  2494                                  	; preparing a non-tail-call
  2495 000013FC 488B4520                	mov rax, PARAM(0)	; param x
  2496 00001400 50                      	push rax
  2497 00001401 6A01                    	push 1	; arg count
  2498 00001403 488B0425[7F0A0000]      	mov rax, qword [free_var_32]	; free var cddr
  2499 0000140B 803805                  	cmp byte [rax], T_undefined
  2500 0000140E 0F84BC4B0000            	je L_error_fvar_undefined
  2501 00001414 803804                  	cmp byte [rax], T_closure
  2502 00001417 0F85374C0000            	jne L_error_non_closure
  2503 0000141D FF7001                  	push SOB_CLOSURE_ENV(rax)
  2504 00001420 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2505 00001423 50                      	push rax
  2506 00001424 6A01                    	push 1	; arg count
  2507 00001426 488B0425[09090000]      	mov rax, qword [free_var_10]	; free var caar
  2508 0000142E 803805                  	cmp byte [rax], T_undefined
  2509 00001431 0F84994B0000            	je L_error_fvar_undefined
  2510 00001437 803804                  	cmp byte [rax], T_closure
  2511 0000143A 0F85144C0000            	jne L_error_non_closure
  2512 00001440 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2513 00001443 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2514 00001446 FF7500                  	push qword[rbp]
  2515 00001449 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2516 0000144C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2517 00001450 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2518 00001454 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2519 00001458 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2520 0000145B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2521 0000145E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2522 00001463 4983C103                	add r9, 3 	 ;for getting to the params
  2523 00001467 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2524 0000146B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2525                                  .L_tc_recycle_frame_loop_0010:
  2526 0000146E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2527 00001471 7410                    	je .L_tc_recycle_frame_done_0010
  2528 00001473 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2529 00001476 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2530 00001479 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2531 0000147D 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2532 00001481 EBEB                    	jmp .L_tc_recycle_frame_loop_0010
  2533                                  .L_tc_recycle_frame_done_0010:
  2534 00001483 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2535 00001484 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2536 00001488 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2537 0000148B C9                      	leave
  2538 0000148C C21800                  	ret AND_KILL_FRAME(1)
  2539                                  .L_lambda_simple_end_0010:	; new closure is in rax
  2540 0000148F 48890425[E7080000]      	mov qword [free_var_8], rax
  2541 00001497 48B8-                   	mov rax, sob_void
  2541 00001499 [0000000000000000] 
  2542                                  
  2543 000014A1 4889C7                  	mov rdi, rax
  2544 000014A4 E8A94E0000              	call print_sexpr_if_not_void
  2545 000014A9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2546 000014AE E84A4C0000              	call malloc
  2547 000014B3 50                      	push rax
  2548 000014B4 BF00000000              	mov rdi, 8 * 0	; new rib
  2549 000014B9 E83F4C0000              	call malloc
  2550 000014BE 50                      	push rax
  2551 000014BF BF08000000              	mov rdi, 8 * 1	; extended env
  2552 000014C4 E8344C0000              	call malloc
  2553 000014C9 488B7D10                	mov rdi, ENV
  2554 000014CD BE00000000              	mov rsi, 0
  2555 000014D2 BA01000000              	mov rdx, 1
  2556                                  .L_lambda_simple_env_loop_0011:	; ext_env[i + 1] <-- env[i]
  2557 000014D7 4883FE00                	cmp rsi, 0
  2558 000014DB 7410                    	je .L_lambda_simple_env_end_0011
  2559 000014DD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2560 000014E1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2561 000014E5 48FFC6                  	inc rsi
  2562 000014E8 48FFC2                  	inc rdx
  2563 000014EB EBEA                    	jmp .L_lambda_simple_env_loop_0011
  2564                                  .L_lambda_simple_env_end_0011:
  2565 000014ED 5B                      	pop rbx
  2566 000014EE BE00000000              	mov rsi, 0
  2567                                  .L_lambda_simple_params_loop_0011:	; copy params
  2568 000014F3 4883FE00                	cmp rsi, 0
  2569 000014F7 740E                    	je .L_lambda_simple_params_end_0011
  2570 000014F9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2571 000014FE 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2572 00001502 48FFC6                  	inc rsi
  2573 00001505 EBEC                    	jmp .L_lambda_simple_params_loop_0011
  2574                                  .L_lambda_simple_params_end_0011:
  2575 00001507 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2576 0000150A 4889C3                  	mov rbx, rax
  2577 0000150D 58                      	pop rax
  2578 0000150E C60004                  	mov byte [rax], T_closure
  2579 00001511 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2580 00001515 48C74009[22150000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0011
  2581 0000151D E9AA000000              	jmp .L_lambda_simple_end_0011
  2582                                  .L_lambda_simple_code_0011:	; lambda-simple body
  2583 00001522 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2584 00001528 740B                    	je .L_lambda_simple_arity_check_ok_0011
  2585 0000152A FF742410                	push qword [rsp + 8 * 2]
  2586 0000152E 6A01                    	push 1
  2587 00001530 E9814B0000              	jmp L_error_incorrect_arity_simple
  2588                                  .L_lambda_simple_arity_check_ok_0011:
  2589 00001535 C8000000                	enter 0, 0
  2590                                  	; preparing a tail-call
  2591                                  	; preparing a non-tail-call
  2592 00001539 488B4520                	mov rax, PARAM(0)	; param x
  2593 0000153D 50                      	push rax
  2594 0000153E 6A01                    	push 1	; arg count
  2595 00001540 488B0425[09090000]      	mov rax, qword [free_var_10]	; free var caar
  2596 00001548 803805                  	cmp byte [rax], T_undefined
  2597 0000154B 0F847F4A0000            	je L_error_fvar_undefined
  2598 00001551 803804                  	cmp byte [rax], T_closure
  2599 00001554 0F85FA4A0000            	jne L_error_non_closure
  2600 0000155A FF7001                  	push SOB_CLOSURE_ENV(rax)
  2601 0000155D FF5009                  	call SOB_CLOSURE_CODE(rax)
  2602 00001560 50                      	push rax
  2603 00001561 6A01                    	push 1	; arg count
  2604 00001563 488B0425[80090000]      	mov rax, qword [free_var_17]	; free var cadr
  2605 0000156B 803805                  	cmp byte [rax], T_undefined
  2606 0000156E 0F845C4A0000            	je L_error_fvar_undefined
  2607 00001574 803804                  	cmp byte [rax], T_closure
  2608 00001577 0F85D74A0000            	jne L_error_non_closure
  2609 0000157D FF7001                  	push SOB_CLOSURE_ENV(rax)
  2610 00001580 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2611 00001583 FF7500                  	push qword[rbp]
  2612 00001586 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2613 00001589 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2614 0000158D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2615 00001591 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2616 00001595 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2617 00001598 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2618 0000159B 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2619 000015A0 4983C103                	add r9, 3 	 ;for getting to the params
  2620 000015A4 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2621 000015A8 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2622                                  .L_tc_recycle_frame_loop_0011:
  2623 000015AB 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2624 000015AE 7410                    	je .L_tc_recycle_frame_done_0011
  2625 000015B0 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2626 000015B3 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2627 000015B6 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2628 000015BA 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2629 000015BE EBEB                    	jmp .L_tc_recycle_frame_loop_0011
  2630                                  .L_tc_recycle_frame_done_0011:
  2631 000015C0 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2632 000015C1 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2633 000015C5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2634 000015C8 C9                      	leave
  2635 000015C9 C21800                  	ret AND_KILL_FRAME(1)
  2636                                  .L_lambda_simple_end_0011:	; new closure is in rax
  2637 000015CC 48890425[1A090000]      	mov qword [free_var_11], rax
  2638 000015D4 48B8-                   	mov rax, sob_void
  2638 000015D6 [0000000000000000] 
  2639                                  
  2640 000015DE 4889C7                  	mov rdi, rax
  2641 000015E1 E86C4D0000              	call print_sexpr_if_not_void
  2642 000015E6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2643 000015EB E80D4B0000              	call malloc
  2644 000015F0 50                      	push rax
  2645 000015F1 BF00000000              	mov rdi, 8 * 0	; new rib
  2646 000015F6 E8024B0000              	call malloc
  2647 000015FB 50                      	push rax
  2648 000015FC BF08000000              	mov rdi, 8 * 1	; extended env
  2649 00001601 E8F74A0000              	call malloc
  2650 00001606 488B7D10                	mov rdi, ENV
  2651 0000160A BE00000000              	mov rsi, 0
  2652 0000160F BA01000000              	mov rdx, 1
  2653                                  .L_lambda_simple_env_loop_0012:	; ext_env[i + 1] <-- env[i]
  2654 00001614 4883FE00                	cmp rsi, 0
  2655 00001618 7410                    	je .L_lambda_simple_env_end_0012
  2656 0000161A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2657 0000161E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2658 00001622 48FFC6                  	inc rsi
  2659 00001625 48FFC2                  	inc rdx
  2660 00001628 EBEA                    	jmp .L_lambda_simple_env_loop_0012
  2661                                  .L_lambda_simple_env_end_0012:
  2662 0000162A 5B                      	pop rbx
  2663 0000162B BE00000000              	mov rsi, 0
  2664                                  .L_lambda_simple_params_loop_0012:	; copy params
  2665 00001630 4883FE00                	cmp rsi, 0
  2666 00001634 740E                    	je .L_lambda_simple_params_end_0012
  2667 00001636 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2668 0000163B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2669 0000163F 48FFC6                  	inc rsi
  2670 00001642 EBEC                    	jmp .L_lambda_simple_params_loop_0012
  2671                                  .L_lambda_simple_params_end_0012:
  2672 00001644 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2673 00001647 4889C3                  	mov rbx, rax
  2674 0000164A 58                      	pop rax
  2675 0000164B C60004                  	mov byte [rax], T_closure
  2676 0000164E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2677 00001652 48C74009[5F160000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0012
  2678 0000165A E9AA000000              	jmp .L_lambda_simple_end_0012
  2679                                  .L_lambda_simple_code_0012:	; lambda-simple body
  2680 0000165F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2681 00001665 740B                    	je .L_lambda_simple_arity_check_ok_0012
  2682 00001667 FF742410                	push qword [rsp + 8 * 2]
  2683 0000166B 6A01                    	push 1
  2684 0000166D E9444A0000              	jmp L_error_incorrect_arity_simple
  2685                                  .L_lambda_simple_arity_check_ok_0012:
  2686 00001672 C8000000                	enter 0, 0
  2687                                  	; preparing a tail-call
  2688                                  	; preparing a non-tail-call
  2689 00001676 488B4520                	mov rax, PARAM(0)	; param x
  2690 0000167A 50                      	push rax
  2691 0000167B 6A01                    	push 1	; arg count
  2692 0000167D 488B0425[80090000]      	mov rax, qword [free_var_17]	; free var cadr
  2693 00001685 803805                  	cmp byte [rax], T_undefined
  2694 00001688 0F8442490000            	je L_error_fvar_undefined
  2695 0000168E 803804                  	cmp byte [rax], T_closure
  2696 00001691 0F85BD490000            	jne L_error_non_closure
  2697 00001697 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2698 0000169A FF5009                  	call SOB_CLOSURE_CODE(rax)
  2699 0000169D 50                      	push rax
  2700 0000169E 6A01                    	push 1	; arg count
  2701 000016A0 488B0425[80090000]      	mov rax, qword [free_var_17]	; free var cadr
  2702 000016A8 803805                  	cmp byte [rax], T_undefined
  2703 000016AB 0F841F490000            	je L_error_fvar_undefined
  2704 000016B1 803804                  	cmp byte [rax], T_closure
  2705 000016B4 0F859A490000            	jne L_error_non_closure
  2706 000016BA FF7001                  	push SOB_CLOSURE_ENV(rax)
  2707 000016BD FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2708 000016C0 FF7500                  	push qword[rbp]
  2709 000016C3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2710 000016C6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2711 000016CA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2712 000016CE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2713 000016D2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2714 000016D5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2715 000016D8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2716 000016DD 4983C103                	add r9, 3 	 ;for getting to the params
  2717 000016E1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2718 000016E5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2719                                  .L_tc_recycle_frame_loop_0012:
  2720 000016E8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2721 000016EB 7410                    	je .L_tc_recycle_frame_done_0012
  2722 000016ED 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2723 000016F0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2724 000016F3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2725 000016F7 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2726 000016FB EBEB                    	jmp .L_tc_recycle_frame_loop_0012
  2727                                  .L_tc_recycle_frame_done_0012:
  2728 000016FD 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2729 000016FE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2730 00001702 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2731 00001705 C9                      	leave
  2732 00001706 C21800                  	ret AND_KILL_FRAME(1)
  2733                                  .L_lambda_simple_end_0012:	; new closure is in rax
  2734 00001709 48890425[2B090000]      	mov qword [free_var_12], rax
  2735 00001711 48B8-                   	mov rax, sob_void
  2735 00001713 [0000000000000000] 
  2736                                  
  2737 0000171B 4889C7                  	mov rdi, rax
  2738 0000171E E82F4C0000              	call print_sexpr_if_not_void
  2739 00001723 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2740 00001728 E8D0490000              	call malloc
  2741 0000172D 50                      	push rax
  2742 0000172E BF00000000              	mov rdi, 8 * 0	; new rib
  2743 00001733 E8C5490000              	call malloc
  2744 00001738 50                      	push rax
  2745 00001739 BF08000000              	mov rdi, 8 * 1	; extended env
  2746 0000173E E8BA490000              	call malloc
  2747 00001743 488B7D10                	mov rdi, ENV
  2748 00001747 BE00000000              	mov rsi, 0
  2749 0000174C BA01000000              	mov rdx, 1
  2750                                  .L_lambda_simple_env_loop_0013:	; ext_env[i + 1] <-- env[i]
  2751 00001751 4883FE00                	cmp rsi, 0
  2752 00001755 7410                    	je .L_lambda_simple_env_end_0013
  2753 00001757 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2754 0000175B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2755 0000175F 48FFC6                  	inc rsi
  2756 00001762 48FFC2                  	inc rdx
  2757 00001765 EBEA                    	jmp .L_lambda_simple_env_loop_0013
  2758                                  .L_lambda_simple_env_end_0013:
  2759 00001767 5B                      	pop rbx
  2760 00001768 BE00000000              	mov rsi, 0
  2761                                  .L_lambda_simple_params_loop_0013:	; copy params
  2762 0000176D 4883FE00                	cmp rsi, 0
  2763 00001771 740E                    	je .L_lambda_simple_params_end_0013
  2764 00001773 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2765 00001778 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2766 0000177C 48FFC6                  	inc rsi
  2767 0000177F EBEC                    	jmp .L_lambda_simple_params_loop_0013
  2768                                  .L_lambda_simple_params_end_0013:
  2769 00001781 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2770 00001784 4889C3                  	mov rbx, rax
  2771 00001787 58                      	pop rax
  2772 00001788 C60004                  	mov byte [rax], T_closure
  2773 0000178B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2774 0000178F 48C74009[9C170000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0013
  2775 00001797 E9AA000000              	jmp .L_lambda_simple_end_0013
  2776                                  .L_lambda_simple_code_0013:	; lambda-simple body
  2777 0000179C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2778 000017A2 740B                    	je .L_lambda_simple_arity_check_ok_0013
  2779 000017A4 FF742410                	push qword [rsp + 8 * 2]
  2780 000017A8 6A01                    	push 1
  2781 000017AA E907490000              	jmp L_error_incorrect_arity_simple
  2782                                  .L_lambda_simple_arity_check_ok_0013:
  2783 000017AF C8000000                	enter 0, 0
  2784                                  	; preparing a tail-call
  2785                                  	; preparing a non-tail-call
  2786 000017B3 488B4520                	mov rax, PARAM(0)	; param x
  2787 000017B7 50                      	push rax
  2788 000017B8 6A01                    	push 1	; arg count
  2789 000017BA 488B0425[080A0000]      	mov rax, qword [free_var_25]	; free var cdar
  2790 000017C2 803805                  	cmp byte [rax], T_undefined
  2791 000017C5 0F8405480000            	je L_error_fvar_undefined
  2792 000017CB 803804                  	cmp byte [rax], T_closure
  2793 000017CE 0F8580480000            	jne L_error_non_closure
  2794 000017D4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2795 000017D7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2796 000017DA 50                      	push rax
  2797 000017DB 6A01                    	push 1	; arg count
  2798 000017DD 488B0425[80090000]      	mov rax, qword [free_var_17]	; free var cadr
  2799 000017E5 803805                  	cmp byte [rax], T_undefined
  2800 000017E8 0F84E2470000            	je L_error_fvar_undefined
  2801 000017EE 803804                  	cmp byte [rax], T_closure
  2802 000017F1 0F855D480000            	jne L_error_non_closure
  2803 000017F7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2804 000017FA FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2805 000017FD FF7500                  	push qword[rbp]
  2806 00001800 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2807 00001803 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2808 00001807 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2809 0000180B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2810 0000180F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2811 00001812 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2812 00001815 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2813 0000181A 4983C103                	add r9, 3 	 ;for getting to the params
  2814 0000181E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2815 00001822 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2816                                  .L_tc_recycle_frame_loop_0013:
  2817 00001825 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2818 00001828 7410                    	je .L_tc_recycle_frame_done_0013
  2819 0000182A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2820 0000182D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2821 00001830 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2822 00001834 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2823 00001838 EBEB                    	jmp .L_tc_recycle_frame_loop_0013
  2824                                  .L_tc_recycle_frame_done_0013:
  2825 0000183A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2826 0000183B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2827 0000183F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2828 00001842 C9                      	leave
  2829 00001843 C21800                  	ret AND_KILL_FRAME(1)
  2830                                  .L_lambda_simple_end_0013:	; new closure is in rax
  2831 00001846 48890425[4D090000]      	mov qword [free_var_14], rax
  2832 0000184E 48B8-                   	mov rax, sob_void
  2832 00001850 [0000000000000000] 
  2833                                  
  2834 00001858 4889C7                  	mov rdi, rax
  2835 0000185B E8F24A0000              	call print_sexpr_if_not_void
  2836 00001860 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2837 00001865 E893480000              	call malloc
  2838 0000186A 50                      	push rax
  2839 0000186B BF00000000              	mov rdi, 8 * 0	; new rib
  2840 00001870 E888480000              	call malloc
  2841 00001875 50                      	push rax
  2842 00001876 BF08000000              	mov rdi, 8 * 1	; extended env
  2843 0000187B E87D480000              	call malloc
  2844 00001880 488B7D10                	mov rdi, ENV
  2845 00001884 BE00000000              	mov rsi, 0
  2846 00001889 BA01000000              	mov rdx, 1
  2847                                  .L_lambda_simple_env_loop_0014:	; ext_env[i + 1] <-- env[i]
  2848 0000188E 4883FE00                	cmp rsi, 0
  2849 00001892 7410                    	je .L_lambda_simple_env_end_0014
  2850 00001894 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2851 00001898 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2852 0000189C 48FFC6                  	inc rsi
  2853 0000189F 48FFC2                  	inc rdx
  2854 000018A2 EBEA                    	jmp .L_lambda_simple_env_loop_0014
  2855                                  .L_lambda_simple_env_end_0014:
  2856 000018A4 5B                      	pop rbx
  2857 000018A5 BE00000000              	mov rsi, 0
  2858                                  .L_lambda_simple_params_loop_0014:	; copy params
  2859 000018AA 4883FE00                	cmp rsi, 0
  2860 000018AE 740E                    	je .L_lambda_simple_params_end_0014
  2861 000018B0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2862 000018B5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2863 000018B9 48FFC6                  	inc rsi
  2864 000018BC EBEC                    	jmp .L_lambda_simple_params_loop_0014
  2865                                  .L_lambda_simple_params_end_0014:
  2866 000018BE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2867 000018C1 4889C3                  	mov rbx, rax
  2868 000018C4 58                      	pop rax
  2869 000018C5 C60004                  	mov byte [rax], T_closure
  2870 000018C8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2871 000018CC 48C74009[D9180000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0014
  2872 000018D4 E9AA000000              	jmp .L_lambda_simple_end_0014
  2873                                  .L_lambda_simple_code_0014:	; lambda-simple body
  2874 000018D9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2875 000018DF 740B                    	je .L_lambda_simple_arity_check_ok_0014
  2876 000018E1 FF742410                	push qword [rsp + 8 * 2]
  2877 000018E5 6A01                    	push 1
  2878 000018E7 E9CA470000              	jmp L_error_incorrect_arity_simple
  2879                                  .L_lambda_simple_arity_check_ok_0014:
  2880 000018EC C8000000                	enter 0, 0
  2881                                  	; preparing a tail-call
  2882                                  	; preparing a non-tail-call
  2883 000018F0 488B4520                	mov rax, PARAM(0)	; param x
  2884 000018F4 50                      	push rax
  2885 000018F5 6A01                    	push 1	; arg count
  2886 000018F7 488B0425[7F0A0000]      	mov rax, qword [free_var_32]	; free var cddr
  2887 000018FF 803805                  	cmp byte [rax], T_undefined
  2888 00001902 0F84C8460000            	je L_error_fvar_undefined
  2889 00001908 803804                  	cmp byte [rax], T_closure
  2890 0000190B 0F8543470000            	jne L_error_non_closure
  2891 00001911 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2892 00001914 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2893 00001917 50                      	push rax
  2894 00001918 6A01                    	push 1	; arg count
  2895 0000191A 488B0425[80090000]      	mov rax, qword [free_var_17]	; free var cadr
  2896 00001922 803805                  	cmp byte [rax], T_undefined
  2897 00001925 0F84A5460000            	je L_error_fvar_undefined
  2898 0000192B 803804                  	cmp byte [rax], T_closure
  2899 0000192E 0F8520470000            	jne L_error_non_closure
  2900 00001934 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2901 00001937 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2902 0000193A FF7500                  	push qword[rbp]
  2903 0000193D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2904 00001940 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2905 00001944 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2906 00001948 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2907 0000194C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2908 0000194F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2909 00001952 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2910 00001957 4983C103                	add r9, 3 	 ;for getting to the params
  2911 0000195B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2912 0000195F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2913                                  .L_tc_recycle_frame_loop_0014:
  2914 00001962 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2915 00001965 7410                    	je .L_tc_recycle_frame_done_0014
  2916 00001967 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2917 0000196A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2918 0000196D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2919 00001971 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2920 00001975 EBEB                    	jmp .L_tc_recycle_frame_loop_0014
  2921                                  .L_tc_recycle_frame_done_0014:
  2922 00001977 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2923 00001978 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2924 0000197C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2925 0000197F C9                      	leave
  2926 00001980 C21800                  	ret AND_KILL_FRAME(1)
  2927                                  .L_lambda_simple_end_0014:	; new closure is in rax
  2928 00001983 48890425[5E090000]      	mov qword [free_var_15], rax
  2929 0000198B 48B8-                   	mov rax, sob_void
  2929 0000198D [0000000000000000] 
  2930                                  
  2931 00001995 4889C7                  	mov rdi, rax
  2932 00001998 E8B5490000              	call print_sexpr_if_not_void
  2933 0000199D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2934 000019A2 E856470000              	call malloc
  2935 000019A7 50                      	push rax
  2936 000019A8 BF00000000              	mov rdi, 8 * 0	; new rib
  2937 000019AD E84B470000              	call malloc
  2938 000019B2 50                      	push rax
  2939 000019B3 BF08000000              	mov rdi, 8 * 1	; extended env
  2940 000019B8 E840470000              	call malloc
  2941 000019BD 488B7D10                	mov rdi, ENV
  2942 000019C1 BE00000000              	mov rsi, 0
  2943 000019C6 BA01000000              	mov rdx, 1
  2944                                  .L_lambda_simple_env_loop_0015:	; ext_env[i + 1] <-- env[i]
  2945 000019CB 4883FE00                	cmp rsi, 0
  2946 000019CF 7410                    	je .L_lambda_simple_env_end_0015
  2947 000019D1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2948 000019D5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2949 000019D9 48FFC6                  	inc rsi
  2950 000019DC 48FFC2                  	inc rdx
  2951 000019DF EBEA                    	jmp .L_lambda_simple_env_loop_0015
  2952                                  .L_lambda_simple_env_end_0015:
  2953 000019E1 5B                      	pop rbx
  2954 000019E2 BE00000000              	mov rsi, 0
  2955                                  .L_lambda_simple_params_loop_0015:	; copy params
  2956 000019E7 4883FE00                	cmp rsi, 0
  2957 000019EB 740E                    	je .L_lambda_simple_params_end_0015
  2958 000019ED 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2959 000019F2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2960 000019F6 48FFC6                  	inc rsi
  2961 000019F9 EBEC                    	jmp .L_lambda_simple_params_loop_0015
  2962                                  .L_lambda_simple_params_end_0015:
  2963 000019FB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2964 000019FE 4889C3                  	mov rbx, rax
  2965 00001A01 58                      	pop rax
  2966 00001A02 C60004                  	mov byte [rax], T_closure
  2967 00001A05 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2968 00001A09 48C74009[161A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0015
  2969 00001A11 E9AA000000              	jmp .L_lambda_simple_end_0015
  2970                                  .L_lambda_simple_code_0015:	; lambda-simple body
  2971 00001A16 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2972 00001A1C 740B                    	je .L_lambda_simple_arity_check_ok_0015
  2973 00001A1E FF742410                	push qword [rsp + 8 * 2]
  2974 00001A22 6A01                    	push 1
  2975 00001A24 E98D460000              	jmp L_error_incorrect_arity_simple
  2976                                  .L_lambda_simple_arity_check_ok_0015:
  2977 00001A29 C8000000                	enter 0, 0
  2978                                  	; preparing a tail-call
  2979                                  	; preparing a non-tail-call
  2980 00001A2D 488B4520                	mov rax, PARAM(0)	; param x
  2981 00001A31 50                      	push rax
  2982 00001A32 6A01                    	push 1	; arg count
  2983 00001A34 488B0425[09090000]      	mov rax, qword [free_var_10]	; free var caar
  2984 00001A3C 803805                  	cmp byte [rax], T_undefined
  2985 00001A3F 0F848B450000            	je L_error_fvar_undefined
  2986 00001A45 803804                  	cmp byte [rax], T_closure
  2987 00001A48 0F8506460000            	jne L_error_non_closure
  2988 00001A4E FF7001                  	push SOB_CLOSURE_ENV(rax)
  2989 00001A51 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2990 00001A54 50                      	push rax
  2991 00001A55 6A01                    	push 1	; arg count
  2992 00001A57 488B0425[080A0000]      	mov rax, qword [free_var_25]	; free var cdar
  2993 00001A5F 803805                  	cmp byte [rax], T_undefined
  2994 00001A62 0F8468450000            	je L_error_fvar_undefined
  2995 00001A68 803804                  	cmp byte [rax], T_closure
  2996 00001A6B 0F85E3450000            	jne L_error_non_closure
  2997 00001A71 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2998 00001A74 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2999 00001A77 FF7500                  	push qword[rbp]
  3000 00001A7A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3001 00001A7D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3002 00001A81 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3003 00001A85 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3004 00001A89 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3005 00001A8C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3006 00001A8F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3007 00001A94 4983C103                	add r9, 3 	 ;for getting to the params
  3008 00001A98 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3009 00001A9C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3010                                  .L_tc_recycle_frame_loop_0015:
  3011 00001A9F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3012 00001AA2 7410                    	je .L_tc_recycle_frame_done_0015
  3013 00001AA4 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3014 00001AA7 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3015 00001AAA 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3016 00001AAE 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3017 00001AB2 EBEB                    	jmp .L_tc_recycle_frame_loop_0015
  3018                                  .L_tc_recycle_frame_done_0015:
  3019 00001AB4 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3020 00001AB5 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3021 00001AB9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3022 00001ABC C9                      	leave
  3023 00001ABD C21800                  	ret AND_KILL_FRAME(1)
  3024                                  .L_lambda_simple_end_0015:	; new closure is in rax
  3025 00001AC0 48890425[A2090000]      	mov qword [free_var_19], rax
  3026 00001AC8 48B8-                   	mov rax, sob_void
  3026 00001ACA [0000000000000000] 
  3027                                  
  3028 00001AD2 4889C7                  	mov rdi, rax
  3029 00001AD5 E878480000              	call print_sexpr_if_not_void
  3030 00001ADA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3031 00001ADF E819460000              	call malloc
  3032 00001AE4 50                      	push rax
  3033 00001AE5 BF00000000              	mov rdi, 8 * 0	; new rib
  3034 00001AEA E80E460000              	call malloc
  3035 00001AEF 50                      	push rax
  3036 00001AF0 BF08000000              	mov rdi, 8 * 1	; extended env
  3037 00001AF5 E803460000              	call malloc
  3038 00001AFA 488B7D10                	mov rdi, ENV
  3039 00001AFE BE00000000              	mov rsi, 0
  3040 00001B03 BA01000000              	mov rdx, 1
  3041                                  .L_lambda_simple_env_loop_0016:	; ext_env[i + 1] <-- env[i]
  3042 00001B08 4883FE00                	cmp rsi, 0
  3043 00001B0C 7410                    	je .L_lambda_simple_env_end_0016
  3044 00001B0E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3045 00001B12 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3046 00001B16 48FFC6                  	inc rsi
  3047 00001B19 48FFC2                  	inc rdx
  3048 00001B1C EBEA                    	jmp .L_lambda_simple_env_loop_0016
  3049                                  .L_lambda_simple_env_end_0016:
  3050 00001B1E 5B                      	pop rbx
  3051 00001B1F BE00000000              	mov rsi, 0
  3052                                  .L_lambda_simple_params_loop_0016:	; copy params
  3053 00001B24 4883FE00                	cmp rsi, 0
  3054 00001B28 740E                    	je .L_lambda_simple_params_end_0016
  3055 00001B2A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3056 00001B2F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3057 00001B33 48FFC6                  	inc rsi
  3058 00001B36 EBEC                    	jmp .L_lambda_simple_params_loop_0016
  3059                                  .L_lambda_simple_params_end_0016:
  3060 00001B38 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3061 00001B3B 4889C3                  	mov rbx, rax
  3062 00001B3E 58                      	pop rax
  3063 00001B3F C60004                  	mov byte [rax], T_closure
  3064 00001B42 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3065 00001B46 48C74009[531B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0016
  3066 00001B4E E9AA000000              	jmp .L_lambda_simple_end_0016
  3067                                  .L_lambda_simple_code_0016:	; lambda-simple body
  3068 00001B53 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3069 00001B59 740B                    	je .L_lambda_simple_arity_check_ok_0016
  3070 00001B5B FF742410                	push qword [rsp + 8 * 2]
  3071 00001B5F 6A01                    	push 1
  3072 00001B61 E950450000              	jmp L_error_incorrect_arity_simple
  3073                                  .L_lambda_simple_arity_check_ok_0016:
  3074 00001B66 C8000000                	enter 0, 0
  3075                                  	; preparing a tail-call
  3076                                  	; preparing a non-tail-call
  3077 00001B6A 488B4520                	mov rax, PARAM(0)	; param x
  3078 00001B6E 50                      	push rax
  3079 00001B6F 6A01                    	push 1	; arg count
  3080 00001B71 488B0425[80090000]      	mov rax, qword [free_var_17]	; free var cadr
  3081 00001B79 803805                  	cmp byte [rax], T_undefined
  3082 00001B7C 0F844E440000            	je L_error_fvar_undefined
  3083 00001B82 803804                  	cmp byte [rax], T_closure
  3084 00001B85 0F85C9440000            	jne L_error_non_closure
  3085 00001B8B FF7001                  	push SOB_CLOSURE_ENV(rax)
  3086 00001B8E FF5009                  	call SOB_CLOSURE_CODE(rax)
  3087 00001B91 50                      	push rax
  3088 00001B92 6A01                    	push 1	; arg count
  3089 00001B94 488B0425[080A0000]      	mov rax, qword [free_var_25]	; free var cdar
  3090 00001B9C 803805                  	cmp byte [rax], T_undefined
  3091 00001B9F 0F842B440000            	je L_error_fvar_undefined
  3092 00001BA5 803804                  	cmp byte [rax], T_closure
  3093 00001BA8 0F85A6440000            	jne L_error_non_closure
  3094 00001BAE FF7001                  	push SOB_CLOSURE_ENV(rax)
  3095 00001BB1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3096 00001BB4 FF7500                  	push qword[rbp]
  3097 00001BB7 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3098 00001BBA 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3099 00001BBE 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3100 00001BC2 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3101 00001BC6 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3102 00001BC9 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3103 00001BCC 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3104 00001BD1 4983C103                	add r9, 3 	 ;for getting to the params
  3105 00001BD5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3106 00001BD9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3107                                  .L_tc_recycle_frame_loop_0016:
  3108 00001BDC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3109 00001BDF 7410                    	je .L_tc_recycle_frame_done_0016
  3110 00001BE1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3111 00001BE4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3112 00001BE7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3113 00001BEB 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3114 00001BEF EBEB                    	jmp .L_tc_recycle_frame_loop_0016
  3115                                  .L_tc_recycle_frame_done_0016:
  3116 00001BF1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3117 00001BF2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3118 00001BF6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3119 00001BF9 C9                      	leave
  3120 00001BFA C21800                  	ret AND_KILL_FRAME(1)
  3121                                  .L_lambda_simple_end_0016:	; new closure is in rax
  3122 00001BFD 48890425[B3090000]      	mov qword [free_var_20], rax
  3123 00001C05 48B8-                   	mov rax, sob_void
  3123 00001C07 [0000000000000000] 
  3124                                  
  3125 00001C0F 4889C7                  	mov rdi, rax
  3126 00001C12 E83B470000              	call print_sexpr_if_not_void
  3127 00001C17 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3128 00001C1C E8DC440000              	call malloc
  3129 00001C21 50                      	push rax
  3130 00001C22 BF00000000              	mov rdi, 8 * 0	; new rib
  3131 00001C27 E8D1440000              	call malloc
  3132 00001C2C 50                      	push rax
  3133 00001C2D BF08000000              	mov rdi, 8 * 1	; extended env
  3134 00001C32 E8C6440000              	call malloc
  3135 00001C37 488B7D10                	mov rdi, ENV
  3136 00001C3B BE00000000              	mov rsi, 0
  3137 00001C40 BA01000000              	mov rdx, 1
  3138                                  .L_lambda_simple_env_loop_0017:	; ext_env[i + 1] <-- env[i]
  3139 00001C45 4883FE00                	cmp rsi, 0
  3140 00001C49 7410                    	je .L_lambda_simple_env_end_0017
  3141 00001C4B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3142 00001C4F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3143 00001C53 48FFC6                  	inc rsi
  3144 00001C56 48FFC2                  	inc rdx
  3145 00001C59 EBEA                    	jmp .L_lambda_simple_env_loop_0017
  3146                                  .L_lambda_simple_env_end_0017:
  3147 00001C5B 5B                      	pop rbx
  3148 00001C5C BE00000000              	mov rsi, 0
  3149                                  .L_lambda_simple_params_loop_0017:	; copy params
  3150 00001C61 4883FE00                	cmp rsi, 0
  3151 00001C65 740E                    	je .L_lambda_simple_params_end_0017
  3152 00001C67 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3153 00001C6C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3154 00001C70 48FFC6                  	inc rsi
  3155 00001C73 EBEC                    	jmp .L_lambda_simple_params_loop_0017
  3156                                  .L_lambda_simple_params_end_0017:
  3157 00001C75 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3158 00001C78 4889C3                  	mov rbx, rax
  3159 00001C7B 58                      	pop rax
  3160 00001C7C C60004                  	mov byte [rax], T_closure
  3161 00001C7F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3162 00001C83 48C74009[901C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0017
  3163 00001C8B E9AA000000              	jmp .L_lambda_simple_end_0017
  3164                                  .L_lambda_simple_code_0017:	; lambda-simple body
  3165 00001C90 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3166 00001C96 740B                    	je .L_lambda_simple_arity_check_ok_0017
  3167 00001C98 FF742410                	push qword [rsp + 8 * 2]
  3168 00001C9C 6A01                    	push 1
  3169 00001C9E E913440000              	jmp L_error_incorrect_arity_simple
  3170                                  .L_lambda_simple_arity_check_ok_0017:
  3171 00001CA3 C8000000                	enter 0, 0
  3172                                  	; preparing a tail-call
  3173                                  	; preparing a non-tail-call
  3174 00001CA7 488B4520                	mov rax, PARAM(0)	; param x
  3175 00001CAB 50                      	push rax
  3176 00001CAC 6A01                    	push 1	; arg count
  3177 00001CAE 488B0425[080A0000]      	mov rax, qword [free_var_25]	; free var cdar
  3178 00001CB6 803805                  	cmp byte [rax], T_undefined
  3179 00001CB9 0F8411430000            	je L_error_fvar_undefined
  3180 00001CBF 803804                  	cmp byte [rax], T_closure
  3181 00001CC2 0F858C430000            	jne L_error_non_closure
  3182 00001CC8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3183 00001CCB FF5009                  	call SOB_CLOSURE_CODE(rax)
  3184 00001CCE 50                      	push rax
  3185 00001CCF 6A01                    	push 1	; arg count
  3186 00001CD1 488B0425[080A0000]      	mov rax, qword [free_var_25]	; free var cdar
  3187 00001CD9 803805                  	cmp byte [rax], T_undefined
  3188 00001CDC 0F84EE420000            	je L_error_fvar_undefined
  3189 00001CE2 803804                  	cmp byte [rax], T_closure
  3190 00001CE5 0F8569430000            	jne L_error_non_closure
  3191 00001CEB FF7001                  	push SOB_CLOSURE_ENV(rax)
  3192 00001CEE FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3193 00001CF1 FF7500                  	push qword[rbp]
  3194 00001CF4 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3195 00001CF7 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3196 00001CFB 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3197 00001CFF 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3198 00001D03 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3199 00001D06 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3200 00001D09 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3201 00001D0E 4983C103                	add r9, 3 	 ;for getting to the params
  3202 00001D12 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3203 00001D16 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3204                                  .L_tc_recycle_frame_loop_0017:
  3205 00001D19 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3206 00001D1C 7410                    	je .L_tc_recycle_frame_done_0017
  3207 00001D1E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3208 00001D21 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3209 00001D24 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3210 00001D28 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3211 00001D2C EBEB                    	jmp .L_tc_recycle_frame_loop_0017
  3212                                  .L_tc_recycle_frame_done_0017:
  3213 00001D2E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3214 00001D2F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3215 00001D33 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3216 00001D36 C9                      	leave
  3217 00001D37 C21800                  	ret AND_KILL_FRAME(1)
  3218                                  .L_lambda_simple_end_0017:	; new closure is in rax
  3219 00001D3A 48890425[D5090000]      	mov qword [free_var_22], rax
  3220 00001D42 48B8-                   	mov rax, sob_void
  3220 00001D44 [0000000000000000] 
  3221                                  
  3222 00001D4C 4889C7                  	mov rdi, rax
  3223 00001D4F E8FE450000              	call print_sexpr_if_not_void
  3224 00001D54 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3225 00001D59 E89F430000              	call malloc
  3226 00001D5E 50                      	push rax
  3227 00001D5F BF00000000              	mov rdi, 8 * 0	; new rib
  3228 00001D64 E894430000              	call malloc
  3229 00001D69 50                      	push rax
  3230 00001D6A BF08000000              	mov rdi, 8 * 1	; extended env
  3231 00001D6F E889430000              	call malloc
  3232 00001D74 488B7D10                	mov rdi, ENV
  3233 00001D78 BE00000000              	mov rsi, 0
  3234 00001D7D BA01000000              	mov rdx, 1
  3235                                  .L_lambda_simple_env_loop_0018:	; ext_env[i + 1] <-- env[i]
  3236 00001D82 4883FE00                	cmp rsi, 0
  3237 00001D86 7410                    	je .L_lambda_simple_env_end_0018
  3238 00001D88 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3239 00001D8C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3240 00001D90 48FFC6                  	inc rsi
  3241 00001D93 48FFC2                  	inc rdx
  3242 00001D96 EBEA                    	jmp .L_lambda_simple_env_loop_0018
  3243                                  .L_lambda_simple_env_end_0018:
  3244 00001D98 5B                      	pop rbx
  3245 00001D99 BE00000000              	mov rsi, 0
  3246                                  .L_lambda_simple_params_loop_0018:	; copy params
  3247 00001D9E 4883FE00                	cmp rsi, 0
  3248 00001DA2 740E                    	je .L_lambda_simple_params_end_0018
  3249 00001DA4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3250 00001DA9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3251 00001DAD 48FFC6                  	inc rsi
  3252 00001DB0 EBEC                    	jmp .L_lambda_simple_params_loop_0018
  3253                                  .L_lambda_simple_params_end_0018:
  3254 00001DB2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3255 00001DB5 4889C3                  	mov rbx, rax
  3256 00001DB8 58                      	pop rax
  3257 00001DB9 C60004                  	mov byte [rax], T_closure
  3258 00001DBC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3259 00001DC0 48C74009[CD1D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0018
  3260 00001DC8 E9AA000000              	jmp .L_lambda_simple_end_0018
  3261                                  .L_lambda_simple_code_0018:	; lambda-simple body
  3262 00001DCD 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3263 00001DD3 740B                    	je .L_lambda_simple_arity_check_ok_0018
  3264 00001DD5 FF742410                	push qword [rsp + 8 * 2]
  3265 00001DD9 6A01                    	push 1
  3266 00001DDB E9D6420000              	jmp L_error_incorrect_arity_simple
  3267                                  .L_lambda_simple_arity_check_ok_0018:
  3268 00001DE0 C8000000                	enter 0, 0
  3269                                  	; preparing a tail-call
  3270                                  	; preparing a non-tail-call
  3271 00001DE4 488B4520                	mov rax, PARAM(0)	; param x
  3272 00001DE8 50                      	push rax
  3273 00001DE9 6A01                    	push 1	; arg count
  3274 00001DEB 488B0425[7F0A0000]      	mov rax, qword [free_var_32]	; free var cddr
  3275 00001DF3 803805                  	cmp byte [rax], T_undefined
  3276 00001DF6 0F84D4410000            	je L_error_fvar_undefined
  3277 00001DFC 803804                  	cmp byte [rax], T_closure
  3278 00001DFF 0F854F420000            	jne L_error_non_closure
  3279 00001E05 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3280 00001E08 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3281 00001E0B 50                      	push rax
  3282 00001E0C 6A01                    	push 1	; arg count
  3283 00001E0E 488B0425[080A0000]      	mov rax, qword [free_var_25]	; free var cdar
  3284 00001E16 803805                  	cmp byte [rax], T_undefined
  3285 00001E19 0F84B1410000            	je L_error_fvar_undefined
  3286 00001E1F 803804                  	cmp byte [rax], T_closure
  3287 00001E22 0F852C420000            	jne L_error_non_closure
  3288 00001E28 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3289 00001E2B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3290 00001E2E FF7500                  	push qword[rbp]
  3291 00001E31 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3292 00001E34 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3293 00001E38 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3294 00001E3C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3295 00001E40 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3296 00001E43 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3297 00001E46 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3298 00001E4B 4983C103                	add r9, 3 	 ;for getting to the params
  3299 00001E4F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3300 00001E53 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3301                                  .L_tc_recycle_frame_loop_0018:
  3302 00001E56 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3303 00001E59 7410                    	je .L_tc_recycle_frame_done_0018
  3304 00001E5B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3305 00001E5E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3306 00001E61 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3307 00001E65 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3308 00001E69 EBEB                    	jmp .L_tc_recycle_frame_loop_0018
  3309                                  .L_tc_recycle_frame_done_0018:
  3310 00001E6B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3311 00001E6C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3312 00001E70 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3313 00001E73 C9                      	leave
  3314 00001E74 C21800                  	ret AND_KILL_FRAME(1)
  3315                                  .L_lambda_simple_end_0018:	; new closure is in rax
  3316 00001E77 48890425[E6090000]      	mov qword [free_var_23], rax
  3317 00001E7F 48B8-                   	mov rax, sob_void
  3317 00001E81 [0000000000000000] 
  3318                                  
  3319 00001E89 4889C7                  	mov rdi, rax
  3320 00001E8C E8C1440000              	call print_sexpr_if_not_void
  3321 00001E91 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3322 00001E96 E862420000              	call malloc
  3323 00001E9B 50                      	push rax
  3324 00001E9C BF00000000              	mov rdi, 8 * 0	; new rib
  3325 00001EA1 E857420000              	call malloc
  3326 00001EA6 50                      	push rax
  3327 00001EA7 BF08000000              	mov rdi, 8 * 1	; extended env
  3328 00001EAC E84C420000              	call malloc
  3329 00001EB1 488B7D10                	mov rdi, ENV
  3330 00001EB5 BE00000000              	mov rsi, 0
  3331 00001EBA BA01000000              	mov rdx, 1
  3332                                  .L_lambda_simple_env_loop_0019:	; ext_env[i + 1] <-- env[i]
  3333 00001EBF 4883FE00                	cmp rsi, 0
  3334 00001EC3 7410                    	je .L_lambda_simple_env_end_0019
  3335 00001EC5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3336 00001EC9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3337 00001ECD 48FFC6                  	inc rsi
  3338 00001ED0 48FFC2                  	inc rdx
  3339 00001ED3 EBEA                    	jmp .L_lambda_simple_env_loop_0019
  3340                                  .L_lambda_simple_env_end_0019:
  3341 00001ED5 5B                      	pop rbx
  3342 00001ED6 BE00000000              	mov rsi, 0
  3343                                  .L_lambda_simple_params_loop_0019:	; copy params
  3344 00001EDB 4883FE00                	cmp rsi, 0
  3345 00001EDF 740E                    	je .L_lambda_simple_params_end_0019
  3346 00001EE1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3347 00001EE6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3348 00001EEA 48FFC6                  	inc rsi
  3349 00001EED EBEC                    	jmp .L_lambda_simple_params_loop_0019
  3350                                  .L_lambda_simple_params_end_0019:
  3351 00001EEF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3352 00001EF2 4889C3                  	mov rbx, rax
  3353 00001EF5 58                      	pop rax
  3354 00001EF6 C60004                  	mov byte [rax], T_closure
  3355 00001EF9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3356 00001EFD 48C74009[0A1F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0019
  3357 00001F05 E9AA000000              	jmp .L_lambda_simple_end_0019
  3358                                  .L_lambda_simple_code_0019:	; lambda-simple body
  3359 00001F0A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3360 00001F10 740B                    	je .L_lambda_simple_arity_check_ok_0019
  3361 00001F12 FF742410                	push qword [rsp + 8 * 2]
  3362 00001F16 6A01                    	push 1
  3363 00001F18 E999410000              	jmp L_error_incorrect_arity_simple
  3364                                  .L_lambda_simple_arity_check_ok_0019:
  3365 00001F1D C8000000                	enter 0, 0
  3366                                  	; preparing a tail-call
  3367                                  	; preparing a non-tail-call
  3368 00001F21 488B4520                	mov rax, PARAM(0)	; param x
  3369 00001F25 50                      	push rax
  3370 00001F26 6A01                    	push 1	; arg count
  3371 00001F28 488B0425[09090000]      	mov rax, qword [free_var_10]	; free var caar
  3372 00001F30 803805                  	cmp byte [rax], T_undefined
  3373 00001F33 0F8497400000            	je L_error_fvar_undefined
  3374 00001F39 803804                  	cmp byte [rax], T_closure
  3375 00001F3C 0F8512410000            	jne L_error_non_closure
  3376 00001F42 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3377 00001F45 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3378 00001F48 50                      	push rax
  3379 00001F49 6A01                    	push 1	; arg count
  3380 00001F4B 488B0425[7F0A0000]      	mov rax, qword [free_var_32]	; free var cddr
  3381 00001F53 803805                  	cmp byte [rax], T_undefined
  3382 00001F56 0F8474400000            	je L_error_fvar_undefined
  3383 00001F5C 803804                  	cmp byte [rax], T_closure
  3384 00001F5F 0F85EF400000            	jne L_error_non_closure
  3385 00001F65 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3386 00001F68 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3387 00001F6B FF7500                  	push qword[rbp]
  3388 00001F6E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3389 00001F71 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3390 00001F75 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3391 00001F79 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3392 00001F7D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3393 00001F80 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3394 00001F83 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3395 00001F88 4983C103                	add r9, 3 	 ;for getting to the params
  3396 00001F8C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3397 00001F90 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3398                                  .L_tc_recycle_frame_loop_0019:
  3399 00001F93 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3400 00001F96 7410                    	je .L_tc_recycle_frame_done_0019
  3401 00001F98 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3402 00001F9B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3403 00001F9E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3404 00001FA2 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3405 00001FA6 EBEB                    	jmp .L_tc_recycle_frame_loop_0019
  3406                                  .L_tc_recycle_frame_done_0019:
  3407 00001FA8 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3408 00001FA9 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3409 00001FAD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3410 00001FB0 C9                      	leave
  3411 00001FB1 C21800                  	ret AND_KILL_FRAME(1)
  3412                                  .L_lambda_simple_end_0019:	; new closure is in rax
  3413 00001FB4 48890425[190A0000]      	mov qword [free_var_26], rax
  3414 00001FBC 48B8-                   	mov rax, sob_void
  3414 00001FBE [0000000000000000] 
  3415                                  
  3416 00001FC6 4889C7                  	mov rdi, rax
  3417 00001FC9 E884430000              	call print_sexpr_if_not_void
  3418 00001FCE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3419 00001FD3 E825410000              	call malloc
  3420 00001FD8 50                      	push rax
  3421 00001FD9 BF00000000              	mov rdi, 8 * 0	; new rib
  3422 00001FDE E81A410000              	call malloc
  3423 00001FE3 50                      	push rax
  3424 00001FE4 BF08000000              	mov rdi, 8 * 1	; extended env
  3425 00001FE9 E80F410000              	call malloc
  3426 00001FEE 488B7D10                	mov rdi, ENV
  3427 00001FF2 BE00000000              	mov rsi, 0
  3428 00001FF7 BA01000000              	mov rdx, 1
  3429                                  .L_lambda_simple_env_loop_001a:	; ext_env[i + 1] <-- env[i]
  3430 00001FFC 4883FE00                	cmp rsi, 0
  3431 00002000 7410                    	je .L_lambda_simple_env_end_001a
  3432 00002002 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3433 00002006 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3434 0000200A 48FFC6                  	inc rsi
  3435 0000200D 48FFC2                  	inc rdx
  3436 00002010 EBEA                    	jmp .L_lambda_simple_env_loop_001a
  3437                                  .L_lambda_simple_env_end_001a:
  3438 00002012 5B                      	pop rbx
  3439 00002013 BE00000000              	mov rsi, 0
  3440                                  .L_lambda_simple_params_loop_001a:	; copy params
  3441 00002018 4883FE00                	cmp rsi, 0
  3442 0000201C 740E                    	je .L_lambda_simple_params_end_001a
  3443 0000201E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3444 00002023 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3445 00002027 48FFC6                  	inc rsi
  3446 0000202A EBEC                    	jmp .L_lambda_simple_params_loop_001a
  3447                                  .L_lambda_simple_params_end_001a:
  3448 0000202C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3449 0000202F 4889C3                  	mov rbx, rax
  3450 00002032 58                      	pop rax
  3451 00002033 C60004                  	mov byte [rax], T_closure
  3452 00002036 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3453 0000203A 48C74009[47200000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001a
  3454 00002042 E9AA000000              	jmp .L_lambda_simple_end_001a
  3455                                  .L_lambda_simple_code_001a:	; lambda-simple body
  3456 00002047 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3457 0000204D 740B                    	je .L_lambda_simple_arity_check_ok_001a
  3458 0000204F FF742410                	push qword [rsp + 8 * 2]
  3459 00002053 6A01                    	push 1
  3460 00002055 E95C400000              	jmp L_error_incorrect_arity_simple
  3461                                  .L_lambda_simple_arity_check_ok_001a:
  3462 0000205A C8000000                	enter 0, 0
  3463                                  	; preparing a tail-call
  3464                                  	; preparing a non-tail-call
  3465 0000205E 488B4520                	mov rax, PARAM(0)	; param x
  3466 00002062 50                      	push rax
  3467 00002063 6A01                    	push 1	; arg count
  3468 00002065 488B0425[80090000]      	mov rax, qword [free_var_17]	; free var cadr
  3469 0000206D 803805                  	cmp byte [rax], T_undefined
  3470 00002070 0F845A3F0000            	je L_error_fvar_undefined
  3471 00002076 803804                  	cmp byte [rax], T_closure
  3472 00002079 0F85D53F0000            	jne L_error_non_closure
  3473 0000207F FF7001                  	push SOB_CLOSURE_ENV(rax)
  3474 00002082 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3475 00002085 50                      	push rax
  3476 00002086 6A01                    	push 1	; arg count
  3477 00002088 488B0425[7F0A0000]      	mov rax, qword [free_var_32]	; free var cddr
  3478 00002090 803805                  	cmp byte [rax], T_undefined
  3479 00002093 0F84373F0000            	je L_error_fvar_undefined
  3480 00002099 803804                  	cmp byte [rax], T_closure
  3481 0000209C 0F85B23F0000            	jne L_error_non_closure
  3482 000020A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3483 000020A5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3484 000020A8 FF7500                  	push qword[rbp]
  3485 000020AB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3486 000020AE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3487 000020B2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3488 000020B6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3489 000020BA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3490 000020BD 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3491 000020C0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3492 000020C5 4983C103                	add r9, 3 	 ;for getting to the params
  3493 000020C9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3494 000020CD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3495                                  .L_tc_recycle_frame_loop_001a:
  3496 000020D0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3497 000020D3 7410                    	je .L_tc_recycle_frame_done_001a
  3498 000020D5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3499 000020D8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3500 000020DB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3501 000020DF 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3502 000020E3 EBEB                    	jmp .L_tc_recycle_frame_loop_001a
  3503                                  .L_tc_recycle_frame_done_001a:
  3504 000020E5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3505 000020E6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3506 000020EA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3507 000020ED C9                      	leave
  3508 000020EE C21800                  	ret AND_KILL_FRAME(1)
  3509                                  .L_lambda_simple_end_001a:	; new closure is in rax
  3510 000020F1 48890425[2A0A0000]      	mov qword [free_var_27], rax
  3511 000020F9 48B8-                   	mov rax, sob_void
  3511 000020FB [0000000000000000] 
  3512                                  
  3513 00002103 4889C7                  	mov rdi, rax
  3514 00002106 E847420000              	call print_sexpr_if_not_void
  3515 0000210B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3516 00002110 E8E83F0000              	call malloc
  3517 00002115 50                      	push rax
  3518 00002116 BF00000000              	mov rdi, 8 * 0	; new rib
  3519 0000211B E8DD3F0000              	call malloc
  3520 00002120 50                      	push rax
  3521 00002121 BF08000000              	mov rdi, 8 * 1	; extended env
  3522 00002126 E8D23F0000              	call malloc
  3523 0000212B 488B7D10                	mov rdi, ENV
  3524 0000212F BE00000000              	mov rsi, 0
  3525 00002134 BA01000000              	mov rdx, 1
  3526                                  .L_lambda_simple_env_loop_001b:	; ext_env[i + 1] <-- env[i]
  3527 00002139 4883FE00                	cmp rsi, 0
  3528 0000213D 7410                    	je .L_lambda_simple_env_end_001b
  3529 0000213F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3530 00002143 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3531 00002147 48FFC6                  	inc rsi
  3532 0000214A 48FFC2                  	inc rdx
  3533 0000214D EBEA                    	jmp .L_lambda_simple_env_loop_001b
  3534                                  .L_lambda_simple_env_end_001b:
  3535 0000214F 5B                      	pop rbx
  3536 00002150 BE00000000              	mov rsi, 0
  3537                                  .L_lambda_simple_params_loop_001b:	; copy params
  3538 00002155 4883FE00                	cmp rsi, 0
  3539 00002159 740E                    	je .L_lambda_simple_params_end_001b
  3540 0000215B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3541 00002160 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3542 00002164 48FFC6                  	inc rsi
  3543 00002167 EBEC                    	jmp .L_lambda_simple_params_loop_001b
  3544                                  .L_lambda_simple_params_end_001b:
  3545 00002169 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3546 0000216C 4889C3                  	mov rbx, rax
  3547 0000216F 58                      	pop rax
  3548 00002170 C60004                  	mov byte [rax], T_closure
  3549 00002173 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3550 00002177 48C74009[84210000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001b
  3551 0000217F E9AA000000              	jmp .L_lambda_simple_end_001b
  3552                                  .L_lambda_simple_code_001b:	; lambda-simple body
  3553 00002184 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3554 0000218A 740B                    	je .L_lambda_simple_arity_check_ok_001b
  3555 0000218C FF742410                	push qword [rsp + 8 * 2]
  3556 00002190 6A01                    	push 1
  3557 00002192 E91F3F0000              	jmp L_error_incorrect_arity_simple
  3558                                  .L_lambda_simple_arity_check_ok_001b:
  3559 00002197 C8000000                	enter 0, 0
  3560                                  	; preparing a tail-call
  3561                                  	; preparing a non-tail-call
  3562 0000219B 488B4520                	mov rax, PARAM(0)	; param x
  3563 0000219F 50                      	push rax
  3564 000021A0 6A01                    	push 1	; arg count
  3565 000021A2 488B0425[080A0000]      	mov rax, qword [free_var_25]	; free var cdar
  3566 000021AA 803805                  	cmp byte [rax], T_undefined
  3567 000021AD 0F841D3E0000            	je L_error_fvar_undefined
  3568 000021B3 803804                  	cmp byte [rax], T_closure
  3569 000021B6 0F85983E0000            	jne L_error_non_closure
  3570 000021BC FF7001                  	push SOB_CLOSURE_ENV(rax)
  3571 000021BF FF5009                  	call SOB_CLOSURE_CODE(rax)
  3572 000021C2 50                      	push rax
  3573 000021C3 6A01                    	push 1	; arg count
  3574 000021C5 488B0425[7F0A0000]      	mov rax, qword [free_var_32]	; free var cddr
  3575 000021CD 803805                  	cmp byte [rax], T_undefined
  3576 000021D0 0F84FA3D0000            	je L_error_fvar_undefined
  3577 000021D6 803804                  	cmp byte [rax], T_closure
  3578 000021D9 0F85753E0000            	jne L_error_non_closure
  3579 000021DF FF7001                  	push SOB_CLOSURE_ENV(rax)
  3580 000021E2 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3581 000021E5 FF7500                  	push qword[rbp]
  3582 000021E8 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3583 000021EB 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3584 000021EF 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3585 000021F3 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3586 000021F7 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3587 000021FA 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3588 000021FD 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3589 00002202 4983C103                	add r9, 3 	 ;for getting to the params
  3590 00002206 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3591 0000220A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3592                                  .L_tc_recycle_frame_loop_001b:
  3593 0000220D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3594 00002210 7410                    	je .L_tc_recycle_frame_done_001b
  3595 00002212 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3596 00002215 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3597 00002218 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3598 0000221C 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3599 00002220 EBEB                    	jmp .L_tc_recycle_frame_loop_001b
  3600                                  .L_tc_recycle_frame_done_001b:
  3601 00002222 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3602 00002223 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3603 00002227 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3604 0000222A C9                      	leave
  3605 0000222B C21800                  	ret AND_KILL_FRAME(1)
  3606                                  .L_lambda_simple_end_001b:	; new closure is in rax
  3607 0000222E 48890425[4C0A0000]      	mov qword [free_var_29], rax
  3608 00002236 48B8-                   	mov rax, sob_void
  3608 00002238 [0000000000000000] 
  3609                                  
  3610 00002240 4889C7                  	mov rdi, rax
  3611 00002243 E80A410000              	call print_sexpr_if_not_void
  3612 00002248 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3613 0000224D E8AB3E0000              	call malloc
  3614 00002252 50                      	push rax
  3615 00002253 BF00000000              	mov rdi, 8 * 0	; new rib
  3616 00002258 E8A03E0000              	call malloc
  3617 0000225D 50                      	push rax
  3618 0000225E BF08000000              	mov rdi, 8 * 1	; extended env
  3619 00002263 E8953E0000              	call malloc
  3620 00002268 488B7D10                	mov rdi, ENV
  3621 0000226C BE00000000              	mov rsi, 0
  3622 00002271 BA01000000              	mov rdx, 1
  3623                                  .L_lambda_simple_env_loop_001c:	; ext_env[i + 1] <-- env[i]
  3624 00002276 4883FE00                	cmp rsi, 0
  3625 0000227A 7410                    	je .L_lambda_simple_env_end_001c
  3626 0000227C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3627 00002280 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3628 00002284 48FFC6                  	inc rsi
  3629 00002287 48FFC2                  	inc rdx
  3630 0000228A EBEA                    	jmp .L_lambda_simple_env_loop_001c
  3631                                  .L_lambda_simple_env_end_001c:
  3632 0000228C 5B                      	pop rbx
  3633 0000228D BE00000000              	mov rsi, 0
  3634                                  .L_lambda_simple_params_loop_001c:	; copy params
  3635 00002292 4883FE00                	cmp rsi, 0
  3636 00002296 740E                    	je .L_lambda_simple_params_end_001c
  3637 00002298 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3638 0000229D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3639 000022A1 48FFC6                  	inc rsi
  3640 000022A4 EBEC                    	jmp .L_lambda_simple_params_loop_001c
  3641                                  .L_lambda_simple_params_end_001c:
  3642 000022A6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3643 000022A9 4889C3                  	mov rbx, rax
  3644 000022AC 58                      	pop rax
  3645 000022AD C60004                  	mov byte [rax], T_closure
  3646 000022B0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3647 000022B4 48C74009[C1220000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001c
  3648 000022BC E9AA000000              	jmp .L_lambda_simple_end_001c
  3649                                  .L_lambda_simple_code_001c:	; lambda-simple body
  3650 000022C1 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3651 000022C7 740B                    	je .L_lambda_simple_arity_check_ok_001c
  3652 000022C9 FF742410                	push qword [rsp + 8 * 2]
  3653 000022CD 6A01                    	push 1
  3654 000022CF E9E23D0000              	jmp L_error_incorrect_arity_simple
  3655                                  .L_lambda_simple_arity_check_ok_001c:
  3656 000022D4 C8000000                	enter 0, 0
  3657                                  	; preparing a tail-call
  3658                                  	; preparing a non-tail-call
  3659 000022D8 488B4520                	mov rax, PARAM(0)	; param x
  3660 000022DC 50                      	push rax
  3661 000022DD 6A01                    	push 1	; arg count
  3662 000022DF 488B0425[7F0A0000]      	mov rax, qword [free_var_32]	; free var cddr
  3663 000022E7 803805                  	cmp byte [rax], T_undefined
  3664 000022EA 0F84E03C0000            	je L_error_fvar_undefined
  3665 000022F0 803804                  	cmp byte [rax], T_closure
  3666 000022F3 0F855B3D0000            	jne L_error_non_closure
  3667 000022F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3668 000022FC FF5009                  	call SOB_CLOSURE_CODE(rax)
  3669 000022FF 50                      	push rax
  3670 00002300 6A01                    	push 1	; arg count
  3671 00002302 488B0425[7F0A0000]      	mov rax, qword [free_var_32]	; free var cddr
  3672 0000230A 803805                  	cmp byte [rax], T_undefined
  3673 0000230D 0F84BD3C0000            	je L_error_fvar_undefined
  3674 00002313 803804                  	cmp byte [rax], T_closure
  3675 00002316 0F85383D0000            	jne L_error_non_closure
  3676 0000231C FF7001                  	push SOB_CLOSURE_ENV(rax)
  3677 0000231F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3678 00002322 FF7500                  	push qword[rbp]
  3679 00002325 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3680 00002328 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3681 0000232C 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3682 00002330 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3683 00002334 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3684 00002337 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3685 0000233A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3686 0000233F 4983C103                	add r9, 3 	 ;for getting to the params
  3687 00002343 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3688 00002347 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3689                                  .L_tc_recycle_frame_loop_001c:
  3690 0000234A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3691 0000234D 7410                    	je .L_tc_recycle_frame_done_001c
  3692 0000234F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3693 00002352 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3694 00002355 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3695 00002359 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3696 0000235D EBEB                    	jmp .L_tc_recycle_frame_loop_001c
  3697                                  .L_tc_recycle_frame_done_001c:
  3698 0000235F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3699 00002360 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3700 00002364 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3701 00002367 C9                      	leave
  3702 00002368 C21800                  	ret AND_KILL_FRAME(1)
  3703                                  .L_lambda_simple_end_001c:	; new closure is in rax
  3704 0000236B 48890425[5D0A0000]      	mov qword [free_var_30], rax
  3705 00002373 48B8-                   	mov rax, sob_void
  3705 00002375 [0000000000000000] 
  3706                                  
  3707 0000237D 4889C7                  	mov rdi, rax
  3708 00002380 E8CD3F0000              	call print_sexpr_if_not_void
  3709 00002385 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3710 0000238A E86E3D0000              	call malloc
  3711 0000238F 50                      	push rax
  3712 00002390 BF00000000              	mov rdi, 8 * 0	; new rib
  3713 00002395 E8633D0000              	call malloc
  3714 0000239A 50                      	push rax
  3715 0000239B BF08000000              	mov rdi, 8 * 1	; extended env
  3716 000023A0 E8583D0000              	call malloc
  3717 000023A5 488B7D10                	mov rdi, ENV
  3718 000023A9 BE00000000              	mov rsi, 0
  3719 000023AE BA01000000              	mov rdx, 1
  3720                                  .L_lambda_simple_env_loop_001d:	; ext_env[i + 1] <-- env[i]
  3721 000023B3 4883FE00                	cmp rsi, 0
  3722 000023B7 7410                    	je .L_lambda_simple_env_end_001d
  3723 000023B9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3724 000023BD 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3725 000023C1 48FFC6                  	inc rsi
  3726 000023C4 48FFC2                  	inc rdx
  3727 000023C7 EBEA                    	jmp .L_lambda_simple_env_loop_001d
  3728                                  .L_lambda_simple_env_end_001d:
  3729 000023C9 5B                      	pop rbx
  3730 000023CA BE00000000              	mov rsi, 0
  3731                                  .L_lambda_simple_params_loop_001d:	; copy params
  3732 000023CF 4883FE00                	cmp rsi, 0
  3733 000023D3 740E                    	je .L_lambda_simple_params_end_001d
  3734 000023D5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3735 000023DA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3736 000023DE 48FFC6                  	inc rsi
  3737 000023E1 EBEC                    	jmp .L_lambda_simple_params_loop_001d
  3738                                  .L_lambda_simple_params_end_001d:
  3739 000023E3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3740 000023E6 4889C3                  	mov rbx, rax
  3741 000023E9 58                      	pop rax
  3742 000023EA C60004                  	mov byte [rax], T_closure
  3743 000023ED 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3744 000023F1 48C74009[FE230000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001d
  3745 000023F9 E91C010000              	jmp .L_lambda_simple_end_001d
  3746                                  .L_lambda_simple_code_001d:	; lambda-simple body
  3747 000023FE 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3748 00002404 740B                    	je .L_lambda_simple_arity_check_ok_001d
  3749 00002406 FF742410                	push qword [rsp + 8 * 2]
  3750 0000240A 6A01                    	push 1
  3751 0000240C E9A53C0000              	jmp L_error_incorrect_arity_simple
  3752                                  .L_lambda_simple_arity_check_ok_001d:
  3753 00002411 C8000000                	enter 0, 0
  3754                                  	; preparing a non-tail-call
  3755 00002415 488B4520                	mov rax, PARAM(0)	; param e
  3756 00002419 50                      	push rax
  3757 0000241A 6A01                    	push 1	; arg count
  3758 0000241C 488B0425[3A0B0000]      	mov rax, qword [free_var_43]	; free var null?
  3759 00002424 803805                  	cmp byte [rax], T_undefined
  3760 00002427 0F84A33B0000            	je L_error_fvar_undefined
  3761 0000242D 803804                  	cmp byte [rax], T_closure
  3762 00002430 0F851E3C0000            	jne L_error_non_closure
  3763 00002436 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3764 00002439 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3765 0000243C 483D[02000000]          	cmp rax, sob_boolean_false
  3766 00002442 0F85CE000000            	jne .L_or_end_0001
  3767                                  	; preparing a non-tail-call
  3768 00002448 488B4520                	mov rax, PARAM(0)	; param e
  3769 0000244C 50                      	push rax
  3770 0000244D 6A01                    	push 1	; arg count
  3771 0000244F 488B0425[5C0B0000]      	mov rax, qword [free_var_45]	; free var pair?
  3772 00002457 803805                  	cmp byte [rax], T_undefined
  3773 0000245A 0F84703B0000            	je L_error_fvar_undefined
  3774 00002460 803804                  	cmp byte [rax], T_closure
  3775 00002463 0F85EB3B0000            	jne L_error_non_closure
  3776 00002469 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3777 0000246C FF5009                  	call SOB_CLOSURE_CODE(rax)
  3778 0000246F 483D[02000000]          	cmp rax, sob_boolean_false
  3779 00002475 0F8491000000            	je .L_if_else_0001
  3780                                  	; preparing a tail-call
  3781                                  	; preparing a non-tail-call
  3782 0000247B 488B4520                	mov rax, PARAM(0)	; param e
  3783 0000247F 50                      	push rax
  3784 00002480 6A01                    	push 1	; arg count
  3785 00002482 488B0425[900A0000]      	mov rax, qword [free_var_33]	; free var cdr
  3786 0000248A 803805                  	cmp byte [rax], T_undefined
  3787 0000248D 0F843D3B0000            	je L_error_fvar_undefined
  3788 00002493 803804                  	cmp byte [rax], T_closure
  3789 00002496 0F85B83B0000            	jne L_error_non_closure
  3790 0000249C FF7001                  	push SOB_CLOSURE_ENV(rax)
  3791 0000249F FF5009                  	call SOB_CLOSURE_CODE(rax)
  3792 000024A2 50                      	push rax
  3793 000024A3 6A01                    	push 1	; arg count
  3794 000024A5 488B0425[070B0000]      	mov rax, qword [free_var_40]	; free var list?
  3795 000024AD 803805                  	cmp byte [rax], T_undefined
  3796 000024B0 0F841A3B0000            	je L_error_fvar_undefined
  3797 000024B6 803804                  	cmp byte [rax], T_closure
  3798 000024B9 0F85953B0000            	jne L_error_non_closure
  3799 000024BF FF7001                  	push SOB_CLOSURE_ENV(rax)
  3800 000024C2 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3801 000024C5 FF7500                  	push qword[rbp]
  3802 000024C8 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3803 000024CB 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3804 000024CF 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3805 000024D3 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3806 000024D7 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3807 000024DA 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3808 000024DD 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3809 000024E2 4983C103                	add r9, 3 	 ;for getting to the params
  3810 000024E6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3811 000024EA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3812                                  .L_tc_recycle_frame_loop_001d:
  3813 000024ED 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3814 000024F0 7410                    	je .L_tc_recycle_frame_done_001d
  3815 000024F2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3816 000024F5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3817 000024F8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3818 000024FC 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3819 00002500 EBEB                    	jmp .L_tc_recycle_frame_loop_001d
  3820                                  .L_tc_recycle_frame_done_001d:
  3821 00002502 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3822 00002503 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3823 00002507 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3824 0000250A EB0A                    	jmp .L_if_end_0001
  3825                                  .L_if_else_0001:
  3826 0000250C 48B8-                   	mov rax, L_constants + 2
  3826 0000250E [0200000000000000] 
  3827                                  .L_if_end_0001:
  3828                                  .L_or_end_0001:
  3829 00002516 C9                      	leave
  3830 00002517 C21800                  	ret AND_KILL_FRAME(1)
  3831                                  .L_lambda_simple_end_001d:	; new closure is in rax
  3832 0000251A 48890425[070B0000]      	mov qword [free_var_40], rax
  3833 00002522 48B8-                   	mov rax, sob_void
  3833 00002524 [0000000000000000] 
  3834                                  
  3835 0000252C 4889C7                  	mov rdi, rax
  3836 0000252F E81E3E0000              	call print_sexpr_if_not_void
  3837 00002534 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3838 00002539 E8BF3B0000              	call malloc
  3839 0000253E 50                      	push rax
  3840 0000253F BF00000000              	mov rdi, 8 * 0	; new rib
  3841 00002544 E8B43B0000              	call malloc
  3842 00002549 50                      	push rax
  3843 0000254A BF08000000              	mov rdi, 8 * 1	; extended env
  3844 0000254F E8A93B0000              	call malloc
  3845 00002554 488B7D10                	mov rdi, ENV
  3846 00002558 BE00000000              	mov rsi, 0
  3847 0000255D BA01000000              	mov rdx, 1
  3848                                  .L_lambda_opt_env_loop_0001:	; ext_env[i + 1] <-- env[i]
  3849 00002562 4883FE00                	cmp rsi, 0
  3850 00002566 7410                    	je .L_lambda_opt_env_end_0001
  3851 00002568 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3852 0000256C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3853 00002570 48FFC6                  	inc rsi
  3854 00002573 48FFC2                  	inc rdx
  3855 00002576 EBEA                    	jmp .L_lambda_opt_env_loop_0001
  3856                                  .L_lambda_opt_env_end_0001:
  3857 00002578 5B                      	pop rbx
  3858 00002579 BE00000000              	mov rsi, 0
  3859                                  .L_lambda_opt_params_loop_0001:	; copy params
  3860 0000257E 4883FE00                	cmp rsi, 0
  3861 00002582 740E                    	je .L_lambda_opt_params_end_0001
  3862 00002584 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3863 00002589 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3864 0000258D 48FFC6                  	inc rsi
  3865 00002590 EBEC                    	jmp .L_lambda_opt_params_loop_0001
  3866                                  .L_lambda_opt_params_end_0001:
  3867 00002592 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3868 00002595 4889C3                  	mov rbx, rax
  3869 00002598 58                      	pop rax
  3870 00002599 C60004                  	mov byte [rax], T_closure
  3871 0000259C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3872 000025A0 48C74009[AD250000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0001
  3873 000025A8 E919010000              	jmp .L_lambda_opt_end_0001
  3874                                  .L_lambda_opt_code_0001:	; lambda-opt body
  3875 000025AD 48837C241000            	cmp qword [rsp + 8 * 2], 0
  3876 000025B3 740D                    	je .L_lambda_opt_arity_check_exact_0001
  3877 000025B5 7F4C                    	jg .L_lambda_opt_arity_check_more_0001
  3878 000025B7 FF742410                	push qword [rsp + 8 * 2]
  3879 000025BB 6A00                    	push 0
  3880 000025BD E9083B0000              	jmp L_error_incorrect_arity_opt
  3881                                  .L_lambda_opt_arity_check_exact_0001:
  3882 000025C2 4883EC08                	sub rsp, 8
  3883 000025C6 488B442408              	mov rax, qword[rsp + 8 *1]
  3884 000025CB 48890424                	mov qword[rsp], rax  
  3885 000025CF 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  3886 000025D4 4889442408              	mov qword[rsp + 8 * 1], rax
  3887 000025D9 B801000000              	mov rax, 1
  3888 000025DE 4889442410              	mov qword[rsp + 8 *2], rax
  3889 000025E3 48B8-                   	mov rax, sob_nil
  3889 000025E5 [0100000000000000] 
  3890 000025ED 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  3891 000025F2 C8000000                	enter 0, 0
  3892 000025F6 488B4520                	mov rax, PARAM(0)	; param args
  3893 000025FA C9                      	leave
  3894 000025FB C21000                  	ret AND_KILL_FRAME(0)
  3895 000025FE E9C3000000              	jmp .L_lambda_opt_end_0001	; new closure is in rax
  3896                                  .L_lambda_opt_arity_check_more_0001:
  3897 00002603 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  3898 00002608 49B9-                   	mov r9, sob_nil
  3898 0000260A [0100000000000000] 
  3899 00002612 4889E3                  	mov rbx, rsp 
  3900 00002615 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  3901 00002619 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  3902 0000261C 49C1E003                	shl r8, 3
  3903 00002620 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  3904 00002623 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  3905                                  .L_lambda_opt_stack_shrink_loop_0001:
  3906 00002628 4983F800                	cmp r8, 0
  3907 0000262C 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0001
  3908 0000262E BF11000000              	mov rdi, 1+8+8	;for pair
  3909 00002633 E8C53A0000              	call malloc	 ;to create the pair in the stack
  3910 00002638 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  3911 0000263B 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
  3912 0000263E 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
  3913 00002642 4C894809                 	mov qword[rax+1+8],r9
  3914 00002646 4989C1                  	mov r9, rax	 ; for the recursion 
  3915 00002649 49FFC8                  	dec r8 	;we finished copy another opt param to the list
  3916 0000264C 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
  3917 00002650 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0001
  3918                                  .L_lambda_opt_stack_shrink_loop_exit_0001:
  3919 00002652 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
  3920 00002657 4883E901                	sub rcx, 1
  3921 0000265B 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
  3922 0000265F 4801CC                  	add rsp, rcx	 ;shrinking the stack
  3923 00002662 4889E0                  	mov rax, rsp
  3924 00002665 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
  3925 00002668 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
  3926 0000266C 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
  3927 0000266F 4883C018                	add rax, 3 * 8 	;now rax is param 0
  3928 00002673 49C1E003                	shl r8, 3 	; convert to byte
  3929 00002677 4C01C0                  	add rax, r8 	;now rax is the top of the stack
  3930 0000267A 4C8908                  	mov qword[rax], r9	;puting the list at the top
  3931 0000267D 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
  3932 00002681 4889E3                  	mov rbx, rsp 
  3933 00002684 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
  3934 00002687 41BA00000000            	mov r10, 0 	 ;r10 is the not opt params length
  3935 0000268D 49FFCA                  	dec r10 
  3936 00002690 49C1E203                	shl r10, 3	;to get bytes
  3937 00002694 4883C318                	add rbx, 3*8 	;rbx is the first param
  3938 00002698 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
  3939 0000269B 4889E0                  	mov rax, rsp
  3940 0000269E 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  3941 000026A1 48C744241001000000      	mov qword [rsp+2*8], 1
  3942 000026AA 488B5808                	mov rbx, qword[rax + 8 *1]
  3943 000026AE 48895C2408              	mov qword [rsp + 1*8] ,rbx
  3944 000026B3 488B18                  	mov rbx, qword[rax]
  3945 000026B6 48891C24                	mov qword [rsp], rbx
  3946 000026BA C8000000                	enter 0, 0
  3947 000026BE 488B4520                	mov rax, PARAM(0)	; param args
  3948 000026C2 C9                      	leave
  3949 000026C3 C21800                  	ret AND_KILL_FRAME(1)
  3950                                  .L_lambda_opt_end_0001:	; new closure is in rax
  3951 000026C6 48890425[E50A0000]      	mov qword [free_var_38], rax
  3952 000026CE 48B8-                   	mov rax, sob_void
  3952 000026D0 [0000000000000000] 
  3953                                  
  3954 000026D8 4889C7                  	mov rdi, rax
  3955 000026DB E8723C0000              	call print_sexpr_if_not_void
  3956 000026E0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3957 000026E5 E8133A0000              	call malloc
  3958 000026EA 50                      	push rax
  3959 000026EB BF00000000              	mov rdi, 8 * 0	; new rib
  3960 000026F0 E8083A0000              	call malloc
  3961 000026F5 50                      	push rax
  3962 000026F6 BF08000000              	mov rdi, 8 * 1	; extended env
  3963 000026FB E8FD390000              	call malloc
  3964 00002700 488B7D10                	mov rdi, ENV
  3965 00002704 BE00000000              	mov rsi, 0
  3966 00002709 BA01000000              	mov rdx, 1
  3967                                  .L_lambda_simple_env_loop_001e:	; ext_env[i + 1] <-- env[i]
  3968 0000270E 4883FE00                	cmp rsi, 0
  3969 00002712 7410                    	je .L_lambda_simple_env_end_001e
  3970 00002714 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3971 00002718 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3972 0000271C 48FFC6                  	inc rsi
  3973 0000271F 48FFC2                  	inc rdx
  3974 00002722 EBEA                    	jmp .L_lambda_simple_env_loop_001e
  3975                                  .L_lambda_simple_env_end_001e:
  3976 00002724 5B                      	pop rbx
  3977 00002725 BE00000000              	mov rsi, 0
  3978                                  .L_lambda_simple_params_loop_001e:	; copy params
  3979 0000272A 4883FE00                	cmp rsi, 0
  3980 0000272E 740E                    	je .L_lambda_simple_params_end_001e
  3981 00002730 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3982 00002735 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3983 00002739 48FFC6                  	inc rsi
  3984 0000273C EBEC                    	jmp .L_lambda_simple_params_loop_001e
  3985                                  .L_lambda_simple_params_end_001e:
  3986 0000273E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3987 00002741 4889C3                  	mov rbx, rax
  3988 00002744 58                      	pop rax
  3989 00002745 C60004                  	mov byte [rax], T_closure
  3990 00002748 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3991 0000274C 48C74009[56270000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001e
  3992 00002754 EB3D                    	jmp .L_lambda_simple_end_001e
  3993                                  .L_lambda_simple_code_001e:	; lambda-simple body
  3994 00002756 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3995 0000275C 740B                    	je .L_lambda_simple_arity_check_ok_001e
  3996 0000275E FF742410                	push qword [rsp + 8 * 2]
  3997 00002762 6A01                    	push 1
  3998 00002764 E94D390000              	jmp L_error_incorrect_arity_simple
  3999                                  .L_lambda_simple_arity_check_ok_001e:
  4000 00002769 C8000000                	enter 0, 0
  4001 0000276D 488B4520                	mov rax, PARAM(0)	; param x
  4002 00002771 483D[02000000]          	cmp rax, sob_boolean_false
  4003 00002777 740C                    	je .L_if_else_0002
  4004 00002779 48B8-                   	mov rax, L_constants + 2
  4004 0000277B [0200000000000000] 
  4005 00002783 EB0A                    	jmp .L_if_end_0002
  4006                                  .L_if_else_0002:
  4007 00002785 48B8-                   	mov rax, L_constants + 3
  4007 00002787 [0300000000000000] 
  4008                                  .L_if_end_0002:
  4009 0000278F C9                      	leave
  4010 00002790 C21800                  	ret AND_KILL_FRAME(1)
  4011                                  .L_lambda_simple_end_001e:	; new closure is in rax
  4012 00002793 48890425[290B0000]      	mov qword [free_var_42], rax
  4013 0000279B 48B8-                   	mov rax, sob_void
  4013 0000279D [0000000000000000] 
  4014                                  
  4015 000027A5 4889C7                  	mov rdi, rax
  4016 000027A8 E8A53B0000              	call print_sexpr_if_not_void
  4017 000027AD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4018 000027B2 E846390000              	call malloc
  4019 000027B7 50                      	push rax
  4020 000027B8 BF00000000              	mov rdi, 8 * 0	; new rib
  4021 000027BD E83B390000              	call malloc
  4022 000027C2 50                      	push rax
  4023 000027C3 BF08000000              	mov rdi, 8 * 1	; extended env
  4024 000027C8 E830390000              	call malloc
  4025 000027CD 488B7D10                	mov rdi, ENV
  4026 000027D1 BE00000000              	mov rsi, 0
  4027 000027D6 BA01000000              	mov rdx, 1
  4028                                  .L_lambda_simple_env_loop_001f:	; ext_env[i + 1] <-- env[i]
  4029 000027DB 4883FE00                	cmp rsi, 0
  4030 000027DF 7410                    	je .L_lambda_simple_env_end_001f
  4031 000027E1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4032 000027E5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4033 000027E9 48FFC6                  	inc rsi
  4034 000027EC 48FFC2                  	inc rdx
  4035 000027EF EBEA                    	jmp .L_lambda_simple_env_loop_001f
  4036                                  .L_lambda_simple_env_end_001f:
  4037 000027F1 5B                      	pop rbx
  4038 000027F2 BE00000000              	mov rsi, 0
  4039                                  .L_lambda_simple_params_loop_001f:	; copy params
  4040 000027F7 4883FE00                	cmp rsi, 0
  4041 000027FB 740E                    	je .L_lambda_simple_params_end_001f
  4042 000027FD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4043 00002802 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4044 00002806 48FFC6                  	inc rsi
  4045 00002809 EBEC                    	jmp .L_lambda_simple_params_loop_001f
  4046                                  .L_lambda_simple_params_end_001f:
  4047 0000280B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4048 0000280E 4889C3                  	mov rbx, rax
  4049 00002811 58                      	pop rax
  4050 00002812 C60004                  	mov byte [rax], T_closure
  4051 00002815 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4052 00002819 48C74009[26280000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001f
  4053 00002821 E9B6000000              	jmp .L_lambda_simple_end_001f
  4054                                  .L_lambda_simple_code_001f:	; lambda-simple body
  4055 00002826 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4056 0000282C 740B                    	je .L_lambda_simple_arity_check_ok_001f
  4057 0000282E FF742410                	push qword [rsp + 8 * 2]
  4058 00002832 6A01                    	push 1
  4059 00002834 E97D380000              	jmp L_error_incorrect_arity_simple
  4060                                  .L_lambda_simple_arity_check_ok_001f:
  4061 00002839 C8000000                	enter 0, 0
  4062                                  	; preparing a non-tail-call
  4063 0000283D 488B4520                	mov rax, PARAM(0)	; param q
  4064 00002841 50                      	push rax
  4065 00002842 6A01                    	push 1	; arg count
  4066 00002844 488B0425[D40A0000]      	mov rax, qword [free_var_37]	; free var integer?
  4067 0000284C 803805                  	cmp byte [rax], T_undefined
  4068 0000284F 0F847B370000            	je L_error_fvar_undefined
  4069 00002855 803804                  	cmp byte [rax], T_closure
  4070 00002858 0F85F6370000            	jne L_error_non_closure
  4071 0000285E FF7001                  	push SOB_CLOSURE_ENV(rax)
  4072 00002861 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4073 00002864 483D[02000000]          	cmp rax, sob_boolean_false
  4074 0000286A 756C                    	jne .L_or_end_0002
  4075                                  	; preparing a tail-call
  4076 0000286C 488B4520                	mov rax, PARAM(0)	; param q
  4077 00002870 50                      	push rax
  4078 00002871 6A01                    	push 1	; arg count
  4079 00002873 488B0425[C30A0000]      	mov rax, qword [free_var_36]	; free var fraction?
  4080 0000287B 803805                  	cmp byte [rax], T_undefined
  4081 0000287E 0F844C370000            	je L_error_fvar_undefined
  4082 00002884 803804                  	cmp byte [rax], T_closure
  4083 00002887 0F85C7370000            	jne L_error_non_closure
  4084 0000288D FF7001                  	push SOB_CLOSURE_ENV(rax)
  4085 00002890 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4086 00002893 FF7500                  	push qword[rbp]
  4087 00002896 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4088 00002899 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4089 0000289D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4090 000028A1 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4091 000028A5 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4092 000028A8 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4093 000028AB 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4094 000028B0 4983C103                	add r9, 3 	 ;for getting to the params
  4095 000028B4 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4096 000028B8 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4097                                  .L_tc_recycle_frame_loop_001e:
  4098 000028BB 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4099 000028BE 7410                    	je .L_tc_recycle_frame_done_001e
  4100 000028C0 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4101 000028C3 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4102 000028C6 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4103 000028CA 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4104 000028CE EBEB                    	jmp .L_tc_recycle_frame_loop_001e
  4105                                  .L_tc_recycle_frame_done_001e:
  4106 000028D0 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4107 000028D1 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4108 000028D5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4109                                  .L_or_end_0002:
  4110 000028D8 C9                      	leave
  4111 000028D9 C21800                  	ret AND_KILL_FRAME(1)
  4112                                  .L_lambda_simple_end_001f:	; new closure is in rax
  4113 000028DC 48890425[6D0B0000]      	mov qword [free_var_46], rax
  4114 000028E4 48B8-                   	mov rax, sob_void
  4114 000028E6 [0000000000000000] 
  4115                                  
  4116 000028EE 4889C7                  	mov rdi, rax
  4117 000028F1 E85C3A0000              	call print_sexpr_if_not_void
  4118                                  	; preparing a non-tail-call
  4119 000028F6 48B8-                   	mov rax, L_constants + 1993
  4119 000028F8 [C907000000000000] 
  4120 00002900 50                      	push rax
  4121 00002901 6A01                    	push 1	; arg count
  4122 00002903 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4123 00002908 E8F0370000              	call malloc
  4124 0000290D 50                      	push rax
  4125 0000290E BF00000000              	mov rdi, 8 * 0	; new rib
  4126 00002913 E8E5370000              	call malloc
  4127 00002918 50                      	push rax
  4128 00002919 BF08000000              	mov rdi, 8 * 1	; extended env
  4129 0000291E E8DA370000              	call malloc
  4130 00002923 488B7D10                	mov rdi, ENV
  4131 00002927 BE00000000              	mov rsi, 0
  4132 0000292C BA01000000              	mov rdx, 1
  4133                                  .L_lambda_simple_env_loop_0020:	; ext_env[i + 1] <-- env[i]
  4134 00002931 4883FE00                	cmp rsi, 0
  4135 00002935 7410                    	je .L_lambda_simple_env_end_0020
  4136 00002937 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4137 0000293B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4138 0000293F 48FFC6                  	inc rsi
  4139 00002942 48FFC2                  	inc rdx
  4140 00002945 EBEA                    	jmp .L_lambda_simple_env_loop_0020
  4141                                  .L_lambda_simple_env_end_0020:
  4142 00002947 5B                      	pop rbx
  4143 00002948 BE00000000              	mov rsi, 0
  4144                                  .L_lambda_simple_params_loop_0020:	; copy params
  4145 0000294D 4883FE00                	cmp rsi, 0
  4146 00002951 740E                    	je .L_lambda_simple_params_end_0020
  4147 00002953 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4148 00002958 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4149 0000295C 48FFC6                  	inc rsi
  4150 0000295F EBEC                    	jmp .L_lambda_simple_params_loop_0020
  4151                                  .L_lambda_simple_params_end_0020:
  4152 00002961 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4153 00002964 4889C3                  	mov rbx, rax
  4154 00002967 58                      	pop rax
  4155 00002968 C60004                  	mov byte [rax], T_closure
  4156 0000296B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4157 0000296F 48C74009[7C290000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0020
  4158 00002977 E972040000              	jmp .L_lambda_simple_end_0020
  4159                                  .L_lambda_simple_code_0020:	; lambda-simple body
  4160 0000297C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4161 00002982 740B                    	je .L_lambda_simple_arity_check_ok_0020
  4162 00002984 FF742410                	push qword [rsp + 8 * 2]
  4163 00002988 6A01                    	push 1
  4164 0000298A E927370000              	jmp L_error_incorrect_arity_simple
  4165                                  .L_lambda_simple_arity_check_ok_0020:
  4166 0000298F C8000000                	enter 0, 0
  4167 00002993 BF08000000              	mov rdi, 8*1
  4168 00002998 E860370000              	call malloc
  4169 0000299D 488B5D20                	mov rbx, PARAM(0)
  4170 000029A1 488918                  	mov qword[rax], rbx
  4171 000029A4 48894520                	mov PARAM(0), rax
  4172 000029A8 48B8-                   	mov rax, sob_void
  4172 000029AA [0000000000000000] 
  4173                                  
  4174 000029B2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4175 000029B7 E841370000              	call malloc
  4176 000029BC 50                      	push rax
  4177 000029BD BF08000000              	mov rdi, 8 * 1	; new rib
  4178 000029C2 E836370000              	call malloc
  4179 000029C7 50                      	push rax
  4180 000029C8 BF10000000              	mov rdi, 8 * 2	; extended env
  4181 000029CD E82B370000              	call malloc
  4182 000029D2 488B7D10                	mov rdi, ENV
  4183 000029D6 BE00000000              	mov rsi, 0
  4184 000029DB BA01000000              	mov rdx, 1
  4185                                  .L_lambda_simple_env_loop_0021:	; ext_env[i + 1] <-- env[i]
  4186 000029E0 4883FE01                	cmp rsi, 1
  4187 000029E4 7410                    	je .L_lambda_simple_env_end_0021
  4188 000029E6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4189 000029EA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4190 000029EE 48FFC6                  	inc rsi
  4191 000029F1 48FFC2                  	inc rdx
  4192 000029F4 EBEA                    	jmp .L_lambda_simple_env_loop_0021
  4193                                  .L_lambda_simple_env_end_0021:
  4194 000029F6 5B                      	pop rbx
  4195 000029F7 BE00000000              	mov rsi, 0
  4196                                  .L_lambda_simple_params_loop_0021:	; copy params
  4197 000029FC 4883FE01                	cmp rsi, 1
  4198 00002A00 740E                    	je .L_lambda_simple_params_end_0021
  4199 00002A02 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4200 00002A07 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4201 00002A0B 48FFC6                  	inc rsi
  4202 00002A0E EBEC                    	jmp .L_lambda_simple_params_loop_0021
  4203                                  .L_lambda_simple_params_end_0021:
  4204 00002A10 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4205 00002A13 4889C3                  	mov rbx, rax
  4206 00002A16 58                      	pop rax
  4207 00002A17 C60004                  	mov byte [rax], T_closure
  4208 00002A1A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4209 00002A1E 48C74009[2B2A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0021
  4210 00002A26 E92E010000              	jmp .L_lambda_simple_end_0021
  4211                                  .L_lambda_simple_code_0021:	; lambda-simple body
  4212 00002A2B 48837C241002            	cmp qword [rsp + 8 * 2], 2
  4213 00002A31 740B                    	je .L_lambda_simple_arity_check_ok_0021
  4214 00002A33 FF742410                	push qword [rsp + 8 * 2]
  4215 00002A37 6A02                    	push 2
  4216 00002A39 E978360000              	jmp L_error_incorrect_arity_simple
  4217                                  .L_lambda_simple_arity_check_ok_0021:
  4218 00002A3E C8000000                	enter 0, 0
  4219                                  	; preparing a non-tail-call
  4220 00002A42 488B4528                	mov rax, PARAM(1)	; param s
  4221 00002A46 50                      	push rax
  4222 00002A47 6A01                    	push 1	; arg count
  4223 00002A49 488B0425[3A0B0000]      	mov rax, qword [free_var_43]	; free var null?
  4224 00002A51 803805                  	cmp byte [rax], T_undefined
  4225 00002A54 0F8476350000            	je L_error_fvar_undefined
  4226 00002A5A 803804                  	cmp byte [rax], T_closure
  4227 00002A5D 0F85F1350000            	jne L_error_non_closure
  4228 00002A63 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4229 00002A66 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4230 00002A69 483D[02000000]          	cmp rax, sob_boolean_false
  4231 00002A6F 7409                    	je .L_if_else_0003
  4232 00002A71 488B4520                	mov rax, PARAM(0)	; param a
  4233 00002A75 E9DB000000              	jmp .L_if_end_0003
  4234                                  .L_if_else_0003:
  4235                                  	; preparing a tail-call
  4236                                  	; preparing a non-tail-call
  4237                                  	; preparing a non-tail-call
  4238 00002A7A 488B4528                	mov rax, PARAM(1)	; param s
  4239 00002A7E 50                      	push rax
  4240 00002A7F 6A01                    	push 1	; arg count
  4241 00002A81 488B0425[900A0000]      	mov rax, qword [free_var_33]	; free var cdr
  4242 00002A89 803805                  	cmp byte [rax], T_undefined
  4243 00002A8C 0F843E350000            	je L_error_fvar_undefined
  4244 00002A92 803804                  	cmp byte [rax], T_closure
  4245 00002A95 0F85B9350000            	jne L_error_non_closure
  4246 00002A9B FF7001                  	push SOB_CLOSURE_ENV(rax)
  4247 00002A9E FF5009                  	call SOB_CLOSURE_CODE(rax)
  4248 00002AA1 50                      	push rax
  4249                                  	; preparing a non-tail-call
  4250 00002AA2 488B4528                	mov rax, PARAM(1)	; param s
  4251 00002AA6 50                      	push rax
  4252 00002AA7 6A01                    	push 1	; arg count
  4253 00002AA9 488B0425[91090000]      	mov rax, qword [free_var_18]	; free var car
  4254 00002AB1 803805                  	cmp byte [rax], T_undefined
  4255 00002AB4 0F8416350000            	je L_error_fvar_undefined
  4256 00002ABA 803804                  	cmp byte [rax], T_closure
  4257 00002ABD 0F8591350000            	jne L_error_non_closure
  4258 00002AC3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4259 00002AC6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4260 00002AC9 50                      	push rax
  4261 00002ACA 6A02                    	push 2	; arg count
  4262 00002ACC 488B4510                	mov rax, ENV
  4263 00002AD0 488B00                  	mov rax, qword [rax + 8 * 0]
  4264 00002AD3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  4265 00002AD6 488B00                  	mov rax, qword [rax]
  4266 00002AD9 803804                  	cmp byte [rax], T_closure
  4267 00002ADC 0F8572350000            	jne L_error_non_closure
  4268 00002AE2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4269 00002AE5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4270 00002AE8 50                      	push rax
  4271 00002AE9 488B4520                	mov rax, PARAM(0)	; param a
  4272 00002AED 50                      	push rax
  4273 00002AEE 6A02                    	push 2	; arg count
  4274 00002AF0 488B0425[A10A0000]      	mov rax, qword [free_var_34]	; free var cons
  4275 00002AF8 803805                  	cmp byte [rax], T_undefined
  4276 00002AFB 0F84CF340000            	je L_error_fvar_undefined
  4277 00002B01 803804                  	cmp byte [rax], T_closure
  4278 00002B04 0F854A350000            	jne L_error_non_closure
  4279 00002B0A FF7001                  	push SOB_CLOSURE_ENV(rax)
  4280 00002B0D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4281 00002B10 FF7500                  	push qword[rbp]
  4282 00002B13 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4283 00002B16 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4284 00002B1A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4285 00002B1E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4286 00002B22 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4287 00002B25 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4288 00002B28 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4289 00002B2D 4983C103                	add r9, 3 	 ;for getting to the params
  4290 00002B31 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4291 00002B35 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4292                                  .L_tc_recycle_frame_loop_001f:
  4293 00002B38 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4294 00002B3B 7410                    	je .L_tc_recycle_frame_done_001f
  4295 00002B3D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4296 00002B40 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4297 00002B43 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4298 00002B47 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4299 00002B4B EBEB                    	jmp .L_tc_recycle_frame_loop_001f
  4300                                  .L_tc_recycle_frame_done_001f:
  4301 00002B4D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4302 00002B4E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4303 00002B52 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4304                                  .L_if_end_0003:
  4305 00002B55 C9                      	leave
  4306 00002B56 C22000                  	ret AND_KILL_FRAME(2)
  4307                                  .L_lambda_simple_end_0021:	; new closure is in rax
  4308 00002B59 50                      	push rax
  4309 00002B5A 488B4520                	mov rax, PARAM(0)	; param run
  4310 00002B5E 8F00                    	pop qword [rax]
  4311 00002B60 48B8-                   	mov rax, sob_void
  4311 00002B62 [0000000000000000] 
  4312                                  
  4313 00002B6A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4314 00002B6F E889350000              	call malloc
  4315 00002B74 50                      	push rax
  4316 00002B75 BF08000000              	mov rdi, 8 * 1	; new rib
  4317 00002B7A E87E350000              	call malloc
  4318 00002B7F 50                      	push rax
  4319 00002B80 BF10000000              	mov rdi, 8 * 2	; extended env
  4320 00002B85 E873350000              	call malloc
  4321 00002B8A 488B7D10                	mov rdi, ENV
  4322 00002B8E BE00000000              	mov rsi, 0
  4323 00002B93 BA01000000              	mov rdx, 1
  4324                                  .L_lambda_opt_env_loop_0002:	; ext_env[i + 1] <-- env[i]
  4325 00002B98 4883FE01                	cmp rsi, 1
  4326 00002B9C 7410                    	je .L_lambda_opt_env_end_0002
  4327 00002B9E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4328 00002BA2 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4329 00002BA6 48FFC6                  	inc rsi
  4330 00002BA9 48FFC2                  	inc rdx
  4331 00002BAC EBEA                    	jmp .L_lambda_opt_env_loop_0002
  4332                                  .L_lambda_opt_env_end_0002:
  4333 00002BAE 5B                      	pop rbx
  4334 00002BAF BE00000000              	mov rsi, 0
  4335                                  .L_lambda_opt_params_loop_0002:	; copy params
  4336 00002BB4 4883FE01                	cmp rsi, 1
  4337 00002BB8 740E                    	je .L_lambda_opt_params_end_0002
  4338 00002BBA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4339 00002BBF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4340 00002BC3 48FFC6                  	inc rsi
  4341 00002BC6 EBEC                    	jmp .L_lambda_opt_params_loop_0002
  4342                                  .L_lambda_opt_params_end_0002:
  4343 00002BC8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4344 00002BCB 4889C3                  	mov rbx, rax
  4345 00002BCE 58                      	pop rax
  4346 00002BCF C60004                  	mov byte [rax], T_closure
  4347 00002BD2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4348 00002BD6 48C74009[E32B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0002
  4349 00002BDE E907020000              	jmp .L_lambda_opt_end_0002
  4350                                  .L_lambda_opt_code_0002:	; lambda-opt body
  4351 00002BE3 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4352 00002BE9 7411                    	je .L_lambda_opt_arity_check_exact_0002
  4353 00002BEB 0F8FBF000000            	jg .L_lambda_opt_arity_check_more_0002
  4354 00002BF1 FF742410                	push qword [rsp + 8 * 2]
  4355 00002BF5 6A01                    	push 1
  4356 00002BF7 E9CE340000              	jmp L_error_incorrect_arity_opt
  4357                                  .L_lambda_opt_arity_check_exact_0002:
  4358 00002BFC 4883EC08                	sub rsp, 8
  4359 00002C00 488B442408              	mov rax, qword[rsp + 8 *1]
  4360 00002C05 48890424                	mov qword[rsp], rax  
  4361 00002C09 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  4362 00002C0E 4889442408              	mov qword[rsp + 8 * 1], rax
  4363 00002C13 B802000000              	mov rax, 2
  4364 00002C18 4889442410              	mov qword[rsp + 8 *2], rax
  4365 00002C1D 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  4366 00002C22 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  4367 00002C27 48B8-                   	mov rax, sob_nil
  4367 00002C29 [0100000000000000] 
  4368 00002C31 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  4369 00002C36 C8000000                	enter 0, 0
  4370                                  	; preparing a tail-call
  4371 00002C3A 488B4528                	mov rax, PARAM(1)	; param s
  4372 00002C3E 50                      	push rax
  4373 00002C3F 488B4520                	mov rax, PARAM(0)	; param a
  4374 00002C43 50                      	push rax
  4375 00002C44 6A02                    	push 2	; arg count
  4376 00002C46 488B4510                	mov rax, ENV
  4377 00002C4A 488B00                  	mov rax, qword [rax + 8 * 0]
  4378 00002C4D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  4379 00002C50 488B00                  	mov rax, qword [rax]
  4380 00002C53 803804                  	cmp byte [rax], T_closure
  4381 00002C56 0F85F8330000            	jne L_error_non_closure
  4382 00002C5C FF7001                  	push SOB_CLOSURE_ENV(rax)
  4383 00002C5F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4384 00002C62 FF7500                  	push qword[rbp]
  4385 00002C65 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4386 00002C68 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4387 00002C6C 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4388 00002C70 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4389 00002C74 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4390 00002C77 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4391 00002C7A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4392 00002C7F 4983C103                	add r9, 3 	 ;for getting to the params
  4393 00002C83 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4394 00002C87 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4395                                  .L_tc_recycle_frame_loop_0021:
  4396 00002C8A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4397 00002C8D 7410                    	je .L_tc_recycle_frame_done_0021
  4398 00002C8F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4399 00002C92 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4400 00002C95 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4401 00002C99 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4402 00002C9D EBEB                    	jmp .L_tc_recycle_frame_loop_0021
  4403                                  .L_tc_recycle_frame_done_0021:
  4404 00002C9F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4405 00002CA0 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4406 00002CA4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4407 00002CA7 C9                      	leave
  4408 00002CA8 C21800                  	ret AND_KILL_FRAME(1)
  4409 00002CAB E93A010000              	jmp .L_lambda_opt_end_0002	; new closure is in rax
  4410                                  .L_lambda_opt_arity_check_more_0002:
  4411 00002CB0 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  4412 00002CB5 49B9-                   	mov r9, sob_nil
  4412 00002CB7 [0100000000000000] 
  4413 00002CBF 4889E3                  	mov rbx, rsp 
  4414 00002CC2 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  4415 00002CC6 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  4416 00002CC9 49C1E003                	shl r8, 3
  4417 00002CCD 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  4418 00002CD0 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  4419                                  .L_lambda_opt_stack_shrink_loop_0002:
  4420 00002CD5 4983F801                	cmp r8, 1
  4421 00002CD9 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0002
  4422 00002CDB BF11000000              	mov rdi, 1+8+8	;for pair
  4423 00002CE0 E818340000              	call malloc	 ;to create the pair in the stack
  4424 00002CE5 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  4425 00002CE8 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
  4426 00002CEB 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
  4427 00002CEF 4C894809                 	mov qword[rax+1+8],r9
  4428 00002CF3 4989C1                  	mov r9, rax	 ; for the recursion 
  4429 00002CF6 49FFC8                  	dec r8 	;we finished copy another opt param to the list
  4430 00002CF9 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
  4431 00002CFD EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0002
  4432                                  .L_lambda_opt_stack_shrink_loop_exit_0002:
  4433 00002CFF 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
  4434 00002D04 4883E902                	sub rcx, 2
  4435 00002D08 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
  4436 00002D0C 4801CC                  	add rsp, rcx	 ;shrinking the stack
  4437 00002D0F 4889E0                  	mov rax, rsp
  4438 00002D12 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
  4439 00002D15 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
  4440 00002D19 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
  4441 00002D1C 4883C018                	add rax, 3 * 8 	;now rax is param 0
  4442 00002D20 49C1E003                	shl r8, 3 	; convert to byte
  4443 00002D24 4C01C0                  	add rax, r8 	;now rax is the top of the stack
  4444 00002D27 4C8908                  	mov qword[rax], r9	;puting the list at the top
  4445 00002D2A 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
  4446 00002D2E 4889E3                  	mov rbx, rsp 
  4447 00002D31 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
  4448 00002D34 41BA01000000            	mov r10, 1 	 ;r10 is the not opt params length
  4449 00002D3A 49FFCA                  	dec r10 
  4450 00002D3D 49C1E203                	shl r10, 3	;to get bytes
  4451 00002D41 4883C318                	add rbx, 3*8 	;rbx is the first param
  4452 00002D45 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
  4453 00002D48 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  4454 00002D4B 4C8900                  	mov qword[rax], r8
  4455 00002D4E 4883E808                	sub rax, 8
  4456 00002D52 4883EB08                	sub rbx, 8
  4457 00002D56 4889E0                  	mov rax, rsp
  4458 00002D59 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  4459 00002D5C 48C744241002000000      	mov qword [rsp+2*8], 2
  4460 00002D65 488B5808                	mov rbx, qword[rax + 8 *1]
  4461 00002D69 48895C2408              	mov qword [rsp + 1*8] ,rbx
  4462 00002D6E 488B18                  	mov rbx, qword[rax]
  4463 00002D71 48891C24                	mov qword [rsp], rbx
  4464 00002D75 C8000000                	enter 0, 0
  4465                                  	; preparing a tail-call
  4466 00002D79 488B4528                	mov rax, PARAM(1)	; param s
  4467 00002D7D 50                      	push rax
  4468 00002D7E 488B4520                	mov rax, PARAM(0)	; param a
  4469 00002D82 50                      	push rax
  4470 00002D83 6A02                    	push 2	; arg count
  4471 00002D85 488B4510                	mov rax, ENV
  4472 00002D89 488B00                  	mov rax, qword [rax + 8 * 0]
  4473 00002D8C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  4474 00002D8F 488B00                  	mov rax, qword [rax]
  4475 00002D92 803804                  	cmp byte [rax], T_closure
  4476 00002D95 0F85B9320000            	jne L_error_non_closure
  4477 00002D9B FF7001                  	push SOB_CLOSURE_ENV(rax)
  4478 00002D9E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4479 00002DA1 FF7500                  	push qword[rbp]
  4480 00002DA4 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4481 00002DA7 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4482 00002DAB 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4483 00002DAF 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4484 00002DB3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4485 00002DB6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4486 00002DB9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4487 00002DBE 4983C103                	add r9, 3 	 ;for getting to the params
  4488 00002DC2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4489 00002DC6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4490                                  .L_tc_recycle_frame_loop_0020:
  4491 00002DC9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4492 00002DCC 7410                    	je .L_tc_recycle_frame_done_0020
  4493 00002DCE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4494 00002DD1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4495 00002DD4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4496 00002DD8 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4497 00002DDC EBEB                    	jmp .L_tc_recycle_frame_loop_0020
  4498                                  .L_tc_recycle_frame_done_0020:
  4499 00002DDE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4500 00002DDF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4501 00002DE3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4502 00002DE6 C9                      	leave
  4503 00002DE7 C22000                  	ret AND_KILL_FRAME(2)
  4504                                  .L_lambda_opt_end_0002:	; new closure is in rax
  4505 00002DEA C9                      	leave
  4506 00002DEB C21800                  	ret AND_KILL_FRAME(1)
  4507                                  .L_lambda_simple_end_0020:	; new closure is in rax
  4508 00002DEE 803804                  	cmp byte [rax], T_closure
  4509 00002DF1 0F855D320000            	jne L_error_non_closure
  4510 00002DF7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4511 00002DFA FF5009                  	call SOB_CLOSURE_CODE(rax)
  4512 00002DFD 48890425[F60A0000]      	mov qword [free_var_39], rax
  4513 00002E05 48B8-                   	mov rax, sob_void
  4513 00002E07 [0000000000000000] 
  4514                                  
  4515 00002E0F 4889C7                  	mov rdi, rax
  4516 00002E12 E83B350000              	call print_sexpr_if_not_void
  4517                                  	; preparing a non-tail-call
  4518 00002E17 48B8-                   	mov rax, L_constants + 1993
  4518 00002E19 [C907000000000000] 
  4519 00002E21 50                      	push rax
  4520 00002E22 6A01                    	push 1	; arg count
  4521 00002E24 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4522 00002E29 E8CF320000              	call malloc
  4523 00002E2E 50                      	push rax
  4524 00002E2F BF00000000              	mov rdi, 8 * 0	; new rib
  4525 00002E34 E8C4320000              	call malloc
  4526 00002E39 50                      	push rax
  4527 00002E3A BF08000000              	mov rdi, 8 * 1	; extended env
  4528 00002E3F E8B9320000              	call malloc
  4529 00002E44 488B7D10                	mov rdi, ENV
  4530 00002E48 BE00000000              	mov rsi, 0
  4531 00002E4D BA01000000              	mov rdx, 1
  4532                                  .L_lambda_simple_env_loop_0022:	; ext_env[i + 1] <-- env[i]
  4533 00002E52 4883FE00                	cmp rsi, 0
  4534 00002E56 7410                    	je .L_lambda_simple_env_end_0022
  4535 00002E58 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4536 00002E5C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4537 00002E60 48FFC6                  	inc rsi
  4538 00002E63 48FFC2                  	inc rdx
  4539 00002E66 EBEA                    	jmp .L_lambda_simple_env_loop_0022
  4540                                  .L_lambda_simple_env_end_0022:
  4541 00002E68 5B                      	pop rbx
  4542 00002E69 BE00000000              	mov rsi, 0
  4543                                  .L_lambda_simple_params_loop_0022:	; copy params
  4544 00002E6E 4883FE00                	cmp rsi, 0
  4545 00002E72 740E                    	je .L_lambda_simple_params_end_0022
  4546 00002E74 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4547 00002E79 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4548 00002E7D 48FFC6                  	inc rsi
  4549 00002E80 EBEC                    	jmp .L_lambda_simple_params_loop_0022
  4550                                  .L_lambda_simple_params_end_0022:
  4551 00002E82 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4552 00002E85 4889C3                  	mov rbx, rax
  4553 00002E88 58                      	pop rax
  4554 00002E89 C60004                  	mov byte [rax], T_closure
  4555 00002E8C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4556 00002E90 48C74009[9D2E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0022
  4557 00002E98 E94F050000              	jmp .L_lambda_simple_end_0022
  4558                                  .L_lambda_simple_code_0022:	; lambda-simple body
  4559 00002E9D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4560 00002EA3 740B                    	je .L_lambda_simple_arity_check_ok_0022
  4561 00002EA5 FF742410                	push qword [rsp + 8 * 2]
  4562 00002EA9 6A01                    	push 1
  4563 00002EAB E906320000              	jmp L_error_incorrect_arity_simple
  4564                                  .L_lambda_simple_arity_check_ok_0022:
  4565 00002EB0 C8000000                	enter 0, 0
  4566 00002EB4 BF08000000              	mov rdi, 8*1
  4567 00002EB9 E83F320000              	call malloc
  4568 00002EBE 488B5D20                	mov rbx, PARAM(0)
  4569 00002EC2 488918                  	mov qword[rax], rbx
  4570 00002EC5 48894520                	mov PARAM(0), rax
  4571 00002EC9 48B8-                   	mov rax, sob_void
  4571 00002ECB [0000000000000000] 
  4572                                  
  4573 00002ED3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4574 00002ED8 E820320000              	call malloc
  4575 00002EDD 50                      	push rax
  4576 00002EDE BF08000000              	mov rdi, 8 * 1	; new rib
  4577 00002EE3 E815320000              	call malloc
  4578 00002EE8 50                      	push rax
  4579 00002EE9 BF10000000              	mov rdi, 8 * 2	; extended env
  4580 00002EEE E80A320000              	call malloc
  4581 00002EF3 488B7D10                	mov rdi, ENV
  4582 00002EF7 BE00000000              	mov rsi, 0
  4583 00002EFC BA01000000              	mov rdx, 1
  4584                                  .L_lambda_simple_env_loop_0023:	; ext_env[i + 1] <-- env[i]
  4585 00002F01 4883FE01                	cmp rsi, 1
  4586 00002F05 7410                    	je .L_lambda_simple_env_end_0023
  4587 00002F07 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4588 00002F0B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4589 00002F0F 48FFC6                  	inc rsi
  4590 00002F12 48FFC2                  	inc rdx
  4591 00002F15 EBEA                    	jmp .L_lambda_simple_env_loop_0023
  4592                                  .L_lambda_simple_env_end_0023:
  4593 00002F17 5B                      	pop rbx
  4594 00002F18 BE00000000              	mov rsi, 0
  4595                                  .L_lambda_simple_params_loop_0023:	; copy params
  4596 00002F1D 4883FE01                	cmp rsi, 1
  4597 00002F21 740E                    	je .L_lambda_simple_params_end_0023
  4598 00002F23 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4599 00002F28 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4600 00002F2C 48FFC6                  	inc rsi
  4601 00002F2F EBEC                    	jmp .L_lambda_simple_params_loop_0023
  4602                                  .L_lambda_simple_params_end_0023:
  4603 00002F31 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4604 00002F34 4889C3                  	mov rbx, rax
  4605 00002F37 58                      	pop rax
  4606 00002F38 C60004                  	mov byte [rax], T_closure
  4607 00002F3B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4608 00002F3F 48C74009[4C2F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0023
  4609 00002F47 E92F010000              	jmp .L_lambda_simple_end_0023
  4610                                  .L_lambda_simple_code_0023:	; lambda-simple body
  4611 00002F4C 48837C241002            	cmp qword [rsp + 8 * 2], 2
  4612 00002F52 740B                    	je .L_lambda_simple_arity_check_ok_0023
  4613 00002F54 FF742410                	push qword [rsp + 8 * 2]
  4614 00002F58 6A02                    	push 2
  4615 00002F5A E957310000              	jmp L_error_incorrect_arity_simple
  4616                                  .L_lambda_simple_arity_check_ok_0023:
  4617 00002F5F C8000000                	enter 0, 0
  4618                                  	; preparing a non-tail-call
  4619 00002F63 488B4528                	mov rax, PARAM(1)	; param s
  4620 00002F67 50                      	push rax
  4621 00002F68 6A01                    	push 1	; arg count
  4622 00002F6A 488B0425[5C0B0000]      	mov rax, qword [free_var_45]	; free var pair?
  4623 00002F72 803805                  	cmp byte [rax], T_undefined
  4624 00002F75 0F8455300000            	je L_error_fvar_undefined
  4625 00002F7B 803804                  	cmp byte [rax], T_closure
  4626 00002F7E 0F85D0300000            	jne L_error_non_closure
  4627 00002F84 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4628 00002F87 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4629 00002F8A 483D[02000000]          	cmp rax, sob_boolean_false
  4630 00002F90 0F84DD000000            	je .L_if_else_0004
  4631                                  	; preparing a tail-call
  4632                                  	; preparing a non-tail-call
  4633                                  	; preparing a non-tail-call
  4634 00002F96 488B4528                	mov rax, PARAM(1)	; param s
  4635 00002F9A 50                      	push rax
  4636 00002F9B 6A01                    	push 1	; arg count
  4637 00002F9D 488B0425[900A0000]      	mov rax, qword [free_var_33]	; free var cdr
  4638 00002FA5 803805                  	cmp byte [rax], T_undefined
  4639 00002FA8 0F8422300000            	je L_error_fvar_undefined
  4640 00002FAE 803804                  	cmp byte [rax], T_closure
  4641 00002FB1 0F859D300000            	jne L_error_non_closure
  4642 00002FB7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4643 00002FBA FF5009                  	call SOB_CLOSURE_CODE(rax)
  4644 00002FBD 50                      	push rax
  4645                                  	; preparing a non-tail-call
  4646 00002FBE 488B4528                	mov rax, PARAM(1)	; param s
  4647 00002FC2 50                      	push rax
  4648 00002FC3 6A01                    	push 1	; arg count
  4649 00002FC5 488B0425[91090000]      	mov rax, qword [free_var_18]	; free var car
  4650 00002FCD 803805                  	cmp byte [rax], T_undefined
  4651 00002FD0 0F84FA2F0000            	je L_error_fvar_undefined
  4652 00002FD6 803804                  	cmp byte [rax], T_closure
  4653 00002FD9 0F8575300000            	jne L_error_non_closure
  4654 00002FDF FF7001                  	push SOB_CLOSURE_ENV(rax)
  4655 00002FE2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4656 00002FE5 50                      	push rax
  4657 00002FE6 6A02                    	push 2	; arg count
  4658 00002FE8 488B4510                	mov rax, ENV
  4659 00002FEC 488B00                  	mov rax, qword [rax + 8 * 0]
  4660 00002FEF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  4661 00002FF2 488B00                  	mov rax, qword [rax]
  4662 00002FF5 803804                  	cmp byte [rax], T_closure
  4663 00002FF8 0F8556300000            	jne L_error_non_closure
  4664 00002FFE FF7001                  	push SOB_CLOSURE_ENV(rax)
  4665 00003001 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4666 00003004 50                      	push rax
  4667 00003005 488B4520                	mov rax, PARAM(0)	; param a
  4668 00003009 50                      	push rax
  4669 0000300A 6A02                    	push 2	; arg count
  4670 0000300C 488B0425[A10A0000]      	mov rax, qword [free_var_34]	; free var cons
  4671 00003014 803805                  	cmp byte [rax], T_undefined
  4672 00003017 0F84B32F0000            	je L_error_fvar_undefined
  4673 0000301D 803804                  	cmp byte [rax], T_closure
  4674 00003020 0F852E300000            	jne L_error_non_closure
  4675 00003026 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4676 00003029 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4677 0000302C FF7500                  	push qword[rbp]
  4678 0000302F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4679 00003032 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4680 00003036 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4681 0000303A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4682 0000303E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4683 00003041 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4684 00003044 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4685 00003049 4983C103                	add r9, 3 	 ;for getting to the params
  4686 0000304D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4687 00003051 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4688                                  .L_tc_recycle_frame_loop_0022:
  4689 00003054 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4690 00003057 7410                    	je .L_tc_recycle_frame_done_0022
  4691 00003059 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4692 0000305C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4693 0000305F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4694 00003063 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4695 00003067 EBEB                    	jmp .L_tc_recycle_frame_loop_0022
  4696                                  .L_tc_recycle_frame_done_0022:
  4697 00003069 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4698 0000306A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4699 0000306E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4700 00003071 EB04                    	jmp .L_if_end_0004
  4701                                  .L_if_else_0004:
  4702 00003073 488B4520                	mov rax, PARAM(0)	; param a
  4703                                  .L_if_end_0004:
  4704 00003077 C9                      	leave
  4705 00003078 C22000                  	ret AND_KILL_FRAME(2)
  4706                                  .L_lambda_simple_end_0023:	; new closure is in rax
  4707 0000307B 50                      	push rax
  4708 0000307C 488B4520                	mov rax, PARAM(0)	; param run
  4709 00003080 8F00                    	pop qword [rax]
  4710 00003082 48B8-                   	mov rax, sob_void
  4710 00003084 [0000000000000000] 
  4711                                  
  4712 0000308C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4713 00003091 E867300000              	call malloc
  4714 00003096 50                      	push rax
  4715 00003097 BF08000000              	mov rdi, 8 * 1	; new rib
  4716 0000309C E85C300000              	call malloc
  4717 000030A1 50                      	push rax
  4718 000030A2 BF10000000              	mov rdi, 8 * 2	; extended env
  4719 000030A7 E851300000              	call malloc
  4720 000030AC 488B7D10                	mov rdi, ENV
  4721 000030B0 BE00000000              	mov rsi, 0
  4722 000030B5 BA01000000              	mov rdx, 1
  4723                                  .L_lambda_opt_env_loop_0003:	; ext_env[i + 1] <-- env[i]
  4724 000030BA 4883FE01                	cmp rsi, 1
  4725 000030BE 7410                    	je .L_lambda_opt_env_end_0003
  4726 000030C0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4727 000030C4 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4728 000030C8 48FFC6                  	inc rsi
  4729 000030CB 48FFC2                  	inc rdx
  4730 000030CE EBEA                    	jmp .L_lambda_opt_env_loop_0003
  4731                                  .L_lambda_opt_env_end_0003:
  4732 000030D0 5B                      	pop rbx
  4733 000030D1 BE00000000              	mov rsi, 0
  4734                                  .L_lambda_opt_params_loop_0003:	; copy params
  4735 000030D6 4883FE01                	cmp rsi, 1
  4736 000030DA 740E                    	je .L_lambda_opt_params_end_0003
  4737 000030DC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4738 000030E1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4739 000030E5 48FFC6                  	inc rsi
  4740 000030E8 EBEC                    	jmp .L_lambda_opt_params_loop_0003
  4741                                  .L_lambda_opt_params_end_0003:
  4742 000030EA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4743 000030ED 4889C3                  	mov rbx, rax
  4744 000030F0 58                      	pop rax
  4745 000030F1 C60004                  	mov byte [rax], T_closure
  4746 000030F4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4747 000030F8 48C74009[05310000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0003
  4748 00003100 E9E3020000              	jmp .L_lambda_opt_end_0003
  4749                                  .L_lambda_opt_code_0003:	; lambda-opt body
  4750 00003105 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4751 0000310B 7411                    	je .L_lambda_opt_arity_check_exact_0003
  4752 0000310D 0F8F2D010000            	jg .L_lambda_opt_arity_check_more_0003
  4753 00003113 FF742410                	push qword [rsp + 8 * 2]
  4754 00003117 6A01                    	push 1
  4755 00003119 E9AC2F0000              	jmp L_error_incorrect_arity_opt
  4756                                  .L_lambda_opt_arity_check_exact_0003:
  4757 0000311E 4883EC08                	sub rsp, 8
  4758 00003122 488B442408              	mov rax, qword[rsp + 8 *1]
  4759 00003127 48890424                	mov qword[rsp], rax  
  4760 0000312B 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  4761 00003130 4889442408              	mov qword[rsp + 8 * 1], rax
  4762 00003135 B802000000              	mov rax, 2
  4763 0000313A 4889442410              	mov qword[rsp + 8 *2], rax
  4764 0000313F 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  4765 00003144 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  4766 00003149 48B8-                   	mov rax, sob_nil
  4766 0000314B [0100000000000000] 
  4767 00003153 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  4768 00003158 C8000000                	enter 0, 0
  4769                                  	; preparing a tail-call
  4770                                  	; preparing a non-tail-call
  4771                                  	; preparing a non-tail-call
  4772 0000315C 488B4528                	mov rax, PARAM(1)	; param s
  4773 00003160 50                      	push rax
  4774 00003161 6A01                    	push 1	; arg count
  4775 00003163 488B0425[900A0000]      	mov rax, qword [free_var_33]	; free var cdr
  4776 0000316B 803805                  	cmp byte [rax], T_undefined
  4777 0000316E 0F845C2E0000            	je L_error_fvar_undefined
  4778 00003174 803804                  	cmp byte [rax], T_closure
  4779 00003177 0F85D72E0000            	jne L_error_non_closure
  4780 0000317D FF7001                  	push SOB_CLOSURE_ENV(rax)
  4781 00003180 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4782 00003183 50                      	push rax
  4783                                  	; preparing a non-tail-call
  4784 00003184 488B4528                	mov rax, PARAM(1)	; param s
  4785 00003188 50                      	push rax
  4786 00003189 6A01                    	push 1	; arg count
  4787 0000318B 488B0425[91090000]      	mov rax, qword [free_var_18]	; free var car
  4788 00003193 803805                  	cmp byte [rax], T_undefined
  4789 00003196 0F84342E0000            	je L_error_fvar_undefined
  4790 0000319C 803804                  	cmp byte [rax], T_closure
  4791 0000319F 0F85AF2E0000            	jne L_error_non_closure
  4792 000031A5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4793 000031A8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4794 000031AB 50                      	push rax
  4795 000031AC 6A02                    	push 2	; arg count
  4796 000031AE 488B4510                	mov rax, ENV
  4797 000031B2 488B00                  	mov rax, qword [rax + 8 * 0]
  4798 000031B5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  4799 000031B8 488B00                  	mov rax, qword [rax]
  4800 000031BB 803804                  	cmp byte [rax], T_closure
  4801 000031BE 0F85902E0000            	jne L_error_non_closure
  4802 000031C4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4803 000031C7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4804 000031CA 50                      	push rax
  4805 000031CB 488B4520                	mov rax, PARAM(0)	; param f
  4806 000031CF 50                      	push rax
  4807 000031D0 6A02                    	push 2	; arg count
  4808 000031D2 488B0425[5F080000]      	mov rax, qword [free_var_0]	; free var __bin-apply
  4809 000031DA 803805                  	cmp byte [rax], T_undefined
  4810 000031DD 0F84ED2D0000            	je L_error_fvar_undefined
  4811 000031E3 803804                  	cmp byte [rax], T_closure
  4812 000031E6 0F85682E0000            	jne L_error_non_closure
  4813 000031EC FF7001                  	push SOB_CLOSURE_ENV(rax)
  4814 000031EF FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4815 000031F2 FF7500                  	push qword[rbp]
  4816 000031F5 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4817 000031F8 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4818 000031FC 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4819 00003200 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4820 00003204 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4821 00003207 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4822 0000320A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4823 0000320F 4983C103                	add r9, 3 	 ;for getting to the params
  4824 00003213 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4825 00003217 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4826                                  .L_tc_recycle_frame_loop_0024:
  4827 0000321A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4828 0000321D 7410                    	je .L_tc_recycle_frame_done_0024
  4829 0000321F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4830 00003222 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4831 00003225 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4832 00003229 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4833 0000322D EBEB                    	jmp .L_tc_recycle_frame_loop_0024
  4834                                  .L_tc_recycle_frame_done_0024:
  4835 0000322F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4836 00003230 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4837 00003234 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4838 00003237 C9                      	leave
  4839 00003238 C21800                  	ret AND_KILL_FRAME(1)
  4840 0000323B E9A8010000              	jmp .L_lambda_opt_end_0003	; new closure is in rax
  4841                                  .L_lambda_opt_arity_check_more_0003:
  4842 00003240 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  4843 00003245 49B9-                   	mov r9, sob_nil
  4843 00003247 [0100000000000000] 
  4844 0000324F 4889E3                  	mov rbx, rsp 
  4845 00003252 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  4846 00003256 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  4847 00003259 49C1E003                	shl r8, 3
  4848 0000325D 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  4849 00003260 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  4850                                  .L_lambda_opt_stack_shrink_loop_0003:
  4851 00003265 4983F801                	cmp r8, 1
  4852 00003269 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0003
  4853 0000326B BF11000000              	mov rdi, 1+8+8	;for pair
  4854 00003270 E8882E0000              	call malloc	 ;to create the pair in the stack
  4855 00003275 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  4856 00003278 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
  4857 0000327B 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
  4858 0000327F 4C894809                 	mov qword[rax+1+8],r9
  4859 00003283 4989C1                  	mov r9, rax	 ; for the recursion 
  4860 00003286 49FFC8                  	dec r8 	;we finished copy another opt param to the list
  4861 00003289 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
  4862 0000328D EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0003
  4863                                  .L_lambda_opt_stack_shrink_loop_exit_0003:
  4864 0000328F 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
  4865 00003294 4883E902                	sub rcx, 2
  4866 00003298 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
  4867 0000329C 4801CC                  	add rsp, rcx	 ;shrinking the stack
  4868 0000329F 4889E0                  	mov rax, rsp
  4869 000032A2 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
  4870 000032A5 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
  4871 000032A9 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
  4872 000032AC 4883C018                	add rax, 3 * 8 	;now rax is param 0
  4873 000032B0 49C1E003                	shl r8, 3 	; convert to byte
  4874 000032B4 4C01C0                  	add rax, r8 	;now rax is the top of the stack
  4875 000032B7 4C8908                  	mov qword[rax], r9	;puting the list at the top
  4876 000032BA 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
  4877 000032BE 4889E3                  	mov rbx, rsp 
  4878 000032C1 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
  4879 000032C4 41BA01000000            	mov r10, 1 	 ;r10 is the not opt params length
  4880 000032CA 49FFCA                  	dec r10 
  4881 000032CD 49C1E203                	shl r10, 3	;to get bytes
  4882 000032D1 4883C318                	add rbx, 3*8 	;rbx is the first param
  4883 000032D5 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
  4884 000032D8 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  4885 000032DB 4C8900                  	mov qword[rax], r8
  4886 000032DE 4883E808                	sub rax, 8
  4887 000032E2 4883EB08                	sub rbx, 8
  4888 000032E6 4889E0                  	mov rax, rsp
  4889 000032E9 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  4890 000032EC 48C744241002000000      	mov qword [rsp+2*8], 2
  4891 000032F5 488B5808                	mov rbx, qword[rax + 8 *1]
  4892 000032F9 48895C2408              	mov qword [rsp + 1*8] ,rbx
  4893 000032FE 488B18                  	mov rbx, qword[rax]
  4894 00003301 48891C24                	mov qword [rsp], rbx
  4895 00003305 C8000000                	enter 0, 0
  4896                                  	; preparing a tail-call
  4897                                  	; preparing a non-tail-call
  4898                                  	; preparing a non-tail-call
  4899 00003309 488B4528                	mov rax, PARAM(1)	; param s
  4900 0000330D 50                      	push rax
  4901 0000330E 6A01                    	push 1	; arg count
  4902 00003310 488B0425[900A0000]      	mov rax, qword [free_var_33]	; free var cdr
  4903 00003318 803805                  	cmp byte [rax], T_undefined
  4904 0000331B 0F84AF2C0000            	je L_error_fvar_undefined
  4905 00003321 803804                  	cmp byte [rax], T_closure
  4906 00003324 0F852A2D0000            	jne L_error_non_closure
  4907 0000332A FF7001                  	push SOB_CLOSURE_ENV(rax)
  4908 0000332D FF5009                  	call SOB_CLOSURE_CODE(rax)
  4909 00003330 50                      	push rax
  4910                                  	; preparing a non-tail-call
  4911 00003331 488B4528                	mov rax, PARAM(1)	; param s
  4912 00003335 50                      	push rax
  4913 00003336 6A01                    	push 1	; arg count
  4914 00003338 488B0425[91090000]      	mov rax, qword [free_var_18]	; free var car
  4915 00003340 803805                  	cmp byte [rax], T_undefined
  4916 00003343 0F84872C0000            	je L_error_fvar_undefined
  4917 00003349 803804                  	cmp byte [rax], T_closure
  4918 0000334C 0F85022D0000            	jne L_error_non_closure
  4919 00003352 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4920 00003355 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4921 00003358 50                      	push rax
  4922 00003359 6A02                    	push 2	; arg count
  4923 0000335B 488B4510                	mov rax, ENV
  4924 0000335F 488B00                  	mov rax, qword [rax + 8 * 0]
  4925 00003362 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  4926 00003365 488B00                  	mov rax, qword [rax]
  4927 00003368 803804                  	cmp byte [rax], T_closure
  4928 0000336B 0F85E32C0000            	jne L_error_non_closure
  4929 00003371 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4930 00003374 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4931 00003377 50                      	push rax
  4932 00003378 488B4520                	mov rax, PARAM(0)	; param f
  4933 0000337C 50                      	push rax
  4934 0000337D 6A02                    	push 2	; arg count
  4935 0000337F 488B0425[5F080000]      	mov rax, qword [free_var_0]	; free var __bin-apply
  4936 00003387 803805                  	cmp byte [rax], T_undefined
  4937 0000338A 0F84402C0000            	je L_error_fvar_undefined
  4938 00003390 803804                  	cmp byte [rax], T_closure
  4939 00003393 0F85BB2C0000            	jne L_error_non_closure
  4940 00003399 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4941 0000339C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4942 0000339F FF7500                  	push qword[rbp]
  4943 000033A2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4944 000033A5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4945 000033A9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4946 000033AD 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4947 000033B1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4948 000033B4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4949 000033B7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4950 000033BC 4983C103                	add r9, 3 	 ;for getting to the params
  4951 000033C0 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4952 000033C4 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4953                                  .L_tc_recycle_frame_loop_0023:
  4954 000033C7 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4955 000033CA 7410                    	je .L_tc_recycle_frame_done_0023
  4956 000033CC 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4957 000033CF 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4958 000033D2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4959 000033D6 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4960 000033DA EBEB                    	jmp .L_tc_recycle_frame_loop_0023
  4961                                  .L_tc_recycle_frame_done_0023:
  4962 000033DC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4963 000033DD 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4964 000033E1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4965 000033E4 C9                      	leave
  4966 000033E5 C22000                  	ret AND_KILL_FRAME(2)
  4967                                  .L_lambda_opt_end_0003:	; new closure is in rax
  4968 000033E8 C9                      	leave
  4969 000033E9 C21800                  	ret AND_KILL_FRAME(1)
  4970                                  .L_lambda_simple_end_0022:	; new closure is in rax
  4971 000033EC 803804                  	cmp byte [rax], T_closure
  4972 000033EF 0F855F2C0000            	jne L_error_non_closure
  4973 000033F5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4974 000033F8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4975 000033FB 48890425[92080000]      	mov qword [free_var_3], rax
  4976 00003403 48B8-                   	mov rax, sob_void
  4976 00003405 [0000000000000000] 
  4977                                  
  4978 0000340D 4889C7                  	mov rdi, rax
  4979 00003410 E83D2F0000              	call print_sexpr_if_not_void
  4980 00003415 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4981 0000341A E8DE2C0000              	call malloc
  4982 0000341F 50                      	push rax
  4983 00003420 BF00000000              	mov rdi, 8 * 0	; new rib
  4984 00003425 E8D32C0000              	call malloc
  4985 0000342A 50                      	push rax
  4986 0000342B BF08000000              	mov rdi, 8 * 1	; extended env
  4987 00003430 E8C82C0000              	call malloc
  4988 00003435 488B7D10                	mov rdi, ENV
  4989 00003439 BE00000000              	mov rsi, 0
  4990 0000343E BA01000000              	mov rdx, 1
  4991                                  .L_lambda_opt_env_loop_0004:	; ext_env[i + 1] <-- env[i]
  4992 00003443 4883FE00                	cmp rsi, 0
  4993 00003447 7410                    	je .L_lambda_opt_env_end_0004
  4994 00003449 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4995 0000344D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4996 00003451 48FFC6                  	inc rsi
  4997 00003454 48FFC2                  	inc rdx
  4998 00003457 EBEA                    	jmp .L_lambda_opt_env_loop_0004
  4999                                  .L_lambda_opt_env_end_0004:
  5000 00003459 5B                      	pop rbx
  5001 0000345A BE00000000              	mov rsi, 0
  5002                                  .L_lambda_opt_params_loop_0004:	; copy params
  5003 0000345F 4883FE00                	cmp rsi, 0
  5004 00003463 740E                    	je .L_lambda_opt_params_end_0004
  5005 00003465 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5006 0000346A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5007 0000346E 48FFC6                  	inc rsi
  5008 00003471 EBEC                    	jmp .L_lambda_opt_params_loop_0004
  5009                                  .L_lambda_opt_params_end_0004:
  5010 00003473 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5011 00003476 4889C3                  	mov rbx, rax
  5012 00003479 58                      	pop rax
  5013 0000347A C60004                  	mov byte [rax], T_closure
  5014 0000347D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5015 00003481 48C74009[8E340000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0004
  5016 00003489 E9DB080000              	jmp .L_lambda_opt_end_0004
  5017                                  .L_lambda_opt_code_0004:	; lambda-opt body
  5018 0000348E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5019 00003494 7411                    	je .L_lambda_opt_arity_check_exact_0004
  5020 00003496 0F8F29040000            	jg .L_lambda_opt_arity_check_more_0004
  5021 0000349C FF742410                	push qword [rsp + 8 * 2]
  5022 000034A0 6A01                    	push 1
  5023 000034A2 E9232C0000              	jmp L_error_incorrect_arity_opt
  5024                                  .L_lambda_opt_arity_check_exact_0004:
  5025 000034A7 4883EC08                	sub rsp, 8
  5026 000034AB 488B442408              	mov rax, qword[rsp + 8 *1]
  5027 000034B0 48890424                	mov qword[rsp], rax  
  5028 000034B4 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  5029 000034B9 4889442408              	mov qword[rsp + 8 * 1], rax
  5030 000034BE B802000000              	mov rax, 2
  5031 000034C3 4889442410              	mov qword[rsp + 8 *2], rax
  5032 000034C8 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  5033 000034CD 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  5034 000034D2 48B8-                   	mov rax, sob_nil
  5034 000034D4 [0100000000000000] 
  5035 000034DC 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  5036 000034E1 C8000000                	enter 0, 0
  5037                                  	; preparing a tail-call
  5038 000034E5 48B8-                   	mov rax, L_constants + 1993
  5038 000034E7 [C907000000000000] 
  5039 000034EF 50                      	push rax
  5040 000034F0 6A01                    	push 1	; arg count
  5041 000034F2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5042 000034F7 E8012C0000              	call malloc
  5043 000034FC 50                      	push rax
  5044 000034FD BF10000000              	mov rdi, 8 * 2	; new rib
  5045 00003502 E8F62B0000              	call malloc
  5046 00003507 50                      	push rax
  5047 00003508 BF10000000              	mov rdi, 8 * 2	; extended env
  5048 0000350D E8EB2B0000              	call malloc
  5049 00003512 488B7D10                	mov rdi, ENV
  5050 00003516 BE00000000              	mov rsi, 0
  5051 0000351B BA01000000              	mov rdx, 1
  5052                                  .L_lambda_simple_env_loop_0026:	; ext_env[i + 1] <-- env[i]
  5053 00003520 4883FE01                	cmp rsi, 1
  5054 00003524 7410                    	je .L_lambda_simple_env_end_0026
  5055 00003526 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5056 0000352A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5057 0000352E 48FFC6                  	inc rsi
  5058 00003531 48FFC2                  	inc rdx
  5059 00003534 EBEA                    	jmp .L_lambda_simple_env_loop_0026
  5060                                  .L_lambda_simple_env_end_0026:
  5061 00003536 5B                      	pop rbx
  5062 00003537 BE00000000              	mov rsi, 0
  5063                                  .L_lambda_simple_params_loop_0026:	; copy params
  5064 0000353C 4883FE02                	cmp rsi, 2
  5065 00003540 740E                    	je .L_lambda_simple_params_end_0026
  5066 00003542 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5067 00003547 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5068 0000354B 48FFC6                  	inc rsi
  5069 0000354E EBEC                    	jmp .L_lambda_simple_params_loop_0026
  5070                                  .L_lambda_simple_params_end_0026:
  5071 00003550 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5072 00003553 4889C3                  	mov rbx, rax
  5073 00003556 58                      	pop rax
  5074 00003557 C60004                  	mov byte [rax], T_closure
  5075 0000355A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5076 0000355E 48C74009[6B350000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0026
  5077 00003566 E9FD020000              	jmp .L_lambda_simple_end_0026
  5078                                  .L_lambda_simple_code_0026:	; lambda-simple body
  5079 0000356B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5080 00003571 740B                    	je .L_lambda_simple_arity_check_ok_0026
  5081 00003573 FF742410                	push qword [rsp + 8 * 2]
  5082 00003577 6A01                    	push 1
  5083 00003579 E9382B0000              	jmp L_error_incorrect_arity_simple
  5084                                  .L_lambda_simple_arity_check_ok_0026:
  5085 0000357E C8000000                	enter 0, 0
  5086 00003582 BF08000000              	mov rdi, 8*1
  5087 00003587 E8712B0000              	call malloc
  5088 0000358C 488B5D20                	mov rbx, PARAM(0)
  5089 00003590 488918                  	mov qword[rax], rbx
  5090 00003593 48894520                	mov PARAM(0), rax
  5091 00003597 48B8-                   	mov rax, sob_void
  5091 00003599 [0000000000000000] 
  5092                                  
  5093 000035A1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5094 000035A6 E8522B0000              	call malloc
  5095 000035AB 50                      	push rax
  5096 000035AC BF08000000              	mov rdi, 8 * 1	; new rib
  5097 000035B1 E8472B0000              	call malloc
  5098 000035B6 50                      	push rax
  5099 000035B7 BF18000000              	mov rdi, 8 * 3	; extended env
  5100 000035BC E83C2B0000              	call malloc
  5101 000035C1 488B7D10                	mov rdi, ENV
  5102 000035C5 BE00000000              	mov rsi, 0
  5103 000035CA BA01000000              	mov rdx, 1
  5104                                  .L_lambda_simple_env_loop_0027:	; ext_env[i + 1] <-- env[i]
  5105 000035CF 4883FE02                	cmp rsi, 2
  5106 000035D3 7410                    	je .L_lambda_simple_env_end_0027
  5107 000035D5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5108 000035D9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5109 000035DD 48FFC6                  	inc rsi
  5110 000035E0 48FFC2                  	inc rdx
  5111 000035E3 EBEA                    	jmp .L_lambda_simple_env_loop_0027
  5112                                  .L_lambda_simple_env_end_0027:
  5113 000035E5 5B                      	pop rbx
  5114 000035E6 BE00000000              	mov rsi, 0
  5115                                  .L_lambda_simple_params_loop_0027:	; copy params
  5116 000035EB 4883FE01                	cmp rsi, 1
  5117 000035EF 740E                    	je .L_lambda_simple_params_end_0027
  5118 000035F1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5119 000035F6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5120 000035FA 48FFC6                  	inc rsi
  5121 000035FD EBEC                    	jmp .L_lambda_simple_params_loop_0027
  5122                                  .L_lambda_simple_params_end_0027:
  5123 000035FF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5124 00003602 4889C3                  	mov rbx, rax
  5125 00003605 58                      	pop rax
  5126 00003606 C60004                  	mov byte [rax], T_closure
  5127 00003609 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5128 0000360D 48C74009[1A360000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0027
  5129 00003615 E98E010000              	jmp .L_lambda_simple_end_0027
  5130                                  .L_lambda_simple_code_0027:	; lambda-simple body
  5131 0000361A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5132 00003620 740B                    	je .L_lambda_simple_arity_check_ok_0027
  5133 00003622 FF742410                	push qword [rsp + 8 * 2]
  5134 00003626 6A01                    	push 1
  5135 00003628 E9892A0000              	jmp L_error_incorrect_arity_simple
  5136                                  .L_lambda_simple_arity_check_ok_0027:
  5137 0000362D C8000000                	enter 0, 0
  5138                                  	; preparing a non-tail-call
  5139                                  	; preparing a non-tail-call
  5140 00003631 488B4520                	mov rax, PARAM(0)	; param s
  5141 00003635 50                      	push rax
  5142 00003636 6A01                    	push 1	; arg count
  5143 00003638 488B0425[91090000]      	mov rax, qword [free_var_18]	; free var car
  5144 00003640 803805                  	cmp byte [rax], T_undefined
  5145 00003643 0F8487290000            	je L_error_fvar_undefined
  5146 00003649 803804                  	cmp byte [rax], T_closure
  5147 0000364C 0F85022A0000            	jne L_error_non_closure
  5148 00003652 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5149 00003655 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5150 00003658 50                      	push rax
  5151 00003659 6A01                    	push 1	; arg count
  5152 0000365B 488B0425[5C0B0000]      	mov rax, qword [free_var_45]	; free var pair?
  5153 00003663 803805                  	cmp byte [rax], T_undefined
  5154 00003666 0F8464290000            	je L_error_fvar_undefined
  5155 0000366C 803804                  	cmp byte [rax], T_closure
  5156 0000366F 0F85DF290000            	jne L_error_non_closure
  5157 00003675 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5158 00003678 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5159 0000367B 483D[02000000]          	cmp rax, sob_boolean_false
  5160 00003681 0F8413010000            	je .L_if_else_0007
  5161                                  	; preparing a non-tail-call
  5162                                  	; preparing a non-tail-call
  5163 00003687 488B4520                	mov rax, PARAM(0)	; param s
  5164 0000368B 50                      	push rax
  5165 0000368C 488B0425[91090000]      	mov rax, qword [free_var_18]	; free var car
  5166 00003694 803805                  	cmp byte [rax], T_undefined
  5167 00003697 0F8433290000            	je L_error_fvar_undefined
  5168 0000369D 50                      	push rax
  5169 0000369E 6A02                    	push 2	; arg count
  5170 000036A0 488B0425[180B0000]      	mov rax, qword [free_var_41]	; free var map
  5171 000036A8 803805                  	cmp byte [rax], T_undefined
  5172 000036AB 0F841F290000            	je L_error_fvar_undefined
  5173 000036B1 803804                  	cmp byte [rax], T_closure
  5174 000036B4 0F859A290000            	jne L_error_non_closure
  5175 000036BA FF7001                  	push SOB_CLOSURE_ENV(rax)
  5176 000036BD FF5009                  	call SOB_CLOSURE_CODE(rax)
  5177 000036C0 50                      	push rax
  5178 000036C1 488B4510                	mov rax, ENV
  5179 000036C5 488B4008                	mov rax, qword [rax + 8 * 1]
  5180 000036C9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  5181 000036CC 50                      	push rax
  5182 000036CD 6A02                    	push 2	; arg count
  5183 000036CF 488B0425[92080000]      	mov rax, qword [free_var_3]	; free var apply
  5184 000036D7 803805                  	cmp byte [rax], T_undefined
  5185 000036DA 0F84F0280000            	je L_error_fvar_undefined
  5186 000036E0 803804                  	cmp byte [rax], T_closure
  5187 000036E3 0F856B290000            	jne L_error_non_closure
  5188 000036E9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5189 000036EC FF5009                  	call SOB_CLOSURE_CODE(rax)
  5190 000036EF 483D[02000000]          	cmp rax, sob_boolean_false
  5191 000036F5 0F859D000000            	jne .L_or_end_0004
  5192                                  	; preparing a tail-call
  5193                                  	; preparing a non-tail-call
  5194 000036FB 488B4520                	mov rax, PARAM(0)	; param s
  5195 000036FF 50                      	push rax
  5196 00003700 488B0425[900A0000]      	mov rax, qword [free_var_33]	; free var cdr
  5197 00003708 803805                  	cmp byte [rax], T_undefined
  5198 0000370B 0F84BF280000            	je L_error_fvar_undefined
  5199 00003711 50                      	push rax
  5200 00003712 6A02                    	push 2	; arg count
  5201 00003714 488B0425[180B0000]      	mov rax, qword [free_var_41]	; free var map
  5202 0000371C 803805                  	cmp byte [rax], T_undefined
  5203 0000371F 0F84AB280000            	je L_error_fvar_undefined
  5204 00003725 803804                  	cmp byte [rax], T_closure
  5205 00003728 0F8526290000            	jne L_error_non_closure
  5206 0000372E FF7001                  	push SOB_CLOSURE_ENV(rax)
  5207 00003731 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5208 00003734 50                      	push rax
  5209 00003735 6A01                    	push 1	; arg count
  5210 00003737 488B4510                	mov rax, ENV
  5211 0000373B 488B00                  	mov rax, qword [rax + 8 * 0]
  5212 0000373E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  5213 00003741 488B00                  	mov rax, qword [rax]
  5214 00003744 803804                  	cmp byte [rax], T_closure
  5215 00003747 0F8507290000            	jne L_error_non_closure
  5216 0000374D FF7001                  	push SOB_CLOSURE_ENV(rax)
  5217 00003750 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5218 00003753 FF7500                  	push qword[rbp]
  5219 00003756 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  5220 00003759 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  5221 0000375D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  5222 00003761 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  5223 00003765 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  5224 00003768 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  5225 0000376B 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  5226 00003770 4983C103                	add r9, 3 	 ;for getting to the params
  5227 00003774 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  5228 00003778 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  5229                                  .L_tc_recycle_frame_loop_0028:
  5230 0000377B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  5231 0000377E 7410                    	je .L_tc_recycle_frame_done_0028
  5232 00003780 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  5233 00003783 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  5234 00003786 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  5235 0000378A 4983E808                	sub r8, 8	 ;move the top of the stack one down
  5236 0000378E EBEB                    	jmp .L_tc_recycle_frame_loop_0028
  5237                                  .L_tc_recycle_frame_done_0028:
  5238 00003790 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  5239 00003791 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  5240 00003795 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5241                                  .L_or_end_0004:
  5242 00003798 EB0A                    	jmp .L_if_end_0007
  5243                                  .L_if_else_0007:
  5244 0000379A 48B8-                   	mov rax, L_constants + 2
  5244 0000379C [0200000000000000] 
  5245                                  .L_if_end_0007:
  5246 000037A4 C9                      	leave
  5247 000037A5 C21800                  	ret AND_KILL_FRAME(1)
  5248                                  .L_lambda_simple_end_0027:	; new closure is in rax
  5249 000037A8 50                      	push rax
  5250 000037A9 488B4520                	mov rax, PARAM(0)	; param loop
  5251 000037AD 8F00                    	pop qword [rax]
  5252 000037AF 48B8-                   	mov rax, sob_void
  5252 000037B1 [0000000000000000] 
  5253                                  
  5254                                  	; preparing a non-tail-call
  5255 000037B9 488B4510                	mov rax, ENV
  5256 000037BD 488B00                  	mov rax, qword [rax + 8 * 0]
  5257 000037C0 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  5258 000037C4 50                      	push rax
  5259 000037C5 6A01                    	push 1	; arg count
  5260 000037C7 488B0425[5C0B0000]      	mov rax, qword [free_var_45]	; free var pair?
  5261 000037CF 803805                  	cmp byte [rax], T_undefined
  5262 000037D2 0F84F8270000            	je L_error_fvar_undefined
  5263 000037D8 803804                  	cmp byte [rax], T_closure
  5264 000037DB 0F8573280000            	jne L_error_non_closure
  5265 000037E1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5266 000037E4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5267 000037E7 483D[02000000]          	cmp rax, sob_boolean_false
  5268 000037ED 746B                    	je .L_if_else_0008
  5269                                  	; preparing a tail-call
  5270 000037EF 488B4510                	mov rax, ENV
  5271 000037F3 488B00                  	mov rax, qword [rax + 8 * 0]
  5272 000037F6 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  5273 000037FA 50                      	push rax
  5274 000037FB 6A01                    	push 1	; arg count
  5275 000037FD 488B4520                	mov rax, PARAM(0)	; param loop
  5276 00003801 488B00                  	mov rax, qword [rax]
  5277 00003804 803804                  	cmp byte [rax], T_closure
  5278 00003807 0F8547280000            	jne L_error_non_closure
  5279 0000380D FF7001                  	push SOB_CLOSURE_ENV(rax)
  5280 00003810 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5281 00003813 FF7500                  	push qword[rbp]
  5282 00003816 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  5283 00003819 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  5284 0000381D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  5285 00003821 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  5286 00003825 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  5287 00003828 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  5288 0000382B 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  5289 00003830 4983C103                	add r9, 3 	 ;for getting to the params
  5290 00003834 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  5291 00003838 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  5292                                  .L_tc_recycle_frame_loop_0029:
  5293 0000383B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  5294 0000383E 7410                    	je .L_tc_recycle_frame_done_0029
  5295 00003840 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  5296 00003843 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  5297 00003846 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  5298 0000384A 4983E808                	sub r8, 8	 ;move the top of the stack one down
  5299 0000384E EBEB                    	jmp .L_tc_recycle_frame_loop_0029
  5300                                  .L_tc_recycle_frame_done_0029:
  5301 00003850 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  5302 00003851 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  5303 00003855 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5304 00003858 EB0A                    	jmp .L_if_end_0008
  5305                                  .L_if_else_0008:
  5306 0000385A 48B8-                   	mov rax, L_constants + 2
  5306 0000385C [0200000000000000] 
  5307                                  .L_if_end_0008:
  5308 00003864 C9                      	leave
  5309 00003865 C21800                  	ret AND_KILL_FRAME(1)
  5310                                  .L_lambda_simple_end_0026:	; new closure is in rax
  5311 00003868 803804                  	cmp byte [rax], T_closure
  5312 0000386B 0F85E3270000            	jne L_error_non_closure
  5313 00003871 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5314 00003874 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5315 00003877 FF7500                  	push qword[rbp]
  5316 0000387A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  5317 0000387D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  5318 00003881 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  5319 00003885 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  5320 00003889 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  5321 0000388C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  5322 0000388F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  5323 00003894 4983C103                	add r9, 3 	 ;for getting to the params
  5324 00003898 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  5325 0000389C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  5326                                  .L_tc_recycle_frame_loop_002a:
  5327 0000389F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  5328 000038A2 7410                    	je .L_tc_recycle_frame_done_002a
  5329 000038A4 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  5330 000038A7 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  5331 000038AA 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  5332 000038AE 4983E808                	sub r8, 8	 ;move the top of the stack one down
  5333 000038B2 EBEB                    	jmp .L_tc_recycle_frame_loop_002a
  5334                                  .L_tc_recycle_frame_done_002a:
  5335 000038B4 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  5336 000038B5 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  5337 000038B9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5338 000038BC C9                      	leave
  5339 000038BD C21800                  	ret AND_KILL_FRAME(1)
  5340 000038C0 E9A4040000              	jmp .L_lambda_opt_end_0004	; new closure is in rax
  5341                                  .L_lambda_opt_arity_check_more_0004:
  5342 000038C5 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  5343 000038CA 49B9-                   	mov r9, sob_nil
  5343 000038CC [0100000000000000] 
  5344 000038D4 4889E3                  	mov rbx, rsp 
  5345 000038D7 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  5346 000038DB 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  5347 000038DE 49C1E003                	shl r8, 3
  5348 000038E2 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  5349 000038E5 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  5350                                  .L_lambda_opt_stack_shrink_loop_0004:
  5351 000038EA 4983F801                	cmp r8, 1
  5352 000038EE 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0004
  5353 000038F0 BF11000000              	mov rdi, 1+8+8	;for pair
  5354 000038F5 E803280000              	call malloc	 ;to create the pair in the stack
  5355 000038FA C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  5356 000038FD 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
  5357 00003900 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
  5358 00003904 4C894809                 	mov qword[rax+1+8],r9
  5359 00003908 4989C1                  	mov r9, rax	 ; for the recursion 
  5360 0000390B 49FFC8                  	dec r8 	;we finished copy another opt param to the list
  5361 0000390E 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
  5362 00003912 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0004
  5363                                  .L_lambda_opt_stack_shrink_loop_exit_0004:
  5364 00003914 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
  5365 00003919 4883E902                	sub rcx, 2
  5366 0000391D 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
  5367 00003921 4801CC                  	add rsp, rcx	 ;shrinking the stack
  5368 00003924 4889E0                  	mov rax, rsp
  5369 00003927 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
  5370 0000392A 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
  5371 0000392E 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
  5372 00003931 4883C018                	add rax, 3 * 8 	;now rax is param 0
  5373 00003935 49C1E003                	shl r8, 3 	; convert to byte
  5374 00003939 4C01C0                  	add rax, r8 	;now rax is the top of the stack
  5375 0000393C 4C8908                  	mov qword[rax], r9	;puting the list at the top
  5376 0000393F 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
  5377 00003943 4889E3                  	mov rbx, rsp 
  5378 00003946 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
  5379 00003949 41BA01000000            	mov r10, 1 	 ;r10 is the not opt params length
  5380 0000394F 49FFCA                  	dec r10 
  5381 00003952 49C1E203                	shl r10, 3	;to get bytes
  5382 00003956 4883C318                	add rbx, 3*8 	;rbx is the first param
  5383 0000395A 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
  5384 0000395D 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  5385 00003960 4C8900                  	mov qword[rax], r8
  5386 00003963 4883E808                	sub rax, 8
  5387 00003967 4883EB08                	sub rbx, 8
  5388 0000396B 4889E0                  	mov rax, rsp
  5389 0000396E 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  5390 00003971 48C744241002000000      	mov qword [rsp+2*8], 2
  5391 0000397A 488B5808                	mov rbx, qword[rax + 8 *1]
  5392 0000397E 48895C2408              	mov qword [rsp + 1*8] ,rbx
  5393 00003983 488B18                  	mov rbx, qword[rax]
  5394 00003986 48891C24                	mov qword [rsp], rbx
  5395 0000398A C8000000                	enter 0, 0
  5396                                  	; preparing a tail-call
  5397 0000398E 48B8-                   	mov rax, L_constants + 1993
  5397 00003990 [C907000000000000] 
  5398 00003998 50                      	push rax
  5399 00003999 6A01                    	push 1	; arg count
  5400 0000399B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5401 000039A0 E858270000              	call malloc
  5402 000039A5 50                      	push rax
  5403 000039A6 BF10000000              	mov rdi, 8 * 2	; new rib
  5404 000039AB E84D270000              	call malloc
  5405 000039B0 50                      	push rax
  5406 000039B1 BF10000000              	mov rdi, 8 * 2	; extended env
  5407 000039B6 E842270000              	call malloc
  5408 000039BB 488B7D10                	mov rdi, ENV
  5409 000039BF BE00000000              	mov rsi, 0
  5410 000039C4 BA01000000              	mov rdx, 1
  5411                                  .L_lambda_simple_env_loop_0024:	; ext_env[i + 1] <-- env[i]
  5412 000039C9 4883FE01                	cmp rsi, 1
  5413 000039CD 7410                    	je .L_lambda_simple_env_end_0024
  5414 000039CF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5415 000039D3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5416 000039D7 48FFC6                  	inc rsi
  5417 000039DA 48FFC2                  	inc rdx
  5418 000039DD EBEA                    	jmp .L_lambda_simple_env_loop_0024
  5419                                  .L_lambda_simple_env_end_0024:
  5420 000039DF 5B                      	pop rbx
  5421 000039E0 BE00000000              	mov rsi, 0
  5422                                  .L_lambda_simple_params_loop_0024:	; copy params
  5423 000039E5 4883FE02                	cmp rsi, 2
  5424 000039E9 740E                    	je .L_lambda_simple_params_end_0024
  5425 000039EB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5426 000039F0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5427 000039F4 48FFC6                  	inc rsi
  5428 000039F7 EBEC                    	jmp .L_lambda_simple_params_loop_0024
  5429                                  .L_lambda_simple_params_end_0024:
  5430 000039F9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5431 000039FC 4889C3                  	mov rbx, rax
  5432 000039FF 58                      	pop rax
  5433 00003A00 C60004                  	mov byte [rax], T_closure
  5434 00003A03 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5435 00003A07 48C74009[143A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0024
  5436 00003A0F E9FD020000              	jmp .L_lambda_simple_end_0024
  5437                                  .L_lambda_simple_code_0024:	; lambda-simple body
  5438 00003A14 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5439 00003A1A 740B                    	je .L_lambda_simple_arity_check_ok_0024
  5440 00003A1C FF742410                	push qword [rsp + 8 * 2]
  5441 00003A20 6A01                    	push 1
  5442 00003A22 E98F260000              	jmp L_error_incorrect_arity_simple
  5443                                  .L_lambda_simple_arity_check_ok_0024:
  5444 00003A27 C8000000                	enter 0, 0
  5445 00003A2B BF08000000              	mov rdi, 8*1
  5446 00003A30 E8C8260000              	call malloc
  5447 00003A35 488B5D20                	mov rbx, PARAM(0)
  5448 00003A39 488918                  	mov qword[rax], rbx
  5449 00003A3C 48894520                	mov PARAM(0), rax
  5450 00003A40 48B8-                   	mov rax, sob_void
  5450 00003A42 [0000000000000000] 
  5451                                  
  5452 00003A4A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5453 00003A4F E8A9260000              	call malloc
  5454 00003A54 50                      	push rax
  5455 00003A55 BF08000000              	mov rdi, 8 * 1	; new rib
  5456 00003A5A E89E260000              	call malloc
  5457 00003A5F 50                      	push rax
  5458 00003A60 BF18000000              	mov rdi, 8 * 3	; extended env
  5459 00003A65 E893260000              	call malloc
  5460 00003A6A 488B7D10                	mov rdi, ENV
  5461 00003A6E BE00000000              	mov rsi, 0
  5462 00003A73 BA01000000              	mov rdx, 1
  5463                                  .L_lambda_simple_env_loop_0025:	; ext_env[i + 1] <-- env[i]
  5464 00003A78 4883FE02                	cmp rsi, 2
  5465 00003A7C 7410                    	je .L_lambda_simple_env_end_0025
  5466 00003A7E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5467 00003A82 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5468 00003A86 48FFC6                  	inc rsi
  5469 00003A89 48FFC2                  	inc rdx
  5470 00003A8C EBEA                    	jmp .L_lambda_simple_env_loop_0025
  5471                                  .L_lambda_simple_env_end_0025:
  5472 00003A8E 5B                      	pop rbx
  5473 00003A8F BE00000000              	mov rsi, 0
  5474                                  .L_lambda_simple_params_loop_0025:	; copy params
  5475 00003A94 4883FE01                	cmp rsi, 1
  5476 00003A98 740E                    	je .L_lambda_simple_params_end_0025
  5477 00003A9A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5478 00003A9F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5479 00003AA3 48FFC6                  	inc rsi
  5480 00003AA6 EBEC                    	jmp .L_lambda_simple_params_loop_0025
  5481                                  .L_lambda_simple_params_end_0025:
  5482 00003AA8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5483 00003AAB 4889C3                  	mov rbx, rax
  5484 00003AAE 58                      	pop rax
  5485 00003AAF C60004                  	mov byte [rax], T_closure
  5486 00003AB2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5487 00003AB6 48C74009[C33A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0025
  5488 00003ABE E98E010000              	jmp .L_lambda_simple_end_0025
  5489                                  .L_lambda_simple_code_0025:	; lambda-simple body
  5490 00003AC3 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5491 00003AC9 740B                    	je .L_lambda_simple_arity_check_ok_0025
  5492 00003ACB FF742410                	push qword [rsp + 8 * 2]
  5493 00003ACF 6A01                    	push 1
  5494 00003AD1 E9E0250000              	jmp L_error_incorrect_arity_simple
  5495                                  .L_lambda_simple_arity_check_ok_0025:
  5496 00003AD6 C8000000                	enter 0, 0
  5497                                  	; preparing a non-tail-call
  5498                                  	; preparing a non-tail-call
  5499 00003ADA 488B4520                	mov rax, PARAM(0)	; param s
  5500 00003ADE 50                      	push rax
  5501 00003ADF 6A01                    	push 1	; arg count
  5502 00003AE1 488B0425[91090000]      	mov rax, qword [free_var_18]	; free var car
  5503 00003AE9 803805                  	cmp byte [rax], T_undefined
  5504 00003AEC 0F84DE240000            	je L_error_fvar_undefined
  5505 00003AF2 803804                  	cmp byte [rax], T_closure
  5506 00003AF5 0F8559250000            	jne L_error_non_closure
  5507 00003AFB FF7001                  	push SOB_CLOSURE_ENV(rax)
  5508 00003AFE FF5009                  	call SOB_CLOSURE_CODE(rax)
  5509 00003B01 50                      	push rax
  5510 00003B02 6A01                    	push 1	; arg count
  5511 00003B04 488B0425[5C0B0000]      	mov rax, qword [free_var_45]	; free var pair?
  5512 00003B0C 803805                  	cmp byte [rax], T_undefined
  5513 00003B0F 0F84BB240000            	je L_error_fvar_undefined
  5514 00003B15 803804                  	cmp byte [rax], T_closure
  5515 00003B18 0F8536250000            	jne L_error_non_closure
  5516 00003B1E FF7001                  	push SOB_CLOSURE_ENV(rax)
  5517 00003B21 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5518 00003B24 483D[02000000]          	cmp rax, sob_boolean_false
  5519 00003B2A 0F8413010000            	je .L_if_else_0005
  5520                                  	; preparing a non-tail-call
  5521                                  	; preparing a non-tail-call
  5522 00003B30 488B4520                	mov rax, PARAM(0)	; param s
  5523 00003B34 50                      	push rax
  5524 00003B35 488B0425[91090000]      	mov rax, qword [free_var_18]	; free var car
  5525 00003B3D 803805                  	cmp byte [rax], T_undefined
  5526 00003B40 0F848A240000            	je L_error_fvar_undefined
  5527 00003B46 50                      	push rax
  5528 00003B47 6A02                    	push 2	; arg count
  5529 00003B49 488B0425[180B0000]      	mov rax, qword [free_var_41]	; free var map
  5530 00003B51 803805                  	cmp byte [rax], T_undefined
  5531 00003B54 0F8476240000            	je L_error_fvar_undefined
  5532 00003B5A 803804                  	cmp byte [rax], T_closure
  5533 00003B5D 0F85F1240000            	jne L_error_non_closure
  5534 00003B63 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5535 00003B66 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5536 00003B69 50                      	push rax
  5537 00003B6A 488B4510                	mov rax, ENV
  5538 00003B6E 488B4008                	mov rax, qword [rax + 8 * 1]
  5539 00003B72 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  5540 00003B75 50                      	push rax
  5541 00003B76 6A02                    	push 2	; arg count
  5542 00003B78 488B0425[92080000]      	mov rax, qword [free_var_3]	; free var apply
  5543 00003B80 803805                  	cmp byte [rax], T_undefined
  5544 00003B83 0F8447240000            	je L_error_fvar_undefined
  5545 00003B89 803804                  	cmp byte [rax], T_closure
  5546 00003B8C 0F85C2240000            	jne L_error_non_closure
  5547 00003B92 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5548 00003B95 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5549 00003B98 483D[02000000]          	cmp rax, sob_boolean_false
  5550 00003B9E 0F859D000000            	jne .L_or_end_0003
  5551                                  	; preparing a tail-call
  5552                                  	; preparing a non-tail-call
  5553 00003BA4 488B4520                	mov rax, PARAM(0)	; param s
  5554 00003BA8 50                      	push rax
  5555 00003BA9 488B0425[900A0000]      	mov rax, qword [free_var_33]	; free var cdr
  5556 00003BB1 803805                  	cmp byte [rax], T_undefined
  5557 00003BB4 0F8416240000            	je L_error_fvar_undefined
  5558 00003BBA 50                      	push rax
  5559 00003BBB 6A02                    	push 2	; arg count
  5560 00003BBD 488B0425[180B0000]      	mov rax, qword [free_var_41]	; free var map
  5561 00003BC5 803805                  	cmp byte [rax], T_undefined
  5562 00003BC8 0F8402240000            	je L_error_fvar_undefined
  5563 00003BCE 803804                  	cmp byte [rax], T_closure
  5564 00003BD1 0F857D240000            	jne L_error_non_closure
  5565 00003BD7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5566 00003BDA FF5009                  	call SOB_CLOSURE_CODE(rax)
  5567 00003BDD 50                      	push rax
  5568 00003BDE 6A01                    	push 1	; arg count
  5569 00003BE0 488B4510                	mov rax, ENV
  5570 00003BE4 488B00                  	mov rax, qword [rax + 8 * 0]
  5571 00003BE7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  5572 00003BEA 488B00                  	mov rax, qword [rax]
  5573 00003BED 803804                  	cmp byte [rax], T_closure
  5574 00003BF0 0F855E240000            	jne L_error_non_closure
  5575 00003BF6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5576 00003BF9 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5577 00003BFC FF7500                  	push qword[rbp]
  5578 00003BFF 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  5579 00003C02 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  5580 00003C06 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  5581 00003C0A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  5582 00003C0E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  5583 00003C11 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  5584 00003C14 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  5585 00003C19 4983C103                	add r9, 3 	 ;for getting to the params
  5586 00003C1D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  5587 00003C21 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  5588                                  .L_tc_recycle_frame_loop_0025:
  5589 00003C24 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  5590 00003C27 7410                    	je .L_tc_recycle_frame_done_0025
  5591 00003C29 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  5592 00003C2C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  5593 00003C2F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  5594 00003C33 4983E808                	sub r8, 8	 ;move the top of the stack one down
  5595 00003C37 EBEB                    	jmp .L_tc_recycle_frame_loop_0025
  5596                                  .L_tc_recycle_frame_done_0025:
  5597 00003C39 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  5598 00003C3A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  5599 00003C3E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5600                                  .L_or_end_0003:
  5601 00003C41 EB0A                    	jmp .L_if_end_0005
  5602                                  .L_if_else_0005:
  5603 00003C43 48B8-                   	mov rax, L_constants + 2
  5603 00003C45 [0200000000000000] 
  5604                                  .L_if_end_0005:
  5605 00003C4D C9                      	leave
  5606 00003C4E C21800                  	ret AND_KILL_FRAME(1)
  5607                                  .L_lambda_simple_end_0025:	; new closure is in rax
  5608 00003C51 50                      	push rax
  5609 00003C52 488B4520                	mov rax, PARAM(0)	; param loop
  5610 00003C56 8F00                    	pop qword [rax]
  5611 00003C58 48B8-                   	mov rax, sob_void
  5611 00003C5A [0000000000000000] 
  5612                                  
  5613                                  	; preparing a non-tail-call
  5614 00003C62 488B4510                	mov rax, ENV
  5615 00003C66 488B00                  	mov rax, qword [rax + 8 * 0]
  5616 00003C69 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  5617 00003C6D 50                      	push rax
  5618 00003C6E 6A01                    	push 1	; arg count
  5619 00003C70 488B0425[5C0B0000]      	mov rax, qword [free_var_45]	; free var pair?
  5620 00003C78 803805                  	cmp byte [rax], T_undefined
  5621 00003C7B 0F844F230000            	je L_error_fvar_undefined
  5622 00003C81 803804                  	cmp byte [rax], T_closure
  5623 00003C84 0F85CA230000            	jne L_error_non_closure
  5624 00003C8A FF7001                  	push SOB_CLOSURE_ENV(rax)
  5625 00003C8D FF5009                  	call SOB_CLOSURE_CODE(rax)
  5626 00003C90 483D[02000000]          	cmp rax, sob_boolean_false
  5627 00003C96 746B                    	je .L_if_else_0006
  5628                                  	; preparing a tail-call
  5629 00003C98 488B4510                	mov rax, ENV
  5630 00003C9C 488B00                  	mov rax, qword [rax + 8 * 0]
  5631 00003C9F 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  5632 00003CA3 50                      	push rax
  5633 00003CA4 6A01                    	push 1	; arg count
  5634 00003CA6 488B4520                	mov rax, PARAM(0)	; param loop
  5635 00003CAA 488B00                  	mov rax, qword [rax]
  5636 00003CAD 803804                  	cmp byte [rax], T_closure
  5637 00003CB0 0F859E230000            	jne L_error_non_closure
  5638 00003CB6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5639 00003CB9 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5640 00003CBC FF7500                  	push qword[rbp]
  5641 00003CBF 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  5642 00003CC2 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  5643 00003CC6 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  5644 00003CCA 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  5645 00003CCE 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  5646 00003CD1 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  5647 00003CD4 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  5648 00003CD9 4983C103                	add r9, 3 	 ;for getting to the params
  5649 00003CDD 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  5650 00003CE1 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  5651                                  .L_tc_recycle_frame_loop_0026:
  5652 00003CE4 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  5653 00003CE7 7410                    	je .L_tc_recycle_frame_done_0026
  5654 00003CE9 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  5655 00003CEC 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  5656 00003CEF 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  5657 00003CF3 4983E808                	sub r8, 8	 ;move the top of the stack one down
  5658 00003CF7 EBEB                    	jmp .L_tc_recycle_frame_loop_0026
  5659                                  .L_tc_recycle_frame_done_0026:
  5660 00003CF9 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  5661 00003CFA 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  5662 00003CFE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5663 00003D01 EB0A                    	jmp .L_if_end_0006
  5664                                  .L_if_else_0006:
  5665 00003D03 48B8-                   	mov rax, L_constants + 2
  5665 00003D05 [0200000000000000] 
  5666                                  .L_if_end_0006:
  5667 00003D0D C9                      	leave
  5668 00003D0E C21800                  	ret AND_KILL_FRAME(1)
  5669                                  .L_lambda_simple_end_0024:	; new closure is in rax
  5670 00003D11 803804                  	cmp byte [rax], T_closure
  5671 00003D14 0F853A230000            	jne L_error_non_closure
  5672 00003D1A FF7001                  	push SOB_CLOSURE_ENV(rax)
  5673 00003D1D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5674 00003D20 FF7500                  	push qword[rbp]
  5675 00003D23 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  5676 00003D26 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  5677 00003D2A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  5678 00003D2E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  5679 00003D32 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  5680 00003D35 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  5681 00003D38 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  5682 00003D3D 4983C103                	add r9, 3 	 ;for getting to the params
  5683 00003D41 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  5684 00003D45 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  5685                                  .L_tc_recycle_frame_loop_0027:
  5686 00003D48 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  5687 00003D4B 7410                    	je .L_tc_recycle_frame_done_0027
  5688 00003D4D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  5689 00003D50 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  5690 00003D53 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  5691 00003D57 4983E808                	sub r8, 8	 ;move the top of the stack one down
  5692 00003D5B EBEB                    	jmp .L_tc_recycle_frame_loop_0027
  5693                                  .L_tc_recycle_frame_done_0027:
  5694 00003D5D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  5695 00003D5E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  5696 00003D62 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5697 00003D65 C9                      	leave
  5698 00003D66 C22000                  	ret AND_KILL_FRAME(2)
  5699                                  .L_lambda_opt_end_0004:	; new closure is in rax
  5700 00003D69 48890425[4B0B0000]      	mov qword [free_var_44], rax
  5701 00003D71 48B8-                   	mov rax, sob_void
  5701 00003D73 [0000000000000000] 
  5702                                  
  5703 00003D7B 4889C7                  	mov rdi, rax
  5704 00003D7E E8CF250000              	call print_sexpr_if_not_void
  5705 00003D83 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5706 00003D88 E870230000              	call malloc
  5707 00003D8D 50                      	push rax
  5708 00003D8E BF00000000              	mov rdi, 8 * 0	; new rib
  5709 00003D93 E865230000              	call malloc
  5710 00003D98 50                      	push rax
  5711 00003D99 BF08000000              	mov rdi, 8 * 1	; extended env
  5712 00003D9E E85A230000              	call malloc
  5713 00003DA3 488B7D10                	mov rdi, ENV
  5714 00003DA7 BE00000000              	mov rsi, 0
  5715 00003DAC BA01000000              	mov rdx, 1
  5716                                  .L_lambda_opt_env_loop_0005:	; ext_env[i + 1] <-- env[i]
  5717 00003DB1 4883FE00                	cmp rsi, 0
  5718 00003DB5 7410                    	je .L_lambda_opt_env_end_0005
  5719 00003DB7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5720 00003DBB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5721 00003DBF 48FFC6                  	inc rsi
  5722 00003DC2 48FFC2                  	inc rdx
  5723 00003DC5 EBEA                    	jmp .L_lambda_opt_env_loop_0005
  5724                                  .L_lambda_opt_env_end_0005:
  5725 00003DC7 5B                      	pop rbx
  5726 00003DC8 BE00000000              	mov rsi, 0
  5727                                  .L_lambda_opt_params_loop_0005:	; copy params
  5728 00003DCD 4883FE00                	cmp rsi, 0
  5729 00003DD1 740E                    	je .L_lambda_opt_params_end_0005
  5730 00003DD3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5731 00003DD8 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5732 00003DDC 48FFC6                  	inc rsi
  5733 00003DDF EBEC                    	jmp .L_lambda_opt_params_loop_0005
  5734                                  .L_lambda_opt_params_end_0005:
  5735 00003DE1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5736 00003DE4 4889C3                  	mov rbx, rax
  5737 00003DE7 58                      	pop rax
  5738 00003DE8 C60004                  	mov byte [rax], T_closure
  5739 00003DEB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5740 00003DEF 48C74009[FC3D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0005
  5741 00003DF7 E94F090000              	jmp .L_lambda_opt_end_0005
  5742                                  .L_lambda_opt_code_0005:	; lambda-opt body
  5743 00003DFC 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5744 00003E02 7411                    	je .L_lambda_opt_arity_check_exact_0005
  5745 00003E04 0F8F63040000            	jg .L_lambda_opt_arity_check_more_0005
  5746 00003E0A FF742410                	push qword [rsp + 8 * 2]
  5747 00003E0E 6A01                    	push 1
  5748 00003E10 E9B5220000              	jmp L_error_incorrect_arity_opt
  5749                                  .L_lambda_opt_arity_check_exact_0005:
  5750 00003E15 4883EC08                	sub rsp, 8
  5751 00003E19 488B442408              	mov rax, qword[rsp + 8 *1]
  5752 00003E1E 48890424                	mov qword[rsp], rax  
  5753 00003E22 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  5754 00003E27 4889442408              	mov qword[rsp + 8 * 1], rax
  5755 00003E2C B802000000              	mov rax, 2
  5756 00003E31 4889442410              	mov qword[rsp + 8 *2], rax
  5757 00003E36 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  5758 00003E3B 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  5759 00003E40 48B8-                   	mov rax, sob_nil
  5759 00003E42 [0100000000000000] 
  5760 00003E4A 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  5761 00003E4F C8000000                	enter 0, 0
  5762                                  	; preparing a tail-call
  5763 00003E53 48B8-                   	mov rax, L_constants + 1993
  5763 00003E55 [C907000000000000] 
  5764 00003E5D 50                      	push rax
  5765 00003E5E 6A01                    	push 1	; arg count
  5766 00003E60 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5767 00003E65 E893220000              	call malloc
  5768 00003E6A 50                      	push rax
  5769 00003E6B BF10000000              	mov rdi, 8 * 2	; new rib
  5770 00003E70 E888220000              	call malloc
  5771 00003E75 50                      	push rax
  5772 00003E76 BF10000000              	mov rdi, 8 * 2	; extended env
  5773 00003E7B E87D220000              	call malloc
  5774 00003E80 488B7D10                	mov rdi, ENV
  5775 00003E84 BE00000000              	mov rsi, 0
  5776 00003E89 BA01000000              	mov rdx, 1
  5777                                  .L_lambda_simple_env_loop_002a:	; ext_env[i + 1] <-- env[i]
  5778 00003E8E 4883FE01                	cmp rsi, 1
  5779 00003E92 7410                    	je .L_lambda_simple_env_end_002a
  5780 00003E94 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5781 00003E98 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5782 00003E9C 48FFC6                  	inc rsi
  5783 00003E9F 48FFC2                  	inc rdx
  5784 00003EA2 EBEA                    	jmp .L_lambda_simple_env_loop_002a
  5785                                  .L_lambda_simple_env_end_002a:
  5786 00003EA4 5B                      	pop rbx
  5787 00003EA5 BE00000000              	mov rsi, 0
  5788                                  .L_lambda_simple_params_loop_002a:	; copy params
  5789 00003EAA 4883FE02                	cmp rsi, 2
  5790 00003EAE 740E                    	je .L_lambda_simple_params_end_002a
  5791 00003EB0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5792 00003EB5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5793 00003EB9 48FFC6                  	inc rsi
  5794 00003EBC EBEC                    	jmp .L_lambda_simple_params_loop_002a
  5795                                  .L_lambda_simple_params_end_002a:
  5796 00003EBE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5797 00003EC1 4889C3                  	mov rbx, rax
  5798 00003EC4 58                      	pop rax
  5799 00003EC5 C60004                  	mov byte [rax], T_closure
  5800 00003EC8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5801 00003ECC 48C74009[D93E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002a
  5802 00003ED4 E937030000              	jmp .L_lambda_simple_end_002a
  5803                                  .L_lambda_simple_code_002a:	; lambda-simple body
  5804 00003ED9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5805 00003EDF 740B                    	je .L_lambda_simple_arity_check_ok_002a
  5806 00003EE1 FF742410                	push qword [rsp + 8 * 2]
  5807 00003EE5 6A01                    	push 1
  5808 00003EE7 E9CA210000              	jmp L_error_incorrect_arity_simple
  5809                                  .L_lambda_simple_arity_check_ok_002a:
  5810 00003EEC C8000000                	enter 0, 0
  5811 00003EF0 BF08000000              	mov rdi, 8*1
  5812 00003EF5 E803220000              	call malloc
  5813 00003EFA 488B5D20                	mov rbx, PARAM(0)
  5814 00003EFE 488918                  	mov qword[rax], rbx
  5815 00003F01 48894520                	mov PARAM(0), rax
  5816 00003F05 48B8-                   	mov rax, sob_void
  5816 00003F07 [0000000000000000] 
  5817                                  
  5818 00003F0F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5819 00003F14 E8E4210000              	call malloc
  5820 00003F19 50                      	push rax
  5821 00003F1A BF08000000              	mov rdi, 8 * 1	; new rib
  5822 00003F1F E8D9210000              	call malloc
  5823 00003F24 50                      	push rax
  5824 00003F25 BF18000000              	mov rdi, 8 * 3	; extended env
  5825 00003F2A E8CE210000              	call malloc
  5826 00003F2F 488B7D10                	mov rdi, ENV
  5827 00003F33 BE00000000              	mov rsi, 0
  5828 00003F38 BA01000000              	mov rdx, 1
  5829                                  .L_lambda_simple_env_loop_002b:	; ext_env[i + 1] <-- env[i]
  5830 00003F3D 4883FE02                	cmp rsi, 2
  5831 00003F41 7410                    	je .L_lambda_simple_env_end_002b
  5832 00003F43 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5833 00003F47 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5834 00003F4B 48FFC6                  	inc rsi
  5835 00003F4E 48FFC2                  	inc rdx
  5836 00003F51 EBEA                    	jmp .L_lambda_simple_env_loop_002b
  5837                                  .L_lambda_simple_env_end_002b:
  5838 00003F53 5B                      	pop rbx
  5839 00003F54 BE00000000              	mov rsi, 0
  5840                                  .L_lambda_simple_params_loop_002b:	; copy params
  5841 00003F59 4883FE01                	cmp rsi, 1
  5842 00003F5D 740E                    	je .L_lambda_simple_params_end_002b
  5843 00003F5F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5844 00003F64 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5845 00003F68 48FFC6                  	inc rsi
  5846 00003F6B EBEC                    	jmp .L_lambda_simple_params_loop_002b
  5847                                  .L_lambda_simple_params_end_002b:
  5848 00003F6D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5849 00003F70 4889C3                  	mov rbx, rax
  5850 00003F73 58                      	pop rax
  5851 00003F74 C60004                  	mov byte [rax], T_closure
  5852 00003F77 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5853 00003F7B 48C74009[883F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002b
  5854 00003F83 E98E010000              	jmp .L_lambda_simple_end_002b
  5855                                  .L_lambda_simple_code_002b:	; lambda-simple body
  5856 00003F88 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5857 00003F8E 740B                    	je .L_lambda_simple_arity_check_ok_002b
  5858 00003F90 FF742410                	push qword [rsp + 8 * 2]
  5859 00003F94 6A01                    	push 1
  5860 00003F96 E91B210000              	jmp L_error_incorrect_arity_simple
  5861                                  .L_lambda_simple_arity_check_ok_002b:
  5862 00003F9B C8000000                	enter 0, 0
  5863                                  	; preparing a non-tail-call
  5864                                  	; preparing a non-tail-call
  5865 00003F9F 488B4520                	mov rax, PARAM(0)	; param s
  5866 00003FA3 50                      	push rax
  5867 00003FA4 6A01                    	push 1	; arg count
  5868 00003FA6 488B0425[91090000]      	mov rax, qword [free_var_18]	; free var car
  5869 00003FAE 803805                  	cmp byte [rax], T_undefined
  5870 00003FB1 0F8419200000            	je L_error_fvar_undefined
  5871 00003FB7 803804                  	cmp byte [rax], T_closure
  5872 00003FBA 0F8594200000            	jne L_error_non_closure
  5873 00003FC0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5874 00003FC3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5875 00003FC6 50                      	push rax
  5876 00003FC7 6A01                    	push 1	; arg count
  5877 00003FC9 488B0425[3A0B0000]      	mov rax, qword [free_var_43]	; free var null?
  5878 00003FD1 803805                  	cmp byte [rax], T_undefined
  5879 00003FD4 0F84F61F0000            	je L_error_fvar_undefined
  5880 00003FDA 803804                  	cmp byte [rax], T_closure
  5881 00003FDD 0F8571200000            	jne L_error_non_closure
  5882 00003FE3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5883 00003FE6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5884 00003FE9 483D[02000000]          	cmp rax, sob_boolean_false
  5885 00003FEF 0F851D010000            	jne .L_or_end_0007
  5886                                  	; preparing a non-tail-call
  5887                                  	; preparing a non-tail-call
  5888 00003FF5 488B4520                	mov rax, PARAM(0)	; param s
  5889 00003FF9 50                      	push rax
  5890 00003FFA 488B0425[91090000]      	mov rax, qword [free_var_18]	; free var car
  5891 00004002 803805                  	cmp byte [rax], T_undefined
  5892 00004005 0F84C51F0000            	je L_error_fvar_undefined
  5893 0000400B 50                      	push rax
  5894 0000400C 6A02                    	push 2	; arg count
  5895 0000400E 488B0425[180B0000]      	mov rax, qword [free_var_41]	; free var map
  5896 00004016 803805                  	cmp byte [rax], T_undefined
  5897 00004019 0F84B11F0000            	je L_error_fvar_undefined
  5898 0000401F 803804                  	cmp byte [rax], T_closure
  5899 00004022 0F852C200000            	jne L_error_non_closure
  5900 00004028 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5901 0000402B FF5009                  	call SOB_CLOSURE_CODE(rax)
  5902 0000402E 50                      	push rax
  5903 0000402F 488B4510                	mov rax, ENV
  5904 00004033 488B4008                	mov rax, qword [rax + 8 * 1]
  5905 00004037 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  5906 0000403A 50                      	push rax
  5907 0000403B 6A02                    	push 2	; arg count
  5908 0000403D 488B0425[92080000]      	mov rax, qword [free_var_3]	; free var apply
  5909 00004045 803805                  	cmp byte [rax], T_undefined
  5910 00004048 0F84821F0000            	je L_error_fvar_undefined
  5911 0000404E 803804                  	cmp byte [rax], T_closure
  5912 00004051 0F85FD1F0000            	jne L_error_non_closure
  5913 00004057 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5914 0000405A FF5009                  	call SOB_CLOSURE_CODE(rax)
  5915 0000405D 483D[02000000]          	cmp rax, sob_boolean_false
  5916 00004063 0F849F000000            	je .L_if_else_000b
  5917                                  	; preparing a tail-call
  5918                                  	; preparing a non-tail-call
  5919 00004069 488B4520                	mov rax, PARAM(0)	; param s
  5920 0000406D 50                      	push rax
  5921 0000406E 488B0425[900A0000]      	mov rax, qword [free_var_33]	; free var cdr
  5922 00004076 803805                  	cmp byte [rax], T_undefined
  5923 00004079 0F84511F0000            	je L_error_fvar_undefined
  5924 0000407F 50                      	push rax
  5925 00004080 6A02                    	push 2	; arg count
  5926 00004082 488B0425[180B0000]      	mov rax, qword [free_var_41]	; free var map
  5927 0000408A 803805                  	cmp byte [rax], T_undefined
  5928 0000408D 0F843D1F0000            	je L_error_fvar_undefined
  5929 00004093 803804                  	cmp byte [rax], T_closure
  5930 00004096 0F85B81F0000            	jne L_error_non_closure
  5931 0000409C FF7001                  	push SOB_CLOSURE_ENV(rax)
  5932 0000409F FF5009                  	call SOB_CLOSURE_CODE(rax)
  5933 000040A2 50                      	push rax
  5934 000040A3 6A01                    	push 1	; arg count
  5935 000040A5 488B4510                	mov rax, ENV
  5936 000040A9 488B00                  	mov rax, qword [rax + 8 * 0]
  5937 000040AC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  5938 000040AF 488B00                  	mov rax, qword [rax]
  5939 000040B2 803804                  	cmp byte [rax], T_closure
  5940 000040B5 0F85991F0000            	jne L_error_non_closure
  5941 000040BB FF7001                  	push SOB_CLOSURE_ENV(rax)
  5942 000040BE FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5943 000040C1 FF7500                  	push qword[rbp]
  5944 000040C4 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  5945 000040C7 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  5946 000040CB 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  5947 000040CF 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  5948 000040D3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  5949 000040D6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  5950 000040D9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  5951 000040DE 4983C103                	add r9, 3 	 ;for getting to the params
  5952 000040E2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  5953 000040E6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  5954                                  .L_tc_recycle_frame_loop_002e:
  5955 000040E9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  5956 000040EC 7410                    	je .L_tc_recycle_frame_done_002e
  5957 000040EE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  5958 000040F1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  5959 000040F4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  5960 000040F8 4983E808                	sub r8, 8	 ;move the top of the stack one down
  5961 000040FC EBEB                    	jmp .L_tc_recycle_frame_loop_002e
  5962                                  .L_tc_recycle_frame_done_002e:
  5963 000040FE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  5964 000040FF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  5965 00004103 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5966 00004106 EB0A                    	jmp .L_if_end_000b
  5967                                  .L_if_else_000b:
  5968 00004108 48B8-                   	mov rax, L_constants + 2
  5968 0000410A [0200000000000000] 
  5969                                  .L_if_end_000b:
  5970                                  .L_or_end_0007:
  5971 00004112 C9                      	leave
  5972 00004113 C21800                  	ret AND_KILL_FRAME(1)
  5973                                  .L_lambda_simple_end_002b:	; new closure is in rax
  5974 00004116 50                      	push rax
  5975 00004117 488B4520                	mov rax, PARAM(0)	; param loop
  5976 0000411B 8F00                    	pop qword [rax]
  5977 0000411D 48B8-                   	mov rax, sob_void
  5977 0000411F [0000000000000000] 
  5978                                  
  5979                                  	; preparing a non-tail-call
  5980 00004127 488B4510                	mov rax, ENV
  5981 0000412B 488B00                  	mov rax, qword [rax + 8 * 0]
  5982 0000412E 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  5983 00004132 50                      	push rax
  5984 00004133 6A01                    	push 1	; arg count
  5985 00004135 488B0425[3A0B0000]      	mov rax, qword [free_var_43]	; free var null?
  5986 0000413D 803805                  	cmp byte [rax], T_undefined
  5987 00004140 0F848A1E0000            	je L_error_fvar_undefined
  5988 00004146 803804                  	cmp byte [rax], T_closure
  5989 00004149 0F85051F0000            	jne L_error_non_closure
  5990 0000414F FF7001                  	push SOB_CLOSURE_ENV(rax)
  5991 00004152 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5992 00004155 483D[02000000]          	cmp rax, sob_boolean_false
  5993 0000415B 0F85AB000000            	jne .L_or_end_0008
  5994                                  	; preparing a non-tail-call
  5995 00004161 488B4510                	mov rax, ENV
  5996 00004165 488B00                  	mov rax, qword [rax + 8 * 0]
  5997 00004168 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  5998 0000416C 50                      	push rax
  5999 0000416D 6A01                    	push 1	; arg count
  6000 0000416F 488B0425[5C0B0000]      	mov rax, qword [free_var_45]	; free var pair?
  6001 00004177 803805                  	cmp byte [rax], T_undefined
  6002 0000417A 0F84501E0000            	je L_error_fvar_undefined
  6003 00004180 803804                  	cmp byte [rax], T_closure
  6004 00004183 0F85CB1E0000            	jne L_error_non_closure
  6005 00004189 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6006 0000418C FF5009                  	call SOB_CLOSURE_CODE(rax)
  6007 0000418F 483D[02000000]          	cmp rax, sob_boolean_false
  6008 00004195 746B                    	je .L_if_else_000c
  6009                                  	; preparing a tail-call
  6010 00004197 488B4510                	mov rax, ENV
  6011 0000419B 488B00                  	mov rax, qword [rax + 8 * 0]
  6012 0000419E 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6013 000041A2 50                      	push rax
  6014 000041A3 6A01                    	push 1	; arg count
  6015 000041A5 488B4520                	mov rax, PARAM(0)	; param loop
  6016 000041A9 488B00                  	mov rax, qword [rax]
  6017 000041AC 803804                  	cmp byte [rax], T_closure
  6018 000041AF 0F859F1E0000            	jne L_error_non_closure
  6019 000041B5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6020 000041B8 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6021 000041BB FF7500                  	push qword[rbp]
  6022 000041BE 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6023 000041C1 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6024 000041C5 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6025 000041C9 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6026 000041CD 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6027 000041D0 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6028 000041D3 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6029 000041D8 4983C103                	add r9, 3 	 ;for getting to the params
  6030 000041DC 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6031 000041E0 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6032                                  .L_tc_recycle_frame_loop_002f:
  6033 000041E3 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6034 000041E6 7410                    	je .L_tc_recycle_frame_done_002f
  6035 000041E8 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6036 000041EB 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6037 000041EE 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6038 000041F2 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6039 000041F6 EBEB                    	jmp .L_tc_recycle_frame_loop_002f
  6040                                  .L_tc_recycle_frame_done_002f:
  6041 000041F8 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6042 000041F9 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6043 000041FD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6044 00004200 EB0A                    	jmp .L_if_end_000c
  6045                                  .L_if_else_000c:
  6046 00004202 48B8-                   	mov rax, L_constants + 2
  6046 00004204 [0200000000000000] 
  6047                                  .L_if_end_000c:
  6048                                  .L_or_end_0008:
  6049 0000420C C9                      	leave
  6050 0000420D C21800                  	ret AND_KILL_FRAME(1)
  6051                                  .L_lambda_simple_end_002a:	; new closure is in rax
  6052 00004210 803804                  	cmp byte [rax], T_closure
  6053 00004213 0F853B1E0000            	jne L_error_non_closure
  6054 00004219 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6055 0000421C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6056 0000421F FF7500                  	push qword[rbp]
  6057 00004222 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6058 00004225 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6059 00004229 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6060 0000422D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6061 00004231 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6062 00004234 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6063 00004237 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6064 0000423C 4983C103                	add r9, 3 	 ;for getting to the params
  6065 00004240 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6066 00004244 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6067                                  .L_tc_recycle_frame_loop_0030:
  6068 00004247 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6069 0000424A 7410                    	je .L_tc_recycle_frame_done_0030
  6070 0000424C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6071 0000424F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6072 00004252 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6073 00004256 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6074 0000425A EBEB                    	jmp .L_tc_recycle_frame_loop_0030
  6075                                  .L_tc_recycle_frame_done_0030:
  6076 0000425C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6077 0000425D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6078 00004261 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6079 00004264 C9                      	leave
  6080 00004265 C21800                  	ret AND_KILL_FRAME(1)
  6081 00004268 E9DE040000              	jmp .L_lambda_opt_end_0005	; new closure is in rax
  6082                                  .L_lambda_opt_arity_check_more_0005:
  6083 0000426D 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  6084 00004272 49B9-                   	mov r9, sob_nil
  6084 00004274 [0100000000000000] 
  6085 0000427C 4889E3                  	mov rbx, rsp 
  6086 0000427F 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  6087 00004283 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  6088 00004286 49C1E003                	shl r8, 3
  6089 0000428A 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  6090 0000428D 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  6091                                  .L_lambda_opt_stack_shrink_loop_0005:
  6092 00004292 4983F801                	cmp r8, 1
  6093 00004296 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0005
  6094 00004298 BF11000000              	mov rdi, 1+8+8	;for pair
  6095 0000429D E85B1E0000              	call malloc	 ;to create the pair in the stack
  6096 000042A2 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  6097 000042A5 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
  6098 000042A8 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
  6099 000042AC 4C894809                 	mov qword[rax+1+8],r9
  6100 000042B0 4989C1                  	mov r9, rax	 ; for the recursion 
  6101 000042B3 49FFC8                  	dec r8 	;we finished copy another opt param to the list
  6102 000042B6 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
  6103 000042BA EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0005
  6104                                  .L_lambda_opt_stack_shrink_loop_exit_0005:
  6105 000042BC 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
  6106 000042C1 4883E902                	sub rcx, 2
  6107 000042C5 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
  6108 000042C9 4801CC                  	add rsp, rcx	 ;shrinking the stack
  6109 000042CC 4889E0                  	mov rax, rsp
  6110 000042CF 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
  6111 000042D2 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
  6112 000042D6 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
  6113 000042D9 4883C018                	add rax, 3 * 8 	;now rax is param 0
  6114 000042DD 49C1E003                	shl r8, 3 	; convert to byte
  6115 000042E1 4C01C0                  	add rax, r8 	;now rax is the top of the stack
  6116 000042E4 4C8908                  	mov qword[rax], r9	;puting the list at the top
  6117 000042E7 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
  6118 000042EB 4889E3                  	mov rbx, rsp 
  6119 000042EE 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
  6120 000042F1 41BA01000000            	mov r10, 1 	 ;r10 is the not opt params length
  6121 000042F7 49FFCA                  	dec r10 
  6122 000042FA 49C1E203                	shl r10, 3	;to get bytes
  6123 000042FE 4883C318                	add rbx, 3*8 	;rbx is the first param
  6124 00004302 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
  6125 00004305 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  6126 00004308 4C8900                  	mov qword[rax], r8
  6127 0000430B 4883E808                	sub rax, 8
  6128 0000430F 4883EB08                	sub rbx, 8
  6129 00004313 4889E0                  	mov rax, rsp
  6130 00004316 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  6131 00004319 48C744241002000000      	mov qword [rsp+2*8], 2
  6132 00004322 488B5808                	mov rbx, qword[rax + 8 *1]
  6133 00004326 48895C2408              	mov qword [rsp + 1*8] ,rbx
  6134 0000432B 488B18                  	mov rbx, qword[rax]
  6135 0000432E 48891C24                	mov qword [rsp], rbx
  6136 00004332 C8000000                	enter 0, 0
  6137                                  	; preparing a tail-call
  6138 00004336 48B8-                   	mov rax, L_constants + 1993
  6138 00004338 [C907000000000000] 
  6139 00004340 50                      	push rax
  6140 00004341 6A01                    	push 1	; arg count
  6141 00004343 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6142 00004348 E8B01D0000              	call malloc
  6143 0000434D 50                      	push rax
  6144 0000434E BF10000000              	mov rdi, 8 * 2	; new rib
  6145 00004353 E8A51D0000              	call malloc
  6146 00004358 50                      	push rax
  6147 00004359 BF10000000              	mov rdi, 8 * 2	; extended env
  6148 0000435E E89A1D0000              	call malloc
  6149 00004363 488B7D10                	mov rdi, ENV
  6150 00004367 BE00000000              	mov rsi, 0
  6151 0000436C BA01000000              	mov rdx, 1
  6152                                  .L_lambda_simple_env_loop_0028:	; ext_env[i + 1] <-- env[i]
  6153 00004371 4883FE01                	cmp rsi, 1
  6154 00004375 7410                    	je .L_lambda_simple_env_end_0028
  6155 00004377 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6156 0000437B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6157 0000437F 48FFC6                  	inc rsi
  6158 00004382 48FFC2                  	inc rdx
  6159 00004385 EBEA                    	jmp .L_lambda_simple_env_loop_0028
  6160                                  .L_lambda_simple_env_end_0028:
  6161 00004387 5B                      	pop rbx
  6162 00004388 BE00000000              	mov rsi, 0
  6163                                  .L_lambda_simple_params_loop_0028:	; copy params
  6164 0000438D 4883FE02                	cmp rsi, 2
  6165 00004391 740E                    	je .L_lambda_simple_params_end_0028
  6166 00004393 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6167 00004398 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6168 0000439C 48FFC6                  	inc rsi
  6169 0000439F EBEC                    	jmp .L_lambda_simple_params_loop_0028
  6170                                  .L_lambda_simple_params_end_0028:
  6171 000043A1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6172 000043A4 4889C3                  	mov rbx, rax
  6173 000043A7 58                      	pop rax
  6174 000043A8 C60004                  	mov byte [rax], T_closure
  6175 000043AB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6176 000043AF 48C74009[BC430000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0028
  6177 000043B7 E937030000              	jmp .L_lambda_simple_end_0028
  6178                                  .L_lambda_simple_code_0028:	; lambda-simple body
  6179 000043BC 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6180 000043C2 740B                    	je .L_lambda_simple_arity_check_ok_0028
  6181 000043C4 FF742410                	push qword [rsp + 8 * 2]
  6182 000043C8 6A01                    	push 1
  6183 000043CA E9E71C0000              	jmp L_error_incorrect_arity_simple
  6184                                  .L_lambda_simple_arity_check_ok_0028:
  6185 000043CF C8000000                	enter 0, 0
  6186 000043D3 BF08000000              	mov rdi, 8*1
  6187 000043D8 E8201D0000              	call malloc
  6188 000043DD 488B5D20                	mov rbx, PARAM(0)
  6189 000043E1 488918                  	mov qword[rax], rbx
  6190 000043E4 48894520                	mov PARAM(0), rax
  6191 000043E8 48B8-                   	mov rax, sob_void
  6191 000043EA [0000000000000000] 
  6192                                  
  6193 000043F2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6194 000043F7 E8011D0000              	call malloc
  6195 000043FC 50                      	push rax
  6196 000043FD BF08000000              	mov rdi, 8 * 1	; new rib
  6197 00004402 E8F61C0000              	call malloc
  6198 00004407 50                      	push rax
  6199 00004408 BF18000000              	mov rdi, 8 * 3	; extended env
  6200 0000440D E8EB1C0000              	call malloc
  6201 00004412 488B7D10                	mov rdi, ENV
  6202 00004416 BE00000000              	mov rsi, 0
  6203 0000441B BA01000000              	mov rdx, 1
  6204                                  .L_lambda_simple_env_loop_0029:	; ext_env[i + 1] <-- env[i]
  6205 00004420 4883FE02                	cmp rsi, 2
  6206 00004424 7410                    	je .L_lambda_simple_env_end_0029
  6207 00004426 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6208 0000442A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6209 0000442E 48FFC6                  	inc rsi
  6210 00004431 48FFC2                  	inc rdx
  6211 00004434 EBEA                    	jmp .L_lambda_simple_env_loop_0029
  6212                                  .L_lambda_simple_env_end_0029:
  6213 00004436 5B                      	pop rbx
  6214 00004437 BE00000000              	mov rsi, 0
  6215                                  .L_lambda_simple_params_loop_0029:	; copy params
  6216 0000443C 4883FE01                	cmp rsi, 1
  6217 00004440 740E                    	je .L_lambda_simple_params_end_0029
  6218 00004442 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6219 00004447 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6220 0000444B 48FFC6                  	inc rsi
  6221 0000444E EBEC                    	jmp .L_lambda_simple_params_loop_0029
  6222                                  .L_lambda_simple_params_end_0029:
  6223 00004450 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6224 00004453 4889C3                  	mov rbx, rax
  6225 00004456 58                      	pop rax
  6226 00004457 C60004                  	mov byte [rax], T_closure
  6227 0000445A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6228 0000445E 48C74009[6B440000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0029
  6229 00004466 E98E010000              	jmp .L_lambda_simple_end_0029
  6230                                  .L_lambda_simple_code_0029:	; lambda-simple body
  6231 0000446B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6232 00004471 740B                    	je .L_lambda_simple_arity_check_ok_0029
  6233 00004473 FF742410                	push qword [rsp + 8 * 2]
  6234 00004477 6A01                    	push 1
  6235 00004479 E9381C0000              	jmp L_error_incorrect_arity_simple
  6236                                  .L_lambda_simple_arity_check_ok_0029:
  6237 0000447E C8000000                	enter 0, 0
  6238                                  	; preparing a non-tail-call
  6239                                  	; preparing a non-tail-call
  6240 00004482 488B4520                	mov rax, PARAM(0)	; param s
  6241 00004486 50                      	push rax
  6242 00004487 6A01                    	push 1	; arg count
  6243 00004489 488B0425[91090000]      	mov rax, qword [free_var_18]	; free var car
  6244 00004491 803805                  	cmp byte [rax], T_undefined
  6245 00004494 0F84361B0000            	je L_error_fvar_undefined
  6246 0000449A 803804                  	cmp byte [rax], T_closure
  6247 0000449D 0F85B11B0000            	jne L_error_non_closure
  6248 000044A3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6249 000044A6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6250 000044A9 50                      	push rax
  6251 000044AA 6A01                    	push 1	; arg count
  6252 000044AC 488B0425[3A0B0000]      	mov rax, qword [free_var_43]	; free var null?
  6253 000044B4 803805                  	cmp byte [rax], T_undefined
  6254 000044B7 0F84131B0000            	je L_error_fvar_undefined
  6255 000044BD 803804                  	cmp byte [rax], T_closure
  6256 000044C0 0F858E1B0000            	jne L_error_non_closure
  6257 000044C6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6258 000044C9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6259 000044CC 483D[02000000]          	cmp rax, sob_boolean_false
  6260 000044D2 0F851D010000            	jne .L_or_end_0005
  6261                                  	; preparing a non-tail-call
  6262                                  	; preparing a non-tail-call
  6263 000044D8 488B4520                	mov rax, PARAM(0)	; param s
  6264 000044DC 50                      	push rax
  6265 000044DD 488B0425[91090000]      	mov rax, qword [free_var_18]	; free var car
  6266 000044E5 803805                  	cmp byte [rax], T_undefined
  6267 000044E8 0F84E21A0000            	je L_error_fvar_undefined
  6268 000044EE 50                      	push rax
  6269 000044EF 6A02                    	push 2	; arg count
  6270 000044F1 488B0425[180B0000]      	mov rax, qword [free_var_41]	; free var map
  6271 000044F9 803805                  	cmp byte [rax], T_undefined
  6272 000044FC 0F84CE1A0000            	je L_error_fvar_undefined
  6273 00004502 803804                  	cmp byte [rax], T_closure
  6274 00004505 0F85491B0000            	jne L_error_non_closure
  6275 0000450B FF7001                  	push SOB_CLOSURE_ENV(rax)
  6276 0000450E FF5009                  	call SOB_CLOSURE_CODE(rax)
  6277 00004511 50                      	push rax
  6278 00004512 488B4510                	mov rax, ENV
  6279 00004516 488B4008                	mov rax, qword [rax + 8 * 1]
  6280 0000451A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  6281 0000451D 50                      	push rax
  6282 0000451E 6A02                    	push 2	; arg count
  6283 00004520 488B0425[92080000]      	mov rax, qword [free_var_3]	; free var apply
  6284 00004528 803805                  	cmp byte [rax], T_undefined
  6285 0000452B 0F849F1A0000            	je L_error_fvar_undefined
  6286 00004531 803804                  	cmp byte [rax], T_closure
  6287 00004534 0F851A1B0000            	jne L_error_non_closure
  6288 0000453A FF7001                  	push SOB_CLOSURE_ENV(rax)
  6289 0000453D FF5009                  	call SOB_CLOSURE_CODE(rax)
  6290 00004540 483D[02000000]          	cmp rax, sob_boolean_false
  6291 00004546 0F849F000000            	je .L_if_else_0009
  6292                                  	; preparing a tail-call
  6293                                  	; preparing a non-tail-call
  6294 0000454C 488B4520                	mov rax, PARAM(0)	; param s
  6295 00004550 50                      	push rax
  6296 00004551 488B0425[900A0000]      	mov rax, qword [free_var_33]	; free var cdr
  6297 00004559 803805                  	cmp byte [rax], T_undefined
  6298 0000455C 0F846E1A0000            	je L_error_fvar_undefined
  6299 00004562 50                      	push rax
  6300 00004563 6A02                    	push 2	; arg count
  6301 00004565 488B0425[180B0000]      	mov rax, qword [free_var_41]	; free var map
  6302 0000456D 803805                  	cmp byte [rax], T_undefined
  6303 00004570 0F845A1A0000            	je L_error_fvar_undefined
  6304 00004576 803804                  	cmp byte [rax], T_closure
  6305 00004579 0F85D51A0000            	jne L_error_non_closure
  6306 0000457F FF7001                  	push SOB_CLOSURE_ENV(rax)
  6307 00004582 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6308 00004585 50                      	push rax
  6309 00004586 6A01                    	push 1	; arg count
  6310 00004588 488B4510                	mov rax, ENV
  6311 0000458C 488B00                  	mov rax, qword [rax + 8 * 0]
  6312 0000458F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  6313 00004592 488B00                  	mov rax, qword [rax]
  6314 00004595 803804                  	cmp byte [rax], T_closure
  6315 00004598 0F85B61A0000            	jne L_error_non_closure
  6316 0000459E FF7001                  	push SOB_CLOSURE_ENV(rax)
  6317 000045A1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6318 000045A4 FF7500                  	push qword[rbp]
  6319 000045A7 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6320 000045AA 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6321 000045AE 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6322 000045B2 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6323 000045B6 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6324 000045B9 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6325 000045BC 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6326 000045C1 4983C103                	add r9, 3 	 ;for getting to the params
  6327 000045C5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6328 000045C9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6329                                  .L_tc_recycle_frame_loop_002b:
  6330 000045CC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6331 000045CF 7410                    	je .L_tc_recycle_frame_done_002b
  6332 000045D1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6333 000045D4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6334 000045D7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6335 000045DB 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6336 000045DF EBEB                    	jmp .L_tc_recycle_frame_loop_002b
  6337                                  .L_tc_recycle_frame_done_002b:
  6338 000045E1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6339 000045E2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6340 000045E6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6341 000045E9 EB0A                    	jmp .L_if_end_0009
  6342                                  .L_if_else_0009:
  6343 000045EB 48B8-                   	mov rax, L_constants + 2
  6343 000045ED [0200000000000000] 
  6344                                  .L_if_end_0009:
  6345                                  .L_or_end_0005:
  6346 000045F5 C9                      	leave
  6347 000045F6 C21800                  	ret AND_KILL_FRAME(1)
  6348                                  .L_lambda_simple_end_0029:	; new closure is in rax
  6349 000045F9 50                      	push rax
  6350 000045FA 488B4520                	mov rax, PARAM(0)	; param loop
  6351 000045FE 8F00                    	pop qword [rax]
  6352 00004600 48B8-                   	mov rax, sob_void
  6352 00004602 [0000000000000000] 
  6353                                  
  6354                                  	; preparing a non-tail-call
  6355 0000460A 488B4510                	mov rax, ENV
  6356 0000460E 488B00                  	mov rax, qword [rax + 8 * 0]
  6357 00004611 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6358 00004615 50                      	push rax
  6359 00004616 6A01                    	push 1	; arg count
  6360 00004618 488B0425[3A0B0000]      	mov rax, qword [free_var_43]	; free var null?
  6361 00004620 803805                  	cmp byte [rax], T_undefined
  6362 00004623 0F84A7190000            	je L_error_fvar_undefined
  6363 00004629 803804                  	cmp byte [rax], T_closure
  6364 0000462C 0F85221A0000            	jne L_error_non_closure
  6365 00004632 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6366 00004635 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6367 00004638 483D[02000000]          	cmp rax, sob_boolean_false
  6368 0000463E 0F85AB000000            	jne .L_or_end_0006
  6369                                  	; preparing a non-tail-call
  6370 00004644 488B4510                	mov rax, ENV
  6371 00004648 488B00                  	mov rax, qword [rax + 8 * 0]
  6372 0000464B 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6373 0000464F 50                      	push rax
  6374 00004650 6A01                    	push 1	; arg count
  6375 00004652 488B0425[5C0B0000]      	mov rax, qword [free_var_45]	; free var pair?
  6376 0000465A 803805                  	cmp byte [rax], T_undefined
  6377 0000465D 0F846D190000            	je L_error_fvar_undefined
  6378 00004663 803804                  	cmp byte [rax], T_closure
  6379 00004666 0F85E8190000            	jne L_error_non_closure
  6380 0000466C FF7001                  	push SOB_CLOSURE_ENV(rax)
  6381 0000466F FF5009                  	call SOB_CLOSURE_CODE(rax)
  6382 00004672 483D[02000000]          	cmp rax, sob_boolean_false
  6383 00004678 746B                    	je .L_if_else_000a
  6384                                  	; preparing a tail-call
  6385 0000467A 488B4510                	mov rax, ENV
  6386 0000467E 488B00                  	mov rax, qword [rax + 8 * 0]
  6387 00004681 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6388 00004685 50                      	push rax
  6389 00004686 6A01                    	push 1	; arg count
  6390 00004688 488B4520                	mov rax, PARAM(0)	; param loop
  6391 0000468C 488B00                  	mov rax, qword [rax]
  6392 0000468F 803804                  	cmp byte [rax], T_closure
  6393 00004692 0F85BC190000            	jne L_error_non_closure
  6394 00004698 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6395 0000469B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6396 0000469E FF7500                  	push qword[rbp]
  6397 000046A1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6398 000046A4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6399 000046A8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6400 000046AC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6401 000046B0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6402 000046B3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6403 000046B6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6404 000046BB 4983C103                	add r9, 3 	 ;for getting to the params
  6405 000046BF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6406 000046C3 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6407                                  .L_tc_recycle_frame_loop_002c:
  6408 000046C6 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6409 000046C9 7410                    	je .L_tc_recycle_frame_done_002c
  6410 000046CB 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6411 000046CE 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6412 000046D1 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6413 000046D5 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6414 000046D9 EBEB                    	jmp .L_tc_recycle_frame_loop_002c
  6415                                  .L_tc_recycle_frame_done_002c:
  6416 000046DB 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6417 000046DC 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6418 000046E0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6419 000046E3 EB0A                    	jmp .L_if_end_000a
  6420                                  .L_if_else_000a:
  6421 000046E5 48B8-                   	mov rax, L_constants + 2
  6421 000046E7 [0200000000000000] 
  6422                                  .L_if_end_000a:
  6423                                  .L_or_end_0006:
  6424 000046EF C9                      	leave
  6425 000046F0 C21800                  	ret AND_KILL_FRAME(1)
  6426                                  .L_lambda_simple_end_0028:	; new closure is in rax
  6427 000046F3 803804                  	cmp byte [rax], T_closure
  6428 000046F6 0F8558190000            	jne L_error_non_closure
  6429 000046FC FF7001                  	push SOB_CLOSURE_ENV(rax)
  6430 000046FF FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6431 00004702 FF7500                  	push qword[rbp]
  6432 00004705 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6433 00004708 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6434 0000470C 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6435 00004710 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6436 00004714 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6437 00004717 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6438 0000471A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6439 0000471F 4983C103                	add r9, 3 	 ;for getting to the params
  6440 00004723 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6441 00004727 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6442                                  .L_tc_recycle_frame_loop_002d:
  6443 0000472A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6444 0000472D 7410                    	je .L_tc_recycle_frame_done_002d
  6445 0000472F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6446 00004732 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6447 00004735 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6448 00004739 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6449 0000473D EBEB                    	jmp .L_tc_recycle_frame_loop_002d
  6450                                  .L_tc_recycle_frame_done_002d:
  6451 0000473F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6452 00004740 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6453 00004744 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6454 00004747 C9                      	leave
  6455 00004748 C22000                  	ret AND_KILL_FRAME(2)
  6456                                  .L_lambda_opt_end_0005:	; new closure is in rax
  6457 0000474B 48890425[70080000]      	mov qword [free_var_1], rax
  6458 00004753 48B8-                   	mov rax, sob_void
  6458 00004755 [0000000000000000] 
  6459                                  
  6460 0000475D 4889C7                  	mov rdi, rax
  6461 00004760 E8ED1B0000              	call print_sexpr_if_not_void
  6462                                  	; preparing a non-tail-call
  6463 00004765 48B8-                   	mov rax, L_constants + 1993
  6463 00004767 [C907000000000000] 
  6464 0000476F 50                      	push rax
  6465 00004770 48B8-                   	mov rax, L_constants + 1993
  6465 00004772 [C907000000000000] 
  6466 0000477A 50                      	push rax
  6467 0000477B 6A02                    	push 2	; arg count
  6468 0000477D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6469 00004782 E876190000              	call malloc
  6470 00004787 50                      	push rax
  6471 00004788 BF00000000              	mov rdi, 8 * 0	; new rib
  6472 0000478D E86B190000              	call malloc
  6473 00004792 50                      	push rax
  6474 00004793 BF08000000              	mov rdi, 8 * 1	; extended env
  6475 00004798 E860190000              	call malloc
  6476 0000479D 488B7D10                	mov rdi, ENV
  6477 000047A1 BE00000000              	mov rsi, 0
  6478 000047A6 BA01000000              	mov rdx, 1
  6479                                  .L_lambda_simple_env_loop_002c:	; ext_env[i + 1] <-- env[i]
  6480 000047AB 4883FE00                	cmp rsi, 0
  6481 000047AF 7410                    	je .L_lambda_simple_env_end_002c
  6482 000047B1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6483 000047B5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6484 000047B9 48FFC6                  	inc rsi
  6485 000047BC 48FFC2                  	inc rdx
  6486 000047BF EBEA                    	jmp .L_lambda_simple_env_loop_002c
  6487                                  .L_lambda_simple_env_end_002c:
  6488 000047C1 5B                      	pop rbx
  6489 000047C2 BE00000000              	mov rsi, 0
  6490                                  .L_lambda_simple_params_loop_002c:	; copy params
  6491 000047C7 4883FE00                	cmp rsi, 0
  6492 000047CB 740E                    	je .L_lambda_simple_params_end_002c
  6493 000047CD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6494 000047D2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6495 000047D6 48FFC6                  	inc rsi
  6496 000047D9 EBEC                    	jmp .L_lambda_simple_params_loop_002c
  6497                                  .L_lambda_simple_params_end_002c:
  6498 000047DB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6499 000047DE 4889C3                  	mov rbx, rax
  6500 000047E1 58                      	pop rax
  6501 000047E2 C60004                  	mov byte [rax], T_closure
  6502 000047E5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6503 000047E9 48C74009[F6470000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002c
  6504 000047F1 E94B070000              	jmp .L_lambda_simple_end_002c
  6505                                  .L_lambda_simple_code_002c:	; lambda-simple body
  6506 000047F6 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6507 000047FC 740B                    	je .L_lambda_simple_arity_check_ok_002c
  6508 000047FE FF742410                	push qword [rsp + 8 * 2]
  6509 00004802 6A02                    	push 2
  6510 00004804 E9AD180000              	jmp L_error_incorrect_arity_simple
  6511                                  .L_lambda_simple_arity_check_ok_002c:
  6512 00004809 C8000000                	enter 0, 0
  6513 0000480D BF08000000              	mov rdi, 8*1
  6514 00004812 E8E6180000              	call malloc
  6515 00004817 488B5D20                	mov rbx, PARAM(0)
  6516 0000481B 488918                  	mov qword[rax], rbx
  6517 0000481E 48894520                	mov PARAM(0), rax
  6518 00004822 48B8-                   	mov rax, sob_void
  6518 00004824 [0000000000000000] 
  6519                                  
  6520 0000482C BF08000000              	mov rdi, 8*1
  6521 00004831 E8C7180000              	call malloc
  6522 00004836 488B5D28                	mov rbx, PARAM(1)
  6523 0000483A 488918                  	mov qword[rax], rbx
  6524 0000483D 48894528                	mov PARAM(1), rax
  6525 00004841 48B8-                   	mov rax, sob_void
  6525 00004843 [0000000000000000] 
  6526                                  
  6527 0000484B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6528 00004850 E8A8180000              	call malloc
  6529 00004855 50                      	push rax
  6530 00004856 BF10000000              	mov rdi, 8 * 2	; new rib
  6531 0000485B E89D180000              	call malloc
  6532 00004860 50                      	push rax
  6533 00004861 BF10000000              	mov rdi, 8 * 2	; extended env
  6534 00004866 E892180000              	call malloc
  6535 0000486B 488B7D10                	mov rdi, ENV
  6536 0000486F BE00000000              	mov rsi, 0
  6537 00004874 BA01000000              	mov rdx, 1
  6538                                  .L_lambda_simple_env_loop_002d:	; ext_env[i + 1] <-- env[i]
  6539 00004879 4883FE01                	cmp rsi, 1
  6540 0000487D 7410                    	je .L_lambda_simple_env_end_002d
  6541 0000487F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6542 00004883 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6543 00004887 48FFC6                  	inc rsi
  6544 0000488A 48FFC2                  	inc rdx
  6545 0000488D EBEA                    	jmp .L_lambda_simple_env_loop_002d
  6546                                  .L_lambda_simple_env_end_002d:
  6547 0000488F 5B                      	pop rbx
  6548 00004890 BE00000000              	mov rsi, 0
  6549                                  .L_lambda_simple_params_loop_002d:	; copy params
  6550 00004895 4883FE02                	cmp rsi, 2
  6551 00004899 740E                    	je .L_lambda_simple_params_end_002d
  6552 0000489B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6553 000048A0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6554 000048A4 48FFC6                  	inc rsi
  6555 000048A7 EBEC                    	jmp .L_lambda_simple_params_loop_002d
  6556                                  .L_lambda_simple_params_end_002d:
  6557 000048A9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6558 000048AC 4889C3                  	mov rbx, rax
  6559 000048AF 58                      	pop rax
  6560 000048B0 C60004                  	mov byte [rax], T_closure
  6561 000048B3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6562 000048B7 48C74009[C4480000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002d
  6563 000048BF E94A010000              	jmp .L_lambda_simple_end_002d
  6564                                  .L_lambda_simple_code_002d:	; lambda-simple body
  6565 000048C4 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6566 000048CA 740B                    	je .L_lambda_simple_arity_check_ok_002d
  6567 000048CC FF742410                	push qword [rsp + 8 * 2]
  6568 000048D0 6A02                    	push 2
  6569 000048D2 E9DF170000              	jmp L_error_incorrect_arity_simple
  6570                                  .L_lambda_simple_arity_check_ok_002d:
  6571 000048D7 C8000000                	enter 0, 0
  6572                                  	; preparing a non-tail-call
  6573 000048DB 488B4528                	mov rax, PARAM(1)	; param s
  6574 000048DF 50                      	push rax
  6575 000048E0 6A01                    	push 1	; arg count
  6576 000048E2 488B0425[3A0B0000]      	mov rax, qword [free_var_43]	; free var null?
  6577 000048EA 803805                  	cmp byte [rax], T_undefined
  6578 000048ED 0F84DD160000            	je L_error_fvar_undefined
  6579 000048F3 803804                  	cmp byte [rax], T_closure
  6580 000048F6 0F8558170000            	jne L_error_non_closure
  6581 000048FC FF7001                  	push SOB_CLOSURE_ENV(rax)
  6582 000048FF FF5009                  	call SOB_CLOSURE_CODE(rax)
  6583 00004902 483D[02000000]          	cmp rax, sob_boolean_false
  6584 00004908 740F                    	je .L_if_else_000d
  6585 0000490A 48B8-                   	mov rax, L_constants + 1
  6585 0000490C [0100000000000000] 
  6586 00004914 E9F1000000              	jmp .L_if_end_000d
  6587                                  .L_if_else_000d:
  6588                                  	; preparing a tail-call
  6589                                  	; preparing a non-tail-call
  6590                                  	; preparing a non-tail-call
  6591 00004919 488B4528                	mov rax, PARAM(1)	; param s
  6592 0000491D 50                      	push rax
  6593 0000491E 6A01                    	push 1	; arg count
  6594 00004920 488B0425[900A0000]      	mov rax, qword [free_var_33]	; free var cdr
  6595 00004928 803805                  	cmp byte [rax], T_undefined
  6596 0000492B 0F849F160000            	je L_error_fvar_undefined
  6597 00004931 803804                  	cmp byte [rax], T_closure
  6598 00004934 0F851A170000            	jne L_error_non_closure
  6599 0000493A FF7001                  	push SOB_CLOSURE_ENV(rax)
  6600 0000493D FF5009                  	call SOB_CLOSURE_CODE(rax)
  6601 00004940 50                      	push rax
  6602 00004941 488B4520                	mov rax, PARAM(0)	; param f
  6603 00004945 50                      	push rax
  6604 00004946 6A02                    	push 2	; arg count
  6605 00004948 488B4510                	mov rax, ENV
  6606 0000494C 488B00                  	mov rax, qword [rax + 8 * 0]
  6607 0000494F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  6608 00004952 488B00                  	mov rax, qword [rax]
  6609 00004955 803804                  	cmp byte [rax], T_closure
  6610 00004958 0F85F6160000            	jne L_error_non_closure
  6611 0000495E FF7001                  	push SOB_CLOSURE_ENV(rax)
  6612 00004961 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6613 00004964 50                      	push rax
  6614                                  	; preparing a non-tail-call
  6615                                  	; preparing a non-tail-call
  6616 00004965 488B4528                	mov rax, PARAM(1)	; param s
  6617 00004969 50                      	push rax
  6618 0000496A 6A01                    	push 1	; arg count
  6619 0000496C 488B0425[91090000]      	mov rax, qword [free_var_18]	; free var car
  6620 00004974 803805                  	cmp byte [rax], T_undefined
  6621 00004977 0F8453160000            	je L_error_fvar_undefined
  6622 0000497D 803804                  	cmp byte [rax], T_closure
  6623 00004980 0F85CE160000            	jne L_error_non_closure
  6624 00004986 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6625 00004989 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6626 0000498C 50                      	push rax
  6627 0000498D 6A01                    	push 1	; arg count
  6628 0000498F 488B4520                	mov rax, PARAM(0)	; param f
  6629 00004993 803804                  	cmp byte [rax], T_closure
  6630 00004996 0F85B8160000            	jne L_error_non_closure
  6631 0000499C FF7001                  	push SOB_CLOSURE_ENV(rax)
  6632 0000499F FF5009                  	call SOB_CLOSURE_CODE(rax)
  6633 000049A2 50                      	push rax
  6634 000049A3 6A02                    	push 2	; arg count
  6635 000049A5 488B0425[A10A0000]      	mov rax, qword [free_var_34]	; free var cons
  6636 000049AD 803805                  	cmp byte [rax], T_undefined
  6637 000049B0 0F841A160000            	je L_error_fvar_undefined
  6638 000049B6 803804                  	cmp byte [rax], T_closure
  6639 000049B9 0F8595160000            	jne L_error_non_closure
  6640 000049BF FF7001                  	push SOB_CLOSURE_ENV(rax)
  6641 000049C2 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6642 000049C5 FF7500                  	push qword[rbp]
  6643 000049C8 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6644 000049CB 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6645 000049CF 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6646 000049D3 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6647 000049D7 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6648 000049DA 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6649 000049DD 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6650 000049E2 4983C103                	add r9, 3 	 ;for getting to the params
  6651 000049E6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6652 000049EA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6653                                  .L_tc_recycle_frame_loop_0031:
  6654 000049ED 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6655 000049F0 7410                    	je .L_tc_recycle_frame_done_0031
  6656 000049F2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6657 000049F5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6658 000049F8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6659 000049FC 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6660 00004A00 EBEB                    	jmp .L_tc_recycle_frame_loop_0031
  6661                                  .L_tc_recycle_frame_done_0031:
  6662 00004A02 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6663 00004A03 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6664 00004A07 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6665                                  .L_if_end_000d:
  6666 00004A0A C9                      	leave
  6667 00004A0B C22000                  	ret AND_KILL_FRAME(2)
  6668                                  .L_lambda_simple_end_002d:	; new closure is in rax
  6669 00004A0E 50                      	push rax
  6670 00004A0F 488B4520                	mov rax, PARAM(0)	; param map1
  6671 00004A13 8F00                    	pop qword [rax]
  6672 00004A15 48B8-                   	mov rax, sob_void
  6672 00004A17 [0000000000000000] 
  6673                                  
  6674 00004A1F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6675 00004A24 E8D4160000              	call malloc
  6676 00004A29 50                      	push rax
  6677 00004A2A BF10000000              	mov rdi, 8 * 2	; new rib
  6678 00004A2F E8C9160000              	call malloc
  6679 00004A34 50                      	push rax
  6680 00004A35 BF10000000              	mov rdi, 8 * 2	; extended env
  6681 00004A3A E8BE160000              	call malloc
  6682 00004A3F 488B7D10                	mov rdi, ENV
  6683 00004A43 BE00000000              	mov rsi, 0
  6684 00004A48 BA01000000              	mov rdx, 1
  6685                                  .L_lambda_simple_env_loop_002e:	; ext_env[i + 1] <-- env[i]
  6686 00004A4D 4883FE01                	cmp rsi, 1
  6687 00004A51 7410                    	je .L_lambda_simple_env_end_002e
  6688 00004A53 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6689 00004A57 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6690 00004A5B 48FFC6                  	inc rsi
  6691 00004A5E 48FFC2                  	inc rdx
  6692 00004A61 EBEA                    	jmp .L_lambda_simple_env_loop_002e
  6693                                  .L_lambda_simple_env_end_002e:
  6694 00004A63 5B                      	pop rbx
  6695 00004A64 BE00000000              	mov rsi, 0
  6696                                  .L_lambda_simple_params_loop_002e:	; copy params
  6697 00004A69 4883FE02                	cmp rsi, 2
  6698 00004A6D 740E                    	je .L_lambda_simple_params_end_002e
  6699 00004A6F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6700 00004A74 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6701 00004A78 48FFC6                  	inc rsi
  6702 00004A7B EBEC                    	jmp .L_lambda_simple_params_loop_002e
  6703                                  .L_lambda_simple_params_end_002e:
  6704 00004A7D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6705 00004A80 4889C3                  	mov rbx, rax
  6706 00004A83 58                      	pop rax
  6707 00004A84 C60004                  	mov byte [rax], T_closure
  6708 00004A87 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6709 00004A8B 48C74009[984A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002e
  6710 00004A93 E99C010000              	jmp .L_lambda_simple_end_002e
  6711                                  .L_lambda_simple_code_002e:	; lambda-simple body
  6712 00004A98 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6713 00004A9E 740B                    	je .L_lambda_simple_arity_check_ok_002e
  6714 00004AA0 FF742410                	push qword [rsp + 8 * 2]
  6715 00004AA4 6A02                    	push 2
  6716 00004AA6 E90B160000              	jmp L_error_incorrect_arity_simple
  6717                                  .L_lambda_simple_arity_check_ok_002e:
  6718 00004AAB C8000000                	enter 0, 0
  6719                                  	; preparing a non-tail-call
  6720                                  	; preparing a non-tail-call
  6721 00004AAF 488B4528                	mov rax, PARAM(1)	; param s
  6722 00004AB3 50                      	push rax
  6723 00004AB4 6A01                    	push 1	; arg count
  6724 00004AB6 488B0425[91090000]      	mov rax, qword [free_var_18]	; free var car
  6725 00004ABE 803805                  	cmp byte [rax], T_undefined
  6726 00004AC1 0F8409150000            	je L_error_fvar_undefined
  6727 00004AC7 803804                  	cmp byte [rax], T_closure
  6728 00004ACA 0F8584150000            	jne L_error_non_closure
  6729 00004AD0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6730 00004AD3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6731 00004AD6 50                      	push rax
  6732 00004AD7 6A01                    	push 1	; arg count
  6733 00004AD9 488B0425[3A0B0000]      	mov rax, qword [free_var_43]	; free var null?
  6734 00004AE1 803805                  	cmp byte [rax], T_undefined
  6735 00004AE4 0F84E6140000            	je L_error_fvar_undefined
  6736 00004AEA 803804                  	cmp byte [rax], T_closure
  6737 00004AED 0F8561150000            	jne L_error_non_closure
  6738 00004AF3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6739 00004AF6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6740 00004AF9 483D[02000000]          	cmp rax, sob_boolean_false
  6741 00004AFF 740F                    	je .L_if_else_000e
  6742 00004B01 48B8-                   	mov rax, L_constants + 1
  6742 00004B03 [0100000000000000] 
  6743 00004B0B E920010000              	jmp .L_if_end_000e
  6744                                  .L_if_else_000e:
  6745                                  	; preparing a tail-call
  6746                                  	; preparing a non-tail-call
  6747                                  	; preparing a non-tail-call
  6748 00004B10 488B4528                	mov rax, PARAM(1)	; param s
  6749 00004B14 50                      	push rax
  6750 00004B15 488B0425[900A0000]      	mov rax, qword [free_var_33]	; free var cdr
  6751 00004B1D 803805                  	cmp byte [rax], T_undefined
  6752 00004B20 0F84AA140000            	je L_error_fvar_undefined
  6753 00004B26 50                      	push rax
  6754 00004B27 6A02                    	push 2	; arg count
  6755 00004B29 488B4510                	mov rax, ENV
  6756 00004B2D 488B00                  	mov rax, qword [rax + 8 * 0]
  6757 00004B30 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  6758 00004B33 488B00                  	mov rax, qword [rax]
  6759 00004B36 803804                  	cmp byte [rax], T_closure
  6760 00004B39 0F8515150000            	jne L_error_non_closure
  6761 00004B3F FF7001                  	push SOB_CLOSURE_ENV(rax)
  6762 00004B42 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6763 00004B45 50                      	push rax
  6764 00004B46 488B4520                	mov rax, PARAM(0)	; param f
  6765 00004B4A 50                      	push rax
  6766 00004B4B 6A02                    	push 2	; arg count
  6767 00004B4D 488B4510                	mov rax, ENV
  6768 00004B51 488B00                  	mov rax, qword [rax + 8 * 0]
  6769 00004B54 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  6770 00004B58 488B00                  	mov rax, qword [rax]
  6771 00004B5B 803804                  	cmp byte [rax], T_closure
  6772 00004B5E 0F85F0140000            	jne L_error_non_closure
  6773 00004B64 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6774 00004B67 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6775 00004B6A 50                      	push rax
  6776                                  	; preparing a non-tail-call
  6777                                  	; preparing a non-tail-call
  6778 00004B6B 488B4528                	mov rax, PARAM(1)	; param s
  6779 00004B6F 50                      	push rax
  6780 00004B70 488B0425[91090000]      	mov rax, qword [free_var_18]	; free var car
  6781 00004B78 803805                  	cmp byte [rax], T_undefined
  6782 00004B7B 0F844F140000            	je L_error_fvar_undefined
  6783 00004B81 50                      	push rax
  6784 00004B82 6A02                    	push 2	; arg count
  6785 00004B84 488B4510                	mov rax, ENV
  6786 00004B88 488B00                  	mov rax, qword [rax + 8 * 0]
  6787 00004B8B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  6788 00004B8E 488B00                  	mov rax, qword [rax]
  6789 00004B91 803804                  	cmp byte [rax], T_closure
  6790 00004B94 0F85BA140000            	jne L_error_non_closure
  6791 00004B9A FF7001                  	push SOB_CLOSURE_ENV(rax)
  6792 00004B9D FF5009                  	call SOB_CLOSURE_CODE(rax)
  6793 00004BA0 50                      	push rax
  6794 00004BA1 488B4520                	mov rax, PARAM(0)	; param f
  6795 00004BA5 50                      	push rax
  6796 00004BA6 6A02                    	push 2	; arg count
  6797 00004BA8 488B0425[92080000]      	mov rax, qword [free_var_3]	; free var apply
  6798 00004BB0 803805                  	cmp byte [rax], T_undefined
  6799 00004BB3 0F8417140000            	je L_error_fvar_undefined
  6800 00004BB9 803804                  	cmp byte [rax], T_closure
  6801 00004BBC 0F8592140000            	jne L_error_non_closure
  6802 00004BC2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6803 00004BC5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6804 00004BC8 50                      	push rax
  6805 00004BC9 6A02                    	push 2	; arg count
  6806 00004BCB 488B0425[A10A0000]      	mov rax, qword [free_var_34]	; free var cons
  6807 00004BD3 803805                  	cmp byte [rax], T_undefined
  6808 00004BD6 0F84F4130000            	je L_error_fvar_undefined
  6809 00004BDC 803804                  	cmp byte [rax], T_closure
  6810 00004BDF 0F856F140000            	jne L_error_non_closure
  6811 00004BE5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6812 00004BE8 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6813 00004BEB FF7500                  	push qword[rbp]
  6814 00004BEE 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6815 00004BF1 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6816 00004BF5 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6817 00004BF9 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6818 00004BFD 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6819 00004C00 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6820 00004C03 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6821 00004C08 4983C103                	add r9, 3 	 ;for getting to the params
  6822 00004C0C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6823 00004C10 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6824                                  .L_tc_recycle_frame_loop_0032:
  6825 00004C13 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6826 00004C16 7410                    	je .L_tc_recycle_frame_done_0032
  6827 00004C18 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6828 00004C1B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6829 00004C1E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6830 00004C22 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6831 00004C26 EBEB                    	jmp .L_tc_recycle_frame_loop_0032
  6832                                  .L_tc_recycle_frame_done_0032:
  6833 00004C28 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6834 00004C29 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6835 00004C2D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6836                                  .L_if_end_000e:
  6837 00004C30 C9                      	leave
  6838 00004C31 C22000                  	ret AND_KILL_FRAME(2)
  6839                                  .L_lambda_simple_end_002e:	; new closure is in rax
  6840 00004C34 50                      	push rax
  6841 00004C35 488B4528                	mov rax, PARAM(1)	; param map-list
  6842 00004C39 8F00                    	pop qword [rax]
  6843 00004C3B 48B8-                   	mov rax, sob_void
  6843 00004C3D [0000000000000000] 
  6844                                  
  6845 00004C45 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6846 00004C4A E8AE140000              	call malloc
  6847 00004C4F 50                      	push rax
  6848 00004C50 BF10000000              	mov rdi, 8 * 2	; new rib
  6849 00004C55 E8A3140000              	call malloc
  6850 00004C5A 50                      	push rax
  6851 00004C5B BF10000000              	mov rdi, 8 * 2	; extended env
  6852 00004C60 E898140000              	call malloc
  6853 00004C65 488B7D10                	mov rdi, ENV
  6854 00004C69 BE00000000              	mov rsi, 0
  6855 00004C6E BA01000000              	mov rdx, 1
  6856                                  .L_lambda_opt_env_loop_0006:	; ext_env[i + 1] <-- env[i]
  6857 00004C73 4883FE01                	cmp rsi, 1
  6858 00004C77 7410                    	je .L_lambda_opt_env_end_0006
  6859 00004C79 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6860 00004C7D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6861 00004C81 48FFC6                  	inc rsi
  6862 00004C84 48FFC2                  	inc rdx
  6863 00004C87 EBEA                    	jmp .L_lambda_opt_env_loop_0006
  6864                                  .L_lambda_opt_env_end_0006:
  6865 00004C89 5B                      	pop rbx
  6866 00004C8A BE00000000              	mov rsi, 0
  6867                                  .L_lambda_opt_params_loop_0006:	; copy params
  6868 00004C8F 4883FE02                	cmp rsi, 2
  6869 00004C93 740E                    	je .L_lambda_opt_params_end_0006
  6870 00004C95 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6871 00004C9A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6872 00004C9E 48FFC6                  	inc rsi
  6873 00004CA1 EBEC                    	jmp .L_lambda_opt_params_loop_0006
  6874                                  .L_lambda_opt_params_end_0006:
  6875 00004CA3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6876 00004CA6 4889C3                  	mov rbx, rax
  6877 00004CA9 58                      	pop rax
  6878 00004CAA C60004                  	mov byte [rax], T_closure
  6879 00004CAD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6880 00004CB1 48C74009[BE4C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0006
  6881 00004CB9 E97F020000              	jmp .L_lambda_opt_end_0006
  6882                                  .L_lambda_opt_code_0006:	; lambda-opt body
  6883 00004CBE 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6884 00004CC4 7411                    	je .L_lambda_opt_arity_check_exact_0006
  6885 00004CC6 0F8FFB000000            	jg .L_lambda_opt_arity_check_more_0006
  6886 00004CCC FF742410                	push qword [rsp + 8 * 2]
  6887 00004CD0 6A01                    	push 1
  6888 00004CD2 E9F3130000              	jmp L_error_incorrect_arity_opt
  6889                                  .L_lambda_opt_arity_check_exact_0006:
  6890 00004CD7 4883EC08                	sub rsp, 8
  6891 00004CDB 488B442408              	mov rax, qword[rsp + 8 *1]
  6892 00004CE0 48890424                	mov qword[rsp], rax  
  6893 00004CE4 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  6894 00004CE9 4889442408              	mov qword[rsp + 8 * 1], rax
  6895 00004CEE B802000000              	mov rax, 2
  6896 00004CF3 4889442410              	mov qword[rsp + 8 *2], rax
  6897 00004CF8 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  6898 00004CFD 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  6899 00004D02 48B8-                   	mov rax, sob_nil
  6899 00004D04 [0100000000000000] 
  6900 00004D0C 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  6901 00004D11 C8000000                	enter 0, 0
  6902                                  	; preparing a non-tail-call
  6903 00004D15 488B4528                	mov rax, PARAM(1)	; param s
  6904 00004D19 50                      	push rax
  6905 00004D1A 6A01                    	push 1	; arg count
  6906 00004D1C 488B0425[3A0B0000]      	mov rax, qword [free_var_43]	; free var null?
  6907 00004D24 803805                  	cmp byte [rax], T_undefined
  6908 00004D27 0F84A3120000            	je L_error_fvar_undefined
  6909 00004D2D 803804                  	cmp byte [rax], T_closure
  6910 00004D30 0F851E130000            	jne L_error_non_closure
  6911 00004D36 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6912 00004D39 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6913 00004D3C 483D[02000000]          	cmp rax, sob_boolean_false
  6914 00004D42 740C                    	je .L_if_else_0010
  6915 00004D44 48B8-                   	mov rax, L_constants + 1
  6915 00004D46 [0100000000000000] 
  6916 00004D4E EB6E                    	jmp .L_if_end_0010
  6917                                  .L_if_else_0010:
  6918                                  	; preparing a tail-call
  6919 00004D50 488B4528                	mov rax, PARAM(1)	; param s
  6920 00004D54 50                      	push rax
  6921 00004D55 488B4520                	mov rax, PARAM(0)	; param f
  6922 00004D59 50                      	push rax
  6923 00004D5A 6A02                    	push 2	; arg count
  6924 00004D5C 488B4510                	mov rax, ENV
  6925 00004D60 488B00                  	mov rax, qword [rax + 8 * 0]
  6926 00004D63 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  6927 00004D67 488B00                  	mov rax, qword [rax]
  6928 00004D6A 803804                  	cmp byte [rax], T_closure
  6929 00004D6D 0F85E1120000            	jne L_error_non_closure
  6930 00004D73 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6931 00004D76 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6932 00004D79 FF7500                  	push qword[rbp]
  6933 00004D7C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6934 00004D7F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6935 00004D83 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6936 00004D87 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6937 00004D8B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6938 00004D8E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6939 00004D91 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6940 00004D96 4983C103                	add r9, 3 	 ;for getting to the params
  6941 00004D9A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6942 00004D9E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6943                                  .L_tc_recycle_frame_loop_0034:
  6944 00004DA1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6945 00004DA4 7410                    	je .L_tc_recycle_frame_done_0034
  6946 00004DA6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6947 00004DA9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6948 00004DAC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6949 00004DB0 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6950 00004DB4 EBEB                    	jmp .L_tc_recycle_frame_loop_0034
  6951                                  .L_tc_recycle_frame_done_0034:
  6952 00004DB6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6953 00004DB7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6954 00004DBB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6955                                  .L_if_end_0010:
  6956 00004DBE C9                      	leave
  6957 00004DBF C21800                  	ret AND_KILL_FRAME(1)
  6958 00004DC2 E976010000              	jmp .L_lambda_opt_end_0006	; new closure is in rax
  6959                                  .L_lambda_opt_arity_check_more_0006:
  6960 00004DC7 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  6961 00004DCC 49B9-                   	mov r9, sob_nil
  6961 00004DCE [0100000000000000] 
  6962 00004DD6 4889E3                  	mov rbx, rsp 
  6963 00004DD9 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  6964 00004DDD 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  6965 00004DE0 49C1E003                	shl r8, 3
  6966 00004DE4 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  6967 00004DE7 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  6968                                  .L_lambda_opt_stack_shrink_loop_0006:
  6969 00004DEC 4983F801                	cmp r8, 1
  6970 00004DF0 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0006
  6971 00004DF2 BF11000000              	mov rdi, 1+8+8	;for pair
  6972 00004DF7 E801130000              	call malloc	 ;to create the pair in the stack
  6973 00004DFC C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  6974 00004DFF 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
  6975 00004E02 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
  6976 00004E06 4C894809                 	mov qword[rax+1+8],r9
  6977 00004E0A 4989C1                  	mov r9, rax	 ; for the recursion 
  6978 00004E0D 49FFC8                  	dec r8 	;we finished copy another opt param to the list
  6979 00004E10 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
  6980 00004E14 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0006
  6981                                  .L_lambda_opt_stack_shrink_loop_exit_0006:
  6982 00004E16 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
  6983 00004E1B 4883E902                	sub rcx, 2
  6984 00004E1F 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
  6985 00004E23 4801CC                  	add rsp, rcx	 ;shrinking the stack
  6986 00004E26 4889E0                  	mov rax, rsp
  6987 00004E29 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
  6988 00004E2C 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
  6989 00004E30 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
  6990 00004E33 4883C018                	add rax, 3 * 8 	;now rax is param 0
  6991 00004E37 49C1E003                	shl r8, 3 	; convert to byte
  6992 00004E3B 4C01C0                  	add rax, r8 	;now rax is the top of the stack
  6993 00004E3E 4C8908                  	mov qword[rax], r9	;puting the list at the top
  6994 00004E41 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
  6995 00004E45 4889E3                  	mov rbx, rsp 
  6996 00004E48 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
  6997 00004E4B 41BA01000000            	mov r10, 1 	 ;r10 is the not opt params length
  6998 00004E51 49FFCA                  	dec r10 
  6999 00004E54 49C1E203                	shl r10, 3	;to get bytes
  7000 00004E58 4883C318                	add rbx, 3*8 	;rbx is the first param
  7001 00004E5C 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
  7002 00004E5F 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  7003 00004E62 4C8900                  	mov qword[rax], r8
  7004 00004E65 4883E808                	sub rax, 8
  7005 00004E69 4883EB08                	sub rbx, 8
  7006 00004E6D 4889E0                  	mov rax, rsp
  7007 00004E70 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  7008 00004E73 48C744241002000000      	mov qword [rsp+2*8], 2
  7009 00004E7C 488B5808                	mov rbx, qword[rax + 8 *1]
  7010 00004E80 48895C2408              	mov qword [rsp + 1*8] ,rbx
  7011 00004E85 488B18                  	mov rbx, qword[rax]
  7012 00004E88 48891C24                	mov qword [rsp], rbx
  7013 00004E8C C8000000                	enter 0, 0
  7014                                  	; preparing a non-tail-call
  7015 00004E90 488B4528                	mov rax, PARAM(1)	; param s
  7016 00004E94 50                      	push rax
  7017 00004E95 6A01                    	push 1	; arg count
  7018 00004E97 488B0425[3A0B0000]      	mov rax, qword [free_var_43]	; free var null?
  7019 00004E9F 803805                  	cmp byte [rax], T_undefined
  7020 00004EA2 0F8428110000            	je L_error_fvar_undefined
  7021 00004EA8 803804                  	cmp byte [rax], T_closure
  7022 00004EAB 0F85A3110000            	jne L_error_non_closure
  7023 00004EB1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7024 00004EB4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7025 00004EB7 483D[02000000]          	cmp rax, sob_boolean_false
  7026 00004EBD 740C                    	je .L_if_else_000f
  7027 00004EBF 48B8-                   	mov rax, L_constants + 1
  7027 00004EC1 [0100000000000000] 
  7028 00004EC9 EB6E                    	jmp .L_if_end_000f
  7029                                  .L_if_else_000f:
  7030                                  	; preparing a tail-call
  7031 00004ECB 488B4528                	mov rax, PARAM(1)	; param s
  7032 00004ECF 50                      	push rax
  7033 00004ED0 488B4520                	mov rax, PARAM(0)	; param f
  7034 00004ED4 50                      	push rax
  7035 00004ED5 6A02                    	push 2	; arg count
  7036 00004ED7 488B4510                	mov rax, ENV
  7037 00004EDB 488B00                  	mov rax, qword [rax + 8 * 0]
  7038 00004EDE 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  7039 00004EE2 488B00                  	mov rax, qword [rax]
  7040 00004EE5 803804                  	cmp byte [rax], T_closure
  7041 00004EE8 0F8566110000            	jne L_error_non_closure
  7042 00004EEE FF7001                  	push SOB_CLOSURE_ENV(rax)
  7043 00004EF1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7044 00004EF4 FF7500                  	push qword[rbp]
  7045 00004EF7 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7046 00004EFA 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7047 00004EFE 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7048 00004F02 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7049 00004F06 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7050 00004F09 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7051 00004F0C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7052 00004F11 4983C103                	add r9, 3 	 ;for getting to the params
  7053 00004F15 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7054 00004F19 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7055                                  .L_tc_recycle_frame_loop_0033:
  7056 00004F1C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7057 00004F1F 7410                    	je .L_tc_recycle_frame_done_0033
  7058 00004F21 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7059 00004F24 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7060 00004F27 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7061 00004F2B 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7062 00004F2F EBEB                    	jmp .L_tc_recycle_frame_loop_0033
  7063                                  .L_tc_recycle_frame_done_0033:
  7064 00004F31 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7065 00004F32 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7066 00004F36 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7067                                  .L_if_end_000f:
  7068 00004F39 C9                      	leave
  7069 00004F3A C22000                  	ret AND_KILL_FRAME(2)
  7070                                  .L_lambda_opt_end_0006:	; new closure is in rax
  7071 00004F3D C9                      	leave
  7072 00004F3E C22000                  	ret AND_KILL_FRAME(2)
  7073                                  .L_lambda_simple_end_002c:	; new closure is in rax
  7074 00004F41 803804                  	cmp byte [rax], T_closure
  7075 00004F44 0F850A110000            	jne L_error_non_closure
  7076 00004F4A FF7001                  	push SOB_CLOSURE_ENV(rax)
  7077 00004F4D FF5009                  	call SOB_CLOSURE_CODE(rax)
  7078 00004F50 48890425[180B0000]      	mov qword [free_var_41], rax
  7079 00004F58 48B8-                   	mov rax, sob_void
  7079 00004F5A [0000000000000000] 
  7080                                  
  7081 00004F62 4889C7                  	mov rdi, rax
  7082 00004F65 E8E8130000              	call print_sexpr_if_not_void
  7083 00004F6A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7084 00004F6F E889110000              	call malloc
  7085 00004F74 50                      	push rax
  7086 00004F75 BF00000000              	mov rdi, 8 * 0	; new rib
  7087 00004F7A E87E110000              	call malloc
  7088 00004F7F 50                      	push rax
  7089 00004F80 BF08000000              	mov rdi, 8 * 1	; extended env
  7090 00004F85 E873110000              	call malloc
  7091 00004F8A 488B7D10                	mov rdi, ENV
  7092 00004F8E BE00000000              	mov rsi, 0
  7093 00004F93 BA01000000              	mov rdx, 1
  7094                                  .L_lambda_simple_env_loop_002f:	; ext_env[i + 1] <-- env[i]
  7095 00004F98 4883FE00                	cmp rsi, 0
  7096 00004F9C 7410                    	je .L_lambda_simple_env_end_002f
  7097 00004F9E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7098 00004FA2 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7099 00004FA6 48FFC6                  	inc rsi
  7100 00004FA9 48FFC2                  	inc rdx
  7101 00004FAC EBEA                    	jmp .L_lambda_simple_env_loop_002f
  7102                                  .L_lambda_simple_env_end_002f:
  7103 00004FAE 5B                      	pop rbx
  7104 00004FAF BE00000000              	mov rsi, 0
  7105                                  .L_lambda_simple_params_loop_002f:	; copy params
  7106 00004FB4 4883FE00                	cmp rsi, 0
  7107 00004FB8 740E                    	je .L_lambda_simple_params_end_002f
  7108 00004FBA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7109 00004FBF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7110 00004FC3 48FFC6                  	inc rsi
  7111 00004FC6 EBEC                    	jmp .L_lambda_simple_params_loop_002f
  7112                                  .L_lambda_simple_params_end_002f:
  7113 00004FC8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7114 00004FCB 4889C3                  	mov rbx, rax
  7115 00004FCE 58                      	pop rax
  7116 00004FCF C60004                  	mov byte [rax], T_closure
  7117 00004FD2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7118 00004FD6 48C74009[E34F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002f
  7119 00004FDE E998010000              	jmp .L_lambda_simple_end_002f
  7120                                  .L_lambda_simple_code_002f:	; lambda-simple body
  7121 00004FE3 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7122 00004FE9 740B                    	je .L_lambda_simple_arity_check_ok_002f
  7123 00004FEB FF742410                	push qword [rsp + 8 * 2]
  7124 00004FEF 6A01                    	push 1
  7125 00004FF1 E9C0100000              	jmp L_error_incorrect_arity_simple
  7126                                  .L_lambda_simple_arity_check_ok_002f:
  7127 00004FF6 C8000000                	enter 0, 0
  7128                                  	; preparing a tail-call
  7129 00004FFA 488B4520                	mov rax, PARAM(0)	; param s
  7130 00004FFE 50                      	push rax
  7131 00004FFF 48B8-                   	mov rax, L_constants + 1
  7131 00005001 [0100000000000000] 
  7132 00005009 50                      	push rax
  7133 0000500A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7134 0000500F E8E9100000              	call malloc
  7135 00005014 50                      	push rax
  7136 00005015 BF08000000              	mov rdi, 8 * 1	; new rib
  7137 0000501A E8DE100000              	call malloc
  7138 0000501F 50                      	push rax
  7139 00005020 BF10000000              	mov rdi, 8 * 2	; extended env
  7140 00005025 E8D3100000              	call malloc
  7141 0000502A 488B7D10                	mov rdi, ENV
  7142 0000502E BE00000000              	mov rsi, 0
  7143 00005033 BA01000000              	mov rdx, 1
  7144                                  .L_lambda_simple_env_loop_0030:	; ext_env[i + 1] <-- env[i]
  7145 00005038 4883FE01                	cmp rsi, 1
  7146 0000503C 7410                    	je .L_lambda_simple_env_end_0030
  7147 0000503E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7148 00005042 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7149 00005046 48FFC6                  	inc rsi
  7150 00005049 48FFC2                  	inc rdx
  7151 0000504C EBEA                    	jmp .L_lambda_simple_env_loop_0030
  7152                                  .L_lambda_simple_env_end_0030:
  7153 0000504E 5B                      	pop rbx
  7154 0000504F BE00000000              	mov rsi, 0
  7155                                  .L_lambda_simple_params_loop_0030:	; copy params
  7156 00005054 4883FE01                	cmp rsi, 1
  7157 00005058 740E                    	je .L_lambda_simple_params_end_0030
  7158 0000505A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7159 0000505F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7160 00005063 48FFC6                  	inc rsi
  7161 00005066 EBEC                    	jmp .L_lambda_simple_params_loop_0030
  7162                                  .L_lambda_simple_params_end_0030:
  7163 00005068 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7164 0000506B 4889C3                  	mov rbx, rax
  7165 0000506E 58                      	pop rax
  7166 0000506F C60004                  	mov byte [rax], T_closure
  7167 00005072 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7168 00005076 48C74009[83500000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0030
  7169 0000507E E98C000000              	jmp .L_lambda_simple_end_0030
  7170                                  .L_lambda_simple_code_0030:	; lambda-simple body
  7171 00005083 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7172 00005089 740B                    	je .L_lambda_simple_arity_check_ok_0030
  7173 0000508B FF742410                	push qword [rsp + 8 * 2]
  7174 0000508F 6A02                    	push 2
  7175 00005091 E920100000              	jmp L_error_incorrect_arity_simple
  7176                                  .L_lambda_simple_arity_check_ok_0030:
  7177 00005096 C8000000                	enter 0, 0
  7178                                  	; preparing a tail-call
  7179 0000509A 488B4520                	mov rax, PARAM(0)	; param r
  7180 0000509E 50                      	push rax
  7181 0000509F 488B4528                	mov rax, PARAM(1)	; param a
  7182 000050A3 50                      	push rax
  7183 000050A4 6A02                    	push 2	; arg count
  7184 000050A6 488B0425[A10A0000]      	mov rax, qword [free_var_34]	; free var cons
  7185 000050AE 803805                  	cmp byte [rax], T_undefined
  7186 000050B1 0F84190F0000            	je L_error_fvar_undefined
  7187 000050B7 803804                  	cmp byte [rax], T_closure
  7188 000050BA 0F85940F0000            	jne L_error_non_closure
  7189 000050C0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7190 000050C3 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7191 000050C6 FF7500                  	push qword[rbp]
  7192 000050C9 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7193 000050CC 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7194 000050D0 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7195 000050D4 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7196 000050D8 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7197 000050DB 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7198 000050DE 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7199 000050E3 4983C103                	add r9, 3 	 ;for getting to the params
  7200 000050E7 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7201 000050EB 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7202                                  .L_tc_recycle_frame_loop_0035:
  7203 000050EE 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7204 000050F1 7410                    	je .L_tc_recycle_frame_done_0035
  7205 000050F3 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7206 000050F6 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7207 000050F9 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7208 000050FD 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7209 00005101 EBEB                    	jmp .L_tc_recycle_frame_loop_0035
  7210                                  .L_tc_recycle_frame_done_0035:
  7211 00005103 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7212 00005104 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7213 00005108 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7214 0000510B C9                      	leave
  7215 0000510C C22000                  	ret AND_KILL_FRAME(2)
  7216                                  .L_lambda_simple_end_0030:	; new closure is in rax
  7217 0000510F 50                      	push rax
  7218 00005110 6A03                    	push 3	; arg count
  7219 00005112 488B0425[B20A0000]      	mov rax, qword [free_var_35]	; free var fold-left
  7220 0000511A 803805                  	cmp byte [rax], T_undefined
  7221 0000511D 0F84AD0E0000            	je L_error_fvar_undefined
  7222 00005123 803804                  	cmp byte [rax], T_closure
  7223 00005126 0F85280F0000            	jne L_error_non_closure
  7224 0000512C FF7001                  	push SOB_CLOSURE_ENV(rax)
  7225 0000512F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7226 00005132 FF7500                  	push qword[rbp]
  7227 00005135 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7228 00005138 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7229 0000513C 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7230 00005140 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7231 00005144 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7232 00005147 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7233 0000514A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7234 0000514F 4983C103                	add r9, 3 	 ;for getting to the params
  7235 00005153 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7236 00005157 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7237                                  .L_tc_recycle_frame_loop_0036:
  7238 0000515A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7239 0000515D 7410                    	je .L_tc_recycle_frame_done_0036
  7240 0000515F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7241 00005162 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7242 00005165 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7243 00005169 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7244 0000516D EBEB                    	jmp .L_tc_recycle_frame_loop_0036
  7245                                  .L_tc_recycle_frame_done_0036:
  7246 0000516F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7247 00005170 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7248 00005174 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7249 00005177 C9                      	leave
  7250 00005178 C21800                  	ret AND_KILL_FRAME(1)
  7251                                  .L_lambda_simple_end_002f:	; new closure is in rax
  7252 0000517B 48890425[7E0B0000]      	mov qword [free_var_47], rax
  7253 00005183 48B8-                   	mov rax, sob_void
  7253 00005185 [0000000000000000] 
  7254                                  
  7255 0000518D 4889C7                  	mov rdi, rax
  7256 00005190 E8BD110000              	call print_sexpr_if_not_void
  7257                                  	; preparing a non-tail-call
  7258 00005195 48B8-                   	mov rax, L_constants + 1993
  7258 00005197 [C907000000000000] 
  7259 0000519F 50                      	push rax
  7260 000051A0 48B8-                   	mov rax, L_constants + 1993
  7260 000051A2 [C907000000000000] 
  7261 000051AA 50                      	push rax
  7262 000051AB 6A02                    	push 2	; arg count
  7263 000051AD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7264 000051B2 E8460F0000              	call malloc
  7265 000051B7 50                      	push rax
  7266 000051B8 BF00000000              	mov rdi, 8 * 0	; new rib
  7267 000051BD E83B0F0000              	call malloc
  7268 000051C2 50                      	push rax
  7269 000051C3 BF08000000              	mov rdi, 8 * 1	; extended env
  7270 000051C8 E8300F0000              	call malloc
  7271 000051CD 488B7D10                	mov rdi, ENV
  7272 000051D1 BE00000000              	mov rsi, 0
  7273 000051D6 BA01000000              	mov rdx, 1
  7274                                  .L_lambda_simple_env_loop_0031:	; ext_env[i + 1] <-- env[i]
  7275 000051DB 4883FE00                	cmp rsi, 0
  7276 000051DF 7410                    	je .L_lambda_simple_env_end_0031
  7277 000051E1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7278 000051E5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7279 000051E9 48FFC6                  	inc rsi
  7280 000051EC 48FFC2                  	inc rdx
  7281 000051EF EBEA                    	jmp .L_lambda_simple_env_loop_0031
  7282                                  .L_lambda_simple_env_end_0031:
  7283 000051F1 5B                      	pop rbx
  7284 000051F2 BE00000000              	mov rsi, 0
  7285                                  .L_lambda_simple_params_loop_0031:	; copy params
  7286 000051F7 4883FE00                	cmp rsi, 0
  7287 000051FB 740E                    	je .L_lambda_simple_params_end_0031
  7288 000051FD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7289 00005202 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7290 00005206 48FFC6                  	inc rsi
  7291 00005209 EBEC                    	jmp .L_lambda_simple_params_loop_0031
  7292                                  .L_lambda_simple_params_end_0031:
  7293 0000520B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7294 0000520E 4889C3                  	mov rbx, rax
  7295 00005211 58                      	pop rax
  7296 00005212 C60004                  	mov byte [rax], T_closure
  7297 00005215 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7298 00005219 48C74009[26520000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0031
  7299 00005221 E937070000              	jmp .L_lambda_simple_end_0031
  7300                                  .L_lambda_simple_code_0031:	; lambda-simple body
  7301 00005226 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7302 0000522C 740B                    	je .L_lambda_simple_arity_check_ok_0031
  7303 0000522E FF742410                	push qword [rsp + 8 * 2]
  7304 00005232 6A02                    	push 2
  7305 00005234 E97D0E0000              	jmp L_error_incorrect_arity_simple
  7306                                  .L_lambda_simple_arity_check_ok_0031:
  7307 00005239 C8000000                	enter 0, 0
  7308 0000523D BF08000000              	mov rdi, 8*1
  7309 00005242 E8B60E0000              	call malloc
  7310 00005247 488B5D20                	mov rbx, PARAM(0)
  7311 0000524B 488918                  	mov qword[rax], rbx
  7312 0000524E 48894520                	mov PARAM(0), rax
  7313 00005252 48B8-                   	mov rax, sob_void
  7313 00005254 [0000000000000000] 
  7314                                  
  7315 0000525C BF08000000              	mov rdi, 8*1
  7316 00005261 E8970E0000              	call malloc
  7317 00005266 488B5D28                	mov rbx, PARAM(1)
  7318 0000526A 488918                  	mov qword[rax], rbx
  7319 0000526D 48894528                	mov PARAM(1), rax
  7320 00005271 48B8-                   	mov rax, sob_void
  7320 00005273 [0000000000000000] 
  7321                                  
  7322 0000527B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7323 00005280 E8780E0000              	call malloc
  7324 00005285 50                      	push rax
  7325 00005286 BF10000000              	mov rdi, 8 * 2	; new rib
  7326 0000528B E86D0E0000              	call malloc
  7327 00005290 50                      	push rax
  7328 00005291 BF10000000              	mov rdi, 8 * 2	; extended env
  7329 00005296 E8620E0000              	call malloc
  7330 0000529B 488B7D10                	mov rdi, ENV
  7331 0000529F BE00000000              	mov rsi, 0
  7332 000052A4 BA01000000              	mov rdx, 1
  7333                                  .L_lambda_simple_env_loop_0032:	; ext_env[i + 1] <-- env[i]
  7334 000052A9 4883FE01                	cmp rsi, 1
  7335 000052AD 7410                    	je .L_lambda_simple_env_end_0032
  7336 000052AF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7337 000052B3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7338 000052B7 48FFC6                  	inc rsi
  7339 000052BA 48FFC2                  	inc rdx
  7340 000052BD EBEA                    	jmp .L_lambda_simple_env_loop_0032
  7341                                  .L_lambda_simple_env_end_0032:
  7342 000052BF 5B                      	pop rbx
  7343 000052C0 BE00000000              	mov rsi, 0
  7344                                  .L_lambda_simple_params_loop_0032:	; copy params
  7345 000052C5 4883FE02                	cmp rsi, 2
  7346 000052C9 740E                    	je .L_lambda_simple_params_end_0032
  7347 000052CB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7348 000052D0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7349 000052D4 48FFC6                  	inc rsi
  7350 000052D7 EBEC                    	jmp .L_lambda_simple_params_loop_0032
  7351                                  .L_lambda_simple_params_end_0032:
  7352 000052D9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7353 000052DC 4889C3                  	mov rbx, rax
  7354 000052DF 58                      	pop rax
  7355 000052E0 C60004                  	mov byte [rax], T_closure
  7356 000052E3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7357 000052E7 48C74009[F4520000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0032
  7358 000052EF E92B010000              	jmp .L_lambda_simple_end_0032
  7359                                  .L_lambda_simple_code_0032:	; lambda-simple body
  7360 000052F4 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7361 000052FA 740B                    	je .L_lambda_simple_arity_check_ok_0032
  7362 000052FC FF742410                	push qword [rsp + 8 * 2]
  7363 00005300 6A02                    	push 2
  7364 00005302 E9AF0D0000              	jmp L_error_incorrect_arity_simple
  7365                                  .L_lambda_simple_arity_check_ok_0032:
  7366 00005307 C8000000                	enter 0, 0
  7367                                  	; preparing a non-tail-call
  7368 0000530B 488B4528                	mov rax, PARAM(1)	; param sr
  7369 0000530F 50                      	push rax
  7370 00005310 6A01                    	push 1	; arg count
  7371 00005312 488B0425[3A0B0000]      	mov rax, qword [free_var_43]	; free var null?
  7372 0000531A 803805                  	cmp byte [rax], T_undefined
  7373 0000531D 0F84AD0C0000            	je L_error_fvar_undefined
  7374 00005323 803804                  	cmp byte [rax], T_closure
  7375 00005326 0F85280D0000            	jne L_error_non_closure
  7376 0000532C FF7001                  	push SOB_CLOSURE_ENV(rax)
  7377 0000532F FF5009                  	call SOB_CLOSURE_CODE(rax)
  7378 00005332 483D[02000000]          	cmp rax, sob_boolean_false
  7379 00005338 7409                    	je .L_if_else_0011
  7380 0000533A 488B4520                	mov rax, PARAM(0)	; param s1
  7381 0000533E E9D8000000              	jmp .L_if_end_0011
  7382                                  .L_if_else_0011:
  7383                                  	; preparing a tail-call
  7384                                  	; preparing a non-tail-call
  7385                                  	; preparing a non-tail-call
  7386 00005343 488B4528                	mov rax, PARAM(1)	; param sr
  7387 00005347 50                      	push rax
  7388 00005348 6A01                    	push 1	; arg count
  7389 0000534A 488B0425[900A0000]      	mov rax, qword [free_var_33]	; free var cdr
  7390 00005352 803805                  	cmp byte [rax], T_undefined
  7391 00005355 0F84750C0000            	je L_error_fvar_undefined
  7392 0000535B 803804                  	cmp byte [rax], T_closure
  7393 0000535E 0F85F00C0000            	jne L_error_non_closure
  7394 00005364 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7395 00005367 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7396 0000536A 50                      	push rax
  7397                                  	; preparing a non-tail-call
  7398 0000536B 488B4528                	mov rax, PARAM(1)	; param sr
  7399 0000536F 50                      	push rax
  7400 00005370 6A01                    	push 1	; arg count
  7401 00005372 488B0425[91090000]      	mov rax, qword [free_var_18]	; free var car
  7402 0000537A 803805                  	cmp byte [rax], T_undefined
  7403 0000537D 0F844D0C0000            	je L_error_fvar_undefined
  7404 00005383 803804                  	cmp byte [rax], T_closure
  7405 00005386 0F85C80C0000            	jne L_error_non_closure
  7406 0000538C FF7001                  	push SOB_CLOSURE_ENV(rax)
  7407 0000538F FF5009                  	call SOB_CLOSURE_CODE(rax)
  7408 00005392 50                      	push rax
  7409 00005393 6A02                    	push 2	; arg count
  7410 00005395 488B4510                	mov rax, ENV
  7411 00005399 488B00                  	mov rax, qword [rax + 8 * 0]
  7412 0000539C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  7413 0000539F 488B00                  	mov rax, qword [rax]
  7414 000053A2 803804                  	cmp byte [rax], T_closure
  7415 000053A5 0F85A90C0000            	jne L_error_non_closure
  7416 000053AB FF7001                  	push SOB_CLOSURE_ENV(rax)
  7417 000053AE FF5009                  	call SOB_CLOSURE_CODE(rax)
  7418 000053B1 50                      	push rax
  7419 000053B2 488B4520                	mov rax, PARAM(0)	; param s1
  7420 000053B6 50                      	push rax
  7421 000053B7 6A02                    	push 2	; arg count
  7422 000053B9 488B4510                	mov rax, ENV
  7423 000053BD 488B00                  	mov rax, qword [rax + 8 * 0]
  7424 000053C0 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var run-2
  7425 000053C4 488B00                  	mov rax, qword [rax]
  7426 000053C7 803804                  	cmp byte [rax], T_closure
  7427 000053CA 0F85840C0000            	jne L_error_non_closure
  7428 000053D0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7429 000053D3 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7430 000053D6 FF7500                  	push qword[rbp]
  7431 000053D9 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7432 000053DC 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7433 000053E0 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7434 000053E4 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7435 000053E8 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7436 000053EB 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7437 000053EE 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7438 000053F3 4983C103                	add r9, 3 	 ;for getting to the params
  7439 000053F7 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7440 000053FB 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7441                                  .L_tc_recycle_frame_loop_0037:
  7442 000053FE 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7443 00005401 7410                    	je .L_tc_recycle_frame_done_0037
  7444 00005403 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7445 00005406 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7446 00005409 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7447 0000540D 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7448 00005411 EBEB                    	jmp .L_tc_recycle_frame_loop_0037
  7449                                  .L_tc_recycle_frame_done_0037:
  7450 00005413 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7451 00005414 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7452 00005418 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7453                                  .L_if_end_0011:
  7454 0000541B C9                      	leave
  7455 0000541C C22000                  	ret AND_KILL_FRAME(2)
  7456                                  .L_lambda_simple_end_0032:	; new closure is in rax
  7457 0000541F 50                      	push rax
  7458 00005420 488B4520                	mov rax, PARAM(0)	; param run-1
  7459 00005424 8F00                    	pop qword [rax]
  7460 00005426 48B8-                   	mov rax, sob_void
  7460 00005428 [0000000000000000] 
  7461                                  
  7462 00005430 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7463 00005435 E8C30C0000              	call malloc
  7464 0000543A 50                      	push rax
  7465 0000543B BF10000000              	mov rdi, 8 * 2	; new rib
  7466 00005440 E8B80C0000              	call malloc
  7467 00005445 50                      	push rax
  7468 00005446 BF10000000              	mov rdi, 8 * 2	; extended env
  7469 0000544B E8AD0C0000              	call malloc
  7470 00005450 488B7D10                	mov rdi, ENV
  7471 00005454 BE00000000              	mov rsi, 0
  7472 00005459 BA01000000              	mov rdx, 1
  7473                                  .L_lambda_simple_env_loop_0033:	; ext_env[i + 1] <-- env[i]
  7474 0000545E 4883FE01                	cmp rsi, 1
  7475 00005462 7410                    	je .L_lambda_simple_env_end_0033
  7476 00005464 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7477 00005468 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7478 0000546C 48FFC6                  	inc rsi
  7479 0000546F 48FFC2                  	inc rdx
  7480 00005472 EBEA                    	jmp .L_lambda_simple_env_loop_0033
  7481                                  .L_lambda_simple_env_end_0033:
  7482 00005474 5B                      	pop rbx
  7483 00005475 BE00000000              	mov rsi, 0
  7484                                  .L_lambda_simple_params_loop_0033:	; copy params
  7485 0000547A 4883FE02                	cmp rsi, 2
  7486 0000547E 740E                    	je .L_lambda_simple_params_end_0033
  7487 00005480 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7488 00005485 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7489 00005489 48FFC6                  	inc rsi
  7490 0000548C EBEC                    	jmp .L_lambda_simple_params_loop_0033
  7491                                  .L_lambda_simple_params_end_0033:
  7492 0000548E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7493 00005491 4889C3                  	mov rbx, rax
  7494 00005494 58                      	pop rax
  7495 00005495 C60004                  	mov byte [rax], T_closure
  7496 00005498 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7497 0000549C 48C74009[A9540000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0033
  7498 000054A4 E92F010000              	jmp .L_lambda_simple_end_0033
  7499                                  .L_lambda_simple_code_0033:	; lambda-simple body
  7500 000054A9 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7501 000054AF 740B                    	je .L_lambda_simple_arity_check_ok_0033
  7502 000054B1 FF742410                	push qword [rsp + 8 * 2]
  7503 000054B5 6A02                    	push 2
  7504 000054B7 E9FA0B0000              	jmp L_error_incorrect_arity_simple
  7505                                  .L_lambda_simple_arity_check_ok_0033:
  7506 000054BC C8000000                	enter 0, 0
  7507                                  	; preparing a non-tail-call
  7508 000054C0 488B4520                	mov rax, PARAM(0)	; param s1
  7509 000054C4 50                      	push rax
  7510 000054C5 6A01                    	push 1	; arg count
  7511 000054C7 488B0425[3A0B0000]      	mov rax, qword [free_var_43]	; free var null?
  7512 000054CF 803805                  	cmp byte [rax], T_undefined
  7513 000054D2 0F84F80A0000            	je L_error_fvar_undefined
  7514 000054D8 803804                  	cmp byte [rax], T_closure
  7515 000054DB 0F85730B0000            	jne L_error_non_closure
  7516 000054E1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7517 000054E4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7518 000054E7 483D[02000000]          	cmp rax, sob_boolean_false
  7519 000054ED 7409                    	je .L_if_else_0012
  7520 000054EF 488B4528                	mov rax, PARAM(1)	; param s2
  7521 000054F3 E9DC000000              	jmp .L_if_end_0012
  7522                                  .L_if_else_0012:
  7523                                  	; preparing a tail-call
  7524                                  	; preparing a non-tail-call
  7525 000054F8 488B4528                	mov rax, PARAM(1)	; param s2
  7526 000054FC 50                      	push rax
  7527                                  	; preparing a non-tail-call
  7528 000054FD 488B4520                	mov rax, PARAM(0)	; param s1
  7529 00005501 50                      	push rax
  7530 00005502 6A01                    	push 1	; arg count
  7531 00005504 488B0425[900A0000]      	mov rax, qword [free_var_33]	; free var cdr
  7532 0000550C 803805                  	cmp byte [rax], T_undefined
  7533 0000550F 0F84BB0A0000            	je L_error_fvar_undefined
  7534 00005515 803804                  	cmp byte [rax], T_closure
  7535 00005518 0F85360B0000            	jne L_error_non_closure
  7536 0000551E FF7001                  	push SOB_CLOSURE_ENV(rax)
  7537 00005521 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7538 00005524 50                      	push rax
  7539 00005525 6A02                    	push 2	; arg count
  7540 00005527 488B4510                	mov rax, ENV
  7541 0000552B 488B00                  	mov rax, qword [rax + 8 * 0]
  7542 0000552E 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var run-2
  7543 00005532 488B00                  	mov rax, qword [rax]
  7544 00005535 803804                  	cmp byte [rax], T_closure
  7545 00005538 0F85160B0000            	jne L_error_non_closure
  7546 0000553E FF7001                  	push SOB_CLOSURE_ENV(rax)
  7547 00005541 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7548 00005544 50                      	push rax
  7549                                  	; preparing a non-tail-call
  7550 00005545 488B4520                	mov rax, PARAM(0)	; param s1
  7551 00005549 50                      	push rax
  7552 0000554A 6A01                    	push 1	; arg count
  7553 0000554C 488B0425[91090000]      	mov rax, qword [free_var_18]	; free var car
  7554 00005554 803805                  	cmp byte [rax], T_undefined
  7555 00005557 0F84730A0000            	je L_error_fvar_undefined
  7556 0000555D 803804                  	cmp byte [rax], T_closure
  7557 00005560 0F85EE0A0000            	jne L_error_non_closure
  7558 00005566 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7559 00005569 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7560 0000556C 50                      	push rax
  7561 0000556D 6A02                    	push 2	; arg count
  7562 0000556F 488B0425[A10A0000]      	mov rax, qword [free_var_34]	; free var cons
  7563 00005577 803805                  	cmp byte [rax], T_undefined
  7564 0000557A 0F84500A0000            	je L_error_fvar_undefined
  7565 00005580 803804                  	cmp byte [rax], T_closure
  7566 00005583 0F85CB0A0000            	jne L_error_non_closure
  7567 00005589 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7568 0000558C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7569 0000558F FF7500                  	push qword[rbp]
  7570 00005592 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7571 00005595 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7572 00005599 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7573 0000559D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7574 000055A1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7575 000055A4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7576 000055A7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7577 000055AC 4983C103                	add r9, 3 	 ;for getting to the params
  7578 000055B0 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7579 000055B4 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7580                                  .L_tc_recycle_frame_loop_0038:
  7581 000055B7 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7582 000055BA 7410                    	je .L_tc_recycle_frame_done_0038
  7583 000055BC 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7584 000055BF 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7585 000055C2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7586 000055C6 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7587 000055CA EBEB                    	jmp .L_tc_recycle_frame_loop_0038
  7588                                  .L_tc_recycle_frame_done_0038:
  7589 000055CC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7590 000055CD 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7591 000055D1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7592                                  .L_if_end_0012:
  7593 000055D4 C9                      	leave
  7594 000055D5 C22000                  	ret AND_KILL_FRAME(2)
  7595                                  .L_lambda_simple_end_0033:	; new closure is in rax
  7596 000055D8 50                      	push rax
  7597 000055D9 488B4528                	mov rax, PARAM(1)	; param run-2
  7598 000055DD 8F00                    	pop qword [rax]
  7599 000055DF 48B8-                   	mov rax, sob_void
  7599 000055E1 [0000000000000000] 
  7600                                  
  7601 000055E9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7602 000055EE E80A0B0000              	call malloc
  7603 000055F3 50                      	push rax
  7604 000055F4 BF10000000              	mov rdi, 8 * 2	; new rib
  7605 000055F9 E8FF0A0000              	call malloc
  7606 000055FE 50                      	push rax
  7607 000055FF BF10000000              	mov rdi, 8 * 2	; extended env
  7608 00005604 E8F40A0000              	call malloc
  7609 00005609 488B7D10                	mov rdi, ENV
  7610 0000560D BE00000000              	mov rsi, 0
  7611 00005612 BA01000000              	mov rdx, 1
  7612                                  .L_lambda_opt_env_loop_0007:	; ext_env[i + 1] <-- env[i]
  7613 00005617 4883FE01                	cmp rsi, 1
  7614 0000561B 7410                    	je .L_lambda_opt_env_end_0007
  7615 0000561D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7616 00005621 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7617 00005625 48FFC6                  	inc rsi
  7618 00005628 48FFC2                  	inc rdx
  7619 0000562B EBEA                    	jmp .L_lambda_opt_env_loop_0007
  7620                                  .L_lambda_opt_env_end_0007:
  7621 0000562D 5B                      	pop rbx
  7622 0000562E BE00000000              	mov rsi, 0
  7623                                  .L_lambda_opt_params_loop_0007:	; copy params
  7624 00005633 4883FE02                	cmp rsi, 2
  7625 00005637 740E                    	je .L_lambda_opt_params_end_0007
  7626 00005639 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7627 0000563E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7628 00005642 48FFC6                  	inc rsi
  7629 00005645 EBEC                    	jmp .L_lambda_opt_params_loop_0007
  7630                                  .L_lambda_opt_params_end_0007:
  7631 00005647 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7632 0000564A 4889C3                  	mov rbx, rax
  7633 0000564D 58                      	pop rax
  7634 0000564E C60004                  	mov byte [rax], T_closure
  7635 00005651 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7636 00005655 48C74009[62560000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0007
  7637 0000565D E9F7020000              	jmp .L_lambda_opt_end_0007
  7638                                  .L_lambda_opt_code_0007:	; lambda-opt body
  7639 00005662 48837C241000            	cmp qword [rsp + 8 * 2], 0
  7640 00005668 7411                    	je .L_lambda_opt_arity_check_exact_0007
  7641 0000566A 0F8F39010000            	jg .L_lambda_opt_arity_check_more_0007
  7642 00005670 FF742410                	push qword [rsp + 8 * 2]
  7643 00005674 6A00                    	push 0
  7644 00005676 E94F0A0000              	jmp L_error_incorrect_arity_opt
  7645                                  .L_lambda_opt_arity_check_exact_0007:
  7646 0000567B 4883EC08                	sub rsp, 8
  7647 0000567F 488B442408              	mov rax, qword[rsp + 8 *1]
  7648 00005684 48890424                	mov qword[rsp], rax  
  7649 00005688 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  7650 0000568D 4889442408              	mov qword[rsp + 8 * 1], rax
  7651 00005692 B801000000              	mov rax, 1
  7652 00005697 4889442410              	mov qword[rsp + 8 *2], rax
  7653 0000569C 48B8-                   	mov rax, sob_nil
  7653 0000569E [0100000000000000] 
  7654 000056A6 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  7655 000056AB C8000000                	enter 0, 0
  7656                                  	; preparing a non-tail-call
  7657 000056AF 488B4520                	mov rax, PARAM(0)	; param s
  7658 000056B3 50                      	push rax
  7659 000056B4 6A01                    	push 1	; arg count
  7660 000056B6 488B0425[3A0B0000]      	mov rax, qword [free_var_43]	; free var null?
  7661 000056BE 803805                  	cmp byte [rax], T_undefined
  7662 000056C1 0F8409090000            	je L_error_fvar_undefined
  7663 000056C7 803804                  	cmp byte [rax], T_closure
  7664 000056CA 0F8584090000            	jne L_error_non_closure
  7665 000056D0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7666 000056D3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7667 000056D6 483D[02000000]          	cmp rax, sob_boolean_false
  7668 000056DC 740F                    	je .L_if_else_0014
  7669 000056DE 48B8-                   	mov rax, L_constants + 1
  7669 000056E0 [0100000000000000] 
  7670 000056E8 E9B3000000              	jmp .L_if_end_0014
  7671                                  .L_if_else_0014:
  7672                                  	; preparing a tail-call
  7673                                  	; preparing a non-tail-call
  7674 000056ED 488B4520                	mov rax, PARAM(0)	; param s
  7675 000056F1 50                      	push rax
  7676 000056F2 6A01                    	push 1	; arg count
  7677 000056F4 488B0425[900A0000]      	mov rax, qword [free_var_33]	; free var cdr
  7678 000056FC 803805                  	cmp byte [rax], T_undefined
  7679 000056FF 0F84CB080000            	je L_error_fvar_undefined
  7680 00005705 803804                  	cmp byte [rax], T_closure
  7681 00005708 0F8546090000            	jne L_error_non_closure
  7682 0000570E FF7001                  	push SOB_CLOSURE_ENV(rax)
  7683 00005711 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7684 00005714 50                      	push rax
  7685                                  	; preparing a non-tail-call
  7686 00005715 488B4520                	mov rax, PARAM(0)	; param s
  7687 00005719 50                      	push rax
  7688 0000571A 6A01                    	push 1	; arg count
  7689 0000571C 488B0425[91090000]      	mov rax, qword [free_var_18]	; free var car
  7690 00005724 803805                  	cmp byte [rax], T_undefined
  7691 00005727 0F84A3080000            	je L_error_fvar_undefined
  7692 0000572D 803804                  	cmp byte [rax], T_closure
  7693 00005730 0F851E090000            	jne L_error_non_closure
  7694 00005736 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7695 00005739 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7696 0000573C 50                      	push rax
  7697 0000573D 6A02                    	push 2	; arg count
  7698 0000573F 488B4510                	mov rax, ENV
  7699 00005743 488B00                  	mov rax, qword [rax + 8 * 0]
  7700 00005746 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  7701 00005749 488B00                  	mov rax, qword [rax]
  7702 0000574C 803804                  	cmp byte [rax], T_closure
  7703 0000574F 0F85FF080000            	jne L_error_non_closure
  7704 00005755 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7705 00005758 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7706 0000575B FF7500                  	push qword[rbp]
  7707 0000575E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7708 00005761 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7709 00005765 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7710 00005769 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7711 0000576D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7712 00005770 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7713 00005773 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7714 00005778 4983C103                	add r9, 3 	 ;for getting to the params
  7715 0000577C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7716 00005780 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7717                                  .L_tc_recycle_frame_loop_003a:
  7718 00005783 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7719 00005786 7410                    	je .L_tc_recycle_frame_done_003a
  7720 00005788 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7721 0000578B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7722 0000578E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7723 00005792 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7724 00005796 EBEB                    	jmp .L_tc_recycle_frame_loop_003a
  7725                                  .L_tc_recycle_frame_done_003a:
  7726 00005798 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7727 00005799 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7728 0000579D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7729                                  .L_if_end_0014:
  7730 000057A0 C9                      	leave
  7731 000057A1 C21000                  	ret AND_KILL_FRAME(0)
  7732 000057A4 E9B0010000              	jmp .L_lambda_opt_end_0007	; new closure is in rax
  7733                                  .L_lambda_opt_arity_check_more_0007:
  7734 000057A9 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  7735 000057AE 49B9-                   	mov r9, sob_nil
  7735 000057B0 [0100000000000000] 
  7736 000057B8 4889E3                  	mov rbx, rsp 
  7737 000057BB 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  7738 000057BF 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  7739 000057C2 49C1E003                	shl r8, 3
  7740 000057C6 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  7741 000057C9 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  7742                                  .L_lambda_opt_stack_shrink_loop_0007:
  7743 000057CE 4983F800                	cmp r8, 0
  7744 000057D2 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0007
  7745 000057D4 BF11000000              	mov rdi, 1+8+8	;for pair
  7746 000057D9 E81F090000              	call malloc	 ;to create the pair in the stack
  7747 000057DE C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  7748 000057E1 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
  7749 000057E4 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
  7750 000057E8 4C894809                 	mov qword[rax+1+8],r9
  7751 000057EC 4989C1                  	mov r9, rax	 ; for the recursion 
  7752 000057EF 49FFC8                  	dec r8 	;we finished copy another opt param to the list
  7753 000057F2 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
  7754 000057F6 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0007
  7755                                  .L_lambda_opt_stack_shrink_loop_exit_0007:
  7756 000057F8 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
  7757 000057FD 4883E901                	sub rcx, 1
  7758 00005801 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
  7759 00005805 4801CC                  	add rsp, rcx	 ;shrinking the stack
  7760 00005808 4889E0                  	mov rax, rsp
  7761 0000580B 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
  7762 0000580E 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
  7763 00005812 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
  7764 00005815 4883C018                	add rax, 3 * 8 	;now rax is param 0
  7765 00005819 49C1E003                	shl r8, 3 	; convert to byte
  7766 0000581D 4C01C0                  	add rax, r8 	;now rax is the top of the stack
  7767 00005820 4C8908                  	mov qword[rax], r9	;puting the list at the top
  7768 00005823 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
  7769 00005827 4889E3                  	mov rbx, rsp 
  7770 0000582A 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
  7771 0000582D 41BA00000000            	mov r10, 0 	 ;r10 is the not opt params length
  7772 00005833 49FFCA                  	dec r10 
  7773 00005836 49C1E203                	shl r10, 3	;to get bytes
  7774 0000583A 4883C318                	add rbx, 3*8 	;rbx is the first param
  7775 0000583E 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
  7776 00005841 4889E0                  	mov rax, rsp
  7777 00005844 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  7778 00005847 48C744241001000000      	mov qword [rsp+2*8], 1
  7779 00005850 488B5808                	mov rbx, qword[rax + 8 *1]
  7780 00005854 48895C2408              	mov qword [rsp + 1*8] ,rbx
  7781 00005859 488B18                  	mov rbx, qword[rax]
  7782 0000585C 48891C24                	mov qword [rsp], rbx
  7783 00005860 C8000000                	enter 0, 0
  7784                                  	; preparing a non-tail-call
  7785 00005864 488B4520                	mov rax, PARAM(0)	; param s
  7786 00005868 50                      	push rax
  7787 00005869 6A01                    	push 1	; arg count
  7788 0000586B 488B0425[3A0B0000]      	mov rax, qword [free_var_43]	; free var null?
  7789 00005873 803805                  	cmp byte [rax], T_undefined
  7790 00005876 0F8454070000            	je L_error_fvar_undefined
  7791 0000587C 803804                  	cmp byte [rax], T_closure
  7792 0000587F 0F85CF070000            	jne L_error_non_closure
  7793 00005885 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7794 00005888 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7795 0000588B 483D[02000000]          	cmp rax, sob_boolean_false
  7796 00005891 740F                    	je .L_if_else_0013
  7797 00005893 48B8-                   	mov rax, L_constants + 1
  7797 00005895 [0100000000000000] 
  7798 0000589D E9B3000000              	jmp .L_if_end_0013
  7799                                  .L_if_else_0013:
  7800                                  	; preparing a tail-call
  7801                                  	; preparing a non-tail-call
  7802 000058A2 488B4520                	mov rax, PARAM(0)	; param s
  7803 000058A6 50                      	push rax
  7804 000058A7 6A01                    	push 1	; arg count
  7805 000058A9 488B0425[900A0000]      	mov rax, qword [free_var_33]	; free var cdr
  7806 000058B1 803805                  	cmp byte [rax], T_undefined
  7807 000058B4 0F8416070000            	je L_error_fvar_undefined
  7808 000058BA 803804                  	cmp byte [rax], T_closure
  7809 000058BD 0F8591070000            	jne L_error_non_closure
  7810 000058C3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7811 000058C6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7812 000058C9 50                      	push rax
  7813                                  	; preparing a non-tail-call
  7814 000058CA 488B4520                	mov rax, PARAM(0)	; param s
  7815 000058CE 50                      	push rax
  7816 000058CF 6A01                    	push 1	; arg count
  7817 000058D1 488B0425[91090000]      	mov rax, qword [free_var_18]	; free var car
  7818 000058D9 803805                  	cmp byte [rax], T_undefined
  7819 000058DC 0F84EE060000            	je L_error_fvar_undefined
  7820 000058E2 803804                  	cmp byte [rax], T_closure
  7821 000058E5 0F8569070000            	jne L_error_non_closure
  7822 000058EB FF7001                  	push SOB_CLOSURE_ENV(rax)
  7823 000058EE FF5009                  	call SOB_CLOSURE_CODE(rax)
  7824 000058F1 50                      	push rax
  7825 000058F2 6A02                    	push 2	; arg count
  7826 000058F4 488B4510                	mov rax, ENV
  7827 000058F8 488B00                  	mov rax, qword [rax + 8 * 0]
  7828 000058FB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  7829 000058FE 488B00                  	mov rax, qword [rax]
  7830 00005901 803804                  	cmp byte [rax], T_closure
  7831 00005904 0F854A070000            	jne L_error_non_closure
  7832 0000590A FF7001                  	push SOB_CLOSURE_ENV(rax)
  7833 0000590D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7834 00005910 FF7500                  	push qword[rbp]
  7835 00005913 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7836 00005916 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7837 0000591A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7838 0000591E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7839 00005922 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7840 00005925 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7841 00005928 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7842 0000592D 4983C103                	add r9, 3 	 ;for getting to the params
  7843 00005931 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7844 00005935 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7845                                  .L_tc_recycle_frame_loop_0039:
  7846 00005938 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7847 0000593B 7410                    	je .L_tc_recycle_frame_done_0039
  7848 0000593D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7849 00005940 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7850 00005943 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7851 00005947 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7852 0000594B EBEB                    	jmp .L_tc_recycle_frame_loop_0039
  7853                                  .L_tc_recycle_frame_done_0039:
  7854 0000594D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7855 0000594E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7856 00005952 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7857                                  .L_if_end_0013:
  7858 00005955 C9                      	leave
  7859 00005956 C21800                  	ret AND_KILL_FRAME(1)
  7860                                  .L_lambda_opt_end_0007:	; new closure is in rax
  7861 00005959 C9                      	leave
  7862 0000595A C22000                  	ret AND_KILL_FRAME(2)
  7863                                  .L_lambda_simple_end_0031:	; new closure is in rax
  7864 0000595D 803804                  	cmp byte [rax], T_closure
  7865 00005960 0F85EE060000            	jne L_error_non_closure
  7866 00005966 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7867 00005969 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7868 0000596C 48890425[81080000]      	mov qword [free_var_2], rax
  7869 00005974 48B8-                   	mov rax, sob_void
  7869 00005976 [0000000000000000] 
  7870                                  
  7871 0000597E 4889C7                  	mov rdi, rax
  7872 00005981 E8CC090000              	call print_sexpr_if_not_void
  7873                                  	; preparing a non-tail-call
  7874 00005986 48B8-                   	mov rax, L_constants + 1993
  7874 00005988 [C907000000000000] 
  7875 00005990 50                      	push rax
  7876 00005991 6A01                    	push 1	; arg count
  7877 00005993 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7878 00005998 E860070000              	call malloc
  7879 0000599D 50                      	push rax
  7880 0000599E BF00000000              	mov rdi, 8 * 0	; new rib
  7881 000059A3 E855070000              	call malloc
  7882 000059A8 50                      	push rax
  7883 000059A9 BF08000000              	mov rdi, 8 * 1	; extended env
  7884 000059AE E84A070000              	call malloc
  7885 000059B3 488B7D10                	mov rdi, ENV
  7886 000059B7 BE00000000              	mov rsi, 0
  7887 000059BC BA01000000              	mov rdx, 1
  7888                                  .L_lambda_simple_env_loop_0034:	; ext_env[i + 1] <-- env[i]
  7889 000059C1 4883FE00                	cmp rsi, 0
  7890 000059C5 7410                    	je .L_lambda_simple_env_end_0034
  7891 000059C7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7892 000059CB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7893 000059CF 48FFC6                  	inc rsi
  7894 000059D2 48FFC2                  	inc rdx
  7895 000059D5 EBEA                    	jmp .L_lambda_simple_env_loop_0034
  7896                                  .L_lambda_simple_env_end_0034:
  7897 000059D7 5B                      	pop rbx
  7898 000059D8 BE00000000              	mov rsi, 0
  7899                                  .L_lambda_simple_params_loop_0034:	; copy params
  7900 000059DD 4883FE00                	cmp rsi, 0
  7901 000059E1 740E                    	je .L_lambda_simple_params_end_0034
  7902 000059E3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7903 000059E8 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7904 000059EC 48FFC6                  	inc rsi
  7905 000059EF EBEC                    	jmp .L_lambda_simple_params_loop_0034
  7906                                  .L_lambda_simple_params_end_0034:
  7907 000059F1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7908 000059F4 4889C3                  	mov rbx, rax
  7909 000059F7 58                      	pop rax
  7910 000059F8 C60004                  	mov byte [rax], T_closure
  7911 000059FB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7912 000059FF 48C74009[0C5A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0034
  7913 00005A07 E9D4040000              	jmp .L_lambda_simple_end_0034
  7914                                  .L_lambda_simple_code_0034:	; lambda-simple body
  7915 00005A0C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7916 00005A12 740B                    	je .L_lambda_simple_arity_check_ok_0034
  7917 00005A14 FF742410                	push qword [rsp + 8 * 2]
  7918 00005A18 6A01                    	push 1
  7919 00005A1A E997060000              	jmp L_error_incorrect_arity_simple
  7920                                  .L_lambda_simple_arity_check_ok_0034:
  7921 00005A1F C8000000                	enter 0, 0
  7922 00005A23 BF08000000              	mov rdi, 8*1
  7923 00005A28 E8D0060000              	call malloc
  7924 00005A2D 488B5D20                	mov rbx, PARAM(0)
  7925 00005A31 488918                  	mov qword[rax], rbx
  7926 00005A34 48894520                	mov PARAM(0), rax
  7927 00005A38 48B8-                   	mov rax, sob_void
  7927 00005A3A [0000000000000000] 
  7928                                  
  7929 00005A42 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7930 00005A47 E8B1060000              	call malloc
  7931 00005A4C 50                      	push rax
  7932 00005A4D BF08000000              	mov rdi, 8 * 1	; new rib
  7933 00005A52 E8A6060000              	call malloc
  7934 00005A57 50                      	push rax
  7935 00005A58 BF10000000              	mov rdi, 8 * 2	; extended env
  7936 00005A5D E89B060000              	call malloc
  7937 00005A62 488B7D10                	mov rdi, ENV
  7938 00005A66 BE00000000              	mov rsi, 0
  7939 00005A6B BA01000000              	mov rdx, 1
  7940                                  .L_lambda_simple_env_loop_0035:	; ext_env[i + 1] <-- env[i]
  7941 00005A70 4883FE01                	cmp rsi, 1
  7942 00005A74 7410                    	je .L_lambda_simple_env_end_0035
  7943 00005A76 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7944 00005A7A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7945 00005A7E 48FFC6                  	inc rsi
  7946 00005A81 48FFC2                  	inc rdx
  7947 00005A84 EBEA                    	jmp .L_lambda_simple_env_loop_0035
  7948                                  .L_lambda_simple_env_end_0035:
  7949 00005A86 5B                      	pop rbx
  7950 00005A87 BE00000000              	mov rsi, 0
  7951                                  .L_lambda_simple_params_loop_0035:	; copy params
  7952 00005A8C 4883FE01                	cmp rsi, 1
  7953 00005A90 740E                    	je .L_lambda_simple_params_end_0035
  7954 00005A92 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7955 00005A97 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7956 00005A9B 48FFC6                  	inc rsi
  7957 00005A9E EBEC                    	jmp .L_lambda_simple_params_loop_0035
  7958                                  .L_lambda_simple_params_end_0035:
  7959 00005AA0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7960 00005AA3 4889C3                  	mov rbx, rax
  7961 00005AA6 58                      	pop rax
  7962 00005AA7 C60004                  	mov byte [rax], T_closure
  7963 00005AAA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7964 00005AAE 48C74009[BB5A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0035
  7965 00005AB6 E96E010000              	jmp .L_lambda_simple_end_0035
  7966                                  .L_lambda_simple_code_0035:	; lambda-simple body
  7967 00005ABB 48837C241003            	cmp qword [rsp + 8 * 2], 3
  7968 00005AC1 740B                    	je .L_lambda_simple_arity_check_ok_0035
  7969 00005AC3 FF742410                	push qword [rsp + 8 * 2]
  7970 00005AC7 6A03                    	push 3
  7971 00005AC9 E9E8050000              	jmp L_error_incorrect_arity_simple
  7972                                  .L_lambda_simple_arity_check_ok_0035:
  7973 00005ACE C8000000                	enter 0, 0
  7974                                  	; preparing a non-tail-call
  7975 00005AD2 488B4530                	mov rax, PARAM(2)	; param ss
  7976 00005AD6 50                      	push rax
  7977 00005AD7 488B0425[3A0B0000]      	mov rax, qword [free_var_43]	; free var null?
  7978 00005ADF 803805                  	cmp byte [rax], T_undefined
  7979 00005AE2 0F84E8040000            	je L_error_fvar_undefined
  7980 00005AE8 50                      	push rax
  7981 00005AE9 6A02                    	push 2	; arg count
  7982 00005AEB 488B0425[4B0B0000]      	mov rax, qword [free_var_44]	; free var ormap
  7983 00005AF3 803805                  	cmp byte [rax], T_undefined
  7984 00005AF6 0F84D4040000            	je L_error_fvar_undefined
  7985 00005AFC 803804                  	cmp byte [rax], T_closure
  7986 00005AFF 0F854F050000            	jne L_error_non_closure
  7987 00005B05 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7988 00005B08 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7989 00005B0B 483D[02000000]          	cmp rax, sob_boolean_false
  7990 00005B11 7409                    	je .L_if_else_0015
  7991 00005B13 488B4528                	mov rax, PARAM(1)	; param unit
  7992 00005B17 E909010000              	jmp .L_if_end_0015
  7993                                  .L_if_else_0015:
  7994                                  	; preparing a tail-call
  7995                                  	; preparing a non-tail-call
  7996 00005B1C 488B4530                	mov rax, PARAM(2)	; param ss
  7997 00005B20 50                      	push rax
  7998 00005B21 488B0425[900A0000]      	mov rax, qword [free_var_33]	; free var cdr
  7999 00005B29 803805                  	cmp byte [rax], T_undefined
  8000 00005B2C 0F849E040000            	je L_error_fvar_undefined
  8001 00005B32 50                      	push rax
  8002 00005B33 6A02                    	push 2	; arg count
  8003 00005B35 488B0425[180B0000]      	mov rax, qword [free_var_41]	; free var map
  8004 00005B3D 803805                  	cmp byte [rax], T_undefined
  8005 00005B40 0F848A040000            	je L_error_fvar_undefined
  8006 00005B46 803804                  	cmp byte [rax], T_closure
  8007 00005B49 0F8505050000            	jne L_error_non_closure
  8008 00005B4F FF7001                  	push SOB_CLOSURE_ENV(rax)
  8009 00005B52 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8010 00005B55 50                      	push rax
  8011                                  	; preparing a non-tail-call
  8012                                  	; preparing a non-tail-call
  8013 00005B56 488B4530                	mov rax, PARAM(2)	; param ss
  8014 00005B5A 50                      	push rax
  8015 00005B5B 488B0425[91090000]      	mov rax, qword [free_var_18]	; free var car
  8016 00005B63 803805                  	cmp byte [rax], T_undefined
  8017 00005B66 0F8464040000            	je L_error_fvar_undefined
  8018 00005B6C 50                      	push rax
  8019 00005B6D 6A02                    	push 2	; arg count
  8020 00005B6F 488B0425[180B0000]      	mov rax, qword [free_var_41]	; free var map
  8021 00005B77 803805                  	cmp byte [rax], T_undefined
  8022 00005B7A 0F8450040000            	je L_error_fvar_undefined
  8023 00005B80 803804                  	cmp byte [rax], T_closure
  8024 00005B83 0F85CB040000            	jne L_error_non_closure
  8025 00005B89 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8026 00005B8C FF5009                  	call SOB_CLOSURE_CODE(rax)
  8027 00005B8F 50                      	push rax
  8028 00005B90 488B4528                	mov rax, PARAM(1)	; param unit
  8029 00005B94 50                      	push rax
  8030 00005B95 488B4520                	mov rax, PARAM(0)	; param f
  8031 00005B99 50                      	push rax
  8032 00005B9A 6A03                    	push 3	; arg count
  8033 00005B9C 488B0425[92080000]      	mov rax, qword [free_var_3]	; free var apply
  8034 00005BA4 803805                  	cmp byte [rax], T_undefined
  8035 00005BA7 0F8423040000            	je L_error_fvar_undefined
  8036 00005BAD 803804                  	cmp byte [rax], T_closure
  8037 00005BB0 0F859E040000            	jne L_error_non_closure
  8038 00005BB6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8039 00005BB9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8040 00005BBC 50                      	push rax
  8041 00005BBD 488B4520                	mov rax, PARAM(0)	; param f
  8042 00005BC1 50                      	push rax
  8043 00005BC2 6A03                    	push 3	; arg count
  8044 00005BC4 488B4510                	mov rax, ENV
  8045 00005BC8 488B00                  	mov rax, qword [rax + 8 * 0]
  8046 00005BCB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  8047 00005BCE 488B00                  	mov rax, qword [rax]
  8048 00005BD1 803804                  	cmp byte [rax], T_closure
  8049 00005BD4 0F857A040000            	jne L_error_non_closure
  8050 00005BDA FF7001                  	push SOB_CLOSURE_ENV(rax)
  8051 00005BDD FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8052 00005BE0 FF7500                  	push qword[rbp]
  8053 00005BE3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8054 00005BE6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8055 00005BEA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8056 00005BEE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8057 00005BF2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8058 00005BF5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8059 00005BF8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8060 00005BFD 4983C103                	add r9, 3 	 ;for getting to the params
  8061 00005C01 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8062 00005C05 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8063                                  .L_tc_recycle_frame_loop_003b:
  8064 00005C08 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8065 00005C0B 7410                    	je .L_tc_recycle_frame_done_003b
  8066 00005C0D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8067 00005C10 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8068 00005C13 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8069 00005C17 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8070 00005C1B EBEB                    	jmp .L_tc_recycle_frame_loop_003b
  8071                                  .L_tc_recycle_frame_done_003b:
  8072 00005C1D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8073 00005C1E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8074 00005C22 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8075                                  .L_if_end_0015:
  8076 00005C25 C9                      	leave
  8077 00005C26 C22800                  	ret AND_KILL_FRAME(3)
  8078                                  .L_lambda_simple_end_0035:	; new closure is in rax
  8079 00005C29 50                      	push rax
  8080 00005C2A 488B4520                	mov rax, PARAM(0)	; param run
  8081 00005C2E 8F00                    	pop qword [rax]
  8082 00005C30 48B8-                   	mov rax, sob_void
  8082 00005C32 [0000000000000000] 
  8083                                  
  8084 00005C3A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8085 00005C3F E8B9040000              	call malloc
  8086 00005C44 50                      	push rax
  8087 00005C45 BF08000000              	mov rdi, 8 * 1	; new rib
  8088 00005C4A E8AE040000              	call malloc
  8089 00005C4F 50                      	push rax
  8090 00005C50 BF10000000              	mov rdi, 8 * 2	; extended env
  8091 00005C55 E8A3040000              	call malloc
  8092 00005C5A 488B7D10                	mov rdi, ENV
  8093 00005C5E BE00000000              	mov rsi, 0
  8094 00005C63 BA01000000              	mov rdx, 1
  8095                                  .L_lambda_opt_env_loop_0008:	; ext_env[i + 1] <-- env[i]
  8096 00005C68 4883FE01                	cmp rsi, 1
  8097 00005C6C 7410                    	je .L_lambda_opt_env_end_0008
  8098 00005C6E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8099 00005C72 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8100 00005C76 48FFC6                  	inc rsi
  8101 00005C79 48FFC2                  	inc rdx
  8102 00005C7C EBEA                    	jmp .L_lambda_opt_env_loop_0008
  8103                                  .L_lambda_opt_env_end_0008:
  8104 00005C7E 5B                      	pop rbx
  8105 00005C7F BE00000000              	mov rsi, 0
  8106                                  .L_lambda_opt_params_loop_0008:	; copy params
  8107 00005C84 4883FE01                	cmp rsi, 1
  8108 00005C88 740E                    	je .L_lambda_opt_params_end_0008
  8109 00005C8A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8110 00005C8F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8111 00005C93 48FFC6                  	inc rsi
  8112 00005C96 EBEC                    	jmp .L_lambda_opt_params_loop_0008
  8113                                  .L_lambda_opt_params_end_0008:
  8114 00005C98 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8115 00005C9B 4889C3                  	mov rbx, rax
  8116 00005C9E 58                      	pop rax
  8117 00005C9F C60004                  	mov byte [rax], T_closure
  8118 00005CA2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8119 00005CA6 48C74009[B35C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0008
  8120 00005CAE E929020000              	jmp .L_lambda_opt_end_0008
  8121                                  .L_lambda_opt_code_0008:	; lambda-opt body
  8122 00005CB3 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8123 00005CB9 7411                    	je .L_lambda_opt_arity_check_exact_0008
  8124 00005CBB 0F8FCE000000            	jg .L_lambda_opt_arity_check_more_0008
  8125 00005CC1 FF742410                	push qword [rsp + 8 * 2]
  8126 00005CC5 6A02                    	push 2
  8127 00005CC7 E9FE030000              	jmp L_error_incorrect_arity_opt
  8128                                  .L_lambda_opt_arity_check_exact_0008:
  8129 00005CCC 4883EC08                	sub rsp, 8
  8130 00005CD0 488B442408              	mov rax, qword[rsp + 8 *1]
  8131 00005CD5 48890424                	mov qword[rsp], rax  
  8132 00005CD9 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  8133 00005CDE 4889442408              	mov qword[rsp + 8 * 1], rax
  8134 00005CE3 B803000000              	mov rax, 3
  8135 00005CE8 4889442410              	mov qword[rsp + 8 *2], rax
  8136 00005CED 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  8137 00005CF2 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  8138 00005CF7 488B442428              	mov rax, qword[rsp + 8 * (4 + 1)]
  8139 00005CFC 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  8140 00005D01 48B8-                   	mov rax, sob_nil
  8140 00005D03 [0100000000000000] 
  8141 00005D0B 4889442428              	mov qword[rsp + 8 * (3 + 2)], rax
  8142 00005D10 C8000000                	enter 0, 0
  8143                                  	; preparing a tail-call
  8144 00005D14 488B4530                	mov rax, PARAM(2)	; param ss
  8145 00005D18 50                      	push rax
  8146 00005D19 488B4528                	mov rax, PARAM(1)	; param unit
  8147 00005D1D 50                      	push rax
  8148 00005D1E 488B4520                	mov rax, PARAM(0)	; param f
  8149 00005D22 50                      	push rax
  8150 00005D23 6A03                    	push 3	; arg count
  8151 00005D25 488B4510                	mov rax, ENV
  8152 00005D29 488B00                  	mov rax, qword [rax + 8 * 0]
  8153 00005D2C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  8154 00005D2F 488B00                  	mov rax, qword [rax]
  8155 00005D32 803804                  	cmp byte [rax], T_closure
  8156 00005D35 0F8519030000            	jne L_error_non_closure
  8157 00005D3B FF7001                  	push SOB_CLOSURE_ENV(rax)
  8158 00005D3E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8159 00005D41 FF7500                  	push qword[rbp]
  8160 00005D44 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8161 00005D47 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8162 00005D4B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8163 00005D4F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8164 00005D53 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8165 00005D56 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8166 00005D59 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8167 00005D5E 4983C103                	add r9, 3 	 ;for getting to the params
  8168 00005D62 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8169 00005D66 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8170                                  .L_tc_recycle_frame_loop_003d:
  8171 00005D69 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8172 00005D6C 7410                    	je .L_tc_recycle_frame_done_003d
  8173 00005D6E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8174 00005D71 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8175 00005D74 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8176 00005D78 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8177 00005D7C EBEB                    	jmp .L_tc_recycle_frame_loop_003d
  8178                                  .L_tc_recycle_frame_done_003d:
  8179 00005D7E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8180 00005D7F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8181 00005D83 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8182 00005D86 C9                      	leave
  8183 00005D87 C22000                  	ret AND_KILL_FRAME(2)
  8184 00005D8A E94D010000              	jmp .L_lambda_opt_end_0008	; new closure is in rax
  8185                                  .L_lambda_opt_arity_check_more_0008:
  8186 00005D8F 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  8187 00005D94 49B9-                   	mov r9, sob_nil
  8187 00005D96 [0100000000000000] 
  8188 00005D9E 4889E3                  	mov rbx, rsp 
  8189 00005DA1 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  8190 00005DA5 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  8191 00005DA8 49C1E003                	shl r8, 3
  8192 00005DAC 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  8193 00005DAF 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  8194                                  .L_lambda_opt_stack_shrink_loop_0008:
  8195 00005DB4 4983F802                	cmp r8, 2
  8196 00005DB8 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0008
  8197 00005DBA BF11000000              	mov rdi, 1+8+8	;for pair
  8198 00005DBF E839030000              	call malloc	 ;to create the pair in the stack
  8199 00005DC4 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  8200 00005DC7 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
  8201 00005DCA 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
  8202 00005DCE 4C894809                 	mov qword[rax+1+8],r9
  8203 00005DD2 4989C1                  	mov r9, rax	 ; for the recursion 
  8204 00005DD5 49FFC8                  	dec r8 	;we finished copy another opt param to the list
  8205 00005DD8 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
  8206 00005DDC EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0008
  8207                                  .L_lambda_opt_stack_shrink_loop_exit_0008:
  8208 00005DDE 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
  8209 00005DE3 4883E903                	sub rcx, 3
  8210 00005DE7 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
  8211 00005DEB 4801CC                  	add rsp, rcx	 ;shrinking the stack
  8212 00005DEE 4889E0                  	mov rax, rsp
  8213 00005DF1 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
  8214 00005DF4 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
  8215 00005DF8 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
  8216 00005DFB 4883C018                	add rax, 3 * 8 	;now rax is param 0
  8217 00005DFF 49C1E003                	shl r8, 3 	; convert to byte
  8218 00005E03 4C01C0                  	add rax, r8 	;now rax is the top of the stack
  8219 00005E06 4C8908                  	mov qword[rax], r9	;puting the list at the top
  8220 00005E09 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
  8221 00005E0D 4889E3                  	mov rbx, rsp 
  8222 00005E10 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
  8223 00005E13 41BA02000000            	mov r10, 2 	 ;r10 is the not opt params length
  8224 00005E19 49FFCA                  	dec r10 
  8225 00005E1C 49C1E203                	shl r10, 3	;to get bytes
  8226 00005E20 4883C318                	add rbx, 3*8 	;rbx is the first param
  8227 00005E24 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
  8228 00005E27 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  8229 00005E2A 4C8900                  	mov qword[rax], r8
  8230 00005E2D 4883E808                	sub rax, 8
  8231 00005E31 4883EB08                	sub rbx, 8
  8232 00005E35 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  8233 00005E38 4C8900                  	mov qword[rax], r8
  8234 00005E3B 4883E808                	sub rax, 8
  8235 00005E3F 4883EB08                	sub rbx, 8
  8236 00005E43 4889E0                  	mov rax, rsp
  8237 00005E46 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  8238 00005E49 48C744241003000000      	mov qword [rsp+2*8], 3
  8239 00005E52 488B5808                	mov rbx, qword[rax + 8 *1]
  8240 00005E56 48895C2408              	mov qword [rsp + 1*8] ,rbx
  8241 00005E5B 488B18                  	mov rbx, qword[rax]
  8242 00005E5E 48891C24                	mov qword [rsp], rbx
  8243 00005E62 C8000000                	enter 0, 0
  8244                                  	; preparing a tail-call
  8245 00005E66 488B4530                	mov rax, PARAM(2)	; param ss
  8246 00005E6A 50                      	push rax
  8247 00005E6B 488B4528                	mov rax, PARAM(1)	; param unit
  8248 00005E6F 50                      	push rax
  8249 00005E70 488B4520                	mov rax, PARAM(0)	; param f
  8250 00005E74 50                      	push rax
  8251 00005E75 6A03                    	push 3	; arg count
  8252 00005E77 488B4510                	mov rax, ENV
  8253 00005E7B 488B00                  	mov rax, qword [rax + 8 * 0]
  8254 00005E7E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  8255 00005E81 488B00                  	mov rax, qword [rax]
  8256 00005E84 803804                  	cmp byte [rax], T_closure
  8257 00005E87 0F85C7010000            	jne L_error_non_closure
  8258 00005E8D FF7001                  	push SOB_CLOSURE_ENV(rax)
  8259 00005E90 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8260 00005E93 FF7500                  	push qword[rbp]
  8261 00005E96 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8262 00005E99 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8263 00005E9D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8264 00005EA1 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8265 00005EA5 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8266 00005EA8 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8267 00005EAB 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8268 00005EB0 4983C103                	add r9, 3 	 ;for getting to the params
  8269 00005EB4 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8270 00005EB8 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8271                                  .L_tc_recycle_frame_loop_003c:
  8272 00005EBB 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8273 00005EBE 7410                    	je .L_tc_recycle_frame_done_003c
  8274 00005EC0 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8275 00005EC3 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8276 00005EC6 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8277 00005ECA 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8278 00005ECE EBEB                    	jmp .L_tc_recycle_frame_loop_003c
  8279                                  .L_tc_recycle_frame_done_003c:
  8280 00005ED0 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8281 00005ED1 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8282 00005ED5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8283 00005ED8 C9                      	leave
  8284 00005ED9 C22800                  	ret AND_KILL_FRAME(3)
  8285                                  .L_lambda_opt_end_0008:	; new closure is in rax
  8286 00005EDC C9                      	leave
  8287 00005EDD C21800                  	ret AND_KILL_FRAME(1)
  8288                                  .L_lambda_simple_end_0034:	; new closure is in rax
  8289 00005EE0 803804                  	cmp byte [rax], T_closure
  8290 00005EE3 0F856B010000            	jne L_error_non_closure
  8291 00005EE9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8292 00005EEC FF5009                  	call SOB_CLOSURE_CODE(rax)
  8293 00005EEF 48890425[B20A0000]      	mov qword [free_var_35], rax
  8294 00005EF7 48B8-                   	mov rax, sob_void
  8294 00005EF9 [0000000000000000] 
  8295                                  
  8296 00005F01 4889C7                  	mov rdi, rax
  8297 00005F04 E849040000              	call print_sexpr_if_not_void
  8298                                  	; preparing a non-tail-call
  8299 00005F09 48B8-                   	mov rax, L_constants + 2134
  8299 00005F0B [5608000000000000] 
  8300 00005F13 50                      	push rax
  8301 00005F14 48B8-                   	mov rax, L_constants + 2125
  8301 00005F16 [4D08000000000000] 
  8302 00005F1E 50                      	push rax
  8303 00005F1F 48B8-                   	mov rax, L_constants + 2116
  8303 00005F21 [4408000000000000] 
  8304 00005F29 50                      	push rax
  8305 00005F2A 6A03                    	push 3	; arg count
  8306 00005F2C 488B0425[E50A0000]      	mov rax, qword [free_var_38]	; free var list
  8307 00005F34 803805                  	cmp byte [rax], T_undefined
  8308 00005F37 0F8493000000            	je L_error_fvar_undefined
  8309 00005F3D 803804                  	cmp byte [rax], T_closure
  8310 00005F40 0F850E010000            	jne L_error_non_closure
  8311 00005F46 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8312 00005F49 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8313 00005F4C 48890425[8F0B0000]      	mov qword [free_var_48], rax
  8314 00005F54 48B8-                   	mov rax, sob_void
  8314 00005F56 [0000000000000000] 
  8315                                  
  8316 00005F5E 4889C7                  	mov rdi, rax
  8317 00005F61 E8EC030000              	call print_sexpr_if_not_void
  8318                                  	; preparing a non-tail-call
  8319 00005F66 488B0425[8F0B0000]      	mov rax, qword [free_var_48]	; free var x
  8320 00005F6E 803805                  	cmp byte [rax], T_undefined
  8321 00005F71 745D                    	je L_error_fvar_undefined
  8322 00005F73 50                      	push rax
  8323 00005F74 6A01                    	push 1	; arg count
  8324 00005F76 488B0425[7E0B0000]      	mov rax, qword [free_var_47]	; free var reverse
  8325 00005F7E 803805                  	cmp byte [rax], T_undefined
  8326 00005F81 744D                    	je L_error_fvar_undefined
  8327 00005F83 803804                  	cmp byte [rax], T_closure
  8328 00005F86 0F85C8000000            	jne L_error_non_closure
  8329 00005F8C FF7001                  	push SOB_CLOSURE_ENV(rax)
  8330 00005F8F FF5009                  	call SOB_CLOSURE_CODE(rax)
  8331                                  Lend:
  8332 00005F92 4889C7                  	mov rdi, rax
  8333 00005F95 E8B8030000              	call print_sexpr_if_not_void
  8334                                  
  8335 00005F9A 48BF-                           mov rdi, fmt_memory_usage
  8335 00005F9C [380C000000000000] 
  8336 00005FA4 488B3425[BE0C0000]              mov rsi, qword [top_of_memory]
  8337 00005FAC 4881EE[00000000]                sub rsi, memory
  8338 00005FB3 B800000000                      mov rax, 0
  8339                                          ENTER
    44 00005FB8 C8000000            <1>  enter 0, 0
    45 00005FBC 4883E4F0            <1>  and rsp, ~15
  8340 00005FC0 E8(00000000)                    call printf
  8341                                          LEAVE
    49 00005FC5 C9                  <1>  leave
  8342 00005FC6 B800000000                      mov rax, 0
  8343 00005FCB E8(00000000)                    call exit
  8344                                  
  8345                                  L_error_fvar_undefined:
  8346 00005FD0 50                              push rax
  8347 00005FD1 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
  8348 00005FD9 48BE-                           mov rsi, fmt_undefined_free_var_1
  8348 00005FDB [A00B000000000000] 
  8349 00005FE3 B800000000                      mov rax, 0
  8350                                          ENTER
    44 00005FE8 C8000000            <1>  enter 0, 0
    45 00005FEC 4883E4F0            <1>  and rsp, ~15
  8351 00005FF0 E8(00000000)                    call fprintf
  8352                                          LEAVE
    49 00005FF5 C9                  <1>  leave
  8353 00005FF6 58                              pop rax
  8354 00005FF7 488B4001                        mov rax, qword [rax + 1] ; string
  8355 00005FFB 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  8356 00005FFF BE01000000                      mov rsi, 1               ; sizeof(char)
  8357 00006004 488B5001                        mov rdx, qword [rax + 1] ; string-length
  8358 00006008 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
  8359 00006010 B800000000                      mov rax, 0
  8360                                          ENTER
    44 00006015 C8000000            <1>  enter 0, 0
    45 00006019 4883E4F0            <1>  and rsp, ~15
  8361 0000601D E8(00000000)                    call fwrite
  8362                                          LEAVE
    49 00006022 C9                  <1>  leave
  8363 00006023 488B3C25[00000000]              mov rdi, [stderr]       ; destination
  8364 0000602B 48BE-                           mov rsi, fmt_undefined_free_var_2
  8364 0000602D [B70B000000000000] 
  8365 00006035 B800000000                      mov rax, 0
  8366                                          ENTER
    44 0000603A C8000000            <1>  enter 0, 0
    45 0000603E 4883E4F0            <1>  and rsp, ~15
  8367 00006042 E8(00000000)                    call fprintf
  8368                                          LEAVE
    49 00006047 C9                  <1>  leave
  8369 00006048 48C7C0F6FFFFFF                  mov rax, -10
  8370 0000604F E8(00000000)                    call exit
  8371                                  
  8372                                  L_error_non_closure:
  8373 00006054 488B3C25[00000000]              mov rdi, qword [stderr]
  8374 0000605C 48BE-                           mov rsi, fmt_non_closure
  8374 0000605E [6E0C000000000000] 
  8375 00006066 B800000000                      mov rax, 0
  8376                                          ENTER
    44 0000606B C8000000            <1>  enter 0, 0
    45 0000606F 4883E4F0            <1>  and rsp, ~15
  8377 00006073 E8(00000000)                    call fprintf
  8378                                          LEAVE
    49 00006078 C9                  <1>  leave
  8379 00006079 48C7C0FEFFFFFF                  mov rax, -2
  8380 00006080 E8(00000000)                    call exit
  8381                                  
  8382                                  L_error_improper_list:
  8383 00006085 488B3C25[00000000]      	mov rdi, qword [stderr]
  8384 0000608D 48BE-                   	mov rsi, fmt_error_improper_list
  8384 0000608F [960C000000000000] 
  8385 00006097 B800000000              	mov rax, 0
  8386                                          ENTER
    44 0000609C C8000000            <1>  enter 0, 0
    45 000060A0 4883E4F0            <1>  and rsp, ~15
  8387 000060A4 E8(00000000)            	call fprintf
  8388                                          LEAVE
    49 000060A9 C9                  <1>  leave
  8389 000060AA 48C7C0F9FFFFFF          	mov rax, -7
  8390 000060B1 E8(00000000)            	call exit
  8391                                  
  8392                                  L_error_incorrect_arity_simple:
  8393 000060B6 488B3C25[00000000]              mov rdi, qword [stderr]
  8394 000060BE 48BE-                           mov rsi, fmt_incorrect_arity_simple
  8394 000060C0 [D90B000000000000] 
  8395 000060C8 EB12                            jmp L_error_incorrect_arity_common
  8396                                  L_error_incorrect_arity_opt:
  8397 000060CA 488B3C25[00000000]              mov rdi, qword [stderr]
  8398 000060D2 48BE-                           mov rsi, fmt_incorrect_arity_opt
  8398 000060D4 [040C000000000000] 
  8399                                  L_error_incorrect_arity_common:
  8400 000060DC 5A                              pop rdx
  8401 000060DD 59                              pop rcx
  8402 000060DE B800000000                      mov rax, 0
  8403                                          ENTER
    44 000060E3 C8000000            <1>  enter 0, 0
    45 000060E7 4883E4F0            <1>  and rsp, ~15
  8404 000060EB E8(00000000)                    call fprintf
  8405                                          LEAVE
    49 000060F0 C9                  <1>  leave
  8406 000060F1 48C7C0FAFFFFFF                  mov rax, -6
  8407 000060F8 E8(00000000)                    call exit
  8408                                  
  8409                                  section .data
  8410                                  fmt_undefined_free_var_1:
  8411 00000BA0 212121205468652066-             db `!!! The free variable \0`
  8411 00000BA9 726565207661726961-
  8411 00000BB2 626C652000         
  8412                                  fmt_undefined_free_var_2:
  8413 00000BB7 207761732075736564-             db ` was used before it was defined.\n\0`
  8413 00000BC0 206265666F72652069-
  8413 00000BC9 742077617320646566-
  8413 00000BD2 696E65642E0A00     
  8414                                  fmt_incorrect_arity_simple:
  8415 00000BD9 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
  8415 00000BE2 74656420256C642061-
  8415 00000BEB 7267756D656E74732C-
  8415 00000BF4 206275742067697665-
  8415 00000BFD 6E20256C640A00     
  8416                                  fmt_incorrect_arity_opt:
  8417 00000C04 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
  8417 00000C0D 746564206174206C65-
  8417 00000C16 61737420256C642061-
  8417 00000C1F 7267756D656E74732C-
  8417 00000C28 206275742067697665-
  8417 00000C31 6E20256C640A00     
  8418                                  fmt_memory_usage:
  8419 00000C38 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
  8419 00000C41 20256C642062797465-
  8419 00000C4A 73206F662064796E61-
  8419 00000C53 6D6963616C6C792D61-
  8419 00000C5C 6C6C6F636174656420-
  8419 00000C65 6D656D6F72790A0A00 
  8420                                  fmt_non_closure:
  8421 00000C6E 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
  8421 00000C77 7074696E6720746F20-
  8421 00000C80 6170706C792061206E-
  8421 00000C89 6F6E2D636C6F737572-
  8421 00000C92 65210A00           
  8422                                  fmt_error_improper_list:
  8423 00000C96 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
  8423 00000C9F 7267756D656E742069-
  8423 00000CA8 73206E6F7420612070-
  8423 00000CB1 726F706572206C6973-
  8423 00000CBA 74210A00           
  8424                                  
  8425                                  section .bss
  8426                                  memory:
  8427 00000000 <res 40000000h>         	resb gbytes(1)
  8428                                  
  8429                                  section .data
  8430                                  top_of_memory:
  8431 00000CBE [0000000000000000]              dq memory
  8432                                  
  8433                                  section .text
  8434                                  malloc:
  8435 000060FD 488B0425[BE0C0000]              mov rax, qword [top_of_memory]
  8436 00006105 48013C25[BE0C0000]              add qword [top_of_memory], rdi
  8437 0000610D C3                              ret
  8438                                  
  8439                                  L_code_ptr_return:
  8440 0000610E 48837C241002            	cmp qword [rsp + 8*2], 2
  8441 00006114 0F85F41C0000            	jne L_error_arg_count_2
  8442 0000611A 488B4C2418              	mov rcx, qword [rsp + 8*3]
  8443                                  	assert_integer(rcx)
    53 0000611F 803911              <1>  cmp byte [%1], %2
    54 00006122 0F85851D0000        <1>  jne L_error_incorrect_type
  8444 00006128 488B4901                	mov rcx, qword [rcx + 1]
  8445 0000612C 4883F900                	cmp rcx, 0
  8446 00006130 0F8C0C1C0000            	jl L_error_integer_range
  8447 00006136 488B442420              	mov rax, qword [rsp + 8*4]
  8448                                  .L0:
  8449 0000613B 4883F900                        cmp rcx, 0
  8450 0000613F 7409                            je .L1
  8451 00006141 488B6D00                	mov rbp, qword [rbp]
  8452 00006145 48FFC9                  	dec rcx
  8453 00006148 7FF1                    	jg .L0
  8454                                  .L1:
  8455 0000614A 4889EC                  	mov rsp, rbp
  8456 0000614D 5D                      	pop rbp
  8457 0000614E 5B                              pop rbx
  8458 0000614F 488B4C2408                      mov rcx, qword [rsp + 8*1]
  8459 00006154 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
  8460 00006159 FFE3                    	jmp rbx
  8461                                  
  8462                                  L_code_ptr_make_list:
  8463 0000615B C8000000                	enter 0, 0
  8464 0000615F 48837D1801                      cmp COUNT, 1
  8465 00006164 740C                            je .L0
  8466 00006166 48837D1802                      cmp COUNT, 2
  8467 0000616B 7411                            je .L1
  8468 0000616D E9D11C0000                      jmp L_error_arg_count_12
  8469                                  .L0:
  8470 00006172 49B9-                           mov r9, sob_void
  8470 00006174 [0000000000000000] 
  8471 0000617C EB04                            jmp .L2
  8472                                  .L1:
  8473 0000617E 4C8B4D28                        mov r9, PARAM(1)
  8474                                  .L2:
  8475 00006182 488B4D20                        mov rcx, PARAM(0)
  8476                                          assert_integer(rcx)
    53 00006186 803911              <1>  cmp byte [%1], %2
    54 00006189 0F851E1D0000        <1>  jne L_error_incorrect_type
  8477 0000618F 488B4901                        mov rcx, qword [rcx + 1]
  8478 00006193 4883F900                        cmp rcx, 0
  8479 00006197 0F8CD61B0000                    jl L_error_arg_negative
  8480 0000619D 49B8-                           mov r8, sob_nil
  8480 0000619F [0100000000000000] 
  8481                                  .L3:
  8482 000061A7 4883F900                        cmp rcx, 0
  8483 000061AB 7E1D                            jle .L4
  8484 000061AD BF11000000                      mov rdi, 1 + 8 + 8
  8485 000061B2 E846FFFFFF                      call malloc
  8486 000061B7 C60021                          mov byte [rax], T_pair
  8487 000061BA 4C894801                        mov qword [rax + 1], r9
  8488 000061BE 4C894009                        mov qword [rax + 1 + 8], r8
  8489 000061C2 4989C0                          mov r8, rax
  8490 000061C5 48FFC9                          dec rcx
  8491 000061C8 EBDD                            jmp .L3
  8492                                  .L4:
  8493 000061CA 4C89C0                          mov rax, r8
  8494 000061CD 48837D1802                      cmp COUNT, 2
  8495 000061D2 7404                            je .L5
  8496 000061D4 C9                              leave
  8497 000061D5 C21800                          ret AND_KILL_FRAME(1)
  8498                                  .L5:
  8499 000061D8 C9                      	leave
  8500 000061D9 C22000                  	ret AND_KILL_FRAME(2)
  8501                                  
  8502                                  L_code_ptr_is_primitive:
  8503 000061DC C8000000                	enter 0, 0
  8504 000061E0 48837D1801              	cmp COUNT, 1
  8505 000061E5 0F85EE1B0000            	jne L_error_arg_count_1
  8506 000061EB 488B4520                	mov rax, PARAM(0)
  8507                                  	assert_closure(rax)
    53 000061EF 803804              <1>  cmp byte [%1], %2
    54 000061F2 0F85B51C0000        <1>  jne L_error_incorrect_type
  8508 000061F8 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
  8509 000061FD 750C                    	jne .L_false
  8510 000061FF 48B8-                   	mov rax, sob_boolean_true
  8510 00006201 [0300000000000000] 
  8511 00006209 EB0A                    	jmp .L_end
  8512                                  .L_false:
  8513 0000620B 48B8-                   	mov rax, sob_boolean_false
  8513 0000620D [0200000000000000] 
  8514                                  .L_end:
  8515 00006215 C9                      	leave
  8516 00006216 C21800                  	ret AND_KILL_FRAME(1)
  8517                                  
  8518                                  L_code_ptr_length:
  8519 00006219 C8000000                	enter 0, 0
  8520 0000621D 48837D1801              	cmp COUNT, 1
  8521 00006222 0F85B11B0000            	jne L_error_arg_count_1
  8522 00006228 488B5D20                	mov rbx, PARAM(0)
  8523 0000622C BF00000000              	mov rdi, 0
  8524                                  .L:
  8525 00006231 803B01                  	cmp byte [rbx], T_nil
  8526 00006234 7412                    	je .L_end
  8527                                  	assert_pair(rbx)
    53 00006236 803B21              <1>  cmp byte [%1], %2
    54 00006239 0F856E1C0000        <1>  jne L_error_incorrect_type
  8528 0000623F 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
  8529 00006243 48FFC7                  	inc rdi
  8530 00006246 EBE9                    	jmp .L
  8531                                  .L_end:
  8532 00006248 E8DB1A0000              	call make_integer
  8533 0000624D C9                      	leave
  8534 0000624E C21800                  	ret AND_KILL_FRAME(1)
  8535                                  
  8536                                  L_code_ptr_break:
  8537 00006251 48837C241000                    cmp qword [rsp + 8 * 2], 0
  8538 00006257 0F85471B0000                    jne L_error_arg_count_0
  8539 0000625D CC                              int3
  8540 0000625E 48B8-                           mov rax, sob_void
  8540 00006260 [0000000000000000] 
  8541 00006268 C21000                          ret AND_KILL_FRAME(0)        
  8542                                  
  8543                                  L_code_ptr_frame:
  8544 0000626B C8000000                        enter 0, 0
  8545 0000626F 48837D1800                      cmp COUNT, 0
  8546 00006274 0F852A1B0000                    jne L_error_arg_count_0
  8547                                  
  8548 0000627A 48BF-                           mov rdi, fmt_frame
  8548 0000627C [C60C000000000000] 
  8549 00006284 488B7500                        mov rsi, qword [rbp]    ; old rbp
  8550 00006288 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
  8551 0000628C 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
  8552 00006290 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
  8553 00006294 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
  8554 00006298 6A00                            push 0
  8555 0000629A 4151                            push r9
  8556 0000629C 4150                            push r8                   ; we'll use it when printing the params
  8557 0000629E B800000000                      mov rax, 0
  8558                                          
  8559                                          ENTER
    44 000062A3 C8000000            <1>  enter 0, 0
    45 000062A7 4883E4F0            <1>  and rsp, ~15
  8560 000062AB E8(00000000)                    call printf
  8561                                          LEAVE
    49 000062B0 C9                  <1>  leave
  8562                                  
  8563                                  .L:
  8564 000062B1 488B0C24                        mov rcx, qword [rsp]
  8565 000062B5 4883F900                        cmp rcx, 0
  8566 000062B9 7467                            je .L_out
  8567 000062BB 48BF-                           mov rdi, fmt_frame_param_prefix
  8567 000062BD [FF0C000000000000] 
  8568 000062C5 488B742410                      mov rsi, qword [rsp + 8*2]
  8569 000062CA B800000000                      mov rax, 0
  8570                                          
  8571                                          ENTER
    44 000062CF C8000000            <1>  enter 0, 0
    45 000062D3 4883E4F0            <1>  and rsp, ~15
  8572 000062D7 E8(00000000)                    call printf
  8573                                          LEAVE
    49 000062DC C9                  <1>  leave
  8574                                  
  8575 000062DD 488B0C24                        mov rcx, qword [rsp]
  8576 000062E1 48FFC9                          dec rcx
  8577 000062E4 48890C24                        mov qword [rsp], rcx    ; dec arg count
  8578 000062E8 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
  8579 000062ED 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
  8580 000062F2 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
  8581 000062F6 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
  8582 000062FB 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
  8583 000062FE E87B000000                      call print_sexpr
  8584 00006303 48BF-                           mov rdi, fmt_newline
  8584 00006305 [2B0D000000000000] 
  8585 0000630D B800000000                      mov rax, 0
  8586                                          ENTER
    44 00006312 C8000000            <1>  enter 0, 0
    45 00006316 4883E4F0            <1>  and rsp, ~15
  8587 0000631A E8(00000000)                    call printf
  8588                                          LEAVE
    49 0000631F C9                  <1>  leave
  8589 00006320 EB8F                            jmp .L
  8590                                  .L_out:
  8591 00006322 48BF-                           mov rdi, fmt_frame_continue
  8591 00006324 [100D000000000000] 
  8592 0000632C B800000000                      mov rax, 0
  8593                                          ENTER
    44 00006331 C8000000            <1>  enter 0, 0
    45 00006335 4883E4F0            <1>  and rsp, ~15
  8594 00006339 E8(00000000)                    call printf
  8595 0000633E E8(00000000)                    call getchar
  8596                                          LEAVE
    49 00006343 C9                  <1>  leave
  8597                                          
  8598 00006344 48B8-                           mov rax, sob_void
  8598 00006346 [0000000000000000] 
  8599 0000634E C9                              leave
  8600 0000634F C21000                          ret AND_KILL_FRAME(0)
  8601                                          
  8602                                  print_sexpr_if_not_void:
  8603 00006352 4881FF[00000000]        	cmp rdi, sob_void
  8604 00006359 7422                    	je .done
  8605 0000635B E81E000000              	call print_sexpr
  8606 00006360 48BF-                   	mov rdi, fmt_newline
  8606 00006362 [2B0D000000000000] 
  8607 0000636A B800000000              	mov rax, 0
  8608                                  	ENTER
    44 0000636F C8000000            <1>  enter 0, 0
    45 00006373 4883E4F0            <1>  and rsp, ~15
  8609 00006377 E8(00000000)            	call printf
  8610                                  	LEAVE
    49 0000637C C9                  <1>  leave
  8611                                  .done:
  8612 0000637D C3                      	ret
  8613                                  
  8614                                  section .data
  8615                                  fmt_frame:
  8616 00000CC6 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
  8616 00000CCF 207265742061646472-
  8616 00000CD8 203D2025703B206C65-
  8616 00000CE1 7820656E76203D2025-
  8616 00000CEA 703B20706172616D20-
  8616 00000CF3 636F756E74203D2025-
  8616 00000CFC 640A00             
  8617                                  fmt_frame_param_prefix:
  8618 00000CFF 3D3D5B706172616D20-             db `==[param %d]==> \0`
  8618 00000D08 25645D3D3D3E2000   
  8619                                  fmt_frame_continue:
  8620 00000D10 486974203C456E7465-             db `Hit <Enter> to continue...\0`
  8620 00000D19 723E20746F20636F6E-
  8620 00000D22 74696E75652E2E2E00 
  8621                                  fmt_newline:
  8622 00000D2B 0A00                    	db `\n\0`
  8623                                  fmt_void:
  8624 00000D2D 233C766F69643E00        	db `#<void>\0`
  8625                                  fmt_nil:
  8626 00000D35 282900                  	db `()\0`
  8627                                  fmt_boolean_false:
  8628 00000D38 236600                  	db `#f\0`
  8629                                  fmt_boolean_true:
  8630 00000D3B 237400                  	db `#t\0`
  8631                                  fmt_char_backslash:
  8632 00000D3E 235C5C00                	db `#\\\\\0`
  8633                                  fmt_char_dquote:
  8634 00000D42 235C2200                	db `#\\"\0`
  8635                                  fmt_char_simple:
  8636 00000D46 235C256300              	db `#\\%c\0`
  8637                                  fmt_char_null:
  8638 00000D4B 235C6E756C00            	db `#\\nul\0`
  8639                                  fmt_char_bell:
  8640 00000D51 235C62656C6C00          	db `#\\bell\0`
  8641                                  fmt_char_backspace:
  8642 00000D58 235C6261636B737061-     	db `#\\backspace\0`
  8642 00000D61 636500             
  8643                                  fmt_char_tab:
  8644 00000D64 235C74616200            	db `#\\tab\0`
  8645                                  fmt_char_newline:
  8646 00000D6A 235C6E65776C696E65-     	db `#\\newline\0`
  8646 00000D73 00                 
  8647                                  fmt_char_formfeed:
  8648 00000D74 235C7061676500          	db `#\\page\0`
  8649                                  fmt_char_return:
  8650 00000D7B 235C72657475726E00      	db `#\\return\0`
  8651                                  fmt_char_escape:
  8652 00000D84 235C65736300            	db `#\\esc\0`
  8653                                  fmt_char_space:
  8654 00000D8A 235C737061636500        	db `#\\space\0`
  8655                                  fmt_char_hex:
  8656 00000D92 235C782530325800        	db `#\\x%02X\0`
  8657                                  fmt_gensym:
  8658 00000D9A 47256C6400                      db `G%ld\0`
  8659                                  fmt_closure:
  8660 00000D9F 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
  8660 00000DA8 206174203078253038-
  8660 00000DB1 5820656E763D307825-
  8660 00000DBA 30385820636F64653D-
  8660 00000DC3 3078253038583E00   
  8661                                  fmt_lparen:
  8662 00000DCB 2800                    	db `(\0`
  8663                                  fmt_dotted_pair:
  8664 00000DCD 202E2000                	db ` . \0`
  8665                                  fmt_rparen:
  8666 00000DD1 2900                    	db `)\0`
  8667                                  fmt_space:
  8668 00000DD3 2000                    	db ` \0`
  8669                                  fmt_empty_vector:
  8670 00000DD5 23282900                	db `#()\0`
  8671                                  fmt_vector:
  8672 00000DD9 232800                  	db `#(\0`
  8673                                  fmt_real:
  8674 00000DDC 256600                  	db `%f\0`
  8675                                  fmt_fraction:
  8676 00000DDF 256C642F256C6400        	db `%ld/%ld\0`
  8677                                  fmt_zero:
  8678 00000DE7 3000                    	db `0\0`
  8679                                  fmt_int:
  8680 00000DE9 256C6400                	db `%ld\0`
  8681                                  fmt_unknown_scheme_object_error:
  8682 00000DED 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
  8682 00000DF6 6F723A20556E6B6E6F-
  8682 00000DFF 776E20536368656D65-
  8682 00000E08 2D6F626A6563742028-
  8682 00000E11 525454492030782530-
  8682 00000E1A 32582920           
  8683 00000E1E 617420616464726573-     	db `at address 0x%08X\n\n\0`
  8683 00000E27 73203078253038580A-
  8683 00000E30 0A00               
  8684                                  fmt_dquote:
  8685 00000E32 2200                    	db `\"\0`
  8686                                  fmt_string_char:
  8687 00000E34 256300                          db `%c\0`
  8688                                  fmt_string_char_7:
  8689 00000E37 5C6100                          db `\\a\0`
  8690                                  fmt_string_char_8:
  8691 00000E3A 5C6200                          db `\\b\0`
  8692                                  fmt_string_char_9:
  8693 00000E3D 5C7400                          db `\\t\0`
  8694                                  fmt_string_char_10:
  8695 00000E40 5C6E00                          db `\\n\0`
  8696                                  fmt_string_char_11:
  8697 00000E43 5C7600                          db `\\v\0`
  8698                                  fmt_string_char_12:
  8699 00000E46 5C6600                          db `\\f\0`
  8700                                  fmt_string_char_13:
  8701 00000E49 5C7200                          db `\\r\0`
  8702                                  fmt_string_char_34:
  8703 00000E4C 5C2200                          db `\\"\0`
  8704                                  fmt_string_char_92:
  8705 00000E4F 5C5C00                          db `\\\\\0`
  8706                                  fmt_string_char_hex:
  8707 00000E52 5C7825583B00                    db `\\x%X;\0`
  8708                                  
  8709                                  section .text
  8710                                  
  8711                                  print_sexpr:
  8712 0000637E C8000000                	enter 0, 0
  8713 00006382 8A07                    	mov al, byte [rdi]
  8714 00006384 3C00                    	cmp al, T_void
  8715 00006386 7465                    	je .Lvoid
  8716 00006388 3C01                    	cmp al, T_nil
  8717 0000638A 7470                    	je .Lnil
  8718 0000638C 3C09                    	cmp al, T_boolean_false
  8719 0000638E 747B                    	je .Lboolean_false
  8720 00006390 3C0A                    	cmp al, T_boolean_true
  8721 00006392 0F8482000000            	je .Lboolean_true
  8722 00006398 3C02                    	cmp al, T_char
  8723 0000639A 0F8489000000            	je .Lchar
  8724 000063A0 3C41                    	cmp al, T_interned_symbol
  8725 000063A2 0F84CB010000            	je .Linterned_symbol
  8726 000063A8 3C42                            cmp al, T_uninterned_symbol
  8727 000063AA 0F84EF010000                    je .Luninterned_symbol
  8728 000063B0 3C21                    	cmp al, T_pair
  8729 000063B2 0F84FA010000            	je .Lpair
  8730 000063B8 3C22                    	cmp al, T_vector
  8731 000063BA 0F84C3020000            	je .Lvector
  8732 000063C0 3C04                    	cmp al, T_closure
  8733 000063C2 0F8491010000            	je .Lclosure
  8734 000063C8 3C13                    	cmp al, T_real
  8735 000063CA 0F8454030000            	je .Lreal
  8736 000063D0 3C12                    	cmp al, T_fraction
  8737 000063D2 0F847A030000            	je .Lfraction
  8738 000063D8 3C11                    	cmp al, T_integer
  8739 000063DA 0F84B3030000            	je .Linteger
  8740 000063E0 3C03                    	cmp al, T_string
  8741 000063E2 0F84BE030000            	je .Lstring
  8742                                  
  8743 000063E8 E9F6040000              	jmp .Lunknown_sexpr_type
  8744                                  
  8745                                  .Lvoid:
  8746 000063ED 48BF-                   	mov rdi, fmt_void
  8746 000063EF [2D0D000000000000] 
  8747 000063F7 E91A050000              	jmp .Lemit
  8748                                  
  8749                                  .Lnil:
  8750 000063FC 48BF-                   	mov rdi, fmt_nil
  8750 000063FE [350D000000000000] 
  8751 00006406 E90B050000              	jmp .Lemit
  8752                                  
  8753                                  .Lboolean_false:
  8754 0000640B 48BF-                   	mov rdi, fmt_boolean_false
  8754 0000640D [380D000000000000] 
  8755 00006415 E9FC040000              	jmp .Lemit
  8756                                  
  8757                                  .Lboolean_true:
  8758 0000641A 48BF-                   	mov rdi, fmt_boolean_true
  8758 0000641C [3B0D000000000000] 
  8759 00006424 E9ED040000              	jmp .Lemit
  8760                                  
  8761                                  .Lchar:
  8762 00006429 8A4701                  	mov al, byte [rdi + 1]
  8763 0000642C 3C20                    	cmp al, ' '
  8764 0000642E 7E28                    	jle .Lchar_whitespace
  8765 00006430 3C5C                    	cmp al, 92 		; backslash
  8766 00006432 0F847C000000            	je .Lchar_backslash
  8767 00006438 3C22                    	cmp al, '"'
  8768 0000643A 0F8483000000            	je .Lchar_dquote
  8769 00006440 4825FF000000            	and rax, 255
  8770 00006446 48BF-                   	mov rdi, fmt_char_simple
  8770 00006448 [460D000000000000] 
  8771 00006450 4889C6                  	mov rsi, rax
  8772 00006453 E9BE040000              	jmp .Lemit
  8773                                  
  8774                                  .Lchar_whitespace:
  8775 00006458 3C00                    	cmp al, 0
  8776 0000645A 7476                    	je .Lchar_null
  8777 0000645C 3C07                    	cmp al, 7
  8778 0000645E 0F847D000000            	je .Lchar_bell
  8779 00006464 3C08                    	cmp al, 8
  8780 00006466 0F8484000000            	je .Lchar_backspace
  8781 0000646C 3C09                    	cmp al, 9
  8782 0000646E 0F848B000000            	je .Lchar_tab
  8783 00006474 3C0A                    	cmp al, 10
  8784 00006476 0F8492000000            	je .Lchar_newline
  8785 0000647C 3C0C                    	cmp al, 12
  8786 0000647E 0F8499000000            	je .Lchar_formfeed
  8787 00006484 3C0D                    	cmp al, 13
  8788 00006486 0F84A0000000            	je .Lchar_return
  8789 0000648C 3C1B                    	cmp al, 27
  8790 0000648E 0F84A7000000            	je .Lchar_escape
  8791 00006494 4825FF000000            	and rax, 255
  8792 0000649A 3C20                    	cmp al, ' '
  8793 0000649C 0F84A8000000            	je .Lchar_space
  8794 000064A2 48BF-                   	mov rdi, fmt_char_hex
  8794 000064A4 [920D000000000000] 
  8795 000064AC 4889C6                  	mov rsi, rax
  8796 000064AF E962040000              	jmp .Lemit	
  8797                                  
  8798                                  .Lchar_backslash:
  8799 000064B4 48BF-                   	mov rdi, fmt_char_backslash
  8799 000064B6 [3E0D000000000000] 
  8800 000064BE E953040000              	jmp .Lemit
  8801                                  
  8802                                  .Lchar_dquote:
  8803 000064C3 48BF-                   	mov rdi, fmt_char_dquote
  8803 000064C5 [420D000000000000] 
  8804 000064CD E944040000              	jmp .Lemit
  8805                                  
  8806                                  .Lchar_null:
  8807 000064D2 48BF-                   	mov rdi, fmt_char_null
  8807 000064D4 [4B0D000000000000] 
  8808 000064DC E935040000              	jmp .Lemit
  8809                                  
  8810                                  .Lchar_bell:
  8811 000064E1 48BF-                   	mov rdi, fmt_char_bell
  8811 000064E3 [510D000000000000] 
  8812 000064EB E926040000              	jmp .Lemit
  8813                                  
  8814                                  .Lchar_backspace:
  8815 000064F0 48BF-                   	mov rdi, fmt_char_backspace
  8815 000064F2 [580D000000000000] 
  8816 000064FA E917040000              	jmp .Lemit
  8817                                  
  8818                                  .Lchar_tab:
  8819 000064FF 48BF-                   	mov rdi, fmt_char_tab
  8819 00006501 [640D000000000000] 
  8820 00006509 E908040000              	jmp .Lemit
  8821                                  
  8822                                  .Lchar_newline:
  8823 0000650E 48BF-                   	mov rdi, fmt_char_newline
  8823 00006510 [6A0D000000000000] 
  8824 00006518 E9F9030000              	jmp .Lemit
  8825                                  
  8826                                  .Lchar_formfeed:
  8827 0000651D 48BF-                   	mov rdi, fmt_char_formfeed
  8827 0000651F [740D000000000000] 
  8828 00006527 E9EA030000              	jmp .Lemit
  8829                                  
  8830                                  .Lchar_return:
  8831 0000652C 48BF-                   	mov rdi, fmt_char_return
  8831 0000652E [7B0D000000000000] 
  8832 00006536 E9DB030000              	jmp .Lemit
  8833                                  
  8834                                  .Lchar_escape:
  8835 0000653B 48BF-                   	mov rdi, fmt_char_escape
  8835 0000653D [840D000000000000] 
  8836 00006545 E9CC030000              	jmp .Lemit
  8837                                  
  8838                                  .Lchar_space:
  8839 0000654A 48BF-                   	mov rdi, fmt_char_space
  8839 0000654C [8A0D000000000000] 
  8840 00006554 E9BD030000              	jmp .Lemit
  8841                                  
  8842                                  .Lclosure:
  8843 00006559 4889FE                  	mov rsi, qword rdi
  8844 0000655C 48BF-                   	mov rdi, fmt_closure
  8844 0000655E [9F0D000000000000] 
  8845 00006566 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
  8846 0000656A 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
  8847 0000656E E9A3030000              	jmp .Lemit
  8848                                  
  8849                                  .Linterned_symbol:
  8850 00006573 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
  8851 00006577 BE01000000              	mov rsi, 1		 ; size = 1 byte
  8852 0000657C 488B5701                	mov rdx, qword [rdi + 1] ; length
  8853 00006580 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
  8854 00006584 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
  8855                                  	ENTER
    44 0000658C C8000000            <1>  enter 0, 0
    45 00006590 4883E4F0            <1>  and rsp, ~15
  8856 00006594 E8(00000000)            	call fwrite
  8857                                  	LEAVE
    49 00006599 C9                  <1>  leave
  8858 0000659A E98C030000              	jmp .Lend
  8859                                  
  8860                                  .Luninterned_symbol:
  8861 0000659F 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
  8862 000065A3 48BF-                           mov rdi, fmt_gensym
  8862 000065A5 [9A0D000000000000] 
  8863 000065AD E964030000                      jmp .Lemit
  8864                                  	
  8865                                  .Lpair:
  8866 000065B2 57                      	push rdi
  8867 000065B3 48BF-                   	mov rdi, fmt_lparen
  8867 000065B5 [CB0D000000000000] 
  8868 000065BD B800000000              	mov rax, 0
  8869                                          ENTER
    44 000065C2 C8000000            <1>  enter 0, 0
    45 000065C6 4883E4F0            <1>  and rsp, ~15
  8870 000065CA E8(00000000)            	call printf
  8871                                          LEAVE
    49 000065CF C9                  <1>  leave
  8872 000065D0 488B3C24                	mov rdi, qword [rsp] 	; pair
  8873 000065D4 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  8874 000065D8 E8A1FDFFFF              	call print_sexpr
  8875 000065DD 5F                      	pop rdi 		; pair
  8876 000065DE 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  8877                                  .Lcdr:
  8878 000065E2 8A07                    	mov al, byte [rdi]
  8879 000065E4 3C01                    	cmp al, T_nil
  8880 000065E6 7447                    	je .Lcdr_nil
  8881 000065E8 3C21                    	cmp al, T_pair
  8882 000065EA 7462                    	je .Lcdr_pair
  8883 000065EC 57                      	push rdi
  8884 000065ED 48BF-                   	mov rdi, fmt_dotted_pair
  8884 000065EF [CD0D000000000000] 
  8885 000065F7 B800000000              	mov rax, 0
  8886                                          ENTER
    44 000065FC C8000000            <1>  enter 0, 0
    45 00006600 4883E4F0            <1>  and rsp, ~15
  8887 00006604 E8(00000000)            	call printf
  8888                                          LEAVE
    49 00006609 C9                  <1>  leave
  8889 0000660A 5F                      	pop rdi
  8890 0000660B E86EFDFFFF              	call print_sexpr
  8891 00006610 48BF-                   	mov rdi, fmt_rparen
  8891 00006612 [D10D000000000000] 
  8892 0000661A B800000000              	mov rax, 0
  8893                                          ENTER
    44 0000661F C8000000            <1>  enter 0, 0
    45 00006623 4883E4F0            <1>  and rsp, ~15
  8894 00006627 E8(00000000)            	call printf
  8895                                          LEAVE
    49 0000662C C9                  <1>  leave
  8896 0000662D C9                      	leave
  8897 0000662E C3                      	ret
  8898                                  
  8899                                  .Lcdr_nil:
  8900 0000662F 48BF-                   	mov rdi, fmt_rparen
  8900 00006631 [D10D000000000000] 
  8901 00006639 B800000000              	mov rax, 0
  8902                                          ENTER
    44 0000663E C8000000            <1>  enter 0, 0
    45 00006642 4883E4F0            <1>  and rsp, ~15
  8903 00006646 E8(00000000)            	call printf
  8904                                          LEAVE
    49 0000664B C9                  <1>  leave
  8905 0000664C C9                      	leave
  8906 0000664D C3                      	ret
  8907                                  
  8908                                  .Lcdr_pair:
  8909 0000664E 57                      	push rdi
  8910 0000664F 48BF-                   	mov rdi, fmt_space
  8910 00006651 [D30D000000000000] 
  8911 00006659 B800000000              	mov rax, 0
  8912                                          ENTER
    44 0000665E C8000000            <1>  enter 0, 0
    45 00006662 4883E4F0            <1>  and rsp, ~15
  8913 00006666 E8(00000000)            	call printf
  8914                                          LEAVE
    49 0000666B C9                  <1>  leave
  8915 0000666C 488B3C24                	mov rdi, qword [rsp]
  8916 00006670 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  8917 00006674 E805FDFFFF              	call print_sexpr
  8918 00006679 5F                      	pop rdi
  8919 0000667A 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  8920 0000667E E95FFFFFFF              	jmp .Lcdr
  8921                                  
  8922                                  .Lvector:
  8923 00006683 488B4701                	mov rax, qword [rdi + 1] ; length
  8924 00006687 4883F800                	cmp rax, 0
  8925 0000668B 0F8484000000            	je .Lvector_empty
  8926 00006691 57                      	push rdi
  8927 00006692 48BF-                   	mov rdi, fmt_vector
  8927 00006694 [D90D000000000000] 
  8928 0000669C B800000000              	mov rax, 0
  8929                                          ENTER
    44 000066A1 C8000000            <1>  enter 0, 0
    45 000066A5 4883E4F0            <1>  and rsp, ~15
  8930 000066A9 E8(00000000)            	call printf
  8931                                          LEAVE
    49 000066AE C9                  <1>  leave
  8932 000066AF 488B3C24                	mov rdi, qword [rsp]
  8933 000066B3 FF7701                  	push qword [rdi + 1]
  8934 000066B6 6A01                    	push 1
  8935 000066B8 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  8936 000066BC E8BDFCFFFF              	call print_sexpr
  8937                                  .Lvector_loop:
  8938                                  	; [rsp] index
  8939                                  	; [rsp + 8*1] limit
  8940                                  	; [rsp + 8*2] vector
  8941 000066C1 488B0424                	mov rax, qword [rsp]
  8942 000066C5 483B442408              	cmp rax, qword [rsp + 8*1]
  8943 000066CA 7436                    	je .Lvector_end
  8944 000066CC 48BF-                   	mov rdi, fmt_space
  8944 000066CE [D30D000000000000] 
  8945 000066D6 B800000000              	mov rax, 0
  8946                                          ENTER
    44 000066DB C8000000            <1>  enter 0, 0
    45 000066DF 4883E4F0            <1>  and rsp, ~15
  8947 000066E3 E8(00000000)            	call printf
  8948                                          LEAVE
    49 000066E8 C9                  <1>  leave
  8949 000066E9 488B0424                	mov rax, qword [rsp]
  8950 000066ED 488B5C2410              	mov rbx, qword [rsp + 8*2]
  8951 000066F2 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  8952 000066F7 E882FCFFFF              	call print_sexpr
  8953 000066FC 48FF0424                	inc qword [rsp]
  8954 00006700 EBBF                    	jmp .Lvector_loop
  8955                                  
  8956                                  .Lvector_end:
  8957 00006702 4883C418                	add rsp, 8*3
  8958 00006706 48BF-                   	mov rdi, fmt_rparen
  8958 00006708 [D10D000000000000] 
  8959 00006710 E901020000              	jmp .Lemit	
  8960                                  
  8961                                  .Lvector_empty:
  8962 00006715 48BF-                   	mov rdi, fmt_empty_vector
  8962 00006717 [D50D000000000000] 
  8963 0000671F E9F2010000              	jmp .Lemit
  8964                                  
  8965                                  .Lreal:
  8966 00006724 FF7701                  	push qword [rdi + 1]
  8967 00006727 F20F100424              	movsd xmm0, qword [rsp]
  8968 0000672C 4883C408                	add rsp, 8*1
  8969 00006730 48BF-                   	mov rdi, fmt_real
  8969 00006732 [DC0D000000000000] 
  8970 0000673A B801000000              	mov rax, 1
  8971                                  	ENTER
    44 0000673F C8000000            <1>  enter 0, 0
    45 00006743 4883E4F0            <1>  and rsp, ~15
  8972 00006747 E8(00000000)            	call printf
  8973                                  	LEAVE
    49 0000674C C9                  <1>  leave
  8974 0000674D E9D9010000              	jmp .Lend
  8975                                  
  8976                                  .Lfraction:
  8977 00006752 488B7701                	mov rsi, qword [rdi + 1]
  8978 00006756 488B5709                	mov rdx, qword [rdi + 1 + 8]
  8979 0000675A 4883FE00                	cmp rsi, 0
  8980 0000675E 7415                    	je .Lrat_zero
  8981 00006760 4883FA01                	cmp rdx, 1
  8982 00006764 741E                    	je .Lrat_int
  8983 00006766 48BF-                   	mov rdi, fmt_fraction
  8983 00006768 [DF0D000000000000] 
  8984 00006770 E9A1010000              	jmp .Lemit
  8985                                  
  8986                                  .Lrat_zero:
  8987 00006775 48BF-                   	mov rdi, fmt_zero
  8987 00006777 [E70D000000000000] 
  8988 0000677F E992010000              	jmp .Lemit
  8989                                  
  8990                                  .Lrat_int:
  8991 00006784 48BF-                   	mov rdi, fmt_int
  8991 00006786 [E90D000000000000] 
  8992 0000678E E983010000              	jmp .Lemit
  8993                                  
  8994                                  .Linteger:
  8995 00006793 488B7701                	mov rsi, qword [rdi + 1]
  8996 00006797 48BF-                   	mov rdi, fmt_int
  8996 00006799 [E90D000000000000] 
  8997 000067A1 E970010000              	jmp .Lemit
  8998                                  
  8999                                  .Lstring:
  9000 000067A6 488D4709                	lea rax, [rdi + 1 + 8]
  9001 000067AA 50                      	push rax
  9002 000067AB FF7701                  	push qword [rdi + 1]
  9003 000067AE 48BF-                   	mov rdi, fmt_dquote
  9003 000067B0 [320E000000000000] 
  9004 000067B8 B800000000              	mov rax, 0
  9005                                  	ENTER
    44 000067BD C8000000            <1>  enter 0, 0
    45 000067C1 4883E4F0            <1>  and rsp, ~15
  9006 000067C5 E8(00000000)            	call printf
  9007                                  	LEAVE
    49 000067CA C9                  <1>  leave
  9008                                  .Lstring_loop:
  9009                                  	; qword [rsp]: limit
  9010                                  	; qword [rsp + 8*1]: char *
  9011 000067CB 48833C2400              	cmp qword [rsp], 0
  9012 000067D0 0F84FD000000            	je .Lstring_end
  9013 000067D6 488B442408              	mov rax, qword [rsp + 8*1]
  9014 000067DB 8A00                    	mov al, byte [rax]
  9015 000067DD 4825FF000000            	and rax, 255
  9016 000067E3 3C07                    	cmp al, 7
  9017 000067E5 7468                            je .Lstring_char_7
  9018 000067E7 3C08                            cmp al, 8
  9019 000067E9 7470                            je .Lstring_char_8
  9020 000067EB 3C09                            cmp al, 9
  9021 000067ED 7478                            je .Lstring_char_9
  9022 000067EF 3C0A                            cmp al, 10
  9023 000067F1 0F847C000000                    je .Lstring_char_10
  9024 000067F7 3C0B                            cmp al, 11
  9025 000067F9 0F8480000000                    je .Lstring_char_11
  9026 000067FF 3C0C                            cmp al, 12
  9027 00006801 0F8484000000                    je .Lstring_char_12
  9028 00006807 3C0D                            cmp al, 13
  9029 00006809 0F8488000000                    je .Lstring_char_13
  9030 0000680F 3C22                            cmp al, 34
  9031 00006811 0F848C000000                    je .Lstring_char_34
  9032 00006817 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  9034 00006819 3C20                            cmp al, ' '
  9035 0000681B 0F8CA0000000                    jl .Lstring_char_hex
  9036 00006821 48BF-                           mov rdi, fmt_string_char
  9036 00006823 [340E000000000000] 
  9037 0000682B 4889C6                          mov rsi, rax
  9038                                  .Lstring_char_emit:
  9039 0000682E B800000000                      mov rax, 0
  9040                                          ENTER
    44 00006833 C8000000            <1>  enter 0, 0
    45 00006837 4883E4F0            <1>  and rsp, ~15
  9041 0000683B E8(00000000)                    call printf
  9042                                          LEAVE
    49 00006840 C9                  <1>  leave
  9043 00006841 48FF0C24                        dec qword [rsp]
  9044 00006845 48FF442408                      inc qword [rsp + 8*1]
  9045 0000684A E97CFFFFFF                      jmp .Lstring_loop
  9046                                  
  9047                                  .Lstring_char_7:
  9048 0000684F 48BF-                           mov rdi, fmt_string_char_7
  9048 00006851 [370E000000000000] 
  9049 00006859 EBD3                            jmp .Lstring_char_emit
  9050                                  
  9051                                  .Lstring_char_8:
  9052 0000685B 48BF-                           mov rdi, fmt_string_char_8
  9052 0000685D [3A0E000000000000] 
  9053 00006865 EBC7                            jmp .Lstring_char_emit
  9054                                          
  9055                                  .Lstring_char_9:
  9056 00006867 48BF-                           mov rdi, fmt_string_char_9
  9056 00006869 [3D0E000000000000] 
  9057 00006871 EBBB                            jmp .Lstring_char_emit
  9058                                  
  9059                                  .Lstring_char_10:
  9060 00006873 48BF-                           mov rdi, fmt_string_char_10
  9060 00006875 [400E000000000000] 
  9061 0000687D EBAF                            jmp .Lstring_char_emit
  9062                                  
  9063                                  .Lstring_char_11:
  9064 0000687F 48BF-                           mov rdi, fmt_string_char_11
  9064 00006881 [430E000000000000] 
  9065 00006889 EBA3                            jmp .Lstring_char_emit
  9066                                  
  9067                                  .Lstring_char_12:
  9068 0000688B 48BF-                           mov rdi, fmt_string_char_12
  9068 0000688D [460E000000000000] 
  9069 00006895 EB97                            jmp .Lstring_char_emit
  9070                                  
  9071                                  .Lstring_char_13:
  9072 00006897 48BF-                           mov rdi, fmt_string_char_13
  9072 00006899 [490E000000000000] 
  9073 000068A1 EB8B                            jmp .Lstring_char_emit
  9074                                  
  9075                                  .Lstring_char_34:
  9076 000068A3 48BF-                           mov rdi, fmt_string_char_34
  9076 000068A5 [4C0E000000000000] 
  9077 000068AD E97CFFFFFF                      jmp .Lstring_char_emit
  9078                                  
  9079                                  .Lstring_char_92:
  9080 000068B2 48BF-                           mov rdi, fmt_string_char_92
  9080 000068B4 [4F0E000000000000] 
  9081 000068BC E96DFFFFFF                      jmp .Lstring_char_emit
  9082                                  
  9083                                  .Lstring_char_hex:
  9084 000068C1 48BF-                           mov rdi, fmt_string_char_hex
  9084 000068C3 [520E000000000000] 
  9085 000068CB 4889C6                          mov rsi, rax
  9086 000068CE E95BFFFFFF                      jmp .Lstring_char_emit        
  9087                                  
  9088                                  .Lstring_end:
  9089 000068D3 4883C410                	add rsp, 8 * 2
  9090 000068D7 48BF-                   	mov rdi, fmt_dquote
  9090 000068D9 [320E000000000000] 
  9091 000068E1 EB33                    	jmp .Lemit
  9092                                  
  9093                                  .Lunknown_sexpr_type:
  9094 000068E3 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
  9094 000068E5 [ED0D000000000000] 
  9095 000068ED 4825FF000000            	and rax, 255
  9096 000068F3 4889C2                  	mov rdx, rax
  9097 000068F6 4889F9                  	mov rcx, rdi
  9098 000068F9 488B3C25[00000000]      	mov rdi, qword [stderr]
  9099 00006901 B800000000              	mov rax, 0
  9100                                          ENTER
    44 00006906 C8000000            <1>  enter 0, 0
    45 0000690A 4883E4F0            <1>  and rsp, ~15
  9101 0000690E E8(00000000)            	call fprintf
  9102                                          LEAVE
    49 00006913 C9                  <1>  leave
  9103 00006914 C9                              leave
  9104 00006915 C3                              ret
  9105                                  
  9106                                  .Lemit:
  9107 00006916 B800000000              	mov rax, 0
  9108                                          ENTER
    44 0000691B C8000000            <1>  enter 0, 0
    45 0000691F 4883E4F0            <1>  and rsp, ~15
  9109 00006923 E8(00000000)            	call printf
  9110                                          LEAVE
    49 00006928 C9                  <1>  leave
  9111 00006929 EB00                    	jmp .Lend
  9112                                  
  9113                                  .Lend:
  9114                                  	LEAVE
    49 0000692B C9                  <1>  leave
  9115 0000692C C3                      	ret
  9116                                  
  9117                                  ;;; rdi: address of free variable
  9118                                  ;;; rsi: address of code-pointer
  9119                                  bind_primitive:
  9120 0000692D C8000000                        enter 0, 0
  9121 00006931 57                              push rdi
  9122 00006932 BF11000000                      mov rdi, (1 + 8 + 8)
  9123 00006937 E8C1F7FFFF                      call malloc
  9124 0000693C 5F                              pop rdi
  9125 0000693D C60004                          mov byte [rax], T_closure
  9126 00006940 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  9127 00006948 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  9128 0000694C 488907                          mov qword [rdi], rax
  9129 0000694F 48B8-                           mov rax, sob_void
  9129 00006951 [0000000000000000] 
  9130 00006959 C9                              leave
  9131 0000695A C3                              ret
  9132                                  
  9133                                  L_code_ptr_ash:
  9134 0000695B C8000000                        enter 0, 0
  9135 0000695F 48837D1802                      cmp COUNT, 2
  9136 00006964 0F85A4140000                    jne L_error_arg_count_2
  9137 0000696A 488B7D20                        mov rdi, PARAM(0)
  9138                                          assert_integer(rdi)
    53 0000696E 803F11              <1>  cmp byte [%1], %2
    54 00006971 0F8536150000        <1>  jne L_error_incorrect_type
  9139 00006977 488B4D28                        mov rcx, PARAM(1)
  9140                                          assert_integer(rcx)
    53 0000697B 803911              <1>  cmp byte [%1], %2
    54 0000697E 0F8529150000        <1>  jne L_error_incorrect_type
  9141 00006984 488B7F01                        mov rdi, qword [rdi + 1]
  9142 00006988 488B4901                        mov rcx, qword [rcx + 1]
  9143 0000698C 4883F900                        cmp rcx, 0
  9144 00006990 7C0F                            jl .L_negative
  9145                                  .L_loop_positive:
  9146 00006992 4883F900                        cmp rcx, 0
  9147 00006996 741B                            je .L_exit
  9148 00006998 48D3E7                          sal rdi, cl
  9149 0000699B 48C1E908                        shr rcx, 8
  9150 0000699F EBF1                            jmp .L_loop_positive
  9151                                  .L_negative:
  9152 000069A1 48F7D9                          neg rcx
  9153                                  .L_loop_negative:
  9154 000069A4 4883F900                        cmp rcx, 0
  9155 000069A8 7409                            je .L_exit
  9156 000069AA 48D3FF                          sar rdi, cl
  9157 000069AD 48C1E908                        shr rcx, 8
  9158 000069B1 EBF1                            jmp .L_loop_negative
  9159                                  .L_exit:
  9160 000069B3 E870130000                      call make_integer
  9161 000069B8 C9                              leave
  9162 000069B9 C22000                          ret AND_KILL_FRAME(2)
  9163                                  
  9164                                  L_code_ptr_logand:
  9165 000069BC C8000000                        enter 0, 0
  9166 000069C0 48837D1802                      cmp COUNT, 2
  9167 000069C5 0F8543140000                    jne L_error_arg_count_2
  9168 000069CB 4C8B4520                        mov r8, PARAM(0)
  9169                                          assert_integer(r8)
    53 000069CF 41803811            <1>  cmp byte [%1], %2
    54 000069D3 0F85D4140000        <1>  jne L_error_incorrect_type
  9170 000069D9 4C8B4D28                        mov r9, PARAM(1)
  9171                                          assert_integer(r9)
    53 000069DD 41803911            <1>  cmp byte [%1], %2
    54 000069E1 0F85C6140000        <1>  jne L_error_incorrect_type
  9172 000069E7 498B7801                        mov rdi, qword [r8 + 1]
  9173 000069EB 49237901                        and rdi, qword [r9 + 1]
  9174 000069EF E834130000                      call make_integer
  9175 000069F4 C9                              leave
  9176 000069F5 C22000                          ret AND_KILL_FRAME(2)
  9177                                  
  9178                                  L_code_ptr_logor:
  9179 000069F8 C8000000                        enter 0, 0
  9180 000069FC 48837D1802                      cmp COUNT, 2
  9181 00006A01 0F8507140000                    jne L_error_arg_count_2
  9182 00006A07 4C8B4520                        mov r8, PARAM(0)
  9183                                          assert_integer(r8)
    53 00006A0B 41803811            <1>  cmp byte [%1], %2
    54 00006A0F 0F8598140000        <1>  jne L_error_incorrect_type
  9184 00006A15 4C8B4D28                        mov r9, PARAM(1)
  9185                                          assert_integer(r9)
    53 00006A19 41803911            <1>  cmp byte [%1], %2
    54 00006A1D 0F858A140000        <1>  jne L_error_incorrect_type
  9186 00006A23 498B7801                        mov rdi, qword [r8 + 1]
  9187 00006A27 490B7901                        or rdi, qword [r9 + 1]
  9188 00006A2B E8F8120000                      call make_integer
  9189 00006A30 C9                              leave
  9190 00006A31 C22000                          ret AND_KILL_FRAME(2)
  9191                                  
  9192                                  L_code_ptr_logxor:
  9193 00006A34 C8000000                        enter 0, 0
  9194 00006A38 48837D1802                      cmp COUNT, 2
  9195 00006A3D 0F85CB130000                    jne L_error_arg_count_2
  9196 00006A43 4C8B4520                        mov r8, PARAM(0)
  9197                                          assert_integer(r8)
    53 00006A47 41803811            <1>  cmp byte [%1], %2
    54 00006A4B 0F855C140000        <1>  jne L_error_incorrect_type
  9198 00006A51 4C8B4D28                        mov r9, PARAM(1)
  9199                                          assert_integer(r9)
    53 00006A55 41803911            <1>  cmp byte [%1], %2
    54 00006A59 0F854E140000        <1>  jne L_error_incorrect_type
  9200 00006A5F 498B7801                        mov rdi, qword [r8 + 1]
  9201 00006A63 49337901                        xor rdi, qword [r9 + 1]
  9202 00006A67 E8BC120000                      call make_integer
  9203                                          LEAVE
    49 00006A6C C9                  <1>  leave
  9204 00006A6D C22000                          ret AND_KILL_FRAME(2)
  9205                                  
  9206                                  L_code_ptr_lognot:
  9207 00006A70 C8000000                        enter 0, 0
  9208 00006A74 48837D1801                      cmp COUNT, 1
  9209 00006A79 0F855A130000                    jne L_error_arg_count_1
  9210 00006A7F 4C8B4520                        mov r8, PARAM(0)
  9211                                          assert_integer(r8)
    53 00006A83 41803811            <1>  cmp byte [%1], %2
    54 00006A87 0F8520140000        <1>  jne L_error_incorrect_type
  9212 00006A8D 498B7801                        mov rdi, qword [r8 + 1]
  9213 00006A91 48F7D7                          not rdi
  9214 00006A94 E88F120000                      call make_integer
  9215 00006A99 C9                              leave
  9216 00006A9A C21800                          ret AND_KILL_FRAME(1)
  9217                                  
  9218                                  L_code_ptr_bin_apply:
  9219 00006A9D C8000000                        enter 0, 0
  9220                                          ;assuming we have 2 params - f and list to apply f on it
  9221 00006AA1 48837D1802                      cmp COUNT, 2
  9222 00006AA6 0F8C62130000                    jl L_error_arg_count_2    ; f and list
  9223 00006AAC 4C8B4500                        mov r8, qword[rbp]      ;backup rbp  
  9224 00006AB0 4C8B4D08                        mov r9, qword[rbp +8]   ;backup ret addr
  9225 00006AB4 4C8B7D28                        mov r15, PARAM(1)         ;get list
  9226                                          assert_pair(r15)
    53 00006AB8 41803F21            <1>  cmp byte [%1], %2
    54 00006ABC 0F85EB130000        <1>  jne L_error_incorrect_type
  9227                                          
  9228 00006AC2 488B4520                        mov rax, PARAM(0)         ;get f
  9229                                  
  9230                                          assert_closure(rax)        ; Count elements in the list
    53 00006AC6 803804              <1>  cmp byte [%1], %2
    54 00006AC9 0F85DE130000        <1>  jne L_error_incorrect_type
  9231 00006ACF 41BA00000000                    mov r10, 0                ;counter
  9232 00006AD5 4D89FB                          mov r11, r15 ; Is the list pointer
  9233                                         
  9234                                          
  9235                                  .count_loop:
  9236 00006AD8 49813B[01000000]                cmp qword[r11], sob_nil ;checking if we done, it's a proper list
  9237 00006ADF 7409                            je .write_over_frame
  9238 00006AE1 49FFC2                          inc r10                   ; Increment list element count
  9239 00006AE4 4D8B5B09                        mov r11, SOB_PAIR_CDR(r11) ;getting the next element in s if error might be here
  9240 00006AE8 EBEE                            jmp .count_loop
  9241                                  
  9242                                          ;r10 list length
  9243                                  
  9244                                  .write_over_frame:
  9245 00006AEA 4D89D3                          mov r11, r10 ;
  9246 00006AED 4983EB02                        sub r11, 2 ;how much to increase rbp for list argumetns
  9247 00006AF1 49C1E303                        shl r11, 3 ;multiply by 8
  9248 00006AF5 4C29DD                          sub rbp, r11 ;making space for list arguemtns
  9249                                  
  9250                                  .mov_env_rbp:
  9251 00006AF8 4C894500                        mov qword[rbp], r8 ;restore old rbp ;now rbp points to the right position
  9252 00006AFC 4C894D08                        mov qword[rbp + 8], r9 ;restore old ret addr
  9253 00006B00 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  9254 00006B04 48895D10                        mov qword[rbp + 8*2], rbx ;save the env in the new frame
  9255 00006B08 4C895518                        mov qword[rbp+ 8*3], r10 ;save the number of params in the new frame
  9256 00006B0C 41BB00000000                    mov r11, 0;
  9257                                          ;r10 is the originl list length
  9258                                  .copy_list_arguments:
  9259 00006B12 4D39D3                          cmp r11, r10 ;reached to the end of the list
  9260 00006B15 7412                            je .done_copy_list_arguments;
  9261 00006B17 4D8B6701                        mov r12, SOB_PAIR_CAR(r15) ;get the car of the list
  9262 00006B1B 4E8964DD20                      mov qword PARAM(r11), r12 ;copy the car to the new frame
  9263 00006B20 4D8B7F09                        mov r15, SOB_PAIR_CDR(r15) ;get the cdr of the list
  9264 00006B24 49FFC3                          inc r11
  9265 00006B27 EBE9                            jmp .copy_list_arguments
  9266                                          ;;;rsp now points to the old ret?
  9267                                          ;;;rbp now points to the older rbp?
  9268                                  .done_copy_list_arguments:
  9269 00006B29 488D6508                        lea rsp, [rbp + 8*1]
  9270 00006B2D C9                              leave
  9271 00006B2E FF6009                          jmp SOB_CLOSURE_CODE(rax) ;jump to the code of the closure
  9272                                  
  9273                                  
  9274                                  L_code_ptr_is_null:
  9275 00006B31 C8000000                        enter 0, 0
  9276 00006B35 48837D1801                      cmp COUNT, 1
  9277 00006B3A 0F8599120000                    jne L_error_arg_count_1
  9278 00006B40 488B4520                        mov rax, PARAM(0)
  9279 00006B44 803801                          cmp byte [rax], T_nil
  9280 00006B47 750C                            jne .L_false
  9281 00006B49 48B8-                           mov rax, sob_boolean_true
  9281 00006B4B [0300000000000000] 
  9282 00006B53 EB0A                            jmp .L_end
  9283                                  .L_false:
  9284 00006B55 48B8-                           mov rax, sob_boolean_false
  9284 00006B57 [0200000000000000] 
  9285                                  .L_end:
  9286 00006B5F C9                              leave
  9287 00006B60 C21800                          ret AND_KILL_FRAME(1)
  9288                                  
  9289                                  L_code_ptr_is_pair:
  9290 00006B63 C8000000                        enter 0, 0
  9291 00006B67 48837D1801                      cmp COUNT, 1
  9292 00006B6C 0F8567120000                    jne L_error_arg_count_1
  9293 00006B72 488B4520                        mov rax, PARAM(0)
  9294 00006B76 803821                          cmp byte [rax], T_pair
  9295 00006B79 750C                            jne .L_false
  9296 00006B7B 48B8-                           mov rax, sob_boolean_true
  9296 00006B7D [0300000000000000] 
  9297 00006B85 EB0A                            jmp .L_end
  9298                                  .L_false:
  9299 00006B87 48B8-                           mov rax, sob_boolean_false
  9299 00006B89 [0200000000000000] 
  9300                                  .L_end:
  9301 00006B91 C9                              leave
  9302 00006B92 C21800                          ret AND_KILL_FRAME(1)
  9303                                          
  9304                                  L_code_ptr_is_void:
  9305 00006B95 C8000000                        enter 0, 0
  9306 00006B99 48837D1801                      cmp COUNT, 1
  9307 00006B9E 0F8535120000                    jne L_error_arg_count_1
  9308 00006BA4 488B4520                        mov rax, PARAM(0)
  9309 00006BA8 803800                          cmp byte [rax], T_void
  9310 00006BAB 750C                            jne .L_false
  9311 00006BAD 48B8-                           mov rax, sob_boolean_true
  9311 00006BAF [0300000000000000] 
  9312 00006BB7 EB0A                            jmp .L_end
  9313                                  .L_false:
  9314 00006BB9 48B8-                           mov rax, sob_boolean_false
  9314 00006BBB [0200000000000000] 
  9315                                  .L_end:
  9316 00006BC3 C9                              leave
  9317 00006BC4 C21800                          ret AND_KILL_FRAME(1)
  9318                                  
  9319                                  L_code_ptr_is_char:
  9320 00006BC7 C8000000                        enter 0, 0
  9321 00006BCB 48837D1801                      cmp COUNT, 1
  9322 00006BD0 0F8503120000                    jne L_error_arg_count_1
  9323 00006BD6 488B4520                        mov rax, PARAM(0)
  9324 00006BDA 803802                          cmp byte [rax], T_char
  9325 00006BDD 750C                            jne .L_false
  9326 00006BDF 48B8-                           mov rax, sob_boolean_true
  9326 00006BE1 [0300000000000000] 
  9327 00006BE9 EB0A                            jmp .L_end
  9328                                  .L_false:
  9329 00006BEB 48B8-                           mov rax, sob_boolean_false
  9329 00006BED [0200000000000000] 
  9330                                  .L_end:
  9331 00006BF5 C9                              leave
  9332 00006BF6 C21800                          ret AND_KILL_FRAME(1)
  9333                                  
  9334                                  L_code_ptr_is_string:
  9335 00006BF9 C8000000                        enter 0, 0
  9336 00006BFD 48837D1801                      cmp COUNT, 1
  9337 00006C02 0F85D1110000                    jne L_error_arg_count_1
  9338 00006C08 488B4520                        mov rax, PARAM(0)
  9339 00006C0C 803803                          cmp byte [rax], T_string
  9340 00006C0F 750C                            jne .L_false
  9341 00006C11 48B8-                           mov rax, sob_boolean_true
  9341 00006C13 [0300000000000000] 
  9342 00006C1B EB0A                            jmp .L_end
  9343                                  .L_false:
  9344 00006C1D 48B8-                           mov rax, sob_boolean_false
  9344 00006C1F [0200000000000000] 
  9345                                  .L_end:
  9346 00006C27 C9                              leave
  9347 00006C28 C21800                          ret AND_KILL_FRAME(1)
  9348                                  
  9349                                  L_code_ptr_is_symbol:
  9350 00006C2B C8000000                        enter 0, 0
  9351 00006C2F 48837D1801                      cmp COUNT, 1
  9352 00006C34 0F859F110000                    jne L_error_arg_count_1
  9353 00006C3A 4C8B4520                        mov r8, PARAM(0)
  9354 00006C3E 41802040                        and byte [r8], T_symbol
  9355 00006C42 740C                            jz .L_false
  9356 00006C44 48B8-                           mov rax, sob_boolean_true
  9356 00006C46 [0300000000000000] 
  9357 00006C4E EB0A                            jmp .L_exit
  9358                                  .L_false:
  9359 00006C50 48B8-                           mov rax, sob_boolean_false
  9359 00006C52 [0200000000000000] 
  9360                                  .L_exit:
  9361 00006C5A C9                              leave
  9362 00006C5B C21800                          ret AND_KILL_FRAME(1)
  9363                                  
  9364                                  L_code_ptr_is_uninterned_symbol:
  9365 00006C5E C8000000                        enter 0, 0
  9366 00006C62 48837D1801                      cmp COUNT, 1
  9367 00006C67 0F856C110000                    jne L_error_arg_count_1
  9368 00006C6D 4C8B4520                        mov r8, PARAM(0)
  9369 00006C71 41803842                        cmp byte [r8], T_uninterned_symbol
  9370 00006C75 750C                            jne .L_false
  9371 00006C77 48B8-                           mov rax, sob_boolean_true
  9371 00006C79 [0300000000000000] 
  9372 00006C81 EB0A                            jmp .L_exit
  9373                                  .L_false:
  9374 00006C83 48B8-                           mov rax, sob_boolean_false
  9374 00006C85 [0200000000000000] 
  9375                                  .L_exit:
  9376 00006C8D C9                              leave
  9377 00006C8E C21800                          ret AND_KILL_FRAME(1)
  9378                                  
  9379                                  L_code_ptr_is_interned_symbol:
  9380 00006C91 C8000000                        enter 0, 0
  9381 00006C95 48837D1801                      cmp COUNT, 1
  9382 00006C9A 0F8539110000                    jne L_error_arg_count_1
  9383 00006CA0 488B4520                        mov rax, PARAM(0)
  9384 00006CA4 803841                          cmp byte [rax], T_interned_symbol
  9385 00006CA7 750C                            jne .L_false
  9386 00006CA9 48B8-                           mov rax, sob_boolean_true
  9386 00006CAB [0300000000000000] 
  9387 00006CB3 EB0A                            jmp .L_end
  9388                                  .L_false:
  9389 00006CB5 48B8-                           mov rax, sob_boolean_false
  9389 00006CB7 [0200000000000000] 
  9390                                  .L_end:
  9391 00006CBF C9                              leave
  9392 00006CC0 C21800                          ret AND_KILL_FRAME(1)
  9393                                  
  9394                                  L_code_ptr_gensym:
  9395 00006CC3 C8000000                        enter 0, 0
  9396 00006CC7 48837D1800                      cmp COUNT, 0
  9397 00006CCC 0F85D2100000                    jne L_error_arg_count_0
  9398 00006CD2 48FF0425[580E0000]              inc qword [gensym_count]
  9399 00006CDA BF09000000                      mov rdi, (1 + 8)
  9400 00006CDF E819F4FFFF                      call malloc
  9401 00006CE4 C60042                          mov byte [rax], T_uninterned_symbol
  9402 00006CE7 488B0C25[580E0000]              mov rcx, qword [gensym_count]
  9403 00006CEF 48894801                        mov qword [rax + 1], rcx
  9404 00006CF3 C9                              leave
  9405 00006CF4 C21000                          ret AND_KILL_FRAME(0)
  9406                                  
  9407                                  L_code_ptr_is_vector:
  9408 00006CF7 C8000000                        enter 0, 0
  9409 00006CFB 48837D1801                      cmp COUNT, 1
  9410 00006D00 0F85D3100000                    jne L_error_arg_count_1
  9411 00006D06 488B4520                        mov rax, PARAM(0)
  9412 00006D0A 803822                          cmp byte [rax], T_vector
  9413 00006D0D 750C                            jne .L_false
  9414 00006D0F 48B8-                           mov rax, sob_boolean_true
  9414 00006D11 [0300000000000000] 
  9415 00006D19 EB0A                            jmp .L_end
  9416                                  .L_false:
  9417 00006D1B 48B8-                           mov rax, sob_boolean_false
  9417 00006D1D [0200000000000000] 
  9418                                  .L_end:
  9419 00006D25 C9                              leave
  9420 00006D26 C21800                          ret AND_KILL_FRAME(1)
  9421                                  
  9422                                  L_code_ptr_is_closure:
  9423 00006D29 C8000000                        enter 0, 0
  9424 00006D2D 48837D1801                      cmp COUNT, 1
  9425 00006D32 0F85A1100000                    jne L_error_arg_count_1
  9426 00006D38 488B4520                        mov rax, PARAM(0)
  9427 00006D3C 803804                          cmp byte [rax], T_closure
  9428 00006D3F 750C                            jne .L_false
  9429 00006D41 48B8-                           mov rax, sob_boolean_true
  9429 00006D43 [0300000000000000] 
  9430 00006D4B EB0A                            jmp .L_end
  9431                                  .L_false:
  9432 00006D4D 48B8-                           mov rax, sob_boolean_false
  9432 00006D4F [0200000000000000] 
  9433                                  .L_end:
  9434 00006D57 C9                              leave
  9435 00006D58 C21800                          ret AND_KILL_FRAME(1)
  9436                                  
  9437                                  L_code_ptr_is_real:
  9438 00006D5B C8000000                        enter 0, 0
  9439 00006D5F 48837D1801                      cmp COUNT, 1
  9440 00006D64 0F856F100000                    jne L_error_arg_count_1
  9441 00006D6A 488B4520                        mov rax, PARAM(0)
  9442 00006D6E 803813                          cmp byte [rax], T_real
  9443 00006D71 750C                            jne .L_false
  9444 00006D73 48B8-                           mov rax, sob_boolean_true
  9444 00006D75 [0300000000000000] 
  9445 00006D7D EB0A                            jmp .L_end
  9446                                  .L_false:
  9447 00006D7F 48B8-                           mov rax, sob_boolean_false
  9447 00006D81 [0200000000000000] 
  9448                                  .L_end:
  9449 00006D89 C9                              leave
  9450 00006D8A C21800                          ret AND_KILL_FRAME(1)
  9451                                  
  9452                                  L_code_ptr_is_fraction:
  9453 00006D8D C8000000                        enter 0, 0
  9454 00006D91 48837D1801                      cmp COUNT, 1
  9455 00006D96 0F853D100000                    jne L_error_arg_count_1
  9456 00006D9C 488B4520                        mov rax, PARAM(0)
  9457 00006DA0 803812                          cmp byte [rax], T_fraction
  9458 00006DA3 750C                            jne .L_false
  9459 00006DA5 48B8-                           mov rax, sob_boolean_true
  9459 00006DA7 [0300000000000000] 
  9460 00006DAF EB0A                            jmp .L_end
  9461                                  .L_false:
  9462 00006DB1 48B8-                           mov rax, sob_boolean_false
  9462 00006DB3 [0200000000000000] 
  9463                                  .L_end:
  9464 00006DBB C9                              leave
  9465 00006DBC C21800                          ret AND_KILL_FRAME(1)
  9466                                  
  9467                                  L_code_ptr_is_boolean:
  9468 00006DBF C8000000                        enter 0, 0
  9469 00006DC3 48837D1801                      cmp COUNT, 1
  9470 00006DC8 0F850B100000                    jne L_error_arg_count_1
  9471 00006DCE 488B4520                        mov rax, PARAM(0)
  9472 00006DD2 8A18                            mov bl, byte [rax]
  9473 00006DD4 80E308                          and bl, T_boolean
  9474 00006DD7 740C                            je .L_false
  9475 00006DD9 48B8-                           mov rax, sob_boolean_true
  9475 00006DDB [0300000000000000] 
  9476 00006DE3 EB0A                            jmp .L_end
  9477                                  .L_false:
  9478 00006DE5 48B8-                           mov rax, sob_boolean_false
  9478 00006DE7 [0200000000000000] 
  9479                                  .L_end:
  9480 00006DEF C9                              leave
  9481 00006DF0 C21800                          ret AND_KILL_FRAME(1)
  9482                                          
  9483                                  L_code_ptr_is_boolean_false:
  9484 00006DF3 C8000000                        enter 0, 0
  9485 00006DF7 48837D1801                      cmp COUNT, 1
  9486 00006DFC 0F85D70F0000                    jne L_error_arg_count_1
  9487 00006E02 488B4520                        mov rax, PARAM(0)
  9488 00006E06 8A18                            mov bl, byte [rax]
  9489 00006E08 80FB09                          cmp bl, T_boolean_false
  9490 00006E0B 750C                            jne .L_false
  9491 00006E0D 48B8-                           mov rax, sob_boolean_true
  9491 00006E0F [0300000000000000] 
  9492 00006E17 EB0A                            jmp .L_end
  9493                                  .L_false:
  9494 00006E19 48B8-                           mov rax, sob_boolean_false
  9494 00006E1B [0200000000000000] 
  9495                                  .L_end:
  9496 00006E23 C9                              leave
  9497 00006E24 C21800                          ret AND_KILL_FRAME(1)
  9498                                  
  9499                                  L_code_ptr_is_boolean_true:
  9500 00006E27 C8000000                        enter 0, 0
  9501 00006E2B 48837D1801                      cmp COUNT, 1
  9502 00006E30 0F85A30F0000                    jne L_error_arg_count_1
  9503 00006E36 488B4520                        mov rax, PARAM(0)
  9504 00006E3A 8A18                            mov bl, byte [rax]
  9505 00006E3C 80FB0A                          cmp bl, T_boolean_true
  9506 00006E3F 750C                            jne .L_false
  9507 00006E41 48B8-                           mov rax, sob_boolean_true
  9507 00006E43 [0300000000000000] 
  9508 00006E4B EB0A                            jmp .L_end
  9509                                  .L_false:
  9510 00006E4D 48B8-                           mov rax, sob_boolean_false
  9510 00006E4F [0200000000000000] 
  9511                                  .L_end:
  9512 00006E57 C9                              leave
  9513 00006E58 C21800                          ret AND_KILL_FRAME(1)
  9514                                  
  9515                                  L_code_ptr_is_number:
  9516 00006E5B C8000000                        enter 0, 0
  9517 00006E5F 48837D1801                      cmp COUNT, 1
  9518 00006E64 0F856F0F0000                    jne L_error_arg_count_1
  9519 00006E6A 488B4520                        mov rax, PARAM(0)
  9520 00006E6E 8A18                            mov bl, byte [rax]
  9521 00006E70 80E310                          and bl, T_number
  9522 00006E73 740C                            jz .L_false
  9523 00006E75 48B8-                           mov rax, sob_boolean_true
  9523 00006E77 [0300000000000000] 
  9524 00006E7F EB0A                            jmp .L_end
  9525                                  .L_false:
  9526 00006E81 48B8-                           mov rax, sob_boolean_false
  9526 00006E83 [0200000000000000] 
  9527                                  .L_end:
  9528 00006E8B C9                              leave
  9529 00006E8C C21800                          ret AND_KILL_FRAME(1)
  9530                                          
  9531                                  L_code_ptr_is_collection:
  9532 00006E8F C8000000                        enter 0, 0
  9533 00006E93 48837D1801                      cmp COUNT, 1
  9534 00006E98 0F853B0F0000                    jne L_error_arg_count_1
  9535 00006E9E 488B4520                        mov rax, PARAM(0)
  9536 00006EA2 8A18                            mov bl, byte [rax]
  9537 00006EA4 80E320                          and bl, T_collection
  9538 00006EA7 740C                            je .L_false
  9539 00006EA9 48B8-                           mov rax, sob_boolean_true
  9539 00006EAB [0300000000000000] 
  9540 00006EB3 EB0A                            jmp .L_end
  9541                                  .L_false:
  9542 00006EB5 48B8-                           mov rax, sob_boolean_false
  9542 00006EB7 [0200000000000000] 
  9543                                  .L_end:
  9544 00006EBF C9                              leave
  9545 00006EC0 C21800                          ret AND_KILL_FRAME(1)
  9546                                  
  9547                                  L_code_ptr_cons:
  9548 00006EC3 C8000000                        enter 0, 0
  9549 00006EC7 48837D1802                      cmp COUNT, 2
  9550 00006ECC 0F853C0F0000                    jne L_error_arg_count_2
  9551 00006ED2 BF11000000                      mov rdi, (1 + 8 + 8)
  9552 00006ED7 E821F2FFFF                      call malloc
  9553 00006EDC C60021                          mov byte [rax], T_pair
  9554 00006EDF 488B5D20                        mov rbx, PARAM(0)
  9555 00006EE3 48895801                        mov SOB_PAIR_CAR(rax), rbx
  9556 00006EE7 488B5D28                        mov rbx, PARAM(1)
  9557 00006EEB 48895809                        mov SOB_PAIR_CDR(rax), rbx
  9558 00006EEF C9                              leave
  9559 00006EF0 C22000                          ret AND_KILL_FRAME(2)
  9560                                  
  9561                                  L_code_ptr_display_sexpr:
  9562 00006EF3 C8000000                        enter 0, 0
  9563 00006EF7 48837D1801                      cmp COUNT, 1
  9564 00006EFC 0F85D70E0000                    jne L_error_arg_count_1
  9565 00006F02 488B7D20                        mov rdi, PARAM(0)
  9566 00006F06 E873F4FFFF                      call print_sexpr
  9567 00006F0B 48B8-                           mov rax, sob_void
  9567 00006F0D [0000000000000000] 
  9568 00006F15 C9                              leave
  9569 00006F16 C21800                          ret AND_KILL_FRAME(1)
  9570                                  
  9571                                  L_code_ptr_write_char:
  9572 00006F19 C8000000                        enter 0, 0
  9573 00006F1D 48837D1801                      cmp COUNT, 1
  9574 00006F22 0F85B10E0000                    jne L_error_arg_count_1
  9575 00006F28 488B4520                        mov rax, PARAM(0)
  9576                                          assert_char(rax)
    53 00006F2C 803802              <1>  cmp byte [%1], %2
    54 00006F2F 0F85780F0000        <1>  jne L_error_incorrect_type
  9577 00006F35 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  9578 00006F38 4825FF000000                    and rax, 255
  9579 00006F3E 48BF-                           mov rdi, fmt_char
  9579 00006F40 [600E000000000000] 
  9580 00006F48 4889C6                          mov rsi, rax
  9581 00006F4B B800000000                      mov rax, 0
  9582                                          ENTER
    44 00006F50 C8000000            <1>  enter 0, 0
    45 00006F54 4883E4F0            <1>  and rsp, ~15
  9583 00006F58 E8(00000000)                    call printf
  9584                                          LEAVE
    49 00006F5D C9                  <1>  leave
  9585 00006F5E 48B8-                           mov rax, sob_void
  9585 00006F60 [0000000000000000] 
  9586 00006F68 C9                              leave
  9587 00006F69 C21800                          ret AND_KILL_FRAME(1)
  9588                                  
  9589                                  L_code_ptr_car:
  9590 00006F6C C8000000                        enter 0, 0
  9591 00006F70 48837D1801                      cmp COUNT, 1
  9592 00006F75 0F855E0E0000                    jne L_error_arg_count_1
  9593 00006F7B 488B4520                        mov rax, PARAM(0)
  9594                                          assert_pair(rax)
    53 00006F7F 803821              <1>  cmp byte [%1], %2
    54 00006F82 0F85250F0000        <1>  jne L_error_incorrect_type
  9595 00006F88 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  9596 00006F8C C9                              leave
  9597 00006F8D C21800                          ret AND_KILL_FRAME(1)
  9598                                          
  9599                                  L_code_ptr_cdr:
  9600 00006F90 C8000000                        enter 0, 0
  9601 00006F94 48837D1801                      cmp COUNT, 1
  9602 00006F99 0F853A0E0000                    jne L_error_arg_count_1
  9603 00006F9F 488B4520                        mov rax, PARAM(0)
  9604                                          assert_pair(rax)
    53 00006FA3 803821              <1>  cmp byte [%1], %2
    54 00006FA6 0F85010F0000        <1>  jne L_error_incorrect_type
  9605 00006FAC 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  9606 00006FB0 C9                              leave
  9607 00006FB1 C21800                          ret AND_KILL_FRAME(1)
  9608                                          
  9609                                  L_code_ptr_string_length:
  9610 00006FB4 C8000000                        enter 0, 0
  9611 00006FB8 48837D1801                      cmp COUNT, 1
  9612 00006FBD 0F85160E0000                    jne L_error_arg_count_1
  9613 00006FC3 488B4520                        mov rax, PARAM(0)
  9614                                          assert_string(rax)
    53 00006FC7 803803              <1>  cmp byte [%1], %2
    54 00006FCA 0F85DD0E0000        <1>  jne L_error_incorrect_type
  9615 00006FD0 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  9616 00006FD4 E84F0D0000                      call make_integer
  9617 00006FD9 C9                              leave
  9618 00006FDA C21800                          ret AND_KILL_FRAME(1)
  9619                                  
  9620                                  L_code_ptr_vector_length:
  9621 00006FDD C8000000                        enter 0, 0
  9622 00006FE1 48837D1801                      cmp COUNT, 1
  9623 00006FE6 0F85ED0D0000                    jne L_error_arg_count_1
  9624 00006FEC 488B4520                        mov rax, PARAM(0)
  9625                                          assert_vector(rax)
    53 00006FF0 803822              <1>  cmp byte [%1], %2
    54 00006FF3 0F85B40E0000        <1>  jne L_error_incorrect_type
  9626 00006FF9 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  9627 00006FFD E8260D0000                      call make_integer
  9628 00007002 C9                              leave
  9629 00007003 C21800                          ret AND_KILL_FRAME(1)
  9630                                  
  9631                                  L_code_ptr_real_to_integer:
  9632 00007006 C8000000                        enter 0, 0
  9633 0000700A 48837D1801                      cmp COUNT, 1
  9634 0000700F 0F85C40D0000                    jne L_error_arg_count_1
  9635 00007015 488B5D20                        mov rbx, PARAM(0)
  9636                                          assert_real(rbx)
    53 00007019 803B13              <1>  cmp byte [%1], %2
    54 0000701C 0F858B0E0000        <1>  jne L_error_incorrect_type
  9637 00007022 F20F104301                      movsd xmm0, qword [rbx + 1]
  9638 00007027 F2480F2CF8                      cvttsd2si rdi, xmm0
  9639 0000702C E8F70C0000                      call make_integer
  9640 00007031 C9                              leave
  9641 00007032 C21800                          ret AND_KILL_FRAME(1)
  9642                                  
  9643                                  L_code_ptr_exit:
  9644 00007035 C8000000                        enter 0, 0
  9645 00007039 48837D1800                      cmp COUNT, 0
  9646 0000703E 0F85600D0000                    jne L_error_arg_count_0
  9647 00007044 B800000000                      mov rax, 0
  9648 00007049 E8(00000000)                    call exit
  9649                                  
  9650                                  L_code_ptr_integer_to_real:
  9651 0000704E C8000000                        enter 0, 0
  9652 00007052 48837D1801                      cmp COUNT, 1
  9653 00007057 0F857C0D0000                    jne L_error_arg_count_1
  9654 0000705D 488B4520                        mov rax, PARAM(0)
  9655                                          assert_integer(rax)
    53 00007061 803811              <1>  cmp byte [%1], %2
    54 00007064 0F85430E0000        <1>  jne L_error_incorrect_type
  9656 0000706A FF7001                          push qword [rax + 1]
  9657 0000706D F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  9658 00007073 E8980C0000                      call make_real
  9659 00007078 C9                              leave
  9660 00007079 C21800                          ret AND_KILL_FRAME(1)
  9661                                  
  9662                                  L_code_ptr_fraction_to_real:
  9663 0000707C C8000000                        enter 0, 0
  9664 00007080 48837D1801                      cmp COUNT, 1
  9665 00007085 0F854E0D0000                    jne L_error_arg_count_1
  9666 0000708B 488B4520                        mov rax, PARAM(0)
  9667                                          assert_fraction(rax)
    53 0000708F 803812              <1>  cmp byte [%1], %2
    54 00007092 0F85150E0000        <1>  jne L_error_incorrect_type
  9668 00007098 FF7001                          push qword [rax + 1]
  9669 0000709B F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  9670 000070A1 FF7009                          push qword [rax + 1 + 8]
  9671 000070A4 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  9672 000070AA F20F5EC1                        divsd xmm0, xmm1
  9673 000070AE E85D0C0000                      call make_real
  9674 000070B3 C9                              leave
  9675 000070B4 C21800                          ret AND_KILL_FRAME(1)
  9676                                  
  9677                                  L_code_ptr_char_to_integer:
  9678 000070B7 C8000000                        enter 0, 0
  9679 000070BB 48837D1801                      cmp COUNT, 1
  9680 000070C0 0F85130D0000                    jne L_error_arg_count_1
  9681 000070C6 488B4520                        mov rax, PARAM(0)
  9682                                          assert_char(rax)
    53 000070CA 803802              <1>  cmp byte [%1], %2
    54 000070CD 0F85DA0D0000        <1>  jne L_error_incorrect_type
  9683 000070D3 8A4001                          mov al, byte [rax + 1]
  9684 000070D6 4825FF000000                    and rax, 255
  9685 000070DC 4889C7                          mov rdi, rax
  9686 000070DF E8440C0000                      call make_integer
  9687 000070E4 C9                              leave
  9688 000070E5 C21800                          ret AND_KILL_FRAME(1)
  9689                                  
  9690                                  L_code_ptr_integer_to_fraction:
  9691 000070E8 C8000000                        enter 0, 0
  9692 000070EC 48837D1801                      cmp COUNT, 1
  9693 000070F1 0F85E20C0000                    jne L_error_arg_count_1
  9694 000070F7 4C8B4520                        mov r8, PARAM(0)
  9695                                          assert_integer(r8)
    53 000070FB 41803811            <1>  cmp byte [%1], %2
    54 000070FF 0F85A80D0000        <1>  jne L_error_incorrect_type
  9696 00007105 BF11000000                      mov rdi, (1 + 8 + 8)
  9697 0000710A E8EEEFFFFF                      call malloc
  9698 0000710F 498B5801                        mov rbx, qword [r8 + 1]
  9699 00007113 C60012                          mov byte [rax], T_fraction
  9700 00007116 48895801                        mov qword [rax + 1], rbx
  9701 0000711A 48C7400901000000                mov qword [rax + 1 + 8], 1
  9702 00007122 C9                              leave
  9703 00007123 C21800                          ret AND_KILL_FRAME(1)
  9704                                  
  9705                                  L_code_ptr_integer_to_char:
  9706 00007126 C8000000                        enter 0, 0
  9707 0000712A 48837D1801                      cmp COUNT, 1
  9708 0000712F 0F85A40C0000                    jne L_error_arg_count_1
  9709 00007135 488B4520                        mov rax, PARAM(0)
  9710                                          assert_integer(rax)
    53 00007139 803811              <1>  cmp byte [%1], %2
    54 0000713C 0F856B0D0000        <1>  jne L_error_incorrect_type
  9711 00007142 488B5801                        mov rbx, qword [rax + 1]
  9712 00007146 4883FB00                        cmp rbx, 0
  9713 0000714A 0F8EF20B0000                    jle L_error_integer_range
  9714 00007150 4881FB00010000                  cmp rbx, 256
  9715 00007157 0F8DE50B0000                    jge L_error_integer_range
  9716 0000715D BF02000000                      mov rdi, (1 + 1)
  9717 00007162 E896EFFFFF                      call malloc
  9718 00007167 C60002                          mov byte [rax], T_char
  9719 0000716A 885801                          mov byte [rax + 1], bl
  9720 0000716D C9                              leave
  9721 0000716E C21800                          ret AND_KILL_FRAME(1)
  9722                                  
  9723                                  L_code_ptr_trng:
  9724 00007171 C8000000                        enter 0, 0
  9725 00007175 48837D1800                      cmp COUNT, 0
  9726 0000717A 0F85240C0000                    jne L_error_arg_count_0
  9727 00007180 480FC7F7                        rdrand rdi
  9728 00007184 48D1EF                          shr rdi, 1
  9729 00007187 E89C0B0000                      call make_integer
  9730 0000718C C9                              leave
  9731 0000718D C21000                          ret AND_KILL_FRAME(0)
  9732                                  
  9733                                  L_code_ptr_is_zero:
  9734 00007190 C8000000                        enter 0, 0
  9735 00007194 48837D1801                      cmp COUNT, 1
  9736 00007199 0F853A0C0000                    jne L_error_arg_count_1
  9737 0000719F 488B4520                        mov rax, PARAM(0)
  9738 000071A3 803811                          cmp byte [rax], T_integer
  9739 000071A6 740F                            je .L_integer
  9740 000071A8 803812                          cmp byte [rax], T_fraction
  9741 000071AB 7413                            je .L_fraction
  9742 000071AD 803813                          cmp byte [rax], T_real
  9743 000071B0 7417                            je .L_real
  9744 000071B2 E9F60C0000                      jmp L_error_incorrect_type
  9745                                  .L_integer:
  9746 000071B7 4883780100                      cmp qword [rax + 1], 0
  9747 000071BC 7429                            je .L_zero
  9748 000071BE EB1B                            jmp .L_not_zero
  9749                                  .L_fraction:
  9750 000071C0 4883780100                      cmp qword [rax + 1], 0
  9751 000071C5 7420                            je .L_zero
  9752 000071C7 EB12                            jmp .L_not_zero
  9753                                  .L_real:
  9754 000071C9 660FEFC0                        pxor xmm0, xmm0
  9755 000071CD FF7001                          push qword [rax + 1]
  9756 000071D0 F20F100C24                      movsd xmm1, qword [rsp]
  9757 000071D5 660F2EC1                        ucomisd xmm0, xmm1
  9758 000071D9 740C                            je .L_zero
  9759                                  .L_not_zero:
  9760 000071DB 48B8-                           mov rax, sob_boolean_false
  9760 000071DD [0200000000000000] 
  9761 000071E5 EB0A                            jmp .L_end
  9762                                  .L_zero:
  9763 000071E7 48B8-                           mov rax, sob_boolean_true
  9763 000071E9 [0300000000000000] 
  9764                                  .L_end:
  9765 000071F1 C9                              leave
  9766 000071F2 C21800                          ret AND_KILL_FRAME(1)
  9767                                  
  9768                                  L_code_ptr_is_integer:
  9769 000071F5 C8000000                        enter 0, 0
  9770 000071F9 48837D1801                      cmp COUNT, 1
  9771 000071FE 0F85D50B0000                    jne L_error_arg_count_1
  9772 00007204 488B4520                        mov rax, PARAM(0)
  9773 00007208 803811                          cmp byte [rax], T_integer
  9774 0000720B 750C                            jne .L_false
  9775 0000720D 48B8-                           mov rax, sob_boolean_true
  9775 0000720F [0300000000000000] 
  9776 00007217 EB0A                            jmp .L_exit
  9777                                  .L_false:
  9778 00007219 48B8-                           mov rax, sob_boolean_false
  9778 0000721B [0200000000000000] 
  9779                                  .L_exit:
  9780 00007223 C9                              leave
  9781 00007224 C21800                          ret AND_KILL_FRAME(1)
  9782                                  
  9783                                  L_code_ptr_raw_bin_add_rr:
  9784 00007227 C8000000                        enter 0, 0
  9785 0000722B 48837D1802                      cmp COUNT, 2
  9786 00007230 0F85D80B0000                    jne L_error_arg_count_2
  9787 00007236 488B5D20                        mov rbx, PARAM(0)
  9788                                          assert_real(rbx)
    53 0000723A 803B13              <1>  cmp byte [%1], %2
    54 0000723D 0F856A0C0000        <1>  jne L_error_incorrect_type
  9789 00007243 488B4D28                        mov rcx, PARAM(1)
  9790                                          assert_real(rcx)
    53 00007247 803913              <1>  cmp byte [%1], %2
    54 0000724A 0F855D0C0000        <1>  jne L_error_incorrect_type
  9791 00007250 F20F104301                      movsd xmm0, qword [rbx + 1]
  9792 00007255 F20F104901                      movsd xmm1, qword [rcx + 1]
  9793 0000725A F20F58C1                        addsd xmm0, xmm1
  9794 0000725E E8AD0A0000                      call make_real
  9795 00007263 C9                              leave
  9796 00007264 C22000                          ret AND_KILL_FRAME(2)
  9797                                  
  9798                                  L_code_ptr_raw_bin_sub_rr:
  9799 00007267 C8000000                        enter 0, 0
  9800 0000726B 48837D1802                      cmp COUNT, 2
  9801 00007270 0F85980B0000                    jne L_error_arg_count_2
  9802 00007276 488B5D20                        mov rbx, PARAM(0)
  9803                                          assert_real(rbx)
    53 0000727A 803B13              <1>  cmp byte [%1], %2
    54 0000727D 0F852A0C0000        <1>  jne L_error_incorrect_type
  9804 00007283 488B4D28                        mov rcx, PARAM(1)
  9805                                          assert_real(rcx)
    53 00007287 803913              <1>  cmp byte [%1], %2
    54 0000728A 0F851D0C0000        <1>  jne L_error_incorrect_type
  9806 00007290 F20F104301                      movsd xmm0, qword [rbx + 1]
  9807 00007295 F20F104901                      movsd xmm1, qword [rcx + 1]
  9808 0000729A F20F5CC1                        subsd xmm0, xmm1
  9809 0000729E E86D0A0000                      call make_real
  9810 000072A3 C9                              leave
  9811 000072A4 C22000                          ret AND_KILL_FRAME(2)
  9812                                  
  9813                                  L_code_ptr_raw_bin_mul_rr:
  9814 000072A7 C8000000                        enter 0, 0
  9815 000072AB 48837D1802                      cmp COUNT, 2
  9816 000072B0 0F85580B0000                    jne L_error_arg_count_2
  9817 000072B6 488B5D20                        mov rbx, PARAM(0)
  9818                                          assert_real(rbx)
    53 000072BA 803B13              <1>  cmp byte [%1], %2
    54 000072BD 0F85EA0B0000        <1>  jne L_error_incorrect_type
  9819 000072C3 488B4D28                        mov rcx, PARAM(1)
  9820                                          assert_real(rcx)
    53 000072C7 803913              <1>  cmp byte [%1], %2
    54 000072CA 0F85DD0B0000        <1>  jne L_error_incorrect_type
  9821 000072D0 F20F104301                      movsd xmm0, qword [rbx + 1]
  9822 000072D5 F20F104901                      movsd xmm1, qword [rcx + 1]
  9823 000072DA F20F59C1                        mulsd xmm0, xmm1
  9824 000072DE E82D0A0000                      call make_real
  9825 000072E3 C9                              leave
  9826 000072E4 C22000                          ret AND_KILL_FRAME(2)
  9827                                  
  9828                                  L_code_ptr_raw_bin_div_rr:
  9829 000072E7 C8000000                        enter 0, 0
  9830 000072EB 48837D1802                      cmp COUNT, 2
  9831 000072F0 0F85180B0000                    jne L_error_arg_count_2
  9832 000072F6 488B5D20                        mov rbx, PARAM(0)
  9833                                          assert_real(rbx)
    53 000072FA 803B13              <1>  cmp byte [%1], %2
    54 000072FD 0F85AA0B0000        <1>  jne L_error_incorrect_type
  9834 00007303 488B4D28                        mov rcx, PARAM(1)
  9835                                          assert_real(rcx)
    53 00007307 803913              <1>  cmp byte [%1], %2
    54 0000730A 0F859D0B0000        <1>  jne L_error_incorrect_type
  9836 00007310 F20F104301                      movsd xmm0, qword [rbx + 1]
  9837 00007315 F20F104901                      movsd xmm1, qword [rcx + 1]
  9838 0000731A 660FEFD2                        pxor xmm2, xmm2
  9839 0000731E 660F2ECA                        ucomisd xmm1, xmm2
  9840 00007322 0F84B60B0000                    je L_error_division_by_zero
  9841 00007328 F20F5EC1                        divsd xmm0, xmm1
  9842 0000732C E8DF090000                      call make_real
  9843 00007331 C9                              leave
  9844 00007332 C22000                          ret AND_KILL_FRAME(2)
  9845                                  
  9846                                  L_code_ptr_raw_bin_add_zz:
  9847 00007335 C8000000                	enter 0, 0
  9848 00007339 48837D1802              	cmp COUNT, 2
  9849 0000733E 0F85CA0A0000            	jne L_error_arg_count_2
  9850 00007344 4C8B4520                	mov r8, PARAM(0)
  9851                                  	assert_integer(r8)
    53 00007348 41803811            <1>  cmp byte [%1], %2
    54 0000734C 0F855B0B0000        <1>  jne L_error_incorrect_type
  9852 00007352 4C8B4D28                	mov r9, PARAM(1)
  9853                                  	assert_integer(r9)
    53 00007356 41803911            <1>  cmp byte [%1], %2
    54 0000735A 0F854D0B0000        <1>  jne L_error_incorrect_type
  9854 00007360 498B7801                	mov rdi, qword [r8 + 1]
  9855 00007364 49037901                	add rdi, qword [r9 + 1]
  9856 00007368 E8BB090000              	call make_integer
  9857 0000736D C9                      	leave
  9858 0000736E C22000                  	ret AND_KILL_FRAME(2)
  9859                                  
  9860                                  L_code_ptr_raw_bin_add_qq:
  9861 00007371 C8000000                        enter 0, 0
  9862 00007375 48837D1802                      cmp COUNT, 2
  9863 0000737A 0F858E0A0000                    jne L_error_arg_count_2
  9864 00007380 4C8B4520                        mov r8, PARAM(0)
  9865                                          assert_fraction(r8)
    53 00007384 41803812            <1>  cmp byte [%1], %2
    54 00007388 0F851F0B0000        <1>  jne L_error_incorrect_type
  9866 0000738E 4C8B4D28                        mov r9, PARAM(1)
  9867                                          assert_fraction(r9)
    53 00007392 41803912            <1>  cmp byte [%1], %2
    54 00007396 0F85110B0000        <1>  jne L_error_incorrect_type
  9868 0000739C 498B4001                        mov rax, qword [r8 + 1] ; num1
  9869 000073A0 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  9870 000073A4 4899                            cqo
  9871 000073A6 48F7EB                          imul rbx
  9872 000073A9 4889C6                          mov rsi, rax
  9873 000073AC 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  9874 000073B0 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  9875 000073B4 4899                            cqo
  9876 000073B6 48F7EB                          imul rbx
  9877 000073B9 4801C6                          add rsi, rax
  9878 000073BC 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  9879 000073C0 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  9880 000073C4 4899                            cqo
  9881 000073C6 48F7EB                          imul rbx
  9882 000073C9 4889C7                          mov rdi, rax
  9883 000073CC E8DE010000                      call normalize_fraction
  9884 000073D1 C9                              leave
  9885 000073D2 C22000                          ret AND_KILL_FRAME(2)
  9886                                  
  9887                                  L_code_ptr_raw_bin_sub_zz:
  9888 000073D5 C8000000                	enter 0, 0
  9889 000073D9 48837D1802              	cmp COUNT, 2
  9890 000073DE 0F852A0A0000            	jne L_error_arg_count_2
  9891 000073E4 4C8B4520                	mov r8, PARAM(0)
  9892                                  	assert_integer(r8)
    53 000073E8 41803811            <1>  cmp byte [%1], %2
    54 000073EC 0F85BB0A0000        <1>  jne L_error_incorrect_type
  9893 000073F2 4C8B4D28                	mov r9, PARAM(1)
  9894                                  	assert_integer(r9)
    53 000073F6 41803911            <1>  cmp byte [%1], %2
    54 000073FA 0F85AD0A0000        <1>  jne L_error_incorrect_type
  9895 00007400 498B7801                	mov rdi, qword [r8 + 1]
  9896 00007404 492B7901                	sub rdi, qword [r9 + 1]
  9897 00007408 E81B090000              	call make_integer
  9898 0000740D C9                      	leave
  9899 0000740E C22000                  	ret AND_KILL_FRAME(2)
  9900                                  
  9901                                  L_code_ptr_raw_bin_sub_qq:
  9902 00007411 C8000000                        enter 0, 0
  9903 00007415 48837D1802                      cmp COUNT, 2
  9904 0000741A 0F85EE090000                    jne L_error_arg_count_2
  9905 00007420 4C8B4520                        mov r8, PARAM(0)
  9906                                          assert_fraction(r8)
    53 00007424 41803812            <1>  cmp byte [%1], %2
    54 00007428 0F857F0A0000        <1>  jne L_error_incorrect_type
  9907 0000742E 4C8B4D28                        mov r9, PARAM(1)
  9908                                          assert_fraction(r9)
    53 00007432 41803912            <1>  cmp byte [%1], %2
    54 00007436 0F85710A0000        <1>  jne L_error_incorrect_type
  9909 0000743C 498B4001                        mov rax, qword [r8 + 1] ; num1
  9910 00007440 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  9911 00007444 4899                            cqo
  9912 00007446 48F7EB                          imul rbx
  9913 00007449 4889C6                          mov rsi, rax
  9914 0000744C 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  9915 00007450 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  9916 00007454 4899                            cqo
  9917 00007456 48F7EB                          imul rbx
  9918 00007459 4829C6                          sub rsi, rax
  9919 0000745C 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  9920 00007460 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  9921 00007464 4899                            cqo
  9922 00007466 48F7EB                          imul rbx
  9923 00007469 4889C7                          mov rdi, rax
  9924 0000746C E83E010000                      call normalize_fraction
  9925 00007471 C9                              leave
  9926 00007472 C22000                          ret AND_KILL_FRAME(2)
  9927                                  
  9928                                  L_code_ptr_raw_bin_mul_zz:
  9929 00007475 C8000000                	enter 0, 0
  9930 00007479 48837D1802              	cmp COUNT, 2
  9931 0000747E 0F858A090000            	jne L_error_arg_count_2
  9932 00007484 4C8B4520                	mov r8, PARAM(0)
  9933                                  	assert_integer(r8)
    53 00007488 41803811            <1>  cmp byte [%1], %2
    54 0000748C 0F851B0A0000        <1>  jne L_error_incorrect_type
  9934 00007492 4C8B4D28                	mov r9, PARAM(1)
  9935                                  	assert_integer(r9)
    53 00007496 41803911            <1>  cmp byte [%1], %2
    54 0000749A 0F850D0A0000        <1>  jne L_error_incorrect_type
  9936 000074A0 4899                    	cqo
  9937 000074A2 498B4001                	mov rax, qword [r8 + 1]
  9938 000074A6 49F76101                	mul qword [r9 + 1]
  9939 000074AA 4889C7                  	mov rdi, rax
  9940 000074AD E876080000              	call make_integer
  9941 000074B2 C9                      	leave
  9942 000074B3 C22000                  	ret AND_KILL_FRAME(2)
  9943                                  
  9944                                  L_code_ptr_raw_bin_mul_qq:
  9945 000074B6 C8000000                        enter 0, 0
  9946 000074BA 48837D1802                      cmp COUNT, 2
  9947 000074BF 0F8549090000                    jne L_error_arg_count_2
  9948 000074C5 4C8B4520                        mov r8, PARAM(0)
  9949                                          assert_fraction(r8)
    53 000074C9 41803812            <1>  cmp byte [%1], %2
    54 000074CD 0F85DA090000        <1>  jne L_error_incorrect_type
  9950 000074D3 4C8B4D28                        mov r9, PARAM(1)
  9951                                          assert_fraction(r9)
    53 000074D7 41803912            <1>  cmp byte [%1], %2
    54 000074DB 0F85CC090000        <1>  jne L_error_incorrect_type
  9952 000074E1 498B4001                        mov rax, qword [r8 + 1] ; num1
  9953 000074E5 498B5901                        mov rbx, qword [r9 + 1] ; num2
  9954 000074E9 4899                            cqo
  9955 000074EB 48F7EB                          imul rbx
  9956 000074EE 4889C6                          mov rsi, rax
  9957 000074F1 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  9958 000074F5 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  9959 000074F9 4899                            cqo
  9960 000074FB 48F7EB                          imul rbx
  9961 000074FE 4889C7                          mov rdi, rax
  9962 00007501 E8A9000000                      call normalize_fraction
  9963 00007506 C9                              leave
  9964 00007507 C22000                          ret AND_KILL_FRAME(2)
  9965                                          
  9966                                  L_code_ptr_raw_bin_div_zz:
  9967 0000750A C8000000                	enter 0, 0
  9968 0000750E 48837D1802              	cmp COUNT, 2
  9969 00007513 0F85F5080000            	jne L_error_arg_count_2
  9970 00007519 4C8B4520                	mov r8, PARAM(0)
  9971                                  	assert_integer(r8)
    53 0000751D 41803811            <1>  cmp byte [%1], %2
    54 00007521 0F8586090000        <1>  jne L_error_incorrect_type
  9972 00007527 4C8B4D28                	mov r9, PARAM(1)
  9973                                  	assert_integer(r9)
    53 0000752B 41803911            <1>  cmp byte [%1], %2
    54 0000752F 0F8578090000        <1>  jne L_error_incorrect_type
  9974 00007535 498B7901                	mov rdi, qword [r9 + 1]
  9975 00007539 4883FF00                	cmp rdi, 0
  9976 0000753D 0F849B090000            	je L_error_division_by_zero
  9977 00007543 498B7001                	mov rsi, qword [r8 + 1]
  9978 00007547 E863000000              	call normalize_fraction
  9979 0000754C C9                      	leave
  9980 0000754D C22000                  	ret AND_KILL_FRAME(2)
  9981                                  
  9982                                  L_code_ptr_raw_bin_div_qq:
  9983 00007550 C8000000                        enter 0, 0
  9984 00007554 48837D1802                      cmp COUNT, 2
  9985 00007559 0F85AF080000                    jne L_error_arg_count_2
  9986 0000755F 4C8B4520                        mov r8, PARAM(0)
  9987                                          assert_fraction(r8)
    53 00007563 41803812            <1>  cmp byte [%1], %2
    54 00007567 0F8540090000        <1>  jne L_error_incorrect_type
  9988 0000756D 4C8B4D28                        mov r9, PARAM(1)
  9989                                          assert_fraction(r9)
    53 00007571 41803912            <1>  cmp byte [%1], %2
    54 00007575 0F8532090000        <1>  jne L_error_incorrect_type
  9990 0000757B 4983790100                      cmp qword [r9 + 1], 0
  9991 00007580 0F8458090000                    je L_error_division_by_zero
  9992 00007586 498B4001                        mov rax, qword [r8 + 1] ; num1
  9993 0000758A 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  9994 0000758E 4899                            cqo
  9995 00007590 48F7EB                          imul rbx
  9996 00007593 4889C6                          mov rsi, rax
  9997 00007596 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  9998 0000759A 498B5901                        mov rbx, qword [r9 + 1] ; num2
  9999 0000759E 4899                            cqo
 10000 000075A0 48F7EB                          imul rbx
 10001 000075A3 4889C7                          mov rdi, rax
 10002 000075A6 E804000000                      call normalize_fraction
 10003 000075AB C9                              leave
 10004 000075AC C22000                          ret AND_KILL_FRAME(2)
 10005                                          
 10006                                  normalize_fraction:
 10007 000075AF 56                              push rsi
 10008 000075B0 57                              push rdi
 10009 000075B1 E859000000                      call gcd
 10010 000075B6 4889C3                          mov rbx, rax
 10011 000075B9 58                              pop rax
 10012 000075BA 4899                            cqo
 10013 000075BC 48F7FB                          idiv rbx
 10014 000075BF 4989C0                          mov r8, rax
 10015 000075C2 58                              pop rax
 10016 000075C3 4899                            cqo
 10017 000075C5 48F7FB                          idiv rbx
 10018 000075C8 4989C1                          mov r9, rax
 10019 000075CB 4983F900                        cmp r9, 0
 10020 000075CF 741C                            je .L_zero
 10021 000075D1 4983F801                        cmp r8, 1
 10022 000075D5 7421                            je .L_int
 10023 000075D7 BF11000000                      mov rdi, (1 + 8 + 8)
 10024 000075DC E81CEBFFFF                      call malloc
 10025 000075E1 C60012                          mov byte [rax], T_fraction
 10026 000075E4 4C894801                        mov qword [rax + 1], r9
 10027 000075E8 4C894009                        mov qword [rax + 1 + 8], r8
 10028 000075EC C3                              ret
 10029                                  .L_zero:
 10030 000075ED BF00000000                      mov rdi, 0
 10031 000075F2 E831070000                      call make_integer
 10032 000075F7 C3                              ret
 10033                                  .L_int:
 10034 000075F8 4C89CF                          mov rdi, r9
 10035 000075FB E828070000                      call make_integer
 10036 00007600 C3                              ret
 10037                                  
 10038                                  iabs:
 10039 00007601 4889F8                          mov rax, rdi
 10040 00007604 4883F800                        cmp rax, 0
 10041 00007608 7C01                            jl .Lneg
 10042 0000760A C3                              ret
 10043                                  .Lneg:
 10044 0000760B 48F7D8                          neg rax
 10045 0000760E C3                              ret
 10046                                  
 10047                                  gcd:
 10048 0000760F E8EDFFFFFF                      call iabs
 10049 00007614 4889C3                          mov rbx, rax
 10050 00007617 4889F7                          mov rdi, rsi
 10051 0000761A E8E2FFFFFF                      call iabs
 10052 0000761F 4883F800                        cmp rax, 0
 10053 00007623 7502                            jne .L0
 10054 00007625 4893                            xchg rax, rbx
 10055                                  .L0:
 10056 00007627 4883FB00                        cmp rbx, 0
 10057 0000762B 740C                            je .L1
 10058 0000762D 4899                            cqo
 10059 0000762F 48F7F3                          div rbx
 10060 00007632 4889D0                          mov rax, rdx
 10061 00007635 4893                            xchg rax, rbx
 10062 00007637 EBEE                            jmp .L0
 10063                                  .L1:
 10064 00007639 C3                              ret
 10065                                  
 10066                                  L_code_ptr_error:
 10067 0000763A C8000000                        enter 0, 0
 10068 0000763E 48837D1802                      cmp COUNT, 2
 10069 00007643 0F85C5070000                    jne L_error_arg_count_2
 10070 00007649 488B7520                        mov rsi, PARAM(0)
 10071                                          assert_interned_symbol(rsi)
    53 0000764D 803E41              <1>  cmp byte [%1], %2
    54 00007650 0F8557080000        <1>  jne L_error_incorrect_type
 10072 00007656 488B7528                        mov rsi, PARAM(1)
 10073                                          assert_string(rsi)
    53 0000765A 803E03              <1>  cmp byte [%1], %2
    54 0000765D 0F854A080000        <1>  jne L_error_incorrect_type
 10074 00007663 48BF-                           mov rdi, fmt_scheme_error_part_1
 10074 00007665 [BE0F000000000000] 
 10075 0000766D B800000000                      mov rax, 0
 10076                                          ENTER
    44 00007672 C8000000            <1>  enter 0, 0
    45 00007676 4883E4F0            <1>  and rsp, ~15
 10077 0000767A E8(00000000)                    call printf
 10078                                          LEAVE
    49 0000767F C9                  <1>  leave
 10079 00007680 488B7D20                        mov rdi, PARAM(0)
 10080 00007684 E8F5ECFFFF                      call print_sexpr
 10081 00007689 48BF-                           mov rdi, fmt_scheme_error_part_2
 10081 0000768B [D20F000000000000] 
 10082 00007693 B800000000                      mov rax, 0
 10083                                          ENTER
    44 00007698 C8000000            <1>  enter 0, 0
    45 0000769C 4883E4F0            <1>  and rsp, ~15
 10084 000076A0 E8(00000000)                    call printf
 10085                                          LEAVE
    49 000076A5 C9                  <1>  leave
 10086 000076A6 488B4528                        mov rax, PARAM(1)       ; sob_string
 10087 000076AA BE01000000                      mov rsi, 1              ; size = 1 byte
 10088 000076AF 488B5001                        mov rdx, qword [rax + 1] ; length
 10089 000076B3 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
 10090 000076B7 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
 10091                                  	ENTER
    44 000076BF C8000000            <1>  enter 0, 0
    45 000076C3 4883E4F0            <1>  and rsp, ~15
 10092 000076C7 E8(00000000)                    call fwrite
 10093                                  	LEAVE
    49 000076CC C9                  <1>  leave
 10094 000076CD 48BF-                           mov rdi, fmt_scheme_error_part_3
 10094 000076CF [1410000000000000] 
 10095 000076D7 B800000000                      mov rax, 0
 10096                                          ENTER
    44 000076DC C8000000            <1>  enter 0, 0
    45 000076E0 4883E4F0            <1>  and rsp, ~15
 10097 000076E4 E8(00000000)                    call printf
 10098                                          LEAVE
    49 000076E9 C9                  <1>  leave
 10099 000076EA 48C7C0F7FFFFFF                  mov rax, -9
 10100 000076F1 E8(00000000)                    call exit
 10101                                  
 10102                                  L_code_ptr_raw_less_than_rr:
 10103 000076F6 C8000000                        enter 0, 0
 10104 000076FA 48837D1802                      cmp COUNT, 2
 10105 000076FF 0F8509070000                    jne L_error_arg_count_2
 10106 00007705 488B7520                        mov rsi, PARAM(0)
 10107                                          assert_real(rsi)
    53 00007709 803E13              <1>  cmp byte [%1], %2
    54 0000770C 0F859B070000        <1>  jne L_error_incorrect_type
 10108 00007712 488B7D28                        mov rdi, PARAM(1)
 10109                                          assert_real(rdi)
    53 00007716 803F13              <1>  cmp byte [%1], %2
    54 00007719 0F858E070000        <1>  jne L_error_incorrect_type
 10110 0000771F F20F104601                      movsd xmm0, qword [rsi + 1]
 10111 00007724 F20F104F01                      movsd xmm1, qword [rdi + 1]
 10112 00007729 660F2FC1                        comisd xmm0, xmm1
 10113 0000772D 730C                            jae .L_false
 10114 0000772F 48B8-                           mov rax, sob_boolean_true
 10114 00007731 [0300000000000000] 
 10115 00007739 EB0A                            jmp .L_exit
 10116                                  .L_false:
 10117 0000773B 48B8-                           mov rax, sob_boolean_false
 10117 0000773D [0200000000000000] 
 10118                                  .L_exit:
 10119 00007745 C9                              leave
 10120 00007746 C22000                          ret AND_KILL_FRAME(2)
 10121                                          
 10122                                  L_code_ptr_raw_less_than_zz:
 10123 00007749 C8000000                	enter 0, 0
 10124 0000774D 48837D1802              	cmp COUNT, 2
 10125 00007752 0F85B6060000            	jne L_error_arg_count_2
 10126 00007758 4C8B4520                	mov r8, PARAM(0)
 10127                                  	assert_integer(r8)
    53 0000775C 41803811            <1>  cmp byte [%1], %2
    54 00007760 0F8547070000        <1>  jne L_error_incorrect_type
 10128 00007766 4C8B4D28                	mov r9, PARAM(1)
 10129                                  	assert_integer(r9)
    53 0000776A 41803911            <1>  cmp byte [%1], %2
    54 0000776E 0F8539070000        <1>  jne L_error_incorrect_type
 10130 00007774 498B7801                	mov rdi, qword [r8 + 1]
 10131 00007778 493B7901                	cmp rdi, qword [r9 + 1]
 10132 0000777C 7D0C                    	jge .L_false
 10133 0000777E 48B8-                   	mov rax, sob_boolean_true
 10133 00007780 [0300000000000000] 
 10134 00007788 EB0A                    	jmp .L_exit
 10135                                  .L_false:
 10136 0000778A 48B8-                   	mov rax, sob_boolean_false
 10136 0000778C [0200000000000000] 
 10137                                  .L_exit:
 10138 00007794 C9                      	leave
 10139 00007795 C22000                  	ret AND_KILL_FRAME(2)
 10140                                  
 10141                                  L_code_ptr_raw_less_than_qq:
 10142 00007798 C8000000                        enter 0, 0
 10143 0000779C 48837D1802                      cmp COUNT, 2
 10144 000077A1 0F8567060000                    jne L_error_arg_count_2
 10145 000077A7 488B7520                        mov rsi, PARAM(0)
 10146                                          assert_fraction(rsi)
    53 000077AB 803E12              <1>  cmp byte [%1], %2
    54 000077AE 0F85F9060000        <1>  jne L_error_incorrect_type
 10147 000077B4 488B7D28                        mov rdi, PARAM(1)
 10148                                          assert_fraction(rdi)
    53 000077B8 803F12              <1>  cmp byte [%1], %2
    54 000077BB 0F85EC060000        <1>  jne L_error_incorrect_type
 10149 000077C1 488B4601                        mov rax, qword [rsi + 1] ; num1
 10150 000077C5 4899                            cqo
 10151 000077C7 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 10152 000077CB 4889C1                          mov rcx, rax
 10153 000077CE 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
 10154 000077D2 4899                            cqo
 10155 000077D4 48F76F01                        imul qword [rdi + 1]          ; num2
 10156 000077D8 4829C1                          sub rcx, rax
 10157 000077DB 7D0C                            jge .L_false
 10158 000077DD 48B8-                           mov rax, sob_boolean_true
 10158 000077DF [0300000000000000] 
 10159 000077E7 EB0A                            jmp .L_exit
 10160                                  .L_false:
 10161 000077E9 48B8-                           mov rax, sob_boolean_false
 10161 000077EB [0200000000000000] 
 10162                                  .L_exit:
 10163 000077F3 C9                              leave
 10164 000077F4 C22000                          ret AND_KILL_FRAME(2)
 10165                                  
 10166                                  L_code_ptr_raw_equal_rr:
 10167 000077F7 C8000000                        enter 0, 0
 10168 000077FB 48837D1802                      cmp COUNT, 2
 10169 00007800 0F8508060000                    jne L_error_arg_count_2
 10170 00007806 488B7520                        mov rsi, PARAM(0)
 10171                                          assert_real(rsi)
    53 0000780A 803E13              <1>  cmp byte [%1], %2
    54 0000780D 0F859A060000        <1>  jne L_error_incorrect_type
 10172 00007813 488B7D28                        mov rdi, PARAM(1)
 10173                                          assert_real(rdi)
    53 00007817 803F13              <1>  cmp byte [%1], %2
    54 0000781A 0F858D060000        <1>  jne L_error_incorrect_type
 10174 00007820 F20F104601                      movsd xmm0, qword [rsi + 1]
 10175 00007825 F20F104F01                      movsd xmm1, qword [rdi + 1]
 10176 0000782A 660F2FC1                        comisd xmm0, xmm1
 10177 0000782E 750C                            jne .L_false
 10178 00007830 48B8-                           mov rax, sob_boolean_true
 10178 00007832 [0300000000000000] 
 10179 0000783A EB0A                            jmp .L_exit
 10180                                  .L_false:
 10181 0000783C 48B8-                           mov rax, sob_boolean_false
 10181 0000783E [0200000000000000] 
 10182                                  .L_exit:
 10183 00007846 C9                              leave
 10184 00007847 C22000                          ret AND_KILL_FRAME(2)
 10185                                          
 10186                                  L_code_ptr_raw_equal_zz:
 10187 0000784A C8000000                	enter 0, 0
 10188 0000784E 48837D1802              	cmp COUNT, 2
 10189 00007853 0F85B5050000            	jne L_error_arg_count_2
 10190 00007859 4C8B4520                	mov r8, PARAM(0)
 10191                                  	assert_integer(r8)
    53 0000785D 41803811            <1>  cmp byte [%1], %2
    54 00007861 0F8546060000        <1>  jne L_error_incorrect_type
 10192 00007867 4C8B4D28                	mov r9, PARAM(1)
 10193                                  	assert_integer(r9)
    53 0000786B 41803911            <1>  cmp byte [%1], %2
    54 0000786F 0F8538060000        <1>  jne L_error_incorrect_type
 10194 00007875 498B7801                	mov rdi, qword [r8 + 1]
 10195 00007879 493B7901                	cmp rdi, qword [r9 + 1]
 10196 0000787D 750C                    	jne .L_false
 10197 0000787F 48B8-                   	mov rax, sob_boolean_true
 10197 00007881 [0300000000000000] 
 10198 00007889 EB0A                    	jmp .L_exit
 10199                                  .L_false:
 10200 0000788B 48B8-                   	mov rax, sob_boolean_false
 10200 0000788D [0200000000000000] 
 10201                                  .L_exit:
 10202 00007895 C9                      	leave
 10203 00007896 C22000                  	ret AND_KILL_FRAME(2)
 10204                                  
 10205                                  L_code_ptr_raw_equal_qq:
 10206 00007899 C8000000                        enter 0, 0
 10207 0000789D 48837D1802                      cmp COUNT, 2
 10208 000078A2 0F8566050000                    jne L_error_arg_count_2
 10209 000078A8 488B7520                        mov rsi, PARAM(0)
 10210                                          assert_fraction(rsi)
    53 000078AC 803E12              <1>  cmp byte [%1], %2
    54 000078AF 0F85F8050000        <1>  jne L_error_incorrect_type
 10211 000078B5 488B7D28                        mov rdi, PARAM(1)
 10212                                          assert_fraction(rdi)
    53 000078B9 803F12              <1>  cmp byte [%1], %2
    54 000078BC 0F85EB050000        <1>  jne L_error_incorrect_type
 10213 000078C2 488B4601                        mov rax, qword [rsi + 1] ; num1
 10214 000078C6 4899                            cqo
 10215 000078C8 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 10216 000078CC 4889C1                          mov rcx, rax
 10217 000078CF 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
 10218 000078D3 4899                            cqo
 10219 000078D5 48F76F01                        imul qword [rdi + 1]          ; num2
 10220 000078D9 4829C1                          sub rcx, rax
 10221 000078DC 750C                            jne .L_false
 10222 000078DE 48B8-                           mov rax, sob_boolean_true
 10222 000078E0 [0300000000000000] 
 10223 000078E8 EB0A                            jmp .L_exit
 10224                                  .L_false:
 10225 000078EA 48B8-                           mov rax, sob_boolean_false
 10225 000078EC [0200000000000000] 
 10226                                  .L_exit:
 10227 000078F4 C9                              leave
 10228 000078F5 C22000                          ret AND_KILL_FRAME(2)
 10229                                  
 10230                                  L_code_ptr_quotient:
 10231 000078F8 C8000000                        enter 0, 0
 10232 000078FC 48837D1802                      cmp COUNT, 2
 10233 00007901 0F8507050000                    jne L_error_arg_count_2
 10234 00007907 488B7520                        mov rsi, PARAM(0)
 10235                                          assert_integer(rsi)
    53 0000790B 803E11              <1>  cmp byte [%1], %2
    54 0000790E 0F8599050000        <1>  jne L_error_incorrect_type
 10236 00007914 488B7D28                        mov rdi, PARAM(1)
 10237                                          assert_integer(rdi)
    53 00007918 803F11              <1>  cmp byte [%1], %2
    54 0000791B 0F858C050000        <1>  jne L_error_incorrect_type
 10238 00007921 488B4601                        mov rax, qword [rsi + 1]
 10239 00007925 488B5F01                        mov rbx, qword [rdi + 1]
 10240 00007929 4883FB00                        cmp rbx, 0
 10241 0000792D 0F84AB050000                    je L_error_division_by_zero
 10242 00007933 4899                            cqo
 10243 00007935 48F7FB                          idiv rbx
 10244 00007938 4889C7                          mov rdi, rax
 10245 0000793B E8E8030000                      call make_integer
 10246 00007940 C9                              leave
 10247 00007941 C22000                          ret AND_KILL_FRAME(2)
 10248                                          
 10249                                  L_code_ptr_remainder:
 10250 00007944 C8000000                        enter 0, 0
 10251 00007948 48837D1802                      cmp COUNT, 2
 10252 0000794D 0F85BB040000                    jne L_error_arg_count_2
 10253 00007953 488B7520                        mov rsi, PARAM(0)
 10254                                          assert_integer(rsi)
    53 00007957 803E11              <1>  cmp byte [%1], %2
    54 0000795A 0F854D050000        <1>  jne L_error_incorrect_type
 10255 00007960 488B7D28                        mov rdi, PARAM(1)
 10256                                          assert_integer(rdi)
    53 00007964 803F11              <1>  cmp byte [%1], %2
    54 00007967 0F8540050000        <1>  jne L_error_incorrect_type
 10257 0000796D 488B4601                        mov rax, qword [rsi + 1]
 10258 00007971 488B5F01                        mov rbx, qword [rdi + 1]
 10259 00007975 4883FB00                        cmp rbx, 0
 10260 00007979 0F845F050000                    je L_error_division_by_zero
 10261 0000797F 4899                            cqo
 10262 00007981 48F7FB                          idiv rbx
 10263 00007984 4889D7                          mov rdi, rdx
 10264 00007987 E89C030000                      call make_integer
 10265 0000798C C9                              leave
 10266 0000798D C22000                          ret AND_KILL_FRAME(2)
 10267                                  
 10268                                  L_code_ptr_set_car:
 10269 00007990 C8000000                        enter 0, 0
 10270 00007994 48837D1802                      cmp COUNT, 2
 10271 00007999 0F856F040000                    jne L_error_arg_count_2
 10272 0000799F 488B4520                        mov rax, PARAM(0)
 10273                                          assert_pair(rax)
    53 000079A3 803821              <1>  cmp byte [%1], %2
    54 000079A6 0F8501050000        <1>  jne L_error_incorrect_type
 10274 000079AC 488B5D28                        mov rbx, PARAM(1)
 10275 000079B0 48895801                        mov SOB_PAIR_CAR(rax), rbx
 10276 000079B4 48B8-                           mov rax, sob_void
 10276 000079B6 [0000000000000000] 
 10277 000079BE C9                              leave
 10278 000079BF C22000                          ret AND_KILL_FRAME(2)
 10279                                  
 10280                                  L_code_ptr_set_cdr:
 10281 000079C2 C8000000                        enter 0, 0
 10282 000079C6 48837D1802                      cmp COUNT, 2
 10283 000079CB 0F853D040000                    jne L_error_arg_count_2
 10284 000079D1 488B4520                        mov rax, PARAM(0)
 10285                                          assert_pair(rax)
    53 000079D5 803821              <1>  cmp byte [%1], %2
    54 000079D8 0F85CF040000        <1>  jne L_error_incorrect_type
 10286 000079DE 488B5D28                        mov rbx, PARAM(1)
 10287 000079E2 48895809                        mov SOB_PAIR_CDR(rax), rbx
 10288 000079E6 48B8-                           mov rax, sob_void
 10288 000079E8 [0000000000000000] 
 10289 000079F0 C9                              leave
 10290 000079F1 C22000                          ret AND_KILL_FRAME(2)
 10291                                  
 10292                                  L_code_ptr_string_ref:
 10293 000079F4 C8000000                        enter 0, 0
 10294 000079F8 48837D1802                      cmp COUNT, 2
 10295 000079FD 0F850B040000                    jne L_error_arg_count_2
 10296 00007A03 488B7D20                        mov rdi, PARAM(0)
 10297                                          assert_string(rdi)
    53 00007A07 803F03              <1>  cmp byte [%1], %2
    54 00007A0A 0F859D040000        <1>  jne L_error_incorrect_type
 10298 00007A10 488B7528                        mov rsi, PARAM(1)
 10299                                          assert_integer(rsi)
    53 00007A14 803E11              <1>  cmp byte [%1], %2
    54 00007A17 0F8590040000        <1>  jne L_error_incorrect_type
 10300 00007A1D 488B5701                        mov rdx, qword [rdi + 1]
 10301 00007A21 488B4E01                        mov rcx, qword [rsi + 1]
 10302 00007A25 4839D1                          cmp rcx, rdx
 10303 00007A28 0F8D14030000                    jge L_error_integer_range
 10304 00007A2E 4883F900                        cmp rcx, 0
 10305 00007A32 0F8C0A030000                    jl L_error_integer_range
 10306 00007A38 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
 10307 00007A3C BF02000000                      mov rdi, 2
 10308 00007A41 E8B7E6FFFF                      call malloc
 10309 00007A46 C60002                          mov byte [rax], T_char
 10310 00007A49 885801                          mov byte [rax + 1], bl
 10311 00007A4C C9                              leave
 10312 00007A4D C22000                          ret AND_KILL_FRAME(2)
 10313                                  
 10314                                  L_code_ptr_vector_ref:
 10315 00007A50 C8000000                        enter 0, 0
 10316 00007A54 48837D1802                      cmp COUNT, 2
 10317 00007A59 0F85AF030000                    jne L_error_arg_count_2
 10318 00007A5F 488B7D20                        mov rdi, PARAM(0)
 10319                                          assert_vector(rdi)
    53 00007A63 803F22              <1>  cmp byte [%1], %2
    54 00007A66 0F8541040000        <1>  jne L_error_incorrect_type
 10320 00007A6C 488B7528                        mov rsi, PARAM(1)
 10321                                          assert_integer(rsi)
    53 00007A70 803E11              <1>  cmp byte [%1], %2
    54 00007A73 0F8534040000        <1>  jne L_error_incorrect_type
 10322 00007A79 488B5701                        mov rdx, qword [rdi + 1]
 10323 00007A7D 488B4E01                        mov rcx, qword [rsi + 1]
 10324 00007A81 4839D1                          cmp rcx, rdx
 10325 00007A84 0F8DB8020000                    jge L_error_integer_range
 10326 00007A8A 4883F900                        cmp rcx, 0
 10327 00007A8E 0F8CAE020000                    jl L_error_integer_range
 10328 00007A94 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
 10329 00007A99 C9                              leave
 10330 00007A9A C22000                          ret AND_KILL_FRAME(2)
 10331                                  
 10332                                  L_code_ptr_vector_set:
 10333 00007A9D C8000000                        enter 0, 0
 10334 00007AA1 48837D1803                      cmp COUNT, 3
 10335 00007AA6 0F85CC030000                    jne L_error_arg_count_3
 10336 00007AAC 488B7D20                        mov rdi, PARAM(0)
 10337                                          assert_vector(rdi)
    53 00007AB0 803F22              <1>  cmp byte [%1], %2
    54 00007AB3 0F85F4030000        <1>  jne L_error_incorrect_type
 10338 00007AB9 488B7528                        mov rsi, PARAM(1)
 10339                                          assert_integer(rsi)
    53 00007ABD 803E11              <1>  cmp byte [%1], %2
    54 00007AC0 0F85E7030000        <1>  jne L_error_incorrect_type
 10340 00007AC6 488B5701                        mov rdx, qword [rdi + 1]
 10341 00007ACA 488B4E01                        mov rcx, qword [rsi + 1]
 10342 00007ACE 4839D1                          cmp rcx, rdx
 10343 00007AD1 0F8D6B020000                    jge L_error_integer_range
 10344 00007AD7 4883F900                        cmp rcx, 0
 10345 00007ADB 0F8C61020000                    jl L_error_integer_range
 10346 00007AE1 488B4530                        mov rax, PARAM(2)
 10347 00007AE5 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
 10348 00007AEA 48B8-                           mov rax, sob_void
 10348 00007AEC [0000000000000000] 
 10349 00007AF4 C9                              leave
 10350 00007AF5 C22800                          ret AND_KILL_FRAME(3)
 10351                                  
 10352                                  L_code_ptr_string_set:
 10353 00007AF8 C8000000                        enter 0, 0
 10354 00007AFC 48837D1803                      cmp COUNT, 3
 10355 00007B01 0F8571030000                    jne L_error_arg_count_3
 10356 00007B07 488B7D20                        mov rdi, PARAM(0)
 10357                                          assert_string(rdi)
    53 00007B0B 803F03              <1>  cmp byte [%1], %2
    54 00007B0E 0F8599030000        <1>  jne L_error_incorrect_type
 10358 00007B14 488B7528                        mov rsi, PARAM(1)
 10359                                          assert_integer(rsi)
    53 00007B18 803E11              <1>  cmp byte [%1], %2
    54 00007B1B 0F858C030000        <1>  jne L_error_incorrect_type
 10360 00007B21 488B5701                        mov rdx, qword [rdi + 1]
 10361 00007B25 488B4E01                        mov rcx, qword [rsi + 1]
 10362 00007B29 4839D1                          cmp rcx, rdx
 10363 00007B2C 0F8D10020000                    jge L_error_integer_range
 10364 00007B32 4883F900                        cmp rcx, 0
 10365 00007B36 0F8C06020000                    jl L_error_integer_range
 10366 00007B3C 488B4530                        mov rax, PARAM(2)
 10367                                          assert_char(rax)
    53 00007B40 803802              <1>  cmp byte [%1], %2
    54 00007B43 0F8564030000        <1>  jne L_error_incorrect_type
 10368 00007B49 8A4001                          mov al, byte [rax + 1]
 10369 00007B4C 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
 10370 00007B50 48B8-                           mov rax, sob_void
 10370 00007B52 [0000000000000000] 
 10371 00007B5A C9                              leave
 10372 00007B5B C22800                          ret AND_KILL_FRAME(3)
 10373                                  
 10374                                  L_code_ptr_make_vector:
 10375 00007B5E C8000000                        enter 0, 0
 10376 00007B62 48837D1802                      cmp COUNT, 2
 10377 00007B67 0F85A1020000                    jne L_error_arg_count_2
 10378 00007B6D 488B4D20                        mov rcx, PARAM(0)
 10379                                          assert_integer(rcx)
    53 00007B71 803911              <1>  cmp byte [%1], %2
    54 00007B74 0F8533030000        <1>  jne L_error_incorrect_type
 10380 00007B7A 488B4901                        mov rcx, qword [rcx + 1]
 10381 00007B7E 4883F900                        cmp rcx, 0
 10382 00007B82 0F8CBA010000                    jl L_error_integer_range
 10383 00007B88 488B5528                        mov rdx, PARAM(1)
 10384 00007B8C 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
 10385 00007B94 E864E5FFFF                      call malloc
 10386 00007B99 C60022                          mov byte [rax], T_vector
 10387 00007B9C 48894801                        mov qword [rax + 1], rcx
 10388 00007BA0 41B800000000                    mov r8, 0
 10389                                  .L0:
 10390 00007BA6 4939C8                          cmp r8, rcx
 10391 00007BA9 740A                            je .L1
 10392 00007BAB 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
 10393 00007BB0 49FFC0                          inc r8
 10394 00007BB3 EBF1                            jmp .L0
 10395                                  .L1:
 10396 00007BB5 C9                              leave
 10397 00007BB6 C22000                          ret AND_KILL_FRAME(2)
 10398                                          
 10399                                  L_code_ptr_make_string:
 10400 00007BB9 C8000000                        enter 0, 0
 10401 00007BBD 48837D1802                      cmp COUNT, 2
 10402 00007BC2 0F8546020000                    jne L_error_arg_count_2
 10403 00007BC8 488B4D20                        mov rcx, PARAM(0)
 10404                                          assert_integer(rcx)
    53 00007BCC 803911              <1>  cmp byte [%1], %2
    54 00007BCF 0F85D8020000        <1>  jne L_error_incorrect_type
 10405 00007BD5 488B4901                        mov rcx, qword [rcx + 1]
 10406 00007BD9 4883F900                        cmp rcx, 0
 10407 00007BDD 0F8C5F010000                    jl L_error_integer_range
 10408 00007BE3 488B5528                        mov rdx, PARAM(1)
 10409                                          assert_char(rdx)
    53 00007BE7 803A02              <1>  cmp byte [%1], %2
    54 00007BEA 0F85BD020000        <1>  jne L_error_incorrect_type
 10410 00007BF0 8A5201                          mov dl, byte [rdx + 1]
 10411 00007BF3 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
 10412 00007BF7 E801E5FFFF                      call malloc
 10413 00007BFC C60003                          mov byte [rax], T_string
 10414 00007BFF 48894801                        mov qword [rax + 1], rcx
 10415 00007C03 41B800000000                    mov r8, 0
 10416                                  .L0:
 10417 00007C09 4939C8                          cmp r8, rcx
 10418 00007C0C 740A                            je .L1
 10419 00007C0E 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
 10420 00007C13 49FFC0                          inc r8
 10421 00007C16 EBF1                            jmp .L0
 10422                                  .L1:
 10423 00007C18 C9                              leave
 10424 00007C19 C22000                          ret AND_KILL_FRAME(2)
 10425                                  
 10426                                  L_code_ptr_numerator:
 10427 00007C1C C8000000                        enter 0, 0
 10428 00007C20 48837D1801                      cmp COUNT, 1
 10429 00007C25 0F85AE010000                    jne L_error_arg_count_1
 10430 00007C2B 488B4520                        mov rax, PARAM(0)
 10431                                          assert_fraction(rax)
    53 00007C2F 803812              <1>  cmp byte [%1], %2
    54 00007C32 0F8575020000        <1>  jne L_error_incorrect_type
 10432 00007C38 488B7801                        mov rdi, qword [rax + 1]
 10433 00007C3C E8E7000000                      call make_integer
 10434 00007C41 C9                              leave
 10435 00007C42 C21800                          ret AND_KILL_FRAME(1)
 10436                                          
 10437                                  L_code_ptr_denominator:
 10438 00007C45 C8000000                        enter 0, 0
 10439 00007C49 48837D1801                      cmp COUNT, 1
 10440 00007C4E 0F8585010000                    jne L_error_arg_count_1
 10441 00007C54 488B4520                        mov rax, PARAM(0)
 10442                                          assert_fraction(rax)
    53 00007C58 803812              <1>  cmp byte [%1], %2
    54 00007C5B 0F854C020000        <1>  jne L_error_incorrect_type
 10443 00007C61 488B7809                        mov rdi, qword [rax + 1 + 8]
 10444 00007C65 E8BE000000                      call make_integer
 10445 00007C6A C9                              leave
 10446 00007C6B C21800                          ret AND_KILL_FRAME(1)
 10447                                  
 10448                                  L_code_ptr_is_eq:
 10449 00007C6E C8000000                	enter 0, 0
 10450 00007C72 48837D1802              	cmp COUNT, 2
 10451 00007C77 0F8591010000            	jne L_error_arg_count_2
 10452 00007C7D 488B7D20                	mov rdi, PARAM(0)
 10453 00007C81 488B7528                	mov rsi, PARAM(1)
 10454 00007C85 4839F7                  	cmp rdi, rsi
 10455 00007C88 746C                    	je .L_eq_true
 10456 00007C8A 8A17                    	mov dl, byte [rdi]
 10457 00007C8C 3A16                    	cmp dl, byte [rsi]
 10458 00007C8E 7572                    	jne .L_eq_false
 10459 00007C90 80FA02                  	cmp dl, T_char
 10460 00007C93 7459                    	je .L_char
 10461 00007C95 80FA41                  	cmp dl, T_interned_symbol
 10462 00007C98 7440                    	je .L_interned_symbol
 10463 00007C9A 80FA42                          cmp dl, T_uninterned_symbol
 10464 00007C9D 7443                            je .L_uninterned_symbol
 10465 00007C9F 80FA13                  	cmp dl, T_real
 10466 00007CA2 742E                    	je .L_real
 10467 00007CA4 80FA12                  	cmp dl, T_fraction
 10468 00007CA7 7413                    	je .L_fraction
 10469 00007CA9 80FA11                          cmp dl, T_integer
 10470 00007CAC 7402                            je .L_integer
 10471 00007CAE EB52                    	jmp .L_eq_false
 10472                                  .L_integer:
 10473 00007CB0 488B4601                        mov rax, qword [rsi + 1]
 10474 00007CB4 483B4701                        cmp rax, qword [rdi + 1]
 10475 00007CB8 7548                            jne .L_eq_false
 10476 00007CBA EB3A                            jmp .L_eq_true
 10477                                  .L_fraction:
 10478 00007CBC 488B4601                	mov rax, qword [rsi + 1]
 10479 00007CC0 483B4701                	cmp rax, qword [rdi + 1]
 10480 00007CC4 753C                    	jne .L_eq_false
 10481 00007CC6 488B4609                	mov rax, qword [rsi + 1 + 8]
 10482 00007CCA 483B4709                	cmp rax, qword [rdi + 1 + 8]
 10483 00007CCE 7532                    	jne .L_eq_false
 10484 00007CD0 EB24                    	jmp .L_eq_true
 10485                                  .L_real:
 10486 00007CD2 488B4601                	mov rax, qword [rsi + 1]
 10487 00007CD6 483B4701                	cmp rax, qword [rdi + 1]
 10488                                  .L_interned_symbol:
 10489                                  	; never reached, because interned_symbols are static!
 10490                                  	; but I'm keeping it in case, I'll ever change
 10491                                  	; the implementation
 10492 00007CDA 488B4601                	mov rax, qword [rsi + 1]
 10493 00007CDE 483B4701                	cmp rax, qword [rdi + 1]
 10494                                  .L_uninterned_symbol:
 10495 00007CE2 4C8B4701                        mov r8, qword [rdi + 1]
 10496 00007CE6 4C3B4601                        cmp r8, qword [rsi + 1]
 10497 00007CEA 7516                            jne .L_eq_false
 10498 00007CEC EB08                            jmp .L_eq_true
 10499                                  .L_char:
 10500 00007CEE 8A5E01                  	mov bl, byte [rsi + 1]
 10501 00007CF1 3A5F01                  	cmp bl, byte [rdi + 1]
 10502 00007CF4 750C                    	jne .L_eq_false
 10503                                  .L_eq_true:
 10504 00007CF6 48B8-                   	mov rax, sob_boolean_true
 10504 00007CF8 [0300000000000000] 
 10505 00007D00 EB0A                    	jmp .L_eq_exit
 10506                                  .L_eq_false:
 10507 00007D02 48B8-                   	mov rax, sob_boolean_false
 10507 00007D04 [0200000000000000] 
 10508                                  .L_eq_exit:
 10509 00007D0C C9                      	leave
 10510 00007D0D C22000                  	ret AND_KILL_FRAME(2)
 10511                                  
 10512                                  make_real:
 10513 00007D10 C8000000                        enter 0, 0
 10514 00007D14 BF09000000                      mov rdi, (1 + 8)
 10515 00007D19 E8DFE3FFFF                      call malloc
 10516 00007D1E C60013                          mov byte [rax], T_real
 10517 00007D21 F20F114001                      movsd qword [rax + 1], xmm0
 10518 00007D26 C9                              leave 
 10519 00007D27 C3                              ret
 10520                                          
 10521                                  make_integer:
 10522 00007D28 C8000000                        enter 0, 0
 10523 00007D2C 4889FE                          mov rsi, rdi
 10524 00007D2F BF09000000                      mov rdi, (1 + 8)
 10525 00007D34 E8C4E3FFFF                      call malloc
 10526 00007D39 C60011                          mov byte [rax], T_integer
 10527 00007D3C 48897001                        mov qword [rax + 1], rsi
 10528 00007D40 C9                              leave
 10529 00007D41 C3                              ret
 10530                                          
 10531                                  L_error_integer_range:
 10532 00007D42 488B3C25[00000000]              mov rdi, qword [stderr]
 10533 00007D4A 48BE-                           mov rsi, fmt_integer_range
 10533 00007D4C [8B0F000000000000] 
 10534 00007D54 B800000000                      mov rax, 0
 10535                                          ENTER
    44 00007D59 C8000000            <1>  enter 0, 0
    45 00007D5D 4883E4F0            <1>  and rsp, ~15
 10536 00007D61 E8(00000000)                    call fprintf
 10537                                          LEAVE
    49 00007D66 C9                  <1>  leave
 10538 00007D67 48C7C0FBFFFFFF                  mov rax, -5
 10539 00007D6E E8(00000000)                    call exit
 10540                                  
 10541                                  L_error_arg_negative:
 10542 00007D73 488B3C25[00000000]              mov rdi, qword [stderr]
 10543 00007D7B 48BE-                           mov rsi, fmt_arg_negative
 10543 00007D7D [630E000000000000] 
 10544 00007D85 B800000000                      mov rax, 0
 10545                                          ENTER
    44 00007D8A C8000000            <1>  enter 0, 0
    45 00007D8E 4883E4F0            <1>  and rsp, ~15
 10546 00007D92 E8(00000000)                    call fprintf
 10547                                          LEAVE
    49 00007D97 C9                  <1>  leave
 10548 00007D98 48C7C0FDFFFFFF                  mov rax, -3
 10549 00007D9F E8(00000000)                    call exit
 10550                                  
 10551                                  L_error_arg_count_0:
 10552 00007DA4 488B3C25[00000000]              mov rdi, qword [stderr]
 10553 00007DAC 48BE-                           mov rsi, fmt_arg_count_0
 10553 00007DAE [890E000000000000] 
 10554 00007DB6 488B5518                        mov rdx, COUNT
 10555 00007DBA B800000000                      mov rax, 0
 10556                                          ENTER
    44 00007DBF C8000000            <1>  enter 0, 0
    45 00007DC3 4883E4F0            <1>  and rsp, ~15
 10557 00007DC7 E8(00000000)                    call fprintf
 10558                                          LEAVE
    49 00007DCC C9                  <1>  leave
 10559 00007DCD 48C7C0FDFFFFFF                  mov rax, -3
 10560 00007DD4 E8(00000000)                    call exit
 10561                                  
 10562                                  L_error_arg_count_1:
 10563 00007DD9 488B3C25[00000000]              mov rdi, qword [stderr]
 10564 00007DE1 48BE-                           mov rsi, fmt_arg_count_1
 10564 00007DE3 [B10E000000000000] 
 10565 00007DEB 488B5518                        mov rdx, COUNT
 10566 00007DEF B800000000                      mov rax, 0
 10567                                          ENTER
    44 00007DF4 C8000000            <1>  enter 0, 0
    45 00007DF8 4883E4F0            <1>  and rsp, ~15
 10568 00007DFC E8(00000000)                    call fprintf
 10569                                          LEAVE
    49 00007E01 C9                  <1>  leave
 10570 00007E02 48C7C0FDFFFFFF                  mov rax, -3
 10571 00007E09 E8(00000000)                    call exit
 10572                                  
 10573                                  L_error_arg_count_2:
 10574 00007E0E 488B3C25[00000000]              mov rdi, qword [stderr]
 10575 00007E16 48BE-                           mov rsi, fmt_arg_count_2
 10575 00007E18 [170F000000000000] 
 10576 00007E20 488B5518                        mov rdx, COUNT
 10577 00007E24 B800000000                      mov rax, 0
 10578                                          ENTER
    44 00007E29 C8000000            <1>  enter 0, 0
    45 00007E2D 4883E4F0            <1>  and rsp, ~15
 10579 00007E31 E8(00000000)                    call fprintf
 10580                                          LEAVE
    49 00007E36 C9                  <1>  leave
 10581 00007E37 48C7C0FDFFFFFF                  mov rax, -3
 10582 00007E3E E8(00000000)                    call exit
 10583                                  
 10584                                  L_error_arg_count_12:
 10585 00007E43 488B3C25[00000000]              mov rdi, qword [stderr]
 10586 00007E4B 48BE-                           mov rsi, fmt_arg_count_12
 10586 00007E4D [D70E000000000000] 
 10587 00007E55 488B5518                        mov rdx, COUNT
 10588 00007E59 B800000000                      mov rax, 0
 10589                                          ENTER
    44 00007E5E C8000000            <1>  enter 0, 0
    45 00007E62 4883E4F0            <1>  and rsp, ~15
 10590 00007E66 E8(00000000)                    call fprintf
 10591                                          LEAVE
    49 00007E6B C9                  <1>  leave
 10592 00007E6C 48C7C0FDFFFFFF                  mov rax, -3
 10593 00007E73 E8(00000000)                    call exit
 10594                                  
 10595                                  L_error_arg_count_3:
 10596 00007E78 488B3C25[00000000]              mov rdi, qword [stderr]
 10597 00007E80 48BE-                           mov rsi, fmt_arg_count_3
 10597 00007E82 [3E0F000000000000] 
 10598 00007E8A 488B5518                        mov rdx, COUNT
 10599 00007E8E B800000000                      mov rax, 0
 10600                                          ENTER
    44 00007E93 C8000000            <1>  enter 0, 0
    45 00007E97 4883E4F0            <1>  and rsp, ~15
 10601 00007E9B E8(00000000)                    call fprintf
 10602                                          LEAVE
    49 00007EA0 C9                  <1>  leave
 10603 00007EA1 48C7C0FDFFFFFF                  mov rax, -3
 10604 00007EA8 E8(00000000)                    call exit
 10605                                          
 10606                                  L_error_incorrect_type:
 10607 00007EAD 488B3C25[00000000]              mov rdi, qword [stderr]
 10608 00007EB5 48BE-                           mov rsi, fmt_type
 10608 00007EB7 [670F000000000000] 
 10609 00007EBF B800000000                      mov rax, 0
 10610                                          ENTER
    44 00007EC4 C8000000            <1>  enter 0, 0
    45 00007EC8 4883E4F0            <1>  and rsp, ~15
 10611 00007ECC E8(00000000)                    call fprintf
 10612                                          LEAVE
    49 00007ED1 C9                  <1>  leave
 10613 00007ED2 48C7C0FCFFFFFF                  mov rax, -4
 10614 00007ED9 E8(00000000)                    call exit
 10615                                  
 10616                                  L_error_division_by_zero:
 10617 00007EDE 488B3C25[00000000]              mov rdi, qword [stderr]
 10618 00007EE6 48BE-                           mov rsi, fmt_division_by_zero
 10618 00007EE8 [A80F000000000000] 
 10619 00007EF0 B800000000                      mov rax, 0
 10620                                          ENTER
    44 00007EF5 C8000000            <1>  enter 0, 0
    45 00007EF9 4883E4F0            <1>  and rsp, ~15
 10621 00007EFD E8(00000000)                    call fprintf
 10622                                          LEAVE
    49 00007F02 C9                  <1>  leave
 10623 00007F03 48C7C0F8FFFFFF                  mov rax, -8
 10624 00007F0A E8(00000000)                    call exit
 10625                                  
 10626                                  section .data
 10627                                  gensym_count:
 10628 00000E58 0000000000000000                dq 0
 10629                                  fmt_char:
 10630 00000E60 256300                          db `%c\0`
 10631                                  fmt_arg_negative:
 10632 00000E63 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
 10632 00000E6C 7267756D656E742063-
 10632 00000E75 616E6E6F7420626520-
 10632 00000E7E 6E656761746976652E-
 10632 00000E87 0A00               
 10633                                  fmt_arg_count_0:
 10634 00000E89 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
 10634 00000E92 74696E67207A65726F-
 10634 00000E9B 20617267756D656E74-
 10634 00000EA4 732E20466F756E6420-
 10634 00000EAD 25640A00           
 10635                                  fmt_arg_count_1:
 10636 00000EB1 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
 10636 00000EBA 74696E67206F6E6520-
 10636 00000EC3 617267756D656E742E-
 10636 00000ECC 20466F756E64202564-
 10636 00000ED5 0A00               
 10637                                  fmt_arg_count_12:
 10638 00000ED7 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
 10638 00000EE0 74696E67206F6E6520-
 10638 00000EE9 726571756972656420-
 10638 00000EF2 616E64206F6E65206F-
 10638 00000EFB 7074696F6E616C2061-
 10638 00000F04 7267756D656E742E20-
 10638 00000F0D 466F756E642025640A-
 10638 00000F16 00                 
 10639                                  fmt_arg_count_2:
 10640 00000F17 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
 10640 00000F20 74696E672074776F20-
 10640 00000F29 617267756D656E7473-
 10640 00000F32 2E20466F756E642025-
 10640 00000F3B 640A00             
 10641                                  fmt_arg_count_3:
 10642 00000F3E 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
 10642 00000F47 74696E672074687265-
 10642 00000F50 6520617267756D656E-
 10642 00000F59 74732E20466F756E64-
 10642 00000F62 2025640A00         
 10643                                  fmt_type:
 10644 00000F67 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
 10644 00000F70 696F6E207061737365-
 10644 00000F79 6420696E636F727265-
 10644 00000F82 637420747970650A00 
 10645                                  fmt_integer_range:
 10646 00000F8B 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
 10646 00000F94 7265637420696E7465-
 10646 00000F9D 6765722072616E6765-
 10646 00000FA6 0A00               
 10647                                  fmt_division_by_zero:
 10648 00000FA8 212121204469766973-             db `!!! Division by zero\n\0`
 10648 00000FB1 696F6E206279207A65-
 10648 00000FBA 726F0A00           
 10649                                  fmt_scheme_error_part_1:
 10650 00000FBE 0A2121212054686520-             db `\n!!! The procedure \0`
 10650 00000FC7 70726F636564757265-
 10650 00000FD0 2000               
 10651                                  fmt_scheme_error_part_2:
 10652 00000FD2 2061736B656420746F-             db ` asked to terminate the program\n`
 10652 00000FDB 207465726D696E6174-
 10652 00000FE4 65207468652070726F-
 10652 00000FED 6772616D0A         
 10653 00000FF2 202020207769746820-             db `    with the following message:\n\n\0`
 10653 00000FFB 74686520666F6C6C6F-
 10653 00001004 77696E67206D657373-
 10653 0000100D 6167653A0A0A00     
 10654                                  fmt_scheme_error_part_3:
 10655 00001014 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
 10655 0000101D 210A0A00           
