     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "boolean-false?"
   441 0000056E 0E00000000000000        	dq 14
   442 00000576 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   443 0000057E 66616C73653F            	db 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3F
   444                                  	; L_constants + 1412:
   445 00000584 03                      	db T_string	; "boolean-true?"
   446 00000585 0D00000000000000        	dq 13
   447 0000058D 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   448 00000595 747275653F              	db 0x74, 0x72, 0x75, 0x65, 0x3F
   449                                  	; L_constants + 1434:
   450 0000059A 03                      	db T_string	; "primitive?"
   451 0000059B 0A00000000000000        	dq 10
   452 000005A3 7072696D69746976        	db 0x70, 0x72, 0x69, 0x6D, 0x69, 0x74, 0x69, 0x76
   453 000005AB 653F                    	db 0x65, 0x3F
   454                                  	; L_constants + 1453:
   455 000005AD 03                      	db T_string	; "length"
   456 000005AE 0600000000000000        	dq 6
   457 000005B6 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   458                                  	; L_constants + 1468:
   459 000005BC 03                      	db T_string	; "make-list"
   460 000005BD 0900000000000000        	dq 9
   461 000005C5 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   462 000005CD 74                      	db 0x74
   463                                  	; L_constants + 1486:
   464 000005CE 03                      	db T_string	; "return"
   465 000005CF 0600000000000000        	dq 6
   466 000005D7 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
   467                                  	; L_constants + 1501:
   468 000005DD 03                      	db T_string	; "caar"
   469 000005DE 0400000000000000        	dq 4
   470 000005E6 63616172                	db 0x63, 0x61, 0x61, 0x72
   471                                  	; L_constants + 1514:
   472 000005EA 03                      	db T_string	; "cadr"
   473 000005EB 0400000000000000        	dq 4
   474 000005F3 63616472                	db 0x63, 0x61, 0x64, 0x72
   475                                  	; L_constants + 1527:
   476 000005F7 03                      	db T_string	; "cdar"
   477 000005F8 0400000000000000        	dq 4
   478 00000600 63646172                	db 0x63, 0x64, 0x61, 0x72
   479                                  	; L_constants + 1540:
   480 00000604 03                      	db T_string	; "cddr"
   481 00000605 0400000000000000        	dq 4
   482 0000060D 63646472                	db 0x63, 0x64, 0x64, 0x72
   483                                  	; L_constants + 1553:
   484 00000611 03                      	db T_string	; "caaar"
   485 00000612 0500000000000000        	dq 5
   486 0000061A 6361616172              	db 0x63, 0x61, 0x61, 0x61, 0x72
   487                                  	; L_constants + 1567:
   488 0000061F 03                      	db T_string	; "caadr"
   489 00000620 0500000000000000        	dq 5
   490 00000628 6361616472              	db 0x63, 0x61, 0x61, 0x64, 0x72
   491                                  	; L_constants + 1581:
   492 0000062D 03                      	db T_string	; "cadar"
   493 0000062E 0500000000000000        	dq 5
   494 00000636 6361646172              	db 0x63, 0x61, 0x64, 0x61, 0x72
   495                                  	; L_constants + 1595:
   496 0000063B 03                      	db T_string	; "caddr"
   497 0000063C 0500000000000000        	dq 5
   498 00000644 6361646472              	db 0x63, 0x61, 0x64, 0x64, 0x72
   499                                  	; L_constants + 1609:
   500 00000649 03                      	db T_string	; "cdaar"
   501 0000064A 0500000000000000        	dq 5
   502 00000652 6364616172              	db 0x63, 0x64, 0x61, 0x61, 0x72
   503                                  	; L_constants + 1623:
   504 00000657 03                      	db T_string	; "cdadr"
   505 00000658 0500000000000000        	dq 5
   506 00000660 6364616472              	db 0x63, 0x64, 0x61, 0x64, 0x72
   507                                  	; L_constants + 1637:
   508 00000665 03                      	db T_string	; "cddar"
   509 00000666 0500000000000000        	dq 5
   510 0000066E 6364646172              	db 0x63, 0x64, 0x64, 0x61, 0x72
   511                                  	; L_constants + 1651:
   512 00000673 03                      	db T_string	; "cdddr"
   513 00000674 0500000000000000        	dq 5
   514 0000067C 6364646472              	db 0x63, 0x64, 0x64, 0x64, 0x72
   515                                  	; L_constants + 1665:
   516 00000681 03                      	db T_string	; "caaaar"
   517 00000682 0600000000000000        	dq 6
   518 0000068A 636161616172            	db 0x63, 0x61, 0x61, 0x61, 0x61, 0x72
   519                                  	; L_constants + 1680:
   520 00000690 03                      	db T_string	; "caaadr"
   521 00000691 0600000000000000        	dq 6
   522 00000699 636161616472            	db 0x63, 0x61, 0x61, 0x61, 0x64, 0x72
   523                                  	; L_constants + 1695:
   524 0000069F 03                      	db T_string	; "caadar"
   525 000006A0 0600000000000000        	dq 6
   526 000006A8 636161646172            	db 0x63, 0x61, 0x61, 0x64, 0x61, 0x72
   527                                  	; L_constants + 1710:
   528 000006AE 03                      	db T_string	; "caaddr"
   529 000006AF 0600000000000000        	dq 6
   530 000006B7 636161646472            	db 0x63, 0x61, 0x61, 0x64, 0x64, 0x72
   531                                  	; L_constants + 1725:
   532 000006BD 03                      	db T_string	; "cadaar"
   533 000006BE 0600000000000000        	dq 6
   534 000006C6 636164616172            	db 0x63, 0x61, 0x64, 0x61, 0x61, 0x72
   535                                  	; L_constants + 1740:
   536 000006CC 03                      	db T_string	; "cadadr"
   537 000006CD 0600000000000000        	dq 6
   538 000006D5 636164616472            	db 0x63, 0x61, 0x64, 0x61, 0x64, 0x72
   539                                  	; L_constants + 1755:
   540 000006DB 03                      	db T_string	; "caddar"
   541 000006DC 0600000000000000        	dq 6
   542 000006E4 636164646172            	db 0x63, 0x61, 0x64, 0x64, 0x61, 0x72
   543                                  	; L_constants + 1770:
   544 000006EA 03                      	db T_string	; "cadddr"
   545 000006EB 0600000000000000        	dq 6
   546 000006F3 636164646472            	db 0x63, 0x61, 0x64, 0x64, 0x64, 0x72
   547                                  	; L_constants + 1785:
   548 000006F9 03                      	db T_string	; "cdaaar"
   549 000006FA 0600000000000000        	dq 6
   550 00000702 636461616172            	db 0x63, 0x64, 0x61, 0x61, 0x61, 0x72
   551                                  	; L_constants + 1800:
   552 00000708 03                      	db T_string	; "cdaadr"
   553 00000709 0600000000000000        	dq 6
   554 00000711 636461616472            	db 0x63, 0x64, 0x61, 0x61, 0x64, 0x72
   555                                  	; L_constants + 1815:
   556 00000717 03                      	db T_string	; "cdadar"
   557 00000718 0600000000000000        	dq 6
   558 00000720 636461646172            	db 0x63, 0x64, 0x61, 0x64, 0x61, 0x72
   559                                  	; L_constants + 1830:
   560 00000726 03                      	db T_string	; "cdaddr"
   561 00000727 0600000000000000        	dq 6
   562 0000072F 636461646472            	db 0x63, 0x64, 0x61, 0x64, 0x64, 0x72
   563                                  	; L_constants + 1845:
   564 00000735 03                      	db T_string	; "cddaar"
   565 00000736 0600000000000000        	dq 6
   566 0000073E 636464616172            	db 0x63, 0x64, 0x64, 0x61, 0x61, 0x72
   567                                  	; L_constants + 1860:
   568 00000744 03                      	db T_string	; "cddadr"
   569 00000745 0600000000000000        	dq 6
   570 0000074D 636464616472            	db 0x63, 0x64, 0x64, 0x61, 0x64, 0x72
   571                                  	; L_constants + 1875:
   572 00000753 03                      	db T_string	; "cdddar"
   573 00000754 0600000000000000        	dq 6
   574 0000075C 636464646172            	db 0x63, 0x64, 0x64, 0x64, 0x61, 0x72
   575                                  	; L_constants + 1890:
   576 00000762 03                      	db T_string	; "cddddr"
   577 00000763 0600000000000000        	dq 6
   578 0000076B 636464646472            	db 0x63, 0x64, 0x64, 0x64, 0x64, 0x72
   579                                  	; L_constants + 1905:
   580 00000771 03                      	db T_string	; "list?"
   581 00000772 0500000000000000        	dq 5
   582 0000077A 6C6973743F              	db 0x6C, 0x69, 0x73, 0x74, 0x3F
   583                                  	; L_constants + 1919:
   584 0000077F 03                      	db T_string	; "list"
   585 00000780 0400000000000000        	dq 4
   586 00000788 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   587                                  	; L_constants + 1932:
   588 0000078C 03                      	db T_string	; "not"
   589 0000078D 0300000000000000        	dq 3
   590 00000795 6E6F74                  	db 0x6E, 0x6F, 0x74
   591                                  	; L_constants + 1944:
   592 00000798 03                      	db T_string	; "rational?"
   593 00000799 0900000000000000        	dq 9
   594 000007A1 726174696F6E616C        	db 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x61, 0x6C
   595 000007A9 3F                      	db 0x3F
   596                                  	; L_constants + 1962:
   597 000007AA 03                      	db T_string	; "list*"
   598 000007AB 0500000000000000        	dq 5
   599 000007B3 6C6973742A              	db 0x6C, 0x69, 0x73, 0x74, 0x2A
   600                                  	; L_constants + 1976:
   601 000007B8 03                      	db T_string	; "whatever"
   602 000007B9 0800000000000000        	dq 8
   603 000007C1 7768617465766572        	db 0x77, 0x68, 0x61, 0x74, 0x65, 0x76, 0x65, 0x72
   604                                  	; L_constants + 1993:
   605 000007C9 41                      	db T_interned_symbol	; whatever
   606 000007CA [B807000000000000]      	dq L_constants + 1976
   607                                  	; L_constants + 2002:
   608 000007D2 03                      	db T_string	; "apply"
   609 000007D3 0500000000000000        	dq 5
   610 000007DB 6170706C79              	db 0x61, 0x70, 0x70, 0x6C, 0x79
   611                                  	; L_constants + 2016:
   612 000007E0 11                      	db T_integer	; 1
   613 000007E1 0100000000000000        	dq 1
   614                                  free_var_0:	; location of __bin-apply
   615 000007E9 [F107000000000000]      	dq .undefined_object
   616                                  .undefined_object:
   617 000007F1 05                      	db T_undefined
   618 000007F2 [0102000000000000]      	dq L_constants + 513
   619                                  
   620                                  free_var_1:	; location of apply
   621 000007FA [0208000000000000]      	dq .undefined_object
   622                                  .undefined_object:
   623 00000802 05                      	db T_undefined
   624 00000803 [D207000000000000]      	dq L_constants + 2002
   625                                  
   626                                  free_var_2:	; location of caaaar
   627 0000080B [1308000000000000]      	dq .undefined_object
   628                                  .undefined_object:
   629 00000813 05                      	db T_undefined
   630 00000814 [8106000000000000]      	dq L_constants + 1665
   631                                  
   632                                  free_var_3:	; location of caaadr
   633 0000081C [2408000000000000]      	dq .undefined_object
   634                                  .undefined_object:
   635 00000824 05                      	db T_undefined
   636 00000825 [9006000000000000]      	dq L_constants + 1680
   637                                  
   638                                  free_var_4:	; location of caaar
   639 0000082D [3508000000000000]      	dq .undefined_object
   640                                  .undefined_object:
   641 00000835 05                      	db T_undefined
   642 00000836 [1106000000000000]      	dq L_constants + 1553
   643                                  
   644                                  free_var_5:	; location of caadar
   645 0000083E [4608000000000000]      	dq .undefined_object
   646                                  .undefined_object:
   647 00000846 05                      	db T_undefined
   648 00000847 [9F06000000000000]      	dq L_constants + 1695
   649                                  
   650                                  free_var_6:	; location of caaddr
   651 0000084F [5708000000000000]      	dq .undefined_object
   652                                  .undefined_object:
   653 00000857 05                      	db T_undefined
   654 00000858 [AE06000000000000]      	dq L_constants + 1710
   655                                  
   656                                  free_var_7:	; location of caadr
   657 00000860 [6808000000000000]      	dq .undefined_object
   658                                  .undefined_object:
   659 00000868 05                      	db T_undefined
   660 00000869 [1F06000000000000]      	dq L_constants + 1567
   661                                  
   662                                  free_var_8:	; location of caar
   663 00000871 [7908000000000000]      	dq .undefined_object
   664                                  .undefined_object:
   665 00000879 05                      	db T_undefined
   666 0000087A [DD05000000000000]      	dq L_constants + 1501
   667                                  
   668                                  free_var_9:	; location of cadaar
   669 00000882 [8A08000000000000]      	dq .undefined_object
   670                                  .undefined_object:
   671 0000088A 05                      	db T_undefined
   672 0000088B [BD06000000000000]      	dq L_constants + 1725
   673                                  
   674                                  free_var_10:	; location of cadadr
   675 00000893 [9B08000000000000]      	dq .undefined_object
   676                                  .undefined_object:
   677 0000089B 05                      	db T_undefined
   678 0000089C [CC06000000000000]      	dq L_constants + 1740
   679                                  
   680                                  free_var_11:	; location of cadar
   681 000008A4 [AC08000000000000]      	dq .undefined_object
   682                                  .undefined_object:
   683 000008AC 05                      	db T_undefined
   684 000008AD [2D06000000000000]      	dq L_constants + 1581
   685                                  
   686                                  free_var_12:	; location of caddar
   687 000008B5 [BD08000000000000]      	dq .undefined_object
   688                                  .undefined_object:
   689 000008BD 05                      	db T_undefined
   690 000008BE [DB06000000000000]      	dq L_constants + 1755
   691                                  
   692                                  free_var_13:	; location of cadddr
   693 000008C6 [CE08000000000000]      	dq .undefined_object
   694                                  .undefined_object:
   695 000008CE 05                      	db T_undefined
   696 000008CF [EA06000000000000]      	dq L_constants + 1770
   697                                  
   698                                  free_var_14:	; location of caddr
   699 000008D7 [DF08000000000000]      	dq .undefined_object
   700                                  .undefined_object:
   701 000008DF 05                      	db T_undefined
   702 000008E0 [3B06000000000000]      	dq L_constants + 1595
   703                                  
   704                                  free_var_15:	; location of cadr
   705 000008E8 [F008000000000000]      	dq .undefined_object
   706                                  .undefined_object:
   707 000008F0 05                      	db T_undefined
   708 000008F1 [EA05000000000000]      	dq L_constants + 1514
   709                                  
   710                                  free_var_16:	; location of car
   711 000008F9 [0109000000000000]      	dq .undefined_object
   712                                  .undefined_object:
   713 00000901 05                      	db T_undefined
   714 00000902 [1501000000000000]      	dq L_constants + 277
   715                                  
   716                                  free_var_17:	; location of cdaaar
   717 0000090A [1209000000000000]      	dq .undefined_object
   718                                  .undefined_object:
   719 00000912 05                      	db T_undefined
   720 00000913 [F906000000000000]      	dq L_constants + 1785
   721                                  
   722                                  free_var_18:	; location of cdaadr
   723 0000091B [2309000000000000]      	dq .undefined_object
   724                                  .undefined_object:
   725 00000923 05                      	db T_undefined
   726 00000924 [0807000000000000]      	dq L_constants + 1800
   727                                  
   728                                  free_var_19:	; location of cdaar
   729 0000092C [3409000000000000]      	dq .undefined_object
   730                                  .undefined_object:
   731 00000934 05                      	db T_undefined
   732 00000935 [4906000000000000]      	dq L_constants + 1609
   733                                  
   734                                  free_var_20:	; location of cdadar
   735 0000093D [4509000000000000]      	dq .undefined_object
   736                                  .undefined_object:
   737 00000945 05                      	db T_undefined
   738 00000946 [1707000000000000]      	dq L_constants + 1815
   739                                  
   740                                  free_var_21:	; location of cdaddr
   741 0000094E [5609000000000000]      	dq .undefined_object
   742                                  .undefined_object:
   743 00000956 05                      	db T_undefined
   744 00000957 [2607000000000000]      	dq L_constants + 1830
   745                                  
   746                                  free_var_22:	; location of cdadr
   747 0000095F [6709000000000000]      	dq .undefined_object
   748                                  .undefined_object:
   749 00000967 05                      	db T_undefined
   750 00000968 [5706000000000000]      	dq L_constants + 1623
   751                                  
   752                                  free_var_23:	; location of cdar
   753 00000970 [7809000000000000]      	dq .undefined_object
   754                                  .undefined_object:
   755 00000978 05                      	db T_undefined
   756 00000979 [F705000000000000]      	dq L_constants + 1527
   757                                  
   758                                  free_var_24:	; location of cddaar
   759 00000981 [8909000000000000]      	dq .undefined_object
   760                                  .undefined_object:
   761 00000989 05                      	db T_undefined
   762 0000098A [3507000000000000]      	dq L_constants + 1845
   763                                  
   764                                  free_var_25:	; location of cddadr
   765 00000992 [9A09000000000000]      	dq .undefined_object
   766                                  .undefined_object:
   767 0000099A 05                      	db T_undefined
   768 0000099B [4407000000000000]      	dq L_constants + 1860
   769                                  
   770                                  free_var_26:	; location of cddar
   771 000009A3 [AB09000000000000]      	dq .undefined_object
   772                                  .undefined_object:
   773 000009AB 05                      	db T_undefined
   774 000009AC [6506000000000000]      	dq L_constants + 1637
   775                                  
   776                                  free_var_27:	; location of cdddar
   777 000009B4 [BC09000000000000]      	dq .undefined_object
   778                                  .undefined_object:
   779 000009BC 05                      	db T_undefined
   780 000009BD [5307000000000000]      	dq L_constants + 1875
   781                                  
   782                                  free_var_28:	; location of cddddr
   783 000009C5 [CD09000000000000]      	dq .undefined_object
   784                                  .undefined_object:
   785 000009CD 05                      	db T_undefined
   786 000009CE [6207000000000000]      	dq L_constants + 1890
   787                                  
   788                                  free_var_29:	; location of cdddr
   789 000009D6 [DE09000000000000]      	dq .undefined_object
   790                                  .undefined_object:
   791 000009DE 05                      	db T_undefined
   792 000009DF [7306000000000000]      	dq L_constants + 1651
   793                                  
   794                                  free_var_30:	; location of cddr
   795 000009E7 [EF09000000000000]      	dq .undefined_object
   796                                  .undefined_object:
   797 000009EF 05                      	db T_undefined
   798 000009F0 [0406000000000000]      	dq L_constants + 1540
   799                                  
   800                                  free_var_31:	; location of cdr
   801 000009F8 [000A000000000000]      	dq .undefined_object
   802                                  .undefined_object:
   803 00000A00 05                      	db T_undefined
   804 00000A01 [2101000000000000]      	dq L_constants + 289
   805                                  
   806                                  free_var_32:	; location of cons
   807 00000A09 [110A000000000000]      	dq .undefined_object
   808                                  .undefined_object:
   809 00000A11 05                      	db T_undefined
   810 00000A12 [DF00000000000000]      	dq L_constants + 223
   811                                  
   812                                  free_var_33:	; location of fraction?
   813 00000A1A [220A000000000000]      	dq .undefined_object
   814                                  .undefined_object:
   815 00000A22 05                      	db T_undefined
   816 00000A23 [9800000000000000]      	dq L_constants + 152
   817                                  
   818                                  free_var_34:	; location of integer?
   819 00000A2B [330A000000000000]      	dq .undefined_object
   820                                  .undefined_object:
   821 00000A33 05                      	db T_undefined
   822 00000A34 [F001000000000000]      	dq L_constants + 496
   823                                  
   824                                  free_var_35:	; location of list
   825 00000A3C [440A000000000000]      	dq .undefined_object
   826                                  .undefined_object:
   827 00000A44 05                      	db T_undefined
   828 00000A45 [7F07000000000000]      	dq L_constants + 1919
   829                                  
   830                                  free_var_36:	; location of list*
   831 00000A4D [550A000000000000]      	dq .undefined_object
   832                                  .undefined_object:
   833 00000A55 05                      	db T_undefined
   834 00000A56 [AA07000000000000]      	dq L_constants + 1962
   835                                  
   836                                  free_var_37:	; location of list?
   837 00000A5E [660A000000000000]      	dq .undefined_object
   838                                  .undefined_object:
   839 00000A66 05                      	db T_undefined
   840 00000A67 [7107000000000000]      	dq L_constants + 1905
   841                                  
   842                                  free_var_38:	; location of not
   843 00000A6F [770A000000000000]      	dq .undefined_object
   844                                  .undefined_object:
   845 00000A77 05                      	db T_undefined
   846 00000A78 [8C07000000000000]      	dq L_constants + 1932
   847                                  
   848                                  free_var_39:	; location of null?
   849 00000A80 [880A000000000000]      	dq .undefined_object
   850                                  .undefined_object:
   851 00000A88 05                      	db T_undefined
   852 00000A89 [0600000000000000]      	dq L_constants + 6
   853                                  
   854                                  free_var_40:	; location of pair?
   855 00000A91 [990A000000000000]      	dq .undefined_object
   856                                  .undefined_object:
   857 00000A99 05                      	db T_undefined
   858 00000A9A [1400000000000000]      	dq L_constants + 20
   859                                  
   860                                  free_var_41:	; location of rational?
   861 00000AA2 [AA0A000000000000]      	dq .undefined_object
   862                                  .undefined_object:
   863 00000AAA 05                      	db T_undefined
   864 00000AAB [9807000000000000]      	dq L_constants + 1944
   865                                  
   866                                  free_var_42:	; location of zero?
   867 00000AB3 [BB0A000000000000]      	dq .undefined_object
   868                                  .undefined_object:
   869 00000ABB 05                      	db T_undefined
   870 00000ABC [E201000000000000]      	dq L_constants + 482
   871                                  
   872                                  
   873                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
   874                                  global main
   875                                  section .text
   876                                  main:
   877 00000000 C8000000                        enter 0, 0
   878 00000004 6A00                            push 0
   879 00000006 6A00                            push 0
   880 00000008 68[65340000]                    push Lend
   881 0000000D C8000000                        enter 0, 0
   882                                  	; building closure for null?
   883 00000011 48BF-                   	mov rdi, free_var_39
   883 00000013 [800A000000000000] 
   884 0000001B 48BE-                   	mov rsi, L_code_ptr_is_null
   884 0000001D [F53F000000000000] 
   885 00000025 E8D63D0000              	call bind_primitive
   886                                  
   887                                  	; building closure for pair?
   888 0000002A 48BF-                   	mov rdi, free_var_40
   888 0000002C [910A000000000000] 
   889 00000034 48BE-                   	mov rsi, L_code_ptr_is_pair
   889 00000036 [2740000000000000] 
   890 0000003E E8BD3D0000              	call bind_primitive
   891                                  
   892                                  	; building closure for fraction?
   893 00000043 48BF-                   	mov rdi, free_var_33
   893 00000045 [1A0A000000000000] 
   894 0000004D 48BE-                   	mov rsi, L_code_ptr_is_fraction
   894 0000004F [5142000000000000] 
   895 00000057 E8A43D0000              	call bind_primitive
   896                                  
   897                                  	; building closure for cons
   898 0000005C 48BF-                   	mov rdi, free_var_32
   898 0000005E [090A000000000000] 
   899 00000066 48BE-                   	mov rsi, L_code_ptr_cons
   899 00000068 [8743000000000000] 
   900 00000070 E88B3D0000              	call bind_primitive
   901                                  
   902                                  	; building closure for car
   903 00000075 48BF-                   	mov rdi, free_var_16
   903 00000077 [F908000000000000] 
   904 0000007F 48BE-                   	mov rsi, L_code_ptr_car
   904 00000081 [3044000000000000] 
   905 00000089 E8723D0000              	call bind_primitive
   906                                  
   907                                  	; building closure for cdr
   908 0000008E 48BF-                   	mov rdi, free_var_31
   908 00000090 [F809000000000000] 
   909 00000098 48BE-                   	mov rsi, L_code_ptr_cdr
   909 0000009A [5444000000000000] 
   910 000000A2 E8593D0000              	call bind_primitive
   911                                  
   912                                  	; building closure for zero?
   913 000000A7 48BF-                   	mov rdi, free_var_42
   913 000000A9 [B30A000000000000] 
   914 000000B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   914 000000B3 [5446000000000000] 
   915 000000BB E8403D0000              	call bind_primitive
   916                                  
   917                                  	; building closure for integer?
   918 000000C0 48BF-                   	mov rdi, free_var_34
   918 000000C2 [2B0A000000000000] 
   919 000000CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   919 000000CC [B946000000000000] 
   920 000000D4 E8273D0000              	call bind_primitive
   921                                  
   922                                  	; building closure for __bin-apply
   923 000000D9 48BF-                   	mov rdi, free_var_0
   923 000000DB [E907000000000000] 
   924 000000E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   924 000000E5 [703F000000000000] 
   925 000000ED E80E3D0000              	call bind_primitive
   926                                  
   927 000000F2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   928 000000F7 E8D4340000              	call malloc
   929 000000FC 50                      	push rax
   930 000000FD BF00000000              	mov rdi, 8 * 0	; new rib
   931 00000102 E8C9340000              	call malloc
   932 00000107 50                      	push rax
   933 00000108 BF08000000              	mov rdi, 8 * 1	; extended env
   934 0000010D E8BE340000              	call malloc
   935 00000112 488B7D10                	mov rdi, ENV
   936 00000116 BE00000000              	mov rsi, 0
   937 0000011B BA01000000              	mov rdx, 1
   938                                  .L_lambda_simple_env_loop_0047:	; ext_env[i + 1] <-- env[i]
   939 00000120 4883FE00                	cmp rsi, 0
   940 00000124 7410                    	je .L_lambda_simple_env_end_0047
   941 00000126 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   942 0000012A 48890CD0                	mov qword [rax + 8 * rdx], rcx
   943 0000012E 48FFC6                  	inc rsi
   944 00000131 48FFC2                  	inc rdx
   945 00000134 EBEA                    	jmp .L_lambda_simple_env_loop_0047
   946                                  .L_lambda_simple_env_end_0047:
   947 00000136 5B                      	pop rbx
   948 00000137 BE00000000              	mov rsi, 0
   949                                  .L_lambda_simple_params_loop_0047:	; copy params
   950 0000013C 4883FE00                	cmp rsi, 0
   951 00000140 740E                    	je .L_lambda_simple_params_end_0047
   952 00000142 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   953 00000147 488914F3                	mov qword [rbx + 8 * rsi], rdx
   954 0000014B 48FFC6                  	inc rsi
   955 0000014E EBEC                    	jmp .L_lambda_simple_params_loop_0047
   956                                  .L_lambda_simple_params_end_0047:
   957 00000150 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   958 00000153 4889C3                  	mov rbx, rax
   959 00000156 58                      	pop rax
   960 00000157 C60004                  	mov byte [rax], T_closure
   961 0000015A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   962 0000015E 48C74009[6B010000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0047
   963 00000166 E9AA000000              	jmp .L_lambda_simple_end_0047
   964                                  .L_lambda_simple_code_0047:	; lambda-simple body
   965 0000016B 48837C241001            	cmp qword [rsp + 8 * 2], 1
   966 00000171 740B                    	je .L_lambda_simple_arity_check_ok_0047
   967 00000173 FF742410                	push qword [rsp + 8 * 2]
   968 00000177 6A01                    	push 1
   969 00000179 E90B340000              	jmp L_error_incorrect_arity_simple
   970                                  .L_lambda_simple_arity_check_ok_0047:
   971 0000017E C8000000                	enter 0, 0
   972                                  	; preparing a tail-call
   973                                  	; preparing a non-tail-call
   974 00000182 488B4520                	mov rax, PARAM(0)	; param x
   975 00000186 50                      	push rax
   976 00000187 6A01                    	push 1	; arg count
   977 00000189 488B0425[F9080000]      	mov rax, qword [free_var_16]	; free var car
   978 00000191 803805                  	cmp byte [rax], T_undefined
   979 00000194 0F8409330000            	je L_error_fvar_undefined
   980 0000019A 803804                  	cmp byte [rax], T_closure
   981 0000019D 0F8584330000            	jne L_error_non_closure
   982 000001A3 FF7001                  	push SOB_CLOSURE_ENV(rax)
   983 000001A6 FF5009                  	call SOB_CLOSURE_CODE(rax)
   984 000001A9 50                      	push rax
   985 000001AA 6A01                    	push 1	; arg count
   986 000001AC 488B0425[F9080000]      	mov rax, qword [free_var_16]	; free var car
   987 000001B4 803805                  	cmp byte [rax], T_undefined
   988 000001B7 0F84E6320000            	je L_error_fvar_undefined
   989 000001BD 803804                  	cmp byte [rax], T_closure
   990 000001C0 0F8561330000            	jne L_error_non_closure
   991 000001C6 FF7001                  	push SOB_CLOSURE_ENV(rax)
   992 000001C9 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
   993 000001CC FF7500                  	push qword[rbp]
   994 000001CF 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
   995 000001D2 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
   996 000001D6 4983C603                	add r14, 3 	 ;adding so we will get to the params 
   997 000001DA 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
   998 000001DE 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
   999 000001E1 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  1000 000001E4 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  1001 000001E9 4983C103                	add r9, 3 	 ;for getting to the params
  1002 000001ED 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  1003 000001F1 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  1004                                  .L_tc_recycle_frame_loop_0049:
  1005 000001F4 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  1006 000001F7 7410                    	je .L_tc_recycle_frame_done_0049
  1007 000001F9 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  1008 000001FC 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  1009 000001FF 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  1010 00000203 4983E808                	sub r8, 8	 ;move the top of the stack one down
  1011 00000207 EBEB                    	jmp .L_tc_recycle_frame_loop_0049
  1012                                  .L_tc_recycle_frame_done_0049:
  1013 00000209 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  1014 0000020A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  1015 0000020E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1016 00000211 C9                      	leave
  1017 00000212 C21800                  	ret AND_KILL_FRAME(1)
  1018                                  .L_lambda_simple_end_0047:	; new closure is in rax
  1019 00000215 48890425[71080000]      	mov qword [free_var_8], rax
  1020 0000021D 48B8-                   	mov rax, sob_void
  1020 0000021F [0000000000000000] 
  1021                                  
  1022 00000227 4889C7                  	mov rdi, rax
  1023 0000022A E8F6350000              	call print_sexpr_if_not_void
  1024 0000022F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1025 00000234 E897330000              	call malloc
  1026 00000239 50                      	push rax
  1027 0000023A BF00000000              	mov rdi, 8 * 0	; new rib
  1028 0000023F E88C330000              	call malloc
  1029 00000244 50                      	push rax
  1030 00000245 BF08000000              	mov rdi, 8 * 1	; extended env
  1031 0000024A E881330000              	call malloc
  1032 0000024F 488B7D10                	mov rdi, ENV
  1033 00000253 BE00000000              	mov rsi, 0
  1034 00000258 BA01000000              	mov rdx, 1
  1035                                  .L_lambda_simple_env_loop_0048:	; ext_env[i + 1] <-- env[i]
  1036 0000025D 4883FE00                	cmp rsi, 0
  1037 00000261 7410                    	je .L_lambda_simple_env_end_0048
  1038 00000263 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1039 00000267 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1040 0000026B 48FFC6                  	inc rsi
  1041 0000026E 48FFC2                  	inc rdx
  1042 00000271 EBEA                    	jmp .L_lambda_simple_env_loop_0048
  1043                                  .L_lambda_simple_env_end_0048:
  1044 00000273 5B                      	pop rbx
  1045 00000274 BE00000000              	mov rsi, 0
  1046                                  .L_lambda_simple_params_loop_0048:	; copy params
  1047 00000279 4883FE00                	cmp rsi, 0
  1048 0000027D 740E                    	je .L_lambda_simple_params_end_0048
  1049 0000027F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1050 00000284 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1051 00000288 48FFC6                  	inc rsi
  1052 0000028B EBEC                    	jmp .L_lambda_simple_params_loop_0048
  1053                                  .L_lambda_simple_params_end_0048:
  1054 0000028D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1055 00000290 4889C3                  	mov rbx, rax
  1056 00000293 58                      	pop rax
  1057 00000294 C60004                  	mov byte [rax], T_closure
  1058 00000297 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1059 0000029B 48C74009[A8020000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0048
  1060 000002A3 E9AA000000              	jmp .L_lambda_simple_end_0048
  1061                                  .L_lambda_simple_code_0048:	; lambda-simple body
  1062 000002A8 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1063 000002AE 740B                    	je .L_lambda_simple_arity_check_ok_0048
  1064 000002B0 FF742410                	push qword [rsp + 8 * 2]
  1065 000002B4 6A01                    	push 1
  1066 000002B6 E9CE320000              	jmp L_error_incorrect_arity_simple
  1067                                  .L_lambda_simple_arity_check_ok_0048:
  1068 000002BB C8000000                	enter 0, 0
  1069                                  	; preparing a tail-call
  1070                                  	; preparing a non-tail-call
  1071 000002BF 488B4520                	mov rax, PARAM(0)	; param x
  1072 000002C3 50                      	push rax
  1073 000002C4 6A01                    	push 1	; arg count
  1074 000002C6 488B0425[F8090000]      	mov rax, qword [free_var_31]	; free var cdr
  1075 000002CE 803805                  	cmp byte [rax], T_undefined
  1076 000002D1 0F84CC310000            	je L_error_fvar_undefined
  1077 000002D7 803804                  	cmp byte [rax], T_closure
  1078 000002DA 0F8547320000            	jne L_error_non_closure
  1079 000002E0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1080 000002E3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1081 000002E6 50                      	push rax
  1082 000002E7 6A01                    	push 1	; arg count
  1083 000002E9 488B0425[F9080000]      	mov rax, qword [free_var_16]	; free var car
  1084 000002F1 803805                  	cmp byte [rax], T_undefined
  1085 000002F4 0F84A9310000            	je L_error_fvar_undefined
  1086 000002FA 803804                  	cmp byte [rax], T_closure
  1087 000002FD 0F8524320000            	jne L_error_non_closure
  1088 00000303 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1089 00000306 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1090 00000309 FF7500                  	push qword[rbp]
  1091 0000030C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  1092 0000030F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  1093 00000313 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  1094 00000317 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  1095 0000031B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  1096 0000031E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  1097 00000321 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  1098 00000326 4983C103                	add r9, 3 	 ;for getting to the params
  1099 0000032A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  1100 0000032E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  1101                                  .L_tc_recycle_frame_loop_004a:
  1102 00000331 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  1103 00000334 7410                    	je .L_tc_recycle_frame_done_004a
  1104 00000336 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  1105 00000339 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  1106 0000033C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  1107 00000340 4983E808                	sub r8, 8	 ;move the top of the stack one down
  1108 00000344 EBEB                    	jmp .L_tc_recycle_frame_loop_004a
  1109                                  .L_tc_recycle_frame_done_004a:
  1110 00000346 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  1111 00000347 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  1112 0000034B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1113 0000034E C9                      	leave
  1114 0000034F C21800                  	ret AND_KILL_FRAME(1)
  1115                                  .L_lambda_simple_end_0048:	; new closure is in rax
  1116 00000352 48890425[E8080000]      	mov qword [free_var_15], rax
  1117 0000035A 48B8-                   	mov rax, sob_void
  1117 0000035C [0000000000000000] 
  1118                                  
  1119 00000364 4889C7                  	mov rdi, rax
  1120 00000367 E8B9340000              	call print_sexpr_if_not_void
  1121 0000036C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1122 00000371 E85A320000              	call malloc
  1123 00000376 50                      	push rax
  1124 00000377 BF00000000              	mov rdi, 8 * 0	; new rib
  1125 0000037C E84F320000              	call malloc
  1126 00000381 50                      	push rax
  1127 00000382 BF08000000              	mov rdi, 8 * 1	; extended env
  1128 00000387 E844320000              	call malloc
  1129 0000038C 488B7D10                	mov rdi, ENV
  1130 00000390 BE00000000              	mov rsi, 0
  1131 00000395 BA01000000              	mov rdx, 1
  1132                                  .L_lambda_simple_env_loop_0049:	; ext_env[i + 1] <-- env[i]
  1133 0000039A 4883FE00                	cmp rsi, 0
  1134 0000039E 7410                    	je .L_lambda_simple_env_end_0049
  1135 000003A0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1136 000003A4 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1137 000003A8 48FFC6                  	inc rsi
  1138 000003AB 48FFC2                  	inc rdx
  1139 000003AE EBEA                    	jmp .L_lambda_simple_env_loop_0049
  1140                                  .L_lambda_simple_env_end_0049:
  1141 000003B0 5B                      	pop rbx
  1142 000003B1 BE00000000              	mov rsi, 0
  1143                                  .L_lambda_simple_params_loop_0049:	; copy params
  1144 000003B6 4883FE00                	cmp rsi, 0
  1145 000003BA 740E                    	je .L_lambda_simple_params_end_0049
  1146 000003BC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1147 000003C1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1148 000003C5 48FFC6                  	inc rsi
  1149 000003C8 EBEC                    	jmp .L_lambda_simple_params_loop_0049
  1150                                  .L_lambda_simple_params_end_0049:
  1151 000003CA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1152 000003CD 4889C3                  	mov rbx, rax
  1153 000003D0 58                      	pop rax
  1154 000003D1 C60004                  	mov byte [rax], T_closure
  1155 000003D4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1156 000003D8 48C74009[E5030000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0049
  1157 000003E0 E9AA000000              	jmp .L_lambda_simple_end_0049
  1158                                  .L_lambda_simple_code_0049:	; lambda-simple body
  1159 000003E5 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1160 000003EB 740B                    	je .L_lambda_simple_arity_check_ok_0049
  1161 000003ED FF742410                	push qword [rsp + 8 * 2]
  1162 000003F1 6A01                    	push 1
  1163 000003F3 E991310000              	jmp L_error_incorrect_arity_simple
  1164                                  .L_lambda_simple_arity_check_ok_0049:
  1165 000003F8 C8000000                	enter 0, 0
  1166                                  	; preparing a tail-call
  1167                                  	; preparing a non-tail-call
  1168 000003FC 488B4520                	mov rax, PARAM(0)	; param x
  1169 00000400 50                      	push rax
  1170 00000401 6A01                    	push 1	; arg count
  1171 00000403 488B0425[F9080000]      	mov rax, qword [free_var_16]	; free var car
  1172 0000040B 803805                  	cmp byte [rax], T_undefined
  1173 0000040E 0F848F300000            	je L_error_fvar_undefined
  1174 00000414 803804                  	cmp byte [rax], T_closure
  1175 00000417 0F850A310000            	jne L_error_non_closure
  1176 0000041D FF7001                  	push SOB_CLOSURE_ENV(rax)
  1177 00000420 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1178 00000423 50                      	push rax
  1179 00000424 6A01                    	push 1	; arg count
  1180 00000426 488B0425[F8090000]      	mov rax, qword [free_var_31]	; free var cdr
  1181 0000042E 803805                  	cmp byte [rax], T_undefined
  1182 00000431 0F846C300000            	je L_error_fvar_undefined
  1183 00000437 803804                  	cmp byte [rax], T_closure
  1184 0000043A 0F85E7300000            	jne L_error_non_closure
  1185 00000440 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1186 00000443 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1187 00000446 FF7500                  	push qword[rbp]
  1188 00000449 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  1189 0000044C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  1190 00000450 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  1191 00000454 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  1192 00000458 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  1193 0000045B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  1194 0000045E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  1195 00000463 4983C103                	add r9, 3 	 ;for getting to the params
  1196 00000467 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  1197 0000046B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  1198                                  .L_tc_recycle_frame_loop_004b:
  1199 0000046E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  1200 00000471 7410                    	je .L_tc_recycle_frame_done_004b
  1201 00000473 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  1202 00000476 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  1203 00000479 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  1204 0000047D 4983E808                	sub r8, 8	 ;move the top of the stack one down
  1205 00000481 EBEB                    	jmp .L_tc_recycle_frame_loop_004b
  1206                                  .L_tc_recycle_frame_done_004b:
  1207 00000483 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  1208 00000484 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  1209 00000488 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1210 0000048B C9                      	leave
  1211 0000048C C21800                  	ret AND_KILL_FRAME(1)
  1212                                  .L_lambda_simple_end_0049:	; new closure is in rax
  1213 0000048F 48890425[70090000]      	mov qword [free_var_23], rax
  1214 00000497 48B8-                   	mov rax, sob_void
  1214 00000499 [0000000000000000] 
  1215                                  
  1216 000004A1 4889C7                  	mov rdi, rax
  1217 000004A4 E87C330000              	call print_sexpr_if_not_void
  1218 000004A9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1219 000004AE E81D310000              	call malloc
  1220 000004B3 50                      	push rax
  1221 000004B4 BF00000000              	mov rdi, 8 * 0	; new rib
  1222 000004B9 E812310000              	call malloc
  1223 000004BE 50                      	push rax
  1224 000004BF BF08000000              	mov rdi, 8 * 1	; extended env
  1225 000004C4 E807310000              	call malloc
  1226 000004C9 488B7D10                	mov rdi, ENV
  1227 000004CD BE00000000              	mov rsi, 0
  1228 000004D2 BA01000000              	mov rdx, 1
  1229                                  .L_lambda_simple_env_loop_004a:	; ext_env[i + 1] <-- env[i]
  1230 000004D7 4883FE00                	cmp rsi, 0
  1231 000004DB 7410                    	je .L_lambda_simple_env_end_004a
  1232 000004DD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1233 000004E1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1234 000004E5 48FFC6                  	inc rsi
  1235 000004E8 48FFC2                  	inc rdx
  1236 000004EB EBEA                    	jmp .L_lambda_simple_env_loop_004a
  1237                                  .L_lambda_simple_env_end_004a:
  1238 000004ED 5B                      	pop rbx
  1239 000004EE BE00000000              	mov rsi, 0
  1240                                  .L_lambda_simple_params_loop_004a:	; copy params
  1241 000004F3 4883FE00                	cmp rsi, 0
  1242 000004F7 740E                    	je .L_lambda_simple_params_end_004a
  1243 000004F9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1244 000004FE 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1245 00000502 48FFC6                  	inc rsi
  1246 00000505 EBEC                    	jmp .L_lambda_simple_params_loop_004a
  1247                                  .L_lambda_simple_params_end_004a:
  1248 00000507 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1249 0000050A 4889C3                  	mov rbx, rax
  1250 0000050D 58                      	pop rax
  1251 0000050E C60004                  	mov byte [rax], T_closure
  1252 00000511 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1253 00000515 48C74009[22050000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004a
  1254 0000051D E9AA000000              	jmp .L_lambda_simple_end_004a
  1255                                  .L_lambda_simple_code_004a:	; lambda-simple body
  1256 00000522 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1257 00000528 740B                    	je .L_lambda_simple_arity_check_ok_004a
  1258 0000052A FF742410                	push qword [rsp + 8 * 2]
  1259 0000052E 6A01                    	push 1
  1260 00000530 E954300000              	jmp L_error_incorrect_arity_simple
  1261                                  .L_lambda_simple_arity_check_ok_004a:
  1262 00000535 C8000000                	enter 0, 0
  1263                                  	; preparing a tail-call
  1264                                  	; preparing a non-tail-call
  1265 00000539 488B4520                	mov rax, PARAM(0)	; param x
  1266 0000053D 50                      	push rax
  1267 0000053E 6A01                    	push 1	; arg count
  1268 00000540 488B0425[F8090000]      	mov rax, qword [free_var_31]	; free var cdr
  1269 00000548 803805                  	cmp byte [rax], T_undefined
  1270 0000054B 0F84522F0000            	je L_error_fvar_undefined
  1271 00000551 803804                  	cmp byte [rax], T_closure
  1272 00000554 0F85CD2F0000            	jne L_error_non_closure
  1273 0000055A FF7001                  	push SOB_CLOSURE_ENV(rax)
  1274 0000055D FF5009                  	call SOB_CLOSURE_CODE(rax)
  1275 00000560 50                      	push rax
  1276 00000561 6A01                    	push 1	; arg count
  1277 00000563 488B0425[F8090000]      	mov rax, qword [free_var_31]	; free var cdr
  1278 0000056B 803805                  	cmp byte [rax], T_undefined
  1279 0000056E 0F842F2F0000            	je L_error_fvar_undefined
  1280 00000574 803804                  	cmp byte [rax], T_closure
  1281 00000577 0F85AA2F0000            	jne L_error_non_closure
  1282 0000057D FF7001                  	push SOB_CLOSURE_ENV(rax)
  1283 00000580 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1284 00000583 FF7500                  	push qword[rbp]
  1285 00000586 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  1286 00000589 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  1287 0000058D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  1288 00000591 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  1289 00000595 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  1290 00000598 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  1291 0000059B 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  1292 000005A0 4983C103                	add r9, 3 	 ;for getting to the params
  1293 000005A4 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  1294 000005A8 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  1295                                  .L_tc_recycle_frame_loop_004c:
  1296 000005AB 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  1297 000005AE 7410                    	je .L_tc_recycle_frame_done_004c
  1298 000005B0 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  1299 000005B3 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  1300 000005B6 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  1301 000005BA 4983E808                	sub r8, 8	 ;move the top of the stack one down
  1302 000005BE EBEB                    	jmp .L_tc_recycle_frame_loop_004c
  1303                                  .L_tc_recycle_frame_done_004c:
  1304 000005C0 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  1305 000005C1 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  1306 000005C5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1307 000005C8 C9                      	leave
  1308 000005C9 C21800                  	ret AND_KILL_FRAME(1)
  1309                                  .L_lambda_simple_end_004a:	; new closure is in rax
  1310 000005CC 48890425[E7090000]      	mov qword [free_var_30], rax
  1311 000005D4 48B8-                   	mov rax, sob_void
  1311 000005D6 [0000000000000000] 
  1312                                  
  1313 000005DE 4889C7                  	mov rdi, rax
  1314 000005E1 E83F320000              	call print_sexpr_if_not_void
  1315 000005E6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1316 000005EB E8E02F0000              	call malloc
  1317 000005F0 50                      	push rax
  1318 000005F1 BF00000000              	mov rdi, 8 * 0	; new rib
  1319 000005F6 E8D52F0000              	call malloc
  1320 000005FB 50                      	push rax
  1321 000005FC BF08000000              	mov rdi, 8 * 1	; extended env
  1322 00000601 E8CA2F0000              	call malloc
  1323 00000606 488B7D10                	mov rdi, ENV
  1324 0000060A BE00000000              	mov rsi, 0
  1325 0000060F BA01000000              	mov rdx, 1
  1326                                  .L_lambda_simple_env_loop_004b:	; ext_env[i + 1] <-- env[i]
  1327 00000614 4883FE00                	cmp rsi, 0
  1328 00000618 7410                    	je .L_lambda_simple_env_end_004b
  1329 0000061A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1330 0000061E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1331 00000622 48FFC6                  	inc rsi
  1332 00000625 48FFC2                  	inc rdx
  1333 00000628 EBEA                    	jmp .L_lambda_simple_env_loop_004b
  1334                                  .L_lambda_simple_env_end_004b:
  1335 0000062A 5B                      	pop rbx
  1336 0000062B BE00000000              	mov rsi, 0
  1337                                  .L_lambda_simple_params_loop_004b:	; copy params
  1338 00000630 4883FE00                	cmp rsi, 0
  1339 00000634 740E                    	je .L_lambda_simple_params_end_004b
  1340 00000636 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1341 0000063B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1342 0000063F 48FFC6                  	inc rsi
  1343 00000642 EBEC                    	jmp .L_lambda_simple_params_loop_004b
  1344                                  .L_lambda_simple_params_end_004b:
  1345 00000644 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1346 00000647 4889C3                  	mov rbx, rax
  1347 0000064A 58                      	pop rax
  1348 0000064B C60004                  	mov byte [rax], T_closure
  1349 0000064E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1350 00000652 48C74009[5F060000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004b
  1351 0000065A E9AA000000              	jmp .L_lambda_simple_end_004b
  1352                                  .L_lambda_simple_code_004b:	; lambda-simple body
  1353 0000065F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1354 00000665 740B                    	je .L_lambda_simple_arity_check_ok_004b
  1355 00000667 FF742410                	push qword [rsp + 8 * 2]
  1356 0000066B 6A01                    	push 1
  1357 0000066D E9172F0000              	jmp L_error_incorrect_arity_simple
  1358                                  .L_lambda_simple_arity_check_ok_004b:
  1359 00000672 C8000000                	enter 0, 0
  1360                                  	; preparing a tail-call
  1361                                  	; preparing a non-tail-call
  1362 00000676 488B4520                	mov rax, PARAM(0)	; param x
  1363 0000067A 50                      	push rax
  1364 0000067B 6A01                    	push 1	; arg count
  1365 0000067D 488B0425[71080000]      	mov rax, qword [free_var_8]	; free var caar
  1366 00000685 803805                  	cmp byte [rax], T_undefined
  1367 00000688 0F84152E0000            	je L_error_fvar_undefined
  1368 0000068E 803804                  	cmp byte [rax], T_closure
  1369 00000691 0F85902E0000            	jne L_error_non_closure
  1370 00000697 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1371 0000069A FF5009                  	call SOB_CLOSURE_CODE(rax)
  1372 0000069D 50                      	push rax
  1373 0000069E 6A01                    	push 1	; arg count
  1374 000006A0 488B0425[F9080000]      	mov rax, qword [free_var_16]	; free var car
  1375 000006A8 803805                  	cmp byte [rax], T_undefined
  1376 000006AB 0F84F22D0000            	je L_error_fvar_undefined
  1377 000006B1 803804                  	cmp byte [rax], T_closure
  1378 000006B4 0F856D2E0000            	jne L_error_non_closure
  1379 000006BA FF7001                  	push SOB_CLOSURE_ENV(rax)
  1380 000006BD FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1381 000006C0 FF7500                  	push qword[rbp]
  1382 000006C3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  1383 000006C6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  1384 000006CA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  1385 000006CE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  1386 000006D2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  1387 000006D5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  1388 000006D8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  1389 000006DD 4983C103                	add r9, 3 	 ;for getting to the params
  1390 000006E1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  1391 000006E5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  1392                                  .L_tc_recycle_frame_loop_004d:
  1393 000006E8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  1394 000006EB 7410                    	je .L_tc_recycle_frame_done_004d
  1395 000006ED 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  1396 000006F0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  1397 000006F3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  1398 000006F7 4983E808                	sub r8, 8	 ;move the top of the stack one down
  1399 000006FB EBEB                    	jmp .L_tc_recycle_frame_loop_004d
  1400                                  .L_tc_recycle_frame_done_004d:
  1401 000006FD 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  1402 000006FE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  1403 00000702 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1404 00000705 C9                      	leave
  1405 00000706 C21800                  	ret AND_KILL_FRAME(1)
  1406                                  .L_lambda_simple_end_004b:	; new closure is in rax
  1407 00000709 48890425[2D080000]      	mov qword [free_var_4], rax
  1408 00000711 48B8-                   	mov rax, sob_void
  1408 00000713 [0000000000000000] 
  1409                                  
  1410 0000071B 4889C7                  	mov rdi, rax
  1411 0000071E E802310000              	call print_sexpr_if_not_void
  1412 00000723 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1413 00000728 E8A32E0000              	call malloc
  1414 0000072D 50                      	push rax
  1415 0000072E BF00000000              	mov rdi, 8 * 0	; new rib
  1416 00000733 E8982E0000              	call malloc
  1417 00000738 50                      	push rax
  1418 00000739 BF08000000              	mov rdi, 8 * 1	; extended env
  1419 0000073E E88D2E0000              	call malloc
  1420 00000743 488B7D10                	mov rdi, ENV
  1421 00000747 BE00000000              	mov rsi, 0
  1422 0000074C BA01000000              	mov rdx, 1
  1423                                  .L_lambda_simple_env_loop_004c:	; ext_env[i + 1] <-- env[i]
  1424 00000751 4883FE00                	cmp rsi, 0
  1425 00000755 7410                    	je .L_lambda_simple_env_end_004c
  1426 00000757 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1427 0000075B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1428 0000075F 48FFC6                  	inc rsi
  1429 00000762 48FFC2                  	inc rdx
  1430 00000765 EBEA                    	jmp .L_lambda_simple_env_loop_004c
  1431                                  .L_lambda_simple_env_end_004c:
  1432 00000767 5B                      	pop rbx
  1433 00000768 BE00000000              	mov rsi, 0
  1434                                  .L_lambda_simple_params_loop_004c:	; copy params
  1435 0000076D 4883FE00                	cmp rsi, 0
  1436 00000771 740E                    	je .L_lambda_simple_params_end_004c
  1437 00000773 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1438 00000778 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1439 0000077C 48FFC6                  	inc rsi
  1440 0000077F EBEC                    	jmp .L_lambda_simple_params_loop_004c
  1441                                  .L_lambda_simple_params_end_004c:
  1442 00000781 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1443 00000784 4889C3                  	mov rbx, rax
  1444 00000787 58                      	pop rax
  1445 00000788 C60004                  	mov byte [rax], T_closure
  1446 0000078B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1447 0000078F 48C74009[9C070000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004c
  1448 00000797 E9AA000000              	jmp .L_lambda_simple_end_004c
  1449                                  .L_lambda_simple_code_004c:	; lambda-simple body
  1450 0000079C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1451 000007A2 740B                    	je .L_lambda_simple_arity_check_ok_004c
  1452 000007A4 FF742410                	push qword [rsp + 8 * 2]
  1453 000007A8 6A01                    	push 1
  1454 000007AA E9DA2D0000              	jmp L_error_incorrect_arity_simple
  1455                                  .L_lambda_simple_arity_check_ok_004c:
  1456 000007AF C8000000                	enter 0, 0
  1457                                  	; preparing a tail-call
  1458                                  	; preparing a non-tail-call
  1459 000007B3 488B4520                	mov rax, PARAM(0)	; param x
  1460 000007B7 50                      	push rax
  1461 000007B8 6A01                    	push 1	; arg count
  1462 000007BA 488B0425[E8080000]      	mov rax, qword [free_var_15]	; free var cadr
  1463 000007C2 803805                  	cmp byte [rax], T_undefined
  1464 000007C5 0F84D82C0000            	je L_error_fvar_undefined
  1465 000007CB 803804                  	cmp byte [rax], T_closure
  1466 000007CE 0F85532D0000            	jne L_error_non_closure
  1467 000007D4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1468 000007D7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1469 000007DA 50                      	push rax
  1470 000007DB 6A01                    	push 1	; arg count
  1471 000007DD 488B0425[F9080000]      	mov rax, qword [free_var_16]	; free var car
  1472 000007E5 803805                  	cmp byte [rax], T_undefined
  1473 000007E8 0F84B52C0000            	je L_error_fvar_undefined
  1474 000007EE 803804                  	cmp byte [rax], T_closure
  1475 000007F1 0F85302D0000            	jne L_error_non_closure
  1476 000007F7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1477 000007FA FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1478 000007FD FF7500                  	push qword[rbp]
  1479 00000800 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  1480 00000803 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  1481 00000807 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  1482 0000080B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  1483 0000080F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  1484 00000812 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  1485 00000815 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  1486 0000081A 4983C103                	add r9, 3 	 ;for getting to the params
  1487 0000081E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  1488 00000822 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  1489                                  .L_tc_recycle_frame_loop_004e:
  1490 00000825 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  1491 00000828 7410                    	je .L_tc_recycle_frame_done_004e
  1492 0000082A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  1493 0000082D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  1494 00000830 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  1495 00000834 4983E808                	sub r8, 8	 ;move the top of the stack one down
  1496 00000838 EBEB                    	jmp .L_tc_recycle_frame_loop_004e
  1497                                  .L_tc_recycle_frame_done_004e:
  1498 0000083A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  1499 0000083B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  1500 0000083F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1501 00000842 C9                      	leave
  1502 00000843 C21800                  	ret AND_KILL_FRAME(1)
  1503                                  .L_lambda_simple_end_004c:	; new closure is in rax
  1504 00000846 48890425[60080000]      	mov qword [free_var_7], rax
  1505 0000084E 48B8-                   	mov rax, sob_void
  1505 00000850 [0000000000000000] 
  1506                                  
  1507 00000858 4889C7                  	mov rdi, rax
  1508 0000085B E8C52F0000              	call print_sexpr_if_not_void
  1509 00000860 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1510 00000865 E8662D0000              	call malloc
  1511 0000086A 50                      	push rax
  1512 0000086B BF00000000              	mov rdi, 8 * 0	; new rib
  1513 00000870 E85B2D0000              	call malloc
  1514 00000875 50                      	push rax
  1515 00000876 BF08000000              	mov rdi, 8 * 1	; extended env
  1516 0000087B E8502D0000              	call malloc
  1517 00000880 488B7D10                	mov rdi, ENV
  1518 00000884 BE00000000              	mov rsi, 0
  1519 00000889 BA01000000              	mov rdx, 1
  1520                                  .L_lambda_simple_env_loop_004d:	; ext_env[i + 1] <-- env[i]
  1521 0000088E 4883FE00                	cmp rsi, 0
  1522 00000892 7410                    	je .L_lambda_simple_env_end_004d
  1523 00000894 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1524 00000898 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1525 0000089C 48FFC6                  	inc rsi
  1526 0000089F 48FFC2                  	inc rdx
  1527 000008A2 EBEA                    	jmp .L_lambda_simple_env_loop_004d
  1528                                  .L_lambda_simple_env_end_004d:
  1529 000008A4 5B                      	pop rbx
  1530 000008A5 BE00000000              	mov rsi, 0
  1531                                  .L_lambda_simple_params_loop_004d:	; copy params
  1532 000008AA 4883FE00                	cmp rsi, 0
  1533 000008AE 740E                    	je .L_lambda_simple_params_end_004d
  1534 000008B0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1535 000008B5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1536 000008B9 48FFC6                  	inc rsi
  1537 000008BC EBEC                    	jmp .L_lambda_simple_params_loop_004d
  1538                                  .L_lambda_simple_params_end_004d:
  1539 000008BE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1540 000008C1 4889C3                  	mov rbx, rax
  1541 000008C4 58                      	pop rax
  1542 000008C5 C60004                  	mov byte [rax], T_closure
  1543 000008C8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1544 000008CC 48C74009[D9080000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004d
  1545 000008D4 E9AA000000              	jmp .L_lambda_simple_end_004d
  1546                                  .L_lambda_simple_code_004d:	; lambda-simple body
  1547 000008D9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1548 000008DF 740B                    	je .L_lambda_simple_arity_check_ok_004d
  1549 000008E1 FF742410                	push qword [rsp + 8 * 2]
  1550 000008E5 6A01                    	push 1
  1551 000008E7 E99D2C0000              	jmp L_error_incorrect_arity_simple
  1552                                  .L_lambda_simple_arity_check_ok_004d:
  1553 000008EC C8000000                	enter 0, 0
  1554                                  	; preparing a tail-call
  1555                                  	; preparing a non-tail-call
  1556 000008F0 488B4520                	mov rax, PARAM(0)	; param x
  1557 000008F4 50                      	push rax
  1558 000008F5 6A01                    	push 1	; arg count
  1559 000008F7 488B0425[70090000]      	mov rax, qword [free_var_23]	; free var cdar
  1560 000008FF 803805                  	cmp byte [rax], T_undefined
  1561 00000902 0F849B2B0000            	je L_error_fvar_undefined
  1562 00000908 803804                  	cmp byte [rax], T_closure
  1563 0000090B 0F85162C0000            	jne L_error_non_closure
  1564 00000911 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1565 00000914 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1566 00000917 50                      	push rax
  1567 00000918 6A01                    	push 1	; arg count
  1568 0000091A 488B0425[F9080000]      	mov rax, qword [free_var_16]	; free var car
  1569 00000922 803805                  	cmp byte [rax], T_undefined
  1570 00000925 0F84782B0000            	je L_error_fvar_undefined
  1571 0000092B 803804                  	cmp byte [rax], T_closure
  1572 0000092E 0F85F32B0000            	jne L_error_non_closure
  1573 00000934 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1574 00000937 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1575 0000093A FF7500                  	push qword[rbp]
  1576 0000093D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  1577 00000940 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  1578 00000944 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  1579 00000948 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  1580 0000094C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  1581 0000094F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  1582 00000952 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  1583 00000957 4983C103                	add r9, 3 	 ;for getting to the params
  1584 0000095B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  1585 0000095F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  1586                                  .L_tc_recycle_frame_loop_004f:
  1587 00000962 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  1588 00000965 7410                    	je .L_tc_recycle_frame_done_004f
  1589 00000967 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  1590 0000096A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  1591 0000096D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  1592 00000971 4983E808                	sub r8, 8	 ;move the top of the stack one down
  1593 00000975 EBEB                    	jmp .L_tc_recycle_frame_loop_004f
  1594                                  .L_tc_recycle_frame_done_004f:
  1595 00000977 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  1596 00000978 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  1597 0000097C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1598 0000097F C9                      	leave
  1599 00000980 C21800                  	ret AND_KILL_FRAME(1)
  1600                                  .L_lambda_simple_end_004d:	; new closure is in rax
  1601 00000983 48890425[A4080000]      	mov qword [free_var_11], rax
  1602 0000098B 48B8-                   	mov rax, sob_void
  1602 0000098D [0000000000000000] 
  1603                                  
  1604 00000995 4889C7                  	mov rdi, rax
  1605 00000998 E8882E0000              	call print_sexpr_if_not_void
  1606 0000099D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1607 000009A2 E8292C0000              	call malloc
  1608 000009A7 50                      	push rax
  1609 000009A8 BF00000000              	mov rdi, 8 * 0	; new rib
  1610 000009AD E81E2C0000              	call malloc
  1611 000009B2 50                      	push rax
  1612 000009B3 BF08000000              	mov rdi, 8 * 1	; extended env
  1613 000009B8 E8132C0000              	call malloc
  1614 000009BD 488B7D10                	mov rdi, ENV
  1615 000009C1 BE00000000              	mov rsi, 0
  1616 000009C6 BA01000000              	mov rdx, 1
  1617                                  .L_lambda_simple_env_loop_004e:	; ext_env[i + 1] <-- env[i]
  1618 000009CB 4883FE00                	cmp rsi, 0
  1619 000009CF 7410                    	je .L_lambda_simple_env_end_004e
  1620 000009D1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1621 000009D5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1622 000009D9 48FFC6                  	inc rsi
  1623 000009DC 48FFC2                  	inc rdx
  1624 000009DF EBEA                    	jmp .L_lambda_simple_env_loop_004e
  1625                                  .L_lambda_simple_env_end_004e:
  1626 000009E1 5B                      	pop rbx
  1627 000009E2 BE00000000              	mov rsi, 0
  1628                                  .L_lambda_simple_params_loop_004e:	; copy params
  1629 000009E7 4883FE00                	cmp rsi, 0
  1630 000009EB 740E                    	je .L_lambda_simple_params_end_004e
  1631 000009ED 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1632 000009F2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1633 000009F6 48FFC6                  	inc rsi
  1634 000009F9 EBEC                    	jmp .L_lambda_simple_params_loop_004e
  1635                                  .L_lambda_simple_params_end_004e:
  1636 000009FB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1637 000009FE 4889C3                  	mov rbx, rax
  1638 00000A01 58                      	pop rax
  1639 00000A02 C60004                  	mov byte [rax], T_closure
  1640 00000A05 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1641 00000A09 48C74009[160A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004e
  1642 00000A11 E9AA000000              	jmp .L_lambda_simple_end_004e
  1643                                  .L_lambda_simple_code_004e:	; lambda-simple body
  1644 00000A16 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1645 00000A1C 740B                    	je .L_lambda_simple_arity_check_ok_004e
  1646 00000A1E FF742410                	push qword [rsp + 8 * 2]
  1647 00000A22 6A01                    	push 1
  1648 00000A24 E9602B0000              	jmp L_error_incorrect_arity_simple
  1649                                  .L_lambda_simple_arity_check_ok_004e:
  1650 00000A29 C8000000                	enter 0, 0
  1651                                  	; preparing a tail-call
  1652                                  	; preparing a non-tail-call
  1653 00000A2D 488B4520                	mov rax, PARAM(0)	; param x
  1654 00000A31 50                      	push rax
  1655 00000A32 6A01                    	push 1	; arg count
  1656 00000A34 488B0425[E7090000]      	mov rax, qword [free_var_30]	; free var cddr
  1657 00000A3C 803805                  	cmp byte [rax], T_undefined
  1658 00000A3F 0F845E2A0000            	je L_error_fvar_undefined
  1659 00000A45 803804                  	cmp byte [rax], T_closure
  1660 00000A48 0F85D92A0000            	jne L_error_non_closure
  1661 00000A4E FF7001                  	push SOB_CLOSURE_ENV(rax)
  1662 00000A51 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1663 00000A54 50                      	push rax
  1664 00000A55 6A01                    	push 1	; arg count
  1665 00000A57 488B0425[F9080000]      	mov rax, qword [free_var_16]	; free var car
  1666 00000A5F 803805                  	cmp byte [rax], T_undefined
  1667 00000A62 0F843B2A0000            	je L_error_fvar_undefined
  1668 00000A68 803804                  	cmp byte [rax], T_closure
  1669 00000A6B 0F85B62A0000            	jne L_error_non_closure
  1670 00000A71 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1671 00000A74 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1672 00000A77 FF7500                  	push qword[rbp]
  1673 00000A7A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  1674 00000A7D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  1675 00000A81 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  1676 00000A85 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  1677 00000A89 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  1678 00000A8C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  1679 00000A8F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  1680 00000A94 4983C103                	add r9, 3 	 ;for getting to the params
  1681 00000A98 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  1682 00000A9C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  1683                                  .L_tc_recycle_frame_loop_0050:
  1684 00000A9F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  1685 00000AA2 7410                    	je .L_tc_recycle_frame_done_0050
  1686 00000AA4 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  1687 00000AA7 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  1688 00000AAA 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  1689 00000AAE 4983E808                	sub r8, 8	 ;move the top of the stack one down
  1690 00000AB2 EBEB                    	jmp .L_tc_recycle_frame_loop_0050
  1691                                  .L_tc_recycle_frame_done_0050:
  1692 00000AB4 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  1693 00000AB5 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  1694 00000AB9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1695 00000ABC C9                      	leave
  1696 00000ABD C21800                  	ret AND_KILL_FRAME(1)
  1697                                  .L_lambda_simple_end_004e:	; new closure is in rax
  1698 00000AC0 48890425[D7080000]      	mov qword [free_var_14], rax
  1699 00000AC8 48B8-                   	mov rax, sob_void
  1699 00000ACA [0000000000000000] 
  1700                                  
  1701 00000AD2 4889C7                  	mov rdi, rax
  1702 00000AD5 E84B2D0000              	call print_sexpr_if_not_void
  1703 00000ADA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1704 00000ADF E8EC2A0000              	call malloc
  1705 00000AE4 50                      	push rax
  1706 00000AE5 BF00000000              	mov rdi, 8 * 0	; new rib
  1707 00000AEA E8E12A0000              	call malloc
  1708 00000AEF 50                      	push rax
  1709 00000AF0 BF08000000              	mov rdi, 8 * 1	; extended env
  1710 00000AF5 E8D62A0000              	call malloc
  1711 00000AFA 488B7D10                	mov rdi, ENV
  1712 00000AFE BE00000000              	mov rsi, 0
  1713 00000B03 BA01000000              	mov rdx, 1
  1714                                  .L_lambda_simple_env_loop_004f:	; ext_env[i + 1] <-- env[i]
  1715 00000B08 4883FE00                	cmp rsi, 0
  1716 00000B0C 7410                    	je .L_lambda_simple_env_end_004f
  1717 00000B0E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1718 00000B12 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1719 00000B16 48FFC6                  	inc rsi
  1720 00000B19 48FFC2                  	inc rdx
  1721 00000B1C EBEA                    	jmp .L_lambda_simple_env_loop_004f
  1722                                  .L_lambda_simple_env_end_004f:
  1723 00000B1E 5B                      	pop rbx
  1724 00000B1F BE00000000              	mov rsi, 0
  1725                                  .L_lambda_simple_params_loop_004f:	; copy params
  1726 00000B24 4883FE00                	cmp rsi, 0
  1727 00000B28 740E                    	je .L_lambda_simple_params_end_004f
  1728 00000B2A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1729 00000B2F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1730 00000B33 48FFC6                  	inc rsi
  1731 00000B36 EBEC                    	jmp .L_lambda_simple_params_loop_004f
  1732                                  .L_lambda_simple_params_end_004f:
  1733 00000B38 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1734 00000B3B 4889C3                  	mov rbx, rax
  1735 00000B3E 58                      	pop rax
  1736 00000B3F C60004                  	mov byte [rax], T_closure
  1737 00000B42 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1738 00000B46 48C74009[530B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004f
  1739 00000B4E E9AA000000              	jmp .L_lambda_simple_end_004f
  1740                                  .L_lambda_simple_code_004f:	; lambda-simple body
  1741 00000B53 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1742 00000B59 740B                    	je .L_lambda_simple_arity_check_ok_004f
  1743 00000B5B FF742410                	push qword [rsp + 8 * 2]
  1744 00000B5F 6A01                    	push 1
  1745 00000B61 E9232A0000              	jmp L_error_incorrect_arity_simple
  1746                                  .L_lambda_simple_arity_check_ok_004f:
  1747 00000B66 C8000000                	enter 0, 0
  1748                                  	; preparing a tail-call
  1749                                  	; preparing a non-tail-call
  1750 00000B6A 488B4520                	mov rax, PARAM(0)	; param x
  1751 00000B6E 50                      	push rax
  1752 00000B6F 6A01                    	push 1	; arg count
  1753 00000B71 488B0425[71080000]      	mov rax, qword [free_var_8]	; free var caar
  1754 00000B79 803805                  	cmp byte [rax], T_undefined
  1755 00000B7C 0F8421290000            	je L_error_fvar_undefined
  1756 00000B82 803804                  	cmp byte [rax], T_closure
  1757 00000B85 0F859C290000            	jne L_error_non_closure
  1758 00000B8B FF7001                  	push SOB_CLOSURE_ENV(rax)
  1759 00000B8E FF5009                  	call SOB_CLOSURE_CODE(rax)
  1760 00000B91 50                      	push rax
  1761 00000B92 6A01                    	push 1	; arg count
  1762 00000B94 488B0425[F8090000]      	mov rax, qword [free_var_31]	; free var cdr
  1763 00000B9C 803805                  	cmp byte [rax], T_undefined
  1764 00000B9F 0F84FE280000            	je L_error_fvar_undefined
  1765 00000BA5 803804                  	cmp byte [rax], T_closure
  1766 00000BA8 0F8579290000            	jne L_error_non_closure
  1767 00000BAE FF7001                  	push SOB_CLOSURE_ENV(rax)
  1768 00000BB1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1769 00000BB4 FF7500                  	push qword[rbp]
  1770 00000BB7 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  1771 00000BBA 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  1772 00000BBE 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  1773 00000BC2 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  1774 00000BC6 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  1775 00000BC9 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  1776 00000BCC 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  1777 00000BD1 4983C103                	add r9, 3 	 ;for getting to the params
  1778 00000BD5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  1779 00000BD9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  1780                                  .L_tc_recycle_frame_loop_0051:
  1781 00000BDC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  1782 00000BDF 7410                    	je .L_tc_recycle_frame_done_0051
  1783 00000BE1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  1784 00000BE4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  1785 00000BE7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  1786 00000BEB 4983E808                	sub r8, 8	 ;move the top of the stack one down
  1787 00000BEF EBEB                    	jmp .L_tc_recycle_frame_loop_0051
  1788                                  .L_tc_recycle_frame_done_0051:
  1789 00000BF1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  1790 00000BF2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  1791 00000BF6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1792 00000BF9 C9                      	leave
  1793 00000BFA C21800                  	ret AND_KILL_FRAME(1)
  1794                                  .L_lambda_simple_end_004f:	; new closure is in rax
  1795 00000BFD 48890425[2C090000]      	mov qword [free_var_19], rax
  1796 00000C05 48B8-                   	mov rax, sob_void
  1796 00000C07 [0000000000000000] 
  1797                                  
  1798 00000C0F 4889C7                  	mov rdi, rax
  1799 00000C12 E80E2C0000              	call print_sexpr_if_not_void
  1800 00000C17 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1801 00000C1C E8AF290000              	call malloc
  1802 00000C21 50                      	push rax
  1803 00000C22 BF00000000              	mov rdi, 8 * 0	; new rib
  1804 00000C27 E8A4290000              	call malloc
  1805 00000C2C 50                      	push rax
  1806 00000C2D BF08000000              	mov rdi, 8 * 1	; extended env
  1807 00000C32 E899290000              	call malloc
  1808 00000C37 488B7D10                	mov rdi, ENV
  1809 00000C3B BE00000000              	mov rsi, 0
  1810 00000C40 BA01000000              	mov rdx, 1
  1811                                  .L_lambda_simple_env_loop_0050:	; ext_env[i + 1] <-- env[i]
  1812 00000C45 4883FE00                	cmp rsi, 0
  1813 00000C49 7410                    	je .L_lambda_simple_env_end_0050
  1814 00000C4B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1815 00000C4F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1816 00000C53 48FFC6                  	inc rsi
  1817 00000C56 48FFC2                  	inc rdx
  1818 00000C59 EBEA                    	jmp .L_lambda_simple_env_loop_0050
  1819                                  .L_lambda_simple_env_end_0050:
  1820 00000C5B 5B                      	pop rbx
  1821 00000C5C BE00000000              	mov rsi, 0
  1822                                  .L_lambda_simple_params_loop_0050:	; copy params
  1823 00000C61 4883FE00                	cmp rsi, 0
  1824 00000C65 740E                    	je .L_lambda_simple_params_end_0050
  1825 00000C67 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1826 00000C6C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1827 00000C70 48FFC6                  	inc rsi
  1828 00000C73 EBEC                    	jmp .L_lambda_simple_params_loop_0050
  1829                                  .L_lambda_simple_params_end_0050:
  1830 00000C75 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1831 00000C78 4889C3                  	mov rbx, rax
  1832 00000C7B 58                      	pop rax
  1833 00000C7C C60004                  	mov byte [rax], T_closure
  1834 00000C7F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1835 00000C83 48C74009[900C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0050
  1836 00000C8B E9AA000000              	jmp .L_lambda_simple_end_0050
  1837                                  .L_lambda_simple_code_0050:	; lambda-simple body
  1838 00000C90 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1839 00000C96 740B                    	je .L_lambda_simple_arity_check_ok_0050
  1840 00000C98 FF742410                	push qword [rsp + 8 * 2]
  1841 00000C9C 6A01                    	push 1
  1842 00000C9E E9E6280000              	jmp L_error_incorrect_arity_simple
  1843                                  .L_lambda_simple_arity_check_ok_0050:
  1844 00000CA3 C8000000                	enter 0, 0
  1845                                  	; preparing a tail-call
  1846                                  	; preparing a non-tail-call
  1847 00000CA7 488B4520                	mov rax, PARAM(0)	; param x
  1848 00000CAB 50                      	push rax
  1849 00000CAC 6A01                    	push 1	; arg count
  1850 00000CAE 488B0425[E8080000]      	mov rax, qword [free_var_15]	; free var cadr
  1851 00000CB6 803805                  	cmp byte [rax], T_undefined
  1852 00000CB9 0F84E4270000            	je L_error_fvar_undefined
  1853 00000CBF 803804                  	cmp byte [rax], T_closure
  1854 00000CC2 0F855F280000            	jne L_error_non_closure
  1855 00000CC8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1856 00000CCB FF5009                  	call SOB_CLOSURE_CODE(rax)
  1857 00000CCE 50                      	push rax
  1858 00000CCF 6A01                    	push 1	; arg count
  1859 00000CD1 488B0425[F8090000]      	mov rax, qword [free_var_31]	; free var cdr
  1860 00000CD9 803805                  	cmp byte [rax], T_undefined
  1861 00000CDC 0F84C1270000            	je L_error_fvar_undefined
  1862 00000CE2 803804                  	cmp byte [rax], T_closure
  1863 00000CE5 0F853C280000            	jne L_error_non_closure
  1864 00000CEB FF7001                  	push SOB_CLOSURE_ENV(rax)
  1865 00000CEE FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1866 00000CF1 FF7500                  	push qword[rbp]
  1867 00000CF4 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  1868 00000CF7 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  1869 00000CFB 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  1870 00000CFF 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  1871 00000D03 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  1872 00000D06 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  1873 00000D09 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  1874 00000D0E 4983C103                	add r9, 3 	 ;for getting to the params
  1875 00000D12 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  1876 00000D16 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  1877                                  .L_tc_recycle_frame_loop_0052:
  1878 00000D19 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  1879 00000D1C 7410                    	je .L_tc_recycle_frame_done_0052
  1880 00000D1E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  1881 00000D21 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  1882 00000D24 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  1883 00000D28 4983E808                	sub r8, 8	 ;move the top of the stack one down
  1884 00000D2C EBEB                    	jmp .L_tc_recycle_frame_loop_0052
  1885                                  .L_tc_recycle_frame_done_0052:
  1886 00000D2E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  1887 00000D2F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  1888 00000D33 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1889 00000D36 C9                      	leave
  1890 00000D37 C21800                  	ret AND_KILL_FRAME(1)
  1891                                  .L_lambda_simple_end_0050:	; new closure is in rax
  1892 00000D3A 48890425[5F090000]      	mov qword [free_var_22], rax
  1893 00000D42 48B8-                   	mov rax, sob_void
  1893 00000D44 [0000000000000000] 
  1894                                  
  1895 00000D4C 4889C7                  	mov rdi, rax
  1896 00000D4F E8D12A0000              	call print_sexpr_if_not_void
  1897 00000D54 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1898 00000D59 E872280000              	call malloc
  1899 00000D5E 50                      	push rax
  1900 00000D5F BF00000000              	mov rdi, 8 * 0	; new rib
  1901 00000D64 E867280000              	call malloc
  1902 00000D69 50                      	push rax
  1903 00000D6A BF08000000              	mov rdi, 8 * 1	; extended env
  1904 00000D6F E85C280000              	call malloc
  1905 00000D74 488B7D10                	mov rdi, ENV
  1906 00000D78 BE00000000              	mov rsi, 0
  1907 00000D7D BA01000000              	mov rdx, 1
  1908                                  .L_lambda_simple_env_loop_0051:	; ext_env[i + 1] <-- env[i]
  1909 00000D82 4883FE00                	cmp rsi, 0
  1910 00000D86 7410                    	je .L_lambda_simple_env_end_0051
  1911 00000D88 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1912 00000D8C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1913 00000D90 48FFC6                  	inc rsi
  1914 00000D93 48FFC2                  	inc rdx
  1915 00000D96 EBEA                    	jmp .L_lambda_simple_env_loop_0051
  1916                                  .L_lambda_simple_env_end_0051:
  1917 00000D98 5B                      	pop rbx
  1918 00000D99 BE00000000              	mov rsi, 0
  1919                                  .L_lambda_simple_params_loop_0051:	; copy params
  1920 00000D9E 4883FE00                	cmp rsi, 0
  1921 00000DA2 740E                    	je .L_lambda_simple_params_end_0051
  1922 00000DA4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1923 00000DA9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1924 00000DAD 48FFC6                  	inc rsi
  1925 00000DB0 EBEC                    	jmp .L_lambda_simple_params_loop_0051
  1926                                  .L_lambda_simple_params_end_0051:
  1927 00000DB2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1928 00000DB5 4889C3                  	mov rbx, rax
  1929 00000DB8 58                      	pop rax
  1930 00000DB9 C60004                  	mov byte [rax], T_closure
  1931 00000DBC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1932 00000DC0 48C74009[CD0D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0051
  1933 00000DC8 E9AA000000              	jmp .L_lambda_simple_end_0051
  1934                                  .L_lambda_simple_code_0051:	; lambda-simple body
  1935 00000DCD 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1936 00000DD3 740B                    	je .L_lambda_simple_arity_check_ok_0051
  1937 00000DD5 FF742410                	push qword [rsp + 8 * 2]
  1938 00000DD9 6A01                    	push 1
  1939 00000DDB E9A9270000              	jmp L_error_incorrect_arity_simple
  1940                                  .L_lambda_simple_arity_check_ok_0051:
  1941 00000DE0 C8000000                	enter 0, 0
  1942                                  	; preparing a tail-call
  1943                                  	; preparing a non-tail-call
  1944 00000DE4 488B4520                	mov rax, PARAM(0)	; param x
  1945 00000DE8 50                      	push rax
  1946 00000DE9 6A01                    	push 1	; arg count
  1947 00000DEB 488B0425[70090000]      	mov rax, qword [free_var_23]	; free var cdar
  1948 00000DF3 803805                  	cmp byte [rax], T_undefined
  1949 00000DF6 0F84A7260000            	je L_error_fvar_undefined
  1950 00000DFC 803804                  	cmp byte [rax], T_closure
  1951 00000DFF 0F8522270000            	jne L_error_non_closure
  1952 00000E05 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1953 00000E08 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1954 00000E0B 50                      	push rax
  1955 00000E0C 6A01                    	push 1	; arg count
  1956 00000E0E 488B0425[F8090000]      	mov rax, qword [free_var_31]	; free var cdr
  1957 00000E16 803805                  	cmp byte [rax], T_undefined
  1958 00000E19 0F8484260000            	je L_error_fvar_undefined
  1959 00000E1F 803804                  	cmp byte [rax], T_closure
  1960 00000E22 0F85FF260000            	jne L_error_non_closure
  1961 00000E28 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1962 00000E2B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1963 00000E2E FF7500                  	push qword[rbp]
  1964 00000E31 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  1965 00000E34 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  1966 00000E38 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  1967 00000E3C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  1968 00000E40 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  1969 00000E43 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  1970 00000E46 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  1971 00000E4B 4983C103                	add r9, 3 	 ;for getting to the params
  1972 00000E4F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  1973 00000E53 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  1974                                  .L_tc_recycle_frame_loop_0053:
  1975 00000E56 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  1976 00000E59 7410                    	je .L_tc_recycle_frame_done_0053
  1977 00000E5B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  1978 00000E5E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  1979 00000E61 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  1980 00000E65 4983E808                	sub r8, 8	 ;move the top of the stack one down
  1981 00000E69 EBEB                    	jmp .L_tc_recycle_frame_loop_0053
  1982                                  .L_tc_recycle_frame_done_0053:
  1983 00000E6B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  1984 00000E6C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  1985 00000E70 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1986 00000E73 C9                      	leave
  1987 00000E74 C21800                  	ret AND_KILL_FRAME(1)
  1988                                  .L_lambda_simple_end_0051:	; new closure is in rax
  1989 00000E77 48890425[A3090000]      	mov qword [free_var_26], rax
  1990 00000E7F 48B8-                   	mov rax, sob_void
  1990 00000E81 [0000000000000000] 
  1991                                  
  1992 00000E89 4889C7                  	mov rdi, rax
  1993 00000E8C E894290000              	call print_sexpr_if_not_void
  1994 00000E91 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1995 00000E96 E835270000              	call malloc
  1996 00000E9B 50                      	push rax
  1997 00000E9C BF00000000              	mov rdi, 8 * 0	; new rib
  1998 00000EA1 E82A270000              	call malloc
  1999 00000EA6 50                      	push rax
  2000 00000EA7 BF08000000              	mov rdi, 8 * 1	; extended env
  2001 00000EAC E81F270000              	call malloc
  2002 00000EB1 488B7D10                	mov rdi, ENV
  2003 00000EB5 BE00000000              	mov rsi, 0
  2004 00000EBA BA01000000              	mov rdx, 1
  2005                                  .L_lambda_simple_env_loop_0052:	; ext_env[i + 1] <-- env[i]
  2006 00000EBF 4883FE00                	cmp rsi, 0
  2007 00000EC3 7410                    	je .L_lambda_simple_env_end_0052
  2008 00000EC5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2009 00000EC9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2010 00000ECD 48FFC6                  	inc rsi
  2011 00000ED0 48FFC2                  	inc rdx
  2012 00000ED3 EBEA                    	jmp .L_lambda_simple_env_loop_0052
  2013                                  .L_lambda_simple_env_end_0052:
  2014 00000ED5 5B                      	pop rbx
  2015 00000ED6 BE00000000              	mov rsi, 0
  2016                                  .L_lambda_simple_params_loop_0052:	; copy params
  2017 00000EDB 4883FE00                	cmp rsi, 0
  2018 00000EDF 740E                    	je .L_lambda_simple_params_end_0052
  2019 00000EE1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2020 00000EE6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2021 00000EEA 48FFC6                  	inc rsi
  2022 00000EED EBEC                    	jmp .L_lambda_simple_params_loop_0052
  2023                                  .L_lambda_simple_params_end_0052:
  2024 00000EEF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2025 00000EF2 4889C3                  	mov rbx, rax
  2026 00000EF5 58                      	pop rax
  2027 00000EF6 C60004                  	mov byte [rax], T_closure
  2028 00000EF9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2029 00000EFD 48C74009[0A0F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0052
  2030 00000F05 E9AA000000              	jmp .L_lambda_simple_end_0052
  2031                                  .L_lambda_simple_code_0052:	; lambda-simple body
  2032 00000F0A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2033 00000F10 740B                    	je .L_lambda_simple_arity_check_ok_0052
  2034 00000F12 FF742410                	push qword [rsp + 8 * 2]
  2035 00000F16 6A01                    	push 1
  2036 00000F18 E96C260000              	jmp L_error_incorrect_arity_simple
  2037                                  .L_lambda_simple_arity_check_ok_0052:
  2038 00000F1D C8000000                	enter 0, 0
  2039                                  	; preparing a tail-call
  2040                                  	; preparing a non-tail-call
  2041 00000F21 488B4520                	mov rax, PARAM(0)	; param x
  2042 00000F25 50                      	push rax
  2043 00000F26 6A01                    	push 1	; arg count
  2044 00000F28 488B0425[E7090000]      	mov rax, qword [free_var_30]	; free var cddr
  2045 00000F30 803805                  	cmp byte [rax], T_undefined
  2046 00000F33 0F846A250000            	je L_error_fvar_undefined
  2047 00000F39 803804                  	cmp byte [rax], T_closure
  2048 00000F3C 0F85E5250000            	jne L_error_non_closure
  2049 00000F42 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2050 00000F45 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2051 00000F48 50                      	push rax
  2052 00000F49 6A01                    	push 1	; arg count
  2053 00000F4B 488B0425[F8090000]      	mov rax, qword [free_var_31]	; free var cdr
  2054 00000F53 803805                  	cmp byte [rax], T_undefined
  2055 00000F56 0F8447250000            	je L_error_fvar_undefined
  2056 00000F5C 803804                  	cmp byte [rax], T_closure
  2057 00000F5F 0F85C2250000            	jne L_error_non_closure
  2058 00000F65 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2059 00000F68 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2060 00000F6B FF7500                  	push qword[rbp]
  2061 00000F6E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2062 00000F71 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2063 00000F75 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2064 00000F79 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2065 00000F7D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2066 00000F80 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2067 00000F83 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2068 00000F88 4983C103                	add r9, 3 	 ;for getting to the params
  2069 00000F8C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2070 00000F90 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2071                                  .L_tc_recycle_frame_loop_0054:
  2072 00000F93 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2073 00000F96 7410                    	je .L_tc_recycle_frame_done_0054
  2074 00000F98 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2075 00000F9B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2076 00000F9E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2077 00000FA2 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2078 00000FA6 EBEB                    	jmp .L_tc_recycle_frame_loop_0054
  2079                                  .L_tc_recycle_frame_done_0054:
  2080 00000FA8 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2081 00000FA9 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2082 00000FAD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2083 00000FB0 C9                      	leave
  2084 00000FB1 C21800                  	ret AND_KILL_FRAME(1)
  2085                                  .L_lambda_simple_end_0052:	; new closure is in rax
  2086 00000FB4 48890425[D6090000]      	mov qword [free_var_29], rax
  2087 00000FBC 48B8-                   	mov rax, sob_void
  2087 00000FBE [0000000000000000] 
  2088                                  
  2089 00000FC6 4889C7                  	mov rdi, rax
  2090 00000FC9 E857280000              	call print_sexpr_if_not_void
  2091 00000FCE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2092 00000FD3 E8F8250000              	call malloc
  2093 00000FD8 50                      	push rax
  2094 00000FD9 BF00000000              	mov rdi, 8 * 0	; new rib
  2095 00000FDE E8ED250000              	call malloc
  2096 00000FE3 50                      	push rax
  2097 00000FE4 BF08000000              	mov rdi, 8 * 1	; extended env
  2098 00000FE9 E8E2250000              	call malloc
  2099 00000FEE 488B7D10                	mov rdi, ENV
  2100 00000FF2 BE00000000              	mov rsi, 0
  2101 00000FF7 BA01000000              	mov rdx, 1
  2102                                  .L_lambda_simple_env_loop_0053:	; ext_env[i + 1] <-- env[i]
  2103 00000FFC 4883FE00                	cmp rsi, 0
  2104 00001000 7410                    	je .L_lambda_simple_env_end_0053
  2105 00001002 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2106 00001006 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2107 0000100A 48FFC6                  	inc rsi
  2108 0000100D 48FFC2                  	inc rdx
  2109 00001010 EBEA                    	jmp .L_lambda_simple_env_loop_0053
  2110                                  .L_lambda_simple_env_end_0053:
  2111 00001012 5B                      	pop rbx
  2112 00001013 BE00000000              	mov rsi, 0
  2113                                  .L_lambda_simple_params_loop_0053:	; copy params
  2114 00001018 4883FE00                	cmp rsi, 0
  2115 0000101C 740E                    	je .L_lambda_simple_params_end_0053
  2116 0000101E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2117 00001023 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2118 00001027 48FFC6                  	inc rsi
  2119 0000102A EBEC                    	jmp .L_lambda_simple_params_loop_0053
  2120                                  .L_lambda_simple_params_end_0053:
  2121 0000102C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2122 0000102F 4889C3                  	mov rbx, rax
  2123 00001032 58                      	pop rax
  2124 00001033 C60004                  	mov byte [rax], T_closure
  2125 00001036 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2126 0000103A 48C74009[47100000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0053
  2127 00001042 E9AA000000              	jmp .L_lambda_simple_end_0053
  2128                                  .L_lambda_simple_code_0053:	; lambda-simple body
  2129 00001047 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2130 0000104D 740B                    	je .L_lambda_simple_arity_check_ok_0053
  2131 0000104F FF742410                	push qword [rsp + 8 * 2]
  2132 00001053 6A01                    	push 1
  2133 00001055 E92F250000              	jmp L_error_incorrect_arity_simple
  2134                                  .L_lambda_simple_arity_check_ok_0053:
  2135 0000105A C8000000                	enter 0, 0
  2136                                  	; preparing a tail-call
  2137                                  	; preparing a non-tail-call
  2138 0000105E 488B4520                	mov rax, PARAM(0)	; param x
  2139 00001062 50                      	push rax
  2140 00001063 6A01                    	push 1	; arg count
  2141 00001065 488B0425[71080000]      	mov rax, qword [free_var_8]	; free var caar
  2142 0000106D 803805                  	cmp byte [rax], T_undefined
  2143 00001070 0F842D240000            	je L_error_fvar_undefined
  2144 00001076 803804                  	cmp byte [rax], T_closure
  2145 00001079 0F85A8240000            	jne L_error_non_closure
  2146 0000107F FF7001                  	push SOB_CLOSURE_ENV(rax)
  2147 00001082 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2148 00001085 50                      	push rax
  2149 00001086 6A01                    	push 1	; arg count
  2150 00001088 488B0425[71080000]      	mov rax, qword [free_var_8]	; free var caar
  2151 00001090 803805                  	cmp byte [rax], T_undefined
  2152 00001093 0F840A240000            	je L_error_fvar_undefined
  2153 00001099 803804                  	cmp byte [rax], T_closure
  2154 0000109C 0F8585240000            	jne L_error_non_closure
  2155 000010A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2156 000010A5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2157 000010A8 FF7500                  	push qword[rbp]
  2158 000010AB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2159 000010AE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2160 000010B2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2161 000010B6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2162 000010BA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2163 000010BD 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2164 000010C0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2165 000010C5 4983C103                	add r9, 3 	 ;for getting to the params
  2166 000010C9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2167 000010CD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2168                                  .L_tc_recycle_frame_loop_0055:
  2169 000010D0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2170 000010D3 7410                    	je .L_tc_recycle_frame_done_0055
  2171 000010D5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2172 000010D8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2173 000010DB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2174 000010DF 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2175 000010E3 EBEB                    	jmp .L_tc_recycle_frame_loop_0055
  2176                                  .L_tc_recycle_frame_done_0055:
  2177 000010E5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2178 000010E6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2179 000010EA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2180 000010ED C9                      	leave
  2181 000010EE C21800                  	ret AND_KILL_FRAME(1)
  2182                                  .L_lambda_simple_end_0053:	; new closure is in rax
  2183 000010F1 48890425[0B080000]      	mov qword [free_var_2], rax
  2184 000010F9 48B8-                   	mov rax, sob_void
  2184 000010FB [0000000000000000] 
  2185                                  
  2186 00001103 4889C7                  	mov rdi, rax
  2187 00001106 E81A270000              	call print_sexpr_if_not_void
  2188 0000110B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2189 00001110 E8BB240000              	call malloc
  2190 00001115 50                      	push rax
  2191 00001116 BF00000000              	mov rdi, 8 * 0	; new rib
  2192 0000111B E8B0240000              	call malloc
  2193 00001120 50                      	push rax
  2194 00001121 BF08000000              	mov rdi, 8 * 1	; extended env
  2195 00001126 E8A5240000              	call malloc
  2196 0000112B 488B7D10                	mov rdi, ENV
  2197 0000112F BE00000000              	mov rsi, 0
  2198 00001134 BA01000000              	mov rdx, 1
  2199                                  .L_lambda_simple_env_loop_0054:	; ext_env[i + 1] <-- env[i]
  2200 00001139 4883FE00                	cmp rsi, 0
  2201 0000113D 7410                    	je .L_lambda_simple_env_end_0054
  2202 0000113F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2203 00001143 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2204 00001147 48FFC6                  	inc rsi
  2205 0000114A 48FFC2                  	inc rdx
  2206 0000114D EBEA                    	jmp .L_lambda_simple_env_loop_0054
  2207                                  .L_lambda_simple_env_end_0054:
  2208 0000114F 5B                      	pop rbx
  2209 00001150 BE00000000              	mov rsi, 0
  2210                                  .L_lambda_simple_params_loop_0054:	; copy params
  2211 00001155 4883FE00                	cmp rsi, 0
  2212 00001159 740E                    	je .L_lambda_simple_params_end_0054
  2213 0000115B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2214 00001160 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2215 00001164 48FFC6                  	inc rsi
  2216 00001167 EBEC                    	jmp .L_lambda_simple_params_loop_0054
  2217                                  .L_lambda_simple_params_end_0054:
  2218 00001169 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2219 0000116C 4889C3                  	mov rbx, rax
  2220 0000116F 58                      	pop rax
  2221 00001170 C60004                  	mov byte [rax], T_closure
  2222 00001173 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2223 00001177 48C74009[84110000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0054
  2224 0000117F E9AA000000              	jmp .L_lambda_simple_end_0054
  2225                                  .L_lambda_simple_code_0054:	; lambda-simple body
  2226 00001184 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2227 0000118A 740B                    	je .L_lambda_simple_arity_check_ok_0054
  2228 0000118C FF742410                	push qword [rsp + 8 * 2]
  2229 00001190 6A01                    	push 1
  2230 00001192 E9F2230000              	jmp L_error_incorrect_arity_simple
  2231                                  .L_lambda_simple_arity_check_ok_0054:
  2232 00001197 C8000000                	enter 0, 0
  2233                                  	; preparing a tail-call
  2234                                  	; preparing a non-tail-call
  2235 0000119B 488B4520                	mov rax, PARAM(0)	; param x
  2236 0000119F 50                      	push rax
  2237 000011A0 6A01                    	push 1	; arg count
  2238 000011A2 488B0425[E8080000]      	mov rax, qword [free_var_15]	; free var cadr
  2239 000011AA 803805                  	cmp byte [rax], T_undefined
  2240 000011AD 0F84F0220000            	je L_error_fvar_undefined
  2241 000011B3 803804                  	cmp byte [rax], T_closure
  2242 000011B6 0F856B230000            	jne L_error_non_closure
  2243 000011BC FF7001                  	push SOB_CLOSURE_ENV(rax)
  2244 000011BF FF5009                  	call SOB_CLOSURE_CODE(rax)
  2245 000011C2 50                      	push rax
  2246 000011C3 6A01                    	push 1	; arg count
  2247 000011C5 488B0425[71080000]      	mov rax, qword [free_var_8]	; free var caar
  2248 000011CD 803805                  	cmp byte [rax], T_undefined
  2249 000011D0 0F84CD220000            	je L_error_fvar_undefined
  2250 000011D6 803804                  	cmp byte [rax], T_closure
  2251 000011D9 0F8548230000            	jne L_error_non_closure
  2252 000011DF FF7001                  	push SOB_CLOSURE_ENV(rax)
  2253 000011E2 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2254 000011E5 FF7500                  	push qword[rbp]
  2255 000011E8 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2256 000011EB 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2257 000011EF 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2258 000011F3 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2259 000011F7 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2260 000011FA 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2261 000011FD 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2262 00001202 4983C103                	add r9, 3 	 ;for getting to the params
  2263 00001206 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2264 0000120A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2265                                  .L_tc_recycle_frame_loop_0056:
  2266 0000120D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2267 00001210 7410                    	je .L_tc_recycle_frame_done_0056
  2268 00001212 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2269 00001215 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2270 00001218 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2271 0000121C 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2272 00001220 EBEB                    	jmp .L_tc_recycle_frame_loop_0056
  2273                                  .L_tc_recycle_frame_done_0056:
  2274 00001222 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2275 00001223 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2276 00001227 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2277 0000122A C9                      	leave
  2278 0000122B C21800                  	ret AND_KILL_FRAME(1)
  2279                                  .L_lambda_simple_end_0054:	; new closure is in rax
  2280 0000122E 48890425[1C080000]      	mov qword [free_var_3], rax
  2281 00001236 48B8-                   	mov rax, sob_void
  2281 00001238 [0000000000000000] 
  2282                                  
  2283 00001240 4889C7                  	mov rdi, rax
  2284 00001243 E8DD250000              	call print_sexpr_if_not_void
  2285 00001248 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2286 0000124D E87E230000              	call malloc
  2287 00001252 50                      	push rax
  2288 00001253 BF00000000              	mov rdi, 8 * 0	; new rib
  2289 00001258 E873230000              	call malloc
  2290 0000125D 50                      	push rax
  2291 0000125E BF08000000              	mov rdi, 8 * 1	; extended env
  2292 00001263 E868230000              	call malloc
  2293 00001268 488B7D10                	mov rdi, ENV
  2294 0000126C BE00000000              	mov rsi, 0
  2295 00001271 BA01000000              	mov rdx, 1
  2296                                  .L_lambda_simple_env_loop_0055:	; ext_env[i + 1] <-- env[i]
  2297 00001276 4883FE00                	cmp rsi, 0
  2298 0000127A 7410                    	je .L_lambda_simple_env_end_0055
  2299 0000127C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2300 00001280 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2301 00001284 48FFC6                  	inc rsi
  2302 00001287 48FFC2                  	inc rdx
  2303 0000128A EBEA                    	jmp .L_lambda_simple_env_loop_0055
  2304                                  .L_lambda_simple_env_end_0055:
  2305 0000128C 5B                      	pop rbx
  2306 0000128D BE00000000              	mov rsi, 0
  2307                                  .L_lambda_simple_params_loop_0055:	; copy params
  2308 00001292 4883FE00                	cmp rsi, 0
  2309 00001296 740E                    	je .L_lambda_simple_params_end_0055
  2310 00001298 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2311 0000129D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2312 000012A1 48FFC6                  	inc rsi
  2313 000012A4 EBEC                    	jmp .L_lambda_simple_params_loop_0055
  2314                                  .L_lambda_simple_params_end_0055:
  2315 000012A6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2316 000012A9 4889C3                  	mov rbx, rax
  2317 000012AC 58                      	pop rax
  2318 000012AD C60004                  	mov byte [rax], T_closure
  2319 000012B0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2320 000012B4 48C74009[C1120000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0055
  2321 000012BC E9AA000000              	jmp .L_lambda_simple_end_0055
  2322                                  .L_lambda_simple_code_0055:	; lambda-simple body
  2323 000012C1 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2324 000012C7 740B                    	je .L_lambda_simple_arity_check_ok_0055
  2325 000012C9 FF742410                	push qword [rsp + 8 * 2]
  2326 000012CD 6A01                    	push 1
  2327 000012CF E9B5220000              	jmp L_error_incorrect_arity_simple
  2328                                  .L_lambda_simple_arity_check_ok_0055:
  2329 000012D4 C8000000                	enter 0, 0
  2330                                  	; preparing a tail-call
  2331                                  	; preparing a non-tail-call
  2332 000012D8 488B4520                	mov rax, PARAM(0)	; param x
  2333 000012DC 50                      	push rax
  2334 000012DD 6A01                    	push 1	; arg count
  2335 000012DF 488B0425[70090000]      	mov rax, qword [free_var_23]	; free var cdar
  2336 000012E7 803805                  	cmp byte [rax], T_undefined
  2337 000012EA 0F84B3210000            	je L_error_fvar_undefined
  2338 000012F0 803804                  	cmp byte [rax], T_closure
  2339 000012F3 0F852E220000            	jne L_error_non_closure
  2340 000012F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2341 000012FC FF5009                  	call SOB_CLOSURE_CODE(rax)
  2342 000012FF 50                      	push rax
  2343 00001300 6A01                    	push 1	; arg count
  2344 00001302 488B0425[71080000]      	mov rax, qword [free_var_8]	; free var caar
  2345 0000130A 803805                  	cmp byte [rax], T_undefined
  2346 0000130D 0F8490210000            	je L_error_fvar_undefined
  2347 00001313 803804                  	cmp byte [rax], T_closure
  2348 00001316 0F850B220000            	jne L_error_non_closure
  2349 0000131C FF7001                  	push SOB_CLOSURE_ENV(rax)
  2350 0000131F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2351 00001322 FF7500                  	push qword[rbp]
  2352 00001325 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2353 00001328 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2354 0000132C 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2355 00001330 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2356 00001334 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2357 00001337 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2358 0000133A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2359 0000133F 4983C103                	add r9, 3 	 ;for getting to the params
  2360 00001343 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2361 00001347 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2362                                  .L_tc_recycle_frame_loop_0057:
  2363 0000134A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2364 0000134D 7410                    	je .L_tc_recycle_frame_done_0057
  2365 0000134F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2366 00001352 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2367 00001355 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2368 00001359 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2369 0000135D EBEB                    	jmp .L_tc_recycle_frame_loop_0057
  2370                                  .L_tc_recycle_frame_done_0057:
  2371 0000135F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2372 00001360 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2373 00001364 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2374 00001367 C9                      	leave
  2375 00001368 C21800                  	ret AND_KILL_FRAME(1)
  2376                                  .L_lambda_simple_end_0055:	; new closure is in rax
  2377 0000136B 48890425[3E080000]      	mov qword [free_var_5], rax
  2378 00001373 48B8-                   	mov rax, sob_void
  2378 00001375 [0000000000000000] 
  2379                                  
  2380 0000137D 4889C7                  	mov rdi, rax
  2381 00001380 E8A0240000              	call print_sexpr_if_not_void
  2382 00001385 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2383 0000138A E841220000              	call malloc
  2384 0000138F 50                      	push rax
  2385 00001390 BF00000000              	mov rdi, 8 * 0	; new rib
  2386 00001395 E836220000              	call malloc
  2387 0000139A 50                      	push rax
  2388 0000139B BF08000000              	mov rdi, 8 * 1	; extended env
  2389 000013A0 E82B220000              	call malloc
  2390 000013A5 488B7D10                	mov rdi, ENV
  2391 000013A9 BE00000000              	mov rsi, 0
  2392 000013AE BA01000000              	mov rdx, 1
  2393                                  .L_lambda_simple_env_loop_0056:	; ext_env[i + 1] <-- env[i]
  2394 000013B3 4883FE00                	cmp rsi, 0
  2395 000013B7 7410                    	je .L_lambda_simple_env_end_0056
  2396 000013B9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2397 000013BD 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2398 000013C1 48FFC6                  	inc rsi
  2399 000013C4 48FFC2                  	inc rdx
  2400 000013C7 EBEA                    	jmp .L_lambda_simple_env_loop_0056
  2401                                  .L_lambda_simple_env_end_0056:
  2402 000013C9 5B                      	pop rbx
  2403 000013CA BE00000000              	mov rsi, 0
  2404                                  .L_lambda_simple_params_loop_0056:	; copy params
  2405 000013CF 4883FE00                	cmp rsi, 0
  2406 000013D3 740E                    	je .L_lambda_simple_params_end_0056
  2407 000013D5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2408 000013DA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2409 000013DE 48FFC6                  	inc rsi
  2410 000013E1 EBEC                    	jmp .L_lambda_simple_params_loop_0056
  2411                                  .L_lambda_simple_params_end_0056:
  2412 000013E3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2413 000013E6 4889C3                  	mov rbx, rax
  2414 000013E9 58                      	pop rax
  2415 000013EA C60004                  	mov byte [rax], T_closure
  2416 000013ED 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2417 000013F1 48C74009[FE130000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0056
  2418 000013F9 E9AA000000              	jmp .L_lambda_simple_end_0056
  2419                                  .L_lambda_simple_code_0056:	; lambda-simple body
  2420 000013FE 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2421 00001404 740B                    	je .L_lambda_simple_arity_check_ok_0056
  2422 00001406 FF742410                	push qword [rsp + 8 * 2]
  2423 0000140A 6A01                    	push 1
  2424 0000140C E978210000              	jmp L_error_incorrect_arity_simple
  2425                                  .L_lambda_simple_arity_check_ok_0056:
  2426 00001411 C8000000                	enter 0, 0
  2427                                  	; preparing a tail-call
  2428                                  	; preparing a non-tail-call
  2429 00001415 488B4520                	mov rax, PARAM(0)	; param x
  2430 00001419 50                      	push rax
  2431 0000141A 6A01                    	push 1	; arg count
  2432 0000141C 488B0425[E7090000]      	mov rax, qword [free_var_30]	; free var cddr
  2433 00001424 803805                  	cmp byte [rax], T_undefined
  2434 00001427 0F8476200000            	je L_error_fvar_undefined
  2435 0000142D 803804                  	cmp byte [rax], T_closure
  2436 00001430 0F85F1200000            	jne L_error_non_closure
  2437 00001436 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2438 00001439 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2439 0000143C 50                      	push rax
  2440 0000143D 6A01                    	push 1	; arg count
  2441 0000143F 488B0425[71080000]      	mov rax, qword [free_var_8]	; free var caar
  2442 00001447 803805                  	cmp byte [rax], T_undefined
  2443 0000144A 0F8453200000            	je L_error_fvar_undefined
  2444 00001450 803804                  	cmp byte [rax], T_closure
  2445 00001453 0F85CE200000            	jne L_error_non_closure
  2446 00001459 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2447 0000145C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2448 0000145F FF7500                  	push qword[rbp]
  2449 00001462 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2450 00001465 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2451 00001469 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2452 0000146D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2453 00001471 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2454 00001474 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2455 00001477 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2456 0000147C 4983C103                	add r9, 3 	 ;for getting to the params
  2457 00001480 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2458 00001484 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2459                                  .L_tc_recycle_frame_loop_0058:
  2460 00001487 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2461 0000148A 7410                    	je .L_tc_recycle_frame_done_0058
  2462 0000148C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2463 0000148F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2464 00001492 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2465 00001496 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2466 0000149A EBEB                    	jmp .L_tc_recycle_frame_loop_0058
  2467                                  .L_tc_recycle_frame_done_0058:
  2468 0000149C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2469 0000149D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2470 000014A1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2471 000014A4 C9                      	leave
  2472 000014A5 C21800                  	ret AND_KILL_FRAME(1)
  2473                                  .L_lambda_simple_end_0056:	; new closure is in rax
  2474 000014A8 48890425[4F080000]      	mov qword [free_var_6], rax
  2475 000014B0 48B8-                   	mov rax, sob_void
  2475 000014B2 [0000000000000000] 
  2476                                  
  2477 000014BA 4889C7                  	mov rdi, rax
  2478 000014BD E863230000              	call print_sexpr_if_not_void
  2479 000014C2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2480 000014C7 E804210000              	call malloc
  2481 000014CC 50                      	push rax
  2482 000014CD BF00000000              	mov rdi, 8 * 0	; new rib
  2483 000014D2 E8F9200000              	call malloc
  2484 000014D7 50                      	push rax
  2485 000014D8 BF08000000              	mov rdi, 8 * 1	; extended env
  2486 000014DD E8EE200000              	call malloc
  2487 000014E2 488B7D10                	mov rdi, ENV
  2488 000014E6 BE00000000              	mov rsi, 0
  2489 000014EB BA01000000              	mov rdx, 1
  2490                                  .L_lambda_simple_env_loop_0057:	; ext_env[i + 1] <-- env[i]
  2491 000014F0 4883FE00                	cmp rsi, 0
  2492 000014F4 7410                    	je .L_lambda_simple_env_end_0057
  2493 000014F6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2494 000014FA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2495 000014FE 48FFC6                  	inc rsi
  2496 00001501 48FFC2                  	inc rdx
  2497 00001504 EBEA                    	jmp .L_lambda_simple_env_loop_0057
  2498                                  .L_lambda_simple_env_end_0057:
  2499 00001506 5B                      	pop rbx
  2500 00001507 BE00000000              	mov rsi, 0
  2501                                  .L_lambda_simple_params_loop_0057:	; copy params
  2502 0000150C 4883FE00                	cmp rsi, 0
  2503 00001510 740E                    	je .L_lambda_simple_params_end_0057
  2504 00001512 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2505 00001517 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2506 0000151B 48FFC6                  	inc rsi
  2507 0000151E EBEC                    	jmp .L_lambda_simple_params_loop_0057
  2508                                  .L_lambda_simple_params_end_0057:
  2509 00001520 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2510 00001523 4889C3                  	mov rbx, rax
  2511 00001526 58                      	pop rax
  2512 00001527 C60004                  	mov byte [rax], T_closure
  2513 0000152A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2514 0000152E 48C74009[3B150000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0057
  2515 00001536 E9AA000000              	jmp .L_lambda_simple_end_0057
  2516                                  .L_lambda_simple_code_0057:	; lambda-simple body
  2517 0000153B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2518 00001541 740B                    	je .L_lambda_simple_arity_check_ok_0057
  2519 00001543 FF742410                	push qword [rsp + 8 * 2]
  2520 00001547 6A01                    	push 1
  2521 00001549 E93B200000              	jmp L_error_incorrect_arity_simple
  2522                                  .L_lambda_simple_arity_check_ok_0057:
  2523 0000154E C8000000                	enter 0, 0
  2524                                  	; preparing a tail-call
  2525                                  	; preparing a non-tail-call
  2526 00001552 488B4520                	mov rax, PARAM(0)	; param x
  2527 00001556 50                      	push rax
  2528 00001557 6A01                    	push 1	; arg count
  2529 00001559 488B0425[71080000]      	mov rax, qword [free_var_8]	; free var caar
  2530 00001561 803805                  	cmp byte [rax], T_undefined
  2531 00001564 0F84391F0000            	je L_error_fvar_undefined
  2532 0000156A 803804                  	cmp byte [rax], T_closure
  2533 0000156D 0F85B41F0000            	jne L_error_non_closure
  2534 00001573 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2535 00001576 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2536 00001579 50                      	push rax
  2537 0000157A 6A01                    	push 1	; arg count
  2538 0000157C 488B0425[E8080000]      	mov rax, qword [free_var_15]	; free var cadr
  2539 00001584 803805                  	cmp byte [rax], T_undefined
  2540 00001587 0F84161F0000            	je L_error_fvar_undefined
  2541 0000158D 803804                  	cmp byte [rax], T_closure
  2542 00001590 0F85911F0000            	jne L_error_non_closure
  2543 00001596 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2544 00001599 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2545 0000159C FF7500                  	push qword[rbp]
  2546 0000159F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2547 000015A2 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2548 000015A6 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2549 000015AA 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2550 000015AE 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2551 000015B1 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2552 000015B4 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2553 000015B9 4983C103                	add r9, 3 	 ;for getting to the params
  2554 000015BD 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2555 000015C1 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2556                                  .L_tc_recycle_frame_loop_0059:
  2557 000015C4 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2558 000015C7 7410                    	je .L_tc_recycle_frame_done_0059
  2559 000015C9 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2560 000015CC 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2561 000015CF 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2562 000015D3 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2563 000015D7 EBEB                    	jmp .L_tc_recycle_frame_loop_0059
  2564                                  .L_tc_recycle_frame_done_0059:
  2565 000015D9 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2566 000015DA 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2567 000015DE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2568 000015E1 C9                      	leave
  2569 000015E2 C21800                  	ret AND_KILL_FRAME(1)
  2570                                  .L_lambda_simple_end_0057:	; new closure is in rax
  2571 000015E5 48890425[82080000]      	mov qword [free_var_9], rax
  2572 000015ED 48B8-                   	mov rax, sob_void
  2572 000015EF [0000000000000000] 
  2573                                  
  2574 000015F7 4889C7                  	mov rdi, rax
  2575 000015FA E826220000              	call print_sexpr_if_not_void
  2576 000015FF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2577 00001604 E8C71F0000              	call malloc
  2578 00001609 50                      	push rax
  2579 0000160A BF00000000              	mov rdi, 8 * 0	; new rib
  2580 0000160F E8BC1F0000              	call malloc
  2581 00001614 50                      	push rax
  2582 00001615 BF08000000              	mov rdi, 8 * 1	; extended env
  2583 0000161A E8B11F0000              	call malloc
  2584 0000161F 488B7D10                	mov rdi, ENV
  2585 00001623 BE00000000              	mov rsi, 0
  2586 00001628 BA01000000              	mov rdx, 1
  2587                                  .L_lambda_simple_env_loop_0058:	; ext_env[i + 1] <-- env[i]
  2588 0000162D 4883FE00                	cmp rsi, 0
  2589 00001631 7410                    	je .L_lambda_simple_env_end_0058
  2590 00001633 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2591 00001637 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2592 0000163B 48FFC6                  	inc rsi
  2593 0000163E 48FFC2                  	inc rdx
  2594 00001641 EBEA                    	jmp .L_lambda_simple_env_loop_0058
  2595                                  .L_lambda_simple_env_end_0058:
  2596 00001643 5B                      	pop rbx
  2597 00001644 BE00000000              	mov rsi, 0
  2598                                  .L_lambda_simple_params_loop_0058:	; copy params
  2599 00001649 4883FE00                	cmp rsi, 0
  2600 0000164D 740E                    	je .L_lambda_simple_params_end_0058
  2601 0000164F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2602 00001654 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2603 00001658 48FFC6                  	inc rsi
  2604 0000165B EBEC                    	jmp .L_lambda_simple_params_loop_0058
  2605                                  .L_lambda_simple_params_end_0058:
  2606 0000165D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2607 00001660 4889C3                  	mov rbx, rax
  2608 00001663 58                      	pop rax
  2609 00001664 C60004                  	mov byte [rax], T_closure
  2610 00001667 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2611 0000166B 48C74009[78160000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0058
  2612 00001673 E9AA000000              	jmp .L_lambda_simple_end_0058
  2613                                  .L_lambda_simple_code_0058:	; lambda-simple body
  2614 00001678 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2615 0000167E 740B                    	je .L_lambda_simple_arity_check_ok_0058
  2616 00001680 FF742410                	push qword [rsp + 8 * 2]
  2617 00001684 6A01                    	push 1
  2618 00001686 E9FE1E0000              	jmp L_error_incorrect_arity_simple
  2619                                  .L_lambda_simple_arity_check_ok_0058:
  2620 0000168B C8000000                	enter 0, 0
  2621                                  	; preparing a tail-call
  2622                                  	; preparing a non-tail-call
  2623 0000168F 488B4520                	mov rax, PARAM(0)	; param x
  2624 00001693 50                      	push rax
  2625 00001694 6A01                    	push 1	; arg count
  2626 00001696 488B0425[E8080000]      	mov rax, qword [free_var_15]	; free var cadr
  2627 0000169E 803805                  	cmp byte [rax], T_undefined
  2628 000016A1 0F84FC1D0000            	je L_error_fvar_undefined
  2629 000016A7 803804                  	cmp byte [rax], T_closure
  2630 000016AA 0F85771E0000            	jne L_error_non_closure
  2631 000016B0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2632 000016B3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2633 000016B6 50                      	push rax
  2634 000016B7 6A01                    	push 1	; arg count
  2635 000016B9 488B0425[E8080000]      	mov rax, qword [free_var_15]	; free var cadr
  2636 000016C1 803805                  	cmp byte [rax], T_undefined
  2637 000016C4 0F84D91D0000            	je L_error_fvar_undefined
  2638 000016CA 803804                  	cmp byte [rax], T_closure
  2639 000016CD 0F85541E0000            	jne L_error_non_closure
  2640 000016D3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2641 000016D6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2642 000016D9 FF7500                  	push qword[rbp]
  2643 000016DC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2644 000016DF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2645 000016E3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2646 000016E7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2647 000016EB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2648 000016EE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2649 000016F1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2650 000016F6 4983C103                	add r9, 3 	 ;for getting to the params
  2651 000016FA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2652 000016FE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2653                                  .L_tc_recycle_frame_loop_005a:
  2654 00001701 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2655 00001704 7410                    	je .L_tc_recycle_frame_done_005a
  2656 00001706 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2657 00001709 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2658 0000170C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2659 00001710 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2660 00001714 EBEB                    	jmp .L_tc_recycle_frame_loop_005a
  2661                                  .L_tc_recycle_frame_done_005a:
  2662 00001716 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2663 00001717 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2664 0000171B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2665 0000171E C9                      	leave
  2666 0000171F C21800                  	ret AND_KILL_FRAME(1)
  2667                                  .L_lambda_simple_end_0058:	; new closure is in rax
  2668 00001722 48890425[93080000]      	mov qword [free_var_10], rax
  2669 0000172A 48B8-                   	mov rax, sob_void
  2669 0000172C [0000000000000000] 
  2670                                  
  2671 00001734 4889C7                  	mov rdi, rax
  2672 00001737 E8E9200000              	call print_sexpr_if_not_void
  2673 0000173C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2674 00001741 E88A1E0000              	call malloc
  2675 00001746 50                      	push rax
  2676 00001747 BF00000000              	mov rdi, 8 * 0	; new rib
  2677 0000174C E87F1E0000              	call malloc
  2678 00001751 50                      	push rax
  2679 00001752 BF08000000              	mov rdi, 8 * 1	; extended env
  2680 00001757 E8741E0000              	call malloc
  2681 0000175C 488B7D10                	mov rdi, ENV
  2682 00001760 BE00000000              	mov rsi, 0
  2683 00001765 BA01000000              	mov rdx, 1
  2684                                  .L_lambda_simple_env_loop_0059:	; ext_env[i + 1] <-- env[i]
  2685 0000176A 4883FE00                	cmp rsi, 0
  2686 0000176E 7410                    	je .L_lambda_simple_env_end_0059
  2687 00001770 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2688 00001774 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2689 00001778 48FFC6                  	inc rsi
  2690 0000177B 48FFC2                  	inc rdx
  2691 0000177E EBEA                    	jmp .L_lambda_simple_env_loop_0059
  2692                                  .L_lambda_simple_env_end_0059:
  2693 00001780 5B                      	pop rbx
  2694 00001781 BE00000000              	mov rsi, 0
  2695                                  .L_lambda_simple_params_loop_0059:	; copy params
  2696 00001786 4883FE00                	cmp rsi, 0
  2697 0000178A 740E                    	je .L_lambda_simple_params_end_0059
  2698 0000178C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2699 00001791 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2700 00001795 48FFC6                  	inc rsi
  2701 00001798 EBEC                    	jmp .L_lambda_simple_params_loop_0059
  2702                                  .L_lambda_simple_params_end_0059:
  2703 0000179A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2704 0000179D 4889C3                  	mov rbx, rax
  2705 000017A0 58                      	pop rax
  2706 000017A1 C60004                  	mov byte [rax], T_closure
  2707 000017A4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2708 000017A8 48C74009[B5170000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0059
  2709 000017B0 E9AA000000              	jmp .L_lambda_simple_end_0059
  2710                                  .L_lambda_simple_code_0059:	; lambda-simple body
  2711 000017B5 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2712 000017BB 740B                    	je .L_lambda_simple_arity_check_ok_0059
  2713 000017BD FF742410                	push qword [rsp + 8 * 2]
  2714 000017C1 6A01                    	push 1
  2715 000017C3 E9C11D0000              	jmp L_error_incorrect_arity_simple
  2716                                  .L_lambda_simple_arity_check_ok_0059:
  2717 000017C8 C8000000                	enter 0, 0
  2718                                  	; preparing a tail-call
  2719                                  	; preparing a non-tail-call
  2720 000017CC 488B4520                	mov rax, PARAM(0)	; param x
  2721 000017D0 50                      	push rax
  2722 000017D1 6A01                    	push 1	; arg count
  2723 000017D3 488B0425[70090000]      	mov rax, qword [free_var_23]	; free var cdar
  2724 000017DB 803805                  	cmp byte [rax], T_undefined
  2725 000017DE 0F84BF1C0000            	je L_error_fvar_undefined
  2726 000017E4 803804                  	cmp byte [rax], T_closure
  2727 000017E7 0F853A1D0000            	jne L_error_non_closure
  2728 000017ED FF7001                  	push SOB_CLOSURE_ENV(rax)
  2729 000017F0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2730 000017F3 50                      	push rax
  2731 000017F4 6A01                    	push 1	; arg count
  2732 000017F6 488B0425[E8080000]      	mov rax, qword [free_var_15]	; free var cadr
  2733 000017FE 803805                  	cmp byte [rax], T_undefined
  2734 00001801 0F849C1C0000            	je L_error_fvar_undefined
  2735 00001807 803804                  	cmp byte [rax], T_closure
  2736 0000180A 0F85171D0000            	jne L_error_non_closure
  2737 00001810 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2738 00001813 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2739 00001816 FF7500                  	push qword[rbp]
  2740 00001819 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2741 0000181C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2742 00001820 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2743 00001824 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2744 00001828 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2745 0000182B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2746 0000182E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2747 00001833 4983C103                	add r9, 3 	 ;for getting to the params
  2748 00001837 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2749 0000183B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2750                                  .L_tc_recycle_frame_loop_005b:
  2751 0000183E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2752 00001841 7410                    	je .L_tc_recycle_frame_done_005b
  2753 00001843 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2754 00001846 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2755 00001849 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2756 0000184D 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2757 00001851 EBEB                    	jmp .L_tc_recycle_frame_loop_005b
  2758                                  .L_tc_recycle_frame_done_005b:
  2759 00001853 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2760 00001854 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2761 00001858 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2762 0000185B C9                      	leave
  2763 0000185C C21800                  	ret AND_KILL_FRAME(1)
  2764                                  .L_lambda_simple_end_0059:	; new closure is in rax
  2765 0000185F 48890425[B5080000]      	mov qword [free_var_12], rax
  2766 00001867 48B8-                   	mov rax, sob_void
  2766 00001869 [0000000000000000] 
  2767                                  
  2768 00001871 4889C7                  	mov rdi, rax
  2769 00001874 E8AC1F0000              	call print_sexpr_if_not_void
  2770 00001879 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2771 0000187E E84D1D0000              	call malloc
  2772 00001883 50                      	push rax
  2773 00001884 BF00000000              	mov rdi, 8 * 0	; new rib
  2774 00001889 E8421D0000              	call malloc
  2775 0000188E 50                      	push rax
  2776 0000188F BF08000000              	mov rdi, 8 * 1	; extended env
  2777 00001894 E8371D0000              	call malloc
  2778 00001899 488B7D10                	mov rdi, ENV
  2779 0000189D BE00000000              	mov rsi, 0
  2780 000018A2 BA01000000              	mov rdx, 1
  2781                                  .L_lambda_simple_env_loop_005a:	; ext_env[i + 1] <-- env[i]
  2782 000018A7 4883FE00                	cmp rsi, 0
  2783 000018AB 7410                    	je .L_lambda_simple_env_end_005a
  2784 000018AD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2785 000018B1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2786 000018B5 48FFC6                  	inc rsi
  2787 000018B8 48FFC2                  	inc rdx
  2788 000018BB EBEA                    	jmp .L_lambda_simple_env_loop_005a
  2789                                  .L_lambda_simple_env_end_005a:
  2790 000018BD 5B                      	pop rbx
  2791 000018BE BE00000000              	mov rsi, 0
  2792                                  .L_lambda_simple_params_loop_005a:	; copy params
  2793 000018C3 4883FE00                	cmp rsi, 0
  2794 000018C7 740E                    	je .L_lambda_simple_params_end_005a
  2795 000018C9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2796 000018CE 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2797 000018D2 48FFC6                  	inc rsi
  2798 000018D5 EBEC                    	jmp .L_lambda_simple_params_loop_005a
  2799                                  .L_lambda_simple_params_end_005a:
  2800 000018D7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2801 000018DA 4889C3                  	mov rbx, rax
  2802 000018DD 58                      	pop rax
  2803 000018DE C60004                  	mov byte [rax], T_closure
  2804 000018E1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2805 000018E5 48C74009[F2180000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005a
  2806 000018ED E9AA000000              	jmp .L_lambda_simple_end_005a
  2807                                  .L_lambda_simple_code_005a:	; lambda-simple body
  2808 000018F2 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2809 000018F8 740B                    	je .L_lambda_simple_arity_check_ok_005a
  2810 000018FA FF742410                	push qword [rsp + 8 * 2]
  2811 000018FE 6A01                    	push 1
  2812 00001900 E9841C0000              	jmp L_error_incorrect_arity_simple
  2813                                  .L_lambda_simple_arity_check_ok_005a:
  2814 00001905 C8000000                	enter 0, 0
  2815                                  	; preparing a tail-call
  2816                                  	; preparing a non-tail-call
  2817 00001909 488B4520                	mov rax, PARAM(0)	; param x
  2818 0000190D 50                      	push rax
  2819 0000190E 6A01                    	push 1	; arg count
  2820 00001910 488B0425[E7090000]      	mov rax, qword [free_var_30]	; free var cddr
  2821 00001918 803805                  	cmp byte [rax], T_undefined
  2822 0000191B 0F84821B0000            	je L_error_fvar_undefined
  2823 00001921 803804                  	cmp byte [rax], T_closure
  2824 00001924 0F85FD1B0000            	jne L_error_non_closure
  2825 0000192A FF7001                  	push SOB_CLOSURE_ENV(rax)
  2826 0000192D FF5009                  	call SOB_CLOSURE_CODE(rax)
  2827 00001930 50                      	push rax
  2828 00001931 6A01                    	push 1	; arg count
  2829 00001933 488B0425[E8080000]      	mov rax, qword [free_var_15]	; free var cadr
  2830 0000193B 803805                  	cmp byte [rax], T_undefined
  2831 0000193E 0F845F1B0000            	je L_error_fvar_undefined
  2832 00001944 803804                  	cmp byte [rax], T_closure
  2833 00001947 0F85DA1B0000            	jne L_error_non_closure
  2834 0000194D FF7001                  	push SOB_CLOSURE_ENV(rax)
  2835 00001950 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2836 00001953 FF7500                  	push qword[rbp]
  2837 00001956 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2838 00001959 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2839 0000195D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2840 00001961 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2841 00001965 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2842 00001968 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2843 0000196B 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2844 00001970 4983C103                	add r9, 3 	 ;for getting to the params
  2845 00001974 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2846 00001978 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2847                                  .L_tc_recycle_frame_loop_005c:
  2848 0000197B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2849 0000197E 7410                    	je .L_tc_recycle_frame_done_005c
  2850 00001980 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2851 00001983 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2852 00001986 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2853 0000198A 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2854 0000198E EBEB                    	jmp .L_tc_recycle_frame_loop_005c
  2855                                  .L_tc_recycle_frame_done_005c:
  2856 00001990 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2857 00001991 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2858 00001995 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2859 00001998 C9                      	leave
  2860 00001999 C21800                  	ret AND_KILL_FRAME(1)
  2861                                  .L_lambda_simple_end_005a:	; new closure is in rax
  2862 0000199C 48890425[C6080000]      	mov qword [free_var_13], rax
  2863 000019A4 48B8-                   	mov rax, sob_void
  2863 000019A6 [0000000000000000] 
  2864                                  
  2865 000019AE 4889C7                  	mov rdi, rax
  2866 000019B1 E86F1E0000              	call print_sexpr_if_not_void
  2867 000019B6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2868 000019BB E8101C0000              	call malloc
  2869 000019C0 50                      	push rax
  2870 000019C1 BF00000000              	mov rdi, 8 * 0	; new rib
  2871 000019C6 E8051C0000              	call malloc
  2872 000019CB 50                      	push rax
  2873 000019CC BF08000000              	mov rdi, 8 * 1	; extended env
  2874 000019D1 E8FA1B0000              	call malloc
  2875 000019D6 488B7D10                	mov rdi, ENV
  2876 000019DA BE00000000              	mov rsi, 0
  2877 000019DF BA01000000              	mov rdx, 1
  2878                                  .L_lambda_simple_env_loop_005b:	; ext_env[i + 1] <-- env[i]
  2879 000019E4 4883FE00                	cmp rsi, 0
  2880 000019E8 7410                    	je .L_lambda_simple_env_end_005b
  2881 000019EA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2882 000019EE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2883 000019F2 48FFC6                  	inc rsi
  2884 000019F5 48FFC2                  	inc rdx
  2885 000019F8 EBEA                    	jmp .L_lambda_simple_env_loop_005b
  2886                                  .L_lambda_simple_env_end_005b:
  2887 000019FA 5B                      	pop rbx
  2888 000019FB BE00000000              	mov rsi, 0
  2889                                  .L_lambda_simple_params_loop_005b:	; copy params
  2890 00001A00 4883FE00                	cmp rsi, 0
  2891 00001A04 740E                    	je .L_lambda_simple_params_end_005b
  2892 00001A06 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2893 00001A0B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2894 00001A0F 48FFC6                  	inc rsi
  2895 00001A12 EBEC                    	jmp .L_lambda_simple_params_loop_005b
  2896                                  .L_lambda_simple_params_end_005b:
  2897 00001A14 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2898 00001A17 4889C3                  	mov rbx, rax
  2899 00001A1A 58                      	pop rax
  2900 00001A1B C60004                  	mov byte [rax], T_closure
  2901 00001A1E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2902 00001A22 48C74009[2F1A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005b
  2903 00001A2A E9AA000000              	jmp .L_lambda_simple_end_005b
  2904                                  .L_lambda_simple_code_005b:	; lambda-simple body
  2905 00001A2F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2906 00001A35 740B                    	je .L_lambda_simple_arity_check_ok_005b
  2907 00001A37 FF742410                	push qword [rsp + 8 * 2]
  2908 00001A3B 6A01                    	push 1
  2909 00001A3D E9471B0000              	jmp L_error_incorrect_arity_simple
  2910                                  .L_lambda_simple_arity_check_ok_005b:
  2911 00001A42 C8000000                	enter 0, 0
  2912                                  	; preparing a tail-call
  2913                                  	; preparing a non-tail-call
  2914 00001A46 488B4520                	mov rax, PARAM(0)	; param x
  2915 00001A4A 50                      	push rax
  2916 00001A4B 6A01                    	push 1	; arg count
  2917 00001A4D 488B0425[71080000]      	mov rax, qword [free_var_8]	; free var caar
  2918 00001A55 803805                  	cmp byte [rax], T_undefined
  2919 00001A58 0F84451A0000            	je L_error_fvar_undefined
  2920 00001A5E 803804                  	cmp byte [rax], T_closure
  2921 00001A61 0F85C01A0000            	jne L_error_non_closure
  2922 00001A67 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2923 00001A6A FF5009                  	call SOB_CLOSURE_CODE(rax)
  2924 00001A6D 50                      	push rax
  2925 00001A6E 6A01                    	push 1	; arg count
  2926 00001A70 488B0425[70090000]      	mov rax, qword [free_var_23]	; free var cdar
  2927 00001A78 803805                  	cmp byte [rax], T_undefined
  2928 00001A7B 0F84221A0000            	je L_error_fvar_undefined
  2929 00001A81 803804                  	cmp byte [rax], T_closure
  2930 00001A84 0F859D1A0000            	jne L_error_non_closure
  2931 00001A8A FF7001                  	push SOB_CLOSURE_ENV(rax)
  2932 00001A8D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2933 00001A90 FF7500                  	push qword[rbp]
  2934 00001A93 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2935 00001A96 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2936 00001A9A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2937 00001A9E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2938 00001AA2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2939 00001AA5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2940 00001AA8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2941 00001AAD 4983C103                	add r9, 3 	 ;for getting to the params
  2942 00001AB1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2943 00001AB5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2944                                  .L_tc_recycle_frame_loop_005d:
  2945 00001AB8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2946 00001ABB 7410                    	je .L_tc_recycle_frame_done_005d
  2947 00001ABD 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2948 00001AC0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2949 00001AC3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2950 00001AC7 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2951 00001ACB EBEB                    	jmp .L_tc_recycle_frame_loop_005d
  2952                                  .L_tc_recycle_frame_done_005d:
  2953 00001ACD 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2954 00001ACE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2955 00001AD2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2956 00001AD5 C9                      	leave
  2957 00001AD6 C21800                  	ret AND_KILL_FRAME(1)
  2958                                  .L_lambda_simple_end_005b:	; new closure is in rax
  2959 00001AD9 48890425[0A090000]      	mov qword [free_var_17], rax
  2960 00001AE1 48B8-                   	mov rax, sob_void
  2960 00001AE3 [0000000000000000] 
  2961                                  
  2962 00001AEB 4889C7                  	mov rdi, rax
  2963 00001AEE E8321D0000              	call print_sexpr_if_not_void
  2964 00001AF3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2965 00001AF8 E8D31A0000              	call malloc
  2966 00001AFD 50                      	push rax
  2967 00001AFE BF00000000              	mov rdi, 8 * 0	; new rib
  2968 00001B03 E8C81A0000              	call malloc
  2969 00001B08 50                      	push rax
  2970 00001B09 BF08000000              	mov rdi, 8 * 1	; extended env
  2971 00001B0E E8BD1A0000              	call malloc
  2972 00001B13 488B7D10                	mov rdi, ENV
  2973 00001B17 BE00000000              	mov rsi, 0
  2974 00001B1C BA01000000              	mov rdx, 1
  2975                                  .L_lambda_simple_env_loop_005c:	; ext_env[i + 1] <-- env[i]
  2976 00001B21 4883FE00                	cmp rsi, 0
  2977 00001B25 7410                    	je .L_lambda_simple_env_end_005c
  2978 00001B27 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2979 00001B2B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2980 00001B2F 48FFC6                  	inc rsi
  2981 00001B32 48FFC2                  	inc rdx
  2982 00001B35 EBEA                    	jmp .L_lambda_simple_env_loop_005c
  2983                                  .L_lambda_simple_env_end_005c:
  2984 00001B37 5B                      	pop rbx
  2985 00001B38 BE00000000              	mov rsi, 0
  2986                                  .L_lambda_simple_params_loop_005c:	; copy params
  2987 00001B3D 4883FE00                	cmp rsi, 0
  2988 00001B41 740E                    	je .L_lambda_simple_params_end_005c
  2989 00001B43 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2990 00001B48 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2991 00001B4C 48FFC6                  	inc rsi
  2992 00001B4F EBEC                    	jmp .L_lambda_simple_params_loop_005c
  2993                                  .L_lambda_simple_params_end_005c:
  2994 00001B51 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2995 00001B54 4889C3                  	mov rbx, rax
  2996 00001B57 58                      	pop rax
  2997 00001B58 C60004                  	mov byte [rax], T_closure
  2998 00001B5B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2999 00001B5F 48C74009[6C1B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005c
  3000 00001B67 E9AA000000              	jmp .L_lambda_simple_end_005c
  3001                                  .L_lambda_simple_code_005c:	; lambda-simple body
  3002 00001B6C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3003 00001B72 740B                    	je .L_lambda_simple_arity_check_ok_005c
  3004 00001B74 FF742410                	push qword [rsp + 8 * 2]
  3005 00001B78 6A01                    	push 1
  3006 00001B7A E90A1A0000              	jmp L_error_incorrect_arity_simple
  3007                                  .L_lambda_simple_arity_check_ok_005c:
  3008 00001B7F C8000000                	enter 0, 0
  3009                                  	; preparing a tail-call
  3010                                  	; preparing a non-tail-call
  3011 00001B83 488B4520                	mov rax, PARAM(0)	; param x
  3012 00001B87 50                      	push rax
  3013 00001B88 6A01                    	push 1	; arg count
  3014 00001B8A 488B0425[E8080000]      	mov rax, qword [free_var_15]	; free var cadr
  3015 00001B92 803805                  	cmp byte [rax], T_undefined
  3016 00001B95 0F8408190000            	je L_error_fvar_undefined
  3017 00001B9B 803804                  	cmp byte [rax], T_closure
  3018 00001B9E 0F8583190000            	jne L_error_non_closure
  3019 00001BA4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3020 00001BA7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3021 00001BAA 50                      	push rax
  3022 00001BAB 6A01                    	push 1	; arg count
  3023 00001BAD 488B0425[70090000]      	mov rax, qword [free_var_23]	; free var cdar
  3024 00001BB5 803805                  	cmp byte [rax], T_undefined
  3025 00001BB8 0F84E5180000            	je L_error_fvar_undefined
  3026 00001BBE 803804                  	cmp byte [rax], T_closure
  3027 00001BC1 0F8560190000            	jne L_error_non_closure
  3028 00001BC7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3029 00001BCA FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3030 00001BCD FF7500                  	push qword[rbp]
  3031 00001BD0 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3032 00001BD3 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3033 00001BD7 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3034 00001BDB 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3035 00001BDF 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3036 00001BE2 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3037 00001BE5 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3038 00001BEA 4983C103                	add r9, 3 	 ;for getting to the params
  3039 00001BEE 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3040 00001BF2 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3041                                  .L_tc_recycle_frame_loop_005e:
  3042 00001BF5 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3043 00001BF8 7410                    	je .L_tc_recycle_frame_done_005e
  3044 00001BFA 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3045 00001BFD 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3046 00001C00 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3047 00001C04 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3048 00001C08 EBEB                    	jmp .L_tc_recycle_frame_loop_005e
  3049                                  .L_tc_recycle_frame_done_005e:
  3050 00001C0A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3051 00001C0B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3052 00001C0F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3053 00001C12 C9                      	leave
  3054 00001C13 C21800                  	ret AND_KILL_FRAME(1)
  3055                                  .L_lambda_simple_end_005c:	; new closure is in rax
  3056 00001C16 48890425[1B090000]      	mov qword [free_var_18], rax
  3057 00001C1E 48B8-                   	mov rax, sob_void
  3057 00001C20 [0000000000000000] 
  3058                                  
  3059 00001C28 4889C7                  	mov rdi, rax
  3060 00001C2B E8F51B0000              	call print_sexpr_if_not_void
  3061 00001C30 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3062 00001C35 E896190000              	call malloc
  3063 00001C3A 50                      	push rax
  3064 00001C3B BF00000000              	mov rdi, 8 * 0	; new rib
  3065 00001C40 E88B190000              	call malloc
  3066 00001C45 50                      	push rax
  3067 00001C46 BF08000000              	mov rdi, 8 * 1	; extended env
  3068 00001C4B E880190000              	call malloc
  3069 00001C50 488B7D10                	mov rdi, ENV
  3070 00001C54 BE00000000              	mov rsi, 0
  3071 00001C59 BA01000000              	mov rdx, 1
  3072                                  .L_lambda_simple_env_loop_005d:	; ext_env[i + 1] <-- env[i]
  3073 00001C5E 4883FE00                	cmp rsi, 0
  3074 00001C62 7410                    	je .L_lambda_simple_env_end_005d
  3075 00001C64 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3076 00001C68 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3077 00001C6C 48FFC6                  	inc rsi
  3078 00001C6F 48FFC2                  	inc rdx
  3079 00001C72 EBEA                    	jmp .L_lambda_simple_env_loop_005d
  3080                                  .L_lambda_simple_env_end_005d:
  3081 00001C74 5B                      	pop rbx
  3082 00001C75 BE00000000              	mov rsi, 0
  3083                                  .L_lambda_simple_params_loop_005d:	; copy params
  3084 00001C7A 4883FE00                	cmp rsi, 0
  3085 00001C7E 740E                    	je .L_lambda_simple_params_end_005d
  3086 00001C80 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3087 00001C85 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3088 00001C89 48FFC6                  	inc rsi
  3089 00001C8C EBEC                    	jmp .L_lambda_simple_params_loop_005d
  3090                                  .L_lambda_simple_params_end_005d:
  3091 00001C8E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3092 00001C91 4889C3                  	mov rbx, rax
  3093 00001C94 58                      	pop rax
  3094 00001C95 C60004                  	mov byte [rax], T_closure
  3095 00001C98 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3096 00001C9C 48C74009[A91C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005d
  3097 00001CA4 E9AA000000              	jmp .L_lambda_simple_end_005d
  3098                                  .L_lambda_simple_code_005d:	; lambda-simple body
  3099 00001CA9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3100 00001CAF 740B                    	je .L_lambda_simple_arity_check_ok_005d
  3101 00001CB1 FF742410                	push qword [rsp + 8 * 2]
  3102 00001CB5 6A01                    	push 1
  3103 00001CB7 E9CD180000              	jmp L_error_incorrect_arity_simple
  3104                                  .L_lambda_simple_arity_check_ok_005d:
  3105 00001CBC C8000000                	enter 0, 0
  3106                                  	; preparing a tail-call
  3107                                  	; preparing a non-tail-call
  3108 00001CC0 488B4520                	mov rax, PARAM(0)	; param x
  3109 00001CC4 50                      	push rax
  3110 00001CC5 6A01                    	push 1	; arg count
  3111 00001CC7 488B0425[70090000]      	mov rax, qword [free_var_23]	; free var cdar
  3112 00001CCF 803805                  	cmp byte [rax], T_undefined
  3113 00001CD2 0F84CB170000            	je L_error_fvar_undefined
  3114 00001CD8 803804                  	cmp byte [rax], T_closure
  3115 00001CDB 0F8546180000            	jne L_error_non_closure
  3116 00001CE1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3117 00001CE4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3118 00001CE7 50                      	push rax
  3119 00001CE8 6A01                    	push 1	; arg count
  3120 00001CEA 488B0425[70090000]      	mov rax, qword [free_var_23]	; free var cdar
  3121 00001CF2 803805                  	cmp byte [rax], T_undefined
  3122 00001CF5 0F84A8170000            	je L_error_fvar_undefined
  3123 00001CFB 803804                  	cmp byte [rax], T_closure
  3124 00001CFE 0F8523180000            	jne L_error_non_closure
  3125 00001D04 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3126 00001D07 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3127 00001D0A FF7500                  	push qword[rbp]
  3128 00001D0D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3129 00001D10 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3130 00001D14 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3131 00001D18 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3132 00001D1C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3133 00001D1F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3134 00001D22 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3135 00001D27 4983C103                	add r9, 3 	 ;for getting to the params
  3136 00001D2B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3137 00001D2F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3138                                  .L_tc_recycle_frame_loop_005f:
  3139 00001D32 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3140 00001D35 7410                    	je .L_tc_recycle_frame_done_005f
  3141 00001D37 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3142 00001D3A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3143 00001D3D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3144 00001D41 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3145 00001D45 EBEB                    	jmp .L_tc_recycle_frame_loop_005f
  3146                                  .L_tc_recycle_frame_done_005f:
  3147 00001D47 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3148 00001D48 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3149 00001D4C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3150 00001D4F C9                      	leave
  3151 00001D50 C21800                  	ret AND_KILL_FRAME(1)
  3152                                  .L_lambda_simple_end_005d:	; new closure is in rax
  3153 00001D53 48890425[3D090000]      	mov qword [free_var_20], rax
  3154 00001D5B 48B8-                   	mov rax, sob_void
  3154 00001D5D [0000000000000000] 
  3155                                  
  3156 00001D65 4889C7                  	mov rdi, rax
  3157 00001D68 E8B81A0000              	call print_sexpr_if_not_void
  3158 00001D6D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3159 00001D72 E859180000              	call malloc
  3160 00001D77 50                      	push rax
  3161 00001D78 BF00000000              	mov rdi, 8 * 0	; new rib
  3162 00001D7D E84E180000              	call malloc
  3163 00001D82 50                      	push rax
  3164 00001D83 BF08000000              	mov rdi, 8 * 1	; extended env
  3165 00001D88 E843180000              	call malloc
  3166 00001D8D 488B7D10                	mov rdi, ENV
  3167 00001D91 BE00000000              	mov rsi, 0
  3168 00001D96 BA01000000              	mov rdx, 1
  3169                                  .L_lambda_simple_env_loop_005e:	; ext_env[i + 1] <-- env[i]
  3170 00001D9B 4883FE00                	cmp rsi, 0
  3171 00001D9F 7410                    	je .L_lambda_simple_env_end_005e
  3172 00001DA1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3173 00001DA5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3174 00001DA9 48FFC6                  	inc rsi
  3175 00001DAC 48FFC2                  	inc rdx
  3176 00001DAF EBEA                    	jmp .L_lambda_simple_env_loop_005e
  3177                                  .L_lambda_simple_env_end_005e:
  3178 00001DB1 5B                      	pop rbx
  3179 00001DB2 BE00000000              	mov rsi, 0
  3180                                  .L_lambda_simple_params_loop_005e:	; copy params
  3181 00001DB7 4883FE00                	cmp rsi, 0
  3182 00001DBB 740E                    	je .L_lambda_simple_params_end_005e
  3183 00001DBD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3184 00001DC2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3185 00001DC6 48FFC6                  	inc rsi
  3186 00001DC9 EBEC                    	jmp .L_lambda_simple_params_loop_005e
  3187                                  .L_lambda_simple_params_end_005e:
  3188 00001DCB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3189 00001DCE 4889C3                  	mov rbx, rax
  3190 00001DD1 58                      	pop rax
  3191 00001DD2 C60004                  	mov byte [rax], T_closure
  3192 00001DD5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3193 00001DD9 48C74009[E61D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005e
  3194 00001DE1 E9AA000000              	jmp .L_lambda_simple_end_005e
  3195                                  .L_lambda_simple_code_005e:	; lambda-simple body
  3196 00001DE6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3197 00001DEC 740B                    	je .L_lambda_simple_arity_check_ok_005e
  3198 00001DEE FF742410                	push qword [rsp + 8 * 2]
  3199 00001DF2 6A01                    	push 1
  3200 00001DF4 E990170000              	jmp L_error_incorrect_arity_simple
  3201                                  .L_lambda_simple_arity_check_ok_005e:
  3202 00001DF9 C8000000                	enter 0, 0
  3203                                  	; preparing a tail-call
  3204                                  	; preparing a non-tail-call
  3205 00001DFD 488B4520                	mov rax, PARAM(0)	; param x
  3206 00001E01 50                      	push rax
  3207 00001E02 6A01                    	push 1	; arg count
  3208 00001E04 488B0425[E7090000]      	mov rax, qword [free_var_30]	; free var cddr
  3209 00001E0C 803805                  	cmp byte [rax], T_undefined
  3210 00001E0F 0F848E160000            	je L_error_fvar_undefined
  3211 00001E15 803804                  	cmp byte [rax], T_closure
  3212 00001E18 0F8509170000            	jne L_error_non_closure
  3213 00001E1E FF7001                  	push SOB_CLOSURE_ENV(rax)
  3214 00001E21 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3215 00001E24 50                      	push rax
  3216 00001E25 6A01                    	push 1	; arg count
  3217 00001E27 488B0425[70090000]      	mov rax, qword [free_var_23]	; free var cdar
  3218 00001E2F 803805                  	cmp byte [rax], T_undefined
  3219 00001E32 0F846B160000            	je L_error_fvar_undefined
  3220 00001E38 803804                  	cmp byte [rax], T_closure
  3221 00001E3B 0F85E6160000            	jne L_error_non_closure
  3222 00001E41 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3223 00001E44 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3224 00001E47 FF7500                  	push qword[rbp]
  3225 00001E4A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3226 00001E4D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3227 00001E51 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3228 00001E55 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3229 00001E59 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3230 00001E5C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3231 00001E5F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3232 00001E64 4983C103                	add r9, 3 	 ;for getting to the params
  3233 00001E68 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3234 00001E6C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3235                                  .L_tc_recycle_frame_loop_0060:
  3236 00001E6F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3237 00001E72 7410                    	je .L_tc_recycle_frame_done_0060
  3238 00001E74 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3239 00001E77 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3240 00001E7A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3241 00001E7E 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3242 00001E82 EBEB                    	jmp .L_tc_recycle_frame_loop_0060
  3243                                  .L_tc_recycle_frame_done_0060:
  3244 00001E84 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3245 00001E85 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3246 00001E89 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3247 00001E8C C9                      	leave
  3248 00001E8D C21800                  	ret AND_KILL_FRAME(1)
  3249                                  .L_lambda_simple_end_005e:	; new closure is in rax
  3250 00001E90 48890425[4E090000]      	mov qword [free_var_21], rax
  3251 00001E98 48B8-                   	mov rax, sob_void
  3251 00001E9A [0000000000000000] 
  3252                                  
  3253 00001EA2 4889C7                  	mov rdi, rax
  3254 00001EA5 E87B190000              	call print_sexpr_if_not_void
  3255 00001EAA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3256 00001EAF E81C170000              	call malloc
  3257 00001EB4 50                      	push rax
  3258 00001EB5 BF00000000              	mov rdi, 8 * 0	; new rib
  3259 00001EBA E811170000              	call malloc
  3260 00001EBF 50                      	push rax
  3261 00001EC0 BF08000000              	mov rdi, 8 * 1	; extended env
  3262 00001EC5 E806170000              	call malloc
  3263 00001ECA 488B7D10                	mov rdi, ENV
  3264 00001ECE BE00000000              	mov rsi, 0
  3265 00001ED3 BA01000000              	mov rdx, 1
  3266                                  .L_lambda_simple_env_loop_005f:	; ext_env[i + 1] <-- env[i]
  3267 00001ED8 4883FE00                	cmp rsi, 0
  3268 00001EDC 7410                    	je .L_lambda_simple_env_end_005f
  3269 00001EDE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3270 00001EE2 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3271 00001EE6 48FFC6                  	inc rsi
  3272 00001EE9 48FFC2                  	inc rdx
  3273 00001EEC EBEA                    	jmp .L_lambda_simple_env_loop_005f
  3274                                  .L_lambda_simple_env_end_005f:
  3275 00001EEE 5B                      	pop rbx
  3276 00001EEF BE00000000              	mov rsi, 0
  3277                                  .L_lambda_simple_params_loop_005f:	; copy params
  3278 00001EF4 4883FE00                	cmp rsi, 0
  3279 00001EF8 740E                    	je .L_lambda_simple_params_end_005f
  3280 00001EFA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3281 00001EFF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3282 00001F03 48FFC6                  	inc rsi
  3283 00001F06 EBEC                    	jmp .L_lambda_simple_params_loop_005f
  3284                                  .L_lambda_simple_params_end_005f:
  3285 00001F08 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3286 00001F0B 4889C3                  	mov rbx, rax
  3287 00001F0E 58                      	pop rax
  3288 00001F0F C60004                  	mov byte [rax], T_closure
  3289 00001F12 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3290 00001F16 48C74009[231F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005f
  3291 00001F1E E9AA000000              	jmp .L_lambda_simple_end_005f
  3292                                  .L_lambda_simple_code_005f:	; lambda-simple body
  3293 00001F23 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3294 00001F29 740B                    	je .L_lambda_simple_arity_check_ok_005f
  3295 00001F2B FF742410                	push qword [rsp + 8 * 2]
  3296 00001F2F 6A01                    	push 1
  3297 00001F31 E953160000              	jmp L_error_incorrect_arity_simple
  3298                                  .L_lambda_simple_arity_check_ok_005f:
  3299 00001F36 C8000000                	enter 0, 0
  3300                                  	; preparing a tail-call
  3301                                  	; preparing a non-tail-call
  3302 00001F3A 488B4520                	mov rax, PARAM(0)	; param x
  3303 00001F3E 50                      	push rax
  3304 00001F3F 6A01                    	push 1	; arg count
  3305 00001F41 488B0425[71080000]      	mov rax, qword [free_var_8]	; free var caar
  3306 00001F49 803805                  	cmp byte [rax], T_undefined
  3307 00001F4C 0F8451150000            	je L_error_fvar_undefined
  3308 00001F52 803804                  	cmp byte [rax], T_closure
  3309 00001F55 0F85CC150000            	jne L_error_non_closure
  3310 00001F5B FF7001                  	push SOB_CLOSURE_ENV(rax)
  3311 00001F5E FF5009                  	call SOB_CLOSURE_CODE(rax)
  3312 00001F61 50                      	push rax
  3313 00001F62 6A01                    	push 1	; arg count
  3314 00001F64 488B0425[E7090000]      	mov rax, qword [free_var_30]	; free var cddr
  3315 00001F6C 803805                  	cmp byte [rax], T_undefined
  3316 00001F6F 0F842E150000            	je L_error_fvar_undefined
  3317 00001F75 803804                  	cmp byte [rax], T_closure
  3318 00001F78 0F85A9150000            	jne L_error_non_closure
  3319 00001F7E FF7001                  	push SOB_CLOSURE_ENV(rax)
  3320 00001F81 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3321 00001F84 FF7500                  	push qword[rbp]
  3322 00001F87 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3323 00001F8A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3324 00001F8E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3325 00001F92 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3326 00001F96 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3327 00001F99 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3328 00001F9C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3329 00001FA1 4983C103                	add r9, 3 	 ;for getting to the params
  3330 00001FA5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3331 00001FA9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3332                                  .L_tc_recycle_frame_loop_0061:
  3333 00001FAC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3334 00001FAF 7410                    	je .L_tc_recycle_frame_done_0061
  3335 00001FB1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3336 00001FB4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3337 00001FB7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3338 00001FBB 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3339 00001FBF EBEB                    	jmp .L_tc_recycle_frame_loop_0061
  3340                                  .L_tc_recycle_frame_done_0061:
  3341 00001FC1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3342 00001FC2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3343 00001FC6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3344 00001FC9 C9                      	leave
  3345 00001FCA C21800                  	ret AND_KILL_FRAME(1)
  3346                                  .L_lambda_simple_end_005f:	; new closure is in rax
  3347 00001FCD 48890425[81090000]      	mov qword [free_var_24], rax
  3348 00001FD5 48B8-                   	mov rax, sob_void
  3348 00001FD7 [0000000000000000] 
  3349                                  
  3350 00001FDF 4889C7                  	mov rdi, rax
  3351 00001FE2 E83E180000              	call print_sexpr_if_not_void
  3352 00001FE7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3353 00001FEC E8DF150000              	call malloc
  3354 00001FF1 50                      	push rax
  3355 00001FF2 BF00000000              	mov rdi, 8 * 0	; new rib
  3356 00001FF7 E8D4150000              	call malloc
  3357 00001FFC 50                      	push rax
  3358 00001FFD BF08000000              	mov rdi, 8 * 1	; extended env
  3359 00002002 E8C9150000              	call malloc
  3360 00002007 488B7D10                	mov rdi, ENV
  3361 0000200B BE00000000              	mov rsi, 0
  3362 00002010 BA01000000              	mov rdx, 1
  3363                                  .L_lambda_simple_env_loop_0060:	; ext_env[i + 1] <-- env[i]
  3364 00002015 4883FE00                	cmp rsi, 0
  3365 00002019 7410                    	je .L_lambda_simple_env_end_0060
  3366 0000201B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3367 0000201F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3368 00002023 48FFC6                  	inc rsi
  3369 00002026 48FFC2                  	inc rdx
  3370 00002029 EBEA                    	jmp .L_lambda_simple_env_loop_0060
  3371                                  .L_lambda_simple_env_end_0060:
  3372 0000202B 5B                      	pop rbx
  3373 0000202C BE00000000              	mov rsi, 0
  3374                                  .L_lambda_simple_params_loop_0060:	; copy params
  3375 00002031 4883FE00                	cmp rsi, 0
  3376 00002035 740E                    	je .L_lambda_simple_params_end_0060
  3377 00002037 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3378 0000203C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3379 00002040 48FFC6                  	inc rsi
  3380 00002043 EBEC                    	jmp .L_lambda_simple_params_loop_0060
  3381                                  .L_lambda_simple_params_end_0060:
  3382 00002045 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3383 00002048 4889C3                  	mov rbx, rax
  3384 0000204B 58                      	pop rax
  3385 0000204C C60004                  	mov byte [rax], T_closure
  3386 0000204F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3387 00002053 48C74009[60200000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0060
  3388 0000205B E9AA000000              	jmp .L_lambda_simple_end_0060
  3389                                  .L_lambda_simple_code_0060:	; lambda-simple body
  3390 00002060 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3391 00002066 740B                    	je .L_lambda_simple_arity_check_ok_0060
  3392 00002068 FF742410                	push qword [rsp + 8 * 2]
  3393 0000206C 6A01                    	push 1
  3394 0000206E E916150000              	jmp L_error_incorrect_arity_simple
  3395                                  .L_lambda_simple_arity_check_ok_0060:
  3396 00002073 C8000000                	enter 0, 0
  3397                                  	; preparing a tail-call
  3398                                  	; preparing a non-tail-call
  3399 00002077 488B4520                	mov rax, PARAM(0)	; param x
  3400 0000207B 50                      	push rax
  3401 0000207C 6A01                    	push 1	; arg count
  3402 0000207E 488B0425[E8080000]      	mov rax, qword [free_var_15]	; free var cadr
  3403 00002086 803805                  	cmp byte [rax], T_undefined
  3404 00002089 0F8414140000            	je L_error_fvar_undefined
  3405 0000208F 803804                  	cmp byte [rax], T_closure
  3406 00002092 0F858F140000            	jne L_error_non_closure
  3407 00002098 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3408 0000209B FF5009                  	call SOB_CLOSURE_CODE(rax)
  3409 0000209E 50                      	push rax
  3410 0000209F 6A01                    	push 1	; arg count
  3411 000020A1 488B0425[E7090000]      	mov rax, qword [free_var_30]	; free var cddr
  3412 000020A9 803805                  	cmp byte [rax], T_undefined
  3413 000020AC 0F84F1130000            	je L_error_fvar_undefined
  3414 000020B2 803804                  	cmp byte [rax], T_closure
  3415 000020B5 0F856C140000            	jne L_error_non_closure
  3416 000020BB FF7001                  	push SOB_CLOSURE_ENV(rax)
  3417 000020BE FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3418 000020C1 FF7500                  	push qword[rbp]
  3419 000020C4 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3420 000020C7 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3421 000020CB 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3422 000020CF 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3423 000020D3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3424 000020D6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3425 000020D9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3426 000020DE 4983C103                	add r9, 3 	 ;for getting to the params
  3427 000020E2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3428 000020E6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3429                                  .L_tc_recycle_frame_loop_0062:
  3430 000020E9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3431 000020EC 7410                    	je .L_tc_recycle_frame_done_0062
  3432 000020EE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3433 000020F1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3434 000020F4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3435 000020F8 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3436 000020FC EBEB                    	jmp .L_tc_recycle_frame_loop_0062
  3437                                  .L_tc_recycle_frame_done_0062:
  3438 000020FE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3439 000020FF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3440 00002103 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3441 00002106 C9                      	leave
  3442 00002107 C21800                  	ret AND_KILL_FRAME(1)
  3443                                  .L_lambda_simple_end_0060:	; new closure is in rax
  3444 0000210A 48890425[92090000]      	mov qword [free_var_25], rax
  3445 00002112 48B8-                   	mov rax, sob_void
  3445 00002114 [0000000000000000] 
  3446                                  
  3447 0000211C 4889C7                  	mov rdi, rax
  3448 0000211F E801170000              	call print_sexpr_if_not_void
  3449 00002124 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3450 00002129 E8A2140000              	call malloc
  3451 0000212E 50                      	push rax
  3452 0000212F BF00000000              	mov rdi, 8 * 0	; new rib
  3453 00002134 E897140000              	call malloc
  3454 00002139 50                      	push rax
  3455 0000213A BF08000000              	mov rdi, 8 * 1	; extended env
  3456 0000213F E88C140000              	call malloc
  3457 00002144 488B7D10                	mov rdi, ENV
  3458 00002148 BE00000000              	mov rsi, 0
  3459 0000214D BA01000000              	mov rdx, 1
  3460                                  .L_lambda_simple_env_loop_0061:	; ext_env[i + 1] <-- env[i]
  3461 00002152 4883FE00                	cmp rsi, 0
  3462 00002156 7410                    	je .L_lambda_simple_env_end_0061
  3463 00002158 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3464 0000215C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3465 00002160 48FFC6                  	inc rsi
  3466 00002163 48FFC2                  	inc rdx
  3467 00002166 EBEA                    	jmp .L_lambda_simple_env_loop_0061
  3468                                  .L_lambda_simple_env_end_0061:
  3469 00002168 5B                      	pop rbx
  3470 00002169 BE00000000              	mov rsi, 0
  3471                                  .L_lambda_simple_params_loop_0061:	; copy params
  3472 0000216E 4883FE00                	cmp rsi, 0
  3473 00002172 740E                    	je .L_lambda_simple_params_end_0061
  3474 00002174 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3475 00002179 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3476 0000217D 48FFC6                  	inc rsi
  3477 00002180 EBEC                    	jmp .L_lambda_simple_params_loop_0061
  3478                                  .L_lambda_simple_params_end_0061:
  3479 00002182 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3480 00002185 4889C3                  	mov rbx, rax
  3481 00002188 58                      	pop rax
  3482 00002189 C60004                  	mov byte [rax], T_closure
  3483 0000218C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3484 00002190 48C74009[9D210000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0061
  3485 00002198 E9AA000000              	jmp .L_lambda_simple_end_0061
  3486                                  .L_lambda_simple_code_0061:	; lambda-simple body
  3487 0000219D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3488 000021A3 740B                    	je .L_lambda_simple_arity_check_ok_0061
  3489 000021A5 FF742410                	push qword [rsp + 8 * 2]
  3490 000021A9 6A01                    	push 1
  3491 000021AB E9D9130000              	jmp L_error_incorrect_arity_simple
  3492                                  .L_lambda_simple_arity_check_ok_0061:
  3493 000021B0 C8000000                	enter 0, 0
  3494                                  	; preparing a tail-call
  3495                                  	; preparing a non-tail-call
  3496 000021B4 488B4520                	mov rax, PARAM(0)	; param x
  3497 000021B8 50                      	push rax
  3498 000021B9 6A01                    	push 1	; arg count
  3499 000021BB 488B0425[70090000]      	mov rax, qword [free_var_23]	; free var cdar
  3500 000021C3 803805                  	cmp byte [rax], T_undefined
  3501 000021C6 0F84D7120000            	je L_error_fvar_undefined
  3502 000021CC 803804                  	cmp byte [rax], T_closure
  3503 000021CF 0F8552130000            	jne L_error_non_closure
  3504 000021D5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3505 000021D8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3506 000021DB 50                      	push rax
  3507 000021DC 6A01                    	push 1	; arg count
  3508 000021DE 488B0425[E7090000]      	mov rax, qword [free_var_30]	; free var cddr
  3509 000021E6 803805                  	cmp byte [rax], T_undefined
  3510 000021E9 0F84B4120000            	je L_error_fvar_undefined
  3511 000021EF 803804                  	cmp byte [rax], T_closure
  3512 000021F2 0F852F130000            	jne L_error_non_closure
  3513 000021F8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3514 000021FB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3515 000021FE FF7500                  	push qword[rbp]
  3516 00002201 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3517 00002204 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3518 00002208 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3519 0000220C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3520 00002210 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3521 00002213 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3522 00002216 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3523 0000221B 4983C103                	add r9, 3 	 ;for getting to the params
  3524 0000221F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3525 00002223 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3526                                  .L_tc_recycle_frame_loop_0063:
  3527 00002226 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3528 00002229 7410                    	je .L_tc_recycle_frame_done_0063
  3529 0000222B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3530 0000222E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3531 00002231 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3532 00002235 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3533 00002239 EBEB                    	jmp .L_tc_recycle_frame_loop_0063
  3534                                  .L_tc_recycle_frame_done_0063:
  3535 0000223B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3536 0000223C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3537 00002240 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3538 00002243 C9                      	leave
  3539 00002244 C21800                  	ret AND_KILL_FRAME(1)
  3540                                  .L_lambda_simple_end_0061:	; new closure is in rax
  3541 00002247 48890425[B4090000]      	mov qword [free_var_27], rax
  3542 0000224F 48B8-                   	mov rax, sob_void
  3542 00002251 [0000000000000000] 
  3543                                  
  3544 00002259 4889C7                  	mov rdi, rax
  3545 0000225C E8C4150000              	call print_sexpr_if_not_void
  3546 00002261 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3547 00002266 E865130000              	call malloc
  3548 0000226B 50                      	push rax
  3549 0000226C BF00000000              	mov rdi, 8 * 0	; new rib
  3550 00002271 E85A130000              	call malloc
  3551 00002276 50                      	push rax
  3552 00002277 BF08000000              	mov rdi, 8 * 1	; extended env
  3553 0000227C E84F130000              	call malloc
  3554 00002281 488B7D10                	mov rdi, ENV
  3555 00002285 BE00000000              	mov rsi, 0
  3556 0000228A BA01000000              	mov rdx, 1
  3557                                  .L_lambda_simple_env_loop_0062:	; ext_env[i + 1] <-- env[i]
  3558 0000228F 4883FE00                	cmp rsi, 0
  3559 00002293 7410                    	je .L_lambda_simple_env_end_0062
  3560 00002295 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3561 00002299 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3562 0000229D 48FFC6                  	inc rsi
  3563 000022A0 48FFC2                  	inc rdx
  3564 000022A3 EBEA                    	jmp .L_lambda_simple_env_loop_0062
  3565                                  .L_lambda_simple_env_end_0062:
  3566 000022A5 5B                      	pop rbx
  3567 000022A6 BE00000000              	mov rsi, 0
  3568                                  .L_lambda_simple_params_loop_0062:	; copy params
  3569 000022AB 4883FE00                	cmp rsi, 0
  3570 000022AF 740E                    	je .L_lambda_simple_params_end_0062
  3571 000022B1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3572 000022B6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3573 000022BA 48FFC6                  	inc rsi
  3574 000022BD EBEC                    	jmp .L_lambda_simple_params_loop_0062
  3575                                  .L_lambda_simple_params_end_0062:
  3576 000022BF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3577 000022C2 4889C3                  	mov rbx, rax
  3578 000022C5 58                      	pop rax
  3579 000022C6 C60004                  	mov byte [rax], T_closure
  3580 000022C9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3581 000022CD 48C74009[DA220000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0062
  3582 000022D5 E9AA000000              	jmp .L_lambda_simple_end_0062
  3583                                  .L_lambda_simple_code_0062:	; lambda-simple body
  3584 000022DA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3585 000022E0 740B                    	je .L_lambda_simple_arity_check_ok_0062
  3586 000022E2 FF742410                	push qword [rsp + 8 * 2]
  3587 000022E6 6A01                    	push 1
  3588 000022E8 E99C120000              	jmp L_error_incorrect_arity_simple
  3589                                  .L_lambda_simple_arity_check_ok_0062:
  3590 000022ED C8000000                	enter 0, 0
  3591                                  	; preparing a tail-call
  3592                                  	; preparing a non-tail-call
  3593 000022F1 488B4520                	mov rax, PARAM(0)	; param x
  3594 000022F5 50                      	push rax
  3595 000022F6 6A01                    	push 1	; arg count
  3596 000022F8 488B0425[E7090000]      	mov rax, qword [free_var_30]	; free var cddr
  3597 00002300 803805                  	cmp byte [rax], T_undefined
  3598 00002303 0F849A110000            	je L_error_fvar_undefined
  3599 00002309 803804                  	cmp byte [rax], T_closure
  3600 0000230C 0F8515120000            	jne L_error_non_closure
  3601 00002312 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3602 00002315 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3603 00002318 50                      	push rax
  3604 00002319 6A01                    	push 1	; arg count
  3605 0000231B 488B0425[E7090000]      	mov rax, qword [free_var_30]	; free var cddr
  3606 00002323 803805                  	cmp byte [rax], T_undefined
  3607 00002326 0F8477110000            	je L_error_fvar_undefined
  3608 0000232C 803804                  	cmp byte [rax], T_closure
  3609 0000232F 0F85F2110000            	jne L_error_non_closure
  3610 00002335 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3611 00002338 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3612 0000233B FF7500                  	push qword[rbp]
  3613 0000233E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3614 00002341 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3615 00002345 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3616 00002349 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3617 0000234D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3618 00002350 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3619 00002353 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3620 00002358 4983C103                	add r9, 3 	 ;for getting to the params
  3621 0000235C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3622 00002360 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3623                                  .L_tc_recycle_frame_loop_0064:
  3624 00002363 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3625 00002366 7410                    	je .L_tc_recycle_frame_done_0064
  3626 00002368 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3627 0000236B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3628 0000236E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3629 00002372 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3630 00002376 EBEB                    	jmp .L_tc_recycle_frame_loop_0064
  3631                                  .L_tc_recycle_frame_done_0064:
  3632 00002378 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3633 00002379 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3634 0000237D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3635 00002380 C9                      	leave
  3636 00002381 C21800                  	ret AND_KILL_FRAME(1)
  3637                                  .L_lambda_simple_end_0062:	; new closure is in rax
  3638 00002384 48890425[C5090000]      	mov qword [free_var_28], rax
  3639 0000238C 48B8-                   	mov rax, sob_void
  3639 0000238E [0000000000000000] 
  3640                                  
  3641 00002396 4889C7                  	mov rdi, rax
  3642 00002399 E887140000              	call print_sexpr_if_not_void
  3643 0000239E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3644 000023A3 E828120000              	call malloc
  3645 000023A8 50                      	push rax
  3646 000023A9 BF00000000              	mov rdi, 8 * 0	; new rib
  3647 000023AE E81D120000              	call malloc
  3648 000023B3 50                      	push rax
  3649 000023B4 BF08000000              	mov rdi, 8 * 1	; extended env
  3650 000023B9 E812120000              	call malloc
  3651 000023BE 488B7D10                	mov rdi, ENV
  3652 000023C2 BE00000000              	mov rsi, 0
  3653 000023C7 BA01000000              	mov rdx, 1
  3654                                  .L_lambda_simple_env_loop_0063:	; ext_env[i + 1] <-- env[i]
  3655 000023CC 4883FE00                	cmp rsi, 0
  3656 000023D0 7410                    	je .L_lambda_simple_env_end_0063
  3657 000023D2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3658 000023D6 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3659 000023DA 48FFC6                  	inc rsi
  3660 000023DD 48FFC2                  	inc rdx
  3661 000023E0 EBEA                    	jmp .L_lambda_simple_env_loop_0063
  3662                                  .L_lambda_simple_env_end_0063:
  3663 000023E2 5B                      	pop rbx
  3664 000023E3 BE00000000              	mov rsi, 0
  3665                                  .L_lambda_simple_params_loop_0063:	; copy params
  3666 000023E8 4883FE00                	cmp rsi, 0
  3667 000023EC 740E                    	je .L_lambda_simple_params_end_0063
  3668 000023EE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3669 000023F3 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3670 000023F7 48FFC6                  	inc rsi
  3671 000023FA EBEC                    	jmp .L_lambda_simple_params_loop_0063
  3672                                  .L_lambda_simple_params_end_0063:
  3673 000023FC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3674 000023FF 4889C3                  	mov rbx, rax
  3675 00002402 58                      	pop rax
  3676 00002403 C60004                  	mov byte [rax], T_closure
  3677 00002406 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3678 0000240A 48C74009[17240000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0063
  3679 00002412 E91C010000              	jmp .L_lambda_simple_end_0063
  3680                                  .L_lambda_simple_code_0063:	; lambda-simple body
  3681 00002417 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3682 0000241D 740B                    	je .L_lambda_simple_arity_check_ok_0063
  3683 0000241F FF742410                	push qword [rsp + 8 * 2]
  3684 00002423 6A01                    	push 1
  3685 00002425 E95F110000              	jmp L_error_incorrect_arity_simple
  3686                                  .L_lambda_simple_arity_check_ok_0063:
  3687 0000242A C8000000                	enter 0, 0
  3688                                  	; preparing a non-tail-call
  3689 0000242E 488B4520                	mov rax, PARAM(0)	; param e
  3690 00002432 50                      	push rax
  3691 00002433 6A01                    	push 1	; arg count
  3692 00002435 488B0425[800A0000]      	mov rax, qword [free_var_39]	; free var null?
  3693 0000243D 803805                  	cmp byte [rax], T_undefined
  3694 00002440 0F845D100000            	je L_error_fvar_undefined
  3695 00002446 803804                  	cmp byte [rax], T_closure
  3696 00002449 0F85D8100000            	jne L_error_non_closure
  3697 0000244F FF7001                  	push SOB_CLOSURE_ENV(rax)
  3698 00002452 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3699 00002455 483D[02000000]          	cmp rax, sob_boolean_false
  3700 0000245B 0F85CE000000            	jne .L_or_end_0005
  3701                                  	; preparing a non-tail-call
  3702 00002461 488B4520                	mov rax, PARAM(0)	; param e
  3703 00002465 50                      	push rax
  3704 00002466 6A01                    	push 1	; arg count
  3705 00002468 488B0425[910A0000]      	mov rax, qword [free_var_40]	; free var pair?
  3706 00002470 803805                  	cmp byte [rax], T_undefined
  3707 00002473 0F842A100000            	je L_error_fvar_undefined
  3708 00002479 803804                  	cmp byte [rax], T_closure
  3709 0000247C 0F85A5100000            	jne L_error_non_closure
  3710 00002482 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3711 00002485 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3712 00002488 483D[02000000]          	cmp rax, sob_boolean_false
  3713 0000248E 0F8491000000            	je .L_if_else_0009
  3714                                  	; preparing a tail-call
  3715                                  	; preparing a non-tail-call
  3716 00002494 488B4520                	mov rax, PARAM(0)	; param e
  3717 00002498 50                      	push rax
  3718 00002499 6A01                    	push 1	; arg count
  3719 0000249B 488B0425[F8090000]      	mov rax, qword [free_var_31]	; free var cdr
  3720 000024A3 803805                  	cmp byte [rax], T_undefined
  3721 000024A6 0F84F70F0000            	je L_error_fvar_undefined
  3722 000024AC 803804                  	cmp byte [rax], T_closure
  3723 000024AF 0F8572100000            	jne L_error_non_closure
  3724 000024B5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3725 000024B8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3726 000024BB 50                      	push rax
  3727 000024BC 6A01                    	push 1	; arg count
  3728 000024BE 488B0425[5E0A0000]      	mov rax, qword [free_var_37]	; free var list?
  3729 000024C6 803805                  	cmp byte [rax], T_undefined
  3730 000024C9 0F84D40F0000            	je L_error_fvar_undefined
  3731 000024CF 803804                  	cmp byte [rax], T_closure
  3732 000024D2 0F854F100000            	jne L_error_non_closure
  3733 000024D8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3734 000024DB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3735 000024DE FF7500                  	push qword[rbp]
  3736 000024E1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3737 000024E4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3738 000024E8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3739 000024EC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3740 000024F0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3741 000024F3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3742 000024F6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3743 000024FB 4983C103                	add r9, 3 	 ;for getting to the params
  3744 000024FF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3745 00002503 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3746                                  .L_tc_recycle_frame_loop_0065:
  3747 00002506 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3748 00002509 7410                    	je .L_tc_recycle_frame_done_0065
  3749 0000250B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3750 0000250E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3751 00002511 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3752 00002515 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3753 00002519 EBEB                    	jmp .L_tc_recycle_frame_loop_0065
  3754                                  .L_tc_recycle_frame_done_0065:
  3755 0000251B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3756 0000251C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3757 00002520 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3758 00002523 EB0A                    	jmp .L_if_end_0009
  3759                                  .L_if_else_0009:
  3760 00002525 48B8-                   	mov rax, L_constants + 2
  3760 00002527 [0200000000000000] 
  3761                                  .L_if_end_0009:
  3762                                  .L_or_end_0005:
  3763 0000252F C9                      	leave
  3764 00002530 C21800                  	ret AND_KILL_FRAME(1)
  3765                                  .L_lambda_simple_end_0063:	; new closure is in rax
  3766 00002533 48890425[5E0A0000]      	mov qword [free_var_37], rax
  3767 0000253B 48B8-                   	mov rax, sob_void
  3767 0000253D [0000000000000000] 
  3768                                  
  3769 00002545 4889C7                  	mov rdi, rax
  3770 00002548 E8D8120000              	call print_sexpr_if_not_void
  3771 0000254D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3772 00002552 E879100000              	call malloc
  3773 00002557 50                      	push rax
  3774 00002558 BF00000000              	mov rdi, 8 * 0	; new rib
  3775 0000255D E86E100000              	call malloc
  3776 00002562 50                      	push rax
  3777 00002563 BF08000000              	mov rdi, 8 * 1	; extended env
  3778 00002568 E863100000              	call malloc
  3779 0000256D 488B7D10                	mov rdi, ENV
  3780 00002571 BE00000000              	mov rsi, 0
  3781 00002576 BA01000000              	mov rdx, 1
  3782                                  .L_lambda_opt_env_loop_0007:	; ext_env[i + 1] <-- env[i]
  3783 0000257B 4883FE00                	cmp rsi, 0
  3784 0000257F 7410                    	je .L_lambda_opt_env_end_0007
  3785 00002581 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3786 00002585 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3787 00002589 48FFC6                  	inc rsi
  3788 0000258C 48FFC2                  	inc rdx
  3789 0000258F EBEA                    	jmp .L_lambda_opt_env_loop_0007
  3790                                  .L_lambda_opt_env_end_0007:
  3791 00002591 5B                      	pop rbx
  3792 00002592 BE00000000              	mov rsi, 0
  3793                                  .L_lambda_opt_params_loop_0007:	; copy params
  3794 00002597 4883FE00                	cmp rsi, 0
  3795 0000259B 740E                    	je .L_lambda_opt_params_end_0007
  3796 0000259D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3797 000025A2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3798 000025A6 48FFC6                  	inc rsi
  3799 000025A9 EBEC                    	jmp .L_lambda_opt_params_loop_0007
  3800                                  .L_lambda_opt_params_end_0007:
  3801 000025AB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3802 000025AE 4889C3                  	mov rbx, rax
  3803 000025B1 58                      	pop rax
  3804 000025B2 C60004                  	mov byte [rax], T_closure
  3805 000025B5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3806 000025B9 48C74009[C6250000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0007
  3807 000025C1 E919010000              	jmp .L_lambda_opt_end_0007
  3808                                  .L_lambda_opt_code_0007:	; lambda-opt body
  3809 000025C6 48837C241000            	cmp qword [rsp + 8 * 2], 0
  3810 000025CC 740D                    	je .L_lambda_opt_arity_check_exact_0007
  3811 000025CE 7F4C                    	jg .L_lambda_opt_arity_check_more_0007
  3812 000025D0 FF742410                	push qword [rsp + 8 * 2]
  3813 000025D4 6A00                    	push 0
  3814 000025D6 E9C20F0000              	jmp L_error_incorrect_arity_opt
  3815                                  .L_lambda_opt_arity_check_exact_0007:
  3816 000025DB 4883EC08                	sub rsp, 8
  3817 000025DF 488B442408              	mov rax, qword[rsp + 8 *1]
  3818 000025E4 48890424                	mov qword[rsp], rax  
  3819 000025E8 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  3820 000025ED 4889442408              	mov qword[rsp + 8 * 1], rax
  3821 000025F2 B801000000              	mov rax, 1
  3822 000025F7 4889442410              	mov qword[rsp + 8 *2], rax
  3823 000025FC 48B8-                   	mov rax, sob_nil
  3823 000025FE [0100000000000000] 
  3824 00002606 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  3825 0000260B C8000000                	enter 0, 0
  3826 0000260F 488B4520                	mov rax, PARAM(0)	; param args
  3827 00002613 C9                      	leave
  3828 00002614 C21800                  	ret AND_KILL_FRAME(1)
  3829 00002617 E9C3000000              	jmp .L_lambda_opt_end_0007	; new closure is in rax
  3830                                  .L_lambda_opt_arity_check_more_0007:
  3831 0000261C 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  3832 00002621 49B9-                   	mov r9, sob_nil
  3832 00002623 [0100000000000000] 
  3833 0000262B 4889E3                  	mov rbx, rsp 
  3834 0000262E 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  3835 00002632 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  3836 00002635 49C1E003                	shl r8, 3
  3837 00002639 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  3838 0000263C 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  3839                                  .L_lambda_opt_stack_shrink_loop_0007:
  3840 00002641 4983F800                	cmp r8, 0
  3841 00002645 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0007
  3842 00002647 BF11000000              	mov rdi, 1+8+8	;for pair
  3843 0000264C E87F0F0000              	call malloc	 ;to create the pair in the stack
  3844 00002651 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  3845 00002654 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
  3846 00002657 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
  3847 0000265B 4C894809                 	mov qword[rax+1+8],r9
  3848 0000265F 4989C1                  	mov r9, rax	 ; for the recursion 
  3849 00002662 49FFC8                  	dec r8 	;we finished copy another opt param to the list
  3850 00002665 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
  3851 00002669 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0007
  3852                                  .L_lambda_opt_stack_shrink_loop_exit_0007:
  3853 0000266B 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
  3854 00002670 4883E901                	sub rcx, 1
  3855 00002674 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
  3856 00002678 4801CC                  	add rsp, rcx	 ;shrinking the stack
  3857 0000267B 4889E0                  	mov rax, rsp
  3858 0000267E 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
  3859 00002681 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
  3860 00002685 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
  3861 00002688 4883C018                	add rax, 3 * 8 	;now rax is param 0
  3862 0000268C 49C1E003                	shl r8, 3 	; convert to byte
  3863 00002690 4C01C0                  	add rax, r8 	;now rax is the top of the stack
  3864 00002693 4C8908                  	mov qword[rax], r9	;puting the list at the top
  3865 00002696 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
  3866 0000269A 4889E3                  	mov rbx, rsp 
  3867 0000269D 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
  3868 000026A0 41BA00000000            	mov r10, 0 	 ;r10 is the not opt params length
  3869 000026A6 49FFCA                  	dec r10 
  3870 000026A9 49C1E203                	shl r10, 3	;to get bytes
  3871 000026AD 4883C318                	add rbx, 3*8 	;rbx is the first param
  3872 000026B1 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
  3873 000026B4 4889E0                  	mov rax, rsp
  3874 000026B7 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  3875 000026BA 48C744241001000000      	mov qword [rsp+2*8], 1
  3876 000026C3 488B5808                	mov rbx, qword[rax + 8 *1]
  3877 000026C7 48895C2408              	mov qword [rsp + 1*8] ,rbx
  3878 000026CC 488B18                  	mov rbx, qword[rax]
  3879 000026CF 48891C24                	mov qword [rsp], rbx
  3880 000026D3 C8000000                	enter 0, 0
  3881 000026D7 488B4520                	mov rax, PARAM(0)	; param args
  3882 000026DB C9                      	leave
  3883 000026DC C21800                  	ret AND_KILL_FRAME(1)
  3884                                  .L_lambda_opt_end_0007:	; new closure is in rax
  3885 000026DF 48890425[3C0A0000]      	mov qword [free_var_35], rax
  3886 000026E7 48B8-                   	mov rax, sob_void
  3886 000026E9 [0000000000000000] 
  3887                                  
  3888 000026F1 4889C7                  	mov rdi, rax
  3889 000026F4 E82C110000              	call print_sexpr_if_not_void
  3890 000026F9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3891 000026FE E8CD0E0000              	call malloc
  3892 00002703 50                      	push rax
  3893 00002704 BF00000000              	mov rdi, 8 * 0	; new rib
  3894 00002709 E8C20E0000              	call malloc
  3895 0000270E 50                      	push rax
  3896 0000270F BF08000000              	mov rdi, 8 * 1	; extended env
  3897 00002714 E8B70E0000              	call malloc
  3898 00002719 488B7D10                	mov rdi, ENV
  3899 0000271D BE00000000              	mov rsi, 0
  3900 00002722 BA01000000              	mov rdx, 1
  3901                                  .L_lambda_simple_env_loop_0064:	; ext_env[i + 1] <-- env[i]
  3902 00002727 4883FE00                	cmp rsi, 0
  3903 0000272B 7410                    	je .L_lambda_simple_env_end_0064
  3904 0000272D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3905 00002731 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3906 00002735 48FFC6                  	inc rsi
  3907 00002738 48FFC2                  	inc rdx
  3908 0000273B EBEA                    	jmp .L_lambda_simple_env_loop_0064
  3909                                  .L_lambda_simple_env_end_0064:
  3910 0000273D 5B                      	pop rbx
  3911 0000273E BE00000000              	mov rsi, 0
  3912                                  .L_lambda_simple_params_loop_0064:	; copy params
  3913 00002743 4883FE00                	cmp rsi, 0
  3914 00002747 740E                    	je .L_lambda_simple_params_end_0064
  3915 00002749 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3916 0000274E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3917 00002752 48FFC6                  	inc rsi
  3918 00002755 EBEC                    	jmp .L_lambda_simple_params_loop_0064
  3919                                  .L_lambda_simple_params_end_0064:
  3920 00002757 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3921 0000275A 4889C3                  	mov rbx, rax
  3922 0000275D 58                      	pop rax
  3923 0000275E C60004                  	mov byte [rax], T_closure
  3924 00002761 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3925 00002765 48C74009[6F270000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0064
  3926 0000276D EB3D                    	jmp .L_lambda_simple_end_0064
  3927                                  .L_lambda_simple_code_0064:	; lambda-simple body
  3928 0000276F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3929 00002775 740B                    	je .L_lambda_simple_arity_check_ok_0064
  3930 00002777 FF742410                	push qword [rsp + 8 * 2]
  3931 0000277B 6A01                    	push 1
  3932 0000277D E9070E0000              	jmp L_error_incorrect_arity_simple
  3933                                  .L_lambda_simple_arity_check_ok_0064:
  3934 00002782 C8000000                	enter 0, 0
  3935 00002786 488B4520                	mov rax, PARAM(0)	; param x
  3936 0000278A 483D[02000000]          	cmp rax, sob_boolean_false
  3937 00002790 740C                    	je .L_if_else_000a
  3938 00002792 48B8-                   	mov rax, L_constants + 2
  3938 00002794 [0200000000000000] 
  3939 0000279C EB0A                    	jmp .L_if_end_000a
  3940                                  .L_if_else_000a:
  3941 0000279E 48B8-                   	mov rax, L_constants + 3
  3941 000027A0 [0300000000000000] 
  3942                                  .L_if_end_000a:
  3943 000027A8 C9                      	leave
  3944 000027A9 C21800                  	ret AND_KILL_FRAME(1)
  3945                                  .L_lambda_simple_end_0064:	; new closure is in rax
  3946 000027AC 48890425[6F0A0000]      	mov qword [free_var_38], rax
  3947 000027B4 48B8-                   	mov rax, sob_void
  3947 000027B6 [0000000000000000] 
  3948                                  
  3949 000027BE 4889C7                  	mov rdi, rax
  3950 000027C1 E85F100000              	call print_sexpr_if_not_void
  3951 000027C6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3952 000027CB E8000E0000              	call malloc
  3953 000027D0 50                      	push rax
  3954 000027D1 BF00000000              	mov rdi, 8 * 0	; new rib
  3955 000027D6 E8F50D0000              	call malloc
  3956 000027DB 50                      	push rax
  3957 000027DC BF08000000              	mov rdi, 8 * 1	; extended env
  3958 000027E1 E8EA0D0000              	call malloc
  3959 000027E6 488B7D10                	mov rdi, ENV
  3960 000027EA BE00000000              	mov rsi, 0
  3961 000027EF BA01000000              	mov rdx, 1
  3962                                  .L_lambda_simple_env_loop_0065:	; ext_env[i + 1] <-- env[i]
  3963 000027F4 4883FE00                	cmp rsi, 0
  3964 000027F8 7410                    	je .L_lambda_simple_env_end_0065
  3965 000027FA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3966 000027FE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3967 00002802 48FFC6                  	inc rsi
  3968 00002805 48FFC2                  	inc rdx
  3969 00002808 EBEA                    	jmp .L_lambda_simple_env_loop_0065
  3970                                  .L_lambda_simple_env_end_0065:
  3971 0000280A 5B                      	pop rbx
  3972 0000280B BE00000000              	mov rsi, 0
  3973                                  .L_lambda_simple_params_loop_0065:	; copy params
  3974 00002810 4883FE00                	cmp rsi, 0
  3975 00002814 740E                    	je .L_lambda_simple_params_end_0065
  3976 00002816 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3977 0000281B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3978 0000281F 48FFC6                  	inc rsi
  3979 00002822 EBEC                    	jmp .L_lambda_simple_params_loop_0065
  3980                                  .L_lambda_simple_params_end_0065:
  3981 00002824 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3982 00002827 4889C3                  	mov rbx, rax
  3983 0000282A 58                      	pop rax
  3984 0000282B C60004                  	mov byte [rax], T_closure
  3985 0000282E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3986 00002832 48C74009[3F280000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0065
  3987 0000283A E9B6000000              	jmp .L_lambda_simple_end_0065
  3988                                  .L_lambda_simple_code_0065:	; lambda-simple body
  3989 0000283F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3990 00002845 740B                    	je .L_lambda_simple_arity_check_ok_0065
  3991 00002847 FF742410                	push qword [rsp + 8 * 2]
  3992 0000284B 6A01                    	push 1
  3993 0000284D E9370D0000              	jmp L_error_incorrect_arity_simple
  3994                                  .L_lambda_simple_arity_check_ok_0065:
  3995 00002852 C8000000                	enter 0, 0
  3996                                  	; preparing a non-tail-call
  3997 00002856 488B4520                	mov rax, PARAM(0)	; param q
  3998 0000285A 50                      	push rax
  3999 0000285B 6A01                    	push 1	; arg count
  4000 0000285D 488B0425[2B0A0000]      	mov rax, qword [free_var_34]	; free var integer?
  4001 00002865 803805                  	cmp byte [rax], T_undefined
  4002 00002868 0F84350C0000            	je L_error_fvar_undefined
  4003 0000286E 803804                  	cmp byte [rax], T_closure
  4004 00002871 0F85B00C0000            	jne L_error_non_closure
  4005 00002877 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4006 0000287A FF5009                  	call SOB_CLOSURE_CODE(rax)
  4007 0000287D 483D[02000000]          	cmp rax, sob_boolean_false
  4008 00002883 756C                    	jne .L_or_end_0006
  4009                                  	; preparing a tail-call
  4010 00002885 488B4520                	mov rax, PARAM(0)	; param q
  4011 00002889 50                      	push rax
  4012 0000288A 6A01                    	push 1	; arg count
  4013 0000288C 488B0425[1A0A0000]      	mov rax, qword [free_var_33]	; free var fraction?
  4014 00002894 803805                  	cmp byte [rax], T_undefined
  4015 00002897 0F84060C0000            	je L_error_fvar_undefined
  4016 0000289D 803804                  	cmp byte [rax], T_closure
  4017 000028A0 0F85810C0000            	jne L_error_non_closure
  4018 000028A6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4019 000028A9 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4020 000028AC FF7500                  	push qword[rbp]
  4021 000028AF 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4022 000028B2 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4023 000028B6 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4024 000028BA 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4025 000028BE 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4026 000028C1 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4027 000028C4 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4028 000028C9 4983C103                	add r9, 3 	 ;for getting to the params
  4029 000028CD 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4030 000028D1 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4031                                  .L_tc_recycle_frame_loop_0066:
  4032 000028D4 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4033 000028D7 7410                    	je .L_tc_recycle_frame_done_0066
  4034 000028D9 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4035 000028DC 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4036 000028DF 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4037 000028E3 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4038 000028E7 EBEB                    	jmp .L_tc_recycle_frame_loop_0066
  4039                                  .L_tc_recycle_frame_done_0066:
  4040 000028E9 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4041 000028EA 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4042 000028EE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4043                                  .L_or_end_0006:
  4044 000028F1 C9                      	leave
  4045 000028F2 C21800                  	ret AND_KILL_FRAME(1)
  4046                                  .L_lambda_simple_end_0065:	; new closure is in rax
  4047 000028F5 48890425[A20A0000]      	mov qword [free_var_41], rax
  4048 000028FD 48B8-                   	mov rax, sob_void
  4048 000028FF [0000000000000000] 
  4049                                  
  4050 00002907 4889C7                  	mov rdi, rax
  4051 0000290A E8160F0000              	call print_sexpr_if_not_void
  4052                                  	; preparing a non-tail-call
  4053 0000290F 48B8-                   	mov rax, L_constants + 1993
  4053 00002911 [C907000000000000] 
  4054 00002919 50                      	push rax
  4055 0000291A 6A01                    	push 1	; arg count
  4056 0000291C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4057 00002921 E8AA0C0000              	call malloc
  4058 00002926 50                      	push rax
  4059 00002927 BF00000000              	mov rdi, 8 * 0	; new rib
  4060 0000292C E89F0C0000              	call malloc
  4061 00002931 50                      	push rax
  4062 00002932 BF08000000              	mov rdi, 8 * 1	; extended env
  4063 00002937 E8940C0000              	call malloc
  4064 0000293C 488B7D10                	mov rdi, ENV
  4065 00002940 BE00000000              	mov rsi, 0
  4066 00002945 BA01000000              	mov rdx, 1
  4067                                  .L_lambda_simple_env_loop_0066:	; ext_env[i + 1] <-- env[i]
  4068 0000294A 4883FE00                	cmp rsi, 0
  4069 0000294E 7410                    	je .L_lambda_simple_env_end_0066
  4070 00002950 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4071 00002954 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4072 00002958 48FFC6                  	inc rsi
  4073 0000295B 48FFC2                  	inc rdx
  4074 0000295E EBEA                    	jmp .L_lambda_simple_env_loop_0066
  4075                                  .L_lambda_simple_env_end_0066:
  4076 00002960 5B                      	pop rbx
  4077 00002961 BE00000000              	mov rsi, 0
  4078                                  .L_lambda_simple_params_loop_0066:	; copy params
  4079 00002966 4883FE00                	cmp rsi, 0
  4080 0000296A 740E                    	je .L_lambda_simple_params_end_0066
  4081 0000296C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4082 00002971 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4083 00002975 48FFC6                  	inc rsi
  4084 00002978 EBEC                    	jmp .L_lambda_simple_params_loop_0066
  4085                                  .L_lambda_simple_params_end_0066:
  4086 0000297A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4087 0000297D 4889C3                  	mov rbx, rax
  4088 00002980 58                      	pop rax
  4089 00002981 C60004                  	mov byte [rax], T_closure
  4090 00002984 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4091 00002988 48C74009[95290000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0066
  4092 00002990 E972040000              	jmp .L_lambda_simple_end_0066
  4093                                  .L_lambda_simple_code_0066:	; lambda-simple body
  4094 00002995 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4095 0000299B 740B                    	je .L_lambda_simple_arity_check_ok_0066
  4096 0000299D FF742410                	push qword [rsp + 8 * 2]
  4097 000029A1 6A01                    	push 1
  4098 000029A3 E9E10B0000              	jmp L_error_incorrect_arity_simple
  4099                                  .L_lambda_simple_arity_check_ok_0066:
  4100 000029A8 C8000000                	enter 0, 0
  4101 000029AC BF08000000              	mov rdi, 8*1
  4102 000029B1 E81A0C0000              	call malloc
  4103 000029B6 488B5D20                	mov rbx, PARAM(0)
  4104 000029BA 488918                  	mov qword[rax], rbx
  4105 000029BD 48894520                	mov PARAM(0), rax
  4106 000029C1 48B8-                   	mov rax, sob_void
  4106 000029C3 [0000000000000000] 
  4107                                  
  4108 000029CB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4109 000029D0 E8FB0B0000              	call malloc
  4110 000029D5 50                      	push rax
  4111 000029D6 BF08000000              	mov rdi, 8 * 1	; new rib
  4112 000029DB E8F00B0000              	call malloc
  4113 000029E0 50                      	push rax
  4114 000029E1 BF10000000              	mov rdi, 8 * 2	; extended env
  4115 000029E6 E8E50B0000              	call malloc
  4116 000029EB 488B7D10                	mov rdi, ENV
  4117 000029EF BE00000000              	mov rsi, 0
  4118 000029F4 BA01000000              	mov rdx, 1
  4119                                  .L_lambda_simple_env_loop_0067:	; ext_env[i + 1] <-- env[i]
  4120 000029F9 4883FE01                	cmp rsi, 1
  4121 000029FD 7410                    	je .L_lambda_simple_env_end_0067
  4122 000029FF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4123 00002A03 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4124 00002A07 48FFC6                  	inc rsi
  4125 00002A0A 48FFC2                  	inc rdx
  4126 00002A0D EBEA                    	jmp .L_lambda_simple_env_loop_0067
  4127                                  .L_lambda_simple_env_end_0067:
  4128 00002A0F 5B                      	pop rbx
  4129 00002A10 BE00000000              	mov rsi, 0
  4130                                  .L_lambda_simple_params_loop_0067:	; copy params
  4131 00002A15 4883FE01                	cmp rsi, 1
  4132 00002A19 740E                    	je .L_lambda_simple_params_end_0067
  4133 00002A1B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4134 00002A20 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4135 00002A24 48FFC6                  	inc rsi
  4136 00002A27 EBEC                    	jmp .L_lambda_simple_params_loop_0067
  4137                                  .L_lambda_simple_params_end_0067:
  4138 00002A29 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4139 00002A2C 4889C3                  	mov rbx, rax
  4140 00002A2F 58                      	pop rax
  4141 00002A30 C60004                  	mov byte [rax], T_closure
  4142 00002A33 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4143 00002A37 48C74009[442A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0067
  4144 00002A3F E92E010000              	jmp .L_lambda_simple_end_0067
  4145                                  .L_lambda_simple_code_0067:	; lambda-simple body
  4146 00002A44 48837C241002            	cmp qword [rsp + 8 * 2], 2
  4147 00002A4A 740B                    	je .L_lambda_simple_arity_check_ok_0067
  4148 00002A4C FF742410                	push qword [rsp + 8 * 2]
  4149 00002A50 6A02                    	push 2
  4150 00002A52 E9320B0000              	jmp L_error_incorrect_arity_simple
  4151                                  .L_lambda_simple_arity_check_ok_0067:
  4152 00002A57 C8000000                	enter 0, 0
  4153                                  	; preparing a non-tail-call
  4154 00002A5B 488B4528                	mov rax, PARAM(1)	; param s
  4155 00002A5F 50                      	push rax
  4156 00002A60 6A01                    	push 1	; arg count
  4157 00002A62 488B0425[800A0000]      	mov rax, qword [free_var_39]	; free var null?
  4158 00002A6A 803805                  	cmp byte [rax], T_undefined
  4159 00002A6D 0F84300A0000            	je L_error_fvar_undefined
  4160 00002A73 803804                  	cmp byte [rax], T_closure
  4161 00002A76 0F85AB0A0000            	jne L_error_non_closure
  4162 00002A7C FF7001                  	push SOB_CLOSURE_ENV(rax)
  4163 00002A7F FF5009                  	call SOB_CLOSURE_CODE(rax)
  4164 00002A82 483D[02000000]          	cmp rax, sob_boolean_false
  4165 00002A88 7409                    	je .L_if_else_000b
  4166 00002A8A 488B4520                	mov rax, PARAM(0)	; param a
  4167 00002A8E E9DB000000              	jmp .L_if_end_000b
  4168                                  .L_if_else_000b:
  4169                                  	; preparing a tail-call
  4170                                  	; preparing a non-tail-call
  4171                                  	; preparing a non-tail-call
  4172 00002A93 488B4528                	mov rax, PARAM(1)	; param s
  4173 00002A97 50                      	push rax
  4174 00002A98 6A01                    	push 1	; arg count
  4175 00002A9A 488B0425[F8090000]      	mov rax, qword [free_var_31]	; free var cdr
  4176 00002AA2 803805                  	cmp byte [rax], T_undefined
  4177 00002AA5 0F84F8090000            	je L_error_fvar_undefined
  4178 00002AAB 803804                  	cmp byte [rax], T_closure
  4179 00002AAE 0F85730A0000            	jne L_error_non_closure
  4180 00002AB4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4181 00002AB7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4182 00002ABA 50                      	push rax
  4183                                  	; preparing a non-tail-call
  4184 00002ABB 488B4528                	mov rax, PARAM(1)	; param s
  4185 00002ABF 50                      	push rax
  4186 00002AC0 6A01                    	push 1	; arg count
  4187 00002AC2 488B0425[F9080000]      	mov rax, qword [free_var_16]	; free var car
  4188 00002ACA 803805                  	cmp byte [rax], T_undefined
  4189 00002ACD 0F84D0090000            	je L_error_fvar_undefined
  4190 00002AD3 803804                  	cmp byte [rax], T_closure
  4191 00002AD6 0F854B0A0000            	jne L_error_non_closure
  4192 00002ADC FF7001                  	push SOB_CLOSURE_ENV(rax)
  4193 00002ADF FF5009                  	call SOB_CLOSURE_CODE(rax)
  4194 00002AE2 50                      	push rax
  4195 00002AE3 6A02                    	push 2	; arg count
  4196 00002AE5 488B4510                	mov rax, ENV
  4197 00002AE9 488B00                  	mov rax, qword [rax + 8 * 0]
  4198 00002AEC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  4199 00002AEF 488B00                  	mov rax, qword [rax]
  4200 00002AF2 803804                  	cmp byte [rax], T_closure
  4201 00002AF5 0F852C0A0000            	jne L_error_non_closure
  4202 00002AFB FF7001                  	push SOB_CLOSURE_ENV(rax)
  4203 00002AFE FF5009                  	call SOB_CLOSURE_CODE(rax)
  4204 00002B01 50                      	push rax
  4205 00002B02 488B4520                	mov rax, PARAM(0)	; param a
  4206 00002B06 50                      	push rax
  4207 00002B07 6A02                    	push 2	; arg count
  4208 00002B09 488B0425[090A0000]      	mov rax, qword [free_var_32]	; free var cons
  4209 00002B11 803805                  	cmp byte [rax], T_undefined
  4210 00002B14 0F8489090000            	je L_error_fvar_undefined
  4211 00002B1A 803804                  	cmp byte [rax], T_closure
  4212 00002B1D 0F85040A0000            	jne L_error_non_closure
  4213 00002B23 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4214 00002B26 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4215 00002B29 FF7500                  	push qword[rbp]
  4216 00002B2C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4217 00002B2F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4218 00002B33 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4219 00002B37 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4220 00002B3B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4221 00002B3E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4222 00002B41 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4223 00002B46 4983C103                	add r9, 3 	 ;for getting to the params
  4224 00002B4A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4225 00002B4E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4226                                  .L_tc_recycle_frame_loop_0067:
  4227 00002B51 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4228 00002B54 7410                    	je .L_tc_recycle_frame_done_0067
  4229 00002B56 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4230 00002B59 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4231 00002B5C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4232 00002B60 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4233 00002B64 EBEB                    	jmp .L_tc_recycle_frame_loop_0067
  4234                                  .L_tc_recycle_frame_done_0067:
  4235 00002B66 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4236 00002B67 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4237 00002B6B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4238                                  .L_if_end_000b:
  4239 00002B6E C9                      	leave
  4240 00002B6F C22000                  	ret AND_KILL_FRAME(2)
  4241                                  .L_lambda_simple_end_0067:	; new closure is in rax
  4242 00002B72 50                      	push rax
  4243 00002B73 488B4520                	mov rax, PARAM(0)	; param run
  4244 00002B77 8F00                    	pop qword [rax]
  4245 00002B79 48B8-                   	mov rax, sob_void
  4245 00002B7B [0000000000000000] 
  4246                                  
  4247 00002B83 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4248 00002B88 E8430A0000              	call malloc
  4249 00002B8D 50                      	push rax
  4250 00002B8E BF08000000              	mov rdi, 8 * 1	; new rib
  4251 00002B93 E8380A0000              	call malloc
  4252 00002B98 50                      	push rax
  4253 00002B99 BF10000000              	mov rdi, 8 * 2	; extended env
  4254 00002B9E E82D0A0000              	call malloc
  4255 00002BA3 488B7D10                	mov rdi, ENV
  4256 00002BA7 BE00000000              	mov rsi, 0
  4257 00002BAC BA01000000              	mov rdx, 1
  4258                                  .L_lambda_opt_env_loop_0008:	; ext_env[i + 1] <-- env[i]
  4259 00002BB1 4883FE01                	cmp rsi, 1
  4260 00002BB5 7410                    	je .L_lambda_opt_env_end_0008
  4261 00002BB7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4262 00002BBB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4263 00002BBF 48FFC6                  	inc rsi
  4264 00002BC2 48FFC2                  	inc rdx
  4265 00002BC5 EBEA                    	jmp .L_lambda_opt_env_loop_0008
  4266                                  .L_lambda_opt_env_end_0008:
  4267 00002BC7 5B                      	pop rbx
  4268 00002BC8 BE00000000              	mov rsi, 0
  4269                                  .L_lambda_opt_params_loop_0008:	; copy params
  4270 00002BCD 4883FE01                	cmp rsi, 1
  4271 00002BD1 740E                    	je .L_lambda_opt_params_end_0008
  4272 00002BD3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4273 00002BD8 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4274 00002BDC 48FFC6                  	inc rsi
  4275 00002BDF EBEC                    	jmp .L_lambda_opt_params_loop_0008
  4276                                  .L_lambda_opt_params_end_0008:
  4277 00002BE1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4278 00002BE4 4889C3                  	mov rbx, rax
  4279 00002BE7 58                      	pop rax
  4280 00002BE8 C60004                  	mov byte [rax], T_closure
  4281 00002BEB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4282 00002BEF 48C74009[FC2B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0008
  4283 00002BF7 E907020000              	jmp .L_lambda_opt_end_0008
  4284                                  .L_lambda_opt_code_0008:	; lambda-opt body
  4285 00002BFC 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4286 00002C02 7411                    	je .L_lambda_opt_arity_check_exact_0008
  4287 00002C04 0F8FBF000000            	jg .L_lambda_opt_arity_check_more_0008
  4288 00002C0A FF742410                	push qword [rsp + 8 * 2]
  4289 00002C0E 6A01                    	push 1
  4290 00002C10 E988090000              	jmp L_error_incorrect_arity_opt
  4291                                  .L_lambda_opt_arity_check_exact_0008:
  4292 00002C15 4883EC08                	sub rsp, 8
  4293 00002C19 488B442408              	mov rax, qword[rsp + 8 *1]
  4294 00002C1E 48890424                	mov qword[rsp], rax  
  4295 00002C22 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  4296 00002C27 4889442408              	mov qword[rsp + 8 * 1], rax
  4297 00002C2C B802000000              	mov rax, 2
  4298 00002C31 4889442410              	mov qword[rsp + 8 *2], rax
  4299 00002C36 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  4300 00002C3B 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  4301 00002C40 48B8-                   	mov rax, sob_nil
  4301 00002C42 [0100000000000000] 
  4302 00002C4A 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  4303 00002C4F C8000000                	enter 0, 0
  4304                                  	; preparing a tail-call
  4305 00002C53 488B4528                	mov rax, PARAM(1)	; param s
  4306 00002C57 50                      	push rax
  4307 00002C58 488B4520                	mov rax, PARAM(0)	; param a
  4308 00002C5C 50                      	push rax
  4309 00002C5D 6A02                    	push 2	; arg count
  4310 00002C5F 488B4510                	mov rax, ENV
  4311 00002C63 488B00                  	mov rax, qword [rax + 8 * 0]
  4312 00002C66 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  4313 00002C69 488B00                  	mov rax, qword [rax]
  4314 00002C6C 803804                  	cmp byte [rax], T_closure
  4315 00002C6F 0F85B2080000            	jne L_error_non_closure
  4316 00002C75 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4317 00002C78 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4318 00002C7B FF7500                  	push qword[rbp]
  4319 00002C7E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4320 00002C81 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4321 00002C85 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4322 00002C89 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4323 00002C8D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4324 00002C90 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4325 00002C93 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4326 00002C98 4983C103                	add r9, 3 	 ;for getting to the params
  4327 00002C9C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4328 00002CA0 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4329                                  .L_tc_recycle_frame_loop_0069:
  4330 00002CA3 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4331 00002CA6 7410                    	je .L_tc_recycle_frame_done_0069
  4332 00002CA8 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4333 00002CAB 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4334 00002CAE 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4335 00002CB2 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4336 00002CB6 EBEB                    	jmp .L_tc_recycle_frame_loop_0069
  4337                                  .L_tc_recycle_frame_done_0069:
  4338 00002CB8 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4339 00002CB9 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4340 00002CBD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4341 00002CC0 C9                      	leave
  4342 00002CC1 C22000                  	ret AND_KILL_FRAME(2)
  4343 00002CC4 E93A010000              	jmp .L_lambda_opt_end_0008	; new closure is in rax
  4344                                  .L_lambda_opt_arity_check_more_0008:
  4345 00002CC9 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  4346 00002CCE 49B9-                   	mov r9, sob_nil
  4346 00002CD0 [0100000000000000] 
  4347 00002CD8 4889E3                  	mov rbx, rsp 
  4348 00002CDB 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  4349 00002CDF 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  4350 00002CE2 49C1E003                	shl r8, 3
  4351 00002CE6 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  4352 00002CE9 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  4353                                  .L_lambda_opt_stack_shrink_loop_0008:
  4354 00002CEE 4983F801                	cmp r8, 1
  4355 00002CF2 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0008
  4356 00002CF4 BF11000000              	mov rdi, 1+8+8	;for pair
  4357 00002CF9 E8D2080000              	call malloc	 ;to create the pair in the stack
  4358 00002CFE C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  4359 00002D01 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
  4360 00002D04 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
  4361 00002D08 4C894809                 	mov qword[rax+1+8],r9
  4362 00002D0C 4989C1                  	mov r9, rax	 ; for the recursion 
  4363 00002D0F 49FFC8                  	dec r8 	;we finished copy another opt param to the list
  4364 00002D12 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
  4365 00002D16 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0008
  4366                                  .L_lambda_opt_stack_shrink_loop_exit_0008:
  4367 00002D18 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
  4368 00002D1D 4883E902                	sub rcx, 2
  4369 00002D21 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
  4370 00002D25 4801CC                  	add rsp, rcx	 ;shrinking the stack
  4371 00002D28 4889E0                  	mov rax, rsp
  4372 00002D2B 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
  4373 00002D2E 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
  4374 00002D32 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
  4375 00002D35 4883C018                	add rax, 3 * 8 	;now rax is param 0
  4376 00002D39 49C1E003                	shl r8, 3 	; convert to byte
  4377 00002D3D 4C01C0                  	add rax, r8 	;now rax is the top of the stack
  4378 00002D40 4C8908                  	mov qword[rax], r9	;puting the list at the top
  4379 00002D43 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
  4380 00002D47 4889E3                  	mov rbx, rsp 
  4381 00002D4A 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
  4382 00002D4D 41BA01000000            	mov r10, 1 	 ;r10 is the not opt params length
  4383 00002D53 49FFCA                  	dec r10 
  4384 00002D56 49C1E203                	shl r10, 3	;to get bytes
  4385 00002D5A 4883C318                	add rbx, 3*8 	;rbx is the first param
  4386 00002D5E 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
  4387 00002D61 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  4388                                  
  4389 00002D64 4C8900                              	mov qword[rax], r8
  4390 00002D67 4883E808                            	sub rax, 8
  4391 00002D6B 4883EB08                	sub rbx, 8
  4392 00002D6F 4889E0                  	mov rax, rsp
  4393 00002D72 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  4394 00002D75 48C744241002000000      	mov qword [rsp+2*8], 2
  4395 00002D7E 488B5808                	mov rbx, qword[rax + 8 *1]
  4396 00002D82 48895C2408              	mov qword [rsp + 1*8] ,rbx
  4397 00002D87 488B18                  	mov rbx, qword[rax]
  4398 00002D8A 48891C24                	mov qword [rsp], rbx
  4399 00002D8E C8000000                	enter 0, 0
  4400                                  	; preparing a tail-call
  4401 00002D92 488B4528                	mov rax, PARAM(1)	; param s
  4402 00002D96 50                      	push rax
  4403 00002D97 488B4520                	mov rax, PARAM(0)	; param a
  4404 00002D9B 50                      	push rax
  4405 00002D9C 6A02                    	push 2	; arg count
  4406 00002D9E 488B4510                	mov rax, ENV
  4407 00002DA2 488B00                  	mov rax, qword [rax + 8 * 0]
  4408 00002DA5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  4409 00002DA8 488B00                  	mov rax, qword [rax]
  4410 00002DAB 803804                  	cmp byte [rax], T_closure
  4411 00002DAE 0F8573070000            	jne L_error_non_closure
  4412 00002DB4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4413 00002DB7 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4414 00002DBA FF7500                  	push qword[rbp]
  4415 00002DBD 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4416 00002DC0 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4417 00002DC4 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4418 00002DC8 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4419 00002DCC 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4420 00002DCF 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4421 00002DD2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4422 00002DD7 4983C103                	add r9, 3 	 ;for getting to the params
  4423 00002DDB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4424 00002DDF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4425                                  .L_tc_recycle_frame_loop_0068:
  4426 00002DE2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4427 00002DE5 7410                    	je .L_tc_recycle_frame_done_0068
  4428 00002DE7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4429 00002DEA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4430 00002DED 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4431 00002DF1 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4432 00002DF5 EBEB                    	jmp .L_tc_recycle_frame_loop_0068
  4433                                  .L_tc_recycle_frame_done_0068:
  4434 00002DF7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4435 00002DF8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4436 00002DFC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4437 00002DFF C9                      	leave
  4438 00002E00 C22000                  	ret AND_KILL_FRAME(2)
  4439                                  .L_lambda_opt_end_0008:	; new closure is in rax
  4440 00002E03 C9                      	leave
  4441 00002E04 C21800                  	ret AND_KILL_FRAME(1)
  4442                                  .L_lambda_simple_end_0066:	; new closure is in rax
  4443 00002E07 803804                  	cmp byte [rax], T_closure
  4444 00002E0A 0F8517070000            	jne L_error_non_closure
  4445 00002E10 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4446 00002E13 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4447 00002E16 48890425[4D0A0000]      	mov qword [free_var_36], rax
  4448 00002E1E 48B8-                   	mov rax, sob_void
  4448 00002E20 [0000000000000000] 
  4449                                  
  4450 00002E28 4889C7                  	mov rdi, rax
  4451 00002E2B E8F5090000              	call print_sexpr_if_not_void
  4452                                  	; preparing a non-tail-call
  4453 00002E30 48B8-                   	mov rax, L_constants + 1993
  4453 00002E32 [C907000000000000] 
  4454 00002E3A 50                      	push rax
  4455 00002E3B 6A01                    	push 1	; arg count
  4456 00002E3D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4457 00002E42 E889070000              	call malloc
  4458 00002E47 50                      	push rax
  4459 00002E48 BF00000000              	mov rdi, 8 * 0	; new rib
  4460 00002E4D E87E070000              	call malloc
  4461 00002E52 50                      	push rax
  4462 00002E53 BF08000000              	mov rdi, 8 * 1	; extended env
  4463 00002E58 E873070000              	call malloc
  4464 00002E5D 488B7D10                	mov rdi, ENV
  4465 00002E61 BE00000000              	mov rsi, 0
  4466 00002E66 BA01000000              	mov rdx, 1
  4467                                  .L_lambda_simple_env_loop_0068:	; ext_env[i + 1] <-- env[i]
  4468 00002E6B 4883FE00                	cmp rsi, 0
  4469 00002E6F 7410                    	je .L_lambda_simple_env_end_0068
  4470 00002E71 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4471 00002E75 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4472 00002E79 48FFC6                  	inc rsi
  4473 00002E7C 48FFC2                  	inc rdx
  4474 00002E7F EBEA                    	jmp .L_lambda_simple_env_loop_0068
  4475                                  .L_lambda_simple_env_end_0068:
  4476 00002E81 5B                      	pop rbx
  4477 00002E82 BE00000000              	mov rsi, 0
  4478                                  .L_lambda_simple_params_loop_0068:	; copy params
  4479 00002E87 4883FE00                	cmp rsi, 0
  4480 00002E8B 740E                    	je .L_lambda_simple_params_end_0068
  4481 00002E8D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4482 00002E92 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4483 00002E96 48FFC6                  	inc rsi
  4484 00002E99 EBEC                    	jmp .L_lambda_simple_params_loop_0068
  4485                                  .L_lambda_simple_params_end_0068:
  4486 00002E9B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4487 00002E9E 4889C3                  	mov rbx, rax
  4488 00002EA1 58                      	pop rax
  4489 00002EA2 C60004                  	mov byte [rax], T_closure
  4490 00002EA5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4491 00002EA9 48C74009[B62E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0068
  4492 00002EB1 E94F050000              	jmp .L_lambda_simple_end_0068
  4493                                  .L_lambda_simple_code_0068:	; lambda-simple body
  4494 00002EB6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4495 00002EBC 740B                    	je .L_lambda_simple_arity_check_ok_0068
  4496 00002EBE FF742410                	push qword [rsp + 8 * 2]
  4497 00002EC2 6A01                    	push 1
  4498 00002EC4 E9C0060000              	jmp L_error_incorrect_arity_simple
  4499                                  .L_lambda_simple_arity_check_ok_0068:
  4500 00002EC9 C8000000                	enter 0, 0
  4501 00002ECD BF08000000              	mov rdi, 8*1
  4502 00002ED2 E8F9060000              	call malloc
  4503 00002ED7 488B5D20                	mov rbx, PARAM(0)
  4504 00002EDB 488918                  	mov qword[rax], rbx
  4505 00002EDE 48894520                	mov PARAM(0), rax
  4506 00002EE2 48B8-                   	mov rax, sob_void
  4506 00002EE4 [0000000000000000] 
  4507                                  
  4508 00002EEC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4509 00002EF1 E8DA060000              	call malloc
  4510 00002EF6 50                      	push rax
  4511 00002EF7 BF08000000              	mov rdi, 8 * 1	; new rib
  4512 00002EFC E8CF060000              	call malloc
  4513 00002F01 50                      	push rax
  4514 00002F02 BF10000000              	mov rdi, 8 * 2	; extended env
  4515 00002F07 E8C4060000              	call malloc
  4516 00002F0C 488B7D10                	mov rdi, ENV
  4517 00002F10 BE00000000              	mov rsi, 0
  4518 00002F15 BA01000000              	mov rdx, 1
  4519                                  .L_lambda_simple_env_loop_0069:	; ext_env[i + 1] <-- env[i]
  4520 00002F1A 4883FE01                	cmp rsi, 1
  4521 00002F1E 7410                    	je .L_lambda_simple_env_end_0069
  4522 00002F20 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4523 00002F24 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4524 00002F28 48FFC6                  	inc rsi
  4525 00002F2B 48FFC2                  	inc rdx
  4526 00002F2E EBEA                    	jmp .L_lambda_simple_env_loop_0069
  4527                                  .L_lambda_simple_env_end_0069:
  4528 00002F30 5B                      	pop rbx
  4529 00002F31 BE00000000              	mov rsi, 0
  4530                                  .L_lambda_simple_params_loop_0069:	; copy params
  4531 00002F36 4883FE01                	cmp rsi, 1
  4532 00002F3A 740E                    	je .L_lambda_simple_params_end_0069
  4533 00002F3C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4534 00002F41 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4535 00002F45 48FFC6                  	inc rsi
  4536 00002F48 EBEC                    	jmp .L_lambda_simple_params_loop_0069
  4537                                  .L_lambda_simple_params_end_0069:
  4538 00002F4A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4539 00002F4D 4889C3                  	mov rbx, rax
  4540 00002F50 58                      	pop rax
  4541 00002F51 C60004                  	mov byte [rax], T_closure
  4542 00002F54 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4543 00002F58 48C74009[652F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0069
  4544 00002F60 E92F010000              	jmp .L_lambda_simple_end_0069
  4545                                  .L_lambda_simple_code_0069:	; lambda-simple body
  4546 00002F65 48837C241002            	cmp qword [rsp + 8 * 2], 2
  4547 00002F6B 740B                    	je .L_lambda_simple_arity_check_ok_0069
  4548 00002F6D FF742410                	push qword [rsp + 8 * 2]
  4549 00002F71 6A02                    	push 2
  4550 00002F73 E911060000              	jmp L_error_incorrect_arity_simple
  4551                                  .L_lambda_simple_arity_check_ok_0069:
  4552 00002F78 C8000000                	enter 0, 0
  4553                                  	; preparing a non-tail-call
  4554 00002F7C 488B4528                	mov rax, PARAM(1)	; param s
  4555 00002F80 50                      	push rax
  4556 00002F81 6A01                    	push 1	; arg count
  4557 00002F83 488B0425[910A0000]      	mov rax, qword [free_var_40]	; free var pair?
  4558 00002F8B 803805                  	cmp byte [rax], T_undefined
  4559 00002F8E 0F840F050000            	je L_error_fvar_undefined
  4560 00002F94 803804                  	cmp byte [rax], T_closure
  4561 00002F97 0F858A050000            	jne L_error_non_closure
  4562 00002F9D FF7001                  	push SOB_CLOSURE_ENV(rax)
  4563 00002FA0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4564 00002FA3 483D[02000000]          	cmp rax, sob_boolean_false
  4565 00002FA9 0F84DD000000            	je .L_if_else_000c
  4566                                  	; preparing a tail-call
  4567                                  	; preparing a non-tail-call
  4568                                  	; preparing a non-tail-call
  4569 00002FAF 488B4528                	mov rax, PARAM(1)	; param s
  4570 00002FB3 50                      	push rax
  4571 00002FB4 6A01                    	push 1	; arg count
  4572 00002FB6 488B0425[F8090000]      	mov rax, qword [free_var_31]	; free var cdr
  4573 00002FBE 803805                  	cmp byte [rax], T_undefined
  4574 00002FC1 0F84DC040000            	je L_error_fvar_undefined
  4575 00002FC7 803804                  	cmp byte [rax], T_closure
  4576 00002FCA 0F8557050000            	jne L_error_non_closure
  4577 00002FD0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4578 00002FD3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4579 00002FD6 50                      	push rax
  4580                                  	; preparing a non-tail-call
  4581 00002FD7 488B4528                	mov rax, PARAM(1)	; param s
  4582 00002FDB 50                      	push rax
  4583 00002FDC 6A01                    	push 1	; arg count
  4584 00002FDE 488B0425[F9080000]      	mov rax, qword [free_var_16]	; free var car
  4585 00002FE6 803805                  	cmp byte [rax], T_undefined
  4586 00002FE9 0F84B4040000            	je L_error_fvar_undefined
  4587 00002FEF 803804                  	cmp byte [rax], T_closure
  4588 00002FF2 0F852F050000            	jne L_error_non_closure
  4589 00002FF8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4590 00002FFB FF5009                  	call SOB_CLOSURE_CODE(rax)
  4591 00002FFE 50                      	push rax
  4592 00002FFF 6A02                    	push 2	; arg count
  4593 00003001 488B4510                	mov rax, ENV
  4594 00003005 488B00                  	mov rax, qword [rax + 8 * 0]
  4595 00003008 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  4596 0000300B 488B00                  	mov rax, qword [rax]
  4597 0000300E 803804                  	cmp byte [rax], T_closure
  4598 00003011 0F8510050000            	jne L_error_non_closure
  4599 00003017 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4600 0000301A FF5009                  	call SOB_CLOSURE_CODE(rax)
  4601 0000301D 50                      	push rax
  4602 0000301E 488B4520                	mov rax, PARAM(0)	; param a
  4603 00003022 50                      	push rax
  4604 00003023 6A02                    	push 2	; arg count
  4605 00003025 488B0425[090A0000]      	mov rax, qword [free_var_32]	; free var cons
  4606 0000302D 803805                  	cmp byte [rax], T_undefined
  4607 00003030 0F846D040000            	je L_error_fvar_undefined
  4608 00003036 803804                  	cmp byte [rax], T_closure
  4609 00003039 0F85E8040000            	jne L_error_non_closure
  4610 0000303F FF7001                  	push SOB_CLOSURE_ENV(rax)
  4611 00003042 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4612 00003045 FF7500                  	push qword[rbp]
  4613 00003048 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4614 0000304B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4615 0000304F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4616 00003053 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4617 00003057 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4618 0000305A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4619 0000305D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4620 00003062 4983C103                	add r9, 3 	 ;for getting to the params
  4621 00003066 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4622 0000306A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4623                                  .L_tc_recycle_frame_loop_006a:
  4624 0000306D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4625 00003070 7410                    	je .L_tc_recycle_frame_done_006a
  4626 00003072 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4627 00003075 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4628 00003078 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4629 0000307C 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4630 00003080 EBEB                    	jmp .L_tc_recycle_frame_loop_006a
  4631                                  .L_tc_recycle_frame_done_006a:
  4632 00003082 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4633 00003083 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4634 00003087 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4635 0000308A EB04                    	jmp .L_if_end_000c
  4636                                  .L_if_else_000c:
  4637 0000308C 488B4520                	mov rax, PARAM(0)	; param a
  4638                                  .L_if_end_000c:
  4639 00003090 C9                      	leave
  4640 00003091 C22000                  	ret AND_KILL_FRAME(2)
  4641                                  .L_lambda_simple_end_0069:	; new closure is in rax
  4642 00003094 50                      	push rax
  4643 00003095 488B4520                	mov rax, PARAM(0)	; param run
  4644 00003099 8F00                    	pop qword [rax]
  4645 0000309B 48B8-                   	mov rax, sob_void
  4645 0000309D [0000000000000000] 
  4646                                  
  4647 000030A5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4648 000030AA E821050000              	call malloc
  4649 000030AF 50                      	push rax
  4650 000030B0 BF08000000              	mov rdi, 8 * 1	; new rib
  4651 000030B5 E816050000              	call malloc
  4652 000030BA 50                      	push rax
  4653 000030BB BF10000000              	mov rdi, 8 * 2	; extended env
  4654 000030C0 E80B050000              	call malloc
  4655 000030C5 488B7D10                	mov rdi, ENV
  4656 000030C9 BE00000000              	mov rsi, 0
  4657 000030CE BA01000000              	mov rdx, 1
  4658                                  .L_lambda_opt_env_loop_0009:	; ext_env[i + 1] <-- env[i]
  4659 000030D3 4883FE01                	cmp rsi, 1
  4660 000030D7 7410                    	je .L_lambda_opt_env_end_0009
  4661 000030D9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4662 000030DD 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4663 000030E1 48FFC6                  	inc rsi
  4664 000030E4 48FFC2                  	inc rdx
  4665 000030E7 EBEA                    	jmp .L_lambda_opt_env_loop_0009
  4666                                  .L_lambda_opt_env_end_0009:
  4667 000030E9 5B                      	pop rbx
  4668 000030EA BE00000000              	mov rsi, 0
  4669                                  .L_lambda_opt_params_loop_0009:	; copy params
  4670 000030EF 4883FE01                	cmp rsi, 1
  4671 000030F3 740E                    	je .L_lambda_opt_params_end_0009
  4672 000030F5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4673 000030FA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4674 000030FE 48FFC6                  	inc rsi
  4675 00003101 EBEC                    	jmp .L_lambda_opt_params_loop_0009
  4676                                  .L_lambda_opt_params_end_0009:
  4677 00003103 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4678 00003106 4889C3                  	mov rbx, rax
  4679 00003109 58                      	pop rax
  4680 0000310A C60004                  	mov byte [rax], T_closure
  4681 0000310D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4682 00003111 48C74009[1E310000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0009
  4683 00003119 E9E3020000              	jmp .L_lambda_opt_end_0009
  4684                                  .L_lambda_opt_code_0009:	; lambda-opt body
  4685 0000311E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4686 00003124 7411                    	je .L_lambda_opt_arity_check_exact_0009
  4687 00003126 0F8F2D010000            	jg .L_lambda_opt_arity_check_more_0009
  4688 0000312C FF742410                	push qword [rsp + 8 * 2]
  4689 00003130 6A01                    	push 1
  4690 00003132 E966040000              	jmp L_error_incorrect_arity_opt
  4691                                  .L_lambda_opt_arity_check_exact_0009:
  4692 00003137 4883EC08                	sub rsp, 8
  4693 0000313B 488B442408              	mov rax, qword[rsp + 8 *1]
  4694 00003140 48890424                	mov qword[rsp], rax  
  4695 00003144 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  4696 00003149 4889442408              	mov qword[rsp + 8 * 1], rax
  4697 0000314E B802000000              	mov rax, 2
  4698 00003153 4889442410              	mov qword[rsp + 8 *2], rax
  4699 00003158 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  4700 0000315D 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  4701 00003162 48B8-                   	mov rax, sob_nil
  4701 00003164 [0100000000000000] 
  4702 0000316C 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  4703 00003171 C8000000                	enter 0, 0
  4704                                  	; preparing a tail-call
  4705                                  	; preparing a non-tail-call
  4706                                  	; preparing a non-tail-call
  4707 00003175 488B4528                	mov rax, PARAM(1)	; param s
  4708 00003179 50                      	push rax
  4709 0000317A 6A01                    	push 1	; arg count
  4710 0000317C 488B0425[F8090000]      	mov rax, qword [free_var_31]	; free var cdr
  4711 00003184 803805                  	cmp byte [rax], T_undefined
  4712 00003187 0F8416030000            	je L_error_fvar_undefined
  4713 0000318D 803804                  	cmp byte [rax], T_closure
  4714 00003190 0F8591030000            	jne L_error_non_closure
  4715 00003196 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4716 00003199 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4717 0000319C 50                      	push rax
  4718                                  	; preparing a non-tail-call
  4719 0000319D 488B4528                	mov rax, PARAM(1)	; param s
  4720 000031A1 50                      	push rax
  4721 000031A2 6A01                    	push 1	; arg count
  4722 000031A4 488B0425[F9080000]      	mov rax, qword [free_var_16]	; free var car
  4723 000031AC 803805                  	cmp byte [rax], T_undefined
  4724 000031AF 0F84EE020000            	je L_error_fvar_undefined
  4725 000031B5 803804                  	cmp byte [rax], T_closure
  4726 000031B8 0F8569030000            	jne L_error_non_closure
  4727 000031BE FF7001                  	push SOB_CLOSURE_ENV(rax)
  4728 000031C1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4729 000031C4 50                      	push rax
  4730 000031C5 6A02                    	push 2	; arg count
  4731 000031C7 488B4510                	mov rax, ENV
  4732 000031CB 488B00                  	mov rax, qword [rax + 8 * 0]
  4733 000031CE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  4734 000031D1 488B00                  	mov rax, qword [rax]
  4735 000031D4 803804                  	cmp byte [rax], T_closure
  4736 000031D7 0F854A030000            	jne L_error_non_closure
  4737 000031DD FF7001                  	push SOB_CLOSURE_ENV(rax)
  4738 000031E0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4739 000031E3 50                      	push rax
  4740 000031E4 488B4520                	mov rax, PARAM(0)	; param f
  4741 000031E8 50                      	push rax
  4742 000031E9 6A02                    	push 2	; arg count
  4743 000031EB 488B0425[E9070000]      	mov rax, qword [free_var_0]	; free var __bin-apply
  4744 000031F3 803805                  	cmp byte [rax], T_undefined
  4745 000031F6 0F84A7020000            	je L_error_fvar_undefined
  4746 000031FC 803804                  	cmp byte [rax], T_closure
  4747 000031FF 0F8522030000            	jne L_error_non_closure
  4748 00003205 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4749 00003208 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4750 0000320B FF7500                  	push qword[rbp]
  4751 0000320E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4752 00003211 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4753 00003215 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4754 00003219 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4755 0000321D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4756 00003220 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4757 00003223 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4758 00003228 4983C103                	add r9, 3 	 ;for getting to the params
  4759 0000322C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4760 00003230 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4761                                  .L_tc_recycle_frame_loop_006c:
  4762 00003233 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4763 00003236 7410                    	je .L_tc_recycle_frame_done_006c
  4764 00003238 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4765 0000323B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4766 0000323E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4767 00003242 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4768 00003246 EBEB                    	jmp .L_tc_recycle_frame_loop_006c
  4769                                  .L_tc_recycle_frame_done_006c:
  4770 00003248 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4771 00003249 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4772 0000324D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4773 00003250 C9                      	leave
  4774 00003251 C22000                  	ret AND_KILL_FRAME(2)
  4775 00003254 E9A8010000              	jmp .L_lambda_opt_end_0009	; new closure is in rax
  4776                                  .L_lambda_opt_arity_check_more_0009:
  4777 00003259 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  4778 0000325E 49B9-                   	mov r9, sob_nil
  4778 00003260 [0100000000000000] 
  4779 00003268 4889E3                  	mov rbx, rsp 
  4780 0000326B 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  4781 0000326F 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  4782 00003272 49C1E003                	shl r8, 3
  4783 00003276 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  4784 00003279 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  4785                                  .L_lambda_opt_stack_shrink_loop_0009:
  4786 0000327E 4983F801                	cmp r8, 1
  4787 00003282 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0009
  4788 00003284 BF11000000              	mov rdi, 1+8+8	;for pair
  4789 00003289 E842030000              	call malloc	 ;to create the pair in the stack
  4790 0000328E C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  4791 00003291 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
  4792 00003294 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
  4793 00003298 4C894809                 	mov qword[rax+1+8],r9
  4794 0000329C 4989C1                  	mov r9, rax	 ; for the recursion 
  4795 0000329F 49FFC8                  	dec r8 	;we finished copy another opt param to the list
  4796 000032A2 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
  4797 000032A6 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0009
  4798                                  .L_lambda_opt_stack_shrink_loop_exit_0009:
  4799 000032A8 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
  4800 000032AD 4883E902                	sub rcx, 2
  4801 000032B1 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
  4802 000032B5 4801CC                  	add rsp, rcx	 ;shrinking the stack
  4803 000032B8 4889E0                  	mov rax, rsp
  4804 000032BB 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
  4805 000032BE 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
  4806 000032C2 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
  4807 000032C5 4883C018                	add rax, 3 * 8 	;now rax is param 0
  4808 000032C9 49C1E003                	shl r8, 3 	; convert to byte
  4809 000032CD 4C01C0                  	add rax, r8 	;now rax is the top of the stack
  4810 000032D0 4C8908                  	mov qword[rax], r9	;puting the list at the top
  4811 000032D3 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
  4812 000032D7 4889E3                  	mov rbx, rsp 
  4813 000032DA 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
  4814 000032DD 41BA01000000            	mov r10, 1 	 ;r10 is the not opt params length
  4815 000032E3 49FFCA                  	dec r10 
  4816 000032E6 49C1E203                	shl r10, 3	;to get bytes
  4817 000032EA 4883C318                	add rbx, 3*8 	;rbx is the first param
  4818 000032EE 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
  4819 000032F1 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  4820                                  
  4821 000032F4 4C8900                              	mov qword[rax], r8
  4822 000032F7 4883E808                            	sub rax, 8
  4823 000032FB 4883EB08                	sub rbx, 8
  4824 000032FF 4889E0                  	mov rax, rsp
  4825 00003302 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  4826 00003305 48C744241002000000      	mov qword [rsp+2*8], 2
  4827 0000330E 488B5808                	mov rbx, qword[rax + 8 *1]
  4828 00003312 48895C2408              	mov qword [rsp + 1*8] ,rbx
  4829 00003317 488B18                  	mov rbx, qword[rax]
  4830 0000331A 48891C24                	mov qword [rsp], rbx
  4831 0000331E C8000000                	enter 0, 0
  4832                                  	; preparing a tail-call
  4833                                  	; preparing a non-tail-call
  4834                                  	; preparing a non-tail-call
  4835 00003322 488B4528                	mov rax, PARAM(1)	; param s
  4836 00003326 50                      	push rax
  4837 00003327 6A01                    	push 1	; arg count
  4838 00003329 488B0425[F8090000]      	mov rax, qword [free_var_31]	; free var cdr
  4839 00003331 803805                  	cmp byte [rax], T_undefined
  4840 00003334 0F8469010000            	je L_error_fvar_undefined
  4841 0000333A 803804                  	cmp byte [rax], T_closure
  4842 0000333D 0F85E4010000            	jne L_error_non_closure
  4843 00003343 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4844 00003346 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4845 00003349 50                      	push rax
  4846                                  	; preparing a non-tail-call
  4847 0000334A 488B4528                	mov rax, PARAM(1)	; param s
  4848 0000334E 50                      	push rax
  4849 0000334F 6A01                    	push 1	; arg count
  4850 00003351 488B0425[F9080000]      	mov rax, qword [free_var_16]	; free var car
  4851 00003359 803805                  	cmp byte [rax], T_undefined
  4852 0000335C 0F8441010000            	je L_error_fvar_undefined
  4853 00003362 803804                  	cmp byte [rax], T_closure
  4854 00003365 0F85BC010000            	jne L_error_non_closure
  4855 0000336B FF7001                  	push SOB_CLOSURE_ENV(rax)
  4856 0000336E FF5009                  	call SOB_CLOSURE_CODE(rax)
  4857 00003371 50                      	push rax
  4858 00003372 6A02                    	push 2	; arg count
  4859 00003374 488B4510                	mov rax, ENV
  4860 00003378 488B00                  	mov rax, qword [rax + 8 * 0]
  4861 0000337B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  4862 0000337E 488B00                  	mov rax, qword [rax]
  4863 00003381 803804                  	cmp byte [rax], T_closure
  4864 00003384 0F859D010000            	jne L_error_non_closure
  4865 0000338A FF7001                  	push SOB_CLOSURE_ENV(rax)
  4866 0000338D FF5009                  	call SOB_CLOSURE_CODE(rax)
  4867 00003390 50                      	push rax
  4868 00003391 488B4520                	mov rax, PARAM(0)	; param f
  4869 00003395 50                      	push rax
  4870 00003396 6A02                    	push 2	; arg count
  4871 00003398 488B0425[E9070000]      	mov rax, qword [free_var_0]	; free var __bin-apply
  4872 000033A0 803805                  	cmp byte [rax], T_undefined
  4873 000033A3 0F84FA000000            	je L_error_fvar_undefined
  4874 000033A9 803804                  	cmp byte [rax], T_closure
  4875 000033AC 0F8575010000            	jne L_error_non_closure
  4876 000033B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4877 000033B5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4878 000033B8 FF7500                  	push qword[rbp]
  4879 000033BB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4880 000033BE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4881 000033C2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4882 000033C6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4883 000033CA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4884 000033CD 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4885 000033D0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4886 000033D5 4983C103                	add r9, 3 	 ;for getting to the params
  4887 000033D9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4888 000033DD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4889                                  .L_tc_recycle_frame_loop_006b:
  4890 000033E0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4891 000033E3 7410                    	je .L_tc_recycle_frame_done_006b
  4892 000033E5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4893 000033E8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4894 000033EB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4895 000033EF 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4896 000033F3 EBEB                    	jmp .L_tc_recycle_frame_loop_006b
  4897                                  .L_tc_recycle_frame_done_006b:
  4898 000033F5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4899 000033F6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4900 000033FA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4901 000033FD C9                      	leave
  4902 000033FE C22000                  	ret AND_KILL_FRAME(2)
  4903                                  .L_lambda_opt_end_0009:	; new closure is in rax
  4904 00003401 C9                      	leave
  4905 00003402 C21800                  	ret AND_KILL_FRAME(1)
  4906                                  .L_lambda_simple_end_0068:	; new closure is in rax
  4907 00003405 803804                  	cmp byte [rax], T_closure
  4908 00003408 0F8519010000            	jne L_error_non_closure
  4909 0000340E FF7001                  	push SOB_CLOSURE_ENV(rax)
  4910 00003411 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4911 00003414 48890425[FA070000]      	mov qword [free_var_1], rax
  4912 0000341C 48B8-                   	mov rax, sob_void
  4912 0000341E [0000000000000000] 
  4913                                  
  4914 00003426 4889C7                  	mov rdi, rax
  4915 00003429 E8F7030000              	call print_sexpr_if_not_void
  4916                                  	; preparing a non-tail-call
  4917 0000342E 48B8-                   	mov rax, L_constants + 2016
  4917 00003430 [E007000000000000] 
  4918 00003438 50                      	push rax
  4919 00003439 488B0425[B30A0000]      	mov rax, qword [free_var_42]	; free var zero?
  4920 00003441 803805                  	cmp byte [rax], T_undefined
  4921 00003444 745D                    	je L_error_fvar_undefined
  4922 00003446 50                      	push rax
  4923 00003447 6A02                    	push 2	; arg count
  4924 00003449 488B0425[E9070000]      	mov rax, qword [free_var_0]	; free var __bin-apply
  4925 00003451 803805                  	cmp byte [rax], T_undefined
  4926 00003454 744D                    	je L_error_fvar_undefined
  4927 00003456 803804                  	cmp byte [rax], T_closure
  4928 00003459 0F85C8000000            	jne L_error_non_closure
  4929 0000345F FF7001                  	push SOB_CLOSURE_ENV(rax)
  4930 00003462 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4931                                  Lend:
  4932 00003465 4889C7                  	mov rdi, rax
  4933 00003468 E8B8030000              	call print_sexpr_if_not_void
  4934                                  
  4935 0000346D 48BF-                           mov rdi, fmt_memory_usage
  4935 0000346F [5C0B000000000000] 
  4936 00003477 488B3425[E20B0000]              mov rsi, qword [top_of_memory]
  4937 0000347F 4881EE[00000000]                sub rsi, memory
  4938 00003486 B800000000                      mov rax, 0
  4939                                          ENTER
    44 0000348B C8000000            <1>  enter 0, 0
    45 0000348F 4883E4F0            <1>  and rsp, ~15
  4940 00003493 E8(00000000)                    call printf
  4941                                          LEAVE
    49 00003498 C9                  <1>  leave
  4942 00003499 B800000000                      mov rax, 0
  4943 0000349E E8(00000000)                    call exit
  4944                                  
  4945                                  L_error_fvar_undefined:
  4946 000034A3 50                              push rax
  4947 000034A4 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
  4948 000034AC 48BE-                           mov rsi, fmt_undefined_free_var_1
  4948 000034AE [C40A000000000000] 
  4949 000034B6 B800000000                      mov rax, 0
  4950                                          ENTER
    44 000034BB C8000000            <1>  enter 0, 0
    45 000034BF 4883E4F0            <1>  and rsp, ~15
  4951 000034C3 E8(00000000)                    call fprintf
  4952                                          LEAVE
    49 000034C8 C9                  <1>  leave
  4953 000034C9 58                              pop rax
  4954 000034CA 488B4001                        mov rax, qword [rax + 1] ; string
  4955 000034CE 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  4956 000034D2 BE01000000                      mov rsi, 1               ; sizeof(char)
  4957 000034D7 488B5001                        mov rdx, qword [rax + 1] ; string-length
  4958 000034DB 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
  4959 000034E3 B800000000                      mov rax, 0
  4960                                          ENTER
    44 000034E8 C8000000            <1>  enter 0, 0
    45 000034EC 4883E4F0            <1>  and rsp, ~15
  4961 000034F0 E8(00000000)                    call fwrite
  4962                                          LEAVE
    49 000034F5 C9                  <1>  leave
  4963 000034F6 488B3C25[00000000]              mov rdi, [stderr]       ; destination
  4964 000034FE 48BE-                           mov rsi, fmt_undefined_free_var_2
  4964 00003500 [DB0A000000000000] 
  4965 00003508 B800000000                      mov rax, 0
  4966                                          ENTER
    44 0000350D C8000000            <1>  enter 0, 0
    45 00003511 4883E4F0            <1>  and rsp, ~15
  4967 00003515 E8(00000000)                    call fprintf
  4968                                          LEAVE
    49 0000351A C9                  <1>  leave
  4969 0000351B 48C7C0F6FFFFFF                  mov rax, -10
  4970 00003522 E8(00000000)                    call exit
  4971                                  
  4972                                  L_error_non_closure:
  4973 00003527 488B3C25[00000000]              mov rdi, qword [stderr]
  4974 0000352F 48BE-                           mov rsi, fmt_non_closure
  4974 00003531 [920B000000000000] 
  4975 00003539 B800000000                      mov rax, 0
  4976                                          ENTER
    44 0000353E C8000000            <1>  enter 0, 0
    45 00003542 4883E4F0            <1>  and rsp, ~15
  4977 00003546 E8(00000000)                    call fprintf
  4978                                          LEAVE
    49 0000354B C9                  <1>  leave
  4979 0000354C 48C7C0FEFFFFFF                  mov rax, -2
  4980 00003553 E8(00000000)                    call exit
  4981                                  
  4982                                  L_error_improper_list:
  4983 00003558 488B3C25[00000000]      	mov rdi, qword [stderr]
  4984 00003560 48BE-                   	mov rsi, fmt_error_improper_list
  4984 00003562 [BA0B000000000000] 
  4985 0000356A B800000000              	mov rax, 0
  4986                                          ENTER
    44 0000356F C8000000            <1>  enter 0, 0
    45 00003573 4883E4F0            <1>  and rsp, ~15
  4987 00003577 E8(00000000)            	call fprintf
  4988                                          LEAVE
    49 0000357C C9                  <1>  leave
  4989 0000357D 48C7C0F9FFFFFF          	mov rax, -7
  4990 00003584 E8(00000000)            	call exit
  4991                                  
  4992                                  L_error_incorrect_arity_simple:
  4993 00003589 488B3C25[00000000]              mov rdi, qword [stderr]
  4994 00003591 48BE-                           mov rsi, fmt_incorrect_arity_simple
  4994 00003593 [FD0A000000000000] 
  4995 0000359B EB12                            jmp L_error_incorrect_arity_common
  4996                                  L_error_incorrect_arity_opt:
  4997 0000359D 488B3C25[00000000]              mov rdi, qword [stderr]
  4998 000035A5 48BE-                           mov rsi, fmt_incorrect_arity_opt
  4998 000035A7 [280B000000000000] 
  4999                                  L_error_incorrect_arity_common:
  5000 000035AF 5A                              pop rdx
  5001 000035B0 59                              pop rcx
  5002 000035B1 B800000000                      mov rax, 0
  5003                                          ENTER
    44 000035B6 C8000000            <1>  enter 0, 0
    45 000035BA 4883E4F0            <1>  and rsp, ~15
  5004 000035BE E8(00000000)                    call fprintf
  5005                                          LEAVE
    49 000035C3 C9                  <1>  leave
  5006 000035C4 48C7C0FAFFFFFF                  mov rax, -6
  5007 000035CB E8(00000000)                    call exit
  5008                                  
  5009                                  section .data
  5010                                  fmt_undefined_free_var_1:
  5011 00000AC4 212121205468652066-             db `!!! The free variable \0`
  5011 00000ACD 726565207661726961-
  5011 00000AD6 626C652000         
  5012                                  fmt_undefined_free_var_2:
  5013 00000ADB 207761732075736564-             db ` was used before it was defined.\n\0`
  5013 00000AE4 206265666F72652069-
  5013 00000AED 742077617320646566-
  5013 00000AF6 696E65642E0A00     
  5014                                  fmt_incorrect_arity_simple:
  5015 00000AFD 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
  5015 00000B06 74656420256C642061-
  5015 00000B0F 7267756D656E74732C-
  5015 00000B18 206275742067697665-
  5015 00000B21 6E20256C640A00     
  5016                                  fmt_incorrect_arity_opt:
  5017 00000B28 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
  5017 00000B31 746564206174206C65-
  5017 00000B3A 61737420256C642061-
  5017 00000B43 7267756D656E74732C-
  5017 00000B4C 206275742067697665-
  5017 00000B55 6E20256C640A00     
  5018                                  fmt_memory_usage:
  5019 00000B5C 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
  5019 00000B65 20256C642062797465-
  5019 00000B6E 73206F662064796E61-
  5019 00000B77 6D6963616C6C792D61-
  5019 00000B80 6C6C6F636174656420-
  5019 00000B89 6D656D6F72790A0A00 
  5020                                  fmt_non_closure:
  5021 00000B92 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
  5021 00000B9B 7074696E6720746F20-
  5021 00000BA4 6170706C792061206E-
  5021 00000BAD 6F6E2D636C6F737572-
  5021 00000BB6 65210A00           
  5022                                  fmt_error_improper_list:
  5023 00000BBA 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
  5023 00000BC3 7267756D656E742069-
  5023 00000BCC 73206E6F7420612070-
  5023 00000BD5 726F706572206C6973-
  5023 00000BDE 74210A00           
  5024                                  
  5025                                  section .bss
  5026                                  memory:
  5027 00000000 <res 40000000h>         	resb gbytes(1)
  5028                                  
  5029                                  section .data
  5030                                  top_of_memory:
  5031 00000BE2 [0000000000000000]              dq memory
  5032                                  
  5033                                  section .text
  5034                                  malloc:
  5035 000035D0 488B0425[E20B0000]              mov rax, qword [top_of_memory]
  5036 000035D8 48013C25[E20B0000]              add qword [top_of_memory], rdi
  5037 000035E0 C3                              ret
  5038                                  
  5039                                  L_code_ptr_return:
  5040 000035E1 48837C241002            	cmp qword [rsp + 8*2], 2
  5041 000035E7 0F85E51C0000            	jne L_error_arg_count_2
  5042 000035ED 488B4C2418              	mov rcx, qword [rsp + 8*3]
  5043                                  	assert_integer(rcx)
    53 000035F2 803911              <1>  cmp byte [%1], %2
    54 000035F5 0F85761D0000        <1>  jne L_error_incorrect_type
  5044 000035FB 488B4901                	mov rcx, qword [rcx + 1]
  5045 000035FF 4883F900                	cmp rcx, 0
  5046 00003603 0F8CFD1B0000            	jl L_error_integer_range
  5047 00003609 488B442420              	mov rax, qword [rsp + 8*4]
  5048                                  .L0:
  5049 0000360E 4883F900                        cmp rcx, 0
  5050 00003612 7409                            je .L1
  5051 00003614 488B6D00                	mov rbp, qword [rbp]
  5052 00003618 48FFC9                  	dec rcx
  5053 0000361B 7FF1                    	jg .L0
  5054                                  .L1:
  5055 0000361D 4889EC                  	mov rsp, rbp
  5056 00003620 5D                      	pop rbp
  5057 00003621 5B                              pop rbx
  5058 00003622 488B4C2408                      mov rcx, qword [rsp + 8*1]
  5059 00003627 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
  5060 0000362C FFE3                    	jmp rbx
  5061                                  
  5062                                  L_code_ptr_make_list:
  5063 0000362E C8000000                	enter 0, 0
  5064 00003632 48837D1801                      cmp COUNT, 1
  5065 00003637 740C                            je .L0
  5066 00003639 48837D1802                      cmp COUNT, 2
  5067 0000363E 7411                            je .L1
  5068 00003640 E9C21C0000                      jmp L_error_arg_count_12
  5069                                  .L0:
  5070 00003645 49B9-                           mov r9, sob_void
  5070 00003647 [0000000000000000] 
  5071 0000364F EB04                            jmp .L2
  5072                                  .L1:
  5073 00003651 4C8B4D28                        mov r9, PARAM(1)
  5074                                  .L2:
  5075 00003655 488B4D20                        mov rcx, PARAM(0)
  5076                                          assert_integer(rcx)
    53 00003659 803911              <1>  cmp byte [%1], %2
    54 0000365C 0F850F1D0000        <1>  jne L_error_incorrect_type
  5077 00003662 488B4901                        mov rcx, qword [rcx + 1]
  5078 00003666 4883F900                        cmp rcx, 0
  5079 0000366A 0F8CC71B0000                    jl L_error_arg_negative
  5080 00003670 49B8-                           mov r8, sob_nil
  5080 00003672 [0100000000000000] 
  5081                                  .L3:
  5082 0000367A 4883F900                        cmp rcx, 0
  5083 0000367E 7E1D                            jle .L4
  5084 00003680 BF11000000                      mov rdi, 1 + 8 + 8
  5085 00003685 E846FFFFFF                      call malloc
  5086 0000368A C60021                          mov byte [rax], T_pair
  5087 0000368D 4C894801                        mov qword [rax + 1], r9
  5088 00003691 4C894009                        mov qword [rax + 1 + 8], r8
  5089 00003695 4989C0                          mov r8, rax
  5090 00003698 48FFC9                          dec rcx
  5091 0000369B EBDD                            jmp .L3
  5092                                  .L4:
  5093 0000369D 4C89C0                          mov rax, r8
  5094 000036A0 48837D1802                      cmp COUNT, 2
  5095 000036A5 7404                            je .L5
  5096 000036A7 C9                              leave
  5097 000036A8 C21800                          ret AND_KILL_FRAME(1)
  5098                                  .L5:
  5099 000036AB C9                      	leave
  5100 000036AC C22000                  	ret AND_KILL_FRAME(2)
  5101                                  
  5102                                  L_code_ptr_is_primitive:
  5103 000036AF C8000000                	enter 0, 0
  5104 000036B3 48837D1801              	cmp COUNT, 1
  5105 000036B8 0F85DF1B0000            	jne L_error_arg_count_1
  5106 000036BE 488B4520                	mov rax, PARAM(0)
  5107                                  	assert_closure(rax)
    53 000036C2 803804              <1>  cmp byte [%1], %2
    54 000036C5 0F85A61C0000        <1>  jne L_error_incorrect_type
  5108 000036CB 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
  5109 000036D0 750C                    	jne .L_false
  5110 000036D2 48B8-                   	mov rax, sob_boolean_true
  5110 000036D4 [0300000000000000] 
  5111 000036DC EB0A                    	jmp .L_end
  5112                                  .L_false:
  5113 000036DE 48B8-                   	mov rax, sob_boolean_false
  5113 000036E0 [0200000000000000] 
  5114                                  .L_end:
  5115 000036E8 C9                      	leave
  5116 000036E9 C21800                  	ret AND_KILL_FRAME(1)
  5117                                  
  5118                                  L_code_ptr_length:
  5119 000036EC C8000000                	enter 0, 0
  5120 000036F0 48837D1801              	cmp COUNT, 1
  5121 000036F5 0F85A21B0000            	jne L_error_arg_count_1
  5122 000036FB 488B5D20                	mov rbx, PARAM(0)
  5123 000036FF BF00000000              	mov rdi, 0
  5124                                  .L:
  5125 00003704 803B01                  	cmp byte [rbx], T_nil
  5126 00003707 7412                    	je .L_end
  5127                                  	assert_pair(rbx)
    53 00003709 803B21              <1>  cmp byte [%1], %2
    54 0000370C 0F855F1C0000        <1>  jne L_error_incorrect_type
  5128 00003712 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
  5129 00003716 48FFC7                  	inc rdi
  5130 00003719 EBE9                    	jmp .L
  5131                                  .L_end:
  5132 0000371B E8CC1A0000              	call make_integer
  5133 00003720 C9                      	leave
  5134 00003721 C21800                  	ret AND_KILL_FRAME(1)
  5135                                  
  5136                                  L_code_ptr_break:
  5137 00003724 48837C241000                    cmp qword [rsp + 8 * 2], 0
  5138 0000372A 0F85381B0000                    jne L_error_arg_count_0
  5139 00003730 CC                              int3
  5140 00003731 48B8-                           mov rax, sob_void
  5140 00003733 [0000000000000000] 
  5141 0000373B C21000                          ret AND_KILL_FRAME(0)        
  5142                                  
  5143                                  L_code_ptr_frame:
  5144 0000373E C8000000                        enter 0, 0
  5145 00003742 48837D1800                      cmp COUNT, 0
  5146 00003747 0F851B1B0000                    jne L_error_arg_count_0
  5147                                  
  5148 0000374D 48BF-                           mov rdi, fmt_frame
  5148 0000374F [EA0B000000000000] 
  5149 00003757 488B7500                        mov rsi, qword [rbp]    ; old rbp
  5150 0000375B 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
  5151 0000375F 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
  5152 00003763 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
  5153 00003767 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
  5154 0000376B 6A00                            push 0
  5155 0000376D 4151                            push r9
  5156 0000376F 4150                            push r8                   ; we'll use it when printing the params
  5157 00003771 B800000000                      mov rax, 0
  5158                                          
  5159                                          ENTER
    44 00003776 C8000000            <1>  enter 0, 0
    45 0000377A 4883E4F0            <1>  and rsp, ~15
  5160 0000377E E8(00000000)                    call printf
  5161                                          LEAVE
    49 00003783 C9                  <1>  leave
  5162                                  
  5163                                  .L:
  5164 00003784 488B0C24                        mov rcx, qword [rsp]
  5165 00003788 4883F900                        cmp rcx, 0
  5166 0000378C 7467                            je .L_out
  5167 0000378E 48BF-                           mov rdi, fmt_frame_param_prefix
  5167 00003790 [230C000000000000] 
  5168 00003798 488B742410                      mov rsi, qword [rsp + 8*2]
  5169 0000379D B800000000                      mov rax, 0
  5170                                          
  5171                                          ENTER
    44 000037A2 C8000000            <1>  enter 0, 0
    45 000037A6 4883E4F0            <1>  and rsp, ~15
  5172 000037AA E8(00000000)                    call printf
  5173                                          LEAVE
    49 000037AF C9                  <1>  leave
  5174                                  
  5175 000037B0 488B0C24                        mov rcx, qword [rsp]
  5176 000037B4 48FFC9                          dec rcx
  5177 000037B7 48890C24                        mov qword [rsp], rcx    ; dec arg count
  5178 000037BB 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
  5179 000037C0 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
  5180 000037C5 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
  5181 000037C9 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
  5182 000037CE 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
  5183 000037D1 E87B000000                      call print_sexpr
  5184 000037D6 48BF-                           mov rdi, fmt_newline
  5184 000037D8 [4F0C000000000000] 
  5185 000037E0 B800000000                      mov rax, 0
  5186                                          ENTER
    44 000037E5 C8000000            <1>  enter 0, 0
    45 000037E9 4883E4F0            <1>  and rsp, ~15
  5187 000037ED E8(00000000)                    call printf
  5188                                          LEAVE
    49 000037F2 C9                  <1>  leave
  5189 000037F3 EB8F                            jmp .L
  5190                                  .L_out:
  5191 000037F5 48BF-                           mov rdi, fmt_frame_continue
  5191 000037F7 [340C000000000000] 
  5192 000037FF B800000000                      mov rax, 0
  5193                                          ENTER
    44 00003804 C8000000            <1>  enter 0, 0
    45 00003808 4883E4F0            <1>  and rsp, ~15
  5194 0000380C E8(00000000)                    call printf
  5195 00003811 E8(00000000)                    call getchar
  5196                                          LEAVE
    49 00003816 C9                  <1>  leave
  5197                                          
  5198 00003817 48B8-                           mov rax, sob_void
  5198 00003819 [0000000000000000] 
  5199 00003821 C9                              leave
  5200 00003822 C21000                          ret AND_KILL_FRAME(0)
  5201                                          
  5202                                  print_sexpr_if_not_void:
  5203 00003825 4881FF[00000000]        	cmp rdi, sob_void
  5204 0000382C 7422                    	je .done
  5205 0000382E E81E000000              	call print_sexpr
  5206 00003833 48BF-                   	mov rdi, fmt_newline
  5206 00003835 [4F0C000000000000] 
  5207 0000383D B800000000              	mov rax, 0
  5208                                  	ENTER
    44 00003842 C8000000            <1>  enter 0, 0
    45 00003846 4883E4F0            <1>  and rsp, ~15
  5209 0000384A E8(00000000)            	call printf
  5210                                  	LEAVE
    49 0000384F C9                  <1>  leave
  5211                                  .done:
  5212 00003850 C3                      	ret
  5213                                  
  5214                                  section .data
  5215                                  fmt_frame:
  5216 00000BEA 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
  5216 00000BF3 207265742061646472-
  5216 00000BFC 203D2025703B206C65-
  5216 00000C05 7820656E76203D2025-
  5216 00000C0E 703B20706172616D20-
  5216 00000C17 636F756E74203D2025-
  5216 00000C20 640A00             
  5217                                  fmt_frame_param_prefix:
  5218 00000C23 3D3D5B706172616D20-             db `==[param %d]==> \0`
  5218 00000C2C 25645D3D3D3E2000   
  5219                                  fmt_frame_continue:
  5220 00000C34 486974203C456E7465-             db `Hit <Enter> to continue...\0`
  5220 00000C3D 723E20746F20636F6E-
  5220 00000C46 74696E75652E2E2E00 
  5221                                  fmt_newline:
  5222 00000C4F 0A00                    	db `\n\0`
  5223                                  fmt_void:
  5224 00000C51 233C766F69643E00        	db `#<void>\0`
  5225                                  fmt_nil:
  5226 00000C59 282900                  	db `()\0`
  5227                                  fmt_boolean_false:
  5228 00000C5C 236600                  	db `#f\0`
  5229                                  fmt_boolean_true:
  5230 00000C5F 237400                  	db `#t\0`
  5231                                  fmt_char_backslash:
  5232 00000C62 235C5C00                	db `#\\\\\0`
  5233                                  fmt_char_dquote:
  5234 00000C66 235C2200                	db `#\\"\0`
  5235                                  fmt_char_simple:
  5236 00000C6A 235C256300              	db `#\\%c\0`
  5237                                  fmt_char_null:
  5238 00000C6F 235C6E756C00            	db `#\\nul\0`
  5239                                  fmt_char_bell:
  5240 00000C75 235C62656C6C00          	db `#\\bell\0`
  5241                                  fmt_char_backspace:
  5242 00000C7C 235C6261636B737061-     	db `#\\backspace\0`
  5242 00000C85 636500             
  5243                                  fmt_char_tab:
  5244 00000C88 235C74616200            	db `#\\tab\0`
  5245                                  fmt_char_newline:
  5246 00000C8E 235C6E65776C696E65-     	db `#\\newline\0`
  5246 00000C97 00                 
  5247                                  fmt_char_formfeed:
  5248 00000C98 235C7061676500          	db `#\\page\0`
  5249                                  fmt_char_return:
  5250 00000C9F 235C72657475726E00      	db `#\\return\0`
  5251                                  fmt_char_escape:
  5252 00000CA8 235C65736300            	db `#\\esc\0`
  5253                                  fmt_char_space:
  5254 00000CAE 235C737061636500        	db `#\\space\0`
  5255                                  fmt_char_hex:
  5256 00000CB6 235C782530325800        	db `#\\x%02X\0`
  5257                                  fmt_gensym:
  5258 00000CBE 47256C6400                      db `G%ld\0`
  5259                                  fmt_closure:
  5260 00000CC3 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
  5260 00000CCC 206174203078253038-
  5260 00000CD5 5820656E763D307825-
  5260 00000CDE 30385820636F64653D-
  5260 00000CE7 3078253038583E00   
  5261                                  fmt_lparen:
  5262 00000CEF 2800                    	db `(\0`
  5263                                  fmt_dotted_pair:
  5264 00000CF1 202E2000                	db ` . \0`
  5265                                  fmt_rparen:
  5266 00000CF5 2900                    	db `)\0`
  5267                                  fmt_space:
  5268 00000CF7 2000                    	db ` \0`
  5269                                  fmt_empty_vector:
  5270 00000CF9 23282900                	db `#()\0`
  5271                                  fmt_vector:
  5272 00000CFD 232800                  	db `#(\0`
  5273                                  fmt_real:
  5274 00000D00 256600                  	db `%f\0`
  5275                                  fmt_fraction:
  5276 00000D03 256C642F256C6400        	db `%ld/%ld\0`
  5277                                  fmt_zero:
  5278 00000D0B 3000                    	db `0\0`
  5279                                  fmt_int:
  5280 00000D0D 256C6400                	db `%ld\0`
  5281                                  fmt_unknown_scheme_object_error:
  5282 00000D11 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
  5282 00000D1A 6F723A20556E6B6E6F-
  5282 00000D23 776E20536368656D65-
  5282 00000D2C 2D6F626A6563742028-
  5282 00000D35 525454492030782530-
  5282 00000D3E 32582920           
  5283 00000D42 617420616464726573-     	db `at address 0x%08X\n\n\0`
  5283 00000D4B 73203078253038580A-
  5283 00000D54 0A00               
  5284                                  fmt_dquote:
  5285 00000D56 2200                    	db `\"\0`
  5286                                  fmt_string_char:
  5287 00000D58 256300                          db `%c\0`
  5288                                  fmt_string_char_7:
  5289 00000D5B 5C6100                          db `\\a\0`
  5290                                  fmt_string_char_8:
  5291 00000D5E 5C6200                          db `\\b\0`
  5292                                  fmt_string_char_9:
  5293 00000D61 5C7400                          db `\\t\0`
  5294                                  fmt_string_char_10:
  5295 00000D64 5C6E00                          db `\\n\0`
  5296                                  fmt_string_char_11:
  5297 00000D67 5C7600                          db `\\v\0`
  5298                                  fmt_string_char_12:
  5299 00000D6A 5C6600                          db `\\f\0`
  5300                                  fmt_string_char_13:
  5301 00000D6D 5C7200                          db `\\r\0`
  5302                                  fmt_string_char_34:
  5303 00000D70 5C2200                          db `\\"\0`
  5304                                  fmt_string_char_92:
  5305 00000D73 5C5C00                          db `\\\\\0`
  5306                                  fmt_string_char_hex:
  5307 00000D76 5C7825583B00                    db `\\x%X;\0`
  5308                                  
  5309                                  section .text
  5310                                  
  5311                                  print_sexpr:
  5312 00003851 C8000000                	enter 0, 0
  5313 00003855 8A07                    	mov al, byte [rdi]
  5314 00003857 3C00                    	cmp al, T_void
  5315 00003859 7465                    	je .Lvoid
  5316 0000385B 3C01                    	cmp al, T_nil
  5317 0000385D 7470                    	je .Lnil
  5318 0000385F 3C09                    	cmp al, T_boolean_false
  5319 00003861 747B                    	je .Lboolean_false
  5320 00003863 3C0A                    	cmp al, T_boolean_true
  5321 00003865 0F8482000000            	je .Lboolean_true
  5322 0000386B 3C02                    	cmp al, T_char
  5323 0000386D 0F8489000000            	je .Lchar
  5324 00003873 3C41                    	cmp al, T_interned_symbol
  5325 00003875 0F84CB010000            	je .Linterned_symbol
  5326 0000387B 3C42                            cmp al, T_uninterned_symbol
  5327 0000387D 0F84EF010000                    je .Luninterned_symbol
  5328 00003883 3C21                    	cmp al, T_pair
  5329 00003885 0F84FA010000            	je .Lpair
  5330 0000388B 3C22                    	cmp al, T_vector
  5331 0000388D 0F84C3020000            	je .Lvector
  5332 00003893 3C04                    	cmp al, T_closure
  5333 00003895 0F8491010000            	je .Lclosure
  5334 0000389B 3C13                    	cmp al, T_real
  5335 0000389D 0F8454030000            	je .Lreal
  5336 000038A3 3C12                    	cmp al, T_fraction
  5337 000038A5 0F847A030000            	je .Lfraction
  5338 000038AB 3C11                    	cmp al, T_integer
  5339 000038AD 0F84B3030000            	je .Linteger
  5340 000038B3 3C03                    	cmp al, T_string
  5341 000038B5 0F84BE030000            	je .Lstring
  5342                                  
  5343 000038BB E9F6040000              	jmp .Lunknown_sexpr_type
  5344                                  
  5345                                  .Lvoid:
  5346 000038C0 48BF-                   	mov rdi, fmt_void
  5346 000038C2 [510C000000000000] 
  5347 000038CA E91A050000              	jmp .Lemit
  5348                                  
  5349                                  .Lnil:
  5350 000038CF 48BF-                   	mov rdi, fmt_nil
  5350 000038D1 [590C000000000000] 
  5351 000038D9 E90B050000              	jmp .Lemit
  5352                                  
  5353                                  .Lboolean_false:
  5354 000038DE 48BF-                   	mov rdi, fmt_boolean_false
  5354 000038E0 [5C0C000000000000] 
  5355 000038E8 E9FC040000              	jmp .Lemit
  5356                                  
  5357                                  .Lboolean_true:
  5358 000038ED 48BF-                   	mov rdi, fmt_boolean_true
  5358 000038EF [5F0C000000000000] 
  5359 000038F7 E9ED040000              	jmp .Lemit
  5360                                  
  5361                                  .Lchar:
  5362 000038FC 8A4701                  	mov al, byte [rdi + 1]
  5363 000038FF 3C20                    	cmp al, ' '
  5364 00003901 7E28                    	jle .Lchar_whitespace
  5365 00003903 3C5C                    	cmp al, 92 		; backslash
  5366 00003905 0F847C000000            	je .Lchar_backslash
  5367 0000390B 3C22                    	cmp al, '"'
  5368 0000390D 0F8483000000            	je .Lchar_dquote
  5369 00003913 4825FF000000            	and rax, 255
  5370 00003919 48BF-                   	mov rdi, fmt_char_simple
  5370 0000391B [6A0C000000000000] 
  5371 00003923 4889C6                  	mov rsi, rax
  5372 00003926 E9BE040000              	jmp .Lemit
  5373                                  
  5374                                  .Lchar_whitespace:
  5375 0000392B 3C00                    	cmp al, 0
  5376 0000392D 7476                    	je .Lchar_null
  5377 0000392F 3C07                    	cmp al, 7
  5378 00003931 0F847D000000            	je .Lchar_bell
  5379 00003937 3C08                    	cmp al, 8
  5380 00003939 0F8484000000            	je .Lchar_backspace
  5381 0000393F 3C09                    	cmp al, 9
  5382 00003941 0F848B000000            	je .Lchar_tab
  5383 00003947 3C0A                    	cmp al, 10
  5384 00003949 0F8492000000            	je .Lchar_newline
  5385 0000394F 3C0C                    	cmp al, 12
  5386 00003951 0F8499000000            	je .Lchar_formfeed
  5387 00003957 3C0D                    	cmp al, 13
  5388 00003959 0F84A0000000            	je .Lchar_return
  5389 0000395F 3C1B                    	cmp al, 27
  5390 00003961 0F84A7000000            	je .Lchar_escape
  5391 00003967 4825FF000000            	and rax, 255
  5392 0000396D 3C20                    	cmp al, ' '
  5393 0000396F 0F84A8000000            	je .Lchar_space
  5394 00003975 48BF-                   	mov rdi, fmt_char_hex
  5394 00003977 [B60C000000000000] 
  5395 0000397F 4889C6                  	mov rsi, rax
  5396 00003982 E962040000              	jmp .Lemit	
  5397                                  
  5398                                  .Lchar_backslash:
  5399 00003987 48BF-                   	mov rdi, fmt_char_backslash
  5399 00003989 [620C000000000000] 
  5400 00003991 E953040000              	jmp .Lemit
  5401                                  
  5402                                  .Lchar_dquote:
  5403 00003996 48BF-                   	mov rdi, fmt_char_dquote
  5403 00003998 [660C000000000000] 
  5404 000039A0 E944040000              	jmp .Lemit
  5405                                  
  5406                                  .Lchar_null:
  5407 000039A5 48BF-                   	mov rdi, fmt_char_null
  5407 000039A7 [6F0C000000000000] 
  5408 000039AF E935040000              	jmp .Lemit
  5409                                  
  5410                                  .Lchar_bell:
  5411 000039B4 48BF-                   	mov rdi, fmt_char_bell
  5411 000039B6 [750C000000000000] 
  5412 000039BE E926040000              	jmp .Lemit
  5413                                  
  5414                                  .Lchar_backspace:
  5415 000039C3 48BF-                   	mov rdi, fmt_char_backspace
  5415 000039C5 [7C0C000000000000] 
  5416 000039CD E917040000              	jmp .Lemit
  5417                                  
  5418                                  .Lchar_tab:
  5419 000039D2 48BF-                   	mov rdi, fmt_char_tab
  5419 000039D4 [880C000000000000] 
  5420 000039DC E908040000              	jmp .Lemit
  5421                                  
  5422                                  .Lchar_newline:
  5423 000039E1 48BF-                   	mov rdi, fmt_char_newline
  5423 000039E3 [8E0C000000000000] 
  5424 000039EB E9F9030000              	jmp .Lemit
  5425                                  
  5426                                  .Lchar_formfeed:
  5427 000039F0 48BF-                   	mov rdi, fmt_char_formfeed
  5427 000039F2 [980C000000000000] 
  5428 000039FA E9EA030000              	jmp .Lemit
  5429                                  
  5430                                  .Lchar_return:
  5431 000039FF 48BF-                   	mov rdi, fmt_char_return
  5431 00003A01 [9F0C000000000000] 
  5432 00003A09 E9DB030000              	jmp .Lemit
  5433                                  
  5434                                  .Lchar_escape:
  5435 00003A0E 48BF-                   	mov rdi, fmt_char_escape
  5435 00003A10 [A80C000000000000] 
  5436 00003A18 E9CC030000              	jmp .Lemit
  5437                                  
  5438                                  .Lchar_space:
  5439 00003A1D 48BF-                   	mov rdi, fmt_char_space
  5439 00003A1F [AE0C000000000000] 
  5440 00003A27 E9BD030000              	jmp .Lemit
  5441                                  
  5442                                  .Lclosure:
  5443 00003A2C 4889FE                  	mov rsi, qword rdi
  5444 00003A2F 48BF-                   	mov rdi, fmt_closure
  5444 00003A31 [C30C000000000000] 
  5445 00003A39 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
  5446 00003A3D 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
  5447 00003A41 E9A3030000              	jmp .Lemit
  5448                                  
  5449                                  .Linterned_symbol:
  5450 00003A46 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
  5451 00003A4A BE01000000              	mov rsi, 1		 ; size = 1 byte
  5452 00003A4F 488B5701                	mov rdx, qword [rdi + 1] ; length
  5453 00003A53 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
  5454 00003A57 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
  5455                                  	ENTER
    44 00003A5F C8000000            <1>  enter 0, 0
    45 00003A63 4883E4F0            <1>  and rsp, ~15
  5456 00003A67 E8(00000000)            	call fwrite
  5457                                  	LEAVE
    49 00003A6C C9                  <1>  leave
  5458 00003A6D E98C030000              	jmp .Lend
  5459                                  
  5460                                  .Luninterned_symbol:
  5461 00003A72 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
  5462 00003A76 48BF-                           mov rdi, fmt_gensym
  5462 00003A78 [BE0C000000000000] 
  5463 00003A80 E964030000                      jmp .Lemit
  5464                                  	
  5465                                  .Lpair:
  5466 00003A85 57                      	push rdi
  5467 00003A86 48BF-                   	mov rdi, fmt_lparen
  5467 00003A88 [EF0C000000000000] 
  5468 00003A90 B800000000              	mov rax, 0
  5469                                          ENTER
    44 00003A95 C8000000            <1>  enter 0, 0
    45 00003A99 4883E4F0            <1>  and rsp, ~15
  5470 00003A9D E8(00000000)            	call printf
  5471                                          LEAVE
    49 00003AA2 C9                  <1>  leave
  5472 00003AA3 488B3C24                	mov rdi, qword [rsp] 	; pair
  5473 00003AA7 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  5474 00003AAB E8A1FDFFFF              	call print_sexpr
  5475 00003AB0 5F                      	pop rdi 		; pair
  5476 00003AB1 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  5477                                  .Lcdr:
  5478 00003AB5 8A07                    	mov al, byte [rdi]
  5479 00003AB7 3C01                    	cmp al, T_nil
  5480 00003AB9 7447                    	je .Lcdr_nil
  5481 00003ABB 3C21                    	cmp al, T_pair
  5482 00003ABD 7462                    	je .Lcdr_pair
  5483 00003ABF 57                      	push rdi
  5484 00003AC0 48BF-                   	mov rdi, fmt_dotted_pair
  5484 00003AC2 [F10C000000000000] 
  5485 00003ACA B800000000              	mov rax, 0
  5486                                          ENTER
    44 00003ACF C8000000            <1>  enter 0, 0
    45 00003AD3 4883E4F0            <1>  and rsp, ~15
  5487 00003AD7 E8(00000000)            	call printf
  5488                                          LEAVE
    49 00003ADC C9                  <1>  leave
  5489 00003ADD 5F                      	pop rdi
  5490 00003ADE E86EFDFFFF              	call print_sexpr
  5491 00003AE3 48BF-                   	mov rdi, fmt_rparen
  5491 00003AE5 [F50C000000000000] 
  5492 00003AED B800000000              	mov rax, 0
  5493                                          ENTER
    44 00003AF2 C8000000            <1>  enter 0, 0
    45 00003AF6 4883E4F0            <1>  and rsp, ~15
  5494 00003AFA E8(00000000)            	call printf
  5495                                          LEAVE
    49 00003AFF C9                  <1>  leave
  5496 00003B00 C9                      	leave
  5497 00003B01 C3                      	ret
  5498                                  
  5499                                  .Lcdr_nil:
  5500 00003B02 48BF-                   	mov rdi, fmt_rparen
  5500 00003B04 [F50C000000000000] 
  5501 00003B0C B800000000              	mov rax, 0
  5502                                          ENTER
    44 00003B11 C8000000            <1>  enter 0, 0
    45 00003B15 4883E4F0            <1>  and rsp, ~15
  5503 00003B19 E8(00000000)            	call printf
  5504                                          LEAVE
    49 00003B1E C9                  <1>  leave
  5505 00003B1F C9                      	leave
  5506 00003B20 C3                      	ret
  5507                                  
  5508                                  .Lcdr_pair:
  5509 00003B21 57                      	push rdi
  5510 00003B22 48BF-                   	mov rdi, fmt_space
  5510 00003B24 [F70C000000000000] 
  5511 00003B2C B800000000              	mov rax, 0
  5512                                          ENTER
    44 00003B31 C8000000            <1>  enter 0, 0
    45 00003B35 4883E4F0            <1>  and rsp, ~15
  5513 00003B39 E8(00000000)            	call printf
  5514                                          LEAVE
    49 00003B3E C9                  <1>  leave
  5515 00003B3F 488B3C24                	mov rdi, qword [rsp]
  5516 00003B43 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  5517 00003B47 E805FDFFFF              	call print_sexpr
  5518 00003B4C 5F                      	pop rdi
  5519 00003B4D 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  5520 00003B51 E95FFFFFFF              	jmp .Lcdr
  5521                                  
  5522                                  .Lvector:
  5523 00003B56 488B4701                	mov rax, qword [rdi + 1] ; length
  5524 00003B5A 4883F800                	cmp rax, 0
  5525 00003B5E 0F8484000000            	je .Lvector_empty
  5526 00003B64 57                      	push rdi
  5527 00003B65 48BF-                   	mov rdi, fmt_vector
  5527 00003B67 [FD0C000000000000] 
  5528 00003B6F B800000000              	mov rax, 0
  5529                                          ENTER
    44 00003B74 C8000000            <1>  enter 0, 0
    45 00003B78 4883E4F0            <1>  and rsp, ~15
  5530 00003B7C E8(00000000)            	call printf
  5531                                          LEAVE
    49 00003B81 C9                  <1>  leave
  5532 00003B82 488B3C24                	mov rdi, qword [rsp]
  5533 00003B86 FF7701                  	push qword [rdi + 1]
  5534 00003B89 6A01                    	push 1
  5535 00003B8B 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  5536 00003B8F E8BDFCFFFF              	call print_sexpr
  5537                                  .Lvector_loop:
  5538                                  	; [rsp] index
  5539                                  	; [rsp + 8*1] limit
  5540                                  	; [rsp + 8*2] vector
  5541 00003B94 488B0424                	mov rax, qword [rsp]
  5542 00003B98 483B442408              	cmp rax, qword [rsp + 8*1]
  5543 00003B9D 7436                    	je .Lvector_end
  5544 00003B9F 48BF-                   	mov rdi, fmt_space
  5544 00003BA1 [F70C000000000000] 
  5545 00003BA9 B800000000              	mov rax, 0
  5546                                          ENTER
    44 00003BAE C8000000            <1>  enter 0, 0
    45 00003BB2 4883E4F0            <1>  and rsp, ~15
  5547 00003BB6 E8(00000000)            	call printf
  5548                                          LEAVE
    49 00003BBB C9                  <1>  leave
  5549 00003BBC 488B0424                	mov rax, qword [rsp]
  5550 00003BC0 488B5C2410              	mov rbx, qword [rsp + 8*2]
  5551 00003BC5 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  5552 00003BCA E882FCFFFF              	call print_sexpr
  5553 00003BCF 48FF0424                	inc qword [rsp]
  5554 00003BD3 EBBF                    	jmp .Lvector_loop
  5555                                  
  5556                                  .Lvector_end:
  5557 00003BD5 4883C418                	add rsp, 8*3
  5558 00003BD9 48BF-                   	mov rdi, fmt_rparen
  5558 00003BDB [F50C000000000000] 
  5559 00003BE3 E901020000              	jmp .Lemit	
  5560                                  
  5561                                  .Lvector_empty:
  5562 00003BE8 48BF-                   	mov rdi, fmt_empty_vector
  5562 00003BEA [F90C000000000000] 
  5563 00003BF2 E9F2010000              	jmp .Lemit
  5564                                  
  5565                                  .Lreal:
  5566 00003BF7 FF7701                  	push qword [rdi + 1]
  5567 00003BFA F20F100424              	movsd xmm0, qword [rsp]
  5568 00003BFF 4883C408                	add rsp, 8*1
  5569 00003C03 48BF-                   	mov rdi, fmt_real
  5569 00003C05 [000D000000000000] 
  5570 00003C0D B801000000              	mov rax, 1
  5571                                  	ENTER
    44 00003C12 C8000000            <1>  enter 0, 0
    45 00003C16 4883E4F0            <1>  and rsp, ~15
  5572 00003C1A E8(00000000)            	call printf
  5573                                  	LEAVE
    49 00003C1F C9                  <1>  leave
  5574 00003C20 E9D9010000              	jmp .Lend
  5575                                  
  5576                                  .Lfraction:
  5577 00003C25 488B7701                	mov rsi, qword [rdi + 1]
  5578 00003C29 488B5709                	mov rdx, qword [rdi + 1 + 8]
  5579 00003C2D 4883FE00                	cmp rsi, 0
  5580 00003C31 7415                    	je .Lrat_zero
  5581 00003C33 4883FA01                	cmp rdx, 1
  5582 00003C37 741E                    	je .Lrat_int
  5583 00003C39 48BF-                   	mov rdi, fmt_fraction
  5583 00003C3B [030D000000000000] 
  5584 00003C43 E9A1010000              	jmp .Lemit
  5585                                  
  5586                                  .Lrat_zero:
  5587 00003C48 48BF-                   	mov rdi, fmt_zero
  5587 00003C4A [0B0D000000000000] 
  5588 00003C52 E992010000              	jmp .Lemit
  5589                                  
  5590                                  .Lrat_int:
  5591 00003C57 48BF-                   	mov rdi, fmt_int
  5591 00003C59 [0D0D000000000000] 
  5592 00003C61 E983010000              	jmp .Lemit
  5593                                  
  5594                                  .Linteger:
  5595 00003C66 488B7701                	mov rsi, qword [rdi + 1]
  5596 00003C6A 48BF-                   	mov rdi, fmt_int
  5596 00003C6C [0D0D000000000000] 
  5597 00003C74 E970010000              	jmp .Lemit
  5598                                  
  5599                                  .Lstring:
  5600 00003C79 488D4709                	lea rax, [rdi + 1 + 8]
  5601 00003C7D 50                      	push rax
  5602 00003C7E FF7701                  	push qword [rdi + 1]
  5603 00003C81 48BF-                   	mov rdi, fmt_dquote
  5603 00003C83 [560D000000000000] 
  5604 00003C8B B800000000              	mov rax, 0
  5605                                  	ENTER
    44 00003C90 C8000000            <1>  enter 0, 0
    45 00003C94 4883E4F0            <1>  and rsp, ~15
  5606 00003C98 E8(00000000)            	call printf
  5607                                  	LEAVE
    49 00003C9D C9                  <1>  leave
  5608                                  .Lstring_loop:
  5609                                  	; qword [rsp]: limit
  5610                                  	; qword [rsp + 8*1]: char *
  5611 00003C9E 48833C2400              	cmp qword [rsp], 0
  5612 00003CA3 0F84FD000000            	je .Lstring_end
  5613 00003CA9 488B442408              	mov rax, qword [rsp + 8*1]
  5614 00003CAE 8A00                    	mov al, byte [rax]
  5615 00003CB0 4825FF000000            	and rax, 255
  5616 00003CB6 3C07                    	cmp al, 7
  5617 00003CB8 7468                            je .Lstring_char_7
  5618 00003CBA 3C08                            cmp al, 8
  5619 00003CBC 7470                            je .Lstring_char_8
  5620 00003CBE 3C09                            cmp al, 9
  5621 00003CC0 7478                            je .Lstring_char_9
  5622 00003CC2 3C0A                            cmp al, 10
  5623 00003CC4 0F847C000000                    je .Lstring_char_10
  5624 00003CCA 3C0B                            cmp al, 11
  5625 00003CCC 0F8480000000                    je .Lstring_char_11
  5626 00003CD2 3C0C                            cmp al, 12
  5627 00003CD4 0F8484000000                    je .Lstring_char_12
  5628 00003CDA 3C0D                            cmp al, 13
  5629 00003CDC 0F8488000000                    je .Lstring_char_13
  5630 00003CE2 3C22                            cmp al, 34
  5631 00003CE4 0F848C000000                    je .Lstring_char_34
  5632 00003CEA 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  5634 00003CEC 3C20                            cmp al, ' '
  5635 00003CEE 0F8CA0000000                    jl .Lstring_char_hex
  5636 00003CF4 48BF-                           mov rdi, fmt_string_char
  5636 00003CF6 [580D000000000000] 
  5637 00003CFE 4889C6                          mov rsi, rax
  5638                                  .Lstring_char_emit:
  5639 00003D01 B800000000                      mov rax, 0
  5640                                          ENTER
    44 00003D06 C8000000            <1>  enter 0, 0
    45 00003D0A 4883E4F0            <1>  and rsp, ~15
  5641 00003D0E E8(00000000)                    call printf
  5642                                          LEAVE
    49 00003D13 C9                  <1>  leave
  5643 00003D14 48FF0C24                        dec qword [rsp]
  5644 00003D18 48FF442408                      inc qword [rsp + 8*1]
  5645 00003D1D E97CFFFFFF                      jmp .Lstring_loop
  5646                                  
  5647                                  .Lstring_char_7:
  5648 00003D22 48BF-                           mov rdi, fmt_string_char_7
  5648 00003D24 [5B0D000000000000] 
  5649 00003D2C EBD3                            jmp .Lstring_char_emit
  5650                                  
  5651                                  .Lstring_char_8:
  5652 00003D2E 48BF-                           mov rdi, fmt_string_char_8
  5652 00003D30 [5E0D000000000000] 
  5653 00003D38 EBC7                            jmp .Lstring_char_emit
  5654                                          
  5655                                  .Lstring_char_9:
  5656 00003D3A 48BF-                           mov rdi, fmt_string_char_9
  5656 00003D3C [610D000000000000] 
  5657 00003D44 EBBB                            jmp .Lstring_char_emit
  5658                                  
  5659                                  .Lstring_char_10:
  5660 00003D46 48BF-                           mov rdi, fmt_string_char_10
  5660 00003D48 [640D000000000000] 
  5661 00003D50 EBAF                            jmp .Lstring_char_emit
  5662                                  
  5663                                  .Lstring_char_11:
  5664 00003D52 48BF-                           mov rdi, fmt_string_char_11
  5664 00003D54 [670D000000000000] 
  5665 00003D5C EBA3                            jmp .Lstring_char_emit
  5666                                  
  5667                                  .Lstring_char_12:
  5668 00003D5E 48BF-                           mov rdi, fmt_string_char_12
  5668 00003D60 [6A0D000000000000] 
  5669 00003D68 EB97                            jmp .Lstring_char_emit
  5670                                  
  5671                                  .Lstring_char_13:
  5672 00003D6A 48BF-                           mov rdi, fmt_string_char_13
  5672 00003D6C [6D0D000000000000] 
  5673 00003D74 EB8B                            jmp .Lstring_char_emit
  5674                                  
  5675                                  .Lstring_char_34:
  5676 00003D76 48BF-                           mov rdi, fmt_string_char_34
  5676 00003D78 [700D000000000000] 
  5677 00003D80 E97CFFFFFF                      jmp .Lstring_char_emit
  5678                                  
  5679                                  .Lstring_char_92:
  5680 00003D85 48BF-                           mov rdi, fmt_string_char_92
  5680 00003D87 [730D000000000000] 
  5681 00003D8F E96DFFFFFF                      jmp .Lstring_char_emit
  5682                                  
  5683                                  .Lstring_char_hex:
  5684 00003D94 48BF-                           mov rdi, fmt_string_char_hex
  5684 00003D96 [760D000000000000] 
  5685 00003D9E 4889C6                          mov rsi, rax
  5686 00003DA1 E95BFFFFFF                      jmp .Lstring_char_emit        
  5687                                  
  5688                                  .Lstring_end:
  5689 00003DA6 4883C410                	add rsp, 8 * 2
  5690 00003DAA 48BF-                   	mov rdi, fmt_dquote
  5690 00003DAC [560D000000000000] 
  5691 00003DB4 EB33                    	jmp .Lemit
  5692                                  
  5693                                  .Lunknown_sexpr_type:
  5694 00003DB6 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
  5694 00003DB8 [110D000000000000] 
  5695 00003DC0 4825FF000000            	and rax, 255
  5696 00003DC6 4889C2                  	mov rdx, rax
  5697 00003DC9 4889F9                  	mov rcx, rdi
  5698 00003DCC 488B3C25[00000000]      	mov rdi, qword [stderr]
  5699 00003DD4 B800000000              	mov rax, 0
  5700                                          ENTER
    44 00003DD9 C8000000            <1>  enter 0, 0
    45 00003DDD 4883E4F0            <1>  and rsp, ~15
  5701 00003DE1 E8(00000000)            	call fprintf
  5702                                          LEAVE
    49 00003DE6 C9                  <1>  leave
  5703 00003DE7 C9                              leave
  5704 00003DE8 C3                              ret
  5705                                  
  5706                                  .Lemit:
  5707 00003DE9 B800000000              	mov rax, 0
  5708                                          ENTER
    44 00003DEE C8000000            <1>  enter 0, 0
    45 00003DF2 4883E4F0            <1>  and rsp, ~15
  5709 00003DF6 E8(00000000)            	call printf
  5710                                          LEAVE
    49 00003DFB C9                  <1>  leave
  5711 00003DFC EB00                    	jmp .Lend
  5712                                  
  5713                                  .Lend:
  5714                                  	LEAVE
    49 00003DFE C9                  <1>  leave
  5715 00003DFF C3                      	ret
  5716                                  
  5717                                  ;;; rdi: address of free variable
  5718                                  ;;; rsi: address of code-pointer
  5719                                  bind_primitive:
  5720 00003E00 C8000000                        enter 0, 0
  5721 00003E04 57                              push rdi
  5722 00003E05 BF11000000                      mov rdi, (1 + 8 + 8)
  5723 00003E0A E8C1F7FFFF                      call malloc
  5724 00003E0F 5F                              pop rdi
  5725 00003E10 C60004                          mov byte [rax], T_closure
  5726 00003E13 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  5727 00003E1B 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  5728 00003E1F 488907                          mov qword [rdi], rax
  5729 00003E22 48B8-                           mov rax, sob_void
  5729 00003E24 [0000000000000000] 
  5730 00003E2C C9                              leave
  5731 00003E2D C3                              ret
  5732                                  
  5733                                  L_code_ptr_ash:
  5734 00003E2E C8000000                        enter 0, 0
  5735 00003E32 48837D1802                      cmp COUNT, 2
  5736 00003E37 0F8595140000                    jne L_error_arg_count_2
  5737 00003E3D 488B7D20                        mov rdi, PARAM(0)
  5738                                          assert_integer(rdi)
    53 00003E41 803F11              <1>  cmp byte [%1], %2
    54 00003E44 0F8527150000        <1>  jne L_error_incorrect_type
  5739 00003E4A 488B4D28                        mov rcx, PARAM(1)
  5740                                          assert_integer(rcx)
    53 00003E4E 803911              <1>  cmp byte [%1], %2
    54 00003E51 0F851A150000        <1>  jne L_error_incorrect_type
  5741 00003E57 488B7F01                        mov rdi, qword [rdi + 1]
  5742 00003E5B 488B4901                        mov rcx, qword [rcx + 1]
  5743 00003E5F 4883F900                        cmp rcx, 0
  5744 00003E63 7C0F                            jl .L_negative
  5745                                  .L_loop_positive:
  5746 00003E65 4883F900                        cmp rcx, 0
  5747 00003E69 741B                            je .L_exit
  5748 00003E6B 48D3E7                          sal rdi, cl
  5749 00003E6E 48C1E908                        shr rcx, 8
  5750 00003E72 EBF1                            jmp .L_loop_positive
  5751                                  .L_negative:
  5752 00003E74 48F7D9                          neg rcx
  5753                                  .L_loop_negative:
  5754 00003E77 4883F900                        cmp rcx, 0
  5755 00003E7B 7409                            je .L_exit
  5756 00003E7D 48D3FF                          sar rdi, cl
  5757 00003E80 48C1E908                        shr rcx, 8
  5758 00003E84 EBF1                            jmp .L_loop_negative
  5759                                  .L_exit:
  5760 00003E86 E861130000                      call make_integer
  5761 00003E8B C9                              leave
  5762 00003E8C C22000                          ret AND_KILL_FRAME(2)
  5763                                  
  5764                                  L_code_ptr_logand:
  5765 00003E8F C8000000                        enter 0, 0
  5766 00003E93 48837D1802                      cmp COUNT, 2
  5767 00003E98 0F8534140000                    jne L_error_arg_count_2
  5768 00003E9E 4C8B4520                        mov r8, PARAM(0)
  5769                                          assert_integer(r8)
    53 00003EA2 41803811            <1>  cmp byte [%1], %2
    54 00003EA6 0F85C5140000        <1>  jne L_error_incorrect_type
  5770 00003EAC 4C8B4D28                        mov r9, PARAM(1)
  5771                                          assert_integer(r9)
    53 00003EB0 41803911            <1>  cmp byte [%1], %2
    54 00003EB4 0F85B7140000        <1>  jne L_error_incorrect_type
  5772 00003EBA 498B7801                        mov rdi, qword [r8 + 1]
  5773 00003EBE 49237901                        and rdi, qword [r9 + 1]
  5774 00003EC2 E825130000                      call make_integer
  5775 00003EC7 C9                              leave
  5776 00003EC8 C22000                          ret AND_KILL_FRAME(2)
  5777                                  
  5778                                  L_code_ptr_logor:
  5779 00003ECB C8000000                        enter 0, 0
  5780 00003ECF 48837D1802                      cmp COUNT, 2
  5781 00003ED4 0F85F8130000                    jne L_error_arg_count_2
  5782 00003EDA 4C8B4520                        mov r8, PARAM(0)
  5783                                          assert_integer(r8)
    53 00003EDE 41803811            <1>  cmp byte [%1], %2
    54 00003EE2 0F8589140000        <1>  jne L_error_incorrect_type
  5784 00003EE8 4C8B4D28                        mov r9, PARAM(1)
  5785                                          assert_integer(r9)
    53 00003EEC 41803911            <1>  cmp byte [%1], %2
    54 00003EF0 0F857B140000        <1>  jne L_error_incorrect_type
  5786 00003EF6 498B7801                        mov rdi, qword [r8 + 1]
  5787 00003EFA 490B7901                        or rdi, qword [r9 + 1]
  5788 00003EFE E8E9120000                      call make_integer
  5789 00003F03 C9                              leave
  5790 00003F04 C22000                          ret AND_KILL_FRAME(2)
  5791                                  
  5792                                  L_code_ptr_logxor:
  5793 00003F07 C8000000                        enter 0, 0
  5794 00003F0B 48837D1802                      cmp COUNT, 2
  5795 00003F10 0F85BC130000                    jne L_error_arg_count_2
  5796 00003F16 4C8B4520                        mov r8, PARAM(0)
  5797                                          assert_integer(r8)
    53 00003F1A 41803811            <1>  cmp byte [%1], %2
    54 00003F1E 0F854D140000        <1>  jne L_error_incorrect_type
  5798 00003F24 4C8B4D28                        mov r9, PARAM(1)
  5799                                          assert_integer(r9)
    53 00003F28 41803911            <1>  cmp byte [%1], %2
    54 00003F2C 0F853F140000        <1>  jne L_error_incorrect_type
  5800 00003F32 498B7801                        mov rdi, qword [r8 + 1]
  5801 00003F36 49337901                        xor rdi, qword [r9 + 1]
  5802 00003F3A E8AD120000                      call make_integer
  5803                                          LEAVE
    49 00003F3F C9                  <1>  leave
  5804 00003F40 C22000                          ret AND_KILL_FRAME(2)
  5805                                  
  5806                                  L_code_ptr_lognot:
  5807 00003F43 C8000000                        enter 0, 0
  5808 00003F47 48837D1801                      cmp COUNT, 1
  5809 00003F4C 0F854B130000                    jne L_error_arg_count_1
  5810 00003F52 4C8B4520                        mov r8, PARAM(0)
  5811                                          assert_integer(r8)
    53 00003F56 41803811            <1>  cmp byte [%1], %2
    54 00003F5A 0F8511140000        <1>  jne L_error_incorrect_type
  5812 00003F60 498B7801                        mov rdi, qword [r8 + 1]
  5813 00003F64 48F7D7                          not rdi
  5814 00003F67 E880120000                      call make_integer
  5815 00003F6C C9                              leave
  5816 00003F6D C21800                          ret AND_KILL_FRAME(1)
  5817                                  
  5818                                  L_code_ptr_bin_apply:
  5819                                          ;assuming we have 2 params - f and list to apply f on it
  5820 00003F70 48837D1802                      cmp COUNT, 2
  5821 00003F75 0F8C57130000                    jl L_error_arg_count_2    ; f and list
  5822 00003F7B 4C8B4500                        mov r8, qword[rbp]      ;backup rbp  
  5823 00003F7F 4C8B4D08                        mov r9, qword[rbp +8]   ;backup ret addr
  5824 00003F83 4C8D7D28                        lea r15, PARAM(1)         ;get list
  5825 00003F87 488B4520                        mov rax, PARAM(0)         ;get f
  5826                                  
  5827                                          assert_closure(rax)        ; Count elements in the list
    53 00003F8B 803804              <1>  cmp byte [%1], %2
    54 00003F8E 0F85DD130000        <1>  jne L_error_incorrect_type
  5828 00003F94 41BA00000000                    mov r10, 0                ;counter
  5829 00003F9A 4D89FB                          mov r11, r15 ; Is the list pointer
  5830                                         
  5831                                          
  5832                                  .count_loop:
  5833 00003F9D 49813B[01000000]                cmp qword[r11], sob_nil ;checking if we done, it's a proper list
  5834 00003FA4 7409                            je .write_over_frame
  5835 00003FA6 49FFC2                          inc r10                   ; Increment list element count
  5836 00003FA9 4D8B5B09                        mov r11, SOB_PAIR_CDR(r11) ;getting the next element in s if error might be here
  5837 00003FAD EBEE                            jmp .count_loop
  5838                                  
  5839                                          ;r10 list length
  5840                                  
  5841                                  .write_over_frame:
  5842 00003FAF 4D89D3                          mov r11, r10 ;
  5843 00003FB2 4983EB02                        sub r11, 2 ;how much to increase rbp for list argumetns
  5844 00003FB6 49C1E303                        shl r11, 3 ;multiply by 8
  5845 00003FBA 4C29DD                          sub rbp, r11 ;making space for list arguemtns
  5846                                  
  5847                                  .mov_env_rbp:
  5848 00003FBD 4C894500                        mov qword[rbp], r8 ;restore old rbp ;now rbp points to the right position
  5849 00003FC1 4C894D08                        mov qword[rbp + 8], r9 ;restore old ret addr
  5850 00003FC5 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  5851 00003FC9 48895D10                        mov qword[rbp + 8*2], rbx ;save the env in the new frame
  5852 00003FCD 4C895518                        mov qword[rbp+ 8*3], r10 ;save the number of params in the new frame
  5853 00003FD1 41BB00000000                    mov r11, 0;
  5854                                          ;r10 is the originl list length
  5855                                  .copy_list_arguments:
  5856 00003FD7 4D39D3                          cmp r11, r10 ;reached to the end of the list
  5857 00003FDA 7412                            je .done_copy_list_arguments;
  5858 00003FDC 4D8B6701                        mov r12, SOB_PAIR_CAR(r15) ;get the car of the list
  5859 00003FE0 4E8964DD20                      mov qword PARAM(r11), r12 ;copy the car to the new frame
  5860 00003FE5 4D8B7F09                        mov r15, SOB_PAIR_CDR(r15) ;get the cdr of the list
  5861 00003FE9 49FFC3                          inc r11
  5862 00003FEC EBE9                            jmp .copy_list_arguments
  5863                                          ;;;rsp now points to the old ret?
  5864                                          ;;;rbp now points to the older rbp?
  5865                                  .done_copy_list_arguments:
  5866 00003FEE 488D6508                        lea rsp, [rbp + 8*1]
  5867 00003FF2 FF6009                          jmp SOB_CLOSURE_CODE(rax) ;jump to the code of the closure
  5868                                  
  5869                                  
  5870                                  L_code_ptr_is_null:
  5871 00003FF5 C8000000                        enter 0, 0
  5872 00003FF9 48837D1801                      cmp COUNT, 1
  5873 00003FFE 0F8599120000                    jne L_error_arg_count_1
  5874 00004004 488B4520                        mov rax, PARAM(0)
  5875 00004008 803801                          cmp byte [rax], T_nil
  5876 0000400B 750C                            jne .L_false
  5877 0000400D 48B8-                           mov rax, sob_boolean_true
  5877 0000400F [0300000000000000] 
  5878 00004017 EB0A                            jmp .L_end
  5879                                  .L_false:
  5880 00004019 48B8-                           mov rax, sob_boolean_false
  5880 0000401B [0200000000000000] 
  5881                                  .L_end:
  5882 00004023 C9                              leave
  5883 00004024 C21800                          ret AND_KILL_FRAME(1)
  5884                                  
  5885                                  L_code_ptr_is_pair:
  5886 00004027 C8000000                        enter 0, 0
  5887 0000402B 48837D1801                      cmp COUNT, 1
  5888 00004030 0F8567120000                    jne L_error_arg_count_1
  5889 00004036 488B4520                        mov rax, PARAM(0)
  5890 0000403A 803821                          cmp byte [rax], T_pair
  5891 0000403D 750C                            jne .L_false
  5892 0000403F 48B8-                           mov rax, sob_boolean_true
  5892 00004041 [0300000000000000] 
  5893 00004049 EB0A                            jmp .L_end
  5894                                  .L_false:
  5895 0000404B 48B8-                           mov rax, sob_boolean_false
  5895 0000404D [0200000000000000] 
  5896                                  .L_end:
  5897 00004055 C9                              leave
  5898 00004056 C21800                          ret AND_KILL_FRAME(1)
  5899                                          
  5900                                  L_code_ptr_is_void:
  5901 00004059 C8000000                        enter 0, 0
  5902 0000405D 48837D1801                      cmp COUNT, 1
  5903 00004062 0F8535120000                    jne L_error_arg_count_1
  5904 00004068 488B4520                        mov rax, PARAM(0)
  5905 0000406C 803800                          cmp byte [rax], T_void
  5906 0000406F 750C                            jne .L_false
  5907 00004071 48B8-                           mov rax, sob_boolean_true
  5907 00004073 [0300000000000000] 
  5908 0000407B EB0A                            jmp .L_end
  5909                                  .L_false:
  5910 0000407D 48B8-                           mov rax, sob_boolean_false
  5910 0000407F [0200000000000000] 
  5911                                  .L_end:
  5912 00004087 C9                              leave
  5913 00004088 C21800                          ret AND_KILL_FRAME(1)
  5914                                  
  5915                                  L_code_ptr_is_char:
  5916 0000408B C8000000                        enter 0, 0
  5917 0000408F 48837D1801                      cmp COUNT, 1
  5918 00004094 0F8503120000                    jne L_error_arg_count_1
  5919 0000409A 488B4520                        mov rax, PARAM(0)
  5920 0000409E 803802                          cmp byte [rax], T_char
  5921 000040A1 750C                            jne .L_false
  5922 000040A3 48B8-                           mov rax, sob_boolean_true
  5922 000040A5 [0300000000000000] 
  5923 000040AD EB0A                            jmp .L_end
  5924                                  .L_false:
  5925 000040AF 48B8-                           mov rax, sob_boolean_false
  5925 000040B1 [0200000000000000] 
  5926                                  .L_end:
  5927 000040B9 C9                              leave
  5928 000040BA C21800                          ret AND_KILL_FRAME(1)
  5929                                  
  5930                                  L_code_ptr_is_string:
  5931 000040BD C8000000                        enter 0, 0
  5932 000040C1 48837D1801                      cmp COUNT, 1
  5933 000040C6 0F85D1110000                    jne L_error_arg_count_1
  5934 000040CC 488B4520                        mov rax, PARAM(0)
  5935 000040D0 803803                          cmp byte [rax], T_string
  5936 000040D3 750C                            jne .L_false
  5937 000040D5 48B8-                           mov rax, sob_boolean_true
  5937 000040D7 [0300000000000000] 
  5938 000040DF EB0A                            jmp .L_end
  5939                                  .L_false:
  5940 000040E1 48B8-                           mov rax, sob_boolean_false
  5940 000040E3 [0200000000000000] 
  5941                                  .L_end:
  5942 000040EB C9                              leave
  5943 000040EC C21800                          ret AND_KILL_FRAME(1)
  5944                                  
  5945                                  L_code_ptr_is_symbol:
  5946 000040EF C8000000                        enter 0, 0
  5947 000040F3 48837D1801                      cmp COUNT, 1
  5948 000040F8 0F859F110000                    jne L_error_arg_count_1
  5949 000040FE 4C8B4520                        mov r8, PARAM(0)
  5950 00004102 41802040                        and byte [r8], T_symbol
  5951 00004106 740C                            jz .L_false
  5952 00004108 48B8-                           mov rax, sob_boolean_true
  5952 0000410A [0300000000000000] 
  5953 00004112 EB0A                            jmp .L_exit
  5954                                  .L_false:
  5955 00004114 48B8-                           mov rax, sob_boolean_false
  5955 00004116 [0200000000000000] 
  5956                                  .L_exit:
  5957 0000411E C9                              leave
  5958 0000411F C21800                          ret AND_KILL_FRAME(1)
  5959                                  
  5960                                  L_code_ptr_is_uninterned_symbol:
  5961 00004122 C8000000                        enter 0, 0
  5962 00004126 48837D1801                      cmp COUNT, 1
  5963 0000412B 0F856C110000                    jne L_error_arg_count_1
  5964 00004131 4C8B4520                        mov r8, PARAM(0)
  5965 00004135 41803842                        cmp byte [r8], T_uninterned_symbol
  5966 00004139 750C                            jne .L_false
  5967 0000413B 48B8-                           mov rax, sob_boolean_true
  5967 0000413D [0300000000000000] 
  5968 00004145 EB0A                            jmp .L_exit
  5969                                  .L_false:
  5970 00004147 48B8-                           mov rax, sob_boolean_false
  5970 00004149 [0200000000000000] 
  5971                                  .L_exit:
  5972 00004151 C9                              leave
  5973 00004152 C21800                          ret AND_KILL_FRAME(1)
  5974                                  
  5975                                  L_code_ptr_is_interned_symbol:
  5976 00004155 C8000000                        enter 0, 0
  5977 00004159 48837D1801                      cmp COUNT, 1
  5978 0000415E 0F8539110000                    jne L_error_arg_count_1
  5979 00004164 488B4520                        mov rax, PARAM(0)
  5980 00004168 803841                          cmp byte [rax], T_interned_symbol
  5981 0000416B 750C                            jne .L_false
  5982 0000416D 48B8-                           mov rax, sob_boolean_true
  5982 0000416F [0300000000000000] 
  5983 00004177 EB0A                            jmp .L_end
  5984                                  .L_false:
  5985 00004179 48B8-                           mov rax, sob_boolean_false
  5985 0000417B [0200000000000000] 
  5986                                  .L_end:
  5987 00004183 C9                              leave
  5988 00004184 C21800                          ret AND_KILL_FRAME(1)
  5989                                  
  5990                                  L_code_ptr_gensym:
  5991 00004187 C8000000                        enter 0, 0
  5992 0000418B 48837D1800                      cmp COUNT, 0
  5993 00004190 0F85D2100000                    jne L_error_arg_count_0
  5994 00004196 48FF0425[7C0D0000]              inc qword [gensym_count]
  5995 0000419E BF09000000                      mov rdi, (1 + 8)
  5996 000041A3 E828F4FFFF                      call malloc
  5997 000041A8 C60042                          mov byte [rax], T_uninterned_symbol
  5998 000041AB 488B0C25[7C0D0000]              mov rcx, qword [gensym_count]
  5999 000041B3 48894801                        mov qword [rax + 1], rcx
  6000 000041B7 C9                              leave
  6001 000041B8 C21000                          ret AND_KILL_FRAME(0)
  6002                                  
  6003                                  L_code_ptr_is_vector:
  6004 000041BB C8000000                        enter 0, 0
  6005 000041BF 48837D1801                      cmp COUNT, 1
  6006 000041C4 0F85D3100000                    jne L_error_arg_count_1
  6007 000041CA 488B4520                        mov rax, PARAM(0)
  6008 000041CE 803822                          cmp byte [rax], T_vector
  6009 000041D1 750C                            jne .L_false
  6010 000041D3 48B8-                           mov rax, sob_boolean_true
  6010 000041D5 [0300000000000000] 
  6011 000041DD EB0A                            jmp .L_end
  6012                                  .L_false:
  6013 000041DF 48B8-                           mov rax, sob_boolean_false
  6013 000041E1 [0200000000000000] 
  6014                                  .L_end:
  6015 000041E9 C9                              leave
  6016 000041EA C21800                          ret AND_KILL_FRAME(1)
  6017                                  
  6018                                  L_code_ptr_is_closure:
  6019 000041ED C8000000                        enter 0, 0
  6020 000041F1 48837D1801                      cmp COUNT, 1
  6021 000041F6 0F85A1100000                    jne L_error_arg_count_1
  6022 000041FC 488B4520                        mov rax, PARAM(0)
  6023 00004200 803804                          cmp byte [rax], T_closure
  6024 00004203 750C                            jne .L_false
  6025 00004205 48B8-                           mov rax, sob_boolean_true
  6025 00004207 [0300000000000000] 
  6026 0000420F EB0A                            jmp .L_end
  6027                                  .L_false:
  6028 00004211 48B8-                           mov rax, sob_boolean_false
  6028 00004213 [0200000000000000] 
  6029                                  .L_end:
  6030 0000421B C9                              leave
  6031 0000421C C21800                          ret AND_KILL_FRAME(1)
  6032                                  
  6033                                  L_code_ptr_is_real:
  6034 0000421F C8000000                        enter 0, 0
  6035 00004223 48837D1801                      cmp COUNT, 1
  6036 00004228 0F856F100000                    jne L_error_arg_count_1
  6037 0000422E 488B4520                        mov rax, PARAM(0)
  6038 00004232 803813                          cmp byte [rax], T_real
  6039 00004235 750C                            jne .L_false
  6040 00004237 48B8-                           mov rax, sob_boolean_true
  6040 00004239 [0300000000000000] 
  6041 00004241 EB0A                            jmp .L_end
  6042                                  .L_false:
  6043 00004243 48B8-                           mov rax, sob_boolean_false
  6043 00004245 [0200000000000000] 
  6044                                  .L_end:
  6045 0000424D C9                              leave
  6046 0000424E C21800                          ret AND_KILL_FRAME(1)
  6047                                  
  6048                                  L_code_ptr_is_fraction:
  6049 00004251 C8000000                        enter 0, 0
  6050 00004255 48837D1801                      cmp COUNT, 1
  6051 0000425A 0F853D100000                    jne L_error_arg_count_1
  6052 00004260 488B4520                        mov rax, PARAM(0)
  6053 00004264 803812                          cmp byte [rax], T_fraction
  6054 00004267 750C                            jne .L_false
  6055 00004269 48B8-                           mov rax, sob_boolean_true
  6055 0000426B [0300000000000000] 
  6056 00004273 EB0A                            jmp .L_end
  6057                                  .L_false:
  6058 00004275 48B8-                           mov rax, sob_boolean_false
  6058 00004277 [0200000000000000] 
  6059                                  .L_end:
  6060 0000427F C9                              leave
  6061 00004280 C21800                          ret AND_KILL_FRAME(1)
  6062                                  
  6063                                  L_code_ptr_is_boolean:
  6064 00004283 C8000000                        enter 0, 0
  6065 00004287 48837D1801                      cmp COUNT, 1
  6066 0000428C 0F850B100000                    jne L_error_arg_count_1
  6067 00004292 488B4520                        mov rax, PARAM(0)
  6068 00004296 8A18                            mov bl, byte [rax]
  6069 00004298 80E308                          and bl, T_boolean
  6070 0000429B 740C                            je .L_false
  6071 0000429D 48B8-                           mov rax, sob_boolean_true
  6071 0000429F [0300000000000000] 
  6072 000042A7 EB0A                            jmp .L_end
  6073                                  .L_false:
  6074 000042A9 48B8-                           mov rax, sob_boolean_false
  6074 000042AB [0200000000000000] 
  6075                                  .L_end:
  6076 000042B3 C9                              leave
  6077 000042B4 C21800                          ret AND_KILL_FRAME(1)
  6078                                          
  6079                                  L_code_ptr_is_boolean_false:
  6080 000042B7 C8000000                        enter 0, 0
  6081 000042BB 48837D1801                      cmp COUNT, 1
  6082 000042C0 0F85D70F0000                    jne L_error_arg_count_1
  6083 000042C6 488B4520                        mov rax, PARAM(0)
  6084 000042CA 8A18                            mov bl, byte [rax]
  6085 000042CC 80FB09                          cmp bl, T_boolean_false
  6086 000042CF 750C                            jne .L_false
  6087 000042D1 48B8-                           mov rax, sob_boolean_true
  6087 000042D3 [0300000000000000] 
  6088 000042DB EB0A                            jmp .L_end
  6089                                  .L_false:
  6090 000042DD 48B8-                           mov rax, sob_boolean_false
  6090 000042DF [0200000000000000] 
  6091                                  .L_end:
  6092 000042E7 C9                              leave
  6093 000042E8 C21800                          ret AND_KILL_FRAME(1)
  6094                                  
  6095                                  L_code_ptr_is_boolean_true:
  6096 000042EB C8000000                        enter 0, 0
  6097 000042EF 48837D1801                      cmp COUNT, 1
  6098 000042F4 0F85A30F0000                    jne L_error_arg_count_1
  6099 000042FA 488B4520                        mov rax, PARAM(0)
  6100 000042FE 8A18                            mov bl, byte [rax]
  6101 00004300 80FB0A                          cmp bl, T_boolean_true
  6102 00004303 750C                            jne .L_false
  6103 00004305 48B8-                           mov rax, sob_boolean_true
  6103 00004307 [0300000000000000] 
  6104 0000430F EB0A                            jmp .L_end
  6105                                  .L_false:
  6106 00004311 48B8-                           mov rax, sob_boolean_false
  6106 00004313 [0200000000000000] 
  6107                                  .L_end:
  6108 0000431B C9                              leave
  6109 0000431C C21800                          ret AND_KILL_FRAME(1)
  6110                                  
  6111                                  L_code_ptr_is_number:
  6112 0000431F C8000000                        enter 0, 0
  6113 00004323 48837D1801                      cmp COUNT, 1
  6114 00004328 0F856F0F0000                    jne L_error_arg_count_1
  6115 0000432E 488B4520                        mov rax, PARAM(0)
  6116 00004332 8A18                            mov bl, byte [rax]
  6117 00004334 80E310                          and bl, T_number
  6118 00004337 740C                            jz .L_false
  6119 00004339 48B8-                           mov rax, sob_boolean_true
  6119 0000433B [0300000000000000] 
  6120 00004343 EB0A                            jmp .L_end
  6121                                  .L_false:
  6122 00004345 48B8-                           mov rax, sob_boolean_false
  6122 00004347 [0200000000000000] 
  6123                                  .L_end:
  6124 0000434F C9                              leave
  6125 00004350 C21800                          ret AND_KILL_FRAME(1)
  6126                                          
  6127                                  L_code_ptr_is_collection:
  6128 00004353 C8000000                        enter 0, 0
  6129 00004357 48837D1801                      cmp COUNT, 1
  6130 0000435C 0F853B0F0000                    jne L_error_arg_count_1
  6131 00004362 488B4520                        mov rax, PARAM(0)
  6132 00004366 8A18                            mov bl, byte [rax]
  6133 00004368 80E320                          and bl, T_collection
  6134 0000436B 740C                            je .L_false
  6135 0000436D 48B8-                           mov rax, sob_boolean_true
  6135 0000436F [0300000000000000] 
  6136 00004377 EB0A                            jmp .L_end
  6137                                  .L_false:
  6138 00004379 48B8-                           mov rax, sob_boolean_false
  6138 0000437B [0200000000000000] 
  6139                                  .L_end:
  6140 00004383 C9                              leave
  6141 00004384 C21800                          ret AND_KILL_FRAME(1)
  6142                                  
  6143                                  L_code_ptr_cons:
  6144 00004387 C8000000                        enter 0, 0
  6145 0000438B 48837D1802                      cmp COUNT, 2
  6146 00004390 0F853C0F0000                    jne L_error_arg_count_2
  6147 00004396 BF11000000                      mov rdi, (1 + 8 + 8)
  6148 0000439B E830F2FFFF                      call malloc
  6149 000043A0 C60021                          mov byte [rax], T_pair
  6150 000043A3 488B5D20                        mov rbx, PARAM(0)
  6151 000043A7 48895801                        mov SOB_PAIR_CAR(rax), rbx
  6152 000043AB 488B5D28                        mov rbx, PARAM(1)
  6153 000043AF 48895809                        mov SOB_PAIR_CDR(rax), rbx
  6154 000043B3 C9                              leave
  6155 000043B4 C22000                          ret AND_KILL_FRAME(2)
  6156                                  
  6157                                  L_code_ptr_display_sexpr:
  6158 000043B7 C8000000                        enter 0, 0
  6159 000043BB 48837D1801                      cmp COUNT, 1
  6160 000043C0 0F85D70E0000                    jne L_error_arg_count_1
  6161 000043C6 488B7D20                        mov rdi, PARAM(0)
  6162 000043CA E882F4FFFF                      call print_sexpr
  6163 000043CF 48B8-                           mov rax, sob_void
  6163 000043D1 [0000000000000000] 
  6164 000043D9 C9                              leave
  6165 000043DA C21800                          ret AND_KILL_FRAME(1)
  6166                                  
  6167                                  L_code_ptr_write_char:
  6168 000043DD C8000000                        enter 0, 0
  6169 000043E1 48837D1801                      cmp COUNT, 1
  6170 000043E6 0F85B10E0000                    jne L_error_arg_count_1
  6171 000043EC 488B4520                        mov rax, PARAM(0)
  6172                                          assert_char(rax)
    53 000043F0 803802              <1>  cmp byte [%1], %2
    54 000043F3 0F85780F0000        <1>  jne L_error_incorrect_type
  6173 000043F9 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  6174 000043FC 4825FF000000                    and rax, 255
  6175 00004402 48BF-                           mov rdi, fmt_char
  6175 00004404 [840D000000000000] 
  6176 0000440C 4889C6                          mov rsi, rax
  6177 0000440F B800000000                      mov rax, 0
  6178                                          ENTER
    44 00004414 C8000000            <1>  enter 0, 0
    45 00004418 4883E4F0            <1>  and rsp, ~15
  6179 0000441C E8(00000000)                    call printf
  6180                                          LEAVE
    49 00004421 C9                  <1>  leave
  6181 00004422 48B8-                           mov rax, sob_void
  6181 00004424 [0000000000000000] 
  6182 0000442C C9                              leave
  6183 0000442D C21800                          ret AND_KILL_FRAME(1)
  6184                                  
  6185                                  L_code_ptr_car:
  6186 00004430 C8000000                        enter 0, 0
  6187 00004434 48837D1801                      cmp COUNT, 1
  6188 00004439 0F855E0E0000                    jne L_error_arg_count_1
  6189 0000443F 488B4520                        mov rax, PARAM(0)
  6190                                          assert_pair(rax)
    53 00004443 803821              <1>  cmp byte [%1], %2
    54 00004446 0F85250F0000        <1>  jne L_error_incorrect_type
  6191 0000444C 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  6192 00004450 C9                              leave
  6193 00004451 C21800                          ret AND_KILL_FRAME(1)
  6194                                          
  6195                                  L_code_ptr_cdr:
  6196 00004454 C8000000                        enter 0, 0
  6197 00004458 48837D1801                      cmp COUNT, 1
  6198 0000445D 0F853A0E0000                    jne L_error_arg_count_1
  6199 00004463 488B4520                        mov rax, PARAM(0)
  6200                                          assert_pair(rax)
    53 00004467 803821              <1>  cmp byte [%1], %2
    54 0000446A 0F85010F0000        <1>  jne L_error_incorrect_type
  6201 00004470 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  6202 00004474 C9                              leave
  6203 00004475 C21800                          ret AND_KILL_FRAME(1)
  6204                                          
  6205                                  L_code_ptr_string_length:
  6206 00004478 C8000000                        enter 0, 0
  6207 0000447C 48837D1801                      cmp COUNT, 1
  6208 00004481 0F85160E0000                    jne L_error_arg_count_1
  6209 00004487 488B4520                        mov rax, PARAM(0)
  6210                                          assert_string(rax)
    53 0000448B 803803              <1>  cmp byte [%1], %2
    54 0000448E 0F85DD0E0000        <1>  jne L_error_incorrect_type
  6211 00004494 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  6212 00004498 E84F0D0000                      call make_integer
  6213 0000449D C9                              leave
  6214 0000449E C21800                          ret AND_KILL_FRAME(1)
  6215                                  
  6216                                  L_code_ptr_vector_length:
  6217 000044A1 C8000000                        enter 0, 0
  6218 000044A5 48837D1801                      cmp COUNT, 1
  6219 000044AA 0F85ED0D0000                    jne L_error_arg_count_1
  6220 000044B0 488B4520                        mov rax, PARAM(0)
  6221                                          assert_vector(rax)
    53 000044B4 803822              <1>  cmp byte [%1], %2
    54 000044B7 0F85B40E0000        <1>  jne L_error_incorrect_type
  6222 000044BD 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  6223 000044C1 E8260D0000                      call make_integer
  6224 000044C6 C9                              leave
  6225 000044C7 C21800                          ret AND_KILL_FRAME(1)
  6226                                  
  6227                                  L_code_ptr_real_to_integer:
  6228 000044CA C8000000                        enter 0, 0
  6229 000044CE 48837D1801                      cmp COUNT, 1
  6230 000044D3 0F85C40D0000                    jne L_error_arg_count_1
  6231 000044D9 488B5D20                        mov rbx, PARAM(0)
  6232                                          assert_real(rbx)
    53 000044DD 803B13              <1>  cmp byte [%1], %2
    54 000044E0 0F858B0E0000        <1>  jne L_error_incorrect_type
  6233 000044E6 F20F104301                      movsd xmm0, qword [rbx + 1]
  6234 000044EB F2480F2CF8                      cvttsd2si rdi, xmm0
  6235 000044F0 E8F70C0000                      call make_integer
  6236 000044F5 C9                              leave
  6237 000044F6 C21800                          ret AND_KILL_FRAME(1)
  6238                                  
  6239                                  L_code_ptr_exit:
  6240 000044F9 C8000000                        enter 0, 0
  6241 000044FD 48837D1800                      cmp COUNT, 0
  6242 00004502 0F85600D0000                    jne L_error_arg_count_0
  6243 00004508 B800000000                      mov rax, 0
  6244 0000450D E8(00000000)                    call exit
  6245                                  
  6246                                  L_code_ptr_integer_to_real:
  6247 00004512 C8000000                        enter 0, 0
  6248 00004516 48837D1801                      cmp COUNT, 1
  6249 0000451B 0F857C0D0000                    jne L_error_arg_count_1
  6250 00004521 488B4520                        mov rax, PARAM(0)
  6251                                          assert_integer(rax)
    53 00004525 803811              <1>  cmp byte [%1], %2
    54 00004528 0F85430E0000        <1>  jne L_error_incorrect_type
  6252 0000452E FF7001                          push qword [rax + 1]
  6253 00004531 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  6254 00004537 E8980C0000                      call make_real
  6255 0000453C C9                              leave
  6256 0000453D C21800                          ret AND_KILL_FRAME(1)
  6257                                  
  6258                                  L_code_ptr_fraction_to_real:
  6259 00004540 C8000000                        enter 0, 0
  6260 00004544 48837D1801                      cmp COUNT, 1
  6261 00004549 0F854E0D0000                    jne L_error_arg_count_1
  6262 0000454F 488B4520                        mov rax, PARAM(0)
  6263                                          assert_fraction(rax)
    53 00004553 803812              <1>  cmp byte [%1], %2
    54 00004556 0F85150E0000        <1>  jne L_error_incorrect_type
  6264 0000455C FF7001                          push qword [rax + 1]
  6265 0000455F F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  6266 00004565 FF7009                          push qword [rax + 1 + 8]
  6267 00004568 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  6268 0000456E F20F5EC1                        divsd xmm0, xmm1
  6269 00004572 E85D0C0000                      call make_real
  6270 00004577 C9                              leave
  6271 00004578 C21800                          ret AND_KILL_FRAME(1)
  6272                                  
  6273                                  L_code_ptr_char_to_integer:
  6274 0000457B C8000000                        enter 0, 0
  6275 0000457F 48837D1801                      cmp COUNT, 1
  6276 00004584 0F85130D0000                    jne L_error_arg_count_1
  6277 0000458A 488B4520                        mov rax, PARAM(0)
  6278                                          assert_char(rax)
    53 0000458E 803802              <1>  cmp byte [%1], %2
    54 00004591 0F85DA0D0000        <1>  jne L_error_incorrect_type
  6279 00004597 8A4001                          mov al, byte [rax + 1]
  6280 0000459A 4825FF000000                    and rax, 255
  6281 000045A0 4889C7                          mov rdi, rax
  6282 000045A3 E8440C0000                      call make_integer
  6283 000045A8 C9                              leave
  6284 000045A9 C21800                          ret AND_KILL_FRAME(1)
  6285                                  
  6286                                  L_code_ptr_integer_to_fraction:
  6287 000045AC C8000000                        enter 0, 0
  6288 000045B0 48837D1801                      cmp COUNT, 1
  6289 000045B5 0F85E20C0000                    jne L_error_arg_count_1
  6290 000045BB 4C8B4520                        mov r8, PARAM(0)
  6291                                          assert_integer(r8)
    53 000045BF 41803811            <1>  cmp byte [%1], %2
    54 000045C3 0F85A80D0000        <1>  jne L_error_incorrect_type
  6292 000045C9 BF11000000                      mov rdi, (1 + 8 + 8)
  6293 000045CE E8FDEFFFFF                      call malloc
  6294 000045D3 498B5801                        mov rbx, qword [r8 + 1]
  6295 000045D7 C60012                          mov byte [rax], T_fraction
  6296 000045DA 48895801                        mov qword [rax + 1], rbx
  6297 000045DE 48C7400901000000                mov qword [rax + 1 + 8], 1
  6298 000045E6 C9                              leave
  6299 000045E7 C21800                          ret AND_KILL_FRAME(1)
  6300                                  
  6301                                  L_code_ptr_integer_to_char:
  6302 000045EA C8000000                        enter 0, 0
  6303 000045EE 48837D1801                      cmp COUNT, 1
  6304 000045F3 0F85A40C0000                    jne L_error_arg_count_1
  6305 000045F9 488B4520                        mov rax, PARAM(0)
  6306                                          assert_integer(rax)
    53 000045FD 803811              <1>  cmp byte [%1], %2
    54 00004600 0F856B0D0000        <1>  jne L_error_incorrect_type
  6307 00004606 488B5801                        mov rbx, qword [rax + 1]
  6308 0000460A 4883FB00                        cmp rbx, 0
  6309 0000460E 0F8EF20B0000                    jle L_error_integer_range
  6310 00004614 4881FB00010000                  cmp rbx, 256
  6311 0000461B 0F8DE50B0000                    jge L_error_integer_range
  6312 00004621 BF02000000                      mov rdi, (1 + 1)
  6313 00004626 E8A5EFFFFF                      call malloc
  6314 0000462B C60002                          mov byte [rax], T_char
  6315 0000462E 885801                          mov byte [rax + 1], bl
  6316 00004631 C9                              leave
  6317 00004632 C21800                          ret AND_KILL_FRAME(1)
  6318                                  
  6319                                  L_code_ptr_trng:
  6320 00004635 C8000000                        enter 0, 0
  6321 00004639 48837D1800                      cmp COUNT, 0
  6322 0000463E 0F85240C0000                    jne L_error_arg_count_0
  6323 00004644 480FC7F7                        rdrand rdi
  6324 00004648 48D1EF                          shr rdi, 1
  6325 0000464B E89C0B0000                      call make_integer
  6326 00004650 C9                              leave
  6327 00004651 C21000                          ret AND_KILL_FRAME(0)
  6328                                  
  6329                                  L_code_ptr_is_zero:
  6330 00004654 C8000000                        enter 0, 0
  6331 00004658 48837D1801                      cmp COUNT, 1
  6332 0000465D 0F853A0C0000                    jne L_error_arg_count_1
  6333 00004663 488B4520                        mov rax, PARAM(0)
  6334 00004667 803811                          cmp byte [rax], T_integer
  6335 0000466A 740F                            je .L_integer
  6336 0000466C 803812                          cmp byte [rax], T_fraction
  6337 0000466F 7413                            je .L_fraction
  6338 00004671 803813                          cmp byte [rax], T_real
  6339 00004674 7417                            je .L_real
  6340 00004676 E9F60C0000                      jmp L_error_incorrect_type
  6341                                  .L_integer:
  6342 0000467B 4883780100                      cmp qword [rax + 1], 0
  6343 00004680 7429                            je .L_zero
  6344 00004682 EB1B                            jmp .L_not_zero
  6345                                  .L_fraction:
  6346 00004684 4883780100                      cmp qword [rax + 1], 0
  6347 00004689 7420                            je .L_zero
  6348 0000468B EB12                            jmp .L_not_zero
  6349                                  .L_real:
  6350 0000468D 660FEFC0                        pxor xmm0, xmm0
  6351 00004691 FF7001                          push qword [rax + 1]
  6352 00004694 F20F100C24                      movsd xmm1, qword [rsp]
  6353 00004699 660F2EC1                        ucomisd xmm0, xmm1
  6354 0000469D 740C                            je .L_zero
  6355                                  .L_not_zero:
  6356 0000469F 48B8-                           mov rax, sob_boolean_false
  6356 000046A1 [0200000000000000] 
  6357 000046A9 EB0A                            jmp .L_end
  6358                                  .L_zero:
  6359 000046AB 48B8-                           mov rax, sob_boolean_true
  6359 000046AD [0300000000000000] 
  6360                                  .L_end:
  6361 000046B5 C9                              leave
  6362 000046B6 C21800                          ret AND_KILL_FRAME(1)
  6363                                  
  6364                                  L_code_ptr_is_integer:
  6365 000046B9 C8000000                        enter 0, 0
  6366 000046BD 48837D1801                      cmp COUNT, 1
  6367 000046C2 0F85D50B0000                    jne L_error_arg_count_1
  6368 000046C8 488B4520                        mov rax, PARAM(0)
  6369 000046CC 803811                          cmp byte [rax], T_integer
  6370 000046CF 750C                            jne .L_false
  6371 000046D1 48B8-                           mov rax, sob_boolean_true
  6371 000046D3 [0300000000000000] 
  6372 000046DB EB0A                            jmp .L_exit
  6373                                  .L_false:
  6374 000046DD 48B8-                           mov rax, sob_boolean_false
  6374 000046DF [0200000000000000] 
  6375                                  .L_exit:
  6376 000046E7 C9                              leave
  6377 000046E8 C21800                          ret AND_KILL_FRAME(1)
  6378                                  
  6379                                  L_code_ptr_raw_bin_add_rr:
  6380 000046EB C8000000                        enter 0, 0
  6381 000046EF 48837D1802                      cmp COUNT, 2
  6382 000046F4 0F85D80B0000                    jne L_error_arg_count_2
  6383 000046FA 488B5D20                        mov rbx, PARAM(0)
  6384                                          assert_real(rbx)
    53 000046FE 803B13              <1>  cmp byte [%1], %2
    54 00004701 0F856A0C0000        <1>  jne L_error_incorrect_type
  6385 00004707 488B4D28                        mov rcx, PARAM(1)
  6386                                          assert_real(rcx)
    53 0000470B 803913              <1>  cmp byte [%1], %2
    54 0000470E 0F855D0C0000        <1>  jne L_error_incorrect_type
  6387 00004714 F20F104301                      movsd xmm0, qword [rbx + 1]
  6388 00004719 F20F104901                      movsd xmm1, qword [rcx + 1]
  6389 0000471E F20F58C1                        addsd xmm0, xmm1
  6390 00004722 E8AD0A0000                      call make_real
  6391 00004727 C9                              leave
  6392 00004728 C22000                          ret AND_KILL_FRAME(2)
  6393                                  
  6394                                  L_code_ptr_raw_bin_sub_rr:
  6395 0000472B C8000000                        enter 0, 0
  6396 0000472F 48837D1802                      cmp COUNT, 2
  6397 00004734 0F85980B0000                    jne L_error_arg_count_2
  6398 0000473A 488B5D20                        mov rbx, PARAM(0)
  6399                                          assert_real(rbx)
    53 0000473E 803B13              <1>  cmp byte [%1], %2
    54 00004741 0F852A0C0000        <1>  jne L_error_incorrect_type
  6400 00004747 488B4D28                        mov rcx, PARAM(1)
  6401                                          assert_real(rcx)
    53 0000474B 803913              <1>  cmp byte [%1], %2
    54 0000474E 0F851D0C0000        <1>  jne L_error_incorrect_type
  6402 00004754 F20F104301                      movsd xmm0, qword [rbx + 1]
  6403 00004759 F20F104901                      movsd xmm1, qword [rcx + 1]
  6404 0000475E F20F5CC1                        subsd xmm0, xmm1
  6405 00004762 E86D0A0000                      call make_real
  6406 00004767 C9                              leave
  6407 00004768 C22000                          ret AND_KILL_FRAME(2)
  6408                                  
  6409                                  L_code_ptr_raw_bin_mul_rr:
  6410 0000476B C8000000                        enter 0, 0
  6411 0000476F 48837D1802                      cmp COUNT, 2
  6412 00004774 0F85580B0000                    jne L_error_arg_count_2
  6413 0000477A 488B5D20                        mov rbx, PARAM(0)
  6414                                          assert_real(rbx)
    53 0000477E 803B13              <1>  cmp byte [%1], %2
    54 00004781 0F85EA0B0000        <1>  jne L_error_incorrect_type
  6415 00004787 488B4D28                        mov rcx, PARAM(1)
  6416                                          assert_real(rcx)
    53 0000478B 803913              <1>  cmp byte [%1], %2
    54 0000478E 0F85DD0B0000        <1>  jne L_error_incorrect_type
  6417 00004794 F20F104301                      movsd xmm0, qword [rbx + 1]
  6418 00004799 F20F104901                      movsd xmm1, qword [rcx + 1]
  6419 0000479E F20F59C1                        mulsd xmm0, xmm1
  6420 000047A2 E82D0A0000                      call make_real
  6421 000047A7 C9                              leave
  6422 000047A8 C22000                          ret AND_KILL_FRAME(2)
  6423                                  
  6424                                  L_code_ptr_raw_bin_div_rr:
  6425 000047AB C8000000                        enter 0, 0
  6426 000047AF 48837D1802                      cmp COUNT, 2
  6427 000047B4 0F85180B0000                    jne L_error_arg_count_2
  6428 000047BA 488B5D20                        mov rbx, PARAM(0)
  6429                                          assert_real(rbx)
    53 000047BE 803B13              <1>  cmp byte [%1], %2
    54 000047C1 0F85AA0B0000        <1>  jne L_error_incorrect_type
  6430 000047C7 488B4D28                        mov rcx, PARAM(1)
  6431                                          assert_real(rcx)
    53 000047CB 803913              <1>  cmp byte [%1], %2
    54 000047CE 0F859D0B0000        <1>  jne L_error_incorrect_type
  6432 000047D4 F20F104301                      movsd xmm0, qword [rbx + 1]
  6433 000047D9 F20F104901                      movsd xmm1, qword [rcx + 1]
  6434 000047DE 660FEFD2                        pxor xmm2, xmm2
  6435 000047E2 660F2ECA                        ucomisd xmm1, xmm2
  6436 000047E6 0F84B60B0000                    je L_error_division_by_zero
  6437 000047EC F20F5EC1                        divsd xmm0, xmm1
  6438 000047F0 E8DF090000                      call make_real
  6439 000047F5 C9                              leave
  6440 000047F6 C22000                          ret AND_KILL_FRAME(2)
  6441                                  
  6442                                  L_code_ptr_raw_bin_add_zz:
  6443 000047F9 C8000000                	enter 0, 0
  6444 000047FD 48837D1802              	cmp COUNT, 2
  6445 00004802 0F85CA0A0000            	jne L_error_arg_count_2
  6446 00004808 4C8B4520                	mov r8, PARAM(0)
  6447                                  	assert_integer(r8)
    53 0000480C 41803811            <1>  cmp byte [%1], %2
    54 00004810 0F855B0B0000        <1>  jne L_error_incorrect_type
  6448 00004816 4C8B4D28                	mov r9, PARAM(1)
  6449                                  	assert_integer(r9)
    53 0000481A 41803911            <1>  cmp byte [%1], %2
    54 0000481E 0F854D0B0000        <1>  jne L_error_incorrect_type
  6450 00004824 498B7801                	mov rdi, qword [r8 + 1]
  6451 00004828 49037901                	add rdi, qword [r9 + 1]
  6452 0000482C E8BB090000              	call make_integer
  6453 00004831 C9                      	leave
  6454 00004832 C22000                  	ret AND_KILL_FRAME(2)
  6455                                  
  6456                                  L_code_ptr_raw_bin_add_qq:
  6457 00004835 C8000000                        enter 0, 0
  6458 00004839 48837D1802                      cmp COUNT, 2
  6459 0000483E 0F858E0A0000                    jne L_error_arg_count_2
  6460 00004844 4C8B4520                        mov r8, PARAM(0)
  6461                                          assert_fraction(r8)
    53 00004848 41803812            <1>  cmp byte [%1], %2
    54 0000484C 0F851F0B0000        <1>  jne L_error_incorrect_type
  6462 00004852 4C8B4D28                        mov r9, PARAM(1)
  6463                                          assert_fraction(r9)
    53 00004856 41803912            <1>  cmp byte [%1], %2
    54 0000485A 0F85110B0000        <1>  jne L_error_incorrect_type
  6464 00004860 498B4001                        mov rax, qword [r8 + 1] ; num1
  6465 00004864 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  6466 00004868 4899                            cqo
  6467 0000486A 48F7EB                          imul rbx
  6468 0000486D 4889C6                          mov rsi, rax
  6469 00004870 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  6470 00004874 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  6471 00004878 4899                            cqo
  6472 0000487A 48F7EB                          imul rbx
  6473 0000487D 4801C6                          add rsi, rax
  6474 00004880 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  6475 00004884 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  6476 00004888 4899                            cqo
  6477 0000488A 48F7EB                          imul rbx
  6478 0000488D 4889C7                          mov rdi, rax
  6479 00004890 E8DE010000                      call normalize_fraction
  6480 00004895 C9                              leave
  6481 00004896 C22000                          ret AND_KILL_FRAME(2)
  6482                                  
  6483                                  L_code_ptr_raw_bin_sub_zz:
  6484 00004899 C8000000                	enter 0, 0
  6485 0000489D 48837D1802              	cmp COUNT, 2
  6486 000048A2 0F852A0A0000            	jne L_error_arg_count_2
  6487 000048A8 4C8B4520                	mov r8, PARAM(0)
  6488                                  	assert_integer(r8)
    53 000048AC 41803811            <1>  cmp byte [%1], %2
    54 000048B0 0F85BB0A0000        <1>  jne L_error_incorrect_type
  6489 000048B6 4C8B4D28                	mov r9, PARAM(1)
  6490                                  	assert_integer(r9)
    53 000048BA 41803911            <1>  cmp byte [%1], %2
    54 000048BE 0F85AD0A0000        <1>  jne L_error_incorrect_type
  6491 000048C4 498B7801                	mov rdi, qword [r8 + 1]
  6492 000048C8 492B7901                	sub rdi, qword [r9 + 1]
  6493 000048CC E81B090000              	call make_integer
  6494 000048D1 C9                      	leave
  6495 000048D2 C22000                  	ret AND_KILL_FRAME(2)
  6496                                  
  6497                                  L_code_ptr_raw_bin_sub_qq:
  6498 000048D5 C8000000                        enter 0, 0
  6499 000048D9 48837D1802                      cmp COUNT, 2
  6500 000048DE 0F85EE090000                    jne L_error_arg_count_2
  6501 000048E4 4C8B4520                        mov r8, PARAM(0)
  6502                                          assert_fraction(r8)
    53 000048E8 41803812            <1>  cmp byte [%1], %2
    54 000048EC 0F857F0A0000        <1>  jne L_error_incorrect_type
  6503 000048F2 4C8B4D28                        mov r9, PARAM(1)
  6504                                          assert_fraction(r9)
    53 000048F6 41803912            <1>  cmp byte [%1], %2
    54 000048FA 0F85710A0000        <1>  jne L_error_incorrect_type
  6505 00004900 498B4001                        mov rax, qword [r8 + 1] ; num1
  6506 00004904 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  6507 00004908 4899                            cqo
  6508 0000490A 48F7EB                          imul rbx
  6509 0000490D 4889C6                          mov rsi, rax
  6510 00004910 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  6511 00004914 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  6512 00004918 4899                            cqo
  6513 0000491A 48F7EB                          imul rbx
  6514 0000491D 4829C6                          sub rsi, rax
  6515 00004920 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  6516 00004924 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  6517 00004928 4899                            cqo
  6518 0000492A 48F7EB                          imul rbx
  6519 0000492D 4889C7                          mov rdi, rax
  6520 00004930 E83E010000                      call normalize_fraction
  6521 00004935 C9                              leave
  6522 00004936 C22000                          ret AND_KILL_FRAME(2)
  6523                                  
  6524                                  L_code_ptr_raw_bin_mul_zz:
  6525 00004939 C8000000                	enter 0, 0
  6526 0000493D 48837D1802              	cmp COUNT, 2
  6527 00004942 0F858A090000            	jne L_error_arg_count_2
  6528 00004948 4C8B4520                	mov r8, PARAM(0)
  6529                                  	assert_integer(r8)
    53 0000494C 41803811            <1>  cmp byte [%1], %2
    54 00004950 0F851B0A0000        <1>  jne L_error_incorrect_type
  6530 00004956 4C8B4D28                	mov r9, PARAM(1)
  6531                                  	assert_integer(r9)
    53 0000495A 41803911            <1>  cmp byte [%1], %2
    54 0000495E 0F850D0A0000        <1>  jne L_error_incorrect_type
  6532 00004964 4899                    	cqo
  6533 00004966 498B4001                	mov rax, qword [r8 + 1]
  6534 0000496A 49F76101                	mul qword [r9 + 1]
  6535 0000496E 4889C7                  	mov rdi, rax
  6536 00004971 E876080000              	call make_integer
  6537 00004976 C9                      	leave
  6538 00004977 C22000                  	ret AND_KILL_FRAME(2)
  6539                                  
  6540                                  L_code_ptr_raw_bin_mul_qq:
  6541 0000497A C8000000                        enter 0, 0
  6542 0000497E 48837D1802                      cmp COUNT, 2
  6543 00004983 0F8549090000                    jne L_error_arg_count_2
  6544 00004989 4C8B4520                        mov r8, PARAM(0)
  6545                                          assert_fraction(r8)
    53 0000498D 41803812            <1>  cmp byte [%1], %2
    54 00004991 0F85DA090000        <1>  jne L_error_incorrect_type
  6546 00004997 4C8B4D28                        mov r9, PARAM(1)
  6547                                          assert_fraction(r9)
    53 0000499B 41803912            <1>  cmp byte [%1], %2
    54 0000499F 0F85CC090000        <1>  jne L_error_incorrect_type
  6548 000049A5 498B4001                        mov rax, qword [r8 + 1] ; num1
  6549 000049A9 498B5901                        mov rbx, qword [r9 + 1] ; num2
  6550 000049AD 4899                            cqo
  6551 000049AF 48F7EB                          imul rbx
  6552 000049B2 4889C6                          mov rsi, rax
  6553 000049B5 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  6554 000049B9 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  6555 000049BD 4899                            cqo
  6556 000049BF 48F7EB                          imul rbx
  6557 000049C2 4889C7                          mov rdi, rax
  6558 000049C5 E8A9000000                      call normalize_fraction
  6559 000049CA C9                              leave
  6560 000049CB C22000                          ret AND_KILL_FRAME(2)
  6561                                          
  6562                                  L_code_ptr_raw_bin_div_zz:
  6563 000049CE C8000000                	enter 0, 0
  6564 000049D2 48837D1802              	cmp COUNT, 2
  6565 000049D7 0F85F5080000            	jne L_error_arg_count_2
  6566 000049DD 4C8B4520                	mov r8, PARAM(0)
  6567                                  	assert_integer(r8)
    53 000049E1 41803811            <1>  cmp byte [%1], %2
    54 000049E5 0F8586090000        <1>  jne L_error_incorrect_type
  6568 000049EB 4C8B4D28                	mov r9, PARAM(1)
  6569                                  	assert_integer(r9)
    53 000049EF 41803911            <1>  cmp byte [%1], %2
    54 000049F3 0F8578090000        <1>  jne L_error_incorrect_type
  6570 000049F9 498B7901                	mov rdi, qword [r9 + 1]
  6571 000049FD 4883FF00                	cmp rdi, 0
  6572 00004A01 0F849B090000            	je L_error_division_by_zero
  6573 00004A07 498B7001                	mov rsi, qword [r8 + 1]
  6574 00004A0B E863000000              	call normalize_fraction
  6575 00004A10 C9                      	leave
  6576 00004A11 C22000                  	ret AND_KILL_FRAME(2)
  6577                                  
  6578                                  L_code_ptr_raw_bin_div_qq:
  6579 00004A14 C8000000                        enter 0, 0
  6580 00004A18 48837D1802                      cmp COUNT, 2
  6581 00004A1D 0F85AF080000                    jne L_error_arg_count_2
  6582 00004A23 4C8B4520                        mov r8, PARAM(0)
  6583                                          assert_fraction(r8)
    53 00004A27 41803812            <1>  cmp byte [%1], %2
    54 00004A2B 0F8540090000        <1>  jne L_error_incorrect_type
  6584 00004A31 4C8B4D28                        mov r9, PARAM(1)
  6585                                          assert_fraction(r9)
    53 00004A35 41803912            <1>  cmp byte [%1], %2
    54 00004A39 0F8532090000        <1>  jne L_error_incorrect_type
  6586 00004A3F 4983790100                      cmp qword [r9 + 1], 0
  6587 00004A44 0F8458090000                    je L_error_division_by_zero
  6588 00004A4A 498B4001                        mov rax, qword [r8 + 1] ; num1
  6589 00004A4E 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  6590 00004A52 4899                            cqo
  6591 00004A54 48F7EB                          imul rbx
  6592 00004A57 4889C6                          mov rsi, rax
  6593 00004A5A 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  6594 00004A5E 498B5901                        mov rbx, qword [r9 + 1] ; num2
  6595 00004A62 4899                            cqo
  6596 00004A64 48F7EB                          imul rbx
  6597 00004A67 4889C7                          mov rdi, rax
  6598 00004A6A E804000000                      call normalize_fraction
  6599 00004A6F C9                              leave
  6600 00004A70 C22000                          ret AND_KILL_FRAME(2)
  6601                                          
  6602                                  normalize_fraction:
  6603 00004A73 56                              push rsi
  6604 00004A74 57                              push rdi
  6605 00004A75 E859000000                      call gcd
  6606 00004A7A 4889C3                          mov rbx, rax
  6607 00004A7D 58                              pop rax
  6608 00004A7E 4899                            cqo
  6609 00004A80 48F7FB                          idiv rbx
  6610 00004A83 4989C0                          mov r8, rax
  6611 00004A86 58                              pop rax
  6612 00004A87 4899                            cqo
  6613 00004A89 48F7FB                          idiv rbx
  6614 00004A8C 4989C1                          mov r9, rax
  6615 00004A8F 4983F900                        cmp r9, 0
  6616 00004A93 741C                            je .L_zero
  6617 00004A95 4983F801                        cmp r8, 1
  6618 00004A99 7421                            je .L_int
  6619 00004A9B BF11000000                      mov rdi, (1 + 8 + 8)
  6620 00004AA0 E82BEBFFFF                      call malloc
  6621 00004AA5 C60012                          mov byte [rax], T_fraction
  6622 00004AA8 4C894801                        mov qword [rax + 1], r9
  6623 00004AAC 4C894009                        mov qword [rax + 1 + 8], r8
  6624 00004AB0 C3                              ret
  6625                                  .L_zero:
  6626 00004AB1 BF00000000                      mov rdi, 0
  6627 00004AB6 E831070000                      call make_integer
  6628 00004ABB C3                              ret
  6629                                  .L_int:
  6630 00004ABC 4C89CF                          mov rdi, r9
  6631 00004ABF E828070000                      call make_integer
  6632 00004AC4 C3                              ret
  6633                                  
  6634                                  iabs:
  6635 00004AC5 4889F8                          mov rax, rdi
  6636 00004AC8 4883F800                        cmp rax, 0
  6637 00004ACC 7C01                            jl .Lneg
  6638 00004ACE C3                              ret
  6639                                  .Lneg:
  6640 00004ACF 48F7D8                          neg rax
  6641 00004AD2 C3                              ret
  6642                                  
  6643                                  gcd:
  6644 00004AD3 E8EDFFFFFF                      call iabs
  6645 00004AD8 4889C3                          mov rbx, rax
  6646 00004ADB 4889F7                          mov rdi, rsi
  6647 00004ADE E8E2FFFFFF                      call iabs
  6648 00004AE3 4883F800                        cmp rax, 0
  6649 00004AE7 7502                            jne .L0
  6650 00004AE9 4893                            xchg rax, rbx
  6651                                  .L0:
  6652 00004AEB 4883FB00                        cmp rbx, 0
  6653 00004AEF 740C                            je .L1
  6654 00004AF1 4899                            cqo
  6655 00004AF3 48F7F3                          div rbx
  6656 00004AF6 4889D0                          mov rax, rdx
  6657 00004AF9 4893                            xchg rax, rbx
  6658 00004AFB EBEE                            jmp .L0
  6659                                  .L1:
  6660 00004AFD C3                              ret
  6661                                  
  6662                                  L_code_ptr_error:
  6663 00004AFE C8000000                        enter 0, 0
  6664 00004B02 48837D1802                      cmp COUNT, 2
  6665 00004B07 0F85C5070000                    jne L_error_arg_count_2
  6666 00004B0D 488B7520                        mov rsi, PARAM(0)
  6667                                          assert_interned_symbol(rsi)
    53 00004B11 803E41              <1>  cmp byte [%1], %2
    54 00004B14 0F8557080000        <1>  jne L_error_incorrect_type
  6668 00004B1A 488B7528                        mov rsi, PARAM(1)
  6669                                          assert_string(rsi)
    53 00004B1E 803E03              <1>  cmp byte [%1], %2
    54 00004B21 0F854A080000        <1>  jne L_error_incorrect_type
  6670 00004B27 48BF-                           mov rdi, fmt_scheme_error_part_1
  6670 00004B29 [E20E000000000000] 
  6671 00004B31 B800000000                      mov rax, 0
  6672                                          ENTER
    44 00004B36 C8000000            <1>  enter 0, 0
    45 00004B3A 4883E4F0            <1>  and rsp, ~15
  6673 00004B3E E8(00000000)                    call printf
  6674                                          LEAVE
    49 00004B43 C9                  <1>  leave
  6675 00004B44 488B7D20                        mov rdi, PARAM(0)
  6676 00004B48 E804EDFFFF                      call print_sexpr
  6677 00004B4D 48BF-                           mov rdi, fmt_scheme_error_part_2
  6677 00004B4F [F60E000000000000] 
  6678 00004B57 B800000000                      mov rax, 0
  6679                                          ENTER
    44 00004B5C C8000000            <1>  enter 0, 0
    45 00004B60 4883E4F0            <1>  and rsp, ~15
  6680 00004B64 E8(00000000)                    call printf
  6681                                          LEAVE
    49 00004B69 C9                  <1>  leave
  6682 00004B6A 488B4528                        mov rax, PARAM(1)       ; sob_string
  6683 00004B6E BE01000000                      mov rsi, 1              ; size = 1 byte
  6684 00004B73 488B5001                        mov rdx, qword [rax + 1] ; length
  6685 00004B77 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  6686 00004B7B 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  6687                                  	ENTER
    44 00004B83 C8000000            <1>  enter 0, 0
    45 00004B87 4883E4F0            <1>  and rsp, ~15
  6688 00004B8B E8(00000000)                    call fwrite
  6689                                  	LEAVE
    49 00004B90 C9                  <1>  leave
  6690 00004B91 48BF-                           mov rdi, fmt_scheme_error_part_3
  6690 00004B93 [380F000000000000] 
  6691 00004B9B B800000000                      mov rax, 0
  6692                                          ENTER
    44 00004BA0 C8000000            <1>  enter 0, 0
    45 00004BA4 4883E4F0            <1>  and rsp, ~15
  6693 00004BA8 E8(00000000)                    call printf
  6694                                          LEAVE
    49 00004BAD C9                  <1>  leave
  6695 00004BAE 48C7C0F7FFFFFF                  mov rax, -9
  6696 00004BB5 E8(00000000)                    call exit
  6697                                  
  6698                                  L_code_ptr_raw_less_than_rr:
  6699 00004BBA C8000000                        enter 0, 0
  6700 00004BBE 48837D1802                      cmp COUNT, 2
  6701 00004BC3 0F8509070000                    jne L_error_arg_count_2
  6702 00004BC9 488B7520                        mov rsi, PARAM(0)
  6703                                          assert_real(rsi)
    53 00004BCD 803E13              <1>  cmp byte [%1], %2
    54 00004BD0 0F859B070000        <1>  jne L_error_incorrect_type
  6704 00004BD6 488B7D28                        mov rdi, PARAM(1)
  6705                                          assert_real(rdi)
    53 00004BDA 803F13              <1>  cmp byte [%1], %2
    54 00004BDD 0F858E070000        <1>  jne L_error_incorrect_type
  6706 00004BE3 F20F104601                      movsd xmm0, qword [rsi + 1]
  6707 00004BE8 F20F104F01                      movsd xmm1, qword [rdi + 1]
  6708 00004BED 660F2FC1                        comisd xmm0, xmm1
  6709 00004BF1 730C                            jae .L_false
  6710 00004BF3 48B8-                           mov rax, sob_boolean_true
  6710 00004BF5 [0300000000000000] 
  6711 00004BFD EB0A                            jmp .L_exit
  6712                                  .L_false:
  6713 00004BFF 48B8-                           mov rax, sob_boolean_false
  6713 00004C01 [0200000000000000] 
  6714                                  .L_exit:
  6715 00004C09 C9                              leave
  6716 00004C0A C22000                          ret AND_KILL_FRAME(2)
  6717                                          
  6718                                  L_code_ptr_raw_less_than_zz:
  6719 00004C0D C8000000                	enter 0, 0
  6720 00004C11 48837D1802              	cmp COUNT, 2
  6721 00004C16 0F85B6060000            	jne L_error_arg_count_2
  6722 00004C1C 4C8B4520                	mov r8, PARAM(0)
  6723                                  	assert_integer(r8)
    53 00004C20 41803811            <1>  cmp byte [%1], %2
    54 00004C24 0F8547070000        <1>  jne L_error_incorrect_type
  6724 00004C2A 4C8B4D28                	mov r9, PARAM(1)
  6725                                  	assert_integer(r9)
    53 00004C2E 41803911            <1>  cmp byte [%1], %2
    54 00004C32 0F8539070000        <1>  jne L_error_incorrect_type
  6726 00004C38 498B7801                	mov rdi, qword [r8 + 1]
  6727 00004C3C 493B7901                	cmp rdi, qword [r9 + 1]
  6728 00004C40 7D0C                    	jge .L_false
  6729 00004C42 48B8-                   	mov rax, sob_boolean_true
  6729 00004C44 [0300000000000000] 
  6730 00004C4C EB0A                    	jmp .L_exit
  6731                                  .L_false:
  6732 00004C4E 48B8-                   	mov rax, sob_boolean_false
  6732 00004C50 [0200000000000000] 
  6733                                  .L_exit:
  6734 00004C58 C9                      	leave
  6735 00004C59 C22000                  	ret AND_KILL_FRAME(2)
  6736                                  
  6737                                  L_code_ptr_raw_less_than_qq:
  6738 00004C5C C8000000                        enter 0, 0
  6739 00004C60 48837D1802                      cmp COUNT, 2
  6740 00004C65 0F8567060000                    jne L_error_arg_count_2
  6741 00004C6B 488B7520                        mov rsi, PARAM(0)
  6742                                          assert_fraction(rsi)
    53 00004C6F 803E12              <1>  cmp byte [%1], %2
    54 00004C72 0F85F9060000        <1>  jne L_error_incorrect_type
  6743 00004C78 488B7D28                        mov rdi, PARAM(1)
  6744                                          assert_fraction(rdi)
    53 00004C7C 803F12              <1>  cmp byte [%1], %2
    54 00004C7F 0F85EC060000        <1>  jne L_error_incorrect_type
  6745 00004C85 488B4601                        mov rax, qword [rsi + 1] ; num1
  6746 00004C89 4899                            cqo
  6747 00004C8B 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  6748 00004C8F 4889C1                          mov rcx, rax
  6749 00004C92 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  6750 00004C96 4899                            cqo
  6751 00004C98 48F76F01                        imul qword [rdi + 1]          ; num2
  6752 00004C9C 4829C1                          sub rcx, rax
  6753 00004C9F 7D0C                            jge .L_false
  6754 00004CA1 48B8-                           mov rax, sob_boolean_true
  6754 00004CA3 [0300000000000000] 
  6755 00004CAB EB0A                            jmp .L_exit
  6756                                  .L_false:
  6757 00004CAD 48B8-                           mov rax, sob_boolean_false
  6757 00004CAF [0200000000000000] 
  6758                                  .L_exit:
  6759 00004CB7 C9                              leave
  6760 00004CB8 C22000                          ret AND_KILL_FRAME(2)
  6761                                  
  6762                                  L_code_ptr_raw_equal_rr:
  6763 00004CBB C8000000                        enter 0, 0
  6764 00004CBF 48837D1802                      cmp COUNT, 2
  6765 00004CC4 0F8508060000                    jne L_error_arg_count_2
  6766 00004CCA 488B7520                        mov rsi, PARAM(0)
  6767                                          assert_real(rsi)
    53 00004CCE 803E13              <1>  cmp byte [%1], %2
    54 00004CD1 0F859A060000        <1>  jne L_error_incorrect_type
  6768 00004CD7 488B7D28                        mov rdi, PARAM(1)
  6769                                          assert_real(rdi)
    53 00004CDB 803F13              <1>  cmp byte [%1], %2
    54 00004CDE 0F858D060000        <1>  jne L_error_incorrect_type
  6770 00004CE4 F20F104601                      movsd xmm0, qword [rsi + 1]
  6771 00004CE9 F20F104F01                      movsd xmm1, qword [rdi + 1]
  6772 00004CEE 660F2FC1                        comisd xmm0, xmm1
  6773 00004CF2 750C                            jne .L_false
  6774 00004CF4 48B8-                           mov rax, sob_boolean_true
  6774 00004CF6 [0300000000000000] 
  6775 00004CFE EB0A                            jmp .L_exit
  6776                                  .L_false:
  6777 00004D00 48B8-                           mov rax, sob_boolean_false
  6777 00004D02 [0200000000000000] 
  6778                                  .L_exit:
  6779 00004D0A C9                              leave
  6780 00004D0B C22000                          ret AND_KILL_FRAME(2)
  6781                                          
  6782                                  L_code_ptr_raw_equal_zz:
  6783 00004D0E C8000000                	enter 0, 0
  6784 00004D12 48837D1802              	cmp COUNT, 2
  6785 00004D17 0F85B5050000            	jne L_error_arg_count_2
  6786 00004D1D 4C8B4520                	mov r8, PARAM(0)
  6787                                  	assert_integer(r8)
    53 00004D21 41803811            <1>  cmp byte [%1], %2
    54 00004D25 0F8546060000        <1>  jne L_error_incorrect_type
  6788 00004D2B 4C8B4D28                	mov r9, PARAM(1)
  6789                                  	assert_integer(r9)
    53 00004D2F 41803911            <1>  cmp byte [%1], %2
    54 00004D33 0F8538060000        <1>  jne L_error_incorrect_type
  6790 00004D39 498B7801                	mov rdi, qword [r8 + 1]
  6791 00004D3D 493B7901                	cmp rdi, qword [r9 + 1]
  6792 00004D41 750C                    	jne .L_false
  6793 00004D43 48B8-                   	mov rax, sob_boolean_true
  6793 00004D45 [0300000000000000] 
  6794 00004D4D EB0A                    	jmp .L_exit
  6795                                  .L_false:
  6796 00004D4F 48B8-                   	mov rax, sob_boolean_false
  6796 00004D51 [0200000000000000] 
  6797                                  .L_exit:
  6798 00004D59 C9                      	leave
  6799 00004D5A C22000                  	ret AND_KILL_FRAME(2)
  6800                                  
  6801                                  L_code_ptr_raw_equal_qq:
  6802 00004D5D C8000000                        enter 0, 0
  6803 00004D61 48837D1802                      cmp COUNT, 2
  6804 00004D66 0F8566050000                    jne L_error_arg_count_2
  6805 00004D6C 488B7520                        mov rsi, PARAM(0)
  6806                                          assert_fraction(rsi)
    53 00004D70 803E12              <1>  cmp byte [%1], %2
    54 00004D73 0F85F8050000        <1>  jne L_error_incorrect_type
  6807 00004D79 488B7D28                        mov rdi, PARAM(1)
  6808                                          assert_fraction(rdi)
    53 00004D7D 803F12              <1>  cmp byte [%1], %2
    54 00004D80 0F85EB050000        <1>  jne L_error_incorrect_type
  6809 00004D86 488B4601                        mov rax, qword [rsi + 1] ; num1
  6810 00004D8A 4899                            cqo
  6811 00004D8C 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  6812 00004D90 4889C1                          mov rcx, rax
  6813 00004D93 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  6814 00004D97 4899                            cqo
  6815 00004D99 48F76F01                        imul qword [rdi + 1]          ; num2
  6816 00004D9D 4829C1                          sub rcx, rax
  6817 00004DA0 750C                            jne .L_false
  6818 00004DA2 48B8-                           mov rax, sob_boolean_true
  6818 00004DA4 [0300000000000000] 
  6819 00004DAC EB0A                            jmp .L_exit
  6820                                  .L_false:
  6821 00004DAE 48B8-                           mov rax, sob_boolean_false
  6821 00004DB0 [0200000000000000] 
  6822                                  .L_exit:
  6823 00004DB8 C9                              leave
  6824 00004DB9 C22000                          ret AND_KILL_FRAME(2)
  6825                                  
  6826                                  L_code_ptr_quotient:
  6827 00004DBC C8000000                        enter 0, 0
  6828 00004DC0 48837D1802                      cmp COUNT, 2
  6829 00004DC5 0F8507050000                    jne L_error_arg_count_2
  6830 00004DCB 488B7520                        mov rsi, PARAM(0)
  6831                                          assert_integer(rsi)
    53 00004DCF 803E11              <1>  cmp byte [%1], %2
    54 00004DD2 0F8599050000        <1>  jne L_error_incorrect_type
  6832 00004DD8 488B7D28                        mov rdi, PARAM(1)
  6833                                          assert_integer(rdi)
    53 00004DDC 803F11              <1>  cmp byte [%1], %2
    54 00004DDF 0F858C050000        <1>  jne L_error_incorrect_type
  6834 00004DE5 488B4601                        mov rax, qword [rsi + 1]
  6835 00004DE9 488B5F01                        mov rbx, qword [rdi + 1]
  6836 00004DED 4883FB00                        cmp rbx, 0
  6837 00004DF1 0F84AB050000                    je L_error_division_by_zero
  6838 00004DF7 4899                            cqo
  6839 00004DF9 48F7FB                          idiv rbx
  6840 00004DFC 4889C7                          mov rdi, rax
  6841 00004DFF E8E8030000                      call make_integer
  6842 00004E04 C9                              leave
  6843 00004E05 C22000                          ret AND_KILL_FRAME(2)
  6844                                          
  6845                                  L_code_ptr_remainder:
  6846 00004E08 C8000000                        enter 0, 0
  6847 00004E0C 48837D1802                      cmp COUNT, 2
  6848 00004E11 0F85BB040000                    jne L_error_arg_count_2
  6849 00004E17 488B7520                        mov rsi, PARAM(0)
  6850                                          assert_integer(rsi)
    53 00004E1B 803E11              <1>  cmp byte [%1], %2
    54 00004E1E 0F854D050000        <1>  jne L_error_incorrect_type
  6851 00004E24 488B7D28                        mov rdi, PARAM(1)
  6852                                          assert_integer(rdi)
    53 00004E28 803F11              <1>  cmp byte [%1], %2
    54 00004E2B 0F8540050000        <1>  jne L_error_incorrect_type
  6853 00004E31 488B4601                        mov rax, qword [rsi + 1]
  6854 00004E35 488B5F01                        mov rbx, qword [rdi + 1]
  6855 00004E39 4883FB00                        cmp rbx, 0
  6856 00004E3D 0F845F050000                    je L_error_division_by_zero
  6857 00004E43 4899                            cqo
  6858 00004E45 48F7FB                          idiv rbx
  6859 00004E48 4889D7                          mov rdi, rdx
  6860 00004E4B E89C030000                      call make_integer
  6861 00004E50 C9                              leave
  6862 00004E51 C22000                          ret AND_KILL_FRAME(2)
  6863                                  
  6864                                  L_code_ptr_set_car:
  6865 00004E54 C8000000                        enter 0, 0
  6866 00004E58 48837D1802                      cmp COUNT, 2
  6867 00004E5D 0F856F040000                    jne L_error_arg_count_2
  6868 00004E63 488B4520                        mov rax, PARAM(0)
  6869                                          assert_pair(rax)
    53 00004E67 803821              <1>  cmp byte [%1], %2
    54 00004E6A 0F8501050000        <1>  jne L_error_incorrect_type
  6870 00004E70 488B5D28                        mov rbx, PARAM(1)
  6871 00004E74 48895801                        mov SOB_PAIR_CAR(rax), rbx
  6872 00004E78 48B8-                           mov rax, sob_void
  6872 00004E7A [0000000000000000] 
  6873 00004E82 C9                              leave
  6874 00004E83 C22000                          ret AND_KILL_FRAME(2)
  6875                                  
  6876                                  L_code_ptr_set_cdr:
  6877 00004E86 C8000000                        enter 0, 0
  6878 00004E8A 48837D1802                      cmp COUNT, 2
  6879 00004E8F 0F853D040000                    jne L_error_arg_count_2
  6880 00004E95 488B4520                        mov rax, PARAM(0)
  6881                                          assert_pair(rax)
    53 00004E99 803821              <1>  cmp byte [%1], %2
    54 00004E9C 0F85CF040000        <1>  jne L_error_incorrect_type
  6882 00004EA2 488B5D28                        mov rbx, PARAM(1)
  6883 00004EA6 48895809                        mov SOB_PAIR_CDR(rax), rbx
  6884 00004EAA 48B8-                           mov rax, sob_void
  6884 00004EAC [0000000000000000] 
  6885 00004EB4 C9                              leave
  6886 00004EB5 C22000                          ret AND_KILL_FRAME(2)
  6887                                  
  6888                                  L_code_ptr_string_ref:
  6889 00004EB8 C8000000                        enter 0, 0
  6890 00004EBC 48837D1802                      cmp COUNT, 2
  6891 00004EC1 0F850B040000                    jne L_error_arg_count_2
  6892 00004EC7 488B7D20                        mov rdi, PARAM(0)
  6893                                          assert_string(rdi)
    53 00004ECB 803F03              <1>  cmp byte [%1], %2
    54 00004ECE 0F859D040000        <1>  jne L_error_incorrect_type
  6894 00004ED4 488B7528                        mov rsi, PARAM(1)
  6895                                          assert_integer(rsi)
    53 00004ED8 803E11              <1>  cmp byte [%1], %2
    54 00004EDB 0F8590040000        <1>  jne L_error_incorrect_type
  6896 00004EE1 488B5701                        mov rdx, qword [rdi + 1]
  6897 00004EE5 488B4E01                        mov rcx, qword [rsi + 1]
  6898 00004EE9 4839D1                          cmp rcx, rdx
  6899 00004EEC 0F8D14030000                    jge L_error_integer_range
  6900 00004EF2 4883F900                        cmp rcx, 0
  6901 00004EF6 0F8C0A030000                    jl L_error_integer_range
  6902 00004EFC 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  6903 00004F00 BF02000000                      mov rdi, 2
  6904 00004F05 E8C6E6FFFF                      call malloc
  6905 00004F0A C60002                          mov byte [rax], T_char
  6906 00004F0D 885801                          mov byte [rax + 1], bl
  6907 00004F10 C9                              leave
  6908 00004F11 C22000                          ret AND_KILL_FRAME(2)
  6909                                  
  6910                                  L_code_ptr_vector_ref:
  6911 00004F14 C8000000                        enter 0, 0
  6912 00004F18 48837D1802                      cmp COUNT, 2
  6913 00004F1D 0F85AF030000                    jne L_error_arg_count_2
  6914 00004F23 488B7D20                        mov rdi, PARAM(0)
  6915                                          assert_vector(rdi)
    53 00004F27 803F22              <1>  cmp byte [%1], %2
    54 00004F2A 0F8541040000        <1>  jne L_error_incorrect_type
  6916 00004F30 488B7528                        mov rsi, PARAM(1)
  6917                                          assert_integer(rsi)
    53 00004F34 803E11              <1>  cmp byte [%1], %2
    54 00004F37 0F8534040000        <1>  jne L_error_incorrect_type
  6918 00004F3D 488B5701                        mov rdx, qword [rdi + 1]
  6919 00004F41 488B4E01                        mov rcx, qword [rsi + 1]
  6920 00004F45 4839D1                          cmp rcx, rdx
  6921 00004F48 0F8DB8020000                    jge L_error_integer_range
  6922 00004F4E 4883F900                        cmp rcx, 0
  6923 00004F52 0F8CAE020000                    jl L_error_integer_range
  6924 00004F58 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  6925 00004F5D C9                              leave
  6926 00004F5E C22000                          ret AND_KILL_FRAME(2)
  6927                                  
  6928                                  L_code_ptr_vector_set:
  6929 00004F61 C8000000                        enter 0, 0
  6930 00004F65 48837D1803                      cmp COUNT, 3
  6931 00004F6A 0F85CC030000                    jne L_error_arg_count_3
  6932 00004F70 488B7D20                        mov rdi, PARAM(0)
  6933                                          assert_vector(rdi)
    53 00004F74 803F22              <1>  cmp byte [%1], %2
    54 00004F77 0F85F4030000        <1>  jne L_error_incorrect_type
  6934 00004F7D 488B7528                        mov rsi, PARAM(1)
  6935                                          assert_integer(rsi)
    53 00004F81 803E11              <1>  cmp byte [%1], %2
    54 00004F84 0F85E7030000        <1>  jne L_error_incorrect_type
  6936 00004F8A 488B5701                        mov rdx, qword [rdi + 1]
  6937 00004F8E 488B4E01                        mov rcx, qword [rsi + 1]
  6938 00004F92 4839D1                          cmp rcx, rdx
  6939 00004F95 0F8D6B020000                    jge L_error_integer_range
  6940 00004F9B 4883F900                        cmp rcx, 0
  6941 00004F9F 0F8C61020000                    jl L_error_integer_range
  6942 00004FA5 488B4530                        mov rax, PARAM(2)
  6943 00004FA9 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  6944 00004FAE 48B8-                           mov rax, sob_void
  6944 00004FB0 [0000000000000000] 
  6945 00004FB8 C9                              leave
  6946 00004FB9 C22800                          ret AND_KILL_FRAME(3)
  6947                                  
  6948                                  L_code_ptr_string_set:
  6949 00004FBC C8000000                        enter 0, 0
  6950 00004FC0 48837D1803                      cmp COUNT, 3
  6951 00004FC5 0F8571030000                    jne L_error_arg_count_3
  6952 00004FCB 488B7D20                        mov rdi, PARAM(0)
  6953                                          assert_string(rdi)
    53 00004FCF 803F03              <1>  cmp byte [%1], %2
    54 00004FD2 0F8599030000        <1>  jne L_error_incorrect_type
  6954 00004FD8 488B7528                        mov rsi, PARAM(1)
  6955                                          assert_integer(rsi)
    53 00004FDC 803E11              <1>  cmp byte [%1], %2
    54 00004FDF 0F858C030000        <1>  jne L_error_incorrect_type
  6956 00004FE5 488B5701                        mov rdx, qword [rdi + 1]
  6957 00004FE9 488B4E01                        mov rcx, qword [rsi + 1]
  6958 00004FED 4839D1                          cmp rcx, rdx
  6959 00004FF0 0F8D10020000                    jge L_error_integer_range
  6960 00004FF6 4883F900                        cmp rcx, 0
  6961 00004FFA 0F8C06020000                    jl L_error_integer_range
  6962 00005000 488B4530                        mov rax, PARAM(2)
  6963                                          assert_char(rax)
    53 00005004 803802              <1>  cmp byte [%1], %2
    54 00005007 0F8564030000        <1>  jne L_error_incorrect_type
  6964 0000500D 8A4001                          mov al, byte [rax + 1]
  6965 00005010 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  6966 00005014 48B8-                           mov rax, sob_void
  6966 00005016 [0000000000000000] 
  6967 0000501E C9                              leave
  6968 0000501F C22800                          ret AND_KILL_FRAME(3)
  6969                                  
  6970                                  L_code_ptr_make_vector:
  6971 00005022 C8000000                        enter 0, 0
  6972 00005026 48837D1802                      cmp COUNT, 2
  6973 0000502B 0F85A1020000                    jne L_error_arg_count_2
  6974 00005031 488B4D20                        mov rcx, PARAM(0)
  6975                                          assert_integer(rcx)
    53 00005035 803911              <1>  cmp byte [%1], %2
    54 00005038 0F8533030000        <1>  jne L_error_incorrect_type
  6976 0000503E 488B4901                        mov rcx, qword [rcx + 1]
  6977 00005042 4883F900                        cmp rcx, 0
  6978 00005046 0F8CBA010000                    jl L_error_integer_range
  6979 0000504C 488B5528                        mov rdx, PARAM(1)
  6980 00005050 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  6981 00005058 E873E5FFFF                      call malloc
  6982 0000505D C60022                          mov byte [rax], T_vector
  6983 00005060 48894801                        mov qword [rax + 1], rcx
  6984 00005064 41B800000000                    mov r8, 0
  6985                                  .L0:
  6986 0000506A 4939C8                          cmp r8, rcx
  6987 0000506D 740A                            je .L1
  6988 0000506F 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  6989 00005074 49FFC0                          inc r8
  6990 00005077 EBF1                            jmp .L0
  6991                                  .L1:
  6992 00005079 C9                              leave
  6993 0000507A C22000                          ret AND_KILL_FRAME(2)
  6994                                          
  6995                                  L_code_ptr_make_string:
  6996 0000507D C8000000                        enter 0, 0
  6997 00005081 48837D1802                      cmp COUNT, 2
  6998 00005086 0F8546020000                    jne L_error_arg_count_2
  6999 0000508C 488B4D20                        mov rcx, PARAM(0)
  7000                                          assert_integer(rcx)
    53 00005090 803911              <1>  cmp byte [%1], %2
    54 00005093 0F85D8020000        <1>  jne L_error_incorrect_type
  7001 00005099 488B4901                        mov rcx, qword [rcx + 1]
  7002 0000509D 4883F900                        cmp rcx, 0
  7003 000050A1 0F8C5F010000                    jl L_error_integer_range
  7004 000050A7 488B5528                        mov rdx, PARAM(1)
  7005                                          assert_char(rdx)
    53 000050AB 803A02              <1>  cmp byte [%1], %2
    54 000050AE 0F85BD020000        <1>  jne L_error_incorrect_type
  7006 000050B4 8A5201                          mov dl, byte [rdx + 1]
  7007 000050B7 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  7008 000050BB E810E5FFFF                      call malloc
  7009 000050C0 C60003                          mov byte [rax], T_string
  7010 000050C3 48894801                        mov qword [rax + 1], rcx
  7011 000050C7 41B800000000                    mov r8, 0
  7012                                  .L0:
  7013 000050CD 4939C8                          cmp r8, rcx
  7014 000050D0 740A                            je .L1
  7015 000050D2 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  7016 000050D7 49FFC0                          inc r8
  7017 000050DA EBF1                            jmp .L0
  7018                                  .L1:
  7019 000050DC C9                              leave
  7020 000050DD C22000                          ret AND_KILL_FRAME(2)
  7021                                  
  7022                                  L_code_ptr_numerator:
  7023 000050E0 C8000000                        enter 0, 0
  7024 000050E4 48837D1801                      cmp COUNT, 1
  7025 000050E9 0F85AE010000                    jne L_error_arg_count_1
  7026 000050EF 488B4520                        mov rax, PARAM(0)
  7027                                          assert_fraction(rax)
    53 000050F3 803812              <1>  cmp byte [%1], %2
    54 000050F6 0F8575020000        <1>  jne L_error_incorrect_type
  7028 000050FC 488B7801                        mov rdi, qword [rax + 1]
  7029 00005100 E8E7000000                      call make_integer
  7030 00005105 C9                              leave
  7031 00005106 C21800                          ret AND_KILL_FRAME(1)
  7032                                          
  7033                                  L_code_ptr_denominator:
  7034 00005109 C8000000                        enter 0, 0
  7035 0000510D 48837D1801                      cmp COUNT, 1
  7036 00005112 0F8585010000                    jne L_error_arg_count_1
  7037 00005118 488B4520                        mov rax, PARAM(0)
  7038                                          assert_fraction(rax)
    53 0000511C 803812              <1>  cmp byte [%1], %2
    54 0000511F 0F854C020000        <1>  jne L_error_incorrect_type
  7039 00005125 488B7809                        mov rdi, qword [rax + 1 + 8]
  7040 00005129 E8BE000000                      call make_integer
  7041 0000512E C9                              leave
  7042 0000512F C21800                          ret AND_KILL_FRAME(1)
  7043                                  
  7044                                  L_code_ptr_is_eq:
  7045 00005132 C8000000                	enter 0, 0
  7046 00005136 48837D1802              	cmp COUNT, 2
  7047 0000513B 0F8591010000            	jne L_error_arg_count_2
  7048 00005141 488B7D20                	mov rdi, PARAM(0)
  7049 00005145 488B7528                	mov rsi, PARAM(1)
  7050 00005149 4839F7                  	cmp rdi, rsi
  7051 0000514C 746C                    	je .L_eq_true
  7052 0000514E 8A17                    	mov dl, byte [rdi]
  7053 00005150 3A16                    	cmp dl, byte [rsi]
  7054 00005152 7572                    	jne .L_eq_false
  7055 00005154 80FA02                  	cmp dl, T_char
  7056 00005157 7459                    	je .L_char
  7057 00005159 80FA41                  	cmp dl, T_interned_symbol
  7058 0000515C 7440                    	je .L_interned_symbol
  7059 0000515E 80FA42                          cmp dl, T_uninterned_symbol
  7060 00005161 7443                            je .L_uninterned_symbol
  7061 00005163 80FA13                  	cmp dl, T_real
  7062 00005166 742E                    	je .L_real
  7063 00005168 80FA12                  	cmp dl, T_fraction
  7064 0000516B 7413                    	je .L_fraction
  7065 0000516D 80FA11                          cmp dl, T_integer
  7066 00005170 7402                            je .L_integer
  7067 00005172 EB52                    	jmp .L_eq_false
  7068                                  .L_integer:
  7069 00005174 488B4601                        mov rax, qword [rsi + 1]
  7070 00005178 483B4701                        cmp rax, qword [rdi + 1]
  7071 0000517C 7548                            jne .L_eq_false
  7072 0000517E EB3A                            jmp .L_eq_true
  7073                                  .L_fraction:
  7074 00005180 488B4601                	mov rax, qword [rsi + 1]
  7075 00005184 483B4701                	cmp rax, qword [rdi + 1]
  7076 00005188 753C                    	jne .L_eq_false
  7077 0000518A 488B4609                	mov rax, qword [rsi + 1 + 8]
  7078 0000518E 483B4709                	cmp rax, qword [rdi + 1 + 8]
  7079 00005192 7532                    	jne .L_eq_false
  7080 00005194 EB24                    	jmp .L_eq_true
  7081                                  .L_real:
  7082 00005196 488B4601                	mov rax, qword [rsi + 1]
  7083 0000519A 483B4701                	cmp rax, qword [rdi + 1]
  7084                                  .L_interned_symbol:
  7085                                  	; never reached, because interned_symbols are static!
  7086                                  	; but I'm keeping it in case, I'll ever change
  7087                                  	; the implementation
  7088 0000519E 488B4601                	mov rax, qword [rsi + 1]
  7089 000051A2 483B4701                	cmp rax, qword [rdi + 1]
  7090                                  .L_uninterned_symbol:
  7091 000051A6 4C8B4701                        mov r8, qword [rdi + 1]
  7092 000051AA 4C3B4601                        cmp r8, qword [rsi + 1]
  7093 000051AE 7516                            jne .L_eq_false
  7094 000051B0 EB08                            jmp .L_eq_true
  7095                                  .L_char:
  7096 000051B2 8A5E01                  	mov bl, byte [rsi + 1]
  7097 000051B5 3A5F01                  	cmp bl, byte [rdi + 1]
  7098 000051B8 750C                    	jne .L_eq_false
  7099                                  .L_eq_true:
  7100 000051BA 48B8-                   	mov rax, sob_boolean_true
  7100 000051BC [0300000000000000] 
  7101 000051C4 EB0A                    	jmp .L_eq_exit
  7102                                  .L_eq_false:
  7103 000051C6 48B8-                   	mov rax, sob_boolean_false
  7103 000051C8 [0200000000000000] 
  7104                                  .L_eq_exit:
  7105 000051D0 C9                      	leave
  7106 000051D1 C22000                  	ret AND_KILL_FRAME(2)
  7107                                  
  7108                                  make_real:
  7109 000051D4 C8000000                        enter 0, 0
  7110 000051D8 BF09000000                      mov rdi, (1 + 8)
  7111 000051DD E8EEE3FFFF                      call malloc
  7112 000051E2 C60013                          mov byte [rax], T_real
  7113 000051E5 F20F114001                      movsd qword [rax + 1], xmm0
  7114 000051EA C9                              leave 
  7115 000051EB C3                              ret
  7116                                          
  7117                                  make_integer:
  7118 000051EC C8000000                        enter 0, 0
  7119 000051F0 4889FE                          mov rsi, rdi
  7120 000051F3 BF09000000                      mov rdi, (1 + 8)
  7121 000051F8 E8D3E3FFFF                      call malloc
  7122 000051FD C60011                          mov byte [rax], T_integer
  7123 00005200 48897001                        mov qword [rax + 1], rsi
  7124 00005204 C9                              leave
  7125 00005205 C3                              ret
  7126                                          
  7127                                  L_error_integer_range:
  7128 00005206 488B3C25[00000000]              mov rdi, qword [stderr]
  7129 0000520E 48BE-                           mov rsi, fmt_integer_range
  7129 00005210 [AF0E000000000000] 
  7130 00005218 B800000000                      mov rax, 0
  7131                                          ENTER
    44 0000521D C8000000            <1>  enter 0, 0
    45 00005221 4883E4F0            <1>  and rsp, ~15
  7132 00005225 E8(00000000)                    call fprintf
  7133                                          LEAVE
    49 0000522A C9                  <1>  leave
  7134 0000522B 48C7C0FBFFFFFF                  mov rax, -5
  7135 00005232 E8(00000000)                    call exit
  7136                                  
  7137                                  L_error_arg_negative:
  7138 00005237 488B3C25[00000000]              mov rdi, qword [stderr]
  7139 0000523F 48BE-                           mov rsi, fmt_arg_negative
  7139 00005241 [870D000000000000] 
  7140 00005249 B800000000                      mov rax, 0
  7141                                          ENTER
    44 0000524E C8000000            <1>  enter 0, 0
    45 00005252 4883E4F0            <1>  and rsp, ~15
  7142 00005256 E8(00000000)                    call fprintf
  7143                                          LEAVE
    49 0000525B C9                  <1>  leave
  7144 0000525C 48C7C0FDFFFFFF                  mov rax, -3
  7145 00005263 E8(00000000)                    call exit
  7146                                  
  7147                                  L_error_arg_count_0:
  7148 00005268 488B3C25[00000000]              mov rdi, qword [stderr]
  7149 00005270 48BE-                           mov rsi, fmt_arg_count_0
  7149 00005272 [AD0D000000000000] 
  7150 0000527A 488B5518                        mov rdx, COUNT
  7151 0000527E B800000000                      mov rax, 0
  7152                                          ENTER
    44 00005283 C8000000            <1>  enter 0, 0
    45 00005287 4883E4F0            <1>  and rsp, ~15
  7153 0000528B E8(00000000)                    call fprintf
  7154                                          LEAVE
    49 00005290 C9                  <1>  leave
  7155 00005291 48C7C0FDFFFFFF                  mov rax, -3
  7156 00005298 E8(00000000)                    call exit
  7157                                  
  7158                                  L_error_arg_count_1:
  7159 0000529D 488B3C25[00000000]              mov rdi, qword [stderr]
  7160 000052A5 48BE-                           mov rsi, fmt_arg_count_1
  7160 000052A7 [D50D000000000000] 
  7161 000052AF 488B5518                        mov rdx, COUNT
  7162 000052B3 B800000000                      mov rax, 0
  7163                                          ENTER
    44 000052B8 C8000000            <1>  enter 0, 0
    45 000052BC 4883E4F0            <1>  and rsp, ~15
  7164 000052C0 E8(00000000)                    call fprintf
  7165                                          LEAVE
    49 000052C5 C9                  <1>  leave
  7166 000052C6 48C7C0FDFFFFFF                  mov rax, -3
  7167 000052CD E8(00000000)                    call exit
  7168                                  
  7169                                  L_error_arg_count_2:
  7170 000052D2 488B3C25[00000000]              mov rdi, qword [stderr]
  7171 000052DA 48BE-                           mov rsi, fmt_arg_count_2
  7171 000052DC [3B0E000000000000] 
  7172 000052E4 488B5518                        mov rdx, COUNT
  7173 000052E8 B800000000                      mov rax, 0
  7174                                          ENTER
    44 000052ED C8000000            <1>  enter 0, 0
    45 000052F1 4883E4F0            <1>  and rsp, ~15
  7175 000052F5 E8(00000000)                    call fprintf
  7176                                          LEAVE
    49 000052FA C9                  <1>  leave
  7177 000052FB 48C7C0FDFFFFFF                  mov rax, -3
  7178 00005302 E8(00000000)                    call exit
  7179                                  
  7180                                  L_error_arg_count_12:
  7181 00005307 488B3C25[00000000]              mov rdi, qword [stderr]
  7182 0000530F 48BE-                           mov rsi, fmt_arg_count_12
  7182 00005311 [FB0D000000000000] 
  7183 00005319 488B5518                        mov rdx, COUNT
  7184 0000531D B800000000                      mov rax, 0
  7185                                          ENTER
    44 00005322 C8000000            <1>  enter 0, 0
    45 00005326 4883E4F0            <1>  and rsp, ~15
  7186 0000532A E8(00000000)                    call fprintf
  7187                                          LEAVE
    49 0000532F C9                  <1>  leave
  7188 00005330 48C7C0FDFFFFFF                  mov rax, -3
  7189 00005337 E8(00000000)                    call exit
  7190                                  
  7191                                  L_error_arg_count_3:
  7192 0000533C 488B3C25[00000000]              mov rdi, qword [stderr]
  7193 00005344 48BE-                           mov rsi, fmt_arg_count_3
  7193 00005346 [620E000000000000] 
  7194 0000534E 488B5518                        mov rdx, COUNT
  7195 00005352 B800000000                      mov rax, 0
  7196                                          ENTER
    44 00005357 C8000000            <1>  enter 0, 0
    45 0000535B 4883E4F0            <1>  and rsp, ~15
  7197 0000535F E8(00000000)                    call fprintf
  7198                                          LEAVE
    49 00005364 C9                  <1>  leave
  7199 00005365 48C7C0FDFFFFFF                  mov rax, -3
  7200 0000536C E8(00000000)                    call exit
  7201                                          
  7202                                  L_error_incorrect_type:
  7203 00005371 488B3C25[00000000]              mov rdi, qword [stderr]
  7204 00005379 48BE-                           mov rsi, fmt_type
  7204 0000537B [8B0E000000000000] 
  7205 00005383 B800000000                      mov rax, 0
  7206                                          ENTER
    44 00005388 C8000000            <1>  enter 0, 0
    45 0000538C 4883E4F0            <1>  and rsp, ~15
  7207 00005390 E8(00000000)                    call fprintf
  7208                                          LEAVE
    49 00005395 C9                  <1>  leave
  7209 00005396 48C7C0FCFFFFFF                  mov rax, -4
  7210 0000539D E8(00000000)                    call exit
  7211                                  
  7212                                  L_error_division_by_zero:
  7213 000053A2 488B3C25[00000000]              mov rdi, qword [stderr]
  7214 000053AA 48BE-                           mov rsi, fmt_division_by_zero
  7214 000053AC [CC0E000000000000] 
  7215 000053B4 B800000000                      mov rax, 0
  7216                                          ENTER
    44 000053B9 C8000000            <1>  enter 0, 0
    45 000053BD 4883E4F0            <1>  and rsp, ~15
  7217 000053C1 E8(00000000)                    call fprintf
  7218                                          LEAVE
    49 000053C6 C9                  <1>  leave
  7219 000053C7 48C7C0F8FFFFFF                  mov rax, -8
  7220 000053CE E8(00000000)                    call exit
  7221                                  
  7222                                  section .data
  7223                                  gensym_count:
  7224 00000D7C 0000000000000000                dq 0
  7225                                  fmt_char:
  7226 00000D84 256300                          db `%c\0`
  7227                                  fmt_arg_negative:
  7228 00000D87 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
  7228 00000D90 7267756D656E742063-
  7228 00000D99 616E6E6F7420626520-
  7228 00000DA2 6E656761746976652E-
  7228 00000DAB 0A00               
  7229                                  fmt_arg_count_0:
  7230 00000DAD 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  7230 00000DB6 74696E67207A65726F-
  7230 00000DBF 20617267756D656E74-
  7230 00000DC8 732E20466F756E6420-
  7230 00000DD1 25640A00           
  7231                                  fmt_arg_count_1:
  7232 00000DD5 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  7232 00000DDE 74696E67206F6E6520-
  7232 00000DE7 617267756D656E742E-
  7232 00000DF0 20466F756E64202564-
  7232 00000DF9 0A00               
  7233                                  fmt_arg_count_12:
  7234 00000DFB 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  7234 00000E04 74696E67206F6E6520-
  7234 00000E0D 726571756972656420-
  7234 00000E16 616E64206F6E65206F-
  7234 00000E1F 7074696F6E616C2061-
  7234 00000E28 7267756D656E742E20-
  7234 00000E31 466F756E642025640A-
  7234 00000E3A 00                 
  7235                                  fmt_arg_count_2:
  7236 00000E3B 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  7236 00000E44 74696E672074776F20-
  7236 00000E4D 617267756D656E7473-
  7236 00000E56 2E20466F756E642025-
  7236 00000E5F 640A00             
  7237                                  fmt_arg_count_3:
  7238 00000E62 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  7238 00000E6B 74696E672074687265-
  7238 00000E74 6520617267756D656E-
  7238 00000E7D 74732E20466F756E64-
  7238 00000E86 2025640A00         
  7239                                  fmt_type:
  7240 00000E8B 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  7240 00000E94 696F6E207061737365-
  7240 00000E9D 6420696E636F727265-
  7240 00000EA6 637420747970650A00 
  7241                                  fmt_integer_range:
  7242 00000EAF 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  7242 00000EB8 7265637420696E7465-
  7242 00000EC1 6765722072616E6765-
  7242 00000ECA 0A00               
  7243                                  fmt_division_by_zero:
  7244 00000ECC 212121204469766973-             db `!!! Division by zero\n\0`
  7244 00000ED5 696F6E206279207A65-
  7244 00000EDE 726F0A00           
  7245                                  fmt_scheme_error_part_1:
  7246 00000EE2 0A2121212054686520-             db `\n!!! The procedure \0`
  7246 00000EEB 70726F636564757265-
  7246 00000EF4 2000               
  7247                                  fmt_scheme_error_part_2:
  7248 00000EF6 2061736B656420746F-             db ` asked to terminate the program\n`
  7248 00000EFF 207465726D696E6174-
  7248 00000F08 65207468652070726F-
  7248 00000F11 6772616D0A         
  7249 00000F16 202020207769746820-             db `    with the following message:\n\n\0`
  7249 00000F1F 74686520666F6C6C6F-
  7249 00000F28 77696E67206D657373-
  7249 00000F31 6167653A0A0A00     
  7250                                  fmt_scheme_error_part_3:
  7251 00000F38 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  7251 00000F41 210A0A00           
