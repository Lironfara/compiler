     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "boolean-false?"
   441 0000056E 0E00000000000000        	dq 14
   442 00000576 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   443 0000057E 66616C73653F            	db 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3F
   444                                  	; L_constants + 1412:
   445 00000584 03                      	db T_string	; "boolean-true?"
   446 00000585 0D00000000000000        	dq 13
   447 0000058D 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   448 00000595 747275653F              	db 0x74, 0x72, 0x75, 0x65, 0x3F
   449                                  	; L_constants + 1434:
   450 0000059A 03                      	db T_string	; "primitive?"
   451 0000059B 0A00000000000000        	dq 10
   452 000005A3 7072696D69746976        	db 0x70, 0x72, 0x69, 0x6D, 0x69, 0x74, 0x69, 0x76
   453 000005AB 653F                    	db 0x65, 0x3F
   454                                  	; L_constants + 1453:
   455 000005AD 03                      	db T_string	; "length"
   456 000005AE 0600000000000000        	dq 6
   457 000005B6 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   458                                  	; L_constants + 1468:
   459 000005BC 03                      	db T_string	; "make-list"
   460 000005BD 0900000000000000        	dq 9
   461 000005C5 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   462 000005CD 74                      	db 0x74
   463                                  	; L_constants + 1486:
   464 000005CE 03                      	db T_string	; "return"
   465 000005CF 0600000000000000        	dq 6
   466 000005D7 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
   467                                  	; L_constants + 1501:
   468 000005DD 03                      	db T_string	; "with"
   469 000005DE 0400000000000000        	dq 4
   470 000005E6 77697468                	db 0x77, 0x69, 0x74, 0x68
   471                                  	; L_constants + 1514:
   472 000005EA 11                      	db T_integer	; 0
   473 000005EB 0000000000000000        	dq 0
   474                                  	; L_constants + 1523:
   475 000005F3 03                      	db T_string	; "crazy-ack"
   476 000005F4 0900000000000000        	dq 9
   477 000005FC 6372617A792D6163        	db 0x63, 0x72, 0x61, 0x7A, 0x79, 0x2D, 0x61, 0x63
   478 00000604 6B                      	db 0x6B
   479                                  	; L_constants + 1541:
   480 00000605 11                      	db T_integer	; 1
   481 00000606 0100000000000000        	dq 1
   482                                  	; L_constants + 1550:
   483 0000060E 11                      	db T_integer	; 7
   484 0000060F 0700000000000000        	dq 7
   485                                  	; L_constants + 1559:
   486 00000617 11                      	db T_integer	; 2
   487 00000618 0200000000000000        	dq 2
   488                                  	; L_constants + 1568:
   489 00000620 11                      	db T_integer	; 61
   490 00000621 3D00000000000000        	dq 61
   491                                  	; L_constants + 1577:
   492 00000629 11                      	db T_integer	; 3
   493 0000062A 0300000000000000        	dq 3
   494                                  	; L_constants + 1586:
   495 00000632 11                      	db T_integer	; 316
   496 00000633 3C01000000000000        	dq 316
   497                                  	; L_constants + 1595:
   498 0000063B 11                      	db T_integer	; 5
   499 0000063C 0500000000000000        	dq 5
   500                                  	; L_constants + 1604:
   501 00000644 11                      	db T_integer	; 636
   502 00000645 7C02000000000000        	dq 636
   503                                  	; L_constants + 1613:
   504 0000064D 03                      	db T_string	; "whatever"
   505 0000064E 0800000000000000        	dq 8
   506 00000656 7768617465766572        	db 0x77, 0x68, 0x61, 0x74, 0x65, 0x76, 0x65, 0x72
   507                                  	; L_constants + 1630:
   508 0000065E 41                      	db T_interned_symbol	; whatever
   509 0000065F [4D06000000000000]      	dq L_constants + 1613
   510                                  free_var_0:	; location of __bin-add-zz
   511 00000667 [6F06000000000000]      	dq .undefined_object
   512                                  .undefined_object:
   513 0000066F 05                      	db T_undefined
   514 00000670 [BD02000000000000]      	dq L_constants + 701
   515                                  
   516                                  free_var_1:	; location of __bin-apply
   517 00000678 [8006000000000000]      	dq .undefined_object
   518                                  .undefined_object:
   519 00000680 05                      	db T_undefined
   520 00000681 [0102000000000000]      	dq L_constants + 513
   521                                  
   522                                  free_var_2:	; location of __bin-equal-zz
   523 00000689 [9106000000000000]      	dq .undefined_object
   524                                  .undefined_object:
   525 00000691 05                      	db T_undefined
   526 00000692 [9E03000000000000]      	dq L_constants + 926
   527                                  
   528                                  free_var_3:	; location of __bin-sub-zz
   529 0000069A [A206000000000000]      	dq .undefined_object
   530                                  .undefined_object:
   531 000006A2 05                      	db T_undefined
   532 000006A3 [D202000000000000]      	dq L_constants + 722
   533                                  
   534                                  free_var_4:	; location of crazy-ack
   535 000006AB [B306000000000000]      	dq .undefined_object
   536                                  .undefined_object:
   537 000006B3 05                      	db T_undefined
   538 000006B4 [F305000000000000]      	dq L_constants + 1523
   539                                  
   540                                  free_var_5:	; location of with
   541 000006BC [C406000000000000]      	dq .undefined_object
   542                                  .undefined_object:
   543 000006C4 05                      	db T_undefined
   544 000006C5 [DD05000000000000]      	dq L_constants + 1501
   545                                  
   546                                  free_var_6:	; location of zero?
   547 000006CD [D506000000000000]      	dq .undefined_object
   548                                  .undefined_object:
   549 000006D5 05                      	db T_undefined
   550 000006D6 [E201000000000000]      	dq L_constants + 482
   551                                  
   552                                  
   553                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
   554                                  global main
   555                                  section .text
   556                                  main:
   557 00000000 C8000000                        enter 0, 0
   558 00000004 6A00                            push 0
   559 00000006 6A00                            push 0
   560 00000008 68[3F1D0000]                    push Lend
   561 0000000D C8000000                        enter 0, 0
   562                                  	; building closure for zero?
   563 00000011 48BF-                   	mov rdi, free_var_6
   563 00000013 [CD06000000000000] 
   564 0000001B 48BE-                   	mov rsi, L_code_ptr_is_zero
   564 0000001D [322F000000000000] 
   565 00000025 E8B0260000              	call bind_primitive
   566                                  
   567                                  	; building closure for __bin-apply
   568 0000002A 48BF-                   	mov rdi, free_var_1
   568 0000002C [7806000000000000] 
   569 00000034 48BE-                   	mov rsi, L_code_ptr_bin_apply
   569 00000036 [4A28000000000000] 
   570 0000003E E897260000              	call bind_primitive
   571                                  
   572                                  	; building closure for __bin-add-zz
   573 00000043 48BF-                   	mov rdi, free_var_0
   573 00000045 [6706000000000000] 
   574 0000004D 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_zz
   574 0000004F [D730000000000000] 
   575 00000057 E87E260000              	call bind_primitive
   576                                  
   577                                  	; building closure for __bin-sub-zz
   578 0000005C 48BF-                   	mov rdi, free_var_3
   578 0000005E [9A06000000000000] 
   579 00000066 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_zz
   579 00000068 [7731000000000000] 
   580 00000070 E865260000              	call bind_primitive
   581                                  
   582                                  	; building closure for __bin-equal-zz
   583 00000075 48BF-                   	mov rdi, free_var_2
   583 00000077 [8906000000000000] 
   584 0000007F 48BE-                   	mov rsi, L_code_ptr_raw_equal_zz
   584 00000081 [EC35000000000000] 
   585 00000089 E84C260000              	call bind_primitive
   586                                  
   587 0000008E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   588 00000093 E8121E0000              	call malloc
   589 00000098 50                      	push rax
   590 00000099 BF00000000              	mov rdi, 8 * 0	; new rib
   591 0000009E E8071E0000              	call malloc
   592 000000A3 50                      	push rax
   593 000000A4 BF08000000              	mov rdi, 8 * 1	; extended env
   594 000000A9 E8FC1D0000              	call malloc
   595 000000AE 488B7D10                	mov rdi, ENV
   596 000000B2 BE00000000              	mov rsi, 0
   597 000000B7 BA01000000              	mov rdx, 1
   598                                  .L_lambda_simple_env_loop_00d8:	; ext_env[i + 1] <-- env[i]
   599 000000BC 4883FE00                	cmp rsi, 0
   600 000000C0 7410                    	je .L_lambda_simple_env_end_00d8
   601 000000C2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   602 000000C6 48890CD0                	mov qword [rax + 8 * rdx], rcx
   603 000000CA 48FFC6                  	inc rsi
   604 000000CD 48FFC2                  	inc rdx
   605 000000D0 EBEA                    	jmp .L_lambda_simple_env_loop_00d8
   606                                  .L_lambda_simple_env_end_00d8:
   607 000000D2 5B                      	pop rbx
   608 000000D3 BE00000000              	mov rsi, 0
   609                                  .L_lambda_simple_params_loop_00d8:	; copy params
   610 000000D8 4883FE00                	cmp rsi, 0
   611 000000DC 740E                    	je .L_lambda_simple_params_end_00d8
   612 000000DE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   613 000000E3 488914F3                	mov qword [rbx + 8 * rsi], rdx
   614 000000E7 48FFC6                  	inc rsi
   615 000000EA EBEC                    	jmp .L_lambda_simple_params_loop_00d8
   616                                  .L_lambda_simple_params_end_00d8:
   617 000000EC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   618 000000EF 4889C3                  	mov rbx, rax
   619 000000F2 58                      	pop rax
   620 000000F3 C60004                  	mov byte [rax], T_closure
   621 000000F6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   622 000000FA 48C74009[07010000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d8
   623 00000102 E98C000000              	jmp .L_lambda_simple_end_00d8
   624                                  .L_lambda_simple_code_00d8:	; lambda-simple body
   625 00000107 48837C241002            	cmp qword [rsp + 8 * 2], 2
   626 0000010D 740B                    	je .L_lambda_simple_arity_check_ok_00d8
   627 0000010F FF742410                	push qword [rsp + 8 * 2]
   628 00000113 6A02                    	push 2
   629 00000115 E9491D0000              	jmp L_error_incorrect_arity_simple
   630                                  .L_lambda_simple_arity_check_ok_00d8:
   631 0000011A C8000000                	enter 0, 0
   632                                  	; preparing a tail-call
   633 0000011E 488B4520                	mov rax, PARAM(0)	; param s
   634 00000122 50                      	push rax
   635 00000123 488B4528                	mov rax, PARAM(1)	; param f
   636 00000127 50                      	push rax
   637 00000128 6A02                    	push 2	; arg count
   638 0000012A 488B0425[78060000]      	mov rax, qword [free_var_1]	; free var __bin-apply
   639 00000132 803805                  	cmp byte [rax], T_undefined
   640 00000135 0F84421C0000            	je L_error_fvar_undefined
   641 0000013B 803804                  	cmp byte [rax], T_closure
   642 0000013E 0F85BD1C0000            	jne L_error_non_closure
   643 00000144 FF7001                  	push SOB_CLOSURE_ENV(rax)
   644 00000147 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
   645 0000014A FF7500                  	push qword[rbp]
   646 0000014D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
   647 00000150 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
   648 00000154 4983C603                	add r14, 3 	 ;adding so we will get to the params 
   649 00000158 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
   650 0000015C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
   651 0000015F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
   652 00000162 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
   653 00000167 4983C103                	add r9, 3 	 ;for getting to the params
   654 0000016B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
   655 0000016F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
   656                                  .L_tc_recycle_frame_loop_013f:
   657 00000172 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
   658 00000175 7410                    	je .L_tc_recycle_frame_done_013f
   659 00000177 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
   660 0000017A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
   661 0000017D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
   662 00000181 4983E808                	sub r8, 8	 ;move the top of the stack one down
   663 00000185 EBEB                    	jmp .L_tc_recycle_frame_loop_013f
   664                                  .L_tc_recycle_frame_done_013f:
   665 00000187 5D                      	pop rbp	 ;rbp now holding the old rbp of f
   666 00000188 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
   667 0000018C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
   668 0000018F C9                      	leave
   669 00000190 C22000                  	ret AND_KILL_FRAME(2)
   670                                  .L_lambda_simple_end_00d8:	; new closure is in rax
   671 00000193 48890425[BC060000]      	mov qword [free_var_5], rax
   672 0000019B 48B8-                   	mov rax, sob_void
   672 0000019D [0000000000000000] 
   673                                  
   674 000001A5 4889C7                  	mov rdi, rax
   675 000001A8 E8521F0000              	call print_sexpr_if_not_void
   676 000001AD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   677 000001B2 E8F31C0000              	call malloc
   678 000001B7 50                      	push rax
   679 000001B8 BF00000000              	mov rdi, 8 * 0	; new rib
   680 000001BD E8E81C0000              	call malloc
   681 000001C2 50                      	push rax
   682 000001C3 BF08000000              	mov rdi, 8 * 1	; extended env
   683 000001C8 E8DD1C0000              	call malloc
   684 000001CD 488B7D10                	mov rdi, ENV
   685 000001D1 BE00000000              	mov rsi, 0
   686 000001D6 BA01000000              	mov rdx, 1
   687                                  .L_lambda_simple_env_loop_00d9:	; ext_env[i + 1] <-- env[i]
   688 000001DB 4883FE00                	cmp rsi, 0
   689 000001DF 7410                    	je .L_lambda_simple_env_end_00d9
   690 000001E1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   691 000001E5 48890CD0                	mov qword [rax + 8 * rdx], rcx
   692 000001E9 48FFC6                  	inc rsi
   693 000001EC 48FFC2                  	inc rdx
   694 000001EF EBEA                    	jmp .L_lambda_simple_env_loop_00d9
   695                                  .L_lambda_simple_env_end_00d9:
   696 000001F1 5B                      	pop rbx
   697 000001F2 BE00000000              	mov rsi, 0
   698                                  .L_lambda_simple_params_loop_00d9:	; copy params
   699 000001F7 4883FE00                	cmp rsi, 0
   700 000001FB 740E                    	je .L_lambda_simple_params_end_00d9
   701 000001FD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   702 00000202 488914F3                	mov qword [rbx + 8 * rsi], rdx
   703 00000206 48FFC6                  	inc rsi
   704 00000209 EBEC                    	jmp .L_lambda_simple_params_loop_00d9
   705                                  .L_lambda_simple_params_end_00d9:
   706 0000020B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   707 0000020E 4889C3                  	mov rbx, rax
   708 00000211 58                      	pop rax
   709 00000212 C60004                  	mov byte [rax], T_closure
   710 00000215 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   711 00000219 48C74009[26020000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d9
   712 00000221 E992000000              	jmp .L_lambda_simple_end_00d9
   713                                  .L_lambda_simple_code_00d9:	; lambda-simple body
   714 00000226 48837C241001            	cmp qword [rsp + 8 * 2], 1
   715 0000022C 740B                    	je .L_lambda_simple_arity_check_ok_00d9
   716 0000022E FF742410                	push qword [rsp + 8 * 2]
   717 00000232 6A01                    	push 1
   718 00000234 E92A1C0000              	jmp L_error_incorrect_arity_simple
   719                                  .L_lambda_simple_arity_check_ok_00d9:
   720 00000239 C8000000                	enter 0, 0
   721                                  	; preparing a tail-call
   722 0000023D 48B8-                   	mov rax, L_constants + 1514
   722 0000023F [EA05000000000000] 
   723 00000247 50                      	push rax
   724 00000248 488B4520                	mov rax, PARAM(0)	; param n
   725 0000024C 50                      	push rax
   726 0000024D 6A02                    	push 2	; arg count
   727 0000024F 488B0425[89060000]      	mov rax, qword [free_var_2]	; free var __bin-equal-zz
   728 00000257 803805                  	cmp byte [rax], T_undefined
   729 0000025A 0F841D1B0000            	je L_error_fvar_undefined
   730 00000260 803804                  	cmp byte [rax], T_closure
   731 00000263 0F85981B0000            	jne L_error_non_closure
   732 00000269 FF7001                  	push SOB_CLOSURE_ENV(rax)
   733 0000026C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
   734 0000026F FF7500                  	push qword[rbp]
   735 00000272 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
   736 00000275 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
   737 00000279 4983C603                	add r14, 3 	 ;adding so we will get to the params 
   738 0000027D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
   739 00000281 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
   740 00000284 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
   741 00000287 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
   742 0000028C 4983C103                	add r9, 3 	 ;for getting to the params
   743 00000290 49C1E103                	shl r9, 3 	 ;multiplie by 8 
   744 00000294 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
   745                                  .L_tc_recycle_frame_loop_0140:
   746 00000297 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
   747 0000029A 7410                    	je .L_tc_recycle_frame_done_0140
   748 0000029C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
   749 0000029F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
   750 000002A2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
   751 000002A6 4983E808                	sub r8, 8	 ;move the top of the stack one down
   752 000002AA EBEB                    	jmp .L_tc_recycle_frame_loop_0140
   753                                  .L_tc_recycle_frame_done_0140:
   754 000002AC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
   755 000002AD 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
   756 000002B1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
   757 000002B4 C9                      	leave
   758 000002B5 C21800                  	ret AND_KILL_FRAME(1)
   759                                  .L_lambda_simple_end_00d9:	; new closure is in rax
   760 000002B8 48890425[CD060000]      	mov qword [free_var_6], rax
   761 000002C0 48B8-                   	mov rax, sob_void
   761 000002C2 [0000000000000000] 
   762                                  
   763 000002CA 4889C7                  	mov rdi, rax
   764 000002CD E82D1E0000              	call print_sexpr_if_not_void
   765                                  	; preparing a non-tail-call
   766 000002D2 48B8-                   	mov rax, L_constants + 1630
   766 000002D4 [5E06000000000000] 
   767 000002DC 50                      	push rax
   768 000002DD 48B8-                   	mov rax, L_constants + 1630
   768 000002DF [5E06000000000000] 
   769 000002E7 50                      	push rax
   770 000002E8 48B8-                   	mov rax, L_constants + 1630
   770 000002EA [5E06000000000000] 
   771 000002F2 50                      	push rax
   772 000002F3 48B8-                   	mov rax, L_constants + 1630
   772 000002F5 [5E06000000000000] 
   773 000002FD 50                      	push rax
   774 000002FE 6A04                    	push 4	; arg count
   775 00000300 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   776 00000305 E8A01B0000              	call malloc
   777 0000030A 50                      	push rax
   778 0000030B BF00000000              	mov rdi, 8 * 0	; new rib
   779 00000310 E8951B0000              	call malloc
   780 00000315 50                      	push rax
   781 00000316 BF08000000              	mov rdi, 8 * 1	; extended env
   782 0000031B E88A1B0000              	call malloc
   783 00000320 488B7D10                	mov rdi, ENV
   784 00000324 BE00000000              	mov rsi, 0
   785 00000329 BA01000000              	mov rdx, 1
   786                                  .L_lambda_simple_env_loop_00da:	; ext_env[i + 1] <-- env[i]
   787 0000032E 4883FE00                	cmp rsi, 0
   788 00000332 7410                    	je .L_lambda_simple_env_end_00da
   789 00000334 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   790 00000338 48890CD0                	mov qword [rax + 8 * rdx], rcx
   791 0000033C 48FFC6                  	inc rsi
   792 0000033F 48FFC2                  	inc rdx
   793 00000342 EBEA                    	jmp .L_lambda_simple_env_loop_00da
   794                                  .L_lambda_simple_env_end_00da:
   795 00000344 5B                      	pop rbx
   796 00000345 BE00000000              	mov rsi, 0
   797                                  .L_lambda_simple_params_loop_00da:	; copy params
   798 0000034A 4883FE00                	cmp rsi, 0
   799 0000034E 740E                    	je .L_lambda_simple_params_end_00da
   800 00000350 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   801 00000355 488914F3                	mov qword [rbx + 8 * rsi], rdx
   802 00000359 48FFC6                  	inc rsi
   803 0000035C EBEC                    	jmp .L_lambda_simple_params_loop_00da
   804                                  .L_lambda_simple_params_end_00da:
   805 0000035E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   806 00000361 4889C3                  	mov rbx, rax
   807 00000364 58                      	pop rax
   808 00000365 C60004                  	mov byte [rax], T_closure
   809 00000368 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   810 0000036C 48C74009[79030000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00da
   811 00000374 E97F190000              	jmp .L_lambda_simple_end_00da
   812                                  .L_lambda_simple_code_00da:	; lambda-simple body
   813 00000379 48837C241004            	cmp qword [rsp + 8 * 2], 4
   814 0000037F 740B                    	je .L_lambda_simple_arity_check_ok_00da
   815 00000381 FF742410                	push qword [rsp + 8 * 2]
   816 00000385 6A04                    	push 4
   817 00000387 E9D71A0000              	jmp L_error_incorrect_arity_simple
   818                                  .L_lambda_simple_arity_check_ok_00da:
   819 0000038C C8000000                	enter 0, 0
   820 00000390 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
   821 00000394 488903                  	mov qword [rbx], rax
   822                                  
   823 00000397 488B5D28                	mov rbx, qword [rbp + 8 * (4 + 1)]
   824 0000039B 488903                  	mov qword [rbx], rax
   825                                  
   826 0000039E 488B5D30                	mov rbx, qword [rbp + 8 * (4 + 2)]
   827 000003A2 488903                  	mov qword [rbx], rax
   828                                  
   829 000003A5 488B5D38                	mov rbx, qword [rbp + 8 * (4 + 3)]
   830 000003A9 488903                  	mov qword [rbx], rax
   831                                  
   832 000003AC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   833 000003B1 E8F41A0000              	call malloc
   834 000003B6 50                      	push rax
   835 000003B7 BF20000000              	mov rdi, 8 * 4	; new rib
   836 000003BC E8E91A0000              	call malloc
   837 000003C1 50                      	push rax
   838 000003C2 BF10000000              	mov rdi, 8 * 2	; extended env
   839 000003C7 E8DE1A0000              	call malloc
   840 000003CC 488B7D10                	mov rdi, ENV
   841 000003D0 BE00000000              	mov rsi, 0
   842 000003D5 BA01000000              	mov rdx, 1
   843                                  .L_lambda_simple_env_loop_00db:	; ext_env[i + 1] <-- env[i]
   844 000003DA 4883FE01                	cmp rsi, 1
   845 000003DE 7410                    	je .L_lambda_simple_env_end_00db
   846 000003E0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   847 000003E4 48890CD0                	mov qword [rax + 8 * rdx], rcx
   848 000003E8 48FFC6                  	inc rsi
   849 000003EB 48FFC2                  	inc rdx
   850 000003EE EBEA                    	jmp .L_lambda_simple_env_loop_00db
   851                                  .L_lambda_simple_env_end_00db:
   852 000003F0 5B                      	pop rbx
   853 000003F1 BE00000000              	mov rsi, 0
   854                                  .L_lambda_simple_params_loop_00db:	; copy params
   855 000003F6 4883FE04                	cmp rsi, 4
   856 000003FA 740E                    	je .L_lambda_simple_params_end_00db
   857 000003FC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   858 00000401 488914F3                	mov qword [rbx + 8 * rsi], rdx
   859 00000405 48FFC6                  	inc rsi
   860 00000408 EBEC                    	jmp .L_lambda_simple_params_loop_00db
   861                                  .L_lambda_simple_params_end_00db:
   862 0000040A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   863 0000040D 4889C3                  	mov rbx, rax
   864 00000410 58                      	pop rax
   865 00000411 C60004                  	mov byte [rax], T_closure
   866 00000414 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   867 00000418 48C74009[25040000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00db
   868 00000420 E943080000              	jmp .L_lambda_simple_end_00db
   869                                  .L_lambda_simple_code_00db:	; lambda-simple body
   870 00000425 48837C241003            	cmp qword [rsp + 8 * 2], 3
   871 0000042B 740B                    	je .L_lambda_simple_arity_check_ok_00db
   872 0000042D FF742410                	push qword [rsp + 8 * 2]
   873 00000431 6A03                    	push 3
   874 00000433 E92B1A0000              	jmp L_error_incorrect_arity_simple
   875                                  .L_lambda_simple_arity_check_ok_00db:
   876 00000438 C8000000                	enter 0, 0
   877                                  	; preparing a non-tail-call
   878 0000043C 488B4520                	mov rax, PARAM(0)	; param a
   879 00000440 50                      	push rax
   880 00000441 6A01                    	push 1	; arg count
   881 00000443 488B0425[CD060000]      	mov rax, qword [free_var_6]	; free var zero?
   882 0000044B 803805                  	cmp byte [rax], T_undefined
   883 0000044E 0F8429190000            	je L_error_fvar_undefined
   884 00000454 803804                  	cmp byte [rax], T_closure
   885 00000457 0F85A4190000            	jne L_error_non_closure
   886 0000045D FF7001                  	push SOB_CLOSURE_ENV(rax)
   887 00000460 FF5009                  	call SOB_CLOSURE_CODE(rax)
   888 00000463 483D[02000000]          	cmp rax, sob_boolean_false
   889 00000469 7429                    	je .L_if_else_00af
   890                                  	; preparing a non-tail-call
   891 0000046B 488B4528                	mov rax, PARAM(1)	; param b
   892 0000046F 50                      	push rax
   893 00000470 6A01                    	push 1	; arg count
   894 00000472 488B0425[CD060000]      	mov rax, qword [free_var_6]	; free var zero?
   895 0000047A 803805                  	cmp byte [rax], T_undefined
   896 0000047D 0F84FA180000            	je L_error_fvar_undefined
   897 00000483 803804                  	cmp byte [rax], T_closure
   898 00000486 0F8575190000            	jne L_error_non_closure
   899 0000048C FF7001                  	push SOB_CLOSURE_ENV(rax)
   900 0000048F FF5009                  	call SOB_CLOSURE_CODE(rax)
   901 00000492 EB0A                    	jmp .L_if_end_00af
   902                                  .L_if_else_00af:
   903 00000494 48B8-                   	mov rax, L_constants + 2
   903 00000496 [0200000000000000] 
   904                                  .L_if_end_00af:
   905 0000049E 483D[02000000]          	cmp rax, sob_boolean_false
   906 000004A4 747C                    	je .L_if_else_00b7
   907                                  	; preparing a tail-call
   908 000004A6 48B8-                   	mov rax, L_constants + 1541
   908 000004A8 [0506000000000000] 
   909 000004B0 50                      	push rax
   910 000004B1 488B4530                	mov rax, PARAM(2)	; param c
   911 000004B5 50                      	push rax
   912 000004B6 6A02                    	push 2	; arg count
   913 000004B8 488B0425[67060000]      	mov rax, qword [free_var_0]	; free var __bin-add-zz
   914 000004C0 803805                  	cmp byte [rax], T_undefined
   915 000004C3 0F84B4180000            	je L_error_fvar_undefined
   916 000004C9 803804                  	cmp byte [rax], T_closure
   917 000004CC 0F852F190000            	jne L_error_non_closure
   918 000004D2 FF7001                  	push SOB_CLOSURE_ENV(rax)
   919 000004D5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
   920 000004D8 FF7500                  	push qword[rbp]
   921 000004DB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
   922 000004DE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
   923 000004E2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
   924 000004E6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
   925 000004EA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
   926 000004ED 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
   927 000004F0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
   928 000004F5 4983C103                	add r9, 3 	 ;for getting to the params
   929 000004F9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
   930 000004FD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
   931                                  .L_tc_recycle_frame_loop_0141:
   932 00000500 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
   933 00000503 7410                    	je .L_tc_recycle_frame_done_0141
   934 00000505 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
   935 00000508 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
   936 0000050B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
   937 0000050F 4983E808                	sub r8, 8	 ;move the top of the stack one down
   938 00000513 EBEB                    	jmp .L_tc_recycle_frame_loop_0141
   939                                  .L_tc_recycle_frame_done_0141:
   940 00000515 5D                      	pop rbp	 ;rbp now holding the old rbp of f
   941 00000516 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
   942 0000051A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
   943 0000051D E942070000              	jmp .L_if_end_00b7
   944                                  .L_if_else_00b7:
   945                                  	; preparing a non-tail-call
   946 00000522 488B4520                	mov rax, PARAM(0)	; param a
   947 00000526 50                      	push rax
   948 00000527 6A01                    	push 1	; arg count
   949 00000529 488B0425[CD060000]      	mov rax, qword [free_var_6]	; free var zero?
   950 00000531 803805                  	cmp byte [rax], T_undefined
   951 00000534 0F8443180000            	je L_error_fvar_undefined
   952 0000053A 803804                  	cmp byte [rax], T_closure
   953 0000053D 0F85BE180000            	jne L_error_non_closure
   954 00000543 FF7001                  	push SOB_CLOSURE_ENV(rax)
   955 00000546 FF5009                  	call SOB_CLOSURE_CODE(rax)
   956 00000549 483D[02000000]          	cmp rax, sob_boolean_false
   957 0000054F 7429                    	je .L_if_else_00b0
   958                                  	; preparing a non-tail-call
   959 00000551 488B4530                	mov rax, PARAM(2)	; param c
   960 00000555 50                      	push rax
   961 00000556 6A01                    	push 1	; arg count
   962 00000558 488B0425[CD060000]      	mov rax, qword [free_var_6]	; free var zero?
   963 00000560 803805                  	cmp byte [rax], T_undefined
   964 00000563 0F8414180000            	je L_error_fvar_undefined
   965 00000569 803804                  	cmp byte [rax], T_closure
   966 0000056C 0F858F180000            	jne L_error_non_closure
   967 00000572 FF7001                  	push SOB_CLOSURE_ENV(rax)
   968 00000575 FF5009                  	call SOB_CLOSURE_CODE(rax)
   969 00000578 EB0A                    	jmp .L_if_end_00b0
   970                                  .L_if_else_00b0:
   971 0000057A 48B8-                   	mov rax, L_constants + 2
   971 0000057C [0200000000000000] 
   972                                  .L_if_end_00b0:
   973 00000584 483D[02000000]          	cmp rax, sob_boolean_false
   974 0000058A 0F84B2000000            	je .L_if_else_00b6
   975                                  	; preparing a tail-call
   976 00000590 48B8-                   	mov rax, L_constants + 1541
   976 00000592 [0506000000000000] 
   977 0000059A 50                      	push rax
   978                                  	; preparing a non-tail-call
   979 0000059B 48B8-                   	mov rax, L_constants + 1541
   979 0000059D [0506000000000000] 
   980 000005A5 50                      	push rax
   981 000005A6 488B4528                	mov rax, PARAM(1)	; param b
   982 000005AA 50                      	push rax
   983 000005AB 6A02                    	push 2	; arg count
   984 000005AD 488B0425[9A060000]      	mov rax, qword [free_var_3]	; free var __bin-sub-zz
   985 000005B5 803805                  	cmp byte [rax], T_undefined
   986 000005B8 0F84BF170000            	je L_error_fvar_undefined
   987 000005BE 803804                  	cmp byte [rax], T_closure
   988 000005C1 0F853A180000            	jne L_error_non_closure
   989 000005C7 FF7001                  	push SOB_CLOSURE_ENV(rax)
   990 000005CA FF5009                  	call SOB_CLOSURE_CODE(rax)
   991 000005CD 50                      	push rax
   992 000005CE 48B8-                   	mov rax, L_constants + 1514
   992 000005D0 [EA05000000000000] 
   993 000005D8 50                      	push rax
   994 000005D9 6A03                    	push 3	; arg count
   995 000005DB 488B4510                	mov rax, ENV
   996 000005DF 488B00                  	mov rax, qword [rax + 8 * 0]
   997 000005E2 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var ack-x
   998 000005E6 488B00                  	mov rax, qword [rax]
   999 000005E9 803804                  	cmp byte [rax], T_closure
  1000 000005EC 0F850F180000            	jne L_error_non_closure
  1001 000005F2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1002 000005F5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1003 000005F8 FF7500                  	push qword[rbp]
  1004 000005FB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  1005 000005FE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  1006 00000602 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  1007 00000606 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  1008 0000060A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  1009 0000060D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  1010 00000610 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  1011 00000615 4983C103                	add r9, 3 	 ;for getting to the params
  1012 00000619 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  1013 0000061D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  1014                                  .L_tc_recycle_frame_loop_0142:
  1015 00000620 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  1016 00000623 7410                    	je .L_tc_recycle_frame_done_0142
  1017 00000625 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  1018 00000628 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  1019 0000062B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  1020 0000062F 4983E808                	sub r8, 8	 ;move the top of the stack one down
  1021 00000633 EBEB                    	jmp .L_tc_recycle_frame_loop_0142
  1022                                  .L_tc_recycle_frame_done_0142:
  1023 00000635 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  1024 00000636 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  1025 0000063A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1026 0000063D E922060000              	jmp .L_if_end_00b6
  1027                                  .L_if_else_00b6:
  1028                                  	; preparing a non-tail-call
  1029 00000642 488B4520                	mov rax, PARAM(0)	; param a
  1030 00000646 50                      	push rax
  1031 00000647 6A01                    	push 1	; arg count
  1032 00000649 488B0425[CD060000]      	mov rax, qword [free_var_6]	; free var zero?
  1033 00000651 803805                  	cmp byte [rax], T_undefined
  1034 00000654 0F8423170000            	je L_error_fvar_undefined
  1035 0000065A 803804                  	cmp byte [rax], T_closure
  1036 0000065D 0F859E170000            	jne L_error_non_closure
  1037 00000663 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1038 00000666 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1039 00000669 483D[02000000]          	cmp rax, sob_boolean_false
  1040 0000066F 0F840A010000            	je .L_if_else_00b5
  1041                                  	; preparing a tail-call
  1042                                  	; preparing a non-tail-call
  1043                                  	; preparing a non-tail-call
  1044 00000675 48B8-                   	mov rax, L_constants + 1541
  1044 00000677 [0506000000000000] 
  1045 0000067F 50                      	push rax
  1046 00000680 488B4530                	mov rax, PARAM(2)	; param c
  1047 00000684 50                      	push rax
  1048 00000685 6A02                    	push 2	; arg count
  1049 00000687 488B0425[9A060000]      	mov rax, qword [free_var_3]	; free var __bin-sub-zz
  1050 0000068F 803805                  	cmp byte [rax], T_undefined
  1051 00000692 0F84E5160000            	je L_error_fvar_undefined
  1052 00000698 803804                  	cmp byte [rax], T_closure
  1053 0000069B 0F8560170000            	jne L_error_non_closure
  1054 000006A1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1055 000006A4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1056 000006A7 50                      	push rax
  1057 000006A8 488B4528                	mov rax, PARAM(1)	; param b
  1058 000006AC 50                      	push rax
  1059 000006AD 48B8-                   	mov rax, L_constants + 1514
  1059 000006AF [EA05000000000000] 
  1060 000006B7 50                      	push rax
  1061 000006B8 6A03                    	push 3	; arg count
  1062 000006BA 488B4510                	mov rax, ENV
  1063 000006BE 488B00                  	mov rax, qword [rax + 8 * 0]
  1064 000006C1 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var ack-y
  1065 000006C5 488B00                  	mov rax, qword [rax]
  1066 000006C8 803804                  	cmp byte [rax], T_closure
  1067 000006CB 0F8530170000            	jne L_error_non_closure
  1068 000006D1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1069 000006D4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1070 000006D7 50                      	push rax
  1071                                  	; preparing a non-tail-call
  1072 000006D8 48B8-                   	mov rax, L_constants + 1541
  1072 000006DA [0506000000000000] 
  1073 000006E2 50                      	push rax
  1074 000006E3 488B4528                	mov rax, PARAM(1)	; param b
  1075 000006E7 50                      	push rax
  1076 000006E8 6A02                    	push 2	; arg count
  1077 000006EA 488B0425[9A060000]      	mov rax, qword [free_var_3]	; free var __bin-sub-zz
  1078 000006F2 803805                  	cmp byte [rax], T_undefined
  1079 000006F5 0F8482160000            	je L_error_fvar_undefined
  1080 000006FB 803804                  	cmp byte [rax], T_closure
  1081 000006FE 0F85FD160000            	jne L_error_non_closure
  1082 00000704 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1083 00000707 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1084 0000070A 50                      	push rax
  1085 0000070B 48B8-                   	mov rax, L_constants + 1514
  1085 0000070D [EA05000000000000] 
  1086 00000715 50                      	push rax
  1087 00000716 6A03                    	push 3	; arg count
  1088 00000718 488B4510                	mov rax, ENV
  1089 0000071C 488B00                  	mov rax, qword [rax + 8 * 0]
  1090 0000071F 488B4018                	mov rax, qword [rax + 8 * 3]	; bound var ack-z
  1091 00000723 488B00                  	mov rax, qword [rax]
  1092 00000726 803804                  	cmp byte [rax], T_closure
  1093 00000729 0F85D2160000            	jne L_error_non_closure
  1094 0000072F FF7001                  	push SOB_CLOSURE_ENV(rax)
  1095 00000732 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1096 00000735 FF7500                  	push qword[rbp]
  1097 00000738 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  1098 0000073B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  1099 0000073F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  1100 00000743 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  1101 00000747 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  1102 0000074A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  1103 0000074D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  1104 00000752 4983C103                	add r9, 3 	 ;for getting to the params
  1105 00000756 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  1106 0000075A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  1107                                  .L_tc_recycle_frame_loop_0143:
  1108 0000075D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  1109 00000760 7410                    	je .L_tc_recycle_frame_done_0143
  1110 00000762 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  1111 00000765 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  1112 00000768 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  1113 0000076C 4983E808                	sub r8, 8	 ;move the top of the stack one down
  1114 00000770 EBEB                    	jmp .L_tc_recycle_frame_loop_0143
  1115                                  .L_tc_recycle_frame_done_0143:
  1116 00000772 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  1117 00000773 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  1118 00000777 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1119 0000077A E9E5040000              	jmp .L_if_end_00b5
  1120                                  .L_if_else_00b5:
  1121                                  	; preparing a non-tail-call
  1122 0000077F 488B4528                	mov rax, PARAM(1)	; param b
  1123 00000783 50                      	push rax
  1124 00000784 6A01                    	push 1	; arg count
  1125 00000786 488B0425[CD060000]      	mov rax, qword [free_var_6]	; free var zero?
  1126 0000078E 803805                  	cmp byte [rax], T_undefined
  1127 00000791 0F84E6150000            	je L_error_fvar_undefined
  1128 00000797 803804                  	cmp byte [rax], T_closure
  1129 0000079A 0F8561160000            	jne L_error_non_closure
  1130 000007A0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1131 000007A3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1132 000007A6 483D[02000000]          	cmp rax, sob_boolean_false
  1133 000007AC 7429                    	je .L_if_else_00b1
  1134                                  	; preparing a non-tail-call
  1135 000007AE 488B4530                	mov rax, PARAM(2)	; param c
  1136 000007B2 50                      	push rax
  1137 000007B3 6A01                    	push 1	; arg count
  1138 000007B5 488B0425[CD060000]      	mov rax, qword [free_var_6]	; free var zero?
  1139 000007BD 803805                  	cmp byte [rax], T_undefined
  1140 000007C0 0F84B7150000            	je L_error_fvar_undefined
  1141 000007C6 803804                  	cmp byte [rax], T_closure
  1142 000007C9 0F8532160000            	jne L_error_non_closure
  1143 000007CF FF7001                  	push SOB_CLOSURE_ENV(rax)
  1144 000007D2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1145 000007D5 EB0A                    	jmp .L_if_end_00b1
  1146                                  .L_if_else_00b1:
  1147 000007D7 48B8-                   	mov rax, L_constants + 2
  1147 000007D9 [0200000000000000] 
  1148                                  .L_if_end_00b1:
  1149 000007E1 483D[02000000]          	cmp rax, sob_boolean_false
  1150 000007E7 0F84B2000000            	je .L_if_else_00b4
  1151                                  	; preparing a tail-call
  1152 000007ED 48B8-                   	mov rax, L_constants + 1514
  1152 000007EF [EA05000000000000] 
  1153 000007F7 50                      	push rax
  1154 000007F8 48B8-                   	mov rax, L_constants + 1541
  1154 000007FA [0506000000000000] 
  1155 00000802 50                      	push rax
  1156                                  	; preparing a non-tail-call
  1157 00000803 48B8-                   	mov rax, L_constants + 1541
  1157 00000805 [0506000000000000] 
  1158 0000080D 50                      	push rax
  1159 0000080E 488B4520                	mov rax, PARAM(0)	; param a
  1160 00000812 50                      	push rax
  1161 00000813 6A02                    	push 2	; arg count
  1162 00000815 488B0425[9A060000]      	mov rax, qword [free_var_3]	; free var __bin-sub-zz
  1163 0000081D 803805                  	cmp byte [rax], T_undefined
  1164 00000820 0F8457150000            	je L_error_fvar_undefined
  1165 00000826 803804                  	cmp byte [rax], T_closure
  1166 00000829 0F85D2150000            	jne L_error_non_closure
  1167 0000082F FF7001                  	push SOB_CLOSURE_ENV(rax)
  1168 00000832 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1169 00000835 50                      	push rax
  1170 00000836 6A03                    	push 3	; arg count
  1171 00000838 488B4510                	mov rax, ENV
  1172 0000083C 488B00                  	mov rax, qword [rax + 8 * 0]
  1173 0000083F 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var ack-x
  1174 00000843 488B00                  	mov rax, qword [rax]
  1175 00000846 803804                  	cmp byte [rax], T_closure
  1176 00000849 0F85B2150000            	jne L_error_non_closure
  1177 0000084F FF7001                  	push SOB_CLOSURE_ENV(rax)
  1178 00000852 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1179 00000855 FF7500                  	push qword[rbp]
  1180 00000858 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  1181 0000085B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  1182 0000085F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  1183 00000863 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  1184 00000867 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  1185 0000086A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  1186 0000086D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  1187 00000872 4983C103                	add r9, 3 	 ;for getting to the params
  1188 00000876 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  1189 0000087A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  1190                                  .L_tc_recycle_frame_loop_0144:
  1191 0000087D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  1192 00000880 7410                    	je .L_tc_recycle_frame_done_0144
  1193 00000882 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  1194 00000885 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  1195 00000888 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  1196 0000088C 4983E808                	sub r8, 8	 ;move the top of the stack one down
  1197 00000890 EBEB                    	jmp .L_tc_recycle_frame_loop_0144
  1198                                  .L_tc_recycle_frame_done_0144:
  1199 00000892 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  1200 00000893 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  1201 00000897 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1202 0000089A E9C5030000              	jmp .L_if_end_00b4
  1203                                  .L_if_else_00b4:
  1204                                  	; preparing a non-tail-call
  1205 0000089F 488B4528                	mov rax, PARAM(1)	; param b
  1206 000008A3 50                      	push rax
  1207 000008A4 6A01                    	push 1	; arg count
  1208 000008A6 488B0425[CD060000]      	mov rax, qword [free_var_6]	; free var zero?
  1209 000008AE 803805                  	cmp byte [rax], T_undefined
  1210 000008B1 0F84C6140000            	je L_error_fvar_undefined
  1211 000008B7 803804                  	cmp byte [rax], T_closure
  1212 000008BA 0F8541150000            	jne L_error_non_closure
  1213 000008C0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1214 000008C3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1215 000008C6 483D[02000000]          	cmp rax, sob_boolean_false
  1216 000008CC 0F840A010000            	je .L_if_else_00b3
  1217                                  	; preparing a tail-call
  1218                                  	; preparing a non-tail-call
  1219                                  	; preparing a non-tail-call
  1220 000008D2 48B8-                   	mov rax, L_constants + 1541
  1220 000008D4 [0506000000000000] 
  1221 000008DC 50                      	push rax
  1222 000008DD 488B4530                	mov rax, PARAM(2)	; param c
  1223 000008E1 50                      	push rax
  1224 000008E2 6A02                    	push 2	; arg count
  1225 000008E4 488B0425[9A060000]      	mov rax, qword [free_var_3]	; free var __bin-sub-zz
  1226 000008EC 803805                  	cmp byte [rax], T_undefined
  1227 000008EF 0F8488140000            	je L_error_fvar_undefined
  1228 000008F5 803804                  	cmp byte [rax], T_closure
  1229 000008F8 0F8503150000            	jne L_error_non_closure
  1230 000008FE FF7001                  	push SOB_CLOSURE_ENV(rax)
  1231 00000901 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1232 00000904 50                      	push rax
  1233 00000905 48B8-                   	mov rax, L_constants + 1514
  1233 00000907 [EA05000000000000] 
  1234 0000090F 50                      	push rax
  1235 00000910 488B4520                	mov rax, PARAM(0)	; param a
  1236 00000914 50                      	push rax
  1237 00000915 6A03                    	push 3	; arg count
  1238 00000917 488B4510                	mov rax, ENV
  1239 0000091B 488B00                  	mov rax, qword [rax + 8 * 0]
  1240 0000091E 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var ack-y
  1241 00000922 488B00                  	mov rax, qword [rax]
  1242 00000925 803804                  	cmp byte [rax], T_closure
  1243 00000928 0F85D3140000            	jne L_error_non_closure
  1244 0000092E FF7001                  	push SOB_CLOSURE_ENV(rax)
  1245 00000931 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1246 00000934 50                      	push rax
  1247 00000935 48B8-                   	mov rax, L_constants + 1541
  1247 00000937 [0506000000000000] 
  1248 0000093F 50                      	push rax
  1249                                  	; preparing a non-tail-call
  1250 00000940 48B8-                   	mov rax, L_constants + 1541
  1250 00000942 [0506000000000000] 
  1251 0000094A 50                      	push rax
  1252 0000094B 488B4520                	mov rax, PARAM(0)	; param a
  1253 0000094F 50                      	push rax
  1254 00000950 6A02                    	push 2	; arg count
  1255 00000952 488B0425[9A060000]      	mov rax, qword [free_var_3]	; free var __bin-sub-zz
  1256 0000095A 803805                  	cmp byte [rax], T_undefined
  1257 0000095D 0F841A140000            	je L_error_fvar_undefined
  1258 00000963 803804                  	cmp byte [rax], T_closure
  1259 00000966 0F8595140000            	jne L_error_non_closure
  1260 0000096C FF7001                  	push SOB_CLOSURE_ENV(rax)
  1261 0000096F FF5009                  	call SOB_CLOSURE_CODE(rax)
  1262 00000972 50                      	push rax
  1263 00000973 6A03                    	push 3	; arg count
  1264 00000975 488B4510                	mov rax, ENV
  1265 00000979 488B00                  	mov rax, qword [rax + 8 * 0]
  1266 0000097C 488B4018                	mov rax, qword [rax + 8 * 3]	; bound var ack-z
  1267 00000980 488B00                  	mov rax, qword [rax]
  1268 00000983 803804                  	cmp byte [rax], T_closure
  1269 00000986 0F8575140000            	jne L_error_non_closure
  1270 0000098C FF7001                  	push SOB_CLOSURE_ENV(rax)
  1271 0000098F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1272 00000992 FF7500                  	push qword[rbp]
  1273 00000995 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  1274 00000998 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  1275 0000099C 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  1276 000009A0 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  1277 000009A4 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  1278 000009A7 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  1279 000009AA 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  1280 000009AF 4983C103                	add r9, 3 	 ;for getting to the params
  1281 000009B3 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  1282 000009B7 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  1283                                  .L_tc_recycle_frame_loop_0145:
  1284 000009BA 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  1285 000009BD 7410                    	je .L_tc_recycle_frame_done_0145
  1286 000009BF 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  1287 000009C2 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  1288 000009C5 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  1289 000009C9 4983E808                	sub r8, 8	 ;move the top of the stack one down
  1290 000009CD EBEB                    	jmp .L_tc_recycle_frame_loop_0145
  1291                                  .L_tc_recycle_frame_done_0145:
  1292 000009CF 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  1293 000009D0 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  1294 000009D4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1295 000009D7 E988020000              	jmp .L_if_end_00b3
  1296                                  .L_if_else_00b3:
  1297                                  	; preparing a non-tail-call
  1298 000009DC 488B4530                	mov rax, PARAM(2)	; param c
  1299 000009E0 50                      	push rax
  1300 000009E1 6A01                    	push 1	; arg count
  1301 000009E3 488B0425[CD060000]      	mov rax, qword [free_var_6]	; free var zero?
  1302 000009EB 803805                  	cmp byte [rax], T_undefined
  1303 000009EE 0F8489130000            	je L_error_fvar_undefined
  1304 000009F4 803804                  	cmp byte [rax], T_closure
  1305 000009F7 0F8504140000            	jne L_error_non_closure
  1306 000009FD FF7001                  	push SOB_CLOSURE_ENV(rax)
  1307 00000A00 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1308 00000A03 483D[02000000]          	cmp rax, sob_boolean_false
  1309 00000A09 0F8404010000            	je .L_if_else_00b2
  1310                                  	; preparing a tail-call
  1311                                  	; preparing a non-tail-call
  1312 00000A0F 48B8-                   	mov rax, L_constants + 1541
  1312 00000A11 [0506000000000000] 
  1313 00000A19 50                      	push rax
  1314                                  	; preparing a non-tail-call
  1315 00000A1A 48B8-                   	mov rax, L_constants + 1541
  1315 00000A1C [0506000000000000] 
  1316 00000A24 50                      	push rax
  1317 00000A25 488B4528                	mov rax, PARAM(1)	; param b
  1318 00000A29 50                      	push rax
  1319 00000A2A 6A02                    	push 2	; arg count
  1320 00000A2C 488B0425[9A060000]      	mov rax, qword [free_var_3]	; free var __bin-sub-zz
  1321 00000A34 803805                  	cmp byte [rax], T_undefined
  1322 00000A37 0F8440130000            	je L_error_fvar_undefined
  1323 00000A3D 803804                  	cmp byte [rax], T_closure
  1324 00000A40 0F85BB130000            	jne L_error_non_closure
  1325 00000A46 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1326 00000A49 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1327 00000A4C 50                      	push rax
  1328 00000A4D 488B4520                	mov rax, PARAM(0)	; param a
  1329 00000A51 50                      	push rax
  1330 00000A52 6A03                    	push 3	; arg count
  1331 00000A54 488B4510                	mov rax, ENV
  1332 00000A58 488B00                  	mov rax, qword [rax + 8 * 0]
  1333 00000A5B 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var ack-y
  1334 00000A5F 488B00                  	mov rax, qword [rax]
  1335 00000A62 803804                  	cmp byte [rax], T_closure
  1336 00000A65 0F8596130000            	jne L_error_non_closure
  1337 00000A6B FF7001                  	push SOB_CLOSURE_ENV(rax)
  1338 00000A6E FF5009                  	call SOB_CLOSURE_CODE(rax)
  1339 00000A71 50                      	push rax
  1340 00000A72 488B4528                	mov rax, PARAM(1)	; param b
  1341 00000A76 50                      	push rax
  1342                                  	; preparing a non-tail-call
  1343 00000A77 48B8-                   	mov rax, L_constants + 1541
  1343 00000A79 [0506000000000000] 
  1344 00000A81 50                      	push rax
  1345 00000A82 488B4520                	mov rax, PARAM(0)	; param a
  1346 00000A86 50                      	push rax
  1347 00000A87 6A02                    	push 2	; arg count
  1348 00000A89 488B0425[9A060000]      	mov rax, qword [free_var_3]	; free var __bin-sub-zz
  1349 00000A91 803805                  	cmp byte [rax], T_undefined
  1350 00000A94 0F84E3120000            	je L_error_fvar_undefined
  1351 00000A9A 803804                  	cmp byte [rax], T_closure
  1352 00000A9D 0F855E130000            	jne L_error_non_closure
  1353 00000AA3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1354 00000AA6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1355 00000AA9 50                      	push rax
  1356 00000AAA 6A03                    	push 3	; arg count
  1357 00000AAC 488B4510                	mov rax, ENV
  1358 00000AB0 488B00                  	mov rax, qword [rax + 8 * 0]
  1359 00000AB3 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var ack-x
  1360 00000AB7 488B00                  	mov rax, qword [rax]
  1361 00000ABA 803804                  	cmp byte [rax], T_closure
  1362 00000ABD 0F853E130000            	jne L_error_non_closure
  1363 00000AC3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1364 00000AC6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1365 00000AC9 FF7500                  	push qword[rbp]
  1366 00000ACC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  1367 00000ACF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  1368 00000AD3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  1369 00000AD7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  1370 00000ADB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  1371 00000ADE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  1372 00000AE1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  1373 00000AE6 4983C103                	add r9, 3 	 ;for getting to the params
  1374 00000AEA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  1375 00000AEE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  1376                                  .L_tc_recycle_frame_loop_0146:
  1377 00000AF1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  1378 00000AF4 7410                    	je .L_tc_recycle_frame_done_0146
  1379 00000AF6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  1380 00000AF9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  1381 00000AFC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  1382 00000B00 4983E808                	sub r8, 8	 ;move the top of the stack one down
  1383 00000B04 EBEB                    	jmp .L_tc_recycle_frame_loop_0146
  1384                                  .L_tc_recycle_frame_done_0146:
  1385 00000B06 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  1386 00000B07 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  1387 00000B0B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1388 00000B0E E951010000              	jmp .L_if_end_00b2
  1389                                  .L_if_else_00b2:
  1390                                  	; preparing a tail-call
  1391                                  	; preparing a non-tail-call
  1392                                  	; preparing a non-tail-call
  1393                                  	; preparing a non-tail-call
  1394 00000B13 48B8-                   	mov rax, L_constants + 1541
  1394 00000B15 [0506000000000000] 
  1395 00000B1D 50                      	push rax
  1396 00000B1E 488B4530                	mov rax, PARAM(2)	; param c
  1397 00000B22 50                      	push rax
  1398 00000B23 6A02                    	push 2	; arg count
  1399 00000B25 488B0425[9A060000]      	mov rax, qword [free_var_3]	; free var __bin-sub-zz
  1400 00000B2D 803805                  	cmp byte [rax], T_undefined
  1401 00000B30 0F8447120000            	je L_error_fvar_undefined
  1402 00000B36 803804                  	cmp byte [rax], T_closure
  1403 00000B39 0F85C2120000            	jne L_error_non_closure
  1404 00000B3F FF7001                  	push SOB_CLOSURE_ENV(rax)
  1405 00000B42 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1406 00000B45 50                      	push rax
  1407 00000B46 488B4528                	mov rax, PARAM(1)	; param b
  1408 00000B4A 50                      	push rax
  1409 00000B4B 488B4520                	mov rax, PARAM(0)	; param a
  1410 00000B4F 50                      	push rax
  1411 00000B50 6A03                    	push 3	; arg count
  1412 00000B52 488B4510                	mov rax, ENV
  1413 00000B56 488B00                  	mov rax, qword [rax + 8 * 0]
  1414 00000B59 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var ack-x
  1415 00000B5D 488B00                  	mov rax, qword [rax]
  1416 00000B60 803804                  	cmp byte [rax], T_closure
  1417 00000B63 0F8598120000            	jne L_error_non_closure
  1418 00000B69 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1419 00000B6C FF5009                  	call SOB_CLOSURE_CODE(rax)
  1420 00000B6F 50                      	push rax
  1421                                  	; preparing a non-tail-call
  1422 00000B70 48B8-                   	mov rax, L_constants + 1541
  1422 00000B72 [0506000000000000] 
  1423 00000B7A 50                      	push rax
  1424 00000B7B 488B4528                	mov rax, PARAM(1)	; param b
  1425 00000B7F 50                      	push rax
  1426 00000B80 6A02                    	push 2	; arg count
  1427 00000B82 488B0425[9A060000]      	mov rax, qword [free_var_3]	; free var __bin-sub-zz
  1428 00000B8A 803805                  	cmp byte [rax], T_undefined
  1429 00000B8D 0F84EA110000            	je L_error_fvar_undefined
  1430 00000B93 803804                  	cmp byte [rax], T_closure
  1431 00000B96 0F8565120000            	jne L_error_non_closure
  1432 00000B9C FF7001                  	push SOB_CLOSURE_ENV(rax)
  1433 00000B9F FF5009                  	call SOB_CLOSURE_CODE(rax)
  1434 00000BA2 50                      	push rax
  1435 00000BA3 488B4520                	mov rax, PARAM(0)	; param a
  1436 00000BA7 50                      	push rax
  1437 00000BA8 6A03                    	push 3	; arg count
  1438 00000BAA 488B4510                	mov rax, ENV
  1439 00000BAE 488B00                  	mov rax, qword [rax + 8 * 0]
  1440 00000BB1 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var ack-y
  1441 00000BB5 488B00                  	mov rax, qword [rax]
  1442 00000BB8 803804                  	cmp byte [rax], T_closure
  1443 00000BBB 0F8540120000            	jne L_error_non_closure
  1444 00000BC1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1445 00000BC4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1446 00000BC7 50                      	push rax
  1447 00000BC8 488B4528                	mov rax, PARAM(1)	; param b
  1448 00000BCC 50                      	push rax
  1449                                  	; preparing a non-tail-call
  1450 00000BCD 48B8-                   	mov rax, L_constants + 1541
  1450 00000BCF [0506000000000000] 
  1451 00000BD7 50                      	push rax
  1452 00000BD8 488B4520                	mov rax, PARAM(0)	; param a
  1453 00000BDC 50                      	push rax
  1454 00000BDD 6A02                    	push 2	; arg count
  1455 00000BDF 488B0425[9A060000]      	mov rax, qword [free_var_3]	; free var __bin-sub-zz
  1456 00000BE7 803805                  	cmp byte [rax], T_undefined
  1457 00000BEA 0F848D110000            	je L_error_fvar_undefined
  1458 00000BF0 803804                  	cmp byte [rax], T_closure
  1459 00000BF3 0F8508120000            	jne L_error_non_closure
  1460 00000BF9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1461 00000BFC FF5009                  	call SOB_CLOSURE_CODE(rax)
  1462 00000BFF 50                      	push rax
  1463 00000C00 6A03                    	push 3	; arg count
  1464 00000C02 488B4510                	mov rax, ENV
  1465 00000C06 488B00                  	mov rax, qword [rax + 8 * 0]
  1466 00000C09 488B4018                	mov rax, qword [rax + 8 * 3]	; bound var ack-z
  1467 00000C0D 488B00                  	mov rax, qword [rax]
  1468 00000C10 803804                  	cmp byte [rax], T_closure
  1469 00000C13 0F85E8110000            	jne L_error_non_closure
  1470 00000C19 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1471 00000C1C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1472 00000C1F FF7500                  	push qword[rbp]
  1473 00000C22 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  1474 00000C25 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  1475 00000C29 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  1476 00000C2D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  1477 00000C31 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  1478 00000C34 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  1479 00000C37 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  1480 00000C3C 4983C103                	add r9, 3 	 ;for getting to the params
  1481 00000C40 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  1482 00000C44 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  1483                                  .L_tc_recycle_frame_loop_0147:
  1484 00000C47 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  1485 00000C4A 7410                    	je .L_tc_recycle_frame_done_0147
  1486 00000C4C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  1487 00000C4F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  1488 00000C52 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  1489 00000C56 4983E808                	sub r8, 8	 ;move the top of the stack one down
  1490 00000C5A EBEB                    	jmp .L_tc_recycle_frame_loop_0147
  1491                                  .L_tc_recycle_frame_done_0147:
  1492 00000C5C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  1493 00000C5D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  1494 00000C61 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1495                                  .L_if_end_00b2:
  1496                                  .L_if_end_00b3:
  1497                                  .L_if_end_00b4:
  1498                                  .L_if_end_00b5:
  1499                                  .L_if_end_00b6:
  1500                                  .L_if_end_00b7:
  1501 00000C64 C9                      	leave
  1502 00000C65 C22800                  	ret AND_KILL_FRAME(3)
  1503                                  .L_lambda_simple_end_00db:	; new closure is in rax
  1504 00000C68 50                      	push rax
  1505 00000C69 488B4520                	mov rax, PARAM(0)	; param ack3
  1506 00000C6D 8F00                    	pop qword [rax]
  1507 00000C6F 48B8-                   	mov rax, sob_void
  1507 00000C71 [0000000000000000] 
  1508                                  
  1509 00000C79 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1510 00000C7E E827120000              	call malloc
  1511 00000C83 50                      	push rax
  1512 00000C84 BF20000000              	mov rdi, 8 * 4	; new rib
  1513 00000C89 E81C120000              	call malloc
  1514 00000C8E 50                      	push rax
  1515 00000C8F BF10000000              	mov rdi, 8 * 2	; extended env
  1516 00000C94 E811120000              	call malloc
  1517 00000C99 488B7D10                	mov rdi, ENV
  1518 00000C9D BE00000000              	mov rsi, 0
  1519 00000CA2 BA01000000              	mov rdx, 1
  1520                                  .L_lambda_opt_env_loop_001f:	; ext_env[i + 1] <-- env[i]
  1521 00000CA7 4883FE01                	cmp rsi, 1
  1522 00000CAB 7410                    	je .L_lambda_opt_env_end_001f
  1523 00000CAD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1524 00000CB1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1525 00000CB5 48FFC6                  	inc rsi
  1526 00000CB8 48FFC2                  	inc rdx
  1527 00000CBB EBEA                    	jmp .L_lambda_opt_env_loop_001f
  1528                                  .L_lambda_opt_env_end_001f:
  1529 00000CBD 5B                      	pop rbx
  1530 00000CBE BE00000000              	mov rsi, 0
  1531                                  .L_lambda_opt_params_loop_001f:	; copy params
  1532 00000CC3 4883FE04                	cmp rsi, 4
  1533 00000CC7 740E                    	je .L_lambda_opt_params_end_001f
  1534 00000CC9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1535 00000CCE 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1536 00000CD2 48FFC6                  	inc rsi
  1537 00000CD5 EBEC                    	jmp .L_lambda_opt_params_loop_001f
  1538                                  .L_lambda_opt_params_end_001f:
  1539 00000CD7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1540 00000CDA 4889C3                  	mov rbx, rax
  1541 00000CDD 58                      	pop rax
  1542 00000CDE C60004                  	mov byte [rax], T_closure
  1543 00000CE1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1544 00000CE5 48C74009[F20C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_001f
  1545 00000CED E902040000              	jmp .L_lambda_opt_end_001f
  1546                                  .L_lambda_opt_code_001f:	; lambda-opt body
  1547 00000CF2 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1548 00000CF8 7411                    	je .L_lambda_opt_arity_check_exact_001f
  1549 00000CFA 0F8FCC010000            	jg .L_lambda_opt_arity_check_more_001f
  1550 00000D00 FF742410                	push qword [rsp + 8 * 2]
  1551 00000D04 6A01                    	push 1
  1552 00000D06 E96C110000              	jmp L_error_incorrect_arity_opt
  1553                                  .L_lambda_opt_arity_check_exact_001f:
  1554 00000D0B 4883EC08                	sub rsp, 8
  1555 00000D0F 488B442408              	mov rax, qword[rsp + 8 *1]
  1556 00000D14 48890424                	mov qword[rsp], rax  
  1557 00000D18 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  1558 00000D1D 4889442408              	mov qword[rsp + 8 * 1], rax
  1559 00000D22 B802000000              	mov rax, 2
  1560 00000D27 4889442410              	mov qword[rsp + 8 *2], rax
  1561 00000D2C 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  1562 00000D31 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  1563 00000D36 48B8-                   	mov rax, sob_nil
  1563 00000D38 [0100000000000000] 
  1564 00000D40 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  1565 00000D45 C8000000                	enter 0, 0
  1566                                  	; preparing a tail-call
  1567 00000D49 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1568 00000D4E E857110000              	call malloc
  1569 00000D53 50                      	push rax
  1570 00000D54 BF10000000              	mov rdi, 8 * 2	; new rib
  1571 00000D59 E84C110000              	call malloc
  1572 00000D5E 50                      	push rax
  1573 00000D5F BF18000000              	mov rdi, 8 * 3	; extended env
  1574 00000D64 E841110000              	call malloc
  1575 00000D69 488B7D10                	mov rdi, ENV
  1576 00000D6D BE00000000              	mov rsi, 0
  1577 00000D72 BA01000000              	mov rdx, 1
  1578                                  .L_lambda_simple_env_loop_00dd:	; ext_env[i + 1] <-- env[i]
  1579 00000D77 4883FE02                	cmp rsi, 2
  1580 00000D7B 7410                    	je .L_lambda_simple_env_end_00dd
  1581 00000D7D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1582 00000D81 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1583 00000D85 48FFC6                  	inc rsi
  1584 00000D88 48FFC2                  	inc rdx
  1585 00000D8B EBEA                    	jmp .L_lambda_simple_env_loop_00dd
  1586                                  .L_lambda_simple_env_end_00dd:
  1587 00000D8D 5B                      	pop rbx
  1588 00000D8E BE00000000              	mov rsi, 0
  1589                                  .L_lambda_simple_params_loop_00dd:	; copy params
  1590 00000D93 4883FE02                	cmp rsi, 2
  1591 00000D97 740E                    	je .L_lambda_simple_params_end_00dd
  1592 00000D99 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1593 00000D9E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1594 00000DA2 48FFC6                  	inc rsi
  1595 00000DA5 EBEC                    	jmp .L_lambda_simple_params_loop_00dd
  1596                                  .L_lambda_simple_params_end_00dd:
  1597 00000DA7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1598 00000DAA 4889C3                  	mov rbx, rax
  1599 00000DAD 58                      	pop rax
  1600 00000DAE C60004                  	mov byte [rax], T_closure
  1601 00000DB1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1602 00000DB5 48C74009[C20D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00dd
  1603 00000DBD E994000000              	jmp .L_lambda_simple_end_00dd
  1604                                  .L_lambda_simple_code_00dd:	; lambda-simple body
  1605 00000DC2 48837C241002            	cmp qword [rsp + 8 * 2], 2
  1606 00000DC8 740B                    	je .L_lambda_simple_arity_check_ok_00dd
  1607 00000DCA FF742410                	push qword [rsp + 8 * 2]
  1608 00000DCE 6A02                    	push 2
  1609 00000DD0 E98E100000              	jmp L_error_incorrect_arity_simple
  1610                                  .L_lambda_simple_arity_check_ok_00dd:
  1611 00000DD5 C8000000                	enter 0, 0
  1612                                  	; preparing a tail-call
  1613 00000DD9 488B4528                	mov rax, PARAM(1)	; param c
  1614 00000DDD 50                      	push rax
  1615 00000DDE 488B4520                	mov rax, PARAM(0)	; param b
  1616 00000DE2 50                      	push rax
  1617 00000DE3 488B4510                	mov rax, ENV
  1618 00000DE7 488B00                  	mov rax, qword [rax + 8 * 0]
  1619 00000DEA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var a
  1620 00000DED 50                      	push rax
  1621 00000DEE 6A03                    	push 3	; arg count
  1622 00000DF0 488B4510                	mov rax, ENV
  1623 00000DF4 488B4008                	mov rax, qword [rax + 8 * 1]
  1624 00000DF8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var ack3
  1625 00000DFB 488B00                  	mov rax, qword [rax]
  1626 00000DFE 803804                  	cmp byte [rax], T_closure
  1627 00000E01 0F85FA0F0000            	jne L_error_non_closure
  1628 00000E07 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1629 00000E0A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1630 00000E0D FF7500                  	push qword[rbp]
  1631 00000E10 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  1632 00000E13 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  1633 00000E17 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  1634 00000E1B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  1635 00000E1F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  1636 00000E22 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  1637 00000E25 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  1638 00000E2A 4983C103                	add r9, 3 	 ;for getting to the params
  1639 00000E2E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  1640 00000E32 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  1641                                  .L_tc_recycle_frame_loop_014a:
  1642 00000E35 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  1643 00000E38 7410                    	je .L_tc_recycle_frame_done_014a
  1644 00000E3A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  1645 00000E3D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  1646 00000E40 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  1647 00000E44 4983E808                	sub r8, 8	 ;move the top of the stack one down
  1648 00000E48 EBEB                    	jmp .L_tc_recycle_frame_loop_014a
  1649                                  .L_tc_recycle_frame_done_014a:
  1650 00000E4A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  1651 00000E4B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  1652 00000E4F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1653 00000E52 C9                      	leave
  1654 00000E53 C22000                  	ret AND_KILL_FRAME(2)
  1655                                  .L_lambda_simple_end_00dd:	; new closure is in rax
  1656 00000E56 50                      	push rax
  1657 00000E57 488B4528                	mov rax, PARAM(1)	; param bcs
  1658 00000E5B 50                      	push rax
  1659 00000E5C 6A02                    	push 2	; arg count
  1660 00000E5E 488B0425[BC060000]      	mov rax, qword [free_var_5]	; free var with
  1661 00000E66 803805                  	cmp byte [rax], T_undefined
  1662 00000E69 0F840E0F0000            	je L_error_fvar_undefined
  1663 00000E6F 803804                  	cmp byte [rax], T_closure
  1664 00000E72 0F85890F0000            	jne L_error_non_closure
  1665 00000E78 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1666 00000E7B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1667 00000E7E FF7500                  	push qword[rbp]
  1668 00000E81 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  1669 00000E84 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  1670 00000E88 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  1671 00000E8C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  1672 00000E90 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  1673 00000E93 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  1674 00000E96 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  1675 00000E9B 4983C103                	add r9, 3 	 ;for getting to the params
  1676 00000E9F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  1677 00000EA3 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  1678                                  .L_tc_recycle_frame_loop_014b:
  1679 00000EA6 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  1680 00000EA9 7410                    	je .L_tc_recycle_frame_done_014b
  1681 00000EAB 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  1682 00000EAE 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  1683 00000EB1 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  1684 00000EB5 4983E808                	sub r8, 8	 ;move the top of the stack one down
  1685 00000EB9 EBEB                    	jmp .L_tc_recycle_frame_loop_014b
  1686                                  .L_tc_recycle_frame_done_014b:
  1687 00000EBB 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  1688 00000EBC 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  1689 00000EC0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1690 00000EC3 C9                      	leave
  1691 00000EC4 C22000                  	ret AND_KILL_FRAME(2)
  1692 00000EC7 E928020000              	jmp .L_lambda_opt_end_001f	; new closure is in rax
  1693                                  .L_lambda_opt_arity_check_more_001f:
  1694 00000ECC 488B442410              	mov rax, qword[rsp + 2 * 8]
  1695 00000ED1 4889C7                  	mov rdi, rax
  1696 00000ED4 49B9-                   	mov r9, sob_nil
  1696 00000ED6 [0100000000000000] 
  1697 00000EDE 4C8B442410              	mov r8, qword[rsp+2*8]
  1698                                  .L_lambda_opt_stack_shrink_loop_001f:
  1699 00000EE3 4983F801                	cmp r8, 1
  1700 00000EE7 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_001f
  1701 00000EE9 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)]
  1702 00000EEE BF11000000              	mov rdi, 1+8+8	;for pair
  1703 00000EF3 E8B20F0000              	call malloc	 ;to create the pair in the stack
  1704 00000EF8 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  1705 00000EFB 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
  1706 00000EFF 4C894809                 	mov qword[rax+1+8],r9
  1707 00000F03 4989C1                  	mov r9 , rax	 ; for the recursion 
  1708 00000F06 49FFC8                  	dec r8
  1709 00000F09 EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_001f
  1710                                  .L_lambda_opt_stack_shrink_loop_exit_001f:
  1711 00000F0B 488B442410              	mov rax, qword[rsp + 2 * 8]
  1712 00000F10 BF02000000              	mov rdi, 2
  1713 00000F15 4829F8                  	sub rax, rdi
  1714 00000F18 4889C7                  	mov rdi, rax
  1715 00000F1B 486BC008                	imul rax,8
  1716 00000F1F 4801C4                  	add rsp, rax
  1717 00000F22 4889E0                  	mov rax, rsp
  1718 00000F25 4989F8                  	mov r8, rdi
  1719 00000F28 4D6BC008                	imul r8, 8
  1720 00000F2C 4C29C0                  	sub rax, r8
  1721 00000F2F 4989C2                  	mov r10, rax	; holds the original ret in the stack
  1722 00000F32 4983C218                	add r10, 8*3
  1723 00000F36 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
  1724 00000F3A 4C8B00                  	mov r8, qword[rax] ;arg count = r8
  1725 00000F3D 4D6BC008                	imul r8,8
  1726 00000F41 4C01C0                  	add rax, r8
  1727 00000F44 4C8908                  	mov qword[rax] ,r9
  1728 00000F47 4D89D0                   	mov r8, r10
  1729 00000F4A 4983C000                	add r8, 8 * 0
  1730 00000F4E 4D8B08                  	mov r9,qword[r8]
  1731 00000F51 4D890CF8                	mov qword [r8 + rdi * 8], r9
  1732 00000F55 4983EA18                	sub r10, 8*3
  1733 00000F59 48C744241002000000      	mov qword [rsp+2*8], 2
  1734 00000F62 498B4208                	mov rax, qword[r10 + 1 * 8]
  1735 00000F66 4889442408              	mov qword[rsp + 1*8] ,rax
  1736 00000F6B 498B02                  	mov rax, qword[r10]
  1737 00000F6E 48890424                	mov qword[rsp], rax
  1738 00000F72 C8000000                	enter 0, 0
  1739                                  	; preparing a tail-call
  1740 00000F76 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1741 00000F7B E82A0F0000              	call malloc
  1742 00000F80 50                      	push rax
  1743 00000F81 BF10000000              	mov rdi, 8 * 2	; new rib
  1744 00000F86 E81F0F0000              	call malloc
  1745 00000F8B 50                      	push rax
  1746 00000F8C BF18000000              	mov rdi, 8 * 3	; extended env
  1747 00000F91 E8140F0000              	call malloc
  1748 00000F96 488B7D10                	mov rdi, ENV
  1749 00000F9A BE00000000              	mov rsi, 0
  1750 00000F9F BA01000000              	mov rdx, 1
  1751                                  .L_lambda_simple_env_loop_00dc:	; ext_env[i + 1] <-- env[i]
  1752 00000FA4 4883FE02                	cmp rsi, 2
  1753 00000FA8 7410                    	je .L_lambda_simple_env_end_00dc
  1754 00000FAA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1755 00000FAE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1756 00000FB2 48FFC6                  	inc rsi
  1757 00000FB5 48FFC2                  	inc rdx
  1758 00000FB8 EBEA                    	jmp .L_lambda_simple_env_loop_00dc
  1759                                  .L_lambda_simple_env_end_00dc:
  1760 00000FBA 5B                      	pop rbx
  1761 00000FBB BE00000000              	mov rsi, 0
  1762                                  .L_lambda_simple_params_loop_00dc:	; copy params
  1763 00000FC0 4883FE02                	cmp rsi, 2
  1764 00000FC4 740E                    	je .L_lambda_simple_params_end_00dc
  1765 00000FC6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1766 00000FCB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1767 00000FCF 48FFC6                  	inc rsi
  1768 00000FD2 EBEC                    	jmp .L_lambda_simple_params_loop_00dc
  1769                                  .L_lambda_simple_params_end_00dc:
  1770 00000FD4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1771 00000FD7 4889C3                  	mov rbx, rax
  1772 00000FDA 58                      	pop rax
  1773 00000FDB C60004                  	mov byte [rax], T_closure
  1774 00000FDE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1775 00000FE2 48C74009[EF0F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00dc
  1776 00000FEA E994000000              	jmp .L_lambda_simple_end_00dc
  1777                                  .L_lambda_simple_code_00dc:	; lambda-simple body
  1778 00000FEF 48837C241002            	cmp qword [rsp + 8 * 2], 2
  1779 00000FF5 740B                    	je .L_lambda_simple_arity_check_ok_00dc
  1780 00000FF7 FF742410                	push qword [rsp + 8 * 2]
  1781 00000FFB 6A02                    	push 2
  1782 00000FFD E9610E0000              	jmp L_error_incorrect_arity_simple
  1783                                  .L_lambda_simple_arity_check_ok_00dc:
  1784 00001002 C8000000                	enter 0, 0
  1785                                  	; preparing a tail-call
  1786 00001006 488B4528                	mov rax, PARAM(1)	; param c
  1787 0000100A 50                      	push rax
  1788 0000100B 488B4520                	mov rax, PARAM(0)	; param b
  1789 0000100F 50                      	push rax
  1790 00001010 488B4510                	mov rax, ENV
  1791 00001014 488B00                  	mov rax, qword [rax + 8 * 0]
  1792 00001017 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var a
  1793 0000101A 50                      	push rax
  1794 0000101B 6A03                    	push 3	; arg count
  1795 0000101D 488B4510                	mov rax, ENV
  1796 00001021 488B4008                	mov rax, qword [rax + 8 * 1]
  1797 00001025 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var ack3
  1798 00001028 488B00                  	mov rax, qword [rax]
  1799 0000102B 803804                  	cmp byte [rax], T_closure
  1800 0000102E 0F85CD0D0000            	jne L_error_non_closure
  1801 00001034 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1802 00001037 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1803 0000103A FF7500                  	push qword[rbp]
  1804 0000103D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  1805 00001040 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  1806 00001044 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  1807 00001048 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  1808 0000104C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  1809 0000104F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  1810 00001052 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  1811 00001057 4983C103                	add r9, 3 	 ;for getting to the params
  1812 0000105B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  1813 0000105F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  1814                                  .L_tc_recycle_frame_loop_0148:
  1815 00001062 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  1816 00001065 7410                    	je .L_tc_recycle_frame_done_0148
  1817 00001067 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  1818 0000106A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  1819 0000106D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  1820 00001071 4983E808                	sub r8, 8	 ;move the top of the stack one down
  1821 00001075 EBEB                    	jmp .L_tc_recycle_frame_loop_0148
  1822                                  .L_tc_recycle_frame_done_0148:
  1823 00001077 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  1824 00001078 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  1825 0000107C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1826 0000107F C9                      	leave
  1827 00001080 C22000                  	ret AND_KILL_FRAME(2)
  1828                                  .L_lambda_simple_end_00dc:	; new closure is in rax
  1829 00001083 50                      	push rax
  1830 00001084 488B4528                	mov rax, PARAM(1)	; param bcs
  1831 00001088 50                      	push rax
  1832 00001089 6A02                    	push 2	; arg count
  1833 0000108B 488B0425[BC060000]      	mov rax, qword [free_var_5]	; free var with
  1834 00001093 803805                  	cmp byte [rax], T_undefined
  1835 00001096 0F84E10C0000            	je L_error_fvar_undefined
  1836 0000109C 803804                  	cmp byte [rax], T_closure
  1837 0000109F 0F855C0D0000            	jne L_error_non_closure
  1838 000010A5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1839 000010A8 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1840 000010AB FF7500                  	push qword[rbp]
  1841 000010AE 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  1842 000010B1 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  1843 000010B5 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  1844 000010B9 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  1845 000010BD 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  1846 000010C0 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  1847 000010C3 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  1848 000010C8 4983C103                	add r9, 3 	 ;for getting to the params
  1849 000010CC 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  1850 000010D0 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  1851                                  .L_tc_recycle_frame_loop_0149:
  1852 000010D3 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  1853 000010D6 7410                    	je .L_tc_recycle_frame_done_0149
  1854 000010D8 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  1855 000010DB 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  1856 000010DE 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  1857 000010E2 4983E808                	sub r8, 8	 ;move the top of the stack one down
  1858 000010E6 EBEB                    	jmp .L_tc_recycle_frame_loop_0149
  1859                                  .L_tc_recycle_frame_done_0149:
  1860 000010E8 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  1861 000010E9 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  1862 000010ED FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1863 000010F0 C9                      	leave
  1864 000010F1 C22000                  	ret AND_KILL_FRAME(2)
  1865                                  .L_lambda_opt_end_001f:	; new closure is in rax
  1866 000010F4 50                      	push rax
  1867 000010F5 488B4528                	mov rax, PARAM(1)	; param ack-x
  1868 000010F9 8F00                    	pop qword [rax]
  1869 000010FB 48B8-                   	mov rax, sob_void
  1869 000010FD [0000000000000000] 
  1870                                  
  1871 00001105 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1872 0000110A E89B0D0000              	call malloc
  1873 0000110F 50                      	push rax
  1874 00001110 BF20000000              	mov rdi, 8 * 4	; new rib
  1875 00001115 E8900D0000              	call malloc
  1876 0000111A 50                      	push rax
  1877 0000111B BF10000000              	mov rdi, 8 * 2	; extended env
  1878 00001120 E8850D0000              	call malloc
  1879 00001125 488B7D10                	mov rdi, ENV
  1880 00001129 BE00000000              	mov rsi, 0
  1881 0000112E BA01000000              	mov rdx, 1
  1882                                  .L_lambda_opt_env_loop_0020:	; ext_env[i + 1] <-- env[i]
  1883 00001133 4883FE01                	cmp rsi, 1
  1884 00001137 7410                    	je .L_lambda_opt_env_end_0020
  1885 00001139 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1886 0000113D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1887 00001141 48FFC6                  	inc rsi
  1888 00001144 48FFC2                  	inc rdx
  1889 00001147 EBEA                    	jmp .L_lambda_opt_env_loop_0020
  1890                                  .L_lambda_opt_env_end_0020:
  1891 00001149 5B                      	pop rbx
  1892 0000114A BE00000000              	mov rsi, 0
  1893                                  .L_lambda_opt_params_loop_0020:	; copy params
  1894 0000114F 4883FE04                	cmp rsi, 4
  1895 00001153 740E                    	je .L_lambda_opt_params_end_0020
  1896 00001155 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1897 0000115A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1898 0000115E 48FFC6                  	inc rsi
  1899 00001161 EBEC                    	jmp .L_lambda_opt_params_loop_0020
  1900                                  .L_lambda_opt_params_end_0020:
  1901 00001163 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1902 00001166 4889C3                  	mov rbx, rax
  1903 00001169 58                      	pop rax
  1904 0000116A C60004                  	mov byte [rax], T_closure
  1905 0000116D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1906 00001171 48C74009[7E110000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0020
  1907 00001179 E928040000              	jmp .L_lambda_opt_end_0020
  1908                                  .L_lambda_opt_code_0020:	; lambda-opt body
  1909 0000117E 48837C241002            	cmp qword [rsp + 8 * 2], 2
  1910 00001184 7411                    	je .L_lambda_opt_arity_check_exact_0020
  1911 00001186 0F8FDD010000            	jg .L_lambda_opt_arity_check_more_0020
  1912 0000118C FF742410                	push qword [rsp + 8 * 2]
  1913 00001190 6A02                    	push 2
  1914 00001192 E9E00C0000              	jmp L_error_incorrect_arity_opt
  1915                                  .L_lambda_opt_arity_check_exact_0020:
  1916 00001197 4883EC08                	sub rsp, 8
  1917 0000119B 488B442408              	mov rax, qword[rsp + 8 *1]
  1918 000011A0 48890424                	mov qword[rsp], rax  
  1919 000011A4 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  1920 000011A9 4889442408              	mov qword[rsp + 8 * 1], rax
  1921 000011AE B803000000              	mov rax, 3
  1922 000011B3 4889442410              	mov qword[rsp + 8 *2], rax
  1923 000011B8 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  1924 000011BD 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  1925 000011C2 488B442428              	mov rax, qword[rsp + 8 * (4 + 1)]
  1926 000011C7 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  1927 000011CC 48B8-                   	mov rax, sob_nil
  1927 000011CE [0100000000000000] 
  1928 000011D6 4889442428              	mov qword[rsp + 8 * (3 + 2)], rax
  1929 000011DB C8000000                	enter 0, 0
  1930                                  	; preparing a tail-call
  1931 000011DF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1932 000011E4 E8C10C0000              	call malloc
  1933 000011E9 50                      	push rax
  1934 000011EA BF18000000              	mov rdi, 8 * 3	; new rib
  1935 000011EF E8B60C0000              	call malloc
  1936 000011F4 50                      	push rax
  1937 000011F5 BF18000000              	mov rdi, 8 * 3	; extended env
  1938 000011FA E8AB0C0000              	call malloc
  1939 000011FF 488B7D10                	mov rdi, ENV
  1940 00001203 BE00000000              	mov rsi, 0
  1941 00001208 BA01000000              	mov rdx, 1
  1942                                  .L_lambda_simple_env_loop_00df:	; ext_env[i + 1] <-- env[i]
  1943 0000120D 4883FE02                	cmp rsi, 2
  1944 00001211 7410                    	je .L_lambda_simple_env_end_00df
  1945 00001213 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1946 00001217 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1947 0000121B 48FFC6                  	inc rsi
  1948 0000121E 48FFC2                  	inc rdx
  1949 00001221 EBEA                    	jmp .L_lambda_simple_env_loop_00df
  1950                                  .L_lambda_simple_env_end_00df:
  1951 00001223 5B                      	pop rbx
  1952 00001224 BE00000000              	mov rsi, 0
  1953                                  .L_lambda_simple_params_loop_00df:	; copy params
  1954 00001229 4883FE03                	cmp rsi, 3
  1955 0000122D 740E                    	je .L_lambda_simple_params_end_00df
  1956 0000122F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1957 00001234 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1958 00001238 48FFC6                  	inc rsi
  1959 0000123B EBEC                    	jmp .L_lambda_simple_params_loop_00df
  1960                                  .L_lambda_simple_params_end_00df:
  1961 0000123D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1962 00001240 4889C3                  	mov rbx, rax
  1963 00001243 58                      	pop rax
  1964 00001244 C60004                  	mov byte [rax], T_closure
  1965 00001247 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1966 0000124B 48C74009[58120000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00df
  1967 00001253 E99B000000              	jmp .L_lambda_simple_end_00df
  1968                                  .L_lambda_simple_code_00df:	; lambda-simple body
  1969 00001258 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1970 0000125E 740B                    	je .L_lambda_simple_arity_check_ok_00df
  1971 00001260 FF742410                	push qword [rsp + 8 * 2]
  1972 00001264 6A01                    	push 1
  1973 00001266 E9F80B0000              	jmp L_error_incorrect_arity_simple
  1974                                  .L_lambda_simple_arity_check_ok_00df:
  1975 0000126B C8000000                	enter 0, 0
  1976                                  	; preparing a tail-call
  1977 0000126F 488B4520                	mov rax, PARAM(0)	; param c
  1978 00001273 50                      	push rax
  1979 00001274 488B4510                	mov rax, ENV
  1980 00001278 488B00                  	mov rax, qword [rax + 8 * 0]
  1981 0000127B 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var b
  1982 0000127F 50                      	push rax
  1983 00001280 488B4510                	mov rax, ENV
  1984 00001284 488B00                  	mov rax, qword [rax + 8 * 0]
  1985 00001287 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var a
  1986 0000128A 50                      	push rax
  1987 0000128B 6A03                    	push 3	; arg count
  1988 0000128D 488B4510                	mov rax, ENV
  1989 00001291 488B4008                	mov rax, qword [rax + 8 * 1]
  1990 00001295 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var ack3
  1991 00001298 488B00                  	mov rax, qword [rax]
  1992 0000129B 803804                  	cmp byte [rax], T_closure
  1993 0000129E 0F855D0B0000            	jne L_error_non_closure
  1994 000012A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1995 000012A7 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1996 000012AA FF7500                  	push qword[rbp]
  1997 000012AD 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  1998 000012B0 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  1999 000012B4 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2000 000012B8 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2001 000012BC 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2002 000012BF 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2003 000012C2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2004 000012C7 4983C103                	add r9, 3 	 ;for getting to the params
  2005 000012CB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2006 000012CF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2007                                  .L_tc_recycle_frame_loop_014e:
  2008 000012D2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2009 000012D5 7410                    	je .L_tc_recycle_frame_done_014e
  2010 000012D7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2011 000012DA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2012 000012DD 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2013 000012E1 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2014 000012E5 EBEB                    	jmp .L_tc_recycle_frame_loop_014e
  2015                                  .L_tc_recycle_frame_done_014e:
  2016 000012E7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2017 000012E8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2018 000012EC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2019 000012EF C9                      	leave
  2020 000012F0 C21800                  	ret AND_KILL_FRAME(1)
  2021                                  .L_lambda_simple_end_00df:	; new closure is in rax
  2022 000012F3 50                      	push rax
  2023 000012F4 488B4530                	mov rax, PARAM(2)	; param cs
  2024 000012F8 50                      	push rax
  2025 000012F9 6A02                    	push 2	; arg count
  2026 000012FB 488B0425[BC060000]      	mov rax, qword [free_var_5]	; free var with
  2027 00001303 803805                  	cmp byte [rax], T_undefined
  2028 00001306 0F84710A0000            	je L_error_fvar_undefined
  2029 0000130C 803804                  	cmp byte [rax], T_closure
  2030 0000130F 0F85EC0A0000            	jne L_error_non_closure
  2031 00001315 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2032 00001318 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2033 0000131B FF7500                  	push qword[rbp]
  2034 0000131E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2035 00001321 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2036 00001325 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2037 00001329 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2038 0000132D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2039 00001330 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2040 00001333 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2041 00001338 4983C103                	add r9, 3 	 ;for getting to the params
  2042 0000133C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2043 00001340 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2044                                  .L_tc_recycle_frame_loop_014f:
  2045 00001343 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2046 00001346 7410                    	je .L_tc_recycle_frame_done_014f
  2047 00001348 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2048 0000134B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2049 0000134E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2050 00001352 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2051 00001356 EBEB                    	jmp .L_tc_recycle_frame_loop_014f
  2052                                  .L_tc_recycle_frame_done_014f:
  2053 00001358 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2054 00001359 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2055 0000135D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2056 00001360 C9                      	leave
  2057 00001361 C22800                  	ret AND_KILL_FRAME(3)
  2058 00001364 E93D020000              	jmp .L_lambda_opt_end_0020	; new closure is in rax
  2059                                  .L_lambda_opt_arity_check_more_0020:
  2060 00001369 488B442410              	mov rax, qword[rsp + 2 * 8]
  2061 0000136E 4889C7                  	mov rdi, rax
  2062 00001371 49B9-                   	mov r9, sob_nil
  2062 00001373 [0100000000000000] 
  2063 0000137B 4C8B442410              	mov r8, qword[rsp+2*8]
  2064                                  .L_lambda_opt_stack_shrink_loop_0020:
  2065 00001380 4983F802                	cmp r8, 2
  2066 00001384 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_0020
  2067 00001386 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)]
  2068 0000138B BF11000000              	mov rdi, 1+8+8	;for pair
  2069 00001390 E8150B0000              	call malloc	 ;to create the pair in the stack
  2070 00001395 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  2071 00001398 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
  2072 0000139C 4C894809                 	mov qword[rax+1+8],r9
  2073 000013A0 4989C1                  	mov r9 , rax	 ; for the recursion 
  2074 000013A3 49FFC8                  	dec r8
  2075 000013A6 EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_0020
  2076                                  .L_lambda_opt_stack_shrink_loop_exit_0020:
  2077 000013A8 488B442410              	mov rax, qword[rsp + 2 * 8]
  2078 000013AD BF03000000              	mov rdi, 3
  2079 000013B2 4829F8                  	sub rax, rdi
  2080 000013B5 4889C7                  	mov rdi, rax
  2081 000013B8 486BC008                	imul rax,8
  2082 000013BC 4801C4                  	add rsp, rax
  2083 000013BF 4889E0                  	mov rax, rsp
  2084 000013C2 4989F8                  	mov r8, rdi
  2085 000013C5 4D6BC008                	imul r8, 8
  2086 000013C9 4C29C0                  	sub rax, r8
  2087 000013CC 4989C2                  	mov r10, rax	; holds the original ret in the stack
  2088 000013CF 4983C218                	add r10, 8*3
  2089 000013D3 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
  2090 000013D7 4C8B00                  	mov r8, qword[rax] ;arg count = r8
  2091 000013DA 4D6BC008                	imul r8,8
  2092 000013DE 4C01C0                  	add rax, r8
  2093 000013E1 4C8908                  	mov qword[rax] ,r9
  2094 000013E4 4D89D0                   	mov r8, r10
  2095 000013E7 4983C008                	add r8, 8 * 1
  2096 000013EB 4D8B08                  	mov r9,qword[r8]
  2097 000013EE 4D890CF8                	mov qword [r8 + rdi * 8], r9
  2098 000013F2 4D89D0                  	mov r8, r10
  2099 000013F5 4983C000                	add r8, 8 * 0
  2100 000013F9 4D8B08                  	mov r9,qword[r8]
  2101 000013FC 4D890CF8                	mov qword [r8 + rdi * 8], r9
  2102 00001400 4983EA18                	sub r10, 8*3
  2103 00001404 48C744241003000000      	mov qword [rsp+2*8], 3
  2104 0000140D 498B4208                	mov rax, qword[r10 + 1 * 8]
  2105 00001411 4889442408              	mov qword[rsp + 1*8] ,rax
  2106 00001416 498B02                  	mov rax, qword[r10]
  2107 00001419 48890424                	mov qword[rsp], rax
  2108 0000141D C8000000                	enter 0, 0
  2109                                  	; preparing a tail-call
  2110 00001421 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2111 00001426 E87F0A0000              	call malloc
  2112 0000142B 50                      	push rax
  2113 0000142C BF18000000              	mov rdi, 8 * 3	; new rib
  2114 00001431 E8740A0000              	call malloc
  2115 00001436 50                      	push rax
  2116 00001437 BF18000000              	mov rdi, 8 * 3	; extended env
  2117 0000143C E8690A0000              	call malloc
  2118 00001441 488B7D10                	mov rdi, ENV
  2119 00001445 BE00000000              	mov rsi, 0
  2120 0000144A BA01000000              	mov rdx, 1
  2121                                  .L_lambda_simple_env_loop_00de:	; ext_env[i + 1] <-- env[i]
  2122 0000144F 4883FE02                	cmp rsi, 2
  2123 00001453 7410                    	je .L_lambda_simple_env_end_00de
  2124 00001455 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2125 00001459 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2126 0000145D 48FFC6                  	inc rsi
  2127 00001460 48FFC2                  	inc rdx
  2128 00001463 EBEA                    	jmp .L_lambda_simple_env_loop_00de
  2129                                  .L_lambda_simple_env_end_00de:
  2130 00001465 5B                      	pop rbx
  2131 00001466 BE00000000              	mov rsi, 0
  2132                                  .L_lambda_simple_params_loop_00de:	; copy params
  2133 0000146B 4883FE03                	cmp rsi, 3
  2134 0000146F 740E                    	je .L_lambda_simple_params_end_00de
  2135 00001471 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2136 00001476 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2137 0000147A 48FFC6                  	inc rsi
  2138 0000147D EBEC                    	jmp .L_lambda_simple_params_loop_00de
  2139                                  .L_lambda_simple_params_end_00de:
  2140 0000147F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2141 00001482 4889C3                  	mov rbx, rax
  2142 00001485 58                      	pop rax
  2143 00001486 C60004                  	mov byte [rax], T_closure
  2144 00001489 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2145 0000148D 48C74009[9A140000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00de
  2146 00001495 E99B000000              	jmp .L_lambda_simple_end_00de
  2147                                  .L_lambda_simple_code_00de:	; lambda-simple body
  2148 0000149A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2149 000014A0 740B                    	je .L_lambda_simple_arity_check_ok_00de
  2150 000014A2 FF742410                	push qword [rsp + 8 * 2]
  2151 000014A6 6A01                    	push 1
  2152 000014A8 E9B6090000              	jmp L_error_incorrect_arity_simple
  2153                                  .L_lambda_simple_arity_check_ok_00de:
  2154 000014AD C8000000                	enter 0, 0
  2155                                  	; preparing a tail-call
  2156 000014B1 488B4520                	mov rax, PARAM(0)	; param c
  2157 000014B5 50                      	push rax
  2158 000014B6 488B4510                	mov rax, ENV
  2159 000014BA 488B00                  	mov rax, qword [rax + 8 * 0]
  2160 000014BD 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var b
  2161 000014C1 50                      	push rax
  2162 000014C2 488B4510                	mov rax, ENV
  2163 000014C6 488B00                  	mov rax, qword [rax + 8 * 0]
  2164 000014C9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var a
  2165 000014CC 50                      	push rax
  2166 000014CD 6A03                    	push 3	; arg count
  2167 000014CF 488B4510                	mov rax, ENV
  2168 000014D3 488B4008                	mov rax, qword [rax + 8 * 1]
  2169 000014D7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var ack3
  2170 000014DA 488B00                  	mov rax, qword [rax]
  2171 000014DD 803804                  	cmp byte [rax], T_closure
  2172 000014E0 0F851B090000            	jne L_error_non_closure
  2173 000014E6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2174 000014E9 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2175 000014EC FF7500                  	push qword[rbp]
  2176 000014EF 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2177 000014F2 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2178 000014F6 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2179 000014FA 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2180 000014FE 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2181 00001501 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2182 00001504 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2183 00001509 4983C103                	add r9, 3 	 ;for getting to the params
  2184 0000150D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2185 00001511 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2186                                  .L_tc_recycle_frame_loop_014c:
  2187 00001514 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2188 00001517 7410                    	je .L_tc_recycle_frame_done_014c
  2189 00001519 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2190 0000151C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2191 0000151F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2192 00001523 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2193 00001527 EBEB                    	jmp .L_tc_recycle_frame_loop_014c
  2194                                  .L_tc_recycle_frame_done_014c:
  2195 00001529 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2196 0000152A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2197 0000152E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2198 00001531 C9                      	leave
  2199 00001532 C21800                  	ret AND_KILL_FRAME(1)
  2200                                  .L_lambda_simple_end_00de:	; new closure is in rax
  2201 00001535 50                      	push rax
  2202 00001536 488B4530                	mov rax, PARAM(2)	; param cs
  2203 0000153A 50                      	push rax
  2204 0000153B 6A02                    	push 2	; arg count
  2205 0000153D 488B0425[BC060000]      	mov rax, qword [free_var_5]	; free var with
  2206 00001545 803805                  	cmp byte [rax], T_undefined
  2207 00001548 0F842F080000            	je L_error_fvar_undefined
  2208 0000154E 803804                  	cmp byte [rax], T_closure
  2209 00001551 0F85AA080000            	jne L_error_non_closure
  2210 00001557 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2211 0000155A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2212 0000155D FF7500                  	push qword[rbp]
  2213 00001560 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2214 00001563 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2215 00001567 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2216 0000156B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2217 0000156F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2218 00001572 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2219 00001575 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2220 0000157A 4983C103                	add r9, 3 	 ;for getting to the params
  2221 0000157E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2222 00001582 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2223                                  .L_tc_recycle_frame_loop_014d:
  2224 00001585 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2225 00001588 7410                    	je .L_tc_recycle_frame_done_014d
  2226 0000158A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2227 0000158D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2228 00001590 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2229 00001594 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2230 00001598 EBEB                    	jmp .L_tc_recycle_frame_loop_014d
  2231                                  .L_tc_recycle_frame_done_014d:
  2232 0000159A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2233 0000159B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2234 0000159F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2235 000015A2 C9                      	leave
  2236 000015A3 C22800                  	ret AND_KILL_FRAME(3)
  2237                                  .L_lambda_opt_end_0020:	; new closure is in rax
  2238 000015A6 50                      	push rax
  2239 000015A7 488B4530                	mov rax, PARAM(2)	; param ack-y
  2240 000015AB 8F00                    	pop qword [rax]
  2241 000015AD 48B8-                   	mov rax, sob_void
  2241 000015AF [0000000000000000] 
  2242                                  
  2243 000015B7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2244 000015BC E8E9080000              	call malloc
  2245 000015C1 50                      	push rax
  2246 000015C2 BF20000000              	mov rdi, 8 * 4	; new rib
  2247 000015C7 E8DE080000              	call malloc
  2248 000015CC 50                      	push rax
  2249 000015CD BF10000000              	mov rdi, 8 * 2	; extended env
  2250 000015D2 E8D3080000              	call malloc
  2251 000015D7 488B7D10                	mov rdi, ENV
  2252 000015DB BE00000000              	mov rsi, 0
  2253 000015E0 BA01000000              	mov rdx, 1
  2254                                  .L_lambda_opt_env_loop_0021:	; ext_env[i + 1] <-- env[i]
  2255 000015E5 4883FE01                	cmp rsi, 1
  2256 000015E9 7410                    	je .L_lambda_opt_env_end_0021
  2257 000015EB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2258 000015EF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2259 000015F3 48FFC6                  	inc rsi
  2260 000015F6 48FFC2                  	inc rdx
  2261 000015F9 EBEA                    	jmp .L_lambda_opt_env_loop_0021
  2262                                  .L_lambda_opt_env_end_0021:
  2263 000015FB 5B                      	pop rbx
  2264 000015FC BE00000000              	mov rsi, 0
  2265                                  .L_lambda_opt_params_loop_0021:	; copy params
  2266 00001601 4883FE04                	cmp rsi, 4
  2267 00001605 740E                    	je .L_lambda_opt_params_end_0021
  2268 00001607 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2269 0000160C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2270 00001610 48FFC6                  	inc rsi
  2271 00001613 EBEC                    	jmp .L_lambda_opt_params_loop_0021
  2272                                  .L_lambda_opt_params_end_0021:
  2273 00001615 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2274 00001618 4889C3                  	mov rbx, rax
  2275 0000161B 58                      	pop rax
  2276 0000161C C60004                  	mov byte [rax], T_closure
  2277 0000161F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2278 00001623 48C74009[30160000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0021
  2279 0000162B E9DE030000              	jmp .L_lambda_opt_end_0021
  2280                                  .L_lambda_opt_code_0021:	; lambda-opt body
  2281 00001630 48837C241000            	cmp qword [rsp + 8 * 2], 0
  2282 00001636 7411                    	je .L_lambda_opt_arity_check_exact_0021
  2283 00001638 0F8FBC010000            	jg .L_lambda_opt_arity_check_more_0021
  2284 0000163E FF742410                	push qword [rsp + 8 * 2]
  2285 00001642 6A00                    	push 0
  2286 00001644 E92E080000              	jmp L_error_incorrect_arity_opt
  2287                                  .L_lambda_opt_arity_check_exact_0021:
  2288 00001649 4883EC08                	sub rsp, 8
  2289 0000164D 488B442408              	mov rax, qword[rsp + 8 *1]
  2290 00001652 48890424                	mov qword[rsp], rax  
  2291 00001656 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  2292 0000165B 4889442408              	mov qword[rsp + 8 * 1], rax
  2293 00001660 B801000000              	mov rax, 1
  2294 00001665 4889442410              	mov qword[rsp + 8 *2], rax
  2295 0000166A 48B8-                   	mov rax, sob_nil
  2295 0000166C [0100000000000000] 
  2296 00001674 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  2297 00001679 C8000000                	enter 0, 0
  2298                                  	; preparing a tail-call
  2299 0000167D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2300 00001682 E823080000              	call malloc
  2301 00001687 50                      	push rax
  2302 00001688 BF08000000              	mov rdi, 8 * 1	; new rib
  2303 0000168D E818080000              	call malloc
  2304 00001692 50                      	push rax
  2305 00001693 BF18000000              	mov rdi, 8 * 3	; extended env
  2306 00001698 E80D080000              	call malloc
  2307 0000169D 488B7D10                	mov rdi, ENV
  2308 000016A1 BE00000000              	mov rsi, 0
  2309 000016A6 BA01000000              	mov rdx, 1
  2310                                  .L_lambda_simple_env_loop_00e1:	; ext_env[i + 1] <-- env[i]
  2311 000016AB 4883FE02                	cmp rsi, 2
  2312 000016AF 7410                    	je .L_lambda_simple_env_end_00e1
  2313 000016B1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2314 000016B5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2315 000016B9 48FFC6                  	inc rsi
  2316 000016BC 48FFC2                  	inc rdx
  2317 000016BF EBEA                    	jmp .L_lambda_simple_env_loop_00e1
  2318                                  .L_lambda_simple_env_end_00e1:
  2319 000016C1 5B                      	pop rbx
  2320 000016C2 BE00000000              	mov rsi, 0
  2321                                  .L_lambda_simple_params_loop_00e1:	; copy params
  2322 000016C7 4883FE01                	cmp rsi, 1
  2323 000016CB 740E                    	je .L_lambda_simple_params_end_00e1
  2324 000016CD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2325 000016D2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2326 000016D6 48FFC6                  	inc rsi
  2327 000016D9 EBEC                    	jmp .L_lambda_simple_params_loop_00e1
  2328                                  .L_lambda_simple_params_end_00e1:
  2329 000016DB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2330 000016DE 4889C3                  	mov rbx, rax
  2331 000016E1 58                      	pop rax
  2332 000016E2 C60004                  	mov byte [rax], T_closure
  2333 000016E5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2334 000016E9 48C74009[F6160000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e1
  2335 000016F1 E98E000000              	jmp .L_lambda_simple_end_00e1
  2336                                  .L_lambda_simple_code_00e1:	; lambda-simple body
  2337 000016F6 48837C241003            	cmp qword [rsp + 8 * 2], 3
  2338 000016FC 740B                    	je .L_lambda_simple_arity_check_ok_00e1
  2339 000016FE FF742410                	push qword [rsp + 8 * 2]
  2340 00001702 6A03                    	push 3
  2341 00001704 E95A070000              	jmp L_error_incorrect_arity_simple
  2342                                  .L_lambda_simple_arity_check_ok_00e1:
  2343 00001709 C8000000                	enter 0, 0
  2344                                  	; preparing a tail-call
  2345 0000170D 488B4530                	mov rax, PARAM(2)	; param c
  2346 00001711 50                      	push rax
  2347 00001712 488B4528                	mov rax, PARAM(1)	; param b
  2348 00001716 50                      	push rax
  2349 00001717 488B4520                	mov rax, PARAM(0)	; param a
  2350 0000171B 50                      	push rax
  2351 0000171C 6A03                    	push 3	; arg count
  2352 0000171E 488B4510                	mov rax, ENV
  2353 00001722 488B4008                	mov rax, qword [rax + 8 * 1]
  2354 00001726 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var ack3
  2355 00001729 488B00                  	mov rax, qword [rax]
  2356 0000172C 803804                  	cmp byte [rax], T_closure
  2357 0000172F 0F85CC060000            	jne L_error_non_closure
  2358 00001735 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2359 00001738 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2360 0000173B FF7500                  	push qword[rbp]
  2361 0000173E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2362 00001741 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2363 00001745 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2364 00001749 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2365 0000174D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2366 00001750 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2367 00001753 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2368 00001758 4983C103                	add r9, 3 	 ;for getting to the params
  2369 0000175C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2370 00001760 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2371                                  .L_tc_recycle_frame_loop_0152:
  2372 00001763 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2373 00001766 7410                    	je .L_tc_recycle_frame_done_0152
  2374 00001768 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2375 0000176B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2376 0000176E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2377 00001772 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2378 00001776 EBEB                    	jmp .L_tc_recycle_frame_loop_0152
  2379                                  .L_tc_recycle_frame_done_0152:
  2380 00001778 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2381 00001779 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2382 0000177D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2383 00001780 C9                      	leave
  2384 00001781 C22800                  	ret AND_KILL_FRAME(3)
  2385                                  .L_lambda_simple_end_00e1:	; new closure is in rax
  2386 00001784 50                      	push rax
  2387 00001785 488B4520                	mov rax, PARAM(0)	; param abcs
  2388 00001789 50                      	push rax
  2389 0000178A 6A02                    	push 2	; arg count
  2390 0000178C 488B0425[BC060000]      	mov rax, qword [free_var_5]	; free var with
  2391 00001794 803805                  	cmp byte [rax], T_undefined
  2392 00001797 0F84E0050000            	je L_error_fvar_undefined
  2393 0000179D 803804                  	cmp byte [rax], T_closure
  2394 000017A0 0F855B060000            	jne L_error_non_closure
  2395 000017A6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2396 000017A9 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2397 000017AC FF7500                  	push qword[rbp]
  2398 000017AF 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2399 000017B2 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2400 000017B6 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2401 000017BA 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2402 000017BE 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2403 000017C1 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2404 000017C4 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2405 000017C9 4983C103                	add r9, 3 	 ;for getting to the params
  2406 000017CD 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2407 000017D1 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2408                                  .L_tc_recycle_frame_loop_0153:
  2409 000017D4 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2410 000017D7 7410                    	je .L_tc_recycle_frame_done_0153
  2411 000017D9 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2412 000017DC 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2413 000017DF 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2414 000017E3 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2415 000017E7 EBEB                    	jmp .L_tc_recycle_frame_loop_0153
  2416                                  .L_tc_recycle_frame_done_0153:
  2417 000017E9 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2418 000017EA 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2419 000017EE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2420 000017F1 C9                      	leave
  2421 000017F2 C21800                  	ret AND_KILL_FRAME(1)
  2422 000017F5 E914020000              	jmp .L_lambda_opt_end_0021	; new closure is in rax
  2423                                  .L_lambda_opt_arity_check_more_0021:
  2424 000017FA 488B442410              	mov rax, qword[rsp + 2 * 8]
  2425 000017FF 4889C7                  	mov rdi, rax
  2426 00001802 49B9-                   	mov r9, sob_nil
  2426 00001804 [0100000000000000] 
  2427 0000180C 4C8B442410              	mov r8, qword[rsp+2*8]
  2428                                  .L_lambda_opt_stack_shrink_loop_0021:
  2429 00001811 4983F800                	cmp r8, 0
  2430 00001815 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_0021
  2431 00001817 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)]
  2432 0000181C BF11000000              	mov rdi, 1+8+8	;for pair
  2433 00001821 E884060000              	call malloc	 ;to create the pair in the stack
  2434 00001826 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  2435 00001829 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
  2436 0000182D 4C894809                 	mov qword[rax+1+8],r9
  2437 00001831 4989C1                  	mov r9 , rax	 ; for the recursion 
  2438 00001834 49FFC8                  	dec r8
  2439 00001837 EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_0021
  2440                                  .L_lambda_opt_stack_shrink_loop_exit_0021:
  2441 00001839 488B442410              	mov rax, qword[rsp + 2 * 8]
  2442 0000183E BF01000000              	mov rdi, 1
  2443 00001843 4829F8                  	sub rax, rdi
  2444 00001846 4889C7                  	mov rdi, rax
  2445 00001849 486BC008                	imul rax,8
  2446 0000184D 4801C4                  	add rsp, rax
  2447 00001850 4889E0                  	mov rax, rsp
  2448 00001853 4989F8                  	mov r8, rdi
  2449 00001856 4D6BC008                	imul r8, 8
  2450 0000185A 4C29C0                  	sub rax, r8
  2451 0000185D 4989C2                  	mov r10, rax	; holds the original ret in the stack
  2452 00001860 4983C218                	add r10, 8*3
  2453 00001864 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
  2454 00001868 4C8B00                  	mov r8, qword[rax] ;arg count = r8
  2455 0000186B 4D6BC008                	imul r8,8
  2456 0000186F 4C01C0                  	add rax, r8
  2457 00001872 4C8908                  	mov qword[rax] ,r9
  2458 00001875 4983EA18                 	sub r10, 8*3
  2459 00001879 48C744241001000000      	mov qword [rsp+2*8], 1
  2460 00001882 498B4208                	mov rax, qword[r10 + 1 * 8]
  2461 00001886 4889442408              	mov qword[rsp + 1*8] ,rax
  2462 0000188B 498B02                  	mov rax, qword[r10]
  2463 0000188E 48890424                	mov qword[rsp], rax
  2464 00001892 C8000000                	enter 0, 0
  2465                                  	; preparing a tail-call
  2466 00001896 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2467 0000189B E80A060000              	call malloc
  2468 000018A0 50                      	push rax
  2469 000018A1 BF08000000              	mov rdi, 8 * 1	; new rib
  2470 000018A6 E8FF050000              	call malloc
  2471 000018AB 50                      	push rax
  2472 000018AC BF18000000              	mov rdi, 8 * 3	; extended env
  2473 000018B1 E8F4050000              	call malloc
  2474 000018B6 488B7D10                	mov rdi, ENV
  2475 000018BA BE00000000              	mov rsi, 0
  2476 000018BF BA01000000              	mov rdx, 1
  2477                                  .L_lambda_simple_env_loop_00e0:	; ext_env[i + 1] <-- env[i]
  2478 000018C4 4883FE02                	cmp rsi, 2
  2479 000018C8 7410                    	je .L_lambda_simple_env_end_00e0
  2480 000018CA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2481 000018CE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2482 000018D2 48FFC6                  	inc rsi
  2483 000018D5 48FFC2                  	inc rdx
  2484 000018D8 EBEA                    	jmp .L_lambda_simple_env_loop_00e0
  2485                                  .L_lambda_simple_env_end_00e0:
  2486 000018DA 5B                      	pop rbx
  2487 000018DB BE00000000              	mov rsi, 0
  2488                                  .L_lambda_simple_params_loop_00e0:	; copy params
  2489 000018E0 4883FE01                	cmp rsi, 1
  2490 000018E4 740E                    	je .L_lambda_simple_params_end_00e0
  2491 000018E6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2492 000018EB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2493 000018EF 48FFC6                  	inc rsi
  2494 000018F2 EBEC                    	jmp .L_lambda_simple_params_loop_00e0
  2495                                  .L_lambda_simple_params_end_00e0:
  2496 000018F4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2497 000018F7 4889C3                  	mov rbx, rax
  2498 000018FA 58                      	pop rax
  2499 000018FB C60004                  	mov byte [rax], T_closure
  2500 000018FE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2501 00001902 48C74009[0F190000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e0
  2502 0000190A E98E000000              	jmp .L_lambda_simple_end_00e0
  2503                                  .L_lambda_simple_code_00e0:	; lambda-simple body
  2504 0000190F 48837C241003            	cmp qword [rsp + 8 * 2], 3
  2505 00001915 740B                    	je .L_lambda_simple_arity_check_ok_00e0
  2506 00001917 FF742410                	push qword [rsp + 8 * 2]
  2507 0000191B 6A03                    	push 3
  2508 0000191D E941050000              	jmp L_error_incorrect_arity_simple
  2509                                  .L_lambda_simple_arity_check_ok_00e0:
  2510 00001922 C8000000                	enter 0, 0
  2511                                  	; preparing a tail-call
  2512 00001926 488B4530                	mov rax, PARAM(2)	; param c
  2513 0000192A 50                      	push rax
  2514 0000192B 488B4528                	mov rax, PARAM(1)	; param b
  2515 0000192F 50                      	push rax
  2516 00001930 488B4520                	mov rax, PARAM(0)	; param a
  2517 00001934 50                      	push rax
  2518 00001935 6A03                    	push 3	; arg count
  2519 00001937 488B4510                	mov rax, ENV
  2520 0000193B 488B4008                	mov rax, qword [rax + 8 * 1]
  2521 0000193F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var ack3
  2522 00001942 488B00                  	mov rax, qword [rax]
  2523 00001945 803804                  	cmp byte [rax], T_closure
  2524 00001948 0F85B3040000            	jne L_error_non_closure
  2525 0000194E FF7001                  	push SOB_CLOSURE_ENV(rax)
  2526 00001951 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2527 00001954 FF7500                  	push qword[rbp]
  2528 00001957 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2529 0000195A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2530 0000195E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2531 00001962 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2532 00001966 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2533 00001969 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2534 0000196C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2535 00001971 4983C103                	add r9, 3 	 ;for getting to the params
  2536 00001975 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2537 00001979 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2538                                  .L_tc_recycle_frame_loop_0150:
  2539 0000197C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2540 0000197F 7410                    	je .L_tc_recycle_frame_done_0150
  2541 00001981 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2542 00001984 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2543 00001987 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2544 0000198B 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2545 0000198F EBEB                    	jmp .L_tc_recycle_frame_loop_0150
  2546                                  .L_tc_recycle_frame_done_0150:
  2547 00001991 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2548 00001992 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2549 00001996 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2550 00001999 C9                      	leave
  2551 0000199A C22800                  	ret AND_KILL_FRAME(3)
  2552                                  .L_lambda_simple_end_00e0:	; new closure is in rax
  2553 0000199D 50                      	push rax
  2554 0000199E 488B4520                	mov rax, PARAM(0)	; param abcs
  2555 000019A2 50                      	push rax
  2556 000019A3 6A02                    	push 2	; arg count
  2557 000019A5 488B0425[BC060000]      	mov rax, qword [free_var_5]	; free var with
  2558 000019AD 803805                  	cmp byte [rax], T_undefined
  2559 000019B0 0F84C7030000            	je L_error_fvar_undefined
  2560 000019B6 803804                  	cmp byte [rax], T_closure
  2561 000019B9 0F8542040000            	jne L_error_non_closure
  2562 000019BF FF7001                  	push SOB_CLOSURE_ENV(rax)
  2563 000019C2 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2564 000019C5 FF7500                  	push qword[rbp]
  2565 000019C8 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2566 000019CB 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2567 000019CF 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2568 000019D3 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2569 000019D7 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2570 000019DA 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2571 000019DD 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2572 000019E2 4983C103                	add r9, 3 	 ;for getting to the params
  2573 000019E6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2574 000019EA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2575                                  .L_tc_recycle_frame_loop_0151:
  2576 000019ED 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2577 000019F0 7410                    	je .L_tc_recycle_frame_done_0151
  2578 000019F2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2579 000019F5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2580 000019F8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2581 000019FC 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2582 00001A00 EBEB                    	jmp .L_tc_recycle_frame_loop_0151
  2583                                  .L_tc_recycle_frame_done_0151:
  2584 00001A02 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2585 00001A03 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2586 00001A07 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2587 00001A0A C9                      	leave
  2588 00001A0B C21800                  	ret AND_KILL_FRAME(1)
  2589                                  .L_lambda_opt_end_0021:	; new closure is in rax
  2590 00001A0E 50                      	push rax
  2591 00001A0F 488B4538                	mov rax, PARAM(3)	; param ack-z
  2592 00001A13 8F00                    	pop qword [rax]
  2593 00001A15 48B8-                   	mov rax, sob_void
  2593 00001A17 [0000000000000000] 
  2594                                  
  2595 00001A1F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2596 00001A24 E881040000              	call malloc
  2597 00001A29 50                      	push rax
  2598 00001A2A BF20000000              	mov rdi, 8 * 4	; new rib
  2599 00001A2F E876040000              	call malloc
  2600 00001A34 50                      	push rax
  2601 00001A35 BF10000000              	mov rdi, 8 * 2	; extended env
  2602 00001A3A E86B040000              	call malloc
  2603 00001A3F 488B7D10                	mov rdi, ENV
  2604 00001A43 BE00000000              	mov rsi, 0
  2605 00001A48 BA01000000              	mov rdx, 1
  2606                                  .L_lambda_simple_env_loop_00e2:	; ext_env[i + 1] <-- env[i]
  2607 00001A4D 4883FE01                	cmp rsi, 1
  2608 00001A51 7410                    	je .L_lambda_simple_env_end_00e2
  2609 00001A53 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2610 00001A57 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2611 00001A5B 48FFC6                  	inc rsi
  2612 00001A5E 48FFC2                  	inc rdx
  2613 00001A61 EBEA                    	jmp .L_lambda_simple_env_loop_00e2
  2614                                  .L_lambda_simple_env_end_00e2:
  2615 00001A63 5B                      	pop rbx
  2616 00001A64 BE00000000              	mov rsi, 0
  2617                                  .L_lambda_simple_params_loop_00e2:	; copy params
  2618 00001A69 4883FE04                	cmp rsi, 4
  2619 00001A6D 740E                    	je .L_lambda_simple_params_end_00e2
  2620 00001A6F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2621 00001A74 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2622 00001A78 48FFC6                  	inc rsi
  2623 00001A7B EBEC                    	jmp .L_lambda_simple_params_loop_00e2
  2624                                  .L_lambda_simple_params_end_00e2:
  2625 00001A7D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2626 00001A80 4889C3                  	mov rbx, rax
  2627 00001A83 58                      	pop rax
  2628 00001A84 C60004                  	mov byte [rax], T_closure
  2629 00001A87 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2630 00001A8B 48C74009[981A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e2
  2631 00001A93 E95C020000              	jmp .L_lambda_simple_end_00e2
  2632                                  .L_lambda_simple_code_00e2:	; lambda-simple body
  2633 00001A98 48837C241000            	cmp qword [rsp + 8 * 2], 0
  2634 00001A9E 740B                    	je .L_lambda_simple_arity_check_ok_00e2
  2635 00001AA0 FF742410                	push qword [rsp + 8 * 2]
  2636 00001AA4 6A00                    	push 0
  2637 00001AA6 E9B8030000              	jmp L_error_incorrect_arity_simple
  2638                                  .L_lambda_simple_arity_check_ok_00e2:
  2639 00001AAB C8000000                	enter 0, 0
  2640                                  	; preparing a non-tail-call
  2641                                  	; preparing a non-tail-call
  2642 00001AAF 48B8-                   	mov rax, L_constants + 1559
  2642 00001AB1 [1706000000000000] 
  2643 00001AB9 50                      	push rax
  2644 00001ABA 48B8-                   	mov rax, L_constants + 1559
  2644 00001ABC [1706000000000000] 
  2645 00001AC4 50                      	push rax
  2646 00001AC5 48B8-                   	mov rax, L_constants + 1514
  2646 00001AC7 [EA05000000000000] 
  2647 00001ACF 50                      	push rax
  2648 00001AD0 6A03                    	push 3	; arg count
  2649 00001AD2 488B4510                	mov rax, ENV
  2650 00001AD6 488B00                  	mov rax, qword [rax + 8 * 0]
  2651 00001AD9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var ack3
  2652 00001ADC 488B00                  	mov rax, qword [rax]
  2653 00001ADF 803804                  	cmp byte [rax], T_closure
  2654 00001AE2 0F8519030000            	jne L_error_non_closure
  2655 00001AE8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2656 00001AEB FF5009                  	call SOB_CLOSURE_CODE(rax)
  2657 00001AEE 50                      	push rax
  2658 00001AEF 48B8-                   	mov rax, L_constants + 1550
  2658 00001AF1 [0E06000000000000] 
  2659 00001AF9 50                      	push rax
  2660 00001AFA 6A02                    	push 2	; arg count
  2661 00001AFC 488B0425[89060000]      	mov rax, qword [free_var_2]	; free var __bin-equal-zz
  2662 00001B04 803805                  	cmp byte [rax], T_undefined
  2663 00001B07 0F8470020000            	je L_error_fvar_undefined
  2664 00001B0D 803804                  	cmp byte [rax], T_closure
  2665 00001B10 0F85EB020000            	jne L_error_non_closure
  2666 00001B16 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2667 00001B19 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2668 00001B1C 483D[02000000]          	cmp rax, sob_boolean_false
  2669 00001B22 0F84BE010000            	je .L_if_else_00ba
  2670                                  	; preparing a non-tail-call
  2671                                  	; preparing a non-tail-call
  2672 00001B28 48B8-                   	mov rax, L_constants + 1577
  2672 00001B2A [2906000000000000] 
  2673 00001B32 50                      	push rax
  2674 00001B33 48B8-                   	mov rax, L_constants + 1577
  2674 00001B35 [2906000000000000] 
  2675 00001B3D 50                      	push rax
  2676 00001B3E 48B8-                   	mov rax, L_constants + 1514
  2676 00001B40 [EA05000000000000] 
  2677 00001B48 50                      	push rax
  2678 00001B49 6A03                    	push 3	; arg count
  2679 00001B4B 488B4510                	mov rax, ENV
  2680 00001B4F 488B00                  	mov rax, qword [rax + 8 * 0]
  2681 00001B52 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var ack3
  2682 00001B55 488B00                  	mov rax, qword [rax]
  2683 00001B58 803804                  	cmp byte [rax], T_closure
  2684 00001B5B 0F85A0020000            	jne L_error_non_closure
  2685 00001B61 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2686 00001B64 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2687 00001B67 50                      	push rax
  2688 00001B68 48B8-                   	mov rax, L_constants + 1568
  2688 00001B6A [2006000000000000] 
  2689 00001B72 50                      	push rax
  2690 00001B73 6A02                    	push 2	; arg count
  2691 00001B75 488B0425[89060000]      	mov rax, qword [free_var_2]	; free var __bin-equal-zz
  2692 00001B7D 803805                  	cmp byte [rax], T_undefined
  2693 00001B80 0F84F7010000            	je L_error_fvar_undefined
  2694 00001B86 803804                  	cmp byte [rax], T_closure
  2695 00001B89 0F8572020000            	jne L_error_non_closure
  2696 00001B8F FF7001                  	push SOB_CLOSURE_ENV(rax)
  2697 00001B92 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2698 00001B95 483D[02000000]          	cmp rax, sob_boolean_false
  2699 00001B9B 0F8439010000            	je .L_if_else_00b9
  2700                                  	; preparing a non-tail-call
  2701                                  	; preparing a non-tail-call
  2702 00001BA1 48B8-                   	mov rax, L_constants + 1595
  2702 00001BA3 [3B06000000000000] 
  2703 00001BAB 50                      	push rax
  2704 00001BAC 48B8-                   	mov rax, L_constants + 1541
  2704 00001BAE [0506000000000000] 
  2705 00001BB6 50                      	push rax
  2706 00001BB7 48B8-                   	mov rax, L_constants + 1541
  2706 00001BB9 [0506000000000000] 
  2707 00001BC1 50                      	push rax
  2708 00001BC2 6A03                    	push 3	; arg count
  2709 00001BC4 488B4510                	mov rax, ENV
  2710 00001BC8 488B00                  	mov rax, qword [rax + 8 * 0]
  2711 00001BCB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var ack3
  2712 00001BCE 488B00                  	mov rax, qword [rax]
  2713 00001BD1 803804                  	cmp byte [rax], T_closure
  2714 00001BD4 0F8527020000            	jne L_error_non_closure
  2715 00001BDA FF7001                  	push SOB_CLOSURE_ENV(rax)
  2716 00001BDD FF5009                  	call SOB_CLOSURE_CODE(rax)
  2717 00001BE0 50                      	push rax
  2718 00001BE1 48B8-                   	mov rax, L_constants + 1586
  2718 00001BE3 [3206000000000000] 
  2719 00001BEB 50                      	push rax
  2720 00001BEC 6A02                    	push 2	; arg count
  2721 00001BEE 488B0425[89060000]      	mov rax, qword [free_var_2]	; free var __bin-equal-zz
  2722 00001BF6 803805                  	cmp byte [rax], T_undefined
  2723 00001BF9 0F847E010000            	je L_error_fvar_undefined
  2724 00001BFF 803804                  	cmp byte [rax], T_closure
  2725 00001C02 0F85F9010000            	jne L_error_non_closure
  2726 00001C08 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2727 00001C0B FF5009                  	call SOB_CLOSURE_CODE(rax)
  2728 00001C0E 483D[02000000]          	cmp rax, sob_boolean_false
  2729 00001C14 0F84B4000000            	je .L_if_else_00b8
  2730                                  	; preparing a tail-call
  2731                                  	; preparing a non-tail-call
  2732 00001C1A 48B8-                   	mov rax, L_constants + 1541
  2732 00001C1C [0506000000000000] 
  2733 00001C24 50                      	push rax
  2734 00001C25 48B8-                   	mov rax, L_constants + 1514
  2734 00001C27 [EA05000000000000] 
  2735 00001C2F 50                      	push rax
  2736 00001C30 48B8-                   	mov rax, L_constants + 1559
  2736 00001C32 [1706000000000000] 
  2737 00001C3A 50                      	push rax
  2738 00001C3B 6A03                    	push 3	; arg count
  2739 00001C3D 488B4510                	mov rax, ENV
  2740 00001C41 488B00                  	mov rax, qword [rax + 8 * 0]
  2741 00001C44 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var ack3
  2742 00001C47 488B00                  	mov rax, qword [rax]
  2743 00001C4A 803804                  	cmp byte [rax], T_closure
  2744 00001C4D 0F85AE010000            	jne L_error_non_closure
  2745 00001C53 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2746 00001C56 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2747 00001C59 50                      	push rax
  2748 00001C5A 48B8-                   	mov rax, L_constants + 1604
  2748 00001C5C [4406000000000000] 
  2749 00001C64 50                      	push rax
  2750 00001C65 6A02                    	push 2	; arg count
  2751 00001C67 488B0425[89060000]      	mov rax, qword [free_var_2]	; free var __bin-equal-zz
  2752 00001C6F 803805                  	cmp byte [rax], T_undefined
  2753 00001C72 0F8405010000            	je L_error_fvar_undefined
  2754 00001C78 803804                  	cmp byte [rax], T_closure
  2755 00001C7B 0F8580010000            	jne L_error_non_closure
  2756 00001C81 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2757 00001C84 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2758 00001C87 FF7500                  	push qword[rbp]
  2759 00001C8A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2760 00001C8D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2761 00001C91 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2762 00001C95 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2763 00001C99 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2764 00001C9C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2765 00001C9F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2766 00001CA4 4983C103                	add r9, 3 	 ;for getting to the params
  2767 00001CA8 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2768 00001CAC 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2769                                  .L_tc_recycle_frame_loop_0154:
  2770 00001CAF 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2771 00001CB2 7410                    	je .L_tc_recycle_frame_done_0154
  2772 00001CB4 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2773 00001CB7 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2774 00001CBA 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2775 00001CBE 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2776 00001CC2 EBEB                    	jmp .L_tc_recycle_frame_loop_0154
  2777                                  .L_tc_recycle_frame_done_0154:
  2778 00001CC4 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2779 00001CC5 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2780 00001CC9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2781 00001CCC EB0A                    	jmp .L_if_end_00b8
  2782                                  .L_if_else_00b8:
  2783 00001CCE 48B8-                   	mov rax, L_constants + 2
  2783 00001CD0 [0200000000000000] 
  2784                                  .L_if_end_00b8:
  2785 00001CD8 EB0A                    	jmp .L_if_end_00b9
  2786                                  .L_if_else_00b9:
  2787 00001CDA 48B8-                   	mov rax, L_constants + 2
  2787 00001CDC [0200000000000000] 
  2788                                  .L_if_end_00b9:
  2789 00001CE4 EB0A                    	jmp .L_if_end_00ba
  2790                                  .L_if_else_00ba:
  2791 00001CE6 48B8-                   	mov rax, L_constants + 2
  2791 00001CE8 [0200000000000000] 
  2792                                  .L_if_end_00ba:
  2793 00001CF0 C9                      	leave
  2794 00001CF1 C21000                  	ret AND_KILL_FRAME(0)
  2795                                  .L_lambda_simple_end_00e2:	; new closure is in rax
  2796 00001CF4 C9                      	leave
  2797 00001CF5 C23000                  	ret AND_KILL_FRAME(4)
  2798                                  .L_lambda_simple_end_00da:	; new closure is in rax
  2799 00001CF8 803804                  	cmp byte [rax], T_closure
  2800 00001CFB 0F8500010000            	jne L_error_non_closure
  2801 00001D01 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2802 00001D04 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2803 00001D07 48890425[AB060000]      	mov qword [free_var_4], rax
  2804 00001D0F 48B8-                   	mov rax, sob_void
  2804 00001D11 [0000000000000000] 
  2805                                  
  2806 00001D19 4889C7                  	mov rdi, rax
  2807 00001D1C E8DE030000              	call print_sexpr_if_not_void
  2808                                  	; preparing a non-tail-call
  2809 00001D21 6A00                    	push 0	; arg count
  2810 00001D23 488B0425[AB060000]      	mov rax, qword [free_var_4]	; free var crazy-ack
  2811 00001D2B 803805                  	cmp byte [rax], T_undefined
  2812 00001D2E 744D                    	je L_error_fvar_undefined
  2813 00001D30 803804                  	cmp byte [rax], T_closure
  2814 00001D33 0F85C8000000            	jne L_error_non_closure
  2815 00001D39 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2816 00001D3C FF5009                  	call SOB_CLOSURE_CODE(rax)
  2817                                  Lend:
  2818 00001D3F 4889C7                  	mov rdi, rax
  2819 00001D42 E8B8030000              	call print_sexpr_if_not_void
  2820                                  
  2821 00001D47 48BF-                           mov rdi, fmt_memory_usage
  2821 00001D49 [7607000000000000] 
  2822 00001D51 488B3425[FC070000]              mov rsi, qword [top_of_memory]
  2823 00001D59 4881EE[00000000]                sub rsi, memory
  2824 00001D60 B800000000                      mov rax, 0
  2825                                          ENTER
    44 00001D65 C8000000            <1>  enter 0, 0
    45 00001D69 4883E4F0            <1>  and rsp, ~15
  2826 00001D6D E8(00000000)                    call printf
  2827                                          LEAVE
    49 00001D72 C9                  <1>  leave
  2828 00001D73 B800000000                      mov rax, 0
  2829 00001D78 E8(00000000)                    call exit
  2830                                  
  2831                                  L_error_fvar_undefined:
  2832 00001D7D 50                              push rax
  2833 00001D7E 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
  2834 00001D86 48BE-                           mov rsi, fmt_undefined_free_var_1
  2834 00001D88 [DE06000000000000] 
  2835 00001D90 B800000000                      mov rax, 0
  2836                                          ENTER
    44 00001D95 C8000000            <1>  enter 0, 0
    45 00001D99 4883E4F0            <1>  and rsp, ~15
  2837 00001D9D E8(00000000)                    call fprintf
  2838                                          LEAVE
    49 00001DA2 C9                  <1>  leave
  2839 00001DA3 58                              pop rax
  2840 00001DA4 488B4001                        mov rax, qword [rax + 1] ; string
  2841 00001DA8 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  2842 00001DAC BE01000000                      mov rsi, 1               ; sizeof(char)
  2843 00001DB1 488B5001                        mov rdx, qword [rax + 1] ; string-length
  2844 00001DB5 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
  2845 00001DBD B800000000                      mov rax, 0
  2846                                          ENTER
    44 00001DC2 C8000000            <1>  enter 0, 0
    45 00001DC6 4883E4F0            <1>  and rsp, ~15
  2847 00001DCA E8(00000000)                    call fwrite
  2848                                          LEAVE
    49 00001DCF C9                  <1>  leave
  2849 00001DD0 488B3C25[00000000]              mov rdi, [stderr]       ; destination
  2850 00001DD8 48BE-                           mov rsi, fmt_undefined_free_var_2
  2850 00001DDA [F506000000000000] 
  2851 00001DE2 B800000000                      mov rax, 0
  2852                                          ENTER
    44 00001DE7 C8000000            <1>  enter 0, 0
    45 00001DEB 4883E4F0            <1>  and rsp, ~15
  2853 00001DEF E8(00000000)                    call fprintf
  2854                                          LEAVE
    49 00001DF4 C9                  <1>  leave
  2855 00001DF5 48C7C0F6FFFFFF                  mov rax, -10
  2856 00001DFC E8(00000000)                    call exit
  2857                                  
  2858                                  L_error_non_closure:
  2859 00001E01 488B3C25[00000000]              mov rdi, qword [stderr]
  2860 00001E09 48BE-                           mov rsi, fmt_non_closure
  2860 00001E0B [AC07000000000000] 
  2861 00001E13 B800000000                      mov rax, 0
  2862                                          ENTER
    44 00001E18 C8000000            <1>  enter 0, 0
    45 00001E1C 4883E4F0            <1>  and rsp, ~15
  2863 00001E20 E8(00000000)                    call fprintf
  2864                                          LEAVE
    49 00001E25 C9                  <1>  leave
  2865 00001E26 48C7C0FEFFFFFF                  mov rax, -2
  2866 00001E2D E8(00000000)                    call exit
  2867                                  
  2868                                  L_error_improper_list:
  2869 00001E32 488B3C25[00000000]      	mov rdi, qword [stderr]
  2870 00001E3A 48BE-                   	mov rsi, fmt_error_improper_list
  2870 00001E3C [D407000000000000] 
  2871 00001E44 B800000000              	mov rax, 0
  2872                                          ENTER
    44 00001E49 C8000000            <1>  enter 0, 0
    45 00001E4D 4883E4F0            <1>  and rsp, ~15
  2873 00001E51 E8(00000000)            	call fprintf
  2874                                          LEAVE
    49 00001E56 C9                  <1>  leave
  2875 00001E57 48C7C0F9FFFFFF          	mov rax, -7
  2876 00001E5E E8(00000000)            	call exit
  2877                                  
  2878                                  L_error_incorrect_arity_simple:
  2879 00001E63 488B3C25[00000000]              mov rdi, qword [stderr]
  2880 00001E6B 48BE-                           mov rsi, fmt_incorrect_arity_simple
  2880 00001E6D [1707000000000000] 
  2881 00001E75 EB12                            jmp L_error_incorrect_arity_common
  2882                                  L_error_incorrect_arity_opt:
  2883 00001E77 488B3C25[00000000]              mov rdi, qword [stderr]
  2884 00001E7F 48BE-                           mov rsi, fmt_incorrect_arity_opt
  2884 00001E81 [4207000000000000] 
  2885                                  L_error_incorrect_arity_common:
  2886 00001E89 5A                              pop rdx
  2887 00001E8A 59                              pop rcx
  2888 00001E8B B800000000                      mov rax, 0
  2889                                          ENTER
    44 00001E90 C8000000            <1>  enter 0, 0
    45 00001E94 4883E4F0            <1>  and rsp, ~15
  2890 00001E98 E8(00000000)                    call fprintf
  2891                                          LEAVE
    49 00001E9D C9                  <1>  leave
  2892 00001E9E 48C7C0FAFFFFFF                  mov rax, -6
  2893 00001EA5 E8(00000000)                    call exit
  2894                                  
  2895                                  section .data
  2896                                  fmt_undefined_free_var_1:
  2897 000006DE 212121205468652066-             db `!!! The free variable \0`
  2897 000006E7 726565207661726961-
  2897 000006F0 626C652000         
  2898                                  fmt_undefined_free_var_2:
  2899 000006F5 207761732075736564-             db ` was used before it was defined.\n\0`
  2899 000006FE 206265666F72652069-
  2899 00000707 742077617320646566-
  2899 00000710 696E65642E0A00     
  2900                                  fmt_incorrect_arity_simple:
  2901 00000717 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
  2901 00000720 74656420256C642061-
  2901 00000729 7267756D656E74732C-
  2901 00000732 206275742067697665-
  2901 0000073B 6E20256C640A00     
  2902                                  fmt_incorrect_arity_opt:
  2903 00000742 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
  2903 0000074B 746564206174206C65-
  2903 00000754 61737420256C642061-
  2903 0000075D 7267756D656E74732C-
  2903 00000766 206275742067697665-
  2903 0000076F 6E20256C640A00     
  2904                                  fmt_memory_usage:
  2905 00000776 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
  2905 0000077F 20256C642062797465-
  2905 00000788 73206F662064796E61-
  2905 00000791 6D6963616C6C792D61-
  2905 0000079A 6C6C6F636174656420-
  2905 000007A3 6D656D6F72790A0A00 
  2906                                  fmt_non_closure:
  2907 000007AC 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
  2907 000007B5 7074696E6720746F20-
  2907 000007BE 6170706C792061206E-
  2907 000007C7 6F6E2D636C6F737572-
  2907 000007D0 65210A00           
  2908                                  fmt_error_improper_list:
  2909 000007D4 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
  2909 000007DD 7267756D656E742069-
  2909 000007E6 73206E6F7420612070-
  2909 000007EF 726F706572206C6973-
  2909 000007F8 74210A00           
  2910                                  
  2911                                  section .bss
  2912                                  memory:
  2913 00000000 <res 40000000h>         	resb gbytes(1)
  2914                                  
  2915                                  section .data
  2916                                  top_of_memory:
  2917 000007FC [0000000000000000]              dq memory
  2918                                  
  2919                                  section .text
  2920                                  malloc:
  2921 00001EAA 488B0425[FC070000]              mov rax, qword [top_of_memory]
  2922 00001EB2 48013C25[FC070000]              add qword [top_of_memory], rdi
  2923 00001EBA C3                              ret
  2924                                  
  2925                                  L_code_ptr_return:
  2926 00001EBB 48837C241002            	cmp qword [rsp + 8*2], 2
  2927 00001EC1 0F85E91C0000            	jne L_error_arg_count_2
  2928 00001EC7 488B4C2418              	mov rcx, qword [rsp + 8*3]
  2929                                  	assert_integer(rcx)
    53 00001ECC 803911              <1>  cmp byte [%1], %2
    54 00001ECF 0F857A1D0000        <1>  jne L_error_incorrect_type
  2930 00001ED5 488B4901                	mov rcx, qword [rcx + 1]
  2931 00001ED9 4883F900                	cmp rcx, 0
  2932 00001EDD 0F8C011C0000            	jl L_error_integer_range
  2933 00001EE3 488B442420              	mov rax, qword [rsp + 8*4]
  2934                                  .L0:
  2935 00001EE8 4883F900                        cmp rcx, 0
  2936 00001EEC 7409                            je .L1
  2937 00001EEE 488B6D00                	mov rbp, qword [rbp]
  2938 00001EF2 48FFC9                  	dec rcx
  2939 00001EF5 7FF1                    	jg .L0
  2940                                  .L1:
  2941 00001EF7 4889EC                  	mov rsp, rbp
  2942 00001EFA 5D                      	pop rbp
  2943 00001EFB 5B                              pop rbx
  2944 00001EFC 488B4C2408                      mov rcx, qword [rsp + 8*1]
  2945 00001F01 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
  2946 00001F06 FFE3                    	jmp rbx
  2947                                  
  2948                                  L_code_ptr_make_list:
  2949 00001F08 C8000000                	enter 0, 0
  2950 00001F0C 48837D1801                      cmp COUNT, 1
  2951 00001F11 740C                            je .L0
  2952 00001F13 48837D1802                      cmp COUNT, 2
  2953 00001F18 7411                            je .L1
  2954 00001F1A E9C61C0000                      jmp L_error_arg_count_12
  2955                                  .L0:
  2956 00001F1F 49B9-                           mov r9, sob_void
  2956 00001F21 [0000000000000000] 
  2957 00001F29 EB04                            jmp .L2
  2958                                  .L1:
  2959 00001F2B 4C8B4D28                        mov r9, PARAM(1)
  2960                                  .L2:
  2961 00001F2F 488B4D20                        mov rcx, PARAM(0)
  2962                                          assert_integer(rcx)
    53 00001F33 803911              <1>  cmp byte [%1], %2
    54 00001F36 0F85131D0000        <1>  jne L_error_incorrect_type
  2963 00001F3C 488B4901                        mov rcx, qword [rcx + 1]
  2964 00001F40 4883F900                        cmp rcx, 0
  2965 00001F44 0F8CCB1B0000                    jl L_error_arg_negative
  2966 00001F4A 49B8-                           mov r8, sob_nil
  2966 00001F4C [0100000000000000] 
  2967                                  .L3:
  2968 00001F54 4883F900                        cmp rcx, 0
  2969 00001F58 7E1D                            jle .L4
  2970 00001F5A BF11000000                      mov rdi, 1 + 8 + 8
  2971 00001F5F E846FFFFFF                      call malloc
  2972 00001F64 C60021                          mov byte [rax], T_pair
  2973 00001F67 4C894801                        mov qword [rax + 1], r9
  2974 00001F6B 4C894009                        mov qword [rax + 1 + 8], r8
  2975 00001F6F 4989C0                          mov r8, rax
  2976 00001F72 48FFC9                          dec rcx
  2977 00001F75 EBDD                            jmp .L3
  2978                                  .L4:
  2979 00001F77 4C89C0                          mov rax, r8
  2980 00001F7A 48837D1802                      cmp COUNT, 2
  2981 00001F7F 7404                            je .L5
  2982 00001F81 C9                              leave
  2983 00001F82 C21800                          ret AND_KILL_FRAME(1)
  2984                                  .L5:
  2985 00001F85 C9                      	leave
  2986 00001F86 C22000                  	ret AND_KILL_FRAME(2)
  2987                                  
  2988                                  L_code_ptr_is_primitive:
  2989 00001F89 C8000000                	enter 0, 0
  2990 00001F8D 48837D1801              	cmp COUNT, 1
  2991 00001F92 0F85E31B0000            	jne L_error_arg_count_1
  2992 00001F98 488B4520                	mov rax, PARAM(0)
  2993                                  	assert_closure(rax)
    53 00001F9C 803804              <1>  cmp byte [%1], %2
    54 00001F9F 0F85AA1C0000        <1>  jne L_error_incorrect_type
  2994 00001FA5 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
  2995 00001FAA 750C                    	jne .L_false
  2996 00001FAC 48B8-                   	mov rax, sob_boolean_true
  2996 00001FAE [0300000000000000] 
  2997 00001FB6 EB0A                    	jmp .L_end
  2998                                  .L_false:
  2999 00001FB8 48B8-                   	mov rax, sob_boolean_false
  2999 00001FBA [0200000000000000] 
  3000                                  .L_end:
  3001 00001FC2 C9                      	leave
  3002 00001FC3 C21800                  	ret AND_KILL_FRAME(1)
  3003                                  
  3004                                  L_code_ptr_length:
  3005 00001FC6 C8000000                	enter 0, 0
  3006 00001FCA 48837D1801              	cmp COUNT, 1
  3007 00001FCF 0F85A61B0000            	jne L_error_arg_count_1
  3008 00001FD5 488B5D20                	mov rbx, PARAM(0)
  3009 00001FD9 BF00000000              	mov rdi, 0
  3010                                  .L:
  3011 00001FDE 803B01                  	cmp byte [rbx], T_nil
  3012 00001FE1 7412                    	je .L_end
  3013                                  	assert_pair(rbx)
    53 00001FE3 803B21              <1>  cmp byte [%1], %2
    54 00001FE6 0F85631C0000        <1>  jne L_error_incorrect_type
  3014 00001FEC 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
  3015 00001FF0 48FFC7                  	inc rdi
  3016 00001FF3 EBE9                    	jmp .L
  3017                                  .L_end:
  3018 00001FF5 E8D01A0000              	call make_integer
  3019 00001FFA C9                      	leave
  3020 00001FFB C21800                  	ret AND_KILL_FRAME(1)
  3021                                  
  3022                                  L_code_ptr_break:
  3023 00001FFE 48837C241000                    cmp qword [rsp + 8 * 2], 0
  3024 00002004 0F853C1B0000                    jne L_error_arg_count_0
  3025 0000200A CC                              int3
  3026 0000200B 48B8-                           mov rax, sob_void
  3026 0000200D [0000000000000000] 
  3027 00002015 C21000                          ret AND_KILL_FRAME(0)        
  3028                                  
  3029                                  L_code_ptr_frame:
  3030 00002018 C8000000                        enter 0, 0
  3031 0000201C 48837D1800                      cmp COUNT, 0
  3032 00002021 0F851F1B0000                    jne L_error_arg_count_0
  3033                                  
  3034 00002027 48BF-                           mov rdi, fmt_frame
  3034 00002029 [0408000000000000] 
  3035 00002031 488B7500                        mov rsi, qword [rbp]    ; old rbp
  3036 00002035 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
  3037 00002039 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
  3038 0000203D 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
  3039 00002041 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
  3040 00002045 6A00                            push 0
  3041 00002047 4151                            push r9
  3042 00002049 4150                            push r8                   ; we'll use it when printing the params
  3043 0000204B B800000000                      mov rax, 0
  3044                                          
  3045                                          ENTER
    44 00002050 C8000000            <1>  enter 0, 0
    45 00002054 4883E4F0            <1>  and rsp, ~15
  3046 00002058 E8(00000000)                    call printf
  3047                                          LEAVE
    49 0000205D C9                  <1>  leave
  3048                                  
  3049                                  .L:
  3050 0000205E 488B0C24                        mov rcx, qword [rsp]
  3051 00002062 4883F900                        cmp rcx, 0
  3052 00002066 7467                            je .L_out
  3053 00002068 48BF-                           mov rdi, fmt_frame_param_prefix
  3053 0000206A [3D08000000000000] 
  3054 00002072 488B742410                      mov rsi, qword [rsp + 8*2]
  3055 00002077 B800000000                      mov rax, 0
  3056                                          
  3057                                          ENTER
    44 0000207C C8000000            <1>  enter 0, 0
    45 00002080 4883E4F0            <1>  and rsp, ~15
  3058 00002084 E8(00000000)                    call printf
  3059                                          LEAVE
    49 00002089 C9                  <1>  leave
  3060                                  
  3061 0000208A 488B0C24                        mov rcx, qword [rsp]
  3062 0000208E 48FFC9                          dec rcx
  3063 00002091 48890C24                        mov qword [rsp], rcx    ; dec arg count
  3064 00002095 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
  3065 0000209A 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
  3066 0000209F 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
  3067 000020A3 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
  3068 000020A8 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
  3069 000020AB E87B000000                      call print_sexpr
  3070 000020B0 48BF-                           mov rdi, fmt_newline
  3070 000020B2 [6908000000000000] 
  3071 000020BA B800000000                      mov rax, 0
  3072                                          ENTER
    44 000020BF C8000000            <1>  enter 0, 0
    45 000020C3 4883E4F0            <1>  and rsp, ~15
  3073 000020C7 E8(00000000)                    call printf
  3074                                          LEAVE
    49 000020CC C9                  <1>  leave
  3075 000020CD EB8F                            jmp .L
  3076                                  .L_out:
  3077 000020CF 48BF-                           mov rdi, fmt_frame_continue
  3077 000020D1 [4E08000000000000] 
  3078 000020D9 B800000000                      mov rax, 0
  3079                                          ENTER
    44 000020DE C8000000            <1>  enter 0, 0
    45 000020E2 4883E4F0            <1>  and rsp, ~15
  3080 000020E6 E8(00000000)                    call printf
  3081 000020EB E8(00000000)                    call getchar
  3082                                          LEAVE
    49 000020F0 C9                  <1>  leave
  3083                                          
  3084 000020F1 48B8-                           mov rax, sob_void
  3084 000020F3 [0000000000000000] 
  3085 000020FB C9                              leave
  3086 000020FC C21000                          ret AND_KILL_FRAME(0)
  3087                                          
  3088                                  print_sexpr_if_not_void:
  3089 000020FF 4881FF[00000000]        	cmp rdi, sob_void
  3090 00002106 7422                    	je .done
  3091 00002108 E81E000000              	call print_sexpr
  3092 0000210D 48BF-                   	mov rdi, fmt_newline
  3092 0000210F [6908000000000000] 
  3093 00002117 B800000000              	mov rax, 0
  3094                                  	ENTER
    44 0000211C C8000000            <1>  enter 0, 0
    45 00002120 4883E4F0            <1>  and rsp, ~15
  3095 00002124 E8(00000000)            	call printf
  3096                                  	LEAVE
    49 00002129 C9                  <1>  leave
  3097                                  .done:
  3098 0000212A C3                      	ret
  3099                                  
  3100                                  section .data
  3101                                  fmt_frame:
  3102 00000804 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
  3102 0000080D 207265742061646472-
  3102 00000816 203D2025703B206C65-
  3102 0000081F 7820656E76203D2025-
  3102 00000828 703B20706172616D20-
  3102 00000831 636F756E74203D2025-
  3102 0000083A 640A00             
  3103                                  fmt_frame_param_prefix:
  3104 0000083D 3D3D5B706172616D20-             db `==[param %d]==> \0`
  3104 00000846 25645D3D3D3E2000   
  3105                                  fmt_frame_continue:
  3106 0000084E 486974203C456E7465-             db `Hit <Enter> to continue...\0`
  3106 00000857 723E20746F20636F6E-
  3106 00000860 74696E75652E2E2E00 
  3107                                  fmt_newline:
  3108 00000869 0A00                    	db `\n\0`
  3109                                  fmt_void:
  3110 0000086B 233C766F69643E00        	db `#<void>\0`
  3111                                  fmt_nil:
  3112 00000873 282900                  	db `()\0`
  3113                                  fmt_boolean_false:
  3114 00000876 236600                  	db `#f\0`
  3115                                  fmt_boolean_true:
  3116 00000879 237400                  	db `#t\0`
  3117                                  fmt_char_backslash:
  3118 0000087C 235C5C00                	db `#\\\\\0`
  3119                                  fmt_char_dquote:
  3120 00000880 235C2200                	db `#\\"\0`
  3121                                  fmt_char_simple:
  3122 00000884 235C256300              	db `#\\%c\0`
  3123                                  fmt_char_null:
  3124 00000889 235C6E756C00            	db `#\\nul\0`
  3125                                  fmt_char_bell:
  3126 0000088F 235C62656C6C00          	db `#\\bell\0`
  3127                                  fmt_char_backspace:
  3128 00000896 235C6261636B737061-     	db `#\\backspace\0`
  3128 0000089F 636500             
  3129                                  fmt_char_tab:
  3130 000008A2 235C74616200            	db `#\\tab\0`
  3131                                  fmt_char_newline:
  3132 000008A8 235C6E65776C696E65-     	db `#\\newline\0`
  3132 000008B1 00                 
  3133                                  fmt_char_formfeed:
  3134 000008B2 235C7061676500          	db `#\\page\0`
  3135                                  fmt_char_return:
  3136 000008B9 235C72657475726E00      	db `#\\return\0`
  3137                                  fmt_char_escape:
  3138 000008C2 235C65736300            	db `#\\esc\0`
  3139                                  fmt_char_space:
  3140 000008C8 235C737061636500        	db `#\\space\0`
  3141                                  fmt_char_hex:
  3142 000008D0 235C782530325800        	db `#\\x%02X\0`
  3143                                  fmt_gensym:
  3144 000008D8 47256C6400                      db `G%ld\0`
  3145                                  fmt_closure:
  3146 000008DD 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
  3146 000008E6 206174203078253038-
  3146 000008EF 5820656E763D307825-
  3146 000008F8 30385820636F64653D-
  3146 00000901 3078253038583E00   
  3147                                  fmt_lparen:
  3148 00000909 2800                    	db `(\0`
  3149                                  fmt_dotted_pair:
  3150 0000090B 202E2000                	db ` . \0`
  3151                                  fmt_rparen:
  3152 0000090F 2900                    	db `)\0`
  3153                                  fmt_space:
  3154 00000911 2000                    	db ` \0`
  3155                                  fmt_empty_vector:
  3156 00000913 23282900                	db `#()\0`
  3157                                  fmt_vector:
  3158 00000917 232800                  	db `#(\0`
  3159                                  fmt_real:
  3160 0000091A 256600                  	db `%f\0`
  3161                                  fmt_fraction:
  3162 0000091D 256C642F256C6400        	db `%ld/%ld\0`
  3163                                  fmt_zero:
  3164 00000925 3000                    	db `0\0`
  3165                                  fmt_int:
  3166 00000927 256C6400                	db `%ld\0`
  3167                                  fmt_unknown_scheme_object_error:
  3168 0000092B 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
  3168 00000934 6F723A20556E6B6E6F-
  3168 0000093D 776E20536368656D65-
  3168 00000946 2D6F626A6563742028-
  3168 0000094F 525454492030782530-
  3168 00000958 32582920           
  3169 0000095C 617420616464726573-     	db `at address 0x%08X\n\n\0`
  3169 00000965 73203078253038580A-
  3169 0000096E 0A00               
  3170                                  fmt_dquote:
  3171 00000970 2200                    	db `\"\0`
  3172                                  fmt_string_char:
  3173 00000972 256300                          db `%c\0`
  3174                                  fmt_string_char_7:
  3175 00000975 5C6100                          db `\\a\0`
  3176                                  fmt_string_char_8:
  3177 00000978 5C6200                          db `\\b\0`
  3178                                  fmt_string_char_9:
  3179 0000097B 5C7400                          db `\\t\0`
  3180                                  fmt_string_char_10:
  3181 0000097E 5C6E00                          db `\\n\0`
  3182                                  fmt_string_char_11:
  3183 00000981 5C7600                          db `\\v\0`
  3184                                  fmt_string_char_12:
  3185 00000984 5C6600                          db `\\f\0`
  3186                                  fmt_string_char_13:
  3187 00000987 5C7200                          db `\\r\0`
  3188                                  fmt_string_char_34:
  3189 0000098A 5C2200                          db `\\"\0`
  3190                                  fmt_string_char_92:
  3191 0000098D 5C5C00                          db `\\\\\0`
  3192                                  fmt_string_char_hex:
  3193 00000990 5C7825583B00                    db `\\x%X;\0`
  3194                                  
  3195                                  section .text
  3196                                  
  3197                                  print_sexpr:
  3198 0000212B C8000000                	enter 0, 0
  3199 0000212F 8A07                    	mov al, byte [rdi]
  3200 00002131 3C00                    	cmp al, T_void
  3201 00002133 7465                    	je .Lvoid
  3202 00002135 3C01                    	cmp al, T_nil
  3203 00002137 7470                    	je .Lnil
  3204 00002139 3C09                    	cmp al, T_boolean_false
  3205 0000213B 747B                    	je .Lboolean_false
  3206 0000213D 3C0A                    	cmp al, T_boolean_true
  3207 0000213F 0F8482000000            	je .Lboolean_true
  3208 00002145 3C02                    	cmp al, T_char
  3209 00002147 0F8489000000            	je .Lchar
  3210 0000214D 3C41                    	cmp al, T_interned_symbol
  3211 0000214F 0F84CB010000            	je .Linterned_symbol
  3212 00002155 3C42                            cmp al, T_uninterned_symbol
  3213 00002157 0F84EF010000                    je .Luninterned_symbol
  3214 0000215D 3C21                    	cmp al, T_pair
  3215 0000215F 0F84FA010000            	je .Lpair
  3216 00002165 3C22                    	cmp al, T_vector
  3217 00002167 0F84C3020000            	je .Lvector
  3218 0000216D 3C04                    	cmp al, T_closure
  3219 0000216F 0F8491010000            	je .Lclosure
  3220 00002175 3C13                    	cmp al, T_real
  3221 00002177 0F8454030000            	je .Lreal
  3222 0000217D 3C12                    	cmp al, T_fraction
  3223 0000217F 0F847A030000            	je .Lfraction
  3224 00002185 3C11                    	cmp al, T_integer
  3225 00002187 0F84B3030000            	je .Linteger
  3226 0000218D 3C03                    	cmp al, T_string
  3227 0000218F 0F84BE030000            	je .Lstring
  3228                                  
  3229 00002195 E9F6040000              	jmp .Lunknown_sexpr_type
  3230                                  
  3231                                  .Lvoid:
  3232 0000219A 48BF-                   	mov rdi, fmt_void
  3232 0000219C [6B08000000000000] 
  3233 000021A4 E91A050000              	jmp .Lemit
  3234                                  
  3235                                  .Lnil:
  3236 000021A9 48BF-                   	mov rdi, fmt_nil
  3236 000021AB [7308000000000000] 
  3237 000021B3 E90B050000              	jmp .Lemit
  3238                                  
  3239                                  .Lboolean_false:
  3240 000021B8 48BF-                   	mov rdi, fmt_boolean_false
  3240 000021BA [7608000000000000] 
  3241 000021C2 E9FC040000              	jmp .Lemit
  3242                                  
  3243                                  .Lboolean_true:
  3244 000021C7 48BF-                   	mov rdi, fmt_boolean_true
  3244 000021C9 [7908000000000000] 
  3245 000021D1 E9ED040000              	jmp .Lemit
  3246                                  
  3247                                  .Lchar:
  3248 000021D6 8A4701                  	mov al, byte [rdi + 1]
  3249 000021D9 3C20                    	cmp al, ' '
  3250 000021DB 7E28                    	jle .Lchar_whitespace
  3251 000021DD 3C5C                    	cmp al, 92 		; backslash
  3252 000021DF 0F847C000000            	je .Lchar_backslash
  3253 000021E5 3C22                    	cmp al, '"'
  3254 000021E7 0F8483000000            	je .Lchar_dquote
  3255 000021ED 4825FF000000            	and rax, 255
  3256 000021F3 48BF-                   	mov rdi, fmt_char_simple
  3256 000021F5 [8408000000000000] 
  3257 000021FD 4889C6                  	mov rsi, rax
  3258 00002200 E9BE040000              	jmp .Lemit
  3259                                  
  3260                                  .Lchar_whitespace:
  3261 00002205 3C00                    	cmp al, 0
  3262 00002207 7476                    	je .Lchar_null
  3263 00002209 3C07                    	cmp al, 7
  3264 0000220B 0F847D000000            	je .Lchar_bell
  3265 00002211 3C08                    	cmp al, 8
  3266 00002213 0F8484000000            	je .Lchar_backspace
  3267 00002219 3C09                    	cmp al, 9
  3268 0000221B 0F848B000000            	je .Lchar_tab
  3269 00002221 3C0A                    	cmp al, 10
  3270 00002223 0F8492000000            	je .Lchar_newline
  3271 00002229 3C0C                    	cmp al, 12
  3272 0000222B 0F8499000000            	je .Lchar_formfeed
  3273 00002231 3C0D                    	cmp al, 13
  3274 00002233 0F84A0000000            	je .Lchar_return
  3275 00002239 3C1B                    	cmp al, 27
  3276 0000223B 0F84A7000000            	je .Lchar_escape
  3277 00002241 4825FF000000            	and rax, 255
  3278 00002247 3C20                    	cmp al, ' '
  3279 00002249 0F84A8000000            	je .Lchar_space
  3280 0000224F 48BF-                   	mov rdi, fmt_char_hex
  3280 00002251 [D008000000000000] 
  3281 00002259 4889C6                  	mov rsi, rax
  3282 0000225C E962040000              	jmp .Lemit	
  3283                                  
  3284                                  .Lchar_backslash:
  3285 00002261 48BF-                   	mov rdi, fmt_char_backslash
  3285 00002263 [7C08000000000000] 
  3286 0000226B E953040000              	jmp .Lemit
  3287                                  
  3288                                  .Lchar_dquote:
  3289 00002270 48BF-                   	mov rdi, fmt_char_dquote
  3289 00002272 [8008000000000000] 
  3290 0000227A E944040000              	jmp .Lemit
  3291                                  
  3292                                  .Lchar_null:
  3293 0000227F 48BF-                   	mov rdi, fmt_char_null
  3293 00002281 [8908000000000000] 
  3294 00002289 E935040000              	jmp .Lemit
  3295                                  
  3296                                  .Lchar_bell:
  3297 0000228E 48BF-                   	mov rdi, fmt_char_bell
  3297 00002290 [8F08000000000000] 
  3298 00002298 E926040000              	jmp .Lemit
  3299                                  
  3300                                  .Lchar_backspace:
  3301 0000229D 48BF-                   	mov rdi, fmt_char_backspace
  3301 0000229F [9608000000000000] 
  3302 000022A7 E917040000              	jmp .Lemit
  3303                                  
  3304                                  .Lchar_tab:
  3305 000022AC 48BF-                   	mov rdi, fmt_char_tab
  3305 000022AE [A208000000000000] 
  3306 000022B6 E908040000              	jmp .Lemit
  3307                                  
  3308                                  .Lchar_newline:
  3309 000022BB 48BF-                   	mov rdi, fmt_char_newline
  3309 000022BD [A808000000000000] 
  3310 000022C5 E9F9030000              	jmp .Lemit
  3311                                  
  3312                                  .Lchar_formfeed:
  3313 000022CA 48BF-                   	mov rdi, fmt_char_formfeed
  3313 000022CC [B208000000000000] 
  3314 000022D4 E9EA030000              	jmp .Lemit
  3315                                  
  3316                                  .Lchar_return:
  3317 000022D9 48BF-                   	mov rdi, fmt_char_return
  3317 000022DB [B908000000000000] 
  3318 000022E3 E9DB030000              	jmp .Lemit
  3319                                  
  3320                                  .Lchar_escape:
  3321 000022E8 48BF-                   	mov rdi, fmt_char_escape
  3321 000022EA [C208000000000000] 
  3322 000022F2 E9CC030000              	jmp .Lemit
  3323                                  
  3324                                  .Lchar_space:
  3325 000022F7 48BF-                   	mov rdi, fmt_char_space
  3325 000022F9 [C808000000000000] 
  3326 00002301 E9BD030000              	jmp .Lemit
  3327                                  
  3328                                  .Lclosure:
  3329 00002306 4889FE                  	mov rsi, qword rdi
  3330 00002309 48BF-                   	mov rdi, fmt_closure
  3330 0000230B [DD08000000000000] 
  3331 00002313 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
  3332 00002317 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
  3333 0000231B E9A3030000              	jmp .Lemit
  3334                                  
  3335                                  .Linterned_symbol:
  3336 00002320 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
  3337 00002324 BE01000000              	mov rsi, 1		 ; size = 1 byte
  3338 00002329 488B5701                	mov rdx, qword [rdi + 1] ; length
  3339 0000232D 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
  3340 00002331 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
  3341                                  	ENTER
    44 00002339 C8000000            <1>  enter 0, 0
    45 0000233D 4883E4F0            <1>  and rsp, ~15
  3342 00002341 E8(00000000)            	call fwrite
  3343                                  	LEAVE
    49 00002346 C9                  <1>  leave
  3344 00002347 E98C030000              	jmp .Lend
  3345                                  
  3346                                  .Luninterned_symbol:
  3347 0000234C 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
  3348 00002350 48BF-                           mov rdi, fmt_gensym
  3348 00002352 [D808000000000000] 
  3349 0000235A E964030000                      jmp .Lemit
  3350                                  	
  3351                                  .Lpair:
  3352 0000235F 57                      	push rdi
  3353 00002360 48BF-                   	mov rdi, fmt_lparen
  3353 00002362 [0909000000000000] 
  3354 0000236A B800000000              	mov rax, 0
  3355                                          ENTER
    44 0000236F C8000000            <1>  enter 0, 0
    45 00002373 4883E4F0            <1>  and rsp, ~15
  3356 00002377 E8(00000000)            	call printf
  3357                                          LEAVE
    49 0000237C C9                  <1>  leave
  3358 0000237D 488B3C24                	mov rdi, qword [rsp] 	; pair
  3359 00002381 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  3360 00002385 E8A1FDFFFF              	call print_sexpr
  3361 0000238A 5F                      	pop rdi 		; pair
  3362 0000238B 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  3363                                  .Lcdr:
  3364 0000238F 8A07                    	mov al, byte [rdi]
  3365 00002391 3C01                    	cmp al, T_nil
  3366 00002393 7447                    	je .Lcdr_nil
  3367 00002395 3C21                    	cmp al, T_pair
  3368 00002397 7462                    	je .Lcdr_pair
  3369 00002399 57                      	push rdi
  3370 0000239A 48BF-                   	mov rdi, fmt_dotted_pair
  3370 0000239C [0B09000000000000] 
  3371 000023A4 B800000000              	mov rax, 0
  3372                                          ENTER
    44 000023A9 C8000000            <1>  enter 0, 0
    45 000023AD 4883E4F0            <1>  and rsp, ~15
  3373 000023B1 E8(00000000)            	call printf
  3374                                          LEAVE
    49 000023B6 C9                  <1>  leave
  3375 000023B7 5F                      	pop rdi
  3376 000023B8 E86EFDFFFF              	call print_sexpr
  3377 000023BD 48BF-                   	mov rdi, fmt_rparen
  3377 000023BF [0F09000000000000] 
  3378 000023C7 B800000000              	mov rax, 0
  3379                                          ENTER
    44 000023CC C8000000            <1>  enter 0, 0
    45 000023D0 4883E4F0            <1>  and rsp, ~15
  3380 000023D4 E8(00000000)            	call printf
  3381                                          LEAVE
    49 000023D9 C9                  <1>  leave
  3382 000023DA C9                      	leave
  3383 000023DB C3                      	ret
  3384                                  
  3385                                  .Lcdr_nil:
  3386 000023DC 48BF-                   	mov rdi, fmt_rparen
  3386 000023DE [0F09000000000000] 
  3387 000023E6 B800000000              	mov rax, 0
  3388                                          ENTER
    44 000023EB C8000000            <1>  enter 0, 0
    45 000023EF 4883E4F0            <1>  and rsp, ~15
  3389 000023F3 E8(00000000)            	call printf
  3390                                          LEAVE
    49 000023F8 C9                  <1>  leave
  3391 000023F9 C9                      	leave
  3392 000023FA C3                      	ret
  3393                                  
  3394                                  .Lcdr_pair:
  3395 000023FB 57                      	push rdi
  3396 000023FC 48BF-                   	mov rdi, fmt_space
  3396 000023FE [1109000000000000] 
  3397 00002406 B800000000              	mov rax, 0
  3398                                          ENTER
    44 0000240B C8000000            <1>  enter 0, 0
    45 0000240F 4883E4F0            <1>  and rsp, ~15
  3399 00002413 E8(00000000)            	call printf
  3400                                          LEAVE
    49 00002418 C9                  <1>  leave
  3401 00002419 488B3C24                	mov rdi, qword [rsp]
  3402 0000241D 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  3403 00002421 E805FDFFFF              	call print_sexpr
  3404 00002426 5F                      	pop rdi
  3405 00002427 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  3406 0000242B E95FFFFFFF              	jmp .Lcdr
  3407                                  
  3408                                  .Lvector:
  3409 00002430 488B4701                	mov rax, qword [rdi + 1] ; length
  3410 00002434 4883F800                	cmp rax, 0
  3411 00002438 0F8484000000            	je .Lvector_empty
  3412 0000243E 57                      	push rdi
  3413 0000243F 48BF-                   	mov rdi, fmt_vector
  3413 00002441 [1709000000000000] 
  3414 00002449 B800000000              	mov rax, 0
  3415                                          ENTER
    44 0000244E C8000000            <1>  enter 0, 0
    45 00002452 4883E4F0            <1>  and rsp, ~15
  3416 00002456 E8(00000000)            	call printf
  3417                                          LEAVE
    49 0000245B C9                  <1>  leave
  3418 0000245C 488B3C24                	mov rdi, qword [rsp]
  3419 00002460 FF7701                  	push qword [rdi + 1]
  3420 00002463 6A01                    	push 1
  3421 00002465 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  3422 00002469 E8BDFCFFFF              	call print_sexpr
  3423                                  .Lvector_loop:
  3424                                  	; [rsp] index
  3425                                  	; [rsp + 8*1] limit
  3426                                  	; [rsp + 8*2] vector
  3427 0000246E 488B0424                	mov rax, qword [rsp]
  3428 00002472 483B442408              	cmp rax, qword [rsp + 8*1]
  3429 00002477 7436                    	je .Lvector_end
  3430 00002479 48BF-                   	mov rdi, fmt_space
  3430 0000247B [1109000000000000] 
  3431 00002483 B800000000              	mov rax, 0
  3432                                          ENTER
    44 00002488 C8000000            <1>  enter 0, 0
    45 0000248C 4883E4F0            <1>  and rsp, ~15
  3433 00002490 E8(00000000)            	call printf
  3434                                          LEAVE
    49 00002495 C9                  <1>  leave
  3435 00002496 488B0424                	mov rax, qword [rsp]
  3436 0000249A 488B5C2410              	mov rbx, qword [rsp + 8*2]
  3437 0000249F 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  3438 000024A4 E882FCFFFF              	call print_sexpr
  3439 000024A9 48FF0424                	inc qword [rsp]
  3440 000024AD EBBF                    	jmp .Lvector_loop
  3441                                  
  3442                                  .Lvector_end:
  3443 000024AF 4883C418                	add rsp, 8*3
  3444 000024B3 48BF-                   	mov rdi, fmt_rparen
  3444 000024B5 [0F09000000000000] 
  3445 000024BD E901020000              	jmp .Lemit	
  3446                                  
  3447                                  .Lvector_empty:
  3448 000024C2 48BF-                   	mov rdi, fmt_empty_vector
  3448 000024C4 [1309000000000000] 
  3449 000024CC E9F2010000              	jmp .Lemit
  3450                                  
  3451                                  .Lreal:
  3452 000024D1 FF7701                  	push qword [rdi + 1]
  3453 000024D4 F20F100424              	movsd xmm0, qword [rsp]
  3454 000024D9 4883C408                	add rsp, 8*1
  3455 000024DD 48BF-                   	mov rdi, fmt_real
  3455 000024DF [1A09000000000000] 
  3456 000024E7 B801000000              	mov rax, 1
  3457                                  	ENTER
    44 000024EC C8000000            <1>  enter 0, 0
    45 000024F0 4883E4F0            <1>  and rsp, ~15
  3458 000024F4 E8(00000000)            	call printf
  3459                                  	LEAVE
    49 000024F9 C9                  <1>  leave
  3460 000024FA E9D9010000              	jmp .Lend
  3461                                  
  3462                                  .Lfraction:
  3463 000024FF 488B7701                	mov rsi, qword [rdi + 1]
  3464 00002503 488B5709                	mov rdx, qword [rdi + 1 + 8]
  3465 00002507 4883FE00                	cmp rsi, 0
  3466 0000250B 7415                    	je .Lrat_zero
  3467 0000250D 4883FA01                	cmp rdx, 1
  3468 00002511 741E                    	je .Lrat_int
  3469 00002513 48BF-                   	mov rdi, fmt_fraction
  3469 00002515 [1D09000000000000] 
  3470 0000251D E9A1010000              	jmp .Lemit
  3471                                  
  3472                                  .Lrat_zero:
  3473 00002522 48BF-                   	mov rdi, fmt_zero
  3473 00002524 [2509000000000000] 
  3474 0000252C E992010000              	jmp .Lemit
  3475                                  
  3476                                  .Lrat_int:
  3477 00002531 48BF-                   	mov rdi, fmt_int
  3477 00002533 [2709000000000000] 
  3478 0000253B E983010000              	jmp .Lemit
  3479                                  
  3480                                  .Linteger:
  3481 00002540 488B7701                	mov rsi, qword [rdi + 1]
  3482 00002544 48BF-                   	mov rdi, fmt_int
  3482 00002546 [2709000000000000] 
  3483 0000254E E970010000              	jmp .Lemit
  3484                                  
  3485                                  .Lstring:
  3486 00002553 488D4709                	lea rax, [rdi + 1 + 8]
  3487 00002557 50                      	push rax
  3488 00002558 FF7701                  	push qword [rdi + 1]
  3489 0000255B 48BF-                   	mov rdi, fmt_dquote
  3489 0000255D [7009000000000000] 
  3490 00002565 B800000000              	mov rax, 0
  3491                                  	ENTER
    44 0000256A C8000000            <1>  enter 0, 0
    45 0000256E 4883E4F0            <1>  and rsp, ~15
  3492 00002572 E8(00000000)            	call printf
  3493                                  	LEAVE
    49 00002577 C9                  <1>  leave
  3494                                  .Lstring_loop:
  3495                                  	; qword [rsp]: limit
  3496                                  	; qword [rsp + 8*1]: char *
  3497 00002578 48833C2400              	cmp qword [rsp], 0
  3498 0000257D 0F84FD000000            	je .Lstring_end
  3499 00002583 488B442408              	mov rax, qword [rsp + 8*1]
  3500 00002588 8A00                    	mov al, byte [rax]
  3501 0000258A 4825FF000000            	and rax, 255
  3502 00002590 3C07                    	cmp al, 7
  3503 00002592 7468                            je .Lstring_char_7
  3504 00002594 3C08                            cmp al, 8
  3505 00002596 7470                            je .Lstring_char_8
  3506 00002598 3C09                            cmp al, 9
  3507 0000259A 7478                            je .Lstring_char_9
  3508 0000259C 3C0A                            cmp al, 10
  3509 0000259E 0F847C000000                    je .Lstring_char_10
  3510 000025A4 3C0B                            cmp al, 11
  3511 000025A6 0F8480000000                    je .Lstring_char_11
  3512 000025AC 3C0C                            cmp al, 12
  3513 000025AE 0F8484000000                    je .Lstring_char_12
  3514 000025B4 3C0D                            cmp al, 13
  3515 000025B6 0F8488000000                    je .Lstring_char_13
  3516 000025BC 3C22                            cmp al, 34
  3517 000025BE 0F848C000000                    je .Lstring_char_34
  3518 000025C4 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  3520 000025C6 3C20                            cmp al, ' '
  3521 000025C8 0F8CA0000000                    jl .Lstring_char_hex
  3522 000025CE 48BF-                           mov rdi, fmt_string_char
  3522 000025D0 [7209000000000000] 
  3523 000025D8 4889C6                          mov rsi, rax
  3524                                  .Lstring_char_emit:
  3525 000025DB B800000000                      mov rax, 0
  3526                                          ENTER
    44 000025E0 C8000000            <1>  enter 0, 0
    45 000025E4 4883E4F0            <1>  and rsp, ~15
  3527 000025E8 E8(00000000)                    call printf
  3528                                          LEAVE
    49 000025ED C9                  <1>  leave
  3529 000025EE 48FF0C24                        dec qword [rsp]
  3530 000025F2 48FF442408                      inc qword [rsp + 8*1]
  3531 000025F7 E97CFFFFFF                      jmp .Lstring_loop
  3532                                  
  3533                                  .Lstring_char_7:
  3534 000025FC 48BF-                           mov rdi, fmt_string_char_7
  3534 000025FE [7509000000000000] 
  3535 00002606 EBD3                            jmp .Lstring_char_emit
  3536                                  
  3537                                  .Lstring_char_8:
  3538 00002608 48BF-                           mov rdi, fmt_string_char_8
  3538 0000260A [7809000000000000] 
  3539 00002612 EBC7                            jmp .Lstring_char_emit
  3540                                          
  3541                                  .Lstring_char_9:
  3542 00002614 48BF-                           mov rdi, fmt_string_char_9
  3542 00002616 [7B09000000000000] 
  3543 0000261E EBBB                            jmp .Lstring_char_emit
  3544                                  
  3545                                  .Lstring_char_10:
  3546 00002620 48BF-                           mov rdi, fmt_string_char_10
  3546 00002622 [7E09000000000000] 
  3547 0000262A EBAF                            jmp .Lstring_char_emit
  3548                                  
  3549                                  .Lstring_char_11:
  3550 0000262C 48BF-                           mov rdi, fmt_string_char_11
  3550 0000262E [8109000000000000] 
  3551 00002636 EBA3                            jmp .Lstring_char_emit
  3552                                  
  3553                                  .Lstring_char_12:
  3554 00002638 48BF-                           mov rdi, fmt_string_char_12
  3554 0000263A [8409000000000000] 
  3555 00002642 EB97                            jmp .Lstring_char_emit
  3556                                  
  3557                                  .Lstring_char_13:
  3558 00002644 48BF-                           mov rdi, fmt_string_char_13
  3558 00002646 [8709000000000000] 
  3559 0000264E EB8B                            jmp .Lstring_char_emit
  3560                                  
  3561                                  .Lstring_char_34:
  3562 00002650 48BF-                           mov rdi, fmt_string_char_34
  3562 00002652 [8A09000000000000] 
  3563 0000265A E97CFFFFFF                      jmp .Lstring_char_emit
  3564                                  
  3565                                  .Lstring_char_92:
  3566 0000265F 48BF-                           mov rdi, fmt_string_char_92
  3566 00002661 [8D09000000000000] 
  3567 00002669 E96DFFFFFF                      jmp .Lstring_char_emit
  3568                                  
  3569                                  .Lstring_char_hex:
  3570 0000266E 48BF-                           mov rdi, fmt_string_char_hex
  3570 00002670 [9009000000000000] 
  3571 00002678 4889C6                          mov rsi, rax
  3572 0000267B E95BFFFFFF                      jmp .Lstring_char_emit        
  3573                                  
  3574                                  .Lstring_end:
  3575 00002680 4883C410                	add rsp, 8 * 2
  3576 00002684 48BF-                   	mov rdi, fmt_dquote
  3576 00002686 [7009000000000000] 
  3577 0000268E EB33                    	jmp .Lemit
  3578                                  
  3579                                  .Lunknown_sexpr_type:
  3580 00002690 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
  3580 00002692 [2B09000000000000] 
  3581 0000269A 4825FF000000            	and rax, 255
  3582 000026A0 4889C2                  	mov rdx, rax
  3583 000026A3 4889F9                  	mov rcx, rdi
  3584 000026A6 488B3C25[00000000]      	mov rdi, qword [stderr]
  3585 000026AE B800000000              	mov rax, 0
  3586                                          ENTER
    44 000026B3 C8000000            <1>  enter 0, 0
    45 000026B7 4883E4F0            <1>  and rsp, ~15
  3587 000026BB E8(00000000)            	call fprintf
  3588                                          LEAVE
    49 000026C0 C9                  <1>  leave
  3589 000026C1 C9                              leave
  3590 000026C2 C3                              ret
  3591                                  
  3592                                  .Lemit:
  3593 000026C3 B800000000              	mov rax, 0
  3594                                          ENTER
    44 000026C8 C8000000            <1>  enter 0, 0
    45 000026CC 4883E4F0            <1>  and rsp, ~15
  3595 000026D0 E8(00000000)            	call printf
  3596                                          LEAVE
    49 000026D5 C9                  <1>  leave
  3597 000026D6 EB00                    	jmp .Lend
  3598                                  
  3599                                  .Lend:
  3600                                  	LEAVE
    49 000026D8 C9                  <1>  leave
  3601 000026D9 C3                      	ret
  3602                                  
  3603                                  ;;; rdi: address of free variable
  3604                                  ;;; rsi: address of code-pointer
  3605                                  bind_primitive:
  3606 000026DA C8000000                        enter 0, 0
  3607 000026DE 57                              push rdi
  3608 000026DF BF11000000                      mov rdi, (1 + 8 + 8)
  3609 000026E4 E8C1F7FFFF                      call malloc
  3610 000026E9 5F                              pop rdi
  3611 000026EA C60004                          mov byte [rax], T_closure
  3612 000026ED 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  3613 000026F5 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  3614 000026F9 488907                          mov qword [rdi], rax
  3615 000026FC 48B8-                           mov rax, sob_void
  3615 000026FE [0000000000000000] 
  3616 00002706 C9                              leave
  3617 00002707 C3                              ret
  3618                                  
  3619                                  L_code_ptr_ash:
  3620 00002708 C8000000                        enter 0, 0
  3621 0000270C 48837D1802                      cmp COUNT, 2
  3622 00002711 0F8599140000                    jne L_error_arg_count_2
  3623 00002717 488B7D20                        mov rdi, PARAM(0)
  3624                                          assert_integer(rdi)
    53 0000271B 803F11              <1>  cmp byte [%1], %2
    54 0000271E 0F852B150000        <1>  jne L_error_incorrect_type
  3625 00002724 488B4D28                        mov rcx, PARAM(1)
  3626                                          assert_integer(rcx)
    53 00002728 803911              <1>  cmp byte [%1], %2
    54 0000272B 0F851E150000        <1>  jne L_error_incorrect_type
  3627 00002731 488B7F01                        mov rdi, qword [rdi + 1]
  3628 00002735 488B4901                        mov rcx, qword [rcx + 1]
  3629 00002739 4883F900                        cmp rcx, 0
  3630 0000273D 7C0F                            jl .L_negative
  3631                                  .L_loop_positive:
  3632 0000273F 4883F900                        cmp rcx, 0
  3633 00002743 741B                            je .L_exit
  3634 00002745 48D3E7                          sal rdi, cl
  3635 00002748 48C1E908                        shr rcx, 8
  3636 0000274C EBF1                            jmp .L_loop_positive
  3637                                  .L_negative:
  3638 0000274E 48F7D9                          neg rcx
  3639                                  .L_loop_negative:
  3640 00002751 4883F900                        cmp rcx, 0
  3641 00002755 7409                            je .L_exit
  3642 00002757 48D3FF                          sar rdi, cl
  3643 0000275A 48C1E908                        shr rcx, 8
  3644 0000275E EBF1                            jmp .L_loop_negative
  3645                                  .L_exit:
  3646 00002760 E865130000                      call make_integer
  3647 00002765 C9                              leave
  3648 00002766 C22000                          ret AND_KILL_FRAME(2)
  3649                                  
  3650                                  L_code_ptr_logand:
  3651 00002769 C8000000                        enter 0, 0
  3652 0000276D 48837D1802                      cmp COUNT, 2
  3653 00002772 0F8538140000                    jne L_error_arg_count_2
  3654 00002778 4C8B4520                        mov r8, PARAM(0)
  3655                                          assert_integer(r8)
    53 0000277C 41803811            <1>  cmp byte [%1], %2
    54 00002780 0F85C9140000        <1>  jne L_error_incorrect_type
  3656 00002786 4C8B4D28                        mov r9, PARAM(1)
  3657                                          assert_integer(r9)
    53 0000278A 41803911            <1>  cmp byte [%1], %2
    54 0000278E 0F85BB140000        <1>  jne L_error_incorrect_type
  3658 00002794 498B7801                        mov rdi, qword [r8 + 1]
  3659 00002798 49237901                        and rdi, qword [r9 + 1]
  3660 0000279C E829130000                      call make_integer
  3661 000027A1 C9                              leave
  3662 000027A2 C22000                          ret AND_KILL_FRAME(2)
  3663                                  
  3664                                  L_code_ptr_logor:
  3665 000027A5 C8000000                        enter 0, 0
  3666 000027A9 48837D1802                      cmp COUNT, 2
  3667 000027AE 0F85FC130000                    jne L_error_arg_count_2
  3668 000027B4 4C8B4520                        mov r8, PARAM(0)
  3669                                          assert_integer(r8)
    53 000027B8 41803811            <1>  cmp byte [%1], %2
    54 000027BC 0F858D140000        <1>  jne L_error_incorrect_type
  3670 000027C2 4C8B4D28                        mov r9, PARAM(1)
  3671                                          assert_integer(r9)
    53 000027C6 41803911            <1>  cmp byte [%1], %2
    54 000027CA 0F857F140000        <1>  jne L_error_incorrect_type
  3672 000027D0 498B7801                        mov rdi, qword [r8 + 1]
  3673 000027D4 490B7901                        or rdi, qword [r9 + 1]
  3674 000027D8 E8ED120000                      call make_integer
  3675 000027DD C9                              leave
  3676 000027DE C22000                          ret AND_KILL_FRAME(2)
  3677                                  
  3678                                  L_code_ptr_logxor:
  3679 000027E1 C8000000                        enter 0, 0
  3680 000027E5 48837D1802                      cmp COUNT, 2
  3681 000027EA 0F85C0130000                    jne L_error_arg_count_2
  3682 000027F0 4C8B4520                        mov r8, PARAM(0)
  3683                                          assert_integer(r8)
    53 000027F4 41803811            <1>  cmp byte [%1], %2
    54 000027F8 0F8551140000        <1>  jne L_error_incorrect_type
  3684 000027FE 4C8B4D28                        mov r9, PARAM(1)
  3685                                          assert_integer(r9)
    53 00002802 41803911            <1>  cmp byte [%1], %2
    54 00002806 0F8543140000        <1>  jne L_error_incorrect_type
  3686 0000280C 498B7801                        mov rdi, qword [r8 + 1]
  3687 00002810 49337901                        xor rdi, qword [r9 + 1]
  3688 00002814 E8B1120000                      call make_integer
  3689                                          LEAVE
    49 00002819 C9                  <1>  leave
  3690 0000281A C22000                          ret AND_KILL_FRAME(2)
  3691                                  
  3692                                  L_code_ptr_lognot:
  3693 0000281D C8000000                        enter 0, 0
  3694 00002821 48837D1801                      cmp COUNT, 1
  3695 00002826 0F854F130000                    jne L_error_arg_count_1
  3696 0000282C 4C8B4520                        mov r8, PARAM(0)
  3697                                          assert_integer(r8)
    53 00002830 41803811            <1>  cmp byte [%1], %2
    54 00002834 0F8515140000        <1>  jne L_error_incorrect_type
  3698 0000283A 498B7801                        mov rdi, qword [r8 + 1]
  3699 0000283E 48F7D7                          not rdi
  3700 00002841 E884120000                      call make_integer
  3701 00002846 C9                              leave
  3702 00002847 C21800                          ret AND_KILL_FRAME(1)
  3703                                  
  3704                                  L_code_ptr_bin_apply:
  3705 0000284A C8000000                        enter 0,0
  3706                                          ;assuming we have 2 params - f and list to apply f on it
  3707 0000284E 48837D1802                      cmp COUNT, 2
  3708 00002853 0F8C57130000                    jl L_error_arg_count_2    ; f and list
  3709 00002859 4C8B4500                        mov r8, qword[rbp]      ;backup rbp  
  3710 0000285D 4C8B4D08                        mov r9, qword[rbp +8]   ;backup ret addr
  3711 00002861 4C8B7D28                        mov r15, PARAM(1)         ;get list
  3712 00002865 488B4520                        mov rax, PARAM(0)         ;get f
  3713                                  
  3714                                          assert_closure(rax)        ; Count elements in the list
    53 00002869 803804              <1>  cmp byte [%1], %2
    54 0000286C 0F85DD130000        <1>  jne L_error_incorrect_type
  3715 00002872 41BA00000000                    mov r10, 0                ;counter
  3716 00002878 4D89FB                          mov r11, r15 ; Is the list pointer
  3717                                         
  3718                                          
  3719                                  .count_loop:
  3720 0000287B 4981FB[01000000]                cmp r11, sob_nil ;checking if we done, it's a proper list
  3721 00002882 7409                            je .write_over_frame
  3722 00002884 49FFC2                          inc r10                   ; Increment list element count
  3723 00002887 4D8B5B09                        mov r11, SOB_PAIR_CDR(r11) ;getting the next element in s if error might be here
  3724 0000288B EBEE                            jmp .count_loop
  3725                                  
  3726                                          ;r10 list length
  3727                                  
  3728                                  .write_over_frame:
  3729 0000288D 4D89D3                          mov r11, r10 ;
  3730 00002890 4983EB02                        sub r11, 2 ;how much to increase rbp for list argumetns
  3731 00002894 49C1E303                        shl r11, 3 ;multiply by 8
  3732 00002898 4C29DD                          sub rbp, r11 ;making space for list arguemtns
  3733                                  
  3734                                  .mov_env_rbp:
  3735 0000289B 4C894500                        mov qword[rbp], r8 ;restore old rbp ;now rbp points to the right position
  3736 0000289F 4C894D08                        mov qword[rbp + 8], r9 ;restore old ret addr
  3737 000028A3 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  3738 000028A7 48895D10                        mov qword[rbp + 8*2], rbx ;save the env in the new frame
  3739 000028AB 4C895518                        mov qword[rbp+ 8*3], r10 ;save the number of params in the new frame
  3740 000028AF 41BB00000000                    mov r11, 0;
  3741                                          ;r10 is the originl list length
  3742                                  .copy_list_arguments:
  3743 000028B5 4D39D3                          cmp r11, r10 ;reached to the end of the list
  3744 000028B8 7412                            je .done_copy_list_arguments;
  3745 000028BA 4D8B6701                        mov r12, SOB_PAIR_CAR(r15) ;get the car of the list
  3746 000028BE 4E8964DD20                      mov qword PARAM(r11), r12 ;copy the car to the new frame
  3747 000028C3 4D8B7F09                        mov r15, SOB_PAIR_CDR(r15) ;get the cdr of the list
  3748 000028C7 49FFC3                          inc r11
  3749 000028CA EBE9                            jmp .copy_list_arguments
  3750                                          ;;;rsp now points to the old ret?
  3751                                          ;;;rbp now points to the older rbp?
  3752                                  .done_copy_list_arguments:
  3753 000028CC 488D6508                        lea rsp, [rbp + 8*1]
  3754 000028D0 FF6009                          jmp SOB_CLOSURE_CODE(rax) ;jump to the code of the closure
  3755                                  
  3756                                  
  3757                                  L_code_ptr_is_null:
  3758 000028D3 C8000000                        enter 0, 0
  3759 000028D7 48837D1801                      cmp COUNT, 1
  3760 000028DC 0F8599120000                    jne L_error_arg_count_1
  3761 000028E2 488B4520                        mov rax, PARAM(0)
  3762 000028E6 803801                          cmp byte [rax], T_nil
  3763 000028E9 750C                            jne .L_false
  3764 000028EB 48B8-                           mov rax, sob_boolean_true
  3764 000028ED [0300000000000000] 
  3765 000028F5 EB0A                            jmp .L_end
  3766                                  .L_false:
  3767 000028F7 48B8-                           mov rax, sob_boolean_false
  3767 000028F9 [0200000000000000] 
  3768                                  .L_end:
  3769 00002901 C9                              leave
  3770 00002902 C21800                          ret AND_KILL_FRAME(1)
  3771                                  
  3772                                  L_code_ptr_is_pair:
  3773 00002905 C8000000                        enter 0, 0
  3774 00002909 48837D1801                      cmp COUNT, 1
  3775 0000290E 0F8567120000                    jne L_error_arg_count_1
  3776 00002914 488B4520                        mov rax, PARAM(0)
  3777 00002918 803821                          cmp byte [rax], T_pair
  3778 0000291B 750C                            jne .L_false
  3779 0000291D 48B8-                           mov rax, sob_boolean_true
  3779 0000291F [0300000000000000] 
  3780 00002927 EB0A                            jmp .L_end
  3781                                  .L_false:
  3782 00002929 48B8-                           mov rax, sob_boolean_false
  3782 0000292B [0200000000000000] 
  3783                                  .L_end:
  3784 00002933 C9                              leave
  3785 00002934 C21800                          ret AND_KILL_FRAME(1)
  3786                                          
  3787                                  L_code_ptr_is_void:
  3788 00002937 C8000000                        enter 0, 0
  3789 0000293B 48837D1801                      cmp COUNT, 1
  3790 00002940 0F8535120000                    jne L_error_arg_count_1
  3791 00002946 488B4520                        mov rax, PARAM(0)
  3792 0000294A 803800                          cmp byte [rax], T_void
  3793 0000294D 750C                            jne .L_false
  3794 0000294F 48B8-                           mov rax, sob_boolean_true
  3794 00002951 [0300000000000000] 
  3795 00002959 EB0A                            jmp .L_end
  3796                                  .L_false:
  3797 0000295B 48B8-                           mov rax, sob_boolean_false
  3797 0000295D [0200000000000000] 
  3798                                  .L_end:
  3799 00002965 C9                              leave
  3800 00002966 C21800                          ret AND_KILL_FRAME(1)
  3801                                  
  3802                                  L_code_ptr_is_char:
  3803 00002969 C8000000                        enter 0, 0
  3804 0000296D 48837D1801                      cmp COUNT, 1
  3805 00002972 0F8503120000                    jne L_error_arg_count_1
  3806 00002978 488B4520                        mov rax, PARAM(0)
  3807 0000297C 803802                          cmp byte [rax], T_char
  3808 0000297F 750C                            jne .L_false
  3809 00002981 48B8-                           mov rax, sob_boolean_true
  3809 00002983 [0300000000000000] 
  3810 0000298B EB0A                            jmp .L_end
  3811                                  .L_false:
  3812 0000298D 48B8-                           mov rax, sob_boolean_false
  3812 0000298F [0200000000000000] 
  3813                                  .L_end:
  3814 00002997 C9                              leave
  3815 00002998 C21800                          ret AND_KILL_FRAME(1)
  3816                                  
  3817                                  L_code_ptr_is_string:
  3818 0000299B C8000000                        enter 0, 0
  3819 0000299F 48837D1801                      cmp COUNT, 1
  3820 000029A4 0F85D1110000                    jne L_error_arg_count_1
  3821 000029AA 488B4520                        mov rax, PARAM(0)
  3822 000029AE 803803                          cmp byte [rax], T_string
  3823 000029B1 750C                            jne .L_false
  3824 000029B3 48B8-                           mov rax, sob_boolean_true
  3824 000029B5 [0300000000000000] 
  3825 000029BD EB0A                            jmp .L_end
  3826                                  .L_false:
  3827 000029BF 48B8-                           mov rax, sob_boolean_false
  3827 000029C1 [0200000000000000] 
  3828                                  .L_end:
  3829 000029C9 C9                              leave
  3830 000029CA C21800                          ret AND_KILL_FRAME(1)
  3831                                  
  3832                                  L_code_ptr_is_symbol:
  3833 000029CD C8000000                        enter 0, 0
  3834 000029D1 48837D1801                      cmp COUNT, 1
  3835 000029D6 0F859F110000                    jne L_error_arg_count_1
  3836 000029DC 4C8B4520                        mov r8, PARAM(0)
  3837 000029E0 41802040                        and byte [r8], T_symbol
  3838 000029E4 740C                            jz .L_false
  3839 000029E6 48B8-                           mov rax, sob_boolean_true
  3839 000029E8 [0300000000000000] 
  3840 000029F0 EB0A                            jmp .L_exit
  3841                                  .L_false:
  3842 000029F2 48B8-                           mov rax, sob_boolean_false
  3842 000029F4 [0200000000000000] 
  3843                                  .L_exit:
  3844 000029FC C9                              leave
  3845 000029FD C21800                          ret AND_KILL_FRAME(1)
  3846                                  
  3847                                  L_code_ptr_is_uninterned_symbol:
  3848 00002A00 C8000000                        enter 0, 0
  3849 00002A04 48837D1801                      cmp COUNT, 1
  3850 00002A09 0F856C110000                    jne L_error_arg_count_1
  3851 00002A0F 4C8B4520                        mov r8, PARAM(0)
  3852 00002A13 41803842                        cmp byte [r8], T_uninterned_symbol
  3853 00002A17 750C                            jne .L_false
  3854 00002A19 48B8-                           mov rax, sob_boolean_true
  3854 00002A1B [0300000000000000] 
  3855 00002A23 EB0A                            jmp .L_exit
  3856                                  .L_false:
  3857 00002A25 48B8-                           mov rax, sob_boolean_false
  3857 00002A27 [0200000000000000] 
  3858                                  .L_exit:
  3859 00002A2F C9                              leave
  3860 00002A30 C21800                          ret AND_KILL_FRAME(1)
  3861                                  
  3862                                  L_code_ptr_is_interned_symbol:
  3863 00002A33 C8000000                        enter 0, 0
  3864 00002A37 48837D1801                      cmp COUNT, 1
  3865 00002A3C 0F8539110000                    jne L_error_arg_count_1
  3866 00002A42 488B4520                        mov rax, PARAM(0)
  3867 00002A46 803841                          cmp byte [rax], T_interned_symbol
  3868 00002A49 750C                            jne .L_false
  3869 00002A4B 48B8-                           mov rax, sob_boolean_true
  3869 00002A4D [0300000000000000] 
  3870 00002A55 EB0A                            jmp .L_end
  3871                                  .L_false:
  3872 00002A57 48B8-                           mov rax, sob_boolean_false
  3872 00002A59 [0200000000000000] 
  3873                                  .L_end:
  3874 00002A61 C9                              leave
  3875 00002A62 C21800                          ret AND_KILL_FRAME(1)
  3876                                  
  3877                                  L_code_ptr_gensym:
  3878 00002A65 C8000000                        enter 0, 0
  3879 00002A69 48837D1800                      cmp COUNT, 0
  3880 00002A6E 0F85D2100000                    jne L_error_arg_count_0
  3881 00002A74 48FF0425[96090000]              inc qword [gensym_count]
  3882 00002A7C BF09000000                      mov rdi, (1 + 8)
  3883 00002A81 E824F4FFFF                      call malloc
  3884 00002A86 C60042                          mov byte [rax], T_uninterned_symbol
  3885 00002A89 488B0C25[96090000]              mov rcx, qword [gensym_count]
  3886 00002A91 48894801                        mov qword [rax + 1], rcx
  3887 00002A95 C9                              leave
  3888 00002A96 C21000                          ret AND_KILL_FRAME(0)
  3889                                  
  3890                                  L_code_ptr_is_vector:
  3891 00002A99 C8000000                        enter 0, 0
  3892 00002A9D 48837D1801                      cmp COUNT, 1
  3893 00002AA2 0F85D3100000                    jne L_error_arg_count_1
  3894 00002AA8 488B4520                        mov rax, PARAM(0)
  3895 00002AAC 803822                          cmp byte [rax], T_vector
  3896 00002AAF 750C                            jne .L_false
  3897 00002AB1 48B8-                           mov rax, sob_boolean_true
  3897 00002AB3 [0300000000000000] 
  3898 00002ABB EB0A                            jmp .L_end
  3899                                  .L_false:
  3900 00002ABD 48B8-                           mov rax, sob_boolean_false
  3900 00002ABF [0200000000000000] 
  3901                                  .L_end:
  3902 00002AC7 C9                              leave
  3903 00002AC8 C21800                          ret AND_KILL_FRAME(1)
  3904                                  
  3905                                  L_code_ptr_is_closure:
  3906 00002ACB C8000000                        enter 0, 0
  3907 00002ACF 48837D1801                      cmp COUNT, 1
  3908 00002AD4 0F85A1100000                    jne L_error_arg_count_1
  3909 00002ADA 488B4520                        mov rax, PARAM(0)
  3910 00002ADE 803804                          cmp byte [rax], T_closure
  3911 00002AE1 750C                            jne .L_false
  3912 00002AE3 48B8-                           mov rax, sob_boolean_true
  3912 00002AE5 [0300000000000000] 
  3913 00002AED EB0A                            jmp .L_end
  3914                                  .L_false:
  3915 00002AEF 48B8-                           mov rax, sob_boolean_false
  3915 00002AF1 [0200000000000000] 
  3916                                  .L_end:
  3917 00002AF9 C9                              leave
  3918 00002AFA C21800                          ret AND_KILL_FRAME(1)
  3919                                  
  3920                                  L_code_ptr_is_real:
  3921 00002AFD C8000000                        enter 0, 0
  3922 00002B01 48837D1801                      cmp COUNT, 1
  3923 00002B06 0F856F100000                    jne L_error_arg_count_1
  3924 00002B0C 488B4520                        mov rax, PARAM(0)
  3925 00002B10 803813                          cmp byte [rax], T_real
  3926 00002B13 750C                            jne .L_false
  3927 00002B15 48B8-                           mov rax, sob_boolean_true
  3927 00002B17 [0300000000000000] 
  3928 00002B1F EB0A                            jmp .L_end
  3929                                  .L_false:
  3930 00002B21 48B8-                           mov rax, sob_boolean_false
  3930 00002B23 [0200000000000000] 
  3931                                  .L_end:
  3932 00002B2B C9                              leave
  3933 00002B2C C21800                          ret AND_KILL_FRAME(1)
  3934                                  
  3935                                  L_code_ptr_is_fraction:
  3936 00002B2F C8000000                        enter 0, 0
  3937 00002B33 48837D1801                      cmp COUNT, 1
  3938 00002B38 0F853D100000                    jne L_error_arg_count_1
  3939 00002B3E 488B4520                        mov rax, PARAM(0)
  3940 00002B42 803812                          cmp byte [rax], T_fraction
  3941 00002B45 750C                            jne .L_false
  3942 00002B47 48B8-                           mov rax, sob_boolean_true
  3942 00002B49 [0300000000000000] 
  3943 00002B51 EB0A                            jmp .L_end
  3944                                  .L_false:
  3945 00002B53 48B8-                           mov rax, sob_boolean_false
  3945 00002B55 [0200000000000000] 
  3946                                  .L_end:
  3947 00002B5D C9                              leave
  3948 00002B5E C21800                          ret AND_KILL_FRAME(1)
  3949                                  
  3950                                  L_code_ptr_is_boolean:
  3951 00002B61 C8000000                        enter 0, 0
  3952 00002B65 48837D1801                      cmp COUNT, 1
  3953 00002B6A 0F850B100000                    jne L_error_arg_count_1
  3954 00002B70 488B4520                        mov rax, PARAM(0)
  3955 00002B74 8A18                            mov bl, byte [rax]
  3956 00002B76 80E308                          and bl, T_boolean
  3957 00002B79 740C                            je .L_false
  3958 00002B7B 48B8-                           mov rax, sob_boolean_true
  3958 00002B7D [0300000000000000] 
  3959 00002B85 EB0A                            jmp .L_end
  3960                                  .L_false:
  3961 00002B87 48B8-                           mov rax, sob_boolean_false
  3961 00002B89 [0200000000000000] 
  3962                                  .L_end:
  3963 00002B91 C9                              leave
  3964 00002B92 C21800                          ret AND_KILL_FRAME(1)
  3965                                          
  3966                                  L_code_ptr_is_boolean_false:
  3967 00002B95 C8000000                        enter 0, 0
  3968 00002B99 48837D1801                      cmp COUNT, 1
  3969 00002B9E 0F85D70F0000                    jne L_error_arg_count_1
  3970 00002BA4 488B4520                        mov rax, PARAM(0)
  3971 00002BA8 8A18                            mov bl, byte [rax]
  3972 00002BAA 80FB09                          cmp bl, T_boolean_false
  3973 00002BAD 750C                            jne .L_false
  3974 00002BAF 48B8-                           mov rax, sob_boolean_true
  3974 00002BB1 [0300000000000000] 
  3975 00002BB9 EB0A                            jmp .L_end
  3976                                  .L_false:
  3977 00002BBB 48B8-                           mov rax, sob_boolean_false
  3977 00002BBD [0200000000000000] 
  3978                                  .L_end:
  3979 00002BC5 C9                              leave
  3980 00002BC6 C21800                          ret AND_KILL_FRAME(1)
  3981                                  
  3982                                  L_code_ptr_is_boolean_true:
  3983 00002BC9 C8000000                        enter 0, 0
  3984 00002BCD 48837D1801                      cmp COUNT, 1
  3985 00002BD2 0F85A30F0000                    jne L_error_arg_count_1
  3986 00002BD8 488B4520                        mov rax, PARAM(0)
  3987 00002BDC 8A18                            mov bl, byte [rax]
  3988 00002BDE 80FB0A                          cmp bl, T_boolean_true
  3989 00002BE1 750C                            jne .L_false
  3990 00002BE3 48B8-                           mov rax, sob_boolean_true
  3990 00002BE5 [0300000000000000] 
  3991 00002BED EB0A                            jmp .L_end
  3992                                  .L_false:
  3993 00002BEF 48B8-                           mov rax, sob_boolean_false
  3993 00002BF1 [0200000000000000] 
  3994                                  .L_end:
  3995 00002BF9 C9                              leave
  3996 00002BFA C21800                          ret AND_KILL_FRAME(1)
  3997                                  
  3998                                  L_code_ptr_is_number:
  3999 00002BFD C8000000                        enter 0, 0
  4000 00002C01 48837D1801                      cmp COUNT, 1
  4001 00002C06 0F856F0F0000                    jne L_error_arg_count_1
  4002 00002C0C 488B4520                        mov rax, PARAM(0)
  4003 00002C10 8A18                            mov bl, byte [rax]
  4004 00002C12 80E310                          and bl, T_number
  4005 00002C15 740C                            jz .L_false
  4006 00002C17 48B8-                           mov rax, sob_boolean_true
  4006 00002C19 [0300000000000000] 
  4007 00002C21 EB0A                            jmp .L_end
  4008                                  .L_false:
  4009 00002C23 48B8-                           mov rax, sob_boolean_false
  4009 00002C25 [0200000000000000] 
  4010                                  .L_end:
  4011 00002C2D C9                              leave
  4012 00002C2E C21800                          ret AND_KILL_FRAME(1)
  4013                                          
  4014                                  L_code_ptr_is_collection:
  4015 00002C31 C8000000                        enter 0, 0
  4016 00002C35 48837D1801                      cmp COUNT, 1
  4017 00002C3A 0F853B0F0000                    jne L_error_arg_count_1
  4018 00002C40 488B4520                        mov rax, PARAM(0)
  4019 00002C44 8A18                            mov bl, byte [rax]
  4020 00002C46 80E320                          and bl, T_collection
  4021 00002C49 740C                            je .L_false
  4022 00002C4B 48B8-                           mov rax, sob_boolean_true
  4022 00002C4D [0300000000000000] 
  4023 00002C55 EB0A                            jmp .L_end
  4024                                  .L_false:
  4025 00002C57 48B8-                           mov rax, sob_boolean_false
  4025 00002C59 [0200000000000000] 
  4026                                  .L_end:
  4027 00002C61 C9                              leave
  4028 00002C62 C21800                          ret AND_KILL_FRAME(1)
  4029                                  
  4030                                  L_code_ptr_cons:
  4031 00002C65 C8000000                        enter 0, 0
  4032 00002C69 48837D1802                      cmp COUNT, 2
  4033 00002C6E 0F853C0F0000                    jne L_error_arg_count_2
  4034 00002C74 BF11000000                      mov rdi, (1 + 8 + 8)
  4035 00002C79 E82CF2FFFF                      call malloc
  4036 00002C7E C60021                          mov byte [rax], T_pair
  4037 00002C81 488B5D20                        mov rbx, PARAM(0)
  4038 00002C85 48895801                        mov SOB_PAIR_CAR(rax), rbx
  4039 00002C89 488B5D28                        mov rbx, PARAM(1)
  4040 00002C8D 48895809                        mov SOB_PAIR_CDR(rax), rbx
  4041 00002C91 C9                              leave
  4042 00002C92 C22000                          ret AND_KILL_FRAME(2)
  4043                                  
  4044                                  L_code_ptr_display_sexpr:
  4045 00002C95 C8000000                        enter 0, 0
  4046 00002C99 48837D1801                      cmp COUNT, 1
  4047 00002C9E 0F85D70E0000                    jne L_error_arg_count_1
  4048 00002CA4 488B7D20                        mov rdi, PARAM(0)
  4049 00002CA8 E87EF4FFFF                      call print_sexpr
  4050 00002CAD 48B8-                           mov rax, sob_void
  4050 00002CAF [0000000000000000] 
  4051 00002CB7 C9                              leave
  4052 00002CB8 C21800                          ret AND_KILL_FRAME(1)
  4053                                  
  4054                                  L_code_ptr_write_char:
  4055 00002CBB C8000000                        enter 0, 0
  4056 00002CBF 48837D1801                      cmp COUNT, 1
  4057 00002CC4 0F85B10E0000                    jne L_error_arg_count_1
  4058 00002CCA 488B4520                        mov rax, PARAM(0)
  4059                                          assert_char(rax)
    53 00002CCE 803802              <1>  cmp byte [%1], %2
    54 00002CD1 0F85780F0000        <1>  jne L_error_incorrect_type
  4060 00002CD7 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  4061 00002CDA 4825FF000000                    and rax, 255
  4062 00002CE0 48BF-                           mov rdi, fmt_char
  4062 00002CE2 [9E09000000000000] 
  4063 00002CEA 4889C6                          mov rsi, rax
  4064 00002CED B800000000                      mov rax, 0
  4065                                          ENTER
    44 00002CF2 C8000000            <1>  enter 0, 0
    45 00002CF6 4883E4F0            <1>  and rsp, ~15
  4066 00002CFA E8(00000000)                    call printf
  4067                                          LEAVE
    49 00002CFF C9                  <1>  leave
  4068 00002D00 48B8-                           mov rax, sob_void
  4068 00002D02 [0000000000000000] 
  4069 00002D0A C9                              leave
  4070 00002D0B C21800                          ret AND_KILL_FRAME(1)
  4071                                  
  4072                                  L_code_ptr_car:
  4073 00002D0E C8000000                        enter 0, 0
  4074 00002D12 48837D1801                      cmp COUNT, 1
  4075 00002D17 0F855E0E0000                    jne L_error_arg_count_1
  4076 00002D1D 488B4520                        mov rax, PARAM(0)
  4077                                          assert_pair(rax)
    53 00002D21 803821              <1>  cmp byte [%1], %2
    54 00002D24 0F85250F0000        <1>  jne L_error_incorrect_type
  4078 00002D2A 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  4079 00002D2E C9                              leave
  4080 00002D2F C21800                          ret AND_KILL_FRAME(1)
  4081                                          
  4082                                  L_code_ptr_cdr:
  4083 00002D32 C8000000                        enter 0, 0
  4084 00002D36 48837D1801                      cmp COUNT, 1
  4085 00002D3B 0F853A0E0000                    jne L_error_arg_count_1
  4086 00002D41 488B4520                        mov rax, PARAM(0)
  4087                                          assert_pair(rax)
    53 00002D45 803821              <1>  cmp byte [%1], %2
    54 00002D48 0F85010F0000        <1>  jne L_error_incorrect_type
  4088 00002D4E 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  4089 00002D52 C9                              leave
  4090 00002D53 C21800                          ret AND_KILL_FRAME(1)
  4091                                          
  4092                                  L_code_ptr_string_length:
  4093 00002D56 C8000000                        enter 0, 0
  4094 00002D5A 48837D1801                      cmp COUNT, 1
  4095 00002D5F 0F85160E0000                    jne L_error_arg_count_1
  4096 00002D65 488B4520                        mov rax, PARAM(0)
  4097                                          assert_string(rax)
    53 00002D69 803803              <1>  cmp byte [%1], %2
    54 00002D6C 0F85DD0E0000        <1>  jne L_error_incorrect_type
  4098 00002D72 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  4099 00002D76 E84F0D0000                      call make_integer
  4100 00002D7B C9                              leave
  4101 00002D7C C21800                          ret AND_KILL_FRAME(1)
  4102                                  
  4103                                  L_code_ptr_vector_length:
  4104 00002D7F C8000000                        enter 0, 0
  4105 00002D83 48837D1801                      cmp COUNT, 1
  4106 00002D88 0F85ED0D0000                    jne L_error_arg_count_1
  4107 00002D8E 488B4520                        mov rax, PARAM(0)
  4108                                          assert_vector(rax)
    53 00002D92 803822              <1>  cmp byte [%1], %2
    54 00002D95 0F85B40E0000        <1>  jne L_error_incorrect_type
  4109 00002D9B 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  4110 00002D9F E8260D0000                      call make_integer
  4111 00002DA4 C9                              leave
  4112 00002DA5 C21800                          ret AND_KILL_FRAME(1)
  4113                                  
  4114                                  L_code_ptr_real_to_integer:
  4115 00002DA8 C8000000                        enter 0, 0
  4116 00002DAC 48837D1801                      cmp COUNT, 1
  4117 00002DB1 0F85C40D0000                    jne L_error_arg_count_1
  4118 00002DB7 488B5D20                        mov rbx, PARAM(0)
  4119                                          assert_real(rbx)
    53 00002DBB 803B13              <1>  cmp byte [%1], %2
    54 00002DBE 0F858B0E0000        <1>  jne L_error_incorrect_type
  4120 00002DC4 F20F104301                      movsd xmm0, qword [rbx + 1]
  4121 00002DC9 F2480F2CF8                      cvttsd2si rdi, xmm0
  4122 00002DCE E8F70C0000                      call make_integer
  4123 00002DD3 C9                              leave
  4124 00002DD4 C21800                          ret AND_KILL_FRAME(1)
  4125                                  
  4126                                  L_code_ptr_exit:
  4127 00002DD7 C8000000                        enter 0, 0
  4128 00002DDB 48837D1800                      cmp COUNT, 0
  4129 00002DE0 0F85600D0000                    jne L_error_arg_count_0
  4130 00002DE6 B800000000                      mov rax, 0
  4131 00002DEB E8(00000000)                    call exit
  4132                                  
  4133                                  L_code_ptr_integer_to_real:
  4134 00002DF0 C8000000                        enter 0, 0
  4135 00002DF4 48837D1801                      cmp COUNT, 1
  4136 00002DF9 0F857C0D0000                    jne L_error_arg_count_1
  4137 00002DFF 488B4520                        mov rax, PARAM(0)
  4138                                          assert_integer(rax)
    53 00002E03 803811              <1>  cmp byte [%1], %2
    54 00002E06 0F85430E0000        <1>  jne L_error_incorrect_type
  4139 00002E0C FF7001                          push qword [rax + 1]
  4140 00002E0F F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  4141 00002E15 E8980C0000                      call make_real
  4142 00002E1A C9                              leave
  4143 00002E1B C21800                          ret AND_KILL_FRAME(1)
  4144                                  
  4145                                  L_code_ptr_fraction_to_real:
  4146 00002E1E C8000000                        enter 0, 0
  4147 00002E22 48837D1801                      cmp COUNT, 1
  4148 00002E27 0F854E0D0000                    jne L_error_arg_count_1
  4149 00002E2D 488B4520                        mov rax, PARAM(0)
  4150                                          assert_fraction(rax)
    53 00002E31 803812              <1>  cmp byte [%1], %2
    54 00002E34 0F85150E0000        <1>  jne L_error_incorrect_type
  4151 00002E3A FF7001                          push qword [rax + 1]
  4152 00002E3D F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  4153 00002E43 FF7009                          push qword [rax + 1 + 8]
  4154 00002E46 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  4155 00002E4C F20F5EC1                        divsd xmm0, xmm1
  4156 00002E50 E85D0C0000                      call make_real
  4157 00002E55 C9                              leave
  4158 00002E56 C21800                          ret AND_KILL_FRAME(1)
  4159                                  
  4160                                  L_code_ptr_char_to_integer:
  4161 00002E59 C8000000                        enter 0, 0
  4162 00002E5D 48837D1801                      cmp COUNT, 1
  4163 00002E62 0F85130D0000                    jne L_error_arg_count_1
  4164 00002E68 488B4520                        mov rax, PARAM(0)
  4165                                          assert_char(rax)
    53 00002E6C 803802              <1>  cmp byte [%1], %2
    54 00002E6F 0F85DA0D0000        <1>  jne L_error_incorrect_type
  4166 00002E75 8A4001                          mov al, byte [rax + 1]
  4167 00002E78 4825FF000000                    and rax, 255
  4168 00002E7E 4889C7                          mov rdi, rax
  4169 00002E81 E8440C0000                      call make_integer
  4170 00002E86 C9                              leave
  4171 00002E87 C21800                          ret AND_KILL_FRAME(1)
  4172                                  
  4173                                  L_code_ptr_integer_to_fraction:
  4174 00002E8A C8000000                        enter 0, 0
  4175 00002E8E 48837D1801                      cmp COUNT, 1
  4176 00002E93 0F85E20C0000                    jne L_error_arg_count_1
  4177 00002E99 4C8B4520                        mov r8, PARAM(0)
  4178                                          assert_integer(r8)
    53 00002E9D 41803811            <1>  cmp byte [%1], %2
    54 00002EA1 0F85A80D0000        <1>  jne L_error_incorrect_type
  4179 00002EA7 BF11000000                      mov rdi, (1 + 8 + 8)
  4180 00002EAC E8F9EFFFFF                      call malloc
  4181 00002EB1 498B5801                        mov rbx, qword [r8 + 1]
  4182 00002EB5 C60012                          mov byte [rax], T_fraction
  4183 00002EB8 48895801                        mov qword [rax + 1], rbx
  4184 00002EBC 48C7400901000000                mov qword [rax + 1 + 8], 1
  4185 00002EC4 C9                              leave
  4186 00002EC5 C21800                          ret AND_KILL_FRAME(1)
  4187                                  
  4188                                  L_code_ptr_integer_to_char:
  4189 00002EC8 C8000000                        enter 0, 0
  4190 00002ECC 48837D1801                      cmp COUNT, 1
  4191 00002ED1 0F85A40C0000                    jne L_error_arg_count_1
  4192 00002ED7 488B4520                        mov rax, PARAM(0)
  4193                                          assert_integer(rax)
    53 00002EDB 803811              <1>  cmp byte [%1], %2
    54 00002EDE 0F856B0D0000        <1>  jne L_error_incorrect_type
  4194 00002EE4 488B5801                        mov rbx, qword [rax + 1]
  4195 00002EE8 4883FB00                        cmp rbx, 0
  4196 00002EEC 0F8EF20B0000                    jle L_error_integer_range
  4197 00002EF2 4881FB00010000                  cmp rbx, 256
  4198 00002EF9 0F8DE50B0000                    jge L_error_integer_range
  4199 00002EFF BF02000000                      mov rdi, (1 + 1)
  4200 00002F04 E8A1EFFFFF                      call malloc
  4201 00002F09 C60002                          mov byte [rax], T_char
  4202 00002F0C 885801                          mov byte [rax + 1], bl
  4203 00002F0F C9                              leave
  4204 00002F10 C21800                          ret AND_KILL_FRAME(1)
  4205                                  
  4206                                  L_code_ptr_trng:
  4207 00002F13 C8000000                        enter 0, 0
  4208 00002F17 48837D1800                      cmp COUNT, 0
  4209 00002F1C 0F85240C0000                    jne L_error_arg_count_0
  4210 00002F22 480FC7F7                        rdrand rdi
  4211 00002F26 48D1EF                          shr rdi, 1
  4212 00002F29 E89C0B0000                      call make_integer
  4213 00002F2E C9                              leave
  4214 00002F2F C21000                          ret AND_KILL_FRAME(0)
  4215                                  
  4216                                  L_code_ptr_is_zero:
  4217 00002F32 C8000000                        enter 0, 0
  4218 00002F36 48837D1801                      cmp COUNT, 1
  4219 00002F3B 0F853A0C0000                    jne L_error_arg_count_1
  4220 00002F41 488B4520                        mov rax, PARAM(0)
  4221 00002F45 803811                          cmp byte [rax], T_integer
  4222 00002F48 740F                            je .L_integer
  4223 00002F4A 803812                          cmp byte [rax], T_fraction
  4224 00002F4D 7413                            je .L_fraction
  4225 00002F4F 803813                          cmp byte [rax], T_real
  4226 00002F52 7417                            je .L_real
  4227 00002F54 E9F60C0000                      jmp L_error_incorrect_type
  4228                                  .L_integer:
  4229 00002F59 4883780100                      cmp qword [rax + 1], 0
  4230 00002F5E 7429                            je .L_zero
  4231 00002F60 EB1B                            jmp .L_not_zero
  4232                                  .L_fraction:
  4233 00002F62 4883780100                      cmp qword [rax + 1], 0
  4234 00002F67 7420                            je .L_zero
  4235 00002F69 EB12                            jmp .L_not_zero
  4236                                  .L_real:
  4237 00002F6B 660FEFC0                        pxor xmm0, xmm0
  4238 00002F6F FF7001                          push qword [rax + 1]
  4239 00002F72 F20F100C24                      movsd xmm1, qword [rsp]
  4240 00002F77 660F2EC1                        ucomisd xmm0, xmm1
  4241 00002F7B 740C                            je .L_zero
  4242                                  .L_not_zero:
  4243 00002F7D 48B8-                           mov rax, sob_boolean_false
  4243 00002F7F [0200000000000000] 
  4244 00002F87 EB0A                            jmp .L_end
  4245                                  .L_zero:
  4246 00002F89 48B8-                           mov rax, sob_boolean_true
  4246 00002F8B [0300000000000000] 
  4247                                  .L_end:
  4248 00002F93 C9                              leave
  4249 00002F94 C21800                          ret AND_KILL_FRAME(1)
  4250                                  
  4251                                  L_code_ptr_is_integer:
  4252 00002F97 C8000000                        enter 0, 0
  4253 00002F9B 48837D1801                      cmp COUNT, 1
  4254 00002FA0 0F85D50B0000                    jne L_error_arg_count_1
  4255 00002FA6 488B4520                        mov rax, PARAM(0)
  4256 00002FAA 803811                          cmp byte [rax], T_integer
  4257 00002FAD 750C                            jne .L_false
  4258 00002FAF 48B8-                           mov rax, sob_boolean_true
  4258 00002FB1 [0300000000000000] 
  4259 00002FB9 EB0A                            jmp .L_exit
  4260                                  .L_false:
  4261 00002FBB 48B8-                           mov rax, sob_boolean_false
  4261 00002FBD [0200000000000000] 
  4262                                  .L_exit:
  4263 00002FC5 C9                              leave
  4264 00002FC6 C21800                          ret AND_KILL_FRAME(1)
  4265                                  
  4266                                  L_code_ptr_raw_bin_add_rr:
  4267 00002FC9 C8000000                        enter 0, 0
  4268 00002FCD 48837D1802                      cmp COUNT, 2
  4269 00002FD2 0F85D80B0000                    jne L_error_arg_count_2
  4270 00002FD8 488B5D20                        mov rbx, PARAM(0)
  4271                                          assert_real(rbx)
    53 00002FDC 803B13              <1>  cmp byte [%1], %2
    54 00002FDF 0F856A0C0000        <1>  jne L_error_incorrect_type
  4272 00002FE5 488B4D28                        mov rcx, PARAM(1)
  4273                                          assert_real(rcx)
    53 00002FE9 803913              <1>  cmp byte [%1], %2
    54 00002FEC 0F855D0C0000        <1>  jne L_error_incorrect_type
  4274 00002FF2 F20F104301                      movsd xmm0, qword [rbx + 1]
  4275 00002FF7 F20F104901                      movsd xmm1, qword [rcx + 1]
  4276 00002FFC F20F58C1                        addsd xmm0, xmm1
  4277 00003000 E8AD0A0000                      call make_real
  4278 00003005 C9                              leave
  4279 00003006 C22000                          ret AND_KILL_FRAME(2)
  4280                                  
  4281                                  L_code_ptr_raw_bin_sub_rr:
  4282 00003009 C8000000                        enter 0, 0
  4283 0000300D 48837D1802                      cmp COUNT, 2
  4284 00003012 0F85980B0000                    jne L_error_arg_count_2
  4285 00003018 488B5D20                        mov rbx, PARAM(0)
  4286                                          assert_real(rbx)
    53 0000301C 803B13              <1>  cmp byte [%1], %2
    54 0000301F 0F852A0C0000        <1>  jne L_error_incorrect_type
  4287 00003025 488B4D28                        mov rcx, PARAM(1)
  4288                                          assert_real(rcx)
    53 00003029 803913              <1>  cmp byte [%1], %2
    54 0000302C 0F851D0C0000        <1>  jne L_error_incorrect_type
  4289 00003032 F20F104301                      movsd xmm0, qword [rbx + 1]
  4290 00003037 F20F104901                      movsd xmm1, qword [rcx + 1]
  4291 0000303C F20F5CC1                        subsd xmm0, xmm1
  4292 00003040 E86D0A0000                      call make_real
  4293 00003045 C9                              leave
  4294 00003046 C22000                          ret AND_KILL_FRAME(2)
  4295                                  
  4296                                  L_code_ptr_raw_bin_mul_rr:
  4297 00003049 C8000000                        enter 0, 0
  4298 0000304D 48837D1802                      cmp COUNT, 2
  4299 00003052 0F85580B0000                    jne L_error_arg_count_2
  4300 00003058 488B5D20                        mov rbx, PARAM(0)
  4301                                          assert_real(rbx)
    53 0000305C 803B13              <1>  cmp byte [%1], %2
    54 0000305F 0F85EA0B0000        <1>  jne L_error_incorrect_type
  4302 00003065 488B4D28                        mov rcx, PARAM(1)
  4303                                          assert_real(rcx)
    53 00003069 803913              <1>  cmp byte [%1], %2
    54 0000306C 0F85DD0B0000        <1>  jne L_error_incorrect_type
  4304 00003072 F20F104301                      movsd xmm0, qword [rbx + 1]
  4305 00003077 F20F104901                      movsd xmm1, qword [rcx + 1]
  4306 0000307C F20F59C1                        mulsd xmm0, xmm1
  4307 00003080 E82D0A0000                      call make_real
  4308 00003085 C9                              leave
  4309 00003086 C22000                          ret AND_KILL_FRAME(2)
  4310                                  
  4311                                  L_code_ptr_raw_bin_div_rr:
  4312 00003089 C8000000                        enter 0, 0
  4313 0000308D 48837D1802                      cmp COUNT, 2
  4314 00003092 0F85180B0000                    jne L_error_arg_count_2
  4315 00003098 488B5D20                        mov rbx, PARAM(0)
  4316                                          assert_real(rbx)
    53 0000309C 803B13              <1>  cmp byte [%1], %2
    54 0000309F 0F85AA0B0000        <1>  jne L_error_incorrect_type
  4317 000030A5 488B4D28                        mov rcx, PARAM(1)
  4318                                          assert_real(rcx)
    53 000030A9 803913              <1>  cmp byte [%1], %2
    54 000030AC 0F859D0B0000        <1>  jne L_error_incorrect_type
  4319 000030B2 F20F104301                      movsd xmm0, qword [rbx + 1]
  4320 000030B7 F20F104901                      movsd xmm1, qword [rcx + 1]
  4321 000030BC 660FEFD2                        pxor xmm2, xmm2
  4322 000030C0 660F2ECA                        ucomisd xmm1, xmm2
  4323 000030C4 0F84B60B0000                    je L_error_division_by_zero
  4324 000030CA F20F5EC1                        divsd xmm0, xmm1
  4325 000030CE E8DF090000                      call make_real
  4326 000030D3 C9                              leave
  4327 000030D4 C22000                          ret AND_KILL_FRAME(2)
  4328                                  
  4329                                  L_code_ptr_raw_bin_add_zz:
  4330 000030D7 C8000000                	enter 0, 0
  4331 000030DB 48837D1802              	cmp COUNT, 2
  4332 000030E0 0F85CA0A0000            	jne L_error_arg_count_2
  4333 000030E6 4C8B4520                	mov r8, PARAM(0)
  4334                                  	assert_integer(r8)
    53 000030EA 41803811            <1>  cmp byte [%1], %2
    54 000030EE 0F855B0B0000        <1>  jne L_error_incorrect_type
  4335 000030F4 4C8B4D28                	mov r9, PARAM(1)
  4336                                  	assert_integer(r9)
    53 000030F8 41803911            <1>  cmp byte [%1], %2
    54 000030FC 0F854D0B0000        <1>  jne L_error_incorrect_type
  4337 00003102 498B7801                	mov rdi, qword [r8 + 1]
  4338 00003106 49037901                	add rdi, qword [r9 + 1]
  4339 0000310A E8BB090000              	call make_integer
  4340 0000310F C9                      	leave
  4341 00003110 C22000                  	ret AND_KILL_FRAME(2)
  4342                                  
  4343                                  L_code_ptr_raw_bin_add_qq:
  4344 00003113 C8000000                        enter 0, 0
  4345 00003117 48837D1802                      cmp COUNT, 2
  4346 0000311C 0F858E0A0000                    jne L_error_arg_count_2
  4347 00003122 4C8B4520                        mov r8, PARAM(0)
  4348                                          assert_fraction(r8)
    53 00003126 41803812            <1>  cmp byte [%1], %2
    54 0000312A 0F851F0B0000        <1>  jne L_error_incorrect_type
  4349 00003130 4C8B4D28                        mov r9, PARAM(1)
  4350                                          assert_fraction(r9)
    53 00003134 41803912            <1>  cmp byte [%1], %2
    54 00003138 0F85110B0000        <1>  jne L_error_incorrect_type
  4351 0000313E 498B4001                        mov rax, qword [r8 + 1] ; num1
  4352 00003142 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  4353 00003146 4899                            cqo
  4354 00003148 48F7EB                          imul rbx
  4355 0000314B 4889C6                          mov rsi, rax
  4356 0000314E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  4357 00003152 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  4358 00003156 4899                            cqo
  4359 00003158 48F7EB                          imul rbx
  4360 0000315B 4801C6                          add rsi, rax
  4361 0000315E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  4362 00003162 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  4363 00003166 4899                            cqo
  4364 00003168 48F7EB                          imul rbx
  4365 0000316B 4889C7                          mov rdi, rax
  4366 0000316E E8DE010000                      call normalize_fraction
  4367 00003173 C9                              leave
  4368 00003174 C22000                          ret AND_KILL_FRAME(2)
  4369                                  
  4370                                  L_code_ptr_raw_bin_sub_zz:
  4371 00003177 C8000000                	enter 0, 0
  4372 0000317B 48837D1802              	cmp COUNT, 2
  4373 00003180 0F852A0A0000            	jne L_error_arg_count_2
  4374 00003186 4C8B4520                	mov r8, PARAM(0)
  4375                                  	assert_integer(r8)
    53 0000318A 41803811            <1>  cmp byte [%1], %2
    54 0000318E 0F85BB0A0000        <1>  jne L_error_incorrect_type
  4376 00003194 4C8B4D28                	mov r9, PARAM(1)
  4377                                  	assert_integer(r9)
    53 00003198 41803911            <1>  cmp byte [%1], %2
    54 0000319C 0F85AD0A0000        <1>  jne L_error_incorrect_type
  4378 000031A2 498B7801                	mov rdi, qword [r8 + 1]
  4379 000031A6 492B7901                	sub rdi, qword [r9 + 1]
  4380 000031AA E81B090000              	call make_integer
  4381 000031AF C9                      	leave
  4382 000031B0 C22000                  	ret AND_KILL_FRAME(2)
  4383                                  
  4384                                  L_code_ptr_raw_bin_sub_qq:
  4385 000031B3 C8000000                        enter 0, 0
  4386 000031B7 48837D1802                      cmp COUNT, 2
  4387 000031BC 0F85EE090000                    jne L_error_arg_count_2
  4388 000031C2 4C8B4520                        mov r8, PARAM(0)
  4389                                          assert_fraction(r8)
    53 000031C6 41803812            <1>  cmp byte [%1], %2
    54 000031CA 0F857F0A0000        <1>  jne L_error_incorrect_type
  4390 000031D0 4C8B4D28                        mov r9, PARAM(1)
  4391                                          assert_fraction(r9)
    53 000031D4 41803912            <1>  cmp byte [%1], %2
    54 000031D8 0F85710A0000        <1>  jne L_error_incorrect_type
  4392 000031DE 498B4001                        mov rax, qword [r8 + 1] ; num1
  4393 000031E2 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  4394 000031E6 4899                            cqo
  4395 000031E8 48F7EB                          imul rbx
  4396 000031EB 4889C6                          mov rsi, rax
  4397 000031EE 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  4398 000031F2 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  4399 000031F6 4899                            cqo
  4400 000031F8 48F7EB                          imul rbx
  4401 000031FB 4829C6                          sub rsi, rax
  4402 000031FE 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  4403 00003202 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  4404 00003206 4899                            cqo
  4405 00003208 48F7EB                          imul rbx
  4406 0000320B 4889C7                          mov rdi, rax
  4407 0000320E E83E010000                      call normalize_fraction
  4408 00003213 C9                              leave
  4409 00003214 C22000                          ret AND_KILL_FRAME(2)
  4410                                  
  4411                                  L_code_ptr_raw_bin_mul_zz:
  4412 00003217 C8000000                	enter 0, 0
  4413 0000321B 48837D1802              	cmp COUNT, 2
  4414 00003220 0F858A090000            	jne L_error_arg_count_2
  4415 00003226 4C8B4520                	mov r8, PARAM(0)
  4416                                  	assert_integer(r8)
    53 0000322A 41803811            <1>  cmp byte [%1], %2
    54 0000322E 0F851B0A0000        <1>  jne L_error_incorrect_type
  4417 00003234 4C8B4D28                	mov r9, PARAM(1)
  4418                                  	assert_integer(r9)
    53 00003238 41803911            <1>  cmp byte [%1], %2
    54 0000323C 0F850D0A0000        <1>  jne L_error_incorrect_type
  4419 00003242 4899                    	cqo
  4420 00003244 498B4001                	mov rax, qword [r8 + 1]
  4421 00003248 49F76101                	mul qword [r9 + 1]
  4422 0000324C 4889C7                  	mov rdi, rax
  4423 0000324F E876080000              	call make_integer
  4424 00003254 C9                      	leave
  4425 00003255 C22000                  	ret AND_KILL_FRAME(2)
  4426                                  
  4427                                  L_code_ptr_raw_bin_mul_qq:
  4428 00003258 C8000000                        enter 0, 0
  4429 0000325C 48837D1802                      cmp COUNT, 2
  4430 00003261 0F8549090000                    jne L_error_arg_count_2
  4431 00003267 4C8B4520                        mov r8, PARAM(0)
  4432                                          assert_fraction(r8)
    53 0000326B 41803812            <1>  cmp byte [%1], %2
    54 0000326F 0F85DA090000        <1>  jne L_error_incorrect_type
  4433 00003275 4C8B4D28                        mov r9, PARAM(1)
  4434                                          assert_fraction(r9)
    53 00003279 41803912            <1>  cmp byte [%1], %2
    54 0000327D 0F85CC090000        <1>  jne L_error_incorrect_type
  4435 00003283 498B4001                        mov rax, qword [r8 + 1] ; num1
  4436 00003287 498B5901                        mov rbx, qword [r9 + 1] ; num2
  4437 0000328B 4899                            cqo
  4438 0000328D 48F7EB                          imul rbx
  4439 00003290 4889C6                          mov rsi, rax
  4440 00003293 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  4441 00003297 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  4442 0000329B 4899                            cqo
  4443 0000329D 48F7EB                          imul rbx
  4444 000032A0 4889C7                          mov rdi, rax
  4445 000032A3 E8A9000000                      call normalize_fraction
  4446 000032A8 C9                              leave
  4447 000032A9 C22000                          ret AND_KILL_FRAME(2)
  4448                                          
  4449                                  L_code_ptr_raw_bin_div_zz:
  4450 000032AC C8000000                	enter 0, 0
  4451 000032B0 48837D1802              	cmp COUNT, 2
  4452 000032B5 0F85F5080000            	jne L_error_arg_count_2
  4453 000032BB 4C8B4520                	mov r8, PARAM(0)
  4454                                  	assert_integer(r8)
    53 000032BF 41803811            <1>  cmp byte [%1], %2
    54 000032C3 0F8586090000        <1>  jne L_error_incorrect_type
  4455 000032C9 4C8B4D28                	mov r9, PARAM(1)
  4456                                  	assert_integer(r9)
    53 000032CD 41803911            <1>  cmp byte [%1], %2
    54 000032D1 0F8578090000        <1>  jne L_error_incorrect_type
  4457 000032D7 498B7901                	mov rdi, qword [r9 + 1]
  4458 000032DB 4883FF00                	cmp rdi, 0
  4459 000032DF 0F849B090000            	je L_error_division_by_zero
  4460 000032E5 498B7001                	mov rsi, qword [r8 + 1]
  4461 000032E9 E863000000              	call normalize_fraction
  4462 000032EE C9                      	leave
  4463 000032EF C22000                  	ret AND_KILL_FRAME(2)
  4464                                  
  4465                                  L_code_ptr_raw_bin_div_qq:
  4466 000032F2 C8000000                        enter 0, 0
  4467 000032F6 48837D1802                      cmp COUNT, 2
  4468 000032FB 0F85AF080000                    jne L_error_arg_count_2
  4469 00003301 4C8B4520                        mov r8, PARAM(0)
  4470                                          assert_fraction(r8)
    53 00003305 41803812            <1>  cmp byte [%1], %2
    54 00003309 0F8540090000        <1>  jne L_error_incorrect_type
  4471 0000330F 4C8B4D28                        mov r9, PARAM(1)
  4472                                          assert_fraction(r9)
    53 00003313 41803912            <1>  cmp byte [%1], %2
    54 00003317 0F8532090000        <1>  jne L_error_incorrect_type
  4473 0000331D 4983790100                      cmp qword [r9 + 1], 0
  4474 00003322 0F8458090000                    je L_error_division_by_zero
  4475 00003328 498B4001                        mov rax, qword [r8 + 1] ; num1
  4476 0000332C 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  4477 00003330 4899                            cqo
  4478 00003332 48F7EB                          imul rbx
  4479 00003335 4889C6                          mov rsi, rax
  4480 00003338 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  4481 0000333C 498B5901                        mov rbx, qword [r9 + 1] ; num2
  4482 00003340 4899                            cqo
  4483 00003342 48F7EB                          imul rbx
  4484 00003345 4889C7                          mov rdi, rax
  4485 00003348 E804000000                      call normalize_fraction
  4486 0000334D C9                              leave
  4487 0000334E C22000                          ret AND_KILL_FRAME(2)
  4488                                          
  4489                                  normalize_fraction:
  4490 00003351 56                              push rsi
  4491 00003352 57                              push rdi
  4492 00003353 E859000000                      call gcd
  4493 00003358 4889C3                          mov rbx, rax
  4494 0000335B 58                              pop rax
  4495 0000335C 4899                            cqo
  4496 0000335E 48F7FB                          idiv rbx
  4497 00003361 4989C0                          mov r8, rax
  4498 00003364 58                              pop rax
  4499 00003365 4899                            cqo
  4500 00003367 48F7FB                          idiv rbx
  4501 0000336A 4989C1                          mov r9, rax
  4502 0000336D 4983F900                        cmp r9, 0
  4503 00003371 741C                            je .L_zero
  4504 00003373 4983F801                        cmp r8, 1
  4505 00003377 7421                            je .L_int
  4506 00003379 BF11000000                      mov rdi, (1 + 8 + 8)
  4507 0000337E E827EBFFFF                      call malloc
  4508 00003383 C60012                          mov byte [rax], T_fraction
  4509 00003386 4C894801                        mov qword [rax + 1], r9
  4510 0000338A 4C894009                        mov qword [rax + 1 + 8], r8
  4511 0000338E C3                              ret
  4512                                  .L_zero:
  4513 0000338F BF00000000                      mov rdi, 0
  4514 00003394 E831070000                      call make_integer
  4515 00003399 C3                              ret
  4516                                  .L_int:
  4517 0000339A 4C89CF                          mov rdi, r9
  4518 0000339D E828070000                      call make_integer
  4519 000033A2 C3                              ret
  4520                                  
  4521                                  iabs:
  4522 000033A3 4889F8                          mov rax, rdi
  4523 000033A6 4883F800                        cmp rax, 0
  4524 000033AA 7C01                            jl .Lneg
  4525 000033AC C3                              ret
  4526                                  .Lneg:
  4527 000033AD 48F7D8                          neg rax
  4528 000033B0 C3                              ret
  4529                                  
  4530                                  gcd:
  4531 000033B1 E8EDFFFFFF                      call iabs
  4532 000033B6 4889C3                          mov rbx, rax
  4533 000033B9 4889F7                          mov rdi, rsi
  4534 000033BC E8E2FFFFFF                      call iabs
  4535 000033C1 4883F800                        cmp rax, 0
  4536 000033C5 7502                            jne .L0
  4537 000033C7 4893                            xchg rax, rbx
  4538                                  .L0:
  4539 000033C9 4883FB00                        cmp rbx, 0
  4540 000033CD 740C                            je .L1
  4541 000033CF 4899                            cqo
  4542 000033D1 48F7F3                          div rbx
  4543 000033D4 4889D0                          mov rax, rdx
  4544 000033D7 4893                            xchg rax, rbx
  4545 000033D9 EBEE                            jmp .L0
  4546                                  .L1:
  4547 000033DB C3                              ret
  4548                                  
  4549                                  L_code_ptr_error:
  4550 000033DC C8000000                        enter 0, 0
  4551 000033E0 48837D1802                      cmp COUNT, 2
  4552 000033E5 0F85C5070000                    jne L_error_arg_count_2
  4553 000033EB 488B7520                        mov rsi, PARAM(0)
  4554                                          assert_interned_symbol(rsi)
    53 000033EF 803E41              <1>  cmp byte [%1], %2
    54 000033F2 0F8557080000        <1>  jne L_error_incorrect_type
  4555 000033F8 488B7528                        mov rsi, PARAM(1)
  4556                                          assert_string(rsi)
    53 000033FC 803E03              <1>  cmp byte [%1], %2
    54 000033FF 0F854A080000        <1>  jne L_error_incorrect_type
  4557 00003405 48BF-                           mov rdi, fmt_scheme_error_part_1
  4557 00003407 [FC0A000000000000] 
  4558 0000340F B800000000                      mov rax, 0
  4559                                          ENTER
    44 00003414 C8000000            <1>  enter 0, 0
    45 00003418 4883E4F0            <1>  and rsp, ~15
  4560 0000341C E8(00000000)                    call printf
  4561                                          LEAVE
    49 00003421 C9                  <1>  leave
  4562 00003422 488B7D20                        mov rdi, PARAM(0)
  4563 00003426 E800EDFFFF                      call print_sexpr
  4564 0000342B 48BF-                           mov rdi, fmt_scheme_error_part_2
  4564 0000342D [100B000000000000] 
  4565 00003435 B800000000                      mov rax, 0
  4566                                          ENTER
    44 0000343A C8000000            <1>  enter 0, 0
    45 0000343E 4883E4F0            <1>  and rsp, ~15
  4567 00003442 E8(00000000)                    call printf
  4568                                          LEAVE
    49 00003447 C9                  <1>  leave
  4569 00003448 488B4528                        mov rax, PARAM(1)       ; sob_string
  4570 0000344C BE01000000                      mov rsi, 1              ; size = 1 byte
  4571 00003451 488B5001                        mov rdx, qword [rax + 1] ; length
  4572 00003455 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  4573 00003459 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  4574                                  	ENTER
    44 00003461 C8000000            <1>  enter 0, 0
    45 00003465 4883E4F0            <1>  and rsp, ~15
  4575 00003469 E8(00000000)                    call fwrite
  4576                                  	LEAVE
    49 0000346E C9                  <1>  leave
  4577 0000346F 48BF-                           mov rdi, fmt_scheme_error_part_3
  4577 00003471 [520B000000000000] 
  4578 00003479 B800000000                      mov rax, 0
  4579                                          ENTER
    44 0000347E C8000000            <1>  enter 0, 0
    45 00003482 4883E4F0            <1>  and rsp, ~15
  4580 00003486 E8(00000000)                    call printf
  4581                                          LEAVE
    49 0000348B C9                  <1>  leave
  4582 0000348C 48C7C0F7FFFFFF                  mov rax, -9
  4583 00003493 E8(00000000)                    call exit
  4584                                  
  4585                                  L_code_ptr_raw_less_than_rr:
  4586 00003498 C8000000                        enter 0, 0
  4587 0000349C 48837D1802                      cmp COUNT, 2
  4588 000034A1 0F8509070000                    jne L_error_arg_count_2
  4589 000034A7 488B7520                        mov rsi, PARAM(0)
  4590                                          assert_real(rsi)
    53 000034AB 803E13              <1>  cmp byte [%1], %2
    54 000034AE 0F859B070000        <1>  jne L_error_incorrect_type
  4591 000034B4 488B7D28                        mov rdi, PARAM(1)
  4592                                          assert_real(rdi)
    53 000034B8 803F13              <1>  cmp byte [%1], %2
    54 000034BB 0F858E070000        <1>  jne L_error_incorrect_type
  4593 000034C1 F20F104601                      movsd xmm0, qword [rsi + 1]
  4594 000034C6 F20F104F01                      movsd xmm1, qword [rdi + 1]
  4595 000034CB 660F2FC1                        comisd xmm0, xmm1
  4596 000034CF 730C                            jae .L_false
  4597 000034D1 48B8-                           mov rax, sob_boolean_true
  4597 000034D3 [0300000000000000] 
  4598 000034DB EB0A                            jmp .L_exit
  4599                                  .L_false:
  4600 000034DD 48B8-                           mov rax, sob_boolean_false
  4600 000034DF [0200000000000000] 
  4601                                  .L_exit:
  4602 000034E7 C9                              leave
  4603 000034E8 C22000                          ret AND_KILL_FRAME(2)
  4604                                          
  4605                                  L_code_ptr_raw_less_than_zz:
  4606 000034EB C8000000                	enter 0, 0
  4607 000034EF 48837D1802              	cmp COUNT, 2
  4608 000034F4 0F85B6060000            	jne L_error_arg_count_2
  4609 000034FA 4C8B4520                	mov r8, PARAM(0)
  4610                                  	assert_integer(r8)
    53 000034FE 41803811            <1>  cmp byte [%1], %2
    54 00003502 0F8547070000        <1>  jne L_error_incorrect_type
  4611 00003508 4C8B4D28                	mov r9, PARAM(1)
  4612                                  	assert_integer(r9)
    53 0000350C 41803911            <1>  cmp byte [%1], %2
    54 00003510 0F8539070000        <1>  jne L_error_incorrect_type
  4613 00003516 498B7801                	mov rdi, qword [r8 + 1]
  4614 0000351A 493B7901                	cmp rdi, qword [r9 + 1]
  4615 0000351E 7D0C                    	jge .L_false
  4616 00003520 48B8-                   	mov rax, sob_boolean_true
  4616 00003522 [0300000000000000] 
  4617 0000352A EB0A                    	jmp .L_exit
  4618                                  .L_false:
  4619 0000352C 48B8-                   	mov rax, sob_boolean_false
  4619 0000352E [0200000000000000] 
  4620                                  .L_exit:
  4621 00003536 C9                      	leave
  4622 00003537 C22000                  	ret AND_KILL_FRAME(2)
  4623                                  
  4624                                  L_code_ptr_raw_less_than_qq:
  4625 0000353A C8000000                        enter 0, 0
  4626 0000353E 48837D1802                      cmp COUNT, 2
  4627 00003543 0F8567060000                    jne L_error_arg_count_2
  4628 00003549 488B7520                        mov rsi, PARAM(0)
  4629                                          assert_fraction(rsi)
    53 0000354D 803E12              <1>  cmp byte [%1], %2
    54 00003550 0F85F9060000        <1>  jne L_error_incorrect_type
  4630 00003556 488B7D28                        mov rdi, PARAM(1)
  4631                                          assert_fraction(rdi)
    53 0000355A 803F12              <1>  cmp byte [%1], %2
    54 0000355D 0F85EC060000        <1>  jne L_error_incorrect_type
  4632 00003563 488B4601                        mov rax, qword [rsi + 1] ; num1
  4633 00003567 4899                            cqo
  4634 00003569 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  4635 0000356D 4889C1                          mov rcx, rax
  4636 00003570 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  4637 00003574 4899                            cqo
  4638 00003576 48F76F01                        imul qword [rdi + 1]          ; num2
  4639 0000357A 4829C1                          sub rcx, rax
  4640 0000357D 7D0C                            jge .L_false
  4641 0000357F 48B8-                           mov rax, sob_boolean_true
  4641 00003581 [0300000000000000] 
  4642 00003589 EB0A                            jmp .L_exit
  4643                                  .L_false:
  4644 0000358B 48B8-                           mov rax, sob_boolean_false
  4644 0000358D [0200000000000000] 
  4645                                  .L_exit:
  4646 00003595 C9                              leave
  4647 00003596 C22000                          ret AND_KILL_FRAME(2)
  4648                                  
  4649                                  L_code_ptr_raw_equal_rr:
  4650 00003599 C8000000                        enter 0, 0
  4651 0000359D 48837D1802                      cmp COUNT, 2
  4652 000035A2 0F8508060000                    jne L_error_arg_count_2
  4653 000035A8 488B7520                        mov rsi, PARAM(0)
  4654                                          assert_real(rsi)
    53 000035AC 803E13              <1>  cmp byte [%1], %2
    54 000035AF 0F859A060000        <1>  jne L_error_incorrect_type
  4655 000035B5 488B7D28                        mov rdi, PARAM(1)
  4656                                          assert_real(rdi)
    53 000035B9 803F13              <1>  cmp byte [%1], %2
    54 000035BC 0F858D060000        <1>  jne L_error_incorrect_type
  4657 000035C2 F20F104601                      movsd xmm0, qword [rsi + 1]
  4658 000035C7 F20F104F01                      movsd xmm1, qword [rdi + 1]
  4659 000035CC 660F2FC1                        comisd xmm0, xmm1
  4660 000035D0 750C                            jne .L_false
  4661 000035D2 48B8-                           mov rax, sob_boolean_true
  4661 000035D4 [0300000000000000] 
  4662 000035DC EB0A                            jmp .L_exit
  4663                                  .L_false:
  4664 000035DE 48B8-                           mov rax, sob_boolean_false
  4664 000035E0 [0200000000000000] 
  4665                                  .L_exit:
  4666 000035E8 C9                              leave
  4667 000035E9 C22000                          ret AND_KILL_FRAME(2)
  4668                                          
  4669                                  L_code_ptr_raw_equal_zz:
  4670 000035EC C8000000                	enter 0, 0
  4671 000035F0 48837D1802              	cmp COUNT, 2
  4672 000035F5 0F85B5050000            	jne L_error_arg_count_2
  4673 000035FB 4C8B4520                	mov r8, PARAM(0)
  4674                                  	assert_integer(r8)
    53 000035FF 41803811            <1>  cmp byte [%1], %2
    54 00003603 0F8546060000        <1>  jne L_error_incorrect_type
  4675 00003609 4C8B4D28                	mov r9, PARAM(1)
  4676                                  	assert_integer(r9)
    53 0000360D 41803911            <1>  cmp byte [%1], %2
    54 00003611 0F8538060000        <1>  jne L_error_incorrect_type
  4677 00003617 498B7801                	mov rdi, qword [r8 + 1]
  4678 0000361B 493B7901                	cmp rdi, qword [r9 + 1]
  4679 0000361F 750C                    	jne .L_false
  4680 00003621 48B8-                   	mov rax, sob_boolean_true
  4680 00003623 [0300000000000000] 
  4681 0000362B EB0A                    	jmp .L_exit
  4682                                  .L_false:
  4683 0000362D 48B8-                   	mov rax, sob_boolean_false
  4683 0000362F [0200000000000000] 
  4684                                  .L_exit:
  4685 00003637 C9                      	leave
  4686 00003638 C22000                  	ret AND_KILL_FRAME(2)
  4687                                  
  4688                                  L_code_ptr_raw_equal_qq:
  4689 0000363B C8000000                        enter 0, 0
  4690 0000363F 48837D1802                      cmp COUNT, 2
  4691 00003644 0F8566050000                    jne L_error_arg_count_2
  4692 0000364A 488B7520                        mov rsi, PARAM(0)
  4693                                          assert_fraction(rsi)
    53 0000364E 803E12              <1>  cmp byte [%1], %2
    54 00003651 0F85F8050000        <1>  jne L_error_incorrect_type
  4694 00003657 488B7D28                        mov rdi, PARAM(1)
  4695                                          assert_fraction(rdi)
    53 0000365B 803F12              <1>  cmp byte [%1], %2
    54 0000365E 0F85EB050000        <1>  jne L_error_incorrect_type
  4696 00003664 488B4601                        mov rax, qword [rsi + 1] ; num1
  4697 00003668 4899                            cqo
  4698 0000366A 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  4699 0000366E 4889C1                          mov rcx, rax
  4700 00003671 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  4701 00003675 4899                            cqo
  4702 00003677 48F76F01                        imul qword [rdi + 1]          ; num2
  4703 0000367B 4829C1                          sub rcx, rax
  4704 0000367E 750C                            jne .L_false
  4705 00003680 48B8-                           mov rax, sob_boolean_true
  4705 00003682 [0300000000000000] 
  4706 0000368A EB0A                            jmp .L_exit
  4707                                  .L_false:
  4708 0000368C 48B8-                           mov rax, sob_boolean_false
  4708 0000368E [0200000000000000] 
  4709                                  .L_exit:
  4710 00003696 C9                              leave
  4711 00003697 C22000                          ret AND_KILL_FRAME(2)
  4712                                  
  4713                                  L_code_ptr_quotient:
  4714 0000369A C8000000                        enter 0, 0
  4715 0000369E 48837D1802                      cmp COUNT, 2
  4716 000036A3 0F8507050000                    jne L_error_arg_count_2
  4717 000036A9 488B7520                        mov rsi, PARAM(0)
  4718                                          assert_integer(rsi)
    53 000036AD 803E11              <1>  cmp byte [%1], %2
    54 000036B0 0F8599050000        <1>  jne L_error_incorrect_type
  4719 000036B6 488B7D28                        mov rdi, PARAM(1)
  4720                                          assert_integer(rdi)
    53 000036BA 803F11              <1>  cmp byte [%1], %2
    54 000036BD 0F858C050000        <1>  jne L_error_incorrect_type
  4721 000036C3 488B4601                        mov rax, qword [rsi + 1]
  4722 000036C7 488B5F01                        mov rbx, qword [rdi + 1]
  4723 000036CB 4883FB00                        cmp rbx, 0
  4724 000036CF 0F84AB050000                    je L_error_division_by_zero
  4725 000036D5 4899                            cqo
  4726 000036D7 48F7FB                          idiv rbx
  4727 000036DA 4889C7                          mov rdi, rax
  4728 000036DD E8E8030000                      call make_integer
  4729 000036E2 C9                              leave
  4730 000036E3 C22000                          ret AND_KILL_FRAME(2)
  4731                                          
  4732                                  L_code_ptr_remainder:
  4733 000036E6 C8000000                        enter 0, 0
  4734 000036EA 48837D1802                      cmp COUNT, 2
  4735 000036EF 0F85BB040000                    jne L_error_arg_count_2
  4736 000036F5 488B7520                        mov rsi, PARAM(0)
  4737                                          assert_integer(rsi)
    53 000036F9 803E11              <1>  cmp byte [%1], %2
    54 000036FC 0F854D050000        <1>  jne L_error_incorrect_type
  4738 00003702 488B7D28                        mov rdi, PARAM(1)
  4739                                          assert_integer(rdi)
    53 00003706 803F11              <1>  cmp byte [%1], %2
    54 00003709 0F8540050000        <1>  jne L_error_incorrect_type
  4740 0000370F 488B4601                        mov rax, qword [rsi + 1]
  4741 00003713 488B5F01                        mov rbx, qword [rdi + 1]
  4742 00003717 4883FB00                        cmp rbx, 0
  4743 0000371B 0F845F050000                    je L_error_division_by_zero
  4744 00003721 4899                            cqo
  4745 00003723 48F7FB                          idiv rbx
  4746 00003726 4889D7                          mov rdi, rdx
  4747 00003729 E89C030000                      call make_integer
  4748 0000372E C9                              leave
  4749 0000372F C22000                          ret AND_KILL_FRAME(2)
  4750                                  
  4751                                  L_code_ptr_set_car:
  4752 00003732 C8000000                        enter 0, 0
  4753 00003736 48837D1802                      cmp COUNT, 2
  4754 0000373B 0F856F040000                    jne L_error_arg_count_2
  4755 00003741 488B4520                        mov rax, PARAM(0)
  4756                                          assert_pair(rax)
    53 00003745 803821              <1>  cmp byte [%1], %2
    54 00003748 0F8501050000        <1>  jne L_error_incorrect_type
  4757 0000374E 488B5D28                        mov rbx, PARAM(1)
  4758 00003752 48895801                        mov SOB_PAIR_CAR(rax), rbx
  4759 00003756 48B8-                           mov rax, sob_void
  4759 00003758 [0000000000000000] 
  4760 00003760 C9                              leave
  4761 00003761 C22000                          ret AND_KILL_FRAME(2)
  4762                                  
  4763                                  L_code_ptr_set_cdr:
  4764 00003764 C8000000                        enter 0, 0
  4765 00003768 48837D1802                      cmp COUNT, 2
  4766 0000376D 0F853D040000                    jne L_error_arg_count_2
  4767 00003773 488B4520                        mov rax, PARAM(0)
  4768                                          assert_pair(rax)
    53 00003777 803821              <1>  cmp byte [%1], %2
    54 0000377A 0F85CF040000        <1>  jne L_error_incorrect_type
  4769 00003780 488B5D28                        mov rbx, PARAM(1)
  4770 00003784 48895809                        mov SOB_PAIR_CDR(rax), rbx
  4771 00003788 48B8-                           mov rax, sob_void
  4771 0000378A [0000000000000000] 
  4772 00003792 C9                              leave
  4773 00003793 C22000                          ret AND_KILL_FRAME(2)
  4774                                  
  4775                                  L_code_ptr_string_ref:
  4776 00003796 C8000000                        enter 0, 0
  4777 0000379A 48837D1802                      cmp COUNT, 2
  4778 0000379F 0F850B040000                    jne L_error_arg_count_2
  4779 000037A5 488B7D20                        mov rdi, PARAM(0)
  4780                                          assert_string(rdi)
    53 000037A9 803F03              <1>  cmp byte [%1], %2
    54 000037AC 0F859D040000        <1>  jne L_error_incorrect_type
  4781 000037B2 488B7528                        mov rsi, PARAM(1)
  4782                                          assert_integer(rsi)
    53 000037B6 803E11              <1>  cmp byte [%1], %2
    54 000037B9 0F8590040000        <1>  jne L_error_incorrect_type
  4783 000037BF 488B5701                        mov rdx, qword [rdi + 1]
  4784 000037C3 488B4E01                        mov rcx, qword [rsi + 1]
  4785 000037C7 4839D1                          cmp rcx, rdx
  4786 000037CA 0F8D14030000                    jge L_error_integer_range
  4787 000037D0 4883F900                        cmp rcx, 0
  4788 000037D4 0F8C0A030000                    jl L_error_integer_range
  4789 000037DA 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  4790 000037DE BF02000000                      mov rdi, 2
  4791 000037E3 E8C2E6FFFF                      call malloc
  4792 000037E8 C60002                          mov byte [rax], T_char
  4793 000037EB 885801                          mov byte [rax + 1], bl
  4794 000037EE C9                              leave
  4795 000037EF C22000                          ret AND_KILL_FRAME(2)
  4796                                  
  4797                                  L_code_ptr_vector_ref:
  4798 000037F2 C8000000                        enter 0, 0
  4799 000037F6 48837D1802                      cmp COUNT, 2
  4800 000037FB 0F85AF030000                    jne L_error_arg_count_2
  4801 00003801 488B7D20                        mov rdi, PARAM(0)
  4802                                          assert_vector(rdi)
    53 00003805 803F22              <1>  cmp byte [%1], %2
    54 00003808 0F8541040000        <1>  jne L_error_incorrect_type
  4803 0000380E 488B7528                        mov rsi, PARAM(1)
  4804                                          assert_integer(rsi)
    53 00003812 803E11              <1>  cmp byte [%1], %2
    54 00003815 0F8534040000        <1>  jne L_error_incorrect_type
  4805 0000381B 488B5701                        mov rdx, qword [rdi + 1]
  4806 0000381F 488B4E01                        mov rcx, qword [rsi + 1]
  4807 00003823 4839D1                          cmp rcx, rdx
  4808 00003826 0F8DB8020000                    jge L_error_integer_range
  4809 0000382C 4883F900                        cmp rcx, 0
  4810 00003830 0F8CAE020000                    jl L_error_integer_range
  4811 00003836 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  4812 0000383B C9                              leave
  4813 0000383C C22000                          ret AND_KILL_FRAME(2)
  4814                                  
  4815                                  L_code_ptr_vector_set:
  4816 0000383F C8000000                        enter 0, 0
  4817 00003843 48837D1803                      cmp COUNT, 3
  4818 00003848 0F85CC030000                    jne L_error_arg_count_3
  4819 0000384E 488B7D20                        mov rdi, PARAM(0)
  4820                                          assert_vector(rdi)
    53 00003852 803F22              <1>  cmp byte [%1], %2
    54 00003855 0F85F4030000        <1>  jne L_error_incorrect_type
  4821 0000385B 488B7528                        mov rsi, PARAM(1)
  4822                                          assert_integer(rsi)
    53 0000385F 803E11              <1>  cmp byte [%1], %2
    54 00003862 0F85E7030000        <1>  jne L_error_incorrect_type
  4823 00003868 488B5701                        mov rdx, qword [rdi + 1]
  4824 0000386C 488B4E01                        mov rcx, qword [rsi + 1]
  4825 00003870 4839D1                          cmp rcx, rdx
  4826 00003873 0F8D6B020000                    jge L_error_integer_range
  4827 00003879 4883F900                        cmp rcx, 0
  4828 0000387D 0F8C61020000                    jl L_error_integer_range
  4829 00003883 488B4530                        mov rax, PARAM(2)
  4830 00003887 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  4831 0000388C 48B8-                           mov rax, sob_void
  4831 0000388E [0000000000000000] 
  4832 00003896 C9                              leave
  4833 00003897 C22800                          ret AND_KILL_FRAME(3)
  4834                                  
  4835                                  L_code_ptr_string_set:
  4836 0000389A C8000000                        enter 0, 0
  4837 0000389E 48837D1803                      cmp COUNT, 3
  4838 000038A3 0F8571030000                    jne L_error_arg_count_3
  4839 000038A9 488B7D20                        mov rdi, PARAM(0)
  4840                                          assert_string(rdi)
    53 000038AD 803F03              <1>  cmp byte [%1], %2
    54 000038B0 0F8599030000        <1>  jne L_error_incorrect_type
  4841 000038B6 488B7528                        mov rsi, PARAM(1)
  4842                                          assert_integer(rsi)
    53 000038BA 803E11              <1>  cmp byte [%1], %2
    54 000038BD 0F858C030000        <1>  jne L_error_incorrect_type
  4843 000038C3 488B5701                        mov rdx, qword [rdi + 1]
  4844 000038C7 488B4E01                        mov rcx, qword [rsi + 1]
  4845 000038CB 4839D1                          cmp rcx, rdx
  4846 000038CE 0F8D10020000                    jge L_error_integer_range
  4847 000038D4 4883F900                        cmp rcx, 0
  4848 000038D8 0F8C06020000                    jl L_error_integer_range
  4849 000038DE 488B4530                        mov rax, PARAM(2)
  4850                                          assert_char(rax)
    53 000038E2 803802              <1>  cmp byte [%1], %2
    54 000038E5 0F8564030000        <1>  jne L_error_incorrect_type
  4851 000038EB 8A4001                          mov al, byte [rax + 1]
  4852 000038EE 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  4853 000038F2 48B8-                           mov rax, sob_void
  4853 000038F4 [0000000000000000] 
  4854 000038FC C9                              leave
  4855 000038FD C22800                          ret AND_KILL_FRAME(3)
  4856                                  
  4857                                  L_code_ptr_make_vector:
  4858 00003900 C8000000                        enter 0, 0
  4859 00003904 48837D1802                      cmp COUNT, 2
  4860 00003909 0F85A1020000                    jne L_error_arg_count_2
  4861 0000390F 488B4D20                        mov rcx, PARAM(0)
  4862                                          assert_integer(rcx)
    53 00003913 803911              <1>  cmp byte [%1], %2
    54 00003916 0F8533030000        <1>  jne L_error_incorrect_type
  4863 0000391C 488B4901                        mov rcx, qword [rcx + 1]
  4864 00003920 4883F900                        cmp rcx, 0
  4865 00003924 0F8CBA010000                    jl L_error_integer_range
  4866 0000392A 488B5528                        mov rdx, PARAM(1)
  4867 0000392E 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  4868 00003936 E86FE5FFFF                      call malloc
  4869 0000393B C60022                          mov byte [rax], T_vector
  4870 0000393E 48894801                        mov qword [rax + 1], rcx
  4871 00003942 41B800000000                    mov r8, 0
  4872                                  .L0:
  4873 00003948 4939C8                          cmp r8, rcx
  4874 0000394B 740A                            je .L1
  4875 0000394D 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  4876 00003952 49FFC0                          inc r8
  4877 00003955 EBF1                            jmp .L0
  4878                                  .L1:
  4879 00003957 C9                              leave
  4880 00003958 C22000                          ret AND_KILL_FRAME(2)
  4881                                          
  4882                                  L_code_ptr_make_string:
  4883 0000395B C8000000                        enter 0, 0
  4884 0000395F 48837D1802                      cmp COUNT, 2
  4885 00003964 0F8546020000                    jne L_error_arg_count_2
  4886 0000396A 488B4D20                        mov rcx, PARAM(0)
  4887                                          assert_integer(rcx)
    53 0000396E 803911              <1>  cmp byte [%1], %2
    54 00003971 0F85D8020000        <1>  jne L_error_incorrect_type
  4888 00003977 488B4901                        mov rcx, qword [rcx + 1]
  4889 0000397B 4883F900                        cmp rcx, 0
  4890 0000397F 0F8C5F010000                    jl L_error_integer_range
  4891 00003985 488B5528                        mov rdx, PARAM(1)
  4892                                          assert_char(rdx)
    53 00003989 803A02              <1>  cmp byte [%1], %2
    54 0000398C 0F85BD020000        <1>  jne L_error_incorrect_type
  4893 00003992 8A5201                          mov dl, byte [rdx + 1]
  4894 00003995 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  4895 00003999 E80CE5FFFF                      call malloc
  4896 0000399E C60003                          mov byte [rax], T_string
  4897 000039A1 48894801                        mov qword [rax + 1], rcx
  4898 000039A5 41B800000000                    mov r8, 0
  4899                                  .L0:
  4900 000039AB 4939C8                          cmp r8, rcx
  4901 000039AE 740A                            je .L1
  4902 000039B0 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  4903 000039B5 49FFC0                          inc r8
  4904 000039B8 EBF1                            jmp .L0
  4905                                  .L1:
  4906 000039BA C9                              leave
  4907 000039BB C22000                          ret AND_KILL_FRAME(2)
  4908                                  
  4909                                  L_code_ptr_numerator:
  4910 000039BE C8000000                        enter 0, 0
  4911 000039C2 48837D1801                      cmp COUNT, 1
  4912 000039C7 0F85AE010000                    jne L_error_arg_count_1
  4913 000039CD 488B4520                        mov rax, PARAM(0)
  4914                                          assert_fraction(rax)
    53 000039D1 803812              <1>  cmp byte [%1], %2
    54 000039D4 0F8575020000        <1>  jne L_error_incorrect_type
  4915 000039DA 488B7801                        mov rdi, qword [rax + 1]
  4916 000039DE E8E7000000                      call make_integer
  4917 000039E3 C9                              leave
  4918 000039E4 C21800                          ret AND_KILL_FRAME(1)
  4919                                          
  4920                                  L_code_ptr_denominator:
  4921 000039E7 C8000000                        enter 0, 0
  4922 000039EB 48837D1801                      cmp COUNT, 1
  4923 000039F0 0F8585010000                    jne L_error_arg_count_1
  4924 000039F6 488B4520                        mov rax, PARAM(0)
  4925                                          assert_fraction(rax)
    53 000039FA 803812              <1>  cmp byte [%1], %2
    54 000039FD 0F854C020000        <1>  jne L_error_incorrect_type
  4926 00003A03 488B7809                        mov rdi, qword [rax + 1 + 8]
  4927 00003A07 E8BE000000                      call make_integer
  4928 00003A0C C9                              leave
  4929 00003A0D C21800                          ret AND_KILL_FRAME(1)
  4930                                  
  4931                                  L_code_ptr_is_eq:
  4932 00003A10 C8000000                	enter 0, 0
  4933 00003A14 48837D1802              	cmp COUNT, 2
  4934 00003A19 0F8591010000            	jne L_error_arg_count_2
  4935 00003A1F 488B7D20                	mov rdi, PARAM(0)
  4936 00003A23 488B7528                	mov rsi, PARAM(1)
  4937 00003A27 4839F7                  	cmp rdi, rsi
  4938 00003A2A 746C                    	je .L_eq_true
  4939 00003A2C 8A17                    	mov dl, byte [rdi]
  4940 00003A2E 3A16                    	cmp dl, byte [rsi]
  4941 00003A30 7572                    	jne .L_eq_false
  4942 00003A32 80FA02                  	cmp dl, T_char
  4943 00003A35 7459                    	je .L_char
  4944 00003A37 80FA41                  	cmp dl, T_interned_symbol
  4945 00003A3A 7440                    	je .L_interned_symbol
  4946 00003A3C 80FA42                          cmp dl, T_uninterned_symbol
  4947 00003A3F 7443                            je .L_uninterned_symbol
  4948 00003A41 80FA13                  	cmp dl, T_real
  4949 00003A44 742E                    	je .L_real
  4950 00003A46 80FA12                  	cmp dl, T_fraction
  4951 00003A49 7413                    	je .L_fraction
  4952 00003A4B 80FA11                          cmp dl, T_integer
  4953 00003A4E 7402                            je .L_integer
  4954 00003A50 EB52                    	jmp .L_eq_false
  4955                                  .L_integer:
  4956 00003A52 488B4601                        mov rax, qword [rsi + 1]
  4957 00003A56 483B4701                        cmp rax, qword [rdi + 1]
  4958 00003A5A 7548                            jne .L_eq_false
  4959 00003A5C EB3A                            jmp .L_eq_true
  4960                                  .L_fraction:
  4961 00003A5E 488B4601                	mov rax, qword [rsi + 1]
  4962 00003A62 483B4701                	cmp rax, qword [rdi + 1]
  4963 00003A66 753C                    	jne .L_eq_false
  4964 00003A68 488B4609                	mov rax, qword [rsi + 1 + 8]
  4965 00003A6C 483B4709                	cmp rax, qword [rdi + 1 + 8]
  4966 00003A70 7532                    	jne .L_eq_false
  4967 00003A72 EB24                    	jmp .L_eq_true
  4968                                  .L_real:
  4969 00003A74 488B4601                	mov rax, qword [rsi + 1]
  4970 00003A78 483B4701                	cmp rax, qword [rdi + 1]
  4971                                  .L_interned_symbol:
  4972                                  	; never reached, because interned_symbols are static!
  4973                                  	; but I'm keeping it in case, I'll ever change
  4974                                  	; the implementation
  4975 00003A7C 488B4601                	mov rax, qword [rsi + 1]
  4976 00003A80 483B4701                	cmp rax, qword [rdi + 1]
  4977                                  .L_uninterned_symbol:
  4978 00003A84 4C8B4701                        mov r8, qword [rdi + 1]
  4979 00003A88 4C3B4601                        cmp r8, qword [rsi + 1]
  4980 00003A8C 7516                            jne .L_eq_false
  4981 00003A8E EB08                            jmp .L_eq_true
  4982                                  .L_char:
  4983 00003A90 8A5E01                  	mov bl, byte [rsi + 1]
  4984 00003A93 3A5F01                  	cmp bl, byte [rdi + 1]
  4985 00003A96 750C                    	jne .L_eq_false
  4986                                  .L_eq_true:
  4987 00003A98 48B8-                   	mov rax, sob_boolean_true
  4987 00003A9A [0300000000000000] 
  4988 00003AA2 EB0A                    	jmp .L_eq_exit
  4989                                  .L_eq_false:
  4990 00003AA4 48B8-                   	mov rax, sob_boolean_false
  4990 00003AA6 [0200000000000000] 
  4991                                  .L_eq_exit:
  4992 00003AAE C9                      	leave
  4993 00003AAF C22000                  	ret AND_KILL_FRAME(2)
  4994                                  
  4995                                  make_real:
  4996 00003AB2 C8000000                        enter 0, 0
  4997 00003AB6 BF09000000                      mov rdi, (1 + 8)
  4998 00003ABB E8EAE3FFFF                      call malloc
  4999 00003AC0 C60013                          mov byte [rax], T_real
  5000 00003AC3 F20F114001                      movsd qword [rax + 1], xmm0
  5001 00003AC8 C9                              leave 
  5002 00003AC9 C3                              ret
  5003                                          
  5004                                  make_integer:
  5005 00003ACA C8000000                        enter 0, 0
  5006 00003ACE 4889FE                          mov rsi, rdi
  5007 00003AD1 BF09000000                      mov rdi, (1 + 8)
  5008 00003AD6 E8CFE3FFFF                      call malloc
  5009 00003ADB C60011                          mov byte [rax], T_integer
  5010 00003ADE 48897001                        mov qword [rax + 1], rsi
  5011 00003AE2 C9                              leave
  5012 00003AE3 C3                              ret
  5013                                          
  5014                                  L_error_integer_range:
  5015 00003AE4 488B3C25[00000000]              mov rdi, qword [stderr]
  5016 00003AEC 48BE-                           mov rsi, fmt_integer_range
  5016 00003AEE [C90A000000000000] 
  5017 00003AF6 B800000000                      mov rax, 0
  5018                                          ENTER
    44 00003AFB C8000000            <1>  enter 0, 0
    45 00003AFF 4883E4F0            <1>  and rsp, ~15
  5019 00003B03 E8(00000000)                    call fprintf
  5020                                          LEAVE
    49 00003B08 C9                  <1>  leave
  5021 00003B09 48C7C0FBFFFFFF                  mov rax, -5
  5022 00003B10 E8(00000000)                    call exit
  5023                                  
  5024                                  L_error_arg_negative:
  5025 00003B15 488B3C25[00000000]              mov rdi, qword [stderr]
  5026 00003B1D 48BE-                           mov rsi, fmt_arg_negative
  5026 00003B1F [A109000000000000] 
  5027 00003B27 B800000000                      mov rax, 0
  5028                                          ENTER
    44 00003B2C C8000000            <1>  enter 0, 0
    45 00003B30 4883E4F0            <1>  and rsp, ~15
  5029 00003B34 E8(00000000)                    call fprintf
  5030                                          LEAVE
    49 00003B39 C9                  <1>  leave
  5031 00003B3A 48C7C0FDFFFFFF                  mov rax, -3
  5032 00003B41 E8(00000000)                    call exit
  5033                                  
  5034                                  L_error_arg_count_0:
  5035 00003B46 488B3C25[00000000]              mov rdi, qword [stderr]
  5036 00003B4E 48BE-                           mov rsi, fmt_arg_count_0
  5036 00003B50 [C709000000000000] 
  5037 00003B58 488B5518                        mov rdx, COUNT
  5038 00003B5C B800000000                      mov rax, 0
  5039                                          ENTER
    44 00003B61 C8000000            <1>  enter 0, 0
    45 00003B65 4883E4F0            <1>  and rsp, ~15
  5040 00003B69 E8(00000000)                    call fprintf
  5041                                          LEAVE
    49 00003B6E C9                  <1>  leave
  5042 00003B6F 48C7C0FDFFFFFF                  mov rax, -3
  5043 00003B76 E8(00000000)                    call exit
  5044                                  
  5045                                  L_error_arg_count_1:
  5046 00003B7B 488B3C25[00000000]              mov rdi, qword [stderr]
  5047 00003B83 48BE-                           mov rsi, fmt_arg_count_1
  5047 00003B85 [EF09000000000000] 
  5048 00003B8D 488B5518                        mov rdx, COUNT
  5049 00003B91 B800000000                      mov rax, 0
  5050                                          ENTER
    44 00003B96 C8000000            <1>  enter 0, 0
    45 00003B9A 4883E4F0            <1>  and rsp, ~15
  5051 00003B9E E8(00000000)                    call fprintf
  5052                                          LEAVE
    49 00003BA3 C9                  <1>  leave
  5053 00003BA4 48C7C0FDFFFFFF                  mov rax, -3
  5054 00003BAB E8(00000000)                    call exit
  5055                                  
  5056                                  L_error_arg_count_2:
  5057 00003BB0 488B3C25[00000000]              mov rdi, qword [stderr]
  5058 00003BB8 48BE-                           mov rsi, fmt_arg_count_2
  5058 00003BBA [550A000000000000] 
  5059 00003BC2 488B5518                        mov rdx, COUNT
  5060 00003BC6 B800000000                      mov rax, 0
  5061                                          ENTER
    44 00003BCB C8000000            <1>  enter 0, 0
    45 00003BCF 4883E4F0            <1>  and rsp, ~15
  5062 00003BD3 E8(00000000)                    call fprintf
  5063                                          LEAVE
    49 00003BD8 C9                  <1>  leave
  5064 00003BD9 48C7C0FDFFFFFF                  mov rax, -3
  5065 00003BE0 E8(00000000)                    call exit
  5066                                  
  5067                                  L_error_arg_count_12:
  5068 00003BE5 488B3C25[00000000]              mov rdi, qword [stderr]
  5069 00003BED 48BE-                           mov rsi, fmt_arg_count_12
  5069 00003BEF [150A000000000000] 
  5070 00003BF7 488B5518                        mov rdx, COUNT
  5071 00003BFB B800000000                      mov rax, 0
  5072                                          ENTER
    44 00003C00 C8000000            <1>  enter 0, 0
    45 00003C04 4883E4F0            <1>  and rsp, ~15
  5073 00003C08 E8(00000000)                    call fprintf
  5074                                          LEAVE
    49 00003C0D C9                  <1>  leave
  5075 00003C0E 48C7C0FDFFFFFF                  mov rax, -3
  5076 00003C15 E8(00000000)                    call exit
  5077                                  
  5078                                  L_error_arg_count_3:
  5079 00003C1A 488B3C25[00000000]              mov rdi, qword [stderr]
  5080 00003C22 48BE-                           mov rsi, fmt_arg_count_3
  5080 00003C24 [7C0A000000000000] 
  5081 00003C2C 488B5518                        mov rdx, COUNT
  5082 00003C30 B800000000                      mov rax, 0
  5083                                          ENTER
    44 00003C35 C8000000            <1>  enter 0, 0
    45 00003C39 4883E4F0            <1>  and rsp, ~15
  5084 00003C3D E8(00000000)                    call fprintf
  5085                                          LEAVE
    49 00003C42 C9                  <1>  leave
  5086 00003C43 48C7C0FDFFFFFF                  mov rax, -3
  5087 00003C4A E8(00000000)                    call exit
  5088                                          
  5089                                  L_error_incorrect_type:
  5090 00003C4F 488B3C25[00000000]              mov rdi, qword [stderr]
  5091 00003C57 48BE-                           mov rsi, fmt_type
  5091 00003C59 [A50A000000000000] 
  5092 00003C61 B800000000                      mov rax, 0
  5093                                          ENTER
    44 00003C66 C8000000            <1>  enter 0, 0
    45 00003C6A 4883E4F0            <1>  and rsp, ~15
  5094 00003C6E E8(00000000)                    call fprintf
  5095                                          LEAVE
    49 00003C73 C9                  <1>  leave
  5096 00003C74 48C7C0FCFFFFFF                  mov rax, -4
  5097 00003C7B E8(00000000)                    call exit
  5098                                  
  5099                                  L_error_division_by_zero:
  5100 00003C80 488B3C25[00000000]              mov rdi, qword [stderr]
  5101 00003C88 48BE-                           mov rsi, fmt_division_by_zero
  5101 00003C8A [E60A000000000000] 
  5102 00003C92 B800000000                      mov rax, 0
  5103                                          ENTER
    44 00003C97 C8000000            <1>  enter 0, 0
    45 00003C9B 4883E4F0            <1>  and rsp, ~15
  5104 00003C9F E8(00000000)                    call fprintf
  5105                                          LEAVE
    49 00003CA4 C9                  <1>  leave
  5106 00003CA5 48C7C0F8FFFFFF                  mov rax, -8
  5107 00003CAC E8(00000000)                    call exit
  5108                                  
  5109                                  section .data
  5110                                  gensym_count:
  5111 00000996 0000000000000000                dq 0
  5112                                  fmt_char:
  5113 0000099E 256300                          db `%c\0`
  5114                                  fmt_arg_negative:
  5115 000009A1 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
  5115 000009AA 7267756D656E742063-
  5115 000009B3 616E6E6F7420626520-
  5115 000009BC 6E656761746976652E-
  5115 000009C5 0A00               
  5116                                  fmt_arg_count_0:
  5117 000009C7 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  5117 000009D0 74696E67207A65726F-
  5117 000009D9 20617267756D656E74-
  5117 000009E2 732E20466F756E6420-
  5117 000009EB 25640A00           
  5118                                  fmt_arg_count_1:
  5119 000009EF 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  5119 000009F8 74696E67206F6E6520-
  5119 00000A01 617267756D656E742E-
  5119 00000A0A 20466F756E64202564-
  5119 00000A13 0A00               
  5120                                  fmt_arg_count_12:
  5121 00000A15 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  5121 00000A1E 74696E67206F6E6520-
  5121 00000A27 726571756972656420-
  5121 00000A30 616E64206F6E65206F-
  5121 00000A39 7074696F6E616C2061-
  5121 00000A42 7267756D656E742E20-
  5121 00000A4B 466F756E642025640A-
  5121 00000A54 00                 
  5122                                  fmt_arg_count_2:
  5123 00000A55 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  5123 00000A5E 74696E672074776F20-
  5123 00000A67 617267756D656E7473-
  5123 00000A70 2E20466F756E642025-
  5123 00000A79 640A00             
  5124                                  fmt_arg_count_3:
  5125 00000A7C 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  5125 00000A85 74696E672074687265-
  5125 00000A8E 6520617267756D656E-
  5125 00000A97 74732E20466F756E64-
  5125 00000AA0 2025640A00         
  5126                                  fmt_type:
  5127 00000AA5 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  5127 00000AAE 696F6E207061737365-
  5127 00000AB7 6420696E636F727265-
  5127 00000AC0 637420747970650A00 
  5128                                  fmt_integer_range:
  5129 00000AC9 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  5129 00000AD2 7265637420696E7465-
  5129 00000ADB 6765722072616E6765-
  5129 00000AE4 0A00               
  5130                                  fmt_division_by_zero:
  5131 00000AE6 212121204469766973-             db `!!! Division by zero\n\0`
  5131 00000AEF 696F6E206279207A65-
  5131 00000AF8 726F0A00           
  5132                                  fmt_scheme_error_part_1:
  5133 00000AFC 0A2121212054686520-             db `\n!!! The procedure \0`
  5133 00000B05 70726F636564757265-
  5133 00000B0E 2000               
  5134                                  fmt_scheme_error_part_2:
  5135 00000B10 2061736B656420746F-             db ` asked to terminate the program\n`
  5135 00000B19 207465726D696E6174-
  5135 00000B22 65207468652070726F-
  5135 00000B2B 6772616D0A         
  5136 00000B30 202020207769746820-             db `    with the following message:\n\n\0`
  5136 00000B39 74686520666F6C6C6F-
  5136 00000B42 77696E67206D657373-
  5136 00000B4B 6167653A0A0A00     
  5137                                  fmt_scheme_error_part_3:
  5138 00000B52 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  5138 00000B5B 210A0A00           
