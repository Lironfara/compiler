     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "boolean-false?"
   441 0000056E 0E00000000000000        	dq 14
   442 00000576 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   443 0000057E 66616C73653F            	db 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3F
   444                                  	; L_constants + 1412:
   445 00000584 03                      	db T_string	; "boolean-true?"
   446 00000585 0D00000000000000        	dq 13
   447 0000058D 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   448 00000595 747275653F              	db 0x74, 0x72, 0x75, 0x65, 0x3F
   449                                  	; L_constants + 1434:
   450 0000059A 03                      	db T_string	; "primitive?"
   451 0000059B 0A00000000000000        	dq 10
   452 000005A3 7072696D69746976        	db 0x70, 0x72, 0x69, 0x6D, 0x69, 0x74, 0x69, 0x76
   453 000005AB 653F                    	db 0x65, 0x3F
   454                                  	; L_constants + 1453:
   455 000005AD 03                      	db T_string	; "length"
   456 000005AE 0600000000000000        	dq 6
   457 000005B6 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   458                                  	; L_constants + 1468:
   459 000005BC 03                      	db T_string	; "make-list"
   460 000005BD 0900000000000000        	dq 9
   461 000005C5 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   462 000005CD 74                      	db 0x74
   463                                  	; L_constants + 1486:
   464 000005CE 03                      	db T_string	; "return"
   465 000005CF 0600000000000000        	dq 6
   466 000005D7 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
   467                                  	; L_constants + 1501:
   468 000005DD 03                      	db T_string	; "caar"
   469 000005DE 0400000000000000        	dq 4
   470 000005E6 63616172                	db 0x63, 0x61, 0x61, 0x72
   471                                  	; L_constants + 1514:
   472 000005EA 03                      	db T_string	; "cadr"
   473 000005EB 0400000000000000        	dq 4
   474 000005F3 63616472                	db 0x63, 0x61, 0x64, 0x72
   475                                  	; L_constants + 1527:
   476 000005F7 03                      	db T_string	; "cdar"
   477 000005F8 0400000000000000        	dq 4
   478 00000600 63646172                	db 0x63, 0x64, 0x61, 0x72
   479                                  	; L_constants + 1540:
   480 00000604 03                      	db T_string	; "cddr"
   481 00000605 0400000000000000        	dq 4
   482 0000060D 63646472                	db 0x63, 0x64, 0x64, 0x72
   483                                  	; L_constants + 1553:
   484 00000611 03                      	db T_string	; "caaar"
   485 00000612 0500000000000000        	dq 5
   486 0000061A 6361616172              	db 0x63, 0x61, 0x61, 0x61, 0x72
   487                                  	; L_constants + 1567:
   488 0000061F 03                      	db T_string	; "caadr"
   489 00000620 0500000000000000        	dq 5
   490 00000628 6361616472              	db 0x63, 0x61, 0x61, 0x64, 0x72
   491                                  	; L_constants + 1581:
   492 0000062D 03                      	db T_string	; "cadar"
   493 0000062E 0500000000000000        	dq 5
   494 00000636 6361646172              	db 0x63, 0x61, 0x64, 0x61, 0x72
   495                                  	; L_constants + 1595:
   496 0000063B 03                      	db T_string	; "caddr"
   497 0000063C 0500000000000000        	dq 5
   498 00000644 6361646472              	db 0x63, 0x61, 0x64, 0x64, 0x72
   499                                  	; L_constants + 1609:
   500 00000649 03                      	db T_string	; "cdaar"
   501 0000064A 0500000000000000        	dq 5
   502 00000652 6364616172              	db 0x63, 0x64, 0x61, 0x61, 0x72
   503                                  	; L_constants + 1623:
   504 00000657 03                      	db T_string	; "cdadr"
   505 00000658 0500000000000000        	dq 5
   506 00000660 6364616472              	db 0x63, 0x64, 0x61, 0x64, 0x72
   507                                  	; L_constants + 1637:
   508 00000665 03                      	db T_string	; "cddar"
   509 00000666 0500000000000000        	dq 5
   510 0000066E 6364646172              	db 0x63, 0x64, 0x64, 0x61, 0x72
   511                                  	; L_constants + 1651:
   512 00000673 03                      	db T_string	; "cdddr"
   513 00000674 0500000000000000        	dq 5
   514 0000067C 6364646472              	db 0x63, 0x64, 0x64, 0x64, 0x72
   515                                  	; L_constants + 1665:
   516 00000681 03                      	db T_string	; "caaaar"
   517 00000682 0600000000000000        	dq 6
   518 0000068A 636161616172            	db 0x63, 0x61, 0x61, 0x61, 0x61, 0x72
   519                                  	; L_constants + 1680:
   520 00000690 03                      	db T_string	; "caaadr"
   521 00000691 0600000000000000        	dq 6
   522 00000699 636161616472            	db 0x63, 0x61, 0x61, 0x61, 0x64, 0x72
   523                                  	; L_constants + 1695:
   524 0000069F 03                      	db T_string	; "caadar"
   525 000006A0 0600000000000000        	dq 6
   526 000006A8 636161646172            	db 0x63, 0x61, 0x61, 0x64, 0x61, 0x72
   527                                  	; L_constants + 1710:
   528 000006AE 03                      	db T_string	; "caaddr"
   529 000006AF 0600000000000000        	dq 6
   530 000006B7 636161646472            	db 0x63, 0x61, 0x61, 0x64, 0x64, 0x72
   531                                  	; L_constants + 1725:
   532 000006BD 03                      	db T_string	; "cadaar"
   533 000006BE 0600000000000000        	dq 6
   534 000006C6 636164616172            	db 0x63, 0x61, 0x64, 0x61, 0x61, 0x72
   535                                  	; L_constants + 1740:
   536 000006CC 03                      	db T_string	; "cadadr"
   537 000006CD 0600000000000000        	dq 6
   538 000006D5 636164616472            	db 0x63, 0x61, 0x64, 0x61, 0x64, 0x72
   539                                  	; L_constants + 1755:
   540 000006DB 03                      	db T_string	; "caddar"
   541 000006DC 0600000000000000        	dq 6
   542 000006E4 636164646172            	db 0x63, 0x61, 0x64, 0x64, 0x61, 0x72
   543                                  	; L_constants + 1770:
   544 000006EA 03                      	db T_string	; "cadddr"
   545 000006EB 0600000000000000        	dq 6
   546 000006F3 636164646472            	db 0x63, 0x61, 0x64, 0x64, 0x64, 0x72
   547                                  	; L_constants + 1785:
   548 000006F9 03                      	db T_string	; "cdaaar"
   549 000006FA 0600000000000000        	dq 6
   550 00000702 636461616172            	db 0x63, 0x64, 0x61, 0x61, 0x61, 0x72
   551                                  	; L_constants + 1800:
   552 00000708 03                      	db T_string	; "cdaadr"
   553 00000709 0600000000000000        	dq 6
   554 00000711 636461616472            	db 0x63, 0x64, 0x61, 0x61, 0x64, 0x72
   555                                  	; L_constants + 1815:
   556 00000717 03                      	db T_string	; "cdadar"
   557 00000718 0600000000000000        	dq 6
   558 00000720 636461646172            	db 0x63, 0x64, 0x61, 0x64, 0x61, 0x72
   559                                  	; L_constants + 1830:
   560 00000726 03                      	db T_string	; "cdaddr"
   561 00000727 0600000000000000        	dq 6
   562 0000072F 636461646472            	db 0x63, 0x64, 0x61, 0x64, 0x64, 0x72
   563                                  	; L_constants + 1845:
   564 00000735 03                      	db T_string	; "cddaar"
   565 00000736 0600000000000000        	dq 6
   566 0000073E 636464616172            	db 0x63, 0x64, 0x64, 0x61, 0x61, 0x72
   567                                  	; L_constants + 1860:
   568 00000744 03                      	db T_string	; "cddadr"
   569 00000745 0600000000000000        	dq 6
   570 0000074D 636464616472            	db 0x63, 0x64, 0x64, 0x61, 0x64, 0x72
   571                                  	; L_constants + 1875:
   572 00000753 03                      	db T_string	; "cdddar"
   573 00000754 0600000000000000        	dq 6
   574 0000075C 636464646172            	db 0x63, 0x64, 0x64, 0x64, 0x61, 0x72
   575                                  	; L_constants + 1890:
   576 00000762 03                      	db T_string	; "cddddr"
   577 00000763 0600000000000000        	dq 6
   578 0000076B 636464646472            	db 0x63, 0x64, 0x64, 0x64, 0x64, 0x72
   579                                  	; L_constants + 1905:
   580 00000771 03                      	db T_string	; "list?"
   581 00000772 0500000000000000        	dq 5
   582 0000077A 6C6973743F              	db 0x6C, 0x69, 0x73, 0x74, 0x3F
   583                                  	; L_constants + 1919:
   584 0000077F 03                      	db T_string	; "list"
   585 00000780 0400000000000000        	dq 4
   586 00000788 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   587                                  	; L_constants + 1932:
   588 0000078C 03                      	db T_string	; "not"
   589 0000078D 0300000000000000        	dq 3
   590 00000795 6E6F74                  	db 0x6E, 0x6F, 0x74
   591                                  	; L_constants + 1944:
   592 00000798 03                      	db T_string	; "rational?"
   593 00000799 0900000000000000        	dq 9
   594 000007A1 726174696F6E616C        	db 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x61, 0x6C
   595 000007A9 3F                      	db 0x3F
   596                                  	; L_constants + 1962:
   597 000007AA 03                      	db T_string	; "list*"
   598 000007AB 0500000000000000        	dq 5
   599 000007B3 6C6973742A              	db 0x6C, 0x69, 0x73, 0x74, 0x2A
   600                                  	; L_constants + 1976:
   601 000007B8 03                      	db T_string	; "whatever"
   602 000007B9 0800000000000000        	dq 8
   603 000007C1 7768617465766572        	db 0x77, 0x68, 0x61, 0x74, 0x65, 0x76, 0x65, 0x72
   604                                  	; L_constants + 1993:
   605 000007C9 41                      	db T_interned_symbol	; whatever
   606 000007CA [B807000000000000]      	dq L_constants + 1976
   607                                  	; L_constants + 2002:
   608 000007D2 03                      	db T_string	; "apply"
   609 000007D3 0500000000000000        	dq 5
   610 000007DB 6170706C79              	db 0x61, 0x70, 0x70, 0x6C, 0x79
   611                                  	; L_constants + 2016:
   612 000007E0 03                      	db T_string	; "ormap"
   613 000007E1 0500000000000000        	dq 5
   614 000007E9 6F726D6170              	db 0x6F, 0x72, 0x6D, 0x61, 0x70
   615                                  	; L_constants + 2030:
   616 000007EE 03                      	db T_string	; "map"
   617 000007EF 0300000000000000        	dq 3
   618 000007F7 6D6170                  	db 0x6D, 0x61, 0x70
   619                                  	; L_constants + 2042:
   620 000007FA 03                      	db T_string	; "andmap"
   621 000007FB 0600000000000000        	dq 6
   622 00000803 616E646D6170            	db 0x61, 0x6E, 0x64, 0x6D, 0x61, 0x70
   623                                  	; L_constants + 2057:
   624 00000809 03                      	db T_string	; "reverse"
   625 0000080A 0700000000000000        	dq 7
   626 00000812 72657665727365          	db 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
   627                                  	; L_constants + 2073:
   628 00000819 03                      	db T_string	; "fold-left"
   629 0000081A 0900000000000000        	dq 9
   630 00000822 666F6C642D6C6566        	db 0x66, 0x6F, 0x6C, 0x64, 0x2D, 0x6C, 0x65, 0x66
   631 0000082A 74                      	db 0x74
   632                                  	; L_constants + 2091:
   633 0000082B 03                      	db T_string	; "append"
   634 0000082C 0600000000000000        	dq 6
   635 00000834 617070656E64            	db 0x61, 0x70, 0x70, 0x65, 0x6E, 0x64
   636                                  	; L_constants + 2106:
   637 0000083A 03                      	db T_string	; "fold-right"
   638 0000083B 0A00000000000000        	dq 10
   639 00000843 666F6C642D726967        	db 0x66, 0x6F, 0x6C, 0x64, 0x2D, 0x72, 0x69, 0x67
   640 0000084B 6874                    	db 0x68, 0x74
   641                                  	; L_constants + 2125:
   642 0000084D 03                      	db T_string	; "+"
   643 0000084E 0100000000000000        	dq 1
   644 00000856 2B                      	db 0x2B
   645                                  	; L_constants + 2135:
   646 00000857 11                      	db T_integer	; 0
   647 00000858 0000000000000000        	dq 0
   648                                  	; L_constants + 2144:
   649 00000860 03                      	db T_string	; "__bin_integer_to_fr...
   650 00000861 1900000000000000        	dq 25
   651 00000869 5F5F62696E5F696E        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x5F, 0x69, 0x6E
   652 00000871 74656765725F746F        	db 0x74, 0x65, 0x67, 0x65, 0x72, 0x5F, 0x74, 0x6F
   653 00000879 5F6672616374696F        	db 0x5F, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F
   654 00000881 6E                      	db 0x6E
   655                                  	; L_constants + 2178:
   656 00000882 41                      	db T_interned_symbol	; +
   657 00000883 [4D08000000000000]      	dq L_constants + 2125
   658                                  	; L_constants + 2187:
   659 0000088B 03                      	db T_string	; "all arguments need ...
   660 0000088C 2000000000000000        	dq 32
   661 00000894 616C6C2061726775        	db 0x61, 0x6C, 0x6C, 0x20, 0x61, 0x72, 0x67, 0x75
   662 0000089C 6D656E7473206E65        	db 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x20, 0x6E, 0x65
   663 000008A4 656420746F206265        	db 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x65
   664 000008AC 206E756D62657273        	db 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x73
   665                                  	; L_constants + 2228:
   666 000008B4 03                      	db T_string	; "-"
   667 000008B5 0100000000000000        	dq 1
   668 000008BD 2D                      	db 0x2D
   669                                  	; L_constants + 2238:
   670 000008BE 03                      	db T_string	; "real"
   671 000008BF 0400000000000000        	dq 4
   672 000008C7 7265616C                	db 0x72, 0x65, 0x61, 0x6C
   673                                  	; L_constants + 2251:
   674 000008CB 41                      	db T_interned_symbol	; -
   675 000008CC [B408000000000000]      	dq L_constants + 2228
   676                                  	; L_constants + 2260:
   677 000008D4 03                      	db T_string	; "*"
   678 000008D5 0100000000000000        	dq 1
   679 000008DD 2A                      	db 0x2A
   680                                  	; L_constants + 2270:
   681 000008DE 11                      	db T_integer	; 1
   682 000008DF 0100000000000000        	dq 1
   683                                  	; L_constants + 2279:
   684 000008E7 41                      	db T_interned_symbol	; *
   685 000008E8 [D408000000000000]      	dq L_constants + 2260
   686                                  	; L_constants + 2288:
   687 000008F0 03                      	db T_string	; "/"
   688 000008F1 0100000000000000        	dq 1
   689 000008F9 2F                      	db 0x2F
   690                                  	; L_constants + 2298:
   691 000008FA 41                      	db T_interned_symbol	; /
   692 000008FB [F008000000000000]      	dq L_constants + 2288
   693                                  	; L_constants + 2307:
   694 00000903 03                      	db T_string	; "fact"
   695 00000904 0400000000000000        	dq 4
   696 0000090C 66616374                	db 0x66, 0x61, 0x63, 0x74
   697                                  	; L_constants + 2320:
   698 00000910 03                      	db T_string	; "<"
   699 00000911 0100000000000000        	dq 1
   700 00000919 3C                      	db 0x3C
   701                                  	; L_constants + 2330:
   702 0000091A 03                      	db T_string	; "<="
   703 0000091B 0200000000000000        	dq 2
   704 00000923 3C3D                    	db 0x3C, 0x3D
   705                                  	; L_constants + 2341:
   706 00000925 03                      	db T_string	; ">"
   707 00000926 0100000000000000        	dq 1
   708 0000092E 3E                      	db 0x3E
   709                                  	; L_constants + 2351:
   710 0000092F 03                      	db T_string	; ">="
   711 00000930 0200000000000000        	dq 2
   712 00000938 3E3D                    	db 0x3E, 0x3D
   713                                  	; L_constants + 2362:
   714 0000093A 03                      	db T_string	; "="
   715 0000093B 0100000000000000        	dq 1
   716 00000943 3D                      	db 0x3D
   717                                  	; L_constants + 2372:
   718 00000944 03                      	db T_string	; "generic-comparator"
   719 00000945 1200000000000000        	dq 18
   720 0000094D 67656E657269632D        	db 0x67, 0x65, 0x6E, 0x65, 0x72, 0x69, 0x63, 0x2D
   721 00000955 636F6D7061726174        	db 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x72, 0x61, 0x74
   722 0000095D 6F72                    	db 0x6F, 0x72
   723                                  	; L_constants + 2399:
   724 0000095F 41                      	db T_interned_symbol	; generic-comparator
   725 00000960 [4409000000000000]      	dq L_constants + 2372
   726                                  	; L_constants + 2408:
   727 00000968 03                      	db T_string	; "all the arguments m...
   728 00000969 2100000000000000        	dq 33
   729 00000971 616C6C2074686520        	db 0x61, 0x6C, 0x6C, 0x20, 0x74, 0x68, 0x65, 0x20
   730 00000979 617267756D656E74        	db 0x61, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74
   731 00000981 73206D7573742062        	db 0x73, 0x20, 0x6D, 0x75, 0x73, 0x74, 0x20, 0x62
   732 00000989 65206E756D626572        	db 0x65, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72
   733 00000991 73                      	db 0x73
   734                                  	; L_constants + 2450:
   735 00000992 03                      	db T_string	; "char<?"
   736 00000993 0600000000000000        	dq 6
   737 0000099B 636861723C3F            	db 0x63, 0x68, 0x61, 0x72, 0x3C, 0x3F
   738                                  	; L_constants + 2465:
   739 000009A1 03                      	db T_string	; "char<=?"
   740 000009A2 0700000000000000        	dq 7
   741 000009AA 636861723C3D3F          	db 0x63, 0x68, 0x61, 0x72, 0x3C, 0x3D, 0x3F
   742                                  	; L_constants + 2481:
   743 000009B1 03                      	db T_string	; "char=?"
   744 000009B2 0600000000000000        	dq 6
   745 000009BA 636861723D3F            	db 0x63, 0x68, 0x61, 0x72, 0x3D, 0x3F
   746                                  	; L_constants + 2496:
   747 000009C0 03                      	db T_string	; "char>?"
   748 000009C1 0600000000000000        	dq 6
   749 000009C9 636861723E3F            	db 0x63, 0x68, 0x61, 0x72, 0x3E, 0x3F
   750                                  	; L_constants + 2511:
   751 000009CF 03                      	db T_string	; "char>=?"
   752 000009D0 0700000000000000        	dq 7
   753 000009D8 636861723E3D3F          	db 0x63, 0x68, 0x61, 0x72, 0x3E, 0x3D, 0x3F
   754                                  	; L_constants + 2527:
   755 000009DF 03                      	db T_string	; "char-downcase"
   756 000009E0 0D00000000000000        	dq 13
   757 000009E8 636861722D646F77        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x64, 0x6F, 0x77
   758 000009F0 6E63617365              	db 0x6E, 0x63, 0x61, 0x73, 0x65
   759                                  	; L_constants + 2549:
   760 000009F5 03                      	db T_string	; "char-upcase"
   761 000009F6 0B00000000000000        	dq 11
   762 000009FE 636861722D757063        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x75, 0x70, 0x63
   763 00000A06 617365                  	db 0x61, 0x73, 0x65
   764                                  	; L_constants + 2569:
   765 00000A09 0241                    	db T_char, 0x41	; #\A
   766                                  	; L_constants + 2571:
   767 00000A0B 025A                    	db T_char, 0x5A	; #\Z
   768                                  	; L_constants + 2573:
   769 00000A0D 0261                    	db T_char, 0x61	; #\a
   770                                  	; L_constants + 2575:
   771 00000A0F 027A                    	db T_char, 0x7A	; #\z
   772                                  	; L_constants + 2577:
   773 00000A11 03                      	db T_string	; "char-ci<?"
   774 00000A12 0900000000000000        	dq 9
   775 00000A1A 636861722D63693C        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3C
   776 00000A22 3F                      	db 0x3F
   777                                  	; L_constants + 2595:
   778 00000A23 03                      	db T_string	; "char-ci<=?"
   779 00000A24 0A00000000000000        	dq 10
   780 00000A2C 636861722D63693C        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3C
   781 00000A34 3D3F                    	db 0x3D, 0x3F
   782                                  	; L_constants + 2614:
   783 00000A36 03                      	db T_string	; "char-ci=?"
   784 00000A37 0900000000000000        	dq 9
   785 00000A3F 636861722D63693D        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3D
   786 00000A47 3F                      	db 0x3F
   787                                  	; L_constants + 2632:
   788 00000A48 03                      	db T_string	; "char-ci>?"
   789 00000A49 0900000000000000        	dq 9
   790 00000A51 636861722D63693E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3E
   791 00000A59 3F                      	db 0x3F
   792                                  	; L_constants + 2650:
   793 00000A5A 03                      	db T_string	; "char-ci>=?"
   794 00000A5B 0A00000000000000        	dq 10
   795 00000A63 636861722D63693E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3E
   796 00000A6B 3D3F                    	db 0x3D, 0x3F
   797                                  	; L_constants + 2669:
   798 00000A6D 03                      	db T_string	; "string-downcase"
   799 00000A6E 0F00000000000000        	dq 15
   800 00000A76 737472696E672D64        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x64
   801 00000A7E 6F776E63617365          	db 0x6F, 0x77, 0x6E, 0x63, 0x61, 0x73, 0x65
   802                                  	; L_constants + 2693:
   803 00000A85 03                      	db T_string	; "string-upcase"
   804 00000A86 0D00000000000000        	dq 13
   805 00000A8E 737472696E672D75        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x75
   806 00000A96 7063617365              	db 0x70, 0x63, 0x61, 0x73, 0x65
   807                                  	; L_constants + 2715:
   808 00000A9B 03                      	db T_string	; "list->string"
   809 00000A9C 0C00000000000000        	dq 12
   810 00000AA4 6C6973742D3E7374        	db 0x6C, 0x69, 0x73, 0x74, 0x2D, 0x3E, 0x73, 0x74
   811 00000AAC 72696E67                	db 0x72, 0x69, 0x6E, 0x67
   812                                  	; L_constants + 2736:
   813 00000AB0 03                      	db T_string	; "string->list"
   814 00000AB1 0C00000000000000        	dq 12
   815 00000AB9 737472696E672D3E        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x3E
   816 00000AC1 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   817                                  	; L_constants + 2757:
   818 00000AC5 03                      	db T_string	; "string<?"
   819 00000AC6 0800000000000000        	dq 8
   820 00000ACE 737472696E673C3F        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3C, 0x3F
   821                                  	; L_constants + 2774:
   822 00000AD6 03                      	db T_string	; "string<=?"
   823 00000AD7 0900000000000000        	dq 9
   824 00000ADF 737472696E673C3D        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3C, 0x3D
   825 00000AE7 3F                      	db 0x3F
   826                                  	; L_constants + 2792:
   827 00000AE8 03                      	db T_string	; "string=?"
   828 00000AE9 0800000000000000        	dq 8
   829 00000AF1 737472696E673D3F        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3D, 0x3F
   830                                  	; L_constants + 2809:
   831 00000AF9 03                      	db T_string	; "string>=?"
   832 00000AFA 0900000000000000        	dq 9
   833 00000B02 737472696E673E3D        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3E, 0x3D
   834 00000B0A 3F                      	db 0x3F
   835                                  	; L_constants + 2827:
   836 00000B0B 03                      	db T_string	; "string>?"
   837 00000B0C 0800000000000000        	dq 8
   838 00000B14 737472696E673E3F        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3E, 0x3F
   839                                  	; L_constants + 2844:
   840 00000B1C 03                      	db T_string	; "string-ci<?"
   841 00000B1D 0B00000000000000        	dq 11
   842 00000B25 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   843 00000B2D 693C3F                  	db 0x69, 0x3C, 0x3F
   844                                  	; L_constants + 2864:
   845 00000B30 03                      	db T_string	; "string-ci<=?"
   846 00000B31 0C00000000000000        	dq 12
   847 00000B39 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   848 00000B41 693C3D3F                	db 0x69, 0x3C, 0x3D, 0x3F
   849                                  	; L_constants + 2885:
   850 00000B45 03                      	db T_string	; "string-ci=?"
   851 00000B46 0B00000000000000        	dq 11
   852 00000B4E 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   853 00000B56 693D3F                  	db 0x69, 0x3D, 0x3F
   854                                  	; L_constants + 2905:
   855 00000B59 03                      	db T_string	; "string-ci>=?"
   856 00000B5A 0C00000000000000        	dq 12
   857 00000B62 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   858 00000B6A 693E3D3F                	db 0x69, 0x3E, 0x3D, 0x3F
   859                                  	; L_constants + 2926:
   860 00000B6E 03                      	db T_string	; "string-ci>?"
   861 00000B6F 0B00000000000000        	dq 11
   862 00000B77 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   863 00000B7F 693E3F                  	db 0x69, 0x3E, 0x3F
   864                                  	; L_constants + 2946:
   865 00000B82 41                      	db T_interned_symbol	; make-vector
   866 00000B83 [4804000000000000]      	dq L_constants + 1096
   867                                  	; L_constants + 2955:
   868 00000B8B 03                      	db T_string	; "Usage: (make-vector...
   869 00000B8C 2B00000000000000        	dq 43
   870 00000B94 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   871 00000B9C 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   872 00000BA4 746F722073697A65        	db 0x74, 0x6F, 0x72, 0x20, 0x73, 0x69, 0x7A, 0x65
   873 00000BAC 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   874 00000BB4 616C2D6465666175        	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
   875 00000BBC 6C7429                  	db 0x6C, 0x74, 0x29
   876                                  	; L_constants + 3007:
   877 00000BBF 41                      	db T_interned_symbol	; make-string
   878 00000BC0 [5C04000000000000]      	dq L_constants + 1116
   879                                  	; L_constants + 3016:
   880 00000BC8 03                      	db T_string	; "Usage: (make-string...
   881 00000BC9 2B00000000000000        	dq 43
   882 00000BD1 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   883 00000BD9 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   884 00000BE1 696E672073697A65        	db 0x69, 0x6E, 0x67, 0x20, 0x73, 0x69, 0x7A, 0x65
   885 00000BE9 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   886 00000BF1 616C2D6465666175        	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
   887 00000BF9 6C7429                  	db 0x6C, 0x74, 0x29
   888                                  	; L_constants + 3068:
   889 00000BFC 03                      	db T_string	; "list->vector"
   890 00000BFD 0C00000000000000        	dq 12
   891 00000C05 6C6973742D3E7665        	db 0x6C, 0x69, 0x73, 0x74, 0x2D, 0x3E, 0x76, 0x65
   892 00000C0D 63746F72                	db 0x63, 0x74, 0x6F, 0x72
   893                                  	; L_constants + 3089:
   894 00000C11 03                      	db T_string	; "vector"
   895 00000C12 0600000000000000        	dq 6
   896 00000C1A 766563746F72            	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72
   897                                  	; L_constants + 3104:
   898 00000C20 03                      	db T_string	; "vector->list"
   899 00000C21 0C00000000000000        	dq 12
   900 00000C29 766563746F722D3E        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x3E
   901 00000C31 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   902                                  	; L_constants + 3125:
   903 00000C35 03                      	db T_string	; "random"
   904 00000C36 0600000000000000        	dq 6
   905 00000C3E 72616E646F6D            	db 0x72, 0x61, 0x6E, 0x64, 0x6F, 0x6D
   906                                  	; L_constants + 3140:
   907 00000C44 03                      	db T_string	; "positive?"
   908 00000C45 0900000000000000        	dq 9
   909 00000C4D 706F736974697665        	db 0x70, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65
   910 00000C55 3F                      	db 0x3F
   911                                  	; L_constants + 3158:
   912 00000C56 03                      	db T_string	; "negative?"
   913 00000C57 0900000000000000        	dq 9
   914 00000C5F 6E65676174697665        	db 0x6E, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65
   915 00000C67 3F                      	db 0x3F
   916                                  	; L_constants + 3176:
   917 00000C68 03                      	db T_string	; "even?"
   918 00000C69 0500000000000000        	dq 5
   919 00000C71 6576656E3F              	db 0x65, 0x76, 0x65, 0x6E, 0x3F
   920                                  	; L_constants + 3190:
   921 00000C76 11                      	db T_integer	; 2
   922 00000C77 0200000000000000        	dq 2
   923                                  	; L_constants + 3199:
   924 00000C7F 03                      	db T_string	; "odd?"
   925 00000C80 0400000000000000        	dq 4
   926 00000C88 6F64643F                	db 0x6F, 0x64, 0x64, 0x3F
   927                                  	; L_constants + 3212:
   928 00000C8C 03                      	db T_string	; "abs"
   929 00000C8D 0300000000000000        	dq 3
   930 00000C95 616273                  	db 0x61, 0x62, 0x73
   931                                  	; L_constants + 3224:
   932 00000C98 03                      	db T_string	; "equal?"
   933 00000C99 0600000000000000        	dq 6
   934 00000CA1 657175616C3F            	db 0x65, 0x71, 0x75, 0x61, 0x6C, 0x3F
   935                                  	; L_constants + 3239:
   936 00000CA7 03                      	db T_string	; "assoc"
   937 00000CA8 0500000000000000        	dq 5
   938 00000CB0 6173736F63              	db 0x61, 0x73, 0x73, 0x6F, 0x63
   939                                  	; L_constants + 3253:
   940 00000CB5 03                      	db T_string	; "string-append"
   941 00000CB6 0D00000000000000        	dq 13
   942 00000CBE 737472696E672D61        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x61
   943 00000CC6 7070656E64              	db 0x70, 0x70, 0x65, 0x6E, 0x64
   944                                  	; L_constants + 3275:
   945 00000CCB 03                      	db T_string	; "vector-append"
   946 00000CCC 0D00000000000000        	dq 13
   947 00000CD4 766563746F722D61        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x61
   948 00000CDC 7070656E64              	db 0x70, 0x70, 0x65, 0x6E, 0x64
   949                                  	; L_constants + 3297:
   950 00000CE1 03                      	db T_string	; "string-reverse"
   951 00000CE2 0E00000000000000        	dq 14
   952 00000CEA 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   953 00000CF2 657665727365            	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
   954                                  	; L_constants + 3320:
   955 00000CF8 03                      	db T_string	; "vector-reverse"
   956 00000CF9 0E00000000000000        	dq 14
   957 00000D01 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   958 00000D09 657665727365            	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
   959                                  	; L_constants + 3343:
   960 00000D0F 03                      	db T_string	; "string-reverse!"
   961 00000D10 0F00000000000000        	dq 15
   962 00000D18 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   963 00000D20 65766572736521          	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x21
   964                                  	; L_constants + 3367:
   965 00000D27 03                      	db T_string	; "vector-reverse!"
   966 00000D28 0F00000000000000        	dq 15
   967 00000D30 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   968 00000D38 65766572736521          	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x21
   969                                  	; L_constants + 3391:
   970 00000D3F 03                      	db T_string	; "make-list-thunk"
   971 00000D40 0F00000000000000        	dq 15
   972 00000D48 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   973 00000D50 742D7468756E6B          	db 0x74, 0x2D, 0x74, 0x68, 0x75, 0x6E, 0x6B
   974                                  	; L_constants + 3415:
   975 00000D57 03                      	db T_string	; "make-string-thunk"
   976 00000D58 1100000000000000        	dq 17
   977 00000D60 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   978 00000D68 696E672D7468756E        	db 0x69, 0x6E, 0x67, 0x2D, 0x74, 0x68, 0x75, 0x6E
   979 00000D70 6B                      	db 0x6B
   980                                  	; L_constants + 3441:
   981 00000D71 03                      	db T_string	; "make-vector-thunk"
   982 00000D72 1100000000000000        	dq 17
   983 00000D7A 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   984 00000D82 746F722D7468756E        	db 0x74, 0x6F, 0x72, 0x2D, 0x74, 0x68, 0x75, 0x6E
   985 00000D8A 6B                      	db 0x6B
   986                                  	; L_constants + 3467:
   987 00000D8B 03                      	db T_string	; "logarithm"
   988 00000D8C 0900000000000000        	dq 9
   989 00000D94 6C6F676172697468        	db 0x6C, 0x6F, 0x67, 0x61, 0x72, 0x69, 0x74, 0x68
   990 00000D9C 6D                      	db 0x6D
   991                                  	; L_constants + 3485:
   992 00000D9D 13                      	db T_real	; 1.000000
   993 00000D9E 000000000000F03F        	dq 1.000000
   994                                  	; L_constants + 3494:
   995 00000DA6 03                      	db T_string	; "newline"
   996 00000DA7 0700000000000000        	dq 7
   997 00000DAF 6E65776C696E65          	db 0x6E, 0x65, 0x77, 0x6C, 0x69, 0x6E, 0x65
   998                                  	; L_constants + 3510:
   999 00000DB6 020A                    	db T_char, 0x0A	; #\newline
  1000                                  	; L_constants + 3512:
  1001 00000DB8 03                      	db T_string	; "void"
  1002 00000DB9 0400000000000000        	dq 4
  1003 00000DC1 766F6964                	db 0x76, 0x6F, 0x69, 0x64
  1004                                  free_var_0:	; location of *
  1005 00000DC5 [CD0D000000000000]      	dq .undefined_object
  1006                                  .undefined_object:
  1007 00000DCD 05                      	db T_undefined
  1008 00000DCE [D408000000000000]      	dq L_constants + 2260
  1009                                  
  1010                                  free_var_1:	; location of +
  1011 00000DD6 [DE0D000000000000]      	dq .undefined_object
  1012                                  .undefined_object:
  1013 00000DDE 05                      	db T_undefined
  1014 00000DDF [4D08000000000000]      	dq L_constants + 2125
  1015                                  
  1016                                  free_var_2:	; location of -
  1017 00000DE7 [EF0D000000000000]      	dq .undefined_object
  1018                                  .undefined_object:
  1019 00000DEF 05                      	db T_undefined
  1020 00000DF0 [B408000000000000]      	dq L_constants + 2228
  1021                                  
  1022                                  free_var_3:	; location of /
  1023 00000DF8 [000E000000000000]      	dq .undefined_object
  1024                                  .undefined_object:
  1025 00000E00 05                      	db T_undefined
  1026 00000E01 [F008000000000000]      	dq L_constants + 2288
  1027                                  
  1028                                  free_var_4:	; location of <
  1029 00000E09 [110E000000000000]      	dq .undefined_object
  1030                                  .undefined_object:
  1031 00000E11 05                      	db T_undefined
  1032 00000E12 [1009000000000000]      	dq L_constants + 2320
  1033                                  
  1034                                  free_var_5:	; location of <=
  1035 00000E1A [220E000000000000]      	dq .undefined_object
  1036                                  .undefined_object:
  1037 00000E22 05                      	db T_undefined
  1038 00000E23 [1A09000000000000]      	dq L_constants + 2330
  1039                                  
  1040                                  free_var_6:	; location of =
  1041 00000E2B [330E000000000000]      	dq .undefined_object
  1042                                  .undefined_object:
  1043 00000E33 05                      	db T_undefined
  1044 00000E34 [3A09000000000000]      	dq L_constants + 2362
  1045                                  
  1046                                  free_var_7:	; location of >
  1047 00000E3C [440E000000000000]      	dq .undefined_object
  1048                                  .undefined_object:
  1049 00000E44 05                      	db T_undefined
  1050 00000E45 [2509000000000000]      	dq L_constants + 2341
  1051                                  
  1052                                  free_var_8:	; location of >=
  1053 00000E4D [550E000000000000]      	dq .undefined_object
  1054                                  .undefined_object:
  1055 00000E55 05                      	db T_undefined
  1056 00000E56 [2F09000000000000]      	dq L_constants + 2351
  1057                                  
  1058                                  free_var_9:	; location of __bin-add-qq
  1059 00000E5E [660E000000000000]      	dq .undefined_object
  1060                                  .undefined_object:
  1061 00000E66 05                      	db T_undefined
  1062 00000E67 [6902000000000000]      	dq L_constants + 617
  1063                                  
  1064                                  free_var_10:	; location of __bin-add-rr
  1065 00000E6F [770E000000000000]      	dq .undefined_object
  1066                                  .undefined_object:
  1067 00000E77 05                      	db T_undefined
  1068 00000E78 [1502000000000000]      	dq L_constants + 533
  1069                                  
  1070                                  free_var_11:	; location of __bin-add-zz
  1071 00000E80 [880E000000000000]      	dq .undefined_object
  1072                                  .undefined_object:
  1073 00000E88 05                      	db T_undefined
  1074 00000E89 [BD02000000000000]      	dq L_constants + 701
  1075                                  
  1076                                  free_var_12:	; location of __bin-apply
  1077 00000E91 [990E000000000000]      	dq .undefined_object
  1078                                  .undefined_object:
  1079 00000E99 05                      	db T_undefined
  1080 00000E9A [0102000000000000]      	dq L_constants + 513
  1081                                  
  1082                                  free_var_13:	; location of __bin-div-qq
  1083 00000EA2 [AA0E000000000000]      	dq .undefined_object
  1084                                  .undefined_object:
  1085 00000EAA 05                      	db T_undefined
  1086 00000EAB [A802000000000000]      	dq L_constants + 680
  1087                                  
  1088                                  free_var_14:	; location of __bin-div-rr
  1089 00000EB3 [BB0E000000000000]      	dq .undefined_object
  1090                                  .undefined_object:
  1091 00000EBB 05                      	db T_undefined
  1092 00000EBC [5402000000000000]      	dq L_constants + 596
  1093                                  
  1094                                  free_var_15:	; location of __bin-div-zz
  1095 00000EC4 [CC0E000000000000]      	dq .undefined_object
  1096                                  .undefined_object:
  1097 00000ECC 05                      	db T_undefined
  1098 00000ECD [FC02000000000000]      	dq L_constants + 764
  1099                                  
  1100                                  free_var_16:	; location of __bin-equal-qq
  1101 00000ED5 [DD0E000000000000]      	dq .undefined_object
  1102                                  .undefined_object:
  1103 00000EDD 05                      	db T_undefined
  1104 00000EDE [8703000000000000]      	dq L_constants + 903
  1105                                  
  1106                                  free_var_17:	; location of __bin-equal-rr
  1107 00000EE6 [EE0E000000000000]      	dq .undefined_object
  1108                                  .undefined_object:
  1109 00000EEE 05                      	db T_undefined
  1110 00000EEF [7003000000000000]      	dq L_constants + 880
  1111                                  
  1112                                  free_var_18:	; location of __bin-equal-zz
  1113 00000EF7 [FF0E000000000000]      	dq .undefined_object
  1114                                  .undefined_object:
  1115 00000EFF 05                      	db T_undefined
  1116 00000F00 [9E03000000000000]      	dq L_constants + 926
  1117                                  
  1118                                  free_var_19:	; location of __bin-less-than-qq
  1119 00000F08 [100F000000000000]      	dq .undefined_object
  1120                                  .undefined_object:
  1121 00000F10 05                      	db T_undefined
  1122 00000F11 [3A03000000000000]      	dq L_constants + 826
  1123                                  
  1124                                  free_var_20:	; location of __bin-less-than-rr
  1125 00000F19 [210F000000000000]      	dq .undefined_object
  1126                                  .undefined_object:
  1127 00000F21 05                      	db T_undefined
  1128 00000F22 [1F03000000000000]      	dq L_constants + 799
  1129                                  
  1130                                  free_var_21:	; location of __bin-less-than-zz
  1131 00000F2A [320F000000000000]      	dq .undefined_object
  1132                                  .undefined_object:
  1133 00000F32 05                      	db T_undefined
  1134 00000F33 [5503000000000000]      	dq L_constants + 853
  1135                                  
  1136                                  free_var_22:	; location of __bin-mul-qq
  1137 00000F3B [430F000000000000]      	dq .undefined_object
  1138                                  .undefined_object:
  1139 00000F43 05                      	db T_undefined
  1140 00000F44 [9302000000000000]      	dq L_constants + 659
  1141                                  
  1142                                  free_var_23:	; location of __bin-mul-rr
  1143 00000F4C [540F000000000000]      	dq .undefined_object
  1144                                  .undefined_object:
  1145 00000F54 05                      	db T_undefined
  1146 00000F55 [3F02000000000000]      	dq L_constants + 575
  1147                                  
  1148                                  free_var_24:	; location of __bin-mul-zz
  1149 00000F5D [650F000000000000]      	dq .undefined_object
  1150                                  .undefined_object:
  1151 00000F65 05                      	db T_undefined
  1152 00000F66 [E702000000000000]      	dq L_constants + 743
  1153                                  
  1154                                  free_var_25:	; location of __bin-sub-qq
  1155 00000F6E [760F000000000000]      	dq .undefined_object
  1156                                  .undefined_object:
  1157 00000F76 05                      	db T_undefined
  1158 00000F77 [7E02000000000000]      	dq L_constants + 638
  1159                                  
  1160                                  free_var_26:	; location of __bin-sub-rr
  1161 00000F7F [870F000000000000]      	dq .undefined_object
  1162                                  .undefined_object:
  1163 00000F87 05                      	db T_undefined
  1164 00000F88 [2A02000000000000]      	dq L_constants + 554
  1165                                  
  1166                                  free_var_27:	; location of __bin-sub-zz
  1167 00000F90 [980F000000000000]      	dq .undefined_object
  1168                                  .undefined_object:
  1169 00000F98 05                      	db T_undefined
  1170 00000F99 [D202000000000000]      	dq L_constants + 722
  1171                                  
  1172                                  free_var_28:	; location of __bin_integer_to_fraction
  1173 00000FA1 [A90F000000000000]      	dq .undefined_object
  1174                                  .undefined_object:
  1175 00000FA9 05                      	db T_undefined
  1176 00000FAA [6008000000000000]      	dq L_constants + 2144
  1177                                  
  1178                                  free_var_29:	; location of __integer-to-fraction
  1179 00000FB2 [BA0F000000000000]      	dq .undefined_object
  1180                                  .undefined_object:
  1181 00000FBA 05                      	db T_undefined
  1182 00000FBB [A204000000000000]      	dq L_constants + 1186
  1183                                  
  1184                                  free_var_30:	; location of abs
  1185 00000FC3 [CB0F000000000000]      	dq .undefined_object
  1186                                  .undefined_object:
  1187 00000FCB 05                      	db T_undefined
  1188 00000FCC [8C0C000000000000]      	dq L_constants + 3212
  1189                                  
  1190                                  free_var_31:	; location of andmap
  1191 00000FD4 [DC0F000000000000]      	dq .undefined_object
  1192                                  .undefined_object:
  1193 00000FDC 05                      	db T_undefined
  1194 00000FDD [FA07000000000000]      	dq L_constants + 2042
  1195                                  
  1196                                  free_var_32:	; location of append
  1197 00000FE5 [ED0F000000000000]      	dq .undefined_object
  1198                                  .undefined_object:
  1199 00000FED 05                      	db T_undefined
  1200 00000FEE [2B08000000000000]      	dq L_constants + 2091
  1201                                  
  1202                                  free_var_33:	; location of apply
  1203 00000FF6 [FE0F000000000000]      	dq .undefined_object
  1204                                  .undefined_object:
  1205 00000FFE 05                      	db T_undefined
  1206 00000FFF [D207000000000000]      	dq L_constants + 2002
  1207                                  
  1208                                  free_var_34:	; location of assoc
  1209 00001007 [0F10000000000000]      	dq .undefined_object
  1210                                  .undefined_object:
  1211 0000100F 05                      	db T_undefined
  1212 00001010 [A70C000000000000]      	dq L_constants + 3239
  1213                                  
  1214                                  free_var_35:	; location of caaaar
  1215 00001018 [2010000000000000]      	dq .undefined_object
  1216                                  .undefined_object:
  1217 00001020 05                      	db T_undefined
  1218 00001021 [8106000000000000]      	dq L_constants + 1665
  1219                                  
  1220                                  free_var_36:	; location of caaadr
  1221 00001029 [3110000000000000]      	dq .undefined_object
  1222                                  .undefined_object:
  1223 00001031 05                      	db T_undefined
  1224 00001032 [9006000000000000]      	dq L_constants + 1680
  1225                                  
  1226                                  free_var_37:	; location of caaar
  1227 0000103A [4210000000000000]      	dq .undefined_object
  1228                                  .undefined_object:
  1229 00001042 05                      	db T_undefined
  1230 00001043 [1106000000000000]      	dq L_constants + 1553
  1231                                  
  1232                                  free_var_38:	; location of caadar
  1233 0000104B [5310000000000000]      	dq .undefined_object
  1234                                  .undefined_object:
  1235 00001053 05                      	db T_undefined
  1236 00001054 [9F06000000000000]      	dq L_constants + 1695
  1237                                  
  1238                                  free_var_39:	; location of caaddr
  1239 0000105C [6410000000000000]      	dq .undefined_object
  1240                                  .undefined_object:
  1241 00001064 05                      	db T_undefined
  1242 00001065 [AE06000000000000]      	dq L_constants + 1710
  1243                                  
  1244                                  free_var_40:	; location of caadr
  1245 0000106D [7510000000000000]      	dq .undefined_object
  1246                                  .undefined_object:
  1247 00001075 05                      	db T_undefined
  1248 00001076 [1F06000000000000]      	dq L_constants + 1567
  1249                                  
  1250                                  free_var_41:	; location of caar
  1251 0000107E [8610000000000000]      	dq .undefined_object
  1252                                  .undefined_object:
  1253 00001086 05                      	db T_undefined
  1254 00001087 [DD05000000000000]      	dq L_constants + 1501
  1255                                  
  1256                                  free_var_42:	; location of cadaar
  1257 0000108F [9710000000000000]      	dq .undefined_object
  1258                                  .undefined_object:
  1259 00001097 05                      	db T_undefined
  1260 00001098 [BD06000000000000]      	dq L_constants + 1725
  1261                                  
  1262                                  free_var_43:	; location of cadadr
  1263 000010A0 [A810000000000000]      	dq .undefined_object
  1264                                  .undefined_object:
  1265 000010A8 05                      	db T_undefined
  1266 000010A9 [CC06000000000000]      	dq L_constants + 1740
  1267                                  
  1268                                  free_var_44:	; location of cadar
  1269 000010B1 [B910000000000000]      	dq .undefined_object
  1270                                  .undefined_object:
  1271 000010B9 05                      	db T_undefined
  1272 000010BA [2D06000000000000]      	dq L_constants + 1581
  1273                                  
  1274                                  free_var_45:	; location of caddar
  1275 000010C2 [CA10000000000000]      	dq .undefined_object
  1276                                  .undefined_object:
  1277 000010CA 05                      	db T_undefined
  1278 000010CB [DB06000000000000]      	dq L_constants + 1755
  1279                                  
  1280                                  free_var_46:	; location of cadddr
  1281 000010D3 [DB10000000000000]      	dq .undefined_object
  1282                                  .undefined_object:
  1283 000010DB 05                      	db T_undefined
  1284 000010DC [EA06000000000000]      	dq L_constants + 1770
  1285                                  
  1286                                  free_var_47:	; location of caddr
  1287 000010E4 [EC10000000000000]      	dq .undefined_object
  1288                                  .undefined_object:
  1289 000010EC 05                      	db T_undefined
  1290 000010ED [3B06000000000000]      	dq L_constants + 1595
  1291                                  
  1292                                  free_var_48:	; location of cadr
  1293 000010F5 [FD10000000000000]      	dq .undefined_object
  1294                                  .undefined_object:
  1295 000010FD 05                      	db T_undefined
  1296 000010FE [EA05000000000000]      	dq L_constants + 1514
  1297                                  
  1298                                  free_var_49:	; location of car
  1299 00001106 [0E11000000000000]      	dq .undefined_object
  1300                                  .undefined_object:
  1301 0000110E 05                      	db T_undefined
  1302 0000110F [1501000000000000]      	dq L_constants + 277
  1303                                  
  1304                                  free_var_50:	; location of cdaaar
  1305 00001117 [1F11000000000000]      	dq .undefined_object
  1306                                  .undefined_object:
  1307 0000111F 05                      	db T_undefined
  1308 00001120 [F906000000000000]      	dq L_constants + 1785
  1309                                  
  1310                                  free_var_51:	; location of cdaadr
  1311 00001128 [3011000000000000]      	dq .undefined_object
  1312                                  .undefined_object:
  1313 00001130 05                      	db T_undefined
  1314 00001131 [0807000000000000]      	dq L_constants + 1800
  1315                                  
  1316                                  free_var_52:	; location of cdaar
  1317 00001139 [4111000000000000]      	dq .undefined_object
  1318                                  .undefined_object:
  1319 00001141 05                      	db T_undefined
  1320 00001142 [4906000000000000]      	dq L_constants + 1609
  1321                                  
  1322                                  free_var_53:	; location of cdadar
  1323 0000114A [5211000000000000]      	dq .undefined_object
  1324                                  .undefined_object:
  1325 00001152 05                      	db T_undefined
  1326 00001153 [1707000000000000]      	dq L_constants + 1815
  1327                                  
  1328                                  free_var_54:	; location of cdaddr
  1329 0000115B [6311000000000000]      	dq .undefined_object
  1330                                  .undefined_object:
  1331 00001163 05                      	db T_undefined
  1332 00001164 [2607000000000000]      	dq L_constants + 1830
  1333                                  
  1334                                  free_var_55:	; location of cdadr
  1335 0000116C [7411000000000000]      	dq .undefined_object
  1336                                  .undefined_object:
  1337 00001174 05                      	db T_undefined
  1338 00001175 [5706000000000000]      	dq L_constants + 1623
  1339                                  
  1340                                  free_var_56:	; location of cdar
  1341 0000117D [8511000000000000]      	dq .undefined_object
  1342                                  .undefined_object:
  1343 00001185 05                      	db T_undefined
  1344 00001186 [F705000000000000]      	dq L_constants + 1527
  1345                                  
  1346                                  free_var_57:	; location of cddaar
  1347 0000118E [9611000000000000]      	dq .undefined_object
  1348                                  .undefined_object:
  1349 00001196 05                      	db T_undefined
  1350 00001197 [3507000000000000]      	dq L_constants + 1845
  1351                                  
  1352                                  free_var_58:	; location of cddadr
  1353 0000119F [A711000000000000]      	dq .undefined_object
  1354                                  .undefined_object:
  1355 000011A7 05                      	db T_undefined
  1356 000011A8 [4407000000000000]      	dq L_constants + 1860
  1357                                  
  1358                                  free_var_59:	; location of cddar
  1359 000011B0 [B811000000000000]      	dq .undefined_object
  1360                                  .undefined_object:
  1361 000011B8 05                      	db T_undefined
  1362 000011B9 [6506000000000000]      	dq L_constants + 1637
  1363                                  
  1364                                  free_var_60:	; location of cdddar
  1365 000011C1 [C911000000000000]      	dq .undefined_object
  1366                                  .undefined_object:
  1367 000011C9 05                      	db T_undefined
  1368 000011CA [5307000000000000]      	dq L_constants + 1875
  1369                                  
  1370                                  free_var_61:	; location of cddddr
  1371 000011D2 [DA11000000000000]      	dq .undefined_object
  1372                                  .undefined_object:
  1373 000011DA 05                      	db T_undefined
  1374 000011DB [6207000000000000]      	dq L_constants + 1890
  1375                                  
  1376                                  free_var_62:	; location of cdddr
  1377 000011E3 [EB11000000000000]      	dq .undefined_object
  1378                                  .undefined_object:
  1379 000011EB 05                      	db T_undefined
  1380 000011EC [7306000000000000]      	dq L_constants + 1651
  1381                                  
  1382                                  free_var_63:	; location of cddr
  1383 000011F4 [FC11000000000000]      	dq .undefined_object
  1384                                  .undefined_object:
  1385 000011FC 05                      	db T_undefined
  1386 000011FD [0406000000000000]      	dq L_constants + 1540
  1387                                  
  1388                                  free_var_64:	; location of cdr
  1389 00001205 [0D12000000000000]      	dq .undefined_object
  1390                                  .undefined_object:
  1391 0000120D 05                      	db T_undefined
  1392 0000120E [2101000000000000]      	dq L_constants + 289
  1393                                  
  1394                                  free_var_65:	; location of char->integer
  1395 00001216 [1E12000000000000]      	dq .undefined_object
  1396                                  .undefined_object:
  1397 0000121E 05                      	db T_undefined
  1398 0000121F [A901000000000000]      	dq L_constants + 425
  1399                                  
  1400                                  free_var_66:	; location of char-ci<=?
  1401 00001227 [2F12000000000000]      	dq .undefined_object
  1402                                  .undefined_object:
  1403 0000122F 05                      	db T_undefined
  1404 00001230 [230A000000000000]      	dq L_constants + 2595
  1405                                  
  1406                                  free_var_67:	; location of char-ci<?
  1407 00001238 [4012000000000000]      	dq .undefined_object
  1408                                  .undefined_object:
  1409 00001240 05                      	db T_undefined
  1410 00001241 [110A000000000000]      	dq L_constants + 2577
  1411                                  
  1412                                  free_var_68:	; location of char-ci=?
  1413 00001249 [5112000000000000]      	dq .undefined_object
  1414                                  .undefined_object:
  1415 00001251 05                      	db T_undefined
  1416 00001252 [360A000000000000]      	dq L_constants + 2614
  1417                                  
  1418                                  free_var_69:	; location of char-ci>=?
  1419 0000125A [6212000000000000]      	dq .undefined_object
  1420                                  .undefined_object:
  1421 00001262 05                      	db T_undefined
  1422 00001263 [5A0A000000000000]      	dq L_constants + 2650
  1423                                  
  1424                                  free_var_70:	; location of char-ci>?
  1425 0000126B [7312000000000000]      	dq .undefined_object
  1426                                  .undefined_object:
  1427 00001273 05                      	db T_undefined
  1428 00001274 [480A000000000000]      	dq L_constants + 2632
  1429                                  
  1430                                  free_var_71:	; location of char-downcase
  1431 0000127C [8412000000000000]      	dq .undefined_object
  1432                                  .undefined_object:
  1433 00001284 05                      	db T_undefined
  1434 00001285 [DF09000000000000]      	dq L_constants + 2527
  1435                                  
  1436                                  free_var_72:	; location of char-upcase
  1437 0000128D [9512000000000000]      	dq .undefined_object
  1438                                  .undefined_object:
  1439 00001295 05                      	db T_undefined
  1440 00001296 [F509000000000000]      	dq L_constants + 2549
  1441                                  
  1442                                  free_var_73:	; location of char<=?
  1443 0000129E [A612000000000000]      	dq .undefined_object
  1444                                  .undefined_object:
  1445 000012A6 05                      	db T_undefined
  1446 000012A7 [A109000000000000]      	dq L_constants + 2465
  1447                                  
  1448                                  free_var_74:	; location of char<?
  1449 000012AF [B712000000000000]      	dq .undefined_object
  1450                                  .undefined_object:
  1451 000012B7 05                      	db T_undefined
  1452 000012B8 [9209000000000000]      	dq L_constants + 2450
  1453                                  
  1454                                  free_var_75:	; location of char=?
  1455 000012C0 [C812000000000000]      	dq .undefined_object
  1456                                  .undefined_object:
  1457 000012C8 05                      	db T_undefined
  1458 000012C9 [B109000000000000]      	dq L_constants + 2481
  1459                                  
  1460                                  free_var_76:	; location of char>=?
  1461 000012D1 [D912000000000000]      	dq .undefined_object
  1462                                  .undefined_object:
  1463 000012D9 05                      	db T_undefined
  1464 000012DA [CF09000000000000]      	dq L_constants + 2511
  1465                                  
  1466                                  free_var_77:	; location of char>?
  1467 000012E2 [EA12000000000000]      	dq .undefined_object
  1468                                  .undefined_object:
  1469 000012EA 05                      	db T_undefined
  1470 000012EB [C009000000000000]      	dq L_constants + 2496
  1471                                  
  1472                                  free_var_78:	; location of char?
  1473 000012F3 [FB12000000000000]      	dq .undefined_object
  1474                                  .undefined_object:
  1475 000012FB 05                      	db T_undefined
  1476 000012FC [3000000000000000]      	dq L_constants + 48
  1477                                  
  1478                                  free_var_79:	; location of cons
  1479 00001304 [0C13000000000000]      	dq .undefined_object
  1480                                  .undefined_object:
  1481 0000130C 05                      	db T_undefined
  1482 0000130D [DF00000000000000]      	dq L_constants + 223
  1483                                  
  1484                                  free_var_80:	; location of eq?
  1485 00001315 [1D13000000000000]      	dq .undefined_object
  1486                                  .undefined_object:
  1487 0000131D 05                      	db T_undefined
  1488 0000131E [9604000000000000]      	dq L_constants + 1174
  1489                                  
  1490                                  free_var_81:	; location of equal?
  1491 00001326 [2E13000000000000]      	dq .undefined_object
  1492                                  .undefined_object:
  1493 0000132E 05                      	db T_undefined
  1494 0000132F [980C000000000000]      	dq L_constants + 3224
  1495                                  
  1496                                  free_var_82:	; location of error
  1497 00001337 [3F13000000000000]      	dq .undefined_object
  1498                                  .undefined_object:
  1499 0000133F 05                      	db T_undefined
  1500 00001340 [1103000000000000]      	dq L_constants + 785
  1501                                  
  1502                                  free_var_83:	; location of even?
  1503 00001348 [5013000000000000]      	dq .undefined_object
  1504                                  .undefined_object:
  1505 00001350 05                      	db T_undefined
  1506 00001351 [680C000000000000]      	dq L_constants + 3176
  1507                                  
  1508                                  free_var_84:	; location of fact
  1509 00001359 [6113000000000000]      	dq .undefined_object
  1510                                  .undefined_object:
  1511 00001361 05                      	db T_undefined
  1512 00001362 [0309000000000000]      	dq L_constants + 2307
  1513                                  
  1514                                  free_var_85:	; location of fold-left
  1515 0000136A [7213000000000000]      	dq .undefined_object
  1516                                  .undefined_object:
  1517 00001372 05                      	db T_undefined
  1518 00001373 [1908000000000000]      	dq L_constants + 2073
  1519                                  
  1520                                  free_var_86:	; location of fold-right
  1521 0000137B [8313000000000000]      	dq .undefined_object
  1522                                  .undefined_object:
  1523 00001383 05                      	db T_undefined
  1524 00001384 [3A08000000000000]      	dq L_constants + 2106
  1525                                  
  1526                                  free_var_87:	; location of fraction->real
  1527 0000138C [9413000000000000]      	dq .undefined_object
  1528                                  .undefined_object:
  1529 00001394 05                      	db T_undefined
  1530 00001395 [9201000000000000]      	dq L_constants + 402
  1531                                  
  1532                                  free_var_88:	; location of fraction?
  1533 0000139D [A513000000000000]      	dq .undefined_object
  1534                                  .undefined_object:
  1535 000013A5 05                      	db T_undefined
  1536 000013A6 [9800000000000000]      	dq L_constants + 152
  1537                                  
  1538                                  free_var_89:	; location of integer->char
  1539 000013AE [B613000000000000]      	dq .undefined_object
  1540                                  .undefined_object:
  1541 000013B6 05                      	db T_undefined
  1542 000013B7 [BF01000000000000]      	dq L_constants + 447
  1543                                  
  1544                                  free_var_90:	; location of integer->real
  1545 000013BF [C713000000000000]      	dq .undefined_object
  1546                                  .undefined_object:
  1547 000013C7 05                      	db T_undefined
  1548 000013C8 [7C01000000000000]      	dq L_constants + 380
  1549                                  
  1550                                  free_var_91:	; location of integer?
  1551 000013D0 [D813000000000000]      	dq .undefined_object
  1552                                  .undefined_object:
  1553 000013D8 05                      	db T_undefined
  1554 000013D9 [F001000000000000]      	dq L_constants + 496
  1555                                  
  1556                                  free_var_92:	; location of list
  1557 000013E1 [E913000000000000]      	dq .undefined_object
  1558                                  .undefined_object:
  1559 000013E9 05                      	db T_undefined
  1560 000013EA [7F07000000000000]      	dq L_constants + 1919
  1561                                  
  1562                                  free_var_93:	; location of list*
  1563 000013F2 [FA13000000000000]      	dq .undefined_object
  1564                                  .undefined_object:
  1565 000013FA 05                      	db T_undefined
  1566 000013FB [AA07000000000000]      	dq L_constants + 1962
  1567                                  
  1568                                  free_var_94:	; location of list->string
  1569 00001403 [0B14000000000000]      	dq .undefined_object
  1570                                  .undefined_object:
  1571 0000140B 05                      	db T_undefined
  1572 0000140C [9B0A000000000000]      	dq L_constants + 2715
  1573                                  
  1574                                  free_var_95:	; location of list->vector
  1575 00001414 [1C14000000000000]      	dq .undefined_object
  1576                                  .undefined_object:
  1577 0000141C 05                      	db T_undefined
  1578 0000141D [FC0B000000000000]      	dq L_constants + 3068
  1579                                  
  1580                                  free_var_96:	; location of list?
  1581 00001425 [2D14000000000000]      	dq .undefined_object
  1582                                  .undefined_object:
  1583 0000142D 05                      	db T_undefined
  1584 0000142E [7107000000000000]      	dq L_constants + 1905
  1585                                  
  1586                                  free_var_97:	; location of logarithm
  1587 00001436 [3E14000000000000]      	dq .undefined_object
  1588                                  .undefined_object:
  1589 0000143E 05                      	db T_undefined
  1590 0000143F [8B0D000000000000]      	dq L_constants + 3467
  1591                                  
  1592                                  free_var_98:	; location of make-list-thunk
  1593 00001447 [4F14000000000000]      	dq .undefined_object
  1594                                  .undefined_object:
  1595 0000144F 05                      	db T_undefined
  1596 00001450 [3F0D000000000000]      	dq L_constants + 3391
  1597                                  
  1598                                  free_var_99:	; location of make-string
  1599 00001458 [6014000000000000]      	dq .undefined_object
  1600                                  .undefined_object:
  1601 00001460 05                      	db T_undefined
  1602 00001461 [5C04000000000000]      	dq L_constants + 1116
  1603                                  
  1604                                  free_var_100:	; location of make-string-thunk
  1605 00001469 [7114000000000000]      	dq .undefined_object
  1606                                  .undefined_object:
  1607 00001471 05                      	db T_undefined
  1608 00001472 [570D000000000000]      	dq L_constants + 3415
  1609                                  
  1610                                  free_var_101:	; location of make-vector
  1611 0000147A [8214000000000000]      	dq .undefined_object
  1612                                  .undefined_object:
  1613 00001482 05                      	db T_undefined
  1614 00001483 [4804000000000000]      	dq L_constants + 1096
  1615                                  
  1616                                  free_var_102:	; location of make-vector-thunk
  1617 0000148B [9314000000000000]      	dq .undefined_object
  1618                                  .undefined_object:
  1619 00001493 05                      	db T_undefined
  1620 00001494 [710D000000000000]      	dq L_constants + 3441
  1621                                  
  1622                                  free_var_103:	; location of map
  1623 0000149C [A414000000000000]      	dq .undefined_object
  1624                                  .undefined_object:
  1625 000014A4 05                      	db T_undefined
  1626 000014A5 [EE07000000000000]      	dq L_constants + 2030
  1627                                  
  1628                                  free_var_104:	; location of negative?
  1629 000014AD [B514000000000000]      	dq .undefined_object
  1630                                  .undefined_object:
  1631 000014B5 05                      	db T_undefined
  1632 000014B6 [560C000000000000]      	dq L_constants + 3158
  1633                                  
  1634                                  free_var_105:	; location of newline
  1635 000014BE [C614000000000000]      	dq .undefined_object
  1636                                  .undefined_object:
  1637 000014C6 05                      	db T_undefined
  1638 000014C7 [A60D000000000000]      	dq L_constants + 3494
  1639                                  
  1640                                  free_var_106:	; location of not
  1641 000014CF [D714000000000000]      	dq .undefined_object
  1642                                  .undefined_object:
  1643 000014D7 05                      	db T_undefined
  1644 000014D8 [8C07000000000000]      	dq L_constants + 1932
  1645                                  
  1646                                  free_var_107:	; location of null?
  1647 000014E0 [E814000000000000]      	dq .undefined_object
  1648                                  .undefined_object:
  1649 000014E8 05                      	db T_undefined
  1650 000014E9 [0600000000000000]      	dq L_constants + 6
  1651                                  
  1652                                  free_var_108:	; location of number?
  1653 000014F1 [F914000000000000]      	dq .undefined_object
  1654                                  .undefined_object:
  1655 000014F9 05                      	db T_undefined
  1656 000014FA [BB00000000000000]      	dq L_constants + 187
  1657                                  
  1658                                  free_var_109:	; location of odd?
  1659 00001502 [0A15000000000000]      	dq .undefined_object
  1660                                  .undefined_object:
  1661 0000150A 05                      	db T_undefined
  1662 0000150B [7F0C000000000000]      	dq L_constants + 3199
  1663                                  
  1664                                  free_var_110:	; location of ormap
  1665 00001513 [1B15000000000000]      	dq .undefined_object
  1666                                  .undefined_object:
  1667 0000151B 05                      	db T_undefined
  1668 0000151C [E007000000000000]      	dq L_constants + 2016
  1669                                  
  1670                                  free_var_111:	; location of pair?
  1671 00001524 [2C15000000000000]      	dq .undefined_object
  1672                                  .undefined_object:
  1673 0000152C 05                      	db T_undefined
  1674 0000152D [1400000000000000]      	dq L_constants + 20
  1675                                  
  1676                                  free_var_112:	; location of positive?
  1677 00001535 [3D15000000000000]      	dq .undefined_object
  1678                                  .undefined_object:
  1679 0000153D 05                      	db T_undefined
  1680 0000153E [440C000000000000]      	dq L_constants + 3140
  1681                                  
  1682                                  free_var_113:	; location of random
  1683 00001546 [4E15000000000000]      	dq .undefined_object
  1684                                  .undefined_object:
  1685 0000154E 05                      	db T_undefined
  1686 0000154F [350C000000000000]      	dq L_constants + 3125
  1687                                  
  1688                                  free_var_114:	; location of rational?
  1689 00001557 [5F15000000000000]      	dq .undefined_object
  1690                                  .undefined_object:
  1691 0000155F 05                      	db T_undefined
  1692 00001560 [9807000000000000]      	dq L_constants + 1944
  1693                                  
  1694                                  free_var_115:	; location of real
  1695 00001568 [7015000000000000]      	dq .undefined_object
  1696                                  .undefined_object:
  1697 00001570 05                      	db T_undefined
  1698 00001571 [BE08000000000000]      	dq L_constants + 2238
  1699                                  
  1700                                  free_var_116:	; location of real?
  1701 00001579 [8115000000000000]      	dq .undefined_object
  1702                                  .undefined_object:
  1703 00001581 05                      	db T_undefined
  1704 00001582 [8A00000000000000]      	dq L_constants + 138
  1705                                  
  1706                                  free_var_117:	; location of remainder
  1707 0000158A [9215000000000000]      	dq .undefined_object
  1708                                  .undefined_object:
  1709 00001592 05                      	db T_undefined
  1710 00001593 [C603000000000000]      	dq L_constants + 966
  1711                                  
  1712                                  free_var_118:	; location of reverse
  1713 0000159B [A315000000000000]      	dq .undefined_object
  1714                                  .undefined_object:
  1715 000015A3 05                      	db T_undefined
  1716 000015A4 [0908000000000000]      	dq L_constants + 2057
  1717                                  
  1718                                  free_var_119:	; location of string->list
  1719 000015AC [B415000000000000]      	dq .undefined_object
  1720                                  .undefined_object:
  1721 000015B4 05                      	db T_undefined
  1722 000015B5 [B00A000000000000]      	dq L_constants + 2736
  1723                                  
  1724                                  free_var_120:	; location of string-append
  1725 000015BD [C515000000000000]      	dq .undefined_object
  1726                                  .undefined_object:
  1727 000015C5 05                      	db T_undefined
  1728 000015C6 [B50C000000000000]      	dq L_constants + 3253
  1729                                  
  1730                                  free_var_121:	; location of string-ci<=?
  1731 000015CE [D615000000000000]      	dq .undefined_object
  1732                                  .undefined_object:
  1733 000015D6 05                      	db T_undefined
  1734 000015D7 [300B000000000000]      	dq L_constants + 2864
  1735                                  
  1736                                  free_var_122:	; location of string-ci<?
  1737 000015DF [E715000000000000]      	dq .undefined_object
  1738                                  .undefined_object:
  1739 000015E7 05                      	db T_undefined
  1740 000015E8 [1C0B000000000000]      	dq L_constants + 2844
  1741                                  
  1742                                  free_var_123:	; location of string-ci=?
  1743 000015F0 [F815000000000000]      	dq .undefined_object
  1744                                  .undefined_object:
  1745 000015F8 05                      	db T_undefined
  1746 000015F9 [450B000000000000]      	dq L_constants + 2885
  1747                                  
  1748                                  free_var_124:	; location of string-ci>=?
  1749 00001601 [0916000000000000]      	dq .undefined_object
  1750                                  .undefined_object:
  1751 00001609 05                      	db T_undefined
  1752 0000160A [590B000000000000]      	dq L_constants + 2905
  1753                                  
  1754                                  free_var_125:	; location of string-ci>?
  1755 00001612 [1A16000000000000]      	dq .undefined_object
  1756                                  .undefined_object:
  1757 0000161A 05                      	db T_undefined
  1758 0000161B [6E0B000000000000]      	dq L_constants + 2926
  1759                                  
  1760                                  free_var_126:	; location of string-downcase
  1761 00001623 [2B16000000000000]      	dq .undefined_object
  1762                                  .undefined_object:
  1763 0000162B 05                      	db T_undefined
  1764 0000162C [6D0A000000000000]      	dq L_constants + 2669
  1765                                  
  1766                                  free_var_127:	; location of string-length
  1767 00001634 [3C16000000000000]      	dq .undefined_object
  1768                                  .undefined_object:
  1769 0000163C 05                      	db T_undefined
  1770 0000163D [2D01000000000000]      	dq L_constants + 301
  1771                                  
  1772                                  free_var_128:	; location of string-ref
  1773 00001645 [4D16000000000000]      	dq .undefined_object
  1774                                  .undefined_object:
  1775 0000164D 05                      	db T_undefined
  1776 0000164E [FA03000000000000]      	dq L_constants + 1018
  1777                                  
  1778                                  free_var_129:	; location of string-reverse
  1779 00001656 [5E16000000000000]      	dq .undefined_object
  1780                                  .undefined_object:
  1781 0000165E 05                      	db T_undefined
  1782 0000165F [E10C000000000000]      	dq L_constants + 3297
  1783                                  
  1784                                  free_var_130:	; location of string-reverse!
  1785 00001667 [6F16000000000000]      	dq .undefined_object
  1786                                  .undefined_object:
  1787 0000166F 05                      	db T_undefined
  1788 00001670 [0F0D000000000000]      	dq L_constants + 3343
  1789                                  
  1790                                  free_var_131:	; location of string-set!
  1791 00001678 [8016000000000000]      	dq .undefined_object
  1792                                  .undefined_object:
  1793 00001680 05                      	db T_undefined
  1794 00001681 [3404000000000000]      	dq L_constants + 1076
  1795                                  
  1796                                  free_var_132:	; location of string-upcase
  1797 00001689 [9116000000000000]      	dq .undefined_object
  1798                                  .undefined_object:
  1799 00001691 05                      	db T_undefined
  1800 00001692 [850A000000000000]      	dq L_constants + 2693
  1801                                  
  1802                                  free_var_133:	; location of string<=?
  1803 0000169A [A216000000000000]      	dq .undefined_object
  1804                                  .undefined_object:
  1805 000016A2 05                      	db T_undefined
  1806 000016A3 [D60A000000000000]      	dq L_constants + 2774
  1807                                  
  1808                                  free_var_134:	; location of string<?
  1809 000016AB [B316000000000000]      	dq .undefined_object
  1810                                  .undefined_object:
  1811 000016B3 05                      	db T_undefined
  1812 000016B4 [C50A000000000000]      	dq L_constants + 2757
  1813                                  
  1814                                  free_var_135:	; location of string=?
  1815 000016BC [C416000000000000]      	dq .undefined_object
  1816                                  .undefined_object:
  1817 000016C4 05                      	db T_undefined
  1818 000016C5 [E80A000000000000]      	dq L_constants + 2792
  1819                                  
  1820                                  free_var_136:	; location of string>=?
  1821 000016CD [D516000000000000]      	dq .undefined_object
  1822                                  .undefined_object:
  1823 000016D5 05                      	db T_undefined
  1824 000016D6 [F90A000000000000]      	dq L_constants + 2809
  1825                                  
  1826                                  free_var_137:	; location of string>?
  1827 000016DE [E616000000000000]      	dq .undefined_object
  1828                                  .undefined_object:
  1829 000016E6 05                      	db T_undefined
  1830 000016E7 [0B0B000000000000]      	dq L_constants + 2827
  1831                                  
  1832                                  free_var_138:	; location of string?
  1833 000016EF [F716000000000000]      	dq .undefined_object
  1834                                  .undefined_object:
  1835 000016F7 05                      	db T_undefined
  1836 000016F8 [3E00000000000000]      	dq L_constants + 62
  1837                                  
  1838                                  free_var_139:	; location of trng
  1839 00001700 [0817000000000000]      	dq .undefined_object
  1840                                  .undefined_object:
  1841 00001708 05                      	db T_undefined
  1842 00001709 [D501000000000000]      	dq L_constants + 469
  1843                                  
  1844                                  free_var_140:	; location of vector
  1845 00001711 [1917000000000000]      	dq .undefined_object
  1846                                  .undefined_object:
  1847 00001719 05                      	db T_undefined
  1848 0000171A [110C000000000000]      	dq L_constants + 3089
  1849                                  
  1850                                  free_var_141:	; location of vector->list
  1851 00001722 [2A17000000000000]      	dq .undefined_object
  1852                                  .undefined_object:
  1853 0000172A 05                      	db T_undefined
  1854 0000172B [200C000000000000]      	dq L_constants + 3104
  1855                                  
  1856                                  free_var_142:	; location of vector-append
  1857 00001733 [3B17000000000000]      	dq .undefined_object
  1858                                  .undefined_object:
  1859 0000173B 05                      	db T_undefined
  1860 0000173C [CB0C000000000000]      	dq L_constants + 3275
  1861                                  
  1862                                  free_var_143:	; location of vector-length
  1863 00001744 [4C17000000000000]      	dq .undefined_object
  1864                                  .undefined_object:
  1865 0000174C 05                      	db T_undefined
  1866 0000174D [4301000000000000]      	dq L_constants + 323
  1867                                  
  1868                                  free_var_144:	; location of vector-ref
  1869 00001755 [5D17000000000000]      	dq .undefined_object
  1870                                  .undefined_object:
  1871 0000175D 05                      	db T_undefined
  1872 0000175E [0D04000000000000]      	dq L_constants + 1037
  1873                                  
  1874                                  free_var_145:	; location of vector-reverse
  1875 00001766 [6E17000000000000]      	dq .undefined_object
  1876                                  .undefined_object:
  1877 0000176E 05                      	db T_undefined
  1878 0000176F [F80C000000000000]      	dq L_constants + 3320
  1879                                  
  1880                                  free_var_146:	; location of vector-reverse!
  1881 00001777 [7F17000000000000]      	dq .undefined_object
  1882                                  .undefined_object:
  1883 0000177F 05                      	db T_undefined
  1884 00001780 [270D000000000000]      	dq L_constants + 3367
  1885                                  
  1886                                  free_var_147:	; location of vector-set!
  1887 00001788 [9017000000000000]      	dq .undefined_object
  1888                                  .undefined_object:
  1889 00001790 05                      	db T_undefined
  1890 00001791 [2004000000000000]      	dq L_constants + 1056
  1891                                  
  1892                                  free_var_148:	; location of vector?
  1893 00001799 [A117000000000000]      	dq .undefined_object
  1894                                  .undefined_object:
  1895 000017A1 05                      	db T_undefined
  1896 000017A2 [6700000000000000]      	dq L_constants + 103
  1897                                  
  1898                                  free_var_149:	; location of void
  1899 000017AA [B217000000000000]      	dq .undefined_object
  1900                                  .undefined_object:
  1901 000017B2 05                      	db T_undefined
  1902 000017B3 [B80D000000000000]      	dq L_constants + 3512
  1903                                  
  1904                                  free_var_150:	; location of write-char
  1905 000017BB [C317000000000000]      	dq .undefined_object
  1906                                  .undefined_object:
  1907 000017C3 05                      	db T_undefined
  1908 000017C4 [0201000000000000]      	dq L_constants + 258
  1909                                  
  1910                                  free_var_151:	; location of zero?
  1911 000017CC [D417000000000000]      	dq .undefined_object
  1912                                  .undefined_object:
  1913 000017D4 05                      	db T_undefined
  1914 000017D5 [E201000000000000]      	dq L_constants + 482
  1915                                  
  1916                                  
  1917                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
  1918                                  global main
  1919                                  section .text
  1920                                  main:
  1921 00000000 C8000000                        enter 0, 0
  1922 00000004 6A00                            push 0
  1923 00000006 6A00                            push 0
  1924 00000008 68[597B0100]                    push Lend
  1925 0000000D C8000000                        enter 0, 0
  1926                                  	; building closure for null?
  1927 00000011 48BF-                   	mov rdi, free_var_107
  1927 00000013 [E014000000000000] 
  1928 0000001B 48BE-                   	mov rsi, L_code_ptr_is_null
  1928 0000001D [E986010000000000] 
  1929 00000025 E8CA840100              	call bind_primitive
  1930                                  
  1931                                  	; building closure for pair?
  1932 0000002A 48BF-                   	mov rdi, free_var_111
  1932 0000002C [2415000000000000] 
  1933 00000034 48BE-                   	mov rsi, L_code_ptr_is_pair
  1933 00000036 [1B87010000000000] 
  1934 0000003E E8B1840100              	call bind_primitive
  1935                                  
  1936                                  	; building closure for char?
  1937 00000043 48BF-                   	mov rdi, free_var_78
  1937 00000045 [F312000000000000] 
  1938 0000004D 48BE-                   	mov rsi, L_code_ptr_is_char
  1938 0000004F [7F87010000000000] 
  1939 00000057 E898840100              	call bind_primitive
  1940                                  
  1941                                  	; building closure for string?
  1942 0000005C 48BF-                   	mov rdi, free_var_138
  1942 0000005E [EF16000000000000] 
  1943 00000066 48BE-                   	mov rsi, L_code_ptr_is_string
  1943 00000068 [B187010000000000] 
  1944 00000070 E87F840100              	call bind_primitive
  1945                                  
  1946                                  	; building closure for vector?
  1947 00000075 48BF-                   	mov rdi, free_var_148
  1947 00000077 [9917000000000000] 
  1948 0000007F 48BE-                   	mov rsi, L_code_ptr_is_vector
  1948 00000081 [AF88010000000000] 
  1949 00000089 E866840100              	call bind_primitive
  1950                                  
  1951                                  	; building closure for real?
  1952 0000008E 48BF-                   	mov rdi, free_var_116
  1952 00000090 [7915000000000000] 
  1953 00000098 48BE-                   	mov rsi, L_code_ptr_is_real
  1953 0000009A [1389010000000000] 
  1954 000000A2 E84D840100              	call bind_primitive
  1955                                  
  1956                                  	; building closure for fraction?
  1957 000000A7 48BF-                   	mov rdi, free_var_88
  1957 000000A9 [9D13000000000000] 
  1958 000000B1 48BE-                   	mov rsi, L_code_ptr_is_fraction
  1958 000000B3 [4589010000000000] 
  1959 000000BB E834840100              	call bind_primitive
  1960                                  
  1961                                  	; building closure for number?
  1962 000000C0 48BF-                   	mov rdi, free_var_108
  1962 000000C2 [F114000000000000] 
  1963 000000CA 48BE-                   	mov rsi, L_code_ptr_is_number
  1963 000000CC [138A010000000000] 
  1964 000000D4 E81B840100              	call bind_primitive
  1965                                  
  1966                                  	; building closure for cons
  1967 000000D9 48BF-                   	mov rdi, free_var_79
  1967 000000DB [0413000000000000] 
  1968 000000E3 48BE-                   	mov rsi, L_code_ptr_cons
  1968 000000E5 [7B8A010000000000] 
  1969 000000ED E802840100              	call bind_primitive
  1970                                  
  1971                                  	; building closure for write-char
  1972 000000F2 48BF-                   	mov rdi, free_var_150
  1972 000000F4 [BB17000000000000] 
  1973 000000FC 48BE-                   	mov rsi, L_code_ptr_write_char
  1973 000000FE [D18A010000000000] 
  1974 00000106 E8E9830100              	call bind_primitive
  1975                                  
  1976                                  	; building closure for car
  1977 0000010B 48BF-                   	mov rdi, free_var_49
  1977 0000010D [0611000000000000] 
  1978 00000115 48BE-                   	mov rsi, L_code_ptr_car
  1978 00000117 [248B010000000000] 
  1979 0000011F E8D0830100              	call bind_primitive
  1980                                  
  1981                                  	; building closure for cdr
  1982 00000124 48BF-                   	mov rdi, free_var_64
  1982 00000126 [0512000000000000] 
  1983 0000012E 48BE-                   	mov rsi, L_code_ptr_cdr
  1983 00000130 [488B010000000000] 
  1984 00000138 E8B7830100              	call bind_primitive
  1985                                  
  1986                                  	; building closure for string-length
  1987 0000013D 48BF-                   	mov rdi, free_var_127
  1987 0000013F [3416000000000000] 
  1988 00000147 48BE-                   	mov rsi, L_code_ptr_string_length
  1988 00000149 [6C8B010000000000] 
  1989 00000151 E89E830100              	call bind_primitive
  1990                                  
  1991                                  	; building closure for vector-length
  1992 00000156 48BF-                   	mov rdi, free_var_143
  1992 00000158 [4417000000000000] 
  1993 00000160 48BE-                   	mov rsi, L_code_ptr_vector_length
  1993 00000162 [958B010000000000] 
  1994 0000016A E885830100              	call bind_primitive
  1995                                  
  1996                                  	; building closure for integer->real
  1997 0000016F 48BF-                   	mov rdi, free_var_90
  1997 00000171 [BF13000000000000] 
  1998 00000179 48BE-                   	mov rsi, L_code_ptr_integer_to_real
  1998 0000017B [068C010000000000] 
  1999 00000183 E86C830100              	call bind_primitive
  2000                                  
  2001                                  	; building closure for fraction->real
  2002 00000188 48BF-                   	mov rdi, free_var_87
  2002 0000018A [8C13000000000000] 
  2003 00000192 48BE-                   	mov rsi, L_code_ptr_fraction_to_real
  2003 00000194 [348C010000000000] 
  2004 0000019C E853830100              	call bind_primitive
  2005                                  
  2006                                  	; building closure for char->integer
  2007 000001A1 48BF-                   	mov rdi, free_var_65
  2007 000001A3 [1612000000000000] 
  2008 000001AB 48BE-                   	mov rsi, L_code_ptr_char_to_integer
  2008 000001AD [6F8C010000000000] 
  2009 000001B5 E83A830100              	call bind_primitive
  2010                                  
  2011                                  	; building closure for integer->char
  2012 000001BA 48BF-                   	mov rdi, free_var_89
  2012 000001BC [AE13000000000000] 
  2013 000001C4 48BE-                   	mov rsi, L_code_ptr_integer_to_char
  2013 000001C6 [DE8C010000000000] 
  2014 000001CE E821830100              	call bind_primitive
  2015                                  
  2016                                  	; building closure for trng
  2017 000001D3 48BF-                   	mov rdi, free_var_139
  2017 000001D5 [0017000000000000] 
  2018 000001DD 48BE-                   	mov rsi, L_code_ptr_trng
  2018 000001DF [298D010000000000] 
  2019 000001E7 E808830100              	call bind_primitive
  2020                                  
  2021                                  	; building closure for zero?
  2022 000001EC 48BF-                   	mov rdi, free_var_151
  2022 000001EE [CC17000000000000] 
  2023 000001F6 48BE-                   	mov rsi, L_code_ptr_is_zero
  2023 000001F8 [488D010000000000] 
  2024 00000200 E8EF820100              	call bind_primitive
  2025                                  
  2026                                  	; building closure for integer?
  2027 00000205 48BF-                   	mov rdi, free_var_91
  2027 00000207 [D013000000000000] 
  2028 0000020F 48BE-                   	mov rsi, L_code_ptr_is_integer
  2028 00000211 [AD8D010000000000] 
  2029 00000219 E8D6820100              	call bind_primitive
  2030                                  
  2031                                  	; building closure for __bin-apply
  2032 0000021E 48BF-                   	mov rdi, free_var_12
  2032 00000220 [910E000000000000] 
  2033 00000228 48BE-                   	mov rsi, L_code_ptr_bin_apply
  2033 0000022A [6486010000000000] 
  2034 00000232 E8BD820100              	call bind_primitive
  2035                                  
  2036                                  	; building closure for __bin-add-rr
  2037 00000237 48BF-                   	mov rdi, free_var_10
  2037 00000239 [6F0E000000000000] 
  2038 00000241 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
  2038 00000243 [DF8D010000000000] 
  2039 0000024B E8A4820100              	call bind_primitive
  2040                                  
  2041                                  	; building closure for __bin-sub-rr
  2042 00000250 48BF-                   	mov rdi, free_var_26
  2042 00000252 [7F0F000000000000] 
  2043 0000025A 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
  2043 0000025C [1F8E010000000000] 
  2044 00000264 E88B820100              	call bind_primitive
  2045                                  
  2046                                  	; building closure for __bin-mul-rr
  2047 00000269 48BF-                   	mov rdi, free_var_23
  2047 0000026B [4C0F000000000000] 
  2048 00000273 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
  2048 00000275 [5F8E010000000000] 
  2049 0000027D E872820100              	call bind_primitive
  2050                                  
  2051                                  	; building closure for __bin-div-rr
  2052 00000282 48BF-                   	mov rdi, free_var_14
  2052 00000284 [B30E000000000000] 
  2053 0000028C 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
  2053 0000028E [9F8E010000000000] 
  2054 00000296 E859820100              	call bind_primitive
  2055                                  
  2056                                  	; building closure for __bin-add-qq
  2057 0000029B 48BF-                   	mov rdi, free_var_9
  2057 0000029D [5E0E000000000000] 
  2058 000002A5 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
  2058 000002A7 [298F010000000000] 
  2059 000002AF E840820100              	call bind_primitive
  2060                                  
  2061                                  	; building closure for __bin-sub-qq
  2062 000002B4 48BF-                   	mov rdi, free_var_25
  2062 000002B6 [6E0F000000000000] 
  2063 000002BE 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
  2063 000002C0 [C98F010000000000] 
  2064 000002C8 E827820100              	call bind_primitive
  2065                                  
  2066                                  	; building closure for __bin-mul-qq
  2067 000002CD 48BF-                   	mov rdi, free_var_22
  2067 000002CF [3B0F000000000000] 
  2068 000002D7 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
  2068 000002D9 [6E90010000000000] 
  2069 000002E1 E80E820100              	call bind_primitive
  2070                                  
  2071                                  	; building closure for __bin-div-qq
  2072 000002E6 48BF-                   	mov rdi, free_var_13
  2072 000002E8 [A20E000000000000] 
  2073 000002F0 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
  2073 000002F2 [0891010000000000] 
  2074 000002FA E8F5810100              	call bind_primitive
  2075                                  
  2076                                  	; building closure for __bin-add-zz
  2077 000002FF 48BF-                   	mov rdi, free_var_11
  2077 00000301 [800E000000000000] 
  2078 00000309 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_zz
  2078 0000030B [ED8E010000000000] 
  2079 00000313 E8DC810100              	call bind_primitive
  2080                                  
  2081                                  	; building closure for __bin-sub-zz
  2082 00000318 48BF-                   	mov rdi, free_var_27
  2082 0000031A [900F000000000000] 
  2083 00000322 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_zz
  2083 00000324 [8D8F010000000000] 
  2084 0000032C E8C3810100              	call bind_primitive
  2085                                  
  2086                                  	; building closure for __bin-mul-zz
  2087 00000331 48BF-                   	mov rdi, free_var_24
  2087 00000333 [5D0F000000000000] 
  2088 0000033B 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_zz
  2088 0000033D [2D90010000000000] 
  2089 00000345 E8AA810100              	call bind_primitive
  2090                                  
  2091                                  	; building closure for __bin-div-zz
  2092 0000034A 48BF-                   	mov rdi, free_var_15
  2092 0000034C [C40E000000000000] 
  2093 00000354 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_zz
  2093 00000356 [C290010000000000] 
  2094 0000035E E891810100              	call bind_primitive
  2095                                  
  2096                                  	; building closure for error
  2097 00000363 48BF-                   	mov rdi, free_var_82
  2097 00000365 [3713000000000000] 
  2098 0000036D 48BE-                   	mov rsi, L_code_ptr_error
  2098 0000036F [F291010000000000] 
  2099 00000377 E878810100              	call bind_primitive
  2100                                  
  2101                                  	; building closure for __bin-less-than-rr
  2102 0000037C 48BF-                   	mov rdi, free_var_20
  2102 0000037E [190F000000000000] 
  2103 00000386 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
  2103 00000388 [AE92010000000000] 
  2104 00000390 E85F810100              	call bind_primitive
  2105                                  
  2106                                  	; building closure for __bin-less-than-qq
  2107 00000395 48BF-                   	mov rdi, free_var_19
  2107 00000397 [080F000000000000] 
  2108 0000039F 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
  2108 000003A1 [5093010000000000] 
  2109 000003A9 E846810100              	call bind_primitive
  2110                                  
  2111                                  	; building closure for __bin-less-than-zz
  2112 000003AE 48BF-                   	mov rdi, free_var_21
  2112 000003B0 [2A0F000000000000] 
  2113 000003B8 48BE-                   	mov rsi, L_code_ptr_raw_less_than_zz
  2113 000003BA [0193010000000000] 
  2114 000003C2 E82D810100              	call bind_primitive
  2115                                  
  2116                                  	; building closure for __bin-equal-rr
  2117 000003C7 48BF-                   	mov rdi, free_var_17
  2117 000003C9 [E60E000000000000] 
  2118 000003D1 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
  2118 000003D3 [AF93010000000000] 
  2119 000003DB E814810100              	call bind_primitive
  2120                                  
  2121                                  	; building closure for __bin-equal-qq
  2122 000003E0 48BF-                   	mov rdi, free_var_16
  2122 000003E2 [D50E000000000000] 
  2123 000003EA 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
  2123 000003EC [5194010000000000] 
  2124 000003F4 E8FB800100              	call bind_primitive
  2125                                  
  2126                                  	; building closure for __bin-equal-zz
  2127 000003F9 48BF-                   	mov rdi, free_var_18
  2127 000003FB [F70E000000000000] 
  2128 00000403 48BE-                   	mov rsi, L_code_ptr_raw_equal_zz
  2128 00000405 [0294010000000000] 
  2129 0000040D E8E2800100              	call bind_primitive
  2130                                  
  2131                                  	; building closure for remainder
  2132 00000412 48BF-                   	mov rdi, free_var_117
  2132 00000414 [8A15000000000000] 
  2133 0000041C 48BE-                   	mov rsi, L_code_ptr_remainder
  2133 0000041E [FC94010000000000] 
  2134 00000426 E8C9800100              	call bind_primitive
  2135                                  
  2136                                  	; building closure for string-ref
  2137 0000042B 48BF-                   	mov rdi, free_var_128
  2137 0000042D [4516000000000000] 
  2138 00000435 48BE-                   	mov rsi, L_code_ptr_string_ref
  2138 00000437 [AC95010000000000] 
  2139 0000043F E8B0800100              	call bind_primitive
  2140                                  
  2141                                  	; building closure for vector-ref
  2142 00000444 48BF-                   	mov rdi, free_var_144
  2142 00000446 [5517000000000000] 
  2143 0000044E 48BE-                   	mov rsi, L_code_ptr_vector_ref
  2143 00000450 [0896010000000000] 
  2144 00000458 E897800100              	call bind_primitive
  2145                                  
  2146                                  	; building closure for vector-set!
  2147 0000045D 48BF-                   	mov rdi, free_var_147
  2147 0000045F [8817000000000000] 
  2148 00000467 48BE-                   	mov rsi, L_code_ptr_vector_set
  2148 00000469 [5596010000000000] 
  2149 00000471 E87E800100              	call bind_primitive
  2150                                  
  2151                                  	; building closure for string-set!
  2152 00000476 48BF-                   	mov rdi, free_var_131
  2152 00000478 [7816000000000000] 
  2153 00000480 48BE-                   	mov rsi, L_code_ptr_string_set
  2153 00000482 [B096010000000000] 
  2154 0000048A E865800100              	call bind_primitive
  2155                                  
  2156                                  	; building closure for make-vector
  2157 0000048F 48BF-                   	mov rdi, free_var_101
  2157 00000491 [7A14000000000000] 
  2158 00000499 48BE-                   	mov rsi, L_code_ptr_make_vector
  2158 0000049B [1697010000000000] 
  2159 000004A3 E84C800100              	call bind_primitive
  2160                                  
  2161                                  	; building closure for make-string
  2162 000004A8 48BF-                   	mov rdi, free_var_99
  2162 000004AA [5814000000000000] 
  2163 000004B2 48BE-                   	mov rsi, L_code_ptr_make_string
  2163 000004B4 [7197010000000000] 
  2164 000004BC E833800100              	call bind_primitive
  2165                                  
  2166                                  	; building closure for eq?
  2167 000004C1 48BF-                   	mov rdi, free_var_80
  2167 000004C3 [1513000000000000] 
  2168 000004CB 48BE-                   	mov rsi, L_code_ptr_is_eq
  2168 000004CD [2698010000000000] 
  2169 000004D5 E81A800100              	call bind_primitive
  2170                                  
  2171                                  	; building closure for __integer-to-fraction
  2172 000004DA 48BF-                   	mov rdi, free_var_29
  2172 000004DC [B20F000000000000] 
  2173 000004E4 48BE-                   	mov rsi, L_code_ptr_integer_to_fraction
  2173 000004E6 [A08C010000000000] 
  2174 000004EE E801800100              	call bind_primitive
  2175                                  
  2176 000004F3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2177 000004F8 E8C7770100              	call malloc
  2178 000004FD 50                      	push rax
  2179 000004FE BF00000000              	mov rdi, 8 * 0	; new rib
  2180 00000503 E8BC770100              	call malloc
  2181 00000508 50                      	push rax
  2182 00000509 BF08000000              	mov rdi, 8 * 1	; extended env
  2183 0000050E E8B1770100              	call malloc
  2184 00000513 488B7D10                	mov rdi, ENV
  2185 00000517 BE00000000              	mov rsi, 0
  2186 0000051C BA01000000              	mov rdx, 1
  2187                                  .L_lambda_simple_env_loop_0001:	; ext_env[i + 1] <-- env[i]
  2188 00000521 4883FE00                	cmp rsi, 0
  2189 00000525 7410                    	je .L_lambda_simple_env_end_0001
  2190 00000527 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2191 0000052B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2192 0000052F 48FFC6                  	inc rsi
  2193 00000532 48FFC2                  	inc rdx
  2194 00000535 EBEA                    	jmp .L_lambda_simple_env_loop_0001
  2195                                  .L_lambda_simple_env_end_0001:
  2196 00000537 5B                      	pop rbx
  2197 00000538 BE00000000              	mov rsi, 0
  2198                                  .L_lambda_simple_params_loop_0001:	; copy params
  2199 0000053D 4883FE00                	cmp rsi, 0
  2200 00000541 740E                    	je .L_lambda_simple_params_end_0001
  2201 00000543 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2202 00000548 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2203 0000054C 48FFC6                  	inc rsi
  2204 0000054F EBEC                    	jmp .L_lambda_simple_params_loop_0001
  2205                                  .L_lambda_simple_params_end_0001:
  2206 00000551 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2207 00000554 4889C3                  	mov rbx, rax
  2208 00000557 58                      	pop rax
  2209 00000558 C60004                  	mov byte [rax], T_closure
  2210 0000055B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2211 0000055F 48C74009[6C050000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0001
  2212 00000567 E9AA000000              	jmp .L_lambda_simple_end_0001
  2213                                  .L_lambda_simple_code_0001:	; lambda-simple body
  2214 0000056C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2215 00000572 740B                    	je .L_lambda_simple_arity_check_ok_0001
  2216 00000574 FF742410                	push qword [rsp + 8 * 2]
  2217 00000578 6A01                    	push 1
  2218 0000057A E9FE760100              	jmp L_error_incorrect_arity_simple
  2219                                  .L_lambda_simple_arity_check_ok_0001:
  2220 0000057F C8000000                	enter 0, 0
  2221                                  	; preparing a tail-call
  2222                                  	; preparing a non-tail-call
  2223 00000583 488B4520                	mov rax, PARAM(0)	; param x
  2224 00000587 50                      	push rax
  2225 00000588 6A01                    	push 1	; arg count
  2226 0000058A 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  2227 00000592 803805                  	cmp byte [rax], T_undefined
  2228 00000595 0F84FC750100            	je L_error_fvar_undefined
  2229 0000059B 803804                  	cmp byte [rax], T_closure
  2230 0000059E 0F8577760100            	jne L_error_non_closure
  2231 000005A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2232 000005A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2233 000005AA 50                      	push rax
  2234 000005AB 6A01                    	push 1	; arg count
  2235 000005AD 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  2236 000005B5 803805                  	cmp byte [rax], T_undefined
  2237 000005B8 0F84D9750100            	je L_error_fvar_undefined
  2238 000005BE 803804                  	cmp byte [rax], T_closure
  2239 000005C1 0F8554760100            	jne L_error_non_closure
  2240 000005C7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2241 000005CA FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2242 000005CD FF7500                  	push qword[rbp]
  2243 000005D0 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2244 000005D3 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2245 000005D7 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2246 000005DB 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2247 000005DF 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2248 000005E2 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2249 000005E5 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2250 000005EA 4983C103                	add r9, 3 	 ;for getting to the params
  2251 000005EE 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2252 000005F2 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2253                                  .L_tc_recycle_frame_loop_0001:
  2254 000005F5 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2255 000005F8 7410                    	je .L_tc_recycle_frame_done_0001
  2256 000005FA 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2257 000005FD 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2258 00000600 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2259 00000604 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2260 00000608 EBEB                    	jmp .L_tc_recycle_frame_loop_0001
  2261                                  .L_tc_recycle_frame_done_0001:
  2262 0000060A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2263 0000060B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2264 0000060F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2265 00000612 C9                      	leave
  2266 00000613 C21800                  	ret AND_KILL_FRAME(1)
  2267                                  .L_lambda_simple_end_0001:	; new closure is in rax
  2268 00000616 48890425[7E100000]      	mov qword [free_var_41], rax
  2269 0000061E 48B8-                   	mov rax, sob_void
  2269 00000620 [0000000000000000] 
  2270                                  
  2271 00000628 4889C7                  	mov rdi, rax
  2272 0000062B E8E9780100              	call print_sexpr_if_not_void
  2273 00000630 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2274 00000635 E88A760100              	call malloc
  2275 0000063A 50                      	push rax
  2276 0000063B BF00000000              	mov rdi, 8 * 0	; new rib
  2277 00000640 E87F760100              	call malloc
  2278 00000645 50                      	push rax
  2279 00000646 BF08000000              	mov rdi, 8 * 1	; extended env
  2280 0000064B E874760100              	call malloc
  2281 00000650 488B7D10                	mov rdi, ENV
  2282 00000654 BE00000000              	mov rsi, 0
  2283 00000659 BA01000000              	mov rdx, 1
  2284                                  .L_lambda_simple_env_loop_0002:	; ext_env[i + 1] <-- env[i]
  2285 0000065E 4883FE00                	cmp rsi, 0
  2286 00000662 7410                    	je .L_lambda_simple_env_end_0002
  2287 00000664 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2288 00000668 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2289 0000066C 48FFC6                  	inc rsi
  2290 0000066F 48FFC2                  	inc rdx
  2291 00000672 EBEA                    	jmp .L_lambda_simple_env_loop_0002
  2292                                  .L_lambda_simple_env_end_0002:
  2293 00000674 5B                      	pop rbx
  2294 00000675 BE00000000              	mov rsi, 0
  2295                                  .L_lambda_simple_params_loop_0002:	; copy params
  2296 0000067A 4883FE00                	cmp rsi, 0
  2297 0000067E 740E                    	je .L_lambda_simple_params_end_0002
  2298 00000680 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2299 00000685 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2300 00000689 48FFC6                  	inc rsi
  2301 0000068C EBEC                    	jmp .L_lambda_simple_params_loop_0002
  2302                                  .L_lambda_simple_params_end_0002:
  2303 0000068E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2304 00000691 4889C3                  	mov rbx, rax
  2305 00000694 58                      	pop rax
  2306 00000695 C60004                  	mov byte [rax], T_closure
  2307 00000698 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2308 0000069C 48C74009[A9060000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0002
  2309 000006A4 E9AA000000              	jmp .L_lambda_simple_end_0002
  2310                                  .L_lambda_simple_code_0002:	; lambda-simple body
  2311 000006A9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2312 000006AF 740B                    	je .L_lambda_simple_arity_check_ok_0002
  2313 000006B1 FF742410                	push qword [rsp + 8 * 2]
  2314 000006B5 6A01                    	push 1
  2315 000006B7 E9C1750100              	jmp L_error_incorrect_arity_simple
  2316                                  .L_lambda_simple_arity_check_ok_0002:
  2317 000006BC C8000000                	enter 0, 0
  2318                                  	; preparing a tail-call
  2319                                  	; preparing a non-tail-call
  2320 000006C0 488B4520                	mov rax, PARAM(0)	; param x
  2321 000006C4 50                      	push rax
  2322 000006C5 6A01                    	push 1	; arg count
  2323 000006C7 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  2324 000006CF 803805                  	cmp byte [rax], T_undefined
  2325 000006D2 0F84BF740100            	je L_error_fvar_undefined
  2326 000006D8 803804                  	cmp byte [rax], T_closure
  2327 000006DB 0F853A750100            	jne L_error_non_closure
  2328 000006E1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2329 000006E4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2330 000006E7 50                      	push rax
  2331 000006E8 6A01                    	push 1	; arg count
  2332 000006EA 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  2333 000006F2 803805                  	cmp byte [rax], T_undefined
  2334 000006F5 0F849C740100            	je L_error_fvar_undefined
  2335 000006FB 803804                  	cmp byte [rax], T_closure
  2336 000006FE 0F8517750100            	jne L_error_non_closure
  2337 00000704 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2338 00000707 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2339 0000070A FF7500                  	push qword[rbp]
  2340 0000070D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2341 00000710 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2342 00000714 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2343 00000718 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2344 0000071C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2345 0000071F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2346 00000722 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2347 00000727 4983C103                	add r9, 3 	 ;for getting to the params
  2348 0000072B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2349 0000072F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2350                                  .L_tc_recycle_frame_loop_0002:
  2351 00000732 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2352 00000735 7410                    	je .L_tc_recycle_frame_done_0002
  2353 00000737 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2354 0000073A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2355 0000073D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2356 00000741 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2357 00000745 EBEB                    	jmp .L_tc_recycle_frame_loop_0002
  2358                                  .L_tc_recycle_frame_done_0002:
  2359 00000747 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2360 00000748 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2361 0000074C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2362 0000074F C9                      	leave
  2363 00000750 C21800                  	ret AND_KILL_FRAME(1)
  2364                                  .L_lambda_simple_end_0002:	; new closure is in rax
  2365 00000753 48890425[F5100000]      	mov qword [free_var_48], rax
  2366 0000075B 48B8-                   	mov rax, sob_void
  2366 0000075D [0000000000000000] 
  2367                                  
  2368 00000765 4889C7                  	mov rdi, rax
  2369 00000768 E8AC770100              	call print_sexpr_if_not_void
  2370 0000076D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2371 00000772 E84D750100              	call malloc
  2372 00000777 50                      	push rax
  2373 00000778 BF00000000              	mov rdi, 8 * 0	; new rib
  2374 0000077D E842750100              	call malloc
  2375 00000782 50                      	push rax
  2376 00000783 BF08000000              	mov rdi, 8 * 1	; extended env
  2377 00000788 E837750100              	call malloc
  2378 0000078D 488B7D10                	mov rdi, ENV
  2379 00000791 BE00000000              	mov rsi, 0
  2380 00000796 BA01000000              	mov rdx, 1
  2381                                  .L_lambda_simple_env_loop_0003:	; ext_env[i + 1] <-- env[i]
  2382 0000079B 4883FE00                	cmp rsi, 0
  2383 0000079F 7410                    	je .L_lambda_simple_env_end_0003
  2384 000007A1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2385 000007A5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2386 000007A9 48FFC6                  	inc rsi
  2387 000007AC 48FFC2                  	inc rdx
  2388 000007AF EBEA                    	jmp .L_lambda_simple_env_loop_0003
  2389                                  .L_lambda_simple_env_end_0003:
  2390 000007B1 5B                      	pop rbx
  2391 000007B2 BE00000000              	mov rsi, 0
  2392                                  .L_lambda_simple_params_loop_0003:	; copy params
  2393 000007B7 4883FE00                	cmp rsi, 0
  2394 000007BB 740E                    	je .L_lambda_simple_params_end_0003
  2395 000007BD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2396 000007C2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2397 000007C6 48FFC6                  	inc rsi
  2398 000007C9 EBEC                    	jmp .L_lambda_simple_params_loop_0003
  2399                                  .L_lambda_simple_params_end_0003:
  2400 000007CB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2401 000007CE 4889C3                  	mov rbx, rax
  2402 000007D1 58                      	pop rax
  2403 000007D2 C60004                  	mov byte [rax], T_closure
  2404 000007D5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2405 000007D9 48C74009[E6070000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0003
  2406 000007E1 E9AA000000              	jmp .L_lambda_simple_end_0003
  2407                                  .L_lambda_simple_code_0003:	; lambda-simple body
  2408 000007E6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2409 000007EC 740B                    	je .L_lambda_simple_arity_check_ok_0003
  2410 000007EE FF742410                	push qword [rsp + 8 * 2]
  2411 000007F2 6A01                    	push 1
  2412 000007F4 E984740100              	jmp L_error_incorrect_arity_simple
  2413                                  .L_lambda_simple_arity_check_ok_0003:
  2414 000007F9 C8000000                	enter 0, 0
  2415                                  	; preparing a tail-call
  2416                                  	; preparing a non-tail-call
  2417 000007FD 488B4520                	mov rax, PARAM(0)	; param x
  2418 00000801 50                      	push rax
  2419 00000802 6A01                    	push 1	; arg count
  2420 00000804 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  2421 0000080C 803805                  	cmp byte [rax], T_undefined
  2422 0000080F 0F8482730100            	je L_error_fvar_undefined
  2423 00000815 803804                  	cmp byte [rax], T_closure
  2424 00000818 0F85FD730100            	jne L_error_non_closure
  2425 0000081E FF7001                  	push SOB_CLOSURE_ENV(rax)
  2426 00000821 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2427 00000824 50                      	push rax
  2428 00000825 6A01                    	push 1	; arg count
  2429 00000827 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  2430 0000082F 803805                  	cmp byte [rax], T_undefined
  2431 00000832 0F845F730100            	je L_error_fvar_undefined
  2432 00000838 803804                  	cmp byte [rax], T_closure
  2433 0000083B 0F85DA730100            	jne L_error_non_closure
  2434 00000841 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2435 00000844 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2436 00000847 FF7500                  	push qword[rbp]
  2437 0000084A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2438 0000084D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2439 00000851 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2440 00000855 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2441 00000859 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2442 0000085C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2443 0000085F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2444 00000864 4983C103                	add r9, 3 	 ;for getting to the params
  2445 00000868 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2446 0000086C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2447                                  .L_tc_recycle_frame_loop_0003:
  2448 0000086F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2449 00000872 7410                    	je .L_tc_recycle_frame_done_0003
  2450 00000874 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2451 00000877 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2452 0000087A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2453 0000087E 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2454 00000882 EBEB                    	jmp .L_tc_recycle_frame_loop_0003
  2455                                  .L_tc_recycle_frame_done_0003:
  2456 00000884 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2457 00000885 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2458 00000889 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2459 0000088C C9                      	leave
  2460 0000088D C21800                  	ret AND_KILL_FRAME(1)
  2461                                  .L_lambda_simple_end_0003:	; new closure is in rax
  2462 00000890 48890425[7D110000]      	mov qword [free_var_56], rax
  2463 00000898 48B8-                   	mov rax, sob_void
  2463 0000089A [0000000000000000] 
  2464                                  
  2465 000008A2 4889C7                  	mov rdi, rax
  2466 000008A5 E86F760100              	call print_sexpr_if_not_void
  2467 000008AA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2468 000008AF E810740100              	call malloc
  2469 000008B4 50                      	push rax
  2470 000008B5 BF00000000              	mov rdi, 8 * 0	; new rib
  2471 000008BA E805740100              	call malloc
  2472 000008BF 50                      	push rax
  2473 000008C0 BF08000000              	mov rdi, 8 * 1	; extended env
  2474 000008C5 E8FA730100              	call malloc
  2475 000008CA 488B7D10                	mov rdi, ENV
  2476 000008CE BE00000000              	mov rsi, 0
  2477 000008D3 BA01000000              	mov rdx, 1
  2478                                  .L_lambda_simple_env_loop_0004:	; ext_env[i + 1] <-- env[i]
  2479 000008D8 4883FE00                	cmp rsi, 0
  2480 000008DC 7410                    	je .L_lambda_simple_env_end_0004
  2481 000008DE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2482 000008E2 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2483 000008E6 48FFC6                  	inc rsi
  2484 000008E9 48FFC2                  	inc rdx
  2485 000008EC EBEA                    	jmp .L_lambda_simple_env_loop_0004
  2486                                  .L_lambda_simple_env_end_0004:
  2487 000008EE 5B                      	pop rbx
  2488 000008EF BE00000000              	mov rsi, 0
  2489                                  .L_lambda_simple_params_loop_0004:	; copy params
  2490 000008F4 4883FE00                	cmp rsi, 0
  2491 000008F8 740E                    	je .L_lambda_simple_params_end_0004
  2492 000008FA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2493 000008FF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2494 00000903 48FFC6                  	inc rsi
  2495 00000906 EBEC                    	jmp .L_lambda_simple_params_loop_0004
  2496                                  .L_lambda_simple_params_end_0004:
  2497 00000908 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2498 0000090B 4889C3                  	mov rbx, rax
  2499 0000090E 58                      	pop rax
  2500 0000090F C60004                  	mov byte [rax], T_closure
  2501 00000912 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2502 00000916 48C74009[23090000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0004
  2503 0000091E E9AA000000              	jmp .L_lambda_simple_end_0004
  2504                                  .L_lambda_simple_code_0004:	; lambda-simple body
  2505 00000923 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2506 00000929 740B                    	je .L_lambda_simple_arity_check_ok_0004
  2507 0000092B FF742410                	push qword [rsp + 8 * 2]
  2508 0000092F 6A01                    	push 1
  2509 00000931 E947730100              	jmp L_error_incorrect_arity_simple
  2510                                  .L_lambda_simple_arity_check_ok_0004:
  2511 00000936 C8000000                	enter 0, 0
  2512                                  	; preparing a tail-call
  2513                                  	; preparing a non-tail-call
  2514 0000093A 488B4520                	mov rax, PARAM(0)	; param x
  2515 0000093E 50                      	push rax
  2516 0000093F 6A01                    	push 1	; arg count
  2517 00000941 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  2518 00000949 803805                  	cmp byte [rax], T_undefined
  2519 0000094C 0F8445720100            	je L_error_fvar_undefined
  2520 00000952 803804                  	cmp byte [rax], T_closure
  2521 00000955 0F85C0720100            	jne L_error_non_closure
  2522 0000095B FF7001                  	push SOB_CLOSURE_ENV(rax)
  2523 0000095E FF5009                  	call SOB_CLOSURE_CODE(rax)
  2524 00000961 50                      	push rax
  2525 00000962 6A01                    	push 1	; arg count
  2526 00000964 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  2527 0000096C 803805                  	cmp byte [rax], T_undefined
  2528 0000096F 0F8422720100            	je L_error_fvar_undefined
  2529 00000975 803804                  	cmp byte [rax], T_closure
  2530 00000978 0F859D720100            	jne L_error_non_closure
  2531 0000097E FF7001                  	push SOB_CLOSURE_ENV(rax)
  2532 00000981 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2533 00000984 FF7500                  	push qword[rbp]
  2534 00000987 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2535 0000098A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2536 0000098E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2537 00000992 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2538 00000996 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2539 00000999 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2540 0000099C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2541 000009A1 4983C103                	add r9, 3 	 ;for getting to the params
  2542 000009A5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2543 000009A9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2544                                  .L_tc_recycle_frame_loop_0004:
  2545 000009AC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2546 000009AF 7410                    	je .L_tc_recycle_frame_done_0004
  2547 000009B1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2548 000009B4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2549 000009B7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2550 000009BB 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2551 000009BF EBEB                    	jmp .L_tc_recycle_frame_loop_0004
  2552                                  .L_tc_recycle_frame_done_0004:
  2553 000009C1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2554 000009C2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2555 000009C6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2556 000009C9 C9                      	leave
  2557 000009CA C21800                  	ret AND_KILL_FRAME(1)
  2558                                  .L_lambda_simple_end_0004:	; new closure is in rax
  2559 000009CD 48890425[F4110000]      	mov qword [free_var_63], rax
  2560 000009D5 48B8-                   	mov rax, sob_void
  2560 000009D7 [0000000000000000] 
  2561                                  
  2562 000009DF 4889C7                  	mov rdi, rax
  2563 000009E2 E832750100              	call print_sexpr_if_not_void
  2564 000009E7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2565 000009EC E8D3720100              	call malloc
  2566 000009F1 50                      	push rax
  2567 000009F2 BF00000000              	mov rdi, 8 * 0	; new rib
  2568 000009F7 E8C8720100              	call malloc
  2569 000009FC 50                      	push rax
  2570 000009FD BF08000000              	mov rdi, 8 * 1	; extended env
  2571 00000A02 E8BD720100              	call malloc
  2572 00000A07 488B7D10                	mov rdi, ENV
  2573 00000A0B BE00000000              	mov rsi, 0
  2574 00000A10 BA01000000              	mov rdx, 1
  2575                                  .L_lambda_simple_env_loop_0005:	; ext_env[i + 1] <-- env[i]
  2576 00000A15 4883FE00                	cmp rsi, 0
  2577 00000A19 7410                    	je .L_lambda_simple_env_end_0005
  2578 00000A1B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2579 00000A1F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2580 00000A23 48FFC6                  	inc rsi
  2581 00000A26 48FFC2                  	inc rdx
  2582 00000A29 EBEA                    	jmp .L_lambda_simple_env_loop_0005
  2583                                  .L_lambda_simple_env_end_0005:
  2584 00000A2B 5B                      	pop rbx
  2585 00000A2C BE00000000              	mov rsi, 0
  2586                                  .L_lambda_simple_params_loop_0005:	; copy params
  2587 00000A31 4883FE00                	cmp rsi, 0
  2588 00000A35 740E                    	je .L_lambda_simple_params_end_0005
  2589 00000A37 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2590 00000A3C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2591 00000A40 48FFC6                  	inc rsi
  2592 00000A43 EBEC                    	jmp .L_lambda_simple_params_loop_0005
  2593                                  .L_lambda_simple_params_end_0005:
  2594 00000A45 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2595 00000A48 4889C3                  	mov rbx, rax
  2596 00000A4B 58                      	pop rax
  2597 00000A4C C60004                  	mov byte [rax], T_closure
  2598 00000A4F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2599 00000A53 48C74009[600A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0005
  2600 00000A5B E9AA000000              	jmp .L_lambda_simple_end_0005
  2601                                  .L_lambda_simple_code_0005:	; lambda-simple body
  2602 00000A60 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2603 00000A66 740B                    	je .L_lambda_simple_arity_check_ok_0005
  2604 00000A68 FF742410                	push qword [rsp + 8 * 2]
  2605 00000A6C 6A01                    	push 1
  2606 00000A6E E90A720100              	jmp L_error_incorrect_arity_simple
  2607                                  .L_lambda_simple_arity_check_ok_0005:
  2608 00000A73 C8000000                	enter 0, 0
  2609                                  	; preparing a tail-call
  2610                                  	; preparing a non-tail-call
  2611 00000A77 488B4520                	mov rax, PARAM(0)	; param x
  2612 00000A7B 50                      	push rax
  2613 00000A7C 6A01                    	push 1	; arg count
  2614 00000A7E 488B0425[7E100000]      	mov rax, qword [free_var_41]	; free var caar
  2615 00000A86 803805                  	cmp byte [rax], T_undefined
  2616 00000A89 0F8408710100            	je L_error_fvar_undefined
  2617 00000A8F 803804                  	cmp byte [rax], T_closure
  2618 00000A92 0F8583710100            	jne L_error_non_closure
  2619 00000A98 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2620 00000A9B FF5009                  	call SOB_CLOSURE_CODE(rax)
  2621 00000A9E 50                      	push rax
  2622 00000A9F 6A01                    	push 1	; arg count
  2623 00000AA1 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  2624 00000AA9 803805                  	cmp byte [rax], T_undefined
  2625 00000AAC 0F84E5700100            	je L_error_fvar_undefined
  2626 00000AB2 803804                  	cmp byte [rax], T_closure
  2627 00000AB5 0F8560710100            	jne L_error_non_closure
  2628 00000ABB FF7001                  	push SOB_CLOSURE_ENV(rax)
  2629 00000ABE FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2630 00000AC1 FF7500                  	push qword[rbp]
  2631 00000AC4 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2632 00000AC7 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2633 00000ACB 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2634 00000ACF 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2635 00000AD3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2636 00000AD6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2637 00000AD9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2638 00000ADE 4983C103                	add r9, 3 	 ;for getting to the params
  2639 00000AE2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2640 00000AE6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2641                                  .L_tc_recycle_frame_loop_0005:
  2642 00000AE9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2643 00000AEC 7410                    	je .L_tc_recycle_frame_done_0005
  2644 00000AEE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2645 00000AF1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2646 00000AF4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2647 00000AF8 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2648 00000AFC EBEB                    	jmp .L_tc_recycle_frame_loop_0005
  2649                                  .L_tc_recycle_frame_done_0005:
  2650 00000AFE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2651 00000AFF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2652 00000B03 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2653 00000B06 C9                      	leave
  2654 00000B07 C21800                  	ret AND_KILL_FRAME(1)
  2655                                  .L_lambda_simple_end_0005:	; new closure is in rax
  2656 00000B0A 48890425[3A100000]      	mov qword [free_var_37], rax
  2657 00000B12 48B8-                   	mov rax, sob_void
  2657 00000B14 [0000000000000000] 
  2658                                  
  2659 00000B1C 4889C7                  	mov rdi, rax
  2660 00000B1F E8F5730100              	call print_sexpr_if_not_void
  2661 00000B24 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2662 00000B29 E896710100              	call malloc
  2663 00000B2E 50                      	push rax
  2664 00000B2F BF00000000              	mov rdi, 8 * 0	; new rib
  2665 00000B34 E88B710100              	call malloc
  2666 00000B39 50                      	push rax
  2667 00000B3A BF08000000              	mov rdi, 8 * 1	; extended env
  2668 00000B3F E880710100              	call malloc
  2669 00000B44 488B7D10                	mov rdi, ENV
  2670 00000B48 BE00000000              	mov rsi, 0
  2671 00000B4D BA01000000              	mov rdx, 1
  2672                                  .L_lambda_simple_env_loop_0006:	; ext_env[i + 1] <-- env[i]
  2673 00000B52 4883FE00                	cmp rsi, 0
  2674 00000B56 7410                    	je .L_lambda_simple_env_end_0006
  2675 00000B58 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2676 00000B5C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2677 00000B60 48FFC6                  	inc rsi
  2678 00000B63 48FFC2                  	inc rdx
  2679 00000B66 EBEA                    	jmp .L_lambda_simple_env_loop_0006
  2680                                  .L_lambda_simple_env_end_0006:
  2681 00000B68 5B                      	pop rbx
  2682 00000B69 BE00000000              	mov rsi, 0
  2683                                  .L_lambda_simple_params_loop_0006:	; copy params
  2684 00000B6E 4883FE00                	cmp rsi, 0
  2685 00000B72 740E                    	je .L_lambda_simple_params_end_0006
  2686 00000B74 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2687 00000B79 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2688 00000B7D 48FFC6                  	inc rsi
  2689 00000B80 EBEC                    	jmp .L_lambda_simple_params_loop_0006
  2690                                  .L_lambda_simple_params_end_0006:
  2691 00000B82 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2692 00000B85 4889C3                  	mov rbx, rax
  2693 00000B88 58                      	pop rax
  2694 00000B89 C60004                  	mov byte [rax], T_closure
  2695 00000B8C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2696 00000B90 48C74009[9D0B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0006
  2697 00000B98 E9AA000000              	jmp .L_lambda_simple_end_0006
  2698                                  .L_lambda_simple_code_0006:	; lambda-simple body
  2699 00000B9D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2700 00000BA3 740B                    	je .L_lambda_simple_arity_check_ok_0006
  2701 00000BA5 FF742410                	push qword [rsp + 8 * 2]
  2702 00000BA9 6A01                    	push 1
  2703 00000BAB E9CD700100              	jmp L_error_incorrect_arity_simple
  2704                                  .L_lambda_simple_arity_check_ok_0006:
  2705 00000BB0 C8000000                	enter 0, 0
  2706                                  	; preparing a tail-call
  2707                                  	; preparing a non-tail-call
  2708 00000BB4 488B4520                	mov rax, PARAM(0)	; param x
  2709 00000BB8 50                      	push rax
  2710 00000BB9 6A01                    	push 1	; arg count
  2711 00000BBB 488B0425[F5100000]      	mov rax, qword [free_var_48]	; free var cadr
  2712 00000BC3 803805                  	cmp byte [rax], T_undefined
  2713 00000BC6 0F84CB6F0100            	je L_error_fvar_undefined
  2714 00000BCC 803804                  	cmp byte [rax], T_closure
  2715 00000BCF 0F8546700100            	jne L_error_non_closure
  2716 00000BD5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2717 00000BD8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2718 00000BDB 50                      	push rax
  2719 00000BDC 6A01                    	push 1	; arg count
  2720 00000BDE 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  2721 00000BE6 803805                  	cmp byte [rax], T_undefined
  2722 00000BE9 0F84A86F0100            	je L_error_fvar_undefined
  2723 00000BEF 803804                  	cmp byte [rax], T_closure
  2724 00000BF2 0F8523700100            	jne L_error_non_closure
  2725 00000BF8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2726 00000BFB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2727 00000BFE FF7500                  	push qword[rbp]
  2728 00000C01 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2729 00000C04 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2730 00000C08 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2731 00000C0C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2732 00000C10 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2733 00000C13 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2734 00000C16 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2735 00000C1B 4983C103                	add r9, 3 	 ;for getting to the params
  2736 00000C1F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2737 00000C23 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2738                                  .L_tc_recycle_frame_loop_0006:
  2739 00000C26 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2740 00000C29 7410                    	je .L_tc_recycle_frame_done_0006
  2741 00000C2B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2742 00000C2E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2743 00000C31 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2744 00000C35 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2745 00000C39 EBEB                    	jmp .L_tc_recycle_frame_loop_0006
  2746                                  .L_tc_recycle_frame_done_0006:
  2747 00000C3B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2748 00000C3C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2749 00000C40 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2750 00000C43 C9                      	leave
  2751 00000C44 C21800                  	ret AND_KILL_FRAME(1)
  2752                                  .L_lambda_simple_end_0006:	; new closure is in rax
  2753 00000C47 48890425[6D100000]      	mov qword [free_var_40], rax
  2754 00000C4F 48B8-                   	mov rax, sob_void
  2754 00000C51 [0000000000000000] 
  2755                                  
  2756 00000C59 4889C7                  	mov rdi, rax
  2757 00000C5C E8B8720100              	call print_sexpr_if_not_void
  2758 00000C61 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2759 00000C66 E859700100              	call malloc
  2760 00000C6B 50                      	push rax
  2761 00000C6C BF00000000              	mov rdi, 8 * 0	; new rib
  2762 00000C71 E84E700100              	call malloc
  2763 00000C76 50                      	push rax
  2764 00000C77 BF08000000              	mov rdi, 8 * 1	; extended env
  2765 00000C7C E843700100              	call malloc
  2766 00000C81 488B7D10                	mov rdi, ENV
  2767 00000C85 BE00000000              	mov rsi, 0
  2768 00000C8A BA01000000              	mov rdx, 1
  2769                                  .L_lambda_simple_env_loop_0007:	; ext_env[i + 1] <-- env[i]
  2770 00000C8F 4883FE00                	cmp rsi, 0
  2771 00000C93 7410                    	je .L_lambda_simple_env_end_0007
  2772 00000C95 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2773 00000C99 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2774 00000C9D 48FFC6                  	inc rsi
  2775 00000CA0 48FFC2                  	inc rdx
  2776 00000CA3 EBEA                    	jmp .L_lambda_simple_env_loop_0007
  2777                                  .L_lambda_simple_env_end_0007:
  2778 00000CA5 5B                      	pop rbx
  2779 00000CA6 BE00000000              	mov rsi, 0
  2780                                  .L_lambda_simple_params_loop_0007:	; copy params
  2781 00000CAB 4883FE00                	cmp rsi, 0
  2782 00000CAF 740E                    	je .L_lambda_simple_params_end_0007
  2783 00000CB1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2784 00000CB6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2785 00000CBA 48FFC6                  	inc rsi
  2786 00000CBD EBEC                    	jmp .L_lambda_simple_params_loop_0007
  2787                                  .L_lambda_simple_params_end_0007:
  2788 00000CBF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2789 00000CC2 4889C3                  	mov rbx, rax
  2790 00000CC5 58                      	pop rax
  2791 00000CC6 C60004                  	mov byte [rax], T_closure
  2792 00000CC9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2793 00000CCD 48C74009[DA0C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0007
  2794 00000CD5 E9AA000000              	jmp .L_lambda_simple_end_0007
  2795                                  .L_lambda_simple_code_0007:	; lambda-simple body
  2796 00000CDA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2797 00000CE0 740B                    	je .L_lambda_simple_arity_check_ok_0007
  2798 00000CE2 FF742410                	push qword [rsp + 8 * 2]
  2799 00000CE6 6A01                    	push 1
  2800 00000CE8 E9906F0100              	jmp L_error_incorrect_arity_simple
  2801                                  .L_lambda_simple_arity_check_ok_0007:
  2802 00000CED C8000000                	enter 0, 0
  2803                                  	; preparing a tail-call
  2804                                  	; preparing a non-tail-call
  2805 00000CF1 488B4520                	mov rax, PARAM(0)	; param x
  2806 00000CF5 50                      	push rax
  2807 00000CF6 6A01                    	push 1	; arg count
  2808 00000CF8 488B0425[7D110000]      	mov rax, qword [free_var_56]	; free var cdar
  2809 00000D00 803805                  	cmp byte [rax], T_undefined
  2810 00000D03 0F848E6E0100            	je L_error_fvar_undefined
  2811 00000D09 803804                  	cmp byte [rax], T_closure
  2812 00000D0C 0F85096F0100            	jne L_error_non_closure
  2813 00000D12 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2814 00000D15 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2815 00000D18 50                      	push rax
  2816 00000D19 6A01                    	push 1	; arg count
  2817 00000D1B 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  2818 00000D23 803805                  	cmp byte [rax], T_undefined
  2819 00000D26 0F846B6E0100            	je L_error_fvar_undefined
  2820 00000D2C 803804                  	cmp byte [rax], T_closure
  2821 00000D2F 0F85E66E0100            	jne L_error_non_closure
  2822 00000D35 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2823 00000D38 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2824 00000D3B FF7500                  	push qword[rbp]
  2825 00000D3E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2826 00000D41 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2827 00000D45 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2828 00000D49 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2829 00000D4D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2830 00000D50 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2831 00000D53 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2832 00000D58 4983C103                	add r9, 3 	 ;for getting to the params
  2833 00000D5C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2834 00000D60 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2835                                  .L_tc_recycle_frame_loop_0007:
  2836 00000D63 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2837 00000D66 7410                    	je .L_tc_recycle_frame_done_0007
  2838 00000D68 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2839 00000D6B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2840 00000D6E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2841 00000D72 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2842 00000D76 EBEB                    	jmp .L_tc_recycle_frame_loop_0007
  2843                                  .L_tc_recycle_frame_done_0007:
  2844 00000D78 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2845 00000D79 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2846 00000D7D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2847 00000D80 C9                      	leave
  2848 00000D81 C21800                  	ret AND_KILL_FRAME(1)
  2849                                  .L_lambda_simple_end_0007:	; new closure is in rax
  2850 00000D84 48890425[B1100000]      	mov qword [free_var_44], rax
  2851 00000D8C 48B8-                   	mov rax, sob_void
  2851 00000D8E [0000000000000000] 
  2852                                  
  2853 00000D96 4889C7                  	mov rdi, rax
  2854 00000D99 E87B710100              	call print_sexpr_if_not_void
  2855 00000D9E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2856 00000DA3 E81C6F0100              	call malloc
  2857 00000DA8 50                      	push rax
  2858 00000DA9 BF00000000              	mov rdi, 8 * 0	; new rib
  2859 00000DAE E8116F0100              	call malloc
  2860 00000DB3 50                      	push rax
  2861 00000DB4 BF08000000              	mov rdi, 8 * 1	; extended env
  2862 00000DB9 E8066F0100              	call malloc
  2863 00000DBE 488B7D10                	mov rdi, ENV
  2864 00000DC2 BE00000000              	mov rsi, 0
  2865 00000DC7 BA01000000              	mov rdx, 1
  2866                                  .L_lambda_simple_env_loop_0008:	; ext_env[i + 1] <-- env[i]
  2867 00000DCC 4883FE00                	cmp rsi, 0
  2868 00000DD0 7410                    	je .L_lambda_simple_env_end_0008
  2869 00000DD2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2870 00000DD6 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2871 00000DDA 48FFC6                  	inc rsi
  2872 00000DDD 48FFC2                  	inc rdx
  2873 00000DE0 EBEA                    	jmp .L_lambda_simple_env_loop_0008
  2874                                  .L_lambda_simple_env_end_0008:
  2875 00000DE2 5B                      	pop rbx
  2876 00000DE3 BE00000000              	mov rsi, 0
  2877                                  .L_lambda_simple_params_loop_0008:	; copy params
  2878 00000DE8 4883FE00                	cmp rsi, 0
  2879 00000DEC 740E                    	je .L_lambda_simple_params_end_0008
  2880 00000DEE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2881 00000DF3 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2882 00000DF7 48FFC6                  	inc rsi
  2883 00000DFA EBEC                    	jmp .L_lambda_simple_params_loop_0008
  2884                                  .L_lambda_simple_params_end_0008:
  2885 00000DFC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2886 00000DFF 4889C3                  	mov rbx, rax
  2887 00000E02 58                      	pop rax
  2888 00000E03 C60004                  	mov byte [rax], T_closure
  2889 00000E06 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2890 00000E0A 48C74009[170E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0008
  2891 00000E12 E9AA000000              	jmp .L_lambda_simple_end_0008
  2892                                  .L_lambda_simple_code_0008:	; lambda-simple body
  2893 00000E17 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2894 00000E1D 740B                    	je .L_lambda_simple_arity_check_ok_0008
  2895 00000E1F FF742410                	push qword [rsp + 8 * 2]
  2896 00000E23 6A01                    	push 1
  2897 00000E25 E9536E0100              	jmp L_error_incorrect_arity_simple
  2898                                  .L_lambda_simple_arity_check_ok_0008:
  2899 00000E2A C8000000                	enter 0, 0
  2900                                  	; preparing a tail-call
  2901                                  	; preparing a non-tail-call
  2902 00000E2E 488B4520                	mov rax, PARAM(0)	; param x
  2903 00000E32 50                      	push rax
  2904 00000E33 6A01                    	push 1	; arg count
  2905 00000E35 488B0425[F4110000]      	mov rax, qword [free_var_63]	; free var cddr
  2906 00000E3D 803805                  	cmp byte [rax], T_undefined
  2907 00000E40 0F84516D0100            	je L_error_fvar_undefined
  2908 00000E46 803804                  	cmp byte [rax], T_closure
  2909 00000E49 0F85CC6D0100            	jne L_error_non_closure
  2910 00000E4F FF7001                  	push SOB_CLOSURE_ENV(rax)
  2911 00000E52 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2912 00000E55 50                      	push rax
  2913 00000E56 6A01                    	push 1	; arg count
  2914 00000E58 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  2915 00000E60 803805                  	cmp byte [rax], T_undefined
  2916 00000E63 0F842E6D0100            	je L_error_fvar_undefined
  2917 00000E69 803804                  	cmp byte [rax], T_closure
  2918 00000E6C 0F85A96D0100            	jne L_error_non_closure
  2919 00000E72 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2920 00000E75 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2921 00000E78 FF7500                  	push qword[rbp]
  2922 00000E7B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2923 00000E7E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2924 00000E82 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2925 00000E86 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2926 00000E8A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2927 00000E8D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2928 00000E90 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2929 00000E95 4983C103                	add r9, 3 	 ;for getting to the params
  2930 00000E99 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2931 00000E9D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2932                                  .L_tc_recycle_frame_loop_0008:
  2933 00000EA0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2934 00000EA3 7410                    	je .L_tc_recycle_frame_done_0008
  2935 00000EA5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2936 00000EA8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2937 00000EAB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2938 00000EAF 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2939 00000EB3 EBEB                    	jmp .L_tc_recycle_frame_loop_0008
  2940                                  .L_tc_recycle_frame_done_0008:
  2941 00000EB5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2942 00000EB6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2943 00000EBA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2944 00000EBD C9                      	leave
  2945 00000EBE C21800                  	ret AND_KILL_FRAME(1)
  2946                                  .L_lambda_simple_end_0008:	; new closure is in rax
  2947 00000EC1 48890425[E4100000]      	mov qword [free_var_47], rax
  2948 00000EC9 48B8-                   	mov rax, sob_void
  2948 00000ECB [0000000000000000] 
  2949                                  
  2950 00000ED3 4889C7                  	mov rdi, rax
  2951 00000ED6 E83E700100              	call print_sexpr_if_not_void
  2952 00000EDB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2953 00000EE0 E8DF6D0100              	call malloc
  2954 00000EE5 50                      	push rax
  2955 00000EE6 BF00000000              	mov rdi, 8 * 0	; new rib
  2956 00000EEB E8D46D0100              	call malloc
  2957 00000EF0 50                      	push rax
  2958 00000EF1 BF08000000              	mov rdi, 8 * 1	; extended env
  2959 00000EF6 E8C96D0100              	call malloc
  2960 00000EFB 488B7D10                	mov rdi, ENV
  2961 00000EFF BE00000000              	mov rsi, 0
  2962 00000F04 BA01000000              	mov rdx, 1
  2963                                  .L_lambda_simple_env_loop_0009:	; ext_env[i + 1] <-- env[i]
  2964 00000F09 4883FE00                	cmp rsi, 0
  2965 00000F0D 7410                    	je .L_lambda_simple_env_end_0009
  2966 00000F0F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2967 00000F13 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2968 00000F17 48FFC6                  	inc rsi
  2969 00000F1A 48FFC2                  	inc rdx
  2970 00000F1D EBEA                    	jmp .L_lambda_simple_env_loop_0009
  2971                                  .L_lambda_simple_env_end_0009:
  2972 00000F1F 5B                      	pop rbx
  2973 00000F20 BE00000000              	mov rsi, 0
  2974                                  .L_lambda_simple_params_loop_0009:	; copy params
  2975 00000F25 4883FE00                	cmp rsi, 0
  2976 00000F29 740E                    	je .L_lambda_simple_params_end_0009
  2977 00000F2B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2978 00000F30 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2979 00000F34 48FFC6                  	inc rsi
  2980 00000F37 EBEC                    	jmp .L_lambda_simple_params_loop_0009
  2981                                  .L_lambda_simple_params_end_0009:
  2982 00000F39 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2983 00000F3C 4889C3                  	mov rbx, rax
  2984 00000F3F 58                      	pop rax
  2985 00000F40 C60004                  	mov byte [rax], T_closure
  2986 00000F43 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2987 00000F47 48C74009[540F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0009
  2988 00000F4F E9AA000000              	jmp .L_lambda_simple_end_0009
  2989                                  .L_lambda_simple_code_0009:	; lambda-simple body
  2990 00000F54 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2991 00000F5A 740B                    	je .L_lambda_simple_arity_check_ok_0009
  2992 00000F5C FF742410                	push qword [rsp + 8 * 2]
  2993 00000F60 6A01                    	push 1
  2994 00000F62 E9166D0100              	jmp L_error_incorrect_arity_simple
  2995                                  .L_lambda_simple_arity_check_ok_0009:
  2996 00000F67 C8000000                	enter 0, 0
  2997                                  	; preparing a tail-call
  2998                                  	; preparing a non-tail-call
  2999 00000F6B 488B4520                	mov rax, PARAM(0)	; param x
  3000 00000F6F 50                      	push rax
  3001 00000F70 6A01                    	push 1	; arg count
  3002 00000F72 488B0425[7E100000]      	mov rax, qword [free_var_41]	; free var caar
  3003 00000F7A 803805                  	cmp byte [rax], T_undefined
  3004 00000F7D 0F84146C0100            	je L_error_fvar_undefined
  3005 00000F83 803804                  	cmp byte [rax], T_closure
  3006 00000F86 0F858F6C0100            	jne L_error_non_closure
  3007 00000F8C FF7001                  	push SOB_CLOSURE_ENV(rax)
  3008 00000F8F FF5009                  	call SOB_CLOSURE_CODE(rax)
  3009 00000F92 50                      	push rax
  3010 00000F93 6A01                    	push 1	; arg count
  3011 00000F95 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  3012 00000F9D 803805                  	cmp byte [rax], T_undefined
  3013 00000FA0 0F84F16B0100            	je L_error_fvar_undefined
  3014 00000FA6 803804                  	cmp byte [rax], T_closure
  3015 00000FA9 0F856C6C0100            	jne L_error_non_closure
  3016 00000FAF FF7001                  	push SOB_CLOSURE_ENV(rax)
  3017 00000FB2 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3018 00000FB5 FF7500                  	push qword[rbp]
  3019 00000FB8 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3020 00000FBB 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3021 00000FBF 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3022 00000FC3 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3023 00000FC7 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3024 00000FCA 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3025 00000FCD 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3026 00000FD2 4983C103                	add r9, 3 	 ;for getting to the params
  3027 00000FD6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3028 00000FDA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3029                                  .L_tc_recycle_frame_loop_0009:
  3030 00000FDD 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3031 00000FE0 7410                    	je .L_tc_recycle_frame_done_0009
  3032 00000FE2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3033 00000FE5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3034 00000FE8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3035 00000FEC 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3036 00000FF0 EBEB                    	jmp .L_tc_recycle_frame_loop_0009
  3037                                  .L_tc_recycle_frame_done_0009:
  3038 00000FF2 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3039 00000FF3 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3040 00000FF7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3041 00000FFA C9                      	leave
  3042 00000FFB C21800                  	ret AND_KILL_FRAME(1)
  3043                                  .L_lambda_simple_end_0009:	; new closure is in rax
  3044 00000FFE 48890425[39110000]      	mov qword [free_var_52], rax
  3045 00001006 48B8-                   	mov rax, sob_void
  3045 00001008 [0000000000000000] 
  3046                                  
  3047 00001010 4889C7                  	mov rdi, rax
  3048 00001013 E8016F0100              	call print_sexpr_if_not_void
  3049 00001018 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3050 0000101D E8A26C0100              	call malloc
  3051 00001022 50                      	push rax
  3052 00001023 BF00000000              	mov rdi, 8 * 0	; new rib
  3053 00001028 E8976C0100              	call malloc
  3054 0000102D 50                      	push rax
  3055 0000102E BF08000000              	mov rdi, 8 * 1	; extended env
  3056 00001033 E88C6C0100              	call malloc
  3057 00001038 488B7D10                	mov rdi, ENV
  3058 0000103C BE00000000              	mov rsi, 0
  3059 00001041 BA01000000              	mov rdx, 1
  3060                                  .L_lambda_simple_env_loop_000a:	; ext_env[i + 1] <-- env[i]
  3061 00001046 4883FE00                	cmp rsi, 0
  3062 0000104A 7410                    	je .L_lambda_simple_env_end_000a
  3063 0000104C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3064 00001050 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3065 00001054 48FFC6                  	inc rsi
  3066 00001057 48FFC2                  	inc rdx
  3067 0000105A EBEA                    	jmp .L_lambda_simple_env_loop_000a
  3068                                  .L_lambda_simple_env_end_000a:
  3069 0000105C 5B                      	pop rbx
  3070 0000105D BE00000000              	mov rsi, 0
  3071                                  .L_lambda_simple_params_loop_000a:	; copy params
  3072 00001062 4883FE00                	cmp rsi, 0
  3073 00001066 740E                    	je .L_lambda_simple_params_end_000a
  3074 00001068 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3075 0000106D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3076 00001071 48FFC6                  	inc rsi
  3077 00001074 EBEC                    	jmp .L_lambda_simple_params_loop_000a
  3078                                  .L_lambda_simple_params_end_000a:
  3079 00001076 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3080 00001079 4889C3                  	mov rbx, rax
  3081 0000107C 58                      	pop rax
  3082 0000107D C60004                  	mov byte [rax], T_closure
  3083 00001080 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3084 00001084 48C74009[91100000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000a
  3085 0000108C E9AA000000              	jmp .L_lambda_simple_end_000a
  3086                                  .L_lambda_simple_code_000a:	; lambda-simple body
  3087 00001091 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3088 00001097 740B                    	je .L_lambda_simple_arity_check_ok_000a
  3089 00001099 FF742410                	push qword [rsp + 8 * 2]
  3090 0000109D 6A01                    	push 1
  3091 0000109F E9D96B0100              	jmp L_error_incorrect_arity_simple
  3092                                  .L_lambda_simple_arity_check_ok_000a:
  3093 000010A4 C8000000                	enter 0, 0
  3094                                  	; preparing a tail-call
  3095                                  	; preparing a non-tail-call
  3096 000010A8 488B4520                	mov rax, PARAM(0)	; param x
  3097 000010AC 50                      	push rax
  3098 000010AD 6A01                    	push 1	; arg count
  3099 000010AF 488B0425[F5100000]      	mov rax, qword [free_var_48]	; free var cadr
  3100 000010B7 803805                  	cmp byte [rax], T_undefined
  3101 000010BA 0F84D76A0100            	je L_error_fvar_undefined
  3102 000010C0 803804                  	cmp byte [rax], T_closure
  3103 000010C3 0F85526B0100            	jne L_error_non_closure
  3104 000010C9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3105 000010CC FF5009                  	call SOB_CLOSURE_CODE(rax)
  3106 000010CF 50                      	push rax
  3107 000010D0 6A01                    	push 1	; arg count
  3108 000010D2 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  3109 000010DA 803805                  	cmp byte [rax], T_undefined
  3110 000010DD 0F84B46A0100            	je L_error_fvar_undefined
  3111 000010E3 803804                  	cmp byte [rax], T_closure
  3112 000010E6 0F852F6B0100            	jne L_error_non_closure
  3113 000010EC FF7001                  	push SOB_CLOSURE_ENV(rax)
  3114 000010EF FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3115 000010F2 FF7500                  	push qword[rbp]
  3116 000010F5 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3117 000010F8 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3118 000010FC 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3119 00001100 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3120 00001104 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3121 00001107 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3122 0000110A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3123 0000110F 4983C103                	add r9, 3 	 ;for getting to the params
  3124 00001113 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3125 00001117 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3126                                  .L_tc_recycle_frame_loop_000a:
  3127 0000111A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3128 0000111D 7410                    	je .L_tc_recycle_frame_done_000a
  3129 0000111F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3130 00001122 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3131 00001125 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3132 00001129 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3133 0000112D EBEB                    	jmp .L_tc_recycle_frame_loop_000a
  3134                                  .L_tc_recycle_frame_done_000a:
  3135 0000112F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3136 00001130 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3137 00001134 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3138 00001137 C9                      	leave
  3139 00001138 C21800                  	ret AND_KILL_FRAME(1)
  3140                                  .L_lambda_simple_end_000a:	; new closure is in rax
  3141 0000113B 48890425[6C110000]      	mov qword [free_var_55], rax
  3142 00001143 48B8-                   	mov rax, sob_void
  3142 00001145 [0000000000000000] 
  3143                                  
  3144 0000114D 4889C7                  	mov rdi, rax
  3145 00001150 E8C46D0100              	call print_sexpr_if_not_void
  3146 00001155 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3147 0000115A E8656B0100              	call malloc
  3148 0000115F 50                      	push rax
  3149 00001160 BF00000000              	mov rdi, 8 * 0	; new rib
  3150 00001165 E85A6B0100              	call malloc
  3151 0000116A 50                      	push rax
  3152 0000116B BF08000000              	mov rdi, 8 * 1	; extended env
  3153 00001170 E84F6B0100              	call malloc
  3154 00001175 488B7D10                	mov rdi, ENV
  3155 00001179 BE00000000              	mov rsi, 0
  3156 0000117E BA01000000              	mov rdx, 1
  3157                                  .L_lambda_simple_env_loop_000b:	; ext_env[i + 1] <-- env[i]
  3158 00001183 4883FE00                	cmp rsi, 0
  3159 00001187 7410                    	je .L_lambda_simple_env_end_000b
  3160 00001189 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3161 0000118D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3162 00001191 48FFC6                  	inc rsi
  3163 00001194 48FFC2                  	inc rdx
  3164 00001197 EBEA                    	jmp .L_lambda_simple_env_loop_000b
  3165                                  .L_lambda_simple_env_end_000b:
  3166 00001199 5B                      	pop rbx
  3167 0000119A BE00000000              	mov rsi, 0
  3168                                  .L_lambda_simple_params_loop_000b:	; copy params
  3169 0000119F 4883FE00                	cmp rsi, 0
  3170 000011A3 740E                    	je .L_lambda_simple_params_end_000b
  3171 000011A5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3172 000011AA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3173 000011AE 48FFC6                  	inc rsi
  3174 000011B1 EBEC                    	jmp .L_lambda_simple_params_loop_000b
  3175                                  .L_lambda_simple_params_end_000b:
  3176 000011B3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3177 000011B6 4889C3                  	mov rbx, rax
  3178 000011B9 58                      	pop rax
  3179 000011BA C60004                  	mov byte [rax], T_closure
  3180 000011BD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3181 000011C1 48C74009[CE110000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000b
  3182 000011C9 E9AA000000              	jmp .L_lambda_simple_end_000b
  3183                                  .L_lambda_simple_code_000b:	; lambda-simple body
  3184 000011CE 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3185 000011D4 740B                    	je .L_lambda_simple_arity_check_ok_000b
  3186 000011D6 FF742410                	push qword [rsp + 8 * 2]
  3187 000011DA 6A01                    	push 1
  3188 000011DC E99C6A0100              	jmp L_error_incorrect_arity_simple
  3189                                  .L_lambda_simple_arity_check_ok_000b:
  3190 000011E1 C8000000                	enter 0, 0
  3191                                  	; preparing a tail-call
  3192                                  	; preparing a non-tail-call
  3193 000011E5 488B4520                	mov rax, PARAM(0)	; param x
  3194 000011E9 50                      	push rax
  3195 000011EA 6A01                    	push 1	; arg count
  3196 000011EC 488B0425[7D110000]      	mov rax, qword [free_var_56]	; free var cdar
  3197 000011F4 803805                  	cmp byte [rax], T_undefined
  3198 000011F7 0F849A690100            	je L_error_fvar_undefined
  3199 000011FD 803804                  	cmp byte [rax], T_closure
  3200 00001200 0F85156A0100            	jne L_error_non_closure
  3201 00001206 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3202 00001209 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3203 0000120C 50                      	push rax
  3204 0000120D 6A01                    	push 1	; arg count
  3205 0000120F 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  3206 00001217 803805                  	cmp byte [rax], T_undefined
  3207 0000121A 0F8477690100            	je L_error_fvar_undefined
  3208 00001220 803804                  	cmp byte [rax], T_closure
  3209 00001223 0F85F2690100            	jne L_error_non_closure
  3210 00001229 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3211 0000122C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3212 0000122F FF7500                  	push qword[rbp]
  3213 00001232 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3214 00001235 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3215 00001239 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3216 0000123D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3217 00001241 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3218 00001244 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3219 00001247 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3220 0000124C 4983C103                	add r9, 3 	 ;for getting to the params
  3221 00001250 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3222 00001254 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3223                                  .L_tc_recycle_frame_loop_000b:
  3224 00001257 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3225 0000125A 7410                    	je .L_tc_recycle_frame_done_000b
  3226 0000125C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3227 0000125F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3228 00001262 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3229 00001266 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3230 0000126A EBEB                    	jmp .L_tc_recycle_frame_loop_000b
  3231                                  .L_tc_recycle_frame_done_000b:
  3232 0000126C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3233 0000126D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3234 00001271 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3235 00001274 C9                      	leave
  3236 00001275 C21800                  	ret AND_KILL_FRAME(1)
  3237                                  .L_lambda_simple_end_000b:	; new closure is in rax
  3238 00001278 48890425[B0110000]      	mov qword [free_var_59], rax
  3239 00001280 48B8-                   	mov rax, sob_void
  3239 00001282 [0000000000000000] 
  3240                                  
  3241 0000128A 4889C7                  	mov rdi, rax
  3242 0000128D E8876C0100              	call print_sexpr_if_not_void
  3243 00001292 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3244 00001297 E8286A0100              	call malloc
  3245 0000129C 50                      	push rax
  3246 0000129D BF00000000              	mov rdi, 8 * 0	; new rib
  3247 000012A2 E81D6A0100              	call malloc
  3248 000012A7 50                      	push rax
  3249 000012A8 BF08000000              	mov rdi, 8 * 1	; extended env
  3250 000012AD E8126A0100              	call malloc
  3251 000012B2 488B7D10                	mov rdi, ENV
  3252 000012B6 BE00000000              	mov rsi, 0
  3253 000012BB BA01000000              	mov rdx, 1
  3254                                  .L_lambda_simple_env_loop_000c:	; ext_env[i + 1] <-- env[i]
  3255 000012C0 4883FE00                	cmp rsi, 0
  3256 000012C4 7410                    	je .L_lambda_simple_env_end_000c
  3257 000012C6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3258 000012CA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3259 000012CE 48FFC6                  	inc rsi
  3260 000012D1 48FFC2                  	inc rdx
  3261 000012D4 EBEA                    	jmp .L_lambda_simple_env_loop_000c
  3262                                  .L_lambda_simple_env_end_000c:
  3263 000012D6 5B                      	pop rbx
  3264 000012D7 BE00000000              	mov rsi, 0
  3265                                  .L_lambda_simple_params_loop_000c:	; copy params
  3266 000012DC 4883FE00                	cmp rsi, 0
  3267 000012E0 740E                    	je .L_lambda_simple_params_end_000c
  3268 000012E2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3269 000012E7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3270 000012EB 48FFC6                  	inc rsi
  3271 000012EE EBEC                    	jmp .L_lambda_simple_params_loop_000c
  3272                                  .L_lambda_simple_params_end_000c:
  3273 000012F0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3274 000012F3 4889C3                  	mov rbx, rax
  3275 000012F6 58                      	pop rax
  3276 000012F7 C60004                  	mov byte [rax], T_closure
  3277 000012FA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3278 000012FE 48C74009[0B130000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000c
  3279 00001306 E9AA000000              	jmp .L_lambda_simple_end_000c
  3280                                  .L_lambda_simple_code_000c:	; lambda-simple body
  3281 0000130B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3282 00001311 740B                    	je .L_lambda_simple_arity_check_ok_000c
  3283 00001313 FF742410                	push qword [rsp + 8 * 2]
  3284 00001317 6A01                    	push 1
  3285 00001319 E95F690100              	jmp L_error_incorrect_arity_simple
  3286                                  .L_lambda_simple_arity_check_ok_000c:
  3287 0000131E C8000000                	enter 0, 0
  3288                                  	; preparing a tail-call
  3289                                  	; preparing a non-tail-call
  3290 00001322 488B4520                	mov rax, PARAM(0)	; param x
  3291 00001326 50                      	push rax
  3292 00001327 6A01                    	push 1	; arg count
  3293 00001329 488B0425[F4110000]      	mov rax, qword [free_var_63]	; free var cddr
  3294 00001331 803805                  	cmp byte [rax], T_undefined
  3295 00001334 0F845D680100            	je L_error_fvar_undefined
  3296 0000133A 803804                  	cmp byte [rax], T_closure
  3297 0000133D 0F85D8680100            	jne L_error_non_closure
  3298 00001343 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3299 00001346 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3300 00001349 50                      	push rax
  3301 0000134A 6A01                    	push 1	; arg count
  3302 0000134C 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  3303 00001354 803805                  	cmp byte [rax], T_undefined
  3304 00001357 0F843A680100            	je L_error_fvar_undefined
  3305 0000135D 803804                  	cmp byte [rax], T_closure
  3306 00001360 0F85B5680100            	jne L_error_non_closure
  3307 00001366 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3308 00001369 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3309 0000136C FF7500                  	push qword[rbp]
  3310 0000136F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3311 00001372 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3312 00001376 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3313 0000137A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3314 0000137E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3315 00001381 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3316 00001384 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3317 00001389 4983C103                	add r9, 3 	 ;for getting to the params
  3318 0000138D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3319 00001391 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3320                                  .L_tc_recycle_frame_loop_000c:
  3321 00001394 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3322 00001397 7410                    	je .L_tc_recycle_frame_done_000c
  3323 00001399 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3324 0000139C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3325 0000139F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3326 000013A3 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3327 000013A7 EBEB                    	jmp .L_tc_recycle_frame_loop_000c
  3328                                  .L_tc_recycle_frame_done_000c:
  3329 000013A9 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3330 000013AA 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3331 000013AE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3332 000013B1 C9                      	leave
  3333 000013B2 C21800                  	ret AND_KILL_FRAME(1)
  3334                                  .L_lambda_simple_end_000c:	; new closure is in rax
  3335 000013B5 48890425[E3110000]      	mov qword [free_var_62], rax
  3336 000013BD 48B8-                   	mov rax, sob_void
  3336 000013BF [0000000000000000] 
  3337                                  
  3338 000013C7 4889C7                  	mov rdi, rax
  3339 000013CA E84A6B0100              	call print_sexpr_if_not_void
  3340 000013CF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3341 000013D4 E8EB680100              	call malloc
  3342 000013D9 50                      	push rax
  3343 000013DA BF00000000              	mov rdi, 8 * 0	; new rib
  3344 000013DF E8E0680100              	call malloc
  3345 000013E4 50                      	push rax
  3346 000013E5 BF08000000              	mov rdi, 8 * 1	; extended env
  3347 000013EA E8D5680100              	call malloc
  3348 000013EF 488B7D10                	mov rdi, ENV
  3349 000013F3 BE00000000              	mov rsi, 0
  3350 000013F8 BA01000000              	mov rdx, 1
  3351                                  .L_lambda_simple_env_loop_000d:	; ext_env[i + 1] <-- env[i]
  3352 000013FD 4883FE00                	cmp rsi, 0
  3353 00001401 7410                    	je .L_lambda_simple_env_end_000d
  3354 00001403 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3355 00001407 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3356 0000140B 48FFC6                  	inc rsi
  3357 0000140E 48FFC2                  	inc rdx
  3358 00001411 EBEA                    	jmp .L_lambda_simple_env_loop_000d
  3359                                  .L_lambda_simple_env_end_000d:
  3360 00001413 5B                      	pop rbx
  3361 00001414 BE00000000              	mov rsi, 0
  3362                                  .L_lambda_simple_params_loop_000d:	; copy params
  3363 00001419 4883FE00                	cmp rsi, 0
  3364 0000141D 740E                    	je .L_lambda_simple_params_end_000d
  3365 0000141F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3366 00001424 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3367 00001428 48FFC6                  	inc rsi
  3368 0000142B EBEC                    	jmp .L_lambda_simple_params_loop_000d
  3369                                  .L_lambda_simple_params_end_000d:
  3370 0000142D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3371 00001430 4889C3                  	mov rbx, rax
  3372 00001433 58                      	pop rax
  3373 00001434 C60004                  	mov byte [rax], T_closure
  3374 00001437 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3375 0000143B 48C74009[48140000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000d
  3376 00001443 E9AA000000              	jmp .L_lambda_simple_end_000d
  3377                                  .L_lambda_simple_code_000d:	; lambda-simple body
  3378 00001448 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3379 0000144E 740B                    	je .L_lambda_simple_arity_check_ok_000d
  3380 00001450 FF742410                	push qword [rsp + 8 * 2]
  3381 00001454 6A01                    	push 1
  3382 00001456 E922680100              	jmp L_error_incorrect_arity_simple
  3383                                  .L_lambda_simple_arity_check_ok_000d:
  3384 0000145B C8000000                	enter 0, 0
  3385                                  	; preparing a tail-call
  3386                                  	; preparing a non-tail-call
  3387 0000145F 488B4520                	mov rax, PARAM(0)	; param x
  3388 00001463 50                      	push rax
  3389 00001464 6A01                    	push 1	; arg count
  3390 00001466 488B0425[7E100000]      	mov rax, qword [free_var_41]	; free var caar
  3391 0000146E 803805                  	cmp byte [rax], T_undefined
  3392 00001471 0F8420670100            	je L_error_fvar_undefined
  3393 00001477 803804                  	cmp byte [rax], T_closure
  3394 0000147A 0F859B670100            	jne L_error_non_closure
  3395 00001480 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3396 00001483 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3397 00001486 50                      	push rax
  3398 00001487 6A01                    	push 1	; arg count
  3399 00001489 488B0425[7E100000]      	mov rax, qword [free_var_41]	; free var caar
  3400 00001491 803805                  	cmp byte [rax], T_undefined
  3401 00001494 0F84FD660100            	je L_error_fvar_undefined
  3402 0000149A 803804                  	cmp byte [rax], T_closure
  3403 0000149D 0F8578670100            	jne L_error_non_closure
  3404 000014A3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3405 000014A6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3406 000014A9 FF7500                  	push qword[rbp]
  3407 000014AC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3408 000014AF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3409 000014B3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3410 000014B7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3411 000014BB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3412 000014BE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3413 000014C1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3414 000014C6 4983C103                	add r9, 3 	 ;for getting to the params
  3415 000014CA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3416 000014CE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3417                                  .L_tc_recycle_frame_loop_000d:
  3418 000014D1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3419 000014D4 7410                    	je .L_tc_recycle_frame_done_000d
  3420 000014D6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3421 000014D9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3422 000014DC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3423 000014E0 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3424 000014E4 EBEB                    	jmp .L_tc_recycle_frame_loop_000d
  3425                                  .L_tc_recycle_frame_done_000d:
  3426 000014E6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3427 000014E7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3428 000014EB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3429 000014EE C9                      	leave
  3430 000014EF C21800                  	ret AND_KILL_FRAME(1)
  3431                                  .L_lambda_simple_end_000d:	; new closure is in rax
  3432 000014F2 48890425[18100000]      	mov qword [free_var_35], rax
  3433 000014FA 48B8-                   	mov rax, sob_void
  3433 000014FC [0000000000000000] 
  3434                                  
  3435 00001504 4889C7                  	mov rdi, rax
  3436 00001507 E80D6A0100              	call print_sexpr_if_not_void
  3437 0000150C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3438 00001511 E8AE670100              	call malloc
  3439 00001516 50                      	push rax
  3440 00001517 BF00000000              	mov rdi, 8 * 0	; new rib
  3441 0000151C E8A3670100              	call malloc
  3442 00001521 50                      	push rax
  3443 00001522 BF08000000              	mov rdi, 8 * 1	; extended env
  3444 00001527 E898670100              	call malloc
  3445 0000152C 488B7D10                	mov rdi, ENV
  3446 00001530 BE00000000              	mov rsi, 0
  3447 00001535 BA01000000              	mov rdx, 1
  3448                                  .L_lambda_simple_env_loop_000e:	; ext_env[i + 1] <-- env[i]
  3449 0000153A 4883FE00                	cmp rsi, 0
  3450 0000153E 7410                    	je .L_lambda_simple_env_end_000e
  3451 00001540 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3452 00001544 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3453 00001548 48FFC6                  	inc rsi
  3454 0000154B 48FFC2                  	inc rdx
  3455 0000154E EBEA                    	jmp .L_lambda_simple_env_loop_000e
  3456                                  .L_lambda_simple_env_end_000e:
  3457 00001550 5B                      	pop rbx
  3458 00001551 BE00000000              	mov rsi, 0
  3459                                  .L_lambda_simple_params_loop_000e:	; copy params
  3460 00001556 4883FE00                	cmp rsi, 0
  3461 0000155A 740E                    	je .L_lambda_simple_params_end_000e
  3462 0000155C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3463 00001561 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3464 00001565 48FFC6                  	inc rsi
  3465 00001568 EBEC                    	jmp .L_lambda_simple_params_loop_000e
  3466                                  .L_lambda_simple_params_end_000e:
  3467 0000156A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3468 0000156D 4889C3                  	mov rbx, rax
  3469 00001570 58                      	pop rax
  3470 00001571 C60004                  	mov byte [rax], T_closure
  3471 00001574 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3472 00001578 48C74009[85150000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000e
  3473 00001580 E9AA000000              	jmp .L_lambda_simple_end_000e
  3474                                  .L_lambda_simple_code_000e:	; lambda-simple body
  3475 00001585 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3476 0000158B 740B                    	je .L_lambda_simple_arity_check_ok_000e
  3477 0000158D FF742410                	push qword [rsp + 8 * 2]
  3478 00001591 6A01                    	push 1
  3479 00001593 E9E5660100              	jmp L_error_incorrect_arity_simple
  3480                                  .L_lambda_simple_arity_check_ok_000e:
  3481 00001598 C8000000                	enter 0, 0
  3482                                  	; preparing a tail-call
  3483                                  	; preparing a non-tail-call
  3484 0000159C 488B4520                	mov rax, PARAM(0)	; param x
  3485 000015A0 50                      	push rax
  3486 000015A1 6A01                    	push 1	; arg count
  3487 000015A3 488B0425[F5100000]      	mov rax, qword [free_var_48]	; free var cadr
  3488 000015AB 803805                  	cmp byte [rax], T_undefined
  3489 000015AE 0F84E3650100            	je L_error_fvar_undefined
  3490 000015B4 803804                  	cmp byte [rax], T_closure
  3491 000015B7 0F855E660100            	jne L_error_non_closure
  3492 000015BD FF7001                  	push SOB_CLOSURE_ENV(rax)
  3493 000015C0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3494 000015C3 50                      	push rax
  3495 000015C4 6A01                    	push 1	; arg count
  3496 000015C6 488B0425[7E100000]      	mov rax, qword [free_var_41]	; free var caar
  3497 000015CE 803805                  	cmp byte [rax], T_undefined
  3498 000015D1 0F84C0650100            	je L_error_fvar_undefined
  3499 000015D7 803804                  	cmp byte [rax], T_closure
  3500 000015DA 0F853B660100            	jne L_error_non_closure
  3501 000015E0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3502 000015E3 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3503 000015E6 FF7500                  	push qword[rbp]
  3504 000015E9 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3505 000015EC 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3506 000015F0 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3507 000015F4 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3508 000015F8 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3509 000015FB 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3510 000015FE 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3511 00001603 4983C103                	add r9, 3 	 ;for getting to the params
  3512 00001607 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3513 0000160B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3514                                  .L_tc_recycle_frame_loop_000e:
  3515 0000160E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3516 00001611 7410                    	je .L_tc_recycle_frame_done_000e
  3517 00001613 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3518 00001616 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3519 00001619 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3520 0000161D 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3521 00001621 EBEB                    	jmp .L_tc_recycle_frame_loop_000e
  3522                                  .L_tc_recycle_frame_done_000e:
  3523 00001623 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3524 00001624 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3525 00001628 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3526 0000162B C9                      	leave
  3527 0000162C C21800                  	ret AND_KILL_FRAME(1)
  3528                                  .L_lambda_simple_end_000e:	; new closure is in rax
  3529 0000162F 48890425[29100000]      	mov qword [free_var_36], rax
  3530 00001637 48B8-                   	mov rax, sob_void
  3530 00001639 [0000000000000000] 
  3531                                  
  3532 00001641 4889C7                  	mov rdi, rax
  3533 00001644 E8D0680100              	call print_sexpr_if_not_void
  3534 00001649 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3535 0000164E E871660100              	call malloc
  3536 00001653 50                      	push rax
  3537 00001654 BF00000000              	mov rdi, 8 * 0	; new rib
  3538 00001659 E866660100              	call malloc
  3539 0000165E 50                      	push rax
  3540 0000165F BF08000000              	mov rdi, 8 * 1	; extended env
  3541 00001664 E85B660100              	call malloc
  3542 00001669 488B7D10                	mov rdi, ENV
  3543 0000166D BE00000000              	mov rsi, 0
  3544 00001672 BA01000000              	mov rdx, 1
  3545                                  .L_lambda_simple_env_loop_000f:	; ext_env[i + 1] <-- env[i]
  3546 00001677 4883FE00                	cmp rsi, 0
  3547 0000167B 7410                    	je .L_lambda_simple_env_end_000f
  3548 0000167D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3549 00001681 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3550 00001685 48FFC6                  	inc rsi
  3551 00001688 48FFC2                  	inc rdx
  3552 0000168B EBEA                    	jmp .L_lambda_simple_env_loop_000f
  3553                                  .L_lambda_simple_env_end_000f:
  3554 0000168D 5B                      	pop rbx
  3555 0000168E BE00000000              	mov rsi, 0
  3556                                  .L_lambda_simple_params_loop_000f:	; copy params
  3557 00001693 4883FE00                	cmp rsi, 0
  3558 00001697 740E                    	je .L_lambda_simple_params_end_000f
  3559 00001699 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3560 0000169E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3561 000016A2 48FFC6                  	inc rsi
  3562 000016A5 EBEC                    	jmp .L_lambda_simple_params_loop_000f
  3563                                  .L_lambda_simple_params_end_000f:
  3564 000016A7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3565 000016AA 4889C3                  	mov rbx, rax
  3566 000016AD 58                      	pop rax
  3567 000016AE C60004                  	mov byte [rax], T_closure
  3568 000016B1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3569 000016B5 48C74009[C2160000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000f
  3570 000016BD E9AA000000              	jmp .L_lambda_simple_end_000f
  3571                                  .L_lambda_simple_code_000f:	; lambda-simple body
  3572 000016C2 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3573 000016C8 740B                    	je .L_lambda_simple_arity_check_ok_000f
  3574 000016CA FF742410                	push qword [rsp + 8 * 2]
  3575 000016CE 6A01                    	push 1
  3576 000016D0 E9A8650100              	jmp L_error_incorrect_arity_simple
  3577                                  .L_lambda_simple_arity_check_ok_000f:
  3578 000016D5 C8000000                	enter 0, 0
  3579                                  	; preparing a tail-call
  3580                                  	; preparing a non-tail-call
  3581 000016D9 488B4520                	mov rax, PARAM(0)	; param x
  3582 000016DD 50                      	push rax
  3583 000016DE 6A01                    	push 1	; arg count
  3584 000016E0 488B0425[7D110000]      	mov rax, qword [free_var_56]	; free var cdar
  3585 000016E8 803805                  	cmp byte [rax], T_undefined
  3586 000016EB 0F84A6640100            	je L_error_fvar_undefined
  3587 000016F1 803804                  	cmp byte [rax], T_closure
  3588 000016F4 0F8521650100            	jne L_error_non_closure
  3589 000016FA FF7001                  	push SOB_CLOSURE_ENV(rax)
  3590 000016FD FF5009                  	call SOB_CLOSURE_CODE(rax)
  3591 00001700 50                      	push rax
  3592 00001701 6A01                    	push 1	; arg count
  3593 00001703 488B0425[7E100000]      	mov rax, qword [free_var_41]	; free var caar
  3594 0000170B 803805                  	cmp byte [rax], T_undefined
  3595 0000170E 0F8483640100            	je L_error_fvar_undefined
  3596 00001714 803804                  	cmp byte [rax], T_closure
  3597 00001717 0F85FE640100            	jne L_error_non_closure
  3598 0000171D FF7001                  	push SOB_CLOSURE_ENV(rax)
  3599 00001720 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3600 00001723 FF7500                  	push qword[rbp]
  3601 00001726 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3602 00001729 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3603 0000172D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3604 00001731 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3605 00001735 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3606 00001738 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3607 0000173B 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3608 00001740 4983C103                	add r9, 3 	 ;for getting to the params
  3609 00001744 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3610 00001748 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3611                                  .L_tc_recycle_frame_loop_000f:
  3612 0000174B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3613 0000174E 7410                    	je .L_tc_recycle_frame_done_000f
  3614 00001750 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3615 00001753 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3616 00001756 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3617 0000175A 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3618 0000175E EBEB                    	jmp .L_tc_recycle_frame_loop_000f
  3619                                  .L_tc_recycle_frame_done_000f:
  3620 00001760 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3621 00001761 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3622 00001765 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3623 00001768 C9                      	leave
  3624 00001769 C21800                  	ret AND_KILL_FRAME(1)
  3625                                  .L_lambda_simple_end_000f:	; new closure is in rax
  3626 0000176C 48890425[4B100000]      	mov qword [free_var_38], rax
  3627 00001774 48B8-                   	mov rax, sob_void
  3627 00001776 [0000000000000000] 
  3628                                  
  3629 0000177E 4889C7                  	mov rdi, rax
  3630 00001781 E893670100              	call print_sexpr_if_not_void
  3631 00001786 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3632 0000178B E834650100              	call malloc
  3633 00001790 50                      	push rax
  3634 00001791 BF00000000              	mov rdi, 8 * 0	; new rib
  3635 00001796 E829650100              	call malloc
  3636 0000179B 50                      	push rax
  3637 0000179C BF08000000              	mov rdi, 8 * 1	; extended env
  3638 000017A1 E81E650100              	call malloc
  3639 000017A6 488B7D10                	mov rdi, ENV
  3640 000017AA BE00000000              	mov rsi, 0
  3641 000017AF BA01000000              	mov rdx, 1
  3642                                  .L_lambda_simple_env_loop_0010:	; ext_env[i + 1] <-- env[i]
  3643 000017B4 4883FE00                	cmp rsi, 0
  3644 000017B8 7410                    	je .L_lambda_simple_env_end_0010
  3645 000017BA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3646 000017BE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3647 000017C2 48FFC6                  	inc rsi
  3648 000017C5 48FFC2                  	inc rdx
  3649 000017C8 EBEA                    	jmp .L_lambda_simple_env_loop_0010
  3650                                  .L_lambda_simple_env_end_0010:
  3651 000017CA 5B                      	pop rbx
  3652 000017CB BE00000000              	mov rsi, 0
  3653                                  .L_lambda_simple_params_loop_0010:	; copy params
  3654 000017D0 4883FE00                	cmp rsi, 0
  3655 000017D4 740E                    	je .L_lambda_simple_params_end_0010
  3656 000017D6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3657 000017DB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3658 000017DF 48FFC6                  	inc rsi
  3659 000017E2 EBEC                    	jmp .L_lambda_simple_params_loop_0010
  3660                                  .L_lambda_simple_params_end_0010:
  3661 000017E4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3662 000017E7 4889C3                  	mov rbx, rax
  3663 000017EA 58                      	pop rax
  3664 000017EB C60004                  	mov byte [rax], T_closure
  3665 000017EE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3666 000017F2 48C74009[FF170000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0010
  3667 000017FA E9AA000000              	jmp .L_lambda_simple_end_0010
  3668                                  .L_lambda_simple_code_0010:	; lambda-simple body
  3669 000017FF 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3670 00001805 740B                    	je .L_lambda_simple_arity_check_ok_0010
  3671 00001807 FF742410                	push qword [rsp + 8 * 2]
  3672 0000180B 6A01                    	push 1
  3673 0000180D E96B640100              	jmp L_error_incorrect_arity_simple
  3674                                  .L_lambda_simple_arity_check_ok_0010:
  3675 00001812 C8000000                	enter 0, 0
  3676                                  	; preparing a tail-call
  3677                                  	; preparing a non-tail-call
  3678 00001816 488B4520                	mov rax, PARAM(0)	; param x
  3679 0000181A 50                      	push rax
  3680 0000181B 6A01                    	push 1	; arg count
  3681 0000181D 488B0425[F4110000]      	mov rax, qword [free_var_63]	; free var cddr
  3682 00001825 803805                  	cmp byte [rax], T_undefined
  3683 00001828 0F8469630100            	je L_error_fvar_undefined
  3684 0000182E 803804                  	cmp byte [rax], T_closure
  3685 00001831 0F85E4630100            	jne L_error_non_closure
  3686 00001837 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3687 0000183A FF5009                  	call SOB_CLOSURE_CODE(rax)
  3688 0000183D 50                      	push rax
  3689 0000183E 6A01                    	push 1	; arg count
  3690 00001840 488B0425[7E100000]      	mov rax, qword [free_var_41]	; free var caar
  3691 00001848 803805                  	cmp byte [rax], T_undefined
  3692 0000184B 0F8446630100            	je L_error_fvar_undefined
  3693 00001851 803804                  	cmp byte [rax], T_closure
  3694 00001854 0F85C1630100            	jne L_error_non_closure
  3695 0000185A FF7001                  	push SOB_CLOSURE_ENV(rax)
  3696 0000185D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3697 00001860 FF7500                  	push qword[rbp]
  3698 00001863 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3699 00001866 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3700 0000186A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3701 0000186E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3702 00001872 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3703 00001875 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3704 00001878 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3705 0000187D 4983C103                	add r9, 3 	 ;for getting to the params
  3706 00001881 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3707 00001885 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3708                                  .L_tc_recycle_frame_loop_0010:
  3709 00001888 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3710 0000188B 7410                    	je .L_tc_recycle_frame_done_0010
  3711 0000188D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3712 00001890 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3713 00001893 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3714 00001897 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3715 0000189B EBEB                    	jmp .L_tc_recycle_frame_loop_0010
  3716                                  .L_tc_recycle_frame_done_0010:
  3717 0000189D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3718 0000189E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3719 000018A2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3720 000018A5 C9                      	leave
  3721 000018A6 C21800                  	ret AND_KILL_FRAME(1)
  3722                                  .L_lambda_simple_end_0010:	; new closure is in rax
  3723 000018A9 48890425[5C100000]      	mov qword [free_var_39], rax
  3724 000018B1 48B8-                   	mov rax, sob_void
  3724 000018B3 [0000000000000000] 
  3725                                  
  3726 000018BB 4889C7                  	mov rdi, rax
  3727 000018BE E856660100              	call print_sexpr_if_not_void
  3728 000018C3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3729 000018C8 E8F7630100              	call malloc
  3730 000018CD 50                      	push rax
  3731 000018CE BF00000000              	mov rdi, 8 * 0	; new rib
  3732 000018D3 E8EC630100              	call malloc
  3733 000018D8 50                      	push rax
  3734 000018D9 BF08000000              	mov rdi, 8 * 1	; extended env
  3735 000018DE E8E1630100              	call malloc
  3736 000018E3 488B7D10                	mov rdi, ENV
  3737 000018E7 BE00000000              	mov rsi, 0
  3738 000018EC BA01000000              	mov rdx, 1
  3739                                  .L_lambda_simple_env_loop_0011:	; ext_env[i + 1] <-- env[i]
  3740 000018F1 4883FE00                	cmp rsi, 0
  3741 000018F5 7410                    	je .L_lambda_simple_env_end_0011
  3742 000018F7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3743 000018FB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3744 000018FF 48FFC6                  	inc rsi
  3745 00001902 48FFC2                  	inc rdx
  3746 00001905 EBEA                    	jmp .L_lambda_simple_env_loop_0011
  3747                                  .L_lambda_simple_env_end_0011:
  3748 00001907 5B                      	pop rbx
  3749 00001908 BE00000000              	mov rsi, 0
  3750                                  .L_lambda_simple_params_loop_0011:	; copy params
  3751 0000190D 4883FE00                	cmp rsi, 0
  3752 00001911 740E                    	je .L_lambda_simple_params_end_0011
  3753 00001913 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3754 00001918 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3755 0000191C 48FFC6                  	inc rsi
  3756 0000191F EBEC                    	jmp .L_lambda_simple_params_loop_0011
  3757                                  .L_lambda_simple_params_end_0011:
  3758 00001921 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3759 00001924 4889C3                  	mov rbx, rax
  3760 00001927 58                      	pop rax
  3761 00001928 C60004                  	mov byte [rax], T_closure
  3762 0000192B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3763 0000192F 48C74009[3C190000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0011
  3764 00001937 E9AA000000              	jmp .L_lambda_simple_end_0011
  3765                                  .L_lambda_simple_code_0011:	; lambda-simple body
  3766 0000193C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3767 00001942 740B                    	je .L_lambda_simple_arity_check_ok_0011
  3768 00001944 FF742410                	push qword [rsp + 8 * 2]
  3769 00001948 6A01                    	push 1
  3770 0000194A E92E630100              	jmp L_error_incorrect_arity_simple
  3771                                  .L_lambda_simple_arity_check_ok_0011:
  3772 0000194F C8000000                	enter 0, 0
  3773                                  	; preparing a tail-call
  3774                                  	; preparing a non-tail-call
  3775 00001953 488B4520                	mov rax, PARAM(0)	; param x
  3776 00001957 50                      	push rax
  3777 00001958 6A01                    	push 1	; arg count
  3778 0000195A 488B0425[7E100000]      	mov rax, qword [free_var_41]	; free var caar
  3779 00001962 803805                  	cmp byte [rax], T_undefined
  3780 00001965 0F842C620100            	je L_error_fvar_undefined
  3781 0000196B 803804                  	cmp byte [rax], T_closure
  3782 0000196E 0F85A7620100            	jne L_error_non_closure
  3783 00001974 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3784 00001977 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3785 0000197A 50                      	push rax
  3786 0000197B 6A01                    	push 1	; arg count
  3787 0000197D 488B0425[F5100000]      	mov rax, qword [free_var_48]	; free var cadr
  3788 00001985 803805                  	cmp byte [rax], T_undefined
  3789 00001988 0F8409620100            	je L_error_fvar_undefined
  3790 0000198E 803804                  	cmp byte [rax], T_closure
  3791 00001991 0F8584620100            	jne L_error_non_closure
  3792 00001997 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3793 0000199A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3794 0000199D FF7500                  	push qword[rbp]
  3795 000019A0 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3796 000019A3 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3797 000019A7 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3798 000019AB 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3799 000019AF 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3800 000019B2 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3801 000019B5 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3802 000019BA 4983C103                	add r9, 3 	 ;for getting to the params
  3803 000019BE 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3804 000019C2 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3805                                  .L_tc_recycle_frame_loop_0011:
  3806 000019C5 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3807 000019C8 7410                    	je .L_tc_recycle_frame_done_0011
  3808 000019CA 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3809 000019CD 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3810 000019D0 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3811 000019D4 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3812 000019D8 EBEB                    	jmp .L_tc_recycle_frame_loop_0011
  3813                                  .L_tc_recycle_frame_done_0011:
  3814 000019DA 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3815 000019DB 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3816 000019DF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3817 000019E2 C9                      	leave
  3818 000019E3 C21800                  	ret AND_KILL_FRAME(1)
  3819                                  .L_lambda_simple_end_0011:	; new closure is in rax
  3820 000019E6 48890425[8F100000]      	mov qword [free_var_42], rax
  3821 000019EE 48B8-                   	mov rax, sob_void
  3821 000019F0 [0000000000000000] 
  3822                                  
  3823 000019F8 4889C7                  	mov rdi, rax
  3824 000019FB E819650100              	call print_sexpr_if_not_void
  3825 00001A00 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3826 00001A05 E8BA620100              	call malloc
  3827 00001A0A 50                      	push rax
  3828 00001A0B BF00000000              	mov rdi, 8 * 0	; new rib
  3829 00001A10 E8AF620100              	call malloc
  3830 00001A15 50                      	push rax
  3831 00001A16 BF08000000              	mov rdi, 8 * 1	; extended env
  3832 00001A1B E8A4620100              	call malloc
  3833 00001A20 488B7D10                	mov rdi, ENV
  3834 00001A24 BE00000000              	mov rsi, 0
  3835 00001A29 BA01000000              	mov rdx, 1
  3836                                  .L_lambda_simple_env_loop_0012:	; ext_env[i + 1] <-- env[i]
  3837 00001A2E 4883FE00                	cmp rsi, 0
  3838 00001A32 7410                    	je .L_lambda_simple_env_end_0012
  3839 00001A34 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3840 00001A38 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3841 00001A3C 48FFC6                  	inc rsi
  3842 00001A3F 48FFC2                  	inc rdx
  3843 00001A42 EBEA                    	jmp .L_lambda_simple_env_loop_0012
  3844                                  .L_lambda_simple_env_end_0012:
  3845 00001A44 5B                      	pop rbx
  3846 00001A45 BE00000000              	mov rsi, 0
  3847                                  .L_lambda_simple_params_loop_0012:	; copy params
  3848 00001A4A 4883FE00                	cmp rsi, 0
  3849 00001A4E 740E                    	je .L_lambda_simple_params_end_0012
  3850 00001A50 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3851 00001A55 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3852 00001A59 48FFC6                  	inc rsi
  3853 00001A5C EBEC                    	jmp .L_lambda_simple_params_loop_0012
  3854                                  .L_lambda_simple_params_end_0012:
  3855 00001A5E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3856 00001A61 4889C3                  	mov rbx, rax
  3857 00001A64 58                      	pop rax
  3858 00001A65 C60004                  	mov byte [rax], T_closure
  3859 00001A68 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3860 00001A6C 48C74009[791A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0012
  3861 00001A74 E9AA000000              	jmp .L_lambda_simple_end_0012
  3862                                  .L_lambda_simple_code_0012:	; lambda-simple body
  3863 00001A79 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3864 00001A7F 740B                    	je .L_lambda_simple_arity_check_ok_0012
  3865 00001A81 FF742410                	push qword [rsp + 8 * 2]
  3866 00001A85 6A01                    	push 1
  3867 00001A87 E9F1610100              	jmp L_error_incorrect_arity_simple
  3868                                  .L_lambda_simple_arity_check_ok_0012:
  3869 00001A8C C8000000                	enter 0, 0
  3870                                  	; preparing a tail-call
  3871                                  	; preparing a non-tail-call
  3872 00001A90 488B4520                	mov rax, PARAM(0)	; param x
  3873 00001A94 50                      	push rax
  3874 00001A95 6A01                    	push 1	; arg count
  3875 00001A97 488B0425[F5100000]      	mov rax, qword [free_var_48]	; free var cadr
  3876 00001A9F 803805                  	cmp byte [rax], T_undefined
  3877 00001AA2 0F84EF600100            	je L_error_fvar_undefined
  3878 00001AA8 803804                  	cmp byte [rax], T_closure
  3879 00001AAB 0F856A610100            	jne L_error_non_closure
  3880 00001AB1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3881 00001AB4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3882 00001AB7 50                      	push rax
  3883 00001AB8 6A01                    	push 1	; arg count
  3884 00001ABA 488B0425[F5100000]      	mov rax, qword [free_var_48]	; free var cadr
  3885 00001AC2 803805                  	cmp byte [rax], T_undefined
  3886 00001AC5 0F84CC600100            	je L_error_fvar_undefined
  3887 00001ACB 803804                  	cmp byte [rax], T_closure
  3888 00001ACE 0F8547610100            	jne L_error_non_closure
  3889 00001AD4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3890 00001AD7 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3891 00001ADA FF7500                  	push qword[rbp]
  3892 00001ADD 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3893 00001AE0 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3894 00001AE4 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3895 00001AE8 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3896 00001AEC 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3897 00001AEF 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3898 00001AF2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3899 00001AF7 4983C103                	add r9, 3 	 ;for getting to the params
  3900 00001AFB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3901 00001AFF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3902                                  .L_tc_recycle_frame_loop_0012:
  3903 00001B02 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3904 00001B05 7410                    	je .L_tc_recycle_frame_done_0012
  3905 00001B07 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3906 00001B0A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3907 00001B0D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3908 00001B11 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3909 00001B15 EBEB                    	jmp .L_tc_recycle_frame_loop_0012
  3910                                  .L_tc_recycle_frame_done_0012:
  3911 00001B17 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3912 00001B18 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3913 00001B1C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3914 00001B1F C9                      	leave
  3915 00001B20 C21800                  	ret AND_KILL_FRAME(1)
  3916                                  .L_lambda_simple_end_0012:	; new closure is in rax
  3917 00001B23 48890425[A0100000]      	mov qword [free_var_43], rax
  3918 00001B2B 48B8-                   	mov rax, sob_void
  3918 00001B2D [0000000000000000] 
  3919                                  
  3920 00001B35 4889C7                  	mov rdi, rax
  3921 00001B38 E8DC630100              	call print_sexpr_if_not_void
  3922 00001B3D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3923 00001B42 E87D610100              	call malloc
  3924 00001B47 50                      	push rax
  3925 00001B48 BF00000000              	mov rdi, 8 * 0	; new rib
  3926 00001B4D E872610100              	call malloc
  3927 00001B52 50                      	push rax
  3928 00001B53 BF08000000              	mov rdi, 8 * 1	; extended env
  3929 00001B58 E867610100              	call malloc
  3930 00001B5D 488B7D10                	mov rdi, ENV
  3931 00001B61 BE00000000              	mov rsi, 0
  3932 00001B66 BA01000000              	mov rdx, 1
  3933                                  .L_lambda_simple_env_loop_0013:	; ext_env[i + 1] <-- env[i]
  3934 00001B6B 4883FE00                	cmp rsi, 0
  3935 00001B6F 7410                    	je .L_lambda_simple_env_end_0013
  3936 00001B71 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3937 00001B75 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3938 00001B79 48FFC6                  	inc rsi
  3939 00001B7C 48FFC2                  	inc rdx
  3940 00001B7F EBEA                    	jmp .L_lambda_simple_env_loop_0013
  3941                                  .L_lambda_simple_env_end_0013:
  3942 00001B81 5B                      	pop rbx
  3943 00001B82 BE00000000              	mov rsi, 0
  3944                                  .L_lambda_simple_params_loop_0013:	; copy params
  3945 00001B87 4883FE00                	cmp rsi, 0
  3946 00001B8B 740E                    	je .L_lambda_simple_params_end_0013
  3947 00001B8D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3948 00001B92 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3949 00001B96 48FFC6                  	inc rsi
  3950 00001B99 EBEC                    	jmp .L_lambda_simple_params_loop_0013
  3951                                  .L_lambda_simple_params_end_0013:
  3952 00001B9B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3953 00001B9E 4889C3                  	mov rbx, rax
  3954 00001BA1 58                      	pop rax
  3955 00001BA2 C60004                  	mov byte [rax], T_closure
  3956 00001BA5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3957 00001BA9 48C74009[B61B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0013
  3958 00001BB1 E9AA000000              	jmp .L_lambda_simple_end_0013
  3959                                  .L_lambda_simple_code_0013:	; lambda-simple body
  3960 00001BB6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3961 00001BBC 740B                    	je .L_lambda_simple_arity_check_ok_0013
  3962 00001BBE FF742410                	push qword [rsp + 8 * 2]
  3963 00001BC2 6A01                    	push 1
  3964 00001BC4 E9B4600100              	jmp L_error_incorrect_arity_simple
  3965                                  .L_lambda_simple_arity_check_ok_0013:
  3966 00001BC9 C8000000                	enter 0, 0
  3967                                  	; preparing a tail-call
  3968                                  	; preparing a non-tail-call
  3969 00001BCD 488B4520                	mov rax, PARAM(0)	; param x
  3970 00001BD1 50                      	push rax
  3971 00001BD2 6A01                    	push 1	; arg count
  3972 00001BD4 488B0425[7D110000]      	mov rax, qword [free_var_56]	; free var cdar
  3973 00001BDC 803805                  	cmp byte [rax], T_undefined
  3974 00001BDF 0F84B25F0100            	je L_error_fvar_undefined
  3975 00001BE5 803804                  	cmp byte [rax], T_closure
  3976 00001BE8 0F852D600100            	jne L_error_non_closure
  3977 00001BEE FF7001                  	push SOB_CLOSURE_ENV(rax)
  3978 00001BF1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3979 00001BF4 50                      	push rax
  3980 00001BF5 6A01                    	push 1	; arg count
  3981 00001BF7 488B0425[F5100000]      	mov rax, qword [free_var_48]	; free var cadr
  3982 00001BFF 803805                  	cmp byte [rax], T_undefined
  3983 00001C02 0F848F5F0100            	je L_error_fvar_undefined
  3984 00001C08 803804                  	cmp byte [rax], T_closure
  3985 00001C0B 0F850A600100            	jne L_error_non_closure
  3986 00001C11 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3987 00001C14 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3988 00001C17 FF7500                  	push qword[rbp]
  3989 00001C1A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3990 00001C1D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3991 00001C21 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3992 00001C25 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3993 00001C29 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3994 00001C2C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3995 00001C2F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3996 00001C34 4983C103                	add r9, 3 	 ;for getting to the params
  3997 00001C38 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3998 00001C3C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3999                                  .L_tc_recycle_frame_loop_0013:
  4000 00001C3F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4001 00001C42 7410                    	je .L_tc_recycle_frame_done_0013
  4002 00001C44 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4003 00001C47 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4004 00001C4A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4005 00001C4E 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4006 00001C52 EBEB                    	jmp .L_tc_recycle_frame_loop_0013
  4007                                  .L_tc_recycle_frame_done_0013:
  4008 00001C54 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4009 00001C55 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4010 00001C59 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4011 00001C5C C9                      	leave
  4012 00001C5D C21800                  	ret AND_KILL_FRAME(1)
  4013                                  .L_lambda_simple_end_0013:	; new closure is in rax
  4014 00001C60 48890425[C2100000]      	mov qword [free_var_45], rax
  4015 00001C68 48B8-                   	mov rax, sob_void
  4015 00001C6A [0000000000000000] 
  4016                                  
  4017 00001C72 4889C7                  	mov rdi, rax
  4018 00001C75 E89F620100              	call print_sexpr_if_not_void
  4019 00001C7A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4020 00001C7F E840600100              	call malloc
  4021 00001C84 50                      	push rax
  4022 00001C85 BF00000000              	mov rdi, 8 * 0	; new rib
  4023 00001C8A E835600100              	call malloc
  4024 00001C8F 50                      	push rax
  4025 00001C90 BF08000000              	mov rdi, 8 * 1	; extended env
  4026 00001C95 E82A600100              	call malloc
  4027 00001C9A 488B7D10                	mov rdi, ENV
  4028 00001C9E BE00000000              	mov rsi, 0
  4029 00001CA3 BA01000000              	mov rdx, 1
  4030                                  .L_lambda_simple_env_loop_0014:	; ext_env[i + 1] <-- env[i]
  4031 00001CA8 4883FE00                	cmp rsi, 0
  4032 00001CAC 7410                    	je .L_lambda_simple_env_end_0014
  4033 00001CAE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4034 00001CB2 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4035 00001CB6 48FFC6                  	inc rsi
  4036 00001CB9 48FFC2                  	inc rdx
  4037 00001CBC EBEA                    	jmp .L_lambda_simple_env_loop_0014
  4038                                  .L_lambda_simple_env_end_0014:
  4039 00001CBE 5B                      	pop rbx
  4040 00001CBF BE00000000              	mov rsi, 0
  4041                                  .L_lambda_simple_params_loop_0014:	; copy params
  4042 00001CC4 4883FE00                	cmp rsi, 0
  4043 00001CC8 740E                    	je .L_lambda_simple_params_end_0014
  4044 00001CCA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4045 00001CCF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4046 00001CD3 48FFC6                  	inc rsi
  4047 00001CD6 EBEC                    	jmp .L_lambda_simple_params_loop_0014
  4048                                  .L_lambda_simple_params_end_0014:
  4049 00001CD8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4050 00001CDB 4889C3                  	mov rbx, rax
  4051 00001CDE 58                      	pop rax
  4052 00001CDF C60004                  	mov byte [rax], T_closure
  4053 00001CE2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4054 00001CE6 48C74009[F31C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0014
  4055 00001CEE E9AA000000              	jmp .L_lambda_simple_end_0014
  4056                                  .L_lambda_simple_code_0014:	; lambda-simple body
  4057 00001CF3 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4058 00001CF9 740B                    	je .L_lambda_simple_arity_check_ok_0014
  4059 00001CFB FF742410                	push qword [rsp + 8 * 2]
  4060 00001CFF 6A01                    	push 1
  4061 00001D01 E9775F0100              	jmp L_error_incorrect_arity_simple
  4062                                  .L_lambda_simple_arity_check_ok_0014:
  4063 00001D06 C8000000                	enter 0, 0
  4064                                  	; preparing a tail-call
  4065                                  	; preparing a non-tail-call
  4066 00001D0A 488B4520                	mov rax, PARAM(0)	; param x
  4067 00001D0E 50                      	push rax
  4068 00001D0F 6A01                    	push 1	; arg count
  4069 00001D11 488B0425[F4110000]      	mov rax, qword [free_var_63]	; free var cddr
  4070 00001D19 803805                  	cmp byte [rax], T_undefined
  4071 00001D1C 0F84755E0100            	je L_error_fvar_undefined
  4072 00001D22 803804                  	cmp byte [rax], T_closure
  4073 00001D25 0F85F05E0100            	jne L_error_non_closure
  4074 00001D2B FF7001                  	push SOB_CLOSURE_ENV(rax)
  4075 00001D2E FF5009                  	call SOB_CLOSURE_CODE(rax)
  4076 00001D31 50                      	push rax
  4077 00001D32 6A01                    	push 1	; arg count
  4078 00001D34 488B0425[F5100000]      	mov rax, qword [free_var_48]	; free var cadr
  4079 00001D3C 803805                  	cmp byte [rax], T_undefined
  4080 00001D3F 0F84525E0100            	je L_error_fvar_undefined
  4081 00001D45 803804                  	cmp byte [rax], T_closure
  4082 00001D48 0F85CD5E0100            	jne L_error_non_closure
  4083 00001D4E FF7001                  	push SOB_CLOSURE_ENV(rax)
  4084 00001D51 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4085 00001D54 FF7500                  	push qword[rbp]
  4086 00001D57 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4087 00001D5A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4088 00001D5E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4089 00001D62 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4090 00001D66 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4091 00001D69 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4092 00001D6C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4093 00001D71 4983C103                	add r9, 3 	 ;for getting to the params
  4094 00001D75 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4095 00001D79 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4096                                  .L_tc_recycle_frame_loop_0014:
  4097 00001D7C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4098 00001D7F 7410                    	je .L_tc_recycle_frame_done_0014
  4099 00001D81 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4100 00001D84 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4101 00001D87 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4102 00001D8B 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4103 00001D8F EBEB                    	jmp .L_tc_recycle_frame_loop_0014
  4104                                  .L_tc_recycle_frame_done_0014:
  4105 00001D91 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4106 00001D92 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4107 00001D96 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4108 00001D99 C9                      	leave
  4109 00001D9A C21800                  	ret AND_KILL_FRAME(1)
  4110                                  .L_lambda_simple_end_0014:	; new closure is in rax
  4111 00001D9D 48890425[D3100000]      	mov qword [free_var_46], rax
  4112 00001DA5 48B8-                   	mov rax, sob_void
  4112 00001DA7 [0000000000000000] 
  4113                                  
  4114 00001DAF 4889C7                  	mov rdi, rax
  4115 00001DB2 E862610100              	call print_sexpr_if_not_void
  4116 00001DB7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4117 00001DBC E8035F0100              	call malloc
  4118 00001DC1 50                      	push rax
  4119 00001DC2 BF00000000              	mov rdi, 8 * 0	; new rib
  4120 00001DC7 E8F85E0100              	call malloc
  4121 00001DCC 50                      	push rax
  4122 00001DCD BF08000000              	mov rdi, 8 * 1	; extended env
  4123 00001DD2 E8ED5E0100              	call malloc
  4124 00001DD7 488B7D10                	mov rdi, ENV
  4125 00001DDB BE00000000              	mov rsi, 0
  4126 00001DE0 BA01000000              	mov rdx, 1
  4127                                  .L_lambda_simple_env_loop_0015:	; ext_env[i + 1] <-- env[i]
  4128 00001DE5 4883FE00                	cmp rsi, 0
  4129 00001DE9 7410                    	je .L_lambda_simple_env_end_0015
  4130 00001DEB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4131 00001DEF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4132 00001DF3 48FFC6                  	inc rsi
  4133 00001DF6 48FFC2                  	inc rdx
  4134 00001DF9 EBEA                    	jmp .L_lambda_simple_env_loop_0015
  4135                                  .L_lambda_simple_env_end_0015:
  4136 00001DFB 5B                      	pop rbx
  4137 00001DFC BE00000000              	mov rsi, 0
  4138                                  .L_lambda_simple_params_loop_0015:	; copy params
  4139 00001E01 4883FE00                	cmp rsi, 0
  4140 00001E05 740E                    	je .L_lambda_simple_params_end_0015
  4141 00001E07 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4142 00001E0C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4143 00001E10 48FFC6                  	inc rsi
  4144 00001E13 EBEC                    	jmp .L_lambda_simple_params_loop_0015
  4145                                  .L_lambda_simple_params_end_0015:
  4146 00001E15 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4147 00001E18 4889C3                  	mov rbx, rax
  4148 00001E1B 58                      	pop rax
  4149 00001E1C C60004                  	mov byte [rax], T_closure
  4150 00001E1F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4151 00001E23 48C74009[301E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0015
  4152 00001E2B E9AA000000              	jmp .L_lambda_simple_end_0015
  4153                                  .L_lambda_simple_code_0015:	; lambda-simple body
  4154 00001E30 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4155 00001E36 740B                    	je .L_lambda_simple_arity_check_ok_0015
  4156 00001E38 FF742410                	push qword [rsp + 8 * 2]
  4157 00001E3C 6A01                    	push 1
  4158 00001E3E E93A5E0100              	jmp L_error_incorrect_arity_simple
  4159                                  .L_lambda_simple_arity_check_ok_0015:
  4160 00001E43 C8000000                	enter 0, 0
  4161                                  	; preparing a tail-call
  4162                                  	; preparing a non-tail-call
  4163 00001E47 488B4520                	mov rax, PARAM(0)	; param x
  4164 00001E4B 50                      	push rax
  4165 00001E4C 6A01                    	push 1	; arg count
  4166 00001E4E 488B0425[7E100000]      	mov rax, qword [free_var_41]	; free var caar
  4167 00001E56 803805                  	cmp byte [rax], T_undefined
  4168 00001E59 0F84385D0100            	je L_error_fvar_undefined
  4169 00001E5F 803804                  	cmp byte [rax], T_closure
  4170 00001E62 0F85B35D0100            	jne L_error_non_closure
  4171 00001E68 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4172 00001E6B FF5009                  	call SOB_CLOSURE_CODE(rax)
  4173 00001E6E 50                      	push rax
  4174 00001E6F 6A01                    	push 1	; arg count
  4175 00001E71 488B0425[7D110000]      	mov rax, qword [free_var_56]	; free var cdar
  4176 00001E79 803805                  	cmp byte [rax], T_undefined
  4177 00001E7C 0F84155D0100            	je L_error_fvar_undefined
  4178 00001E82 803804                  	cmp byte [rax], T_closure
  4179 00001E85 0F85905D0100            	jne L_error_non_closure
  4180 00001E8B FF7001                  	push SOB_CLOSURE_ENV(rax)
  4181 00001E8E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4182 00001E91 FF7500                  	push qword[rbp]
  4183 00001E94 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4184 00001E97 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4185 00001E9B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4186 00001E9F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4187 00001EA3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4188 00001EA6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4189 00001EA9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4190 00001EAE 4983C103                	add r9, 3 	 ;for getting to the params
  4191 00001EB2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4192 00001EB6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4193                                  .L_tc_recycle_frame_loop_0015:
  4194 00001EB9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4195 00001EBC 7410                    	je .L_tc_recycle_frame_done_0015
  4196 00001EBE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4197 00001EC1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4198 00001EC4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4199 00001EC8 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4200 00001ECC EBEB                    	jmp .L_tc_recycle_frame_loop_0015
  4201                                  .L_tc_recycle_frame_done_0015:
  4202 00001ECE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4203 00001ECF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4204 00001ED3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4205 00001ED6 C9                      	leave
  4206 00001ED7 C21800                  	ret AND_KILL_FRAME(1)
  4207                                  .L_lambda_simple_end_0015:	; new closure is in rax
  4208 00001EDA 48890425[17110000]      	mov qword [free_var_50], rax
  4209 00001EE2 48B8-                   	mov rax, sob_void
  4209 00001EE4 [0000000000000000] 
  4210                                  
  4211 00001EEC 4889C7                  	mov rdi, rax
  4212 00001EEF E825600100              	call print_sexpr_if_not_void
  4213 00001EF4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4214 00001EF9 E8C65D0100              	call malloc
  4215 00001EFE 50                      	push rax
  4216 00001EFF BF00000000              	mov rdi, 8 * 0	; new rib
  4217 00001F04 E8BB5D0100              	call malloc
  4218 00001F09 50                      	push rax
  4219 00001F0A BF08000000              	mov rdi, 8 * 1	; extended env
  4220 00001F0F E8B05D0100              	call malloc
  4221 00001F14 488B7D10                	mov rdi, ENV
  4222 00001F18 BE00000000              	mov rsi, 0
  4223 00001F1D BA01000000              	mov rdx, 1
  4224                                  .L_lambda_simple_env_loop_0016:	; ext_env[i + 1] <-- env[i]
  4225 00001F22 4883FE00                	cmp rsi, 0
  4226 00001F26 7410                    	je .L_lambda_simple_env_end_0016
  4227 00001F28 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4228 00001F2C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4229 00001F30 48FFC6                  	inc rsi
  4230 00001F33 48FFC2                  	inc rdx
  4231 00001F36 EBEA                    	jmp .L_lambda_simple_env_loop_0016
  4232                                  .L_lambda_simple_env_end_0016:
  4233 00001F38 5B                      	pop rbx
  4234 00001F39 BE00000000              	mov rsi, 0
  4235                                  .L_lambda_simple_params_loop_0016:	; copy params
  4236 00001F3E 4883FE00                	cmp rsi, 0
  4237 00001F42 740E                    	je .L_lambda_simple_params_end_0016
  4238 00001F44 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4239 00001F49 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4240 00001F4D 48FFC6                  	inc rsi
  4241 00001F50 EBEC                    	jmp .L_lambda_simple_params_loop_0016
  4242                                  .L_lambda_simple_params_end_0016:
  4243 00001F52 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4244 00001F55 4889C3                  	mov rbx, rax
  4245 00001F58 58                      	pop rax
  4246 00001F59 C60004                  	mov byte [rax], T_closure
  4247 00001F5C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4248 00001F60 48C74009[6D1F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0016
  4249 00001F68 E9AA000000              	jmp .L_lambda_simple_end_0016
  4250                                  .L_lambda_simple_code_0016:	; lambda-simple body
  4251 00001F6D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4252 00001F73 740B                    	je .L_lambda_simple_arity_check_ok_0016
  4253 00001F75 FF742410                	push qword [rsp + 8 * 2]
  4254 00001F79 6A01                    	push 1
  4255 00001F7B E9FD5C0100              	jmp L_error_incorrect_arity_simple
  4256                                  .L_lambda_simple_arity_check_ok_0016:
  4257 00001F80 C8000000                	enter 0, 0
  4258                                  	; preparing a tail-call
  4259                                  	; preparing a non-tail-call
  4260 00001F84 488B4520                	mov rax, PARAM(0)	; param x
  4261 00001F88 50                      	push rax
  4262 00001F89 6A01                    	push 1	; arg count
  4263 00001F8B 488B0425[F5100000]      	mov rax, qword [free_var_48]	; free var cadr
  4264 00001F93 803805                  	cmp byte [rax], T_undefined
  4265 00001F96 0F84FB5B0100            	je L_error_fvar_undefined
  4266 00001F9C 803804                  	cmp byte [rax], T_closure
  4267 00001F9F 0F85765C0100            	jne L_error_non_closure
  4268 00001FA5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4269 00001FA8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4270 00001FAB 50                      	push rax
  4271 00001FAC 6A01                    	push 1	; arg count
  4272 00001FAE 488B0425[7D110000]      	mov rax, qword [free_var_56]	; free var cdar
  4273 00001FB6 803805                  	cmp byte [rax], T_undefined
  4274 00001FB9 0F84D85B0100            	je L_error_fvar_undefined
  4275 00001FBF 803804                  	cmp byte [rax], T_closure
  4276 00001FC2 0F85535C0100            	jne L_error_non_closure
  4277 00001FC8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4278 00001FCB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4279 00001FCE FF7500                  	push qword[rbp]
  4280 00001FD1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4281 00001FD4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4282 00001FD8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4283 00001FDC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4284 00001FE0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4285 00001FE3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4286 00001FE6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4287 00001FEB 4983C103                	add r9, 3 	 ;for getting to the params
  4288 00001FEF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4289 00001FF3 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4290                                  .L_tc_recycle_frame_loop_0016:
  4291 00001FF6 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4292 00001FF9 7410                    	je .L_tc_recycle_frame_done_0016
  4293 00001FFB 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4294 00001FFE 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4295 00002001 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4296 00002005 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4297 00002009 EBEB                    	jmp .L_tc_recycle_frame_loop_0016
  4298                                  .L_tc_recycle_frame_done_0016:
  4299 0000200B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4300 0000200C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4301 00002010 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4302 00002013 C9                      	leave
  4303 00002014 C21800                  	ret AND_KILL_FRAME(1)
  4304                                  .L_lambda_simple_end_0016:	; new closure is in rax
  4305 00002017 48890425[28110000]      	mov qword [free_var_51], rax
  4306 0000201F 48B8-                   	mov rax, sob_void
  4306 00002021 [0000000000000000] 
  4307                                  
  4308 00002029 4889C7                  	mov rdi, rax
  4309 0000202C E8E85E0100              	call print_sexpr_if_not_void
  4310 00002031 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4311 00002036 E8895C0100              	call malloc
  4312 0000203B 50                      	push rax
  4313 0000203C BF00000000              	mov rdi, 8 * 0	; new rib
  4314 00002041 E87E5C0100              	call malloc
  4315 00002046 50                      	push rax
  4316 00002047 BF08000000              	mov rdi, 8 * 1	; extended env
  4317 0000204C E8735C0100              	call malloc
  4318 00002051 488B7D10                	mov rdi, ENV
  4319 00002055 BE00000000              	mov rsi, 0
  4320 0000205A BA01000000              	mov rdx, 1
  4321                                  .L_lambda_simple_env_loop_0017:	; ext_env[i + 1] <-- env[i]
  4322 0000205F 4883FE00                	cmp rsi, 0
  4323 00002063 7410                    	je .L_lambda_simple_env_end_0017
  4324 00002065 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4325 00002069 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4326 0000206D 48FFC6                  	inc rsi
  4327 00002070 48FFC2                  	inc rdx
  4328 00002073 EBEA                    	jmp .L_lambda_simple_env_loop_0017
  4329                                  .L_lambda_simple_env_end_0017:
  4330 00002075 5B                      	pop rbx
  4331 00002076 BE00000000              	mov rsi, 0
  4332                                  .L_lambda_simple_params_loop_0017:	; copy params
  4333 0000207B 4883FE00                	cmp rsi, 0
  4334 0000207F 740E                    	je .L_lambda_simple_params_end_0017
  4335 00002081 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4336 00002086 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4337 0000208A 48FFC6                  	inc rsi
  4338 0000208D EBEC                    	jmp .L_lambda_simple_params_loop_0017
  4339                                  .L_lambda_simple_params_end_0017:
  4340 0000208F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4341 00002092 4889C3                  	mov rbx, rax
  4342 00002095 58                      	pop rax
  4343 00002096 C60004                  	mov byte [rax], T_closure
  4344 00002099 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4345 0000209D 48C74009[AA200000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0017
  4346 000020A5 E9AA000000              	jmp .L_lambda_simple_end_0017
  4347                                  .L_lambda_simple_code_0017:	; lambda-simple body
  4348 000020AA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4349 000020B0 740B                    	je .L_lambda_simple_arity_check_ok_0017
  4350 000020B2 FF742410                	push qword [rsp + 8 * 2]
  4351 000020B6 6A01                    	push 1
  4352 000020B8 E9C05B0100              	jmp L_error_incorrect_arity_simple
  4353                                  .L_lambda_simple_arity_check_ok_0017:
  4354 000020BD C8000000                	enter 0, 0
  4355                                  	; preparing a tail-call
  4356                                  	; preparing a non-tail-call
  4357 000020C1 488B4520                	mov rax, PARAM(0)	; param x
  4358 000020C5 50                      	push rax
  4359 000020C6 6A01                    	push 1	; arg count
  4360 000020C8 488B0425[7D110000]      	mov rax, qword [free_var_56]	; free var cdar
  4361 000020D0 803805                  	cmp byte [rax], T_undefined
  4362 000020D3 0F84BE5A0100            	je L_error_fvar_undefined
  4363 000020D9 803804                  	cmp byte [rax], T_closure
  4364 000020DC 0F85395B0100            	jne L_error_non_closure
  4365 000020E2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4366 000020E5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4367 000020E8 50                      	push rax
  4368 000020E9 6A01                    	push 1	; arg count
  4369 000020EB 488B0425[7D110000]      	mov rax, qword [free_var_56]	; free var cdar
  4370 000020F3 803805                  	cmp byte [rax], T_undefined
  4371 000020F6 0F849B5A0100            	je L_error_fvar_undefined
  4372 000020FC 803804                  	cmp byte [rax], T_closure
  4373 000020FF 0F85165B0100            	jne L_error_non_closure
  4374 00002105 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4375 00002108 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4376 0000210B FF7500                  	push qword[rbp]
  4377 0000210E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4378 00002111 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4379 00002115 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4380 00002119 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4381 0000211D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4382 00002120 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4383 00002123 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4384 00002128 4983C103                	add r9, 3 	 ;for getting to the params
  4385 0000212C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4386 00002130 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4387                                  .L_tc_recycle_frame_loop_0017:
  4388 00002133 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4389 00002136 7410                    	je .L_tc_recycle_frame_done_0017
  4390 00002138 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4391 0000213B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4392 0000213E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4393 00002142 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4394 00002146 EBEB                    	jmp .L_tc_recycle_frame_loop_0017
  4395                                  .L_tc_recycle_frame_done_0017:
  4396 00002148 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4397 00002149 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4398 0000214D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4399 00002150 C9                      	leave
  4400 00002151 C21800                  	ret AND_KILL_FRAME(1)
  4401                                  .L_lambda_simple_end_0017:	; new closure is in rax
  4402 00002154 48890425[4A110000]      	mov qword [free_var_53], rax
  4403 0000215C 48B8-                   	mov rax, sob_void
  4403 0000215E [0000000000000000] 
  4404                                  
  4405 00002166 4889C7                  	mov rdi, rax
  4406 00002169 E8AB5D0100              	call print_sexpr_if_not_void
  4407 0000216E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4408 00002173 E84C5B0100              	call malloc
  4409 00002178 50                      	push rax
  4410 00002179 BF00000000              	mov rdi, 8 * 0	; new rib
  4411 0000217E E8415B0100              	call malloc
  4412 00002183 50                      	push rax
  4413 00002184 BF08000000              	mov rdi, 8 * 1	; extended env
  4414 00002189 E8365B0100              	call malloc
  4415 0000218E 488B7D10                	mov rdi, ENV
  4416 00002192 BE00000000              	mov rsi, 0
  4417 00002197 BA01000000              	mov rdx, 1
  4418                                  .L_lambda_simple_env_loop_0018:	; ext_env[i + 1] <-- env[i]
  4419 0000219C 4883FE00                	cmp rsi, 0
  4420 000021A0 7410                    	je .L_lambda_simple_env_end_0018
  4421 000021A2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4422 000021A6 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4423 000021AA 48FFC6                  	inc rsi
  4424 000021AD 48FFC2                  	inc rdx
  4425 000021B0 EBEA                    	jmp .L_lambda_simple_env_loop_0018
  4426                                  .L_lambda_simple_env_end_0018:
  4427 000021B2 5B                      	pop rbx
  4428 000021B3 BE00000000              	mov rsi, 0
  4429                                  .L_lambda_simple_params_loop_0018:	; copy params
  4430 000021B8 4883FE00                	cmp rsi, 0
  4431 000021BC 740E                    	je .L_lambda_simple_params_end_0018
  4432 000021BE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4433 000021C3 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4434 000021C7 48FFC6                  	inc rsi
  4435 000021CA EBEC                    	jmp .L_lambda_simple_params_loop_0018
  4436                                  .L_lambda_simple_params_end_0018:
  4437 000021CC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4438 000021CF 4889C3                  	mov rbx, rax
  4439 000021D2 58                      	pop rax
  4440 000021D3 C60004                  	mov byte [rax], T_closure
  4441 000021D6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4442 000021DA 48C74009[E7210000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0018
  4443 000021E2 E9AA000000              	jmp .L_lambda_simple_end_0018
  4444                                  .L_lambda_simple_code_0018:	; lambda-simple body
  4445 000021E7 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4446 000021ED 740B                    	je .L_lambda_simple_arity_check_ok_0018
  4447 000021EF FF742410                	push qword [rsp + 8 * 2]
  4448 000021F3 6A01                    	push 1
  4449 000021F5 E9835A0100              	jmp L_error_incorrect_arity_simple
  4450                                  .L_lambda_simple_arity_check_ok_0018:
  4451 000021FA C8000000                	enter 0, 0
  4452                                  	; preparing a tail-call
  4453                                  	; preparing a non-tail-call
  4454 000021FE 488B4520                	mov rax, PARAM(0)	; param x
  4455 00002202 50                      	push rax
  4456 00002203 6A01                    	push 1	; arg count
  4457 00002205 488B0425[F4110000]      	mov rax, qword [free_var_63]	; free var cddr
  4458 0000220D 803805                  	cmp byte [rax], T_undefined
  4459 00002210 0F8481590100            	je L_error_fvar_undefined
  4460 00002216 803804                  	cmp byte [rax], T_closure
  4461 00002219 0F85FC590100            	jne L_error_non_closure
  4462 0000221F FF7001                  	push SOB_CLOSURE_ENV(rax)
  4463 00002222 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4464 00002225 50                      	push rax
  4465 00002226 6A01                    	push 1	; arg count
  4466 00002228 488B0425[7D110000]      	mov rax, qword [free_var_56]	; free var cdar
  4467 00002230 803805                  	cmp byte [rax], T_undefined
  4468 00002233 0F845E590100            	je L_error_fvar_undefined
  4469 00002239 803804                  	cmp byte [rax], T_closure
  4470 0000223C 0F85D9590100            	jne L_error_non_closure
  4471 00002242 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4472 00002245 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4473 00002248 FF7500                  	push qword[rbp]
  4474 0000224B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4475 0000224E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4476 00002252 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4477 00002256 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4478 0000225A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4479 0000225D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4480 00002260 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4481 00002265 4983C103                	add r9, 3 	 ;for getting to the params
  4482 00002269 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4483 0000226D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4484                                  .L_tc_recycle_frame_loop_0018:
  4485 00002270 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4486 00002273 7410                    	je .L_tc_recycle_frame_done_0018
  4487 00002275 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4488 00002278 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4489 0000227B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4490 0000227F 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4491 00002283 EBEB                    	jmp .L_tc_recycle_frame_loop_0018
  4492                                  .L_tc_recycle_frame_done_0018:
  4493 00002285 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4494 00002286 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4495 0000228A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4496 0000228D C9                      	leave
  4497 0000228E C21800                  	ret AND_KILL_FRAME(1)
  4498                                  .L_lambda_simple_end_0018:	; new closure is in rax
  4499 00002291 48890425[5B110000]      	mov qword [free_var_54], rax
  4500 00002299 48B8-                   	mov rax, sob_void
  4500 0000229B [0000000000000000] 
  4501                                  
  4502 000022A3 4889C7                  	mov rdi, rax
  4503 000022A6 E86E5C0100              	call print_sexpr_if_not_void
  4504 000022AB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4505 000022B0 E80F5A0100              	call malloc
  4506 000022B5 50                      	push rax
  4507 000022B6 BF00000000              	mov rdi, 8 * 0	; new rib
  4508 000022BB E8045A0100              	call malloc
  4509 000022C0 50                      	push rax
  4510 000022C1 BF08000000              	mov rdi, 8 * 1	; extended env
  4511 000022C6 E8F9590100              	call malloc
  4512 000022CB 488B7D10                	mov rdi, ENV
  4513 000022CF BE00000000              	mov rsi, 0
  4514 000022D4 BA01000000              	mov rdx, 1
  4515                                  .L_lambda_simple_env_loop_0019:	; ext_env[i + 1] <-- env[i]
  4516 000022D9 4883FE00                	cmp rsi, 0
  4517 000022DD 7410                    	je .L_lambda_simple_env_end_0019
  4518 000022DF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4519 000022E3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4520 000022E7 48FFC6                  	inc rsi
  4521 000022EA 48FFC2                  	inc rdx
  4522 000022ED EBEA                    	jmp .L_lambda_simple_env_loop_0019
  4523                                  .L_lambda_simple_env_end_0019:
  4524 000022EF 5B                      	pop rbx
  4525 000022F0 BE00000000              	mov rsi, 0
  4526                                  .L_lambda_simple_params_loop_0019:	; copy params
  4527 000022F5 4883FE00                	cmp rsi, 0
  4528 000022F9 740E                    	je .L_lambda_simple_params_end_0019
  4529 000022FB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4530 00002300 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4531 00002304 48FFC6                  	inc rsi
  4532 00002307 EBEC                    	jmp .L_lambda_simple_params_loop_0019
  4533                                  .L_lambda_simple_params_end_0019:
  4534 00002309 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4535 0000230C 4889C3                  	mov rbx, rax
  4536 0000230F 58                      	pop rax
  4537 00002310 C60004                  	mov byte [rax], T_closure
  4538 00002313 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4539 00002317 48C74009[24230000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0019
  4540 0000231F E9AA000000              	jmp .L_lambda_simple_end_0019
  4541                                  .L_lambda_simple_code_0019:	; lambda-simple body
  4542 00002324 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4543 0000232A 740B                    	je .L_lambda_simple_arity_check_ok_0019
  4544 0000232C FF742410                	push qword [rsp + 8 * 2]
  4545 00002330 6A01                    	push 1
  4546 00002332 E946590100              	jmp L_error_incorrect_arity_simple
  4547                                  .L_lambda_simple_arity_check_ok_0019:
  4548 00002337 C8000000                	enter 0, 0
  4549                                  	; preparing a tail-call
  4550                                  	; preparing a non-tail-call
  4551 0000233B 488B4520                	mov rax, PARAM(0)	; param x
  4552 0000233F 50                      	push rax
  4553 00002340 6A01                    	push 1	; arg count
  4554 00002342 488B0425[7E100000]      	mov rax, qword [free_var_41]	; free var caar
  4555 0000234A 803805                  	cmp byte [rax], T_undefined
  4556 0000234D 0F8444580100            	je L_error_fvar_undefined
  4557 00002353 803804                  	cmp byte [rax], T_closure
  4558 00002356 0F85BF580100            	jne L_error_non_closure
  4559 0000235C FF7001                  	push SOB_CLOSURE_ENV(rax)
  4560 0000235F FF5009                  	call SOB_CLOSURE_CODE(rax)
  4561 00002362 50                      	push rax
  4562 00002363 6A01                    	push 1	; arg count
  4563 00002365 488B0425[F4110000]      	mov rax, qword [free_var_63]	; free var cddr
  4564 0000236D 803805                  	cmp byte [rax], T_undefined
  4565 00002370 0F8421580100            	je L_error_fvar_undefined
  4566 00002376 803804                  	cmp byte [rax], T_closure
  4567 00002379 0F859C580100            	jne L_error_non_closure
  4568 0000237F FF7001                  	push SOB_CLOSURE_ENV(rax)
  4569 00002382 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4570 00002385 FF7500                  	push qword[rbp]
  4571 00002388 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4572 0000238B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4573 0000238F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4574 00002393 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4575 00002397 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4576 0000239A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4577 0000239D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4578 000023A2 4983C103                	add r9, 3 	 ;for getting to the params
  4579 000023A6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4580 000023AA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4581                                  .L_tc_recycle_frame_loop_0019:
  4582 000023AD 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4583 000023B0 7410                    	je .L_tc_recycle_frame_done_0019
  4584 000023B2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4585 000023B5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4586 000023B8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4587 000023BC 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4588 000023C0 EBEB                    	jmp .L_tc_recycle_frame_loop_0019
  4589                                  .L_tc_recycle_frame_done_0019:
  4590 000023C2 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4591 000023C3 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4592 000023C7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4593 000023CA C9                      	leave
  4594 000023CB C21800                  	ret AND_KILL_FRAME(1)
  4595                                  .L_lambda_simple_end_0019:	; new closure is in rax
  4596 000023CE 48890425[8E110000]      	mov qword [free_var_57], rax
  4597 000023D6 48B8-                   	mov rax, sob_void
  4597 000023D8 [0000000000000000] 
  4598                                  
  4599 000023E0 4889C7                  	mov rdi, rax
  4600 000023E3 E8315B0100              	call print_sexpr_if_not_void
  4601 000023E8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4602 000023ED E8D2580100              	call malloc
  4603 000023F2 50                      	push rax
  4604 000023F3 BF00000000              	mov rdi, 8 * 0	; new rib
  4605 000023F8 E8C7580100              	call malloc
  4606 000023FD 50                      	push rax
  4607 000023FE BF08000000              	mov rdi, 8 * 1	; extended env
  4608 00002403 E8BC580100              	call malloc
  4609 00002408 488B7D10                	mov rdi, ENV
  4610 0000240C BE00000000              	mov rsi, 0
  4611 00002411 BA01000000              	mov rdx, 1
  4612                                  .L_lambda_simple_env_loop_001a:	; ext_env[i + 1] <-- env[i]
  4613 00002416 4883FE00                	cmp rsi, 0
  4614 0000241A 7410                    	je .L_lambda_simple_env_end_001a
  4615 0000241C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4616 00002420 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4617 00002424 48FFC6                  	inc rsi
  4618 00002427 48FFC2                  	inc rdx
  4619 0000242A EBEA                    	jmp .L_lambda_simple_env_loop_001a
  4620                                  .L_lambda_simple_env_end_001a:
  4621 0000242C 5B                      	pop rbx
  4622 0000242D BE00000000              	mov rsi, 0
  4623                                  .L_lambda_simple_params_loop_001a:	; copy params
  4624 00002432 4883FE00                	cmp rsi, 0
  4625 00002436 740E                    	je .L_lambda_simple_params_end_001a
  4626 00002438 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4627 0000243D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4628 00002441 48FFC6                  	inc rsi
  4629 00002444 EBEC                    	jmp .L_lambda_simple_params_loop_001a
  4630                                  .L_lambda_simple_params_end_001a:
  4631 00002446 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4632 00002449 4889C3                  	mov rbx, rax
  4633 0000244C 58                      	pop rax
  4634 0000244D C60004                  	mov byte [rax], T_closure
  4635 00002450 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4636 00002454 48C74009[61240000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001a
  4637 0000245C E9AA000000              	jmp .L_lambda_simple_end_001a
  4638                                  .L_lambda_simple_code_001a:	; lambda-simple body
  4639 00002461 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4640 00002467 740B                    	je .L_lambda_simple_arity_check_ok_001a
  4641 00002469 FF742410                	push qword [rsp + 8 * 2]
  4642 0000246D 6A01                    	push 1
  4643 0000246F E909580100              	jmp L_error_incorrect_arity_simple
  4644                                  .L_lambda_simple_arity_check_ok_001a:
  4645 00002474 C8000000                	enter 0, 0
  4646                                  	; preparing a tail-call
  4647                                  	; preparing a non-tail-call
  4648 00002478 488B4520                	mov rax, PARAM(0)	; param x
  4649 0000247C 50                      	push rax
  4650 0000247D 6A01                    	push 1	; arg count
  4651 0000247F 488B0425[F5100000]      	mov rax, qword [free_var_48]	; free var cadr
  4652 00002487 803805                  	cmp byte [rax], T_undefined
  4653 0000248A 0F8407570100            	je L_error_fvar_undefined
  4654 00002490 803804                  	cmp byte [rax], T_closure
  4655 00002493 0F8582570100            	jne L_error_non_closure
  4656 00002499 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4657 0000249C FF5009                  	call SOB_CLOSURE_CODE(rax)
  4658 0000249F 50                      	push rax
  4659 000024A0 6A01                    	push 1	; arg count
  4660 000024A2 488B0425[F4110000]      	mov rax, qword [free_var_63]	; free var cddr
  4661 000024AA 803805                  	cmp byte [rax], T_undefined
  4662 000024AD 0F84E4560100            	je L_error_fvar_undefined
  4663 000024B3 803804                  	cmp byte [rax], T_closure
  4664 000024B6 0F855F570100            	jne L_error_non_closure
  4665 000024BC FF7001                  	push SOB_CLOSURE_ENV(rax)
  4666 000024BF FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4667 000024C2 FF7500                  	push qword[rbp]
  4668 000024C5 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4669 000024C8 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4670 000024CC 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4671 000024D0 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4672 000024D4 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4673 000024D7 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4674 000024DA 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4675 000024DF 4983C103                	add r9, 3 	 ;for getting to the params
  4676 000024E3 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4677 000024E7 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4678                                  .L_tc_recycle_frame_loop_001a:
  4679 000024EA 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4680 000024ED 7410                    	je .L_tc_recycle_frame_done_001a
  4681 000024EF 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4682 000024F2 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4683 000024F5 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4684 000024F9 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4685 000024FD EBEB                    	jmp .L_tc_recycle_frame_loop_001a
  4686                                  .L_tc_recycle_frame_done_001a:
  4687 000024FF 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4688 00002500 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4689 00002504 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4690 00002507 C9                      	leave
  4691 00002508 C21800                  	ret AND_KILL_FRAME(1)
  4692                                  .L_lambda_simple_end_001a:	; new closure is in rax
  4693 0000250B 48890425[9F110000]      	mov qword [free_var_58], rax
  4694 00002513 48B8-                   	mov rax, sob_void
  4694 00002515 [0000000000000000] 
  4695                                  
  4696 0000251D 4889C7                  	mov rdi, rax
  4697 00002520 E8F4590100              	call print_sexpr_if_not_void
  4698 00002525 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4699 0000252A E895570100              	call malloc
  4700 0000252F 50                      	push rax
  4701 00002530 BF00000000              	mov rdi, 8 * 0	; new rib
  4702 00002535 E88A570100              	call malloc
  4703 0000253A 50                      	push rax
  4704 0000253B BF08000000              	mov rdi, 8 * 1	; extended env
  4705 00002540 E87F570100              	call malloc
  4706 00002545 488B7D10                	mov rdi, ENV
  4707 00002549 BE00000000              	mov rsi, 0
  4708 0000254E BA01000000              	mov rdx, 1
  4709                                  .L_lambda_simple_env_loop_001b:	; ext_env[i + 1] <-- env[i]
  4710 00002553 4883FE00                	cmp rsi, 0
  4711 00002557 7410                    	je .L_lambda_simple_env_end_001b
  4712 00002559 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4713 0000255D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4714 00002561 48FFC6                  	inc rsi
  4715 00002564 48FFC2                  	inc rdx
  4716 00002567 EBEA                    	jmp .L_lambda_simple_env_loop_001b
  4717                                  .L_lambda_simple_env_end_001b:
  4718 00002569 5B                      	pop rbx
  4719 0000256A BE00000000              	mov rsi, 0
  4720                                  .L_lambda_simple_params_loop_001b:	; copy params
  4721 0000256F 4883FE00                	cmp rsi, 0
  4722 00002573 740E                    	je .L_lambda_simple_params_end_001b
  4723 00002575 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4724 0000257A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4725 0000257E 48FFC6                  	inc rsi
  4726 00002581 EBEC                    	jmp .L_lambda_simple_params_loop_001b
  4727                                  .L_lambda_simple_params_end_001b:
  4728 00002583 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4729 00002586 4889C3                  	mov rbx, rax
  4730 00002589 58                      	pop rax
  4731 0000258A C60004                  	mov byte [rax], T_closure
  4732 0000258D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4733 00002591 48C74009[9E250000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001b
  4734 00002599 E9AA000000              	jmp .L_lambda_simple_end_001b
  4735                                  .L_lambda_simple_code_001b:	; lambda-simple body
  4736 0000259E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4737 000025A4 740B                    	je .L_lambda_simple_arity_check_ok_001b
  4738 000025A6 FF742410                	push qword [rsp + 8 * 2]
  4739 000025AA 6A01                    	push 1
  4740 000025AC E9CC560100              	jmp L_error_incorrect_arity_simple
  4741                                  .L_lambda_simple_arity_check_ok_001b:
  4742 000025B1 C8000000                	enter 0, 0
  4743                                  	; preparing a tail-call
  4744                                  	; preparing a non-tail-call
  4745 000025B5 488B4520                	mov rax, PARAM(0)	; param x
  4746 000025B9 50                      	push rax
  4747 000025BA 6A01                    	push 1	; arg count
  4748 000025BC 488B0425[7D110000]      	mov rax, qword [free_var_56]	; free var cdar
  4749 000025C4 803805                  	cmp byte [rax], T_undefined
  4750 000025C7 0F84CA550100            	je L_error_fvar_undefined
  4751 000025CD 803804                  	cmp byte [rax], T_closure
  4752 000025D0 0F8545560100            	jne L_error_non_closure
  4753 000025D6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4754 000025D9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4755 000025DC 50                      	push rax
  4756 000025DD 6A01                    	push 1	; arg count
  4757 000025DF 488B0425[F4110000]      	mov rax, qword [free_var_63]	; free var cddr
  4758 000025E7 803805                  	cmp byte [rax], T_undefined
  4759 000025EA 0F84A7550100            	je L_error_fvar_undefined
  4760 000025F0 803804                  	cmp byte [rax], T_closure
  4761 000025F3 0F8522560100            	jne L_error_non_closure
  4762 000025F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4763 000025FC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4764 000025FF FF7500                  	push qword[rbp]
  4765 00002602 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4766 00002605 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4767 00002609 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4768 0000260D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4769 00002611 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4770 00002614 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4771 00002617 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4772 0000261C 4983C103                	add r9, 3 	 ;for getting to the params
  4773 00002620 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4774 00002624 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4775                                  .L_tc_recycle_frame_loop_001b:
  4776 00002627 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4777 0000262A 7410                    	je .L_tc_recycle_frame_done_001b
  4778 0000262C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4779 0000262F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4780 00002632 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4781 00002636 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4782 0000263A EBEB                    	jmp .L_tc_recycle_frame_loop_001b
  4783                                  .L_tc_recycle_frame_done_001b:
  4784 0000263C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4785 0000263D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4786 00002641 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4787 00002644 C9                      	leave
  4788 00002645 C21800                  	ret AND_KILL_FRAME(1)
  4789                                  .L_lambda_simple_end_001b:	; new closure is in rax
  4790 00002648 48890425[C1110000]      	mov qword [free_var_60], rax
  4791 00002650 48B8-                   	mov rax, sob_void
  4791 00002652 [0000000000000000] 
  4792                                  
  4793 0000265A 4889C7                  	mov rdi, rax
  4794 0000265D E8B7580100              	call print_sexpr_if_not_void
  4795 00002662 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4796 00002667 E858560100              	call malloc
  4797 0000266C 50                      	push rax
  4798 0000266D BF00000000              	mov rdi, 8 * 0	; new rib
  4799 00002672 E84D560100              	call malloc
  4800 00002677 50                      	push rax
  4801 00002678 BF08000000              	mov rdi, 8 * 1	; extended env
  4802 0000267D E842560100              	call malloc
  4803 00002682 488B7D10                	mov rdi, ENV
  4804 00002686 BE00000000              	mov rsi, 0
  4805 0000268B BA01000000              	mov rdx, 1
  4806                                  .L_lambda_simple_env_loop_001c:	; ext_env[i + 1] <-- env[i]
  4807 00002690 4883FE00                	cmp rsi, 0
  4808 00002694 7410                    	je .L_lambda_simple_env_end_001c
  4809 00002696 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4810 0000269A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4811 0000269E 48FFC6                  	inc rsi
  4812 000026A1 48FFC2                  	inc rdx
  4813 000026A4 EBEA                    	jmp .L_lambda_simple_env_loop_001c
  4814                                  .L_lambda_simple_env_end_001c:
  4815 000026A6 5B                      	pop rbx
  4816 000026A7 BE00000000              	mov rsi, 0
  4817                                  .L_lambda_simple_params_loop_001c:	; copy params
  4818 000026AC 4883FE00                	cmp rsi, 0
  4819 000026B0 740E                    	je .L_lambda_simple_params_end_001c
  4820 000026B2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4821 000026B7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4822 000026BB 48FFC6                  	inc rsi
  4823 000026BE EBEC                    	jmp .L_lambda_simple_params_loop_001c
  4824                                  .L_lambda_simple_params_end_001c:
  4825 000026C0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4826 000026C3 4889C3                  	mov rbx, rax
  4827 000026C6 58                      	pop rax
  4828 000026C7 C60004                  	mov byte [rax], T_closure
  4829 000026CA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4830 000026CE 48C74009[DB260000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001c
  4831 000026D6 E9AA000000              	jmp .L_lambda_simple_end_001c
  4832                                  .L_lambda_simple_code_001c:	; lambda-simple body
  4833 000026DB 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4834 000026E1 740B                    	je .L_lambda_simple_arity_check_ok_001c
  4835 000026E3 FF742410                	push qword [rsp + 8 * 2]
  4836 000026E7 6A01                    	push 1
  4837 000026E9 E98F550100              	jmp L_error_incorrect_arity_simple
  4838                                  .L_lambda_simple_arity_check_ok_001c:
  4839 000026EE C8000000                	enter 0, 0
  4840                                  	; preparing a tail-call
  4841                                  	; preparing a non-tail-call
  4842 000026F2 488B4520                	mov rax, PARAM(0)	; param x
  4843 000026F6 50                      	push rax
  4844 000026F7 6A01                    	push 1	; arg count
  4845 000026F9 488B0425[F4110000]      	mov rax, qword [free_var_63]	; free var cddr
  4846 00002701 803805                  	cmp byte [rax], T_undefined
  4847 00002704 0F848D540100            	je L_error_fvar_undefined
  4848 0000270A 803804                  	cmp byte [rax], T_closure
  4849 0000270D 0F8508550100            	jne L_error_non_closure
  4850 00002713 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4851 00002716 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4852 00002719 50                      	push rax
  4853 0000271A 6A01                    	push 1	; arg count
  4854 0000271C 488B0425[F4110000]      	mov rax, qword [free_var_63]	; free var cddr
  4855 00002724 803805                  	cmp byte [rax], T_undefined
  4856 00002727 0F846A540100            	je L_error_fvar_undefined
  4857 0000272D 803804                  	cmp byte [rax], T_closure
  4858 00002730 0F85E5540100            	jne L_error_non_closure
  4859 00002736 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4860 00002739 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4861 0000273C FF7500                  	push qword[rbp]
  4862 0000273F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4863 00002742 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4864 00002746 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4865 0000274A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4866 0000274E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4867 00002751 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4868 00002754 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4869 00002759 4983C103                	add r9, 3 	 ;for getting to the params
  4870 0000275D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4871 00002761 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4872                                  .L_tc_recycle_frame_loop_001c:
  4873 00002764 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4874 00002767 7410                    	je .L_tc_recycle_frame_done_001c
  4875 00002769 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4876 0000276C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4877 0000276F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4878 00002773 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4879 00002777 EBEB                    	jmp .L_tc_recycle_frame_loop_001c
  4880                                  .L_tc_recycle_frame_done_001c:
  4881 00002779 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4882 0000277A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4883 0000277E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4884 00002781 C9                      	leave
  4885 00002782 C21800                  	ret AND_KILL_FRAME(1)
  4886                                  .L_lambda_simple_end_001c:	; new closure is in rax
  4887 00002785 48890425[D2110000]      	mov qword [free_var_61], rax
  4888 0000278D 48B8-                   	mov rax, sob_void
  4888 0000278F [0000000000000000] 
  4889                                  
  4890 00002797 4889C7                  	mov rdi, rax
  4891 0000279A E87A570100              	call print_sexpr_if_not_void
  4892 0000279F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4893 000027A4 E81B550100              	call malloc
  4894 000027A9 50                      	push rax
  4895 000027AA BF00000000              	mov rdi, 8 * 0	; new rib
  4896 000027AF E810550100              	call malloc
  4897 000027B4 50                      	push rax
  4898 000027B5 BF08000000              	mov rdi, 8 * 1	; extended env
  4899 000027BA E805550100              	call malloc
  4900 000027BF 488B7D10                	mov rdi, ENV
  4901 000027C3 BE00000000              	mov rsi, 0
  4902 000027C8 BA01000000              	mov rdx, 1
  4903                                  .L_lambda_simple_env_loop_001d:	; ext_env[i + 1] <-- env[i]
  4904 000027CD 4883FE00                	cmp rsi, 0
  4905 000027D1 7410                    	je .L_lambda_simple_env_end_001d
  4906 000027D3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4907 000027D7 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4908 000027DB 48FFC6                  	inc rsi
  4909 000027DE 48FFC2                  	inc rdx
  4910 000027E1 EBEA                    	jmp .L_lambda_simple_env_loop_001d
  4911                                  .L_lambda_simple_env_end_001d:
  4912 000027E3 5B                      	pop rbx
  4913 000027E4 BE00000000              	mov rsi, 0
  4914                                  .L_lambda_simple_params_loop_001d:	; copy params
  4915 000027E9 4883FE00                	cmp rsi, 0
  4916 000027ED 740E                    	je .L_lambda_simple_params_end_001d
  4917 000027EF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4918 000027F4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4919 000027F8 48FFC6                  	inc rsi
  4920 000027FB EBEC                    	jmp .L_lambda_simple_params_loop_001d
  4921                                  .L_lambda_simple_params_end_001d:
  4922 000027FD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4923 00002800 4889C3                  	mov rbx, rax
  4924 00002803 58                      	pop rax
  4925 00002804 C60004                  	mov byte [rax], T_closure
  4926 00002807 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4927 0000280B 48C74009[18280000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001d
  4928 00002813 E91C010000              	jmp .L_lambda_simple_end_001d
  4929                                  .L_lambda_simple_code_001d:	; lambda-simple body
  4930 00002818 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4931 0000281E 740B                    	je .L_lambda_simple_arity_check_ok_001d
  4932 00002820 FF742410                	push qword [rsp + 8 * 2]
  4933 00002824 6A01                    	push 1
  4934 00002826 E952540100              	jmp L_error_incorrect_arity_simple
  4935                                  .L_lambda_simple_arity_check_ok_001d:
  4936 0000282B C8000000                	enter 0, 0
  4937                                  	; preparing a non-tail-call
  4938 0000282F 488B4520                	mov rax, PARAM(0)	; param e
  4939 00002833 50                      	push rax
  4940 00002834 6A01                    	push 1	; arg count
  4941 00002836 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
  4942 0000283E 803805                  	cmp byte [rax], T_undefined
  4943 00002841 0F8450530100            	je L_error_fvar_undefined
  4944 00002847 803804                  	cmp byte [rax], T_closure
  4945 0000284A 0F85CB530100            	jne L_error_non_closure
  4946 00002850 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4947 00002853 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4948 00002856 483D[02000000]          	cmp rax, sob_boolean_false
  4949 0000285C 0F85CE000000            	jne .L_or_end_0001
  4950                                  	; preparing a non-tail-call
  4951 00002862 488B4520                	mov rax, PARAM(0)	; param e
  4952 00002866 50                      	push rax
  4953 00002867 6A01                    	push 1	; arg count
  4954 00002869 488B0425[24150000]      	mov rax, qword [free_var_111]	; free var pair?
  4955 00002871 803805                  	cmp byte [rax], T_undefined
  4956 00002874 0F841D530100            	je L_error_fvar_undefined
  4957 0000287A 803804                  	cmp byte [rax], T_closure
  4958 0000287D 0F8598530100            	jne L_error_non_closure
  4959 00002883 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4960 00002886 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4961 00002889 483D[02000000]          	cmp rax, sob_boolean_false
  4962 0000288F 0F8491000000            	je .L_if_else_0001
  4963                                  	; preparing a tail-call
  4964                                  	; preparing a non-tail-call
  4965 00002895 488B4520                	mov rax, PARAM(0)	; param e
  4966 00002899 50                      	push rax
  4967 0000289A 6A01                    	push 1	; arg count
  4968 0000289C 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  4969 000028A4 803805                  	cmp byte [rax], T_undefined
  4970 000028A7 0F84EA520100            	je L_error_fvar_undefined
  4971 000028AD 803804                  	cmp byte [rax], T_closure
  4972 000028B0 0F8565530100            	jne L_error_non_closure
  4973 000028B6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4974 000028B9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4975 000028BC 50                      	push rax
  4976 000028BD 6A01                    	push 1	; arg count
  4977 000028BF 488B0425[25140000]      	mov rax, qword [free_var_96]	; free var list?
  4978 000028C7 803805                  	cmp byte [rax], T_undefined
  4979 000028CA 0F84C7520100            	je L_error_fvar_undefined
  4980 000028D0 803804                  	cmp byte [rax], T_closure
  4981 000028D3 0F8542530100            	jne L_error_non_closure
  4982 000028D9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4983 000028DC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4984 000028DF FF7500                  	push qword[rbp]
  4985 000028E2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4986 000028E5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4987 000028E9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4988 000028ED 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4989 000028F1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4990 000028F4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4991 000028F7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4992 000028FC 4983C103                	add r9, 3 	 ;for getting to the params
  4993 00002900 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4994 00002904 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4995                                  .L_tc_recycle_frame_loop_001d:
  4996 00002907 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4997 0000290A 7410                    	je .L_tc_recycle_frame_done_001d
  4998 0000290C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4999 0000290F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  5000 00002912 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  5001 00002916 4983E808                	sub r8, 8	 ;move the top of the stack one down
  5002 0000291A EBEB                    	jmp .L_tc_recycle_frame_loop_001d
  5003                                  .L_tc_recycle_frame_done_001d:
  5004 0000291C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  5005 0000291D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  5006 00002921 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5007 00002924 EB0A                    	jmp .L_if_end_0001
  5008                                  .L_if_else_0001:
  5009 00002926 48B8-                   	mov rax, L_constants + 2
  5009 00002928 [0200000000000000] 
  5010                                  .L_if_end_0001:
  5011                                  .L_or_end_0001:
  5012 00002930 C9                      	leave
  5013 00002931 C21800                  	ret AND_KILL_FRAME(1)
  5014                                  .L_lambda_simple_end_001d:	; new closure is in rax
  5015 00002934 48890425[25140000]      	mov qword [free_var_96], rax
  5016 0000293C 48B8-                   	mov rax, sob_void
  5016 0000293E [0000000000000000] 
  5017                                  
  5018 00002946 4889C7                  	mov rdi, rax
  5019 00002949 E8CB550100              	call print_sexpr_if_not_void
  5020 0000294E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5021 00002953 E86C530100              	call malloc
  5022 00002958 50                      	push rax
  5023 00002959 BF00000000              	mov rdi, 8 * 0	; new rib
  5024 0000295E E861530100              	call malloc
  5025 00002963 50                      	push rax
  5026 00002964 BF08000000              	mov rdi, 8 * 1	; extended env
  5027 00002969 E856530100              	call malloc
  5028 0000296E 488B7D10                	mov rdi, ENV
  5029 00002972 BE00000000              	mov rsi, 0
  5030 00002977 BA01000000              	mov rdx, 1
  5031                                  .L_lambda_opt_env_loop_0001:	; ext_env[i + 1] <-- env[i]
  5032 0000297C 4883FE00                	cmp rsi, 0
  5033 00002980 7410                    	je .L_lambda_opt_env_end_0001
  5034 00002982 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5035 00002986 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5036 0000298A 48FFC6                  	inc rsi
  5037 0000298D 48FFC2                  	inc rdx
  5038 00002990 EBEA                    	jmp .L_lambda_opt_env_loop_0001
  5039                                  .L_lambda_opt_env_end_0001:
  5040 00002992 5B                      	pop rbx
  5041 00002993 BE00000000              	mov rsi, 0
  5042                                  .L_lambda_opt_params_loop_0001:	; copy params
  5043 00002998 4883FE00                	cmp rsi, 0
  5044 0000299C 740E                    	je .L_lambda_opt_params_end_0001
  5045 0000299E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5046 000029A3 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5047 000029A7 48FFC6                  	inc rsi
  5048 000029AA EBEC                    	jmp .L_lambda_opt_params_loop_0001
  5049                                  .L_lambda_opt_params_end_0001:
  5050 000029AC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5051 000029AF 4889C3                  	mov rbx, rax
  5052 000029B2 58                      	pop rax
  5053 000029B3 C60004                  	mov byte [rax], T_closure
  5054 000029B6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5055 000029BA 48C74009[C7290000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0001
  5056 000029C2 E9F8000000              	jmp .L_lambda_opt_end_0001
  5057                                  .L_lambda_opt_code_0001:	; lambda-opt body
  5058 000029C7 48837C241000            	cmp qword [rsp + 8 * 2], 0
  5059 000029CD 740D                    	je .L_lambda_opt_arity_check_exact_0001
  5060 000029CF 7F4C                    	jg .L_lambda_opt_arity_check_more_0001
  5061 000029D1 FF742410                	push qword [rsp + 8 * 2]
  5062 000029D5 6A00                    	push 0
  5063 000029D7 E9B5520100              	jmp L_error_incorrect_arity_opt
  5064                                  .L_lambda_opt_arity_check_exact_0001:
  5065 000029DC 4883EC08                	sub rsp, 8
  5066 000029E0 488B442408              	mov rax, qword[rsp + 8 *1]
  5067 000029E5 48890424                	mov qword[rsp], rax  
  5068 000029E9 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  5069 000029EE 4889442408              	mov qword[rsp + 8 * 1], rax
  5070 000029F3 B801000000              	mov rax, 1
  5071 000029F8 4889442410              	mov qword[rsp + 8 *2], rax
  5072 000029FD 48B8-                   	mov rax, sob_nil
  5072 000029FF [0100000000000000] 
  5073 00002A07 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  5074 00002A0C C8000000                	enter 0, 0
  5075 00002A10 488B4520                	mov rax, PARAM(0)	; param args
  5076 00002A14 C9                      	leave
  5077 00002A15 C21800                  	ret AND_KILL_FRAME(1)
  5078 00002A18 E9A2000000              	jmp .L_lambda_opt_end_0001	; new closure is in rax
  5079                                  .L_lambda_opt_arity_check_more_0001:
  5080 00002A1D 488B442410              	mov rax, qword[rsp + 2 * 8]
  5081 00002A22 4889C7                  	mov rdi, rax
  5082 00002A25 49B9-                   	mov r9, sob_nil
  5082 00002A27 [0100000000000000] 
  5083 00002A2F 4989F8                  	mov r8, rdi
  5084                                  .L_lambda_opt_stack_shrink_loop_0001:
  5085 00002A32 4983F800                	cmp r8, 0
  5086 00002A36 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_0001
  5087 00002A38 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)] 	;rbx is the top of the stack
  5088 00002A3D BF11000000              	mov rdi, 1+8+8	;for pair
  5089 00002A42 E87D520100              	call malloc	 ;to create the pair in the stack
  5090 00002A47 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  5091 00002A4A 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
  5092 00002A4E 4C894809                 	mov qword[rax+1+8],r9
  5093 00002A52 4989C1                  	mov r9 , rax	 ; for the recursion 
  5094 00002A55 49FFC8                  	dec r8
  5095 00002A58 EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_0001
  5096                                  .L_lambda_opt_stack_shrink_loop_exit_0001:
  5097 00002A5A 488B442410              	mov rax, qword[rsp + 2 * 8]
  5098 00002A5F BF01000000              	mov rdi, 1
  5099 00002A64 4829F8                  	sub rax, rdi
  5100 00002A67 4889C7                  	mov rdi, rax
  5101 00002A6A 486BC008                	imul rax,8
  5102 00002A6E 4801C4                  	add rsp, rax
  5103 00002A71 4889E0                  	mov rax, rsp
  5104 00002A74 4989F8                  	mov r8, rdi
  5105 00002A77 4D6BC008                	imul r8, 8
  5106 00002A7B 4C29C0                  	sub rax, r8
  5107 00002A7E 4989C2                  	mov r10, rax	; holds the original ret in the stack
  5108 00002A81 4983C218                	add r10, 8*3
  5109 00002A85 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
  5110 00002A89 4C8B00                  	mov r8, qword[rax] 	;arg count = r8
  5111 00002A8C 4D6BC008                	imul r8,8
  5112 00002A90 4C01C0                  	add rax, r8
  5113 00002A93 4C8908                  	mov qword[rax] ,r9
  5114 00002A96 4983EA18                 	sub r10, 8*3
  5115 00002A9A 48C744241001000000      	mov qword [rsp+2*8], 1
  5116 00002AA3 498B4208                	mov rax, qword[r10 + 1 * 8]
  5117 00002AA7 4889442408              	mov qword[rsp + 1*8] ,rax
  5118 00002AAC 498B02                  	mov rax, qword[r10]
  5119 00002AAF 48890424                	mov qword[rsp], rax
  5120 00002AB3 C8000000                	enter 0, 0
  5121 00002AB7 488B4520                	mov rax, PARAM(0)	; param args
  5122 00002ABB C9                      	leave
  5123 00002ABC C21800                  	ret AND_KILL_FRAME(1)
  5124                                  .L_lambda_opt_end_0001:	; new closure is in rax
  5125 00002ABF 48890425[E1130000]      	mov qword [free_var_92], rax
  5126 00002AC7 48B8-                   	mov rax, sob_void
  5126 00002AC9 [0000000000000000] 
  5127                                  
  5128 00002AD1 4889C7                  	mov rdi, rax
  5129 00002AD4 E840540100              	call print_sexpr_if_not_void
  5130 00002AD9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5131 00002ADE E8E1510100              	call malloc
  5132 00002AE3 50                      	push rax
  5133 00002AE4 BF00000000              	mov rdi, 8 * 0	; new rib
  5134 00002AE9 E8D6510100              	call malloc
  5135 00002AEE 50                      	push rax
  5136 00002AEF BF08000000              	mov rdi, 8 * 1	; extended env
  5137 00002AF4 E8CB510100              	call malloc
  5138 00002AF9 488B7D10                	mov rdi, ENV
  5139 00002AFD BE00000000              	mov rsi, 0
  5140 00002B02 BA01000000              	mov rdx, 1
  5141                                  .L_lambda_simple_env_loop_001e:	; ext_env[i + 1] <-- env[i]
  5142 00002B07 4883FE00                	cmp rsi, 0
  5143 00002B0B 7410                    	je .L_lambda_simple_env_end_001e
  5144 00002B0D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5145 00002B11 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5146 00002B15 48FFC6                  	inc rsi
  5147 00002B18 48FFC2                  	inc rdx
  5148 00002B1B EBEA                    	jmp .L_lambda_simple_env_loop_001e
  5149                                  .L_lambda_simple_env_end_001e:
  5150 00002B1D 5B                      	pop rbx
  5151 00002B1E BE00000000              	mov rsi, 0
  5152                                  .L_lambda_simple_params_loop_001e:	; copy params
  5153 00002B23 4883FE00                	cmp rsi, 0
  5154 00002B27 740E                    	je .L_lambda_simple_params_end_001e
  5155 00002B29 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5156 00002B2E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5157 00002B32 48FFC6                  	inc rsi
  5158 00002B35 EBEC                    	jmp .L_lambda_simple_params_loop_001e
  5159                                  .L_lambda_simple_params_end_001e:
  5160 00002B37 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5161 00002B3A 4889C3                  	mov rbx, rax
  5162 00002B3D 58                      	pop rax
  5163 00002B3E C60004                  	mov byte [rax], T_closure
  5164 00002B41 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5165 00002B45 48C74009[4F2B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001e
  5166 00002B4D EB3D                    	jmp .L_lambda_simple_end_001e
  5167                                  .L_lambda_simple_code_001e:	; lambda-simple body
  5168 00002B4F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5169 00002B55 740B                    	je .L_lambda_simple_arity_check_ok_001e
  5170 00002B57 FF742410                	push qword [rsp + 8 * 2]
  5171 00002B5B 6A01                    	push 1
  5172 00002B5D E91B510100              	jmp L_error_incorrect_arity_simple
  5173                                  .L_lambda_simple_arity_check_ok_001e:
  5174 00002B62 C8000000                	enter 0, 0
  5175 00002B66 488B4520                	mov rax, PARAM(0)	; param x
  5176 00002B6A 483D[02000000]          	cmp rax, sob_boolean_false
  5177 00002B70 740C                    	je .L_if_else_0002
  5178 00002B72 48B8-                   	mov rax, L_constants + 2
  5178 00002B74 [0200000000000000] 
  5179 00002B7C EB0A                    	jmp .L_if_end_0002
  5180                                  .L_if_else_0002:
  5181 00002B7E 48B8-                   	mov rax, L_constants + 3
  5181 00002B80 [0300000000000000] 
  5182                                  .L_if_end_0002:
  5183 00002B88 C9                      	leave
  5184 00002B89 C21800                  	ret AND_KILL_FRAME(1)
  5185                                  .L_lambda_simple_end_001e:	; new closure is in rax
  5186 00002B8C 48890425[CF140000]      	mov qword [free_var_106], rax
  5187 00002B94 48B8-                   	mov rax, sob_void
  5187 00002B96 [0000000000000000] 
  5188                                  
  5189 00002B9E 4889C7                  	mov rdi, rax
  5190 00002BA1 E873530100              	call print_sexpr_if_not_void
  5191 00002BA6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5192 00002BAB E814510100              	call malloc
  5193 00002BB0 50                      	push rax
  5194 00002BB1 BF00000000              	mov rdi, 8 * 0	; new rib
  5195 00002BB6 E809510100              	call malloc
  5196 00002BBB 50                      	push rax
  5197 00002BBC BF08000000              	mov rdi, 8 * 1	; extended env
  5198 00002BC1 E8FE500100              	call malloc
  5199 00002BC6 488B7D10                	mov rdi, ENV
  5200 00002BCA BE00000000              	mov rsi, 0
  5201 00002BCF BA01000000              	mov rdx, 1
  5202                                  .L_lambda_simple_env_loop_001f:	; ext_env[i + 1] <-- env[i]
  5203 00002BD4 4883FE00                	cmp rsi, 0
  5204 00002BD8 7410                    	je .L_lambda_simple_env_end_001f
  5205 00002BDA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5206 00002BDE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5207 00002BE2 48FFC6                  	inc rsi
  5208 00002BE5 48FFC2                  	inc rdx
  5209 00002BE8 EBEA                    	jmp .L_lambda_simple_env_loop_001f
  5210                                  .L_lambda_simple_env_end_001f:
  5211 00002BEA 5B                      	pop rbx
  5212 00002BEB BE00000000              	mov rsi, 0
  5213                                  .L_lambda_simple_params_loop_001f:	; copy params
  5214 00002BF0 4883FE00                	cmp rsi, 0
  5215 00002BF4 740E                    	je .L_lambda_simple_params_end_001f
  5216 00002BF6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5217 00002BFB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5218 00002BFF 48FFC6                  	inc rsi
  5219 00002C02 EBEC                    	jmp .L_lambda_simple_params_loop_001f
  5220                                  .L_lambda_simple_params_end_001f:
  5221 00002C04 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5222 00002C07 4889C3                  	mov rbx, rax
  5223 00002C0A 58                      	pop rax
  5224 00002C0B C60004                  	mov byte [rax], T_closure
  5225 00002C0E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5226 00002C12 48C74009[1F2C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001f
  5227 00002C1A E9B6000000              	jmp .L_lambda_simple_end_001f
  5228                                  .L_lambda_simple_code_001f:	; lambda-simple body
  5229 00002C1F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5230 00002C25 740B                    	je .L_lambda_simple_arity_check_ok_001f
  5231 00002C27 FF742410                	push qword [rsp + 8 * 2]
  5232 00002C2B 6A01                    	push 1
  5233 00002C2D E94B500100              	jmp L_error_incorrect_arity_simple
  5234                                  .L_lambda_simple_arity_check_ok_001f:
  5235 00002C32 C8000000                	enter 0, 0
  5236                                  	; preparing a non-tail-call
  5237 00002C36 488B4520                	mov rax, PARAM(0)	; param q
  5238 00002C3A 50                      	push rax
  5239 00002C3B 6A01                    	push 1	; arg count
  5240 00002C3D 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
  5241 00002C45 803805                  	cmp byte [rax], T_undefined
  5242 00002C48 0F84494F0100            	je L_error_fvar_undefined
  5243 00002C4E 803804                  	cmp byte [rax], T_closure
  5244 00002C51 0F85C44F0100            	jne L_error_non_closure
  5245 00002C57 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5246 00002C5A FF5009                  	call SOB_CLOSURE_CODE(rax)
  5247 00002C5D 483D[02000000]          	cmp rax, sob_boolean_false
  5248 00002C63 756C                    	jne .L_or_end_0002
  5249                                  	; preparing a tail-call
  5250 00002C65 488B4520                	mov rax, PARAM(0)	; param q
  5251 00002C69 50                      	push rax
  5252 00002C6A 6A01                    	push 1	; arg count
  5253 00002C6C 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
  5254 00002C74 803805                  	cmp byte [rax], T_undefined
  5255 00002C77 0F841A4F0100            	je L_error_fvar_undefined
  5256 00002C7D 803804                  	cmp byte [rax], T_closure
  5257 00002C80 0F85954F0100            	jne L_error_non_closure
  5258 00002C86 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5259 00002C89 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5260 00002C8C FF7500                  	push qword[rbp]
  5261 00002C8F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  5262 00002C92 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  5263 00002C96 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  5264 00002C9A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  5265 00002C9E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  5266 00002CA1 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  5267 00002CA4 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  5268 00002CA9 4983C103                	add r9, 3 	 ;for getting to the params
  5269 00002CAD 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  5270 00002CB1 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  5271                                  .L_tc_recycle_frame_loop_001e:
  5272 00002CB4 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  5273 00002CB7 7410                    	je .L_tc_recycle_frame_done_001e
  5274 00002CB9 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  5275 00002CBC 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  5276 00002CBF 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  5277 00002CC3 4983E808                	sub r8, 8	 ;move the top of the stack one down
  5278 00002CC7 EBEB                    	jmp .L_tc_recycle_frame_loop_001e
  5279                                  .L_tc_recycle_frame_done_001e:
  5280 00002CC9 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  5281 00002CCA 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  5282 00002CCE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5283                                  .L_or_end_0002:
  5284 00002CD1 C9                      	leave
  5285 00002CD2 C21800                  	ret AND_KILL_FRAME(1)
  5286                                  .L_lambda_simple_end_001f:	; new closure is in rax
  5287 00002CD5 48890425[57150000]      	mov qword [free_var_114], rax
  5288 00002CDD 48B8-                   	mov rax, sob_void
  5288 00002CDF [0000000000000000] 
  5289                                  
  5290 00002CE7 4889C7                  	mov rdi, rax
  5291 00002CEA E82A520100              	call print_sexpr_if_not_void
  5292                                  	; preparing a non-tail-call
  5293 00002CEF 48B8-                   	mov rax, L_constants + 1993
  5293 00002CF1 [C907000000000000] 
  5294 00002CF9 50                      	push rax
  5295 00002CFA 6A01                    	push 1	; arg count
  5296 00002CFC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5297 00002D01 E8BE4F0100              	call malloc
  5298 00002D06 50                      	push rax
  5299 00002D07 BF00000000              	mov rdi, 8 * 0	; new rib
  5300 00002D0C E8B34F0100              	call malloc
  5301 00002D11 50                      	push rax
  5302 00002D12 BF08000000              	mov rdi, 8 * 1	; extended env
  5303 00002D17 E8A84F0100              	call malloc
  5304 00002D1C 488B7D10                	mov rdi, ENV
  5305 00002D20 BE00000000              	mov rsi, 0
  5306 00002D25 BA01000000              	mov rdx, 1
  5307                                  .L_lambda_simple_env_loop_0020:	; ext_env[i + 1] <-- env[i]
  5308 00002D2A 4883FE00                	cmp rsi, 0
  5309 00002D2E 7410                    	je .L_lambda_simple_env_end_0020
  5310 00002D30 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5311 00002D34 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5312 00002D38 48FFC6                  	inc rsi
  5313 00002D3B 48FFC2                  	inc rdx
  5314 00002D3E EBEA                    	jmp .L_lambda_simple_env_loop_0020
  5315                                  .L_lambda_simple_env_end_0020:
  5316 00002D40 5B                      	pop rbx
  5317 00002D41 BE00000000              	mov rsi, 0
  5318                                  .L_lambda_simple_params_loop_0020:	; copy params
  5319 00002D46 4883FE00                	cmp rsi, 0
  5320 00002D4A 740E                    	je .L_lambda_simple_params_end_0020
  5321 00002D4C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5322 00002D51 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5323 00002D55 48FFC6                  	inc rsi
  5324 00002D58 EBEC                    	jmp .L_lambda_simple_params_loop_0020
  5325                                  .L_lambda_simple_params_end_0020:
  5326 00002D5A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5327 00002D5D 4889C3                  	mov rbx, rax
  5328 00002D60 58                      	pop rax
  5329 00002D61 C60004                  	mov byte [rax], T_closure
  5330 00002D64 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5331 00002D68 48C74009[752D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0020
  5332 00002D70 E951040000              	jmp .L_lambda_simple_end_0020
  5333                                  .L_lambda_simple_code_0020:	; lambda-simple body
  5334 00002D75 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5335 00002D7B 740B                    	je .L_lambda_simple_arity_check_ok_0020
  5336 00002D7D FF742410                	push qword [rsp + 8 * 2]
  5337 00002D81 6A01                    	push 1
  5338 00002D83 E9F54E0100              	jmp L_error_incorrect_arity_simple
  5339                                  .L_lambda_simple_arity_check_ok_0020:
  5340 00002D88 C8000000                	enter 0, 0
  5341 00002D8C BF08000000              	mov rdi, 8*1
  5342 00002D91 E82E4F0100              	call malloc
  5343 00002D96 488B5D20                	mov rbx, PARAM(0)
  5344 00002D9A 488918                  	mov qword[rax], rbx
  5345 00002D9D 48894520                	mov PARAM(0), rax
  5346 00002DA1 48B8-                   	mov rax, sob_void
  5346 00002DA3 [0000000000000000] 
  5347                                  
  5348 00002DAB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5349 00002DB0 E80F4F0100              	call malloc
  5350 00002DB5 50                      	push rax
  5351 00002DB6 BF08000000              	mov rdi, 8 * 1	; new rib
  5352 00002DBB E8044F0100              	call malloc
  5353 00002DC0 50                      	push rax
  5354 00002DC1 BF10000000              	mov rdi, 8 * 2	; extended env
  5355 00002DC6 E8F94E0100              	call malloc
  5356 00002DCB 488B7D10                	mov rdi, ENV
  5357 00002DCF BE00000000              	mov rsi, 0
  5358 00002DD4 BA01000000              	mov rdx, 1
  5359                                  .L_lambda_simple_env_loop_0021:	; ext_env[i + 1] <-- env[i]
  5360 00002DD9 4883FE01                	cmp rsi, 1
  5361 00002DDD 7410                    	je .L_lambda_simple_env_end_0021
  5362 00002DDF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5363 00002DE3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5364 00002DE7 48FFC6                  	inc rsi
  5365 00002DEA 48FFC2                  	inc rdx
  5366 00002DED EBEA                    	jmp .L_lambda_simple_env_loop_0021
  5367                                  .L_lambda_simple_env_end_0021:
  5368 00002DEF 5B                      	pop rbx
  5369 00002DF0 BE00000000              	mov rsi, 0
  5370                                  .L_lambda_simple_params_loop_0021:	; copy params
  5371 00002DF5 4883FE01                	cmp rsi, 1
  5372 00002DF9 740E                    	je .L_lambda_simple_params_end_0021
  5373 00002DFB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5374 00002E00 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5375 00002E04 48FFC6                  	inc rsi
  5376 00002E07 EBEC                    	jmp .L_lambda_simple_params_loop_0021
  5377                                  .L_lambda_simple_params_end_0021:
  5378 00002E09 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5379 00002E0C 4889C3                  	mov rbx, rax
  5380 00002E0F 58                      	pop rax
  5381 00002E10 C60004                  	mov byte [rax], T_closure
  5382 00002E13 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5383 00002E17 48C74009[242E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0021
  5384 00002E1F E92E010000              	jmp .L_lambda_simple_end_0021
  5385                                  .L_lambda_simple_code_0021:	; lambda-simple body
  5386 00002E24 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5387 00002E2A 740B                    	je .L_lambda_simple_arity_check_ok_0021
  5388 00002E2C FF742410                	push qword [rsp + 8 * 2]
  5389 00002E30 6A02                    	push 2
  5390 00002E32 E9464E0100              	jmp L_error_incorrect_arity_simple
  5391                                  .L_lambda_simple_arity_check_ok_0021:
  5392 00002E37 C8000000                	enter 0, 0
  5393                                  	; preparing a non-tail-call
  5394 00002E3B 488B4528                	mov rax, PARAM(1)	; param s
  5395 00002E3F 50                      	push rax
  5396 00002E40 6A01                    	push 1	; arg count
  5397 00002E42 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
  5398 00002E4A 803805                  	cmp byte [rax], T_undefined
  5399 00002E4D 0F84444D0100            	je L_error_fvar_undefined
  5400 00002E53 803804                  	cmp byte [rax], T_closure
  5401 00002E56 0F85BF4D0100            	jne L_error_non_closure
  5402 00002E5C FF7001                  	push SOB_CLOSURE_ENV(rax)
  5403 00002E5F FF5009                  	call SOB_CLOSURE_CODE(rax)
  5404 00002E62 483D[02000000]          	cmp rax, sob_boolean_false
  5405 00002E68 7409                    	je .L_if_else_0003
  5406 00002E6A 488B4520                	mov rax, PARAM(0)	; param a
  5407 00002E6E E9DB000000              	jmp .L_if_end_0003
  5408                                  .L_if_else_0003:
  5409                                  	; preparing a tail-call
  5410                                  	; preparing a non-tail-call
  5411                                  	; preparing a non-tail-call
  5412 00002E73 488B4528                	mov rax, PARAM(1)	; param s
  5413 00002E77 50                      	push rax
  5414 00002E78 6A01                    	push 1	; arg count
  5415 00002E7A 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  5416 00002E82 803805                  	cmp byte [rax], T_undefined
  5417 00002E85 0F840C4D0100            	je L_error_fvar_undefined
  5418 00002E8B 803804                  	cmp byte [rax], T_closure
  5419 00002E8E 0F85874D0100            	jne L_error_non_closure
  5420 00002E94 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5421 00002E97 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5422 00002E9A 50                      	push rax
  5423                                  	; preparing a non-tail-call
  5424 00002E9B 488B4528                	mov rax, PARAM(1)	; param s
  5425 00002E9F 50                      	push rax
  5426 00002EA0 6A01                    	push 1	; arg count
  5427 00002EA2 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  5428 00002EAA 803805                  	cmp byte [rax], T_undefined
  5429 00002EAD 0F84E44C0100            	je L_error_fvar_undefined
  5430 00002EB3 803804                  	cmp byte [rax], T_closure
  5431 00002EB6 0F855F4D0100            	jne L_error_non_closure
  5432 00002EBC FF7001                  	push SOB_CLOSURE_ENV(rax)
  5433 00002EBF FF5009                  	call SOB_CLOSURE_CODE(rax)
  5434 00002EC2 50                      	push rax
  5435 00002EC3 6A02                    	push 2	; arg count
  5436 00002EC5 488B4510                	mov rax, ENV
  5437 00002EC9 488B00                  	mov rax, qword [rax + 8 * 0]
  5438 00002ECC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  5439 00002ECF 488B00                  	mov rax, qword [rax]
  5440 00002ED2 803804                  	cmp byte [rax], T_closure
  5441 00002ED5 0F85404D0100            	jne L_error_non_closure
  5442 00002EDB FF7001                  	push SOB_CLOSURE_ENV(rax)
  5443 00002EDE FF5009                  	call SOB_CLOSURE_CODE(rax)
  5444 00002EE1 50                      	push rax
  5445 00002EE2 488B4520                	mov rax, PARAM(0)	; param a
  5446 00002EE6 50                      	push rax
  5447 00002EE7 6A02                    	push 2	; arg count
  5448 00002EE9 488B0425[04130000]      	mov rax, qword [free_var_79]	; free var cons
  5449 00002EF1 803805                  	cmp byte [rax], T_undefined
  5450 00002EF4 0F849D4C0100            	je L_error_fvar_undefined
  5451 00002EFA 803804                  	cmp byte [rax], T_closure
  5452 00002EFD 0F85184D0100            	jne L_error_non_closure
  5453 00002F03 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5454 00002F06 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5455 00002F09 FF7500                  	push qword[rbp]
  5456 00002F0C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  5457 00002F0F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  5458 00002F13 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  5459 00002F17 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  5460 00002F1B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  5461 00002F1E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  5462 00002F21 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  5463 00002F26 4983C103                	add r9, 3 	 ;for getting to the params
  5464 00002F2A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  5465 00002F2E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  5466                                  .L_tc_recycle_frame_loop_001f:
  5467 00002F31 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  5468 00002F34 7410                    	je .L_tc_recycle_frame_done_001f
  5469 00002F36 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  5470 00002F39 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  5471 00002F3C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  5472 00002F40 4983E808                	sub r8, 8	 ;move the top of the stack one down
  5473 00002F44 EBEB                    	jmp .L_tc_recycle_frame_loop_001f
  5474                                  .L_tc_recycle_frame_done_001f:
  5475 00002F46 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  5476 00002F47 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  5477 00002F4B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5478                                  .L_if_end_0003:
  5479 00002F4E C9                      	leave
  5480 00002F4F C22000                  	ret AND_KILL_FRAME(2)
  5481                                  .L_lambda_simple_end_0021:	; new closure is in rax
  5482 00002F52 50                      	push rax
  5483 00002F53 488B4520                	mov rax, PARAM(0)	; param run
  5484 00002F57 8F00                    	pop qword [rax]
  5485 00002F59 48B8-                   	mov rax, sob_void
  5485 00002F5B [0000000000000000] 
  5486                                  
  5487 00002F63 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5488 00002F68 E8574D0100              	call malloc
  5489 00002F6D 50                      	push rax
  5490 00002F6E BF08000000              	mov rdi, 8 * 1	; new rib
  5491 00002F73 E84C4D0100              	call malloc
  5492 00002F78 50                      	push rax
  5493 00002F79 BF10000000              	mov rdi, 8 * 2	; extended env
  5494 00002F7E E8414D0100              	call malloc
  5495 00002F83 488B7D10                	mov rdi, ENV
  5496 00002F87 BE00000000              	mov rsi, 0
  5497 00002F8C BA01000000              	mov rdx, 1
  5498                                  .L_lambda_opt_env_loop_0002:	; ext_env[i + 1] <-- env[i]
  5499 00002F91 4883FE01                	cmp rsi, 1
  5500 00002F95 7410                    	je .L_lambda_opt_env_end_0002
  5501 00002F97 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5502 00002F9B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5503 00002F9F 48FFC6                  	inc rsi
  5504 00002FA2 48FFC2                  	inc rdx
  5505 00002FA5 EBEA                    	jmp .L_lambda_opt_env_loop_0002
  5506                                  .L_lambda_opt_env_end_0002:
  5507 00002FA7 5B                      	pop rbx
  5508 00002FA8 BE00000000              	mov rsi, 0
  5509                                  .L_lambda_opt_params_loop_0002:	; copy params
  5510 00002FAD 4883FE01                	cmp rsi, 1
  5511 00002FB1 740E                    	je .L_lambda_opt_params_end_0002
  5512 00002FB3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5513 00002FB8 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5514 00002FBC 48FFC6                  	inc rsi
  5515 00002FBF EBEC                    	jmp .L_lambda_opt_params_loop_0002
  5516                                  .L_lambda_opt_params_end_0002:
  5517 00002FC1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5518 00002FC4 4889C3                  	mov rbx, rax
  5519 00002FC7 58                      	pop rax
  5520 00002FC8 C60004                  	mov byte [rax], T_closure
  5521 00002FCB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5522 00002FCF 48C74009[DC2F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0002
  5523 00002FD7 E9E6010000              	jmp .L_lambda_opt_end_0002
  5524                                  .L_lambda_opt_code_0002:	; lambda-opt body
  5525 00002FDC 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5526 00002FE2 7411                    	je .L_lambda_opt_arity_check_exact_0002
  5527 00002FE4 0F8FBF000000            	jg .L_lambda_opt_arity_check_more_0002
  5528 00002FEA FF742410                	push qword [rsp + 8 * 2]
  5529 00002FEE 6A01                    	push 1
  5530 00002FF0 E99C4C0100              	jmp L_error_incorrect_arity_opt
  5531                                  .L_lambda_opt_arity_check_exact_0002:
  5532 00002FF5 4883EC08                	sub rsp, 8
  5533 00002FF9 488B442408              	mov rax, qword[rsp + 8 *1]
  5534 00002FFE 48890424                	mov qword[rsp], rax  
  5535 00003002 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  5536 00003007 4889442408              	mov qword[rsp + 8 * 1], rax
  5537 0000300C B802000000              	mov rax, 2
  5538 00003011 4889442410              	mov qword[rsp + 8 *2], rax
  5539 00003016 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  5540 0000301B 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  5541 00003020 48B8-                   	mov rax, sob_nil
  5541 00003022 [0100000000000000] 
  5542 0000302A 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  5543 0000302F C8000000                	enter 0, 0
  5544                                  	; preparing a tail-call
  5545 00003033 488B4528                	mov rax, PARAM(1)	; param s
  5546 00003037 50                      	push rax
  5547 00003038 488B4520                	mov rax, PARAM(0)	; param a
  5548 0000303C 50                      	push rax
  5549 0000303D 6A02                    	push 2	; arg count
  5550 0000303F 488B4510                	mov rax, ENV
  5551 00003043 488B00                  	mov rax, qword [rax + 8 * 0]
  5552 00003046 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  5553 00003049 488B00                  	mov rax, qword [rax]
  5554 0000304C 803804                  	cmp byte [rax], T_closure
  5555 0000304F 0F85C64B0100            	jne L_error_non_closure
  5556 00003055 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5557 00003058 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5558 0000305B FF7500                  	push qword[rbp]
  5559 0000305E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  5560 00003061 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  5561 00003065 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  5562 00003069 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  5563 0000306D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  5564 00003070 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  5565 00003073 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  5566 00003078 4983C103                	add r9, 3 	 ;for getting to the params
  5567 0000307C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  5568 00003080 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  5569                                  .L_tc_recycle_frame_loop_0021:
  5570 00003083 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  5571 00003086 7410                    	je .L_tc_recycle_frame_done_0021
  5572 00003088 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  5573 0000308B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  5574 0000308E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  5575 00003092 4983E808                	sub r8, 8	 ;move the top of the stack one down
  5576 00003096 EBEB                    	jmp .L_tc_recycle_frame_loop_0021
  5577                                  .L_tc_recycle_frame_done_0021:
  5578 00003098 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  5579 00003099 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  5580 0000309D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5581 000030A0 C9                      	leave
  5582 000030A1 C22000                  	ret AND_KILL_FRAME(2)
  5583 000030A4 E919010000              	jmp .L_lambda_opt_end_0002	; new closure is in rax
  5584                                  .L_lambda_opt_arity_check_more_0002:
  5585 000030A9 488B442410              	mov rax, qword[rsp + 2 * 8]
  5586 000030AE 4889C7                  	mov rdi, rax
  5587 000030B1 49B9-                   	mov r9, sob_nil
  5587 000030B3 [0100000000000000] 
  5588 000030BB 4989F8                  	mov r8, rdi
  5589                                  .L_lambda_opt_stack_shrink_loop_0002:
  5590 000030BE 4983F801                	cmp r8, 1
  5591 000030C2 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_0002
  5592 000030C4 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)] 	;rbx is the top of the stack
  5593 000030C9 BF11000000              	mov rdi, 1+8+8	;for pair
  5594 000030CE E8F14B0100              	call malloc	 ;to create the pair in the stack
  5595 000030D3 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  5596 000030D6 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
  5597 000030DA 4C894809                 	mov qword[rax+1+8],r9
  5598 000030DE 4989C1                  	mov r9 , rax	 ; for the recursion 
  5599 000030E1 49FFC8                  	dec r8
  5600 000030E4 EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_0002
  5601                                  .L_lambda_opt_stack_shrink_loop_exit_0002:
  5602 000030E6 488B442410              	mov rax, qword[rsp + 2 * 8]
  5603 000030EB BF02000000              	mov rdi, 2
  5604 000030F0 4829F8                  	sub rax, rdi
  5605 000030F3 4889C7                  	mov rdi, rax
  5606 000030F6 486BC008                	imul rax,8
  5607 000030FA 4801C4                  	add rsp, rax
  5608 000030FD 4889E0                  	mov rax, rsp
  5609 00003100 4989F8                  	mov r8, rdi
  5610 00003103 4D6BC008                	imul r8, 8
  5611 00003107 4C29C0                  	sub rax, r8
  5612 0000310A 4989C2                  	mov r10, rax	; holds the original ret in the stack
  5613 0000310D 4983C218                	add r10, 8*3
  5614 00003111 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
  5615 00003115 4C8B00                  	mov r8, qword[rax] 	;arg count = r8
  5616 00003118 4D6BC008                	imul r8,8
  5617 0000311C 4C01C0                  	add rax, r8
  5618 0000311F 4C8908                  	mov qword[rax] ,r9
  5619 00003122 4D89D0                   	mov r8, r10
  5620 00003125 4983C000                	add r8, 8 * 0
  5621 00003129 4D8B08                  	mov r9,qword[r8]
  5622 0000312C 4D890CF8                	mov qword [r8 + rdi * 8], r9
  5623 00003130 4983EA18                	sub r10, 8*3
  5624 00003134 48C744241002000000      	mov qword [rsp+2*8], 2
  5625 0000313D 498B4208                	mov rax, qword[r10 + 1 * 8]
  5626 00003141 4889442408              	mov qword[rsp + 1*8] ,rax
  5627 00003146 498B02                  	mov rax, qword[r10]
  5628 00003149 48890424                	mov qword[rsp], rax
  5629 0000314D C8000000                	enter 0, 0
  5630                                  	; preparing a tail-call
  5631 00003151 488B4528                	mov rax, PARAM(1)	; param s
  5632 00003155 50                      	push rax
  5633 00003156 488B4520                	mov rax, PARAM(0)	; param a
  5634 0000315A 50                      	push rax
  5635 0000315B 6A02                    	push 2	; arg count
  5636 0000315D 488B4510                	mov rax, ENV
  5637 00003161 488B00                  	mov rax, qword [rax + 8 * 0]
  5638 00003164 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  5639 00003167 488B00                  	mov rax, qword [rax]
  5640 0000316A 803804                  	cmp byte [rax], T_closure
  5641 0000316D 0F85A84A0100            	jne L_error_non_closure
  5642 00003173 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5643 00003176 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5644 00003179 FF7500                  	push qword[rbp]
  5645 0000317C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  5646 0000317F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  5647 00003183 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  5648 00003187 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  5649 0000318B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  5650 0000318E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  5651 00003191 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  5652 00003196 4983C103                	add r9, 3 	 ;for getting to the params
  5653 0000319A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  5654 0000319E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  5655                                  .L_tc_recycle_frame_loop_0020:
  5656 000031A1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  5657 000031A4 7410                    	je .L_tc_recycle_frame_done_0020
  5658 000031A6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  5659 000031A9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  5660 000031AC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  5661 000031B0 4983E808                	sub r8, 8	 ;move the top of the stack one down
  5662 000031B4 EBEB                    	jmp .L_tc_recycle_frame_loop_0020
  5663                                  .L_tc_recycle_frame_done_0020:
  5664 000031B6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  5665 000031B7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  5666 000031BB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5667 000031BE C9                      	leave
  5668 000031BF C22000                  	ret AND_KILL_FRAME(2)
  5669                                  .L_lambda_opt_end_0002:	; new closure is in rax
  5670 000031C2 C9                      	leave
  5671 000031C3 C21800                  	ret AND_KILL_FRAME(1)
  5672                                  .L_lambda_simple_end_0020:	; new closure is in rax
  5673 000031C6 803804                  	cmp byte [rax], T_closure
  5674 000031C9 0F854C4A0100            	jne L_error_non_closure
  5675 000031CF FF7001                  	push SOB_CLOSURE_ENV(rax)
  5676 000031D2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5677 000031D5 48890425[F2130000]      	mov qword [free_var_93], rax
  5678 000031DD 48B8-                   	mov rax, sob_void
  5678 000031DF [0000000000000000] 
  5679                                  
  5680 000031E7 4889C7                  	mov rdi, rax
  5681 000031EA E82A4D0100              	call print_sexpr_if_not_void
  5682                                  	; preparing a non-tail-call
  5683 000031EF 48B8-                   	mov rax, L_constants + 1993
  5683 000031F1 [C907000000000000] 
  5684 000031F9 50                      	push rax
  5685 000031FA 6A01                    	push 1	; arg count
  5686 000031FC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5687 00003201 E8BE4A0100              	call malloc
  5688 00003206 50                      	push rax
  5689 00003207 BF00000000              	mov rdi, 8 * 0	; new rib
  5690 0000320C E8B34A0100              	call malloc
  5691 00003211 50                      	push rax
  5692 00003212 BF08000000              	mov rdi, 8 * 1	; extended env
  5693 00003217 E8A84A0100              	call malloc
  5694 0000321C 488B7D10                	mov rdi, ENV
  5695 00003220 BE00000000              	mov rsi, 0
  5696 00003225 BA01000000              	mov rdx, 1
  5697                                  .L_lambda_simple_env_loop_0022:	; ext_env[i + 1] <-- env[i]
  5698 0000322A 4883FE00                	cmp rsi, 0
  5699 0000322E 7410                    	je .L_lambda_simple_env_end_0022
  5700 00003230 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5701 00003234 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5702 00003238 48FFC6                  	inc rsi
  5703 0000323B 48FFC2                  	inc rdx
  5704 0000323E EBEA                    	jmp .L_lambda_simple_env_loop_0022
  5705                                  .L_lambda_simple_env_end_0022:
  5706 00003240 5B                      	pop rbx
  5707 00003241 BE00000000              	mov rsi, 0
  5708                                  .L_lambda_simple_params_loop_0022:	; copy params
  5709 00003246 4883FE00                	cmp rsi, 0
  5710 0000324A 740E                    	je .L_lambda_simple_params_end_0022
  5711 0000324C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5712 00003251 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5713 00003255 48FFC6                  	inc rsi
  5714 00003258 EBEC                    	jmp .L_lambda_simple_params_loop_0022
  5715                                  .L_lambda_simple_params_end_0022:
  5716 0000325A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5717 0000325D 4889C3                  	mov rbx, rax
  5718 00003260 58                      	pop rax
  5719 00003261 C60004                  	mov byte [rax], T_closure
  5720 00003264 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5721 00003268 48C74009[75320000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0022
  5722 00003270 E92E050000              	jmp .L_lambda_simple_end_0022
  5723                                  .L_lambda_simple_code_0022:	; lambda-simple body
  5724 00003275 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5725 0000327B 740B                    	je .L_lambda_simple_arity_check_ok_0022
  5726 0000327D FF742410                	push qword [rsp + 8 * 2]
  5727 00003281 6A01                    	push 1
  5728 00003283 E9F5490100              	jmp L_error_incorrect_arity_simple
  5729                                  .L_lambda_simple_arity_check_ok_0022:
  5730 00003288 C8000000                	enter 0, 0
  5731 0000328C BF08000000              	mov rdi, 8*1
  5732 00003291 E82E4A0100              	call malloc
  5733 00003296 488B5D20                	mov rbx, PARAM(0)
  5734 0000329A 488918                  	mov qword[rax], rbx
  5735 0000329D 48894520                	mov PARAM(0), rax
  5736 000032A1 48B8-                   	mov rax, sob_void
  5736 000032A3 [0000000000000000] 
  5737                                  
  5738 000032AB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5739 000032B0 E80F4A0100              	call malloc
  5740 000032B5 50                      	push rax
  5741 000032B6 BF08000000              	mov rdi, 8 * 1	; new rib
  5742 000032BB E8044A0100              	call malloc
  5743 000032C0 50                      	push rax
  5744 000032C1 BF10000000              	mov rdi, 8 * 2	; extended env
  5745 000032C6 E8F9490100              	call malloc
  5746 000032CB 488B7D10                	mov rdi, ENV
  5747 000032CF BE00000000              	mov rsi, 0
  5748 000032D4 BA01000000              	mov rdx, 1
  5749                                  .L_lambda_simple_env_loop_0023:	; ext_env[i + 1] <-- env[i]
  5750 000032D9 4883FE01                	cmp rsi, 1
  5751 000032DD 7410                    	je .L_lambda_simple_env_end_0023
  5752 000032DF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5753 000032E3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5754 000032E7 48FFC6                  	inc rsi
  5755 000032EA 48FFC2                  	inc rdx
  5756 000032ED EBEA                    	jmp .L_lambda_simple_env_loop_0023
  5757                                  .L_lambda_simple_env_end_0023:
  5758 000032EF 5B                      	pop rbx
  5759 000032F0 BE00000000              	mov rsi, 0
  5760                                  .L_lambda_simple_params_loop_0023:	; copy params
  5761 000032F5 4883FE01                	cmp rsi, 1
  5762 000032F9 740E                    	je .L_lambda_simple_params_end_0023
  5763 000032FB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5764 00003300 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5765 00003304 48FFC6                  	inc rsi
  5766 00003307 EBEC                    	jmp .L_lambda_simple_params_loop_0023
  5767                                  .L_lambda_simple_params_end_0023:
  5768 00003309 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5769 0000330C 4889C3                  	mov rbx, rax
  5770 0000330F 58                      	pop rax
  5771 00003310 C60004                  	mov byte [rax], T_closure
  5772 00003313 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5773 00003317 48C74009[24330000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0023
  5774 0000331F E92F010000              	jmp .L_lambda_simple_end_0023
  5775                                  .L_lambda_simple_code_0023:	; lambda-simple body
  5776 00003324 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5777 0000332A 740B                    	je .L_lambda_simple_arity_check_ok_0023
  5778 0000332C FF742410                	push qword [rsp + 8 * 2]
  5779 00003330 6A02                    	push 2
  5780 00003332 E946490100              	jmp L_error_incorrect_arity_simple
  5781                                  .L_lambda_simple_arity_check_ok_0023:
  5782 00003337 C8000000                	enter 0, 0
  5783                                  	; preparing a non-tail-call
  5784 0000333B 488B4528                	mov rax, PARAM(1)	; param s
  5785 0000333F 50                      	push rax
  5786 00003340 6A01                    	push 1	; arg count
  5787 00003342 488B0425[24150000]      	mov rax, qword [free_var_111]	; free var pair?
  5788 0000334A 803805                  	cmp byte [rax], T_undefined
  5789 0000334D 0F8444480100            	je L_error_fvar_undefined
  5790 00003353 803804                  	cmp byte [rax], T_closure
  5791 00003356 0F85BF480100            	jne L_error_non_closure
  5792 0000335C FF7001                  	push SOB_CLOSURE_ENV(rax)
  5793 0000335F FF5009                  	call SOB_CLOSURE_CODE(rax)
  5794 00003362 483D[02000000]          	cmp rax, sob_boolean_false
  5795 00003368 0F84DD000000            	je .L_if_else_0004
  5796                                  	; preparing a tail-call
  5797                                  	; preparing a non-tail-call
  5798                                  	; preparing a non-tail-call
  5799 0000336E 488B4528                	mov rax, PARAM(1)	; param s
  5800 00003372 50                      	push rax
  5801 00003373 6A01                    	push 1	; arg count
  5802 00003375 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  5803 0000337D 803805                  	cmp byte [rax], T_undefined
  5804 00003380 0F8411480100            	je L_error_fvar_undefined
  5805 00003386 803804                  	cmp byte [rax], T_closure
  5806 00003389 0F858C480100            	jne L_error_non_closure
  5807 0000338F FF7001                  	push SOB_CLOSURE_ENV(rax)
  5808 00003392 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5809 00003395 50                      	push rax
  5810                                  	; preparing a non-tail-call
  5811 00003396 488B4528                	mov rax, PARAM(1)	; param s
  5812 0000339A 50                      	push rax
  5813 0000339B 6A01                    	push 1	; arg count
  5814 0000339D 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  5815 000033A5 803805                  	cmp byte [rax], T_undefined
  5816 000033A8 0F84E9470100            	je L_error_fvar_undefined
  5817 000033AE 803804                  	cmp byte [rax], T_closure
  5818 000033B1 0F8564480100            	jne L_error_non_closure
  5819 000033B7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5820 000033BA FF5009                  	call SOB_CLOSURE_CODE(rax)
  5821 000033BD 50                      	push rax
  5822 000033BE 6A02                    	push 2	; arg count
  5823 000033C0 488B4510                	mov rax, ENV
  5824 000033C4 488B00                  	mov rax, qword [rax + 8 * 0]
  5825 000033C7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  5826 000033CA 488B00                  	mov rax, qword [rax]
  5827 000033CD 803804                  	cmp byte [rax], T_closure
  5828 000033D0 0F8545480100            	jne L_error_non_closure
  5829 000033D6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5830 000033D9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5831 000033DC 50                      	push rax
  5832 000033DD 488B4520                	mov rax, PARAM(0)	; param a
  5833 000033E1 50                      	push rax
  5834 000033E2 6A02                    	push 2	; arg count
  5835 000033E4 488B0425[04130000]      	mov rax, qword [free_var_79]	; free var cons
  5836 000033EC 803805                  	cmp byte [rax], T_undefined
  5837 000033EF 0F84A2470100            	je L_error_fvar_undefined
  5838 000033F5 803804                  	cmp byte [rax], T_closure
  5839 000033F8 0F851D480100            	jne L_error_non_closure
  5840 000033FE FF7001                  	push SOB_CLOSURE_ENV(rax)
  5841 00003401 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5842 00003404 FF7500                  	push qword[rbp]
  5843 00003407 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  5844 0000340A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  5845 0000340E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  5846 00003412 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  5847 00003416 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  5848 00003419 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  5849 0000341C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  5850 00003421 4983C103                	add r9, 3 	 ;for getting to the params
  5851 00003425 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  5852 00003429 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  5853                                  .L_tc_recycle_frame_loop_0022:
  5854 0000342C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  5855 0000342F 7410                    	je .L_tc_recycle_frame_done_0022
  5856 00003431 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  5857 00003434 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  5858 00003437 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  5859 0000343B 4983E808                	sub r8, 8	 ;move the top of the stack one down
  5860 0000343F EBEB                    	jmp .L_tc_recycle_frame_loop_0022
  5861                                  .L_tc_recycle_frame_done_0022:
  5862 00003441 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  5863 00003442 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  5864 00003446 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5865 00003449 EB04                    	jmp .L_if_end_0004
  5866                                  .L_if_else_0004:
  5867 0000344B 488B4520                	mov rax, PARAM(0)	; param a
  5868                                  .L_if_end_0004:
  5869 0000344F C9                      	leave
  5870 00003450 C22000                  	ret AND_KILL_FRAME(2)
  5871                                  .L_lambda_simple_end_0023:	; new closure is in rax
  5872 00003453 50                      	push rax
  5873 00003454 488B4520                	mov rax, PARAM(0)	; param run
  5874 00003458 8F00                    	pop qword [rax]
  5875 0000345A 48B8-                   	mov rax, sob_void
  5875 0000345C [0000000000000000] 
  5876                                  
  5877 00003464 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5878 00003469 E856480100              	call malloc
  5879 0000346E 50                      	push rax
  5880 0000346F BF08000000              	mov rdi, 8 * 1	; new rib
  5881 00003474 E84B480100              	call malloc
  5882 00003479 50                      	push rax
  5883 0000347A BF10000000              	mov rdi, 8 * 2	; extended env
  5884 0000347F E840480100              	call malloc
  5885 00003484 488B7D10                	mov rdi, ENV
  5886 00003488 BE00000000              	mov rsi, 0
  5887 0000348D BA01000000              	mov rdx, 1
  5888                                  .L_lambda_opt_env_loop_0003:	; ext_env[i + 1] <-- env[i]
  5889 00003492 4883FE01                	cmp rsi, 1
  5890 00003496 7410                    	je .L_lambda_opt_env_end_0003
  5891 00003498 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5892 0000349C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5893 000034A0 48FFC6                  	inc rsi
  5894 000034A3 48FFC2                  	inc rdx
  5895 000034A6 EBEA                    	jmp .L_lambda_opt_env_loop_0003
  5896                                  .L_lambda_opt_env_end_0003:
  5897 000034A8 5B                      	pop rbx
  5898 000034A9 BE00000000              	mov rsi, 0
  5899                                  .L_lambda_opt_params_loop_0003:	; copy params
  5900 000034AE 4883FE01                	cmp rsi, 1
  5901 000034B2 740E                    	je .L_lambda_opt_params_end_0003
  5902 000034B4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5903 000034B9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5904 000034BD 48FFC6                  	inc rsi
  5905 000034C0 EBEC                    	jmp .L_lambda_opt_params_loop_0003
  5906                                  .L_lambda_opt_params_end_0003:
  5907 000034C2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5908 000034C5 4889C3                  	mov rbx, rax
  5909 000034C8 58                      	pop rax
  5910 000034C9 C60004                  	mov byte [rax], T_closure
  5911 000034CC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5912 000034D0 48C74009[DD340000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0003
  5913 000034D8 E9C2020000              	jmp .L_lambda_opt_end_0003
  5914                                  .L_lambda_opt_code_0003:	; lambda-opt body
  5915 000034DD 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5916 000034E3 7411                    	je .L_lambda_opt_arity_check_exact_0003
  5917 000034E5 0F8F2D010000            	jg .L_lambda_opt_arity_check_more_0003
  5918 000034EB FF742410                	push qword [rsp + 8 * 2]
  5919 000034EF 6A01                    	push 1
  5920 000034F1 E99B470100              	jmp L_error_incorrect_arity_opt
  5921                                  .L_lambda_opt_arity_check_exact_0003:
  5922 000034F6 4883EC08                	sub rsp, 8
  5923 000034FA 488B442408              	mov rax, qword[rsp + 8 *1]
  5924 000034FF 48890424                	mov qword[rsp], rax  
  5925 00003503 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  5926 00003508 4889442408              	mov qword[rsp + 8 * 1], rax
  5927 0000350D B802000000              	mov rax, 2
  5928 00003512 4889442410              	mov qword[rsp + 8 *2], rax
  5929 00003517 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  5930 0000351C 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  5931 00003521 48B8-                   	mov rax, sob_nil
  5931 00003523 [0100000000000000] 
  5932 0000352B 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  5933 00003530 C8000000                	enter 0, 0
  5934                                  	; preparing a tail-call
  5935                                  	; preparing a non-tail-call
  5936                                  	; preparing a non-tail-call
  5937 00003534 488B4528                	mov rax, PARAM(1)	; param s
  5938 00003538 50                      	push rax
  5939 00003539 6A01                    	push 1	; arg count
  5940 0000353B 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  5941 00003543 803805                  	cmp byte [rax], T_undefined
  5942 00003546 0F844B460100            	je L_error_fvar_undefined
  5943 0000354C 803804                  	cmp byte [rax], T_closure
  5944 0000354F 0F85C6460100            	jne L_error_non_closure
  5945 00003555 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5946 00003558 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5947 0000355B 50                      	push rax
  5948                                  	; preparing a non-tail-call
  5949 0000355C 488B4528                	mov rax, PARAM(1)	; param s
  5950 00003560 50                      	push rax
  5951 00003561 6A01                    	push 1	; arg count
  5952 00003563 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  5953 0000356B 803805                  	cmp byte [rax], T_undefined
  5954 0000356E 0F8423460100            	je L_error_fvar_undefined
  5955 00003574 803804                  	cmp byte [rax], T_closure
  5956 00003577 0F859E460100            	jne L_error_non_closure
  5957 0000357D FF7001                  	push SOB_CLOSURE_ENV(rax)
  5958 00003580 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5959 00003583 50                      	push rax
  5960 00003584 6A02                    	push 2	; arg count
  5961 00003586 488B4510                	mov rax, ENV
  5962 0000358A 488B00                  	mov rax, qword [rax + 8 * 0]
  5963 0000358D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  5964 00003590 488B00                  	mov rax, qword [rax]
  5965 00003593 803804                  	cmp byte [rax], T_closure
  5966 00003596 0F857F460100            	jne L_error_non_closure
  5967 0000359C FF7001                  	push SOB_CLOSURE_ENV(rax)
  5968 0000359F FF5009                  	call SOB_CLOSURE_CODE(rax)
  5969 000035A2 50                      	push rax
  5970 000035A3 488B4520                	mov rax, PARAM(0)	; param f
  5971 000035A7 50                      	push rax
  5972 000035A8 6A02                    	push 2	; arg count
  5973 000035AA 488B0425[910E0000]      	mov rax, qword [free_var_12]	; free var __bin-apply
  5974 000035B2 803805                  	cmp byte [rax], T_undefined
  5975 000035B5 0F84DC450100            	je L_error_fvar_undefined
  5976 000035BB 803804                  	cmp byte [rax], T_closure
  5977 000035BE 0F8557460100            	jne L_error_non_closure
  5978 000035C4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5979 000035C7 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5980 000035CA FF7500                  	push qword[rbp]
  5981 000035CD 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  5982 000035D0 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  5983 000035D4 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  5984 000035D8 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  5985 000035DC 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  5986 000035DF 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  5987 000035E2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  5988 000035E7 4983C103                	add r9, 3 	 ;for getting to the params
  5989 000035EB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  5990 000035EF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  5991                                  .L_tc_recycle_frame_loop_0024:
  5992 000035F2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  5993 000035F5 7410                    	je .L_tc_recycle_frame_done_0024
  5994 000035F7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  5995 000035FA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  5996 000035FD 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  5997 00003601 4983E808                	sub r8, 8	 ;move the top of the stack one down
  5998 00003605 EBEB                    	jmp .L_tc_recycle_frame_loop_0024
  5999                                  .L_tc_recycle_frame_done_0024:
  6000 00003607 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6001 00003608 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6002 0000360C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6003 0000360F C9                      	leave
  6004 00003610 C22000                  	ret AND_KILL_FRAME(2)
  6005 00003613 E987010000              	jmp .L_lambda_opt_end_0003	; new closure is in rax
  6006                                  .L_lambda_opt_arity_check_more_0003:
  6007 00003618 488B442410              	mov rax, qword[rsp + 2 * 8]
  6008 0000361D 4889C7                  	mov rdi, rax
  6009 00003620 49B9-                   	mov r9, sob_nil
  6009 00003622 [0100000000000000] 
  6010 0000362A 4989F8                  	mov r8, rdi
  6011                                  .L_lambda_opt_stack_shrink_loop_0003:
  6012 0000362D 4983F801                	cmp r8, 1
  6013 00003631 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_0003
  6014 00003633 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)] 	;rbx is the top of the stack
  6015 00003638 BF11000000              	mov rdi, 1+8+8	;for pair
  6016 0000363D E882460100              	call malloc	 ;to create the pair in the stack
  6017 00003642 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  6018 00003645 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
  6019 00003649 4C894809                 	mov qword[rax+1+8],r9
  6020 0000364D 4989C1                  	mov r9 , rax	 ; for the recursion 
  6021 00003650 49FFC8                  	dec r8
  6022 00003653 EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_0003
  6023                                  .L_lambda_opt_stack_shrink_loop_exit_0003:
  6024 00003655 488B442410              	mov rax, qword[rsp + 2 * 8]
  6025 0000365A BF02000000              	mov rdi, 2
  6026 0000365F 4829F8                  	sub rax, rdi
  6027 00003662 4889C7                  	mov rdi, rax
  6028 00003665 486BC008                	imul rax,8
  6029 00003669 4801C4                  	add rsp, rax
  6030 0000366C 4889E0                  	mov rax, rsp
  6031 0000366F 4989F8                  	mov r8, rdi
  6032 00003672 4D6BC008                	imul r8, 8
  6033 00003676 4C29C0                  	sub rax, r8
  6034 00003679 4989C2                  	mov r10, rax	; holds the original ret in the stack
  6035 0000367C 4983C218                	add r10, 8*3
  6036 00003680 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
  6037 00003684 4C8B00                  	mov r8, qword[rax] 	;arg count = r8
  6038 00003687 4D6BC008                	imul r8,8
  6039 0000368B 4C01C0                  	add rax, r8
  6040 0000368E 4C8908                  	mov qword[rax] ,r9
  6041 00003691 4D89D0                   	mov r8, r10
  6042 00003694 4983C000                	add r8, 8 * 0
  6043 00003698 4D8B08                  	mov r9,qword[r8]
  6044 0000369B 4D890CF8                	mov qword [r8 + rdi * 8], r9
  6045 0000369F 4983EA18                	sub r10, 8*3
  6046 000036A3 48C744241002000000      	mov qword [rsp+2*8], 2
  6047 000036AC 498B4208                	mov rax, qword[r10 + 1 * 8]
  6048 000036B0 4889442408              	mov qword[rsp + 1*8] ,rax
  6049 000036B5 498B02                  	mov rax, qword[r10]
  6050 000036B8 48890424                	mov qword[rsp], rax
  6051 000036BC C8000000                	enter 0, 0
  6052                                  	; preparing a tail-call
  6053                                  	; preparing a non-tail-call
  6054                                  	; preparing a non-tail-call
  6055 000036C0 488B4528                	mov rax, PARAM(1)	; param s
  6056 000036C4 50                      	push rax
  6057 000036C5 6A01                    	push 1	; arg count
  6058 000036C7 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  6059 000036CF 803805                  	cmp byte [rax], T_undefined
  6060 000036D2 0F84BF440100            	je L_error_fvar_undefined
  6061 000036D8 803804                  	cmp byte [rax], T_closure
  6062 000036DB 0F853A450100            	jne L_error_non_closure
  6063 000036E1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6064 000036E4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6065 000036E7 50                      	push rax
  6066                                  	; preparing a non-tail-call
  6067 000036E8 488B4528                	mov rax, PARAM(1)	; param s
  6068 000036EC 50                      	push rax
  6069 000036ED 6A01                    	push 1	; arg count
  6070 000036EF 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  6071 000036F7 803805                  	cmp byte [rax], T_undefined
  6072 000036FA 0F8497440100            	je L_error_fvar_undefined
  6073 00003700 803804                  	cmp byte [rax], T_closure
  6074 00003703 0F8512450100            	jne L_error_non_closure
  6075 00003709 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6076 0000370C FF5009                  	call SOB_CLOSURE_CODE(rax)
  6077 0000370F 50                      	push rax
  6078 00003710 6A02                    	push 2	; arg count
  6079 00003712 488B4510                	mov rax, ENV
  6080 00003716 488B00                  	mov rax, qword [rax + 8 * 0]
  6081 00003719 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  6082 0000371C 488B00                  	mov rax, qword [rax]
  6083 0000371F 803804                  	cmp byte [rax], T_closure
  6084 00003722 0F85F3440100            	jne L_error_non_closure
  6085 00003728 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6086 0000372B FF5009                  	call SOB_CLOSURE_CODE(rax)
  6087 0000372E 50                      	push rax
  6088 0000372F 488B4520                	mov rax, PARAM(0)	; param f
  6089 00003733 50                      	push rax
  6090 00003734 6A02                    	push 2	; arg count
  6091 00003736 488B0425[910E0000]      	mov rax, qword [free_var_12]	; free var __bin-apply
  6092 0000373E 803805                  	cmp byte [rax], T_undefined
  6093 00003741 0F8450440100            	je L_error_fvar_undefined
  6094 00003747 803804                  	cmp byte [rax], T_closure
  6095 0000374A 0F85CB440100            	jne L_error_non_closure
  6096 00003750 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6097 00003753 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6098 00003756 FF7500                  	push qword[rbp]
  6099 00003759 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6100 0000375C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6101 00003760 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6102 00003764 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6103 00003768 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6104 0000376B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6105 0000376E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6106 00003773 4983C103                	add r9, 3 	 ;for getting to the params
  6107 00003777 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6108 0000377B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6109                                  .L_tc_recycle_frame_loop_0023:
  6110 0000377E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6111 00003781 7410                    	je .L_tc_recycle_frame_done_0023
  6112 00003783 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6113 00003786 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6114 00003789 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6115 0000378D 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6116 00003791 EBEB                    	jmp .L_tc_recycle_frame_loop_0023
  6117                                  .L_tc_recycle_frame_done_0023:
  6118 00003793 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6119 00003794 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6120 00003798 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6121 0000379B C9                      	leave
  6122 0000379C C22000                  	ret AND_KILL_FRAME(2)
  6123                                  .L_lambda_opt_end_0003:	; new closure is in rax
  6124 0000379F C9                      	leave
  6125 000037A0 C21800                  	ret AND_KILL_FRAME(1)
  6126                                  .L_lambda_simple_end_0022:	; new closure is in rax
  6127 000037A3 803804                  	cmp byte [rax], T_closure
  6128 000037A6 0F856F440100            	jne L_error_non_closure
  6129 000037AC FF7001                  	push SOB_CLOSURE_ENV(rax)
  6130 000037AF FF5009                  	call SOB_CLOSURE_CODE(rax)
  6131 000037B2 48890425[F60F0000]      	mov qword [free_var_33], rax
  6132 000037BA 48B8-                   	mov rax, sob_void
  6132 000037BC [0000000000000000] 
  6133                                  
  6134 000037C4 4889C7                  	mov rdi, rax
  6135 000037C7 E84D470100              	call print_sexpr_if_not_void
  6136 000037CC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6137 000037D1 E8EE440100              	call malloc
  6138 000037D6 50                      	push rax
  6139 000037D7 BF00000000              	mov rdi, 8 * 0	; new rib
  6140 000037DC E8E3440100              	call malloc
  6141 000037E1 50                      	push rax
  6142 000037E2 BF08000000              	mov rdi, 8 * 1	; extended env
  6143 000037E7 E8D8440100              	call malloc
  6144 000037EC 488B7D10                	mov rdi, ENV
  6145 000037F0 BE00000000              	mov rsi, 0
  6146 000037F5 BA01000000              	mov rdx, 1
  6147                                  .L_lambda_opt_env_loop_0004:	; ext_env[i + 1] <-- env[i]
  6148 000037FA 4883FE00                	cmp rsi, 0
  6149 000037FE 7410                    	je .L_lambda_opt_env_end_0004
  6150 00003800 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6151 00003804 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6152 00003808 48FFC6                  	inc rsi
  6153 0000380B 48FFC2                  	inc rdx
  6154 0000380E EBEA                    	jmp .L_lambda_opt_env_loop_0004
  6155                                  .L_lambda_opt_env_end_0004:
  6156 00003810 5B                      	pop rbx
  6157 00003811 BE00000000              	mov rsi, 0
  6158                                  .L_lambda_opt_params_loop_0004:	; copy params
  6159 00003816 4883FE00                	cmp rsi, 0
  6160 0000381A 740E                    	je .L_lambda_opt_params_end_0004
  6161 0000381C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6162 00003821 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6163 00003825 48FFC6                  	inc rsi
  6164 00003828 EBEC                    	jmp .L_lambda_opt_params_loop_0004
  6165                                  .L_lambda_opt_params_end_0004:
  6166 0000382A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6167 0000382D 4889C3                  	mov rbx, rax
  6168 00003830 58                      	pop rax
  6169 00003831 C60004                  	mov byte [rax], T_closure
  6170 00003834 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6171 00003838 48C74009[45380000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0004
  6172 00003840 E9BA080000              	jmp .L_lambda_opt_end_0004
  6173                                  .L_lambda_opt_code_0004:	; lambda-opt body
  6174 00003845 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6175 0000384B 7411                    	je .L_lambda_opt_arity_check_exact_0004
  6176 0000384D 0F8F29040000            	jg .L_lambda_opt_arity_check_more_0004
  6177 00003853 FF742410                	push qword [rsp + 8 * 2]
  6178 00003857 6A01                    	push 1
  6179 00003859 E933440100              	jmp L_error_incorrect_arity_opt
  6180                                  .L_lambda_opt_arity_check_exact_0004:
  6181 0000385E 4883EC08                	sub rsp, 8
  6182 00003862 488B442408              	mov rax, qword[rsp + 8 *1]
  6183 00003867 48890424                	mov qword[rsp], rax  
  6184 0000386B 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  6185 00003870 4889442408              	mov qword[rsp + 8 * 1], rax
  6186 00003875 B802000000              	mov rax, 2
  6187 0000387A 4889442410              	mov qword[rsp + 8 *2], rax
  6188 0000387F 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  6189 00003884 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  6190 00003889 48B8-                   	mov rax, sob_nil
  6190 0000388B [0100000000000000] 
  6191 00003893 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  6192 00003898 C8000000                	enter 0, 0
  6193                                  	; preparing a tail-call
  6194 0000389C 48B8-                   	mov rax, L_constants + 1993
  6194 0000389E [C907000000000000] 
  6195 000038A6 50                      	push rax
  6196 000038A7 6A01                    	push 1	; arg count
  6197 000038A9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6198 000038AE E811440100              	call malloc
  6199 000038B3 50                      	push rax
  6200 000038B4 BF10000000              	mov rdi, 8 * 2	; new rib
  6201 000038B9 E806440100              	call malloc
  6202 000038BE 50                      	push rax
  6203 000038BF BF10000000              	mov rdi, 8 * 2	; extended env
  6204 000038C4 E8FB430100              	call malloc
  6205 000038C9 488B7D10                	mov rdi, ENV
  6206 000038CD BE00000000              	mov rsi, 0
  6207 000038D2 BA01000000              	mov rdx, 1
  6208                                  .L_lambda_simple_env_loop_0026:	; ext_env[i + 1] <-- env[i]
  6209 000038D7 4883FE01                	cmp rsi, 1
  6210 000038DB 7410                    	je .L_lambda_simple_env_end_0026
  6211 000038DD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6212 000038E1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6213 000038E5 48FFC6                  	inc rsi
  6214 000038E8 48FFC2                  	inc rdx
  6215 000038EB EBEA                    	jmp .L_lambda_simple_env_loop_0026
  6216                                  .L_lambda_simple_env_end_0026:
  6217 000038ED 5B                      	pop rbx
  6218 000038EE BE00000000              	mov rsi, 0
  6219                                  .L_lambda_simple_params_loop_0026:	; copy params
  6220 000038F3 4883FE02                	cmp rsi, 2
  6221 000038F7 740E                    	je .L_lambda_simple_params_end_0026
  6222 000038F9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6223 000038FE 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6224 00003902 48FFC6                  	inc rsi
  6225 00003905 EBEC                    	jmp .L_lambda_simple_params_loop_0026
  6226                                  .L_lambda_simple_params_end_0026:
  6227 00003907 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6228 0000390A 4889C3                  	mov rbx, rax
  6229 0000390D 58                      	pop rax
  6230 0000390E C60004                  	mov byte [rax], T_closure
  6231 00003911 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6232 00003915 48C74009[22390000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0026
  6233 0000391D E9FD020000              	jmp .L_lambda_simple_end_0026
  6234                                  .L_lambda_simple_code_0026:	; lambda-simple body
  6235 00003922 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6236 00003928 740B                    	je .L_lambda_simple_arity_check_ok_0026
  6237 0000392A FF742410                	push qword [rsp + 8 * 2]
  6238 0000392E 6A01                    	push 1
  6239 00003930 E948430100              	jmp L_error_incorrect_arity_simple
  6240                                  .L_lambda_simple_arity_check_ok_0026:
  6241 00003935 C8000000                	enter 0, 0
  6242 00003939 BF08000000              	mov rdi, 8*1
  6243 0000393E E881430100              	call malloc
  6244 00003943 488B5D20                	mov rbx, PARAM(0)
  6245 00003947 488918                  	mov qword[rax], rbx
  6246 0000394A 48894520                	mov PARAM(0), rax
  6247 0000394E 48B8-                   	mov rax, sob_void
  6247 00003950 [0000000000000000] 
  6248                                  
  6249 00003958 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6250 0000395D E862430100              	call malloc
  6251 00003962 50                      	push rax
  6252 00003963 BF08000000              	mov rdi, 8 * 1	; new rib
  6253 00003968 E857430100              	call malloc
  6254 0000396D 50                      	push rax
  6255 0000396E BF18000000              	mov rdi, 8 * 3	; extended env
  6256 00003973 E84C430100              	call malloc
  6257 00003978 488B7D10                	mov rdi, ENV
  6258 0000397C BE00000000              	mov rsi, 0
  6259 00003981 BA01000000              	mov rdx, 1
  6260                                  .L_lambda_simple_env_loop_0027:	; ext_env[i + 1] <-- env[i]
  6261 00003986 4883FE02                	cmp rsi, 2
  6262 0000398A 7410                    	je .L_lambda_simple_env_end_0027
  6263 0000398C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6264 00003990 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6265 00003994 48FFC6                  	inc rsi
  6266 00003997 48FFC2                  	inc rdx
  6267 0000399A EBEA                    	jmp .L_lambda_simple_env_loop_0027
  6268                                  .L_lambda_simple_env_end_0027:
  6269 0000399C 5B                      	pop rbx
  6270 0000399D BE00000000              	mov rsi, 0
  6271                                  .L_lambda_simple_params_loop_0027:	; copy params
  6272 000039A2 4883FE01                	cmp rsi, 1
  6273 000039A6 740E                    	je .L_lambda_simple_params_end_0027
  6274 000039A8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6275 000039AD 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6276 000039B1 48FFC6                  	inc rsi
  6277 000039B4 EBEC                    	jmp .L_lambda_simple_params_loop_0027
  6278                                  .L_lambda_simple_params_end_0027:
  6279 000039B6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6280 000039B9 4889C3                  	mov rbx, rax
  6281 000039BC 58                      	pop rax
  6282 000039BD C60004                  	mov byte [rax], T_closure
  6283 000039C0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6284 000039C4 48C74009[D1390000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0027
  6285 000039CC E98E010000              	jmp .L_lambda_simple_end_0027
  6286                                  .L_lambda_simple_code_0027:	; lambda-simple body
  6287 000039D1 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6288 000039D7 740B                    	je .L_lambda_simple_arity_check_ok_0027
  6289 000039D9 FF742410                	push qword [rsp + 8 * 2]
  6290 000039DD 6A01                    	push 1
  6291 000039DF E999420100              	jmp L_error_incorrect_arity_simple
  6292                                  .L_lambda_simple_arity_check_ok_0027:
  6293 000039E4 C8000000                	enter 0, 0
  6294                                  	; preparing a non-tail-call
  6295                                  	; preparing a non-tail-call
  6296 000039E8 488B4520                	mov rax, PARAM(0)	; param s
  6297 000039EC 50                      	push rax
  6298 000039ED 6A01                    	push 1	; arg count
  6299 000039EF 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  6300 000039F7 803805                  	cmp byte [rax], T_undefined
  6301 000039FA 0F8497410100            	je L_error_fvar_undefined
  6302 00003A00 803804                  	cmp byte [rax], T_closure
  6303 00003A03 0F8512420100            	jne L_error_non_closure
  6304 00003A09 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6305 00003A0C FF5009                  	call SOB_CLOSURE_CODE(rax)
  6306 00003A0F 50                      	push rax
  6307 00003A10 6A01                    	push 1	; arg count
  6308 00003A12 488B0425[24150000]      	mov rax, qword [free_var_111]	; free var pair?
  6309 00003A1A 803805                  	cmp byte [rax], T_undefined
  6310 00003A1D 0F8474410100            	je L_error_fvar_undefined
  6311 00003A23 803804                  	cmp byte [rax], T_closure
  6312 00003A26 0F85EF410100            	jne L_error_non_closure
  6313 00003A2C FF7001                  	push SOB_CLOSURE_ENV(rax)
  6314 00003A2F FF5009                  	call SOB_CLOSURE_CODE(rax)
  6315 00003A32 483D[02000000]          	cmp rax, sob_boolean_false
  6316 00003A38 0F8413010000            	je .L_if_else_0007
  6317                                  	; preparing a non-tail-call
  6318                                  	; preparing a non-tail-call
  6319 00003A3E 488B4520                	mov rax, PARAM(0)	; param s
  6320 00003A42 50                      	push rax
  6321 00003A43 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  6322 00003A4B 803805                  	cmp byte [rax], T_undefined
  6323 00003A4E 0F8443410100            	je L_error_fvar_undefined
  6324 00003A54 50                      	push rax
  6325 00003A55 6A02                    	push 2	; arg count
  6326 00003A57 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
  6327 00003A5F 803805                  	cmp byte [rax], T_undefined
  6328 00003A62 0F842F410100            	je L_error_fvar_undefined
  6329 00003A68 803804                  	cmp byte [rax], T_closure
  6330 00003A6B 0F85AA410100            	jne L_error_non_closure
  6331 00003A71 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6332 00003A74 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6333 00003A77 50                      	push rax
  6334 00003A78 488B4510                	mov rax, ENV
  6335 00003A7C 488B4008                	mov rax, qword [rax + 8 * 1]
  6336 00003A80 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  6337 00003A83 50                      	push rax
  6338 00003A84 6A02                    	push 2	; arg count
  6339 00003A86 488B0425[F60F0000]      	mov rax, qword [free_var_33]	; free var apply
  6340 00003A8E 803805                  	cmp byte [rax], T_undefined
  6341 00003A91 0F8400410100            	je L_error_fvar_undefined
  6342 00003A97 803804                  	cmp byte [rax], T_closure
  6343 00003A9A 0F857B410100            	jne L_error_non_closure
  6344 00003AA0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6345 00003AA3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6346 00003AA6 483D[02000000]          	cmp rax, sob_boolean_false
  6347 00003AAC 0F859D000000            	jne .L_or_end_0004
  6348                                  	; preparing a tail-call
  6349                                  	; preparing a non-tail-call
  6350 00003AB2 488B4520                	mov rax, PARAM(0)	; param s
  6351 00003AB6 50                      	push rax
  6352 00003AB7 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  6353 00003ABF 803805                  	cmp byte [rax], T_undefined
  6354 00003AC2 0F84CF400100            	je L_error_fvar_undefined
  6355 00003AC8 50                      	push rax
  6356 00003AC9 6A02                    	push 2	; arg count
  6357 00003ACB 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
  6358 00003AD3 803805                  	cmp byte [rax], T_undefined
  6359 00003AD6 0F84BB400100            	je L_error_fvar_undefined
  6360 00003ADC 803804                  	cmp byte [rax], T_closure
  6361 00003ADF 0F8536410100            	jne L_error_non_closure
  6362 00003AE5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6363 00003AE8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6364 00003AEB 50                      	push rax
  6365 00003AEC 6A01                    	push 1	; arg count
  6366 00003AEE 488B4510                	mov rax, ENV
  6367 00003AF2 488B00                  	mov rax, qword [rax + 8 * 0]
  6368 00003AF5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  6369 00003AF8 488B00                  	mov rax, qword [rax]
  6370 00003AFB 803804                  	cmp byte [rax], T_closure
  6371 00003AFE 0F8517410100            	jne L_error_non_closure
  6372 00003B04 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6373 00003B07 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6374 00003B0A FF7500                  	push qword[rbp]
  6375 00003B0D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6376 00003B10 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6377 00003B14 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6378 00003B18 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6379 00003B1C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6380 00003B1F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6381 00003B22 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6382 00003B27 4983C103                	add r9, 3 	 ;for getting to the params
  6383 00003B2B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6384 00003B2F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6385                                  .L_tc_recycle_frame_loop_0028:
  6386 00003B32 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6387 00003B35 7410                    	je .L_tc_recycle_frame_done_0028
  6388 00003B37 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6389 00003B3A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6390 00003B3D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6391 00003B41 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6392 00003B45 EBEB                    	jmp .L_tc_recycle_frame_loop_0028
  6393                                  .L_tc_recycle_frame_done_0028:
  6394 00003B47 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6395 00003B48 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6396 00003B4C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6397                                  .L_or_end_0004:
  6398 00003B4F EB0A                    	jmp .L_if_end_0007
  6399                                  .L_if_else_0007:
  6400 00003B51 48B8-                   	mov rax, L_constants + 2
  6400 00003B53 [0200000000000000] 
  6401                                  .L_if_end_0007:
  6402 00003B5B C9                      	leave
  6403 00003B5C C21800                  	ret AND_KILL_FRAME(1)
  6404                                  .L_lambda_simple_end_0027:	; new closure is in rax
  6405 00003B5F 50                      	push rax
  6406 00003B60 488B4520                	mov rax, PARAM(0)	; param loop
  6407 00003B64 8F00                    	pop qword [rax]
  6408 00003B66 48B8-                   	mov rax, sob_void
  6408 00003B68 [0000000000000000] 
  6409                                  
  6410                                  	; preparing a non-tail-call
  6411 00003B70 488B4510                	mov rax, ENV
  6412 00003B74 488B00                  	mov rax, qword [rax + 8 * 0]
  6413 00003B77 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6414 00003B7B 50                      	push rax
  6415 00003B7C 6A01                    	push 1	; arg count
  6416 00003B7E 488B0425[24150000]      	mov rax, qword [free_var_111]	; free var pair?
  6417 00003B86 803805                  	cmp byte [rax], T_undefined
  6418 00003B89 0F8408400100            	je L_error_fvar_undefined
  6419 00003B8F 803804                  	cmp byte [rax], T_closure
  6420 00003B92 0F8583400100            	jne L_error_non_closure
  6421 00003B98 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6422 00003B9B FF5009                  	call SOB_CLOSURE_CODE(rax)
  6423 00003B9E 483D[02000000]          	cmp rax, sob_boolean_false
  6424 00003BA4 746B                    	je .L_if_else_0008
  6425                                  	; preparing a tail-call
  6426 00003BA6 488B4510                	mov rax, ENV
  6427 00003BAA 488B00                  	mov rax, qword [rax + 8 * 0]
  6428 00003BAD 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6429 00003BB1 50                      	push rax
  6430 00003BB2 6A01                    	push 1	; arg count
  6431 00003BB4 488B4520                	mov rax, PARAM(0)	; param loop
  6432 00003BB8 488B00                  	mov rax, qword [rax]
  6433 00003BBB 803804                  	cmp byte [rax], T_closure
  6434 00003BBE 0F8557400100            	jne L_error_non_closure
  6435 00003BC4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6436 00003BC7 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6437 00003BCA FF7500                  	push qword[rbp]
  6438 00003BCD 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6439 00003BD0 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6440 00003BD4 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6441 00003BD8 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6442 00003BDC 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6443 00003BDF 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6444 00003BE2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6445 00003BE7 4983C103                	add r9, 3 	 ;for getting to the params
  6446 00003BEB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6447 00003BEF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6448                                  .L_tc_recycle_frame_loop_0029:
  6449 00003BF2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6450 00003BF5 7410                    	je .L_tc_recycle_frame_done_0029
  6451 00003BF7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6452 00003BFA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6453 00003BFD 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6454 00003C01 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6455 00003C05 EBEB                    	jmp .L_tc_recycle_frame_loop_0029
  6456                                  .L_tc_recycle_frame_done_0029:
  6457 00003C07 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6458 00003C08 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6459 00003C0C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6460 00003C0F EB0A                    	jmp .L_if_end_0008
  6461                                  .L_if_else_0008:
  6462 00003C11 48B8-                   	mov rax, L_constants + 2
  6462 00003C13 [0200000000000000] 
  6463                                  .L_if_end_0008:
  6464 00003C1B C9                      	leave
  6465 00003C1C C21800                  	ret AND_KILL_FRAME(1)
  6466                                  .L_lambda_simple_end_0026:	; new closure is in rax
  6467 00003C1F 803804                  	cmp byte [rax], T_closure
  6468 00003C22 0F85F33F0100            	jne L_error_non_closure
  6469 00003C28 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6470 00003C2B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6471 00003C2E FF7500                  	push qword[rbp]
  6472 00003C31 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6473 00003C34 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6474 00003C38 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6475 00003C3C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6476 00003C40 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6477 00003C43 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6478 00003C46 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6479 00003C4B 4983C103                	add r9, 3 	 ;for getting to the params
  6480 00003C4F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6481 00003C53 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6482                                  .L_tc_recycle_frame_loop_002a:
  6483 00003C56 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6484 00003C59 7410                    	je .L_tc_recycle_frame_done_002a
  6485 00003C5B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6486 00003C5E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6487 00003C61 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6488 00003C65 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6489 00003C69 EBEB                    	jmp .L_tc_recycle_frame_loop_002a
  6490                                  .L_tc_recycle_frame_done_002a:
  6491 00003C6B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6492 00003C6C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6493 00003C70 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6494 00003C73 C9                      	leave
  6495 00003C74 C22000                  	ret AND_KILL_FRAME(2)
  6496 00003C77 E983040000              	jmp .L_lambda_opt_end_0004	; new closure is in rax
  6497                                  .L_lambda_opt_arity_check_more_0004:
  6498 00003C7C 488B442410              	mov rax, qword[rsp + 2 * 8]
  6499 00003C81 4889C7                  	mov rdi, rax
  6500 00003C84 49B9-                   	mov r9, sob_nil
  6500 00003C86 [0100000000000000] 
  6501 00003C8E 4989F8                  	mov r8, rdi
  6502                                  .L_lambda_opt_stack_shrink_loop_0004:
  6503 00003C91 4983F801                	cmp r8, 1
  6504 00003C95 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_0004
  6505 00003C97 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)] 	;rbx is the top of the stack
  6506 00003C9C BF11000000              	mov rdi, 1+8+8	;for pair
  6507 00003CA1 E81E400100              	call malloc	 ;to create the pair in the stack
  6508 00003CA6 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  6509 00003CA9 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
  6510 00003CAD 4C894809                 	mov qword[rax+1+8],r9
  6511 00003CB1 4989C1                  	mov r9 , rax	 ; for the recursion 
  6512 00003CB4 49FFC8                  	dec r8
  6513 00003CB7 EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_0004
  6514                                  .L_lambda_opt_stack_shrink_loop_exit_0004:
  6515 00003CB9 488B442410              	mov rax, qword[rsp + 2 * 8]
  6516 00003CBE BF02000000              	mov rdi, 2
  6517 00003CC3 4829F8                  	sub rax, rdi
  6518 00003CC6 4889C7                  	mov rdi, rax
  6519 00003CC9 486BC008                	imul rax,8
  6520 00003CCD 4801C4                  	add rsp, rax
  6521 00003CD0 4889E0                  	mov rax, rsp
  6522 00003CD3 4989F8                  	mov r8, rdi
  6523 00003CD6 4D6BC008                	imul r8, 8
  6524 00003CDA 4C29C0                  	sub rax, r8
  6525 00003CDD 4989C2                  	mov r10, rax	; holds the original ret in the stack
  6526 00003CE0 4983C218                	add r10, 8*3
  6527 00003CE4 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
  6528 00003CE8 4C8B00                  	mov r8, qword[rax] 	;arg count = r8
  6529 00003CEB 4D6BC008                	imul r8,8
  6530 00003CEF 4C01C0                  	add rax, r8
  6531 00003CF2 4C8908                  	mov qword[rax] ,r9
  6532 00003CF5 4D89D0                   	mov r8, r10
  6533 00003CF8 4983C000                	add r8, 8 * 0
  6534 00003CFC 4D8B08                  	mov r9,qword[r8]
  6535 00003CFF 4D890CF8                	mov qword [r8 + rdi * 8], r9
  6536 00003D03 4983EA18                	sub r10, 8*3
  6537 00003D07 48C744241002000000      	mov qword [rsp+2*8], 2
  6538 00003D10 498B4208                	mov rax, qword[r10 + 1 * 8]
  6539 00003D14 4889442408              	mov qword[rsp + 1*8] ,rax
  6540 00003D19 498B02                  	mov rax, qword[r10]
  6541 00003D1C 48890424                	mov qword[rsp], rax
  6542 00003D20 C8000000                	enter 0, 0
  6543                                  	; preparing a tail-call
  6544 00003D24 48B8-                   	mov rax, L_constants + 1993
  6544 00003D26 [C907000000000000] 
  6545 00003D2E 50                      	push rax
  6546 00003D2F 6A01                    	push 1	; arg count
  6547 00003D31 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6548 00003D36 E8893F0100              	call malloc
  6549 00003D3B 50                      	push rax
  6550 00003D3C BF10000000              	mov rdi, 8 * 2	; new rib
  6551 00003D41 E87E3F0100              	call malloc
  6552 00003D46 50                      	push rax
  6553 00003D47 BF10000000              	mov rdi, 8 * 2	; extended env
  6554 00003D4C E8733F0100              	call malloc
  6555 00003D51 488B7D10                	mov rdi, ENV
  6556 00003D55 BE00000000              	mov rsi, 0
  6557 00003D5A BA01000000              	mov rdx, 1
  6558                                  .L_lambda_simple_env_loop_0024:	; ext_env[i + 1] <-- env[i]
  6559 00003D5F 4883FE01                	cmp rsi, 1
  6560 00003D63 7410                    	je .L_lambda_simple_env_end_0024
  6561 00003D65 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6562 00003D69 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6563 00003D6D 48FFC6                  	inc rsi
  6564 00003D70 48FFC2                  	inc rdx
  6565 00003D73 EBEA                    	jmp .L_lambda_simple_env_loop_0024
  6566                                  .L_lambda_simple_env_end_0024:
  6567 00003D75 5B                      	pop rbx
  6568 00003D76 BE00000000              	mov rsi, 0
  6569                                  .L_lambda_simple_params_loop_0024:	; copy params
  6570 00003D7B 4883FE02                	cmp rsi, 2
  6571 00003D7F 740E                    	je .L_lambda_simple_params_end_0024
  6572 00003D81 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6573 00003D86 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6574 00003D8A 48FFC6                  	inc rsi
  6575 00003D8D EBEC                    	jmp .L_lambda_simple_params_loop_0024
  6576                                  .L_lambda_simple_params_end_0024:
  6577 00003D8F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6578 00003D92 4889C3                  	mov rbx, rax
  6579 00003D95 58                      	pop rax
  6580 00003D96 C60004                  	mov byte [rax], T_closure
  6581 00003D99 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6582 00003D9D 48C74009[AA3D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0024
  6583 00003DA5 E9FD020000              	jmp .L_lambda_simple_end_0024
  6584                                  .L_lambda_simple_code_0024:	; lambda-simple body
  6585 00003DAA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6586 00003DB0 740B                    	je .L_lambda_simple_arity_check_ok_0024
  6587 00003DB2 FF742410                	push qword [rsp + 8 * 2]
  6588 00003DB6 6A01                    	push 1
  6589 00003DB8 E9C03E0100              	jmp L_error_incorrect_arity_simple
  6590                                  .L_lambda_simple_arity_check_ok_0024:
  6591 00003DBD C8000000                	enter 0, 0
  6592 00003DC1 BF08000000              	mov rdi, 8*1
  6593 00003DC6 E8F93E0100              	call malloc
  6594 00003DCB 488B5D20                	mov rbx, PARAM(0)
  6595 00003DCF 488918                  	mov qword[rax], rbx
  6596 00003DD2 48894520                	mov PARAM(0), rax
  6597 00003DD6 48B8-                   	mov rax, sob_void
  6597 00003DD8 [0000000000000000] 
  6598                                  
  6599 00003DE0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6600 00003DE5 E8DA3E0100              	call malloc
  6601 00003DEA 50                      	push rax
  6602 00003DEB BF08000000              	mov rdi, 8 * 1	; new rib
  6603 00003DF0 E8CF3E0100              	call malloc
  6604 00003DF5 50                      	push rax
  6605 00003DF6 BF18000000              	mov rdi, 8 * 3	; extended env
  6606 00003DFB E8C43E0100              	call malloc
  6607 00003E00 488B7D10                	mov rdi, ENV
  6608 00003E04 BE00000000              	mov rsi, 0
  6609 00003E09 BA01000000              	mov rdx, 1
  6610                                  .L_lambda_simple_env_loop_0025:	; ext_env[i + 1] <-- env[i]
  6611 00003E0E 4883FE02                	cmp rsi, 2
  6612 00003E12 7410                    	je .L_lambda_simple_env_end_0025
  6613 00003E14 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6614 00003E18 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6615 00003E1C 48FFC6                  	inc rsi
  6616 00003E1F 48FFC2                  	inc rdx
  6617 00003E22 EBEA                    	jmp .L_lambda_simple_env_loop_0025
  6618                                  .L_lambda_simple_env_end_0025:
  6619 00003E24 5B                      	pop rbx
  6620 00003E25 BE00000000              	mov rsi, 0
  6621                                  .L_lambda_simple_params_loop_0025:	; copy params
  6622 00003E2A 4883FE01                	cmp rsi, 1
  6623 00003E2E 740E                    	je .L_lambda_simple_params_end_0025
  6624 00003E30 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6625 00003E35 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6626 00003E39 48FFC6                  	inc rsi
  6627 00003E3C EBEC                    	jmp .L_lambda_simple_params_loop_0025
  6628                                  .L_lambda_simple_params_end_0025:
  6629 00003E3E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6630 00003E41 4889C3                  	mov rbx, rax
  6631 00003E44 58                      	pop rax
  6632 00003E45 C60004                  	mov byte [rax], T_closure
  6633 00003E48 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6634 00003E4C 48C74009[593E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0025
  6635 00003E54 E98E010000              	jmp .L_lambda_simple_end_0025
  6636                                  .L_lambda_simple_code_0025:	; lambda-simple body
  6637 00003E59 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6638 00003E5F 740B                    	je .L_lambda_simple_arity_check_ok_0025
  6639 00003E61 FF742410                	push qword [rsp + 8 * 2]
  6640 00003E65 6A01                    	push 1
  6641 00003E67 E9113E0100              	jmp L_error_incorrect_arity_simple
  6642                                  .L_lambda_simple_arity_check_ok_0025:
  6643 00003E6C C8000000                	enter 0, 0
  6644                                  	; preparing a non-tail-call
  6645                                  	; preparing a non-tail-call
  6646 00003E70 488B4520                	mov rax, PARAM(0)	; param s
  6647 00003E74 50                      	push rax
  6648 00003E75 6A01                    	push 1	; arg count
  6649 00003E77 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  6650 00003E7F 803805                  	cmp byte [rax], T_undefined
  6651 00003E82 0F840F3D0100            	je L_error_fvar_undefined
  6652 00003E88 803804                  	cmp byte [rax], T_closure
  6653 00003E8B 0F858A3D0100            	jne L_error_non_closure
  6654 00003E91 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6655 00003E94 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6656 00003E97 50                      	push rax
  6657 00003E98 6A01                    	push 1	; arg count
  6658 00003E9A 488B0425[24150000]      	mov rax, qword [free_var_111]	; free var pair?
  6659 00003EA2 803805                  	cmp byte [rax], T_undefined
  6660 00003EA5 0F84EC3C0100            	je L_error_fvar_undefined
  6661 00003EAB 803804                  	cmp byte [rax], T_closure
  6662 00003EAE 0F85673D0100            	jne L_error_non_closure
  6663 00003EB4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6664 00003EB7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6665 00003EBA 483D[02000000]          	cmp rax, sob_boolean_false
  6666 00003EC0 0F8413010000            	je .L_if_else_0005
  6667                                  	; preparing a non-tail-call
  6668                                  	; preparing a non-tail-call
  6669 00003EC6 488B4520                	mov rax, PARAM(0)	; param s
  6670 00003ECA 50                      	push rax
  6671 00003ECB 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  6672 00003ED3 803805                  	cmp byte [rax], T_undefined
  6673 00003ED6 0F84BB3C0100            	je L_error_fvar_undefined
  6674 00003EDC 50                      	push rax
  6675 00003EDD 6A02                    	push 2	; arg count
  6676 00003EDF 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
  6677 00003EE7 803805                  	cmp byte [rax], T_undefined
  6678 00003EEA 0F84A73C0100            	je L_error_fvar_undefined
  6679 00003EF0 803804                  	cmp byte [rax], T_closure
  6680 00003EF3 0F85223D0100            	jne L_error_non_closure
  6681 00003EF9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6682 00003EFC FF5009                  	call SOB_CLOSURE_CODE(rax)
  6683 00003EFF 50                      	push rax
  6684 00003F00 488B4510                	mov rax, ENV
  6685 00003F04 488B4008                	mov rax, qword [rax + 8 * 1]
  6686 00003F08 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  6687 00003F0B 50                      	push rax
  6688 00003F0C 6A02                    	push 2	; arg count
  6689 00003F0E 488B0425[F60F0000]      	mov rax, qword [free_var_33]	; free var apply
  6690 00003F16 803805                  	cmp byte [rax], T_undefined
  6691 00003F19 0F84783C0100            	je L_error_fvar_undefined
  6692 00003F1F 803804                  	cmp byte [rax], T_closure
  6693 00003F22 0F85F33C0100            	jne L_error_non_closure
  6694 00003F28 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6695 00003F2B FF5009                  	call SOB_CLOSURE_CODE(rax)
  6696 00003F2E 483D[02000000]          	cmp rax, sob_boolean_false
  6697 00003F34 0F859D000000            	jne .L_or_end_0003
  6698                                  	; preparing a tail-call
  6699                                  	; preparing a non-tail-call
  6700 00003F3A 488B4520                	mov rax, PARAM(0)	; param s
  6701 00003F3E 50                      	push rax
  6702 00003F3F 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  6703 00003F47 803805                  	cmp byte [rax], T_undefined
  6704 00003F4A 0F84473C0100            	je L_error_fvar_undefined
  6705 00003F50 50                      	push rax
  6706 00003F51 6A02                    	push 2	; arg count
  6707 00003F53 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
  6708 00003F5B 803805                  	cmp byte [rax], T_undefined
  6709 00003F5E 0F84333C0100            	je L_error_fvar_undefined
  6710 00003F64 803804                  	cmp byte [rax], T_closure
  6711 00003F67 0F85AE3C0100            	jne L_error_non_closure
  6712 00003F6D FF7001                  	push SOB_CLOSURE_ENV(rax)
  6713 00003F70 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6714 00003F73 50                      	push rax
  6715 00003F74 6A01                    	push 1	; arg count
  6716 00003F76 488B4510                	mov rax, ENV
  6717 00003F7A 488B00                  	mov rax, qword [rax + 8 * 0]
  6718 00003F7D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  6719 00003F80 488B00                  	mov rax, qword [rax]
  6720 00003F83 803804                  	cmp byte [rax], T_closure
  6721 00003F86 0F858F3C0100            	jne L_error_non_closure
  6722 00003F8C FF7001                  	push SOB_CLOSURE_ENV(rax)
  6723 00003F8F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6724 00003F92 FF7500                  	push qword[rbp]
  6725 00003F95 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6726 00003F98 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6727 00003F9C 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6728 00003FA0 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6729 00003FA4 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6730 00003FA7 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6731 00003FAA 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6732 00003FAF 4983C103                	add r9, 3 	 ;for getting to the params
  6733 00003FB3 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6734 00003FB7 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6735                                  .L_tc_recycle_frame_loop_0025:
  6736 00003FBA 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6737 00003FBD 7410                    	je .L_tc_recycle_frame_done_0025
  6738 00003FBF 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6739 00003FC2 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6740 00003FC5 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6741 00003FC9 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6742 00003FCD EBEB                    	jmp .L_tc_recycle_frame_loop_0025
  6743                                  .L_tc_recycle_frame_done_0025:
  6744 00003FCF 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6745 00003FD0 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6746 00003FD4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6747                                  .L_or_end_0003:
  6748 00003FD7 EB0A                    	jmp .L_if_end_0005
  6749                                  .L_if_else_0005:
  6750 00003FD9 48B8-                   	mov rax, L_constants + 2
  6750 00003FDB [0200000000000000] 
  6751                                  .L_if_end_0005:
  6752 00003FE3 C9                      	leave
  6753 00003FE4 C21800                  	ret AND_KILL_FRAME(1)
  6754                                  .L_lambda_simple_end_0025:	; new closure is in rax
  6755 00003FE7 50                      	push rax
  6756 00003FE8 488B4520                	mov rax, PARAM(0)	; param loop
  6757 00003FEC 8F00                    	pop qword [rax]
  6758 00003FEE 48B8-                   	mov rax, sob_void
  6758 00003FF0 [0000000000000000] 
  6759                                  
  6760                                  	; preparing a non-tail-call
  6761 00003FF8 488B4510                	mov rax, ENV
  6762 00003FFC 488B00                  	mov rax, qword [rax + 8 * 0]
  6763 00003FFF 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6764 00004003 50                      	push rax
  6765 00004004 6A01                    	push 1	; arg count
  6766 00004006 488B0425[24150000]      	mov rax, qword [free_var_111]	; free var pair?
  6767 0000400E 803805                  	cmp byte [rax], T_undefined
  6768 00004011 0F84803B0100            	je L_error_fvar_undefined
  6769 00004017 803804                  	cmp byte [rax], T_closure
  6770 0000401A 0F85FB3B0100            	jne L_error_non_closure
  6771 00004020 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6772 00004023 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6773 00004026 483D[02000000]          	cmp rax, sob_boolean_false
  6774 0000402C 746B                    	je .L_if_else_0006
  6775                                  	; preparing a tail-call
  6776 0000402E 488B4510                	mov rax, ENV
  6777 00004032 488B00                  	mov rax, qword [rax + 8 * 0]
  6778 00004035 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6779 00004039 50                      	push rax
  6780 0000403A 6A01                    	push 1	; arg count
  6781 0000403C 488B4520                	mov rax, PARAM(0)	; param loop
  6782 00004040 488B00                  	mov rax, qword [rax]
  6783 00004043 803804                  	cmp byte [rax], T_closure
  6784 00004046 0F85CF3B0100            	jne L_error_non_closure
  6785 0000404C FF7001                  	push SOB_CLOSURE_ENV(rax)
  6786 0000404F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6787 00004052 FF7500                  	push qword[rbp]
  6788 00004055 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6789 00004058 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6790 0000405C 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6791 00004060 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6792 00004064 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6793 00004067 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6794 0000406A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6795 0000406F 4983C103                	add r9, 3 	 ;for getting to the params
  6796 00004073 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6797 00004077 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6798                                  .L_tc_recycle_frame_loop_0026:
  6799 0000407A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6800 0000407D 7410                    	je .L_tc_recycle_frame_done_0026
  6801 0000407F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6802 00004082 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6803 00004085 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6804 00004089 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6805 0000408D EBEB                    	jmp .L_tc_recycle_frame_loop_0026
  6806                                  .L_tc_recycle_frame_done_0026:
  6807 0000408F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6808 00004090 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6809 00004094 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6810 00004097 EB0A                    	jmp .L_if_end_0006
  6811                                  .L_if_else_0006:
  6812 00004099 48B8-                   	mov rax, L_constants + 2
  6812 0000409B [0200000000000000] 
  6813                                  .L_if_end_0006:
  6814 000040A3 C9                      	leave
  6815 000040A4 C21800                  	ret AND_KILL_FRAME(1)
  6816                                  .L_lambda_simple_end_0024:	; new closure is in rax
  6817 000040A7 803804                  	cmp byte [rax], T_closure
  6818 000040AA 0F856B3B0100            	jne L_error_non_closure
  6819 000040B0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6820 000040B3 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6821 000040B6 FF7500                  	push qword[rbp]
  6822 000040B9 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6823 000040BC 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6824 000040C0 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6825 000040C4 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6826 000040C8 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6827 000040CB 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6828 000040CE 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6829 000040D3 4983C103                	add r9, 3 	 ;for getting to the params
  6830 000040D7 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6831 000040DB 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6832                                  .L_tc_recycle_frame_loop_0027:
  6833 000040DE 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6834 000040E1 7410                    	je .L_tc_recycle_frame_done_0027
  6835 000040E3 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6836 000040E6 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6837 000040E9 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6838 000040ED 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6839 000040F1 EBEB                    	jmp .L_tc_recycle_frame_loop_0027
  6840                                  .L_tc_recycle_frame_done_0027:
  6841 000040F3 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6842 000040F4 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6843 000040F8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6844 000040FB C9                      	leave
  6845 000040FC C22000                  	ret AND_KILL_FRAME(2)
  6846                                  .L_lambda_opt_end_0004:	; new closure is in rax
  6847 000040FF 48890425[13150000]      	mov qword [free_var_110], rax
  6848 00004107 48B8-                   	mov rax, sob_void
  6848 00004109 [0000000000000000] 
  6849                                  
  6850 00004111 4889C7                  	mov rdi, rax
  6851 00004114 E8003E0100              	call print_sexpr_if_not_void
  6852 00004119 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6853 0000411E E8A13B0100              	call malloc
  6854 00004123 50                      	push rax
  6855 00004124 BF00000000              	mov rdi, 8 * 0	; new rib
  6856 00004129 E8963B0100              	call malloc
  6857 0000412E 50                      	push rax
  6858 0000412F BF08000000              	mov rdi, 8 * 1	; extended env
  6859 00004134 E88B3B0100              	call malloc
  6860 00004139 488B7D10                	mov rdi, ENV
  6861 0000413D BE00000000              	mov rsi, 0
  6862 00004142 BA01000000              	mov rdx, 1
  6863                                  .L_lambda_opt_env_loop_0005:	; ext_env[i + 1] <-- env[i]
  6864 00004147 4883FE00                	cmp rsi, 0
  6865 0000414B 7410                    	je .L_lambda_opt_env_end_0005
  6866 0000414D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6867 00004151 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6868 00004155 48FFC6                  	inc rsi
  6869 00004158 48FFC2                  	inc rdx
  6870 0000415B EBEA                    	jmp .L_lambda_opt_env_loop_0005
  6871                                  .L_lambda_opt_env_end_0005:
  6872 0000415D 5B                      	pop rbx
  6873 0000415E BE00000000              	mov rsi, 0
  6874                                  .L_lambda_opt_params_loop_0005:	; copy params
  6875 00004163 4883FE00                	cmp rsi, 0
  6876 00004167 740E                    	je .L_lambda_opt_params_end_0005
  6877 00004169 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6878 0000416E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6879 00004172 48FFC6                  	inc rsi
  6880 00004175 EBEC                    	jmp .L_lambda_opt_params_loop_0005
  6881                                  .L_lambda_opt_params_end_0005:
  6882 00004177 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6883 0000417A 4889C3                  	mov rbx, rax
  6884 0000417D 58                      	pop rax
  6885 0000417E C60004                  	mov byte [rax], T_closure
  6886 00004181 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6887 00004185 48C74009[92410000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0005
  6888 0000418D E92E090000              	jmp .L_lambda_opt_end_0005
  6889                                  .L_lambda_opt_code_0005:	; lambda-opt body
  6890 00004192 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6891 00004198 7411                    	je .L_lambda_opt_arity_check_exact_0005
  6892 0000419A 0F8F63040000            	jg .L_lambda_opt_arity_check_more_0005
  6893 000041A0 FF742410                	push qword [rsp + 8 * 2]
  6894 000041A4 6A01                    	push 1
  6895 000041A6 E9E63A0100              	jmp L_error_incorrect_arity_opt
  6896                                  .L_lambda_opt_arity_check_exact_0005:
  6897 000041AB 4883EC08                	sub rsp, 8
  6898 000041AF 488B442408              	mov rax, qword[rsp + 8 *1]
  6899 000041B4 48890424                	mov qword[rsp], rax  
  6900 000041B8 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  6901 000041BD 4889442408              	mov qword[rsp + 8 * 1], rax
  6902 000041C2 B802000000              	mov rax, 2
  6903 000041C7 4889442410              	mov qword[rsp + 8 *2], rax
  6904 000041CC 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  6905 000041D1 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  6906 000041D6 48B8-                   	mov rax, sob_nil
  6906 000041D8 [0100000000000000] 
  6907 000041E0 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  6908 000041E5 C8000000                	enter 0, 0
  6909                                  	; preparing a tail-call
  6910 000041E9 48B8-                   	mov rax, L_constants + 1993
  6910 000041EB [C907000000000000] 
  6911 000041F3 50                      	push rax
  6912 000041F4 6A01                    	push 1	; arg count
  6913 000041F6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6914 000041FB E8C43A0100              	call malloc
  6915 00004200 50                      	push rax
  6916 00004201 BF10000000              	mov rdi, 8 * 2	; new rib
  6917 00004206 E8B93A0100              	call malloc
  6918 0000420B 50                      	push rax
  6919 0000420C BF10000000              	mov rdi, 8 * 2	; extended env
  6920 00004211 E8AE3A0100              	call malloc
  6921 00004216 488B7D10                	mov rdi, ENV
  6922 0000421A BE00000000              	mov rsi, 0
  6923 0000421F BA01000000              	mov rdx, 1
  6924                                  .L_lambda_simple_env_loop_002a:	; ext_env[i + 1] <-- env[i]
  6925 00004224 4883FE01                	cmp rsi, 1
  6926 00004228 7410                    	je .L_lambda_simple_env_end_002a
  6927 0000422A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6928 0000422E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6929 00004232 48FFC6                  	inc rsi
  6930 00004235 48FFC2                  	inc rdx
  6931 00004238 EBEA                    	jmp .L_lambda_simple_env_loop_002a
  6932                                  .L_lambda_simple_env_end_002a:
  6933 0000423A 5B                      	pop rbx
  6934 0000423B BE00000000              	mov rsi, 0
  6935                                  .L_lambda_simple_params_loop_002a:	; copy params
  6936 00004240 4883FE02                	cmp rsi, 2
  6937 00004244 740E                    	je .L_lambda_simple_params_end_002a
  6938 00004246 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6939 0000424B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6940 0000424F 48FFC6                  	inc rsi
  6941 00004252 EBEC                    	jmp .L_lambda_simple_params_loop_002a
  6942                                  .L_lambda_simple_params_end_002a:
  6943 00004254 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6944 00004257 4889C3                  	mov rbx, rax
  6945 0000425A 58                      	pop rax
  6946 0000425B C60004                  	mov byte [rax], T_closure
  6947 0000425E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6948 00004262 48C74009[6F420000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002a
  6949 0000426A E937030000              	jmp .L_lambda_simple_end_002a
  6950                                  .L_lambda_simple_code_002a:	; lambda-simple body
  6951 0000426F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6952 00004275 740B                    	je .L_lambda_simple_arity_check_ok_002a
  6953 00004277 FF742410                	push qword [rsp + 8 * 2]
  6954 0000427B 6A01                    	push 1
  6955 0000427D E9FB390100              	jmp L_error_incorrect_arity_simple
  6956                                  .L_lambda_simple_arity_check_ok_002a:
  6957 00004282 C8000000                	enter 0, 0
  6958 00004286 BF08000000              	mov rdi, 8*1
  6959 0000428B E8343A0100              	call malloc
  6960 00004290 488B5D20                	mov rbx, PARAM(0)
  6961 00004294 488918                  	mov qword[rax], rbx
  6962 00004297 48894520                	mov PARAM(0), rax
  6963 0000429B 48B8-                   	mov rax, sob_void
  6963 0000429D [0000000000000000] 
  6964                                  
  6965 000042A5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6966 000042AA E8153A0100              	call malloc
  6967 000042AF 50                      	push rax
  6968 000042B0 BF08000000              	mov rdi, 8 * 1	; new rib
  6969 000042B5 E80A3A0100              	call malloc
  6970 000042BA 50                      	push rax
  6971 000042BB BF18000000              	mov rdi, 8 * 3	; extended env
  6972 000042C0 E8FF390100              	call malloc
  6973 000042C5 488B7D10                	mov rdi, ENV
  6974 000042C9 BE00000000              	mov rsi, 0
  6975 000042CE BA01000000              	mov rdx, 1
  6976                                  .L_lambda_simple_env_loop_002b:	; ext_env[i + 1] <-- env[i]
  6977 000042D3 4883FE02                	cmp rsi, 2
  6978 000042D7 7410                    	je .L_lambda_simple_env_end_002b
  6979 000042D9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6980 000042DD 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6981 000042E1 48FFC6                  	inc rsi
  6982 000042E4 48FFC2                  	inc rdx
  6983 000042E7 EBEA                    	jmp .L_lambda_simple_env_loop_002b
  6984                                  .L_lambda_simple_env_end_002b:
  6985 000042E9 5B                      	pop rbx
  6986 000042EA BE00000000              	mov rsi, 0
  6987                                  .L_lambda_simple_params_loop_002b:	; copy params
  6988 000042EF 4883FE01                	cmp rsi, 1
  6989 000042F3 740E                    	je .L_lambda_simple_params_end_002b
  6990 000042F5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6991 000042FA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6992 000042FE 48FFC6                  	inc rsi
  6993 00004301 EBEC                    	jmp .L_lambda_simple_params_loop_002b
  6994                                  .L_lambda_simple_params_end_002b:
  6995 00004303 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6996 00004306 4889C3                  	mov rbx, rax
  6997 00004309 58                      	pop rax
  6998 0000430A C60004                  	mov byte [rax], T_closure
  6999 0000430D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7000 00004311 48C74009[1E430000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002b
  7001 00004319 E98E010000              	jmp .L_lambda_simple_end_002b
  7002                                  .L_lambda_simple_code_002b:	; lambda-simple body
  7003 0000431E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7004 00004324 740B                    	je .L_lambda_simple_arity_check_ok_002b
  7005 00004326 FF742410                	push qword [rsp + 8 * 2]
  7006 0000432A 6A01                    	push 1
  7007 0000432C E94C390100              	jmp L_error_incorrect_arity_simple
  7008                                  .L_lambda_simple_arity_check_ok_002b:
  7009 00004331 C8000000                	enter 0, 0
  7010                                  	; preparing a non-tail-call
  7011                                  	; preparing a non-tail-call
  7012 00004335 488B4520                	mov rax, PARAM(0)	; param s
  7013 00004339 50                      	push rax
  7014 0000433A 6A01                    	push 1	; arg count
  7015 0000433C 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  7016 00004344 803805                  	cmp byte [rax], T_undefined
  7017 00004347 0F844A380100            	je L_error_fvar_undefined
  7018 0000434D 803804                  	cmp byte [rax], T_closure
  7019 00004350 0F85C5380100            	jne L_error_non_closure
  7020 00004356 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7021 00004359 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7022 0000435C 50                      	push rax
  7023 0000435D 6A01                    	push 1	; arg count
  7024 0000435F 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
  7025 00004367 803805                  	cmp byte [rax], T_undefined
  7026 0000436A 0F8427380100            	je L_error_fvar_undefined
  7027 00004370 803804                  	cmp byte [rax], T_closure
  7028 00004373 0F85A2380100            	jne L_error_non_closure
  7029 00004379 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7030 0000437C FF5009                  	call SOB_CLOSURE_CODE(rax)
  7031 0000437F 483D[02000000]          	cmp rax, sob_boolean_false
  7032 00004385 0F851D010000            	jne .L_or_end_0007
  7033                                  	; preparing a non-tail-call
  7034                                  	; preparing a non-tail-call
  7035 0000438B 488B4520                	mov rax, PARAM(0)	; param s
  7036 0000438F 50                      	push rax
  7037 00004390 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  7038 00004398 803805                  	cmp byte [rax], T_undefined
  7039 0000439B 0F84F6370100            	je L_error_fvar_undefined
  7040 000043A1 50                      	push rax
  7041 000043A2 6A02                    	push 2	; arg count
  7042 000043A4 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
  7043 000043AC 803805                  	cmp byte [rax], T_undefined
  7044 000043AF 0F84E2370100            	je L_error_fvar_undefined
  7045 000043B5 803804                  	cmp byte [rax], T_closure
  7046 000043B8 0F855D380100            	jne L_error_non_closure
  7047 000043BE FF7001                  	push SOB_CLOSURE_ENV(rax)
  7048 000043C1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7049 000043C4 50                      	push rax
  7050 000043C5 488B4510                	mov rax, ENV
  7051 000043C9 488B4008                	mov rax, qword [rax + 8 * 1]
  7052 000043CD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  7053 000043D0 50                      	push rax
  7054 000043D1 6A02                    	push 2	; arg count
  7055 000043D3 488B0425[F60F0000]      	mov rax, qword [free_var_33]	; free var apply
  7056 000043DB 803805                  	cmp byte [rax], T_undefined
  7057 000043DE 0F84B3370100            	je L_error_fvar_undefined
  7058 000043E4 803804                  	cmp byte [rax], T_closure
  7059 000043E7 0F852E380100            	jne L_error_non_closure
  7060 000043ED FF7001                  	push SOB_CLOSURE_ENV(rax)
  7061 000043F0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7062 000043F3 483D[02000000]          	cmp rax, sob_boolean_false
  7063 000043F9 0F849F000000            	je .L_if_else_000b
  7064                                  	; preparing a tail-call
  7065                                  	; preparing a non-tail-call
  7066 000043FF 488B4520                	mov rax, PARAM(0)	; param s
  7067 00004403 50                      	push rax
  7068 00004404 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  7069 0000440C 803805                  	cmp byte [rax], T_undefined
  7070 0000440F 0F8482370100            	je L_error_fvar_undefined
  7071 00004415 50                      	push rax
  7072 00004416 6A02                    	push 2	; arg count
  7073 00004418 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
  7074 00004420 803805                  	cmp byte [rax], T_undefined
  7075 00004423 0F846E370100            	je L_error_fvar_undefined
  7076 00004429 803804                  	cmp byte [rax], T_closure
  7077 0000442C 0F85E9370100            	jne L_error_non_closure
  7078 00004432 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7079 00004435 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7080 00004438 50                      	push rax
  7081 00004439 6A01                    	push 1	; arg count
  7082 0000443B 488B4510                	mov rax, ENV
  7083 0000443F 488B00                  	mov rax, qword [rax + 8 * 0]
  7084 00004442 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  7085 00004445 488B00                  	mov rax, qword [rax]
  7086 00004448 803804                  	cmp byte [rax], T_closure
  7087 0000444B 0F85CA370100            	jne L_error_non_closure
  7088 00004451 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7089 00004454 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7090 00004457 FF7500                  	push qword[rbp]
  7091 0000445A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7092 0000445D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7093 00004461 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7094 00004465 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7095 00004469 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7096 0000446C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7097 0000446F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7098 00004474 4983C103                	add r9, 3 	 ;for getting to the params
  7099 00004478 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7100 0000447C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7101                                  .L_tc_recycle_frame_loop_002e:
  7102 0000447F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7103 00004482 7410                    	je .L_tc_recycle_frame_done_002e
  7104 00004484 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7105 00004487 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7106 0000448A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7107 0000448E 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7108 00004492 EBEB                    	jmp .L_tc_recycle_frame_loop_002e
  7109                                  .L_tc_recycle_frame_done_002e:
  7110 00004494 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7111 00004495 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7112 00004499 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7113 0000449C EB0A                    	jmp .L_if_end_000b
  7114                                  .L_if_else_000b:
  7115 0000449E 48B8-                   	mov rax, L_constants + 2
  7115 000044A0 [0200000000000000] 
  7116                                  .L_if_end_000b:
  7117                                  .L_or_end_0007:
  7118 000044A8 C9                      	leave
  7119 000044A9 C21800                  	ret AND_KILL_FRAME(1)
  7120                                  .L_lambda_simple_end_002b:	; new closure is in rax
  7121 000044AC 50                      	push rax
  7122 000044AD 488B4520                	mov rax, PARAM(0)	; param loop
  7123 000044B1 8F00                    	pop qword [rax]
  7124 000044B3 48B8-                   	mov rax, sob_void
  7124 000044B5 [0000000000000000] 
  7125                                  
  7126                                  	; preparing a non-tail-call
  7127 000044BD 488B4510                	mov rax, ENV
  7128 000044C1 488B00                  	mov rax, qword [rax + 8 * 0]
  7129 000044C4 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  7130 000044C8 50                      	push rax
  7131 000044C9 6A01                    	push 1	; arg count
  7132 000044CB 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
  7133 000044D3 803805                  	cmp byte [rax], T_undefined
  7134 000044D6 0F84BB360100            	je L_error_fvar_undefined
  7135 000044DC 803804                  	cmp byte [rax], T_closure
  7136 000044DF 0F8536370100            	jne L_error_non_closure
  7137 000044E5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7138 000044E8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7139 000044EB 483D[02000000]          	cmp rax, sob_boolean_false
  7140 000044F1 0F85AB000000            	jne .L_or_end_0008
  7141                                  	; preparing a non-tail-call
  7142 000044F7 488B4510                	mov rax, ENV
  7143 000044FB 488B00                  	mov rax, qword [rax + 8 * 0]
  7144 000044FE 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  7145 00004502 50                      	push rax
  7146 00004503 6A01                    	push 1	; arg count
  7147 00004505 488B0425[24150000]      	mov rax, qword [free_var_111]	; free var pair?
  7148 0000450D 803805                  	cmp byte [rax], T_undefined
  7149 00004510 0F8481360100            	je L_error_fvar_undefined
  7150 00004516 803804                  	cmp byte [rax], T_closure
  7151 00004519 0F85FC360100            	jne L_error_non_closure
  7152 0000451F FF7001                  	push SOB_CLOSURE_ENV(rax)
  7153 00004522 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7154 00004525 483D[02000000]          	cmp rax, sob_boolean_false
  7155 0000452B 746B                    	je .L_if_else_000c
  7156                                  	; preparing a tail-call
  7157 0000452D 488B4510                	mov rax, ENV
  7158 00004531 488B00                  	mov rax, qword [rax + 8 * 0]
  7159 00004534 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  7160 00004538 50                      	push rax
  7161 00004539 6A01                    	push 1	; arg count
  7162 0000453B 488B4520                	mov rax, PARAM(0)	; param loop
  7163 0000453F 488B00                  	mov rax, qword [rax]
  7164 00004542 803804                  	cmp byte [rax], T_closure
  7165 00004545 0F85D0360100            	jne L_error_non_closure
  7166 0000454B FF7001                  	push SOB_CLOSURE_ENV(rax)
  7167 0000454E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7168 00004551 FF7500                  	push qword[rbp]
  7169 00004554 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7170 00004557 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7171 0000455B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7172 0000455F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7173 00004563 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7174 00004566 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7175 00004569 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7176 0000456E 4983C103                	add r9, 3 	 ;for getting to the params
  7177 00004572 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7178 00004576 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7179                                  .L_tc_recycle_frame_loop_002f:
  7180 00004579 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7181 0000457C 7410                    	je .L_tc_recycle_frame_done_002f
  7182 0000457E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7183 00004581 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7184 00004584 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7185 00004588 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7186 0000458C EBEB                    	jmp .L_tc_recycle_frame_loop_002f
  7187                                  .L_tc_recycle_frame_done_002f:
  7188 0000458E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7189 0000458F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7190 00004593 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7191 00004596 EB0A                    	jmp .L_if_end_000c
  7192                                  .L_if_else_000c:
  7193 00004598 48B8-                   	mov rax, L_constants + 2
  7193 0000459A [0200000000000000] 
  7194                                  .L_if_end_000c:
  7195                                  .L_or_end_0008:
  7196 000045A2 C9                      	leave
  7197 000045A3 C21800                  	ret AND_KILL_FRAME(1)
  7198                                  .L_lambda_simple_end_002a:	; new closure is in rax
  7199 000045A6 803804                  	cmp byte [rax], T_closure
  7200 000045A9 0F856C360100            	jne L_error_non_closure
  7201 000045AF FF7001                  	push SOB_CLOSURE_ENV(rax)
  7202 000045B2 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7203 000045B5 FF7500                  	push qword[rbp]
  7204 000045B8 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7205 000045BB 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7206 000045BF 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7207 000045C3 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7208 000045C7 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7209 000045CA 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7210 000045CD 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7211 000045D2 4983C103                	add r9, 3 	 ;for getting to the params
  7212 000045D6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7213 000045DA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7214                                  .L_tc_recycle_frame_loop_0030:
  7215 000045DD 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7216 000045E0 7410                    	je .L_tc_recycle_frame_done_0030
  7217 000045E2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7218 000045E5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7219 000045E8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7220 000045EC 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7221 000045F0 EBEB                    	jmp .L_tc_recycle_frame_loop_0030
  7222                                  .L_tc_recycle_frame_done_0030:
  7223 000045F2 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7224 000045F3 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7225 000045F7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7226 000045FA C9                      	leave
  7227 000045FB C22000                  	ret AND_KILL_FRAME(2)
  7228 000045FE E9BD040000              	jmp .L_lambda_opt_end_0005	; new closure is in rax
  7229                                  .L_lambda_opt_arity_check_more_0005:
  7230 00004603 488B442410              	mov rax, qword[rsp + 2 * 8]
  7231 00004608 4889C7                  	mov rdi, rax
  7232 0000460B 49B9-                   	mov r9, sob_nil
  7232 0000460D [0100000000000000] 
  7233 00004615 4989F8                  	mov r8, rdi
  7234                                  .L_lambda_opt_stack_shrink_loop_0005:
  7235 00004618 4983F801                	cmp r8, 1
  7236 0000461C 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_0005
  7237 0000461E 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)] 	;rbx is the top of the stack
  7238 00004623 BF11000000              	mov rdi, 1+8+8	;for pair
  7239 00004628 E897360100              	call malloc	 ;to create the pair in the stack
  7240 0000462D C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  7241 00004630 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
  7242 00004634 4C894809                 	mov qword[rax+1+8],r9
  7243 00004638 4989C1                  	mov r9 , rax	 ; for the recursion 
  7244 0000463B 49FFC8                  	dec r8
  7245 0000463E EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_0005
  7246                                  .L_lambda_opt_stack_shrink_loop_exit_0005:
  7247 00004640 488B442410              	mov rax, qword[rsp + 2 * 8]
  7248 00004645 BF02000000              	mov rdi, 2
  7249 0000464A 4829F8                  	sub rax, rdi
  7250 0000464D 4889C7                  	mov rdi, rax
  7251 00004650 486BC008                	imul rax,8
  7252 00004654 4801C4                  	add rsp, rax
  7253 00004657 4889E0                  	mov rax, rsp
  7254 0000465A 4989F8                  	mov r8, rdi
  7255 0000465D 4D6BC008                	imul r8, 8
  7256 00004661 4C29C0                  	sub rax, r8
  7257 00004664 4989C2                  	mov r10, rax	; holds the original ret in the stack
  7258 00004667 4983C218                	add r10, 8*3
  7259 0000466B 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
  7260 0000466F 4C8B00                  	mov r8, qword[rax] 	;arg count = r8
  7261 00004672 4D6BC008                	imul r8,8
  7262 00004676 4C01C0                  	add rax, r8
  7263 00004679 4C8908                  	mov qword[rax] ,r9
  7264 0000467C 4D89D0                   	mov r8, r10
  7265 0000467F 4983C000                	add r8, 8 * 0
  7266 00004683 4D8B08                  	mov r9,qword[r8]
  7267 00004686 4D890CF8                	mov qword [r8 + rdi * 8], r9
  7268 0000468A 4983EA18                	sub r10, 8*3
  7269 0000468E 48C744241002000000      	mov qword [rsp+2*8], 2
  7270 00004697 498B4208                	mov rax, qword[r10 + 1 * 8]
  7271 0000469B 4889442408              	mov qword[rsp + 1*8] ,rax
  7272 000046A0 498B02                  	mov rax, qword[r10]
  7273 000046A3 48890424                	mov qword[rsp], rax
  7274 000046A7 C8000000                	enter 0, 0
  7275                                  	; preparing a tail-call
  7276 000046AB 48B8-                   	mov rax, L_constants + 1993
  7276 000046AD [C907000000000000] 
  7277 000046B5 50                      	push rax
  7278 000046B6 6A01                    	push 1	; arg count
  7279 000046B8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7280 000046BD E802360100              	call malloc
  7281 000046C2 50                      	push rax
  7282 000046C3 BF10000000              	mov rdi, 8 * 2	; new rib
  7283 000046C8 E8F7350100              	call malloc
  7284 000046CD 50                      	push rax
  7285 000046CE BF10000000              	mov rdi, 8 * 2	; extended env
  7286 000046D3 E8EC350100              	call malloc
  7287 000046D8 488B7D10                	mov rdi, ENV
  7288 000046DC BE00000000              	mov rsi, 0
  7289 000046E1 BA01000000              	mov rdx, 1
  7290                                  .L_lambda_simple_env_loop_0028:	; ext_env[i + 1] <-- env[i]
  7291 000046E6 4883FE01                	cmp rsi, 1
  7292 000046EA 7410                    	je .L_lambda_simple_env_end_0028
  7293 000046EC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7294 000046F0 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7295 000046F4 48FFC6                  	inc rsi
  7296 000046F7 48FFC2                  	inc rdx
  7297 000046FA EBEA                    	jmp .L_lambda_simple_env_loop_0028
  7298                                  .L_lambda_simple_env_end_0028:
  7299 000046FC 5B                      	pop rbx
  7300 000046FD BE00000000              	mov rsi, 0
  7301                                  .L_lambda_simple_params_loop_0028:	; copy params
  7302 00004702 4883FE02                	cmp rsi, 2
  7303 00004706 740E                    	je .L_lambda_simple_params_end_0028
  7304 00004708 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7305 0000470D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7306 00004711 48FFC6                  	inc rsi
  7307 00004714 EBEC                    	jmp .L_lambda_simple_params_loop_0028
  7308                                  .L_lambda_simple_params_end_0028:
  7309 00004716 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7310 00004719 4889C3                  	mov rbx, rax
  7311 0000471C 58                      	pop rax
  7312 0000471D C60004                  	mov byte [rax], T_closure
  7313 00004720 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7314 00004724 48C74009[31470000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0028
  7315 0000472C E937030000              	jmp .L_lambda_simple_end_0028
  7316                                  .L_lambda_simple_code_0028:	; lambda-simple body
  7317 00004731 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7318 00004737 740B                    	je .L_lambda_simple_arity_check_ok_0028
  7319 00004739 FF742410                	push qword [rsp + 8 * 2]
  7320 0000473D 6A01                    	push 1
  7321 0000473F E939350100              	jmp L_error_incorrect_arity_simple
  7322                                  .L_lambda_simple_arity_check_ok_0028:
  7323 00004744 C8000000                	enter 0, 0
  7324 00004748 BF08000000              	mov rdi, 8*1
  7325 0000474D E872350100              	call malloc
  7326 00004752 488B5D20                	mov rbx, PARAM(0)
  7327 00004756 488918                  	mov qword[rax], rbx
  7328 00004759 48894520                	mov PARAM(0), rax
  7329 0000475D 48B8-                   	mov rax, sob_void
  7329 0000475F [0000000000000000] 
  7330                                  
  7331 00004767 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7332 0000476C E853350100              	call malloc
  7333 00004771 50                      	push rax
  7334 00004772 BF08000000              	mov rdi, 8 * 1	; new rib
  7335 00004777 E848350100              	call malloc
  7336 0000477C 50                      	push rax
  7337 0000477D BF18000000              	mov rdi, 8 * 3	; extended env
  7338 00004782 E83D350100              	call malloc
  7339 00004787 488B7D10                	mov rdi, ENV
  7340 0000478B BE00000000              	mov rsi, 0
  7341 00004790 BA01000000              	mov rdx, 1
  7342                                  .L_lambda_simple_env_loop_0029:	; ext_env[i + 1] <-- env[i]
  7343 00004795 4883FE02                	cmp rsi, 2
  7344 00004799 7410                    	je .L_lambda_simple_env_end_0029
  7345 0000479B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7346 0000479F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7347 000047A3 48FFC6                  	inc rsi
  7348 000047A6 48FFC2                  	inc rdx
  7349 000047A9 EBEA                    	jmp .L_lambda_simple_env_loop_0029
  7350                                  .L_lambda_simple_env_end_0029:
  7351 000047AB 5B                      	pop rbx
  7352 000047AC BE00000000              	mov rsi, 0
  7353                                  .L_lambda_simple_params_loop_0029:	; copy params
  7354 000047B1 4883FE01                	cmp rsi, 1
  7355 000047B5 740E                    	je .L_lambda_simple_params_end_0029
  7356 000047B7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7357 000047BC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7358 000047C0 48FFC6                  	inc rsi
  7359 000047C3 EBEC                    	jmp .L_lambda_simple_params_loop_0029
  7360                                  .L_lambda_simple_params_end_0029:
  7361 000047C5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7362 000047C8 4889C3                  	mov rbx, rax
  7363 000047CB 58                      	pop rax
  7364 000047CC C60004                  	mov byte [rax], T_closure
  7365 000047CF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7366 000047D3 48C74009[E0470000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0029
  7367 000047DB E98E010000              	jmp .L_lambda_simple_end_0029
  7368                                  .L_lambda_simple_code_0029:	; lambda-simple body
  7369 000047E0 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7370 000047E6 740B                    	je .L_lambda_simple_arity_check_ok_0029
  7371 000047E8 FF742410                	push qword [rsp + 8 * 2]
  7372 000047EC 6A01                    	push 1
  7373 000047EE E98A340100              	jmp L_error_incorrect_arity_simple
  7374                                  .L_lambda_simple_arity_check_ok_0029:
  7375 000047F3 C8000000                	enter 0, 0
  7376                                  	; preparing a non-tail-call
  7377                                  	; preparing a non-tail-call
  7378 000047F7 488B4520                	mov rax, PARAM(0)	; param s
  7379 000047FB 50                      	push rax
  7380 000047FC 6A01                    	push 1	; arg count
  7381 000047FE 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  7382 00004806 803805                  	cmp byte [rax], T_undefined
  7383 00004809 0F8488330100            	je L_error_fvar_undefined
  7384 0000480F 803804                  	cmp byte [rax], T_closure
  7385 00004812 0F8503340100            	jne L_error_non_closure
  7386 00004818 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7387 0000481B FF5009                  	call SOB_CLOSURE_CODE(rax)
  7388 0000481E 50                      	push rax
  7389 0000481F 6A01                    	push 1	; arg count
  7390 00004821 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
  7391 00004829 803805                  	cmp byte [rax], T_undefined
  7392 0000482C 0F8465330100            	je L_error_fvar_undefined
  7393 00004832 803804                  	cmp byte [rax], T_closure
  7394 00004835 0F85E0330100            	jne L_error_non_closure
  7395 0000483B FF7001                  	push SOB_CLOSURE_ENV(rax)
  7396 0000483E FF5009                  	call SOB_CLOSURE_CODE(rax)
  7397 00004841 483D[02000000]          	cmp rax, sob_boolean_false
  7398 00004847 0F851D010000            	jne .L_or_end_0005
  7399                                  	; preparing a non-tail-call
  7400                                  	; preparing a non-tail-call
  7401 0000484D 488B4520                	mov rax, PARAM(0)	; param s
  7402 00004851 50                      	push rax
  7403 00004852 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  7404 0000485A 803805                  	cmp byte [rax], T_undefined
  7405 0000485D 0F8434330100            	je L_error_fvar_undefined
  7406 00004863 50                      	push rax
  7407 00004864 6A02                    	push 2	; arg count
  7408 00004866 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
  7409 0000486E 803805                  	cmp byte [rax], T_undefined
  7410 00004871 0F8420330100            	je L_error_fvar_undefined
  7411 00004877 803804                  	cmp byte [rax], T_closure
  7412 0000487A 0F859B330100            	jne L_error_non_closure
  7413 00004880 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7414 00004883 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7415 00004886 50                      	push rax
  7416 00004887 488B4510                	mov rax, ENV
  7417 0000488B 488B4008                	mov rax, qword [rax + 8 * 1]
  7418 0000488F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  7419 00004892 50                      	push rax
  7420 00004893 6A02                    	push 2	; arg count
  7421 00004895 488B0425[F60F0000]      	mov rax, qword [free_var_33]	; free var apply
  7422 0000489D 803805                  	cmp byte [rax], T_undefined
  7423 000048A0 0F84F1320100            	je L_error_fvar_undefined
  7424 000048A6 803804                  	cmp byte [rax], T_closure
  7425 000048A9 0F856C330100            	jne L_error_non_closure
  7426 000048AF FF7001                  	push SOB_CLOSURE_ENV(rax)
  7427 000048B2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7428 000048B5 483D[02000000]          	cmp rax, sob_boolean_false
  7429 000048BB 0F849F000000            	je .L_if_else_0009
  7430                                  	; preparing a tail-call
  7431                                  	; preparing a non-tail-call
  7432 000048C1 488B4520                	mov rax, PARAM(0)	; param s
  7433 000048C5 50                      	push rax
  7434 000048C6 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  7435 000048CE 803805                  	cmp byte [rax], T_undefined
  7436 000048D1 0F84C0320100            	je L_error_fvar_undefined
  7437 000048D7 50                      	push rax
  7438 000048D8 6A02                    	push 2	; arg count
  7439 000048DA 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
  7440 000048E2 803805                  	cmp byte [rax], T_undefined
  7441 000048E5 0F84AC320100            	je L_error_fvar_undefined
  7442 000048EB 803804                  	cmp byte [rax], T_closure
  7443 000048EE 0F8527330100            	jne L_error_non_closure
  7444 000048F4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7445 000048F7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7446 000048FA 50                      	push rax
  7447 000048FB 6A01                    	push 1	; arg count
  7448 000048FD 488B4510                	mov rax, ENV
  7449 00004901 488B00                  	mov rax, qword [rax + 8 * 0]
  7450 00004904 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  7451 00004907 488B00                  	mov rax, qword [rax]
  7452 0000490A 803804                  	cmp byte [rax], T_closure
  7453 0000490D 0F8508330100            	jne L_error_non_closure
  7454 00004913 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7455 00004916 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7456 00004919 FF7500                  	push qword[rbp]
  7457 0000491C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7458 0000491F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7459 00004923 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7460 00004927 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7461 0000492B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7462 0000492E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7463 00004931 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7464 00004936 4983C103                	add r9, 3 	 ;for getting to the params
  7465 0000493A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7466 0000493E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7467                                  .L_tc_recycle_frame_loop_002b:
  7468 00004941 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7469 00004944 7410                    	je .L_tc_recycle_frame_done_002b
  7470 00004946 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7471 00004949 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7472 0000494C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7473 00004950 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7474 00004954 EBEB                    	jmp .L_tc_recycle_frame_loop_002b
  7475                                  .L_tc_recycle_frame_done_002b:
  7476 00004956 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7477 00004957 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7478 0000495B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7479 0000495E EB0A                    	jmp .L_if_end_0009
  7480                                  .L_if_else_0009:
  7481 00004960 48B8-                   	mov rax, L_constants + 2
  7481 00004962 [0200000000000000] 
  7482                                  .L_if_end_0009:
  7483                                  .L_or_end_0005:
  7484 0000496A C9                      	leave
  7485 0000496B C21800                  	ret AND_KILL_FRAME(1)
  7486                                  .L_lambda_simple_end_0029:	; new closure is in rax
  7487 0000496E 50                      	push rax
  7488 0000496F 488B4520                	mov rax, PARAM(0)	; param loop
  7489 00004973 8F00                    	pop qword [rax]
  7490 00004975 48B8-                   	mov rax, sob_void
  7490 00004977 [0000000000000000] 
  7491                                  
  7492                                  	; preparing a non-tail-call
  7493 0000497F 488B4510                	mov rax, ENV
  7494 00004983 488B00                  	mov rax, qword [rax + 8 * 0]
  7495 00004986 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  7496 0000498A 50                      	push rax
  7497 0000498B 6A01                    	push 1	; arg count
  7498 0000498D 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
  7499 00004995 803805                  	cmp byte [rax], T_undefined
  7500 00004998 0F84F9310100            	je L_error_fvar_undefined
  7501 0000499E 803804                  	cmp byte [rax], T_closure
  7502 000049A1 0F8574320100            	jne L_error_non_closure
  7503 000049A7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7504 000049AA FF5009                  	call SOB_CLOSURE_CODE(rax)
  7505 000049AD 483D[02000000]          	cmp rax, sob_boolean_false
  7506 000049B3 0F85AB000000            	jne .L_or_end_0006
  7507                                  	; preparing a non-tail-call
  7508 000049B9 488B4510                	mov rax, ENV
  7509 000049BD 488B00                  	mov rax, qword [rax + 8 * 0]
  7510 000049C0 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  7511 000049C4 50                      	push rax
  7512 000049C5 6A01                    	push 1	; arg count
  7513 000049C7 488B0425[24150000]      	mov rax, qword [free_var_111]	; free var pair?
  7514 000049CF 803805                  	cmp byte [rax], T_undefined
  7515 000049D2 0F84BF310100            	je L_error_fvar_undefined
  7516 000049D8 803804                  	cmp byte [rax], T_closure
  7517 000049DB 0F853A320100            	jne L_error_non_closure
  7518 000049E1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7519 000049E4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7520 000049E7 483D[02000000]          	cmp rax, sob_boolean_false
  7521 000049ED 746B                    	je .L_if_else_000a
  7522                                  	; preparing a tail-call
  7523 000049EF 488B4510                	mov rax, ENV
  7524 000049F3 488B00                  	mov rax, qword [rax + 8 * 0]
  7525 000049F6 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  7526 000049FA 50                      	push rax
  7527 000049FB 6A01                    	push 1	; arg count
  7528 000049FD 488B4520                	mov rax, PARAM(0)	; param loop
  7529 00004A01 488B00                  	mov rax, qword [rax]
  7530 00004A04 803804                  	cmp byte [rax], T_closure
  7531 00004A07 0F850E320100            	jne L_error_non_closure
  7532 00004A0D FF7001                  	push SOB_CLOSURE_ENV(rax)
  7533 00004A10 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7534 00004A13 FF7500                  	push qword[rbp]
  7535 00004A16 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7536 00004A19 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7537 00004A1D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7538 00004A21 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7539 00004A25 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7540 00004A28 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7541 00004A2B 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7542 00004A30 4983C103                	add r9, 3 	 ;for getting to the params
  7543 00004A34 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7544 00004A38 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7545                                  .L_tc_recycle_frame_loop_002c:
  7546 00004A3B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7547 00004A3E 7410                    	je .L_tc_recycle_frame_done_002c
  7548 00004A40 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7549 00004A43 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7550 00004A46 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7551 00004A4A 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7552 00004A4E EBEB                    	jmp .L_tc_recycle_frame_loop_002c
  7553                                  .L_tc_recycle_frame_done_002c:
  7554 00004A50 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7555 00004A51 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7556 00004A55 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7557 00004A58 EB0A                    	jmp .L_if_end_000a
  7558                                  .L_if_else_000a:
  7559 00004A5A 48B8-                   	mov rax, L_constants + 2
  7559 00004A5C [0200000000000000] 
  7560                                  .L_if_end_000a:
  7561                                  .L_or_end_0006:
  7562 00004A64 C9                      	leave
  7563 00004A65 C21800                  	ret AND_KILL_FRAME(1)
  7564                                  .L_lambda_simple_end_0028:	; new closure is in rax
  7565 00004A68 803804                  	cmp byte [rax], T_closure
  7566 00004A6B 0F85AA310100            	jne L_error_non_closure
  7567 00004A71 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7568 00004A74 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7569 00004A77 FF7500                  	push qword[rbp]
  7570 00004A7A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7571 00004A7D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7572 00004A81 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7573 00004A85 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7574 00004A89 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7575 00004A8C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7576 00004A8F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7577 00004A94 4983C103                	add r9, 3 	 ;for getting to the params
  7578 00004A98 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7579 00004A9C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7580                                  .L_tc_recycle_frame_loop_002d:
  7581 00004A9F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7582 00004AA2 7410                    	je .L_tc_recycle_frame_done_002d
  7583 00004AA4 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7584 00004AA7 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7585 00004AAA 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7586 00004AAE 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7587 00004AB2 EBEB                    	jmp .L_tc_recycle_frame_loop_002d
  7588                                  .L_tc_recycle_frame_done_002d:
  7589 00004AB4 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7590 00004AB5 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7591 00004AB9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7592 00004ABC C9                      	leave
  7593 00004ABD C22000                  	ret AND_KILL_FRAME(2)
  7594                                  .L_lambda_opt_end_0005:	; new closure is in rax
  7595 00004AC0 48890425[D40F0000]      	mov qword [free_var_31], rax
  7596 00004AC8 48B8-                   	mov rax, sob_void
  7596 00004ACA [0000000000000000] 
  7597                                  
  7598 00004AD2 4889C7                  	mov rdi, rax
  7599 00004AD5 E83F340100              	call print_sexpr_if_not_void
  7600                                  	; preparing a non-tail-call
  7601 00004ADA 48B8-                   	mov rax, L_constants + 1993
  7601 00004ADC [C907000000000000] 
  7602 00004AE4 50                      	push rax
  7603 00004AE5 48B8-                   	mov rax, L_constants + 1993
  7603 00004AE7 [C907000000000000] 
  7604 00004AEF 50                      	push rax
  7605 00004AF0 6A02                    	push 2	; arg count
  7606 00004AF2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7607 00004AF7 E8C8310100              	call malloc
  7608 00004AFC 50                      	push rax
  7609 00004AFD BF00000000              	mov rdi, 8 * 0	; new rib
  7610 00004B02 E8BD310100              	call malloc
  7611 00004B07 50                      	push rax
  7612 00004B08 BF08000000              	mov rdi, 8 * 1	; extended env
  7613 00004B0D E8B2310100              	call malloc
  7614 00004B12 488B7D10                	mov rdi, ENV
  7615 00004B16 BE00000000              	mov rsi, 0
  7616 00004B1B BA01000000              	mov rdx, 1
  7617                                  .L_lambda_simple_env_loop_002c:	; ext_env[i + 1] <-- env[i]
  7618 00004B20 4883FE00                	cmp rsi, 0
  7619 00004B24 7410                    	je .L_lambda_simple_env_end_002c
  7620 00004B26 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7621 00004B2A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7622 00004B2E 48FFC6                  	inc rsi
  7623 00004B31 48FFC2                  	inc rdx
  7624 00004B34 EBEA                    	jmp .L_lambda_simple_env_loop_002c
  7625                                  .L_lambda_simple_env_end_002c:
  7626 00004B36 5B                      	pop rbx
  7627 00004B37 BE00000000              	mov rsi, 0
  7628                                  .L_lambda_simple_params_loop_002c:	; copy params
  7629 00004B3C 4883FE00                	cmp rsi, 0
  7630 00004B40 740E                    	je .L_lambda_simple_params_end_002c
  7631 00004B42 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7632 00004B47 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7633 00004B4B 48FFC6                  	inc rsi
  7634 00004B4E EBEC                    	jmp .L_lambda_simple_params_loop_002c
  7635                                  .L_lambda_simple_params_end_002c:
  7636 00004B50 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7637 00004B53 4889C3                  	mov rbx, rax
  7638 00004B56 58                      	pop rax
  7639 00004B57 C60004                  	mov byte [rax], T_closure
  7640 00004B5A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7641 00004B5E 48C74009[6B4B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002c
  7642 00004B66 E92A070000              	jmp .L_lambda_simple_end_002c
  7643                                  .L_lambda_simple_code_002c:	; lambda-simple body
  7644 00004B6B 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7645 00004B71 740B                    	je .L_lambda_simple_arity_check_ok_002c
  7646 00004B73 FF742410                	push qword [rsp + 8 * 2]
  7647 00004B77 6A02                    	push 2
  7648 00004B79 E9FF300100              	jmp L_error_incorrect_arity_simple
  7649                                  .L_lambda_simple_arity_check_ok_002c:
  7650 00004B7E C8000000                	enter 0, 0
  7651 00004B82 BF08000000              	mov rdi, 8*1
  7652 00004B87 E838310100              	call malloc
  7653 00004B8C 488B5D20                	mov rbx, PARAM(0)
  7654 00004B90 488918                  	mov qword[rax], rbx
  7655 00004B93 48894520                	mov PARAM(0), rax
  7656 00004B97 48B8-                   	mov rax, sob_void
  7656 00004B99 [0000000000000000] 
  7657                                  
  7658 00004BA1 BF08000000              	mov rdi, 8*1
  7659 00004BA6 E819310100              	call malloc
  7660 00004BAB 488B5D28                	mov rbx, PARAM(1)
  7661 00004BAF 488918                  	mov qword[rax], rbx
  7662 00004BB2 48894528                	mov PARAM(1), rax
  7663 00004BB6 48B8-                   	mov rax, sob_void
  7663 00004BB8 [0000000000000000] 
  7664                                  
  7665 00004BC0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7666 00004BC5 E8FA300100              	call malloc
  7667 00004BCA 50                      	push rax
  7668 00004BCB BF10000000              	mov rdi, 8 * 2	; new rib
  7669 00004BD0 E8EF300100              	call malloc
  7670 00004BD5 50                      	push rax
  7671 00004BD6 BF10000000              	mov rdi, 8 * 2	; extended env
  7672 00004BDB E8E4300100              	call malloc
  7673 00004BE0 488B7D10                	mov rdi, ENV
  7674 00004BE4 BE00000000              	mov rsi, 0
  7675 00004BE9 BA01000000              	mov rdx, 1
  7676                                  .L_lambda_simple_env_loop_002d:	; ext_env[i + 1] <-- env[i]
  7677 00004BEE 4883FE01                	cmp rsi, 1
  7678 00004BF2 7410                    	je .L_lambda_simple_env_end_002d
  7679 00004BF4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7680 00004BF8 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7681 00004BFC 48FFC6                  	inc rsi
  7682 00004BFF 48FFC2                  	inc rdx
  7683 00004C02 EBEA                    	jmp .L_lambda_simple_env_loop_002d
  7684                                  .L_lambda_simple_env_end_002d:
  7685 00004C04 5B                      	pop rbx
  7686 00004C05 BE00000000              	mov rsi, 0
  7687                                  .L_lambda_simple_params_loop_002d:	; copy params
  7688 00004C0A 4883FE02                	cmp rsi, 2
  7689 00004C0E 740E                    	je .L_lambda_simple_params_end_002d
  7690 00004C10 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7691 00004C15 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7692 00004C19 48FFC6                  	inc rsi
  7693 00004C1C EBEC                    	jmp .L_lambda_simple_params_loop_002d
  7694                                  .L_lambda_simple_params_end_002d:
  7695 00004C1E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7696 00004C21 4889C3                  	mov rbx, rax
  7697 00004C24 58                      	pop rax
  7698 00004C25 C60004                  	mov byte [rax], T_closure
  7699 00004C28 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7700 00004C2C 48C74009[394C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002d
  7701 00004C34 E94A010000              	jmp .L_lambda_simple_end_002d
  7702                                  .L_lambda_simple_code_002d:	; lambda-simple body
  7703 00004C39 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7704 00004C3F 740B                    	je .L_lambda_simple_arity_check_ok_002d
  7705 00004C41 FF742410                	push qword [rsp + 8 * 2]
  7706 00004C45 6A02                    	push 2
  7707 00004C47 E931300100              	jmp L_error_incorrect_arity_simple
  7708                                  .L_lambda_simple_arity_check_ok_002d:
  7709 00004C4C C8000000                	enter 0, 0
  7710                                  	; preparing a non-tail-call
  7711 00004C50 488B4528                	mov rax, PARAM(1)	; param s
  7712 00004C54 50                      	push rax
  7713 00004C55 6A01                    	push 1	; arg count
  7714 00004C57 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
  7715 00004C5F 803805                  	cmp byte [rax], T_undefined
  7716 00004C62 0F842F2F0100            	je L_error_fvar_undefined
  7717 00004C68 803804                  	cmp byte [rax], T_closure
  7718 00004C6B 0F85AA2F0100            	jne L_error_non_closure
  7719 00004C71 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7720 00004C74 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7721 00004C77 483D[02000000]          	cmp rax, sob_boolean_false
  7722 00004C7D 740F                    	je .L_if_else_000d
  7723 00004C7F 48B8-                   	mov rax, L_constants + 1
  7723 00004C81 [0100000000000000] 
  7724 00004C89 E9F1000000              	jmp .L_if_end_000d
  7725                                  .L_if_else_000d:
  7726                                  	; preparing a tail-call
  7727                                  	; preparing a non-tail-call
  7728                                  	; preparing a non-tail-call
  7729 00004C8E 488B4528                	mov rax, PARAM(1)	; param s
  7730 00004C92 50                      	push rax
  7731 00004C93 6A01                    	push 1	; arg count
  7732 00004C95 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  7733 00004C9D 803805                  	cmp byte [rax], T_undefined
  7734 00004CA0 0F84F12E0100            	je L_error_fvar_undefined
  7735 00004CA6 803804                  	cmp byte [rax], T_closure
  7736 00004CA9 0F856C2F0100            	jne L_error_non_closure
  7737 00004CAF FF7001                  	push SOB_CLOSURE_ENV(rax)
  7738 00004CB2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7739 00004CB5 50                      	push rax
  7740 00004CB6 488B4520                	mov rax, PARAM(0)	; param f
  7741 00004CBA 50                      	push rax
  7742 00004CBB 6A02                    	push 2	; arg count
  7743 00004CBD 488B4510                	mov rax, ENV
  7744 00004CC1 488B00                  	mov rax, qword [rax + 8 * 0]
  7745 00004CC4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  7746 00004CC7 488B00                  	mov rax, qword [rax]
  7747 00004CCA 803804                  	cmp byte [rax], T_closure
  7748 00004CCD 0F85482F0100            	jne L_error_non_closure
  7749 00004CD3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7750 00004CD6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7751 00004CD9 50                      	push rax
  7752                                  	; preparing a non-tail-call
  7753                                  	; preparing a non-tail-call
  7754 00004CDA 488B4528                	mov rax, PARAM(1)	; param s
  7755 00004CDE 50                      	push rax
  7756 00004CDF 6A01                    	push 1	; arg count
  7757 00004CE1 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  7758 00004CE9 803805                  	cmp byte [rax], T_undefined
  7759 00004CEC 0F84A52E0100            	je L_error_fvar_undefined
  7760 00004CF2 803804                  	cmp byte [rax], T_closure
  7761 00004CF5 0F85202F0100            	jne L_error_non_closure
  7762 00004CFB FF7001                  	push SOB_CLOSURE_ENV(rax)
  7763 00004CFE FF5009                  	call SOB_CLOSURE_CODE(rax)
  7764 00004D01 50                      	push rax
  7765 00004D02 6A01                    	push 1	; arg count
  7766 00004D04 488B4520                	mov rax, PARAM(0)	; param f
  7767 00004D08 803804                  	cmp byte [rax], T_closure
  7768 00004D0B 0F850A2F0100            	jne L_error_non_closure
  7769 00004D11 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7770 00004D14 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7771 00004D17 50                      	push rax
  7772 00004D18 6A02                    	push 2	; arg count
  7773 00004D1A 488B0425[04130000]      	mov rax, qword [free_var_79]	; free var cons
  7774 00004D22 803805                  	cmp byte [rax], T_undefined
  7775 00004D25 0F846C2E0100            	je L_error_fvar_undefined
  7776 00004D2B 803804                  	cmp byte [rax], T_closure
  7777 00004D2E 0F85E72E0100            	jne L_error_non_closure
  7778 00004D34 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7779 00004D37 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7780 00004D3A FF7500                  	push qword[rbp]
  7781 00004D3D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7782 00004D40 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7783 00004D44 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7784 00004D48 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7785 00004D4C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7786 00004D4F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7787 00004D52 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7788 00004D57 4983C103                	add r9, 3 	 ;for getting to the params
  7789 00004D5B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7790 00004D5F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7791                                  .L_tc_recycle_frame_loop_0031:
  7792 00004D62 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7793 00004D65 7410                    	je .L_tc_recycle_frame_done_0031
  7794 00004D67 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7795 00004D6A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7796 00004D6D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7797 00004D71 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7798 00004D75 EBEB                    	jmp .L_tc_recycle_frame_loop_0031
  7799                                  .L_tc_recycle_frame_done_0031:
  7800 00004D77 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7801 00004D78 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7802 00004D7C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7803                                  .L_if_end_000d:
  7804 00004D7F C9                      	leave
  7805 00004D80 C22000                  	ret AND_KILL_FRAME(2)
  7806                                  .L_lambda_simple_end_002d:	; new closure is in rax
  7807 00004D83 50                      	push rax
  7808 00004D84 488B4520                	mov rax, PARAM(0)	; param map1
  7809 00004D88 8F00                    	pop qword [rax]
  7810 00004D8A 48B8-                   	mov rax, sob_void
  7810 00004D8C [0000000000000000] 
  7811                                  
  7812 00004D94 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7813 00004D99 E8262F0100              	call malloc
  7814 00004D9E 50                      	push rax
  7815 00004D9F BF10000000              	mov rdi, 8 * 2	; new rib
  7816 00004DA4 E81B2F0100              	call malloc
  7817 00004DA9 50                      	push rax
  7818 00004DAA BF10000000              	mov rdi, 8 * 2	; extended env
  7819 00004DAF E8102F0100              	call malloc
  7820 00004DB4 488B7D10                	mov rdi, ENV
  7821 00004DB8 BE00000000              	mov rsi, 0
  7822 00004DBD BA01000000              	mov rdx, 1
  7823                                  .L_lambda_simple_env_loop_002e:	; ext_env[i + 1] <-- env[i]
  7824 00004DC2 4883FE01                	cmp rsi, 1
  7825 00004DC6 7410                    	je .L_lambda_simple_env_end_002e
  7826 00004DC8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7827 00004DCC 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7828 00004DD0 48FFC6                  	inc rsi
  7829 00004DD3 48FFC2                  	inc rdx
  7830 00004DD6 EBEA                    	jmp .L_lambda_simple_env_loop_002e
  7831                                  .L_lambda_simple_env_end_002e:
  7832 00004DD8 5B                      	pop rbx
  7833 00004DD9 BE00000000              	mov rsi, 0
  7834                                  .L_lambda_simple_params_loop_002e:	; copy params
  7835 00004DDE 4883FE02                	cmp rsi, 2
  7836 00004DE2 740E                    	je .L_lambda_simple_params_end_002e
  7837 00004DE4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7838 00004DE9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7839 00004DED 48FFC6                  	inc rsi
  7840 00004DF0 EBEC                    	jmp .L_lambda_simple_params_loop_002e
  7841                                  .L_lambda_simple_params_end_002e:
  7842 00004DF2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7843 00004DF5 4889C3                  	mov rbx, rax
  7844 00004DF8 58                      	pop rax
  7845 00004DF9 C60004                  	mov byte [rax], T_closure
  7846 00004DFC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7847 00004E00 48C74009[0D4E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002e
  7848 00004E08 E99C010000              	jmp .L_lambda_simple_end_002e
  7849                                  .L_lambda_simple_code_002e:	; lambda-simple body
  7850 00004E0D 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7851 00004E13 740B                    	je .L_lambda_simple_arity_check_ok_002e
  7852 00004E15 FF742410                	push qword [rsp + 8 * 2]
  7853 00004E19 6A02                    	push 2
  7854 00004E1B E95D2E0100              	jmp L_error_incorrect_arity_simple
  7855                                  .L_lambda_simple_arity_check_ok_002e:
  7856 00004E20 C8000000                	enter 0, 0
  7857                                  	; preparing a non-tail-call
  7858                                  	; preparing a non-tail-call
  7859 00004E24 488B4528                	mov rax, PARAM(1)	; param s
  7860 00004E28 50                      	push rax
  7861 00004E29 6A01                    	push 1	; arg count
  7862 00004E2B 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  7863 00004E33 803805                  	cmp byte [rax], T_undefined
  7864 00004E36 0F845B2D0100            	je L_error_fvar_undefined
  7865 00004E3C 803804                  	cmp byte [rax], T_closure
  7866 00004E3F 0F85D62D0100            	jne L_error_non_closure
  7867 00004E45 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7868 00004E48 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7869 00004E4B 50                      	push rax
  7870 00004E4C 6A01                    	push 1	; arg count
  7871 00004E4E 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
  7872 00004E56 803805                  	cmp byte [rax], T_undefined
  7873 00004E59 0F84382D0100            	je L_error_fvar_undefined
  7874 00004E5F 803804                  	cmp byte [rax], T_closure
  7875 00004E62 0F85B32D0100            	jne L_error_non_closure
  7876 00004E68 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7877 00004E6B FF5009                  	call SOB_CLOSURE_CODE(rax)
  7878 00004E6E 483D[02000000]          	cmp rax, sob_boolean_false
  7879 00004E74 740F                    	je .L_if_else_000e
  7880 00004E76 48B8-                   	mov rax, L_constants + 1
  7880 00004E78 [0100000000000000] 
  7881 00004E80 E920010000              	jmp .L_if_end_000e
  7882                                  .L_if_else_000e:
  7883                                  	; preparing a tail-call
  7884                                  	; preparing a non-tail-call
  7885                                  	; preparing a non-tail-call
  7886 00004E85 488B4528                	mov rax, PARAM(1)	; param s
  7887 00004E89 50                      	push rax
  7888 00004E8A 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  7889 00004E92 803805                  	cmp byte [rax], T_undefined
  7890 00004E95 0F84FC2C0100            	je L_error_fvar_undefined
  7891 00004E9B 50                      	push rax
  7892 00004E9C 6A02                    	push 2	; arg count
  7893 00004E9E 488B4510                	mov rax, ENV
  7894 00004EA2 488B00                  	mov rax, qword [rax + 8 * 0]
  7895 00004EA5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  7896 00004EA8 488B00                  	mov rax, qword [rax]
  7897 00004EAB 803804                  	cmp byte [rax], T_closure
  7898 00004EAE 0F85672D0100            	jne L_error_non_closure
  7899 00004EB4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7900 00004EB7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7901 00004EBA 50                      	push rax
  7902 00004EBB 488B4520                	mov rax, PARAM(0)	; param f
  7903 00004EBF 50                      	push rax
  7904 00004EC0 6A02                    	push 2	; arg count
  7905 00004EC2 488B4510                	mov rax, ENV
  7906 00004EC6 488B00                  	mov rax, qword [rax + 8 * 0]
  7907 00004EC9 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  7908 00004ECD 488B00                  	mov rax, qword [rax]
  7909 00004ED0 803804                  	cmp byte [rax], T_closure
  7910 00004ED3 0F85422D0100            	jne L_error_non_closure
  7911 00004ED9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7912 00004EDC FF5009                  	call SOB_CLOSURE_CODE(rax)
  7913 00004EDF 50                      	push rax
  7914                                  	; preparing a non-tail-call
  7915                                  	; preparing a non-tail-call
  7916 00004EE0 488B4528                	mov rax, PARAM(1)	; param s
  7917 00004EE4 50                      	push rax
  7918 00004EE5 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  7919 00004EED 803805                  	cmp byte [rax], T_undefined
  7920 00004EF0 0F84A12C0100            	je L_error_fvar_undefined
  7921 00004EF6 50                      	push rax
  7922 00004EF7 6A02                    	push 2	; arg count
  7923 00004EF9 488B4510                	mov rax, ENV
  7924 00004EFD 488B00                  	mov rax, qword [rax + 8 * 0]
  7925 00004F00 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  7926 00004F03 488B00                  	mov rax, qword [rax]
  7927 00004F06 803804                  	cmp byte [rax], T_closure
  7928 00004F09 0F850C2D0100            	jne L_error_non_closure
  7929 00004F0F FF7001                  	push SOB_CLOSURE_ENV(rax)
  7930 00004F12 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7931 00004F15 50                      	push rax
  7932 00004F16 488B4520                	mov rax, PARAM(0)	; param f
  7933 00004F1A 50                      	push rax
  7934 00004F1B 6A02                    	push 2	; arg count
  7935 00004F1D 488B0425[F60F0000]      	mov rax, qword [free_var_33]	; free var apply
  7936 00004F25 803805                  	cmp byte [rax], T_undefined
  7937 00004F28 0F84692C0100            	je L_error_fvar_undefined
  7938 00004F2E 803804                  	cmp byte [rax], T_closure
  7939 00004F31 0F85E42C0100            	jne L_error_non_closure
  7940 00004F37 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7941 00004F3A FF5009                  	call SOB_CLOSURE_CODE(rax)
  7942 00004F3D 50                      	push rax
  7943 00004F3E 6A02                    	push 2	; arg count
  7944 00004F40 488B0425[04130000]      	mov rax, qword [free_var_79]	; free var cons
  7945 00004F48 803805                  	cmp byte [rax], T_undefined
  7946 00004F4B 0F84462C0100            	je L_error_fvar_undefined
  7947 00004F51 803804                  	cmp byte [rax], T_closure
  7948 00004F54 0F85C12C0100            	jne L_error_non_closure
  7949 00004F5A FF7001                  	push SOB_CLOSURE_ENV(rax)
  7950 00004F5D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7951 00004F60 FF7500                  	push qword[rbp]
  7952 00004F63 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7953 00004F66 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7954 00004F6A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7955 00004F6E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7956 00004F72 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7957 00004F75 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7958 00004F78 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7959 00004F7D 4983C103                	add r9, 3 	 ;for getting to the params
  7960 00004F81 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7961 00004F85 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7962                                  .L_tc_recycle_frame_loop_0032:
  7963 00004F88 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7964 00004F8B 7410                    	je .L_tc_recycle_frame_done_0032
  7965 00004F8D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7966 00004F90 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7967 00004F93 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7968 00004F97 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7969 00004F9B EBEB                    	jmp .L_tc_recycle_frame_loop_0032
  7970                                  .L_tc_recycle_frame_done_0032:
  7971 00004F9D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7972 00004F9E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7973 00004FA2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7974                                  .L_if_end_000e:
  7975 00004FA5 C9                      	leave
  7976 00004FA6 C22000                  	ret AND_KILL_FRAME(2)
  7977                                  .L_lambda_simple_end_002e:	; new closure is in rax
  7978 00004FA9 50                      	push rax
  7979 00004FAA 488B4528                	mov rax, PARAM(1)	; param map-list
  7980 00004FAE 8F00                    	pop qword [rax]
  7981 00004FB0 48B8-                   	mov rax, sob_void
  7981 00004FB2 [0000000000000000] 
  7982                                  
  7983 00004FBA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7984 00004FBF E8002D0100              	call malloc
  7985 00004FC4 50                      	push rax
  7986 00004FC5 BF10000000              	mov rdi, 8 * 2	; new rib
  7987 00004FCA E8F52C0100              	call malloc
  7988 00004FCF 50                      	push rax
  7989 00004FD0 BF10000000              	mov rdi, 8 * 2	; extended env
  7990 00004FD5 E8EA2C0100              	call malloc
  7991 00004FDA 488B7D10                	mov rdi, ENV
  7992 00004FDE BE00000000              	mov rsi, 0
  7993 00004FE3 BA01000000              	mov rdx, 1
  7994                                  .L_lambda_opt_env_loop_0006:	; ext_env[i + 1] <-- env[i]
  7995 00004FE8 4883FE01                	cmp rsi, 1
  7996 00004FEC 7410                    	je .L_lambda_opt_env_end_0006
  7997 00004FEE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7998 00004FF2 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7999 00004FF6 48FFC6                  	inc rsi
  8000 00004FF9 48FFC2                  	inc rdx
  8001 00004FFC EBEA                    	jmp .L_lambda_opt_env_loop_0006
  8002                                  .L_lambda_opt_env_end_0006:
  8003 00004FFE 5B                      	pop rbx
  8004 00004FFF BE00000000              	mov rsi, 0
  8005                                  .L_lambda_opt_params_loop_0006:	; copy params
  8006 00005004 4883FE02                	cmp rsi, 2
  8007 00005008 740E                    	je .L_lambda_opt_params_end_0006
  8008 0000500A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8009 0000500F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8010 00005013 48FFC6                  	inc rsi
  8011 00005016 EBEC                    	jmp .L_lambda_opt_params_loop_0006
  8012                                  .L_lambda_opt_params_end_0006:
  8013 00005018 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8014 0000501B 4889C3                  	mov rbx, rax
  8015 0000501E 58                      	pop rax
  8016 0000501F C60004                  	mov byte [rax], T_closure
  8017 00005022 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8018 00005026 48C74009[33500000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0006
  8019 0000502E E95E020000              	jmp .L_lambda_opt_end_0006
  8020                                  .L_lambda_opt_code_0006:	; lambda-opt body
  8021 00005033 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8022 00005039 7411                    	je .L_lambda_opt_arity_check_exact_0006
  8023 0000503B 0F8FFB000000            	jg .L_lambda_opt_arity_check_more_0006
  8024 00005041 FF742410                	push qword [rsp + 8 * 2]
  8025 00005045 6A01                    	push 1
  8026 00005047 E9452C0100              	jmp L_error_incorrect_arity_opt
  8027                                  .L_lambda_opt_arity_check_exact_0006:
  8028 0000504C 4883EC08                	sub rsp, 8
  8029 00005050 488B442408              	mov rax, qword[rsp + 8 *1]
  8030 00005055 48890424                	mov qword[rsp], rax  
  8031 00005059 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  8032 0000505E 4889442408              	mov qword[rsp + 8 * 1], rax
  8033 00005063 B802000000              	mov rax, 2
  8034 00005068 4889442410              	mov qword[rsp + 8 *2], rax
  8035 0000506D 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  8036 00005072 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  8037 00005077 48B8-                   	mov rax, sob_nil
  8037 00005079 [0100000000000000] 
  8038 00005081 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  8039 00005086 C8000000                	enter 0, 0
  8040                                  	; preparing a non-tail-call
  8041 0000508A 488B4528                	mov rax, PARAM(1)	; param s
  8042 0000508E 50                      	push rax
  8043 0000508F 6A01                    	push 1	; arg count
  8044 00005091 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
  8045 00005099 803805                  	cmp byte [rax], T_undefined
  8046 0000509C 0F84F52A0100            	je L_error_fvar_undefined
  8047 000050A2 803804                  	cmp byte [rax], T_closure
  8048 000050A5 0F85702B0100            	jne L_error_non_closure
  8049 000050AB FF7001                  	push SOB_CLOSURE_ENV(rax)
  8050 000050AE FF5009                  	call SOB_CLOSURE_CODE(rax)
  8051 000050B1 483D[02000000]          	cmp rax, sob_boolean_false
  8052 000050B7 740C                    	je .L_if_else_0010
  8053 000050B9 48B8-                   	mov rax, L_constants + 1
  8053 000050BB [0100000000000000] 
  8054 000050C3 EB6E                    	jmp .L_if_end_0010
  8055                                  .L_if_else_0010:
  8056                                  	; preparing a tail-call
  8057 000050C5 488B4528                	mov rax, PARAM(1)	; param s
  8058 000050C9 50                      	push rax
  8059 000050CA 488B4520                	mov rax, PARAM(0)	; param f
  8060 000050CE 50                      	push rax
  8061 000050CF 6A02                    	push 2	; arg count
  8062 000050D1 488B4510                	mov rax, ENV
  8063 000050D5 488B00                  	mov rax, qword [rax + 8 * 0]
  8064 000050D8 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  8065 000050DC 488B00                  	mov rax, qword [rax]
  8066 000050DF 803804                  	cmp byte [rax], T_closure
  8067 000050E2 0F85332B0100            	jne L_error_non_closure
  8068 000050E8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8069 000050EB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8070 000050EE FF7500                  	push qword[rbp]
  8071 000050F1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8072 000050F4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8073 000050F8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8074 000050FC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8075 00005100 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8076 00005103 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8077 00005106 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8078 0000510B 4983C103                	add r9, 3 	 ;for getting to the params
  8079 0000510F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8080 00005113 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8081                                  .L_tc_recycle_frame_loop_0034:
  8082 00005116 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8083 00005119 7410                    	je .L_tc_recycle_frame_done_0034
  8084 0000511B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8085 0000511E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8086 00005121 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8087 00005125 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8088 00005129 EBEB                    	jmp .L_tc_recycle_frame_loop_0034
  8089                                  .L_tc_recycle_frame_done_0034:
  8090 0000512B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8091 0000512C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8092 00005130 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8093                                  .L_if_end_0010:
  8094 00005133 C9                      	leave
  8095 00005134 C22000                  	ret AND_KILL_FRAME(2)
  8096 00005137 E955010000              	jmp .L_lambda_opt_end_0006	; new closure is in rax
  8097                                  .L_lambda_opt_arity_check_more_0006:
  8098 0000513C 488B442410              	mov rax, qword[rsp + 2 * 8]
  8099 00005141 4889C7                  	mov rdi, rax
  8100 00005144 49B9-                   	mov r9, sob_nil
  8100 00005146 [0100000000000000] 
  8101 0000514E 4989F8                  	mov r8, rdi
  8102                                  .L_lambda_opt_stack_shrink_loop_0006:
  8103 00005151 4983F801                	cmp r8, 1
  8104 00005155 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_0006
  8105 00005157 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)] 	;rbx is the top of the stack
  8106 0000515C BF11000000              	mov rdi, 1+8+8	;for pair
  8107 00005161 E85E2B0100              	call malloc	 ;to create the pair in the stack
  8108 00005166 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  8109 00005169 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
  8110 0000516D 4C894809                 	mov qword[rax+1+8],r9
  8111 00005171 4989C1                  	mov r9 , rax	 ; for the recursion 
  8112 00005174 49FFC8                  	dec r8
  8113 00005177 EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_0006
  8114                                  .L_lambda_opt_stack_shrink_loop_exit_0006:
  8115 00005179 488B442410              	mov rax, qword[rsp + 2 * 8]
  8116 0000517E BF02000000              	mov rdi, 2
  8117 00005183 4829F8                  	sub rax, rdi
  8118 00005186 4889C7                  	mov rdi, rax
  8119 00005189 486BC008                	imul rax,8
  8120 0000518D 4801C4                  	add rsp, rax
  8121 00005190 4889E0                  	mov rax, rsp
  8122 00005193 4989F8                  	mov r8, rdi
  8123 00005196 4D6BC008                	imul r8, 8
  8124 0000519A 4C29C0                  	sub rax, r8
  8125 0000519D 4989C2                  	mov r10, rax	; holds the original ret in the stack
  8126 000051A0 4983C218                	add r10, 8*3
  8127 000051A4 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
  8128 000051A8 4C8B00                  	mov r8, qword[rax] 	;arg count = r8
  8129 000051AB 4D6BC008                	imul r8,8
  8130 000051AF 4C01C0                  	add rax, r8
  8131 000051B2 4C8908                  	mov qword[rax] ,r9
  8132 000051B5 4D89D0                   	mov r8, r10
  8133 000051B8 4983C000                	add r8, 8 * 0
  8134 000051BC 4D8B08                  	mov r9,qword[r8]
  8135 000051BF 4D890CF8                	mov qword [r8 + rdi * 8], r9
  8136 000051C3 4983EA18                	sub r10, 8*3
  8137 000051C7 48C744241002000000      	mov qword [rsp+2*8], 2
  8138 000051D0 498B4208                	mov rax, qword[r10 + 1 * 8]
  8139 000051D4 4889442408              	mov qword[rsp + 1*8] ,rax
  8140 000051D9 498B02                  	mov rax, qword[r10]
  8141 000051DC 48890424                	mov qword[rsp], rax
  8142 000051E0 C8000000                	enter 0, 0
  8143                                  	; preparing a non-tail-call
  8144 000051E4 488B4528                	mov rax, PARAM(1)	; param s
  8145 000051E8 50                      	push rax
  8146 000051E9 6A01                    	push 1	; arg count
  8147 000051EB 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
  8148 000051F3 803805                  	cmp byte [rax], T_undefined
  8149 000051F6 0F849B290100            	je L_error_fvar_undefined
  8150 000051FC 803804                  	cmp byte [rax], T_closure
  8151 000051FF 0F85162A0100            	jne L_error_non_closure
  8152 00005205 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8153 00005208 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8154 0000520B 483D[02000000]          	cmp rax, sob_boolean_false
  8155 00005211 740C                    	je .L_if_else_000f
  8156 00005213 48B8-                   	mov rax, L_constants + 1
  8156 00005215 [0100000000000000] 
  8157 0000521D EB6E                    	jmp .L_if_end_000f
  8158                                  .L_if_else_000f:
  8159                                  	; preparing a tail-call
  8160 0000521F 488B4528                	mov rax, PARAM(1)	; param s
  8161 00005223 50                      	push rax
  8162 00005224 488B4520                	mov rax, PARAM(0)	; param f
  8163 00005228 50                      	push rax
  8164 00005229 6A02                    	push 2	; arg count
  8165 0000522B 488B4510                	mov rax, ENV
  8166 0000522F 488B00                  	mov rax, qword [rax + 8 * 0]
  8167 00005232 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  8168 00005236 488B00                  	mov rax, qword [rax]
  8169 00005239 803804                  	cmp byte [rax], T_closure
  8170 0000523C 0F85D9290100            	jne L_error_non_closure
  8171 00005242 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8172 00005245 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8173 00005248 FF7500                  	push qword[rbp]
  8174 0000524B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8175 0000524E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8176 00005252 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8177 00005256 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8178 0000525A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8179 0000525D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8180 00005260 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8181 00005265 4983C103                	add r9, 3 	 ;for getting to the params
  8182 00005269 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8183 0000526D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8184                                  .L_tc_recycle_frame_loop_0033:
  8185 00005270 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8186 00005273 7410                    	je .L_tc_recycle_frame_done_0033
  8187 00005275 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8188 00005278 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8189 0000527B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8190 0000527F 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8191 00005283 EBEB                    	jmp .L_tc_recycle_frame_loop_0033
  8192                                  .L_tc_recycle_frame_done_0033:
  8193 00005285 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8194 00005286 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8195 0000528A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8196                                  .L_if_end_000f:
  8197 0000528D C9                      	leave
  8198 0000528E C22000                  	ret AND_KILL_FRAME(2)
  8199                                  .L_lambda_opt_end_0006:	; new closure is in rax
  8200 00005291 C9                      	leave
  8201 00005292 C22000                  	ret AND_KILL_FRAME(2)
  8202                                  .L_lambda_simple_end_002c:	; new closure is in rax
  8203 00005295 803804                  	cmp byte [rax], T_closure
  8204 00005298 0F857D290100            	jne L_error_non_closure
  8205 0000529E FF7001                  	push SOB_CLOSURE_ENV(rax)
  8206 000052A1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8207 000052A4 48890425[9C140000]      	mov qword [free_var_103], rax
  8208 000052AC 48B8-                   	mov rax, sob_void
  8208 000052AE [0000000000000000] 
  8209                                  
  8210 000052B6 4889C7                  	mov rdi, rax
  8211 000052B9 E85B2C0100              	call print_sexpr_if_not_void
  8212 000052BE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8213 000052C3 E8FC290100              	call malloc
  8214 000052C8 50                      	push rax
  8215 000052C9 BF00000000              	mov rdi, 8 * 0	; new rib
  8216 000052CE E8F1290100              	call malloc
  8217 000052D3 50                      	push rax
  8218 000052D4 BF08000000              	mov rdi, 8 * 1	; extended env
  8219 000052D9 E8E6290100              	call malloc
  8220 000052DE 488B7D10                	mov rdi, ENV
  8221 000052E2 BE00000000              	mov rsi, 0
  8222 000052E7 BA01000000              	mov rdx, 1
  8223                                  .L_lambda_simple_env_loop_002f:	; ext_env[i + 1] <-- env[i]
  8224 000052EC 4883FE00                	cmp rsi, 0
  8225 000052F0 7410                    	je .L_lambda_simple_env_end_002f
  8226 000052F2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8227 000052F6 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8228 000052FA 48FFC6                  	inc rsi
  8229 000052FD 48FFC2                  	inc rdx
  8230 00005300 EBEA                    	jmp .L_lambda_simple_env_loop_002f
  8231                                  .L_lambda_simple_env_end_002f:
  8232 00005302 5B                      	pop rbx
  8233 00005303 BE00000000              	mov rsi, 0
  8234                                  .L_lambda_simple_params_loop_002f:	; copy params
  8235 00005308 4883FE00                	cmp rsi, 0
  8236 0000530C 740E                    	je .L_lambda_simple_params_end_002f
  8237 0000530E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8238 00005313 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8239 00005317 48FFC6                  	inc rsi
  8240 0000531A EBEC                    	jmp .L_lambda_simple_params_loop_002f
  8241                                  .L_lambda_simple_params_end_002f:
  8242 0000531C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8243 0000531F 4889C3                  	mov rbx, rax
  8244 00005322 58                      	pop rax
  8245 00005323 C60004                  	mov byte [rax], T_closure
  8246 00005326 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8247 0000532A 48C74009[37530000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002f
  8248 00005332 E998010000              	jmp .L_lambda_simple_end_002f
  8249                                  .L_lambda_simple_code_002f:	; lambda-simple body
  8250 00005337 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8251 0000533D 740B                    	je .L_lambda_simple_arity_check_ok_002f
  8252 0000533F FF742410                	push qword [rsp + 8 * 2]
  8253 00005343 6A01                    	push 1
  8254 00005345 E933290100              	jmp L_error_incorrect_arity_simple
  8255                                  .L_lambda_simple_arity_check_ok_002f:
  8256 0000534A C8000000                	enter 0, 0
  8257                                  	; preparing a tail-call
  8258 0000534E 488B4520                	mov rax, PARAM(0)	; param s
  8259 00005352 50                      	push rax
  8260 00005353 48B8-                   	mov rax, L_constants + 1
  8260 00005355 [0100000000000000] 
  8261 0000535D 50                      	push rax
  8262 0000535E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8263 00005363 E85C290100              	call malloc
  8264 00005368 50                      	push rax
  8265 00005369 BF08000000              	mov rdi, 8 * 1	; new rib
  8266 0000536E E851290100              	call malloc
  8267 00005373 50                      	push rax
  8268 00005374 BF10000000              	mov rdi, 8 * 2	; extended env
  8269 00005379 E846290100              	call malloc
  8270 0000537E 488B7D10                	mov rdi, ENV
  8271 00005382 BE00000000              	mov rsi, 0
  8272 00005387 BA01000000              	mov rdx, 1
  8273                                  .L_lambda_simple_env_loop_0030:	; ext_env[i + 1] <-- env[i]
  8274 0000538C 4883FE01                	cmp rsi, 1
  8275 00005390 7410                    	je .L_lambda_simple_env_end_0030
  8276 00005392 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8277 00005396 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8278 0000539A 48FFC6                  	inc rsi
  8279 0000539D 48FFC2                  	inc rdx
  8280 000053A0 EBEA                    	jmp .L_lambda_simple_env_loop_0030
  8281                                  .L_lambda_simple_env_end_0030:
  8282 000053A2 5B                      	pop rbx
  8283 000053A3 BE00000000              	mov rsi, 0
  8284                                  .L_lambda_simple_params_loop_0030:	; copy params
  8285 000053A8 4883FE01                	cmp rsi, 1
  8286 000053AC 740E                    	je .L_lambda_simple_params_end_0030
  8287 000053AE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8288 000053B3 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8289 000053B7 48FFC6                  	inc rsi
  8290 000053BA EBEC                    	jmp .L_lambda_simple_params_loop_0030
  8291                                  .L_lambda_simple_params_end_0030:
  8292 000053BC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8293 000053BF 4889C3                  	mov rbx, rax
  8294 000053C2 58                      	pop rax
  8295 000053C3 C60004                  	mov byte [rax], T_closure
  8296 000053C6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8297 000053CA 48C74009[D7530000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0030
  8298 000053D2 E98C000000              	jmp .L_lambda_simple_end_0030
  8299                                  .L_lambda_simple_code_0030:	; lambda-simple body
  8300 000053D7 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8301 000053DD 740B                    	je .L_lambda_simple_arity_check_ok_0030
  8302 000053DF FF742410                	push qword [rsp + 8 * 2]
  8303 000053E3 6A02                    	push 2
  8304 000053E5 E993280100              	jmp L_error_incorrect_arity_simple
  8305                                  .L_lambda_simple_arity_check_ok_0030:
  8306 000053EA C8000000                	enter 0, 0
  8307                                  	; preparing a tail-call
  8308 000053EE 488B4520                	mov rax, PARAM(0)	; param r
  8309 000053F2 50                      	push rax
  8310 000053F3 488B4528                	mov rax, PARAM(1)	; param a
  8311 000053F7 50                      	push rax
  8312 000053F8 6A02                    	push 2	; arg count
  8313 000053FA 488B0425[04130000]      	mov rax, qword [free_var_79]	; free var cons
  8314 00005402 803805                  	cmp byte [rax], T_undefined
  8315 00005405 0F848C270100            	je L_error_fvar_undefined
  8316 0000540B 803804                  	cmp byte [rax], T_closure
  8317 0000540E 0F8507280100            	jne L_error_non_closure
  8318 00005414 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8319 00005417 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8320 0000541A FF7500                  	push qword[rbp]
  8321 0000541D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8322 00005420 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8323 00005424 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8324 00005428 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8325 0000542C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8326 0000542F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8327 00005432 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8328 00005437 4983C103                	add r9, 3 	 ;for getting to the params
  8329 0000543B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8330 0000543F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8331                                  .L_tc_recycle_frame_loop_0035:
  8332 00005442 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8333 00005445 7410                    	je .L_tc_recycle_frame_done_0035
  8334 00005447 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8335 0000544A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8336 0000544D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8337 00005451 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8338 00005455 EBEB                    	jmp .L_tc_recycle_frame_loop_0035
  8339                                  .L_tc_recycle_frame_done_0035:
  8340 00005457 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8341 00005458 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8342 0000545C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8343 0000545F C9                      	leave
  8344 00005460 C22000                  	ret AND_KILL_FRAME(2)
  8345                                  .L_lambda_simple_end_0030:	; new closure is in rax
  8346 00005463 50                      	push rax
  8347 00005464 6A03                    	push 3	; arg count
  8348 00005466 488B0425[6A130000]      	mov rax, qword [free_var_85]	; free var fold-left
  8349 0000546E 803805                  	cmp byte [rax], T_undefined
  8350 00005471 0F8420270100            	je L_error_fvar_undefined
  8351 00005477 803804                  	cmp byte [rax], T_closure
  8352 0000547A 0F859B270100            	jne L_error_non_closure
  8353 00005480 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8354 00005483 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8355 00005486 FF7500                  	push qword[rbp]
  8356 00005489 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8357 0000548C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8358 00005490 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8359 00005494 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8360 00005498 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8361 0000549B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8362 0000549E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8363 000054A3 4983C103                	add r9, 3 	 ;for getting to the params
  8364 000054A7 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8365 000054AB 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8366                                  .L_tc_recycle_frame_loop_0036:
  8367 000054AE 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8368 000054B1 7410                    	je .L_tc_recycle_frame_done_0036
  8369 000054B3 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8370 000054B6 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8371 000054B9 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8372 000054BD 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8373 000054C1 EBEB                    	jmp .L_tc_recycle_frame_loop_0036
  8374                                  .L_tc_recycle_frame_done_0036:
  8375 000054C3 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8376 000054C4 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8377 000054C8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8378 000054CB C9                      	leave
  8379 000054CC C21800                  	ret AND_KILL_FRAME(1)
  8380                                  .L_lambda_simple_end_002f:	; new closure is in rax
  8381 000054CF 48890425[9B150000]      	mov qword [free_var_118], rax
  8382 000054D7 48B8-                   	mov rax, sob_void
  8382 000054D9 [0000000000000000] 
  8383                                  
  8384 000054E1 4889C7                  	mov rdi, rax
  8385 000054E4 E8302A0100              	call print_sexpr_if_not_void
  8386                                  	; preparing a non-tail-call
  8387 000054E9 48B8-                   	mov rax, L_constants + 1993
  8387 000054EB [C907000000000000] 
  8388 000054F3 50                      	push rax
  8389 000054F4 48B8-                   	mov rax, L_constants + 1993
  8389 000054F6 [C907000000000000] 
  8390 000054FE 50                      	push rax
  8391 000054FF 6A02                    	push 2	; arg count
  8392 00005501 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8393 00005506 E8B9270100              	call malloc
  8394 0000550B 50                      	push rax
  8395 0000550C BF00000000              	mov rdi, 8 * 0	; new rib
  8396 00005511 E8AE270100              	call malloc
  8397 00005516 50                      	push rax
  8398 00005517 BF08000000              	mov rdi, 8 * 1	; extended env
  8399 0000551C E8A3270100              	call malloc
  8400 00005521 488B7D10                	mov rdi, ENV
  8401 00005525 BE00000000              	mov rsi, 0
  8402 0000552A BA01000000              	mov rdx, 1
  8403                                  .L_lambda_simple_env_loop_0031:	; ext_env[i + 1] <-- env[i]
  8404 0000552F 4883FE00                	cmp rsi, 0
  8405 00005533 7410                    	je .L_lambda_simple_env_end_0031
  8406 00005535 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8407 00005539 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8408 0000553D 48FFC6                  	inc rsi
  8409 00005540 48FFC2                  	inc rdx
  8410 00005543 EBEA                    	jmp .L_lambda_simple_env_loop_0031
  8411                                  .L_lambda_simple_env_end_0031:
  8412 00005545 5B                      	pop rbx
  8413 00005546 BE00000000              	mov rsi, 0
  8414                                  .L_lambda_simple_params_loop_0031:	; copy params
  8415 0000554B 4883FE00                	cmp rsi, 0
  8416 0000554F 740E                    	je .L_lambda_simple_params_end_0031
  8417 00005551 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8418 00005556 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8419 0000555A 48FFC6                  	inc rsi
  8420 0000555D EBEC                    	jmp .L_lambda_simple_params_loop_0031
  8421                                  .L_lambda_simple_params_end_0031:
  8422 0000555F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8423 00005562 4889C3                  	mov rbx, rax
  8424 00005565 58                      	pop rax
  8425 00005566 C60004                  	mov byte [rax], T_closure
  8426 00005569 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8427 0000556D 48C74009[7A550000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0031
  8428 00005575 E916070000              	jmp .L_lambda_simple_end_0031
  8429                                  .L_lambda_simple_code_0031:	; lambda-simple body
  8430 0000557A 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8431 00005580 740B                    	je .L_lambda_simple_arity_check_ok_0031
  8432 00005582 FF742410                	push qword [rsp + 8 * 2]
  8433 00005586 6A02                    	push 2
  8434 00005588 E9F0260100              	jmp L_error_incorrect_arity_simple
  8435                                  .L_lambda_simple_arity_check_ok_0031:
  8436 0000558D C8000000                	enter 0, 0
  8437 00005591 BF08000000              	mov rdi, 8*1
  8438 00005596 E829270100              	call malloc
  8439 0000559B 488B5D20                	mov rbx, PARAM(0)
  8440 0000559F 488918                  	mov qword[rax], rbx
  8441 000055A2 48894520                	mov PARAM(0), rax
  8442 000055A6 48B8-                   	mov rax, sob_void
  8442 000055A8 [0000000000000000] 
  8443                                  
  8444 000055B0 BF08000000              	mov rdi, 8*1
  8445 000055B5 E80A270100              	call malloc
  8446 000055BA 488B5D28                	mov rbx, PARAM(1)
  8447 000055BE 488918                  	mov qword[rax], rbx
  8448 000055C1 48894528                	mov PARAM(1), rax
  8449 000055C5 48B8-                   	mov rax, sob_void
  8449 000055C7 [0000000000000000] 
  8450                                  
  8451 000055CF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8452 000055D4 E8EB260100              	call malloc
  8453 000055D9 50                      	push rax
  8454 000055DA BF10000000              	mov rdi, 8 * 2	; new rib
  8455 000055DF E8E0260100              	call malloc
  8456 000055E4 50                      	push rax
  8457 000055E5 BF10000000              	mov rdi, 8 * 2	; extended env
  8458 000055EA E8D5260100              	call malloc
  8459 000055EF 488B7D10                	mov rdi, ENV
  8460 000055F3 BE00000000              	mov rsi, 0
  8461 000055F8 BA01000000              	mov rdx, 1
  8462                                  .L_lambda_simple_env_loop_0032:	; ext_env[i + 1] <-- env[i]
  8463 000055FD 4883FE01                	cmp rsi, 1
  8464 00005601 7410                    	je .L_lambda_simple_env_end_0032
  8465 00005603 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8466 00005607 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8467 0000560B 48FFC6                  	inc rsi
  8468 0000560E 48FFC2                  	inc rdx
  8469 00005611 EBEA                    	jmp .L_lambda_simple_env_loop_0032
  8470                                  .L_lambda_simple_env_end_0032:
  8471 00005613 5B                      	pop rbx
  8472 00005614 BE00000000              	mov rsi, 0
  8473                                  .L_lambda_simple_params_loop_0032:	; copy params
  8474 00005619 4883FE02                	cmp rsi, 2
  8475 0000561D 740E                    	je .L_lambda_simple_params_end_0032
  8476 0000561F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8477 00005624 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8478 00005628 48FFC6                  	inc rsi
  8479 0000562B EBEC                    	jmp .L_lambda_simple_params_loop_0032
  8480                                  .L_lambda_simple_params_end_0032:
  8481 0000562D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8482 00005630 4889C3                  	mov rbx, rax
  8483 00005633 58                      	pop rax
  8484 00005634 C60004                  	mov byte [rax], T_closure
  8485 00005637 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8486 0000563B 48C74009[48560000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0032
  8487 00005643 E92B010000              	jmp .L_lambda_simple_end_0032
  8488                                  .L_lambda_simple_code_0032:	; lambda-simple body
  8489 00005648 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8490 0000564E 740B                    	je .L_lambda_simple_arity_check_ok_0032
  8491 00005650 FF742410                	push qword [rsp + 8 * 2]
  8492 00005654 6A02                    	push 2
  8493 00005656 E922260100              	jmp L_error_incorrect_arity_simple
  8494                                  .L_lambda_simple_arity_check_ok_0032:
  8495 0000565B C8000000                	enter 0, 0
  8496                                  	; preparing a non-tail-call
  8497 0000565F 488B4528                	mov rax, PARAM(1)	; param sr
  8498 00005663 50                      	push rax
  8499 00005664 6A01                    	push 1	; arg count
  8500 00005666 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
  8501 0000566E 803805                  	cmp byte [rax], T_undefined
  8502 00005671 0F8420250100            	je L_error_fvar_undefined
  8503 00005677 803804                  	cmp byte [rax], T_closure
  8504 0000567A 0F859B250100            	jne L_error_non_closure
  8505 00005680 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8506 00005683 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8507 00005686 483D[02000000]          	cmp rax, sob_boolean_false
  8508 0000568C 7409                    	je .L_if_else_0011
  8509 0000568E 488B4520                	mov rax, PARAM(0)	; param s1
  8510 00005692 E9D8000000              	jmp .L_if_end_0011
  8511                                  .L_if_else_0011:
  8512                                  	; preparing a tail-call
  8513                                  	; preparing a non-tail-call
  8514                                  	; preparing a non-tail-call
  8515 00005697 488B4528                	mov rax, PARAM(1)	; param sr
  8516 0000569B 50                      	push rax
  8517 0000569C 6A01                    	push 1	; arg count
  8518 0000569E 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  8519 000056A6 803805                  	cmp byte [rax], T_undefined
  8520 000056A9 0F84E8240100            	je L_error_fvar_undefined
  8521 000056AF 803804                  	cmp byte [rax], T_closure
  8522 000056B2 0F8563250100            	jne L_error_non_closure
  8523 000056B8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8524 000056BB FF5009                  	call SOB_CLOSURE_CODE(rax)
  8525 000056BE 50                      	push rax
  8526                                  	; preparing a non-tail-call
  8527 000056BF 488B4528                	mov rax, PARAM(1)	; param sr
  8528 000056C3 50                      	push rax
  8529 000056C4 6A01                    	push 1	; arg count
  8530 000056C6 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  8531 000056CE 803805                  	cmp byte [rax], T_undefined
  8532 000056D1 0F84C0240100            	je L_error_fvar_undefined
  8533 000056D7 803804                  	cmp byte [rax], T_closure
  8534 000056DA 0F853B250100            	jne L_error_non_closure
  8535 000056E0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8536 000056E3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8537 000056E6 50                      	push rax
  8538 000056E7 6A02                    	push 2	; arg count
  8539 000056E9 488B4510                	mov rax, ENV
  8540 000056ED 488B00                  	mov rax, qword [rax + 8 * 0]
  8541 000056F0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  8542 000056F3 488B00                  	mov rax, qword [rax]
  8543 000056F6 803804                  	cmp byte [rax], T_closure
  8544 000056F9 0F851C250100            	jne L_error_non_closure
  8545 000056FF FF7001                  	push SOB_CLOSURE_ENV(rax)
  8546 00005702 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8547 00005705 50                      	push rax
  8548 00005706 488B4520                	mov rax, PARAM(0)	; param s1
  8549 0000570A 50                      	push rax
  8550 0000570B 6A02                    	push 2	; arg count
  8551 0000570D 488B4510                	mov rax, ENV
  8552 00005711 488B00                  	mov rax, qword [rax + 8 * 0]
  8553 00005714 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var run-2
  8554 00005718 488B00                  	mov rax, qword [rax]
  8555 0000571B 803804                  	cmp byte [rax], T_closure
  8556 0000571E 0F85F7240100            	jne L_error_non_closure
  8557 00005724 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8558 00005727 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8559 0000572A FF7500                  	push qword[rbp]
  8560 0000572D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8561 00005730 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8562 00005734 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8563 00005738 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8564 0000573C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8565 0000573F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8566 00005742 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8567 00005747 4983C103                	add r9, 3 	 ;for getting to the params
  8568 0000574B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8569 0000574F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8570                                  .L_tc_recycle_frame_loop_0037:
  8571 00005752 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8572 00005755 7410                    	je .L_tc_recycle_frame_done_0037
  8573 00005757 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8574 0000575A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8575 0000575D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8576 00005761 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8577 00005765 EBEB                    	jmp .L_tc_recycle_frame_loop_0037
  8578                                  .L_tc_recycle_frame_done_0037:
  8579 00005767 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8580 00005768 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8581 0000576C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8582                                  .L_if_end_0011:
  8583 0000576F C9                      	leave
  8584 00005770 C22000                  	ret AND_KILL_FRAME(2)
  8585                                  .L_lambda_simple_end_0032:	; new closure is in rax
  8586 00005773 50                      	push rax
  8587 00005774 488B4520                	mov rax, PARAM(0)	; param run-1
  8588 00005778 8F00                    	pop qword [rax]
  8589 0000577A 48B8-                   	mov rax, sob_void
  8589 0000577C [0000000000000000] 
  8590                                  
  8591 00005784 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8592 00005789 E836250100              	call malloc
  8593 0000578E 50                      	push rax
  8594 0000578F BF10000000              	mov rdi, 8 * 2	; new rib
  8595 00005794 E82B250100              	call malloc
  8596 00005799 50                      	push rax
  8597 0000579A BF10000000              	mov rdi, 8 * 2	; extended env
  8598 0000579F E820250100              	call malloc
  8599 000057A4 488B7D10                	mov rdi, ENV
  8600 000057A8 BE00000000              	mov rsi, 0
  8601 000057AD BA01000000              	mov rdx, 1
  8602                                  .L_lambda_simple_env_loop_0033:	; ext_env[i + 1] <-- env[i]
  8603 000057B2 4883FE01                	cmp rsi, 1
  8604 000057B6 7410                    	je .L_lambda_simple_env_end_0033
  8605 000057B8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8606 000057BC 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8607 000057C0 48FFC6                  	inc rsi
  8608 000057C3 48FFC2                  	inc rdx
  8609 000057C6 EBEA                    	jmp .L_lambda_simple_env_loop_0033
  8610                                  .L_lambda_simple_env_end_0033:
  8611 000057C8 5B                      	pop rbx
  8612 000057C9 BE00000000              	mov rsi, 0
  8613                                  .L_lambda_simple_params_loop_0033:	; copy params
  8614 000057CE 4883FE02                	cmp rsi, 2
  8615 000057D2 740E                    	je .L_lambda_simple_params_end_0033
  8616 000057D4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8617 000057D9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8618 000057DD 48FFC6                  	inc rsi
  8619 000057E0 EBEC                    	jmp .L_lambda_simple_params_loop_0033
  8620                                  .L_lambda_simple_params_end_0033:
  8621 000057E2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8622 000057E5 4889C3                  	mov rbx, rax
  8623 000057E8 58                      	pop rax
  8624 000057E9 C60004                  	mov byte [rax], T_closure
  8625 000057EC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8626 000057F0 48C74009[FD570000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0033
  8627 000057F8 E92F010000              	jmp .L_lambda_simple_end_0033
  8628                                  .L_lambda_simple_code_0033:	; lambda-simple body
  8629 000057FD 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8630 00005803 740B                    	je .L_lambda_simple_arity_check_ok_0033
  8631 00005805 FF742410                	push qword [rsp + 8 * 2]
  8632 00005809 6A02                    	push 2
  8633 0000580B E96D240100              	jmp L_error_incorrect_arity_simple
  8634                                  .L_lambda_simple_arity_check_ok_0033:
  8635 00005810 C8000000                	enter 0, 0
  8636                                  	; preparing a non-tail-call
  8637 00005814 488B4520                	mov rax, PARAM(0)	; param s1
  8638 00005818 50                      	push rax
  8639 00005819 6A01                    	push 1	; arg count
  8640 0000581B 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
  8641 00005823 803805                  	cmp byte [rax], T_undefined
  8642 00005826 0F846B230100            	je L_error_fvar_undefined
  8643 0000582C 803804                  	cmp byte [rax], T_closure
  8644 0000582F 0F85E6230100            	jne L_error_non_closure
  8645 00005835 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8646 00005838 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8647 0000583B 483D[02000000]          	cmp rax, sob_boolean_false
  8648 00005841 7409                    	je .L_if_else_0012
  8649 00005843 488B4528                	mov rax, PARAM(1)	; param s2
  8650 00005847 E9DC000000              	jmp .L_if_end_0012
  8651                                  .L_if_else_0012:
  8652                                  	; preparing a tail-call
  8653                                  	; preparing a non-tail-call
  8654 0000584C 488B4528                	mov rax, PARAM(1)	; param s2
  8655 00005850 50                      	push rax
  8656                                  	; preparing a non-tail-call
  8657 00005851 488B4520                	mov rax, PARAM(0)	; param s1
  8658 00005855 50                      	push rax
  8659 00005856 6A01                    	push 1	; arg count
  8660 00005858 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  8661 00005860 803805                  	cmp byte [rax], T_undefined
  8662 00005863 0F842E230100            	je L_error_fvar_undefined
  8663 00005869 803804                  	cmp byte [rax], T_closure
  8664 0000586C 0F85A9230100            	jne L_error_non_closure
  8665 00005872 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8666 00005875 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8667 00005878 50                      	push rax
  8668 00005879 6A02                    	push 2	; arg count
  8669 0000587B 488B4510                	mov rax, ENV
  8670 0000587F 488B00                  	mov rax, qword [rax + 8 * 0]
  8671 00005882 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var run-2
  8672 00005886 488B00                  	mov rax, qword [rax]
  8673 00005889 803804                  	cmp byte [rax], T_closure
  8674 0000588C 0F8589230100            	jne L_error_non_closure
  8675 00005892 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8676 00005895 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8677 00005898 50                      	push rax
  8678                                  	; preparing a non-tail-call
  8679 00005899 488B4520                	mov rax, PARAM(0)	; param s1
  8680 0000589D 50                      	push rax
  8681 0000589E 6A01                    	push 1	; arg count
  8682 000058A0 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  8683 000058A8 803805                  	cmp byte [rax], T_undefined
  8684 000058AB 0F84E6220100            	je L_error_fvar_undefined
  8685 000058B1 803804                  	cmp byte [rax], T_closure
  8686 000058B4 0F8561230100            	jne L_error_non_closure
  8687 000058BA FF7001                  	push SOB_CLOSURE_ENV(rax)
  8688 000058BD FF5009                  	call SOB_CLOSURE_CODE(rax)
  8689 000058C0 50                      	push rax
  8690 000058C1 6A02                    	push 2	; arg count
  8691 000058C3 488B0425[04130000]      	mov rax, qword [free_var_79]	; free var cons
  8692 000058CB 803805                  	cmp byte [rax], T_undefined
  8693 000058CE 0F84C3220100            	je L_error_fvar_undefined
  8694 000058D4 803804                  	cmp byte [rax], T_closure
  8695 000058D7 0F853E230100            	jne L_error_non_closure
  8696 000058DD FF7001                  	push SOB_CLOSURE_ENV(rax)
  8697 000058E0 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8698 000058E3 FF7500                  	push qword[rbp]
  8699 000058E6 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8700 000058E9 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8701 000058ED 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8702 000058F1 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8703 000058F5 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8704 000058F8 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8705 000058FB 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8706 00005900 4983C103                	add r9, 3 	 ;for getting to the params
  8707 00005904 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8708 00005908 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8709                                  .L_tc_recycle_frame_loop_0038:
  8710 0000590B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8711 0000590E 7410                    	je .L_tc_recycle_frame_done_0038
  8712 00005910 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8713 00005913 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8714 00005916 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8715 0000591A 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8716 0000591E EBEB                    	jmp .L_tc_recycle_frame_loop_0038
  8717                                  .L_tc_recycle_frame_done_0038:
  8718 00005920 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8719 00005921 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8720 00005925 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8721                                  .L_if_end_0012:
  8722 00005928 C9                      	leave
  8723 00005929 C22000                  	ret AND_KILL_FRAME(2)
  8724                                  .L_lambda_simple_end_0033:	; new closure is in rax
  8725 0000592C 50                      	push rax
  8726 0000592D 488B4528                	mov rax, PARAM(1)	; param run-2
  8727 00005931 8F00                    	pop qword [rax]
  8728 00005933 48B8-                   	mov rax, sob_void
  8728 00005935 [0000000000000000] 
  8729                                  
  8730 0000593D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8731 00005942 E87D230100              	call malloc
  8732 00005947 50                      	push rax
  8733 00005948 BF10000000              	mov rdi, 8 * 2	; new rib
  8734 0000594D E872230100              	call malloc
  8735 00005952 50                      	push rax
  8736 00005953 BF10000000              	mov rdi, 8 * 2	; extended env
  8737 00005958 E867230100              	call malloc
  8738 0000595D 488B7D10                	mov rdi, ENV
  8739 00005961 BE00000000              	mov rsi, 0
  8740 00005966 BA01000000              	mov rdx, 1
  8741                                  .L_lambda_opt_env_loop_0007:	; ext_env[i + 1] <-- env[i]
  8742 0000596B 4883FE01                	cmp rsi, 1
  8743 0000596F 7410                    	je .L_lambda_opt_env_end_0007
  8744 00005971 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8745 00005975 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8746 00005979 48FFC6                  	inc rsi
  8747 0000597C 48FFC2                  	inc rdx
  8748 0000597F EBEA                    	jmp .L_lambda_opt_env_loop_0007
  8749                                  .L_lambda_opt_env_end_0007:
  8750 00005981 5B                      	pop rbx
  8751 00005982 BE00000000              	mov rsi, 0
  8752                                  .L_lambda_opt_params_loop_0007:	; copy params
  8753 00005987 4883FE02                	cmp rsi, 2
  8754 0000598B 740E                    	je .L_lambda_opt_params_end_0007
  8755 0000598D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8756 00005992 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8757 00005996 48FFC6                  	inc rsi
  8758 00005999 EBEC                    	jmp .L_lambda_opt_params_loop_0007
  8759                                  .L_lambda_opt_params_end_0007:
  8760 0000599B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8761 0000599E 4889C3                  	mov rbx, rax
  8762 000059A1 58                      	pop rax
  8763 000059A2 C60004                  	mov byte [rax], T_closure
  8764 000059A5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8765 000059A9 48C74009[B6590000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0007
  8766 000059B1 E9D6020000              	jmp .L_lambda_opt_end_0007
  8767                                  .L_lambda_opt_code_0007:	; lambda-opt body
  8768 000059B6 48837C241000            	cmp qword [rsp + 8 * 2], 0
  8769 000059BC 7411                    	je .L_lambda_opt_arity_check_exact_0007
  8770 000059BE 0F8F39010000            	jg .L_lambda_opt_arity_check_more_0007
  8771 000059C4 FF742410                	push qword [rsp + 8 * 2]
  8772 000059C8 6A00                    	push 0
  8773 000059CA E9C2220100              	jmp L_error_incorrect_arity_opt
  8774                                  .L_lambda_opt_arity_check_exact_0007:
  8775 000059CF 4883EC08                	sub rsp, 8
  8776 000059D3 488B442408              	mov rax, qword[rsp + 8 *1]
  8777 000059D8 48890424                	mov qword[rsp], rax  
  8778 000059DC 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  8779 000059E1 4889442408              	mov qword[rsp + 8 * 1], rax
  8780 000059E6 B801000000              	mov rax, 1
  8781 000059EB 4889442410              	mov qword[rsp + 8 *2], rax
  8782 000059F0 48B8-                   	mov rax, sob_nil
  8782 000059F2 [0100000000000000] 
  8783 000059FA 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  8784 000059FF C8000000                	enter 0, 0
  8785                                  	; preparing a non-tail-call
  8786 00005A03 488B4520                	mov rax, PARAM(0)	; param s
  8787 00005A07 50                      	push rax
  8788 00005A08 6A01                    	push 1	; arg count
  8789 00005A0A 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
  8790 00005A12 803805                  	cmp byte [rax], T_undefined
  8791 00005A15 0F847C210100            	je L_error_fvar_undefined
  8792 00005A1B 803804                  	cmp byte [rax], T_closure
  8793 00005A1E 0F85F7210100            	jne L_error_non_closure
  8794 00005A24 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8795 00005A27 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8796 00005A2A 483D[02000000]          	cmp rax, sob_boolean_false
  8797 00005A30 740F                    	je .L_if_else_0014
  8798 00005A32 48B8-                   	mov rax, L_constants + 1
  8798 00005A34 [0100000000000000] 
  8799 00005A3C E9B3000000              	jmp .L_if_end_0014
  8800                                  .L_if_else_0014:
  8801                                  	; preparing a tail-call
  8802                                  	; preparing a non-tail-call
  8803 00005A41 488B4520                	mov rax, PARAM(0)	; param s
  8804 00005A45 50                      	push rax
  8805 00005A46 6A01                    	push 1	; arg count
  8806 00005A48 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  8807 00005A50 803805                  	cmp byte [rax], T_undefined
  8808 00005A53 0F843E210100            	je L_error_fvar_undefined
  8809 00005A59 803804                  	cmp byte [rax], T_closure
  8810 00005A5C 0F85B9210100            	jne L_error_non_closure
  8811 00005A62 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8812 00005A65 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8813 00005A68 50                      	push rax
  8814                                  	; preparing a non-tail-call
  8815 00005A69 488B4520                	mov rax, PARAM(0)	; param s
  8816 00005A6D 50                      	push rax
  8817 00005A6E 6A01                    	push 1	; arg count
  8818 00005A70 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  8819 00005A78 803805                  	cmp byte [rax], T_undefined
  8820 00005A7B 0F8416210100            	je L_error_fvar_undefined
  8821 00005A81 803804                  	cmp byte [rax], T_closure
  8822 00005A84 0F8591210100            	jne L_error_non_closure
  8823 00005A8A FF7001                  	push SOB_CLOSURE_ENV(rax)
  8824 00005A8D FF5009                  	call SOB_CLOSURE_CODE(rax)
  8825 00005A90 50                      	push rax
  8826 00005A91 6A02                    	push 2	; arg count
  8827 00005A93 488B4510                	mov rax, ENV
  8828 00005A97 488B00                  	mov rax, qword [rax + 8 * 0]
  8829 00005A9A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  8830 00005A9D 488B00                  	mov rax, qword [rax]
  8831 00005AA0 803804                  	cmp byte [rax], T_closure
  8832 00005AA3 0F8572210100            	jne L_error_non_closure
  8833 00005AA9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8834 00005AAC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8835 00005AAF FF7500                  	push qword[rbp]
  8836 00005AB2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8837 00005AB5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8838 00005AB9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8839 00005ABD 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8840 00005AC1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8841 00005AC4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8842 00005AC7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8843 00005ACC 4983C103                	add r9, 3 	 ;for getting to the params
  8844 00005AD0 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8845 00005AD4 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8846                                  .L_tc_recycle_frame_loop_003a:
  8847 00005AD7 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8848 00005ADA 7410                    	je .L_tc_recycle_frame_done_003a
  8849 00005ADC 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8850 00005ADF 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8851 00005AE2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8852 00005AE6 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8853 00005AEA EBEB                    	jmp .L_tc_recycle_frame_loop_003a
  8854                                  .L_tc_recycle_frame_done_003a:
  8855 00005AEC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8856 00005AED 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8857 00005AF1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8858                                  .L_if_end_0014:
  8859 00005AF4 C9                      	leave
  8860 00005AF5 C21800                  	ret AND_KILL_FRAME(1)
  8861 00005AF8 E98F010000              	jmp .L_lambda_opt_end_0007	; new closure is in rax
  8862                                  .L_lambda_opt_arity_check_more_0007:
  8863 00005AFD 488B442410              	mov rax, qword[rsp + 2 * 8]
  8864 00005B02 4889C7                  	mov rdi, rax
  8865 00005B05 49B9-                   	mov r9, sob_nil
  8865 00005B07 [0100000000000000] 
  8866 00005B0F 4989F8                  	mov r8, rdi
  8867                                  .L_lambda_opt_stack_shrink_loop_0007:
  8868 00005B12 4983F800                	cmp r8, 0
  8869 00005B16 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_0007
  8870 00005B18 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)] 	;rbx is the top of the stack
  8871 00005B1D BF11000000              	mov rdi, 1+8+8	;for pair
  8872 00005B22 E89D210100              	call malloc	 ;to create the pair in the stack
  8873 00005B27 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  8874 00005B2A 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
  8875 00005B2E 4C894809                 	mov qword[rax+1+8],r9
  8876 00005B32 4989C1                  	mov r9 , rax	 ; for the recursion 
  8877 00005B35 49FFC8                  	dec r8
  8878 00005B38 EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_0007
  8879                                  .L_lambda_opt_stack_shrink_loop_exit_0007:
  8880 00005B3A 488B442410              	mov rax, qword[rsp + 2 * 8]
  8881 00005B3F BF01000000              	mov rdi, 1
  8882 00005B44 4829F8                  	sub rax, rdi
  8883 00005B47 4889C7                  	mov rdi, rax
  8884 00005B4A 486BC008                	imul rax,8
  8885 00005B4E 4801C4                  	add rsp, rax
  8886 00005B51 4889E0                  	mov rax, rsp
  8887 00005B54 4989F8                  	mov r8, rdi
  8888 00005B57 4D6BC008                	imul r8, 8
  8889 00005B5B 4C29C0                  	sub rax, r8
  8890 00005B5E 4989C2                  	mov r10, rax	; holds the original ret in the stack
  8891 00005B61 4983C218                	add r10, 8*3
  8892 00005B65 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
  8893 00005B69 4C8B00                  	mov r8, qword[rax] 	;arg count = r8
  8894 00005B6C 4D6BC008                	imul r8,8
  8895 00005B70 4C01C0                  	add rax, r8
  8896 00005B73 4C8908                  	mov qword[rax] ,r9
  8897 00005B76 4983EA18                 	sub r10, 8*3
  8898 00005B7A 48C744241001000000      	mov qword [rsp+2*8], 1
  8899 00005B83 498B4208                	mov rax, qword[r10 + 1 * 8]
  8900 00005B87 4889442408              	mov qword[rsp + 1*8] ,rax
  8901 00005B8C 498B02                  	mov rax, qword[r10]
  8902 00005B8F 48890424                	mov qword[rsp], rax
  8903 00005B93 C8000000                	enter 0, 0
  8904                                  	; preparing a non-tail-call
  8905 00005B97 488B4520                	mov rax, PARAM(0)	; param s
  8906 00005B9B 50                      	push rax
  8907 00005B9C 6A01                    	push 1	; arg count
  8908 00005B9E 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
  8909 00005BA6 803805                  	cmp byte [rax], T_undefined
  8910 00005BA9 0F84E81F0100            	je L_error_fvar_undefined
  8911 00005BAF 803804                  	cmp byte [rax], T_closure
  8912 00005BB2 0F8563200100            	jne L_error_non_closure
  8913 00005BB8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8914 00005BBB FF5009                  	call SOB_CLOSURE_CODE(rax)
  8915 00005BBE 483D[02000000]          	cmp rax, sob_boolean_false
  8916 00005BC4 740F                    	je .L_if_else_0013
  8917 00005BC6 48B8-                   	mov rax, L_constants + 1
  8917 00005BC8 [0100000000000000] 
  8918 00005BD0 E9B3000000              	jmp .L_if_end_0013
  8919                                  .L_if_else_0013:
  8920                                  	; preparing a tail-call
  8921                                  	; preparing a non-tail-call
  8922 00005BD5 488B4520                	mov rax, PARAM(0)	; param s
  8923 00005BD9 50                      	push rax
  8924 00005BDA 6A01                    	push 1	; arg count
  8925 00005BDC 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  8926 00005BE4 803805                  	cmp byte [rax], T_undefined
  8927 00005BE7 0F84AA1F0100            	je L_error_fvar_undefined
  8928 00005BED 803804                  	cmp byte [rax], T_closure
  8929 00005BF0 0F8525200100            	jne L_error_non_closure
  8930 00005BF6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8931 00005BF9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8932 00005BFC 50                      	push rax
  8933                                  	; preparing a non-tail-call
  8934 00005BFD 488B4520                	mov rax, PARAM(0)	; param s
  8935 00005C01 50                      	push rax
  8936 00005C02 6A01                    	push 1	; arg count
  8937 00005C04 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  8938 00005C0C 803805                  	cmp byte [rax], T_undefined
  8939 00005C0F 0F84821F0100            	je L_error_fvar_undefined
  8940 00005C15 803804                  	cmp byte [rax], T_closure
  8941 00005C18 0F85FD1F0100            	jne L_error_non_closure
  8942 00005C1E FF7001                  	push SOB_CLOSURE_ENV(rax)
  8943 00005C21 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8944 00005C24 50                      	push rax
  8945 00005C25 6A02                    	push 2	; arg count
  8946 00005C27 488B4510                	mov rax, ENV
  8947 00005C2B 488B00                  	mov rax, qword [rax + 8 * 0]
  8948 00005C2E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  8949 00005C31 488B00                  	mov rax, qword [rax]
  8950 00005C34 803804                  	cmp byte [rax], T_closure
  8951 00005C37 0F85DE1F0100            	jne L_error_non_closure
  8952 00005C3D FF7001                  	push SOB_CLOSURE_ENV(rax)
  8953 00005C40 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8954 00005C43 FF7500                  	push qword[rbp]
  8955 00005C46 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8956 00005C49 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8957 00005C4D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8958 00005C51 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8959 00005C55 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8960 00005C58 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8961 00005C5B 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8962 00005C60 4983C103                	add r9, 3 	 ;for getting to the params
  8963 00005C64 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8964 00005C68 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8965                                  .L_tc_recycle_frame_loop_0039:
  8966 00005C6B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8967 00005C6E 7410                    	je .L_tc_recycle_frame_done_0039
  8968 00005C70 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8969 00005C73 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8970 00005C76 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8971 00005C7A 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8972 00005C7E EBEB                    	jmp .L_tc_recycle_frame_loop_0039
  8973                                  .L_tc_recycle_frame_done_0039:
  8974 00005C80 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8975 00005C81 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8976 00005C85 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8977                                  .L_if_end_0013:
  8978 00005C88 C9                      	leave
  8979 00005C89 C21800                  	ret AND_KILL_FRAME(1)
  8980                                  .L_lambda_opt_end_0007:	; new closure is in rax
  8981 00005C8C C9                      	leave
  8982 00005C8D C22000                  	ret AND_KILL_FRAME(2)
  8983                                  .L_lambda_simple_end_0031:	; new closure is in rax
  8984 00005C90 803804                  	cmp byte [rax], T_closure
  8985 00005C93 0F85821F0100            	jne L_error_non_closure
  8986 00005C99 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8987 00005C9C FF5009                  	call SOB_CLOSURE_CODE(rax)
  8988 00005C9F 48890425[E50F0000]      	mov qword [free_var_32], rax
  8989 00005CA7 48B8-                   	mov rax, sob_void
  8989 00005CA9 [0000000000000000] 
  8990                                  
  8991 00005CB1 4889C7                  	mov rdi, rax
  8992 00005CB4 E860220100              	call print_sexpr_if_not_void
  8993                                  	; preparing a non-tail-call
  8994 00005CB9 48B8-                   	mov rax, L_constants + 1993
  8994 00005CBB [C907000000000000] 
  8995 00005CC3 50                      	push rax
  8996 00005CC4 6A01                    	push 1	; arg count
  8997 00005CC6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8998 00005CCB E8F41F0100              	call malloc
  8999 00005CD0 50                      	push rax
  9000 00005CD1 BF00000000              	mov rdi, 8 * 0	; new rib
  9001 00005CD6 E8E91F0100              	call malloc
  9002 00005CDB 50                      	push rax
  9003 00005CDC BF08000000              	mov rdi, 8 * 1	; extended env
  9004 00005CE1 E8DE1F0100              	call malloc
  9005 00005CE6 488B7D10                	mov rdi, ENV
  9006 00005CEA BE00000000              	mov rsi, 0
  9007 00005CEF BA01000000              	mov rdx, 1
  9008                                  .L_lambda_simple_env_loop_0034:	; ext_env[i + 1] <-- env[i]
  9009 00005CF4 4883FE00                	cmp rsi, 0
  9010 00005CF8 7410                    	je .L_lambda_simple_env_end_0034
  9011 00005CFA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9012 00005CFE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9013 00005D02 48FFC6                  	inc rsi
  9014 00005D05 48FFC2                  	inc rdx
  9015 00005D08 EBEA                    	jmp .L_lambda_simple_env_loop_0034
  9016                                  .L_lambda_simple_env_end_0034:
  9017 00005D0A 5B                      	pop rbx
  9018 00005D0B BE00000000              	mov rsi, 0
  9019                                  .L_lambda_simple_params_loop_0034:	; copy params
  9020 00005D10 4883FE00                	cmp rsi, 0
  9021 00005D14 740E                    	je .L_lambda_simple_params_end_0034
  9022 00005D16 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9023 00005D1B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9024 00005D1F 48FFC6                  	inc rsi
  9025 00005D22 EBEC                    	jmp .L_lambda_simple_params_loop_0034
  9026                                  .L_lambda_simple_params_end_0034:
  9027 00005D24 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9028 00005D27 4889C3                  	mov rbx, rax
  9029 00005D2A 58                      	pop rax
  9030 00005D2B C60004                  	mov byte [rax], T_closure
  9031 00005D2E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9032 00005D32 48C74009[3F5D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0034
  9033 00005D3A E9B3040000              	jmp .L_lambda_simple_end_0034
  9034                                  .L_lambda_simple_code_0034:	; lambda-simple body
  9035 00005D3F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9036 00005D45 740B                    	je .L_lambda_simple_arity_check_ok_0034
  9037 00005D47 FF742410                	push qword [rsp + 8 * 2]
  9038 00005D4B 6A01                    	push 1
  9039 00005D4D E92B1F0100              	jmp L_error_incorrect_arity_simple
  9040                                  .L_lambda_simple_arity_check_ok_0034:
  9041 00005D52 C8000000                	enter 0, 0
  9042 00005D56 BF08000000              	mov rdi, 8*1
  9043 00005D5B E8641F0100              	call malloc
  9044 00005D60 488B5D20                	mov rbx, PARAM(0)
  9045 00005D64 488918                  	mov qword[rax], rbx
  9046 00005D67 48894520                	mov PARAM(0), rax
  9047 00005D6B 48B8-                   	mov rax, sob_void
  9047 00005D6D [0000000000000000] 
  9048                                  
  9049 00005D75 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9050 00005D7A E8451F0100              	call malloc
  9051 00005D7F 50                      	push rax
  9052 00005D80 BF08000000              	mov rdi, 8 * 1	; new rib
  9053 00005D85 E83A1F0100              	call malloc
  9054 00005D8A 50                      	push rax
  9055 00005D8B BF10000000              	mov rdi, 8 * 2	; extended env
  9056 00005D90 E82F1F0100              	call malloc
  9057 00005D95 488B7D10                	mov rdi, ENV
  9058 00005D99 BE00000000              	mov rsi, 0
  9059 00005D9E BA01000000              	mov rdx, 1
  9060                                  .L_lambda_simple_env_loop_0035:	; ext_env[i + 1] <-- env[i]
  9061 00005DA3 4883FE01                	cmp rsi, 1
  9062 00005DA7 7410                    	je .L_lambda_simple_env_end_0035
  9063 00005DA9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9064 00005DAD 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9065 00005DB1 48FFC6                  	inc rsi
  9066 00005DB4 48FFC2                  	inc rdx
  9067 00005DB7 EBEA                    	jmp .L_lambda_simple_env_loop_0035
  9068                                  .L_lambda_simple_env_end_0035:
  9069 00005DB9 5B                      	pop rbx
  9070 00005DBA BE00000000              	mov rsi, 0
  9071                                  .L_lambda_simple_params_loop_0035:	; copy params
  9072 00005DBF 4883FE01                	cmp rsi, 1
  9073 00005DC3 740E                    	je .L_lambda_simple_params_end_0035
  9074 00005DC5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9075 00005DCA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9076 00005DCE 48FFC6                  	inc rsi
  9077 00005DD1 EBEC                    	jmp .L_lambda_simple_params_loop_0035
  9078                                  .L_lambda_simple_params_end_0035:
  9079 00005DD3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9080 00005DD6 4889C3                  	mov rbx, rax
  9081 00005DD9 58                      	pop rax
  9082 00005DDA C60004                  	mov byte [rax], T_closure
  9083 00005DDD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9084 00005DE1 48C74009[EE5D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0035
  9085 00005DE9 E96E010000              	jmp .L_lambda_simple_end_0035
  9086                                  .L_lambda_simple_code_0035:	; lambda-simple body
  9087 00005DEE 48837C241003            	cmp qword [rsp + 8 * 2], 3
  9088 00005DF4 740B                    	je .L_lambda_simple_arity_check_ok_0035
  9089 00005DF6 FF742410                	push qword [rsp + 8 * 2]
  9090 00005DFA 6A03                    	push 3
  9091 00005DFC E97C1E0100              	jmp L_error_incorrect_arity_simple
  9092                                  .L_lambda_simple_arity_check_ok_0035:
  9093 00005E01 C8000000                	enter 0, 0
  9094                                  	; preparing a non-tail-call
  9095 00005E05 488B4530                	mov rax, PARAM(2)	; param ss
  9096 00005E09 50                      	push rax
  9097 00005E0A 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
  9098 00005E12 803805                  	cmp byte [rax], T_undefined
  9099 00005E15 0F847C1D0100            	je L_error_fvar_undefined
  9100 00005E1B 50                      	push rax
  9101 00005E1C 6A02                    	push 2	; arg count
  9102 00005E1E 488B0425[13150000]      	mov rax, qword [free_var_110]	; free var ormap
  9103 00005E26 803805                  	cmp byte [rax], T_undefined
  9104 00005E29 0F84681D0100            	je L_error_fvar_undefined
  9105 00005E2F 803804                  	cmp byte [rax], T_closure
  9106 00005E32 0F85E31D0100            	jne L_error_non_closure
  9107 00005E38 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9108 00005E3B FF5009                  	call SOB_CLOSURE_CODE(rax)
  9109 00005E3E 483D[02000000]          	cmp rax, sob_boolean_false
  9110 00005E44 7409                    	je .L_if_else_0015
  9111 00005E46 488B4528                	mov rax, PARAM(1)	; param unit
  9112 00005E4A E909010000              	jmp .L_if_end_0015
  9113                                  .L_if_else_0015:
  9114                                  	; preparing a tail-call
  9115                                  	; preparing a non-tail-call
  9116 00005E4F 488B4530                	mov rax, PARAM(2)	; param ss
  9117 00005E53 50                      	push rax
  9118 00005E54 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  9119 00005E5C 803805                  	cmp byte [rax], T_undefined
  9120 00005E5F 0F84321D0100            	je L_error_fvar_undefined
  9121 00005E65 50                      	push rax
  9122 00005E66 6A02                    	push 2	; arg count
  9123 00005E68 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
  9124 00005E70 803805                  	cmp byte [rax], T_undefined
  9125 00005E73 0F841E1D0100            	je L_error_fvar_undefined
  9126 00005E79 803804                  	cmp byte [rax], T_closure
  9127 00005E7C 0F85991D0100            	jne L_error_non_closure
  9128 00005E82 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9129 00005E85 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9130 00005E88 50                      	push rax
  9131                                  	; preparing a non-tail-call
  9132                                  	; preparing a non-tail-call
  9133 00005E89 488B4530                	mov rax, PARAM(2)	; param ss
  9134 00005E8D 50                      	push rax
  9135 00005E8E 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  9136 00005E96 803805                  	cmp byte [rax], T_undefined
  9137 00005E99 0F84F81C0100            	je L_error_fvar_undefined
  9138 00005E9F 50                      	push rax
  9139 00005EA0 6A02                    	push 2	; arg count
  9140 00005EA2 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
  9141 00005EAA 803805                  	cmp byte [rax], T_undefined
  9142 00005EAD 0F84E41C0100            	je L_error_fvar_undefined
  9143 00005EB3 803804                  	cmp byte [rax], T_closure
  9144 00005EB6 0F855F1D0100            	jne L_error_non_closure
  9145 00005EBC FF7001                  	push SOB_CLOSURE_ENV(rax)
  9146 00005EBF FF5009                  	call SOB_CLOSURE_CODE(rax)
  9147 00005EC2 50                      	push rax
  9148 00005EC3 488B4528                	mov rax, PARAM(1)	; param unit
  9149 00005EC7 50                      	push rax
  9150 00005EC8 488B4520                	mov rax, PARAM(0)	; param f
  9151 00005ECC 50                      	push rax
  9152 00005ECD 6A03                    	push 3	; arg count
  9153 00005ECF 488B0425[F60F0000]      	mov rax, qword [free_var_33]	; free var apply
  9154 00005ED7 803805                  	cmp byte [rax], T_undefined
  9155 00005EDA 0F84B71C0100            	je L_error_fvar_undefined
  9156 00005EE0 803804                  	cmp byte [rax], T_closure
  9157 00005EE3 0F85321D0100            	jne L_error_non_closure
  9158 00005EE9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9159 00005EEC FF5009                  	call SOB_CLOSURE_CODE(rax)
  9160 00005EEF 50                      	push rax
  9161 00005EF0 488B4520                	mov rax, PARAM(0)	; param f
  9162 00005EF4 50                      	push rax
  9163 00005EF5 6A03                    	push 3	; arg count
  9164 00005EF7 488B4510                	mov rax, ENV
  9165 00005EFB 488B00                  	mov rax, qword [rax + 8 * 0]
  9166 00005EFE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  9167 00005F01 488B00                  	mov rax, qword [rax]
  9168 00005F04 803804                  	cmp byte [rax], T_closure
  9169 00005F07 0F850E1D0100            	jne L_error_non_closure
  9170 00005F0D FF7001                  	push SOB_CLOSURE_ENV(rax)
  9171 00005F10 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  9172 00005F13 FF7500                  	push qword[rbp]
  9173 00005F16 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  9174 00005F19 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  9175 00005F1D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  9176 00005F21 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  9177 00005F25 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  9178 00005F28 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  9179 00005F2B 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  9180 00005F30 4983C103                	add r9, 3 	 ;for getting to the params
  9181 00005F34 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  9182 00005F38 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  9183                                  .L_tc_recycle_frame_loop_003b:
  9184 00005F3B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  9185 00005F3E 7410                    	je .L_tc_recycle_frame_done_003b
  9186 00005F40 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  9187 00005F43 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  9188 00005F46 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  9189 00005F4A 4983E808                	sub r8, 8	 ;move the top of the stack one down
  9190 00005F4E EBEB                    	jmp .L_tc_recycle_frame_loop_003b
  9191                                  .L_tc_recycle_frame_done_003b:
  9192 00005F50 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  9193 00005F51 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  9194 00005F55 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9195                                  .L_if_end_0015:
  9196 00005F58 C9                      	leave
  9197 00005F59 C22800                  	ret AND_KILL_FRAME(3)
  9198                                  .L_lambda_simple_end_0035:	; new closure is in rax
  9199 00005F5C 50                      	push rax
  9200 00005F5D 488B4520                	mov rax, PARAM(0)	; param run
  9201 00005F61 8F00                    	pop qword [rax]
  9202 00005F63 48B8-                   	mov rax, sob_void
  9202 00005F65 [0000000000000000] 
  9203                                  
  9204 00005F6D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9205 00005F72 E84D1D0100              	call malloc
  9206 00005F77 50                      	push rax
  9207 00005F78 BF08000000              	mov rdi, 8 * 1	; new rib
  9208 00005F7D E8421D0100              	call malloc
  9209 00005F82 50                      	push rax
  9210 00005F83 BF10000000              	mov rdi, 8 * 2	; extended env
  9211 00005F88 E8371D0100              	call malloc
  9212 00005F8D 488B7D10                	mov rdi, ENV
  9213 00005F91 BE00000000              	mov rsi, 0
  9214 00005F96 BA01000000              	mov rdx, 1
  9215                                  .L_lambda_opt_env_loop_0008:	; ext_env[i + 1] <-- env[i]
  9216 00005F9B 4883FE01                	cmp rsi, 1
  9217 00005F9F 7410                    	je .L_lambda_opt_env_end_0008
  9218 00005FA1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9219 00005FA5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9220 00005FA9 48FFC6                  	inc rsi
  9221 00005FAC 48FFC2                  	inc rdx
  9222 00005FAF EBEA                    	jmp .L_lambda_opt_env_loop_0008
  9223                                  .L_lambda_opt_env_end_0008:
  9224 00005FB1 5B                      	pop rbx
  9225 00005FB2 BE00000000              	mov rsi, 0
  9226                                  .L_lambda_opt_params_loop_0008:	; copy params
  9227 00005FB7 4883FE01                	cmp rsi, 1
  9228 00005FBB 740E                    	je .L_lambda_opt_params_end_0008
  9229 00005FBD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9230 00005FC2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9231 00005FC6 48FFC6                  	inc rsi
  9232 00005FC9 EBEC                    	jmp .L_lambda_opt_params_loop_0008
  9233                                  .L_lambda_opt_params_end_0008:
  9234 00005FCB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9235 00005FCE 4889C3                  	mov rbx, rax
  9236 00005FD1 58                      	pop rax
  9237 00005FD2 C60004                  	mov byte [rax], T_closure
  9238 00005FD5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9239 00005FD9 48C74009[E65F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0008
  9240 00005FE1 E908020000              	jmp .L_lambda_opt_end_0008
  9241                                  .L_lambda_opt_code_0008:	; lambda-opt body
  9242 00005FE6 48837C241002            	cmp qword [rsp + 8 * 2], 2
  9243 00005FEC 7411                    	je .L_lambda_opt_arity_check_exact_0008
  9244 00005FEE 0F8FCE000000            	jg .L_lambda_opt_arity_check_more_0008
  9245 00005FF4 FF742410                	push qword [rsp + 8 * 2]
  9246 00005FF8 6A02                    	push 2
  9247 00005FFA E9921C0100              	jmp L_error_incorrect_arity_opt
  9248                                  .L_lambda_opt_arity_check_exact_0008:
  9249 00005FFF 4883EC08                	sub rsp, 8
  9250 00006003 488B442408              	mov rax, qword[rsp + 8 *1]
  9251 00006008 48890424                	mov qword[rsp], rax  
  9252 0000600C 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  9253 00006011 4889442408              	mov qword[rsp + 8 * 1], rax
  9254 00006016 B803000000              	mov rax, 3
  9255 0000601B 4889442410              	mov qword[rsp + 8 *2], rax
  9256 00006020 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  9257 00006025 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  9258 0000602A 488B442428              	mov rax, qword[rsp + 8 * (4 + 1)]
  9259 0000602F 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  9260 00006034 48B8-                   	mov rax, sob_nil
  9260 00006036 [0100000000000000] 
  9261 0000603E 4889442428              	mov qword[rsp + 8 * (3 + 2)], rax
  9262 00006043 C8000000                	enter 0, 0
  9263                                  	; preparing a tail-call
  9264 00006047 488B4530                	mov rax, PARAM(2)	; param ss
  9265 0000604B 50                      	push rax
  9266 0000604C 488B4528                	mov rax, PARAM(1)	; param unit
  9267 00006050 50                      	push rax
  9268 00006051 488B4520                	mov rax, PARAM(0)	; param f
  9269 00006055 50                      	push rax
  9270 00006056 6A03                    	push 3	; arg count
  9271 00006058 488B4510                	mov rax, ENV
  9272 0000605C 488B00                  	mov rax, qword [rax + 8 * 0]
  9273 0000605F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  9274 00006062 488B00                  	mov rax, qword [rax]
  9275 00006065 803804                  	cmp byte [rax], T_closure
  9276 00006068 0F85AD1B0100            	jne L_error_non_closure
  9277 0000606E FF7001                  	push SOB_CLOSURE_ENV(rax)
  9278 00006071 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  9279 00006074 FF7500                  	push qword[rbp]
  9280 00006077 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  9281 0000607A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  9282 0000607E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  9283 00006082 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  9284 00006086 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  9285 00006089 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  9286 0000608C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  9287 00006091 4983C103                	add r9, 3 	 ;for getting to the params
  9288 00006095 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  9289 00006099 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  9290                                  .L_tc_recycle_frame_loop_003d:
  9291 0000609C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  9292 0000609F 7410                    	je .L_tc_recycle_frame_done_003d
  9293 000060A1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  9294 000060A4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  9295 000060A7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  9296 000060AB 4983E808                	sub r8, 8	 ;move the top of the stack one down
  9297 000060AF EBEB                    	jmp .L_tc_recycle_frame_loop_003d
  9298                                  .L_tc_recycle_frame_done_003d:
  9299 000060B1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  9300 000060B2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  9301 000060B6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9302 000060B9 C9                      	leave
  9303 000060BA C22800                  	ret AND_KILL_FRAME(3)
  9304 000060BD E92C010000              	jmp .L_lambda_opt_end_0008	; new closure is in rax
  9305                                  .L_lambda_opt_arity_check_more_0008:
  9306 000060C2 488B442410              	mov rax, qword[rsp + 2 * 8]
  9307 000060C7 4889C7                  	mov rdi, rax
  9308 000060CA 49B9-                   	mov r9, sob_nil
  9308 000060CC [0100000000000000] 
  9309 000060D4 4989F8                  	mov r8, rdi
  9310                                  .L_lambda_opt_stack_shrink_loop_0008:
  9311 000060D7 4983F802                	cmp r8, 2
  9312 000060DB 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_0008
  9313 000060DD 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)] 	;rbx is the top of the stack
  9314 000060E2 BF11000000              	mov rdi, 1+8+8	;for pair
  9315 000060E7 E8D81B0100              	call malloc	 ;to create the pair in the stack
  9316 000060EC C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  9317 000060EF 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
  9318 000060F3 4C894809                 	mov qword[rax+1+8],r9
  9319 000060F7 4989C1                  	mov r9 , rax	 ; for the recursion 
  9320 000060FA 49FFC8                  	dec r8
  9321 000060FD EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_0008
  9322                                  .L_lambda_opt_stack_shrink_loop_exit_0008:
  9323 000060FF 488B442410              	mov rax, qword[rsp + 2 * 8]
  9324 00006104 BF03000000              	mov rdi, 3
  9325 00006109 4829F8                  	sub rax, rdi
  9326 0000610C 4889C7                  	mov rdi, rax
  9327 0000610F 486BC008                	imul rax,8
  9328 00006113 4801C4                  	add rsp, rax
  9329 00006116 4889E0                  	mov rax, rsp
  9330 00006119 4989F8                  	mov r8, rdi
  9331 0000611C 4D6BC008                	imul r8, 8
  9332 00006120 4C29C0                  	sub rax, r8
  9333 00006123 4989C2                  	mov r10, rax	; holds the original ret in the stack
  9334 00006126 4983C218                	add r10, 8*3
  9335 0000612A 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
  9336 0000612E 4C8B00                  	mov r8, qword[rax] 	;arg count = r8
  9337 00006131 4D6BC008                	imul r8,8
  9338 00006135 4C01C0                  	add rax, r8
  9339 00006138 4C8908                  	mov qword[rax] ,r9
  9340 0000613B 4D89D0                   	mov r8, r10
  9341 0000613E 4983C008                	add r8, 8 * 1
  9342 00006142 4D8B08                  	mov r9,qword[r8]
  9343 00006145 4D890CF8                	mov qword [r8 + rdi * 8], r9
  9344 00006149 4D89D0                  	mov r8, r10
  9345 0000614C 4983C000                	add r8, 8 * 0
  9346 00006150 4D8B08                  	mov r9,qword[r8]
  9347 00006153 4D890CF8                	mov qword [r8 + rdi * 8], r9
  9348 00006157 4983EA18                	sub r10, 8*3
  9349 0000615B 48C744241003000000      	mov qword [rsp+2*8], 3
  9350 00006164 498B4208                	mov rax, qword[r10 + 1 * 8]
  9351 00006168 4889442408              	mov qword[rsp + 1*8] ,rax
  9352 0000616D 498B02                  	mov rax, qword[r10]
  9353 00006170 48890424                	mov qword[rsp], rax
  9354 00006174 C8000000                	enter 0, 0
  9355                                  	; preparing a tail-call
  9356 00006178 488B4530                	mov rax, PARAM(2)	; param ss
  9357 0000617C 50                      	push rax
  9358 0000617D 488B4528                	mov rax, PARAM(1)	; param unit
  9359 00006181 50                      	push rax
  9360 00006182 488B4520                	mov rax, PARAM(0)	; param f
  9361 00006186 50                      	push rax
  9362 00006187 6A03                    	push 3	; arg count
  9363 00006189 488B4510                	mov rax, ENV
  9364 0000618D 488B00                  	mov rax, qword [rax + 8 * 0]
  9365 00006190 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  9366 00006193 488B00                  	mov rax, qword [rax]
  9367 00006196 803804                  	cmp byte [rax], T_closure
  9368 00006199 0F857C1A0100            	jne L_error_non_closure
  9369 0000619F FF7001                  	push SOB_CLOSURE_ENV(rax)
  9370 000061A2 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  9371 000061A5 FF7500                  	push qword[rbp]
  9372 000061A8 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  9373 000061AB 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  9374 000061AF 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  9375 000061B3 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  9376 000061B7 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  9377 000061BA 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  9378 000061BD 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  9379 000061C2 4983C103                	add r9, 3 	 ;for getting to the params
  9380 000061C6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  9381 000061CA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  9382                                  .L_tc_recycle_frame_loop_003c:
  9383 000061CD 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  9384 000061D0 7410                    	je .L_tc_recycle_frame_done_003c
  9385 000061D2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  9386 000061D5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  9387 000061D8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  9388 000061DC 4983E808                	sub r8, 8	 ;move the top of the stack one down
  9389 000061E0 EBEB                    	jmp .L_tc_recycle_frame_loop_003c
  9390                                  .L_tc_recycle_frame_done_003c:
  9391 000061E2 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  9392 000061E3 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  9393 000061E7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9394 000061EA C9                      	leave
  9395 000061EB C22800                  	ret AND_KILL_FRAME(3)
  9396                                  .L_lambda_opt_end_0008:	; new closure is in rax
  9397 000061EE C9                      	leave
  9398 000061EF C21800                  	ret AND_KILL_FRAME(1)
  9399                                  .L_lambda_simple_end_0034:	; new closure is in rax
  9400 000061F2 803804                  	cmp byte [rax], T_closure
  9401 000061F5 0F85201A0100            	jne L_error_non_closure
  9402 000061FB FF7001                  	push SOB_CLOSURE_ENV(rax)
  9403 000061FE FF5009                  	call SOB_CLOSURE_CODE(rax)
  9404 00006201 48890425[6A130000]      	mov qword [free_var_85], rax
  9405 00006209 48B8-                   	mov rax, sob_void
  9405 0000620B [0000000000000000] 
  9406                                  
  9407 00006213 4889C7                  	mov rdi, rax
  9408 00006216 E8FE1C0100              	call print_sexpr_if_not_void
  9409                                  	; preparing a non-tail-call
  9410 0000621B 48B8-                   	mov rax, L_constants + 1993
  9410 0000621D [C907000000000000] 
  9411 00006225 50                      	push rax
  9412 00006226 6A01                    	push 1	; arg count
  9413 00006228 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9414 0000622D E8921A0100              	call malloc
  9415 00006232 50                      	push rax
  9416 00006233 BF00000000              	mov rdi, 8 * 0	; new rib
  9417 00006238 E8871A0100              	call malloc
  9418 0000623D 50                      	push rax
  9419 0000623E BF08000000              	mov rdi, 8 * 1	; extended env
  9420 00006243 E87C1A0100              	call malloc
  9421 00006248 488B7D10                	mov rdi, ENV
  9422 0000624C BE00000000              	mov rsi, 0
  9423 00006251 BA01000000              	mov rdx, 1
  9424                                  .L_lambda_simple_env_loop_0036:	; ext_env[i + 1] <-- env[i]
  9425 00006256 4883FE00                	cmp rsi, 0
  9426 0000625A 7410                    	je .L_lambda_simple_env_end_0036
  9427 0000625C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9428 00006260 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9429 00006264 48FFC6                  	inc rsi
  9430 00006267 48FFC2                  	inc rdx
  9431 0000626A EBEA                    	jmp .L_lambda_simple_env_loop_0036
  9432                                  .L_lambda_simple_env_end_0036:
  9433 0000626C 5B                      	pop rbx
  9434 0000626D BE00000000              	mov rsi, 0
  9435                                  .L_lambda_simple_params_loop_0036:	; copy params
  9436 00006272 4883FE00                	cmp rsi, 0
  9437 00006276 740E                    	je .L_lambda_simple_params_end_0036
  9438 00006278 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9439 0000627D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9440 00006281 48FFC6                  	inc rsi
  9441 00006284 EBEC                    	jmp .L_lambda_simple_params_loop_0036
  9442                                  .L_lambda_simple_params_end_0036:
  9443 00006286 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9444 00006289 4889C3                  	mov rbx, rax
  9445 0000628C 58                      	pop rax
  9446 0000628D C60004                  	mov byte [rax], T_closure
  9447 00006290 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9448 00006294 48C74009[A1620000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0036
  9449 0000629C E904050000              	jmp .L_lambda_simple_end_0036
  9450                                  .L_lambda_simple_code_0036:	; lambda-simple body
  9451 000062A1 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9452 000062A7 740B                    	je .L_lambda_simple_arity_check_ok_0036
  9453 000062A9 FF742410                	push qword [rsp + 8 * 2]
  9454 000062AD 6A01                    	push 1
  9455 000062AF E9C9190100              	jmp L_error_incorrect_arity_simple
  9456                                  .L_lambda_simple_arity_check_ok_0036:
  9457 000062B4 C8000000                	enter 0, 0
  9458 000062B8 BF08000000              	mov rdi, 8*1
  9459 000062BD E8021A0100              	call malloc
  9460 000062C2 488B5D20                	mov rbx, PARAM(0)
  9461 000062C6 488918                  	mov qword[rax], rbx
  9462 000062C9 48894520                	mov PARAM(0), rax
  9463 000062CD 48B8-                   	mov rax, sob_void
  9463 000062CF [0000000000000000] 
  9464                                  
  9465 000062D7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9466 000062DC E8E3190100              	call malloc
  9467 000062E1 50                      	push rax
  9468 000062E2 BF08000000              	mov rdi, 8 * 1	; new rib
  9469 000062E7 E8D8190100              	call malloc
  9470 000062EC 50                      	push rax
  9471 000062ED BF10000000              	mov rdi, 8 * 2	; extended env
  9472 000062F2 E8CD190100              	call malloc
  9473 000062F7 488B7D10                	mov rdi, ENV
  9474 000062FB BE00000000              	mov rsi, 0
  9475 00006300 BA01000000              	mov rdx, 1
  9476                                  .L_lambda_simple_env_loop_0037:	; ext_env[i + 1] <-- env[i]
  9477 00006305 4883FE01                	cmp rsi, 1
  9478 00006309 7410                    	je .L_lambda_simple_env_end_0037
  9479 0000630B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9480 0000630F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9481 00006313 48FFC6                  	inc rsi
  9482 00006316 48FFC2                  	inc rdx
  9483 00006319 EBEA                    	jmp .L_lambda_simple_env_loop_0037
  9484                                  .L_lambda_simple_env_end_0037:
  9485 0000631B 5B                      	pop rbx
  9486 0000631C BE00000000              	mov rsi, 0
  9487                                  .L_lambda_simple_params_loop_0037:	; copy params
  9488 00006321 4883FE01                	cmp rsi, 1
  9489 00006325 740E                    	je .L_lambda_simple_params_end_0037
  9490 00006327 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9491 0000632C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9492 00006330 48FFC6                  	inc rsi
  9493 00006333 EBEC                    	jmp .L_lambda_simple_params_loop_0037
  9494                                  .L_lambda_simple_params_end_0037:
  9495 00006335 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9496 00006338 4889C3                  	mov rbx, rax
  9497 0000633B 58                      	pop rax
  9498 0000633C C60004                  	mov byte [rax], T_closure
  9499 0000633F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9500 00006343 48C74009[50630000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0037
  9501 0000634B E9BF010000              	jmp .L_lambda_simple_end_0037
  9502                                  .L_lambda_simple_code_0037:	; lambda-simple body
  9503 00006350 48837C241003            	cmp qword [rsp + 8 * 2], 3
  9504 00006356 740B                    	je .L_lambda_simple_arity_check_ok_0037
  9505 00006358 FF742410                	push qword [rsp + 8 * 2]
  9506 0000635C 6A03                    	push 3
  9507 0000635E E91A190100              	jmp L_error_incorrect_arity_simple
  9508                                  .L_lambda_simple_arity_check_ok_0037:
  9509 00006363 C8000000                	enter 0, 0
  9510                                  	; preparing a non-tail-call
  9511 00006367 488B4530                	mov rax, PARAM(2)	; param ss
  9512 0000636B 50                      	push rax
  9513 0000636C 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
  9514 00006374 803805                  	cmp byte [rax], T_undefined
  9515 00006377 0F841A180100            	je L_error_fvar_undefined
  9516 0000637D 50                      	push rax
  9517 0000637E 6A02                    	push 2	; arg count
  9518 00006380 488B0425[13150000]      	mov rax, qword [free_var_110]	; free var ormap
  9519 00006388 803805                  	cmp byte [rax], T_undefined
  9520 0000638B 0F8406180100            	je L_error_fvar_undefined
  9521 00006391 803804                  	cmp byte [rax], T_closure
  9522 00006394 0F8581180100            	jne L_error_non_closure
  9523 0000639A FF7001                  	push SOB_CLOSURE_ENV(rax)
  9524 0000639D FF5009                  	call SOB_CLOSURE_CODE(rax)
  9525 000063A0 483D[02000000]          	cmp rax, sob_boolean_false
  9526 000063A6 7409                    	je .L_if_else_0016
  9527 000063A8 488B4528                	mov rax, PARAM(1)	; param unit
  9528 000063AC E95A010000              	jmp .L_if_end_0016
  9529                                  .L_if_else_0016:
  9530                                  	; preparing a tail-call
  9531                                  	; preparing a non-tail-call
  9532                                  	; preparing a non-tail-call
  9533 000063B1 48B8-                   	mov rax, L_constants + 1
  9533 000063B3 [0100000000000000] 
  9534 000063BB 50                      	push rax
  9535                                  	; preparing a non-tail-call
  9536                                  	; preparing a non-tail-call
  9537 000063BC 488B4530                	mov rax, PARAM(2)	; param ss
  9538 000063C0 50                      	push rax
  9539 000063C1 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  9540 000063C9 803805                  	cmp byte [rax], T_undefined
  9541 000063CC 0F84C5170100            	je L_error_fvar_undefined
  9542 000063D2 50                      	push rax
  9543 000063D3 6A02                    	push 2	; arg count
  9544 000063D5 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
  9545 000063DD 803805                  	cmp byte [rax], T_undefined
  9546 000063E0 0F84B1170100            	je L_error_fvar_undefined
  9547 000063E6 803804                  	cmp byte [rax], T_closure
  9548 000063E9 0F852C180100            	jne L_error_non_closure
  9549 000063EF FF7001                  	push SOB_CLOSURE_ENV(rax)
  9550 000063F2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9551 000063F5 50                      	push rax
  9552 000063F6 488B4528                	mov rax, PARAM(1)	; param unit
  9553 000063FA 50                      	push rax
  9554 000063FB 488B4520                	mov rax, PARAM(0)	; param f
  9555 000063FF 50                      	push rax
  9556 00006400 6A03                    	push 3	; arg count
  9557 00006402 488B4510                	mov rax, ENV
  9558 00006406 488B00                  	mov rax, qword [rax + 8 * 0]
  9559 00006409 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  9560 0000640C 488B00                  	mov rax, qword [rax]
  9561 0000640F 803804                  	cmp byte [rax], T_closure
  9562 00006412 0F8503180100            	jne L_error_non_closure
  9563 00006418 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9564 0000641B FF5009                  	call SOB_CLOSURE_CODE(rax)
  9565 0000641E 50                      	push rax
  9566 0000641F 6A02                    	push 2	; arg count
  9567 00006421 488B0425[04130000]      	mov rax, qword [free_var_79]	; free var cons
  9568 00006429 803805                  	cmp byte [rax], T_undefined
  9569 0000642C 0F8465170100            	je L_error_fvar_undefined
  9570 00006432 803804                  	cmp byte [rax], T_closure
  9571 00006435 0F85E0170100            	jne L_error_non_closure
  9572 0000643B FF7001                  	push SOB_CLOSURE_ENV(rax)
  9573 0000643E FF5009                  	call SOB_CLOSURE_CODE(rax)
  9574 00006441 50                      	push rax
  9575                                  	; preparing a non-tail-call
  9576 00006442 488B4530                	mov rax, PARAM(2)	; param ss
  9577 00006446 50                      	push rax
  9578 00006447 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  9579 0000644F 803805                  	cmp byte [rax], T_undefined
  9580 00006452 0F843F170100            	je L_error_fvar_undefined
  9581 00006458 50                      	push rax
  9582 00006459 6A02                    	push 2	; arg count
  9583 0000645B 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
  9584 00006463 803805                  	cmp byte [rax], T_undefined
  9585 00006466 0F842B170100            	je L_error_fvar_undefined
  9586 0000646C 803804                  	cmp byte [rax], T_closure
  9587 0000646F 0F85A6170100            	jne L_error_non_closure
  9588 00006475 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9589 00006478 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9590 0000647B 50                      	push rax
  9591 0000647C 6A02                    	push 2	; arg count
  9592 0000647E 488B0425[E50F0000]      	mov rax, qword [free_var_32]	; free var append
  9593 00006486 803805                  	cmp byte [rax], T_undefined
  9594 00006489 0F8408170100            	je L_error_fvar_undefined
  9595 0000648F 803804                  	cmp byte [rax], T_closure
  9596 00006492 0F8583170100            	jne L_error_non_closure
  9597 00006498 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9598 0000649B FF5009                  	call SOB_CLOSURE_CODE(rax)
  9599 0000649E 50                      	push rax
  9600 0000649F 488B4520                	mov rax, PARAM(0)	; param f
  9601 000064A3 50                      	push rax
  9602 000064A4 6A02                    	push 2	; arg count
  9603 000064A6 488B0425[F60F0000]      	mov rax, qword [free_var_33]	; free var apply
  9604 000064AE 803805                  	cmp byte [rax], T_undefined
  9605 000064B1 0F84E0160100            	je L_error_fvar_undefined
  9606 000064B7 803804                  	cmp byte [rax], T_closure
  9607 000064BA 0F855B170100            	jne L_error_non_closure
  9608 000064C0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9609 000064C3 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  9610 000064C6 FF7500                  	push qword[rbp]
  9611 000064C9 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  9612 000064CC 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  9613 000064D0 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  9614 000064D4 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  9615 000064D8 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  9616 000064DB 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  9617 000064DE 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  9618 000064E3 4983C103                	add r9, 3 	 ;for getting to the params
  9619 000064E7 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  9620 000064EB 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  9621                                  .L_tc_recycle_frame_loop_003e:
  9622 000064EE 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  9623 000064F1 7410                    	je .L_tc_recycle_frame_done_003e
  9624 000064F3 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  9625 000064F6 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  9626 000064F9 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  9627 000064FD 4983E808                	sub r8, 8	 ;move the top of the stack one down
  9628 00006501 EBEB                    	jmp .L_tc_recycle_frame_loop_003e
  9629                                  .L_tc_recycle_frame_done_003e:
  9630 00006503 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  9631 00006504 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  9632 00006508 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9633                                  .L_if_end_0016:
  9634 0000650B C9                      	leave
  9635 0000650C C22800                  	ret AND_KILL_FRAME(3)
  9636                                  .L_lambda_simple_end_0037:	; new closure is in rax
  9637 0000650F 50                      	push rax
  9638 00006510 488B4520                	mov rax, PARAM(0)	; param run
  9639 00006514 8F00                    	pop qword [rax]
  9640 00006516 48B8-                   	mov rax, sob_void
  9640 00006518 [0000000000000000] 
  9641                                  
  9642 00006520 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9643 00006525 E89A170100              	call malloc
  9644 0000652A 50                      	push rax
  9645 0000652B BF08000000              	mov rdi, 8 * 1	; new rib
  9646 00006530 E88F170100              	call malloc
  9647 00006535 50                      	push rax
  9648 00006536 BF10000000              	mov rdi, 8 * 2	; extended env
  9649 0000653B E884170100              	call malloc
  9650 00006540 488B7D10                	mov rdi, ENV
  9651 00006544 BE00000000              	mov rsi, 0
  9652 00006549 BA01000000              	mov rdx, 1
  9653                                  .L_lambda_opt_env_loop_0009:	; ext_env[i + 1] <-- env[i]
  9654 0000654E 4883FE01                	cmp rsi, 1
  9655 00006552 7410                    	je .L_lambda_opt_env_end_0009
  9656 00006554 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9657 00006558 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9658 0000655C 48FFC6                  	inc rsi
  9659 0000655F 48FFC2                  	inc rdx
  9660 00006562 EBEA                    	jmp .L_lambda_opt_env_loop_0009
  9661                                  .L_lambda_opt_env_end_0009:
  9662 00006564 5B                      	pop rbx
  9663 00006565 BE00000000              	mov rsi, 0
  9664                                  .L_lambda_opt_params_loop_0009:	; copy params
  9665 0000656A 4883FE01                	cmp rsi, 1
  9666 0000656E 740E                    	je .L_lambda_opt_params_end_0009
  9667 00006570 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9668 00006575 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9669 00006579 48FFC6                  	inc rsi
  9670 0000657C EBEC                    	jmp .L_lambda_opt_params_loop_0009
  9671                                  .L_lambda_opt_params_end_0009:
  9672 0000657E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9673 00006581 4889C3                  	mov rbx, rax
  9674 00006584 58                      	pop rax
  9675 00006585 C60004                  	mov byte [rax], T_closure
  9676 00006588 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9677 0000658C 48C74009[99650000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0009
  9678 00006594 E908020000              	jmp .L_lambda_opt_end_0009
  9679                                  .L_lambda_opt_code_0009:	; lambda-opt body
  9680 00006599 48837C241002            	cmp qword [rsp + 8 * 2], 2
  9681 0000659F 7411                    	je .L_lambda_opt_arity_check_exact_0009
  9682 000065A1 0F8FCE000000            	jg .L_lambda_opt_arity_check_more_0009
  9683 000065A7 FF742410                	push qword [rsp + 8 * 2]
  9684 000065AB 6A02                    	push 2
  9685 000065AD E9DF160100              	jmp L_error_incorrect_arity_opt
  9686                                  .L_lambda_opt_arity_check_exact_0009:
  9687 000065B2 4883EC08                	sub rsp, 8
  9688 000065B6 488B442408              	mov rax, qword[rsp + 8 *1]
  9689 000065BB 48890424                	mov qword[rsp], rax  
  9690 000065BF 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  9691 000065C4 4889442408              	mov qword[rsp + 8 * 1], rax
  9692 000065C9 B803000000              	mov rax, 3
  9693 000065CE 4889442410              	mov qword[rsp + 8 *2], rax
  9694 000065D3 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  9695 000065D8 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  9696 000065DD 488B442428              	mov rax, qword[rsp + 8 * (4 + 1)]
  9697 000065E2 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  9698 000065E7 48B8-                   	mov rax, sob_nil
  9698 000065E9 [0100000000000000] 
  9699 000065F1 4889442428              	mov qword[rsp + 8 * (3 + 2)], rax
  9700 000065F6 C8000000                	enter 0, 0
  9701                                  	; preparing a tail-call
  9702 000065FA 488B4530                	mov rax, PARAM(2)	; param ss
  9703 000065FE 50                      	push rax
  9704 000065FF 488B4528                	mov rax, PARAM(1)	; param unit
  9705 00006603 50                      	push rax
  9706 00006604 488B4520                	mov rax, PARAM(0)	; param f
  9707 00006608 50                      	push rax
  9708 00006609 6A03                    	push 3	; arg count
  9709 0000660B 488B4510                	mov rax, ENV
  9710 0000660F 488B00                  	mov rax, qword [rax + 8 * 0]
  9711 00006612 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  9712 00006615 488B00                  	mov rax, qword [rax]
  9713 00006618 803804                  	cmp byte [rax], T_closure
  9714 0000661B 0F85FA150100            	jne L_error_non_closure
  9715 00006621 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9716 00006624 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  9717 00006627 FF7500                  	push qword[rbp]
  9718 0000662A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  9719 0000662D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  9720 00006631 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  9721 00006635 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  9722 00006639 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  9723 0000663C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  9724 0000663F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  9725 00006644 4983C103                	add r9, 3 	 ;for getting to the params
  9726 00006648 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  9727 0000664C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  9728                                  .L_tc_recycle_frame_loop_0040:
  9729 0000664F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  9730 00006652 7410                    	je .L_tc_recycle_frame_done_0040
  9731 00006654 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  9732 00006657 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  9733 0000665A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  9734 0000665E 4983E808                	sub r8, 8	 ;move the top of the stack one down
  9735 00006662 EBEB                    	jmp .L_tc_recycle_frame_loop_0040
  9736                                  .L_tc_recycle_frame_done_0040:
  9737 00006664 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  9738 00006665 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  9739 00006669 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9740 0000666C C9                      	leave
  9741 0000666D C22800                  	ret AND_KILL_FRAME(3)
  9742 00006670 E92C010000              	jmp .L_lambda_opt_end_0009	; new closure is in rax
  9743                                  .L_lambda_opt_arity_check_more_0009:
  9744 00006675 488B442410              	mov rax, qword[rsp + 2 * 8]
  9745 0000667A 4889C7                  	mov rdi, rax
  9746 0000667D 49B9-                   	mov r9, sob_nil
  9746 0000667F [0100000000000000] 
  9747 00006687 4989F8                  	mov r8, rdi
  9748                                  .L_lambda_opt_stack_shrink_loop_0009:
  9749 0000668A 4983F802                	cmp r8, 2
  9750 0000668E 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_0009
  9751 00006690 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)] 	;rbx is the top of the stack
  9752 00006695 BF11000000              	mov rdi, 1+8+8	;for pair
  9753 0000669A E825160100              	call malloc	 ;to create the pair in the stack
  9754 0000669F C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  9755 000066A2 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
  9756 000066A6 4C894809                 	mov qword[rax+1+8],r9
  9757 000066AA 4989C1                  	mov r9 , rax	 ; for the recursion 
  9758 000066AD 49FFC8                  	dec r8
  9759 000066B0 EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_0009
  9760                                  .L_lambda_opt_stack_shrink_loop_exit_0009:
  9761 000066B2 488B442410              	mov rax, qword[rsp + 2 * 8]
  9762 000066B7 BF03000000              	mov rdi, 3
  9763 000066BC 4829F8                  	sub rax, rdi
  9764 000066BF 4889C7                  	mov rdi, rax
  9765 000066C2 486BC008                	imul rax,8
  9766 000066C6 4801C4                  	add rsp, rax
  9767 000066C9 4889E0                  	mov rax, rsp
  9768 000066CC 4989F8                  	mov r8, rdi
  9769 000066CF 4D6BC008                	imul r8, 8
  9770 000066D3 4C29C0                  	sub rax, r8
  9771 000066D6 4989C2                  	mov r10, rax	; holds the original ret in the stack
  9772 000066D9 4983C218                	add r10, 8*3
  9773 000066DD 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
  9774 000066E1 4C8B00                  	mov r8, qword[rax] 	;arg count = r8
  9775 000066E4 4D6BC008                	imul r8,8
  9776 000066E8 4C01C0                  	add rax, r8
  9777 000066EB 4C8908                  	mov qword[rax] ,r9
  9778 000066EE 4D89D0                   	mov r8, r10
  9779 000066F1 4983C008                	add r8, 8 * 1
  9780 000066F5 4D8B08                  	mov r9,qword[r8]
  9781 000066F8 4D890CF8                	mov qword [r8 + rdi * 8], r9
  9782 000066FC 4D89D0                  	mov r8, r10
  9783 000066FF 4983C000                	add r8, 8 * 0
  9784 00006703 4D8B08                  	mov r9,qword[r8]
  9785 00006706 4D890CF8                	mov qword [r8 + rdi * 8], r9
  9786 0000670A 4983EA18                	sub r10, 8*3
  9787 0000670E 48C744241003000000      	mov qword [rsp+2*8], 3
  9788 00006717 498B4208                	mov rax, qword[r10 + 1 * 8]
  9789 0000671B 4889442408              	mov qword[rsp + 1*8] ,rax
  9790 00006720 498B02                  	mov rax, qword[r10]
  9791 00006723 48890424                	mov qword[rsp], rax
  9792 00006727 C8000000                	enter 0, 0
  9793                                  	; preparing a tail-call
  9794 0000672B 488B4530                	mov rax, PARAM(2)	; param ss
  9795 0000672F 50                      	push rax
  9796 00006730 488B4528                	mov rax, PARAM(1)	; param unit
  9797 00006734 50                      	push rax
  9798 00006735 488B4520                	mov rax, PARAM(0)	; param f
  9799 00006739 50                      	push rax
  9800 0000673A 6A03                    	push 3	; arg count
  9801 0000673C 488B4510                	mov rax, ENV
  9802 00006740 488B00                  	mov rax, qword [rax + 8 * 0]
  9803 00006743 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  9804 00006746 488B00                  	mov rax, qword [rax]
  9805 00006749 803804                  	cmp byte [rax], T_closure
  9806 0000674C 0F85C9140100            	jne L_error_non_closure
  9807 00006752 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9808 00006755 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  9809 00006758 FF7500                  	push qword[rbp]
  9810 0000675B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  9811 0000675E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  9812 00006762 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  9813 00006766 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  9814 0000676A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  9815 0000676D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  9816 00006770 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  9817 00006775 4983C103                	add r9, 3 	 ;for getting to the params
  9818 00006779 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  9819 0000677D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  9820                                  .L_tc_recycle_frame_loop_003f:
  9821 00006780 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  9822 00006783 7410                    	je .L_tc_recycle_frame_done_003f
  9823 00006785 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  9824 00006788 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  9825 0000678B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  9826 0000678F 4983E808                	sub r8, 8	 ;move the top of the stack one down
  9827 00006793 EBEB                    	jmp .L_tc_recycle_frame_loop_003f
  9828                                  .L_tc_recycle_frame_done_003f:
  9829 00006795 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  9830 00006796 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  9831 0000679A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9832 0000679D C9                      	leave
  9833 0000679E C22800                  	ret AND_KILL_FRAME(3)
  9834                                  .L_lambda_opt_end_0009:	; new closure is in rax
  9835 000067A1 C9                      	leave
  9836 000067A2 C21800                  	ret AND_KILL_FRAME(1)
  9837                                  .L_lambda_simple_end_0036:	; new closure is in rax
  9838 000067A5 803804                  	cmp byte [rax], T_closure
  9839 000067A8 0F856D140100            	jne L_error_non_closure
  9840 000067AE FF7001                  	push SOB_CLOSURE_ENV(rax)
  9841 000067B1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9842 000067B4 48890425[7B130000]      	mov qword [free_var_86], rax
  9843 000067BC 48B8-                   	mov rax, sob_void
  9843 000067BE [0000000000000000] 
  9844                                  
  9845 000067C6 4889C7                  	mov rdi, rax
  9846 000067C9 E84B170100              	call print_sexpr_if_not_void
  9847                                  	; preparing a non-tail-call
  9848 000067CE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9849 000067D3 E8EC140100              	call malloc
  9850 000067D8 50                      	push rax
  9851 000067D9 BF00000000              	mov rdi, 8 * 0	; new rib
  9852 000067DE E8E1140100              	call malloc
  9853 000067E3 50                      	push rax
  9854 000067E4 BF08000000              	mov rdi, 8 * 1	; extended env
  9855 000067E9 E8D6140100              	call malloc
  9856 000067EE 488B7D10                	mov rdi, ENV
  9857 000067F2 BE00000000              	mov rsi, 0
  9858 000067F7 BA01000000              	mov rdx, 1
  9859                                  .L_lambda_simple_env_loop_0038:	; ext_env[i + 1] <-- env[i]
  9860 000067FC 4883FE00                	cmp rsi, 0
  9861 00006800 7410                    	je .L_lambda_simple_env_end_0038
  9862 00006802 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9863 00006806 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9864 0000680A 48FFC6                  	inc rsi
  9865 0000680D 48FFC2                  	inc rdx
  9866 00006810 EBEA                    	jmp .L_lambda_simple_env_loop_0038
  9867                                  .L_lambda_simple_env_end_0038:
  9868 00006812 5B                      	pop rbx
  9869 00006813 BE00000000              	mov rsi, 0
  9870                                  .L_lambda_simple_params_loop_0038:	; copy params
  9871 00006818 4883FE00                	cmp rsi, 0
  9872 0000681C 740E                    	je .L_lambda_simple_params_end_0038
  9873 0000681E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9874 00006823 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9875 00006827 48FFC6                  	inc rsi
  9876 0000682A EBEC                    	jmp .L_lambda_simple_params_loop_0038
  9877                                  .L_lambda_simple_params_end_0038:
  9878 0000682C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9879 0000682F 4889C3                  	mov rbx, rax
  9880 00006832 58                      	pop rax
  9881 00006833 C60004                  	mov byte [rax], T_closure
  9882 00006836 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9883 0000683A 48C74009[47680000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0038
  9884 00006842 E998000000              	jmp .L_lambda_simple_end_0038
  9885                                  .L_lambda_simple_code_0038:	; lambda-simple body
  9886 00006847 48837C241000            	cmp qword [rsp + 8 * 2], 0
  9887 0000684D 740B                    	je .L_lambda_simple_arity_check_ok_0038
  9888 0000684F FF742410                	push qword [rsp + 8 * 2]
  9889 00006853 6A00                    	push 0
  9890 00006855 E923140100              	jmp L_error_incorrect_arity_simple
  9891                                  .L_lambda_simple_arity_check_ok_0038:
  9892 0000685A C8000000                	enter 0, 0
  9893                                  	; preparing a tail-call
  9894 0000685E 48B8-                   	mov rax, L_constants + 2187
  9894 00006860 [8B08000000000000] 
  9895 00006868 50                      	push rax
  9896 00006869 48B8-                   	mov rax, L_constants + 2178
  9896 0000686B [8208000000000000] 
  9897 00006873 50                      	push rax
  9898 00006874 6A02                    	push 2	; arg count
  9899 00006876 488B0425[37130000]      	mov rax, qword [free_var_82]	; free var error
  9900 0000687E 803805                  	cmp byte [rax], T_undefined
  9901 00006881 0F8410130100            	je L_error_fvar_undefined
  9902 00006887 803804                  	cmp byte [rax], T_closure
  9903 0000688A 0F858B130100            	jne L_error_non_closure
  9904 00006890 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9905 00006893 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  9906 00006896 FF7500                  	push qword[rbp]
  9907 00006899 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  9908 0000689C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  9909 000068A0 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  9910 000068A4 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  9911 000068A8 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  9912 000068AB 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  9913 000068AE 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  9914 000068B3 4983C103                	add r9, 3 	 ;for getting to the params
  9915 000068B7 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  9916 000068BB 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  9917                                  .L_tc_recycle_frame_loop_0041:
  9918 000068BE 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  9919 000068C1 7410                    	je .L_tc_recycle_frame_done_0041
  9920 000068C3 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  9921 000068C6 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  9922 000068C9 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  9923 000068CD 4983E808                	sub r8, 8	 ;move the top of the stack one down
  9924 000068D1 EBEB                    	jmp .L_tc_recycle_frame_loop_0041
  9925                                  .L_tc_recycle_frame_done_0041:
  9926 000068D3 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  9927 000068D4 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  9928 000068D8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9929 000068DB C9                      	leave
  9930 000068DC C21000                  	ret AND_KILL_FRAME(0)
  9931                                  .L_lambda_simple_end_0038:	; new closure is in rax
  9932 000068DF 50                      	push rax
  9933 000068E0 6A01                    	push 1	; arg count
  9934 000068E2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9935 000068E7 E8D8130100              	call malloc
  9936 000068EC 50                      	push rax
  9937 000068ED BF00000000              	mov rdi, 8 * 0	; new rib
  9938 000068F2 E8CD130100              	call malloc
  9939 000068F7 50                      	push rax
  9940 000068F8 BF08000000              	mov rdi, 8 * 1	; extended env
  9941 000068FD E8C2130100              	call malloc
  9942 00006902 488B7D10                	mov rdi, ENV
  9943 00006906 BE00000000              	mov rsi, 0
  9944 0000690B BA01000000              	mov rdx, 1
  9945                                  .L_lambda_simple_env_loop_0039:	; ext_env[i + 1] <-- env[i]
  9946 00006910 4883FE00                	cmp rsi, 0
  9947 00006914 7410                    	je .L_lambda_simple_env_end_0039
  9948 00006916 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9949 0000691A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9950 0000691E 48FFC6                  	inc rsi
  9951 00006921 48FFC2                  	inc rdx
  9952 00006924 EBEA                    	jmp .L_lambda_simple_env_loop_0039
  9953                                  .L_lambda_simple_env_end_0039:
  9954 00006926 5B                      	pop rbx
  9955 00006927 BE00000000              	mov rsi, 0
  9956                                  .L_lambda_simple_params_loop_0039:	; copy params
  9957 0000692C 4883FE00                	cmp rsi, 0
  9958 00006930 740E                    	je .L_lambda_simple_params_end_0039
  9959 00006932 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9960 00006937 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9961 0000693B 48FFC6                  	inc rsi
  9962 0000693E EBEC                    	jmp .L_lambda_simple_params_loop_0039
  9963                                  .L_lambda_simple_params_end_0039:
  9964 00006940 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9965 00006943 4889C3                  	mov rbx, rax
  9966 00006946 58                      	pop rax
  9967 00006947 C60004                  	mov byte [rax], T_closure
  9968 0000694A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9969 0000694E 48C74009[5B690000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0039
  9970 00006956 E9DE0C0000              	jmp .L_lambda_simple_end_0039
  9971                                  .L_lambda_simple_code_0039:	; lambda-simple body
  9972 0000695B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9973 00006961 740B                    	je .L_lambda_simple_arity_check_ok_0039
  9974 00006963 FF742410                	push qword [rsp + 8 * 2]
  9975 00006967 6A01                    	push 1
  9976 00006969 E90F130100              	jmp L_error_incorrect_arity_simple
  9977                                  .L_lambda_simple_arity_check_ok_0039:
  9978 0000696E C8000000                	enter 0, 0
  9979                                  	; preparing a tail-call
  9980 00006972 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9981 00006977 E848130100              	call malloc
  9982 0000697C 50                      	push rax
  9983 0000697D BF08000000              	mov rdi, 8 * 1	; new rib
  9984 00006982 E83D130100              	call malloc
  9985 00006987 50                      	push rax
  9986 00006988 BF10000000              	mov rdi, 8 * 2	; extended env
  9987 0000698D E832130100              	call malloc
  9988 00006992 488B7D10                	mov rdi, ENV
  9989 00006996 BE00000000              	mov rsi, 0
  9990 0000699B BA01000000              	mov rdx, 1
  9991                                  .L_lambda_simple_env_loop_003a:	; ext_env[i + 1] <-- env[i]
  9992 000069A0 4883FE01                	cmp rsi, 1
  9993 000069A4 7410                    	je .L_lambda_simple_env_end_003a
  9994 000069A6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9995 000069AA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9996 000069AE 48FFC6                  	inc rsi
  9997 000069B1 48FFC2                  	inc rdx
  9998 000069B4 EBEA                    	jmp .L_lambda_simple_env_loop_003a
  9999                                  .L_lambda_simple_env_end_003a:
 10000 000069B6 5B                      	pop rbx
 10001 000069B7 BE00000000              	mov rsi, 0
 10002                                  .L_lambda_simple_params_loop_003a:	; copy params
 10003 000069BC 4883FE01                	cmp rsi, 1
 10004 000069C0 740E                    	je .L_lambda_simple_params_end_003a
 10005 000069C2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10006 000069C7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10007 000069CB 48FFC6                  	inc rsi
 10008 000069CE EBEC                    	jmp .L_lambda_simple_params_loop_003a
 10009                                  .L_lambda_simple_params_end_003a:
 10010 000069D0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10011 000069D3 4889C3                  	mov rbx, rax
 10012 000069D6 58                      	pop rax
 10013 000069D7 C60004                  	mov byte [rax], T_closure
 10014 000069DA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10015 000069DE 48C74009[EB690000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003a
 10016 000069E6 E9EE080000              	jmp .L_lambda_simple_end_003a
 10017                                  .L_lambda_simple_code_003a:	; lambda-simple body
 10018 000069EB 48837C241002            	cmp qword [rsp + 8 * 2], 2
 10019 000069F1 740B                    	je .L_lambda_simple_arity_check_ok_003a
 10020 000069F3 FF742410                	push qword [rsp + 8 * 2]
 10021 000069F7 6A02                    	push 2
 10022 000069F9 E97F120100              	jmp L_error_incorrect_arity_simple
 10023                                  .L_lambda_simple_arity_check_ok_003a:
 10024 000069FE C8000000                	enter 0, 0
 10025                                  	; preparing a non-tail-call
 10026 00006A02 488B4520                	mov rax, PARAM(0)	; param a
 10027 00006A06 50                      	push rax
 10028 00006A07 6A01                    	push 1	; arg count
 10029 00006A09 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 10030 00006A11 803805                  	cmp byte [rax], T_undefined
 10031 00006A14 0F847D110100            	je L_error_fvar_undefined
 10032 00006A1A 803804                  	cmp byte [rax], T_closure
 10033 00006A1D 0F85F8110100            	jne L_error_non_closure
 10034 00006A23 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10035 00006A26 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10036 00006A29 483D[02000000]          	cmp rax, sob_boolean_false
 10037 00006A2F 0F849F020000            	je .L_if_else_0022
 10038                                  	; preparing a non-tail-call
 10039 00006A35 488B4528                	mov rax, PARAM(1)	; param b
 10040 00006A39 50                      	push rax
 10041 00006A3A 6A01                    	push 1	; arg count
 10042 00006A3C 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 10043 00006A44 803805                  	cmp byte [rax], T_undefined
 10044 00006A47 0F844A110100            	je L_error_fvar_undefined
 10045 00006A4D 803804                  	cmp byte [rax], T_closure
 10046 00006A50 0F85C5110100            	jne L_error_non_closure
 10047 00006A56 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10048 00006A59 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10049 00006A5C 483D[02000000]          	cmp rax, sob_boolean_false
 10050 00006A62 7476                    	je .L_if_else_0019
 10051                                  	; preparing a tail-call
 10052 00006A64 488B4528                	mov rax, PARAM(1)	; param b
 10053 00006A68 50                      	push rax
 10054 00006A69 488B4520                	mov rax, PARAM(0)	; param a
 10055 00006A6D 50                      	push rax
 10056 00006A6E 6A02                    	push 2	; arg count
 10057 00006A70 488B0425[800E0000]      	mov rax, qword [free_var_11]	; free var __bin-add-zz
 10058 00006A78 803805                  	cmp byte [rax], T_undefined
 10059 00006A7B 0F8416110100            	je L_error_fvar_undefined
 10060 00006A81 803804                  	cmp byte [rax], T_closure
 10061 00006A84 0F8591110100            	jne L_error_non_closure
 10062 00006A8A FF7001                  	push SOB_CLOSURE_ENV(rax)
 10063 00006A8D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10064 00006A90 FF7500                  	push qword[rbp]
 10065 00006A93 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10066 00006A96 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10067 00006A9A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10068 00006A9E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10069 00006AA2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10070 00006AA5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10071 00006AA8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10072 00006AAD 4983C103                	add r9, 3 	 ;for getting to the params
 10073 00006AB1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10074 00006AB5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10075                                  .L_tc_recycle_frame_loop_0042:
 10076 00006AB8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10077 00006ABB 7410                    	je .L_tc_recycle_frame_done_0042
 10078 00006ABD 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10079 00006AC0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10080 00006AC3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10081 00006AC7 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10082 00006ACB EBEB                    	jmp .L_tc_recycle_frame_loop_0042
 10083                                  .L_tc_recycle_frame_done_0042:
 10084 00006ACD 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10085 00006ACE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10086 00006AD2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10087 00006AD5 E9F5010000              	jmp .L_if_end_0019
 10088                                  .L_if_else_0019:
 10089                                  	; preparing a non-tail-call
 10090 00006ADA 488B4528                	mov rax, PARAM(1)	; param b
 10091 00006ADE 50                      	push rax
 10092 00006ADF 6A01                    	push 1	; arg count
 10093 00006AE1 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 10094 00006AE9 803805                  	cmp byte [rax], T_undefined
 10095 00006AEC 0F84A5100100            	je L_error_fvar_undefined
 10096 00006AF2 803804                  	cmp byte [rax], T_closure
 10097 00006AF5 0F8520110100            	jne L_error_non_closure
 10098 00006AFB FF7001                  	push SOB_CLOSURE_ENV(rax)
 10099 00006AFE FF5009                  	call SOB_CLOSURE_CODE(rax)
 10100 00006B01 483D[02000000]          	cmp rax, sob_boolean_false
 10101 00006B07 0F8499000000            	je .L_if_else_0018
 10102                                  	; preparing a tail-call
 10103 00006B0D 488B4528                	mov rax, PARAM(1)	; param b
 10104 00006B11 50                      	push rax
 10105                                  	; preparing a non-tail-call
 10106 00006B12 488B4520                	mov rax, PARAM(0)	; param a
 10107 00006B16 50                      	push rax
 10108 00006B17 6A01                    	push 1	; arg count
 10109 00006B19 488B0425[B20F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 10110 00006B21 803805                  	cmp byte [rax], T_undefined
 10111 00006B24 0F846D100100            	je L_error_fvar_undefined
 10112 00006B2A 803804                  	cmp byte [rax], T_closure
 10113 00006B2D 0F85E8100100            	jne L_error_non_closure
 10114 00006B33 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10115 00006B36 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10116 00006B39 50                      	push rax
 10117 00006B3A 6A02                    	push 2	; arg count
 10118 00006B3C 488B0425[5E0E0000]      	mov rax, qword [free_var_9]	; free var __bin-add-qq
 10119 00006B44 803805                  	cmp byte [rax], T_undefined
 10120 00006B47 0F844A100100            	je L_error_fvar_undefined
 10121 00006B4D 803804                  	cmp byte [rax], T_closure
 10122 00006B50 0F85C5100100            	jne L_error_non_closure
 10123 00006B56 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10124 00006B59 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10125 00006B5C FF7500                  	push qword[rbp]
 10126 00006B5F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10127 00006B62 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10128 00006B66 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10129 00006B6A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10130 00006B6E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10131 00006B71 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10132 00006B74 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10133 00006B79 4983C103                	add r9, 3 	 ;for getting to the params
 10134 00006B7D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10135 00006B81 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10136                                  .L_tc_recycle_frame_loop_0043:
 10137 00006B84 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10138 00006B87 7410                    	je .L_tc_recycle_frame_done_0043
 10139 00006B89 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10140 00006B8C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10141 00006B8F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10142 00006B93 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10143 00006B97 EBEB                    	jmp .L_tc_recycle_frame_loop_0043
 10144                                  .L_tc_recycle_frame_done_0043:
 10145 00006B99 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10146 00006B9A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10147 00006B9E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10148 00006BA1 E929010000              	jmp .L_if_end_0018
 10149                                  .L_if_else_0018:
 10150                                  	; preparing a non-tail-call
 10151 00006BA6 488B4528                	mov rax, PARAM(1)	; param b
 10152 00006BAA 50                      	push rax
 10153 00006BAB 6A01                    	push 1	; arg count
 10154 00006BAD 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 10155 00006BB5 803805                  	cmp byte [rax], T_undefined
 10156 00006BB8 0F84D90F0100            	je L_error_fvar_undefined
 10157 00006BBE 803804                  	cmp byte [rax], T_closure
 10158 00006BC1 0F8554100100            	jne L_error_non_closure
 10159 00006BC7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10160 00006BCA FF5009                  	call SOB_CLOSURE_CODE(rax)
 10161 00006BCD 483D[02000000]          	cmp rax, sob_boolean_false
 10162 00006BD3 0F8496000000            	je .L_if_else_0017
 10163                                  	; preparing a tail-call
 10164 00006BD9 488B4528                	mov rax, PARAM(1)	; param b
 10165 00006BDD 50                      	push rax
 10166                                  	; preparing a non-tail-call
 10167 00006BDE 488B4520                	mov rax, PARAM(0)	; param a
 10168 00006BE2 50                      	push rax
 10169 00006BE3 6A01                    	push 1	; arg count
 10170 00006BE5 488B0425[BF130000]      	mov rax, qword [free_var_90]	; free var integer->real
 10171 00006BED 803805                  	cmp byte [rax], T_undefined
 10172 00006BF0 0F84A10F0100            	je L_error_fvar_undefined
 10173 00006BF6 803804                  	cmp byte [rax], T_closure
 10174 00006BF9 0F851C100100            	jne L_error_non_closure
 10175 00006BFF FF7001                  	push SOB_CLOSURE_ENV(rax)
 10176 00006C02 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10177 00006C05 50                      	push rax
 10178 00006C06 6A02                    	push 2	; arg count
 10179 00006C08 488B0425[6F0E0000]      	mov rax, qword [free_var_10]	; free var __bin-add-rr
 10180 00006C10 803805                  	cmp byte [rax], T_undefined
 10181 00006C13 0F847E0F0100            	je L_error_fvar_undefined
 10182 00006C19 803804                  	cmp byte [rax], T_closure
 10183 00006C1C 0F85F90F0100            	jne L_error_non_closure
 10184 00006C22 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10185 00006C25 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10186 00006C28 FF7500                  	push qword[rbp]
 10187 00006C2B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10188 00006C2E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10189 00006C32 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10190 00006C36 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10191 00006C3A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10192 00006C3D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10193 00006C40 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10194 00006C45 4983C103                	add r9, 3 	 ;for getting to the params
 10195 00006C49 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10196 00006C4D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10197                                  .L_tc_recycle_frame_loop_0044:
 10198 00006C50 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10199 00006C53 7410                    	je .L_tc_recycle_frame_done_0044
 10200 00006C55 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10201 00006C58 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10202 00006C5B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10203 00006C5F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10204 00006C63 EBEB                    	jmp .L_tc_recycle_frame_loop_0044
 10205                                  .L_tc_recycle_frame_done_0044:
 10206 00006C65 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10207 00006C66 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10208 00006C6A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10209 00006C6D EB60                    	jmp .L_if_end_0017
 10210                                  .L_if_else_0017:
 10211                                  	; preparing a tail-call
 10212 00006C6F 6A00                    	push 0	; arg count
 10213 00006C71 488B4510                	mov rax, ENV
 10214 00006C75 488B00                  	mov rax, qword [rax + 8 * 0]
 10215 00006C78 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10216 00006C7B 803804                  	cmp byte [rax], T_closure
 10217 00006C7E 0F85970F0100            	jne L_error_non_closure
 10218 00006C84 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10219 00006C87 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10220 00006C8A FF7500                  	push qword[rbp]
 10221 00006C8D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10222 00006C90 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10223 00006C94 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10224 00006C98 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10225 00006C9C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10226 00006C9F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10227 00006CA2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10228 00006CA7 4983C103                	add r9, 3 	 ;for getting to the params
 10229 00006CAB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10230 00006CAF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10231                                  .L_tc_recycle_frame_loop_0045:
 10232 00006CB2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10233 00006CB5 7410                    	je .L_tc_recycle_frame_done_0045
 10234 00006CB7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10235 00006CBA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10236 00006CBD 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10237 00006CC1 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10238 00006CC5 EBEB                    	jmp .L_tc_recycle_frame_loop_0045
 10239                                  .L_tc_recycle_frame_done_0045:
 10240 00006CC7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10241 00006CC8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10242 00006CCC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10243                                  .L_if_end_0017:
 10244                                  .L_if_end_0018:
 10245                                  .L_if_end_0019:
 10246 00006CCF E901060000              	jmp .L_if_end_0022
 10247                                  .L_if_else_0022:
 10248                                  	; preparing a non-tail-call
 10249 00006CD4 488B4520                	mov rax, PARAM(0)	; param a
 10250 00006CD8 50                      	push rax
 10251 00006CD9 6A01                    	push 1	; arg count
 10252 00006CDB 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 10253 00006CE3 803805                  	cmp byte [rax], T_undefined
 10254 00006CE6 0F84AB0E0100            	je L_error_fvar_undefined
 10255 00006CEC 803804                  	cmp byte [rax], T_closure
 10256 00006CEF 0F85260F0100            	jne L_error_non_closure
 10257 00006CF5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10258 00006CF8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10259 00006CFB 483D[02000000]          	cmp rax, sob_boolean_false
 10260 00006D01 0F849F020000            	je .L_if_else_0021
 10261                                  	; preparing a non-tail-call
 10262 00006D07 488B4528                	mov rax, PARAM(1)	; param b
 10263 00006D0B 50                      	push rax
 10264 00006D0C 6A01                    	push 1	; arg count
 10265 00006D0E 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 10266 00006D16 803805                  	cmp byte [rax], T_undefined
 10267 00006D19 0F84780E0100            	je L_error_fvar_undefined
 10268 00006D1F 803804                  	cmp byte [rax], T_closure
 10269 00006D22 0F85F30E0100            	jne L_error_non_closure
 10270 00006D28 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10271 00006D2B FF5009                  	call SOB_CLOSURE_CODE(rax)
 10272 00006D2E 483D[02000000]          	cmp rax, sob_boolean_false
 10273 00006D34 0F8499000000            	je .L_if_else_001c
 10274                                  	; preparing a tail-call
 10275                                  	; preparing a non-tail-call
 10276 00006D3A 488B4528                	mov rax, PARAM(1)	; param b
 10277 00006D3E 50                      	push rax
 10278 00006D3F 6A01                    	push 1	; arg count
 10279 00006D41 488B0425[A10F0000]      	mov rax, qword [free_var_28]	; free var __bin_integer_to_fraction
 10280 00006D49 803805                  	cmp byte [rax], T_undefined
 10281 00006D4C 0F84450E0100            	je L_error_fvar_undefined
 10282 00006D52 803804                  	cmp byte [rax], T_closure
 10283 00006D55 0F85C00E0100            	jne L_error_non_closure
 10284 00006D5B FF7001                  	push SOB_CLOSURE_ENV(rax)
 10285 00006D5E FF5009                  	call SOB_CLOSURE_CODE(rax)
 10286 00006D61 50                      	push rax
 10287 00006D62 488B4520                	mov rax, PARAM(0)	; param a
 10288 00006D66 50                      	push rax
 10289 00006D67 6A02                    	push 2	; arg count
 10290 00006D69 488B0425[5E0E0000]      	mov rax, qword [free_var_9]	; free var __bin-add-qq
 10291 00006D71 803805                  	cmp byte [rax], T_undefined
 10292 00006D74 0F841D0E0100            	je L_error_fvar_undefined
 10293 00006D7A 803804                  	cmp byte [rax], T_closure
 10294 00006D7D 0F85980E0100            	jne L_error_non_closure
 10295 00006D83 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10296 00006D86 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10297 00006D89 FF7500                  	push qword[rbp]
 10298 00006D8C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10299 00006D8F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10300 00006D93 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10301 00006D97 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10302 00006D9B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10303 00006D9E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10304 00006DA1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10305 00006DA6 4983C103                	add r9, 3 	 ;for getting to the params
 10306 00006DAA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10307 00006DAE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10308                                  .L_tc_recycle_frame_loop_0046:
 10309 00006DB1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10310 00006DB4 7410                    	je .L_tc_recycle_frame_done_0046
 10311 00006DB6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10312 00006DB9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10313 00006DBC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10314 00006DC0 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10315 00006DC4 EBEB                    	jmp .L_tc_recycle_frame_loop_0046
 10316                                  .L_tc_recycle_frame_done_0046:
 10317 00006DC6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10318 00006DC7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10319 00006DCB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10320 00006DCE E9CE010000              	jmp .L_if_end_001c
 10321                                  .L_if_else_001c:
 10322                                  	; preparing a non-tail-call
 10323 00006DD3 488B4528                	mov rax, PARAM(1)	; param b
 10324 00006DD7 50                      	push rax
 10325 00006DD8 6A01                    	push 1	; arg count
 10326 00006DDA 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 10327 00006DE2 803805                  	cmp byte [rax], T_undefined
 10328 00006DE5 0F84AC0D0100            	je L_error_fvar_undefined
 10329 00006DEB 803804                  	cmp byte [rax], T_closure
 10330 00006DEE 0F85270E0100            	jne L_error_non_closure
 10331 00006DF4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10332 00006DF7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10333 00006DFA 483D[02000000]          	cmp rax, sob_boolean_false
 10334 00006E00 7476                    	je .L_if_else_001b
 10335                                  	; preparing a tail-call
 10336 00006E02 488B4528                	mov rax, PARAM(1)	; param b
 10337 00006E06 50                      	push rax
 10338 00006E07 488B4520                	mov rax, PARAM(0)	; param a
 10339 00006E0B 50                      	push rax
 10340 00006E0C 6A02                    	push 2	; arg count
 10341 00006E0E 488B0425[5E0E0000]      	mov rax, qword [free_var_9]	; free var __bin-add-qq
 10342 00006E16 803805                  	cmp byte [rax], T_undefined
 10343 00006E19 0F84780D0100            	je L_error_fvar_undefined
 10344 00006E1F 803804                  	cmp byte [rax], T_closure
 10345 00006E22 0F85F30D0100            	jne L_error_non_closure
 10346 00006E28 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10347 00006E2B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10348 00006E2E FF7500                  	push qword[rbp]
 10349 00006E31 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10350 00006E34 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10351 00006E38 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10352 00006E3C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10353 00006E40 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10354 00006E43 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10355 00006E46 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10356 00006E4B 4983C103                	add r9, 3 	 ;for getting to the params
 10357 00006E4F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10358 00006E53 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10359                                  .L_tc_recycle_frame_loop_0047:
 10360 00006E56 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10361 00006E59 7410                    	je .L_tc_recycle_frame_done_0047
 10362 00006E5B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10363 00006E5E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10364 00006E61 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10365 00006E65 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10366 00006E69 EBEB                    	jmp .L_tc_recycle_frame_loop_0047
 10367                                  .L_tc_recycle_frame_done_0047:
 10368 00006E6B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10369 00006E6C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10370 00006E70 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10371 00006E73 E929010000              	jmp .L_if_end_001b
 10372                                  .L_if_else_001b:
 10373                                  	; preparing a non-tail-call
 10374 00006E78 488B4528                	mov rax, PARAM(1)	; param b
 10375 00006E7C 50                      	push rax
 10376 00006E7D 6A01                    	push 1	; arg count
 10377 00006E7F 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 10378 00006E87 803805                  	cmp byte [rax], T_undefined
 10379 00006E8A 0F84070D0100            	je L_error_fvar_undefined
 10380 00006E90 803804                  	cmp byte [rax], T_closure
 10381 00006E93 0F85820D0100            	jne L_error_non_closure
 10382 00006E99 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10383 00006E9C FF5009                  	call SOB_CLOSURE_CODE(rax)
 10384 00006E9F 483D[02000000]          	cmp rax, sob_boolean_false
 10385 00006EA5 0F8496000000            	je .L_if_else_001a
 10386                                  	; preparing a tail-call
 10387 00006EAB 488B4528                	mov rax, PARAM(1)	; param b
 10388 00006EAF 50                      	push rax
 10389                                  	; preparing a non-tail-call
 10390 00006EB0 488B4520                	mov rax, PARAM(0)	; param a
 10391 00006EB4 50                      	push rax
 10392 00006EB5 6A01                    	push 1	; arg count
 10393 00006EB7 488B0425[8C130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 10394 00006EBF 803805                  	cmp byte [rax], T_undefined
 10395 00006EC2 0F84CF0C0100            	je L_error_fvar_undefined
 10396 00006EC8 803804                  	cmp byte [rax], T_closure
 10397 00006ECB 0F854A0D0100            	jne L_error_non_closure
 10398 00006ED1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10399 00006ED4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10400 00006ED7 50                      	push rax
 10401 00006ED8 6A02                    	push 2	; arg count
 10402 00006EDA 488B0425[6F0E0000]      	mov rax, qword [free_var_10]	; free var __bin-add-rr
 10403 00006EE2 803805                  	cmp byte [rax], T_undefined
 10404 00006EE5 0F84AC0C0100            	je L_error_fvar_undefined
 10405 00006EEB 803804                  	cmp byte [rax], T_closure
 10406 00006EEE 0F85270D0100            	jne L_error_non_closure
 10407 00006EF4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10408 00006EF7 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10409 00006EFA FF7500                  	push qword[rbp]
 10410 00006EFD 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10411 00006F00 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10412 00006F04 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10413 00006F08 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10414 00006F0C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10415 00006F0F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10416 00006F12 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10417 00006F17 4983C103                	add r9, 3 	 ;for getting to the params
 10418 00006F1B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10419 00006F1F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10420                                  .L_tc_recycle_frame_loop_0048:
 10421 00006F22 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10422 00006F25 7410                    	je .L_tc_recycle_frame_done_0048
 10423 00006F27 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10424 00006F2A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10425 00006F2D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10426 00006F31 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10427 00006F35 EBEB                    	jmp .L_tc_recycle_frame_loop_0048
 10428                                  .L_tc_recycle_frame_done_0048:
 10429 00006F37 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10430 00006F38 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10431 00006F3C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10432 00006F3F EB60                    	jmp .L_if_end_001a
 10433                                  .L_if_else_001a:
 10434                                  	; preparing a tail-call
 10435 00006F41 6A00                    	push 0	; arg count
 10436 00006F43 488B4510                	mov rax, ENV
 10437 00006F47 488B00                  	mov rax, qword [rax + 8 * 0]
 10438 00006F4A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10439 00006F4D 803804                  	cmp byte [rax], T_closure
 10440 00006F50 0F85C50C0100            	jne L_error_non_closure
 10441 00006F56 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10442 00006F59 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10443 00006F5C FF7500                  	push qword[rbp]
 10444 00006F5F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10445 00006F62 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10446 00006F66 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10447 00006F6A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10448 00006F6E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10449 00006F71 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10450 00006F74 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10451 00006F79 4983C103                	add r9, 3 	 ;for getting to the params
 10452 00006F7D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10453 00006F81 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10454                                  .L_tc_recycle_frame_loop_0049:
 10455 00006F84 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10456 00006F87 7410                    	je .L_tc_recycle_frame_done_0049
 10457 00006F89 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10458 00006F8C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10459 00006F8F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10460 00006F93 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10461 00006F97 EBEB                    	jmp .L_tc_recycle_frame_loop_0049
 10462                                  .L_tc_recycle_frame_done_0049:
 10463 00006F99 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10464 00006F9A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10465 00006F9E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10466                                  .L_if_end_001a:
 10467                                  .L_if_end_001b:
 10468                                  .L_if_end_001c:
 10469 00006FA1 E92F030000              	jmp .L_if_end_0021
 10470                                  .L_if_else_0021:
 10471                                  	; preparing a non-tail-call
 10472 00006FA6 488B4520                	mov rax, PARAM(0)	; param a
 10473 00006FAA 50                      	push rax
 10474 00006FAB 6A01                    	push 1	; arg count
 10475 00006FAD 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 10476 00006FB5 803805                  	cmp byte [rax], T_undefined
 10477 00006FB8 0F84D90B0100            	je L_error_fvar_undefined
 10478 00006FBE 803804                  	cmp byte [rax], T_closure
 10479 00006FC1 0F85540C0100            	jne L_error_non_closure
 10480 00006FC7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10481 00006FCA FF5009                  	call SOB_CLOSURE_CODE(rax)
 10482 00006FCD 483D[02000000]          	cmp rax, sob_boolean_false
 10483 00006FD3 0F849C020000            	je .L_if_else_0020
 10484                                  	; preparing a non-tail-call
 10485 00006FD9 488B4528                	mov rax, PARAM(1)	; param b
 10486 00006FDD 50                      	push rax
 10487 00006FDE 6A01                    	push 1	; arg count
 10488 00006FE0 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 10489 00006FE8 803805                  	cmp byte [rax], T_undefined
 10490 00006FEB 0F84A60B0100            	je L_error_fvar_undefined
 10491 00006FF1 803804                  	cmp byte [rax], T_closure
 10492 00006FF4 0F85210C0100            	jne L_error_non_closure
 10493 00006FFA FF7001                  	push SOB_CLOSURE_ENV(rax)
 10494 00006FFD FF5009                  	call SOB_CLOSURE_CODE(rax)
 10495 00007000 483D[02000000]          	cmp rax, sob_boolean_false
 10496 00007006 0F8499000000            	je .L_if_else_001f
 10497                                  	; preparing a tail-call
 10498                                  	; preparing a non-tail-call
 10499 0000700C 488B4528                	mov rax, PARAM(1)	; param b
 10500 00007010 50                      	push rax
 10501 00007011 6A01                    	push 1	; arg count
 10502 00007013 488B0425[BF130000]      	mov rax, qword [free_var_90]	; free var integer->real
 10503 0000701B 803805                  	cmp byte [rax], T_undefined
 10504 0000701E 0F84730B0100            	je L_error_fvar_undefined
 10505 00007024 803804                  	cmp byte [rax], T_closure
 10506 00007027 0F85EE0B0100            	jne L_error_non_closure
 10507 0000702D FF7001                  	push SOB_CLOSURE_ENV(rax)
 10508 00007030 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10509 00007033 50                      	push rax
 10510 00007034 488B4520                	mov rax, PARAM(0)	; param a
 10511 00007038 50                      	push rax
 10512 00007039 6A02                    	push 2	; arg count
 10513 0000703B 488B0425[6F0E0000]      	mov rax, qword [free_var_10]	; free var __bin-add-rr
 10514 00007043 803805                  	cmp byte [rax], T_undefined
 10515 00007046 0F844B0B0100            	je L_error_fvar_undefined
 10516 0000704C 803804                  	cmp byte [rax], T_closure
 10517 0000704F 0F85C60B0100            	jne L_error_non_closure
 10518 00007055 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10519 00007058 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10520 0000705B FF7500                  	push qword[rbp]
 10521 0000705E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10522 00007061 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10523 00007065 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10524 00007069 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10525 0000706D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10526 00007070 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10527 00007073 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10528 00007078 4983C103                	add r9, 3 	 ;for getting to the params
 10529 0000707C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10530 00007080 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10531                                  .L_tc_recycle_frame_loop_004a:
 10532 00007083 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10533 00007086 7410                    	je .L_tc_recycle_frame_done_004a
 10534 00007088 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10535 0000708B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10536 0000708E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10537 00007092 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10538 00007096 EBEB                    	jmp .L_tc_recycle_frame_loop_004a
 10539                                  .L_tc_recycle_frame_done_004a:
 10540 00007098 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10541 00007099 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10542 0000709D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10543 000070A0 E9CE010000              	jmp .L_if_end_001f
 10544                                  .L_if_else_001f:
 10545                                  	; preparing a non-tail-call
 10546 000070A5 488B4528                	mov rax, PARAM(1)	; param b
 10547 000070A9 50                      	push rax
 10548 000070AA 6A01                    	push 1	; arg count
 10549 000070AC 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 10550 000070B4 803805                  	cmp byte [rax], T_undefined
 10551 000070B7 0F84DA0A0100            	je L_error_fvar_undefined
 10552 000070BD 803804                  	cmp byte [rax], T_closure
 10553 000070C0 0F85550B0100            	jne L_error_non_closure
 10554 000070C6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10555 000070C9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10556 000070CC 483D[02000000]          	cmp rax, sob_boolean_false
 10557 000070D2 0F8499000000            	je .L_if_else_001e
 10558                                  	; preparing a tail-call
 10559                                  	; preparing a non-tail-call
 10560 000070D8 488B4528                	mov rax, PARAM(1)	; param b
 10561 000070DC 50                      	push rax
 10562 000070DD 6A01                    	push 1	; arg count
 10563 000070DF 488B0425[8C130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 10564 000070E7 803805                  	cmp byte [rax], T_undefined
 10565 000070EA 0F84A70A0100            	je L_error_fvar_undefined
 10566 000070F0 803804                  	cmp byte [rax], T_closure
 10567 000070F3 0F85220B0100            	jne L_error_non_closure
 10568 000070F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10569 000070FC FF5009                  	call SOB_CLOSURE_CODE(rax)
 10570 000070FF 50                      	push rax
 10571 00007100 488B4520                	mov rax, PARAM(0)	; param a
 10572 00007104 50                      	push rax
 10573 00007105 6A02                    	push 2	; arg count
 10574 00007107 488B0425[6F0E0000]      	mov rax, qword [free_var_10]	; free var __bin-add-rr
 10575 0000710F 803805                  	cmp byte [rax], T_undefined
 10576 00007112 0F847F0A0100            	je L_error_fvar_undefined
 10577 00007118 803804                  	cmp byte [rax], T_closure
 10578 0000711B 0F85FA0A0100            	jne L_error_non_closure
 10579 00007121 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10580 00007124 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10581 00007127 FF7500                  	push qword[rbp]
 10582 0000712A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10583 0000712D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10584 00007131 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10585 00007135 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10586 00007139 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10587 0000713C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10588 0000713F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10589 00007144 4983C103                	add r9, 3 	 ;for getting to the params
 10590 00007148 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10591 0000714C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10592                                  .L_tc_recycle_frame_loop_004b:
 10593 0000714F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10594 00007152 7410                    	je .L_tc_recycle_frame_done_004b
 10595 00007154 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10596 00007157 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10597 0000715A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10598 0000715E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10599 00007162 EBEB                    	jmp .L_tc_recycle_frame_loop_004b
 10600                                  .L_tc_recycle_frame_done_004b:
 10601 00007164 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10602 00007165 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10603 00007169 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10604 0000716C E902010000              	jmp .L_if_end_001e
 10605                                  .L_if_else_001e:
 10606                                  	; preparing a non-tail-call
 10607 00007171 488B4528                	mov rax, PARAM(1)	; param b
 10608 00007175 50                      	push rax
 10609 00007176 6A01                    	push 1	; arg count
 10610 00007178 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 10611 00007180 803805                  	cmp byte [rax], T_undefined
 10612 00007183 0F840E0A0100            	je L_error_fvar_undefined
 10613 00007189 803804                  	cmp byte [rax], T_closure
 10614 0000718C 0F85890A0100            	jne L_error_non_closure
 10615 00007192 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10616 00007195 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10617 00007198 483D[02000000]          	cmp rax, sob_boolean_false
 10618 0000719E 7473                    	je .L_if_else_001d
 10619                                  	; preparing a tail-call
 10620 000071A0 488B4528                	mov rax, PARAM(1)	; param b
 10621 000071A4 50                      	push rax
 10622 000071A5 488B4520                	mov rax, PARAM(0)	; param a
 10623 000071A9 50                      	push rax
 10624 000071AA 6A02                    	push 2	; arg count
 10625 000071AC 488B0425[6F0E0000]      	mov rax, qword [free_var_10]	; free var __bin-add-rr
 10626 000071B4 803805                  	cmp byte [rax], T_undefined
 10627 000071B7 0F84DA090100            	je L_error_fvar_undefined
 10628 000071BD 803804                  	cmp byte [rax], T_closure
 10629 000071C0 0F85550A0100            	jne L_error_non_closure
 10630 000071C6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10631 000071C9 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10632 000071CC FF7500                  	push qword[rbp]
 10633 000071CF 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10634 000071D2 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10635 000071D6 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10636 000071DA 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10637 000071DE 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10638 000071E1 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10639 000071E4 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10640 000071E9 4983C103                	add r9, 3 	 ;for getting to the params
 10641 000071ED 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10642 000071F1 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10643                                  .L_tc_recycle_frame_loop_004c:
 10644 000071F4 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10645 000071F7 7410                    	je .L_tc_recycle_frame_done_004c
 10646 000071F9 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10647 000071FC 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10648 000071FF 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10649 00007203 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10650 00007207 EBEB                    	jmp .L_tc_recycle_frame_loop_004c
 10651                                  .L_tc_recycle_frame_done_004c:
 10652 00007209 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10653 0000720A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10654 0000720E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10655 00007211 EB60                    	jmp .L_if_end_001d
 10656                                  .L_if_else_001d:
 10657                                  	; preparing a tail-call
 10658 00007213 6A00                    	push 0	; arg count
 10659 00007215 488B4510                	mov rax, ENV
 10660 00007219 488B00                  	mov rax, qword [rax + 8 * 0]
 10661 0000721C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10662 0000721F 803804                  	cmp byte [rax], T_closure
 10663 00007222 0F85F3090100            	jne L_error_non_closure
 10664 00007228 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10665 0000722B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10666 0000722E FF7500                  	push qword[rbp]
 10667 00007231 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10668 00007234 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10669 00007238 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10670 0000723C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10671 00007240 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10672 00007243 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10673 00007246 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10674 0000724B 4983C103                	add r9, 3 	 ;for getting to the params
 10675 0000724F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10676 00007253 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10677                                  .L_tc_recycle_frame_loop_004d:
 10678 00007256 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10679 00007259 7410                    	je .L_tc_recycle_frame_done_004d
 10680 0000725B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10681 0000725E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10682 00007261 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10683 00007265 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10684 00007269 EBEB                    	jmp .L_tc_recycle_frame_loop_004d
 10685                                  .L_tc_recycle_frame_done_004d:
 10686 0000726B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10687 0000726C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10688 00007270 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10689                                  .L_if_end_001d:
 10690                                  .L_if_end_001e:
 10691                                  .L_if_end_001f:
 10692 00007273 EB60                    	jmp .L_if_end_0020
 10693                                  .L_if_else_0020:
 10694                                  	; preparing a tail-call
 10695 00007275 6A00                    	push 0	; arg count
 10696 00007277 488B4510                	mov rax, ENV
 10697 0000727B 488B00                  	mov rax, qword [rax + 8 * 0]
 10698 0000727E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10699 00007281 803804                  	cmp byte [rax], T_closure
 10700 00007284 0F8591090100            	jne L_error_non_closure
 10701 0000728A FF7001                  	push SOB_CLOSURE_ENV(rax)
 10702 0000728D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10703 00007290 FF7500                  	push qword[rbp]
 10704 00007293 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10705 00007296 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10706 0000729A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10707 0000729E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10708 000072A2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10709 000072A5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10710 000072A8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10711 000072AD 4983C103                	add r9, 3 	 ;for getting to the params
 10712 000072B1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10713 000072B5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10714                                  .L_tc_recycle_frame_loop_004e:
 10715 000072B8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10716 000072BB 7410                    	je .L_tc_recycle_frame_done_004e
 10717 000072BD 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10718 000072C0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10719 000072C3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10720 000072C7 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10721 000072CB EBEB                    	jmp .L_tc_recycle_frame_loop_004e
 10722                                  .L_tc_recycle_frame_done_004e:
 10723 000072CD 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10724 000072CE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10725 000072D2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10726                                  .L_if_end_0020:
 10727                                  .L_if_end_0021:
 10728                                  .L_if_end_0022:
 10729 000072D5 C9                      	leave
 10730 000072D6 C22000                  	ret AND_KILL_FRAME(2)
 10731                                  .L_lambda_simple_end_003a:	; new closure is in rax
 10732 000072D9 50                      	push rax
 10733 000072DA 6A01                    	push 1	; arg count
 10734 000072DC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10735 000072E1 E8DE090100              	call malloc
 10736 000072E6 50                      	push rax
 10737 000072E7 BF08000000              	mov rdi, 8 * 1	; new rib
 10738 000072EC E8D3090100              	call malloc
 10739 000072F1 50                      	push rax
 10740 000072F2 BF10000000              	mov rdi, 8 * 2	; extended env
 10741 000072F7 E8C8090100              	call malloc
 10742 000072FC 488B7D10                	mov rdi, ENV
 10743 00007300 BE00000000              	mov rsi, 0
 10744 00007305 BA01000000              	mov rdx, 1
 10745                                  .L_lambda_simple_env_loop_003b:	; ext_env[i + 1] <-- env[i]
 10746 0000730A 4883FE01                	cmp rsi, 1
 10747 0000730E 7410                    	je .L_lambda_simple_env_end_003b
 10748 00007310 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10749 00007314 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10750 00007318 48FFC6                  	inc rsi
 10751 0000731B 48FFC2                  	inc rdx
 10752 0000731E EBEA                    	jmp .L_lambda_simple_env_loop_003b
 10753                                  .L_lambda_simple_env_end_003b:
 10754 00007320 5B                      	pop rbx
 10755 00007321 BE00000000              	mov rsi, 0
 10756                                  .L_lambda_simple_params_loop_003b:	; copy params
 10757 00007326 4883FE01                	cmp rsi, 1
 10758 0000732A 740E                    	je .L_lambda_simple_params_end_003b
 10759 0000732C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10760 00007331 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10761 00007335 48FFC6                  	inc rsi
 10762 00007338 EBEC                    	jmp .L_lambda_simple_params_loop_003b
 10763                                  .L_lambda_simple_params_end_003b:
 10764 0000733A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10765 0000733D 4889C3                  	mov rbx, rax
 10766 00007340 58                      	pop rax
 10767 00007341 C60004                  	mov byte [rax], T_closure
 10768 00007344 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10769 00007348 48C74009[55730000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003b
 10770 00007350 E98C020000              	jmp .L_lambda_simple_end_003b
 10771                                  .L_lambda_simple_code_003b:	; lambda-simple body
 10772 00007355 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10773 0000735B 740B                    	je .L_lambda_simple_arity_check_ok_003b
 10774 0000735D FF742410                	push qword [rsp + 8 * 2]
 10775 00007361 6A01                    	push 1
 10776 00007363 E915090100              	jmp L_error_incorrect_arity_simple
 10777                                  .L_lambda_simple_arity_check_ok_003b:
 10778 00007368 C8000000                	enter 0, 0
 10779 0000736C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10780 00007371 E84E090100              	call malloc
 10781 00007376 50                      	push rax
 10782 00007377 BF08000000              	mov rdi, 8 * 1	; new rib
 10783 0000737C E843090100              	call malloc
 10784 00007381 50                      	push rax
 10785 00007382 BF18000000              	mov rdi, 8 * 3	; extended env
 10786 00007387 E838090100              	call malloc
 10787 0000738C 488B7D10                	mov rdi, ENV
 10788 00007390 BE00000000              	mov rsi, 0
 10789 00007395 BA01000000              	mov rdx, 1
 10790                                  .L_lambda_opt_env_loop_000a:	; ext_env[i + 1] <-- env[i]
 10791 0000739A 4883FE02                	cmp rsi, 2
 10792 0000739E 7410                    	je .L_lambda_opt_env_end_000a
 10793 000073A0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10794 000073A4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10795 000073A8 48FFC6                  	inc rsi
 10796 000073AB 48FFC2                  	inc rdx
 10797 000073AE EBEA                    	jmp .L_lambda_opt_env_loop_000a
 10798                                  .L_lambda_opt_env_end_000a:
 10799 000073B0 5B                      	pop rbx
 10800 000073B1 BE00000000              	mov rsi, 0
 10801                                  .L_lambda_opt_params_loop_000a:	; copy params
 10802 000073B6 4883FE01                	cmp rsi, 1
 10803 000073BA 740E                    	je .L_lambda_opt_params_end_000a
 10804 000073BC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10805 000073C1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10806 000073C5 48FFC6                  	inc rsi
 10807 000073C8 EBEC                    	jmp .L_lambda_opt_params_loop_000a
 10808                                  .L_lambda_opt_params_end_000a:
 10809 000073CA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10810 000073CD 4889C3                  	mov rbx, rax
 10811 000073D0 58                      	pop rax
 10812 000073D1 C60004                  	mov byte [rax], T_closure
 10813 000073D4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10814 000073D8 48C74009[E5730000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000a
 10815 000073E0 E9F8010000              	jmp .L_lambda_opt_end_000a
 10816                                  .L_lambda_opt_code_000a:	; lambda-opt body
 10817 000073E5 48837C241000            	cmp qword [rsp + 8 * 2], 0
 10818 000073EB 7411                    	je .L_lambda_opt_arity_check_exact_000a
 10819 000073ED 0F8FCA000000            	jg .L_lambda_opt_arity_check_more_000a
 10820 000073F3 FF742410                	push qword [rsp + 8 * 2]
 10821 000073F7 6A00                    	push 0
 10822 000073F9 E993080100              	jmp L_error_incorrect_arity_opt
 10823                                  .L_lambda_opt_arity_check_exact_000a:
 10824 000073FE 4883EC08                	sub rsp, 8
 10825 00007402 488B442408              	mov rax, qword[rsp + 8 *1]
 10826 00007407 48890424                	mov qword[rsp], rax  
 10827 0000740B 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 10828 00007410 4889442408              	mov qword[rsp + 8 * 1], rax
 10829 00007415 B801000000              	mov rax, 1
 10830 0000741A 4889442410              	mov qword[rsp + 8 *2], rax
 10831 0000741F 48B8-                   	mov rax, sob_nil
 10831 00007421 [0100000000000000] 
 10832 00007429 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 10833 0000742E C8000000                	enter 0, 0
 10834                                  	; preparing a tail-call
 10835 00007432 488B4520                	mov rax, PARAM(0)	; param s
 10836 00007436 50                      	push rax
 10837 00007437 48B8-                   	mov rax, L_constants + 2135
 10837 00007439 [5708000000000000] 
 10838 00007441 50                      	push rax
 10839 00007442 488B4510                	mov rax, ENV
 10840 00007446 488B00                  	mov rax, qword [rax + 8 * 0]
 10841 00007449 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin+
 10842 0000744C 50                      	push rax
 10843 0000744D 6A03                    	push 3	; arg count
 10844 0000744F 488B0425[6A130000]      	mov rax, qword [free_var_85]	; free var fold-left
 10845 00007457 803805                  	cmp byte [rax], T_undefined
 10846 0000745A 0F8437070100            	je L_error_fvar_undefined
 10847 00007460 803804                  	cmp byte [rax], T_closure
 10848 00007463 0F85B2070100            	jne L_error_non_closure
 10849 00007469 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10850 0000746C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10851 0000746F FF7500                  	push qword[rbp]
 10852 00007472 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10853 00007475 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10854 00007479 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10855 0000747D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10856 00007481 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10857 00007484 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10858 00007487 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10859 0000748C 4983C103                	add r9, 3 	 ;for getting to the params
 10860 00007490 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10861 00007494 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10862                                  .L_tc_recycle_frame_loop_0050:
 10863 00007497 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10864 0000749A 7410                    	je .L_tc_recycle_frame_done_0050
 10865 0000749C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10866 0000749F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10867 000074A2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10868 000074A6 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10869 000074AA EBEB                    	jmp .L_tc_recycle_frame_loop_0050
 10870                                  .L_tc_recycle_frame_done_0050:
 10871 000074AC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10872 000074AD 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10873 000074B1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10874 000074B4 C9                      	leave
 10875 000074B5 C21800                  	ret AND_KILL_FRAME(1)
 10876 000074B8 E920010000              	jmp .L_lambda_opt_end_000a	; new closure is in rax
 10877                                  .L_lambda_opt_arity_check_more_000a:
 10878 000074BD 488B442410              	mov rax, qword[rsp + 2 * 8]
 10879 000074C2 4889C7                  	mov rdi, rax
 10880 000074C5 49B9-                   	mov r9, sob_nil
 10880 000074C7 [0100000000000000] 
 10881 000074CF 4989F8                  	mov r8, rdi
 10882                                  .L_lambda_opt_stack_shrink_loop_000a:
 10883 000074D2 4983F800                	cmp r8, 0
 10884 000074D6 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_000a
 10885 000074D8 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)] 	;rbx is the top of the stack
 10886 000074DD BF11000000              	mov rdi, 1+8+8	;for pair
 10887 000074E2 E8DD070100              	call malloc	 ;to create the pair in the stack
 10888 000074E7 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
 10889 000074EA 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
 10890 000074EE 4C894809                 	mov qword[rax+1+8],r9
 10891 000074F2 4989C1                  	mov r9 , rax	 ; for the recursion 
 10892 000074F5 49FFC8                  	dec r8
 10893 000074F8 EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_000a
 10894                                  .L_lambda_opt_stack_shrink_loop_exit_000a:
 10895 000074FA 488B442410              	mov rax, qword[rsp + 2 * 8]
 10896 000074FF BF01000000              	mov rdi, 1
 10897 00007504 4829F8                  	sub rax, rdi
 10898 00007507 4889C7                  	mov rdi, rax
 10899 0000750A 486BC008                	imul rax,8
 10900 0000750E 4801C4                  	add rsp, rax
 10901 00007511 4889E0                  	mov rax, rsp
 10902 00007514 4989F8                  	mov r8, rdi
 10903 00007517 4D6BC008                	imul r8, 8
 10904 0000751B 4C29C0                  	sub rax, r8
 10905 0000751E 4989C2                  	mov r10, rax	; holds the original ret in the stack
 10906 00007521 4983C218                	add r10, 8*3
 10907 00007525 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
 10908 00007529 4C8B00                  	mov r8, qword[rax] 	;arg count = r8
 10909 0000752C 4D6BC008                	imul r8,8
 10910 00007530 4C01C0                  	add rax, r8
 10911 00007533 4C8908                  	mov qword[rax] ,r9
 10912 00007536 4983EA18                 	sub r10, 8*3
 10913 0000753A 48C744241001000000      	mov qword [rsp+2*8], 1
 10914 00007543 498B4208                	mov rax, qword[r10 + 1 * 8]
 10915 00007547 4889442408              	mov qword[rsp + 1*8] ,rax
 10916 0000754C 498B02                  	mov rax, qword[r10]
 10917 0000754F 48890424                	mov qword[rsp], rax
 10918 00007553 C8000000                	enter 0, 0
 10919                                  	; preparing a tail-call
 10920 00007557 488B4520                	mov rax, PARAM(0)	; param s
 10921 0000755B 50                      	push rax
 10922 0000755C 48B8-                   	mov rax, L_constants + 2135
 10922 0000755E [5708000000000000] 
 10923 00007566 50                      	push rax
 10924 00007567 488B4510                	mov rax, ENV
 10925 0000756B 488B00                  	mov rax, qword [rax + 8 * 0]
 10926 0000756E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin+
 10927 00007571 50                      	push rax
 10928 00007572 6A03                    	push 3	; arg count
 10929 00007574 488B0425[6A130000]      	mov rax, qword [free_var_85]	; free var fold-left
 10930 0000757C 803805                  	cmp byte [rax], T_undefined
 10931 0000757F 0F8412060100            	je L_error_fvar_undefined
 10932 00007585 803804                  	cmp byte [rax], T_closure
 10933 00007588 0F858D060100            	jne L_error_non_closure
 10934 0000758E FF7001                  	push SOB_CLOSURE_ENV(rax)
 10935 00007591 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10936 00007594 FF7500                  	push qword[rbp]
 10937 00007597 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10938 0000759A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10939 0000759E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10940 000075A2 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10941 000075A6 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10942 000075A9 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10943 000075AC 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10944 000075B1 4983C103                	add r9, 3 	 ;for getting to the params
 10945 000075B5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10946 000075B9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10947                                  .L_tc_recycle_frame_loop_004f:
 10948 000075BC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10949 000075BF 7410                    	je .L_tc_recycle_frame_done_004f
 10950 000075C1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10951 000075C4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10952 000075C7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10953 000075CB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10954 000075CF EBEB                    	jmp .L_tc_recycle_frame_loop_004f
 10955                                  .L_tc_recycle_frame_done_004f:
 10956 000075D1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10957 000075D2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10958 000075D6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10959 000075D9 C9                      	leave
 10960 000075DA C21800                  	ret AND_KILL_FRAME(1)
 10961                                  .L_lambda_opt_end_000a:	; new closure is in rax
 10962 000075DD C9                      	leave
 10963 000075DE C21800                  	ret AND_KILL_FRAME(1)
 10964                                  .L_lambda_simple_end_003b:	; new closure is in rax
 10965 000075E1 803804                  	cmp byte [rax], T_closure
 10966 000075E4 0F8531060100            	jne L_error_non_closure
 10967 000075EA FF7001                  	push SOB_CLOSURE_ENV(rax)
 10968 000075ED FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10969 000075F0 FF7500                  	push qword[rbp]
 10970 000075F3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10971 000075F6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10972 000075FA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10973 000075FE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10974 00007602 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10975 00007605 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10976 00007608 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10977 0000760D 4983C103                	add r9, 3 	 ;for getting to the params
 10978 00007611 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10979 00007615 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10980                                  .L_tc_recycle_frame_loop_0051:
 10981 00007618 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10982 0000761B 7410                    	je .L_tc_recycle_frame_done_0051
 10983 0000761D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10984 00007620 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10985 00007623 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10986 00007627 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10987 0000762B EBEB                    	jmp .L_tc_recycle_frame_loop_0051
 10988                                  .L_tc_recycle_frame_done_0051:
 10989 0000762D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10990 0000762E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10991 00007632 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10992 00007635 C9                      	leave
 10993 00007636 C21800                  	ret AND_KILL_FRAME(1)
 10994                                  .L_lambda_simple_end_0039:	; new closure is in rax
 10995 00007639 803804                  	cmp byte [rax], T_closure
 10996 0000763C 0F85D9050100            	jne L_error_non_closure
 10997 00007642 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10998 00007645 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10999 00007648 48890425[D60D0000]      	mov qword [free_var_1], rax
 11000 00007650 48B8-                   	mov rax, sob_void
 11000 00007652 [0000000000000000] 
 11001                                  
 11002 0000765A 4889C7                  	mov rdi, rax
 11003 0000765D E8B7080100              	call print_sexpr_if_not_void
 11004                                  	; preparing a non-tail-call
 11005 00007662 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11006 00007667 E858060100              	call malloc
 11007 0000766C 50                      	push rax
 11008 0000766D BF00000000              	mov rdi, 8 * 0	; new rib
 11009 00007672 E84D060100              	call malloc
 11010 00007677 50                      	push rax
 11011 00007678 BF08000000              	mov rdi, 8 * 1	; extended env
 11012 0000767D E842060100              	call malloc
 11013 00007682 488B7D10                	mov rdi, ENV
 11014 00007686 BE00000000              	mov rsi, 0
 11015 0000768B BA01000000              	mov rdx, 1
 11016                                  .L_lambda_simple_env_loop_003c:	; ext_env[i + 1] <-- env[i]
 11017 00007690 4883FE00                	cmp rsi, 0
 11018 00007694 7410                    	je .L_lambda_simple_env_end_003c
 11019 00007696 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11020 0000769A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11021 0000769E 48FFC6                  	inc rsi
 11022 000076A1 48FFC2                  	inc rdx
 11023 000076A4 EBEA                    	jmp .L_lambda_simple_env_loop_003c
 11024                                  .L_lambda_simple_env_end_003c:
 11025 000076A6 5B                      	pop rbx
 11026 000076A7 BE00000000              	mov rsi, 0
 11027                                  .L_lambda_simple_params_loop_003c:	; copy params
 11028 000076AC 4883FE00                	cmp rsi, 0
 11029 000076B0 740E                    	je .L_lambda_simple_params_end_003c
 11030 000076B2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11031 000076B7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11032 000076BB 48FFC6                  	inc rsi
 11033 000076BE EBEC                    	jmp .L_lambda_simple_params_loop_003c
 11034                                  .L_lambda_simple_params_end_003c:
 11035 000076C0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11036 000076C3 4889C3                  	mov rbx, rax
 11037 000076C6 58                      	pop rax
 11038 000076C7 C60004                  	mov byte [rax], T_closure
 11039 000076CA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11040 000076CE 48C74009[DB760000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003c
 11041 000076D6 E998000000              	jmp .L_lambda_simple_end_003c
 11042                                  .L_lambda_simple_code_003c:	; lambda-simple body
 11043 000076DB 48837C241000            	cmp qword [rsp + 8 * 2], 0
 11044 000076E1 740B                    	je .L_lambda_simple_arity_check_ok_003c
 11045 000076E3 FF742410                	push qword [rsp + 8 * 2]
 11046 000076E7 6A00                    	push 0
 11047 000076E9 E98F050100              	jmp L_error_incorrect_arity_simple
 11048                                  .L_lambda_simple_arity_check_ok_003c:
 11049 000076EE C8000000                	enter 0, 0
 11050                                  	; preparing a tail-call
 11051 000076F2 48B8-                   	mov rax, L_constants + 2187
 11051 000076F4 [8B08000000000000] 
 11052 000076FC 50                      	push rax
 11053 000076FD 48B8-                   	mov rax, L_constants + 2251
 11053 000076FF [CB08000000000000] 
 11054 00007707 50                      	push rax
 11055 00007708 6A02                    	push 2	; arg count
 11056 0000770A 488B0425[37130000]      	mov rax, qword [free_var_82]	; free var error
 11057 00007712 803805                  	cmp byte [rax], T_undefined
 11058 00007715 0F847C040100            	je L_error_fvar_undefined
 11059 0000771B 803804                  	cmp byte [rax], T_closure
 11060 0000771E 0F85F7040100            	jne L_error_non_closure
 11061 00007724 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11062 00007727 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11063 0000772A FF7500                  	push qword[rbp]
 11064 0000772D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11065 00007730 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11066 00007734 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11067 00007738 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11068 0000773C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11069 0000773F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11070 00007742 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11071 00007747 4983C103                	add r9, 3 	 ;for getting to the params
 11072 0000774B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11073 0000774F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11074                                  .L_tc_recycle_frame_loop_0052:
 11075 00007752 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11076 00007755 7410                    	je .L_tc_recycle_frame_done_0052
 11077 00007757 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11078 0000775A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11079 0000775D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11080 00007761 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11081 00007765 EBEB                    	jmp .L_tc_recycle_frame_loop_0052
 11082                                  .L_tc_recycle_frame_done_0052:
 11083 00007767 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11084 00007768 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11085 0000776C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11086 0000776F C9                      	leave
 11087 00007770 C21000                  	ret AND_KILL_FRAME(0)
 11088                                  .L_lambda_simple_end_003c:	; new closure is in rax
 11089 00007773 50                      	push rax
 11090 00007774 6A01                    	push 1	; arg count
 11091 00007776 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11092 0000777B E844050100              	call malloc
 11093 00007780 50                      	push rax
 11094 00007781 BF00000000              	mov rdi, 8 * 0	; new rib
 11095 00007786 E839050100              	call malloc
 11096 0000778B 50                      	push rax
 11097 0000778C BF08000000              	mov rdi, 8 * 1	; extended env
 11098 00007791 E82E050100              	call malloc
 11099 00007796 488B7D10                	mov rdi, ENV
 11100 0000779A BE00000000              	mov rsi, 0
 11101 0000779F BA01000000              	mov rdx, 1
 11102                                  .L_lambda_simple_env_loop_003d:	; ext_env[i + 1] <-- env[i]
 11103 000077A4 4883FE00                	cmp rsi, 0
 11104 000077A8 7410                    	je .L_lambda_simple_env_end_003d
 11105 000077AA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11106 000077AE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11107 000077B2 48FFC6                  	inc rsi
 11108 000077B5 48FFC2                  	inc rdx
 11109 000077B8 EBEA                    	jmp .L_lambda_simple_env_loop_003d
 11110                                  .L_lambda_simple_env_end_003d:
 11111 000077BA 5B                      	pop rbx
 11112 000077BB BE00000000              	mov rsi, 0
 11113                                  .L_lambda_simple_params_loop_003d:	; copy params
 11114 000077C0 4883FE00                	cmp rsi, 0
 11115 000077C4 740E                    	je .L_lambda_simple_params_end_003d
 11116 000077C6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11117 000077CB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11118 000077CF 48FFC6                  	inc rsi
 11119 000077D2 EBEC                    	jmp .L_lambda_simple_params_loop_003d
 11120                                  .L_lambda_simple_params_end_003d:
 11121 000077D4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11122 000077D7 4889C3                  	mov rbx, rax
 11123 000077DA 58                      	pop rax
 11124 000077DB C60004                  	mov byte [rax], T_closure
 11125 000077DE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11126 000077E2 48C74009[EF770000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003d
 11127 000077EA E97A100000              	jmp .L_lambda_simple_end_003d
 11128                                  .L_lambda_simple_code_003d:	; lambda-simple body
 11129 000077EF 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11130 000077F5 740B                    	je .L_lambda_simple_arity_check_ok_003d
 11131 000077F7 FF742410                	push qword [rsp + 8 * 2]
 11132 000077FB 6A01                    	push 1
 11133 000077FD E97B040100              	jmp L_error_incorrect_arity_simple
 11134                                  .L_lambda_simple_arity_check_ok_003d:
 11135 00007802 C8000000                	enter 0, 0
 11136                                  	; preparing a tail-call
 11137 00007806 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11138 0000780B E8B4040100              	call malloc
 11139 00007810 50                      	push rax
 11140 00007811 BF08000000              	mov rdi, 8 * 1	; new rib
 11141 00007816 E8A9040100              	call malloc
 11142 0000781B 50                      	push rax
 11143 0000781C BF10000000              	mov rdi, 8 * 2	; extended env
 11144 00007821 E89E040100              	call malloc
 11145 00007826 488B7D10                	mov rdi, ENV
 11146 0000782A BE00000000              	mov rsi, 0
 11147 0000782F BA01000000              	mov rdx, 1
 11148                                  .L_lambda_simple_env_loop_003e:	; ext_env[i + 1] <-- env[i]
 11149 00007834 4883FE01                	cmp rsi, 1
 11150 00007838 7410                    	je .L_lambda_simple_env_end_003e
 11151 0000783A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11152 0000783E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11153 00007842 48FFC6                  	inc rsi
 11154 00007845 48FFC2                  	inc rdx
 11155 00007848 EBEA                    	jmp .L_lambda_simple_env_loop_003e
 11156                                  .L_lambda_simple_env_end_003e:
 11157 0000784A 5B                      	pop rbx
 11158 0000784B BE00000000              	mov rsi, 0
 11159                                  .L_lambda_simple_params_loop_003e:	; copy params
 11160 00007850 4883FE01                	cmp rsi, 1
 11161 00007854 740E                    	je .L_lambda_simple_params_end_003e
 11162 00007856 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11163 0000785B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11164 0000785F 48FFC6                  	inc rsi
 11165 00007862 EBEC                    	jmp .L_lambda_simple_params_loop_003e
 11166                                  .L_lambda_simple_params_end_003e:
 11167 00007864 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11168 00007867 4889C3                  	mov rbx, rax
 11169 0000786A 58                      	pop rax
 11170 0000786B C60004                  	mov byte [rax], T_closure
 11171 0000786E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11172 00007872 48C74009[7F780000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003e
 11173 0000787A E9EE080000              	jmp .L_lambda_simple_end_003e
 11174                                  .L_lambda_simple_code_003e:	; lambda-simple body
 11175 0000787F 48837C241002            	cmp qword [rsp + 8 * 2], 2
 11176 00007885 740B                    	je .L_lambda_simple_arity_check_ok_003e
 11177 00007887 FF742410                	push qword [rsp + 8 * 2]
 11178 0000788B 6A02                    	push 2
 11179 0000788D E9EB030100              	jmp L_error_incorrect_arity_simple
 11180                                  .L_lambda_simple_arity_check_ok_003e:
 11181 00007892 C8000000                	enter 0, 0
 11182                                  	; preparing a non-tail-call
 11183 00007896 488B4520                	mov rax, PARAM(0)	; param a
 11184 0000789A 50                      	push rax
 11185 0000789B 6A01                    	push 1	; arg count
 11186 0000789D 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 11187 000078A5 803805                  	cmp byte [rax], T_undefined
 11188 000078A8 0F84E9020100            	je L_error_fvar_undefined
 11189 000078AE 803804                  	cmp byte [rax], T_closure
 11190 000078B1 0F8564030100            	jne L_error_non_closure
 11191 000078B7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11192 000078BA FF5009                  	call SOB_CLOSURE_CODE(rax)
 11193 000078BD 483D[02000000]          	cmp rax, sob_boolean_false
 11194 000078C3 0F849F020000            	je .L_if_else_002e
 11195                                  	; preparing a non-tail-call
 11196 000078C9 488B4528                	mov rax, PARAM(1)	; param b
 11197 000078CD 50                      	push rax
 11198 000078CE 6A01                    	push 1	; arg count
 11199 000078D0 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 11200 000078D8 803805                  	cmp byte [rax], T_undefined
 11201 000078DB 0F84B6020100            	je L_error_fvar_undefined
 11202 000078E1 803804                  	cmp byte [rax], T_closure
 11203 000078E4 0F8531030100            	jne L_error_non_closure
 11204 000078EA FF7001                  	push SOB_CLOSURE_ENV(rax)
 11205 000078ED FF5009                  	call SOB_CLOSURE_CODE(rax)
 11206 000078F0 483D[02000000]          	cmp rax, sob_boolean_false
 11207 000078F6 7476                    	je .L_if_else_0025
 11208                                  	; preparing a tail-call
 11209 000078F8 488B4528                	mov rax, PARAM(1)	; param b
 11210 000078FC 50                      	push rax
 11211 000078FD 488B4520                	mov rax, PARAM(0)	; param a
 11212 00007901 50                      	push rax
 11213 00007902 6A02                    	push 2	; arg count
 11214 00007904 488B0425[900F0000]      	mov rax, qword [free_var_27]	; free var __bin-sub-zz
 11215 0000790C 803805                  	cmp byte [rax], T_undefined
 11216 0000790F 0F8482020100            	je L_error_fvar_undefined
 11217 00007915 803804                  	cmp byte [rax], T_closure
 11218 00007918 0F85FD020100            	jne L_error_non_closure
 11219 0000791E FF7001                  	push SOB_CLOSURE_ENV(rax)
 11220 00007921 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11221 00007924 FF7500                  	push qword[rbp]
 11222 00007927 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11223 0000792A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11224 0000792E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11225 00007932 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11226 00007936 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11227 00007939 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11228 0000793C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11229 00007941 4983C103                	add r9, 3 	 ;for getting to the params
 11230 00007945 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11231 00007949 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11232                                  .L_tc_recycle_frame_loop_0053:
 11233 0000794C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11234 0000794F 7410                    	je .L_tc_recycle_frame_done_0053
 11235 00007951 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11236 00007954 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11237 00007957 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11238 0000795B 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11239 0000795F EBEB                    	jmp .L_tc_recycle_frame_loop_0053
 11240                                  .L_tc_recycle_frame_done_0053:
 11241 00007961 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11242 00007962 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11243 00007966 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11244 00007969 E9F5010000              	jmp .L_if_end_0025
 11245                                  .L_if_else_0025:
 11246                                  	; preparing a non-tail-call
 11247 0000796E 488B4528                	mov rax, PARAM(1)	; param b
 11248 00007972 50                      	push rax
 11249 00007973 6A01                    	push 1	; arg count
 11250 00007975 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 11251 0000797D 803805                  	cmp byte [rax], T_undefined
 11252 00007980 0F8411020100            	je L_error_fvar_undefined
 11253 00007986 803804                  	cmp byte [rax], T_closure
 11254 00007989 0F858C020100            	jne L_error_non_closure
 11255 0000798F FF7001                  	push SOB_CLOSURE_ENV(rax)
 11256 00007992 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11257 00007995 483D[02000000]          	cmp rax, sob_boolean_false
 11258 0000799B 0F8499000000            	je .L_if_else_0024
 11259                                  	; preparing a tail-call
 11260 000079A1 488B4528                	mov rax, PARAM(1)	; param b
 11261 000079A5 50                      	push rax
 11262                                  	; preparing a non-tail-call
 11263 000079A6 488B4520                	mov rax, PARAM(0)	; param a
 11264 000079AA 50                      	push rax
 11265 000079AB 6A01                    	push 1	; arg count
 11266 000079AD 488B0425[B20F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 11267 000079B5 803805                  	cmp byte [rax], T_undefined
 11268 000079B8 0F84D9010100            	je L_error_fvar_undefined
 11269 000079BE 803804                  	cmp byte [rax], T_closure
 11270 000079C1 0F8554020100            	jne L_error_non_closure
 11271 000079C7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11272 000079CA FF5009                  	call SOB_CLOSURE_CODE(rax)
 11273 000079CD 50                      	push rax
 11274 000079CE 6A02                    	push 2	; arg count
 11275 000079D0 488B0425[6E0F0000]      	mov rax, qword [free_var_25]	; free var __bin-sub-qq
 11276 000079D8 803805                  	cmp byte [rax], T_undefined
 11277 000079DB 0F84B6010100            	je L_error_fvar_undefined
 11278 000079E1 803804                  	cmp byte [rax], T_closure
 11279 000079E4 0F8531020100            	jne L_error_non_closure
 11280 000079EA FF7001                  	push SOB_CLOSURE_ENV(rax)
 11281 000079ED FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11282 000079F0 FF7500                  	push qword[rbp]
 11283 000079F3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11284 000079F6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11285 000079FA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11286 000079FE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11287 00007A02 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11288 00007A05 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11289 00007A08 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11290 00007A0D 4983C103                	add r9, 3 	 ;for getting to the params
 11291 00007A11 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11292 00007A15 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11293                                  .L_tc_recycle_frame_loop_0054:
 11294 00007A18 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11295 00007A1B 7410                    	je .L_tc_recycle_frame_done_0054
 11296 00007A1D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11297 00007A20 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11298 00007A23 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11299 00007A27 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11300 00007A2B EBEB                    	jmp .L_tc_recycle_frame_loop_0054
 11301                                  .L_tc_recycle_frame_done_0054:
 11302 00007A2D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11303 00007A2E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11304 00007A32 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11305 00007A35 E929010000              	jmp .L_if_end_0024
 11306                                  .L_if_else_0024:
 11307                                  	; preparing a non-tail-call
 11308 00007A3A 488B4528                	mov rax, PARAM(1)	; param b
 11309 00007A3E 50                      	push rax
 11310 00007A3F 6A01                    	push 1	; arg count
 11311 00007A41 488B0425[68150000]      	mov rax, qword [free_var_115]	; free var real
 11312 00007A49 803805                  	cmp byte [rax], T_undefined
 11313 00007A4C 0F8445010100            	je L_error_fvar_undefined
 11314 00007A52 803804                  	cmp byte [rax], T_closure
 11315 00007A55 0F85C0010100            	jne L_error_non_closure
 11316 00007A5B FF7001                  	push SOB_CLOSURE_ENV(rax)
 11317 00007A5E FF5009                  	call SOB_CLOSURE_CODE(rax)
 11318 00007A61 483D[02000000]          	cmp rax, sob_boolean_false
 11319 00007A67 0F8496000000            	je .L_if_else_0023
 11320                                  	; preparing a tail-call
 11321 00007A6D 488B4528                	mov rax, PARAM(1)	; param b
 11322 00007A71 50                      	push rax
 11323                                  	; preparing a non-tail-call
 11324 00007A72 488B4520                	mov rax, PARAM(0)	; param a
 11325 00007A76 50                      	push rax
 11326 00007A77 6A01                    	push 1	; arg count
 11327 00007A79 488B0425[BF130000]      	mov rax, qword [free_var_90]	; free var integer->real
 11328 00007A81 803805                  	cmp byte [rax], T_undefined
 11329 00007A84 0F840D010100            	je L_error_fvar_undefined
 11330 00007A8A 803804                  	cmp byte [rax], T_closure
 11331 00007A8D 0F8588010100            	jne L_error_non_closure
 11332 00007A93 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11333 00007A96 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11334 00007A99 50                      	push rax
 11335 00007A9A 6A02                    	push 2	; arg count
 11336 00007A9C 488B0425[7F0F0000]      	mov rax, qword [free_var_26]	; free var __bin-sub-rr
 11337 00007AA4 803805                  	cmp byte [rax], T_undefined
 11338 00007AA7 0F84EA000100            	je L_error_fvar_undefined
 11339 00007AAD 803804                  	cmp byte [rax], T_closure
 11340 00007AB0 0F8565010100            	jne L_error_non_closure
 11341 00007AB6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11342 00007AB9 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11343 00007ABC FF7500                  	push qword[rbp]
 11344 00007ABF 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11345 00007AC2 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11346 00007AC6 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11347 00007ACA 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11348 00007ACE 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11349 00007AD1 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11350 00007AD4 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11351 00007AD9 4983C103                	add r9, 3 	 ;for getting to the params
 11352 00007ADD 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11353 00007AE1 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11354                                  .L_tc_recycle_frame_loop_0055:
 11355 00007AE4 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11356 00007AE7 7410                    	je .L_tc_recycle_frame_done_0055
 11357 00007AE9 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11358 00007AEC 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11359 00007AEF 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11360 00007AF3 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11361 00007AF7 EBEB                    	jmp .L_tc_recycle_frame_loop_0055
 11362                                  .L_tc_recycle_frame_done_0055:
 11363 00007AF9 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11364 00007AFA 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11365 00007AFE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11366 00007B01 EB60                    	jmp .L_if_end_0023
 11367                                  .L_if_else_0023:
 11368                                  	; preparing a tail-call
 11369 00007B03 6A00                    	push 0	; arg count
 11370 00007B05 488B4510                	mov rax, ENV
 11371 00007B09 488B00                  	mov rax, qword [rax + 8 * 0]
 11372 00007B0C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 11373 00007B0F 803804                  	cmp byte [rax], T_closure
 11374 00007B12 0F8503010100            	jne L_error_non_closure
 11375 00007B18 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11376 00007B1B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11377 00007B1E FF7500                  	push qword[rbp]
 11378 00007B21 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11379 00007B24 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11380 00007B28 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11381 00007B2C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11382 00007B30 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11383 00007B33 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11384 00007B36 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11385 00007B3B 4983C103                	add r9, 3 	 ;for getting to the params
 11386 00007B3F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11387 00007B43 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11388                                  .L_tc_recycle_frame_loop_0056:
 11389 00007B46 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11390 00007B49 7410                    	je .L_tc_recycle_frame_done_0056
 11391 00007B4B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11392 00007B4E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11393 00007B51 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11394 00007B55 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11395 00007B59 EBEB                    	jmp .L_tc_recycle_frame_loop_0056
 11396                                  .L_tc_recycle_frame_done_0056:
 11397 00007B5B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11398 00007B5C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11399 00007B60 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11400                                  .L_if_end_0023:
 11401                                  .L_if_end_0024:
 11402                                  .L_if_end_0025:
 11403 00007B63 E901060000              	jmp .L_if_end_002e
 11404                                  .L_if_else_002e:
 11405                                  	; preparing a non-tail-call
 11406 00007B68 488B4520                	mov rax, PARAM(0)	; param a
 11407 00007B6C 50                      	push rax
 11408 00007B6D 6A01                    	push 1	; arg count
 11409 00007B6F 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 11410 00007B77 803805                  	cmp byte [rax], T_undefined
 11411 00007B7A 0F8417000100            	je L_error_fvar_undefined
 11412 00007B80 803804                  	cmp byte [rax], T_closure
 11413 00007B83 0F8592000100            	jne L_error_non_closure
 11414 00007B89 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11415 00007B8C FF5009                  	call SOB_CLOSURE_CODE(rax)
 11416 00007B8F 483D[02000000]          	cmp rax, sob_boolean_false
 11417 00007B95 0F849F020000            	je .L_if_else_002d
 11418                                  	; preparing a non-tail-call
 11419 00007B9B 488B4528                	mov rax, PARAM(1)	; param b
 11420 00007B9F 50                      	push rax
 11421 00007BA0 6A01                    	push 1	; arg count
 11422 00007BA2 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 11423 00007BAA 803805                  	cmp byte [rax], T_undefined
 11424 00007BAD 0F84E4FF0000            	je L_error_fvar_undefined
 11425 00007BB3 803804                  	cmp byte [rax], T_closure
 11426 00007BB6 0F855F000100            	jne L_error_non_closure
 11427 00007BBC FF7001                  	push SOB_CLOSURE_ENV(rax)
 11428 00007BBF FF5009                  	call SOB_CLOSURE_CODE(rax)
 11429 00007BC2 483D[02000000]          	cmp rax, sob_boolean_false
 11430 00007BC8 0F8499000000            	je .L_if_else_0028
 11431                                  	; preparing a tail-call
 11432                                  	; preparing a non-tail-call
 11433 00007BCE 488B4528                	mov rax, PARAM(1)	; param b
 11434 00007BD2 50                      	push rax
 11435 00007BD3 6A01                    	push 1	; arg count
 11436 00007BD5 488B0425[B20F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 11437 00007BDD 803805                  	cmp byte [rax], T_undefined
 11438 00007BE0 0F84B1FF0000            	je L_error_fvar_undefined
 11439 00007BE6 803804                  	cmp byte [rax], T_closure
 11440 00007BE9 0F852C000100            	jne L_error_non_closure
 11441 00007BEF FF7001                  	push SOB_CLOSURE_ENV(rax)
 11442 00007BF2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11443 00007BF5 50                      	push rax
 11444 00007BF6 488B4520                	mov rax, PARAM(0)	; param a
 11445 00007BFA 50                      	push rax
 11446 00007BFB 6A02                    	push 2	; arg count
 11447 00007BFD 488B0425[6E0F0000]      	mov rax, qword [free_var_25]	; free var __bin-sub-qq
 11448 00007C05 803805                  	cmp byte [rax], T_undefined
 11449 00007C08 0F8489FF0000            	je L_error_fvar_undefined
 11450 00007C0E 803804                  	cmp byte [rax], T_closure
 11451 00007C11 0F8504000100            	jne L_error_non_closure
 11452 00007C17 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11453 00007C1A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11454 00007C1D FF7500                  	push qword[rbp]
 11455 00007C20 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11456 00007C23 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11457 00007C27 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11458 00007C2B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11459 00007C2F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11460 00007C32 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11461 00007C35 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11462 00007C3A 4983C103                	add r9, 3 	 ;for getting to the params
 11463 00007C3E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11464 00007C42 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11465                                  .L_tc_recycle_frame_loop_0057:
 11466 00007C45 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11467 00007C48 7410                    	je .L_tc_recycle_frame_done_0057
 11468 00007C4A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11469 00007C4D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11470 00007C50 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11471 00007C54 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11472 00007C58 EBEB                    	jmp .L_tc_recycle_frame_loop_0057
 11473                                  .L_tc_recycle_frame_done_0057:
 11474 00007C5A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11475 00007C5B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11476 00007C5F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11477 00007C62 E9CE010000              	jmp .L_if_end_0028
 11478                                  .L_if_else_0028:
 11479                                  	; preparing a non-tail-call
 11480 00007C67 488B4528                	mov rax, PARAM(1)	; param b
 11481 00007C6B 50                      	push rax
 11482 00007C6C 6A01                    	push 1	; arg count
 11483 00007C6E 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 11484 00007C76 803805                  	cmp byte [rax], T_undefined
 11485 00007C79 0F8418FF0000            	je L_error_fvar_undefined
 11486 00007C7F 803804                  	cmp byte [rax], T_closure
 11487 00007C82 0F8593FF0000            	jne L_error_non_closure
 11488 00007C88 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11489 00007C8B FF5009                  	call SOB_CLOSURE_CODE(rax)
 11490 00007C8E 483D[02000000]          	cmp rax, sob_boolean_false
 11491 00007C94 7476                    	je .L_if_else_0027
 11492                                  	; preparing a tail-call
 11493 00007C96 488B4528                	mov rax, PARAM(1)	; param b
 11494 00007C9A 50                      	push rax
 11495 00007C9B 488B4520                	mov rax, PARAM(0)	; param a
 11496 00007C9F 50                      	push rax
 11497 00007CA0 6A02                    	push 2	; arg count
 11498 00007CA2 488B0425[6E0F0000]      	mov rax, qword [free_var_25]	; free var __bin-sub-qq
 11499 00007CAA 803805                  	cmp byte [rax], T_undefined
 11500 00007CAD 0F84E4FE0000            	je L_error_fvar_undefined
 11501 00007CB3 803804                  	cmp byte [rax], T_closure
 11502 00007CB6 0F855FFF0000            	jne L_error_non_closure
 11503 00007CBC FF7001                  	push SOB_CLOSURE_ENV(rax)
 11504 00007CBF FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11505 00007CC2 FF7500                  	push qword[rbp]
 11506 00007CC5 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11507 00007CC8 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11508 00007CCC 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11509 00007CD0 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11510 00007CD4 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11511 00007CD7 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11512 00007CDA 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11513 00007CDF 4983C103                	add r9, 3 	 ;for getting to the params
 11514 00007CE3 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11515 00007CE7 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11516                                  .L_tc_recycle_frame_loop_0058:
 11517 00007CEA 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11518 00007CED 7410                    	je .L_tc_recycle_frame_done_0058
 11519 00007CEF 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11520 00007CF2 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11521 00007CF5 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11522 00007CF9 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11523 00007CFD EBEB                    	jmp .L_tc_recycle_frame_loop_0058
 11524                                  .L_tc_recycle_frame_done_0058:
 11525 00007CFF 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11526 00007D00 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11527 00007D04 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11528 00007D07 E929010000              	jmp .L_if_end_0027
 11529                                  .L_if_else_0027:
 11530                                  	; preparing a non-tail-call
 11531 00007D0C 488B4528                	mov rax, PARAM(1)	; param b
 11532 00007D10 50                      	push rax
 11533 00007D11 6A01                    	push 1	; arg count
 11534 00007D13 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 11535 00007D1B 803805                  	cmp byte [rax], T_undefined
 11536 00007D1E 0F8473FE0000            	je L_error_fvar_undefined
 11537 00007D24 803804                  	cmp byte [rax], T_closure
 11538 00007D27 0F85EEFE0000            	jne L_error_non_closure
 11539 00007D2D FF7001                  	push SOB_CLOSURE_ENV(rax)
 11540 00007D30 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11541 00007D33 483D[02000000]          	cmp rax, sob_boolean_false
 11542 00007D39 0F8496000000            	je .L_if_else_0026
 11543                                  	; preparing a tail-call
 11544 00007D3F 488B4528                	mov rax, PARAM(1)	; param b
 11545 00007D43 50                      	push rax
 11546                                  	; preparing a non-tail-call
 11547 00007D44 488B4520                	mov rax, PARAM(0)	; param a
 11548 00007D48 50                      	push rax
 11549 00007D49 6A01                    	push 1	; arg count
 11550 00007D4B 488B0425[8C130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 11551 00007D53 803805                  	cmp byte [rax], T_undefined
 11552 00007D56 0F843BFE0000            	je L_error_fvar_undefined
 11553 00007D5C 803804                  	cmp byte [rax], T_closure
 11554 00007D5F 0F85B6FE0000            	jne L_error_non_closure
 11555 00007D65 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11556 00007D68 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11557 00007D6B 50                      	push rax
 11558 00007D6C 6A02                    	push 2	; arg count
 11559 00007D6E 488B0425[7F0F0000]      	mov rax, qword [free_var_26]	; free var __bin-sub-rr
 11560 00007D76 803805                  	cmp byte [rax], T_undefined
 11561 00007D79 0F8418FE0000            	je L_error_fvar_undefined
 11562 00007D7F 803804                  	cmp byte [rax], T_closure
 11563 00007D82 0F8593FE0000            	jne L_error_non_closure
 11564 00007D88 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11565 00007D8B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11566 00007D8E FF7500                  	push qword[rbp]
 11567 00007D91 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11568 00007D94 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11569 00007D98 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11570 00007D9C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11571 00007DA0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11572 00007DA3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11573 00007DA6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11574 00007DAB 4983C103                	add r9, 3 	 ;for getting to the params
 11575 00007DAF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11576 00007DB3 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11577                                  .L_tc_recycle_frame_loop_0059:
 11578 00007DB6 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11579 00007DB9 7410                    	je .L_tc_recycle_frame_done_0059
 11580 00007DBB 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11581 00007DBE 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11582 00007DC1 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11583 00007DC5 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11584 00007DC9 EBEB                    	jmp .L_tc_recycle_frame_loop_0059
 11585                                  .L_tc_recycle_frame_done_0059:
 11586 00007DCB 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11587 00007DCC 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11588 00007DD0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11589 00007DD3 EB60                    	jmp .L_if_end_0026
 11590                                  .L_if_else_0026:
 11591                                  	; preparing a tail-call
 11592 00007DD5 6A00                    	push 0	; arg count
 11593 00007DD7 488B4510                	mov rax, ENV
 11594 00007DDB 488B00                  	mov rax, qword [rax + 8 * 0]
 11595 00007DDE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 11596 00007DE1 803804                  	cmp byte [rax], T_closure
 11597 00007DE4 0F8531FE0000            	jne L_error_non_closure
 11598 00007DEA FF7001                  	push SOB_CLOSURE_ENV(rax)
 11599 00007DED FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11600 00007DF0 FF7500                  	push qword[rbp]
 11601 00007DF3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11602 00007DF6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11603 00007DFA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11604 00007DFE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11605 00007E02 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11606 00007E05 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11607 00007E08 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11608 00007E0D 4983C103                	add r9, 3 	 ;for getting to the params
 11609 00007E11 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11610 00007E15 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11611                                  .L_tc_recycle_frame_loop_005a:
 11612 00007E18 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11613 00007E1B 7410                    	je .L_tc_recycle_frame_done_005a
 11614 00007E1D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11615 00007E20 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11616 00007E23 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11617 00007E27 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11618 00007E2B EBEB                    	jmp .L_tc_recycle_frame_loop_005a
 11619                                  .L_tc_recycle_frame_done_005a:
 11620 00007E2D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11621 00007E2E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11622 00007E32 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11623                                  .L_if_end_0026:
 11624                                  .L_if_end_0027:
 11625                                  .L_if_end_0028:
 11626 00007E35 E92F030000              	jmp .L_if_end_002d
 11627                                  .L_if_else_002d:
 11628                                  	; preparing a non-tail-call
 11629 00007E3A 488B4520                	mov rax, PARAM(0)	; param a
 11630 00007E3E 50                      	push rax
 11631 00007E3F 6A01                    	push 1	; arg count
 11632 00007E41 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 11633 00007E49 803805                  	cmp byte [rax], T_undefined
 11634 00007E4C 0F8445FD0000            	je L_error_fvar_undefined
 11635 00007E52 803804                  	cmp byte [rax], T_closure
 11636 00007E55 0F85C0FD0000            	jne L_error_non_closure
 11637 00007E5B FF7001                  	push SOB_CLOSURE_ENV(rax)
 11638 00007E5E FF5009                  	call SOB_CLOSURE_CODE(rax)
 11639 00007E61 483D[02000000]          	cmp rax, sob_boolean_false
 11640 00007E67 0F849C020000            	je .L_if_else_002c
 11641                                  	; preparing a non-tail-call
 11642 00007E6D 488B4528                	mov rax, PARAM(1)	; param b
 11643 00007E71 50                      	push rax
 11644 00007E72 6A01                    	push 1	; arg count
 11645 00007E74 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 11646 00007E7C 803805                  	cmp byte [rax], T_undefined
 11647 00007E7F 0F8412FD0000            	je L_error_fvar_undefined
 11648 00007E85 803804                  	cmp byte [rax], T_closure
 11649 00007E88 0F858DFD0000            	jne L_error_non_closure
 11650 00007E8E FF7001                  	push SOB_CLOSURE_ENV(rax)
 11651 00007E91 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11652 00007E94 483D[02000000]          	cmp rax, sob_boolean_false
 11653 00007E9A 0F8499000000            	je .L_if_else_002b
 11654                                  	; preparing a tail-call
 11655                                  	; preparing a non-tail-call
 11656 00007EA0 488B4528                	mov rax, PARAM(1)	; param b
 11657 00007EA4 50                      	push rax
 11658 00007EA5 6A01                    	push 1	; arg count
 11659 00007EA7 488B0425[BF130000]      	mov rax, qword [free_var_90]	; free var integer->real
 11660 00007EAF 803805                  	cmp byte [rax], T_undefined
 11661 00007EB2 0F84DFFC0000            	je L_error_fvar_undefined
 11662 00007EB8 803804                  	cmp byte [rax], T_closure
 11663 00007EBB 0F855AFD0000            	jne L_error_non_closure
 11664 00007EC1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11665 00007EC4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11666 00007EC7 50                      	push rax
 11667 00007EC8 488B4520                	mov rax, PARAM(0)	; param a
 11668 00007ECC 50                      	push rax
 11669 00007ECD 6A02                    	push 2	; arg count
 11670 00007ECF 488B0425[7F0F0000]      	mov rax, qword [free_var_26]	; free var __bin-sub-rr
 11671 00007ED7 803805                  	cmp byte [rax], T_undefined
 11672 00007EDA 0F84B7FC0000            	je L_error_fvar_undefined
 11673 00007EE0 803804                  	cmp byte [rax], T_closure
 11674 00007EE3 0F8532FD0000            	jne L_error_non_closure
 11675 00007EE9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11676 00007EEC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11677 00007EEF FF7500                  	push qword[rbp]
 11678 00007EF2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11679 00007EF5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11680 00007EF9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11681 00007EFD 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11682 00007F01 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11683 00007F04 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11684 00007F07 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11685 00007F0C 4983C103                	add r9, 3 	 ;for getting to the params
 11686 00007F10 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11687 00007F14 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11688                                  .L_tc_recycle_frame_loop_005b:
 11689 00007F17 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11690 00007F1A 7410                    	je .L_tc_recycle_frame_done_005b
 11691 00007F1C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11692 00007F1F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11693 00007F22 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11694 00007F26 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11695 00007F2A EBEB                    	jmp .L_tc_recycle_frame_loop_005b
 11696                                  .L_tc_recycle_frame_done_005b:
 11697 00007F2C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11698 00007F2D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11699 00007F31 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11700 00007F34 E9CE010000              	jmp .L_if_end_002b
 11701                                  .L_if_else_002b:
 11702                                  	; preparing a non-tail-call
 11703 00007F39 488B4528                	mov rax, PARAM(1)	; param b
 11704 00007F3D 50                      	push rax
 11705 00007F3E 6A01                    	push 1	; arg count
 11706 00007F40 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 11707 00007F48 803805                  	cmp byte [rax], T_undefined
 11708 00007F4B 0F8446FC0000            	je L_error_fvar_undefined
 11709 00007F51 803804                  	cmp byte [rax], T_closure
 11710 00007F54 0F85C1FC0000            	jne L_error_non_closure
 11711 00007F5A FF7001                  	push SOB_CLOSURE_ENV(rax)
 11712 00007F5D FF5009                  	call SOB_CLOSURE_CODE(rax)
 11713 00007F60 483D[02000000]          	cmp rax, sob_boolean_false
 11714 00007F66 0F8499000000            	je .L_if_else_002a
 11715                                  	; preparing a tail-call
 11716                                  	; preparing a non-tail-call
 11717 00007F6C 488B4528                	mov rax, PARAM(1)	; param b
 11718 00007F70 50                      	push rax
 11719 00007F71 6A01                    	push 1	; arg count
 11720 00007F73 488B0425[8C130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 11721 00007F7B 803805                  	cmp byte [rax], T_undefined
 11722 00007F7E 0F8413FC0000            	je L_error_fvar_undefined
 11723 00007F84 803804                  	cmp byte [rax], T_closure
 11724 00007F87 0F858EFC0000            	jne L_error_non_closure
 11725 00007F8D FF7001                  	push SOB_CLOSURE_ENV(rax)
 11726 00007F90 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11727 00007F93 50                      	push rax
 11728 00007F94 488B4520                	mov rax, PARAM(0)	; param a
 11729 00007F98 50                      	push rax
 11730 00007F99 6A02                    	push 2	; arg count
 11731 00007F9B 488B0425[7F0F0000]      	mov rax, qword [free_var_26]	; free var __bin-sub-rr
 11732 00007FA3 803805                  	cmp byte [rax], T_undefined
 11733 00007FA6 0F84EBFB0000            	je L_error_fvar_undefined
 11734 00007FAC 803804                  	cmp byte [rax], T_closure
 11735 00007FAF 0F8566FC0000            	jne L_error_non_closure
 11736 00007FB5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11737 00007FB8 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11738 00007FBB FF7500                  	push qword[rbp]
 11739 00007FBE 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11740 00007FC1 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11741 00007FC5 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11742 00007FC9 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11743 00007FCD 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11744 00007FD0 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11745 00007FD3 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11746 00007FD8 4983C103                	add r9, 3 	 ;for getting to the params
 11747 00007FDC 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11748 00007FE0 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11749                                  .L_tc_recycle_frame_loop_005c:
 11750 00007FE3 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11751 00007FE6 7410                    	je .L_tc_recycle_frame_done_005c
 11752 00007FE8 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11753 00007FEB 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11754 00007FEE 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11755 00007FF2 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11756 00007FF6 EBEB                    	jmp .L_tc_recycle_frame_loop_005c
 11757                                  .L_tc_recycle_frame_done_005c:
 11758 00007FF8 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11759 00007FF9 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11760 00007FFD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11761 00008000 E902010000              	jmp .L_if_end_002a
 11762                                  .L_if_else_002a:
 11763                                  	; preparing a non-tail-call
 11764 00008005 488B4528                	mov rax, PARAM(1)	; param b
 11765 00008009 50                      	push rax
 11766 0000800A 6A01                    	push 1	; arg count
 11767 0000800C 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 11768 00008014 803805                  	cmp byte [rax], T_undefined
 11769 00008017 0F847AFB0000            	je L_error_fvar_undefined
 11770 0000801D 803804                  	cmp byte [rax], T_closure
 11771 00008020 0F85F5FB0000            	jne L_error_non_closure
 11772 00008026 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11773 00008029 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11774 0000802C 483D[02000000]          	cmp rax, sob_boolean_false
 11775 00008032 7473                    	je .L_if_else_0029
 11776                                  	; preparing a tail-call
 11777 00008034 488B4528                	mov rax, PARAM(1)	; param b
 11778 00008038 50                      	push rax
 11779 00008039 488B4520                	mov rax, PARAM(0)	; param a
 11780 0000803D 50                      	push rax
 11781 0000803E 6A02                    	push 2	; arg count
 11782 00008040 488B0425[7F0F0000]      	mov rax, qword [free_var_26]	; free var __bin-sub-rr
 11783 00008048 803805                  	cmp byte [rax], T_undefined
 11784 0000804B 0F8446FB0000            	je L_error_fvar_undefined
 11785 00008051 803804                  	cmp byte [rax], T_closure
 11786 00008054 0F85C1FB0000            	jne L_error_non_closure
 11787 0000805A FF7001                  	push SOB_CLOSURE_ENV(rax)
 11788 0000805D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11789 00008060 FF7500                  	push qword[rbp]
 11790 00008063 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11791 00008066 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11792 0000806A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11793 0000806E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11794 00008072 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11795 00008075 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11796 00008078 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11797 0000807D 4983C103                	add r9, 3 	 ;for getting to the params
 11798 00008081 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11799 00008085 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11800                                  .L_tc_recycle_frame_loop_005d:
 11801 00008088 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11802 0000808B 7410                    	je .L_tc_recycle_frame_done_005d
 11803 0000808D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11804 00008090 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11805 00008093 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11806 00008097 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11807 0000809B EBEB                    	jmp .L_tc_recycle_frame_loop_005d
 11808                                  .L_tc_recycle_frame_done_005d:
 11809 0000809D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11810 0000809E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11811 000080A2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11812 000080A5 EB60                    	jmp .L_if_end_0029
 11813                                  .L_if_else_0029:
 11814                                  	; preparing a tail-call
 11815 000080A7 6A00                    	push 0	; arg count
 11816 000080A9 488B4510                	mov rax, ENV
 11817 000080AD 488B00                  	mov rax, qword [rax + 8 * 0]
 11818 000080B0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 11819 000080B3 803804                  	cmp byte [rax], T_closure
 11820 000080B6 0F855FFB0000            	jne L_error_non_closure
 11821 000080BC FF7001                  	push SOB_CLOSURE_ENV(rax)
 11822 000080BF FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11823 000080C2 FF7500                  	push qword[rbp]
 11824 000080C5 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11825 000080C8 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11826 000080CC 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11827 000080D0 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11828 000080D4 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11829 000080D7 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11830 000080DA 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11831 000080DF 4983C103                	add r9, 3 	 ;for getting to the params
 11832 000080E3 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11833 000080E7 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11834                                  .L_tc_recycle_frame_loop_005e:
 11835 000080EA 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11836 000080ED 7410                    	je .L_tc_recycle_frame_done_005e
 11837 000080EF 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11838 000080F2 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11839 000080F5 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11840 000080F9 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11841 000080FD EBEB                    	jmp .L_tc_recycle_frame_loop_005e
 11842                                  .L_tc_recycle_frame_done_005e:
 11843 000080FF 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11844 00008100 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11845 00008104 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11846                                  .L_if_end_0029:
 11847                                  .L_if_end_002a:
 11848                                  .L_if_end_002b:
 11849 00008107 EB60                    	jmp .L_if_end_002c
 11850                                  .L_if_else_002c:
 11851                                  	; preparing a tail-call
 11852 00008109 6A00                    	push 0	; arg count
 11853 0000810B 488B4510                	mov rax, ENV
 11854 0000810F 488B00                  	mov rax, qword [rax + 8 * 0]
 11855 00008112 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 11856 00008115 803804                  	cmp byte [rax], T_closure
 11857 00008118 0F85FDFA0000            	jne L_error_non_closure
 11858 0000811E FF7001                  	push SOB_CLOSURE_ENV(rax)
 11859 00008121 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11860 00008124 FF7500                  	push qword[rbp]
 11861 00008127 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11862 0000812A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11863 0000812E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11864 00008132 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11865 00008136 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11866 00008139 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11867 0000813C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11868 00008141 4983C103                	add r9, 3 	 ;for getting to the params
 11869 00008145 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11870 00008149 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11871                                  .L_tc_recycle_frame_loop_005f:
 11872 0000814C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11873 0000814F 7410                    	je .L_tc_recycle_frame_done_005f
 11874 00008151 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11875 00008154 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11876 00008157 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11877 0000815B 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11878 0000815F EBEB                    	jmp .L_tc_recycle_frame_loop_005f
 11879                                  .L_tc_recycle_frame_done_005f:
 11880 00008161 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11881 00008162 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11882 00008166 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11883                                  .L_if_end_002c:
 11884                                  .L_if_end_002d:
 11885                                  .L_if_end_002e:
 11886 00008169 C9                      	leave
 11887 0000816A C22000                  	ret AND_KILL_FRAME(2)
 11888                                  .L_lambda_simple_end_003e:	; new closure is in rax
 11889 0000816D 50                      	push rax
 11890 0000816E 6A01                    	push 1	; arg count
 11891 00008170 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11892 00008175 E84AFB0000              	call malloc
 11893 0000817A 50                      	push rax
 11894 0000817B BF08000000              	mov rdi, 8 * 1	; new rib
 11895 00008180 E83FFB0000              	call malloc
 11896 00008185 50                      	push rax
 11897 00008186 BF10000000              	mov rdi, 8 * 2	; extended env
 11898 0000818B E834FB0000              	call malloc
 11899 00008190 488B7D10                	mov rdi, ENV
 11900 00008194 BE00000000              	mov rsi, 0
 11901 00008199 BA01000000              	mov rdx, 1
 11902                                  .L_lambda_simple_env_loop_003f:	; ext_env[i + 1] <-- env[i]
 11903 0000819E 4883FE01                	cmp rsi, 1
 11904 000081A2 7410                    	je .L_lambda_simple_env_end_003f
 11905 000081A4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11906 000081A8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11907 000081AC 48FFC6                  	inc rsi
 11908 000081AF 48FFC2                  	inc rdx
 11909 000081B2 EBEA                    	jmp .L_lambda_simple_env_loop_003f
 11910                                  .L_lambda_simple_env_end_003f:
 11911 000081B4 5B                      	pop rbx
 11912 000081B5 BE00000000              	mov rsi, 0
 11913                                  .L_lambda_simple_params_loop_003f:	; copy params
 11914 000081BA 4883FE01                	cmp rsi, 1
 11915 000081BE 740E                    	je .L_lambda_simple_params_end_003f
 11916 000081C0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11917 000081C5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11918 000081C9 48FFC6                  	inc rsi
 11919 000081CC EBEC                    	jmp .L_lambda_simple_params_loop_003f
 11920                                  .L_lambda_simple_params_end_003f:
 11921 000081CE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11922 000081D1 4889C3                  	mov rbx, rax
 11923 000081D4 58                      	pop rax
 11924 000081D5 C60004                  	mov byte [rax], T_closure
 11925 000081D8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11926 000081DC 48C74009[E9810000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003f
 11927 000081E4 E928060000              	jmp .L_lambda_simple_end_003f
 11928                                  .L_lambda_simple_code_003f:	; lambda-simple body
 11929 000081E9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11930 000081EF 740B                    	je .L_lambda_simple_arity_check_ok_003f
 11931 000081F1 FF742410                	push qword [rsp + 8 * 2]
 11932 000081F5 6A01                    	push 1
 11933 000081F7 E981FA0000              	jmp L_error_incorrect_arity_simple
 11934                                  .L_lambda_simple_arity_check_ok_003f:
 11935 000081FC C8000000                	enter 0, 0
 11936 00008200 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11937 00008205 E8BAFA0000              	call malloc
 11938 0000820A 50                      	push rax
 11939 0000820B BF08000000              	mov rdi, 8 * 1	; new rib
 11940 00008210 E8AFFA0000              	call malloc
 11941 00008215 50                      	push rax
 11942 00008216 BF18000000              	mov rdi, 8 * 3	; extended env
 11943 0000821B E8A4FA0000              	call malloc
 11944 00008220 488B7D10                	mov rdi, ENV
 11945 00008224 BE00000000              	mov rsi, 0
 11946 00008229 BA01000000              	mov rdx, 1
 11947                                  .L_lambda_opt_env_loop_000b:	; ext_env[i + 1] <-- env[i]
 11948 0000822E 4883FE02                	cmp rsi, 2
 11949 00008232 7410                    	je .L_lambda_opt_env_end_000b
 11950 00008234 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11951 00008238 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11952 0000823C 48FFC6                  	inc rsi
 11953 0000823F 48FFC2                  	inc rdx
 11954 00008242 EBEA                    	jmp .L_lambda_opt_env_loop_000b
 11955                                  .L_lambda_opt_env_end_000b:
 11956 00008244 5B                      	pop rbx
 11957 00008245 BE00000000              	mov rsi, 0
 11958                                  .L_lambda_opt_params_loop_000b:	; copy params
 11959 0000824A 4883FE01                	cmp rsi, 1
 11960 0000824E 740E                    	je .L_lambda_opt_params_end_000b
 11961 00008250 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11962 00008255 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11963 00008259 48FFC6                  	inc rsi
 11964 0000825C EBEC                    	jmp .L_lambda_opt_params_loop_000b
 11965                                  .L_lambda_opt_params_end_000b:
 11966 0000825E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11967 00008261 4889C3                  	mov rbx, rax
 11968 00008264 58                      	pop rax
 11969 00008265 C60004                  	mov byte [rax], T_closure
 11970 00008268 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11971 0000826C 48C74009[79820000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000b
 11972 00008274 E994050000              	jmp .L_lambda_opt_end_000b
 11973                                  .L_lambda_opt_code_000b:	; lambda-opt body
 11974 00008279 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11975 0000827F 7411                    	je .L_lambda_opt_arity_check_exact_000b
 11976 00008281 0F8F96020000            	jg .L_lambda_opt_arity_check_more_000b
 11977 00008287 FF742410                	push qword [rsp + 8 * 2]
 11978 0000828B 6A01                    	push 1
 11979 0000828D E9FFF90000              	jmp L_error_incorrect_arity_opt
 11980                                  .L_lambda_opt_arity_check_exact_000b:
 11981 00008292 4883EC08                	sub rsp, 8
 11982 00008296 488B442408              	mov rax, qword[rsp + 8 *1]
 11983 0000829B 48890424                	mov qword[rsp], rax  
 11984 0000829F 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 11985 000082A4 4889442408              	mov qword[rsp + 8 * 1], rax
 11986 000082A9 B802000000              	mov rax, 2
 11987 000082AE 4889442410              	mov qword[rsp + 8 *2], rax
 11988 000082B3 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
 11989 000082B8 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 11990 000082BD 48B8-                   	mov rax, sob_nil
 11990 000082BF [0100000000000000] 
 11991 000082C7 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
 11992 000082CC C8000000                	enter 0, 0
 11993                                  	; preparing a non-tail-call
 11994 000082D0 488B4528                	mov rax, PARAM(1)	; param s
 11995 000082D4 50                      	push rax
 11996 000082D5 6A01                    	push 1	; arg count
 11997 000082D7 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 11998 000082DF 803805                  	cmp byte [rax], T_undefined
 11999 000082E2 0F84AFF80000            	je L_error_fvar_undefined
 12000 000082E8 803804                  	cmp byte [rax], T_closure
 12001 000082EB 0F852AF90000            	jne L_error_non_closure
 12002 000082F1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12003 000082F4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12004 000082F7 483D[02000000]          	cmp rax, sob_boolean_false
 12005 000082FD 7475                    	je .L_if_else_0030
 12006                                  	; preparing a tail-call
 12007 000082FF 488B4520                	mov rax, PARAM(0)	; param a
 12008 00008303 50                      	push rax
 12009 00008304 48B8-                   	mov rax, L_constants + 2135
 12009 00008306 [5708000000000000] 
 12010 0000830E 50                      	push rax
 12011 0000830F 6A02                    	push 2	; arg count
 12012 00008311 488B4510                	mov rax, ENV
 12013 00008315 488B00                  	mov rax, qword [rax + 8 * 0]
 12014 00008318 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-
 12015 0000831B 803804                  	cmp byte [rax], T_closure
 12016 0000831E 0F85F7F80000            	jne L_error_non_closure
 12017 00008324 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12018 00008327 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12019 0000832A FF7500                  	push qword[rbp]
 12020 0000832D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12021 00008330 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12022 00008334 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12023 00008338 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12024 0000833C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12025 0000833F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12026 00008342 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12027 00008347 4983C103                	add r9, 3 	 ;for getting to the params
 12028 0000834B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12029 0000834F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12030                                  .L_tc_recycle_frame_loop_0063:
 12031 00008352 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12032 00008355 7410                    	je .L_tc_recycle_frame_done_0063
 12033 00008357 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12034 0000835A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12035 0000835D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12036 00008361 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12037 00008365 EBEB                    	jmp .L_tc_recycle_frame_loop_0063
 12038                                  .L_tc_recycle_frame_done_0063:
 12039 00008367 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12040 00008368 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12041 0000836C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12042 0000836F E9A0010000              	jmp .L_if_end_0030
 12043                                  .L_if_else_0030:
 12044                                  	; preparing a tail-call
 12045                                  	; preparing a non-tail-call
 12046 00008374 488B4528                	mov rax, PARAM(1)	; param s
 12047 00008378 50                      	push rax
 12048 00008379 48B8-                   	mov rax, L_constants + 2135
 12048 0000837B [5708000000000000] 
 12049 00008383 50                      	push rax
 12050 00008384 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 12051 0000838C 803805                  	cmp byte [rax], T_undefined
 12052 0000838F 0F8402F80000            	je L_error_fvar_undefined
 12053 00008395 50                      	push rax
 12054 00008396 6A03                    	push 3	; arg count
 12055 00008398 488B0425[6A130000]      	mov rax, qword [free_var_85]	; free var fold-left
 12056 000083A0 803805                  	cmp byte [rax], T_undefined
 12057 000083A3 0F84EEF70000            	je L_error_fvar_undefined
 12058 000083A9 803804                  	cmp byte [rax], T_closure
 12059 000083AC 0F8569F80000            	jne L_error_non_closure
 12060 000083B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12061 000083B5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12062 000083B8 50                      	push rax
 12063 000083B9 6A01                    	push 1	; arg count
 12064 000083BB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12065 000083C0 E8FFF80000              	call malloc
 12066 000083C5 50                      	push rax
 12067 000083C6 BF10000000              	mov rdi, 8 * 2	; new rib
 12068 000083CB E8F4F80000              	call malloc
 12069 000083D0 50                      	push rax
 12070 000083D1 BF20000000              	mov rdi, 8 * 4	; extended env
 12071 000083D6 E8E9F80000              	call malloc
 12072 000083DB 488B7D10                	mov rdi, ENV
 12073 000083DF BE00000000              	mov rsi, 0
 12074 000083E4 BA01000000              	mov rdx, 1
 12075                                  .L_lambda_simple_env_loop_0041:	; ext_env[i + 1] <-- env[i]
 12076 000083E9 4883FE03                	cmp rsi, 3
 12077 000083ED 7410                    	je .L_lambda_simple_env_end_0041
 12078 000083EF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12079 000083F3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12080 000083F7 48FFC6                  	inc rsi
 12081 000083FA 48FFC2                  	inc rdx
 12082 000083FD EBEA                    	jmp .L_lambda_simple_env_loop_0041
 12083                                  .L_lambda_simple_env_end_0041:
 12084 000083FF 5B                      	pop rbx
 12085 00008400 BE00000000              	mov rsi, 0
 12086                                  .L_lambda_simple_params_loop_0041:	; copy params
 12087 00008405 4883FE02                	cmp rsi, 2
 12088 00008409 740E                    	je .L_lambda_simple_params_end_0041
 12089 0000840B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12090 00008410 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12091 00008414 48FFC6                  	inc rsi
 12092 00008417 EBEC                    	jmp .L_lambda_simple_params_loop_0041
 12093                                  .L_lambda_simple_params_end_0041:
 12094 00008419 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12095 0000841C 4889C3                  	mov rbx, rax
 12096 0000841F 58                      	pop rax
 12097 00008420 C60004                  	mov byte [rax], T_closure
 12098 00008423 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12099 00008427 48C74009[34840000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0041
 12100 0000842F E98C000000              	jmp .L_lambda_simple_end_0041
 12101                                  .L_lambda_simple_code_0041:	; lambda-simple body
 12102 00008434 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12103 0000843A 740B                    	je .L_lambda_simple_arity_check_ok_0041
 12104 0000843C FF742410                	push qword [rsp + 8 * 2]
 12105 00008440 6A01                    	push 1
 12106 00008442 E936F80000              	jmp L_error_incorrect_arity_simple
 12107                                  .L_lambda_simple_arity_check_ok_0041:
 12108 00008447 C8000000                	enter 0, 0
 12109                                  	; preparing a tail-call
 12110 0000844B 488B4520                	mov rax, PARAM(0)	; param b
 12111 0000844F 50                      	push rax
 12112 00008450 488B4510                	mov rax, ENV
 12113 00008454 488B00                  	mov rax, qword [rax + 8 * 0]
 12114 00008457 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var a
 12115 0000845A 50                      	push rax
 12116 0000845B 6A02                    	push 2	; arg count
 12117 0000845D 488B4510                	mov rax, ENV
 12118 00008461 488B4008                	mov rax, qword [rax + 8 * 1]
 12119 00008465 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-
 12120 00008468 803804                  	cmp byte [rax], T_closure
 12121 0000846B 0F85AAF70000            	jne L_error_non_closure
 12122 00008471 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12123 00008474 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12124 00008477 FF7500                  	push qword[rbp]
 12125 0000847A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12126 0000847D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12127 00008481 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12128 00008485 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12129 00008489 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12130 0000848C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12131 0000848F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12132 00008494 4983C103                	add r9, 3 	 ;for getting to the params
 12133 00008498 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12134 0000849C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12135                                  .L_tc_recycle_frame_loop_0064:
 12136 0000849F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12137 000084A2 7410                    	je .L_tc_recycle_frame_done_0064
 12138 000084A4 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12139 000084A7 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12140 000084AA 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12141 000084AE 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12142 000084B2 EBEB                    	jmp .L_tc_recycle_frame_loop_0064
 12143                                  .L_tc_recycle_frame_done_0064:
 12144 000084B4 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12145 000084B5 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12146 000084B9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12147 000084BC C9                      	leave
 12148 000084BD C21800                  	ret AND_KILL_FRAME(1)
 12149                                  .L_lambda_simple_end_0041:	; new closure is in rax
 12150 000084C0 803804                  	cmp byte [rax], T_closure
 12151 000084C3 0F8552F70000            	jne L_error_non_closure
 12152 000084C9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12153 000084CC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12154 000084CF FF7500                  	push qword[rbp]
 12155 000084D2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12156 000084D5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12157 000084D9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12158 000084DD 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12159 000084E1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12160 000084E4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12161 000084E7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12162 000084EC 4983C103                	add r9, 3 	 ;for getting to the params
 12163 000084F0 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12164 000084F4 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12165                                  .L_tc_recycle_frame_loop_0065:
 12166 000084F7 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12167 000084FA 7410                    	je .L_tc_recycle_frame_done_0065
 12168 000084FC 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12169 000084FF 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12170 00008502 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12171 00008506 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12172 0000850A EBEB                    	jmp .L_tc_recycle_frame_loop_0065
 12173                                  .L_tc_recycle_frame_done_0065:
 12174 0000850C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12175 0000850D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12176 00008511 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12177                                  .L_if_end_0030:
 12178 00008514 C9                      	leave
 12179 00008515 C22000                  	ret AND_KILL_FRAME(2)
 12180 00008518 E9F0020000              	jmp .L_lambda_opt_end_000b	; new closure is in rax
 12181                                  .L_lambda_opt_arity_check_more_000b:
 12182 0000851D 488B442410              	mov rax, qword[rsp + 2 * 8]
 12183 00008522 4889C7                  	mov rdi, rax
 12184 00008525 49B9-                   	mov r9, sob_nil
 12184 00008527 [0100000000000000] 
 12185 0000852F 4989F8                  	mov r8, rdi
 12186                                  .L_lambda_opt_stack_shrink_loop_000b:
 12187 00008532 4983F801                	cmp r8, 1
 12188 00008536 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_000b
 12189 00008538 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)] 	;rbx is the top of the stack
 12190 0000853D BF11000000              	mov rdi, 1+8+8	;for pair
 12191 00008542 E87DF70000              	call malloc	 ;to create the pair in the stack
 12192 00008547 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
 12193 0000854A 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
 12194 0000854E 4C894809                 	mov qword[rax+1+8],r9
 12195 00008552 4989C1                  	mov r9 , rax	 ; for the recursion 
 12196 00008555 49FFC8                  	dec r8
 12197 00008558 EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_000b
 12198                                  .L_lambda_opt_stack_shrink_loop_exit_000b:
 12199 0000855A 488B442410              	mov rax, qword[rsp + 2 * 8]
 12200 0000855F BF02000000              	mov rdi, 2
 12201 00008564 4829F8                  	sub rax, rdi
 12202 00008567 4889C7                  	mov rdi, rax
 12203 0000856A 486BC008                	imul rax,8
 12204 0000856E 4801C4                  	add rsp, rax
 12205 00008571 4889E0                  	mov rax, rsp
 12206 00008574 4989F8                  	mov r8, rdi
 12207 00008577 4D6BC008                	imul r8, 8
 12208 0000857B 4C29C0                  	sub rax, r8
 12209 0000857E 4989C2                  	mov r10, rax	; holds the original ret in the stack
 12210 00008581 4983C218                	add r10, 8*3
 12211 00008585 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
 12212 00008589 4C8B00                  	mov r8, qword[rax] 	;arg count = r8
 12213 0000858C 4D6BC008                	imul r8,8
 12214 00008590 4C01C0                  	add rax, r8
 12215 00008593 4C8908                  	mov qword[rax] ,r9
 12216 00008596 4D89D0                   	mov r8, r10
 12217 00008599 4983C000                	add r8, 8 * 0
 12218 0000859D 4D8B08                  	mov r9,qword[r8]
 12219 000085A0 4D890CF8                	mov qword [r8 + rdi * 8], r9
 12220 000085A4 4983EA18                	sub r10, 8*3
 12221 000085A8 48C744241002000000      	mov qword [rsp+2*8], 2
 12222 000085B1 498B4208                	mov rax, qword[r10 + 1 * 8]
 12223 000085B5 4889442408              	mov qword[rsp + 1*8] ,rax
 12224 000085BA 498B02                  	mov rax, qword[r10]
 12225 000085BD 48890424                	mov qword[rsp], rax
 12226 000085C1 C8000000                	enter 0, 0
 12227                                  	; preparing a non-tail-call
 12228 000085C5 488B4528                	mov rax, PARAM(1)	; param s
 12229 000085C9 50                      	push rax
 12230 000085CA 6A01                    	push 1	; arg count
 12231 000085CC 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 12232 000085D4 803805                  	cmp byte [rax], T_undefined
 12233 000085D7 0F84BAF50000            	je L_error_fvar_undefined
 12234 000085DD 803804                  	cmp byte [rax], T_closure
 12235 000085E0 0F8535F60000            	jne L_error_non_closure
 12236 000085E6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12237 000085E9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12238 000085EC 483D[02000000]          	cmp rax, sob_boolean_false
 12239 000085F2 7475                    	je .L_if_else_002f
 12240                                  	; preparing a tail-call
 12241 000085F4 488B4520                	mov rax, PARAM(0)	; param a
 12242 000085F8 50                      	push rax
 12243 000085F9 48B8-                   	mov rax, L_constants + 2135
 12243 000085FB [5708000000000000] 
 12244 00008603 50                      	push rax
 12245 00008604 6A02                    	push 2	; arg count
 12246 00008606 488B4510                	mov rax, ENV
 12247 0000860A 488B00                  	mov rax, qword [rax + 8 * 0]
 12248 0000860D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-
 12249 00008610 803804                  	cmp byte [rax], T_closure
 12250 00008613 0F8502F60000            	jne L_error_non_closure
 12251 00008619 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12252 0000861C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12253 0000861F FF7500                  	push qword[rbp]
 12254 00008622 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12255 00008625 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12256 00008629 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12257 0000862D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12258 00008631 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12259 00008634 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12260 00008637 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12261 0000863C 4983C103                	add r9, 3 	 ;for getting to the params
 12262 00008640 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12263 00008644 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12264                                  .L_tc_recycle_frame_loop_0060:
 12265 00008647 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12266 0000864A 7410                    	je .L_tc_recycle_frame_done_0060
 12267 0000864C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12268 0000864F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12269 00008652 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12270 00008656 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12271 0000865A EBEB                    	jmp .L_tc_recycle_frame_loop_0060
 12272                                  .L_tc_recycle_frame_done_0060:
 12273 0000865C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12274 0000865D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12275 00008661 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12276 00008664 E9A0010000              	jmp .L_if_end_002f
 12277                                  .L_if_else_002f:
 12278                                  	; preparing a tail-call
 12279                                  	; preparing a non-tail-call
 12280 00008669 488B4528                	mov rax, PARAM(1)	; param s
 12281 0000866D 50                      	push rax
 12282 0000866E 48B8-                   	mov rax, L_constants + 2135
 12282 00008670 [5708000000000000] 
 12283 00008678 50                      	push rax
 12284 00008679 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 12285 00008681 803805                  	cmp byte [rax], T_undefined
 12286 00008684 0F840DF50000            	je L_error_fvar_undefined
 12287 0000868A 50                      	push rax
 12288 0000868B 6A03                    	push 3	; arg count
 12289 0000868D 488B0425[6A130000]      	mov rax, qword [free_var_85]	; free var fold-left
 12290 00008695 803805                  	cmp byte [rax], T_undefined
 12291 00008698 0F84F9F40000            	je L_error_fvar_undefined
 12292 0000869E 803804                  	cmp byte [rax], T_closure
 12293 000086A1 0F8574F50000            	jne L_error_non_closure
 12294 000086A7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12295 000086AA FF5009                  	call SOB_CLOSURE_CODE(rax)
 12296 000086AD 50                      	push rax
 12297 000086AE 6A01                    	push 1	; arg count
 12298 000086B0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12299 000086B5 E80AF60000              	call malloc
 12300 000086BA 50                      	push rax
 12301 000086BB BF10000000              	mov rdi, 8 * 2	; new rib
 12302 000086C0 E8FFF50000              	call malloc
 12303 000086C5 50                      	push rax
 12304 000086C6 BF20000000              	mov rdi, 8 * 4	; extended env
 12305 000086CB E8F4F50000              	call malloc
 12306 000086D0 488B7D10                	mov rdi, ENV
 12307 000086D4 BE00000000              	mov rsi, 0
 12308 000086D9 BA01000000              	mov rdx, 1
 12309                                  .L_lambda_simple_env_loop_0040:	; ext_env[i + 1] <-- env[i]
 12310 000086DE 4883FE03                	cmp rsi, 3
 12311 000086E2 7410                    	je .L_lambda_simple_env_end_0040
 12312 000086E4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12313 000086E8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12314 000086EC 48FFC6                  	inc rsi
 12315 000086EF 48FFC2                  	inc rdx
 12316 000086F2 EBEA                    	jmp .L_lambda_simple_env_loop_0040
 12317                                  .L_lambda_simple_env_end_0040:
 12318 000086F4 5B                      	pop rbx
 12319 000086F5 BE00000000              	mov rsi, 0
 12320                                  .L_lambda_simple_params_loop_0040:	; copy params
 12321 000086FA 4883FE02                	cmp rsi, 2
 12322 000086FE 740E                    	je .L_lambda_simple_params_end_0040
 12323 00008700 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12324 00008705 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12325 00008709 48FFC6                  	inc rsi
 12326 0000870C EBEC                    	jmp .L_lambda_simple_params_loop_0040
 12327                                  .L_lambda_simple_params_end_0040:
 12328 0000870E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12329 00008711 4889C3                  	mov rbx, rax
 12330 00008714 58                      	pop rax
 12331 00008715 C60004                  	mov byte [rax], T_closure
 12332 00008718 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12333 0000871C 48C74009[29870000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0040
 12334 00008724 E98C000000              	jmp .L_lambda_simple_end_0040
 12335                                  .L_lambda_simple_code_0040:	; lambda-simple body
 12336 00008729 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12337 0000872F 740B                    	je .L_lambda_simple_arity_check_ok_0040
 12338 00008731 FF742410                	push qword [rsp + 8 * 2]
 12339 00008735 6A01                    	push 1
 12340 00008737 E941F50000              	jmp L_error_incorrect_arity_simple
 12341                                  .L_lambda_simple_arity_check_ok_0040:
 12342 0000873C C8000000                	enter 0, 0
 12343                                  	; preparing a tail-call
 12344 00008740 488B4520                	mov rax, PARAM(0)	; param b
 12345 00008744 50                      	push rax
 12346 00008745 488B4510                	mov rax, ENV
 12347 00008749 488B00                  	mov rax, qword [rax + 8 * 0]
 12348 0000874C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var a
 12349 0000874F 50                      	push rax
 12350 00008750 6A02                    	push 2	; arg count
 12351 00008752 488B4510                	mov rax, ENV
 12352 00008756 488B4008                	mov rax, qword [rax + 8 * 1]
 12353 0000875A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-
 12354 0000875D 803804                  	cmp byte [rax], T_closure
 12355 00008760 0F85B5F40000            	jne L_error_non_closure
 12356 00008766 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12357 00008769 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12358 0000876C FF7500                  	push qword[rbp]
 12359 0000876F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12360 00008772 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12361 00008776 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12362 0000877A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12363 0000877E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12364 00008781 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12365 00008784 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12366 00008789 4983C103                	add r9, 3 	 ;for getting to the params
 12367 0000878D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12368 00008791 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12369                                  .L_tc_recycle_frame_loop_0061:
 12370 00008794 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12371 00008797 7410                    	je .L_tc_recycle_frame_done_0061
 12372 00008799 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12373 0000879C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12374 0000879F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12375 000087A3 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12376 000087A7 EBEB                    	jmp .L_tc_recycle_frame_loop_0061
 12377                                  .L_tc_recycle_frame_done_0061:
 12378 000087A9 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12379 000087AA 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12380 000087AE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12381 000087B1 C9                      	leave
 12382 000087B2 C21800                  	ret AND_KILL_FRAME(1)
 12383                                  .L_lambda_simple_end_0040:	; new closure is in rax
 12384 000087B5 803804                  	cmp byte [rax], T_closure
 12385 000087B8 0F855DF40000            	jne L_error_non_closure
 12386 000087BE FF7001                  	push SOB_CLOSURE_ENV(rax)
 12387 000087C1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12388 000087C4 FF7500                  	push qword[rbp]
 12389 000087C7 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12390 000087CA 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12391 000087CE 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12392 000087D2 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12393 000087D6 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12394 000087D9 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12395 000087DC 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12396 000087E1 4983C103                	add r9, 3 	 ;for getting to the params
 12397 000087E5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12398 000087E9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12399                                  .L_tc_recycle_frame_loop_0062:
 12400 000087EC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12401 000087EF 7410                    	je .L_tc_recycle_frame_done_0062
 12402 000087F1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12403 000087F4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12404 000087F7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12405 000087FB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12406 000087FF EBEB                    	jmp .L_tc_recycle_frame_loop_0062
 12407                                  .L_tc_recycle_frame_done_0062:
 12408 00008801 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12409 00008802 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12410 00008806 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12411                                  .L_if_end_002f:
 12412 00008809 C9                      	leave
 12413 0000880A C22000                  	ret AND_KILL_FRAME(2)
 12414                                  .L_lambda_opt_end_000b:	; new closure is in rax
 12415 0000880D C9                      	leave
 12416 0000880E C21800                  	ret AND_KILL_FRAME(1)
 12417                                  .L_lambda_simple_end_003f:	; new closure is in rax
 12418 00008811 803804                  	cmp byte [rax], T_closure
 12419 00008814 0F8501F40000            	jne L_error_non_closure
 12420 0000881A FF7001                  	push SOB_CLOSURE_ENV(rax)
 12421 0000881D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12422 00008820 FF7500                  	push qword[rbp]
 12423 00008823 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12424 00008826 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12425 0000882A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12426 0000882E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12427 00008832 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12428 00008835 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12429 00008838 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12430 0000883D 4983C103                	add r9, 3 	 ;for getting to the params
 12431 00008841 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12432 00008845 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12433                                  .L_tc_recycle_frame_loop_0066:
 12434 00008848 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12435 0000884B 7410                    	je .L_tc_recycle_frame_done_0066
 12436 0000884D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12437 00008850 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12438 00008853 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12439 00008857 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12440 0000885B EBEB                    	jmp .L_tc_recycle_frame_loop_0066
 12441                                  .L_tc_recycle_frame_done_0066:
 12442 0000885D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12443 0000885E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12444 00008862 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12445 00008865 C9                      	leave
 12446 00008866 C21800                  	ret AND_KILL_FRAME(1)
 12447                                  .L_lambda_simple_end_003d:	; new closure is in rax
 12448 00008869 803804                  	cmp byte [rax], T_closure
 12449 0000886C 0F85A9F30000            	jne L_error_non_closure
 12450 00008872 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12451 00008875 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12452 00008878 48890425[E70D0000]      	mov qword [free_var_2], rax
 12453 00008880 48B8-                   	mov rax, sob_void
 12453 00008882 [0000000000000000] 
 12454                                  
 12455 0000888A 4889C7                  	mov rdi, rax
 12456 0000888D E887F60000              	call print_sexpr_if_not_void
 12457                                  	; preparing a non-tail-call
 12458 00008892 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12459 00008897 E828F40000              	call malloc
 12460 0000889C 50                      	push rax
 12461 0000889D BF00000000              	mov rdi, 8 * 0	; new rib
 12462 000088A2 E81DF40000              	call malloc
 12463 000088A7 50                      	push rax
 12464 000088A8 BF08000000              	mov rdi, 8 * 1	; extended env
 12465 000088AD E812F40000              	call malloc
 12466 000088B2 488B7D10                	mov rdi, ENV
 12467 000088B6 BE00000000              	mov rsi, 0
 12468 000088BB BA01000000              	mov rdx, 1
 12469                                  .L_lambda_simple_env_loop_0042:	; ext_env[i + 1] <-- env[i]
 12470 000088C0 4883FE00                	cmp rsi, 0
 12471 000088C4 7410                    	je .L_lambda_simple_env_end_0042
 12472 000088C6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12473 000088CA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12474 000088CE 48FFC6                  	inc rsi
 12475 000088D1 48FFC2                  	inc rdx
 12476 000088D4 EBEA                    	jmp .L_lambda_simple_env_loop_0042
 12477                                  .L_lambda_simple_env_end_0042:
 12478 000088D6 5B                      	pop rbx
 12479 000088D7 BE00000000              	mov rsi, 0
 12480                                  .L_lambda_simple_params_loop_0042:	; copy params
 12481 000088DC 4883FE00                	cmp rsi, 0
 12482 000088E0 740E                    	je .L_lambda_simple_params_end_0042
 12483 000088E2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12484 000088E7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12485 000088EB 48FFC6                  	inc rsi
 12486 000088EE EBEC                    	jmp .L_lambda_simple_params_loop_0042
 12487                                  .L_lambda_simple_params_end_0042:
 12488 000088F0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12489 000088F3 4889C3                  	mov rbx, rax
 12490 000088F6 58                      	pop rax
 12491 000088F7 C60004                  	mov byte [rax], T_closure
 12492 000088FA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12493 000088FE 48C74009[0B890000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0042
 12494 00008906 E998000000              	jmp .L_lambda_simple_end_0042
 12495                                  .L_lambda_simple_code_0042:	; lambda-simple body
 12496 0000890B 48837C241000            	cmp qword [rsp + 8 * 2], 0
 12497 00008911 740B                    	je .L_lambda_simple_arity_check_ok_0042
 12498 00008913 FF742410                	push qword [rsp + 8 * 2]
 12499 00008917 6A00                    	push 0
 12500 00008919 E95FF30000              	jmp L_error_incorrect_arity_simple
 12501                                  .L_lambda_simple_arity_check_ok_0042:
 12502 0000891E C8000000                	enter 0, 0
 12503                                  	; preparing a tail-call
 12504 00008922 48B8-                   	mov rax, L_constants + 2187
 12504 00008924 [8B08000000000000] 
 12505 0000892C 50                      	push rax
 12506 0000892D 48B8-                   	mov rax, L_constants + 2279
 12506 0000892F [E708000000000000] 
 12507 00008937 50                      	push rax
 12508 00008938 6A02                    	push 2	; arg count
 12509 0000893A 488B0425[37130000]      	mov rax, qword [free_var_82]	; free var error
 12510 00008942 803805                  	cmp byte [rax], T_undefined
 12511 00008945 0F844CF20000            	je L_error_fvar_undefined
 12512 0000894B 803804                  	cmp byte [rax], T_closure
 12513 0000894E 0F85C7F20000            	jne L_error_non_closure
 12514 00008954 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12515 00008957 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12516 0000895A FF7500                  	push qword[rbp]
 12517 0000895D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12518 00008960 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12519 00008964 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12520 00008968 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12521 0000896C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12522 0000896F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12523 00008972 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12524 00008977 4983C103                	add r9, 3 	 ;for getting to the params
 12525 0000897B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12526 0000897F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12527                                  .L_tc_recycle_frame_loop_0067:
 12528 00008982 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12529 00008985 7410                    	je .L_tc_recycle_frame_done_0067
 12530 00008987 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12531 0000898A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12532 0000898D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12533 00008991 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12534 00008995 EBEB                    	jmp .L_tc_recycle_frame_loop_0067
 12535                                  .L_tc_recycle_frame_done_0067:
 12536 00008997 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12537 00008998 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12538 0000899C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12539 0000899F C9                      	leave
 12540 000089A0 C21000                  	ret AND_KILL_FRAME(0)
 12541                                  .L_lambda_simple_end_0042:	; new closure is in rax
 12542 000089A3 50                      	push rax
 12543 000089A4 6A01                    	push 1	; arg count
 12544 000089A6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12545 000089AB E814F30000              	call malloc
 12546 000089B0 50                      	push rax
 12547 000089B1 BF00000000              	mov rdi, 8 * 0	; new rib
 12548 000089B6 E809F30000              	call malloc
 12549 000089BB 50                      	push rax
 12550 000089BC BF08000000              	mov rdi, 8 * 1	; extended env
 12551 000089C1 E8FEF20000              	call malloc
 12552 000089C6 488B7D10                	mov rdi, ENV
 12553 000089CA BE00000000              	mov rsi, 0
 12554 000089CF BA01000000              	mov rdx, 1
 12555                                  .L_lambda_simple_env_loop_0043:	; ext_env[i + 1] <-- env[i]
 12556 000089D4 4883FE00                	cmp rsi, 0
 12557 000089D8 7410                    	je .L_lambda_simple_env_end_0043
 12558 000089DA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12559 000089DE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12560 000089E2 48FFC6                  	inc rsi
 12561 000089E5 48FFC2                  	inc rdx
 12562 000089E8 EBEA                    	jmp .L_lambda_simple_env_loop_0043
 12563                                  .L_lambda_simple_env_end_0043:
 12564 000089EA 5B                      	pop rbx
 12565 000089EB BE00000000              	mov rsi, 0
 12566                                  .L_lambda_simple_params_loop_0043:	; copy params
 12567 000089F0 4883FE00                	cmp rsi, 0
 12568 000089F4 740E                    	je .L_lambda_simple_params_end_0043
 12569 000089F6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12570 000089FB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12571 000089FF 48FFC6                  	inc rsi
 12572 00008A02 EBEC                    	jmp .L_lambda_simple_params_loop_0043
 12573                                  .L_lambda_simple_params_end_0043:
 12574 00008A04 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12575 00008A07 4889C3                  	mov rbx, rax
 12576 00008A0A 58                      	pop rax
 12577 00008A0B C60004                  	mov byte [rax], T_closure
 12578 00008A0E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12579 00008A12 48C74009[1F8A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0043
 12580 00008A1A E9DE0C0000              	jmp .L_lambda_simple_end_0043
 12581                                  .L_lambda_simple_code_0043:	; lambda-simple body
 12582 00008A1F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12583 00008A25 740B                    	je .L_lambda_simple_arity_check_ok_0043
 12584 00008A27 FF742410                	push qword [rsp + 8 * 2]
 12585 00008A2B 6A01                    	push 1
 12586 00008A2D E94BF20000              	jmp L_error_incorrect_arity_simple
 12587                                  .L_lambda_simple_arity_check_ok_0043:
 12588 00008A32 C8000000                	enter 0, 0
 12589                                  	; preparing a tail-call
 12590 00008A36 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12591 00008A3B E884F20000              	call malloc
 12592 00008A40 50                      	push rax
 12593 00008A41 BF08000000              	mov rdi, 8 * 1	; new rib
 12594 00008A46 E879F20000              	call malloc
 12595 00008A4B 50                      	push rax
 12596 00008A4C BF10000000              	mov rdi, 8 * 2	; extended env
 12597 00008A51 E86EF20000              	call malloc
 12598 00008A56 488B7D10                	mov rdi, ENV
 12599 00008A5A BE00000000              	mov rsi, 0
 12600 00008A5F BA01000000              	mov rdx, 1
 12601                                  .L_lambda_simple_env_loop_0044:	; ext_env[i + 1] <-- env[i]
 12602 00008A64 4883FE01                	cmp rsi, 1
 12603 00008A68 7410                    	je .L_lambda_simple_env_end_0044
 12604 00008A6A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12605 00008A6E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12606 00008A72 48FFC6                  	inc rsi
 12607 00008A75 48FFC2                  	inc rdx
 12608 00008A78 EBEA                    	jmp .L_lambda_simple_env_loop_0044
 12609                                  .L_lambda_simple_env_end_0044:
 12610 00008A7A 5B                      	pop rbx
 12611 00008A7B BE00000000              	mov rsi, 0
 12612                                  .L_lambda_simple_params_loop_0044:	; copy params
 12613 00008A80 4883FE01                	cmp rsi, 1
 12614 00008A84 740E                    	je .L_lambda_simple_params_end_0044
 12615 00008A86 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12616 00008A8B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12617 00008A8F 48FFC6                  	inc rsi
 12618 00008A92 EBEC                    	jmp .L_lambda_simple_params_loop_0044
 12619                                  .L_lambda_simple_params_end_0044:
 12620 00008A94 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12621 00008A97 4889C3                  	mov rbx, rax
 12622 00008A9A 58                      	pop rax
 12623 00008A9B C60004                  	mov byte [rax], T_closure
 12624 00008A9E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12625 00008AA2 48C74009[AF8A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0044
 12626 00008AAA E9EE080000              	jmp .L_lambda_simple_end_0044
 12627                                  .L_lambda_simple_code_0044:	; lambda-simple body
 12628 00008AAF 48837C241002            	cmp qword [rsp + 8 * 2], 2
 12629 00008AB5 740B                    	je .L_lambda_simple_arity_check_ok_0044
 12630 00008AB7 FF742410                	push qword [rsp + 8 * 2]
 12631 00008ABB 6A02                    	push 2
 12632 00008ABD E9BBF10000              	jmp L_error_incorrect_arity_simple
 12633                                  .L_lambda_simple_arity_check_ok_0044:
 12634 00008AC2 C8000000                	enter 0, 0
 12635                                  	; preparing a non-tail-call
 12636 00008AC6 488B4520                	mov rax, PARAM(0)	; param a
 12637 00008ACA 50                      	push rax
 12638 00008ACB 6A01                    	push 1	; arg count
 12639 00008ACD 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 12640 00008AD5 803805                  	cmp byte [rax], T_undefined
 12641 00008AD8 0F84B9F00000            	je L_error_fvar_undefined
 12642 00008ADE 803804                  	cmp byte [rax], T_closure
 12643 00008AE1 0F8534F10000            	jne L_error_non_closure
 12644 00008AE7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12645 00008AEA FF5009                  	call SOB_CLOSURE_CODE(rax)
 12646 00008AED 483D[02000000]          	cmp rax, sob_boolean_false
 12647 00008AF3 0F849F020000            	je .L_if_else_003c
 12648                                  	; preparing a non-tail-call
 12649 00008AF9 488B4528                	mov rax, PARAM(1)	; param b
 12650 00008AFD 50                      	push rax
 12651 00008AFE 6A01                    	push 1	; arg count
 12652 00008B00 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 12653 00008B08 803805                  	cmp byte [rax], T_undefined
 12654 00008B0B 0F8486F00000            	je L_error_fvar_undefined
 12655 00008B11 803804                  	cmp byte [rax], T_closure
 12656 00008B14 0F8501F10000            	jne L_error_non_closure
 12657 00008B1A FF7001                  	push SOB_CLOSURE_ENV(rax)
 12658 00008B1D FF5009                  	call SOB_CLOSURE_CODE(rax)
 12659 00008B20 483D[02000000]          	cmp rax, sob_boolean_false
 12660 00008B26 7476                    	je .L_if_else_0033
 12661                                  	; preparing a tail-call
 12662 00008B28 488B4528                	mov rax, PARAM(1)	; param b
 12663 00008B2C 50                      	push rax
 12664 00008B2D 488B4520                	mov rax, PARAM(0)	; param a
 12665 00008B31 50                      	push rax
 12666 00008B32 6A02                    	push 2	; arg count
 12667 00008B34 488B0425[5D0F0000]      	mov rax, qword [free_var_24]	; free var __bin-mul-zz
 12668 00008B3C 803805                  	cmp byte [rax], T_undefined
 12669 00008B3F 0F8452F00000            	je L_error_fvar_undefined
 12670 00008B45 803804                  	cmp byte [rax], T_closure
 12671 00008B48 0F85CDF00000            	jne L_error_non_closure
 12672 00008B4E FF7001                  	push SOB_CLOSURE_ENV(rax)
 12673 00008B51 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12674 00008B54 FF7500                  	push qword[rbp]
 12675 00008B57 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12676 00008B5A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12677 00008B5E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12678 00008B62 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12679 00008B66 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12680 00008B69 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12681 00008B6C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12682 00008B71 4983C103                	add r9, 3 	 ;for getting to the params
 12683 00008B75 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12684 00008B79 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12685                                  .L_tc_recycle_frame_loop_0068:
 12686 00008B7C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12687 00008B7F 7410                    	je .L_tc_recycle_frame_done_0068
 12688 00008B81 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12689 00008B84 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12690 00008B87 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12691 00008B8B 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12692 00008B8F EBEB                    	jmp .L_tc_recycle_frame_loop_0068
 12693                                  .L_tc_recycle_frame_done_0068:
 12694 00008B91 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12695 00008B92 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12696 00008B96 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12697 00008B99 E9F5010000              	jmp .L_if_end_0033
 12698                                  .L_if_else_0033:
 12699                                  	; preparing a non-tail-call
 12700 00008B9E 488B4528                	mov rax, PARAM(1)	; param b
 12701 00008BA2 50                      	push rax
 12702 00008BA3 6A01                    	push 1	; arg count
 12703 00008BA5 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 12704 00008BAD 803805                  	cmp byte [rax], T_undefined
 12705 00008BB0 0F84E1EF0000            	je L_error_fvar_undefined
 12706 00008BB6 803804                  	cmp byte [rax], T_closure
 12707 00008BB9 0F855CF00000            	jne L_error_non_closure
 12708 00008BBF FF7001                  	push SOB_CLOSURE_ENV(rax)
 12709 00008BC2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12710 00008BC5 483D[02000000]          	cmp rax, sob_boolean_false
 12711 00008BCB 0F8499000000            	je .L_if_else_0032
 12712                                  	; preparing a tail-call
 12713 00008BD1 488B4528                	mov rax, PARAM(1)	; param b
 12714 00008BD5 50                      	push rax
 12715                                  	; preparing a non-tail-call
 12716 00008BD6 488B4520                	mov rax, PARAM(0)	; param a
 12717 00008BDA 50                      	push rax
 12718 00008BDB 6A01                    	push 1	; arg count
 12719 00008BDD 488B0425[B20F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 12720 00008BE5 803805                  	cmp byte [rax], T_undefined
 12721 00008BE8 0F84A9EF0000            	je L_error_fvar_undefined
 12722 00008BEE 803804                  	cmp byte [rax], T_closure
 12723 00008BF1 0F8524F00000            	jne L_error_non_closure
 12724 00008BF7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12725 00008BFA FF5009                  	call SOB_CLOSURE_CODE(rax)
 12726 00008BFD 50                      	push rax
 12727 00008BFE 6A02                    	push 2	; arg count
 12728 00008C00 488B0425[3B0F0000]      	mov rax, qword [free_var_22]	; free var __bin-mul-qq
 12729 00008C08 803805                  	cmp byte [rax], T_undefined
 12730 00008C0B 0F8486EF0000            	je L_error_fvar_undefined
 12731 00008C11 803804                  	cmp byte [rax], T_closure
 12732 00008C14 0F8501F00000            	jne L_error_non_closure
 12733 00008C1A FF7001                  	push SOB_CLOSURE_ENV(rax)
 12734 00008C1D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12735 00008C20 FF7500                  	push qword[rbp]
 12736 00008C23 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12737 00008C26 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12738 00008C2A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12739 00008C2E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12740 00008C32 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12741 00008C35 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12742 00008C38 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12743 00008C3D 4983C103                	add r9, 3 	 ;for getting to the params
 12744 00008C41 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12745 00008C45 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12746                                  .L_tc_recycle_frame_loop_0069:
 12747 00008C48 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12748 00008C4B 7410                    	je .L_tc_recycle_frame_done_0069
 12749 00008C4D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12750 00008C50 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12751 00008C53 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12752 00008C57 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12753 00008C5B EBEB                    	jmp .L_tc_recycle_frame_loop_0069
 12754                                  .L_tc_recycle_frame_done_0069:
 12755 00008C5D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12756 00008C5E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12757 00008C62 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12758 00008C65 E929010000              	jmp .L_if_end_0032
 12759                                  .L_if_else_0032:
 12760                                  	; preparing a non-tail-call
 12761 00008C6A 488B4528                	mov rax, PARAM(1)	; param b
 12762 00008C6E 50                      	push rax
 12763 00008C6F 6A01                    	push 1	; arg count
 12764 00008C71 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 12765 00008C79 803805                  	cmp byte [rax], T_undefined
 12766 00008C7C 0F8415EF0000            	je L_error_fvar_undefined
 12767 00008C82 803804                  	cmp byte [rax], T_closure
 12768 00008C85 0F8590EF0000            	jne L_error_non_closure
 12769 00008C8B FF7001                  	push SOB_CLOSURE_ENV(rax)
 12770 00008C8E FF5009                  	call SOB_CLOSURE_CODE(rax)
 12771 00008C91 483D[02000000]          	cmp rax, sob_boolean_false
 12772 00008C97 0F8496000000            	je .L_if_else_0031
 12773                                  	; preparing a tail-call
 12774 00008C9D 488B4528                	mov rax, PARAM(1)	; param b
 12775 00008CA1 50                      	push rax
 12776                                  	; preparing a non-tail-call
 12777 00008CA2 488B4520                	mov rax, PARAM(0)	; param a
 12778 00008CA6 50                      	push rax
 12779 00008CA7 6A01                    	push 1	; arg count
 12780 00008CA9 488B0425[BF130000]      	mov rax, qword [free_var_90]	; free var integer->real
 12781 00008CB1 803805                  	cmp byte [rax], T_undefined
 12782 00008CB4 0F84DDEE0000            	je L_error_fvar_undefined
 12783 00008CBA 803804                  	cmp byte [rax], T_closure
 12784 00008CBD 0F8558EF0000            	jne L_error_non_closure
 12785 00008CC3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12786 00008CC6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12787 00008CC9 50                      	push rax
 12788 00008CCA 6A02                    	push 2	; arg count
 12789 00008CCC 488B0425[4C0F0000]      	mov rax, qword [free_var_23]	; free var __bin-mul-rr
 12790 00008CD4 803805                  	cmp byte [rax], T_undefined
 12791 00008CD7 0F84BAEE0000            	je L_error_fvar_undefined
 12792 00008CDD 803804                  	cmp byte [rax], T_closure
 12793 00008CE0 0F8535EF0000            	jne L_error_non_closure
 12794 00008CE6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12795 00008CE9 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12796 00008CEC FF7500                  	push qword[rbp]
 12797 00008CEF 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12798 00008CF2 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12799 00008CF6 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12800 00008CFA 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12801 00008CFE 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12802 00008D01 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12803 00008D04 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12804 00008D09 4983C103                	add r9, 3 	 ;for getting to the params
 12805 00008D0D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12806 00008D11 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12807                                  .L_tc_recycle_frame_loop_006a:
 12808 00008D14 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12809 00008D17 7410                    	je .L_tc_recycle_frame_done_006a
 12810 00008D19 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12811 00008D1C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12812 00008D1F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12813 00008D23 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12814 00008D27 EBEB                    	jmp .L_tc_recycle_frame_loop_006a
 12815                                  .L_tc_recycle_frame_done_006a:
 12816 00008D29 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12817 00008D2A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12818 00008D2E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12819 00008D31 EB60                    	jmp .L_if_end_0031
 12820                                  .L_if_else_0031:
 12821                                  	; preparing a tail-call
 12822 00008D33 6A00                    	push 0	; arg count
 12823 00008D35 488B4510                	mov rax, ENV
 12824 00008D39 488B00                  	mov rax, qword [rax + 8 * 0]
 12825 00008D3C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 12826 00008D3F 803804                  	cmp byte [rax], T_closure
 12827 00008D42 0F85D3EE0000            	jne L_error_non_closure
 12828 00008D48 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12829 00008D4B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12830 00008D4E FF7500                  	push qword[rbp]
 12831 00008D51 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12832 00008D54 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12833 00008D58 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12834 00008D5C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12835 00008D60 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12836 00008D63 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12837 00008D66 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12838 00008D6B 4983C103                	add r9, 3 	 ;for getting to the params
 12839 00008D6F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12840 00008D73 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12841                                  .L_tc_recycle_frame_loop_006b:
 12842 00008D76 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12843 00008D79 7410                    	je .L_tc_recycle_frame_done_006b
 12844 00008D7B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12845 00008D7E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12846 00008D81 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12847 00008D85 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12848 00008D89 EBEB                    	jmp .L_tc_recycle_frame_loop_006b
 12849                                  .L_tc_recycle_frame_done_006b:
 12850 00008D8B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12851 00008D8C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12852 00008D90 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12853                                  .L_if_end_0031:
 12854                                  .L_if_end_0032:
 12855                                  .L_if_end_0033:
 12856 00008D93 E901060000              	jmp .L_if_end_003c
 12857                                  .L_if_else_003c:
 12858                                  	; preparing a non-tail-call
 12859 00008D98 488B4520                	mov rax, PARAM(0)	; param a
 12860 00008D9C 50                      	push rax
 12861 00008D9D 6A01                    	push 1	; arg count
 12862 00008D9F 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 12863 00008DA7 803805                  	cmp byte [rax], T_undefined
 12864 00008DAA 0F84E7ED0000            	je L_error_fvar_undefined
 12865 00008DB0 803804                  	cmp byte [rax], T_closure
 12866 00008DB3 0F8562EE0000            	jne L_error_non_closure
 12867 00008DB9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12868 00008DBC FF5009                  	call SOB_CLOSURE_CODE(rax)
 12869 00008DBF 483D[02000000]          	cmp rax, sob_boolean_false
 12870 00008DC5 0F849F020000            	je .L_if_else_003b
 12871                                  	; preparing a non-tail-call
 12872 00008DCB 488B4528                	mov rax, PARAM(1)	; param b
 12873 00008DCF 50                      	push rax
 12874 00008DD0 6A01                    	push 1	; arg count
 12875 00008DD2 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 12876 00008DDA 803805                  	cmp byte [rax], T_undefined
 12877 00008DDD 0F84B4ED0000            	je L_error_fvar_undefined
 12878 00008DE3 803804                  	cmp byte [rax], T_closure
 12879 00008DE6 0F852FEE0000            	jne L_error_non_closure
 12880 00008DEC FF7001                  	push SOB_CLOSURE_ENV(rax)
 12881 00008DEF FF5009                  	call SOB_CLOSURE_CODE(rax)
 12882 00008DF2 483D[02000000]          	cmp rax, sob_boolean_false
 12883 00008DF8 0F8499000000            	je .L_if_else_0036
 12884                                  	; preparing a tail-call
 12885                                  	; preparing a non-tail-call
 12886 00008DFE 488B4528                	mov rax, PARAM(1)	; param b
 12887 00008E02 50                      	push rax
 12888 00008E03 6A01                    	push 1	; arg count
 12889 00008E05 488B0425[B20F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 12890 00008E0D 803805                  	cmp byte [rax], T_undefined
 12891 00008E10 0F8481ED0000            	je L_error_fvar_undefined
 12892 00008E16 803804                  	cmp byte [rax], T_closure
 12893 00008E19 0F85FCED0000            	jne L_error_non_closure
 12894 00008E1F FF7001                  	push SOB_CLOSURE_ENV(rax)
 12895 00008E22 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12896 00008E25 50                      	push rax
 12897 00008E26 488B4520                	mov rax, PARAM(0)	; param a
 12898 00008E2A 50                      	push rax
 12899 00008E2B 6A02                    	push 2	; arg count
 12900 00008E2D 488B0425[3B0F0000]      	mov rax, qword [free_var_22]	; free var __bin-mul-qq
 12901 00008E35 803805                  	cmp byte [rax], T_undefined
 12902 00008E38 0F8459ED0000            	je L_error_fvar_undefined
 12903 00008E3E 803804                  	cmp byte [rax], T_closure
 12904 00008E41 0F85D4ED0000            	jne L_error_non_closure
 12905 00008E47 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12906 00008E4A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12907 00008E4D FF7500                  	push qword[rbp]
 12908 00008E50 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12909 00008E53 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12910 00008E57 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12911 00008E5B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12912 00008E5F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12913 00008E62 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12914 00008E65 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12915 00008E6A 4983C103                	add r9, 3 	 ;for getting to the params
 12916 00008E6E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12917 00008E72 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12918                                  .L_tc_recycle_frame_loop_006c:
 12919 00008E75 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12920 00008E78 7410                    	je .L_tc_recycle_frame_done_006c
 12921 00008E7A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12922 00008E7D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12923 00008E80 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12924 00008E84 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12925 00008E88 EBEB                    	jmp .L_tc_recycle_frame_loop_006c
 12926                                  .L_tc_recycle_frame_done_006c:
 12927 00008E8A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12928 00008E8B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12929 00008E8F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12930 00008E92 E9CE010000              	jmp .L_if_end_0036
 12931                                  .L_if_else_0036:
 12932                                  	; preparing a non-tail-call
 12933 00008E97 488B4528                	mov rax, PARAM(1)	; param b
 12934 00008E9B 50                      	push rax
 12935 00008E9C 6A01                    	push 1	; arg count
 12936 00008E9E 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 12937 00008EA6 803805                  	cmp byte [rax], T_undefined
 12938 00008EA9 0F84E8EC0000            	je L_error_fvar_undefined
 12939 00008EAF 803804                  	cmp byte [rax], T_closure
 12940 00008EB2 0F8563ED0000            	jne L_error_non_closure
 12941 00008EB8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12942 00008EBB FF5009                  	call SOB_CLOSURE_CODE(rax)
 12943 00008EBE 483D[02000000]          	cmp rax, sob_boolean_false
 12944 00008EC4 7476                    	je .L_if_else_0035
 12945                                  	; preparing a tail-call
 12946 00008EC6 488B4528                	mov rax, PARAM(1)	; param b
 12947 00008ECA 50                      	push rax
 12948 00008ECB 488B4520                	mov rax, PARAM(0)	; param a
 12949 00008ECF 50                      	push rax
 12950 00008ED0 6A02                    	push 2	; arg count
 12951 00008ED2 488B0425[3B0F0000]      	mov rax, qword [free_var_22]	; free var __bin-mul-qq
 12952 00008EDA 803805                  	cmp byte [rax], T_undefined
 12953 00008EDD 0F84B4EC0000            	je L_error_fvar_undefined
 12954 00008EE3 803804                  	cmp byte [rax], T_closure
 12955 00008EE6 0F852FED0000            	jne L_error_non_closure
 12956 00008EEC FF7001                  	push SOB_CLOSURE_ENV(rax)
 12957 00008EEF FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12958 00008EF2 FF7500                  	push qword[rbp]
 12959 00008EF5 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12960 00008EF8 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12961 00008EFC 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12962 00008F00 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12963 00008F04 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12964 00008F07 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12965 00008F0A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12966 00008F0F 4983C103                	add r9, 3 	 ;for getting to the params
 12967 00008F13 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12968 00008F17 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12969                                  .L_tc_recycle_frame_loop_006d:
 12970 00008F1A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12971 00008F1D 7410                    	je .L_tc_recycle_frame_done_006d
 12972 00008F1F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12973 00008F22 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12974 00008F25 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12975 00008F29 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12976 00008F2D EBEB                    	jmp .L_tc_recycle_frame_loop_006d
 12977                                  .L_tc_recycle_frame_done_006d:
 12978 00008F2F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12979 00008F30 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12980 00008F34 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12981 00008F37 E929010000              	jmp .L_if_end_0035
 12982                                  .L_if_else_0035:
 12983                                  	; preparing a non-tail-call
 12984 00008F3C 488B4528                	mov rax, PARAM(1)	; param b
 12985 00008F40 50                      	push rax
 12986 00008F41 6A01                    	push 1	; arg count
 12987 00008F43 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 12988 00008F4B 803805                  	cmp byte [rax], T_undefined
 12989 00008F4E 0F8443EC0000            	je L_error_fvar_undefined
 12990 00008F54 803804                  	cmp byte [rax], T_closure
 12991 00008F57 0F85BEEC0000            	jne L_error_non_closure
 12992 00008F5D FF7001                  	push SOB_CLOSURE_ENV(rax)
 12993 00008F60 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12994 00008F63 483D[02000000]          	cmp rax, sob_boolean_false
 12995 00008F69 0F8496000000            	je .L_if_else_0034
 12996                                  	; preparing a tail-call
 12997 00008F6F 488B4528                	mov rax, PARAM(1)	; param b
 12998 00008F73 50                      	push rax
 12999                                  	; preparing a non-tail-call
 13000 00008F74 488B4520                	mov rax, PARAM(0)	; param a
 13001 00008F78 50                      	push rax
 13002 00008F79 6A01                    	push 1	; arg count
 13003 00008F7B 488B0425[8C130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 13004 00008F83 803805                  	cmp byte [rax], T_undefined
 13005 00008F86 0F840BEC0000            	je L_error_fvar_undefined
 13006 00008F8C 803804                  	cmp byte [rax], T_closure
 13007 00008F8F 0F8586EC0000            	jne L_error_non_closure
 13008 00008F95 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13009 00008F98 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13010 00008F9B 50                      	push rax
 13011 00008F9C 6A02                    	push 2	; arg count
 13012 00008F9E 488B0425[4C0F0000]      	mov rax, qword [free_var_23]	; free var __bin-mul-rr
 13013 00008FA6 803805                  	cmp byte [rax], T_undefined
 13014 00008FA9 0F84E8EB0000            	je L_error_fvar_undefined
 13015 00008FAF 803804                  	cmp byte [rax], T_closure
 13016 00008FB2 0F8563EC0000            	jne L_error_non_closure
 13017 00008FB8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13018 00008FBB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13019 00008FBE FF7500                  	push qword[rbp]
 13020 00008FC1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13021 00008FC4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13022 00008FC8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13023 00008FCC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13024 00008FD0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13025 00008FD3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13026 00008FD6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13027 00008FDB 4983C103                	add r9, 3 	 ;for getting to the params
 13028 00008FDF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13029 00008FE3 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13030                                  .L_tc_recycle_frame_loop_006e:
 13031 00008FE6 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13032 00008FE9 7410                    	je .L_tc_recycle_frame_done_006e
 13033 00008FEB 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13034 00008FEE 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13035 00008FF1 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13036 00008FF5 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13037 00008FF9 EBEB                    	jmp .L_tc_recycle_frame_loop_006e
 13038                                  .L_tc_recycle_frame_done_006e:
 13039 00008FFB 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13040 00008FFC 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13041 00009000 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13042 00009003 EB60                    	jmp .L_if_end_0034
 13043                                  .L_if_else_0034:
 13044                                  	; preparing a tail-call
 13045 00009005 6A00                    	push 0	; arg count
 13046 00009007 488B4510                	mov rax, ENV
 13047 0000900B 488B00                  	mov rax, qword [rax + 8 * 0]
 13048 0000900E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 13049 00009011 803804                  	cmp byte [rax], T_closure
 13050 00009014 0F8501EC0000            	jne L_error_non_closure
 13051 0000901A FF7001                  	push SOB_CLOSURE_ENV(rax)
 13052 0000901D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13053 00009020 FF7500                  	push qword[rbp]
 13054 00009023 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13055 00009026 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13056 0000902A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13057 0000902E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13058 00009032 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13059 00009035 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13060 00009038 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13061 0000903D 4983C103                	add r9, 3 	 ;for getting to the params
 13062 00009041 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13063 00009045 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13064                                  .L_tc_recycle_frame_loop_006f:
 13065 00009048 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13066 0000904B 7410                    	je .L_tc_recycle_frame_done_006f
 13067 0000904D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13068 00009050 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13069 00009053 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13070 00009057 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13071 0000905B EBEB                    	jmp .L_tc_recycle_frame_loop_006f
 13072                                  .L_tc_recycle_frame_done_006f:
 13073 0000905D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13074 0000905E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13075 00009062 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13076                                  .L_if_end_0034:
 13077                                  .L_if_end_0035:
 13078                                  .L_if_end_0036:
 13079 00009065 E92F030000              	jmp .L_if_end_003b
 13080                                  .L_if_else_003b:
 13081                                  	; preparing a non-tail-call
 13082 0000906A 488B4520                	mov rax, PARAM(0)	; param a
 13083 0000906E 50                      	push rax
 13084 0000906F 6A01                    	push 1	; arg count
 13085 00009071 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 13086 00009079 803805                  	cmp byte [rax], T_undefined
 13087 0000907C 0F8415EB0000            	je L_error_fvar_undefined
 13088 00009082 803804                  	cmp byte [rax], T_closure
 13089 00009085 0F8590EB0000            	jne L_error_non_closure
 13090 0000908B FF7001                  	push SOB_CLOSURE_ENV(rax)
 13091 0000908E FF5009                  	call SOB_CLOSURE_CODE(rax)
 13092 00009091 483D[02000000]          	cmp rax, sob_boolean_false
 13093 00009097 0F849C020000            	je .L_if_else_003a
 13094                                  	; preparing a non-tail-call
 13095 0000909D 488B4528                	mov rax, PARAM(1)	; param b
 13096 000090A1 50                      	push rax
 13097 000090A2 6A01                    	push 1	; arg count
 13098 000090A4 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 13099 000090AC 803805                  	cmp byte [rax], T_undefined
 13100 000090AF 0F84E2EA0000            	je L_error_fvar_undefined
 13101 000090B5 803804                  	cmp byte [rax], T_closure
 13102 000090B8 0F855DEB0000            	jne L_error_non_closure
 13103 000090BE FF7001                  	push SOB_CLOSURE_ENV(rax)
 13104 000090C1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13105 000090C4 483D[02000000]          	cmp rax, sob_boolean_false
 13106 000090CA 0F8499000000            	je .L_if_else_0039
 13107                                  	; preparing a tail-call
 13108                                  	; preparing a non-tail-call
 13109 000090D0 488B4528                	mov rax, PARAM(1)	; param b
 13110 000090D4 50                      	push rax
 13111 000090D5 6A01                    	push 1	; arg count
 13112 000090D7 488B0425[BF130000]      	mov rax, qword [free_var_90]	; free var integer->real
 13113 000090DF 803805                  	cmp byte [rax], T_undefined
 13114 000090E2 0F84AFEA0000            	je L_error_fvar_undefined
 13115 000090E8 803804                  	cmp byte [rax], T_closure
 13116 000090EB 0F852AEB0000            	jne L_error_non_closure
 13117 000090F1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13118 000090F4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13119 000090F7 50                      	push rax
 13120 000090F8 488B4520                	mov rax, PARAM(0)	; param a
 13121 000090FC 50                      	push rax
 13122 000090FD 6A02                    	push 2	; arg count
 13123 000090FF 488B0425[4C0F0000]      	mov rax, qword [free_var_23]	; free var __bin-mul-rr
 13124 00009107 803805                  	cmp byte [rax], T_undefined
 13125 0000910A 0F8487EA0000            	je L_error_fvar_undefined
 13126 00009110 803804                  	cmp byte [rax], T_closure
 13127 00009113 0F8502EB0000            	jne L_error_non_closure
 13128 00009119 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13129 0000911C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13130 0000911F FF7500                  	push qword[rbp]
 13131 00009122 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13132 00009125 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13133 00009129 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13134 0000912D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13135 00009131 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13136 00009134 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13137 00009137 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13138 0000913C 4983C103                	add r9, 3 	 ;for getting to the params
 13139 00009140 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13140 00009144 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13141                                  .L_tc_recycle_frame_loop_0070:
 13142 00009147 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13143 0000914A 7410                    	je .L_tc_recycle_frame_done_0070
 13144 0000914C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13145 0000914F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13146 00009152 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13147 00009156 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13148 0000915A EBEB                    	jmp .L_tc_recycle_frame_loop_0070
 13149                                  .L_tc_recycle_frame_done_0070:
 13150 0000915C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13151 0000915D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13152 00009161 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13153 00009164 E9CE010000              	jmp .L_if_end_0039
 13154                                  .L_if_else_0039:
 13155                                  	; preparing a non-tail-call
 13156 00009169 488B4528                	mov rax, PARAM(1)	; param b
 13157 0000916D 50                      	push rax
 13158 0000916E 6A01                    	push 1	; arg count
 13159 00009170 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 13160 00009178 803805                  	cmp byte [rax], T_undefined
 13161 0000917B 0F8416EA0000            	je L_error_fvar_undefined
 13162 00009181 803804                  	cmp byte [rax], T_closure
 13163 00009184 0F8591EA0000            	jne L_error_non_closure
 13164 0000918A FF7001                  	push SOB_CLOSURE_ENV(rax)
 13165 0000918D FF5009                  	call SOB_CLOSURE_CODE(rax)
 13166 00009190 483D[02000000]          	cmp rax, sob_boolean_false
 13167 00009196 0F8499000000            	je .L_if_else_0038
 13168                                  	; preparing a tail-call
 13169                                  	; preparing a non-tail-call
 13170 0000919C 488B4528                	mov rax, PARAM(1)	; param b
 13171 000091A0 50                      	push rax
 13172 000091A1 6A01                    	push 1	; arg count
 13173 000091A3 488B0425[8C130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 13174 000091AB 803805                  	cmp byte [rax], T_undefined
 13175 000091AE 0F84E3E90000            	je L_error_fvar_undefined
 13176 000091B4 803804                  	cmp byte [rax], T_closure
 13177 000091B7 0F855EEA0000            	jne L_error_non_closure
 13178 000091BD FF7001                  	push SOB_CLOSURE_ENV(rax)
 13179 000091C0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13180 000091C3 50                      	push rax
 13181 000091C4 488B4520                	mov rax, PARAM(0)	; param a
 13182 000091C8 50                      	push rax
 13183 000091C9 6A02                    	push 2	; arg count
 13184 000091CB 488B0425[4C0F0000]      	mov rax, qword [free_var_23]	; free var __bin-mul-rr
 13185 000091D3 803805                  	cmp byte [rax], T_undefined
 13186 000091D6 0F84BBE90000            	je L_error_fvar_undefined
 13187 000091DC 803804                  	cmp byte [rax], T_closure
 13188 000091DF 0F8536EA0000            	jne L_error_non_closure
 13189 000091E5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13190 000091E8 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13191 000091EB FF7500                  	push qword[rbp]
 13192 000091EE 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13193 000091F1 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13194 000091F5 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13195 000091F9 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13196 000091FD 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13197 00009200 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13198 00009203 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13199 00009208 4983C103                	add r9, 3 	 ;for getting to the params
 13200 0000920C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13201 00009210 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13202                                  .L_tc_recycle_frame_loop_0071:
 13203 00009213 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13204 00009216 7410                    	je .L_tc_recycle_frame_done_0071
 13205 00009218 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13206 0000921B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13207 0000921E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13208 00009222 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13209 00009226 EBEB                    	jmp .L_tc_recycle_frame_loop_0071
 13210                                  .L_tc_recycle_frame_done_0071:
 13211 00009228 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13212 00009229 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13213 0000922D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13214 00009230 E902010000              	jmp .L_if_end_0038
 13215                                  .L_if_else_0038:
 13216                                  	; preparing a non-tail-call
 13217 00009235 488B4528                	mov rax, PARAM(1)	; param b
 13218 00009239 50                      	push rax
 13219 0000923A 6A01                    	push 1	; arg count
 13220 0000923C 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 13221 00009244 803805                  	cmp byte [rax], T_undefined
 13222 00009247 0F844AE90000            	je L_error_fvar_undefined
 13223 0000924D 803804                  	cmp byte [rax], T_closure
 13224 00009250 0F85C5E90000            	jne L_error_non_closure
 13225 00009256 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13226 00009259 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13227 0000925C 483D[02000000]          	cmp rax, sob_boolean_false
 13228 00009262 7473                    	je .L_if_else_0037
 13229                                  	; preparing a tail-call
 13230 00009264 488B4528                	mov rax, PARAM(1)	; param b
 13231 00009268 50                      	push rax
 13232 00009269 488B4520                	mov rax, PARAM(0)	; param a
 13233 0000926D 50                      	push rax
 13234 0000926E 6A02                    	push 2	; arg count
 13235 00009270 488B0425[4C0F0000]      	mov rax, qword [free_var_23]	; free var __bin-mul-rr
 13236 00009278 803805                  	cmp byte [rax], T_undefined
 13237 0000927B 0F8416E90000            	je L_error_fvar_undefined
 13238 00009281 803804                  	cmp byte [rax], T_closure
 13239 00009284 0F8591E90000            	jne L_error_non_closure
 13240 0000928A FF7001                  	push SOB_CLOSURE_ENV(rax)
 13241 0000928D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13242 00009290 FF7500                  	push qword[rbp]
 13243 00009293 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13244 00009296 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13245 0000929A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13246 0000929E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13247 000092A2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13248 000092A5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13249 000092A8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13250 000092AD 4983C103                	add r9, 3 	 ;for getting to the params
 13251 000092B1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13252 000092B5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13253                                  .L_tc_recycle_frame_loop_0072:
 13254 000092B8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13255 000092BB 7410                    	je .L_tc_recycle_frame_done_0072
 13256 000092BD 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13257 000092C0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13258 000092C3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13259 000092C7 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13260 000092CB EBEB                    	jmp .L_tc_recycle_frame_loop_0072
 13261                                  .L_tc_recycle_frame_done_0072:
 13262 000092CD 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13263 000092CE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13264 000092D2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13265 000092D5 EB60                    	jmp .L_if_end_0037
 13266                                  .L_if_else_0037:
 13267                                  	; preparing a tail-call
 13268 000092D7 6A00                    	push 0	; arg count
 13269 000092D9 488B4510                	mov rax, ENV
 13270 000092DD 488B00                  	mov rax, qword [rax + 8 * 0]
 13271 000092E0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 13272 000092E3 803804                  	cmp byte [rax], T_closure
 13273 000092E6 0F852FE90000            	jne L_error_non_closure
 13274 000092EC FF7001                  	push SOB_CLOSURE_ENV(rax)
 13275 000092EF FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13276 000092F2 FF7500                  	push qword[rbp]
 13277 000092F5 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13278 000092F8 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13279 000092FC 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13280 00009300 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13281 00009304 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13282 00009307 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13283 0000930A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13284 0000930F 4983C103                	add r9, 3 	 ;for getting to the params
 13285 00009313 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13286 00009317 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13287                                  .L_tc_recycle_frame_loop_0073:
 13288 0000931A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13289 0000931D 7410                    	je .L_tc_recycle_frame_done_0073
 13290 0000931F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13291 00009322 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13292 00009325 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13293 00009329 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13294 0000932D EBEB                    	jmp .L_tc_recycle_frame_loop_0073
 13295                                  .L_tc_recycle_frame_done_0073:
 13296 0000932F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13297 00009330 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13298 00009334 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13299                                  .L_if_end_0037:
 13300                                  .L_if_end_0038:
 13301                                  .L_if_end_0039:
 13302 00009337 EB60                    	jmp .L_if_end_003a
 13303                                  .L_if_else_003a:
 13304                                  	; preparing a tail-call
 13305 00009339 6A00                    	push 0	; arg count
 13306 0000933B 488B4510                	mov rax, ENV
 13307 0000933F 488B00                  	mov rax, qword [rax + 8 * 0]
 13308 00009342 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 13309 00009345 803804                  	cmp byte [rax], T_closure
 13310 00009348 0F85CDE80000            	jne L_error_non_closure
 13311 0000934E FF7001                  	push SOB_CLOSURE_ENV(rax)
 13312 00009351 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13313 00009354 FF7500                  	push qword[rbp]
 13314 00009357 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13315 0000935A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13316 0000935E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13317 00009362 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13318 00009366 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13319 00009369 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13320 0000936C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13321 00009371 4983C103                	add r9, 3 	 ;for getting to the params
 13322 00009375 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13323 00009379 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13324                                  .L_tc_recycle_frame_loop_0074:
 13325 0000937C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13326 0000937F 7410                    	je .L_tc_recycle_frame_done_0074
 13327 00009381 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13328 00009384 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13329 00009387 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13330 0000938B 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13331 0000938F EBEB                    	jmp .L_tc_recycle_frame_loop_0074
 13332                                  .L_tc_recycle_frame_done_0074:
 13333 00009391 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13334 00009392 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13335 00009396 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13336                                  .L_if_end_003a:
 13337                                  .L_if_end_003b:
 13338                                  .L_if_end_003c:
 13339 00009399 C9                      	leave
 13340 0000939A C22000                  	ret AND_KILL_FRAME(2)
 13341                                  .L_lambda_simple_end_0044:	; new closure is in rax
 13342 0000939D 50                      	push rax
 13343 0000939E 6A01                    	push 1	; arg count
 13344 000093A0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13345 000093A5 E81AE90000              	call malloc
 13346 000093AA 50                      	push rax
 13347 000093AB BF08000000              	mov rdi, 8 * 1	; new rib
 13348 000093B0 E80FE90000              	call malloc
 13349 000093B5 50                      	push rax
 13350 000093B6 BF10000000              	mov rdi, 8 * 2	; extended env
 13351 000093BB E804E90000              	call malloc
 13352 000093C0 488B7D10                	mov rdi, ENV
 13353 000093C4 BE00000000              	mov rsi, 0
 13354 000093C9 BA01000000              	mov rdx, 1
 13355                                  .L_lambda_simple_env_loop_0045:	; ext_env[i + 1] <-- env[i]
 13356 000093CE 4883FE01                	cmp rsi, 1
 13357 000093D2 7410                    	je .L_lambda_simple_env_end_0045
 13358 000093D4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13359 000093D8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13360 000093DC 48FFC6                  	inc rsi
 13361 000093DF 48FFC2                  	inc rdx
 13362 000093E2 EBEA                    	jmp .L_lambda_simple_env_loop_0045
 13363                                  .L_lambda_simple_env_end_0045:
 13364 000093E4 5B                      	pop rbx
 13365 000093E5 BE00000000              	mov rsi, 0
 13366                                  .L_lambda_simple_params_loop_0045:	; copy params
 13367 000093EA 4883FE01                	cmp rsi, 1
 13368 000093EE 740E                    	je .L_lambda_simple_params_end_0045
 13369 000093F0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13370 000093F5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13371 000093F9 48FFC6                  	inc rsi
 13372 000093FC EBEC                    	jmp .L_lambda_simple_params_loop_0045
 13373                                  .L_lambda_simple_params_end_0045:
 13374 000093FE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13375 00009401 4889C3                  	mov rbx, rax
 13376 00009404 58                      	pop rax
 13377 00009405 C60004                  	mov byte [rax], T_closure
 13378 00009408 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13379 0000940C 48C74009[19940000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0045
 13380 00009414 E98C020000              	jmp .L_lambda_simple_end_0045
 13381                                  .L_lambda_simple_code_0045:	; lambda-simple body
 13382 00009419 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13383 0000941F 740B                    	je .L_lambda_simple_arity_check_ok_0045
 13384 00009421 FF742410                	push qword [rsp + 8 * 2]
 13385 00009425 6A01                    	push 1
 13386 00009427 E951E80000              	jmp L_error_incorrect_arity_simple
 13387                                  .L_lambda_simple_arity_check_ok_0045:
 13388 0000942C C8000000                	enter 0, 0
 13389 00009430 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13390 00009435 E88AE80000              	call malloc
 13391 0000943A 50                      	push rax
 13392 0000943B BF08000000              	mov rdi, 8 * 1	; new rib
 13393 00009440 E87FE80000              	call malloc
 13394 00009445 50                      	push rax
 13395 00009446 BF18000000              	mov rdi, 8 * 3	; extended env
 13396 0000944B E874E80000              	call malloc
 13397 00009450 488B7D10                	mov rdi, ENV
 13398 00009454 BE00000000              	mov rsi, 0
 13399 00009459 BA01000000              	mov rdx, 1
 13400                                  .L_lambda_opt_env_loop_000c:	; ext_env[i + 1] <-- env[i]
 13401 0000945E 4883FE02                	cmp rsi, 2
 13402 00009462 7410                    	je .L_lambda_opt_env_end_000c
 13403 00009464 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13404 00009468 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13405 0000946C 48FFC6                  	inc rsi
 13406 0000946F 48FFC2                  	inc rdx
 13407 00009472 EBEA                    	jmp .L_lambda_opt_env_loop_000c
 13408                                  .L_lambda_opt_env_end_000c:
 13409 00009474 5B                      	pop rbx
 13410 00009475 BE00000000              	mov rsi, 0
 13411                                  .L_lambda_opt_params_loop_000c:	; copy params
 13412 0000947A 4883FE01                	cmp rsi, 1
 13413 0000947E 740E                    	je .L_lambda_opt_params_end_000c
 13414 00009480 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13415 00009485 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13416 00009489 48FFC6                  	inc rsi
 13417 0000948C EBEC                    	jmp .L_lambda_opt_params_loop_000c
 13418                                  .L_lambda_opt_params_end_000c:
 13419 0000948E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13420 00009491 4889C3                  	mov rbx, rax
 13421 00009494 58                      	pop rax
 13422 00009495 C60004                  	mov byte [rax], T_closure
 13423 00009498 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13424 0000949C 48C74009[A9940000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000c
 13425 000094A4 E9F8010000              	jmp .L_lambda_opt_end_000c
 13426                                  .L_lambda_opt_code_000c:	; lambda-opt body
 13427 000094A9 48837C241000            	cmp qword [rsp + 8 * 2], 0
 13428 000094AF 7411                    	je .L_lambda_opt_arity_check_exact_000c
 13429 000094B1 0F8FCA000000            	jg .L_lambda_opt_arity_check_more_000c
 13430 000094B7 FF742410                	push qword [rsp + 8 * 2]
 13431 000094BB 6A00                    	push 0
 13432 000094BD E9CFE70000              	jmp L_error_incorrect_arity_opt
 13433                                  .L_lambda_opt_arity_check_exact_000c:
 13434 000094C2 4883EC08                	sub rsp, 8
 13435 000094C6 488B442408              	mov rax, qword[rsp + 8 *1]
 13436 000094CB 48890424                	mov qword[rsp], rax  
 13437 000094CF 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 13438 000094D4 4889442408              	mov qword[rsp + 8 * 1], rax
 13439 000094D9 B801000000              	mov rax, 1
 13440 000094DE 4889442410              	mov qword[rsp + 8 *2], rax
 13441 000094E3 48B8-                   	mov rax, sob_nil
 13441 000094E5 [0100000000000000] 
 13442 000094ED 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 13443 000094F2 C8000000                	enter 0, 0
 13444                                  	; preparing a tail-call
 13445 000094F6 488B4520                	mov rax, PARAM(0)	; param s
 13446 000094FA 50                      	push rax
 13447 000094FB 48B8-                   	mov rax, L_constants + 2270
 13447 000094FD [DE08000000000000] 
 13448 00009505 50                      	push rax
 13449 00009506 488B4510                	mov rax, ENV
 13450 0000950A 488B00                  	mov rax, qword [rax + 8 * 0]
 13451 0000950D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin*
 13452 00009510 50                      	push rax
 13453 00009511 6A03                    	push 3	; arg count
 13454 00009513 488B0425[6A130000]      	mov rax, qword [free_var_85]	; free var fold-left
 13455 0000951B 803805                  	cmp byte [rax], T_undefined
 13456 0000951E 0F8473E60000            	je L_error_fvar_undefined
 13457 00009524 803804                  	cmp byte [rax], T_closure
 13458 00009527 0F85EEE60000            	jne L_error_non_closure
 13459 0000952D FF7001                  	push SOB_CLOSURE_ENV(rax)
 13460 00009530 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13461 00009533 FF7500                  	push qword[rbp]
 13462 00009536 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13463 00009539 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13464 0000953D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13465 00009541 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13466 00009545 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13467 00009548 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13468 0000954B 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13469 00009550 4983C103                	add r9, 3 	 ;for getting to the params
 13470 00009554 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13471 00009558 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13472                                  .L_tc_recycle_frame_loop_0076:
 13473 0000955B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13474 0000955E 7410                    	je .L_tc_recycle_frame_done_0076
 13475 00009560 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13476 00009563 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13477 00009566 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13478 0000956A 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13479 0000956E EBEB                    	jmp .L_tc_recycle_frame_loop_0076
 13480                                  .L_tc_recycle_frame_done_0076:
 13481 00009570 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13482 00009571 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13483 00009575 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13484 00009578 C9                      	leave
 13485 00009579 C21800                  	ret AND_KILL_FRAME(1)
 13486 0000957C E920010000              	jmp .L_lambda_opt_end_000c	; new closure is in rax
 13487                                  .L_lambda_opt_arity_check_more_000c:
 13488 00009581 488B442410              	mov rax, qword[rsp + 2 * 8]
 13489 00009586 4889C7                  	mov rdi, rax
 13490 00009589 49B9-                   	mov r9, sob_nil
 13490 0000958B [0100000000000000] 
 13491 00009593 4989F8                  	mov r8, rdi
 13492                                  .L_lambda_opt_stack_shrink_loop_000c:
 13493 00009596 4983F800                	cmp r8, 0
 13494 0000959A 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_000c
 13495 0000959C 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)] 	;rbx is the top of the stack
 13496 000095A1 BF11000000              	mov rdi, 1+8+8	;for pair
 13497 000095A6 E819E70000              	call malloc	 ;to create the pair in the stack
 13498 000095AB C60021                  	mov byte [rax], T_pair	 ; to make it a pair
 13499 000095AE 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
 13500 000095B2 4C894809                 	mov qword[rax+1+8],r9
 13501 000095B6 4989C1                  	mov r9 , rax	 ; for the recursion 
 13502 000095B9 49FFC8                  	dec r8
 13503 000095BC EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_000c
 13504                                  .L_lambda_opt_stack_shrink_loop_exit_000c:
 13505 000095BE 488B442410              	mov rax, qword[rsp + 2 * 8]
 13506 000095C3 BF01000000              	mov rdi, 1
 13507 000095C8 4829F8                  	sub rax, rdi
 13508 000095CB 4889C7                  	mov rdi, rax
 13509 000095CE 486BC008                	imul rax,8
 13510 000095D2 4801C4                  	add rsp, rax
 13511 000095D5 4889E0                  	mov rax, rsp
 13512 000095D8 4989F8                  	mov r8, rdi
 13513 000095DB 4D6BC008                	imul r8, 8
 13514 000095DF 4C29C0                  	sub rax, r8
 13515 000095E2 4989C2                  	mov r10, rax	; holds the original ret in the stack
 13516 000095E5 4983C218                	add r10, 8*3
 13517 000095E9 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
 13518 000095ED 4C8B00                  	mov r8, qword[rax] 	;arg count = r8
 13519 000095F0 4D6BC008                	imul r8,8
 13520 000095F4 4C01C0                  	add rax, r8
 13521 000095F7 4C8908                  	mov qword[rax] ,r9
 13522 000095FA 4983EA18                 	sub r10, 8*3
 13523 000095FE 48C744241001000000      	mov qword [rsp+2*8], 1
 13524 00009607 498B4208                	mov rax, qword[r10 + 1 * 8]
 13525 0000960B 4889442408              	mov qword[rsp + 1*8] ,rax
 13526 00009610 498B02                  	mov rax, qword[r10]
 13527 00009613 48890424                	mov qword[rsp], rax
 13528 00009617 C8000000                	enter 0, 0
 13529                                  	; preparing a tail-call
 13530 0000961B 488B4520                	mov rax, PARAM(0)	; param s
 13531 0000961F 50                      	push rax
 13532 00009620 48B8-                   	mov rax, L_constants + 2270
 13532 00009622 [DE08000000000000] 
 13533 0000962A 50                      	push rax
 13534 0000962B 488B4510                	mov rax, ENV
 13535 0000962F 488B00                  	mov rax, qword [rax + 8 * 0]
 13536 00009632 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin*
 13537 00009635 50                      	push rax
 13538 00009636 6A03                    	push 3	; arg count
 13539 00009638 488B0425[6A130000]      	mov rax, qword [free_var_85]	; free var fold-left
 13540 00009640 803805                  	cmp byte [rax], T_undefined
 13541 00009643 0F844EE50000            	je L_error_fvar_undefined
 13542 00009649 803804                  	cmp byte [rax], T_closure
 13543 0000964C 0F85C9E50000            	jne L_error_non_closure
 13544 00009652 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13545 00009655 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13546 00009658 FF7500                  	push qword[rbp]
 13547 0000965B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13548 0000965E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13549 00009662 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13550 00009666 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13551 0000966A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13552 0000966D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13553 00009670 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13554 00009675 4983C103                	add r9, 3 	 ;for getting to the params
 13555 00009679 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13556 0000967D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13557                                  .L_tc_recycle_frame_loop_0075:
 13558 00009680 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13559 00009683 7410                    	je .L_tc_recycle_frame_done_0075
 13560 00009685 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13561 00009688 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13562 0000968B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13563 0000968F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13564 00009693 EBEB                    	jmp .L_tc_recycle_frame_loop_0075
 13565                                  .L_tc_recycle_frame_done_0075:
 13566 00009695 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13567 00009696 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13568 0000969A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13569 0000969D C9                      	leave
 13570 0000969E C21800                  	ret AND_KILL_FRAME(1)
 13571                                  .L_lambda_opt_end_000c:	; new closure is in rax
 13572 000096A1 C9                      	leave
 13573 000096A2 C21800                  	ret AND_KILL_FRAME(1)
 13574                                  .L_lambda_simple_end_0045:	; new closure is in rax
 13575 000096A5 803804                  	cmp byte [rax], T_closure
 13576 000096A8 0F856DE50000            	jne L_error_non_closure
 13577 000096AE FF7001                  	push SOB_CLOSURE_ENV(rax)
 13578 000096B1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13579 000096B4 FF7500                  	push qword[rbp]
 13580 000096B7 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13581 000096BA 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13582 000096BE 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13583 000096C2 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13584 000096C6 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13585 000096C9 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13586 000096CC 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13587 000096D1 4983C103                	add r9, 3 	 ;for getting to the params
 13588 000096D5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13589 000096D9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13590                                  .L_tc_recycle_frame_loop_0077:
 13591 000096DC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13592 000096DF 7410                    	je .L_tc_recycle_frame_done_0077
 13593 000096E1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13594 000096E4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13595 000096E7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13596 000096EB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13597 000096EF EBEB                    	jmp .L_tc_recycle_frame_loop_0077
 13598                                  .L_tc_recycle_frame_done_0077:
 13599 000096F1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13600 000096F2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13601 000096F6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13602 000096F9 C9                      	leave
 13603 000096FA C21800                  	ret AND_KILL_FRAME(1)
 13604                                  .L_lambda_simple_end_0043:	; new closure is in rax
 13605 000096FD 803804                  	cmp byte [rax], T_closure
 13606 00009700 0F8515E50000            	jne L_error_non_closure
 13607 00009706 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13608 00009709 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13609 0000970C 48890425[C50D0000]      	mov qword [free_var_0], rax
 13610 00009714 48B8-                   	mov rax, sob_void
 13610 00009716 [0000000000000000] 
 13611                                  
 13612 0000971E 4889C7                  	mov rdi, rax
 13613 00009721 E8F3E70000              	call print_sexpr_if_not_void
 13614                                  	; preparing a non-tail-call
 13615 00009726 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13616 0000972B E894E50000              	call malloc
 13617 00009730 50                      	push rax
 13618 00009731 BF00000000              	mov rdi, 8 * 0	; new rib
 13619 00009736 E889E50000              	call malloc
 13620 0000973B 50                      	push rax
 13621 0000973C BF08000000              	mov rdi, 8 * 1	; extended env
 13622 00009741 E87EE50000              	call malloc
 13623 00009746 488B7D10                	mov rdi, ENV
 13624 0000974A BE00000000              	mov rsi, 0
 13625 0000974F BA01000000              	mov rdx, 1
 13626                                  .L_lambda_simple_env_loop_0046:	; ext_env[i + 1] <-- env[i]
 13627 00009754 4883FE00                	cmp rsi, 0
 13628 00009758 7410                    	je .L_lambda_simple_env_end_0046
 13629 0000975A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13630 0000975E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13631 00009762 48FFC6                  	inc rsi
 13632 00009765 48FFC2                  	inc rdx
 13633 00009768 EBEA                    	jmp .L_lambda_simple_env_loop_0046
 13634                                  .L_lambda_simple_env_end_0046:
 13635 0000976A 5B                      	pop rbx
 13636 0000976B BE00000000              	mov rsi, 0
 13637                                  .L_lambda_simple_params_loop_0046:	; copy params
 13638 00009770 4883FE00                	cmp rsi, 0
 13639 00009774 740E                    	je .L_lambda_simple_params_end_0046
 13640 00009776 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13641 0000977B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13642 0000977F 48FFC6                  	inc rsi
 13643 00009782 EBEC                    	jmp .L_lambda_simple_params_loop_0046
 13644                                  .L_lambda_simple_params_end_0046:
 13645 00009784 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13646 00009787 4889C3                  	mov rbx, rax
 13647 0000978A 58                      	pop rax
 13648 0000978B C60004                  	mov byte [rax], T_closure
 13649 0000978E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13650 00009792 48C74009[9F970000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0046
 13651 0000979A E998000000              	jmp .L_lambda_simple_end_0046
 13652                                  .L_lambda_simple_code_0046:	; lambda-simple body
 13653 0000979F 48837C241000            	cmp qword [rsp + 8 * 2], 0
 13654 000097A5 740B                    	je .L_lambda_simple_arity_check_ok_0046
 13655 000097A7 FF742410                	push qword [rsp + 8 * 2]
 13656 000097AB 6A00                    	push 0
 13657 000097AD E9CBE40000              	jmp L_error_incorrect_arity_simple
 13658                                  .L_lambda_simple_arity_check_ok_0046:
 13659 000097B2 C8000000                	enter 0, 0
 13660                                  	; preparing a tail-call
 13661 000097B6 48B8-                   	mov rax, L_constants + 2187
 13661 000097B8 [8B08000000000000] 
 13662 000097C0 50                      	push rax
 13663 000097C1 48B8-                   	mov rax, L_constants + 2298
 13663 000097C3 [FA08000000000000] 
 13664 000097CB 50                      	push rax
 13665 000097CC 6A02                    	push 2	; arg count
 13666 000097CE 488B0425[37130000]      	mov rax, qword [free_var_82]	; free var error
 13667 000097D6 803805                  	cmp byte [rax], T_undefined
 13668 000097D9 0F84B8E30000            	je L_error_fvar_undefined
 13669 000097DF 803804                  	cmp byte [rax], T_closure
 13670 000097E2 0F8533E40000            	jne L_error_non_closure
 13671 000097E8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13672 000097EB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13673 000097EE FF7500                  	push qword[rbp]
 13674 000097F1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13675 000097F4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13676 000097F8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13677 000097FC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13678 00009800 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13679 00009803 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13680 00009806 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13681 0000980B 4983C103                	add r9, 3 	 ;for getting to the params
 13682 0000980F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13683 00009813 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13684                                  .L_tc_recycle_frame_loop_0078:
 13685 00009816 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13686 00009819 7410                    	je .L_tc_recycle_frame_done_0078
 13687 0000981B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13688 0000981E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13689 00009821 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13690 00009825 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13691 00009829 EBEB                    	jmp .L_tc_recycle_frame_loop_0078
 13692                                  .L_tc_recycle_frame_done_0078:
 13693 0000982B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13694 0000982C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13695 00009830 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13696 00009833 C9                      	leave
 13697 00009834 C21000                  	ret AND_KILL_FRAME(0)
 13698                                  .L_lambda_simple_end_0046:	; new closure is in rax
 13699 00009837 50                      	push rax
 13700 00009838 6A01                    	push 1	; arg count
 13701 0000983A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13702 0000983F E880E40000              	call malloc
 13703 00009844 50                      	push rax
 13704 00009845 BF00000000              	mov rdi, 8 * 0	; new rib
 13705 0000984A E875E40000              	call malloc
 13706 0000984F 50                      	push rax
 13707 00009850 BF08000000              	mov rdi, 8 * 1	; extended env
 13708 00009855 E86AE40000              	call malloc
 13709 0000985A 488B7D10                	mov rdi, ENV
 13710 0000985E BE00000000              	mov rsi, 0
 13711 00009863 BA01000000              	mov rdx, 1
 13712                                  .L_lambda_simple_env_loop_0047:	; ext_env[i + 1] <-- env[i]
 13713 00009868 4883FE00                	cmp rsi, 0
 13714 0000986C 7410                    	je .L_lambda_simple_env_end_0047
 13715 0000986E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13716 00009872 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13717 00009876 48FFC6                  	inc rsi
 13718 00009879 48FFC2                  	inc rdx
 13719 0000987C EBEA                    	jmp .L_lambda_simple_env_loop_0047
 13720                                  .L_lambda_simple_env_end_0047:
 13721 0000987E 5B                      	pop rbx
 13722 0000987F BE00000000              	mov rsi, 0
 13723                                  .L_lambda_simple_params_loop_0047:	; copy params
 13724 00009884 4883FE00                	cmp rsi, 0
 13725 00009888 740E                    	je .L_lambda_simple_params_end_0047
 13726 0000988A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13727 0000988F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13728 00009893 48FFC6                  	inc rsi
 13729 00009896 EBEC                    	jmp .L_lambda_simple_params_loop_0047
 13730                                  .L_lambda_simple_params_end_0047:
 13731 00009898 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13732 0000989B 4889C3                  	mov rbx, rax
 13733 0000989E 58                      	pop rax
 13734 0000989F C60004                  	mov byte [rax], T_closure
 13735 000098A2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13736 000098A6 48C74009[B3980000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0047
 13737 000098AE E97A100000              	jmp .L_lambda_simple_end_0047
 13738                                  .L_lambda_simple_code_0047:	; lambda-simple body
 13739 000098B3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13740 000098B9 740B                    	je .L_lambda_simple_arity_check_ok_0047
 13741 000098BB FF742410                	push qword [rsp + 8 * 2]
 13742 000098BF 6A01                    	push 1
 13743 000098C1 E9B7E30000              	jmp L_error_incorrect_arity_simple
 13744                                  .L_lambda_simple_arity_check_ok_0047:
 13745 000098C6 C8000000                	enter 0, 0
 13746                                  	; preparing a tail-call
 13747 000098CA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13748 000098CF E8F0E30000              	call malloc
 13749 000098D4 50                      	push rax
 13750 000098D5 BF08000000              	mov rdi, 8 * 1	; new rib
 13751 000098DA E8E5E30000              	call malloc
 13752 000098DF 50                      	push rax
 13753 000098E0 BF10000000              	mov rdi, 8 * 2	; extended env
 13754 000098E5 E8DAE30000              	call malloc
 13755 000098EA 488B7D10                	mov rdi, ENV
 13756 000098EE BE00000000              	mov rsi, 0
 13757 000098F3 BA01000000              	mov rdx, 1
 13758                                  .L_lambda_simple_env_loop_0048:	; ext_env[i + 1] <-- env[i]
 13759 000098F8 4883FE01                	cmp rsi, 1
 13760 000098FC 7410                    	je .L_lambda_simple_env_end_0048
 13761 000098FE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13762 00009902 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13763 00009906 48FFC6                  	inc rsi
 13764 00009909 48FFC2                  	inc rdx
 13765 0000990C EBEA                    	jmp .L_lambda_simple_env_loop_0048
 13766                                  .L_lambda_simple_env_end_0048:
 13767 0000990E 5B                      	pop rbx
 13768 0000990F BE00000000              	mov rsi, 0
 13769                                  .L_lambda_simple_params_loop_0048:	; copy params
 13770 00009914 4883FE01                	cmp rsi, 1
 13771 00009918 740E                    	je .L_lambda_simple_params_end_0048
 13772 0000991A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13773 0000991F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13774 00009923 48FFC6                  	inc rsi
 13775 00009926 EBEC                    	jmp .L_lambda_simple_params_loop_0048
 13776                                  .L_lambda_simple_params_end_0048:
 13777 00009928 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13778 0000992B 4889C3                  	mov rbx, rax
 13779 0000992E 58                      	pop rax
 13780 0000992F C60004                  	mov byte [rax], T_closure
 13781 00009932 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13782 00009936 48C74009[43990000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0048
 13783 0000993E E9EE080000              	jmp .L_lambda_simple_end_0048
 13784                                  .L_lambda_simple_code_0048:	; lambda-simple body
 13785 00009943 48837C241002            	cmp qword [rsp + 8 * 2], 2
 13786 00009949 740B                    	je .L_lambda_simple_arity_check_ok_0048
 13787 0000994B FF742410                	push qword [rsp + 8 * 2]
 13788 0000994F 6A02                    	push 2
 13789 00009951 E927E30000              	jmp L_error_incorrect_arity_simple
 13790                                  .L_lambda_simple_arity_check_ok_0048:
 13791 00009956 C8000000                	enter 0, 0
 13792                                  	; preparing a non-tail-call
 13793 0000995A 488B4520                	mov rax, PARAM(0)	; param a
 13794 0000995E 50                      	push rax
 13795 0000995F 6A01                    	push 1	; arg count
 13796 00009961 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 13797 00009969 803805                  	cmp byte [rax], T_undefined
 13798 0000996C 0F8425E20000            	je L_error_fvar_undefined
 13799 00009972 803804                  	cmp byte [rax], T_closure
 13800 00009975 0F85A0E20000            	jne L_error_non_closure
 13801 0000997B FF7001                  	push SOB_CLOSURE_ENV(rax)
 13802 0000997E FF5009                  	call SOB_CLOSURE_CODE(rax)
 13803 00009981 483D[02000000]          	cmp rax, sob_boolean_false
 13804 00009987 0F849F020000            	je .L_if_else_0048
 13805                                  	; preparing a non-tail-call
 13806 0000998D 488B4528                	mov rax, PARAM(1)	; param b
 13807 00009991 50                      	push rax
 13808 00009992 6A01                    	push 1	; arg count
 13809 00009994 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 13810 0000999C 803805                  	cmp byte [rax], T_undefined
 13811 0000999F 0F84F2E10000            	je L_error_fvar_undefined
 13812 000099A5 803804                  	cmp byte [rax], T_closure
 13813 000099A8 0F856DE20000            	jne L_error_non_closure
 13814 000099AE FF7001                  	push SOB_CLOSURE_ENV(rax)
 13815 000099B1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13816 000099B4 483D[02000000]          	cmp rax, sob_boolean_false
 13817 000099BA 7476                    	je .L_if_else_003f
 13818                                  	; preparing a tail-call
 13819 000099BC 488B4528                	mov rax, PARAM(1)	; param b
 13820 000099C0 50                      	push rax
 13821 000099C1 488B4520                	mov rax, PARAM(0)	; param a
 13822 000099C5 50                      	push rax
 13823 000099C6 6A02                    	push 2	; arg count
 13824 000099C8 488B0425[C40E0000]      	mov rax, qword [free_var_15]	; free var __bin-div-zz
 13825 000099D0 803805                  	cmp byte [rax], T_undefined
 13826 000099D3 0F84BEE10000            	je L_error_fvar_undefined
 13827 000099D9 803804                  	cmp byte [rax], T_closure
 13828 000099DC 0F8539E20000            	jne L_error_non_closure
 13829 000099E2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13830 000099E5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13831 000099E8 FF7500                  	push qword[rbp]
 13832 000099EB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13833 000099EE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13834 000099F2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13835 000099F6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13836 000099FA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13837 000099FD 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13838 00009A00 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13839 00009A05 4983C103                	add r9, 3 	 ;for getting to the params
 13840 00009A09 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13841 00009A0D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13842                                  .L_tc_recycle_frame_loop_0079:
 13843 00009A10 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13844 00009A13 7410                    	je .L_tc_recycle_frame_done_0079
 13845 00009A15 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13846 00009A18 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13847 00009A1B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13848 00009A1F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13849 00009A23 EBEB                    	jmp .L_tc_recycle_frame_loop_0079
 13850                                  .L_tc_recycle_frame_done_0079:
 13851 00009A25 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13852 00009A26 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13853 00009A2A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13854 00009A2D E9F5010000              	jmp .L_if_end_003f
 13855                                  .L_if_else_003f:
 13856                                  	; preparing a non-tail-call
 13857 00009A32 488B4528                	mov rax, PARAM(1)	; param b
 13858 00009A36 50                      	push rax
 13859 00009A37 6A01                    	push 1	; arg count
 13860 00009A39 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 13861 00009A41 803805                  	cmp byte [rax], T_undefined
 13862 00009A44 0F844DE10000            	je L_error_fvar_undefined
 13863 00009A4A 803804                  	cmp byte [rax], T_closure
 13864 00009A4D 0F85C8E10000            	jne L_error_non_closure
 13865 00009A53 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13866 00009A56 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13867 00009A59 483D[02000000]          	cmp rax, sob_boolean_false
 13868 00009A5F 0F8499000000            	je .L_if_else_003e
 13869                                  	; preparing a tail-call
 13870 00009A65 488B4528                	mov rax, PARAM(1)	; param b
 13871 00009A69 50                      	push rax
 13872                                  	; preparing a non-tail-call
 13873 00009A6A 488B4520                	mov rax, PARAM(0)	; param a
 13874 00009A6E 50                      	push rax
 13875 00009A6F 6A01                    	push 1	; arg count
 13876 00009A71 488B0425[B20F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 13877 00009A79 803805                  	cmp byte [rax], T_undefined
 13878 00009A7C 0F8415E10000            	je L_error_fvar_undefined
 13879 00009A82 803804                  	cmp byte [rax], T_closure
 13880 00009A85 0F8590E10000            	jne L_error_non_closure
 13881 00009A8B FF7001                  	push SOB_CLOSURE_ENV(rax)
 13882 00009A8E FF5009                  	call SOB_CLOSURE_CODE(rax)
 13883 00009A91 50                      	push rax
 13884 00009A92 6A02                    	push 2	; arg count
 13885 00009A94 488B0425[A20E0000]      	mov rax, qword [free_var_13]	; free var __bin-div-qq
 13886 00009A9C 803805                  	cmp byte [rax], T_undefined
 13887 00009A9F 0F84F2E00000            	je L_error_fvar_undefined
 13888 00009AA5 803804                  	cmp byte [rax], T_closure
 13889 00009AA8 0F856DE10000            	jne L_error_non_closure
 13890 00009AAE FF7001                  	push SOB_CLOSURE_ENV(rax)
 13891 00009AB1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13892 00009AB4 FF7500                  	push qword[rbp]
 13893 00009AB7 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13894 00009ABA 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13895 00009ABE 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13896 00009AC2 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13897 00009AC6 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13898 00009AC9 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13899 00009ACC 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13900 00009AD1 4983C103                	add r9, 3 	 ;for getting to the params
 13901 00009AD5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13902 00009AD9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13903                                  .L_tc_recycle_frame_loop_007a:
 13904 00009ADC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13905 00009ADF 7410                    	je .L_tc_recycle_frame_done_007a
 13906 00009AE1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13907 00009AE4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13908 00009AE7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13909 00009AEB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13910 00009AEF EBEB                    	jmp .L_tc_recycle_frame_loop_007a
 13911                                  .L_tc_recycle_frame_done_007a:
 13912 00009AF1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13913 00009AF2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13914 00009AF6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13915 00009AF9 E929010000              	jmp .L_if_end_003e
 13916                                  .L_if_else_003e:
 13917                                  	; preparing a non-tail-call
 13918 00009AFE 488B4528                	mov rax, PARAM(1)	; param b
 13919 00009B02 50                      	push rax
 13920 00009B03 6A01                    	push 1	; arg count
 13921 00009B05 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 13922 00009B0D 803805                  	cmp byte [rax], T_undefined
 13923 00009B10 0F8481E00000            	je L_error_fvar_undefined
 13924 00009B16 803804                  	cmp byte [rax], T_closure
 13925 00009B19 0F85FCE00000            	jne L_error_non_closure
 13926 00009B1F FF7001                  	push SOB_CLOSURE_ENV(rax)
 13927 00009B22 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13928 00009B25 483D[02000000]          	cmp rax, sob_boolean_false
 13929 00009B2B 0F8496000000            	je .L_if_else_003d
 13930                                  	; preparing a tail-call
 13931 00009B31 488B4528                	mov rax, PARAM(1)	; param b
 13932 00009B35 50                      	push rax
 13933                                  	; preparing a non-tail-call
 13934 00009B36 488B4520                	mov rax, PARAM(0)	; param a
 13935 00009B3A 50                      	push rax
 13936 00009B3B 6A01                    	push 1	; arg count
 13937 00009B3D 488B0425[BF130000]      	mov rax, qword [free_var_90]	; free var integer->real
 13938 00009B45 803805                  	cmp byte [rax], T_undefined
 13939 00009B48 0F8449E00000            	je L_error_fvar_undefined
 13940 00009B4E 803804                  	cmp byte [rax], T_closure
 13941 00009B51 0F85C4E00000            	jne L_error_non_closure
 13942 00009B57 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13943 00009B5A FF5009                  	call SOB_CLOSURE_CODE(rax)
 13944 00009B5D 50                      	push rax
 13945 00009B5E 6A02                    	push 2	; arg count
 13946 00009B60 488B0425[B30E0000]      	mov rax, qword [free_var_14]	; free var __bin-div-rr
 13947 00009B68 803805                  	cmp byte [rax], T_undefined
 13948 00009B6B 0F8426E00000            	je L_error_fvar_undefined
 13949 00009B71 803804                  	cmp byte [rax], T_closure
 13950 00009B74 0F85A1E00000            	jne L_error_non_closure
 13951 00009B7A FF7001                  	push SOB_CLOSURE_ENV(rax)
 13952 00009B7D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13953 00009B80 FF7500                  	push qword[rbp]
 13954 00009B83 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13955 00009B86 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13956 00009B8A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13957 00009B8E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13958 00009B92 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13959 00009B95 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13960 00009B98 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13961 00009B9D 4983C103                	add r9, 3 	 ;for getting to the params
 13962 00009BA1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13963 00009BA5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13964                                  .L_tc_recycle_frame_loop_007b:
 13965 00009BA8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13966 00009BAB 7410                    	je .L_tc_recycle_frame_done_007b
 13967 00009BAD 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13968 00009BB0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13969 00009BB3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13970 00009BB7 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13971 00009BBB EBEB                    	jmp .L_tc_recycle_frame_loop_007b
 13972                                  .L_tc_recycle_frame_done_007b:
 13973 00009BBD 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13974 00009BBE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13975 00009BC2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13976 00009BC5 EB60                    	jmp .L_if_end_003d
 13977                                  .L_if_else_003d:
 13978                                  	; preparing a tail-call
 13979 00009BC7 6A00                    	push 0	; arg count
 13980 00009BC9 488B4510                	mov rax, ENV
 13981 00009BCD 488B00                  	mov rax, qword [rax + 8 * 0]
 13982 00009BD0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 13983 00009BD3 803804                  	cmp byte [rax], T_closure
 13984 00009BD6 0F853FE00000            	jne L_error_non_closure
 13985 00009BDC FF7001                  	push SOB_CLOSURE_ENV(rax)
 13986 00009BDF FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13987 00009BE2 FF7500                  	push qword[rbp]
 13988 00009BE5 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13989 00009BE8 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13990 00009BEC 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13991 00009BF0 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13992 00009BF4 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13993 00009BF7 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13994 00009BFA 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13995 00009BFF 4983C103                	add r9, 3 	 ;for getting to the params
 13996 00009C03 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13997 00009C07 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13998                                  .L_tc_recycle_frame_loop_007c:
 13999 00009C0A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14000 00009C0D 7410                    	je .L_tc_recycle_frame_done_007c
 14001 00009C0F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14002 00009C12 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14003 00009C15 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14004 00009C19 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14005 00009C1D EBEB                    	jmp .L_tc_recycle_frame_loop_007c
 14006                                  .L_tc_recycle_frame_done_007c:
 14007 00009C1F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14008 00009C20 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14009 00009C24 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14010                                  .L_if_end_003d:
 14011                                  .L_if_end_003e:
 14012                                  .L_if_end_003f:
 14013 00009C27 E901060000              	jmp .L_if_end_0048
 14014                                  .L_if_else_0048:
 14015                                  	; preparing a non-tail-call
 14016 00009C2C 488B4520                	mov rax, PARAM(0)	; param a
 14017 00009C30 50                      	push rax
 14018 00009C31 6A01                    	push 1	; arg count
 14019 00009C33 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 14020 00009C3B 803805                  	cmp byte [rax], T_undefined
 14021 00009C3E 0F8453DF0000            	je L_error_fvar_undefined
 14022 00009C44 803804                  	cmp byte [rax], T_closure
 14023 00009C47 0F85CEDF0000            	jne L_error_non_closure
 14024 00009C4D FF7001                  	push SOB_CLOSURE_ENV(rax)
 14025 00009C50 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14026 00009C53 483D[02000000]          	cmp rax, sob_boolean_false
 14027 00009C59 0F849F020000            	je .L_if_else_0047
 14028                                  	; preparing a non-tail-call
 14029 00009C5F 488B4528                	mov rax, PARAM(1)	; param b
 14030 00009C63 50                      	push rax
 14031 00009C64 6A01                    	push 1	; arg count
 14032 00009C66 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 14033 00009C6E 803805                  	cmp byte [rax], T_undefined
 14034 00009C71 0F8420DF0000            	je L_error_fvar_undefined
 14035 00009C77 803804                  	cmp byte [rax], T_closure
 14036 00009C7A 0F859BDF0000            	jne L_error_non_closure
 14037 00009C80 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14038 00009C83 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14039 00009C86 483D[02000000]          	cmp rax, sob_boolean_false
 14040 00009C8C 0F8499000000            	je .L_if_else_0042
 14041                                  	; preparing a tail-call
 14042                                  	; preparing a non-tail-call
 14043 00009C92 488B4528                	mov rax, PARAM(1)	; param b
 14044 00009C96 50                      	push rax
 14045 00009C97 6A01                    	push 1	; arg count
 14046 00009C99 488B0425[B20F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 14047 00009CA1 803805                  	cmp byte [rax], T_undefined
 14048 00009CA4 0F84EDDE0000            	je L_error_fvar_undefined
 14049 00009CAA 803804                  	cmp byte [rax], T_closure
 14050 00009CAD 0F8568DF0000            	jne L_error_non_closure
 14051 00009CB3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14052 00009CB6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14053 00009CB9 50                      	push rax
 14054 00009CBA 488B4520                	mov rax, PARAM(0)	; param a
 14055 00009CBE 50                      	push rax
 14056 00009CBF 6A02                    	push 2	; arg count
 14057 00009CC1 488B0425[A20E0000]      	mov rax, qword [free_var_13]	; free var __bin-div-qq
 14058 00009CC9 803805                  	cmp byte [rax], T_undefined
 14059 00009CCC 0F84C5DE0000            	je L_error_fvar_undefined
 14060 00009CD2 803804                  	cmp byte [rax], T_closure
 14061 00009CD5 0F8540DF0000            	jne L_error_non_closure
 14062 00009CDB FF7001                  	push SOB_CLOSURE_ENV(rax)
 14063 00009CDE FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14064 00009CE1 FF7500                  	push qword[rbp]
 14065 00009CE4 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14066 00009CE7 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14067 00009CEB 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14068 00009CEF 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14069 00009CF3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14070 00009CF6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14071 00009CF9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14072 00009CFE 4983C103                	add r9, 3 	 ;for getting to the params
 14073 00009D02 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14074 00009D06 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14075                                  .L_tc_recycle_frame_loop_007d:
 14076 00009D09 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14077 00009D0C 7410                    	je .L_tc_recycle_frame_done_007d
 14078 00009D0E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14079 00009D11 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14080 00009D14 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14081 00009D18 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14082 00009D1C EBEB                    	jmp .L_tc_recycle_frame_loop_007d
 14083                                  .L_tc_recycle_frame_done_007d:
 14084 00009D1E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14085 00009D1F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14086 00009D23 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14087 00009D26 E9CE010000              	jmp .L_if_end_0042
 14088                                  .L_if_else_0042:
 14089                                  	; preparing a non-tail-call
 14090 00009D2B 488B4528                	mov rax, PARAM(1)	; param b
 14091 00009D2F 50                      	push rax
 14092 00009D30 6A01                    	push 1	; arg count
 14093 00009D32 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 14094 00009D3A 803805                  	cmp byte [rax], T_undefined
 14095 00009D3D 0F8454DE0000            	je L_error_fvar_undefined
 14096 00009D43 803804                  	cmp byte [rax], T_closure
 14097 00009D46 0F85CFDE0000            	jne L_error_non_closure
 14098 00009D4C FF7001                  	push SOB_CLOSURE_ENV(rax)
 14099 00009D4F FF5009                  	call SOB_CLOSURE_CODE(rax)
 14100 00009D52 483D[02000000]          	cmp rax, sob_boolean_false
 14101 00009D58 7476                    	je .L_if_else_0041
 14102                                  	; preparing a tail-call
 14103 00009D5A 488B4528                	mov rax, PARAM(1)	; param b
 14104 00009D5E 50                      	push rax
 14105 00009D5F 488B4520                	mov rax, PARAM(0)	; param a
 14106 00009D63 50                      	push rax
 14107 00009D64 6A02                    	push 2	; arg count
 14108 00009D66 488B0425[A20E0000]      	mov rax, qword [free_var_13]	; free var __bin-div-qq
 14109 00009D6E 803805                  	cmp byte [rax], T_undefined
 14110 00009D71 0F8420DE0000            	je L_error_fvar_undefined
 14111 00009D77 803804                  	cmp byte [rax], T_closure
 14112 00009D7A 0F859BDE0000            	jne L_error_non_closure
 14113 00009D80 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14114 00009D83 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14115 00009D86 FF7500                  	push qword[rbp]
 14116 00009D89 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14117 00009D8C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14118 00009D90 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14119 00009D94 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14120 00009D98 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14121 00009D9B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14122 00009D9E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14123 00009DA3 4983C103                	add r9, 3 	 ;for getting to the params
 14124 00009DA7 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14125 00009DAB 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14126                                  .L_tc_recycle_frame_loop_007e:
 14127 00009DAE 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14128 00009DB1 7410                    	je .L_tc_recycle_frame_done_007e
 14129 00009DB3 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14130 00009DB6 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14131 00009DB9 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14132 00009DBD 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14133 00009DC1 EBEB                    	jmp .L_tc_recycle_frame_loop_007e
 14134                                  .L_tc_recycle_frame_done_007e:
 14135 00009DC3 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14136 00009DC4 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14137 00009DC8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14138 00009DCB E929010000              	jmp .L_if_end_0041
 14139                                  .L_if_else_0041:
 14140                                  	; preparing a non-tail-call
 14141 00009DD0 488B4528                	mov rax, PARAM(1)	; param b
 14142 00009DD4 50                      	push rax
 14143 00009DD5 6A01                    	push 1	; arg count
 14144 00009DD7 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 14145 00009DDF 803805                  	cmp byte [rax], T_undefined
 14146 00009DE2 0F84AFDD0000            	je L_error_fvar_undefined
 14147 00009DE8 803804                  	cmp byte [rax], T_closure
 14148 00009DEB 0F852ADE0000            	jne L_error_non_closure
 14149 00009DF1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14150 00009DF4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14151 00009DF7 483D[02000000]          	cmp rax, sob_boolean_false
 14152 00009DFD 0F8496000000            	je .L_if_else_0040
 14153                                  	; preparing a tail-call
 14154 00009E03 488B4528                	mov rax, PARAM(1)	; param b
 14155 00009E07 50                      	push rax
 14156                                  	; preparing a non-tail-call
 14157 00009E08 488B4520                	mov rax, PARAM(0)	; param a
 14158 00009E0C 50                      	push rax
 14159 00009E0D 6A01                    	push 1	; arg count
 14160 00009E0F 488B0425[8C130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 14161 00009E17 803805                  	cmp byte [rax], T_undefined
 14162 00009E1A 0F8477DD0000            	je L_error_fvar_undefined
 14163 00009E20 803804                  	cmp byte [rax], T_closure
 14164 00009E23 0F85F2DD0000            	jne L_error_non_closure
 14165 00009E29 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14166 00009E2C FF5009                  	call SOB_CLOSURE_CODE(rax)
 14167 00009E2F 50                      	push rax
 14168 00009E30 6A02                    	push 2	; arg count
 14169 00009E32 488B0425[B30E0000]      	mov rax, qword [free_var_14]	; free var __bin-div-rr
 14170 00009E3A 803805                  	cmp byte [rax], T_undefined
 14171 00009E3D 0F8454DD0000            	je L_error_fvar_undefined
 14172 00009E43 803804                  	cmp byte [rax], T_closure
 14173 00009E46 0F85CFDD0000            	jne L_error_non_closure
 14174 00009E4C FF7001                  	push SOB_CLOSURE_ENV(rax)
 14175 00009E4F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14176 00009E52 FF7500                  	push qword[rbp]
 14177 00009E55 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14178 00009E58 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14179 00009E5C 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14180 00009E60 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14181 00009E64 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14182 00009E67 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14183 00009E6A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14184 00009E6F 4983C103                	add r9, 3 	 ;for getting to the params
 14185 00009E73 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14186 00009E77 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14187                                  .L_tc_recycle_frame_loop_007f:
 14188 00009E7A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14189 00009E7D 7410                    	je .L_tc_recycle_frame_done_007f
 14190 00009E7F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14191 00009E82 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14192 00009E85 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14193 00009E89 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14194 00009E8D EBEB                    	jmp .L_tc_recycle_frame_loop_007f
 14195                                  .L_tc_recycle_frame_done_007f:
 14196 00009E8F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14197 00009E90 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14198 00009E94 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14199 00009E97 EB60                    	jmp .L_if_end_0040
 14200                                  .L_if_else_0040:
 14201                                  	; preparing a tail-call
 14202 00009E99 6A00                    	push 0	; arg count
 14203 00009E9B 488B4510                	mov rax, ENV
 14204 00009E9F 488B00                  	mov rax, qword [rax + 8 * 0]
 14205 00009EA2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 14206 00009EA5 803804                  	cmp byte [rax], T_closure
 14207 00009EA8 0F856DDD0000            	jne L_error_non_closure
 14208 00009EAE FF7001                  	push SOB_CLOSURE_ENV(rax)
 14209 00009EB1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14210 00009EB4 FF7500                  	push qword[rbp]
 14211 00009EB7 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14212 00009EBA 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14213 00009EBE 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14214 00009EC2 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14215 00009EC6 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14216 00009EC9 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14217 00009ECC 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14218 00009ED1 4983C103                	add r9, 3 	 ;for getting to the params
 14219 00009ED5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14220 00009ED9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14221                                  .L_tc_recycle_frame_loop_0080:
 14222 00009EDC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14223 00009EDF 7410                    	je .L_tc_recycle_frame_done_0080
 14224 00009EE1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14225 00009EE4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14226 00009EE7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14227 00009EEB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14228 00009EEF EBEB                    	jmp .L_tc_recycle_frame_loop_0080
 14229                                  .L_tc_recycle_frame_done_0080:
 14230 00009EF1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14231 00009EF2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14232 00009EF6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14233                                  .L_if_end_0040:
 14234                                  .L_if_end_0041:
 14235                                  .L_if_end_0042:
 14236 00009EF9 E92F030000              	jmp .L_if_end_0047
 14237                                  .L_if_else_0047:
 14238                                  	; preparing a non-tail-call
 14239 00009EFE 488B4520                	mov rax, PARAM(0)	; param a
 14240 00009F02 50                      	push rax
 14241 00009F03 6A01                    	push 1	; arg count
 14242 00009F05 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 14243 00009F0D 803805                  	cmp byte [rax], T_undefined
 14244 00009F10 0F8481DC0000            	je L_error_fvar_undefined
 14245 00009F16 803804                  	cmp byte [rax], T_closure
 14246 00009F19 0F85FCDC0000            	jne L_error_non_closure
 14247 00009F1F FF7001                  	push SOB_CLOSURE_ENV(rax)
 14248 00009F22 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14249 00009F25 483D[02000000]          	cmp rax, sob_boolean_false
 14250 00009F2B 0F849C020000            	je .L_if_else_0046
 14251                                  	; preparing a non-tail-call
 14252 00009F31 488B4528                	mov rax, PARAM(1)	; param b
 14253 00009F35 50                      	push rax
 14254 00009F36 6A01                    	push 1	; arg count
 14255 00009F38 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 14256 00009F40 803805                  	cmp byte [rax], T_undefined
 14257 00009F43 0F844EDC0000            	je L_error_fvar_undefined
 14258 00009F49 803804                  	cmp byte [rax], T_closure
 14259 00009F4C 0F85C9DC0000            	jne L_error_non_closure
 14260 00009F52 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14261 00009F55 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14262 00009F58 483D[02000000]          	cmp rax, sob_boolean_false
 14263 00009F5E 0F8499000000            	je .L_if_else_0045
 14264                                  	; preparing a tail-call
 14265                                  	; preparing a non-tail-call
 14266 00009F64 488B4528                	mov rax, PARAM(1)	; param b
 14267 00009F68 50                      	push rax
 14268 00009F69 6A01                    	push 1	; arg count
 14269 00009F6B 488B0425[BF130000]      	mov rax, qword [free_var_90]	; free var integer->real
 14270 00009F73 803805                  	cmp byte [rax], T_undefined
 14271 00009F76 0F841BDC0000            	je L_error_fvar_undefined
 14272 00009F7C 803804                  	cmp byte [rax], T_closure
 14273 00009F7F 0F8596DC0000            	jne L_error_non_closure
 14274 00009F85 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14275 00009F88 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14276 00009F8B 50                      	push rax
 14277 00009F8C 488B4520                	mov rax, PARAM(0)	; param a
 14278 00009F90 50                      	push rax
 14279 00009F91 6A02                    	push 2	; arg count
 14280 00009F93 488B0425[B30E0000]      	mov rax, qword [free_var_14]	; free var __bin-div-rr
 14281 00009F9B 803805                  	cmp byte [rax], T_undefined
 14282 00009F9E 0F84F3DB0000            	je L_error_fvar_undefined
 14283 00009FA4 803804                  	cmp byte [rax], T_closure
 14284 00009FA7 0F856EDC0000            	jne L_error_non_closure
 14285 00009FAD FF7001                  	push SOB_CLOSURE_ENV(rax)
 14286 00009FB0 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14287 00009FB3 FF7500                  	push qword[rbp]
 14288 00009FB6 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14289 00009FB9 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14290 00009FBD 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14291 00009FC1 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14292 00009FC5 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14293 00009FC8 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14294 00009FCB 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14295 00009FD0 4983C103                	add r9, 3 	 ;for getting to the params
 14296 00009FD4 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14297 00009FD8 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14298                                  .L_tc_recycle_frame_loop_0081:
 14299 00009FDB 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14300 00009FDE 7410                    	je .L_tc_recycle_frame_done_0081
 14301 00009FE0 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14302 00009FE3 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14303 00009FE6 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14304 00009FEA 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14305 00009FEE EBEB                    	jmp .L_tc_recycle_frame_loop_0081
 14306                                  .L_tc_recycle_frame_done_0081:
 14307 00009FF0 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14308 00009FF1 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14309 00009FF5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14310 00009FF8 E9CE010000              	jmp .L_if_end_0045
 14311                                  .L_if_else_0045:
 14312                                  	; preparing a non-tail-call
 14313 00009FFD 488B4528                	mov rax, PARAM(1)	; param b
 14314 0000A001 50                      	push rax
 14315 0000A002 6A01                    	push 1	; arg count
 14316 0000A004 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 14317 0000A00C 803805                  	cmp byte [rax], T_undefined
 14318 0000A00F 0F8482DB0000            	je L_error_fvar_undefined
 14319 0000A015 803804                  	cmp byte [rax], T_closure
 14320 0000A018 0F85FDDB0000            	jne L_error_non_closure
 14321 0000A01E FF7001                  	push SOB_CLOSURE_ENV(rax)
 14322 0000A021 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14323 0000A024 483D[02000000]          	cmp rax, sob_boolean_false
 14324 0000A02A 0F8499000000            	je .L_if_else_0044
 14325                                  	; preparing a tail-call
 14326                                  	; preparing a non-tail-call
 14327 0000A030 488B4528                	mov rax, PARAM(1)	; param b
 14328 0000A034 50                      	push rax
 14329 0000A035 6A01                    	push 1	; arg count
 14330 0000A037 488B0425[8C130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 14331 0000A03F 803805                  	cmp byte [rax], T_undefined
 14332 0000A042 0F844FDB0000            	je L_error_fvar_undefined
 14333 0000A048 803804                  	cmp byte [rax], T_closure
 14334 0000A04B 0F85CADB0000            	jne L_error_non_closure
 14335 0000A051 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14336 0000A054 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14337 0000A057 50                      	push rax
 14338 0000A058 488B4520                	mov rax, PARAM(0)	; param a
 14339 0000A05C 50                      	push rax
 14340 0000A05D 6A02                    	push 2	; arg count
 14341 0000A05F 488B0425[B30E0000]      	mov rax, qword [free_var_14]	; free var __bin-div-rr
 14342 0000A067 803805                  	cmp byte [rax], T_undefined
 14343 0000A06A 0F8427DB0000            	je L_error_fvar_undefined
 14344 0000A070 803804                  	cmp byte [rax], T_closure
 14345 0000A073 0F85A2DB0000            	jne L_error_non_closure
 14346 0000A079 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14347 0000A07C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14348 0000A07F FF7500                  	push qword[rbp]
 14349 0000A082 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14350 0000A085 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14351 0000A089 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14352 0000A08D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14353 0000A091 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14354 0000A094 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14355 0000A097 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14356 0000A09C 4983C103                	add r9, 3 	 ;for getting to the params
 14357 0000A0A0 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14358 0000A0A4 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14359                                  .L_tc_recycle_frame_loop_0082:
 14360 0000A0A7 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14361 0000A0AA 7410                    	je .L_tc_recycle_frame_done_0082
 14362 0000A0AC 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14363 0000A0AF 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14364 0000A0B2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14365 0000A0B6 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14366 0000A0BA EBEB                    	jmp .L_tc_recycle_frame_loop_0082
 14367                                  .L_tc_recycle_frame_done_0082:
 14368 0000A0BC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14369 0000A0BD 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14370 0000A0C1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14371 0000A0C4 E902010000              	jmp .L_if_end_0044
 14372                                  .L_if_else_0044:
 14373                                  	; preparing a non-tail-call
 14374 0000A0C9 488B4528                	mov rax, PARAM(1)	; param b
 14375 0000A0CD 50                      	push rax
 14376 0000A0CE 6A01                    	push 1	; arg count
 14377 0000A0D0 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 14378 0000A0D8 803805                  	cmp byte [rax], T_undefined
 14379 0000A0DB 0F84B6DA0000            	je L_error_fvar_undefined
 14380 0000A0E1 803804                  	cmp byte [rax], T_closure
 14381 0000A0E4 0F8531DB0000            	jne L_error_non_closure
 14382 0000A0EA FF7001                  	push SOB_CLOSURE_ENV(rax)
 14383 0000A0ED FF5009                  	call SOB_CLOSURE_CODE(rax)
 14384 0000A0F0 483D[02000000]          	cmp rax, sob_boolean_false
 14385 0000A0F6 7473                    	je .L_if_else_0043
 14386                                  	; preparing a tail-call
 14387 0000A0F8 488B4528                	mov rax, PARAM(1)	; param b
 14388 0000A0FC 50                      	push rax
 14389 0000A0FD 488B4520                	mov rax, PARAM(0)	; param a
 14390 0000A101 50                      	push rax
 14391 0000A102 6A02                    	push 2	; arg count
 14392 0000A104 488B0425[B30E0000]      	mov rax, qword [free_var_14]	; free var __bin-div-rr
 14393 0000A10C 803805                  	cmp byte [rax], T_undefined
 14394 0000A10F 0F8482DA0000            	je L_error_fvar_undefined
 14395 0000A115 803804                  	cmp byte [rax], T_closure
 14396 0000A118 0F85FDDA0000            	jne L_error_non_closure
 14397 0000A11E FF7001                  	push SOB_CLOSURE_ENV(rax)
 14398 0000A121 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14399 0000A124 FF7500                  	push qword[rbp]
 14400 0000A127 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14401 0000A12A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14402 0000A12E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14403 0000A132 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14404 0000A136 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14405 0000A139 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14406 0000A13C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14407 0000A141 4983C103                	add r9, 3 	 ;for getting to the params
 14408 0000A145 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14409 0000A149 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14410                                  .L_tc_recycle_frame_loop_0083:
 14411 0000A14C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14412 0000A14F 7410                    	je .L_tc_recycle_frame_done_0083
 14413 0000A151 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14414 0000A154 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14415 0000A157 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14416 0000A15B 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14417 0000A15F EBEB                    	jmp .L_tc_recycle_frame_loop_0083
 14418                                  .L_tc_recycle_frame_done_0083:
 14419 0000A161 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14420 0000A162 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14421 0000A166 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14422 0000A169 EB60                    	jmp .L_if_end_0043
 14423                                  .L_if_else_0043:
 14424                                  	; preparing a tail-call
 14425 0000A16B 6A00                    	push 0	; arg count
 14426 0000A16D 488B4510                	mov rax, ENV
 14427 0000A171 488B00                  	mov rax, qword [rax + 8 * 0]
 14428 0000A174 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 14429 0000A177 803804                  	cmp byte [rax], T_closure
 14430 0000A17A 0F859BDA0000            	jne L_error_non_closure
 14431 0000A180 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14432 0000A183 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14433 0000A186 FF7500                  	push qword[rbp]
 14434 0000A189 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14435 0000A18C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14436 0000A190 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14437 0000A194 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14438 0000A198 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14439 0000A19B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14440 0000A19E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14441 0000A1A3 4983C103                	add r9, 3 	 ;for getting to the params
 14442 0000A1A7 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14443 0000A1AB 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14444                                  .L_tc_recycle_frame_loop_0084:
 14445 0000A1AE 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14446 0000A1B1 7410                    	je .L_tc_recycle_frame_done_0084
 14447 0000A1B3 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14448 0000A1B6 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14449 0000A1B9 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14450 0000A1BD 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14451 0000A1C1 EBEB                    	jmp .L_tc_recycle_frame_loop_0084
 14452                                  .L_tc_recycle_frame_done_0084:
 14453 0000A1C3 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14454 0000A1C4 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14455 0000A1C8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14456                                  .L_if_end_0043:
 14457                                  .L_if_end_0044:
 14458                                  .L_if_end_0045:
 14459 0000A1CB EB60                    	jmp .L_if_end_0046
 14460                                  .L_if_else_0046:
 14461                                  	; preparing a tail-call
 14462 0000A1CD 6A00                    	push 0	; arg count
 14463 0000A1CF 488B4510                	mov rax, ENV
 14464 0000A1D3 488B00                  	mov rax, qword [rax + 8 * 0]
 14465 0000A1D6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 14466 0000A1D9 803804                  	cmp byte [rax], T_closure
 14467 0000A1DC 0F8539DA0000            	jne L_error_non_closure
 14468 0000A1E2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14469 0000A1E5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14470 0000A1E8 FF7500                  	push qword[rbp]
 14471 0000A1EB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14472 0000A1EE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14473 0000A1F2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14474 0000A1F6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14475 0000A1FA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14476 0000A1FD 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14477 0000A200 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14478 0000A205 4983C103                	add r9, 3 	 ;for getting to the params
 14479 0000A209 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14480 0000A20D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14481                                  .L_tc_recycle_frame_loop_0085:
 14482 0000A210 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14483 0000A213 7410                    	je .L_tc_recycle_frame_done_0085
 14484 0000A215 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14485 0000A218 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14486 0000A21B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14487 0000A21F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14488 0000A223 EBEB                    	jmp .L_tc_recycle_frame_loop_0085
 14489                                  .L_tc_recycle_frame_done_0085:
 14490 0000A225 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14491 0000A226 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14492 0000A22A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14493                                  .L_if_end_0046:
 14494                                  .L_if_end_0047:
 14495                                  .L_if_end_0048:
 14496 0000A22D C9                      	leave
 14497 0000A22E C22000                  	ret AND_KILL_FRAME(2)
 14498                                  .L_lambda_simple_end_0048:	; new closure is in rax
 14499 0000A231 50                      	push rax
 14500 0000A232 6A01                    	push 1	; arg count
 14501 0000A234 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14502 0000A239 E886DA0000              	call malloc
 14503 0000A23E 50                      	push rax
 14504 0000A23F BF08000000              	mov rdi, 8 * 1	; new rib
 14505 0000A244 E87BDA0000              	call malloc
 14506 0000A249 50                      	push rax
 14507 0000A24A BF10000000              	mov rdi, 8 * 2	; extended env
 14508 0000A24F E870DA0000              	call malloc
 14509 0000A254 488B7D10                	mov rdi, ENV
 14510 0000A258 BE00000000              	mov rsi, 0
 14511 0000A25D BA01000000              	mov rdx, 1
 14512                                  .L_lambda_simple_env_loop_0049:	; ext_env[i + 1] <-- env[i]
 14513 0000A262 4883FE01                	cmp rsi, 1
 14514 0000A266 7410                    	je .L_lambda_simple_env_end_0049
 14515 0000A268 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14516 0000A26C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14517 0000A270 48FFC6                  	inc rsi
 14518 0000A273 48FFC2                  	inc rdx
 14519 0000A276 EBEA                    	jmp .L_lambda_simple_env_loop_0049
 14520                                  .L_lambda_simple_env_end_0049:
 14521 0000A278 5B                      	pop rbx
 14522 0000A279 BE00000000              	mov rsi, 0
 14523                                  .L_lambda_simple_params_loop_0049:	; copy params
 14524 0000A27E 4883FE01                	cmp rsi, 1
 14525 0000A282 740E                    	je .L_lambda_simple_params_end_0049
 14526 0000A284 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14527 0000A289 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14528 0000A28D 48FFC6                  	inc rsi
 14529 0000A290 EBEC                    	jmp .L_lambda_simple_params_loop_0049
 14530                                  .L_lambda_simple_params_end_0049:
 14531 0000A292 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14532 0000A295 4889C3                  	mov rbx, rax
 14533 0000A298 58                      	pop rax
 14534 0000A299 C60004                  	mov byte [rax], T_closure
 14535 0000A29C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14536 0000A2A0 48C74009[ADA20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0049
 14537 0000A2A8 E928060000              	jmp .L_lambda_simple_end_0049
 14538                                  .L_lambda_simple_code_0049:	; lambda-simple body
 14539 0000A2AD 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14540 0000A2B3 740B                    	je .L_lambda_simple_arity_check_ok_0049
 14541 0000A2B5 FF742410                	push qword [rsp + 8 * 2]
 14542 0000A2B9 6A01                    	push 1
 14543 0000A2BB E9BDD90000              	jmp L_error_incorrect_arity_simple
 14544                                  .L_lambda_simple_arity_check_ok_0049:
 14545 0000A2C0 C8000000                	enter 0, 0
 14546 0000A2C4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14547 0000A2C9 E8F6D90000              	call malloc
 14548 0000A2CE 50                      	push rax
 14549 0000A2CF BF08000000              	mov rdi, 8 * 1	; new rib
 14550 0000A2D4 E8EBD90000              	call malloc
 14551 0000A2D9 50                      	push rax
 14552 0000A2DA BF18000000              	mov rdi, 8 * 3	; extended env
 14553 0000A2DF E8E0D90000              	call malloc
 14554 0000A2E4 488B7D10                	mov rdi, ENV
 14555 0000A2E8 BE00000000              	mov rsi, 0
 14556 0000A2ED BA01000000              	mov rdx, 1
 14557                                  .L_lambda_opt_env_loop_000d:	; ext_env[i + 1] <-- env[i]
 14558 0000A2F2 4883FE02                	cmp rsi, 2
 14559 0000A2F6 7410                    	je .L_lambda_opt_env_end_000d
 14560 0000A2F8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14561 0000A2FC 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14562 0000A300 48FFC6                  	inc rsi
 14563 0000A303 48FFC2                  	inc rdx
 14564 0000A306 EBEA                    	jmp .L_lambda_opt_env_loop_000d
 14565                                  .L_lambda_opt_env_end_000d:
 14566 0000A308 5B                      	pop rbx
 14567 0000A309 BE00000000              	mov rsi, 0
 14568                                  .L_lambda_opt_params_loop_000d:	; copy params
 14569 0000A30E 4883FE01                	cmp rsi, 1
 14570 0000A312 740E                    	je .L_lambda_opt_params_end_000d
 14571 0000A314 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14572 0000A319 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14573 0000A31D 48FFC6                  	inc rsi
 14574 0000A320 EBEC                    	jmp .L_lambda_opt_params_loop_000d
 14575                                  .L_lambda_opt_params_end_000d:
 14576 0000A322 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14577 0000A325 4889C3                  	mov rbx, rax
 14578 0000A328 58                      	pop rax
 14579 0000A329 C60004                  	mov byte [rax], T_closure
 14580 0000A32C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14581 0000A330 48C74009[3DA30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000d
 14582 0000A338 E994050000              	jmp .L_lambda_opt_end_000d
 14583                                  .L_lambda_opt_code_000d:	; lambda-opt body
 14584 0000A33D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14585 0000A343 7411                    	je .L_lambda_opt_arity_check_exact_000d
 14586 0000A345 0F8F96020000            	jg .L_lambda_opt_arity_check_more_000d
 14587 0000A34B FF742410                	push qword [rsp + 8 * 2]
 14588 0000A34F 6A01                    	push 1
 14589 0000A351 E93BD90000              	jmp L_error_incorrect_arity_opt
 14590                                  .L_lambda_opt_arity_check_exact_000d:
 14591 0000A356 4883EC08                	sub rsp, 8
 14592 0000A35A 488B442408              	mov rax, qword[rsp + 8 *1]
 14593 0000A35F 48890424                	mov qword[rsp], rax  
 14594 0000A363 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 14595 0000A368 4889442408              	mov qword[rsp + 8 * 1], rax
 14596 0000A36D B802000000              	mov rax, 2
 14597 0000A372 4889442410              	mov qword[rsp + 8 *2], rax
 14598 0000A377 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
 14599 0000A37C 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 14600 0000A381 48B8-                   	mov rax, sob_nil
 14600 0000A383 [0100000000000000] 
 14601 0000A38B 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
 14602 0000A390 C8000000                	enter 0, 0
 14603                                  	; preparing a non-tail-call
 14604 0000A394 488B4528                	mov rax, PARAM(1)	; param s
 14605 0000A398 50                      	push rax
 14606 0000A399 6A01                    	push 1	; arg count
 14607 0000A39B 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 14608 0000A3A3 803805                  	cmp byte [rax], T_undefined
 14609 0000A3A6 0F84EBD70000            	je L_error_fvar_undefined
 14610 0000A3AC 803804                  	cmp byte [rax], T_closure
 14611 0000A3AF 0F8566D80000            	jne L_error_non_closure
 14612 0000A3B5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14613 0000A3B8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14614 0000A3BB 483D[02000000]          	cmp rax, sob_boolean_false
 14615 0000A3C1 7475                    	je .L_if_else_004a
 14616                                  	; preparing a tail-call
 14617 0000A3C3 488B4520                	mov rax, PARAM(0)	; param a
 14618 0000A3C7 50                      	push rax
 14619 0000A3C8 48B8-                   	mov rax, L_constants + 2270
 14619 0000A3CA [DE08000000000000] 
 14620 0000A3D2 50                      	push rax
 14621 0000A3D3 6A02                    	push 2	; arg count
 14622 0000A3D5 488B4510                	mov rax, ENV
 14623 0000A3D9 488B00                  	mov rax, qword [rax + 8 * 0]
 14624 0000A3DC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin/
 14625 0000A3DF 803804                  	cmp byte [rax], T_closure
 14626 0000A3E2 0F8533D80000            	jne L_error_non_closure
 14627 0000A3E8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14628 0000A3EB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14629 0000A3EE FF7500                  	push qword[rbp]
 14630 0000A3F1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14631 0000A3F4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14632 0000A3F8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14633 0000A3FC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14634 0000A400 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14635 0000A403 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14636 0000A406 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14637 0000A40B 4983C103                	add r9, 3 	 ;for getting to the params
 14638 0000A40F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14639 0000A413 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14640                                  .L_tc_recycle_frame_loop_0089:
 14641 0000A416 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14642 0000A419 7410                    	je .L_tc_recycle_frame_done_0089
 14643 0000A41B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14644 0000A41E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14645 0000A421 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14646 0000A425 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14647 0000A429 EBEB                    	jmp .L_tc_recycle_frame_loop_0089
 14648                                  .L_tc_recycle_frame_done_0089:
 14649 0000A42B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14650 0000A42C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14651 0000A430 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14652 0000A433 E9A0010000              	jmp .L_if_end_004a
 14653                                  .L_if_else_004a:
 14654                                  	; preparing a tail-call
 14655                                  	; preparing a non-tail-call
 14656 0000A438 488B4528                	mov rax, PARAM(1)	; param s
 14657 0000A43C 50                      	push rax
 14658 0000A43D 48B8-                   	mov rax, L_constants + 2270
 14658 0000A43F [DE08000000000000] 
 14659 0000A447 50                      	push rax
 14660 0000A448 488B0425[C50D0000]      	mov rax, qword [free_var_0]	; free var *
 14661 0000A450 803805                  	cmp byte [rax], T_undefined
 14662 0000A453 0F843ED70000            	je L_error_fvar_undefined
 14663 0000A459 50                      	push rax
 14664 0000A45A 6A03                    	push 3	; arg count
 14665 0000A45C 488B0425[6A130000]      	mov rax, qword [free_var_85]	; free var fold-left
 14666 0000A464 803805                  	cmp byte [rax], T_undefined
 14667 0000A467 0F842AD70000            	je L_error_fvar_undefined
 14668 0000A46D 803804                  	cmp byte [rax], T_closure
 14669 0000A470 0F85A5D70000            	jne L_error_non_closure
 14670 0000A476 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14671 0000A479 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14672 0000A47C 50                      	push rax
 14673 0000A47D 6A01                    	push 1	; arg count
 14674 0000A47F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14675 0000A484 E83BD80000              	call malloc
 14676 0000A489 50                      	push rax
 14677 0000A48A BF10000000              	mov rdi, 8 * 2	; new rib
 14678 0000A48F E830D80000              	call malloc
 14679 0000A494 50                      	push rax
 14680 0000A495 BF20000000              	mov rdi, 8 * 4	; extended env
 14681 0000A49A E825D80000              	call malloc
 14682 0000A49F 488B7D10                	mov rdi, ENV
 14683 0000A4A3 BE00000000              	mov rsi, 0
 14684 0000A4A8 BA01000000              	mov rdx, 1
 14685                                  .L_lambda_simple_env_loop_004b:	; ext_env[i + 1] <-- env[i]
 14686 0000A4AD 4883FE03                	cmp rsi, 3
 14687 0000A4B1 7410                    	je .L_lambda_simple_env_end_004b
 14688 0000A4B3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14689 0000A4B7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14690 0000A4BB 48FFC6                  	inc rsi
 14691 0000A4BE 48FFC2                  	inc rdx
 14692 0000A4C1 EBEA                    	jmp .L_lambda_simple_env_loop_004b
 14693                                  .L_lambda_simple_env_end_004b:
 14694 0000A4C3 5B                      	pop rbx
 14695 0000A4C4 BE00000000              	mov rsi, 0
 14696                                  .L_lambda_simple_params_loop_004b:	; copy params
 14697 0000A4C9 4883FE02                	cmp rsi, 2
 14698 0000A4CD 740E                    	je .L_lambda_simple_params_end_004b
 14699 0000A4CF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14700 0000A4D4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14701 0000A4D8 48FFC6                  	inc rsi
 14702 0000A4DB EBEC                    	jmp .L_lambda_simple_params_loop_004b
 14703                                  .L_lambda_simple_params_end_004b:
 14704 0000A4DD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14705 0000A4E0 4889C3                  	mov rbx, rax
 14706 0000A4E3 58                      	pop rax
 14707 0000A4E4 C60004                  	mov byte [rax], T_closure
 14708 0000A4E7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14709 0000A4EB 48C74009[F8A40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004b
 14710 0000A4F3 E98C000000              	jmp .L_lambda_simple_end_004b
 14711                                  .L_lambda_simple_code_004b:	; lambda-simple body
 14712 0000A4F8 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14713 0000A4FE 740B                    	je .L_lambda_simple_arity_check_ok_004b
 14714 0000A500 FF742410                	push qword [rsp + 8 * 2]
 14715 0000A504 6A01                    	push 1
 14716 0000A506 E972D70000              	jmp L_error_incorrect_arity_simple
 14717                                  .L_lambda_simple_arity_check_ok_004b:
 14718 0000A50B C8000000                	enter 0, 0
 14719                                  	; preparing a tail-call
 14720 0000A50F 488B4520                	mov rax, PARAM(0)	; param b
 14721 0000A513 50                      	push rax
 14722 0000A514 488B4510                	mov rax, ENV
 14723 0000A518 488B00                  	mov rax, qword [rax + 8 * 0]
 14724 0000A51B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var a
 14725 0000A51E 50                      	push rax
 14726 0000A51F 6A02                    	push 2	; arg count
 14727 0000A521 488B4510                	mov rax, ENV
 14728 0000A525 488B4008                	mov rax, qword [rax + 8 * 1]
 14729 0000A529 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin/
 14730 0000A52C 803804                  	cmp byte [rax], T_closure
 14731 0000A52F 0F85E6D60000            	jne L_error_non_closure
 14732 0000A535 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14733 0000A538 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14734 0000A53B FF7500                  	push qword[rbp]
 14735 0000A53E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14736 0000A541 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14737 0000A545 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14738 0000A549 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14739 0000A54D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14740 0000A550 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14741 0000A553 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14742 0000A558 4983C103                	add r9, 3 	 ;for getting to the params
 14743 0000A55C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14744 0000A560 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14745                                  .L_tc_recycle_frame_loop_008a:
 14746 0000A563 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14747 0000A566 7410                    	je .L_tc_recycle_frame_done_008a
 14748 0000A568 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14749 0000A56B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14750 0000A56E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14751 0000A572 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14752 0000A576 EBEB                    	jmp .L_tc_recycle_frame_loop_008a
 14753                                  .L_tc_recycle_frame_done_008a:
 14754 0000A578 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14755 0000A579 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14756 0000A57D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14757 0000A580 C9                      	leave
 14758 0000A581 C21800                  	ret AND_KILL_FRAME(1)
 14759                                  .L_lambda_simple_end_004b:	; new closure is in rax
 14760 0000A584 803804                  	cmp byte [rax], T_closure
 14761 0000A587 0F858ED60000            	jne L_error_non_closure
 14762 0000A58D FF7001                  	push SOB_CLOSURE_ENV(rax)
 14763 0000A590 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14764 0000A593 FF7500                  	push qword[rbp]
 14765 0000A596 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14766 0000A599 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14767 0000A59D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14768 0000A5A1 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14769 0000A5A5 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14770 0000A5A8 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14771 0000A5AB 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14772 0000A5B0 4983C103                	add r9, 3 	 ;for getting to the params
 14773 0000A5B4 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14774 0000A5B8 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14775                                  .L_tc_recycle_frame_loop_008b:
 14776 0000A5BB 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14777 0000A5BE 7410                    	je .L_tc_recycle_frame_done_008b
 14778 0000A5C0 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14779 0000A5C3 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14780 0000A5C6 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14781 0000A5CA 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14782 0000A5CE EBEB                    	jmp .L_tc_recycle_frame_loop_008b
 14783                                  .L_tc_recycle_frame_done_008b:
 14784 0000A5D0 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14785 0000A5D1 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14786 0000A5D5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14787                                  .L_if_end_004a:
 14788 0000A5D8 C9                      	leave
 14789 0000A5D9 C22000                  	ret AND_KILL_FRAME(2)
 14790 0000A5DC E9F0020000              	jmp .L_lambda_opt_end_000d	; new closure is in rax
 14791                                  .L_lambda_opt_arity_check_more_000d:
 14792 0000A5E1 488B442410              	mov rax, qword[rsp + 2 * 8]
 14793 0000A5E6 4889C7                  	mov rdi, rax
 14794 0000A5E9 49B9-                   	mov r9, sob_nil
 14794 0000A5EB [0100000000000000] 
 14795 0000A5F3 4989F8                  	mov r8, rdi
 14796                                  .L_lambda_opt_stack_shrink_loop_000d:
 14797 0000A5F6 4983F801                	cmp r8, 1
 14798 0000A5FA 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_000d
 14799 0000A5FC 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)] 	;rbx is the top of the stack
 14800 0000A601 BF11000000              	mov rdi, 1+8+8	;for pair
 14801 0000A606 E8B9D60000              	call malloc	 ;to create the pair in the stack
 14802 0000A60B C60021                  	mov byte [rax], T_pair	 ; to make it a pair
 14803 0000A60E 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
 14804 0000A612 4C894809                 	mov qword[rax+1+8],r9
 14805 0000A616 4989C1                  	mov r9 , rax	 ; for the recursion 
 14806 0000A619 49FFC8                  	dec r8
 14807 0000A61C EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_000d
 14808                                  .L_lambda_opt_stack_shrink_loop_exit_000d:
 14809 0000A61E 488B442410              	mov rax, qword[rsp + 2 * 8]
 14810 0000A623 BF02000000              	mov rdi, 2
 14811 0000A628 4829F8                  	sub rax, rdi
 14812 0000A62B 4889C7                  	mov rdi, rax
 14813 0000A62E 486BC008                	imul rax,8
 14814 0000A632 4801C4                  	add rsp, rax
 14815 0000A635 4889E0                  	mov rax, rsp
 14816 0000A638 4989F8                  	mov r8, rdi
 14817 0000A63B 4D6BC008                	imul r8, 8
 14818 0000A63F 4C29C0                  	sub rax, r8
 14819 0000A642 4989C2                  	mov r10, rax	; holds the original ret in the stack
 14820 0000A645 4983C218                	add r10, 8*3
 14821 0000A649 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
 14822 0000A64D 4C8B00                  	mov r8, qword[rax] 	;arg count = r8
 14823 0000A650 4D6BC008                	imul r8,8
 14824 0000A654 4C01C0                  	add rax, r8
 14825 0000A657 4C8908                  	mov qword[rax] ,r9
 14826 0000A65A 4D89D0                   	mov r8, r10
 14827 0000A65D 4983C000                	add r8, 8 * 0
 14828 0000A661 4D8B08                  	mov r9,qword[r8]
 14829 0000A664 4D890CF8                	mov qword [r8 + rdi * 8], r9
 14830 0000A668 4983EA18                	sub r10, 8*3
 14831 0000A66C 48C744241002000000      	mov qword [rsp+2*8], 2
 14832 0000A675 498B4208                	mov rax, qword[r10 + 1 * 8]
 14833 0000A679 4889442408              	mov qword[rsp + 1*8] ,rax
 14834 0000A67E 498B02                  	mov rax, qword[r10]
 14835 0000A681 48890424                	mov qword[rsp], rax
 14836 0000A685 C8000000                	enter 0, 0
 14837                                  	; preparing a non-tail-call
 14838 0000A689 488B4528                	mov rax, PARAM(1)	; param s
 14839 0000A68D 50                      	push rax
 14840 0000A68E 6A01                    	push 1	; arg count
 14841 0000A690 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 14842 0000A698 803805                  	cmp byte [rax], T_undefined
 14843 0000A69B 0F84F6D40000            	je L_error_fvar_undefined
 14844 0000A6A1 803804                  	cmp byte [rax], T_closure
 14845 0000A6A4 0F8571D50000            	jne L_error_non_closure
 14846 0000A6AA FF7001                  	push SOB_CLOSURE_ENV(rax)
 14847 0000A6AD FF5009                  	call SOB_CLOSURE_CODE(rax)
 14848 0000A6B0 483D[02000000]          	cmp rax, sob_boolean_false
 14849 0000A6B6 7475                    	je .L_if_else_0049
 14850                                  	; preparing a tail-call
 14851 0000A6B8 488B4520                	mov rax, PARAM(0)	; param a
 14852 0000A6BC 50                      	push rax
 14853 0000A6BD 48B8-                   	mov rax, L_constants + 2270
 14853 0000A6BF [DE08000000000000] 
 14854 0000A6C7 50                      	push rax
 14855 0000A6C8 6A02                    	push 2	; arg count
 14856 0000A6CA 488B4510                	mov rax, ENV
 14857 0000A6CE 488B00                  	mov rax, qword [rax + 8 * 0]
 14858 0000A6D1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin/
 14859 0000A6D4 803804                  	cmp byte [rax], T_closure
 14860 0000A6D7 0F853ED50000            	jne L_error_non_closure
 14861 0000A6DD FF7001                  	push SOB_CLOSURE_ENV(rax)
 14862 0000A6E0 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14863 0000A6E3 FF7500                  	push qword[rbp]
 14864 0000A6E6 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14865 0000A6E9 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14866 0000A6ED 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14867 0000A6F1 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14868 0000A6F5 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14869 0000A6F8 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14870 0000A6FB 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14871 0000A700 4983C103                	add r9, 3 	 ;for getting to the params
 14872 0000A704 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14873 0000A708 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14874                                  .L_tc_recycle_frame_loop_0086:
 14875 0000A70B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14876 0000A70E 7410                    	je .L_tc_recycle_frame_done_0086
 14877 0000A710 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14878 0000A713 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14879 0000A716 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14880 0000A71A 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14881 0000A71E EBEB                    	jmp .L_tc_recycle_frame_loop_0086
 14882                                  .L_tc_recycle_frame_done_0086:
 14883 0000A720 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14884 0000A721 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14885 0000A725 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14886 0000A728 E9A0010000              	jmp .L_if_end_0049
 14887                                  .L_if_else_0049:
 14888                                  	; preparing a tail-call
 14889                                  	; preparing a non-tail-call
 14890 0000A72D 488B4528                	mov rax, PARAM(1)	; param s
 14891 0000A731 50                      	push rax
 14892 0000A732 48B8-                   	mov rax, L_constants + 2270
 14892 0000A734 [DE08000000000000] 
 14893 0000A73C 50                      	push rax
 14894 0000A73D 488B0425[C50D0000]      	mov rax, qword [free_var_0]	; free var *
 14895 0000A745 803805                  	cmp byte [rax], T_undefined
 14896 0000A748 0F8449D40000            	je L_error_fvar_undefined
 14897 0000A74E 50                      	push rax
 14898 0000A74F 6A03                    	push 3	; arg count
 14899 0000A751 488B0425[6A130000]      	mov rax, qword [free_var_85]	; free var fold-left
 14900 0000A759 803805                  	cmp byte [rax], T_undefined
 14901 0000A75C 0F8435D40000            	je L_error_fvar_undefined
 14902 0000A762 803804                  	cmp byte [rax], T_closure
 14903 0000A765 0F85B0D40000            	jne L_error_non_closure
 14904 0000A76B FF7001                  	push SOB_CLOSURE_ENV(rax)
 14905 0000A76E FF5009                  	call SOB_CLOSURE_CODE(rax)
 14906 0000A771 50                      	push rax
 14907 0000A772 6A01                    	push 1	; arg count
 14908 0000A774 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14909 0000A779 E846D50000              	call malloc
 14910 0000A77E 50                      	push rax
 14911 0000A77F BF10000000              	mov rdi, 8 * 2	; new rib
 14912 0000A784 E83BD50000              	call malloc
 14913 0000A789 50                      	push rax
 14914 0000A78A BF20000000              	mov rdi, 8 * 4	; extended env
 14915 0000A78F E830D50000              	call malloc
 14916 0000A794 488B7D10                	mov rdi, ENV
 14917 0000A798 BE00000000              	mov rsi, 0
 14918 0000A79D BA01000000              	mov rdx, 1
 14919                                  .L_lambda_simple_env_loop_004a:	; ext_env[i + 1] <-- env[i]
 14920 0000A7A2 4883FE03                	cmp rsi, 3
 14921 0000A7A6 7410                    	je .L_lambda_simple_env_end_004a
 14922 0000A7A8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14923 0000A7AC 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14924 0000A7B0 48FFC6                  	inc rsi
 14925 0000A7B3 48FFC2                  	inc rdx
 14926 0000A7B6 EBEA                    	jmp .L_lambda_simple_env_loop_004a
 14927                                  .L_lambda_simple_env_end_004a:
 14928 0000A7B8 5B                      	pop rbx
 14929 0000A7B9 BE00000000              	mov rsi, 0
 14930                                  .L_lambda_simple_params_loop_004a:	; copy params
 14931 0000A7BE 4883FE02                	cmp rsi, 2
 14932 0000A7C2 740E                    	je .L_lambda_simple_params_end_004a
 14933 0000A7C4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14934 0000A7C9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14935 0000A7CD 48FFC6                  	inc rsi
 14936 0000A7D0 EBEC                    	jmp .L_lambda_simple_params_loop_004a
 14937                                  .L_lambda_simple_params_end_004a:
 14938 0000A7D2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14939 0000A7D5 4889C3                  	mov rbx, rax
 14940 0000A7D8 58                      	pop rax
 14941 0000A7D9 C60004                  	mov byte [rax], T_closure
 14942 0000A7DC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14943 0000A7E0 48C74009[EDA70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004a
 14944 0000A7E8 E98C000000              	jmp .L_lambda_simple_end_004a
 14945                                  .L_lambda_simple_code_004a:	; lambda-simple body
 14946 0000A7ED 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14947 0000A7F3 740B                    	je .L_lambda_simple_arity_check_ok_004a
 14948 0000A7F5 FF742410                	push qword [rsp + 8 * 2]
 14949 0000A7F9 6A01                    	push 1
 14950 0000A7FB E97DD40000              	jmp L_error_incorrect_arity_simple
 14951                                  .L_lambda_simple_arity_check_ok_004a:
 14952 0000A800 C8000000                	enter 0, 0
 14953                                  	; preparing a tail-call
 14954 0000A804 488B4520                	mov rax, PARAM(0)	; param b
 14955 0000A808 50                      	push rax
 14956 0000A809 488B4510                	mov rax, ENV
 14957 0000A80D 488B00                  	mov rax, qword [rax + 8 * 0]
 14958 0000A810 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var a
 14959 0000A813 50                      	push rax
 14960 0000A814 6A02                    	push 2	; arg count
 14961 0000A816 488B4510                	mov rax, ENV
 14962 0000A81A 488B4008                	mov rax, qword [rax + 8 * 1]
 14963 0000A81E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin/
 14964 0000A821 803804                  	cmp byte [rax], T_closure
 14965 0000A824 0F85F1D30000            	jne L_error_non_closure
 14966 0000A82A FF7001                  	push SOB_CLOSURE_ENV(rax)
 14967 0000A82D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14968 0000A830 FF7500                  	push qword[rbp]
 14969 0000A833 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14970 0000A836 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14971 0000A83A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14972 0000A83E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14973 0000A842 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14974 0000A845 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14975 0000A848 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14976 0000A84D 4983C103                	add r9, 3 	 ;for getting to the params
 14977 0000A851 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14978 0000A855 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14979                                  .L_tc_recycle_frame_loop_0087:
 14980 0000A858 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14981 0000A85B 7410                    	je .L_tc_recycle_frame_done_0087
 14982 0000A85D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14983 0000A860 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14984 0000A863 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14985 0000A867 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14986 0000A86B EBEB                    	jmp .L_tc_recycle_frame_loop_0087
 14987                                  .L_tc_recycle_frame_done_0087:
 14988 0000A86D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14989 0000A86E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14990 0000A872 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14991 0000A875 C9                      	leave
 14992 0000A876 C21800                  	ret AND_KILL_FRAME(1)
 14993                                  .L_lambda_simple_end_004a:	; new closure is in rax
 14994 0000A879 803804                  	cmp byte [rax], T_closure
 14995 0000A87C 0F8599D30000            	jne L_error_non_closure
 14996 0000A882 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14997 0000A885 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14998 0000A888 FF7500                  	push qword[rbp]
 14999 0000A88B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15000 0000A88E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15001 0000A892 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15002 0000A896 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15003 0000A89A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15004 0000A89D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15005 0000A8A0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15006 0000A8A5 4983C103                	add r9, 3 	 ;for getting to the params
 15007 0000A8A9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15008 0000A8AD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15009                                  .L_tc_recycle_frame_loop_0088:
 15010 0000A8B0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15011 0000A8B3 7410                    	je .L_tc_recycle_frame_done_0088
 15012 0000A8B5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15013 0000A8B8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15014 0000A8BB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15015 0000A8BF 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15016 0000A8C3 EBEB                    	jmp .L_tc_recycle_frame_loop_0088
 15017                                  .L_tc_recycle_frame_done_0088:
 15018 0000A8C5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15019 0000A8C6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15020 0000A8CA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15021                                  .L_if_end_0049:
 15022 0000A8CD C9                      	leave
 15023 0000A8CE C22000                  	ret AND_KILL_FRAME(2)
 15024                                  .L_lambda_opt_end_000d:	; new closure is in rax
 15025 0000A8D1 C9                      	leave
 15026 0000A8D2 C21800                  	ret AND_KILL_FRAME(1)
 15027                                  .L_lambda_simple_end_0049:	; new closure is in rax
 15028 0000A8D5 803804                  	cmp byte [rax], T_closure
 15029 0000A8D8 0F853DD30000            	jne L_error_non_closure
 15030 0000A8DE FF7001                  	push SOB_CLOSURE_ENV(rax)
 15031 0000A8E1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15032 0000A8E4 FF7500                  	push qword[rbp]
 15033 0000A8E7 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15034 0000A8EA 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15035 0000A8EE 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15036 0000A8F2 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15037 0000A8F6 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15038 0000A8F9 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15039 0000A8FC 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15040 0000A901 4983C103                	add r9, 3 	 ;for getting to the params
 15041 0000A905 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15042 0000A909 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15043                                  .L_tc_recycle_frame_loop_008c:
 15044 0000A90C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15045 0000A90F 7410                    	je .L_tc_recycle_frame_done_008c
 15046 0000A911 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15047 0000A914 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15048 0000A917 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15049 0000A91B 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15050 0000A91F EBEB                    	jmp .L_tc_recycle_frame_loop_008c
 15051                                  .L_tc_recycle_frame_done_008c:
 15052 0000A921 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15053 0000A922 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15054 0000A926 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15055 0000A929 C9                      	leave
 15056 0000A92A C21800                  	ret AND_KILL_FRAME(1)
 15057                                  .L_lambda_simple_end_0047:	; new closure is in rax
 15058 0000A92D 803804                  	cmp byte [rax], T_closure
 15059 0000A930 0F85E5D20000            	jne L_error_non_closure
 15060 0000A936 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15061 0000A939 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15062 0000A93C 48890425[F80D0000]      	mov qword [free_var_3], rax
 15063 0000A944 48B8-                   	mov rax, sob_void
 15063 0000A946 [0000000000000000] 
 15064                                  
 15065 0000A94E 4889C7                  	mov rdi, rax
 15066 0000A951 E8C3D50000              	call print_sexpr_if_not_void
 15067 0000A956 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15068 0000A95B E864D30000              	call malloc
 15069 0000A960 50                      	push rax
 15070 0000A961 BF00000000              	mov rdi, 8 * 0	; new rib
 15071 0000A966 E859D30000              	call malloc
 15072 0000A96B 50                      	push rax
 15073 0000A96C BF08000000              	mov rdi, 8 * 1	; extended env
 15074 0000A971 E84ED30000              	call malloc
 15075 0000A976 488B7D10                	mov rdi, ENV
 15076 0000A97A BE00000000              	mov rsi, 0
 15077 0000A97F BA01000000              	mov rdx, 1
 15078                                  .L_lambda_simple_env_loop_004c:	; ext_env[i + 1] <-- env[i]
 15079 0000A984 4883FE00                	cmp rsi, 0
 15080 0000A988 7410                    	je .L_lambda_simple_env_end_004c
 15081 0000A98A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15082 0000A98E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15083 0000A992 48FFC6                  	inc rsi
 15084 0000A995 48FFC2                  	inc rdx
 15085 0000A998 EBEA                    	jmp .L_lambda_simple_env_loop_004c
 15086                                  .L_lambda_simple_env_end_004c:
 15087 0000A99A 5B                      	pop rbx
 15088 0000A99B BE00000000              	mov rsi, 0
 15089                                  .L_lambda_simple_params_loop_004c:	; copy params
 15090 0000A9A0 4883FE00                	cmp rsi, 0
 15091 0000A9A4 740E                    	je .L_lambda_simple_params_end_004c
 15092 0000A9A6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15093 0000A9AB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15094 0000A9AF 48FFC6                  	inc rsi
 15095 0000A9B2 EBEC                    	jmp .L_lambda_simple_params_loop_004c
 15096                                  .L_lambda_simple_params_end_004c:
 15097 0000A9B4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15098 0000A9B7 4889C3                  	mov rbx, rax
 15099 0000A9BA 58                      	pop rax
 15100 0000A9BB C60004                  	mov byte [rax], T_closure
 15101 0000A9BE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15102 0000A9C2 48C74009[CFA90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004c
 15103 0000A9CA E91B010000              	jmp .L_lambda_simple_end_004c
 15104                                  .L_lambda_simple_code_004c:	; lambda-simple body
 15105 0000A9CF 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15106 0000A9D5 740B                    	je .L_lambda_simple_arity_check_ok_004c
 15107 0000A9D7 FF742410                	push qword [rsp + 8 * 2]
 15108 0000A9DB 6A01                    	push 1
 15109 0000A9DD E99BD20000              	jmp L_error_incorrect_arity_simple
 15110                                  .L_lambda_simple_arity_check_ok_004c:
 15111 0000A9E2 C8000000                	enter 0, 0
 15112                                  	; preparing a non-tail-call
 15113 0000A9E6 488B4520                	mov rax, PARAM(0)	; param n
 15114 0000A9EA 50                      	push rax
 15115 0000A9EB 6A01                    	push 1	; arg count
 15116 0000A9ED 488B0425[CC170000]      	mov rax, qword [free_var_151]	; free var zero?
 15117 0000A9F5 803805                  	cmp byte [rax], T_undefined
 15118 0000A9F8 0F8499D10000            	je L_error_fvar_undefined
 15119 0000A9FE 803804                  	cmp byte [rax], T_closure
 15120 0000AA01 0F8514D20000            	jne L_error_non_closure
 15121 0000AA07 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15122 0000AA0A FF5009                  	call SOB_CLOSURE_CODE(rax)
 15123 0000AA0D 483D[02000000]          	cmp rax, sob_boolean_false
 15124 0000AA13 740F                    	je .L_if_else_004b
 15125 0000AA15 48B8-                   	mov rax, L_constants + 2270
 15125 0000AA17 [DE08000000000000] 
 15126 0000AA1F E9C2000000              	jmp .L_if_end_004b
 15127                                  .L_if_else_004b:
 15128                                  	; preparing a tail-call
 15129                                  	; preparing a non-tail-call
 15130                                  	; preparing a non-tail-call
 15131 0000AA24 48B8-                   	mov rax, L_constants + 2270
 15131 0000AA26 [DE08000000000000] 
 15132 0000AA2E 50                      	push rax
 15133 0000AA2F 488B4520                	mov rax, PARAM(0)	; param n
 15134 0000AA33 50                      	push rax
 15135 0000AA34 6A02                    	push 2	; arg count
 15136 0000AA36 488B0425[E70D0000]      	mov rax, qword [free_var_2]	; free var -
 15137 0000AA3E 803805                  	cmp byte [rax], T_undefined
 15138 0000AA41 0F8450D10000            	je L_error_fvar_undefined
 15139 0000AA47 803804                  	cmp byte [rax], T_closure
 15140 0000AA4A 0F85CBD10000            	jne L_error_non_closure
 15141 0000AA50 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15142 0000AA53 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15143 0000AA56 50                      	push rax
 15144 0000AA57 6A01                    	push 1	; arg count
 15145 0000AA59 488B0425[59130000]      	mov rax, qword [free_var_84]	; free var fact
 15146 0000AA61 803805                  	cmp byte [rax], T_undefined
 15147 0000AA64 0F842DD10000            	je L_error_fvar_undefined
 15148 0000AA6A 803804                  	cmp byte [rax], T_closure
 15149 0000AA6D 0F85A8D10000            	jne L_error_non_closure
 15150 0000AA73 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15151 0000AA76 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15152 0000AA79 50                      	push rax
 15153 0000AA7A 488B4520                	mov rax, PARAM(0)	; param n
 15154 0000AA7E 50                      	push rax
 15155 0000AA7F 6A02                    	push 2	; arg count
 15156 0000AA81 488B0425[C50D0000]      	mov rax, qword [free_var_0]	; free var *
 15157 0000AA89 803805                  	cmp byte [rax], T_undefined
 15158 0000AA8C 0F8405D10000            	je L_error_fvar_undefined
 15159 0000AA92 803804                  	cmp byte [rax], T_closure
 15160 0000AA95 0F8580D10000            	jne L_error_non_closure
 15161 0000AA9B FF7001                  	push SOB_CLOSURE_ENV(rax)
 15162 0000AA9E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15163 0000AAA1 FF7500                  	push qword[rbp]
 15164 0000AAA4 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15165 0000AAA7 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15166 0000AAAB 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15167 0000AAAF 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15168 0000AAB3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15169 0000AAB6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15170 0000AAB9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15171 0000AABE 4983C103                	add r9, 3 	 ;for getting to the params
 15172 0000AAC2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15173 0000AAC6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15174                                  .L_tc_recycle_frame_loop_008d:
 15175 0000AAC9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15176 0000AACC 7410                    	je .L_tc_recycle_frame_done_008d
 15177 0000AACE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15178 0000AAD1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15179 0000AAD4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15180 0000AAD8 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15181 0000AADC EBEB                    	jmp .L_tc_recycle_frame_loop_008d
 15182                                  .L_tc_recycle_frame_done_008d:
 15183 0000AADE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15184 0000AADF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15185 0000AAE3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15186                                  .L_if_end_004b:
 15187 0000AAE6 C9                      	leave
 15188 0000AAE7 C21800                  	ret AND_KILL_FRAME(1)
 15189                                  .L_lambda_simple_end_004c:	; new closure is in rax
 15190 0000AAEA 48890425[59130000]      	mov qword [free_var_84], rax
 15191 0000AAF2 48B8-                   	mov rax, sob_void
 15191 0000AAF4 [0000000000000000] 
 15192                                  
 15193 0000AAFC 4889C7                  	mov rdi, rax
 15194 0000AAFF E815D40000              	call print_sexpr_if_not_void
 15195 0000AB04 48B8-                   	mov rax, L_constants + 0
 15195 0000AB06 [0000000000000000] 
 15196 0000AB0E 48890425[090E0000]      	mov qword [free_var_4], rax
 15197 0000AB16 48B8-                   	mov rax, sob_void
 15197 0000AB18 [0000000000000000] 
 15198                                  
 15199 0000AB20 4889C7                  	mov rdi, rax
 15200 0000AB23 E8F1D30000              	call print_sexpr_if_not_void
 15201 0000AB28 48B8-                   	mov rax, L_constants + 0
 15201 0000AB2A [0000000000000000] 
 15202 0000AB32 48890425[1A0E0000]      	mov qword [free_var_5], rax
 15203 0000AB3A 48B8-                   	mov rax, sob_void
 15203 0000AB3C [0000000000000000] 
 15204                                  
 15205 0000AB44 4889C7                  	mov rdi, rax
 15206 0000AB47 E8CDD30000              	call print_sexpr_if_not_void
 15207 0000AB4C 48B8-                   	mov rax, L_constants + 0
 15207 0000AB4E [0000000000000000] 
 15208 0000AB56 48890425[3C0E0000]      	mov qword [free_var_7], rax
 15209 0000AB5E 48B8-                   	mov rax, sob_void
 15209 0000AB60 [0000000000000000] 
 15210                                  
 15211 0000AB68 4889C7                  	mov rdi, rax
 15212 0000AB6B E8A9D30000              	call print_sexpr_if_not_void
 15213 0000AB70 48B8-                   	mov rax, L_constants + 0
 15213 0000AB72 [0000000000000000] 
 15214 0000AB7A 48890425[4D0E0000]      	mov qword [free_var_8], rax
 15215 0000AB82 48B8-                   	mov rax, sob_void
 15215 0000AB84 [0000000000000000] 
 15216                                  
 15217 0000AB8C 4889C7                  	mov rdi, rax
 15218 0000AB8F E885D30000              	call print_sexpr_if_not_void
 15219 0000AB94 48B8-                   	mov rax, L_constants + 0
 15219 0000AB96 [0000000000000000] 
 15220 0000AB9E 48890425[2B0E0000]      	mov qword [free_var_6], rax
 15221 0000ABA6 48B8-                   	mov rax, sob_void
 15221 0000ABA8 [0000000000000000] 
 15222                                  
 15223 0000ABB0 4889C7                  	mov rdi, rax
 15224 0000ABB3 E861D30000              	call print_sexpr_if_not_void
 15225                                  	; preparing a non-tail-call
 15226 0000ABB8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15227 0000ABBD E802D10000              	call malloc
 15228 0000ABC2 50                      	push rax
 15229 0000ABC3 BF00000000              	mov rdi, 8 * 0	; new rib
 15230 0000ABC8 E8F7D00000              	call malloc
 15231 0000ABCD 50                      	push rax
 15232 0000ABCE BF08000000              	mov rdi, 8 * 1	; extended env
 15233 0000ABD3 E8ECD00000              	call malloc
 15234 0000ABD8 488B7D10                	mov rdi, ENV
 15235 0000ABDC BE00000000              	mov rsi, 0
 15236 0000ABE1 BA01000000              	mov rdx, 1
 15237                                  .L_lambda_simple_env_loop_004d:	; ext_env[i + 1] <-- env[i]
 15238 0000ABE6 4883FE00                	cmp rsi, 0
 15239 0000ABEA 7410                    	je .L_lambda_simple_env_end_004d
 15240 0000ABEC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15241 0000ABF0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15242 0000ABF4 48FFC6                  	inc rsi
 15243 0000ABF7 48FFC2                  	inc rdx
 15244 0000ABFA EBEA                    	jmp .L_lambda_simple_env_loop_004d
 15245                                  .L_lambda_simple_env_end_004d:
 15246 0000ABFC 5B                      	pop rbx
 15247 0000ABFD BE00000000              	mov rsi, 0
 15248                                  .L_lambda_simple_params_loop_004d:	; copy params
 15249 0000AC02 4883FE00                	cmp rsi, 0
 15250 0000AC06 740E                    	je .L_lambda_simple_params_end_004d
 15251 0000AC08 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15252 0000AC0D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15253 0000AC11 48FFC6                  	inc rsi
 15254 0000AC14 EBEC                    	jmp .L_lambda_simple_params_loop_004d
 15255                                  .L_lambda_simple_params_end_004d:
 15256 0000AC16 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15257 0000AC19 4889C3                  	mov rbx, rax
 15258 0000AC1C 58                      	pop rax
 15259 0000AC1D C60004                  	mov byte [rax], T_closure
 15260 0000AC20 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15261 0000AC24 48C74009[31AC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004d
 15262 0000AC2C E998000000              	jmp .L_lambda_simple_end_004d
 15263                                  .L_lambda_simple_code_004d:	; lambda-simple body
 15264 0000AC31 48837C241000            	cmp qword [rsp + 8 * 2], 0
 15265 0000AC37 740B                    	je .L_lambda_simple_arity_check_ok_004d
 15266 0000AC39 FF742410                	push qword [rsp + 8 * 2]
 15267 0000AC3D 6A00                    	push 0
 15268 0000AC3F E939D00000              	jmp L_error_incorrect_arity_simple
 15269                                  .L_lambda_simple_arity_check_ok_004d:
 15270 0000AC44 C8000000                	enter 0, 0
 15271                                  	; preparing a tail-call
 15272 0000AC48 48B8-                   	mov rax, L_constants + 2408
 15272 0000AC4A [6809000000000000] 
 15273 0000AC52 50                      	push rax
 15274 0000AC53 48B8-                   	mov rax, L_constants + 2399
 15274 0000AC55 [5F09000000000000] 
 15275 0000AC5D 50                      	push rax
 15276 0000AC5E 6A02                    	push 2	; arg count
 15277 0000AC60 488B0425[37130000]      	mov rax, qword [free_var_82]	; free var error
 15278 0000AC68 803805                  	cmp byte [rax], T_undefined
 15279 0000AC6B 0F8426CF0000            	je L_error_fvar_undefined
 15280 0000AC71 803804                  	cmp byte [rax], T_closure
 15281 0000AC74 0F85A1CF0000            	jne L_error_non_closure
 15282 0000AC7A FF7001                  	push SOB_CLOSURE_ENV(rax)
 15283 0000AC7D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15284 0000AC80 FF7500                  	push qword[rbp]
 15285 0000AC83 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15286 0000AC86 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15287 0000AC8A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15288 0000AC8E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15289 0000AC92 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15290 0000AC95 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15291 0000AC98 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15292 0000AC9D 4983C103                	add r9, 3 	 ;for getting to the params
 15293 0000ACA1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15294 0000ACA5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15295                                  .L_tc_recycle_frame_loop_008e:
 15296 0000ACA8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15297 0000ACAB 7410                    	je .L_tc_recycle_frame_done_008e
 15298 0000ACAD 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15299 0000ACB0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15300 0000ACB3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15301 0000ACB7 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15302 0000ACBB EBEB                    	jmp .L_tc_recycle_frame_loop_008e
 15303                                  .L_tc_recycle_frame_done_008e:
 15304 0000ACBD 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15305 0000ACBE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15306 0000ACC2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15307 0000ACC5 C9                      	leave
 15308 0000ACC6 C21000                  	ret AND_KILL_FRAME(0)
 15309                                  .L_lambda_simple_end_004d:	; new closure is in rax
 15310 0000ACC9 50                      	push rax
 15311 0000ACCA 6A01                    	push 1	; arg count
 15312 0000ACCC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15313 0000ACD1 E8EECF0000              	call malloc
 15314 0000ACD6 50                      	push rax
 15315 0000ACD7 BF00000000              	mov rdi, 8 * 0	; new rib
 15316 0000ACDC E8E3CF0000              	call malloc
 15317 0000ACE1 50                      	push rax
 15318 0000ACE2 BF08000000              	mov rdi, 8 * 1	; extended env
 15319 0000ACE7 E8D8CF0000              	call malloc
 15320 0000ACEC 488B7D10                	mov rdi, ENV
 15321 0000ACF0 BE00000000              	mov rsi, 0
 15322 0000ACF5 BA01000000              	mov rdx, 1
 15323                                  .L_lambda_simple_env_loop_004e:	; ext_env[i + 1] <-- env[i]
 15324 0000ACFA 4883FE00                	cmp rsi, 0
 15325 0000ACFE 7410                    	je .L_lambda_simple_env_end_004e
 15326 0000AD00 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15327 0000AD04 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15328 0000AD08 48FFC6                  	inc rsi
 15329 0000AD0B 48FFC2                  	inc rdx
 15330 0000AD0E EBEA                    	jmp .L_lambda_simple_env_loop_004e
 15331                                  .L_lambda_simple_env_end_004e:
 15332 0000AD10 5B                      	pop rbx
 15333 0000AD11 BE00000000              	mov rsi, 0
 15334                                  .L_lambda_simple_params_loop_004e:	; copy params
 15335 0000AD16 4883FE00                	cmp rsi, 0
 15336 0000AD1A 740E                    	je .L_lambda_simple_params_end_004e
 15337 0000AD1C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15338 0000AD21 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15339 0000AD25 48FFC6                  	inc rsi
 15340 0000AD28 EBEC                    	jmp .L_lambda_simple_params_loop_004e
 15341                                  .L_lambda_simple_params_end_004e:
 15342 0000AD2A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15343 0000AD2D 4889C3                  	mov rbx, rax
 15344 0000AD30 58                      	pop rax
 15345 0000AD31 C60004                  	mov byte [rax], T_closure
 15346 0000AD34 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15347 0000AD38 48C74009[45AD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004e
 15348 0000AD40 E91F1B0000              	jmp .L_lambda_simple_end_004e
 15349                                  .L_lambda_simple_code_004e:	; lambda-simple body
 15350 0000AD45 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15351 0000AD4B 740B                    	je .L_lambda_simple_arity_check_ok_004e
 15352 0000AD4D FF742410                	push qword [rsp + 8 * 2]
 15353 0000AD51 6A01                    	push 1
 15354 0000AD53 E925CF0000              	jmp L_error_incorrect_arity_simple
 15355                                  .L_lambda_simple_arity_check_ok_004e:
 15356 0000AD58 C8000000                	enter 0, 0
 15357                                  	; preparing a tail-call
 15358 0000AD5C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15359 0000AD61 E85ECF0000              	call malloc
 15360 0000AD66 50                      	push rax
 15361 0000AD67 BF08000000              	mov rdi, 8 * 1	; new rib
 15362 0000AD6C E853CF0000              	call malloc
 15363 0000AD71 50                      	push rax
 15364 0000AD72 BF10000000              	mov rdi, 8 * 2	; extended env
 15365 0000AD77 E848CF0000              	call malloc
 15366 0000AD7C 488B7D10                	mov rdi, ENV
 15367 0000AD80 BE00000000              	mov rsi, 0
 15368 0000AD85 BA01000000              	mov rdx, 1
 15369                                  .L_lambda_simple_env_loop_004f:	; ext_env[i + 1] <-- env[i]
 15370 0000AD8A 4883FE01                	cmp rsi, 1
 15371 0000AD8E 7410                    	je .L_lambda_simple_env_end_004f
 15372 0000AD90 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15373 0000AD94 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15374 0000AD98 48FFC6                  	inc rsi
 15375 0000AD9B 48FFC2                  	inc rdx
 15376 0000AD9E EBEA                    	jmp .L_lambda_simple_env_loop_004f
 15377                                  .L_lambda_simple_env_end_004f:
 15378 0000ADA0 5B                      	pop rbx
 15379 0000ADA1 BE00000000              	mov rsi, 0
 15380                                  .L_lambda_simple_params_loop_004f:	; copy params
 15381 0000ADA6 4883FE01                	cmp rsi, 1
 15382 0000ADAA 740E                    	je .L_lambda_simple_params_end_004f
 15383 0000ADAC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15384 0000ADB1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15385 0000ADB5 48FFC6                  	inc rsi
 15386 0000ADB8 EBEC                    	jmp .L_lambda_simple_params_loop_004f
 15387                                  .L_lambda_simple_params_end_004f:
 15388 0000ADBA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15389 0000ADBD 4889C3                  	mov rbx, rax
 15390 0000ADC0 58                      	pop rax
 15391 0000ADC1 C60004                  	mov byte [rax], T_closure
 15392 0000ADC4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15393 0000ADC8 48C74009[D5AD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004f
 15394 0000ADD0 E94F090000              	jmp .L_lambda_simple_end_004f
 15395                                  .L_lambda_simple_code_004f:	; lambda-simple body
 15396 0000ADD5 48837C241003            	cmp qword [rsp + 8 * 2], 3
 15397 0000ADDB 740B                    	je .L_lambda_simple_arity_check_ok_004f
 15398 0000ADDD FF742410                	push qword [rsp + 8 * 2]
 15399 0000ADE1 6A03                    	push 3
 15400 0000ADE3 E995CE0000              	jmp L_error_incorrect_arity_simple
 15401                                  .L_lambda_simple_arity_check_ok_004f:
 15402 0000ADE8 C8000000                	enter 0, 0
 15403 0000ADEC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15404 0000ADF1 E8CECE0000              	call malloc
 15405 0000ADF6 50                      	push rax
 15406 0000ADF7 BF18000000              	mov rdi, 8 * 3	; new rib
 15407 0000ADFC E8C3CE0000              	call malloc
 15408 0000AE01 50                      	push rax
 15409 0000AE02 BF18000000              	mov rdi, 8 * 3	; extended env
 15410 0000AE07 E8B8CE0000              	call malloc
 15411 0000AE0C 488B7D10                	mov rdi, ENV
 15412 0000AE10 BE00000000              	mov rsi, 0
 15413 0000AE15 BA01000000              	mov rdx, 1
 15414                                  .L_lambda_simple_env_loop_0050:	; ext_env[i + 1] <-- env[i]
 15415 0000AE1A 4883FE02                	cmp rsi, 2
 15416 0000AE1E 7410                    	je .L_lambda_simple_env_end_0050
 15417 0000AE20 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15418 0000AE24 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15419 0000AE28 48FFC6                  	inc rsi
 15420 0000AE2B 48FFC2                  	inc rdx
 15421 0000AE2E EBEA                    	jmp .L_lambda_simple_env_loop_0050
 15422                                  .L_lambda_simple_env_end_0050:
 15423 0000AE30 5B                      	pop rbx
 15424 0000AE31 BE00000000              	mov rsi, 0
 15425                                  .L_lambda_simple_params_loop_0050:	; copy params
 15426 0000AE36 4883FE03                	cmp rsi, 3
 15427 0000AE3A 740E                    	je .L_lambda_simple_params_end_0050
 15428 0000AE3C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15429 0000AE41 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15430 0000AE45 48FFC6                  	inc rsi
 15431 0000AE48 EBEC                    	jmp .L_lambda_simple_params_loop_0050
 15432                                  .L_lambda_simple_params_end_0050:
 15433 0000AE4A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15434 0000AE4D 4889C3                  	mov rbx, rax
 15435 0000AE50 58                      	pop rax
 15436 0000AE51 C60004                  	mov byte [rax], T_closure
 15437 0000AE54 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15438 0000AE58 48C74009[65AE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0050
 15439 0000AE60 E9BB080000              	jmp .L_lambda_simple_end_0050
 15440                                  .L_lambda_simple_code_0050:	; lambda-simple body
 15441 0000AE65 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15442 0000AE6B 740B                    	je .L_lambda_simple_arity_check_ok_0050
 15443 0000AE6D FF742410                	push qword [rsp + 8 * 2]
 15444 0000AE71 6A02                    	push 2
 15445 0000AE73 E905CE0000              	jmp L_error_incorrect_arity_simple
 15446                                  .L_lambda_simple_arity_check_ok_0050:
 15447 0000AE78 C8000000                	enter 0, 0
 15448                                  	; preparing a non-tail-call
 15449 0000AE7C 488B4520                	mov rax, PARAM(0)	; param a
 15450 0000AE80 50                      	push rax
 15451 0000AE81 6A01                    	push 1	; arg count
 15452 0000AE83 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 15453 0000AE8B 803805                  	cmp byte [rax], T_undefined
 15454 0000AE8E 0F8403CD0000            	je L_error_fvar_undefined
 15455 0000AE94 803804                  	cmp byte [rax], T_closure
 15456 0000AE97 0F857ECD0000            	jne L_error_non_closure
 15457 0000AE9D FF7001                  	push SOB_CLOSURE_ENV(rax)
 15458 0000AEA0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15459 0000AEA3 483D[02000000]          	cmp rax, sob_boolean_false
 15460 0000AEA9 0F848D020000            	je .L_if_else_0057
 15461                                  	; preparing a non-tail-call
 15462 0000AEAF 488B4528                	mov rax, PARAM(1)	; param b
 15463 0000AEB3 50                      	push rax
 15464 0000AEB4 6A01                    	push 1	; arg count
 15465 0000AEB6 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 15466 0000AEBE 803805                  	cmp byte [rax], T_undefined
 15467 0000AEC1 0F84D0CC0000            	je L_error_fvar_undefined
 15468 0000AEC7 803804                  	cmp byte [rax], T_closure
 15469 0000AECA 0F854BCD0000            	jne L_error_non_closure
 15470 0000AED0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15471 0000AED3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15472 0000AED6 483D[02000000]          	cmp rax, sob_boolean_false
 15473 0000AEDC 746F                    	je .L_if_else_004e
 15474                                  	; preparing a tail-call
 15475 0000AEDE 488B4528                	mov rax, PARAM(1)	; param b
 15476 0000AEE2 50                      	push rax
 15477 0000AEE3 488B4520                	mov rax, PARAM(0)	; param a
 15478 0000AEE7 50                      	push rax
 15479 0000AEE8 6A02                    	push 2	; arg count
 15480 0000AEEA 488B4510                	mov rax, ENV
 15481 0000AEEE 488B00                  	mov rax, qword [rax + 8 * 0]
 15482 0000AEF1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator-zz
 15483 0000AEF4 803804                  	cmp byte [rax], T_closure
 15484 0000AEF7 0F851ECD0000            	jne L_error_non_closure
 15485 0000AEFD FF7001                  	push SOB_CLOSURE_ENV(rax)
 15486 0000AF00 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15487 0000AF03 FF7500                  	push qword[rbp]
 15488 0000AF06 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15489 0000AF09 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15490 0000AF0D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15491 0000AF11 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15492 0000AF15 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15493 0000AF18 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15494 0000AF1B 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15495 0000AF20 4983C103                	add r9, 3 	 ;for getting to the params
 15496 0000AF24 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15497 0000AF28 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15498                                  .L_tc_recycle_frame_loop_008f:
 15499 0000AF2B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15500 0000AF2E 7410                    	je .L_tc_recycle_frame_done_008f
 15501 0000AF30 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15502 0000AF33 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15503 0000AF36 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15504 0000AF3A 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15505 0000AF3E EBEB                    	jmp .L_tc_recycle_frame_loop_008f
 15506                                  .L_tc_recycle_frame_done_008f:
 15507 0000AF40 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15508 0000AF41 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15509 0000AF45 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15510 0000AF48 E9EA010000              	jmp .L_if_end_004e
 15511                                  .L_if_else_004e:
 15512                                  	; preparing a non-tail-call
 15513 0000AF4D 488B4528                	mov rax, PARAM(1)	; param b
 15514 0000AF51 50                      	push rax
 15515 0000AF52 6A01                    	push 1	; arg count
 15516 0000AF54 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 15517 0000AF5C 803805                  	cmp byte [rax], T_undefined
 15518 0000AF5F 0F8432CC0000            	je L_error_fvar_undefined
 15519 0000AF65 803804                  	cmp byte [rax], T_closure
 15520 0000AF68 0F85ADCC0000            	jne L_error_non_closure
 15521 0000AF6E FF7001                  	push SOB_CLOSURE_ENV(rax)
 15522 0000AF71 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15523 0000AF74 483D[02000000]          	cmp rax, sob_boolean_false
 15524 0000AF7A 0F8493000000            	je .L_if_else_004d
 15525                                  	; preparing a tail-call
 15526 0000AF80 488B4528                	mov rax, PARAM(1)	; param b
 15527 0000AF84 50                      	push rax
 15528                                  	; preparing a non-tail-call
 15529 0000AF85 488B4520                	mov rax, PARAM(0)	; param a
 15530 0000AF89 50                      	push rax
 15531 0000AF8A 6A01                    	push 1	; arg count
 15532 0000AF8C 488B0425[B20F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 15533 0000AF94 803805                  	cmp byte [rax], T_undefined
 15534 0000AF97 0F84FACB0000            	je L_error_fvar_undefined
 15535 0000AF9D 803804                  	cmp byte [rax], T_closure
 15536 0000AFA0 0F8575CC0000            	jne L_error_non_closure
 15537 0000AFA6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15538 0000AFA9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15539 0000AFAC 50                      	push rax
 15540 0000AFAD 6A02                    	push 2	; arg count
 15541 0000AFAF 488B4510                	mov rax, ENV
 15542 0000AFB3 488B00                  	mov rax, qword [rax + 8 * 0]
 15543 0000AFB6 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var comparator-qq
 15544 0000AFBA 803804                  	cmp byte [rax], T_closure
 15545 0000AFBD 0F8558CC0000            	jne L_error_non_closure
 15546 0000AFC3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15547 0000AFC6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15548 0000AFC9 FF7500                  	push qword[rbp]
 15549 0000AFCC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15550 0000AFCF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15551 0000AFD3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15552 0000AFD7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15553 0000AFDB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15554 0000AFDE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15555 0000AFE1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15556 0000AFE6 4983C103                	add r9, 3 	 ;for getting to the params
 15557 0000AFEA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15558 0000AFEE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15559                                  .L_tc_recycle_frame_loop_0090:
 15560 0000AFF1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15561 0000AFF4 7410                    	je .L_tc_recycle_frame_done_0090
 15562 0000AFF6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15563 0000AFF9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15564 0000AFFC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15565 0000B000 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15566 0000B004 EBEB                    	jmp .L_tc_recycle_frame_loop_0090
 15567                                  .L_tc_recycle_frame_done_0090:
 15568 0000B006 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15569 0000B007 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15570 0000B00B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15571 0000B00E E924010000              	jmp .L_if_end_004d
 15572                                  .L_if_else_004d:
 15573                                  	; preparing a non-tail-call
 15574 0000B013 488B4528                	mov rax, PARAM(1)	; param b
 15575 0000B017 50                      	push rax
 15576 0000B018 6A01                    	push 1	; arg count
 15577 0000B01A 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 15578 0000B022 803805                  	cmp byte [rax], T_undefined
 15579 0000B025 0F846CCB0000            	je L_error_fvar_undefined
 15580 0000B02B 803804                  	cmp byte [rax], T_closure
 15581 0000B02E 0F85E7CB0000            	jne L_error_non_closure
 15582 0000B034 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15583 0000B037 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15584 0000B03A 483D[02000000]          	cmp rax, sob_boolean_false
 15585 0000B040 0F8490000000            	je .L_if_else_004c
 15586                                  	; preparing a tail-call
 15587 0000B046 488B4528                	mov rax, PARAM(1)	; param b
 15588 0000B04A 50                      	push rax
 15589                                  	; preparing a non-tail-call
 15590 0000B04B 488B4520                	mov rax, PARAM(0)	; param a
 15591 0000B04F 50                      	push rax
 15592 0000B050 6A01                    	push 1	; arg count
 15593 0000B052 488B0425[BF130000]      	mov rax, qword [free_var_90]	; free var integer->real
 15594 0000B05A 803805                  	cmp byte [rax], T_undefined
 15595 0000B05D 0F8434CB0000            	je L_error_fvar_undefined
 15596 0000B063 803804                  	cmp byte [rax], T_closure
 15597 0000B066 0F85AFCB0000            	jne L_error_non_closure
 15598 0000B06C FF7001                  	push SOB_CLOSURE_ENV(rax)
 15599 0000B06F FF5009                  	call SOB_CLOSURE_CODE(rax)
 15600 0000B072 50                      	push rax
 15601 0000B073 6A02                    	push 2	; arg count
 15602 0000B075 488B4510                	mov rax, ENV
 15603 0000B079 488B00                  	mov rax, qword [rax + 8 * 0]
 15604 0000B07C 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 15605 0000B080 803804                  	cmp byte [rax], T_closure
 15606 0000B083 0F8592CB0000            	jne L_error_non_closure
 15607 0000B089 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15608 0000B08C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15609 0000B08F FF7500                  	push qword[rbp]
 15610 0000B092 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15611 0000B095 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15612 0000B099 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15613 0000B09D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15614 0000B0A1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15615 0000B0A4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15616 0000B0A7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15617 0000B0AC 4983C103                	add r9, 3 	 ;for getting to the params
 15618 0000B0B0 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15619 0000B0B4 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15620                                  .L_tc_recycle_frame_loop_0091:
 15621 0000B0B7 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15622 0000B0BA 7410                    	je .L_tc_recycle_frame_done_0091
 15623 0000B0BC 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15624 0000B0BF 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15625 0000B0C2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15626 0000B0C6 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15627 0000B0CA EBEB                    	jmp .L_tc_recycle_frame_loop_0091
 15628                                  .L_tc_recycle_frame_done_0091:
 15629 0000B0CC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15630 0000B0CD 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15631 0000B0D1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15632 0000B0D4 EB61                    	jmp .L_if_end_004c
 15633                                  .L_if_else_004c:
 15634                                  	; preparing a tail-call
 15635 0000B0D6 6A00                    	push 0	; arg count
 15636 0000B0D8 488B4510                	mov rax, ENV
 15637 0000B0DC 488B4008                	mov rax, qword [rax + 8 * 1]
 15638 0000B0E0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 15639 0000B0E3 803804                  	cmp byte [rax], T_closure
 15640 0000B0E6 0F852FCB0000            	jne L_error_non_closure
 15641 0000B0EC FF7001                  	push SOB_CLOSURE_ENV(rax)
 15642 0000B0EF FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15643 0000B0F2 FF7500                  	push qword[rbp]
 15644 0000B0F5 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15645 0000B0F8 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15646 0000B0FC 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15647 0000B100 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15648 0000B104 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15649 0000B107 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15650 0000B10A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15651 0000B10F 4983C103                	add r9, 3 	 ;for getting to the params
 15652 0000B113 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15653 0000B117 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15654                                  .L_tc_recycle_frame_loop_0092:
 15655 0000B11A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15656 0000B11D 7410                    	je .L_tc_recycle_frame_done_0092
 15657 0000B11F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15658 0000B122 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15659 0000B125 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15660 0000B129 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15661 0000B12D EBEB                    	jmp .L_tc_recycle_frame_loop_0092
 15662                                  .L_tc_recycle_frame_done_0092:
 15663 0000B12F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15664 0000B130 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15665 0000B134 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15666                                  .L_if_end_004c:
 15667                                  .L_if_end_004d:
 15668                                  .L_if_end_004e:
 15669 0000B137 E9E0050000              	jmp .L_if_end_0057
 15670                                  .L_if_else_0057:
 15671                                  	; preparing a non-tail-call
 15672 0000B13C 488B4520                	mov rax, PARAM(0)	; param a
 15673 0000B140 50                      	push rax
 15674 0000B141 6A01                    	push 1	; arg count
 15675 0000B143 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 15676 0000B14B 803805                  	cmp byte [rax], T_undefined
 15677 0000B14E 0F8443CA0000            	je L_error_fvar_undefined
 15678 0000B154 803804                  	cmp byte [rax], T_closure
 15679 0000B157 0F85BECA0000            	jne L_error_non_closure
 15680 0000B15D FF7001                  	push SOB_CLOSURE_ENV(rax)
 15681 0000B160 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15682 0000B163 483D[02000000]          	cmp rax, sob_boolean_false
 15683 0000B169 0F848E020000            	je .L_if_else_0056
 15684                                  	; preparing a non-tail-call
 15685 0000B16F 488B4528                	mov rax, PARAM(1)	; param b
 15686 0000B173 50                      	push rax
 15687 0000B174 6A01                    	push 1	; arg count
 15688 0000B176 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 15689 0000B17E 803805                  	cmp byte [rax], T_undefined
 15690 0000B181 0F8410CA0000            	je L_error_fvar_undefined
 15691 0000B187 803804                  	cmp byte [rax], T_closure
 15692 0000B18A 0F858BCA0000            	jne L_error_non_closure
 15693 0000B190 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15694 0000B193 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15695 0000B196 483D[02000000]          	cmp rax, sob_boolean_false
 15696 0000B19C 0F8493000000            	je .L_if_else_0051
 15697                                  	; preparing a tail-call
 15698                                  	; preparing a non-tail-call
 15699 0000B1A2 488B4528                	mov rax, PARAM(1)	; param b
 15700 0000B1A6 50                      	push rax
 15701 0000B1A7 6A01                    	push 1	; arg count
 15702 0000B1A9 488B0425[B20F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 15703 0000B1B1 803805                  	cmp byte [rax], T_undefined
 15704 0000B1B4 0F84DDC90000            	je L_error_fvar_undefined
 15705 0000B1BA 803804                  	cmp byte [rax], T_closure
 15706 0000B1BD 0F8558CA0000            	jne L_error_non_closure
 15707 0000B1C3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15708 0000B1C6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15709 0000B1C9 50                      	push rax
 15710 0000B1CA 488B4520                	mov rax, PARAM(0)	; param a
 15711 0000B1CE 50                      	push rax
 15712 0000B1CF 6A02                    	push 2	; arg count
 15713 0000B1D1 488B4510                	mov rax, ENV
 15714 0000B1D5 488B00                  	mov rax, qword [rax + 8 * 0]
 15715 0000B1D8 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var comparator-qq
 15716 0000B1DC 803804                  	cmp byte [rax], T_closure
 15717 0000B1DF 0F8536CA0000            	jne L_error_non_closure
 15718 0000B1E5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15719 0000B1E8 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15720 0000B1EB FF7500                  	push qword[rbp]
 15721 0000B1EE 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15722 0000B1F1 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15723 0000B1F5 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15724 0000B1F9 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15725 0000B1FD 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15726 0000B200 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15727 0000B203 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15728 0000B208 4983C103                	add r9, 3 	 ;for getting to the params
 15729 0000B20C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15730 0000B210 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15731                                  .L_tc_recycle_frame_loop_0093:
 15732 0000B213 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15733 0000B216 7410                    	je .L_tc_recycle_frame_done_0093
 15734 0000B218 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15735 0000B21B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15736 0000B21E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15737 0000B222 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15738 0000B226 EBEB                    	jmp .L_tc_recycle_frame_loop_0093
 15739                                  .L_tc_recycle_frame_done_0093:
 15740 0000B228 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15741 0000B229 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15742 0000B22D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15743 0000B230 E9C3010000              	jmp .L_if_end_0051
 15744                                  .L_if_else_0051:
 15745                                  	; preparing a non-tail-call
 15746 0000B235 488B4528                	mov rax, PARAM(1)	; param b
 15747 0000B239 50                      	push rax
 15748 0000B23A 6A01                    	push 1	; arg count
 15749 0000B23C 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 15750 0000B244 803805                  	cmp byte [rax], T_undefined
 15751 0000B247 0F844AC90000            	je L_error_fvar_undefined
 15752 0000B24D 803804                  	cmp byte [rax], T_closure
 15753 0000B250 0F85C5C90000            	jne L_error_non_closure
 15754 0000B256 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15755 0000B259 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15756 0000B25C 483D[02000000]          	cmp rax, sob_boolean_false
 15757 0000B262 7470                    	je .L_if_else_0050
 15758                                  	; preparing a tail-call
 15759 0000B264 488B4528                	mov rax, PARAM(1)	; param b
 15760 0000B268 50                      	push rax
 15761 0000B269 488B4520                	mov rax, PARAM(0)	; param a
 15762 0000B26D 50                      	push rax
 15763 0000B26E 6A02                    	push 2	; arg count
 15764 0000B270 488B4510                	mov rax, ENV
 15765 0000B274 488B00                  	mov rax, qword [rax + 8 * 0]
 15766 0000B277 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var comparator-qq
 15767 0000B27B 803804                  	cmp byte [rax], T_closure
 15768 0000B27E 0F8597C90000            	jne L_error_non_closure
 15769 0000B284 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15770 0000B287 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15771 0000B28A FF7500                  	push qword[rbp]
 15772 0000B28D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15773 0000B290 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15774 0000B294 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15775 0000B298 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15776 0000B29C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15777 0000B29F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15778 0000B2A2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15779 0000B2A7 4983C103                	add r9, 3 	 ;for getting to the params
 15780 0000B2AB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15781 0000B2AF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15782                                  .L_tc_recycle_frame_loop_0094:
 15783 0000B2B2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15784 0000B2B5 7410                    	je .L_tc_recycle_frame_done_0094
 15785 0000B2B7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15786 0000B2BA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15787 0000B2BD 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15788 0000B2C1 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15789 0000B2C5 EBEB                    	jmp .L_tc_recycle_frame_loop_0094
 15790                                  .L_tc_recycle_frame_done_0094:
 15791 0000B2C7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15792 0000B2C8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15793 0000B2CC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15794 0000B2CF E924010000              	jmp .L_if_end_0050
 15795                                  .L_if_else_0050:
 15796                                  	; preparing a non-tail-call
 15797 0000B2D4 488B4528                	mov rax, PARAM(1)	; param b
 15798 0000B2D8 50                      	push rax
 15799 0000B2D9 6A01                    	push 1	; arg count
 15800 0000B2DB 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 15801 0000B2E3 803805                  	cmp byte [rax], T_undefined
 15802 0000B2E6 0F84ABC80000            	je L_error_fvar_undefined
 15803 0000B2EC 803804                  	cmp byte [rax], T_closure
 15804 0000B2EF 0F8526C90000            	jne L_error_non_closure
 15805 0000B2F5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15806 0000B2F8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15807 0000B2FB 483D[02000000]          	cmp rax, sob_boolean_false
 15808 0000B301 0F8490000000            	je .L_if_else_004f
 15809                                  	; preparing a tail-call
 15810 0000B307 488B4528                	mov rax, PARAM(1)	; param b
 15811 0000B30B 50                      	push rax
 15812                                  	; preparing a non-tail-call
 15813 0000B30C 488B4520                	mov rax, PARAM(0)	; param a
 15814 0000B310 50                      	push rax
 15815 0000B311 6A01                    	push 1	; arg count
 15816 0000B313 488B0425[8C130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 15817 0000B31B 803805                  	cmp byte [rax], T_undefined
 15818 0000B31E 0F8473C80000            	je L_error_fvar_undefined
 15819 0000B324 803804                  	cmp byte [rax], T_closure
 15820 0000B327 0F85EEC80000            	jne L_error_non_closure
 15821 0000B32D FF7001                  	push SOB_CLOSURE_ENV(rax)
 15822 0000B330 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15823 0000B333 50                      	push rax
 15824 0000B334 6A02                    	push 2	; arg count
 15825 0000B336 488B4510                	mov rax, ENV
 15826 0000B33A 488B00                  	mov rax, qword [rax + 8 * 0]
 15827 0000B33D 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 15828 0000B341 803804                  	cmp byte [rax], T_closure
 15829 0000B344 0F85D1C80000            	jne L_error_non_closure
 15830 0000B34A FF7001                  	push SOB_CLOSURE_ENV(rax)
 15831 0000B34D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15832 0000B350 FF7500                  	push qword[rbp]
 15833 0000B353 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15834 0000B356 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15835 0000B35A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15836 0000B35E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15837 0000B362 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15838 0000B365 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15839 0000B368 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15840 0000B36D 4983C103                	add r9, 3 	 ;for getting to the params
 15841 0000B371 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15842 0000B375 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15843                                  .L_tc_recycle_frame_loop_0095:
 15844 0000B378 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15845 0000B37B 7410                    	je .L_tc_recycle_frame_done_0095
 15846 0000B37D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15847 0000B380 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15848 0000B383 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15849 0000B387 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15850 0000B38B EBEB                    	jmp .L_tc_recycle_frame_loop_0095
 15851                                  .L_tc_recycle_frame_done_0095:
 15852 0000B38D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15853 0000B38E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15854 0000B392 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15855 0000B395 EB61                    	jmp .L_if_end_004f
 15856                                  .L_if_else_004f:
 15857                                  	; preparing a tail-call
 15858 0000B397 6A00                    	push 0	; arg count
 15859 0000B399 488B4510                	mov rax, ENV
 15860 0000B39D 488B4008                	mov rax, qword [rax + 8 * 1]
 15861 0000B3A1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 15862 0000B3A4 803804                  	cmp byte [rax], T_closure
 15863 0000B3A7 0F856EC80000            	jne L_error_non_closure
 15864 0000B3AD FF7001                  	push SOB_CLOSURE_ENV(rax)
 15865 0000B3B0 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15866 0000B3B3 FF7500                  	push qword[rbp]
 15867 0000B3B6 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15868 0000B3B9 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15869 0000B3BD 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15870 0000B3C1 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15871 0000B3C5 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15872 0000B3C8 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15873 0000B3CB 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15874 0000B3D0 4983C103                	add r9, 3 	 ;for getting to the params
 15875 0000B3D4 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15876 0000B3D8 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15877                                  .L_tc_recycle_frame_loop_0096:
 15878 0000B3DB 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15879 0000B3DE 7410                    	je .L_tc_recycle_frame_done_0096
 15880 0000B3E0 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15881 0000B3E3 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15882 0000B3E6 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15883 0000B3EA 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15884 0000B3EE EBEB                    	jmp .L_tc_recycle_frame_loop_0096
 15885                                  .L_tc_recycle_frame_done_0096:
 15886 0000B3F0 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15887 0000B3F1 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15888 0000B3F5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15889                                  .L_if_end_004f:
 15890                                  .L_if_end_0050:
 15891                                  .L_if_end_0051:
 15892 0000B3F8 E91F030000              	jmp .L_if_end_0056
 15893                                  .L_if_else_0056:
 15894                                  	; preparing a non-tail-call
 15895 0000B3FD 488B4520                	mov rax, PARAM(0)	; param a
 15896 0000B401 50                      	push rax
 15897 0000B402 6A01                    	push 1	; arg count
 15898 0000B404 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 15899 0000B40C 803805                  	cmp byte [rax], T_undefined
 15900 0000B40F 0F8482C70000            	je L_error_fvar_undefined
 15901 0000B415 803804                  	cmp byte [rax], T_closure
 15902 0000B418 0F85FDC70000            	jne L_error_non_closure
 15903 0000B41E FF7001                  	push SOB_CLOSURE_ENV(rax)
 15904 0000B421 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15905 0000B424 483D[02000000]          	cmp rax, sob_boolean_false
 15906 0000B42A 0F848B020000            	je .L_if_else_0055
 15907                                  	; preparing a non-tail-call
 15908 0000B430 488B4528                	mov rax, PARAM(1)	; param b
 15909 0000B434 50                      	push rax
 15910 0000B435 6A01                    	push 1	; arg count
 15911 0000B437 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 15912 0000B43F 803805                  	cmp byte [rax], T_undefined
 15913 0000B442 0F844FC70000            	je L_error_fvar_undefined
 15914 0000B448 803804                  	cmp byte [rax], T_closure
 15915 0000B44B 0F85CAC70000            	jne L_error_non_closure
 15916 0000B451 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15917 0000B454 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15918 0000B457 483D[02000000]          	cmp rax, sob_boolean_false
 15919 0000B45D 0F8493000000            	je .L_if_else_0054
 15920                                  	; preparing a tail-call
 15921                                  	; preparing a non-tail-call
 15922 0000B463 488B4528                	mov rax, PARAM(1)	; param b
 15923 0000B467 50                      	push rax
 15924 0000B468 6A01                    	push 1	; arg count
 15925 0000B46A 488B0425[BF130000]      	mov rax, qword [free_var_90]	; free var integer->real
 15926 0000B472 803805                  	cmp byte [rax], T_undefined
 15927 0000B475 0F841CC70000            	je L_error_fvar_undefined
 15928 0000B47B 803804                  	cmp byte [rax], T_closure
 15929 0000B47E 0F8597C70000            	jne L_error_non_closure
 15930 0000B484 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15931 0000B487 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15932 0000B48A 50                      	push rax
 15933 0000B48B 488B4520                	mov rax, PARAM(0)	; param a
 15934 0000B48F 50                      	push rax
 15935 0000B490 6A02                    	push 2	; arg count
 15936 0000B492 488B4510                	mov rax, ENV
 15937 0000B496 488B00                  	mov rax, qword [rax + 8 * 0]
 15938 0000B499 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 15939 0000B49D 803804                  	cmp byte [rax], T_closure
 15940 0000B4A0 0F8575C70000            	jne L_error_non_closure
 15941 0000B4A6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15942 0000B4A9 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15943 0000B4AC FF7500                  	push qword[rbp]
 15944 0000B4AF 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15945 0000B4B2 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15946 0000B4B6 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15947 0000B4BA 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15948 0000B4BE 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15949 0000B4C1 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15950 0000B4C4 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15951 0000B4C9 4983C103                	add r9, 3 	 ;for getting to the params
 15952 0000B4CD 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15953 0000B4D1 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15954                                  .L_tc_recycle_frame_loop_0097:
 15955 0000B4D4 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15956 0000B4D7 7410                    	je .L_tc_recycle_frame_done_0097
 15957 0000B4D9 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15958 0000B4DC 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15959 0000B4DF 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15960 0000B4E3 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15961 0000B4E7 EBEB                    	jmp .L_tc_recycle_frame_loop_0097
 15962                                  .L_tc_recycle_frame_done_0097:
 15963 0000B4E9 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15964 0000B4EA 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15965 0000B4EE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15966 0000B4F1 E9C3010000              	jmp .L_if_end_0054
 15967                                  .L_if_else_0054:
 15968                                  	; preparing a non-tail-call
 15969 0000B4F6 488B4528                	mov rax, PARAM(1)	; param b
 15970 0000B4FA 50                      	push rax
 15971 0000B4FB 6A01                    	push 1	; arg count
 15972 0000B4FD 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 15973 0000B505 803805                  	cmp byte [rax], T_undefined
 15974 0000B508 0F8489C60000            	je L_error_fvar_undefined
 15975 0000B50E 803804                  	cmp byte [rax], T_closure
 15976 0000B511 0F8504C70000            	jne L_error_non_closure
 15977 0000B517 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15978 0000B51A FF5009                  	call SOB_CLOSURE_CODE(rax)
 15979 0000B51D 483D[02000000]          	cmp rax, sob_boolean_false
 15980 0000B523 0F8493000000            	je .L_if_else_0053
 15981                                  	; preparing a tail-call
 15982                                  	; preparing a non-tail-call
 15983 0000B529 488B4528                	mov rax, PARAM(1)	; param b
 15984 0000B52D 50                      	push rax
 15985 0000B52E 6A01                    	push 1	; arg count
 15986 0000B530 488B0425[8C130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 15987 0000B538 803805                  	cmp byte [rax], T_undefined
 15988 0000B53B 0F8456C60000            	je L_error_fvar_undefined
 15989 0000B541 803804                  	cmp byte [rax], T_closure
 15990 0000B544 0F85D1C60000            	jne L_error_non_closure
 15991 0000B54A FF7001                  	push SOB_CLOSURE_ENV(rax)
 15992 0000B54D FF5009                  	call SOB_CLOSURE_CODE(rax)
 15993 0000B550 50                      	push rax
 15994 0000B551 488B4520                	mov rax, PARAM(0)	; param a
 15995 0000B555 50                      	push rax
 15996 0000B556 6A02                    	push 2	; arg count
 15997 0000B558 488B4510                	mov rax, ENV
 15998 0000B55C 488B00                  	mov rax, qword [rax + 8 * 0]
 15999 0000B55F 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 16000 0000B563 803804                  	cmp byte [rax], T_closure
 16001 0000B566 0F85AFC60000            	jne L_error_non_closure
 16002 0000B56C FF7001                  	push SOB_CLOSURE_ENV(rax)
 16003 0000B56F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16004 0000B572 FF7500                  	push qword[rbp]
 16005 0000B575 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16006 0000B578 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16007 0000B57C 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16008 0000B580 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16009 0000B584 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16010 0000B587 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16011 0000B58A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16012 0000B58F 4983C103                	add r9, 3 	 ;for getting to the params
 16013 0000B593 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16014 0000B597 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16015                                  .L_tc_recycle_frame_loop_0098:
 16016 0000B59A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16017 0000B59D 7410                    	je .L_tc_recycle_frame_done_0098
 16018 0000B59F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16019 0000B5A2 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16020 0000B5A5 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16021 0000B5A9 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16022 0000B5AD EBEB                    	jmp .L_tc_recycle_frame_loop_0098
 16023                                  .L_tc_recycle_frame_done_0098:
 16024 0000B5AF 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16025 0000B5B0 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16026 0000B5B4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16027 0000B5B7 E9FD000000              	jmp .L_if_end_0053
 16028                                  .L_if_else_0053:
 16029                                  	; preparing a non-tail-call
 16030 0000B5BC 488B4528                	mov rax, PARAM(1)	; param b
 16031 0000B5C0 50                      	push rax
 16032 0000B5C1 6A01                    	push 1	; arg count
 16033 0000B5C3 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 16034 0000B5CB 803805                  	cmp byte [rax], T_undefined
 16035 0000B5CE 0F84C3C50000            	je L_error_fvar_undefined
 16036 0000B5D4 803804                  	cmp byte [rax], T_closure
 16037 0000B5D7 0F853EC60000            	jne L_error_non_closure
 16038 0000B5DD FF7001                  	push SOB_CLOSURE_ENV(rax)
 16039 0000B5E0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16040 0000B5E3 483D[02000000]          	cmp rax, sob_boolean_false
 16041 0000B5E9 746D                    	je .L_if_else_0052
 16042                                  	; preparing a tail-call
 16043 0000B5EB 488B4528                	mov rax, PARAM(1)	; param b
 16044 0000B5EF 50                      	push rax
 16045 0000B5F0 488B4520                	mov rax, PARAM(0)	; param a
 16046 0000B5F4 50                      	push rax
 16047 0000B5F5 6A02                    	push 2	; arg count
 16048 0000B5F7 488B4510                	mov rax, ENV
 16049 0000B5FB 488B00                  	mov rax, qword [rax + 8 * 0]
 16050 0000B5FE 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 16051 0000B602 803804                  	cmp byte [rax], T_closure
 16052 0000B605 0F8510C60000            	jne L_error_non_closure
 16053 0000B60B FF7001                  	push SOB_CLOSURE_ENV(rax)
 16054 0000B60E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16055 0000B611 FF7500                  	push qword[rbp]
 16056 0000B614 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16057 0000B617 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16058 0000B61B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16059 0000B61F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16060 0000B623 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16061 0000B626 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16062 0000B629 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16063 0000B62E 4983C103                	add r9, 3 	 ;for getting to the params
 16064 0000B632 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16065 0000B636 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16066                                  .L_tc_recycle_frame_loop_0099:
 16067 0000B639 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16068 0000B63C 7410                    	je .L_tc_recycle_frame_done_0099
 16069 0000B63E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16070 0000B641 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16071 0000B644 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16072 0000B648 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16073 0000B64C EBEB                    	jmp .L_tc_recycle_frame_loop_0099
 16074                                  .L_tc_recycle_frame_done_0099:
 16075 0000B64E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16076 0000B64F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16077 0000B653 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16078 0000B656 EB61                    	jmp .L_if_end_0052
 16079                                  .L_if_else_0052:
 16080                                  	; preparing a tail-call
 16081 0000B658 6A00                    	push 0	; arg count
 16082 0000B65A 488B4510                	mov rax, ENV
 16083 0000B65E 488B4008                	mov rax, qword [rax + 8 * 1]
 16084 0000B662 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 16085 0000B665 803804                  	cmp byte [rax], T_closure
 16086 0000B668 0F85ADC50000            	jne L_error_non_closure
 16087 0000B66E FF7001                  	push SOB_CLOSURE_ENV(rax)
 16088 0000B671 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16089 0000B674 FF7500                  	push qword[rbp]
 16090 0000B677 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16091 0000B67A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16092 0000B67E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16093 0000B682 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16094 0000B686 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16095 0000B689 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16096 0000B68C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16097 0000B691 4983C103                	add r9, 3 	 ;for getting to the params
 16098 0000B695 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16099 0000B699 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16100                                  .L_tc_recycle_frame_loop_009a:
 16101 0000B69C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16102 0000B69F 7410                    	je .L_tc_recycle_frame_done_009a
 16103 0000B6A1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16104 0000B6A4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16105 0000B6A7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16106 0000B6AB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16107 0000B6AF EBEB                    	jmp .L_tc_recycle_frame_loop_009a
 16108                                  .L_tc_recycle_frame_done_009a:
 16109 0000B6B1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16110 0000B6B2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16111 0000B6B6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16112                                  .L_if_end_0052:
 16113                                  .L_if_end_0053:
 16114                                  .L_if_end_0054:
 16115 0000B6B9 EB61                    	jmp .L_if_end_0055
 16116                                  .L_if_else_0055:
 16117                                  	; preparing a tail-call
 16118 0000B6BB 6A00                    	push 0	; arg count
 16119 0000B6BD 488B4510                	mov rax, ENV
 16120 0000B6C1 488B4008                	mov rax, qword [rax + 8 * 1]
 16121 0000B6C5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 16122 0000B6C8 803804                  	cmp byte [rax], T_closure
 16123 0000B6CB 0F854AC50000            	jne L_error_non_closure
 16124 0000B6D1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16125 0000B6D4 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16126 0000B6D7 FF7500                  	push qword[rbp]
 16127 0000B6DA 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16128 0000B6DD 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16129 0000B6E1 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16130 0000B6E5 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16131 0000B6E9 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16132 0000B6EC 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16133 0000B6EF 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16134 0000B6F4 4983C103                	add r9, 3 	 ;for getting to the params
 16135 0000B6F8 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16136 0000B6FC 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16137                                  .L_tc_recycle_frame_loop_009b:
 16138 0000B6FF 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16139 0000B702 7410                    	je .L_tc_recycle_frame_done_009b
 16140 0000B704 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16141 0000B707 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16142 0000B70A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16143 0000B70E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16144 0000B712 EBEB                    	jmp .L_tc_recycle_frame_loop_009b
 16145                                  .L_tc_recycle_frame_done_009b:
 16146 0000B714 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16147 0000B715 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16148 0000B719 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16149                                  .L_if_end_0055:
 16150                                  .L_if_end_0056:
 16151                                  .L_if_end_0057:
 16152 0000B71C C9                      	leave
 16153 0000B71D C22000                  	ret AND_KILL_FRAME(2)
 16154                                  .L_lambda_simple_end_0050:	; new closure is in rax
 16155 0000B720 C9                      	leave
 16156 0000B721 C22800                  	ret AND_KILL_FRAME(3)
 16157                                  .L_lambda_simple_end_004f:	; new closure is in rax
 16158 0000B724 50                      	push rax
 16159 0000B725 6A01                    	push 1	; arg count
 16160 0000B727 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16161 0000B72C E893C50000              	call malloc
 16162 0000B731 50                      	push rax
 16163 0000B732 BF08000000              	mov rdi, 8 * 1	; new rib
 16164 0000B737 E888C50000              	call malloc
 16165 0000B73C 50                      	push rax
 16166 0000B73D BF10000000              	mov rdi, 8 * 2	; extended env
 16167 0000B742 E87DC50000              	call malloc
 16168 0000B747 488B7D10                	mov rdi, ENV
 16169 0000B74B BE00000000              	mov rsi, 0
 16170 0000B750 BA01000000              	mov rdx, 1
 16171                                  .L_lambda_simple_env_loop_0051:	; ext_env[i + 1] <-- env[i]
 16172 0000B755 4883FE01                	cmp rsi, 1
 16173 0000B759 7410                    	je .L_lambda_simple_env_end_0051
 16174 0000B75B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16175 0000B75F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16176 0000B763 48FFC6                  	inc rsi
 16177 0000B766 48FFC2                  	inc rdx
 16178 0000B769 EBEA                    	jmp .L_lambda_simple_env_loop_0051
 16179                                  .L_lambda_simple_env_end_0051:
 16180 0000B76B 5B                      	pop rbx
 16181 0000B76C BE00000000              	mov rsi, 0
 16182                                  .L_lambda_simple_params_loop_0051:	; copy params
 16183 0000B771 4883FE01                	cmp rsi, 1
 16184 0000B775 740E                    	je .L_lambda_simple_params_end_0051
 16185 0000B777 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16186 0000B77C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16187 0000B780 48FFC6                  	inc rsi
 16188 0000B783 EBEC                    	jmp .L_lambda_simple_params_loop_0051
 16189                                  .L_lambda_simple_params_end_0051:
 16190 0000B785 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16191 0000B788 4889C3                  	mov rbx, rax
 16192 0000B78B 58                      	pop rax
 16193 0000B78C C60004                  	mov byte [rax], T_closure
 16194 0000B78F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16195 0000B793 48C74009[A0B70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0051
 16196 0000B79B E96C100000              	jmp .L_lambda_simple_end_0051
 16197                                  .L_lambda_simple_code_0051:	; lambda-simple body
 16198 0000B7A0 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16199 0000B7A6 740B                    	je .L_lambda_simple_arity_check_ok_0051
 16200 0000B7A8 FF742410                	push qword [rsp + 8 * 2]
 16201 0000B7AC 6A01                    	push 1
 16202 0000B7AE E9CAC40000              	jmp L_error_incorrect_arity_simple
 16203                                  .L_lambda_simple_arity_check_ok_0051:
 16204 0000B7B3 C8000000                	enter 0, 0
 16205                                  	; preparing a tail-call
 16206                                  	; preparing a non-tail-call
 16207 0000B7B7 488B0425[190F0000]      	mov rax, qword [free_var_20]	; free var __bin-less-than-rr
 16208 0000B7BF 803805                  	cmp byte [rax], T_undefined
 16209 0000B7C2 0F84CFC30000            	je L_error_fvar_undefined
 16210 0000B7C8 50                      	push rax
 16211 0000B7C9 488B0425[080F0000]      	mov rax, qword [free_var_19]	; free var __bin-less-than-qq
 16212 0000B7D1 803805                  	cmp byte [rax], T_undefined
 16213 0000B7D4 0F84BDC30000            	je L_error_fvar_undefined
 16214 0000B7DA 50                      	push rax
 16215 0000B7DB 488B0425[2A0F0000]      	mov rax, qword [free_var_21]	; free var __bin-less-than-zz
 16216 0000B7E3 803805                  	cmp byte [rax], T_undefined
 16217 0000B7E6 0F84ABC30000            	je L_error_fvar_undefined
 16218 0000B7EC 50                      	push rax
 16219 0000B7ED 6A03                    	push 3	; arg count
 16220 0000B7EF 488B4520                	mov rax, PARAM(0)	; param make-bin-comparator
 16221 0000B7F3 803804                  	cmp byte [rax], T_closure
 16222 0000B7F6 0F851FC40000            	jne L_error_non_closure
 16223 0000B7FC FF7001                  	push SOB_CLOSURE_ENV(rax)
 16224 0000B7FF FF5009                  	call SOB_CLOSURE_CODE(rax)
 16225 0000B802 50                      	push rax
 16226 0000B803 6A01                    	push 1	; arg count
 16227 0000B805 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16228 0000B80A E8B5C40000              	call malloc
 16229 0000B80F 50                      	push rax
 16230 0000B810 BF08000000              	mov rdi, 8 * 1	; new rib
 16231 0000B815 E8AAC40000              	call malloc
 16232 0000B81A 50                      	push rax
 16233 0000B81B BF18000000              	mov rdi, 8 * 3	; extended env
 16234 0000B820 E89FC40000              	call malloc
 16235 0000B825 488B7D10                	mov rdi, ENV
 16236 0000B829 BE00000000              	mov rsi, 0
 16237 0000B82E BA01000000              	mov rdx, 1
 16238                                  .L_lambda_simple_env_loop_0052:	; ext_env[i + 1] <-- env[i]
 16239 0000B833 4883FE02                	cmp rsi, 2
 16240 0000B837 7410                    	je .L_lambda_simple_env_end_0052
 16241 0000B839 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16242 0000B83D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16243 0000B841 48FFC6                  	inc rsi
 16244 0000B844 48FFC2                  	inc rdx
 16245 0000B847 EBEA                    	jmp .L_lambda_simple_env_loop_0052
 16246                                  .L_lambda_simple_env_end_0052:
 16247 0000B849 5B                      	pop rbx
 16248 0000B84A BE00000000              	mov rsi, 0
 16249                                  .L_lambda_simple_params_loop_0052:	; copy params
 16250 0000B84F 4883FE01                	cmp rsi, 1
 16251 0000B853 740E                    	je .L_lambda_simple_params_end_0052
 16252 0000B855 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16253 0000B85A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16254 0000B85E 48FFC6                  	inc rsi
 16255 0000B861 EBEC                    	jmp .L_lambda_simple_params_loop_0052
 16256                                  .L_lambda_simple_params_end_0052:
 16257 0000B863 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16258 0000B866 4889C3                  	mov rbx, rax
 16259 0000B869 58                      	pop rax
 16260 0000B86A C60004                  	mov byte [rax], T_closure
 16261 0000B86D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16262 0000B871 48C74009[7EB80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0052
 16263 0000B879 E9360F0000              	jmp .L_lambda_simple_end_0052
 16264                                  .L_lambda_simple_code_0052:	; lambda-simple body
 16265 0000B87E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16266 0000B884 740B                    	je .L_lambda_simple_arity_check_ok_0052
 16267 0000B886 FF742410                	push qword [rsp + 8 * 2]
 16268 0000B88A 6A01                    	push 1
 16269 0000B88C E9ECC30000              	jmp L_error_incorrect_arity_simple
 16270                                  .L_lambda_simple_arity_check_ok_0052:
 16271 0000B891 C8000000                	enter 0, 0
 16272                                  	; preparing a tail-call
 16273                                  	; preparing a non-tail-call
 16274 0000B895 488B0425[E60E0000]      	mov rax, qword [free_var_17]	; free var __bin-equal-rr
 16275 0000B89D 803805                  	cmp byte [rax], T_undefined
 16276 0000B8A0 0F84F1C20000            	je L_error_fvar_undefined
 16277 0000B8A6 50                      	push rax
 16278 0000B8A7 488B0425[D50E0000]      	mov rax, qword [free_var_16]	; free var __bin-equal-qq
 16279 0000B8AF 803805                  	cmp byte [rax], T_undefined
 16280 0000B8B2 0F84DFC20000            	je L_error_fvar_undefined
 16281 0000B8B8 50                      	push rax
 16282 0000B8B9 488B0425[F70E0000]      	mov rax, qword [free_var_18]	; free var __bin-equal-zz
 16283 0000B8C1 803805                  	cmp byte [rax], T_undefined
 16284 0000B8C4 0F84CDC20000            	je L_error_fvar_undefined
 16285 0000B8CA 50                      	push rax
 16286 0000B8CB 6A03                    	push 3	; arg count
 16287 0000B8CD 488B4510                	mov rax, ENV
 16288 0000B8D1 488B00                  	mov rax, qword [rax + 8 * 0]
 16289 0000B8D4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var make-bin-comparator
 16290 0000B8D7 803804                  	cmp byte [rax], T_closure
 16291 0000B8DA 0F853BC30000            	jne L_error_non_closure
 16292 0000B8E0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16293 0000B8E3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16294 0000B8E6 50                      	push rax
 16295 0000B8E7 6A01                    	push 1	; arg count
 16296 0000B8E9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16297 0000B8EE E8D1C30000              	call malloc
 16298 0000B8F3 50                      	push rax
 16299 0000B8F4 BF08000000              	mov rdi, 8 * 1	; new rib
 16300 0000B8F9 E8C6C30000              	call malloc
 16301 0000B8FE 50                      	push rax
 16302 0000B8FF BF20000000              	mov rdi, 8 * 4	; extended env
 16303 0000B904 E8BBC30000              	call malloc
 16304 0000B909 488B7D10                	mov rdi, ENV
 16305 0000B90D BE00000000              	mov rsi, 0
 16306 0000B912 BA01000000              	mov rdx, 1
 16307                                  .L_lambda_simple_env_loop_0053:	; ext_env[i + 1] <-- env[i]
 16308 0000B917 4883FE03                	cmp rsi, 3
 16309 0000B91B 7410                    	je .L_lambda_simple_env_end_0053
 16310 0000B91D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16311 0000B921 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16312 0000B925 48FFC6                  	inc rsi
 16313 0000B928 48FFC2                  	inc rdx
 16314 0000B92B EBEA                    	jmp .L_lambda_simple_env_loop_0053
 16315                                  .L_lambda_simple_env_end_0053:
 16316 0000B92D 5B                      	pop rbx
 16317 0000B92E BE00000000              	mov rsi, 0
 16318                                  .L_lambda_simple_params_loop_0053:	; copy params
 16319 0000B933 4883FE01                	cmp rsi, 1
 16320 0000B937 740E                    	je .L_lambda_simple_params_end_0053
 16321 0000B939 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16322 0000B93E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16323 0000B942 48FFC6                  	inc rsi
 16324 0000B945 EBEC                    	jmp .L_lambda_simple_params_loop_0053
 16325                                  .L_lambda_simple_params_end_0053:
 16326 0000B947 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16327 0000B94A 4889C3                  	mov rbx, rax
 16328 0000B94D 58                      	pop rax
 16329 0000B94E C60004                  	mov byte [rax], T_closure
 16330 0000B951 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16331 0000B955 48C74009[62B90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0053
 16332 0000B95D E9FA0D0000              	jmp .L_lambda_simple_end_0053
 16333                                  .L_lambda_simple_code_0053:	; lambda-simple body
 16334 0000B962 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16335 0000B968 740B                    	je .L_lambda_simple_arity_check_ok_0053
 16336 0000B96A FF742410                	push qword [rsp + 8 * 2]
 16337 0000B96E 6A01                    	push 1
 16338 0000B970 E908C30000              	jmp L_error_incorrect_arity_simple
 16339                                  .L_lambda_simple_arity_check_ok_0053:
 16340 0000B975 C8000000                	enter 0, 0
 16341                                  	; preparing a tail-call
 16342 0000B979 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16343 0000B97E E841C30000              	call malloc
 16344 0000B983 50                      	push rax
 16345 0000B984 BF08000000              	mov rdi, 8 * 1	; new rib
 16346 0000B989 E836C30000              	call malloc
 16347 0000B98E 50                      	push rax
 16348 0000B98F BF28000000              	mov rdi, 8 * 5	; extended env
 16349 0000B994 E82BC30000              	call malloc
 16350 0000B999 488B7D10                	mov rdi, ENV
 16351 0000B99D BE00000000              	mov rsi, 0
 16352 0000B9A2 BA01000000              	mov rdx, 1
 16353                                  .L_lambda_simple_env_loop_0054:	; ext_env[i + 1] <-- env[i]
 16354 0000B9A7 4883FE04                	cmp rsi, 4
 16355 0000B9AB 7410                    	je .L_lambda_simple_env_end_0054
 16356 0000B9AD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16357 0000B9B1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16358 0000B9B5 48FFC6                  	inc rsi
 16359 0000B9B8 48FFC2                  	inc rdx
 16360 0000B9BB EBEA                    	jmp .L_lambda_simple_env_loop_0054
 16361                                  .L_lambda_simple_env_end_0054:
 16362 0000B9BD 5B                      	pop rbx
 16363 0000B9BE BE00000000              	mov rsi, 0
 16364                                  .L_lambda_simple_params_loop_0054:	; copy params
 16365 0000B9C3 4883FE01                	cmp rsi, 1
 16366 0000B9C7 740E                    	je .L_lambda_simple_params_end_0054
 16367 0000B9C9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16368 0000B9CE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16369 0000B9D2 48FFC6                  	inc rsi
 16370 0000B9D5 EBEC                    	jmp .L_lambda_simple_params_loop_0054
 16371                                  .L_lambda_simple_params_end_0054:
 16372 0000B9D7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16373 0000B9DA 4889C3                  	mov rbx, rax
 16374 0000B9DD 58                      	pop rax
 16375 0000B9DE C60004                  	mov byte [rax], T_closure
 16376 0000B9E1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16377 0000B9E5 48C74009[F2B90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0054
 16378 0000B9ED E9A9000000              	jmp .L_lambda_simple_end_0054
 16379                                  .L_lambda_simple_code_0054:	; lambda-simple body
 16380 0000B9F2 48837C241002            	cmp qword [rsp + 8 * 2], 2
 16381 0000B9F8 740B                    	je .L_lambda_simple_arity_check_ok_0054
 16382 0000B9FA FF742410                	push qword [rsp + 8 * 2]
 16383 0000B9FE 6A02                    	push 2
 16384 0000BA00 E978C20000              	jmp L_error_incorrect_arity_simple
 16385                                  .L_lambda_simple_arity_check_ok_0054:
 16386 0000BA05 C8000000                	enter 0, 0
 16387                                  	; preparing a tail-call
 16388                                  	; preparing a non-tail-call
 16389 0000BA09 488B4528                	mov rax, PARAM(1)	; param b
 16390 0000BA0D 50                      	push rax
 16391 0000BA0E 488B4520                	mov rax, PARAM(0)	; param a
 16392 0000BA12 50                      	push rax
 16393 0000BA13 6A02                    	push 2	; arg count
 16394 0000BA15 488B4510                	mov rax, ENV
 16395 0000BA19 488B4008                	mov rax, qword [rax + 8 * 1]
 16396 0000BA1D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<?
 16397 0000BA20 803804                  	cmp byte [rax], T_closure
 16398 0000BA23 0F85F2C10000            	jne L_error_non_closure
 16399 0000BA29 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16400 0000BA2C FF5009                  	call SOB_CLOSURE_CODE(rax)
 16401 0000BA2F 50                      	push rax
 16402 0000BA30 6A01                    	push 1	; arg count
 16403 0000BA32 488B0425[CF140000]      	mov rax, qword [free_var_106]	; free var not
 16404 0000BA3A 803805                  	cmp byte [rax], T_undefined
 16405 0000BA3D 0F8454C10000            	je L_error_fvar_undefined
 16406 0000BA43 803804                  	cmp byte [rax], T_closure
 16407 0000BA46 0F85CFC10000            	jne L_error_non_closure
 16408 0000BA4C FF7001                  	push SOB_CLOSURE_ENV(rax)
 16409 0000BA4F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16410 0000BA52 FF7500                  	push qword[rbp]
 16411 0000BA55 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16412 0000BA58 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16413 0000BA5C 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16414 0000BA60 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16415 0000BA64 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16416 0000BA67 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16417 0000BA6A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16418 0000BA6F 4983C103                	add r9, 3 	 ;for getting to the params
 16419 0000BA73 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16420 0000BA77 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16421                                  .L_tc_recycle_frame_loop_009c:
 16422 0000BA7A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16423 0000BA7D 7410                    	je .L_tc_recycle_frame_done_009c
 16424 0000BA7F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16425 0000BA82 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16426 0000BA85 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16427 0000BA89 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16428 0000BA8D EBEB                    	jmp .L_tc_recycle_frame_loop_009c
 16429                                  .L_tc_recycle_frame_done_009c:
 16430 0000BA8F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16431 0000BA90 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16432 0000BA94 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16433 0000BA97 C9                      	leave
 16434 0000BA98 C22000                  	ret AND_KILL_FRAME(2)
 16435                                  .L_lambda_simple_end_0054:	; new closure is in rax
 16436 0000BA9B 50                      	push rax
 16437 0000BA9C 6A01                    	push 1	; arg count
 16438 0000BA9E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16439 0000BAA3 E81CC20000              	call malloc
 16440 0000BAA8 50                      	push rax
 16441 0000BAA9 BF08000000              	mov rdi, 8 * 1	; new rib
 16442 0000BAAE E811C20000              	call malloc
 16443 0000BAB3 50                      	push rax
 16444 0000BAB4 BF28000000              	mov rdi, 8 * 5	; extended env
 16445 0000BAB9 E806C20000              	call malloc
 16446 0000BABE 488B7D10                	mov rdi, ENV
 16447 0000BAC2 BE00000000              	mov rsi, 0
 16448 0000BAC7 BA01000000              	mov rdx, 1
 16449                                  .L_lambda_simple_env_loop_0055:	; ext_env[i + 1] <-- env[i]
 16450 0000BACC 4883FE04                	cmp rsi, 4
 16451 0000BAD0 7410                    	je .L_lambda_simple_env_end_0055
 16452 0000BAD2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16453 0000BAD6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16454 0000BADA 48FFC6                  	inc rsi
 16455 0000BADD 48FFC2                  	inc rdx
 16456 0000BAE0 EBEA                    	jmp .L_lambda_simple_env_loop_0055
 16457                                  .L_lambda_simple_env_end_0055:
 16458 0000BAE2 5B                      	pop rbx
 16459 0000BAE3 BE00000000              	mov rsi, 0
 16460                                  .L_lambda_simple_params_loop_0055:	; copy params
 16461 0000BAE8 4883FE01                	cmp rsi, 1
 16462 0000BAEC 740E                    	je .L_lambda_simple_params_end_0055
 16463 0000BAEE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16464 0000BAF3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16465 0000BAF7 48FFC6                  	inc rsi
 16466 0000BAFA EBEC                    	jmp .L_lambda_simple_params_loop_0055
 16467                                  .L_lambda_simple_params_end_0055:
 16468 0000BAFC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16469 0000BAFF 4889C3                  	mov rbx, rax
 16470 0000BB02 58                      	pop rax
 16471 0000BB03 C60004                  	mov byte [rax], T_closure
 16472 0000BB06 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16473 0000BB0A 48C74009[17BB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0055
 16474 0000BB12 E9ED0B0000              	jmp .L_lambda_simple_end_0055
 16475                                  .L_lambda_simple_code_0055:	; lambda-simple body
 16476 0000BB17 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16477 0000BB1D 740B                    	je .L_lambda_simple_arity_check_ok_0055
 16478 0000BB1F FF742410                	push qword [rsp + 8 * 2]
 16479 0000BB23 6A01                    	push 1
 16480 0000BB25 E953C10000              	jmp L_error_incorrect_arity_simple
 16481                                  .L_lambda_simple_arity_check_ok_0055:
 16482 0000BB2A C8000000                	enter 0, 0
 16483                                  	; preparing a tail-call
 16484 0000BB2E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16485 0000BB33 E88CC10000              	call malloc
 16486 0000BB38 50                      	push rax
 16487 0000BB39 BF08000000              	mov rdi, 8 * 1	; new rib
 16488 0000BB3E E881C10000              	call malloc
 16489 0000BB43 50                      	push rax
 16490 0000BB44 BF30000000              	mov rdi, 8 * 6	; extended env
 16491 0000BB49 E876C10000              	call malloc
 16492 0000BB4E 488B7D10                	mov rdi, ENV
 16493 0000BB52 BE00000000              	mov rsi, 0
 16494 0000BB57 BA01000000              	mov rdx, 1
 16495                                  .L_lambda_simple_env_loop_0056:	; ext_env[i + 1] <-- env[i]
 16496 0000BB5C 4883FE05                	cmp rsi, 5
 16497 0000BB60 7410                    	je .L_lambda_simple_env_end_0056
 16498 0000BB62 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16499 0000BB66 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16500 0000BB6A 48FFC6                  	inc rsi
 16501 0000BB6D 48FFC2                  	inc rdx
 16502 0000BB70 EBEA                    	jmp .L_lambda_simple_env_loop_0056
 16503                                  .L_lambda_simple_env_end_0056:
 16504 0000BB72 5B                      	pop rbx
 16505 0000BB73 BE00000000              	mov rsi, 0
 16506                                  .L_lambda_simple_params_loop_0056:	; copy params
 16507 0000BB78 4883FE01                	cmp rsi, 1
 16508 0000BB7C 740E                    	je .L_lambda_simple_params_end_0056
 16509 0000BB7E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16510 0000BB83 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16511 0000BB87 48FFC6                  	inc rsi
 16512 0000BB8A EBEC                    	jmp .L_lambda_simple_params_loop_0056
 16513                                  .L_lambda_simple_params_end_0056:
 16514 0000BB8C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16515 0000BB8F 4889C3                  	mov rbx, rax
 16516 0000BB92 58                      	pop rax
 16517 0000BB93 C60004                  	mov byte [rax], T_closure
 16518 0000BB96 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16519 0000BB9A 48C74009[A7BB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0056
 16520 0000BBA2 E986000000              	jmp .L_lambda_simple_end_0056
 16521                                  .L_lambda_simple_code_0056:	; lambda-simple body
 16522 0000BBA7 48837C241002            	cmp qword [rsp + 8 * 2], 2
 16523 0000BBAD 740B                    	je .L_lambda_simple_arity_check_ok_0056
 16524 0000BBAF FF742410                	push qword [rsp + 8 * 2]
 16525 0000BBB3 6A02                    	push 2
 16526 0000BBB5 E9C3C00000              	jmp L_error_incorrect_arity_simple
 16527                                  .L_lambda_simple_arity_check_ok_0056:
 16528 0000BBBA C8000000                	enter 0, 0
 16529                                  	; preparing a tail-call
 16530 0000BBBE 488B4520                	mov rax, PARAM(0)	; param a
 16531 0000BBC2 50                      	push rax
 16532 0000BBC3 488B4528                	mov rax, PARAM(1)	; param b
 16533 0000BBC7 50                      	push rax
 16534 0000BBC8 6A02                    	push 2	; arg count
 16535 0000BBCA 488B4510                	mov rax, ENV
 16536 0000BBCE 488B4010                	mov rax, qword [rax + 8 * 2]
 16537 0000BBD2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<?
 16538 0000BBD5 803804                  	cmp byte [rax], T_closure
 16539 0000BBD8 0F853DC00000            	jne L_error_non_closure
 16540 0000BBDE FF7001                  	push SOB_CLOSURE_ENV(rax)
 16541 0000BBE1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16542 0000BBE4 FF7500                  	push qword[rbp]
 16543 0000BBE7 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16544 0000BBEA 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16545 0000BBEE 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16546 0000BBF2 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16547 0000BBF6 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16548 0000BBF9 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16549 0000BBFC 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16550 0000BC01 4983C103                	add r9, 3 	 ;for getting to the params
 16551 0000BC05 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16552 0000BC09 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16553                                  .L_tc_recycle_frame_loop_009d:
 16554 0000BC0C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16555 0000BC0F 7410                    	je .L_tc_recycle_frame_done_009d
 16556 0000BC11 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16557 0000BC14 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16558 0000BC17 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16559 0000BC1B 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16560 0000BC1F EBEB                    	jmp .L_tc_recycle_frame_loop_009d
 16561                                  .L_tc_recycle_frame_done_009d:
 16562 0000BC21 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16563 0000BC22 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16564 0000BC26 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16565 0000BC29 C9                      	leave
 16566 0000BC2A C22000                  	ret AND_KILL_FRAME(2)
 16567                                  .L_lambda_simple_end_0056:	; new closure is in rax
 16568 0000BC2D 50                      	push rax
 16569 0000BC2E 6A01                    	push 1	; arg count
 16570 0000BC30 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16571 0000BC35 E88AC00000              	call malloc
 16572 0000BC3A 50                      	push rax
 16573 0000BC3B BF08000000              	mov rdi, 8 * 1	; new rib
 16574 0000BC40 E87FC00000              	call malloc
 16575 0000BC45 50                      	push rax
 16576 0000BC46 BF30000000              	mov rdi, 8 * 6	; extended env
 16577 0000BC4B E874C00000              	call malloc
 16578 0000BC50 488B7D10                	mov rdi, ENV
 16579 0000BC54 BE00000000              	mov rsi, 0
 16580 0000BC59 BA01000000              	mov rdx, 1
 16581                                  .L_lambda_simple_env_loop_0057:	; ext_env[i + 1] <-- env[i]
 16582 0000BC5E 4883FE05                	cmp rsi, 5
 16583 0000BC62 7410                    	je .L_lambda_simple_env_end_0057
 16584 0000BC64 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16585 0000BC68 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16586 0000BC6C 48FFC6                  	inc rsi
 16587 0000BC6F 48FFC2                  	inc rdx
 16588 0000BC72 EBEA                    	jmp .L_lambda_simple_env_loop_0057
 16589                                  .L_lambda_simple_env_end_0057:
 16590 0000BC74 5B                      	pop rbx
 16591 0000BC75 BE00000000              	mov rsi, 0
 16592                                  .L_lambda_simple_params_loop_0057:	; copy params
 16593 0000BC7A 4883FE01                	cmp rsi, 1
 16594 0000BC7E 740E                    	je .L_lambda_simple_params_end_0057
 16595 0000BC80 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16596 0000BC85 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16597 0000BC89 48FFC6                  	inc rsi
 16598 0000BC8C EBEC                    	jmp .L_lambda_simple_params_loop_0057
 16599                                  .L_lambda_simple_params_end_0057:
 16600 0000BC8E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16601 0000BC91 4889C3                  	mov rbx, rax
 16602 0000BC94 58                      	pop rax
 16603 0000BC95 C60004                  	mov byte [rax], T_closure
 16604 0000BC98 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16605 0000BC9C 48C74009[A9BC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0057
 16606 0000BCA4 E9030A0000              	jmp .L_lambda_simple_end_0057
 16607                                  .L_lambda_simple_code_0057:	; lambda-simple body
 16608 0000BCA9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16609 0000BCAF 740B                    	je .L_lambda_simple_arity_check_ok_0057
 16610 0000BCB1 FF742410                	push qword [rsp + 8 * 2]
 16611 0000BCB5 6A01                    	push 1
 16612 0000BCB7 E9C1BF0000              	jmp L_error_incorrect_arity_simple
 16613                                  .L_lambda_simple_arity_check_ok_0057:
 16614 0000BCBC C8000000                	enter 0, 0
 16615                                  	; preparing a tail-call
 16616 0000BCC0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16617 0000BCC5 E8FABF0000              	call malloc
 16618 0000BCCA 50                      	push rax
 16619 0000BCCB BF08000000              	mov rdi, 8 * 1	; new rib
 16620 0000BCD0 E8EFBF0000              	call malloc
 16621 0000BCD5 50                      	push rax
 16622 0000BCD6 BF38000000              	mov rdi, 8 * 7	; extended env
 16623 0000BCDB E8E4BF0000              	call malloc
 16624 0000BCE0 488B7D10                	mov rdi, ENV
 16625 0000BCE4 BE00000000              	mov rsi, 0
 16626 0000BCE9 BA01000000              	mov rdx, 1
 16627                                  .L_lambda_simple_env_loop_0058:	; ext_env[i + 1] <-- env[i]
 16628 0000BCEE 4883FE06                	cmp rsi, 6
 16629 0000BCF2 7410                    	je .L_lambda_simple_env_end_0058
 16630 0000BCF4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16631 0000BCF8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16632 0000BCFC 48FFC6                  	inc rsi
 16633 0000BCFF 48FFC2                  	inc rdx
 16634 0000BD02 EBEA                    	jmp .L_lambda_simple_env_loop_0058
 16635                                  .L_lambda_simple_env_end_0058:
 16636 0000BD04 5B                      	pop rbx
 16637 0000BD05 BE00000000              	mov rsi, 0
 16638                                  .L_lambda_simple_params_loop_0058:	; copy params
 16639 0000BD0A 4883FE01                	cmp rsi, 1
 16640 0000BD0E 740E                    	je .L_lambda_simple_params_end_0058
 16641 0000BD10 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16642 0000BD15 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16643 0000BD19 48FFC6                  	inc rsi
 16644 0000BD1C EBEC                    	jmp .L_lambda_simple_params_loop_0058
 16645                                  .L_lambda_simple_params_end_0058:
 16646 0000BD1E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16647 0000BD21 4889C3                  	mov rbx, rax
 16648 0000BD24 58                      	pop rax
 16649 0000BD25 C60004                  	mov byte [rax], T_closure
 16650 0000BD28 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16651 0000BD2C 48C74009[39BD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0058
 16652 0000BD34 E9A8000000              	jmp .L_lambda_simple_end_0058
 16653                                  .L_lambda_simple_code_0058:	; lambda-simple body
 16654 0000BD39 48837C241002            	cmp qword [rsp + 8 * 2], 2
 16655 0000BD3F 740B                    	je .L_lambda_simple_arity_check_ok_0058
 16656 0000BD41 FF742410                	push qword [rsp + 8 * 2]
 16657 0000BD45 6A02                    	push 2
 16658 0000BD47 E931BF0000              	jmp L_error_incorrect_arity_simple
 16659                                  .L_lambda_simple_arity_check_ok_0058:
 16660 0000BD4C C8000000                	enter 0, 0
 16661                                  	; preparing a tail-call
 16662                                  	; preparing a non-tail-call
 16663 0000BD50 488B4528                	mov rax, PARAM(1)	; param b
 16664 0000BD54 50                      	push rax
 16665 0000BD55 488B4520                	mov rax, PARAM(0)	; param a
 16666 0000BD59 50                      	push rax
 16667 0000BD5A 6A02                    	push 2	; arg count
 16668 0000BD5C 488B4510                	mov rax, ENV
 16669 0000BD60 488B00                  	mov rax, qword [rax + 8 * 0]
 16670 0000BD63 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin>?
 16671 0000BD66 803804                  	cmp byte [rax], T_closure
 16672 0000BD69 0F85ACBE0000            	jne L_error_non_closure
 16673 0000BD6F FF7001                  	push SOB_CLOSURE_ENV(rax)
 16674 0000BD72 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16675 0000BD75 50                      	push rax
 16676 0000BD76 6A01                    	push 1	; arg count
 16677 0000BD78 488B0425[CF140000]      	mov rax, qword [free_var_106]	; free var not
 16678 0000BD80 803805                  	cmp byte [rax], T_undefined
 16679 0000BD83 0F840EBE0000            	je L_error_fvar_undefined
 16680 0000BD89 803804                  	cmp byte [rax], T_closure
 16681 0000BD8C 0F8589BE0000            	jne L_error_non_closure
 16682 0000BD92 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16683 0000BD95 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16684 0000BD98 FF7500                  	push qword[rbp]
 16685 0000BD9B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16686 0000BD9E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16687 0000BDA2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16688 0000BDA6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16689 0000BDAA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16690 0000BDAD 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16691 0000BDB0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16692 0000BDB5 4983C103                	add r9, 3 	 ;for getting to the params
 16693 0000BDB9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16694 0000BDBD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16695                                  .L_tc_recycle_frame_loop_009e:
 16696 0000BDC0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16697 0000BDC3 7410                    	je .L_tc_recycle_frame_done_009e
 16698 0000BDC5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16699 0000BDC8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16700 0000BDCB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16701 0000BDCF 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16702 0000BDD3 EBEB                    	jmp .L_tc_recycle_frame_loop_009e
 16703                                  .L_tc_recycle_frame_done_009e:
 16704 0000BDD5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16705 0000BDD6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16706 0000BDDA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16707 0000BDDD C9                      	leave
 16708 0000BDDE C22000                  	ret AND_KILL_FRAME(2)
 16709                                  .L_lambda_simple_end_0058:	; new closure is in rax
 16710 0000BDE1 50                      	push rax
 16711 0000BDE2 6A01                    	push 1	; arg count
 16712 0000BDE4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16713 0000BDE9 E8D6BE0000              	call malloc
 16714 0000BDEE 50                      	push rax
 16715 0000BDEF BF08000000              	mov rdi, 8 * 1	; new rib
 16716 0000BDF4 E8CBBE0000              	call malloc
 16717 0000BDF9 50                      	push rax
 16718 0000BDFA BF38000000              	mov rdi, 8 * 7	; extended env
 16719 0000BDFF E8C0BE0000              	call malloc
 16720 0000BE04 488B7D10                	mov rdi, ENV
 16721 0000BE08 BE00000000              	mov rsi, 0
 16722 0000BE0D BA01000000              	mov rdx, 1
 16723                                  .L_lambda_simple_env_loop_0059:	; ext_env[i + 1] <-- env[i]
 16724 0000BE12 4883FE06                	cmp rsi, 6
 16725 0000BE16 7410                    	je .L_lambda_simple_env_end_0059
 16726 0000BE18 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16727 0000BE1C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16728 0000BE20 48FFC6                  	inc rsi
 16729 0000BE23 48FFC2                  	inc rdx
 16730 0000BE26 EBEA                    	jmp .L_lambda_simple_env_loop_0059
 16731                                  .L_lambda_simple_env_end_0059:
 16732 0000BE28 5B                      	pop rbx
 16733 0000BE29 BE00000000              	mov rsi, 0
 16734                                  .L_lambda_simple_params_loop_0059:	; copy params
 16735 0000BE2E 4883FE01                	cmp rsi, 1
 16736 0000BE32 740E                    	je .L_lambda_simple_params_end_0059
 16737 0000BE34 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16738 0000BE39 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16739 0000BE3D 48FFC6                  	inc rsi
 16740 0000BE40 EBEC                    	jmp .L_lambda_simple_params_loop_0059
 16741                                  .L_lambda_simple_params_end_0059:
 16742 0000BE42 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16743 0000BE45 4889C3                  	mov rbx, rax
 16744 0000BE48 58                      	pop rax
 16745 0000BE49 C60004                  	mov byte [rax], T_closure
 16746 0000BE4C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16747 0000BE50 48C74009[5DBE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0059
 16748 0000BE58 E9F7070000              	jmp .L_lambda_simple_end_0059
 16749                                  .L_lambda_simple_code_0059:	; lambda-simple body
 16750 0000BE5D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16751 0000BE63 740B                    	je .L_lambda_simple_arity_check_ok_0059
 16752 0000BE65 FF742410                	push qword [rsp + 8 * 2]
 16753 0000BE69 6A01                    	push 1
 16754 0000BE6B E90DBE0000              	jmp L_error_incorrect_arity_simple
 16755                                  .L_lambda_simple_arity_check_ok_0059:
 16756 0000BE70 C8000000                	enter 0, 0
 16757                                  	; preparing a tail-call
 16758 0000BE74 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16759 0000BE79 E846BE0000              	call malloc
 16760 0000BE7E 50                      	push rax
 16761 0000BE7F BF08000000              	mov rdi, 8 * 1	; new rib
 16762 0000BE84 E83BBE0000              	call malloc
 16763 0000BE89 50                      	push rax
 16764 0000BE8A BF40000000              	mov rdi, 8 * 8	; extended env
 16765 0000BE8F E830BE0000              	call malloc
 16766 0000BE94 488B7D10                	mov rdi, ENV
 16767 0000BE98 BE00000000              	mov rsi, 0
 16768 0000BE9D BA01000000              	mov rdx, 1
 16769                                  .L_lambda_simple_env_loop_005a:	; ext_env[i + 1] <-- env[i]
 16770 0000BEA2 4883FE07                	cmp rsi, 7
 16771 0000BEA6 7410                    	je .L_lambda_simple_env_end_005a
 16772 0000BEA8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16773 0000BEAC 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16774 0000BEB0 48FFC6                  	inc rsi
 16775 0000BEB3 48FFC2                  	inc rdx
 16776 0000BEB6 EBEA                    	jmp .L_lambda_simple_env_loop_005a
 16777                                  .L_lambda_simple_env_end_005a:
 16778 0000BEB8 5B                      	pop rbx
 16779 0000BEB9 BE00000000              	mov rsi, 0
 16780                                  .L_lambda_simple_params_loop_005a:	; copy params
 16781 0000BEBE 4883FE01                	cmp rsi, 1
 16782 0000BEC2 740E                    	je .L_lambda_simple_params_end_005a
 16783 0000BEC4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16784 0000BEC9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16785 0000BECD 48FFC6                  	inc rsi
 16786 0000BED0 EBEC                    	jmp .L_lambda_simple_params_loop_005a
 16787                                  .L_lambda_simple_params_end_005a:
 16788 0000BED2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16789 0000BED5 4889C3                  	mov rbx, rax
 16790 0000BED8 58                      	pop rax
 16791 0000BED9 C60004                  	mov byte [rax], T_closure
 16792 0000BEDC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16793 0000BEE0 48C74009[EDBE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005a
 16794 0000BEE8 E97A050000              	jmp .L_lambda_simple_end_005a
 16795                                  .L_lambda_simple_code_005a:	; lambda-simple body
 16796 0000BEED 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16797 0000BEF3 740B                    	je .L_lambda_simple_arity_check_ok_005a
 16798 0000BEF5 FF742410                	push qword [rsp + 8 * 2]
 16799 0000BEF9 6A01                    	push 1
 16800 0000BEFB E97DBD0000              	jmp L_error_incorrect_arity_simple
 16801                                  .L_lambda_simple_arity_check_ok_005a:
 16802 0000BF00 C8000000                	enter 0, 0
 16803                                  	; preparing a tail-call
 16804 0000BF04 48B8-                   	mov rax, L_constants + 1993
 16804 0000BF06 [C907000000000000] 
 16805 0000BF0E 50                      	push rax
 16806 0000BF0F 6A01                    	push 1	; arg count
 16807 0000BF11 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16808 0000BF16 E8A9BD0000              	call malloc
 16809 0000BF1B 50                      	push rax
 16810 0000BF1C BF08000000              	mov rdi, 8 * 1	; new rib
 16811 0000BF21 E89EBD0000              	call malloc
 16812 0000BF26 50                      	push rax
 16813 0000BF27 BF48000000              	mov rdi, 8 * 9	; extended env
 16814 0000BF2C E893BD0000              	call malloc
 16815 0000BF31 488B7D10                	mov rdi, ENV
 16816 0000BF35 BE00000000              	mov rsi, 0
 16817 0000BF3A BA01000000              	mov rdx, 1
 16818                                  .L_lambda_simple_env_loop_005b:	; ext_env[i + 1] <-- env[i]
 16819 0000BF3F 4883FE08                	cmp rsi, 8
 16820 0000BF43 7410                    	je .L_lambda_simple_env_end_005b
 16821 0000BF45 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16822 0000BF49 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16823 0000BF4D 48FFC6                  	inc rsi
 16824 0000BF50 48FFC2                  	inc rdx
 16825 0000BF53 EBEA                    	jmp .L_lambda_simple_env_loop_005b
 16826                                  .L_lambda_simple_env_end_005b:
 16827 0000BF55 5B                      	pop rbx
 16828 0000BF56 BE00000000              	mov rsi, 0
 16829                                  .L_lambda_simple_params_loop_005b:	; copy params
 16830 0000BF5B 4883FE01                	cmp rsi, 1
 16831 0000BF5F 740E                    	je .L_lambda_simple_params_end_005b
 16832 0000BF61 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16833 0000BF66 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16834 0000BF6A 48FFC6                  	inc rsi
 16835 0000BF6D EBEC                    	jmp .L_lambda_simple_params_loop_005b
 16836                                  .L_lambda_simple_params_end_005b:
 16837 0000BF6F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16838 0000BF72 4889C3                  	mov rbx, rax
 16839 0000BF75 58                      	pop rax
 16840 0000BF76 C60004                  	mov byte [rax], T_closure
 16841 0000BF79 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16842 0000BF7D 48C74009[8ABF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005b
 16843 0000BF85 E985040000              	jmp .L_lambda_simple_end_005b
 16844                                  .L_lambda_simple_code_005b:	; lambda-simple body
 16845 0000BF8A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16846 0000BF90 740B                    	je .L_lambda_simple_arity_check_ok_005b
 16847 0000BF92 FF742410                	push qword [rsp + 8 * 2]
 16848 0000BF96 6A01                    	push 1
 16849 0000BF98 E9E0BC0000              	jmp L_error_incorrect_arity_simple
 16850                                  .L_lambda_simple_arity_check_ok_005b:
 16851 0000BF9D C8000000                	enter 0, 0
 16852 0000BFA1 BF08000000              	mov rdi, 8*1
 16853 0000BFA6 E819BD0000              	call malloc
 16854 0000BFAB 488B5D20                	mov rbx, PARAM(0)
 16855 0000BFAF 488918                  	mov qword[rax], rbx
 16856 0000BFB2 48894520                	mov PARAM(0), rax
 16857 0000BFB6 48B8-                   	mov rax, sob_void
 16857 0000BFB8 [0000000000000000] 
 16858                                  
 16859 0000BFC0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16860 0000BFC5 E8FABC0000              	call malloc
 16861 0000BFCA 50                      	push rax
 16862 0000BFCB BF08000000              	mov rdi, 8 * 1	; new rib
 16863 0000BFD0 E8EFBC0000              	call malloc
 16864 0000BFD5 50                      	push rax
 16865 0000BFD6 BF50000000              	mov rdi, 8 * 10	; extended env
 16866 0000BFDB E8E4BC0000              	call malloc
 16867 0000BFE0 488B7D10                	mov rdi, ENV
 16868 0000BFE4 BE00000000              	mov rsi, 0
 16869 0000BFE9 BA01000000              	mov rdx, 1
 16870                                  .L_lambda_simple_env_loop_005c:	; ext_env[i + 1] <-- env[i]
 16871 0000BFEE 4883FE09                	cmp rsi, 9
 16872 0000BFF2 7410                    	je .L_lambda_simple_env_end_005c
 16873 0000BFF4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16874 0000BFF8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16875 0000BFFC 48FFC6                  	inc rsi
 16876 0000BFFF 48FFC2                  	inc rdx
 16877 0000C002 EBEA                    	jmp .L_lambda_simple_env_loop_005c
 16878                                  .L_lambda_simple_env_end_005c:
 16879 0000C004 5B                      	pop rbx
 16880 0000C005 BE00000000              	mov rsi, 0
 16881                                  .L_lambda_simple_params_loop_005c:	; copy params
 16882 0000C00A 4883FE01                	cmp rsi, 1
 16883 0000C00E 740E                    	je .L_lambda_simple_params_end_005c
 16884 0000C010 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16885 0000C015 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16886 0000C019 48FFC6                  	inc rsi
 16887 0000C01C EBEC                    	jmp .L_lambda_simple_params_loop_005c
 16888                                  .L_lambda_simple_params_end_005c:
 16889 0000C01E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16890 0000C021 4889C3                  	mov rbx, rax
 16891 0000C024 58                      	pop rax
 16892 0000C025 C60004                  	mov byte [rax], T_closure
 16893 0000C028 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16894 0000C02C 48C74009[39C00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005c
 16895 0000C034 E962010000              	jmp .L_lambda_simple_end_005c
 16896                                  .L_lambda_simple_code_005c:	; lambda-simple body
 16897 0000C039 48837C241002            	cmp qword [rsp + 8 * 2], 2
 16898 0000C03F 740B                    	je .L_lambda_simple_arity_check_ok_005c
 16899 0000C041 FF742410                	push qword [rsp + 8 * 2]
 16900 0000C045 6A02                    	push 2
 16901 0000C047 E931BC0000              	jmp L_error_incorrect_arity_simple
 16902                                  .L_lambda_simple_arity_check_ok_005c:
 16903 0000C04C C8000000                	enter 0, 0
 16904                                  	; preparing a non-tail-call
 16905 0000C050 488B4528                	mov rax, PARAM(1)	; param s
 16906 0000C054 50                      	push rax
 16907 0000C055 6A01                    	push 1	; arg count
 16908 0000C057 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 16909 0000C05F 803805                  	cmp byte [rax], T_undefined
 16910 0000C062 0F842FBB0000            	je L_error_fvar_undefined
 16911 0000C068 803804                  	cmp byte [rax], T_closure
 16912 0000C06B 0F85AABB0000            	jne L_error_non_closure
 16913 0000C071 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16914 0000C074 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16915 0000C077 483D[02000000]          	cmp rax, sob_boolean_false
 16916 0000C07D 0F8514010000            	jne .L_or_end_0009
 16917                                  	; preparing a non-tail-call
 16918                                  	; preparing a non-tail-call
 16919 0000C083 488B4528                	mov rax, PARAM(1)	; param s
 16920 0000C087 50                      	push rax
 16921 0000C088 6A01                    	push 1	; arg count
 16922 0000C08A 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 16923 0000C092 803805                  	cmp byte [rax], T_undefined
 16924 0000C095 0F84FCBA0000            	je L_error_fvar_undefined
 16925 0000C09B 803804                  	cmp byte [rax], T_closure
 16926 0000C09E 0F8577BB0000            	jne L_error_non_closure
 16927 0000C0A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16928 0000C0A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16929 0000C0AA 50                      	push rax
 16930 0000C0AB 488B4520                	mov rax, PARAM(0)	; param a
 16931 0000C0AF 50                      	push rax
 16932 0000C0B0 6A02                    	push 2	; arg count
 16933 0000C0B2 488B4510                	mov rax, ENV
 16934 0000C0B6 488B4008                	mov rax, qword [rax + 8 * 1]
 16935 0000C0BA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-ordering
 16936 0000C0BD 803804                  	cmp byte [rax], T_closure
 16937 0000C0C0 0F8555BB0000            	jne L_error_non_closure
 16938 0000C0C6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16939 0000C0C9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16940 0000C0CC 483D[02000000]          	cmp rax, sob_boolean_false
 16941 0000C0D2 0F84B5000000            	je .L_if_else_0058
 16942                                  	; preparing a tail-call
 16943                                  	; preparing a non-tail-call
 16944 0000C0D8 488B4528                	mov rax, PARAM(1)	; param s
 16945 0000C0DC 50                      	push rax
 16946 0000C0DD 6A01                    	push 1	; arg count
 16947 0000C0DF 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
 16948 0000C0E7 803805                  	cmp byte [rax], T_undefined
 16949 0000C0EA 0F84A7BA0000            	je L_error_fvar_undefined
 16950 0000C0F0 803804                  	cmp byte [rax], T_closure
 16951 0000C0F3 0F8522BB0000            	jne L_error_non_closure
 16952 0000C0F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16953 0000C0FC FF5009                  	call SOB_CLOSURE_CODE(rax)
 16954 0000C0FF 50                      	push rax
 16955                                  	; preparing a non-tail-call
 16956 0000C100 488B4528                	mov rax, PARAM(1)	; param s
 16957 0000C104 50                      	push rax
 16958 0000C105 6A01                    	push 1	; arg count
 16959 0000C107 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 16960 0000C10F 803805                  	cmp byte [rax], T_undefined
 16961 0000C112 0F847FBA0000            	je L_error_fvar_undefined
 16962 0000C118 803804                  	cmp byte [rax], T_closure
 16963 0000C11B 0F85FABA0000            	jne L_error_non_closure
 16964 0000C121 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16965 0000C124 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16966 0000C127 50                      	push rax
 16967 0000C128 6A02                    	push 2	; arg count
 16968 0000C12A 488B4510                	mov rax, ENV
 16969 0000C12E 488B00                  	mov rax, qword [rax + 8 * 0]
 16970 0000C131 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 16971 0000C134 488B00                  	mov rax, qword [rax]
 16972 0000C137 803804                  	cmp byte [rax], T_closure
 16973 0000C13A 0F85DBBA0000            	jne L_error_non_closure
 16974 0000C140 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16975 0000C143 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16976 0000C146 FF7500                  	push qword[rbp]
 16977 0000C149 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16978 0000C14C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16979 0000C150 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16980 0000C154 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16981 0000C158 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16982 0000C15B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16983 0000C15E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16984 0000C163 4983C103                	add r9, 3 	 ;for getting to the params
 16985 0000C167 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16986 0000C16B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16987                                  .L_tc_recycle_frame_loop_009f:
 16988 0000C16E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16989 0000C171 7410                    	je .L_tc_recycle_frame_done_009f
 16990 0000C173 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16991 0000C176 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16992 0000C179 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16993 0000C17D 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16994 0000C181 EBEB                    	jmp .L_tc_recycle_frame_loop_009f
 16995                                  .L_tc_recycle_frame_done_009f:
 16996 0000C183 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16997 0000C184 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16998 0000C188 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16999 0000C18B EB0A                    	jmp .L_if_end_0058
 17000                                  .L_if_else_0058:
 17001 0000C18D 48B8-                   	mov rax, L_constants + 2
 17001 0000C18F [0200000000000000] 
 17002                                  .L_if_end_0058:
 17003                                  .L_or_end_0009:
 17004 0000C197 C9                      	leave
 17005 0000C198 C22000                  	ret AND_KILL_FRAME(2)
 17006                                  .L_lambda_simple_end_005c:	; new closure is in rax
 17007 0000C19B 50                      	push rax
 17008 0000C19C 488B4520                	mov rax, PARAM(0)	; param run
 17009 0000C1A0 8F00                    	pop qword [rax]
 17010 0000C1A2 48B8-                   	mov rax, sob_void
 17010 0000C1A4 [0000000000000000] 
 17011                                  
 17012 0000C1AC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17013 0000C1B1 E80EBB0000              	call malloc
 17014 0000C1B6 50                      	push rax
 17015 0000C1B7 BF08000000              	mov rdi, 8 * 1	; new rib
 17016 0000C1BC E803BB0000              	call malloc
 17017 0000C1C1 50                      	push rax
 17018 0000C1C2 BF50000000              	mov rdi, 8 * 10	; extended env
 17019 0000C1C7 E8F8BA0000              	call malloc
 17020 0000C1CC 488B7D10                	mov rdi, ENV
 17021 0000C1D0 BE00000000              	mov rsi, 0
 17022 0000C1D5 BA01000000              	mov rdx, 1
 17023                                  .L_lambda_opt_env_loop_000e:	; ext_env[i + 1] <-- env[i]
 17024 0000C1DA 4883FE09                	cmp rsi, 9
 17025 0000C1DE 7410                    	je .L_lambda_opt_env_end_000e
 17026 0000C1E0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17027 0000C1E4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17028 0000C1E8 48FFC6                  	inc rsi
 17029 0000C1EB 48FFC2                  	inc rdx
 17030 0000C1EE EBEA                    	jmp .L_lambda_opt_env_loop_000e
 17031                                  .L_lambda_opt_env_end_000e:
 17032 0000C1F0 5B                      	pop rbx
 17033 0000C1F1 BE00000000              	mov rsi, 0
 17034                                  .L_lambda_opt_params_loop_000e:	; copy params
 17035 0000C1F6 4883FE01                	cmp rsi, 1
 17036 0000C1FA 740E                    	je .L_lambda_opt_params_end_000e
 17037 0000C1FC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17038 0000C201 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17039 0000C205 48FFC6                  	inc rsi
 17040 0000C208 EBEC                    	jmp .L_lambda_opt_params_loop_000e
 17041                                  .L_lambda_opt_params_end_000e:
 17042 0000C20A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17043 0000C20D 4889C3                  	mov rbx, rax
 17044 0000C210 58                      	pop rax
 17045 0000C211 C60004                  	mov byte [rax], T_closure
 17046 0000C214 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17047 0000C218 48C74009[25C20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000e
 17048 0000C220 E9E6010000              	jmp .L_lambda_opt_end_000e
 17049                                  .L_lambda_opt_code_000e:	; lambda-opt body
 17050 0000C225 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17051 0000C22B 7411                    	je .L_lambda_opt_arity_check_exact_000e
 17052 0000C22D 0F8FBF000000            	jg .L_lambda_opt_arity_check_more_000e
 17053 0000C233 FF742410                	push qword [rsp + 8 * 2]
 17054 0000C237 6A01                    	push 1
 17055 0000C239 E953BA0000              	jmp L_error_incorrect_arity_opt
 17056                                  .L_lambda_opt_arity_check_exact_000e:
 17057 0000C23E 4883EC08                	sub rsp, 8
 17058 0000C242 488B442408              	mov rax, qword[rsp + 8 *1]
 17059 0000C247 48890424                	mov qword[rsp], rax  
 17060 0000C24B 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 17061 0000C250 4889442408              	mov qword[rsp + 8 * 1], rax
 17062 0000C255 B802000000              	mov rax, 2
 17063 0000C25A 4889442410              	mov qword[rsp + 8 *2], rax
 17064 0000C25F 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
 17065 0000C264 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 17066 0000C269 48B8-                   	mov rax, sob_nil
 17066 0000C26B [0100000000000000] 
 17067 0000C273 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
 17068 0000C278 C8000000                	enter 0, 0
 17069                                  	; preparing a tail-call
 17070 0000C27C 488B4528                	mov rax, PARAM(1)	; param s
 17071 0000C280 50                      	push rax
 17072 0000C281 488B4520                	mov rax, PARAM(0)	; param a
 17073 0000C285 50                      	push rax
 17074 0000C286 6A02                    	push 2	; arg count
 17075 0000C288 488B4510                	mov rax, ENV
 17076 0000C28C 488B00                  	mov rax, qword [rax + 8 * 0]
 17077 0000C28F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 17078 0000C292 488B00                  	mov rax, qword [rax]
 17079 0000C295 803804                  	cmp byte [rax], T_closure
 17080 0000C298 0F857DB90000            	jne L_error_non_closure
 17081 0000C29E FF7001                  	push SOB_CLOSURE_ENV(rax)
 17082 0000C2A1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17083 0000C2A4 FF7500                  	push qword[rbp]
 17084 0000C2A7 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17085 0000C2AA 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17086 0000C2AE 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17087 0000C2B2 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17088 0000C2B6 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17089 0000C2B9 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17090 0000C2BC 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17091 0000C2C1 4983C103                	add r9, 3 	 ;for getting to the params
 17092 0000C2C5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17093 0000C2C9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17094                                  .L_tc_recycle_frame_loop_00a1:
 17095 0000C2CC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17096 0000C2CF 7410                    	je .L_tc_recycle_frame_done_00a1
 17097 0000C2D1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17098 0000C2D4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17099 0000C2D7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17100 0000C2DB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17101 0000C2DF EBEB                    	jmp .L_tc_recycle_frame_loop_00a1
 17102                                  .L_tc_recycle_frame_done_00a1:
 17103 0000C2E1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17104 0000C2E2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17105 0000C2E6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17106 0000C2E9 C9                      	leave
 17107 0000C2EA C22000                  	ret AND_KILL_FRAME(2)
 17108 0000C2ED E919010000              	jmp .L_lambda_opt_end_000e	; new closure is in rax
 17109                                  .L_lambda_opt_arity_check_more_000e:
 17110 0000C2F2 488B442410              	mov rax, qword[rsp + 2 * 8]
 17111 0000C2F7 4889C7                  	mov rdi, rax
 17112 0000C2FA 49B9-                   	mov r9, sob_nil
 17112 0000C2FC [0100000000000000] 
 17113 0000C304 4989F8                  	mov r8, rdi
 17114                                  .L_lambda_opt_stack_shrink_loop_000e:
 17115 0000C307 4983F801                	cmp r8, 1
 17116 0000C30B 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_000e
 17117 0000C30D 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)] 	;rbx is the top of the stack
 17118 0000C312 BF11000000              	mov rdi, 1+8+8	;for pair
 17119 0000C317 E8A8B90000              	call malloc	 ;to create the pair in the stack
 17120 0000C31C C60021                  	mov byte [rax], T_pair	 ; to make it a pair
 17121 0000C31F 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
 17122 0000C323 4C894809                 	mov qword[rax+1+8],r9
 17123 0000C327 4989C1                  	mov r9 , rax	 ; for the recursion 
 17124 0000C32A 49FFC8                  	dec r8
 17125 0000C32D EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_000e
 17126                                  .L_lambda_opt_stack_shrink_loop_exit_000e:
 17127 0000C32F 488B442410              	mov rax, qword[rsp + 2 * 8]
 17128 0000C334 BF02000000              	mov rdi, 2
 17129 0000C339 4829F8                  	sub rax, rdi
 17130 0000C33C 4889C7                  	mov rdi, rax
 17131 0000C33F 486BC008                	imul rax,8
 17132 0000C343 4801C4                  	add rsp, rax
 17133 0000C346 4889E0                  	mov rax, rsp
 17134 0000C349 4989F8                  	mov r8, rdi
 17135 0000C34C 4D6BC008                	imul r8, 8
 17136 0000C350 4C29C0                  	sub rax, r8
 17137 0000C353 4989C2                  	mov r10, rax	; holds the original ret in the stack
 17138 0000C356 4983C218                	add r10, 8*3
 17139 0000C35A 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
 17140 0000C35E 4C8B00                  	mov r8, qword[rax] 	;arg count = r8
 17141 0000C361 4D6BC008                	imul r8,8
 17142 0000C365 4C01C0                  	add rax, r8
 17143 0000C368 4C8908                  	mov qword[rax] ,r9
 17144 0000C36B 4D89D0                   	mov r8, r10
 17145 0000C36E 4983C000                	add r8, 8 * 0
 17146 0000C372 4D8B08                  	mov r9,qword[r8]
 17147 0000C375 4D890CF8                	mov qword [r8 + rdi * 8], r9
 17148 0000C379 4983EA18                	sub r10, 8*3
 17149 0000C37D 48C744241002000000      	mov qword [rsp+2*8], 2
 17150 0000C386 498B4208                	mov rax, qword[r10 + 1 * 8]
 17151 0000C38A 4889442408              	mov qword[rsp + 1*8] ,rax
 17152 0000C38F 498B02                  	mov rax, qword[r10]
 17153 0000C392 48890424                	mov qword[rsp], rax
 17154 0000C396 C8000000                	enter 0, 0
 17155                                  	; preparing a tail-call
 17156 0000C39A 488B4528                	mov rax, PARAM(1)	; param s
 17157 0000C39E 50                      	push rax
 17158 0000C39F 488B4520                	mov rax, PARAM(0)	; param a
 17159 0000C3A3 50                      	push rax
 17160 0000C3A4 6A02                    	push 2	; arg count
 17161 0000C3A6 488B4510                	mov rax, ENV
 17162 0000C3AA 488B00                  	mov rax, qword [rax + 8 * 0]
 17163 0000C3AD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 17164 0000C3B0 488B00                  	mov rax, qword [rax]
 17165 0000C3B3 803804                  	cmp byte [rax], T_closure
 17166 0000C3B6 0F855FB80000            	jne L_error_non_closure
 17167 0000C3BC FF7001                  	push SOB_CLOSURE_ENV(rax)
 17168 0000C3BF FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17169 0000C3C2 FF7500                  	push qword[rbp]
 17170 0000C3C5 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17171 0000C3C8 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17172 0000C3CC 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17173 0000C3D0 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17174 0000C3D4 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17175 0000C3D7 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17176 0000C3DA 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17177 0000C3DF 4983C103                	add r9, 3 	 ;for getting to the params
 17178 0000C3E3 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17179 0000C3E7 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17180                                  .L_tc_recycle_frame_loop_00a0:
 17181 0000C3EA 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17182 0000C3ED 7410                    	je .L_tc_recycle_frame_done_00a0
 17183 0000C3EF 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17184 0000C3F2 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17185 0000C3F5 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17186 0000C3F9 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17187 0000C3FD EBEB                    	jmp .L_tc_recycle_frame_loop_00a0
 17188                                  .L_tc_recycle_frame_done_00a0:
 17189 0000C3FF 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17190 0000C400 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17191 0000C404 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17192 0000C407 C9                      	leave
 17193 0000C408 C22000                  	ret AND_KILL_FRAME(2)
 17194                                  .L_lambda_opt_end_000e:	; new closure is in rax
 17195 0000C40B C9                      	leave
 17196 0000C40C C21800                  	ret AND_KILL_FRAME(1)
 17197                                  .L_lambda_simple_end_005b:	; new closure is in rax
 17198 0000C40F 803804                  	cmp byte [rax], T_closure
 17199 0000C412 0F8503B80000            	jne L_error_non_closure
 17200 0000C418 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17201 0000C41B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17202 0000C41E FF7500                  	push qword[rbp]
 17203 0000C421 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17204 0000C424 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17205 0000C428 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17206 0000C42C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17207 0000C430 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17208 0000C433 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17209 0000C436 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17210 0000C43B 4983C103                	add r9, 3 	 ;for getting to the params
 17211 0000C43F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17212 0000C443 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17213                                  .L_tc_recycle_frame_loop_00a2:
 17214 0000C446 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17215 0000C449 7410                    	je .L_tc_recycle_frame_done_00a2
 17216 0000C44B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17217 0000C44E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17218 0000C451 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17219 0000C455 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17220 0000C459 EBEB                    	jmp .L_tc_recycle_frame_loop_00a2
 17221                                  .L_tc_recycle_frame_done_00a2:
 17222 0000C45B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17223 0000C45C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17224 0000C460 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17225 0000C463 C9                      	leave
 17226 0000C464 C21800                  	ret AND_KILL_FRAME(1)
 17227                                  .L_lambda_simple_end_005a:	; new closure is in rax
 17228 0000C467 50                      	push rax
 17229 0000C468 6A01                    	push 1	; arg count
 17230 0000C46A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17231 0000C46F E850B80000              	call malloc
 17232 0000C474 50                      	push rax
 17233 0000C475 BF08000000              	mov rdi, 8 * 1	; new rib
 17234 0000C47A E845B80000              	call malloc
 17235 0000C47F 50                      	push rax
 17236 0000C480 BF40000000              	mov rdi, 8 * 8	; extended env
 17237 0000C485 E83AB80000              	call malloc
 17238 0000C48A 488B7D10                	mov rdi, ENV
 17239 0000C48E BE00000000              	mov rsi, 0
 17240 0000C493 BA01000000              	mov rdx, 1
 17241                                  .L_lambda_simple_env_loop_005d:	; ext_env[i + 1] <-- env[i]
 17242 0000C498 4883FE07                	cmp rsi, 7
 17243 0000C49C 7410                    	je .L_lambda_simple_env_end_005d
 17244 0000C49E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17245 0000C4A2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17246 0000C4A6 48FFC6                  	inc rsi
 17247 0000C4A9 48FFC2                  	inc rdx
 17248 0000C4AC EBEA                    	jmp .L_lambda_simple_env_loop_005d
 17249                                  .L_lambda_simple_env_end_005d:
 17250 0000C4AE 5B                      	pop rbx
 17251 0000C4AF BE00000000              	mov rsi, 0
 17252                                  .L_lambda_simple_params_loop_005d:	; copy params
 17253 0000C4B4 4883FE01                	cmp rsi, 1
 17254 0000C4B8 740E                    	je .L_lambda_simple_params_end_005d
 17255 0000C4BA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17256 0000C4BF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17257 0000C4C3 48FFC6                  	inc rsi
 17258 0000C4C6 EBEC                    	jmp .L_lambda_simple_params_loop_005d
 17259                                  .L_lambda_simple_params_end_005d:
 17260 0000C4C8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17261 0000C4CB 4889C3                  	mov rbx, rax
 17262 0000C4CE 58                      	pop rax
 17263 0000C4CF C60004                  	mov byte [rax], T_closure
 17264 0000C4D2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17265 0000C4D6 48C74009[E3C40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005d
 17266 0000C4DE E919010000              	jmp .L_lambda_simple_end_005d
 17267                                  .L_lambda_simple_code_005d:	; lambda-simple body
 17268 0000C4E3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17269 0000C4E9 740B                    	je .L_lambda_simple_arity_check_ok_005d
 17270 0000C4EB FF742410                	push qword [rsp + 8 * 2]
 17271 0000C4EF 6A01                    	push 1
 17272 0000C4F1 E987B70000              	jmp L_error_incorrect_arity_simple
 17273                                  .L_lambda_simple_arity_check_ok_005d:
 17274 0000C4F6 C8000000                	enter 0, 0
 17275                                  	; preparing a non-tail-call
 17276 0000C4FA 488B4510                	mov rax, ENV
 17277 0000C4FE 488B4020                	mov rax, qword [rax + 8 * 4]
 17278 0000C502 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<?
 17279 0000C505 50                      	push rax
 17280 0000C506 6A01                    	push 1	; arg count
 17281 0000C508 488B4520                	mov rax, PARAM(0)	; param make-run
 17282 0000C50C 803804                  	cmp byte [rax], T_closure
 17283 0000C50F 0F8506B70000            	jne L_error_non_closure
 17284 0000C515 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17285 0000C518 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17286 0000C51B 48890425[090E0000]      	mov qword [free_var_4], rax
 17287 0000C523 48B8-                   	mov rax, sob_void
 17287 0000C525 [0000000000000000] 
 17288                                  
 17289                                  	; preparing a non-tail-call
 17290 0000C52D 488B4510                	mov rax, ENV
 17291 0000C531 488B00                  	mov rax, qword [rax + 8 * 0]
 17292 0000C534 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<=?
 17293 0000C537 50                      	push rax
 17294 0000C538 6A01                    	push 1	; arg count
 17295 0000C53A 488B4520                	mov rax, PARAM(0)	; param make-run
 17296 0000C53E 803804                  	cmp byte [rax], T_closure
 17297 0000C541 0F85D4B60000            	jne L_error_non_closure
 17298 0000C547 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17299 0000C54A FF5009                  	call SOB_CLOSURE_CODE(rax)
 17300 0000C54D 48890425[1A0E0000]      	mov qword [free_var_5], rax
 17301 0000C555 48B8-                   	mov rax, sob_void
 17301 0000C557 [0000000000000000] 
 17302                                  
 17303                                  	; preparing a non-tail-call
 17304 0000C55F 488B4510                	mov rax, ENV
 17305 0000C563 488B4008                	mov rax, qword [rax + 8 * 1]
 17306 0000C567 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin>?
 17307 0000C56A 50                      	push rax
 17308 0000C56B 6A01                    	push 1	; arg count
 17309 0000C56D 488B4520                	mov rax, PARAM(0)	; param make-run
 17310 0000C571 803804                  	cmp byte [rax], T_closure
 17311 0000C574 0F85A1B60000            	jne L_error_non_closure
 17312 0000C57A FF7001                  	push SOB_CLOSURE_ENV(rax)
 17313 0000C57D FF5009                  	call SOB_CLOSURE_CODE(rax)
 17314 0000C580 48890425[3C0E0000]      	mov qword [free_var_7], rax
 17315 0000C588 48B8-                   	mov rax, sob_void
 17315 0000C58A [0000000000000000] 
 17316                                  
 17317                                  	; preparing a non-tail-call
 17318 0000C592 488B4510                	mov rax, ENV
 17319 0000C596 488B4010                	mov rax, qword [rax + 8 * 2]
 17320 0000C59A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin>=?
 17321 0000C59D 50                      	push rax
 17322 0000C59E 6A01                    	push 1	; arg count
 17323 0000C5A0 488B4520                	mov rax, PARAM(0)	; param make-run
 17324 0000C5A4 803804                  	cmp byte [rax], T_closure
 17325 0000C5A7 0F856EB60000            	jne L_error_non_closure
 17326 0000C5AD FF7001                  	push SOB_CLOSURE_ENV(rax)
 17327 0000C5B0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17328 0000C5B3 48890425[4D0E0000]      	mov qword [free_var_8], rax
 17329 0000C5BB 48B8-                   	mov rax, sob_void
 17329 0000C5BD [0000000000000000] 
 17330                                  
 17331                                  	; preparing a non-tail-call
 17332 0000C5C5 488B4510                	mov rax, ENV
 17333 0000C5C9 488B4018                	mov rax, qword [rax + 8 * 3]
 17334 0000C5CD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin=?
 17335 0000C5D0 50                      	push rax
 17336 0000C5D1 6A01                    	push 1	; arg count
 17337 0000C5D3 488B4520                	mov rax, PARAM(0)	; param make-run
 17338 0000C5D7 803804                  	cmp byte [rax], T_closure
 17339 0000C5DA 0F853BB60000            	jne L_error_non_closure
 17340 0000C5E0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17341 0000C5E3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17342 0000C5E6 48890425[2B0E0000]      	mov qword [free_var_6], rax
 17343 0000C5EE 48B8-                   	mov rax, sob_void
 17343 0000C5F0 [0000000000000000] 
 17344 0000C5F8 C9                      	leave
 17345 0000C5F9 C21800                  	ret AND_KILL_FRAME(1)
 17346                                  .L_lambda_simple_end_005d:	; new closure is in rax
 17347 0000C5FC 803804                  	cmp byte [rax], T_closure
 17348 0000C5FF 0F8516B60000            	jne L_error_non_closure
 17349 0000C605 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17350 0000C608 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17351 0000C60B FF7500                  	push qword[rbp]
 17352 0000C60E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17353 0000C611 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17354 0000C615 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17355 0000C619 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17356 0000C61D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17357 0000C620 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17358 0000C623 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17359 0000C628 4983C103                	add r9, 3 	 ;for getting to the params
 17360 0000C62C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17361 0000C630 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17362                                  .L_tc_recycle_frame_loop_00a3:
 17363 0000C633 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17364 0000C636 7410                    	je .L_tc_recycle_frame_done_00a3
 17365 0000C638 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17366 0000C63B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17367 0000C63E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17368 0000C642 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17369 0000C646 EBEB                    	jmp .L_tc_recycle_frame_loop_00a3
 17370                                  .L_tc_recycle_frame_done_00a3:
 17371 0000C648 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17372 0000C649 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17373 0000C64D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17374 0000C650 C9                      	leave
 17375 0000C651 C21800                  	ret AND_KILL_FRAME(1)
 17376                                  .L_lambda_simple_end_0059:	; new closure is in rax
 17377 0000C654 803804                  	cmp byte [rax], T_closure
 17378 0000C657 0F85BEB50000            	jne L_error_non_closure
 17379 0000C65D FF7001                  	push SOB_CLOSURE_ENV(rax)
 17380 0000C660 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17381 0000C663 FF7500                  	push qword[rbp]
 17382 0000C666 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17383 0000C669 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17384 0000C66D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17385 0000C671 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17386 0000C675 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17387 0000C678 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17388 0000C67B 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17389 0000C680 4983C103                	add r9, 3 	 ;for getting to the params
 17390 0000C684 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17391 0000C688 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17392                                  .L_tc_recycle_frame_loop_00a4:
 17393 0000C68B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17394 0000C68E 7410                    	je .L_tc_recycle_frame_done_00a4
 17395 0000C690 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17396 0000C693 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17397 0000C696 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17398 0000C69A 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17399 0000C69E EBEB                    	jmp .L_tc_recycle_frame_loop_00a4
 17400                                  .L_tc_recycle_frame_done_00a4:
 17401 0000C6A0 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17402 0000C6A1 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17403 0000C6A5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17404 0000C6A8 C9                      	leave
 17405 0000C6A9 C21800                  	ret AND_KILL_FRAME(1)
 17406                                  .L_lambda_simple_end_0057:	; new closure is in rax
 17407 0000C6AC 803804                  	cmp byte [rax], T_closure
 17408 0000C6AF 0F8566B50000            	jne L_error_non_closure
 17409 0000C6B5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17410 0000C6B8 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17411 0000C6BB FF7500                  	push qword[rbp]
 17412 0000C6BE 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17413 0000C6C1 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17414 0000C6C5 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17415 0000C6C9 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17416 0000C6CD 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17417 0000C6D0 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17418 0000C6D3 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17419 0000C6D8 4983C103                	add r9, 3 	 ;for getting to the params
 17420 0000C6DC 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17421 0000C6E0 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17422                                  .L_tc_recycle_frame_loop_00a5:
 17423 0000C6E3 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17424 0000C6E6 7410                    	je .L_tc_recycle_frame_done_00a5
 17425 0000C6E8 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17426 0000C6EB 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17427 0000C6EE 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17428 0000C6F2 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17429 0000C6F6 EBEB                    	jmp .L_tc_recycle_frame_loop_00a5
 17430                                  .L_tc_recycle_frame_done_00a5:
 17431 0000C6F8 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17432 0000C6F9 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17433 0000C6FD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17434 0000C700 C9                      	leave
 17435 0000C701 C21800                  	ret AND_KILL_FRAME(1)
 17436                                  .L_lambda_simple_end_0055:	; new closure is in rax
 17437 0000C704 803804                  	cmp byte [rax], T_closure
 17438 0000C707 0F850EB50000            	jne L_error_non_closure
 17439 0000C70D FF7001                  	push SOB_CLOSURE_ENV(rax)
 17440 0000C710 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17441 0000C713 FF7500                  	push qword[rbp]
 17442 0000C716 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17443 0000C719 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17444 0000C71D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17445 0000C721 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17446 0000C725 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17447 0000C728 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17448 0000C72B 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17449 0000C730 4983C103                	add r9, 3 	 ;for getting to the params
 17450 0000C734 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17451 0000C738 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17452                                  .L_tc_recycle_frame_loop_00a6:
 17453 0000C73B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17454 0000C73E 7410                    	je .L_tc_recycle_frame_done_00a6
 17455 0000C740 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17456 0000C743 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17457 0000C746 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17458 0000C74A 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17459 0000C74E EBEB                    	jmp .L_tc_recycle_frame_loop_00a6
 17460                                  .L_tc_recycle_frame_done_00a6:
 17461 0000C750 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17462 0000C751 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17463 0000C755 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17464 0000C758 C9                      	leave
 17465 0000C759 C21800                  	ret AND_KILL_FRAME(1)
 17466                                  .L_lambda_simple_end_0053:	; new closure is in rax
 17467 0000C75C 803804                  	cmp byte [rax], T_closure
 17468 0000C75F 0F85B6B40000            	jne L_error_non_closure
 17469 0000C765 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17470 0000C768 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17471 0000C76B FF7500                  	push qword[rbp]
 17472 0000C76E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17473 0000C771 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17474 0000C775 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17475 0000C779 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17476 0000C77D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17477 0000C780 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17478 0000C783 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17479 0000C788 4983C103                	add r9, 3 	 ;for getting to the params
 17480 0000C78C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17481 0000C790 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17482                                  .L_tc_recycle_frame_loop_00a7:
 17483 0000C793 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17484 0000C796 7410                    	je .L_tc_recycle_frame_done_00a7
 17485 0000C798 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17486 0000C79B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17487 0000C79E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17488 0000C7A2 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17489 0000C7A6 EBEB                    	jmp .L_tc_recycle_frame_loop_00a7
 17490                                  .L_tc_recycle_frame_done_00a7:
 17491 0000C7A8 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17492 0000C7A9 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17493 0000C7AD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17494 0000C7B0 C9                      	leave
 17495 0000C7B1 C21800                  	ret AND_KILL_FRAME(1)
 17496                                  .L_lambda_simple_end_0052:	; new closure is in rax
 17497 0000C7B4 803804                  	cmp byte [rax], T_closure
 17498 0000C7B7 0F855EB40000            	jne L_error_non_closure
 17499 0000C7BD FF7001                  	push SOB_CLOSURE_ENV(rax)
 17500 0000C7C0 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17501 0000C7C3 FF7500                  	push qword[rbp]
 17502 0000C7C6 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17503 0000C7C9 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17504 0000C7CD 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17505 0000C7D1 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17506 0000C7D5 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17507 0000C7D8 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17508 0000C7DB 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17509 0000C7E0 4983C103                	add r9, 3 	 ;for getting to the params
 17510 0000C7E4 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17511 0000C7E8 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17512                                  .L_tc_recycle_frame_loop_00a8:
 17513 0000C7EB 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17514 0000C7EE 7410                    	je .L_tc_recycle_frame_done_00a8
 17515 0000C7F0 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17516 0000C7F3 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17517 0000C7F6 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17518 0000C7FA 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17519 0000C7FE EBEB                    	jmp .L_tc_recycle_frame_loop_00a8
 17520                                  .L_tc_recycle_frame_done_00a8:
 17521 0000C800 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17522 0000C801 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17523 0000C805 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17524 0000C808 C9                      	leave
 17525 0000C809 C21800                  	ret AND_KILL_FRAME(1)
 17526                                  .L_lambda_simple_end_0051:	; new closure is in rax
 17527 0000C80C 803804                  	cmp byte [rax], T_closure
 17528 0000C80F 0F8506B40000            	jne L_error_non_closure
 17529 0000C815 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17530 0000C818 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17531 0000C81B FF7500                  	push qword[rbp]
 17532 0000C81E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17533 0000C821 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17534 0000C825 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17535 0000C829 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17536 0000C82D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17537 0000C830 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17538 0000C833 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17539 0000C838 4983C103                	add r9, 3 	 ;for getting to the params
 17540 0000C83C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17541 0000C840 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17542                                  .L_tc_recycle_frame_loop_00a9:
 17543 0000C843 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17544 0000C846 7410                    	je .L_tc_recycle_frame_done_00a9
 17545 0000C848 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17546 0000C84B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17547 0000C84E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17548 0000C852 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17549 0000C856 EBEB                    	jmp .L_tc_recycle_frame_loop_00a9
 17550                                  .L_tc_recycle_frame_done_00a9:
 17551 0000C858 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17552 0000C859 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17553 0000C85D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17554 0000C860 C9                      	leave
 17555 0000C861 C21800                  	ret AND_KILL_FRAME(1)
 17556                                  .L_lambda_simple_end_004e:	; new closure is in rax
 17557 0000C864 803804                  	cmp byte [rax], T_closure
 17558 0000C867 0F85AEB30000            	jne L_error_non_closure
 17559 0000C86D FF7001                  	push SOB_CLOSURE_ENV(rax)
 17560 0000C870 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17561                                  
 17562 0000C873 4889C7                  	mov rdi, rax
 17563 0000C876 E89EB60000              	call print_sexpr_if_not_void
 17564 0000C87B 48B8-                   	mov rax, L_constants + 0
 17564 0000C87D [0000000000000000] 
 17565 0000C885 48890425[AF120000]      	mov qword [free_var_74], rax
 17566 0000C88D 48B8-                   	mov rax, sob_void
 17566 0000C88F [0000000000000000] 
 17567                                  
 17568 0000C897 4889C7                  	mov rdi, rax
 17569 0000C89A E87AB60000              	call print_sexpr_if_not_void
 17570 0000C89F 48B8-                   	mov rax, L_constants + 0
 17570 0000C8A1 [0000000000000000] 
 17571 0000C8A9 48890425[9E120000]      	mov qword [free_var_73], rax
 17572 0000C8B1 48B8-                   	mov rax, sob_void
 17572 0000C8B3 [0000000000000000] 
 17573                                  
 17574 0000C8BB 4889C7                  	mov rdi, rax
 17575 0000C8BE E856B60000              	call print_sexpr_if_not_void
 17576 0000C8C3 48B8-                   	mov rax, L_constants + 0
 17576 0000C8C5 [0000000000000000] 
 17577 0000C8CD 48890425[C0120000]      	mov qword [free_var_75], rax
 17578 0000C8D5 48B8-                   	mov rax, sob_void
 17578 0000C8D7 [0000000000000000] 
 17579                                  
 17580 0000C8DF 4889C7                  	mov rdi, rax
 17581 0000C8E2 E832B60000              	call print_sexpr_if_not_void
 17582 0000C8E7 48B8-                   	mov rax, L_constants + 0
 17582 0000C8E9 [0000000000000000] 
 17583 0000C8F1 48890425[E2120000]      	mov qword [free_var_77], rax
 17584 0000C8F9 48B8-                   	mov rax, sob_void
 17584 0000C8FB [0000000000000000] 
 17585                                  
 17586 0000C903 4889C7                  	mov rdi, rax
 17587 0000C906 E80EB60000              	call print_sexpr_if_not_void
 17588 0000C90B 48B8-                   	mov rax, L_constants + 0
 17588 0000C90D [0000000000000000] 
 17589 0000C915 48890425[D1120000]      	mov qword [free_var_76], rax
 17590 0000C91D 48B8-                   	mov rax, sob_void
 17590 0000C91F [0000000000000000] 
 17591                                  
 17592 0000C927 4889C7                  	mov rdi, rax
 17593 0000C92A E8EAB50000              	call print_sexpr_if_not_void
 17594                                  	; preparing a non-tail-call
 17595 0000C92F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17596 0000C934 E88BB30000              	call malloc
 17597 0000C939 50                      	push rax
 17598 0000C93A BF00000000              	mov rdi, 8 * 0	; new rib
 17599 0000C93F E880B30000              	call malloc
 17600 0000C944 50                      	push rax
 17601 0000C945 BF08000000              	mov rdi, 8 * 1	; extended env
 17602 0000C94A E875B30000              	call malloc
 17603 0000C94F 488B7D10                	mov rdi, ENV
 17604 0000C953 BE00000000              	mov rsi, 0
 17605 0000C958 BA01000000              	mov rdx, 1
 17606                                  .L_lambda_simple_env_loop_005e:	; ext_env[i + 1] <-- env[i]
 17607 0000C95D 4883FE00                	cmp rsi, 0
 17608 0000C961 7410                    	je .L_lambda_simple_env_end_005e
 17609 0000C963 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17610 0000C967 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17611 0000C96B 48FFC6                  	inc rsi
 17612 0000C96E 48FFC2                  	inc rdx
 17613 0000C971 EBEA                    	jmp .L_lambda_simple_env_loop_005e
 17614                                  .L_lambda_simple_env_end_005e:
 17615 0000C973 5B                      	pop rbx
 17616 0000C974 BE00000000              	mov rsi, 0
 17617                                  .L_lambda_simple_params_loop_005e:	; copy params
 17618 0000C979 4883FE00                	cmp rsi, 0
 17619 0000C97D 740E                    	je .L_lambda_simple_params_end_005e
 17620 0000C97F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17621 0000C984 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17622 0000C988 48FFC6                  	inc rsi
 17623 0000C98B EBEC                    	jmp .L_lambda_simple_params_loop_005e
 17624                                  .L_lambda_simple_params_end_005e:
 17625 0000C98D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17626 0000C990 4889C3                  	mov rbx, rax
 17627 0000C993 58                      	pop rax
 17628 0000C994 C60004                  	mov byte [rax], T_closure
 17629 0000C997 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17630 0000C99B 48C74009[A8C90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005e
 17631 0000C9A3 E9E0020000              	jmp .L_lambda_simple_end_005e
 17632                                  .L_lambda_simple_code_005e:	; lambda-simple body
 17633 0000C9A8 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17634 0000C9AE 740B                    	je .L_lambda_simple_arity_check_ok_005e
 17635 0000C9B0 FF742410                	push qword [rsp + 8 * 2]
 17636 0000C9B4 6A01                    	push 1
 17637 0000C9B6 E9C2B20000              	jmp L_error_incorrect_arity_simple
 17638                                  .L_lambda_simple_arity_check_ok_005e:
 17639 0000C9BB C8000000                	enter 0, 0
 17640 0000C9BF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17641 0000C9C4 E8FBB20000              	call malloc
 17642 0000C9C9 50                      	push rax
 17643 0000C9CA BF08000000              	mov rdi, 8 * 1	; new rib
 17644 0000C9CF E8F0B20000              	call malloc
 17645 0000C9D4 50                      	push rax
 17646 0000C9D5 BF10000000              	mov rdi, 8 * 2	; extended env
 17647 0000C9DA E8E5B20000              	call malloc
 17648 0000C9DF 488B7D10                	mov rdi, ENV
 17649 0000C9E3 BE00000000              	mov rsi, 0
 17650 0000C9E8 BA01000000              	mov rdx, 1
 17651                                  .L_lambda_opt_env_loop_000f:	; ext_env[i + 1] <-- env[i]
 17652 0000C9ED 4883FE01                	cmp rsi, 1
 17653 0000C9F1 7410                    	je .L_lambda_opt_env_end_000f
 17654 0000C9F3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17655 0000C9F7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17656 0000C9FB 48FFC6                  	inc rsi
 17657 0000C9FE 48FFC2                  	inc rdx
 17658 0000CA01 EBEA                    	jmp .L_lambda_opt_env_loop_000f
 17659                                  .L_lambda_opt_env_end_000f:
 17660 0000CA03 5B                      	pop rbx
 17661 0000CA04 BE00000000              	mov rsi, 0
 17662                                  .L_lambda_opt_params_loop_000f:	; copy params
 17663 0000CA09 4883FE01                	cmp rsi, 1
 17664 0000CA0D 740E                    	je .L_lambda_opt_params_end_000f
 17665 0000CA0F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17666 0000CA14 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17667 0000CA18 48FFC6                  	inc rsi
 17668 0000CA1B EBEC                    	jmp .L_lambda_opt_params_loop_000f
 17669                                  .L_lambda_opt_params_end_000f:
 17670 0000CA1D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17671 0000CA20 4889C3                  	mov rbx, rax
 17672 0000CA23 58                      	pop rax
 17673 0000CA24 C60004                  	mov byte [rax], T_closure
 17674 0000CA27 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17675 0000CA2B 48C74009[38CA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000f
 17676 0000CA33 E94C020000              	jmp .L_lambda_opt_end_000f
 17677                                  .L_lambda_opt_code_000f:	; lambda-opt body
 17678 0000CA38 48837C241000            	cmp qword [rsp + 8 * 2], 0
 17679 0000CA3E 7411                    	je .L_lambda_opt_arity_check_exact_000f
 17680 0000CA40 0F8FF4000000            	jg .L_lambda_opt_arity_check_more_000f
 17681 0000CA46 FF742410                	push qword [rsp + 8 * 2]
 17682 0000CA4A 6A00                    	push 0
 17683 0000CA4C E940B20000              	jmp L_error_incorrect_arity_opt
 17684                                  .L_lambda_opt_arity_check_exact_000f:
 17685 0000CA51 4883EC08                	sub rsp, 8
 17686 0000CA55 488B442408              	mov rax, qword[rsp + 8 *1]
 17687 0000CA5A 48890424                	mov qword[rsp], rax  
 17688 0000CA5E 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 17689 0000CA63 4889442408              	mov qword[rsp + 8 * 1], rax
 17690 0000CA68 B801000000              	mov rax, 1
 17691 0000CA6D 4889442410              	mov qword[rsp + 8 *2], rax
 17692 0000CA72 48B8-                   	mov rax, sob_nil
 17692 0000CA74 [0100000000000000] 
 17693 0000CA7C 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 17694 0000CA81 C8000000                	enter 0, 0
 17695                                  	; preparing a tail-call
 17696                                  	; preparing a non-tail-call
 17697 0000CA85 488B4520                	mov rax, PARAM(0)	; param s
 17698 0000CA89 50                      	push rax
 17699 0000CA8A 488B0425[16120000]      	mov rax, qword [free_var_65]	; free var char->integer
 17700 0000CA92 803805                  	cmp byte [rax], T_undefined
 17701 0000CA95 0F84FCB00000            	je L_error_fvar_undefined
 17702 0000CA9B 50                      	push rax
 17703 0000CA9C 6A02                    	push 2	; arg count
 17704 0000CA9E 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
 17705 0000CAA6 803805                  	cmp byte [rax], T_undefined
 17706 0000CAA9 0F84E8B00000            	je L_error_fvar_undefined
 17707 0000CAAF 803804                  	cmp byte [rax], T_closure
 17708 0000CAB2 0F8563B10000            	jne L_error_non_closure
 17709 0000CAB8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17710 0000CABB FF5009                  	call SOB_CLOSURE_CODE(rax)
 17711 0000CABE 50                      	push rax
 17712 0000CABF 488B4510                	mov rax, ENV
 17713 0000CAC3 488B00                  	mov rax, qword [rax + 8 * 0]
 17714 0000CAC6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator
 17715 0000CAC9 50                      	push rax
 17716 0000CACA 6A02                    	push 2	; arg count
 17717 0000CACC 488B0425[F60F0000]      	mov rax, qword [free_var_33]	; free var apply
 17718 0000CAD4 803805                  	cmp byte [rax], T_undefined
 17719 0000CAD7 0F84BAB00000            	je L_error_fvar_undefined
 17720 0000CADD 803804                  	cmp byte [rax], T_closure
 17721 0000CAE0 0F8535B10000            	jne L_error_non_closure
 17722 0000CAE6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17723 0000CAE9 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17724 0000CAEC FF7500                  	push qword[rbp]
 17725 0000CAEF 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17726 0000CAF2 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17727 0000CAF6 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17728 0000CAFA 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17729 0000CAFE 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17730 0000CB01 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17731 0000CB04 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17732 0000CB09 4983C103                	add r9, 3 	 ;for getting to the params
 17733 0000CB0D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17734 0000CB11 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17735                                  .L_tc_recycle_frame_loop_00ab:
 17736 0000CB14 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17737 0000CB17 7410                    	je .L_tc_recycle_frame_done_00ab
 17738 0000CB19 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17739 0000CB1C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17740 0000CB1F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17741 0000CB23 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17742 0000CB27 EBEB                    	jmp .L_tc_recycle_frame_loop_00ab
 17743                                  .L_tc_recycle_frame_done_00ab:
 17744 0000CB29 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17745 0000CB2A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17746 0000CB2E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17747 0000CB31 C9                      	leave
 17748 0000CB32 C21800                  	ret AND_KILL_FRAME(1)
 17749 0000CB35 E94A010000              	jmp .L_lambda_opt_end_000f	; new closure is in rax
 17750                                  .L_lambda_opt_arity_check_more_000f:
 17751 0000CB3A 488B442410              	mov rax, qword[rsp + 2 * 8]
 17752 0000CB3F 4889C7                  	mov rdi, rax
 17753 0000CB42 49B9-                   	mov r9, sob_nil
 17753 0000CB44 [0100000000000000] 
 17754 0000CB4C 4989F8                  	mov r8, rdi
 17755                                  .L_lambda_opt_stack_shrink_loop_000f:
 17756 0000CB4F 4983F800                	cmp r8, 0
 17757 0000CB53 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_000f
 17758 0000CB55 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)] 	;rbx is the top of the stack
 17759 0000CB5A BF11000000              	mov rdi, 1+8+8	;for pair
 17760 0000CB5F E860B10000              	call malloc	 ;to create the pair in the stack
 17761 0000CB64 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
 17762 0000CB67 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
 17763 0000CB6B 4C894809                 	mov qword[rax+1+8],r9
 17764 0000CB6F 4989C1                  	mov r9 , rax	 ; for the recursion 
 17765 0000CB72 49FFC8                  	dec r8
 17766 0000CB75 EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_000f
 17767                                  .L_lambda_opt_stack_shrink_loop_exit_000f:
 17768 0000CB77 488B442410              	mov rax, qword[rsp + 2 * 8]
 17769 0000CB7C BF01000000              	mov rdi, 1
 17770 0000CB81 4829F8                  	sub rax, rdi
 17771 0000CB84 4889C7                  	mov rdi, rax
 17772 0000CB87 486BC008                	imul rax,8
 17773 0000CB8B 4801C4                  	add rsp, rax
 17774 0000CB8E 4889E0                  	mov rax, rsp
 17775 0000CB91 4989F8                  	mov r8, rdi
 17776 0000CB94 4D6BC008                	imul r8, 8
 17777 0000CB98 4C29C0                  	sub rax, r8
 17778 0000CB9B 4989C2                  	mov r10, rax	; holds the original ret in the stack
 17779 0000CB9E 4983C218                	add r10, 8*3
 17780 0000CBA2 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
 17781 0000CBA6 4C8B00                  	mov r8, qword[rax] 	;arg count = r8
 17782 0000CBA9 4D6BC008                	imul r8,8
 17783 0000CBAD 4C01C0                  	add rax, r8
 17784 0000CBB0 4C8908                  	mov qword[rax] ,r9
 17785 0000CBB3 4983EA18                 	sub r10, 8*3
 17786 0000CBB7 48C744241001000000      	mov qword [rsp+2*8], 1
 17787 0000CBC0 498B4208                	mov rax, qword[r10 + 1 * 8]
 17788 0000CBC4 4889442408              	mov qword[rsp + 1*8] ,rax
 17789 0000CBC9 498B02                  	mov rax, qword[r10]
 17790 0000CBCC 48890424                	mov qword[rsp], rax
 17791 0000CBD0 C8000000                	enter 0, 0
 17792                                  	; preparing a tail-call
 17793                                  	; preparing a non-tail-call
 17794 0000CBD4 488B4520                	mov rax, PARAM(0)	; param s
 17795 0000CBD8 50                      	push rax
 17796 0000CBD9 488B0425[16120000]      	mov rax, qword [free_var_65]	; free var char->integer
 17797 0000CBE1 803805                  	cmp byte [rax], T_undefined
 17798 0000CBE4 0F84ADAF0000            	je L_error_fvar_undefined
 17799 0000CBEA 50                      	push rax
 17800 0000CBEB 6A02                    	push 2	; arg count
 17801 0000CBED 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
 17802 0000CBF5 803805                  	cmp byte [rax], T_undefined
 17803 0000CBF8 0F8499AF0000            	je L_error_fvar_undefined
 17804 0000CBFE 803804                  	cmp byte [rax], T_closure
 17805 0000CC01 0F8514B00000            	jne L_error_non_closure
 17806 0000CC07 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17807 0000CC0A FF5009                  	call SOB_CLOSURE_CODE(rax)
 17808 0000CC0D 50                      	push rax
 17809 0000CC0E 488B4510                	mov rax, ENV
 17810 0000CC12 488B00                  	mov rax, qword [rax + 8 * 0]
 17811 0000CC15 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator
 17812 0000CC18 50                      	push rax
 17813 0000CC19 6A02                    	push 2	; arg count
 17814 0000CC1B 488B0425[F60F0000]      	mov rax, qword [free_var_33]	; free var apply
 17815 0000CC23 803805                  	cmp byte [rax], T_undefined
 17816 0000CC26 0F846BAF0000            	je L_error_fvar_undefined
 17817 0000CC2C 803804                  	cmp byte [rax], T_closure
 17818 0000CC2F 0F85E6AF0000            	jne L_error_non_closure
 17819 0000CC35 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17820 0000CC38 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17821 0000CC3B FF7500                  	push qword[rbp]
 17822 0000CC3E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17823 0000CC41 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17824 0000CC45 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17825 0000CC49 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17826 0000CC4D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17827 0000CC50 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17828 0000CC53 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17829 0000CC58 4983C103                	add r9, 3 	 ;for getting to the params
 17830 0000CC5C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17831 0000CC60 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17832                                  .L_tc_recycle_frame_loop_00aa:
 17833 0000CC63 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17834 0000CC66 7410                    	je .L_tc_recycle_frame_done_00aa
 17835 0000CC68 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17836 0000CC6B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17837 0000CC6E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17838 0000CC72 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17839 0000CC76 EBEB                    	jmp .L_tc_recycle_frame_loop_00aa
 17840                                  .L_tc_recycle_frame_done_00aa:
 17841 0000CC78 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17842 0000CC79 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17843 0000CC7D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17844 0000CC80 C9                      	leave
 17845 0000CC81 C21800                  	ret AND_KILL_FRAME(1)
 17846                                  .L_lambda_opt_end_000f:	; new closure is in rax
 17847 0000CC84 C9                      	leave
 17848 0000CC85 C21800                  	ret AND_KILL_FRAME(1)
 17849                                  .L_lambda_simple_end_005e:	; new closure is in rax
 17850 0000CC88 50                      	push rax
 17851 0000CC89 6A01                    	push 1	; arg count
 17852 0000CC8B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17853 0000CC90 E82FB00000              	call malloc
 17854 0000CC95 50                      	push rax
 17855 0000CC96 BF00000000              	mov rdi, 8 * 0	; new rib
 17856 0000CC9B E824B00000              	call malloc
 17857 0000CCA0 50                      	push rax
 17858 0000CCA1 BF08000000              	mov rdi, 8 * 1	; extended env
 17859 0000CCA6 E819B00000              	call malloc
 17860 0000CCAB 488B7D10                	mov rdi, ENV
 17861 0000CCAF BE00000000              	mov rsi, 0
 17862 0000CCB4 BA01000000              	mov rdx, 1
 17863                                  .L_lambda_simple_env_loop_005f:	; ext_env[i + 1] <-- env[i]
 17864 0000CCB9 4883FE00                	cmp rsi, 0
 17865 0000CCBD 7410                    	je .L_lambda_simple_env_end_005f
 17866 0000CCBF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17867 0000CCC3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17868 0000CCC7 48FFC6                  	inc rsi
 17869 0000CCCA 48FFC2                  	inc rdx
 17870 0000CCCD EBEA                    	jmp .L_lambda_simple_env_loop_005f
 17871                                  .L_lambda_simple_env_end_005f:
 17872 0000CCCF 5B                      	pop rbx
 17873 0000CCD0 BE00000000              	mov rsi, 0
 17874                                  .L_lambda_simple_params_loop_005f:	; copy params
 17875 0000CCD5 4883FE00                	cmp rsi, 0
 17876 0000CCD9 740E                    	je .L_lambda_simple_params_end_005f
 17877 0000CCDB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17878 0000CCE0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17879 0000CCE4 48FFC6                  	inc rsi
 17880 0000CCE7 EBEC                    	jmp .L_lambda_simple_params_loop_005f
 17881                                  .L_lambda_simple_params_end_005f:
 17882 0000CCE9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17883 0000CCEC 4889C3                  	mov rbx, rax
 17884 0000CCEF 58                      	pop rax
 17885 0000CCF0 C60004                  	mov byte [rax], T_closure
 17886 0000CCF3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17887 0000CCF7 48C74009[04CD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005f
 17888 0000CCFF E938010000              	jmp .L_lambda_simple_end_005f
 17889                                  .L_lambda_simple_code_005f:	; lambda-simple body
 17890 0000CD04 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17891 0000CD0A 740B                    	je .L_lambda_simple_arity_check_ok_005f
 17892 0000CD0C FF742410                	push qword [rsp + 8 * 2]
 17893 0000CD10 6A01                    	push 1
 17894 0000CD12 E966AF0000              	jmp L_error_incorrect_arity_simple
 17895                                  .L_lambda_simple_arity_check_ok_005f:
 17896 0000CD17 C8000000                	enter 0, 0
 17897                                  	; preparing a non-tail-call
 17898 0000CD1B 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 17899 0000CD23 803805                  	cmp byte [rax], T_undefined
 17900 0000CD26 0F846BAE0000            	je L_error_fvar_undefined
 17901 0000CD2C 50                      	push rax
 17902 0000CD2D 6A01                    	push 1	; arg count
 17903 0000CD2F 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 17904 0000CD33 803804                  	cmp byte [rax], T_closure
 17905 0000CD36 0F85DFAE0000            	jne L_error_non_closure
 17906 0000CD3C FF7001                  	push SOB_CLOSURE_ENV(rax)
 17907 0000CD3F FF5009                  	call SOB_CLOSURE_CODE(rax)
 17908 0000CD42 48890425[AF120000]      	mov qword [free_var_74], rax
 17909 0000CD4A 48B8-                   	mov rax, sob_void
 17909 0000CD4C [0000000000000000] 
 17910                                  
 17911                                  	; preparing a non-tail-call
 17912 0000CD54 488B0425[1A0E0000]      	mov rax, qword [free_var_5]	; free var <=
 17913 0000CD5C 803805                  	cmp byte [rax], T_undefined
 17914 0000CD5F 0F8432AE0000            	je L_error_fvar_undefined
 17915 0000CD65 50                      	push rax
 17916 0000CD66 6A01                    	push 1	; arg count
 17917 0000CD68 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 17918 0000CD6C 803804                  	cmp byte [rax], T_closure
 17919 0000CD6F 0F85A6AE0000            	jne L_error_non_closure
 17920 0000CD75 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17921 0000CD78 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17922 0000CD7B 48890425[9E120000]      	mov qword [free_var_73], rax
 17923 0000CD83 48B8-                   	mov rax, sob_void
 17923 0000CD85 [0000000000000000] 
 17924                                  
 17925                                  	; preparing a non-tail-call
 17926 0000CD8D 488B0425[2B0E0000]      	mov rax, qword [free_var_6]	; free var =
 17927 0000CD95 803805                  	cmp byte [rax], T_undefined
 17928 0000CD98 0F84F9AD0000            	je L_error_fvar_undefined
 17929 0000CD9E 50                      	push rax
 17930 0000CD9F 6A01                    	push 1	; arg count
 17931 0000CDA1 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 17932 0000CDA5 803804                  	cmp byte [rax], T_closure
 17933 0000CDA8 0F856DAE0000            	jne L_error_non_closure
 17934 0000CDAE FF7001                  	push SOB_CLOSURE_ENV(rax)
 17935 0000CDB1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17936 0000CDB4 48890425[C0120000]      	mov qword [free_var_75], rax
 17937 0000CDBC 48B8-                   	mov rax, sob_void
 17937 0000CDBE [0000000000000000] 
 17938                                  
 17939                                  	; preparing a non-tail-call
 17940 0000CDC6 488B0425[3C0E0000]      	mov rax, qword [free_var_7]	; free var >
 17941 0000CDCE 803805                  	cmp byte [rax], T_undefined
 17942 0000CDD1 0F84C0AD0000            	je L_error_fvar_undefined
 17943 0000CDD7 50                      	push rax
 17944 0000CDD8 6A01                    	push 1	; arg count
 17945 0000CDDA 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 17946 0000CDDE 803804                  	cmp byte [rax], T_closure
 17947 0000CDE1 0F8534AE0000            	jne L_error_non_closure
 17948 0000CDE7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17949 0000CDEA FF5009                  	call SOB_CLOSURE_CODE(rax)
 17950 0000CDED 48890425[E2120000]      	mov qword [free_var_77], rax
 17951 0000CDF5 48B8-                   	mov rax, sob_void
 17951 0000CDF7 [0000000000000000] 
 17952                                  
 17953                                  	; preparing a non-tail-call
 17954 0000CDFF 488B0425[4D0E0000]      	mov rax, qword [free_var_8]	; free var >=
 17955 0000CE07 803805                  	cmp byte [rax], T_undefined
 17956 0000CE0A 0F8487AD0000            	je L_error_fvar_undefined
 17957 0000CE10 50                      	push rax
 17958 0000CE11 6A01                    	push 1	; arg count
 17959 0000CE13 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 17960 0000CE17 803804                  	cmp byte [rax], T_closure
 17961 0000CE1A 0F85FBAD0000            	jne L_error_non_closure
 17962 0000CE20 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17963 0000CE23 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17964 0000CE26 48890425[D1120000]      	mov qword [free_var_76], rax
 17965 0000CE2E 48B8-                   	mov rax, sob_void
 17965 0000CE30 [0000000000000000] 
 17966 0000CE38 C9                      	leave
 17967 0000CE39 C21800                  	ret AND_KILL_FRAME(1)
 17968                                  .L_lambda_simple_end_005f:	; new closure is in rax
 17969 0000CE3C 803804                  	cmp byte [rax], T_closure
 17970 0000CE3F 0F85D6AD0000            	jne L_error_non_closure
 17971 0000CE45 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17972 0000CE48 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17973                                  
 17974 0000CE4B 4889C7                  	mov rdi, rax
 17975 0000CE4E E8C6B00000              	call print_sexpr_if_not_void
 17976 0000CE53 48B8-                   	mov rax, L_constants + 0
 17976 0000CE55 [0000000000000000] 
 17977 0000CE5D 48890425[7C120000]      	mov qword [free_var_71], rax
 17978 0000CE65 48B8-                   	mov rax, sob_void
 17978 0000CE67 [0000000000000000] 
 17979                                  
 17980 0000CE6F 4889C7                  	mov rdi, rax
 17981 0000CE72 E8A2B00000              	call print_sexpr_if_not_void
 17982 0000CE77 48B8-                   	mov rax, L_constants + 0
 17982 0000CE79 [0000000000000000] 
 17983 0000CE81 48890425[8D120000]      	mov qword [free_var_72], rax
 17984 0000CE89 48B8-                   	mov rax, sob_void
 17984 0000CE8B [0000000000000000] 
 17985                                  
 17986 0000CE93 4889C7                  	mov rdi, rax
 17987 0000CE96 E87EB00000              	call print_sexpr_if_not_void
 17988                                  	; preparing a non-tail-call
 17989                                  	; preparing a non-tail-call
 17990                                  	; preparing a non-tail-call
 17991 0000CE9B 48B8-                   	mov rax, L_constants + 2569
 17991 0000CE9D [090A000000000000] 
 17992 0000CEA5 50                      	push rax
 17993 0000CEA6 6A01                    	push 1	; arg count
 17994 0000CEA8 488B0425[16120000]      	mov rax, qword [free_var_65]	; free var char->integer
 17995 0000CEB0 803805                  	cmp byte [rax], T_undefined
 17996 0000CEB3 0F84DEAC0000            	je L_error_fvar_undefined
 17997 0000CEB9 803804                  	cmp byte [rax], T_closure
 17998 0000CEBC 0F8559AD0000            	jne L_error_non_closure
 17999 0000CEC2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18000 0000CEC5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18001 0000CEC8 50                      	push rax
 18002                                  	; preparing a non-tail-call
 18003 0000CEC9 48B8-                   	mov rax, L_constants + 2573
 18003 0000CECB [0D0A000000000000] 
 18004 0000CED3 50                      	push rax
 18005 0000CED4 6A01                    	push 1	; arg count
 18006 0000CED6 488B0425[16120000]      	mov rax, qword [free_var_65]	; free var char->integer
 18007 0000CEDE 803805                  	cmp byte [rax], T_undefined
 18008 0000CEE1 0F84B0AC0000            	je L_error_fvar_undefined
 18009 0000CEE7 803804                  	cmp byte [rax], T_closure
 18010 0000CEEA 0F852BAD0000            	jne L_error_non_closure
 18011 0000CEF0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18012 0000CEF3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18013 0000CEF6 50                      	push rax
 18014 0000CEF7 6A02                    	push 2	; arg count
 18015 0000CEF9 488B0425[E70D0000]      	mov rax, qword [free_var_2]	; free var -
 18016 0000CF01 803805                  	cmp byte [rax], T_undefined
 18017 0000CF04 0F848DAC0000            	je L_error_fvar_undefined
 18018 0000CF0A 803804                  	cmp byte [rax], T_closure
 18019 0000CF0D 0F8508AD0000            	jne L_error_non_closure
 18020 0000CF13 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18021 0000CF16 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18022 0000CF19 50                      	push rax
 18023 0000CF1A 6A01                    	push 1	; arg count
 18024 0000CF1C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18025 0000CF21 E89EAD0000              	call malloc
 18026 0000CF26 50                      	push rax
 18027 0000CF27 BF00000000              	mov rdi, 8 * 0	; new rib
 18028 0000CF2C E893AD0000              	call malloc
 18029 0000CF31 50                      	push rax
 18030 0000CF32 BF08000000              	mov rdi, 8 * 1	; extended env
 18031 0000CF37 E888AD0000              	call malloc
 18032 0000CF3C 488B7D10                	mov rdi, ENV
 18033 0000CF40 BE00000000              	mov rsi, 0
 18034 0000CF45 BA01000000              	mov rdx, 1
 18035                                  .L_lambda_simple_env_loop_0060:	; ext_env[i + 1] <-- env[i]
 18036 0000CF4A 4883FE00                	cmp rsi, 0
 18037 0000CF4E 7410                    	je .L_lambda_simple_env_end_0060
 18038 0000CF50 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18039 0000CF54 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18040 0000CF58 48FFC6                  	inc rsi
 18041 0000CF5B 48FFC2                  	inc rdx
 18042 0000CF5E EBEA                    	jmp .L_lambda_simple_env_loop_0060
 18043                                  .L_lambda_simple_env_end_0060:
 18044 0000CF60 5B                      	pop rbx
 18045 0000CF61 BE00000000              	mov rsi, 0
 18046                                  .L_lambda_simple_params_loop_0060:	; copy params
 18047 0000CF66 4883FE00                	cmp rsi, 0
 18048 0000CF6A 740E                    	je .L_lambda_simple_params_end_0060
 18049 0000CF6C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18050 0000CF71 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18051 0000CF75 48FFC6                  	inc rsi
 18052 0000CF78 EBEC                    	jmp .L_lambda_simple_params_loop_0060
 18053                                  .L_lambda_simple_params_end_0060:
 18054 0000CF7A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18055 0000CF7D 4889C3                  	mov rbx, rax
 18056 0000CF80 58                      	pop rax
 18057 0000CF81 C60004                  	mov byte [rax], T_closure
 18058 0000CF84 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18059 0000CF88 48C74009[95CF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0060
 18060 0000CF90 E97F030000              	jmp .L_lambda_simple_end_0060
 18061                                  .L_lambda_simple_code_0060:	; lambda-simple body
 18062 0000CF95 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18063 0000CF9B 740B                    	je .L_lambda_simple_arity_check_ok_0060
 18064 0000CF9D FF742410                	push qword [rsp + 8 * 2]
 18065 0000CFA1 6A01                    	push 1
 18066 0000CFA3 E9D5AC0000              	jmp L_error_incorrect_arity_simple
 18067                                  .L_lambda_simple_arity_check_ok_0060:
 18068 0000CFA8 C8000000                	enter 0, 0
 18069 0000CFAC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18070 0000CFB1 E80EAD0000              	call malloc
 18071 0000CFB6 50                      	push rax
 18072 0000CFB7 BF08000000              	mov rdi, 8 * 1	; new rib
 18073 0000CFBC E803AD0000              	call malloc
 18074 0000CFC1 50                      	push rax
 18075 0000CFC2 BF10000000              	mov rdi, 8 * 2	; extended env
 18076 0000CFC7 E8F8AC0000              	call malloc
 18077 0000CFCC 488B7D10                	mov rdi, ENV
 18078 0000CFD0 BE00000000              	mov rsi, 0
 18079 0000CFD5 BA01000000              	mov rdx, 1
 18080                                  .L_lambda_simple_env_loop_0061:	; ext_env[i + 1] <-- env[i]
 18081 0000CFDA 4883FE01                	cmp rsi, 1
 18082 0000CFDE 7410                    	je .L_lambda_simple_env_end_0061
 18083 0000CFE0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18084 0000CFE4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18085 0000CFE8 48FFC6                  	inc rsi
 18086 0000CFEB 48FFC2                  	inc rdx
 18087 0000CFEE EBEA                    	jmp .L_lambda_simple_env_loop_0061
 18088                                  .L_lambda_simple_env_end_0061:
 18089 0000CFF0 5B                      	pop rbx
 18090 0000CFF1 BE00000000              	mov rsi, 0
 18091                                  .L_lambda_simple_params_loop_0061:	; copy params
 18092 0000CFF6 4883FE01                	cmp rsi, 1
 18093 0000CFFA 740E                    	je .L_lambda_simple_params_end_0061
 18094 0000CFFC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18095 0000D001 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18096 0000D005 48FFC6                  	inc rsi
 18097 0000D008 EBEC                    	jmp .L_lambda_simple_params_loop_0061
 18098                                  .L_lambda_simple_params_end_0061:
 18099 0000D00A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18100 0000D00D 4889C3                  	mov rbx, rax
 18101 0000D010 58                      	pop rax
 18102 0000D011 C60004                  	mov byte [rax], T_closure
 18103 0000D014 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18104 0000D018 48C74009[25D00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0061
 18105 0000D020 E927010000              	jmp .L_lambda_simple_end_0061
 18106                                  .L_lambda_simple_code_0061:	; lambda-simple body
 18107 0000D025 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18108 0000D02B 740B                    	je .L_lambda_simple_arity_check_ok_0061
 18109 0000D02D FF742410                	push qword [rsp + 8 * 2]
 18110 0000D031 6A01                    	push 1
 18111 0000D033 E945AC0000              	jmp L_error_incorrect_arity_simple
 18112                                  .L_lambda_simple_arity_check_ok_0061:
 18113 0000D038 C8000000                	enter 0, 0
 18114                                  	; preparing a non-tail-call
 18115 0000D03C 48B8-                   	mov rax, L_constants + 2571
 18115 0000D03E [0B0A000000000000] 
 18116 0000D046 50                      	push rax
 18117 0000D047 488B4520                	mov rax, PARAM(0)	; param ch
 18118 0000D04B 50                      	push rax
 18119 0000D04C 48B8-                   	mov rax, L_constants + 2569
 18119 0000D04E [090A000000000000] 
 18120 0000D056 50                      	push rax
 18121 0000D057 6A03                    	push 3	; arg count
 18122 0000D059 488B0425[9E120000]      	mov rax, qword [free_var_73]	; free var char<=?
 18123 0000D061 803805                  	cmp byte [rax], T_undefined
 18124 0000D064 0F842DAB0000            	je L_error_fvar_undefined
 18125 0000D06A 803804                  	cmp byte [rax], T_closure
 18126 0000D06D 0F85A8AB0000            	jne L_error_non_closure
 18127 0000D073 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18128 0000D076 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18129 0000D079 483D[02000000]          	cmp rax, sob_boolean_false
 18130 0000D07F 0F84BF000000            	je .L_if_else_0059
 18131                                  	; preparing a tail-call
 18132                                  	; preparing a non-tail-call
 18133 0000D085 488B4510                	mov rax, ENV
 18134 0000D089 488B00                  	mov rax, qword [rax + 8 * 0]
 18135 0000D08C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var delta
 18136 0000D08F 50                      	push rax
 18137                                  	; preparing a non-tail-call
 18138 0000D090 488B4520                	mov rax, PARAM(0)	; param ch
 18139 0000D094 50                      	push rax
 18140 0000D095 6A01                    	push 1	; arg count
 18141 0000D097 488B0425[16120000]      	mov rax, qword [free_var_65]	; free var char->integer
 18142 0000D09F 803805                  	cmp byte [rax], T_undefined
 18143 0000D0A2 0F84EFAA0000            	je L_error_fvar_undefined
 18144 0000D0A8 803804                  	cmp byte [rax], T_closure
 18145 0000D0AB 0F856AAB0000            	jne L_error_non_closure
 18146 0000D0B1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18147 0000D0B4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18148 0000D0B7 50                      	push rax
 18149 0000D0B8 6A02                    	push 2	; arg count
 18150 0000D0BA 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 18151 0000D0C2 803805                  	cmp byte [rax], T_undefined
 18152 0000D0C5 0F84CCAA0000            	je L_error_fvar_undefined
 18153 0000D0CB 803804                  	cmp byte [rax], T_closure
 18154 0000D0CE 0F8547AB0000            	jne L_error_non_closure
 18155 0000D0D4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18156 0000D0D7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18157 0000D0DA 50                      	push rax
 18158 0000D0DB 6A01                    	push 1	; arg count
 18159 0000D0DD 488B0425[AE130000]      	mov rax, qword [free_var_89]	; free var integer->char
 18160 0000D0E5 803805                  	cmp byte [rax], T_undefined
 18161 0000D0E8 0F84A9AA0000            	je L_error_fvar_undefined
 18162 0000D0EE 803804                  	cmp byte [rax], T_closure
 18163 0000D0F1 0F8524AB0000            	jne L_error_non_closure
 18164 0000D0F7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18165 0000D0FA FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 18166 0000D0FD FF7500                  	push qword[rbp]
 18167 0000D100 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 18168 0000D103 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 18169 0000D107 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 18170 0000D10B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 18171 0000D10F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 18172 0000D112 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 18173 0000D115 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 18174 0000D11A 4983C103                	add r9, 3 	 ;for getting to the params
 18175 0000D11E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 18176 0000D122 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 18177                                  .L_tc_recycle_frame_loop_00ac:
 18178 0000D125 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 18179 0000D128 7410                    	je .L_tc_recycle_frame_done_00ac
 18180 0000D12A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 18181 0000D12D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 18182 0000D130 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 18183 0000D134 4983E808                	sub r8, 8	 ;move the top of the stack one down
 18184 0000D138 EBEB                    	jmp .L_tc_recycle_frame_loop_00ac
 18185                                  .L_tc_recycle_frame_done_00ac:
 18186 0000D13A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 18187 0000D13B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 18188 0000D13F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18189 0000D142 EB04                    	jmp .L_if_end_0059
 18190                                  .L_if_else_0059:
 18191 0000D144 488B4520                	mov rax, PARAM(0)	; param ch
 18192                                  .L_if_end_0059:
 18193 0000D148 C9                      	leave
 18194 0000D149 C21800                  	ret AND_KILL_FRAME(1)
 18195                                  .L_lambda_simple_end_0061:	; new closure is in rax
 18196 0000D14C 48890425[7C120000]      	mov qword [free_var_71], rax
 18197 0000D154 48B8-                   	mov rax, sob_void
 18197 0000D156 [0000000000000000] 
 18198                                  
 18199 0000D15E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18200 0000D163 E85CAB0000              	call malloc
 18201 0000D168 50                      	push rax
 18202 0000D169 BF08000000              	mov rdi, 8 * 1	; new rib
 18203 0000D16E E851AB0000              	call malloc
 18204 0000D173 50                      	push rax
 18205 0000D174 BF10000000              	mov rdi, 8 * 2	; extended env
 18206 0000D179 E846AB0000              	call malloc
 18207 0000D17E 488B7D10                	mov rdi, ENV
 18208 0000D182 BE00000000              	mov rsi, 0
 18209 0000D187 BA01000000              	mov rdx, 1
 18210                                  .L_lambda_simple_env_loop_0062:	; ext_env[i + 1] <-- env[i]
 18211 0000D18C 4883FE01                	cmp rsi, 1
 18212 0000D190 7410                    	je .L_lambda_simple_env_end_0062
 18213 0000D192 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18214 0000D196 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18215 0000D19A 48FFC6                  	inc rsi
 18216 0000D19D 48FFC2                  	inc rdx
 18217 0000D1A0 EBEA                    	jmp .L_lambda_simple_env_loop_0062
 18218                                  .L_lambda_simple_env_end_0062:
 18219 0000D1A2 5B                      	pop rbx
 18220 0000D1A3 BE00000000              	mov rsi, 0
 18221                                  .L_lambda_simple_params_loop_0062:	; copy params
 18222 0000D1A8 4883FE01                	cmp rsi, 1
 18223 0000D1AC 740E                    	je .L_lambda_simple_params_end_0062
 18224 0000D1AE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18225 0000D1B3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18226 0000D1B7 48FFC6                  	inc rsi
 18227 0000D1BA EBEC                    	jmp .L_lambda_simple_params_loop_0062
 18228                                  .L_lambda_simple_params_end_0062:
 18229 0000D1BC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18230 0000D1BF 4889C3                  	mov rbx, rax
 18231 0000D1C2 58                      	pop rax
 18232 0000D1C3 C60004                  	mov byte [rax], T_closure
 18233 0000D1C6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18234 0000D1CA 48C74009[D7D10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0062
 18235 0000D1D2 E927010000              	jmp .L_lambda_simple_end_0062
 18236                                  .L_lambda_simple_code_0062:	; lambda-simple body
 18237 0000D1D7 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18238 0000D1DD 740B                    	je .L_lambda_simple_arity_check_ok_0062
 18239 0000D1DF FF742410                	push qword [rsp + 8 * 2]
 18240 0000D1E3 6A01                    	push 1
 18241 0000D1E5 E993AA0000              	jmp L_error_incorrect_arity_simple
 18242                                  .L_lambda_simple_arity_check_ok_0062:
 18243 0000D1EA C8000000                	enter 0, 0
 18244                                  	; preparing a non-tail-call
 18245 0000D1EE 48B8-                   	mov rax, L_constants + 2575
 18245 0000D1F0 [0F0A000000000000] 
 18246 0000D1F8 50                      	push rax
 18247 0000D1F9 488B4520                	mov rax, PARAM(0)	; param ch
 18248 0000D1FD 50                      	push rax
 18249 0000D1FE 48B8-                   	mov rax, L_constants + 2573
 18249 0000D200 [0D0A000000000000] 
 18250 0000D208 50                      	push rax
 18251 0000D209 6A03                    	push 3	; arg count
 18252 0000D20B 488B0425[9E120000]      	mov rax, qword [free_var_73]	; free var char<=?
 18253 0000D213 803805                  	cmp byte [rax], T_undefined
 18254 0000D216 0F847BA90000            	je L_error_fvar_undefined
 18255 0000D21C 803804                  	cmp byte [rax], T_closure
 18256 0000D21F 0F85F6A90000            	jne L_error_non_closure
 18257 0000D225 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18258 0000D228 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18259 0000D22B 483D[02000000]          	cmp rax, sob_boolean_false
 18260 0000D231 0F84BF000000            	je .L_if_else_005a
 18261                                  	; preparing a tail-call
 18262                                  	; preparing a non-tail-call
 18263 0000D237 488B4510                	mov rax, ENV
 18264 0000D23B 488B00                  	mov rax, qword [rax + 8 * 0]
 18265 0000D23E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var delta
 18266 0000D241 50                      	push rax
 18267                                  	; preparing a non-tail-call
 18268 0000D242 488B4520                	mov rax, PARAM(0)	; param ch
 18269 0000D246 50                      	push rax
 18270 0000D247 6A01                    	push 1	; arg count
 18271 0000D249 488B0425[16120000]      	mov rax, qword [free_var_65]	; free var char->integer
 18272 0000D251 803805                  	cmp byte [rax], T_undefined
 18273 0000D254 0F843DA90000            	je L_error_fvar_undefined
 18274 0000D25A 803804                  	cmp byte [rax], T_closure
 18275 0000D25D 0F85B8A90000            	jne L_error_non_closure
 18276 0000D263 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18277 0000D266 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18278 0000D269 50                      	push rax
 18279 0000D26A 6A02                    	push 2	; arg count
 18280 0000D26C 488B0425[E70D0000]      	mov rax, qword [free_var_2]	; free var -
 18281 0000D274 803805                  	cmp byte [rax], T_undefined
 18282 0000D277 0F841AA90000            	je L_error_fvar_undefined
 18283 0000D27D 803804                  	cmp byte [rax], T_closure
 18284 0000D280 0F8595A90000            	jne L_error_non_closure
 18285 0000D286 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18286 0000D289 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18287 0000D28C 50                      	push rax
 18288 0000D28D 6A01                    	push 1	; arg count
 18289 0000D28F 488B0425[AE130000]      	mov rax, qword [free_var_89]	; free var integer->char
 18290 0000D297 803805                  	cmp byte [rax], T_undefined
 18291 0000D29A 0F84F7A80000            	je L_error_fvar_undefined
 18292 0000D2A0 803804                  	cmp byte [rax], T_closure
 18293 0000D2A3 0F8572A90000            	jne L_error_non_closure
 18294 0000D2A9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18295 0000D2AC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 18296 0000D2AF FF7500                  	push qword[rbp]
 18297 0000D2B2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 18298 0000D2B5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 18299 0000D2B9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 18300 0000D2BD 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 18301 0000D2C1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 18302 0000D2C4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 18303 0000D2C7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 18304 0000D2CC 4983C103                	add r9, 3 	 ;for getting to the params
 18305 0000D2D0 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 18306 0000D2D4 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 18307                                  .L_tc_recycle_frame_loop_00ad:
 18308 0000D2D7 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 18309 0000D2DA 7410                    	je .L_tc_recycle_frame_done_00ad
 18310 0000D2DC 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 18311 0000D2DF 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 18312 0000D2E2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 18313 0000D2E6 4983E808                	sub r8, 8	 ;move the top of the stack one down
 18314 0000D2EA EBEB                    	jmp .L_tc_recycle_frame_loop_00ad
 18315                                  .L_tc_recycle_frame_done_00ad:
 18316 0000D2EC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 18317 0000D2ED 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 18318 0000D2F1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18319 0000D2F4 EB04                    	jmp .L_if_end_005a
 18320                                  .L_if_else_005a:
 18321 0000D2F6 488B4520                	mov rax, PARAM(0)	; param ch
 18322                                  .L_if_end_005a:
 18323 0000D2FA C9                      	leave
 18324 0000D2FB C21800                  	ret AND_KILL_FRAME(1)
 18325                                  .L_lambda_simple_end_0062:	; new closure is in rax
 18326 0000D2FE 48890425[8D120000]      	mov qword [free_var_72], rax
 18327 0000D306 48B8-                   	mov rax, sob_void
 18327 0000D308 [0000000000000000] 
 18328 0000D310 C9                      	leave
 18329 0000D311 C21800                  	ret AND_KILL_FRAME(1)
 18330                                  .L_lambda_simple_end_0060:	; new closure is in rax
 18331 0000D314 803804                  	cmp byte [rax], T_closure
 18332 0000D317 0F85FEA80000            	jne L_error_non_closure
 18333 0000D31D FF7001                  	push SOB_CLOSURE_ENV(rax)
 18334 0000D320 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18335                                  
 18336 0000D323 4889C7                  	mov rdi, rax
 18337 0000D326 E8EEAB0000              	call print_sexpr_if_not_void
 18338 0000D32B 48B8-                   	mov rax, L_constants + 0
 18338 0000D32D [0000000000000000] 
 18339 0000D335 48890425[38120000]      	mov qword [free_var_67], rax
 18340 0000D33D 48B8-                   	mov rax, sob_void
 18340 0000D33F [0000000000000000] 
 18341                                  
 18342 0000D347 4889C7                  	mov rdi, rax
 18343 0000D34A E8CAAB0000              	call print_sexpr_if_not_void
 18344 0000D34F 48B8-                   	mov rax, L_constants + 0
 18344 0000D351 [0000000000000000] 
 18345 0000D359 48890425[27120000]      	mov qword [free_var_66], rax
 18346 0000D361 48B8-                   	mov rax, sob_void
 18346 0000D363 [0000000000000000] 
 18347                                  
 18348 0000D36B 4889C7                  	mov rdi, rax
 18349 0000D36E E8A6AB0000              	call print_sexpr_if_not_void
 18350 0000D373 48B8-                   	mov rax, L_constants + 0
 18350 0000D375 [0000000000000000] 
 18351 0000D37D 48890425[49120000]      	mov qword [free_var_68], rax
 18352 0000D385 48B8-                   	mov rax, sob_void
 18352 0000D387 [0000000000000000] 
 18353                                  
 18354 0000D38F 4889C7                  	mov rdi, rax
 18355 0000D392 E882AB0000              	call print_sexpr_if_not_void
 18356 0000D397 48B8-                   	mov rax, L_constants + 0
 18356 0000D399 [0000000000000000] 
 18357 0000D3A1 48890425[6B120000]      	mov qword [free_var_70], rax
 18358 0000D3A9 48B8-                   	mov rax, sob_void
 18358 0000D3AB [0000000000000000] 
 18359                                  
 18360 0000D3B3 4889C7                  	mov rdi, rax
 18361 0000D3B6 E85EAB0000              	call print_sexpr_if_not_void
 18362 0000D3BB 48B8-                   	mov rax, L_constants + 0
 18362 0000D3BD [0000000000000000] 
 18363 0000D3C5 48890425[5A120000]      	mov qword [free_var_69], rax
 18364 0000D3CD 48B8-                   	mov rax, sob_void
 18364 0000D3CF [0000000000000000] 
 18365                                  
 18366 0000D3D7 4889C7                  	mov rdi, rax
 18367 0000D3DA E83AAB0000              	call print_sexpr_if_not_void
 18368                                  	; preparing a non-tail-call
 18369 0000D3DF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18370 0000D3E4 E8DBA80000              	call malloc
 18371 0000D3E9 50                      	push rax
 18372 0000D3EA BF00000000              	mov rdi, 8 * 0	; new rib
 18373 0000D3EF E8D0A80000              	call malloc
 18374 0000D3F4 50                      	push rax
 18375 0000D3F5 BF08000000              	mov rdi, 8 * 1	; extended env
 18376 0000D3FA E8C5A80000              	call malloc
 18377 0000D3FF 488B7D10                	mov rdi, ENV
 18378 0000D403 BE00000000              	mov rsi, 0
 18379 0000D408 BA01000000              	mov rdx, 1
 18380                                  .L_lambda_simple_env_loop_0063:	; ext_env[i + 1] <-- env[i]
 18381 0000D40D 4883FE00                	cmp rsi, 0
 18382 0000D411 7410                    	je .L_lambda_simple_env_end_0063
 18383 0000D413 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18384 0000D417 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18385 0000D41B 48FFC6                  	inc rsi
 18386 0000D41E 48FFC2                  	inc rdx
 18387 0000D421 EBEA                    	jmp .L_lambda_simple_env_loop_0063
 18388                                  .L_lambda_simple_env_end_0063:
 18389 0000D423 5B                      	pop rbx
 18390 0000D424 BE00000000              	mov rsi, 0
 18391                                  .L_lambda_simple_params_loop_0063:	; copy params
 18392 0000D429 4883FE00                	cmp rsi, 0
 18393 0000D42D 740E                    	je .L_lambda_simple_params_end_0063
 18394 0000D42F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18395 0000D434 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18396 0000D438 48FFC6                  	inc rsi
 18397 0000D43B EBEC                    	jmp .L_lambda_simple_params_loop_0063
 18398                                  .L_lambda_simple_params_end_0063:
 18399 0000D43D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18400 0000D440 4889C3                  	mov rbx, rax
 18401 0000D443 58                      	pop rax
 18402 0000D444 C60004                  	mov byte [rax], T_closure
 18403 0000D447 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18404 0000D44B 48C74009[58D40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0063
 18405 0000D453 E904050000              	jmp .L_lambda_simple_end_0063
 18406                                  .L_lambda_simple_code_0063:	; lambda-simple body
 18407 0000D458 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18408 0000D45E 740B                    	je .L_lambda_simple_arity_check_ok_0063
 18409 0000D460 FF742410                	push qword [rsp + 8 * 2]
 18410 0000D464 6A01                    	push 1
 18411 0000D466 E912A80000              	jmp L_error_incorrect_arity_simple
 18412                                  .L_lambda_simple_arity_check_ok_0063:
 18413 0000D46B C8000000                	enter 0, 0
 18414 0000D46F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18415 0000D474 E84BA80000              	call malloc
 18416 0000D479 50                      	push rax
 18417 0000D47A BF08000000              	mov rdi, 8 * 1	; new rib
 18418 0000D47F E840A80000              	call malloc
 18419 0000D484 50                      	push rax
 18420 0000D485 BF10000000              	mov rdi, 8 * 2	; extended env
 18421 0000D48A E835A80000              	call malloc
 18422 0000D48F 488B7D10                	mov rdi, ENV
 18423 0000D493 BE00000000              	mov rsi, 0
 18424 0000D498 BA01000000              	mov rdx, 1
 18425                                  .L_lambda_opt_env_loop_0010:	; ext_env[i + 1] <-- env[i]
 18426 0000D49D 4883FE01                	cmp rsi, 1
 18427 0000D4A1 7410                    	je .L_lambda_opt_env_end_0010
 18428 0000D4A3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18429 0000D4A7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18430 0000D4AB 48FFC6                  	inc rsi
 18431 0000D4AE 48FFC2                  	inc rdx
 18432 0000D4B1 EBEA                    	jmp .L_lambda_opt_env_loop_0010
 18433                                  .L_lambda_opt_env_end_0010:
 18434 0000D4B3 5B                      	pop rbx
 18435 0000D4B4 BE00000000              	mov rsi, 0
 18436                                  .L_lambda_opt_params_loop_0010:	; copy params
 18437 0000D4B9 4883FE01                	cmp rsi, 1
 18438 0000D4BD 740E                    	je .L_lambda_opt_params_end_0010
 18439 0000D4BF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18440 0000D4C4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18441 0000D4C8 48FFC6                  	inc rsi
 18442 0000D4CB EBEC                    	jmp .L_lambda_opt_params_loop_0010
 18443                                  .L_lambda_opt_params_end_0010:
 18444 0000D4CD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18445 0000D4D0 4889C3                  	mov rbx, rax
 18446 0000D4D3 58                      	pop rax
 18447 0000D4D4 C60004                  	mov byte [rax], T_closure
 18448 0000D4D7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18449 0000D4DB 48C74009[E8D40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0010
 18450 0000D4E3 E970040000              	jmp .L_lambda_opt_end_0010
 18451                                  .L_lambda_opt_code_0010:	; lambda-opt body
 18452 0000D4E8 48837C241000            	cmp qword [rsp + 8 * 2], 0
 18453 0000D4EE 7411                    	je .L_lambda_opt_arity_check_exact_0010
 18454 0000D4F0 0F8F06020000            	jg .L_lambda_opt_arity_check_more_0010
 18455 0000D4F6 FF742410                	push qword [rsp + 8 * 2]
 18456 0000D4FA 6A00                    	push 0
 18457 0000D4FC E990A70000              	jmp L_error_incorrect_arity_opt
 18458                                  .L_lambda_opt_arity_check_exact_0010:
 18459 0000D501 4883EC08                	sub rsp, 8
 18460 0000D505 488B442408              	mov rax, qword[rsp + 8 *1]
 18461 0000D50A 48890424                	mov qword[rsp], rax  
 18462 0000D50E 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 18463 0000D513 4889442408              	mov qword[rsp + 8 * 1], rax
 18464 0000D518 B801000000              	mov rax, 1
 18465 0000D51D 4889442410              	mov qword[rsp + 8 *2], rax
 18466 0000D522 48B8-                   	mov rax, sob_nil
 18466 0000D524 [0100000000000000] 
 18467 0000D52C 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 18468 0000D531 C8000000                	enter 0, 0
 18469                                  	; preparing a tail-call
 18470                                  	; preparing a non-tail-call
 18471 0000D535 488B4520                	mov rax, PARAM(0)	; param s
 18472 0000D539 50                      	push rax
 18473 0000D53A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18474 0000D53F E880A70000              	call malloc
 18475 0000D544 50                      	push rax
 18476 0000D545 BF08000000              	mov rdi, 8 * 1	; new rib
 18477 0000D54A E875A70000              	call malloc
 18478 0000D54F 50                      	push rax
 18479 0000D550 BF18000000              	mov rdi, 8 * 3	; extended env
 18480 0000D555 E86AA70000              	call malloc
 18481 0000D55A 488B7D10                	mov rdi, ENV
 18482 0000D55E BE00000000              	mov rsi, 0
 18483 0000D563 BA01000000              	mov rdx, 1
 18484                                  .L_lambda_simple_env_loop_0065:	; ext_env[i + 1] <-- env[i]
 18485 0000D568 4883FE02                	cmp rsi, 2
 18486 0000D56C 7410                    	je .L_lambda_simple_env_end_0065
 18487 0000D56E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18488 0000D572 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18489 0000D576 48FFC6                  	inc rsi
 18490 0000D579 48FFC2                  	inc rdx
 18491 0000D57C EBEA                    	jmp .L_lambda_simple_env_loop_0065
 18492                                  .L_lambda_simple_env_end_0065:
 18493 0000D57E 5B                      	pop rbx
 18494 0000D57F BE00000000              	mov rsi, 0
 18495                                  .L_lambda_simple_params_loop_0065:	; copy params
 18496 0000D584 4883FE01                	cmp rsi, 1
 18497 0000D588 740E                    	je .L_lambda_simple_params_end_0065
 18498 0000D58A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18499 0000D58F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18500 0000D593 48FFC6                  	inc rsi
 18501 0000D596 EBEC                    	jmp .L_lambda_simple_params_loop_0065
 18502                                  .L_lambda_simple_params_end_0065:
 18503 0000D598 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18504 0000D59B 4889C3                  	mov rbx, rax
 18505 0000D59E 58                      	pop rax
 18506 0000D59F C60004                  	mov byte [rax], T_closure
 18507 0000D5A2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18508 0000D5A6 48C74009[B3D50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0065
 18509 0000D5AE E9AA000000              	jmp .L_lambda_simple_end_0065
 18510                                  .L_lambda_simple_code_0065:	; lambda-simple body
 18511 0000D5B3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18512 0000D5B9 740B                    	je .L_lambda_simple_arity_check_ok_0065
 18513 0000D5BB FF742410                	push qword [rsp + 8 * 2]
 18514 0000D5BF 6A01                    	push 1
 18515 0000D5C1 E9B7A60000              	jmp L_error_incorrect_arity_simple
 18516                                  .L_lambda_simple_arity_check_ok_0065:
 18517 0000D5C6 C8000000                	enter 0, 0
 18518                                  	; preparing a tail-call
 18519                                  	; preparing a non-tail-call
 18520 0000D5CA 488B4520                	mov rax, PARAM(0)	; param ch
 18521 0000D5CE 50                      	push rax
 18522 0000D5CF 6A01                    	push 1	; arg count
 18523 0000D5D1 488B0425[7C120000]      	mov rax, qword [free_var_71]	; free var char-downcase
 18524 0000D5D9 803805                  	cmp byte [rax], T_undefined
 18525 0000D5DC 0F84B5A50000            	je L_error_fvar_undefined
 18526 0000D5E2 803804                  	cmp byte [rax], T_closure
 18527 0000D5E5 0F8530A60000            	jne L_error_non_closure
 18528 0000D5EB FF7001                  	push SOB_CLOSURE_ENV(rax)
 18529 0000D5EE FF5009                  	call SOB_CLOSURE_CODE(rax)
 18530 0000D5F1 50                      	push rax
 18531 0000D5F2 6A01                    	push 1	; arg count
 18532 0000D5F4 488B0425[16120000]      	mov rax, qword [free_var_65]	; free var char->integer
 18533 0000D5FC 803805                  	cmp byte [rax], T_undefined
 18534 0000D5FF 0F8492A50000            	je L_error_fvar_undefined
 18535 0000D605 803804                  	cmp byte [rax], T_closure
 18536 0000D608 0F850DA60000            	jne L_error_non_closure
 18537 0000D60E FF7001                  	push SOB_CLOSURE_ENV(rax)
 18538 0000D611 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 18539 0000D614 FF7500                  	push qword[rbp]
 18540 0000D617 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 18541 0000D61A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 18542 0000D61E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 18543 0000D622 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 18544 0000D626 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 18545 0000D629 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 18546 0000D62C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 18547 0000D631 4983C103                	add r9, 3 	 ;for getting to the params
 18548 0000D635 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 18549 0000D639 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 18550                                  .L_tc_recycle_frame_loop_00b0:
 18551 0000D63C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 18552 0000D63F 7410                    	je .L_tc_recycle_frame_done_00b0
 18553 0000D641 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 18554 0000D644 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 18555 0000D647 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 18556 0000D64B 4983E808                	sub r8, 8	 ;move the top of the stack one down
 18557 0000D64F EBEB                    	jmp .L_tc_recycle_frame_loop_00b0
 18558                                  .L_tc_recycle_frame_done_00b0:
 18559 0000D651 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 18560 0000D652 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 18561 0000D656 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18562 0000D659 C9                      	leave
 18563 0000D65A C21800                  	ret AND_KILL_FRAME(1)
 18564                                  .L_lambda_simple_end_0065:	; new closure is in rax
 18565 0000D65D 50                      	push rax
 18566 0000D65E 6A02                    	push 2	; arg count
 18567 0000D660 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
 18568 0000D668 803805                  	cmp byte [rax], T_undefined
 18569 0000D66B 0F8426A50000            	je L_error_fvar_undefined
 18570 0000D671 803804                  	cmp byte [rax], T_closure
 18571 0000D674 0F85A1A50000            	jne L_error_non_closure
 18572 0000D67A FF7001                  	push SOB_CLOSURE_ENV(rax)
 18573 0000D67D FF5009                  	call SOB_CLOSURE_CODE(rax)
 18574 0000D680 50                      	push rax
 18575 0000D681 488B4510                	mov rax, ENV
 18576 0000D685 488B00                  	mov rax, qword [rax + 8 * 0]
 18577 0000D688 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator
 18578 0000D68B 50                      	push rax
 18579 0000D68C 6A02                    	push 2	; arg count
 18580 0000D68E 488B0425[F60F0000]      	mov rax, qword [free_var_33]	; free var apply
 18581 0000D696 803805                  	cmp byte [rax], T_undefined
 18582 0000D699 0F84F8A40000            	je L_error_fvar_undefined
 18583 0000D69F 803804                  	cmp byte [rax], T_closure
 18584 0000D6A2 0F8573A50000            	jne L_error_non_closure
 18585 0000D6A8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18586 0000D6AB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 18587 0000D6AE FF7500                  	push qword[rbp]
 18588 0000D6B1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 18589 0000D6B4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 18590 0000D6B8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 18591 0000D6BC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 18592 0000D6C0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 18593 0000D6C3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 18594 0000D6C6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 18595 0000D6CB 4983C103                	add r9, 3 	 ;for getting to the params
 18596 0000D6CF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 18597 0000D6D3 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 18598                                  .L_tc_recycle_frame_loop_00b1:
 18599 0000D6D6 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 18600 0000D6D9 7410                    	je .L_tc_recycle_frame_done_00b1
 18601 0000D6DB 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 18602 0000D6DE 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 18603 0000D6E1 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 18604 0000D6E5 4983E808                	sub r8, 8	 ;move the top of the stack one down
 18605 0000D6E9 EBEB                    	jmp .L_tc_recycle_frame_loop_00b1
 18606                                  .L_tc_recycle_frame_done_00b1:
 18607 0000D6EB 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 18608 0000D6EC 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 18609 0000D6F0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18610 0000D6F3 C9                      	leave
 18611 0000D6F4 C21800                  	ret AND_KILL_FRAME(1)
 18612 0000D6F7 E95C020000              	jmp .L_lambda_opt_end_0010	; new closure is in rax
 18613                                  .L_lambda_opt_arity_check_more_0010:
 18614 0000D6FC 488B442410              	mov rax, qword[rsp + 2 * 8]
 18615 0000D701 4889C7                  	mov rdi, rax
 18616 0000D704 49B9-                   	mov r9, sob_nil
 18616 0000D706 [0100000000000000] 
 18617 0000D70E 4989F8                  	mov r8, rdi
 18618                                  .L_lambda_opt_stack_shrink_loop_0010:
 18619 0000D711 4983F800                	cmp r8, 0
 18620 0000D715 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_0010
 18621 0000D717 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)] 	;rbx is the top of the stack
 18622 0000D71C BF11000000              	mov rdi, 1+8+8	;for pair
 18623 0000D721 E89EA50000              	call malloc	 ;to create the pair in the stack
 18624 0000D726 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
 18625 0000D729 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
 18626 0000D72D 4C894809                 	mov qword[rax+1+8],r9
 18627 0000D731 4989C1                  	mov r9 , rax	 ; for the recursion 
 18628 0000D734 49FFC8                  	dec r8
 18629 0000D737 EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_0010
 18630                                  .L_lambda_opt_stack_shrink_loop_exit_0010:
 18631 0000D739 488B442410              	mov rax, qword[rsp + 2 * 8]
 18632 0000D73E BF01000000              	mov rdi, 1
 18633 0000D743 4829F8                  	sub rax, rdi
 18634 0000D746 4889C7                  	mov rdi, rax
 18635 0000D749 486BC008                	imul rax,8
 18636 0000D74D 4801C4                  	add rsp, rax
 18637 0000D750 4889E0                  	mov rax, rsp
 18638 0000D753 4989F8                  	mov r8, rdi
 18639 0000D756 4D6BC008                	imul r8, 8
 18640 0000D75A 4C29C0                  	sub rax, r8
 18641 0000D75D 4989C2                  	mov r10, rax	; holds the original ret in the stack
 18642 0000D760 4983C218                	add r10, 8*3
 18643 0000D764 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
 18644 0000D768 4C8B00                  	mov r8, qword[rax] 	;arg count = r8
 18645 0000D76B 4D6BC008                	imul r8,8
 18646 0000D76F 4C01C0                  	add rax, r8
 18647 0000D772 4C8908                  	mov qword[rax] ,r9
 18648 0000D775 4983EA18                 	sub r10, 8*3
 18649 0000D779 48C744241001000000      	mov qword [rsp+2*8], 1
 18650 0000D782 498B4208                	mov rax, qword[r10 + 1 * 8]
 18651 0000D786 4889442408              	mov qword[rsp + 1*8] ,rax
 18652 0000D78B 498B02                  	mov rax, qword[r10]
 18653 0000D78E 48890424                	mov qword[rsp], rax
 18654 0000D792 C8000000                	enter 0, 0
 18655                                  	; preparing a tail-call
 18656                                  	; preparing a non-tail-call
 18657 0000D796 488B4520                	mov rax, PARAM(0)	; param s
 18658 0000D79A 50                      	push rax
 18659 0000D79B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18660 0000D7A0 E81FA50000              	call malloc
 18661 0000D7A5 50                      	push rax
 18662 0000D7A6 BF08000000              	mov rdi, 8 * 1	; new rib
 18663 0000D7AB E814A50000              	call malloc
 18664 0000D7B0 50                      	push rax
 18665 0000D7B1 BF18000000              	mov rdi, 8 * 3	; extended env
 18666 0000D7B6 E809A50000              	call malloc
 18667 0000D7BB 488B7D10                	mov rdi, ENV
 18668 0000D7BF BE00000000              	mov rsi, 0
 18669 0000D7C4 BA01000000              	mov rdx, 1
 18670                                  .L_lambda_simple_env_loop_0064:	; ext_env[i + 1] <-- env[i]
 18671 0000D7C9 4883FE02                	cmp rsi, 2
 18672 0000D7CD 7410                    	je .L_lambda_simple_env_end_0064
 18673 0000D7CF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18674 0000D7D3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18675 0000D7D7 48FFC6                  	inc rsi
 18676 0000D7DA 48FFC2                  	inc rdx
 18677 0000D7DD EBEA                    	jmp .L_lambda_simple_env_loop_0064
 18678                                  .L_lambda_simple_env_end_0064:
 18679 0000D7DF 5B                      	pop rbx
 18680 0000D7E0 BE00000000              	mov rsi, 0
 18681                                  .L_lambda_simple_params_loop_0064:	; copy params
 18682 0000D7E5 4883FE01                	cmp rsi, 1
 18683 0000D7E9 740E                    	je .L_lambda_simple_params_end_0064
 18684 0000D7EB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18685 0000D7F0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18686 0000D7F4 48FFC6                  	inc rsi
 18687 0000D7F7 EBEC                    	jmp .L_lambda_simple_params_loop_0064
 18688                                  .L_lambda_simple_params_end_0064:
 18689 0000D7F9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18690 0000D7FC 4889C3                  	mov rbx, rax
 18691 0000D7FF 58                      	pop rax
 18692 0000D800 C60004                  	mov byte [rax], T_closure
 18693 0000D803 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18694 0000D807 48C74009[14D80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0064
 18695 0000D80F E9AA000000              	jmp .L_lambda_simple_end_0064
 18696                                  .L_lambda_simple_code_0064:	; lambda-simple body
 18697 0000D814 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18698 0000D81A 740B                    	je .L_lambda_simple_arity_check_ok_0064
 18699 0000D81C FF742410                	push qword [rsp + 8 * 2]
 18700 0000D820 6A01                    	push 1
 18701 0000D822 E956A40000              	jmp L_error_incorrect_arity_simple
 18702                                  .L_lambda_simple_arity_check_ok_0064:
 18703 0000D827 C8000000                	enter 0, 0
 18704                                  	; preparing a tail-call
 18705                                  	; preparing a non-tail-call
 18706 0000D82B 488B4520                	mov rax, PARAM(0)	; param ch
 18707 0000D82F 50                      	push rax
 18708 0000D830 6A01                    	push 1	; arg count
 18709 0000D832 488B0425[7C120000]      	mov rax, qword [free_var_71]	; free var char-downcase
 18710 0000D83A 803805                  	cmp byte [rax], T_undefined
 18711 0000D83D 0F8454A30000            	je L_error_fvar_undefined
 18712 0000D843 803804                  	cmp byte [rax], T_closure
 18713 0000D846 0F85CFA30000            	jne L_error_non_closure
 18714 0000D84C FF7001                  	push SOB_CLOSURE_ENV(rax)
 18715 0000D84F FF5009                  	call SOB_CLOSURE_CODE(rax)
 18716 0000D852 50                      	push rax
 18717 0000D853 6A01                    	push 1	; arg count
 18718 0000D855 488B0425[16120000]      	mov rax, qword [free_var_65]	; free var char->integer
 18719 0000D85D 803805                  	cmp byte [rax], T_undefined
 18720 0000D860 0F8431A30000            	je L_error_fvar_undefined
 18721 0000D866 803804                  	cmp byte [rax], T_closure
 18722 0000D869 0F85ACA30000            	jne L_error_non_closure
 18723 0000D86F FF7001                  	push SOB_CLOSURE_ENV(rax)
 18724 0000D872 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 18725 0000D875 FF7500                  	push qword[rbp]
 18726 0000D878 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 18727 0000D87B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 18728 0000D87F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 18729 0000D883 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 18730 0000D887 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 18731 0000D88A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 18732 0000D88D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 18733 0000D892 4983C103                	add r9, 3 	 ;for getting to the params
 18734 0000D896 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 18735 0000D89A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 18736                                  .L_tc_recycle_frame_loop_00ae:
 18737 0000D89D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 18738 0000D8A0 7410                    	je .L_tc_recycle_frame_done_00ae
 18739 0000D8A2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 18740 0000D8A5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 18741 0000D8A8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 18742 0000D8AC 4983E808                	sub r8, 8	 ;move the top of the stack one down
 18743 0000D8B0 EBEB                    	jmp .L_tc_recycle_frame_loop_00ae
 18744                                  .L_tc_recycle_frame_done_00ae:
 18745 0000D8B2 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 18746 0000D8B3 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 18747 0000D8B7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18748 0000D8BA C9                      	leave
 18749 0000D8BB C21800                  	ret AND_KILL_FRAME(1)
 18750                                  .L_lambda_simple_end_0064:	; new closure is in rax
 18751 0000D8BE 50                      	push rax
 18752 0000D8BF 6A02                    	push 2	; arg count
 18753 0000D8C1 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
 18754 0000D8C9 803805                  	cmp byte [rax], T_undefined
 18755 0000D8CC 0F84C5A20000            	je L_error_fvar_undefined
 18756 0000D8D2 803804                  	cmp byte [rax], T_closure
 18757 0000D8D5 0F8540A30000            	jne L_error_non_closure
 18758 0000D8DB FF7001                  	push SOB_CLOSURE_ENV(rax)
 18759 0000D8DE FF5009                  	call SOB_CLOSURE_CODE(rax)
 18760 0000D8E1 50                      	push rax
 18761 0000D8E2 488B4510                	mov rax, ENV
 18762 0000D8E6 488B00                  	mov rax, qword [rax + 8 * 0]
 18763 0000D8E9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator
 18764 0000D8EC 50                      	push rax
 18765 0000D8ED 6A02                    	push 2	; arg count
 18766 0000D8EF 488B0425[F60F0000]      	mov rax, qword [free_var_33]	; free var apply
 18767 0000D8F7 803805                  	cmp byte [rax], T_undefined
 18768 0000D8FA 0F8497A20000            	je L_error_fvar_undefined
 18769 0000D900 803804                  	cmp byte [rax], T_closure
 18770 0000D903 0F8512A30000            	jne L_error_non_closure
 18771 0000D909 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18772 0000D90C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 18773 0000D90F FF7500                  	push qword[rbp]
 18774 0000D912 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 18775 0000D915 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 18776 0000D919 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 18777 0000D91D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 18778 0000D921 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 18779 0000D924 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 18780 0000D927 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 18781 0000D92C 4983C103                	add r9, 3 	 ;for getting to the params
 18782 0000D930 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 18783 0000D934 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 18784                                  .L_tc_recycle_frame_loop_00af:
 18785 0000D937 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 18786 0000D93A 7410                    	je .L_tc_recycle_frame_done_00af
 18787 0000D93C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 18788 0000D93F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 18789 0000D942 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 18790 0000D946 4983E808                	sub r8, 8	 ;move the top of the stack one down
 18791 0000D94A EBEB                    	jmp .L_tc_recycle_frame_loop_00af
 18792                                  .L_tc_recycle_frame_done_00af:
 18793 0000D94C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 18794 0000D94D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 18795 0000D951 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18796 0000D954 C9                      	leave
 18797 0000D955 C21800                  	ret AND_KILL_FRAME(1)
 18798                                  .L_lambda_opt_end_0010:	; new closure is in rax
 18799 0000D958 C9                      	leave
 18800 0000D959 C21800                  	ret AND_KILL_FRAME(1)
 18801                                  .L_lambda_simple_end_0063:	; new closure is in rax
 18802 0000D95C 50                      	push rax
 18803 0000D95D 6A01                    	push 1	; arg count
 18804 0000D95F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18805 0000D964 E85BA30000              	call malloc
 18806 0000D969 50                      	push rax
 18807 0000D96A BF00000000              	mov rdi, 8 * 0	; new rib
 18808 0000D96F E850A30000              	call malloc
 18809 0000D974 50                      	push rax
 18810 0000D975 BF08000000              	mov rdi, 8 * 1	; extended env
 18811 0000D97A E845A30000              	call malloc
 18812 0000D97F 488B7D10                	mov rdi, ENV
 18813 0000D983 BE00000000              	mov rsi, 0
 18814 0000D988 BA01000000              	mov rdx, 1
 18815                                  .L_lambda_simple_env_loop_0066:	; ext_env[i + 1] <-- env[i]
 18816 0000D98D 4883FE00                	cmp rsi, 0
 18817 0000D991 7410                    	je .L_lambda_simple_env_end_0066
 18818 0000D993 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18819 0000D997 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18820 0000D99B 48FFC6                  	inc rsi
 18821 0000D99E 48FFC2                  	inc rdx
 18822 0000D9A1 EBEA                    	jmp .L_lambda_simple_env_loop_0066
 18823                                  .L_lambda_simple_env_end_0066:
 18824 0000D9A3 5B                      	pop rbx
 18825 0000D9A4 BE00000000              	mov rsi, 0
 18826                                  .L_lambda_simple_params_loop_0066:	; copy params
 18827 0000D9A9 4883FE00                	cmp rsi, 0
 18828 0000D9AD 740E                    	je .L_lambda_simple_params_end_0066
 18829 0000D9AF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18830 0000D9B4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18831 0000D9B8 48FFC6                  	inc rsi
 18832 0000D9BB EBEC                    	jmp .L_lambda_simple_params_loop_0066
 18833                                  .L_lambda_simple_params_end_0066:
 18834 0000D9BD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18835 0000D9C0 4889C3                  	mov rbx, rax
 18836 0000D9C3 58                      	pop rax
 18837 0000D9C4 C60004                  	mov byte [rax], T_closure
 18838 0000D9C7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18839 0000D9CB 48C74009[D8D90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0066
 18840 0000D9D3 E938010000              	jmp .L_lambda_simple_end_0066
 18841                                  .L_lambda_simple_code_0066:	; lambda-simple body
 18842 0000D9D8 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18843 0000D9DE 740B                    	je .L_lambda_simple_arity_check_ok_0066
 18844 0000D9E0 FF742410                	push qword [rsp + 8 * 2]
 18845 0000D9E4 6A01                    	push 1
 18846 0000D9E6 E992A20000              	jmp L_error_incorrect_arity_simple
 18847                                  .L_lambda_simple_arity_check_ok_0066:
 18848 0000D9EB C8000000                	enter 0, 0
 18849                                  	; preparing a non-tail-call
 18850 0000D9EF 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 18851 0000D9F7 803805                  	cmp byte [rax], T_undefined
 18852 0000D9FA 0F8497A10000            	je L_error_fvar_undefined
 18853 0000DA00 50                      	push rax
 18854 0000DA01 6A01                    	push 1	; arg count
 18855 0000DA03 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 18856 0000DA07 803804                  	cmp byte [rax], T_closure
 18857 0000DA0A 0F850BA20000            	jne L_error_non_closure
 18858 0000DA10 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18859 0000DA13 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18860 0000DA16 48890425[38120000]      	mov qword [free_var_67], rax
 18861 0000DA1E 48B8-                   	mov rax, sob_void
 18861 0000DA20 [0000000000000000] 
 18862                                  
 18863                                  	; preparing a non-tail-call
 18864 0000DA28 488B0425[1A0E0000]      	mov rax, qword [free_var_5]	; free var <=
 18865 0000DA30 803805                  	cmp byte [rax], T_undefined
 18866 0000DA33 0F845EA10000            	je L_error_fvar_undefined
 18867 0000DA39 50                      	push rax
 18868 0000DA3A 6A01                    	push 1	; arg count
 18869 0000DA3C 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 18870 0000DA40 803804                  	cmp byte [rax], T_closure
 18871 0000DA43 0F85D2A10000            	jne L_error_non_closure
 18872 0000DA49 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18873 0000DA4C FF5009                  	call SOB_CLOSURE_CODE(rax)
 18874 0000DA4F 48890425[27120000]      	mov qword [free_var_66], rax
 18875 0000DA57 48B8-                   	mov rax, sob_void
 18875 0000DA59 [0000000000000000] 
 18876                                  
 18877                                  	; preparing a non-tail-call
 18878 0000DA61 488B0425[2B0E0000]      	mov rax, qword [free_var_6]	; free var =
 18879 0000DA69 803805                  	cmp byte [rax], T_undefined
 18880 0000DA6C 0F8425A10000            	je L_error_fvar_undefined
 18881 0000DA72 50                      	push rax
 18882 0000DA73 6A01                    	push 1	; arg count
 18883 0000DA75 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 18884 0000DA79 803804                  	cmp byte [rax], T_closure
 18885 0000DA7C 0F8599A10000            	jne L_error_non_closure
 18886 0000DA82 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18887 0000DA85 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18888 0000DA88 48890425[49120000]      	mov qword [free_var_68], rax
 18889 0000DA90 48B8-                   	mov rax, sob_void
 18889 0000DA92 [0000000000000000] 
 18890                                  
 18891                                  	; preparing a non-tail-call
 18892 0000DA9A 488B0425[3C0E0000]      	mov rax, qword [free_var_7]	; free var >
 18893 0000DAA2 803805                  	cmp byte [rax], T_undefined
 18894 0000DAA5 0F84ECA00000            	je L_error_fvar_undefined
 18895 0000DAAB 50                      	push rax
 18896 0000DAAC 6A01                    	push 1	; arg count
 18897 0000DAAE 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 18898 0000DAB2 803804                  	cmp byte [rax], T_closure
 18899 0000DAB5 0F8560A10000            	jne L_error_non_closure
 18900 0000DABB FF7001                  	push SOB_CLOSURE_ENV(rax)
 18901 0000DABE FF5009                  	call SOB_CLOSURE_CODE(rax)
 18902 0000DAC1 48890425[6B120000]      	mov qword [free_var_70], rax
 18903 0000DAC9 48B8-                   	mov rax, sob_void
 18903 0000DACB [0000000000000000] 
 18904                                  
 18905                                  	; preparing a non-tail-call
 18906 0000DAD3 488B0425[4D0E0000]      	mov rax, qword [free_var_8]	; free var >=
 18907 0000DADB 803805                  	cmp byte [rax], T_undefined
 18908 0000DADE 0F84B3A00000            	je L_error_fvar_undefined
 18909 0000DAE4 50                      	push rax
 18910 0000DAE5 6A01                    	push 1	; arg count
 18911 0000DAE7 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 18912 0000DAEB 803804                  	cmp byte [rax], T_closure
 18913 0000DAEE 0F8527A10000            	jne L_error_non_closure
 18914 0000DAF4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18915 0000DAF7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18916 0000DAFA 48890425[5A120000]      	mov qword [free_var_69], rax
 18917 0000DB02 48B8-                   	mov rax, sob_void
 18917 0000DB04 [0000000000000000] 
 18918 0000DB0C C9                      	leave
 18919 0000DB0D C21800                  	ret AND_KILL_FRAME(1)
 18920                                  .L_lambda_simple_end_0066:	; new closure is in rax
 18921 0000DB10 803804                  	cmp byte [rax], T_closure
 18922 0000DB13 0F8502A10000            	jne L_error_non_closure
 18923 0000DB19 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18924 0000DB1C FF5009                  	call SOB_CLOSURE_CODE(rax)
 18925                                  
 18926 0000DB1F 4889C7                  	mov rdi, rax
 18927 0000DB22 E8F2A30000              	call print_sexpr_if_not_void
 18928 0000DB27 48B8-                   	mov rax, L_constants + 0
 18928 0000DB29 [0000000000000000] 
 18929 0000DB31 48890425[23160000]      	mov qword [free_var_126], rax
 18930 0000DB39 48B8-                   	mov rax, sob_void
 18930 0000DB3B [0000000000000000] 
 18931                                  
 18932 0000DB43 4889C7                  	mov rdi, rax
 18933 0000DB46 E8CEA30000              	call print_sexpr_if_not_void
 18934 0000DB4B 48B8-                   	mov rax, L_constants + 0
 18934 0000DB4D [0000000000000000] 
 18935 0000DB55 48890425[89160000]      	mov qword [free_var_132], rax
 18936 0000DB5D 48B8-                   	mov rax, sob_void
 18936 0000DB5F [0000000000000000] 
 18937                                  
 18938 0000DB67 4889C7                  	mov rdi, rax
 18939 0000DB6A E8AAA30000              	call print_sexpr_if_not_void
 18940                                  	; preparing a non-tail-call
 18941 0000DB6F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18942 0000DB74 E84BA10000              	call malloc
 18943 0000DB79 50                      	push rax
 18944 0000DB7A BF00000000              	mov rdi, 8 * 0	; new rib
 18945 0000DB7F E840A10000              	call malloc
 18946 0000DB84 50                      	push rax
 18947 0000DB85 BF08000000              	mov rdi, 8 * 1	; extended env
 18948 0000DB8A E835A10000              	call malloc
 18949 0000DB8F 488B7D10                	mov rdi, ENV
 18950 0000DB93 BE00000000              	mov rsi, 0
 18951 0000DB98 BA01000000              	mov rdx, 1
 18952                                  .L_lambda_simple_env_loop_0067:	; ext_env[i + 1] <-- env[i]
 18953 0000DB9D 4883FE00                	cmp rsi, 0
 18954 0000DBA1 7410                    	je .L_lambda_simple_env_end_0067
 18955 0000DBA3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18956 0000DBA7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18957 0000DBAB 48FFC6                  	inc rsi
 18958 0000DBAE 48FFC2                  	inc rdx
 18959 0000DBB1 EBEA                    	jmp .L_lambda_simple_env_loop_0067
 18960                                  .L_lambda_simple_env_end_0067:
 18961 0000DBB3 5B                      	pop rbx
 18962 0000DBB4 BE00000000              	mov rsi, 0
 18963                                  .L_lambda_simple_params_loop_0067:	; copy params
 18964 0000DBB9 4883FE00                	cmp rsi, 0
 18965 0000DBBD 740E                    	je .L_lambda_simple_params_end_0067
 18966 0000DBBF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18967 0000DBC4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18968 0000DBC8 48FFC6                  	inc rsi
 18969 0000DBCB EBEC                    	jmp .L_lambda_simple_params_loop_0067
 18970                                  .L_lambda_simple_params_end_0067:
 18971 0000DBCD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18972 0000DBD0 4889C3                  	mov rbx, rax
 18973 0000DBD3 58                      	pop rax
 18974 0000DBD4 C60004                  	mov byte [rax], T_closure
 18975 0000DBD7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18976 0000DBDB 48C74009[E8DB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0067
 18977 0000DBE3 E96C010000              	jmp .L_lambda_simple_end_0067
 18978                                  .L_lambda_simple_code_0067:	; lambda-simple body
 18979 0000DBE8 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18980 0000DBEE 740B                    	je .L_lambda_simple_arity_check_ok_0067
 18981 0000DBF0 FF742410                	push qword [rsp + 8 * 2]
 18982 0000DBF4 6A01                    	push 1
 18983 0000DBF6 E982A00000              	jmp L_error_incorrect_arity_simple
 18984                                  .L_lambda_simple_arity_check_ok_0067:
 18985 0000DBFB C8000000                	enter 0, 0
 18986 0000DBFF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18987 0000DC04 E8BBA00000              	call malloc
 18988 0000DC09 50                      	push rax
 18989 0000DC0A BF08000000              	mov rdi, 8 * 1	; new rib
 18990 0000DC0F E8B0A00000              	call malloc
 18991 0000DC14 50                      	push rax
 18992 0000DC15 BF10000000              	mov rdi, 8 * 2	; extended env
 18993 0000DC1A E8A5A00000              	call malloc
 18994 0000DC1F 488B7D10                	mov rdi, ENV
 18995 0000DC23 BE00000000              	mov rsi, 0
 18996 0000DC28 BA01000000              	mov rdx, 1
 18997                                  .L_lambda_simple_env_loop_0068:	; ext_env[i + 1] <-- env[i]
 18998 0000DC2D 4883FE01                	cmp rsi, 1
 18999 0000DC31 7410                    	je .L_lambda_simple_env_end_0068
 19000 0000DC33 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19001 0000DC37 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19002 0000DC3B 48FFC6                  	inc rsi
 19003 0000DC3E 48FFC2                  	inc rdx
 19004 0000DC41 EBEA                    	jmp .L_lambda_simple_env_loop_0068
 19005                                  .L_lambda_simple_env_end_0068:
 19006 0000DC43 5B                      	pop rbx
 19007 0000DC44 BE00000000              	mov rsi, 0
 19008                                  .L_lambda_simple_params_loop_0068:	; copy params
 19009 0000DC49 4883FE01                	cmp rsi, 1
 19010 0000DC4D 740E                    	je .L_lambda_simple_params_end_0068
 19011 0000DC4F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19012 0000DC54 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19013 0000DC58 48FFC6                  	inc rsi
 19014 0000DC5B EBEC                    	jmp .L_lambda_simple_params_loop_0068
 19015                                  .L_lambda_simple_params_end_0068:
 19016 0000DC5D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19017 0000DC60 4889C3                  	mov rbx, rax
 19018 0000DC63 58                      	pop rax
 19019 0000DC64 C60004                  	mov byte [rax], T_closure
 19020 0000DC67 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19021 0000DC6B 48C74009[78DC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0068
 19022 0000DC73 E9D8000000              	jmp .L_lambda_simple_end_0068
 19023                                  .L_lambda_simple_code_0068:	; lambda-simple body
 19024 0000DC78 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19025 0000DC7E 740B                    	je .L_lambda_simple_arity_check_ok_0068
 19026 0000DC80 FF742410                	push qword [rsp + 8 * 2]
 19027 0000DC84 6A01                    	push 1
 19028 0000DC86 E9F29F0000              	jmp L_error_incorrect_arity_simple
 19029                                  .L_lambda_simple_arity_check_ok_0068:
 19030 0000DC8B C8000000                	enter 0, 0
 19031                                  	; preparing a tail-call
 19032                                  	; preparing a non-tail-call
 19033                                  	; preparing a non-tail-call
 19034 0000DC8F 488B4520                	mov rax, PARAM(0)	; param str
 19035 0000DC93 50                      	push rax
 19036 0000DC94 6A01                    	push 1	; arg count
 19037 0000DC96 488B0425[AC150000]      	mov rax, qword [free_var_119]	; free var string->list
 19038 0000DC9E 803805                  	cmp byte [rax], T_undefined
 19039 0000DCA1 0F84F09E0000            	je L_error_fvar_undefined
 19040 0000DCA7 803804                  	cmp byte [rax], T_closure
 19041 0000DCAA 0F856B9F0000            	jne L_error_non_closure
 19042 0000DCB0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19043 0000DCB3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19044 0000DCB6 50                      	push rax
 19045 0000DCB7 488B4510                	mov rax, ENV
 19046 0000DCBB 488B00                  	mov rax, qword [rax + 8 * 0]
 19047 0000DCBE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char-case-converter
 19048 0000DCC1 50                      	push rax
 19049 0000DCC2 6A02                    	push 2	; arg count
 19050 0000DCC4 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
 19051 0000DCCC 803805                  	cmp byte [rax], T_undefined
 19052 0000DCCF 0F84C29E0000            	je L_error_fvar_undefined
 19053 0000DCD5 803804                  	cmp byte [rax], T_closure
 19054 0000DCD8 0F853D9F0000            	jne L_error_non_closure
 19055 0000DCDE FF7001                  	push SOB_CLOSURE_ENV(rax)
 19056 0000DCE1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19057 0000DCE4 50                      	push rax
 19058 0000DCE5 6A01                    	push 1	; arg count
 19059 0000DCE7 488B0425[03140000]      	mov rax, qword [free_var_94]	; free var list->string
 19060 0000DCEF 803805                  	cmp byte [rax], T_undefined
 19061 0000DCF2 0F849F9E0000            	je L_error_fvar_undefined
 19062 0000DCF8 803804                  	cmp byte [rax], T_closure
 19063 0000DCFB 0F851A9F0000            	jne L_error_non_closure
 19064 0000DD01 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19065 0000DD04 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 19066 0000DD07 FF7500                  	push qword[rbp]
 19067 0000DD0A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 19068 0000DD0D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 19069 0000DD11 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 19070 0000DD15 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 19071 0000DD19 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 19072 0000DD1C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 19073 0000DD1F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 19074 0000DD24 4983C103                	add r9, 3 	 ;for getting to the params
 19075 0000DD28 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 19076 0000DD2C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 19077                                  .L_tc_recycle_frame_loop_00b2:
 19078 0000DD2F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 19079 0000DD32 7410                    	je .L_tc_recycle_frame_done_00b2
 19080 0000DD34 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 19081 0000DD37 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 19082 0000DD3A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 19083 0000DD3E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 19084 0000DD42 EBEB                    	jmp .L_tc_recycle_frame_loop_00b2
 19085                                  .L_tc_recycle_frame_done_00b2:
 19086 0000DD44 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 19087 0000DD45 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 19088 0000DD49 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19089 0000DD4C C9                      	leave
 19090 0000DD4D C21800                  	ret AND_KILL_FRAME(1)
 19091                                  .L_lambda_simple_end_0068:	; new closure is in rax
 19092 0000DD50 C9                      	leave
 19093 0000DD51 C21800                  	ret AND_KILL_FRAME(1)
 19094                                  .L_lambda_simple_end_0067:	; new closure is in rax
 19095 0000DD54 50                      	push rax
 19096 0000DD55 6A01                    	push 1	; arg count
 19097 0000DD57 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19098 0000DD5C E8639F0000              	call malloc
 19099 0000DD61 50                      	push rax
 19100 0000DD62 BF00000000              	mov rdi, 8 * 0	; new rib
 19101 0000DD67 E8589F0000              	call malloc
 19102 0000DD6C 50                      	push rax
 19103 0000DD6D BF08000000              	mov rdi, 8 * 1	; extended env
 19104 0000DD72 E84D9F0000              	call malloc
 19105 0000DD77 488B7D10                	mov rdi, ENV
 19106 0000DD7B BE00000000              	mov rsi, 0
 19107 0000DD80 BA01000000              	mov rdx, 1
 19108                                  .L_lambda_simple_env_loop_0069:	; ext_env[i + 1] <-- env[i]
 19109 0000DD85 4883FE00                	cmp rsi, 0
 19110 0000DD89 7410                    	je .L_lambda_simple_env_end_0069
 19111 0000DD8B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19112 0000DD8F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19113 0000DD93 48FFC6                  	inc rsi
 19114 0000DD96 48FFC2                  	inc rdx
 19115 0000DD99 EBEA                    	jmp .L_lambda_simple_env_loop_0069
 19116                                  .L_lambda_simple_env_end_0069:
 19117 0000DD9B 5B                      	pop rbx
 19118 0000DD9C BE00000000              	mov rsi, 0
 19119                                  .L_lambda_simple_params_loop_0069:	; copy params
 19120 0000DDA1 4883FE00                	cmp rsi, 0
 19121 0000DDA5 740E                    	je .L_lambda_simple_params_end_0069
 19122 0000DDA7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19123 0000DDAC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19124 0000DDB0 48FFC6                  	inc rsi
 19125 0000DDB3 EBEC                    	jmp .L_lambda_simple_params_loop_0069
 19126                                  .L_lambda_simple_params_end_0069:
 19127 0000DDB5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19128 0000DDB8 4889C3                  	mov rbx, rax
 19129 0000DDBB 58                      	pop rax
 19130 0000DDBC C60004                  	mov byte [rax], T_closure
 19131 0000DDBF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19132 0000DDC3 48C74009[D0DD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0069
 19133 0000DDCB E98D000000              	jmp .L_lambda_simple_end_0069
 19134                                  .L_lambda_simple_code_0069:	; lambda-simple body
 19135 0000DDD0 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19136 0000DDD6 740B                    	je .L_lambda_simple_arity_check_ok_0069
 19137 0000DDD8 FF742410                	push qword [rsp + 8 * 2]
 19138 0000DDDC 6A01                    	push 1
 19139 0000DDDE E99A9E0000              	jmp L_error_incorrect_arity_simple
 19140                                  .L_lambda_simple_arity_check_ok_0069:
 19141 0000DDE3 C8000000                	enter 0, 0
 19142                                  	; preparing a non-tail-call
 19143 0000DDE7 488B0425[7C120000]      	mov rax, qword [free_var_71]	; free var char-downcase
 19144 0000DDEF 803805                  	cmp byte [rax], T_undefined
 19145 0000DDF2 0F849F9D0000            	je L_error_fvar_undefined
 19146 0000DDF8 50                      	push rax
 19147 0000DDF9 6A01                    	push 1	; arg count
 19148 0000DDFB 488B4520                	mov rax, PARAM(0)	; param make-string-case-converter
 19149 0000DDFF 803804                  	cmp byte [rax], T_closure
 19150 0000DE02 0F85139E0000            	jne L_error_non_closure
 19151 0000DE08 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19152 0000DE0B FF5009                  	call SOB_CLOSURE_CODE(rax)
 19153 0000DE0E 48890425[23160000]      	mov qword [free_var_126], rax
 19154 0000DE16 48B8-                   	mov rax, sob_void
 19154 0000DE18 [0000000000000000] 
 19155                                  
 19156                                  	; preparing a non-tail-call
 19157 0000DE20 488B0425[8D120000]      	mov rax, qword [free_var_72]	; free var char-upcase
 19158 0000DE28 803805                  	cmp byte [rax], T_undefined
 19159 0000DE2B 0F84669D0000            	je L_error_fvar_undefined
 19160 0000DE31 50                      	push rax
 19161 0000DE32 6A01                    	push 1	; arg count
 19162 0000DE34 488B4520                	mov rax, PARAM(0)	; param make-string-case-converter
 19163 0000DE38 803804                  	cmp byte [rax], T_closure
 19164 0000DE3B 0F85DA9D0000            	jne L_error_non_closure
 19165 0000DE41 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19166 0000DE44 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19167 0000DE47 48890425[89160000]      	mov qword [free_var_132], rax
 19168 0000DE4F 48B8-                   	mov rax, sob_void
 19168 0000DE51 [0000000000000000] 
 19169 0000DE59 C9                      	leave
 19170 0000DE5A C21800                  	ret AND_KILL_FRAME(1)
 19171                                  .L_lambda_simple_end_0069:	; new closure is in rax
 19172 0000DE5D 803804                  	cmp byte [rax], T_closure
 19173 0000DE60 0F85B59D0000            	jne L_error_non_closure
 19174 0000DE66 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19175 0000DE69 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19176                                  
 19177 0000DE6C 4889C7                  	mov rdi, rax
 19178 0000DE6F E8A5A00000              	call print_sexpr_if_not_void
 19179 0000DE74 48B8-                   	mov rax, L_constants + 0
 19179 0000DE76 [0000000000000000] 
 19180 0000DE7E 48890425[AB160000]      	mov qword [free_var_134], rax
 19181 0000DE86 48B8-                   	mov rax, sob_void
 19181 0000DE88 [0000000000000000] 
 19182                                  
 19183 0000DE90 4889C7                  	mov rdi, rax
 19184 0000DE93 E881A00000              	call print_sexpr_if_not_void
 19185 0000DE98 48B8-                   	mov rax, L_constants + 0
 19185 0000DE9A [0000000000000000] 
 19186 0000DEA2 48890425[9A160000]      	mov qword [free_var_133], rax
 19187 0000DEAA 48B8-                   	mov rax, sob_void
 19187 0000DEAC [0000000000000000] 
 19188                                  
 19189 0000DEB4 4889C7                  	mov rdi, rax
 19190 0000DEB7 E85DA00000              	call print_sexpr_if_not_void
 19191 0000DEBC 48B8-                   	mov rax, L_constants + 0
 19191 0000DEBE [0000000000000000] 
 19192 0000DEC6 48890425[BC160000]      	mov qword [free_var_135], rax
 19193 0000DECE 48B8-                   	mov rax, sob_void
 19193 0000DED0 [0000000000000000] 
 19194                                  
 19195 0000DED8 4889C7                  	mov rdi, rax
 19196 0000DEDB E839A00000              	call print_sexpr_if_not_void
 19197 0000DEE0 48B8-                   	mov rax, L_constants + 0
 19197 0000DEE2 [0000000000000000] 
 19198 0000DEEA 48890425[CD160000]      	mov qword [free_var_136], rax
 19199 0000DEF2 48B8-                   	mov rax, sob_void
 19199 0000DEF4 [0000000000000000] 
 19200                                  
 19201 0000DEFC 4889C7                  	mov rdi, rax
 19202 0000DEFF E815A00000              	call print_sexpr_if_not_void
 19203 0000DF04 48B8-                   	mov rax, L_constants + 0
 19203 0000DF06 [0000000000000000] 
 19204 0000DF0E 48890425[DE160000]      	mov qword [free_var_137], rax
 19205 0000DF16 48B8-                   	mov rax, sob_void
 19205 0000DF18 [0000000000000000] 
 19206                                  
 19207 0000DF20 4889C7                  	mov rdi, rax
 19208 0000DF23 E8F19F0000              	call print_sexpr_if_not_void
 19209 0000DF28 48B8-                   	mov rax, L_constants + 0
 19209 0000DF2A [0000000000000000] 
 19210 0000DF32 48890425[DF150000]      	mov qword [free_var_122], rax
 19211 0000DF3A 48B8-                   	mov rax, sob_void
 19211 0000DF3C [0000000000000000] 
 19212                                  
 19213 0000DF44 4889C7                  	mov rdi, rax
 19214 0000DF47 E8CD9F0000              	call print_sexpr_if_not_void
 19215 0000DF4C 48B8-                   	mov rax, L_constants + 0
 19215 0000DF4E [0000000000000000] 
 19216 0000DF56 48890425[CE150000]      	mov qword [free_var_121], rax
 19217 0000DF5E 48B8-                   	mov rax, sob_void
 19217 0000DF60 [0000000000000000] 
 19218                                  
 19219 0000DF68 4889C7                  	mov rdi, rax
 19220 0000DF6B E8A99F0000              	call print_sexpr_if_not_void
 19221 0000DF70 48B8-                   	mov rax, L_constants + 0
 19221 0000DF72 [0000000000000000] 
 19222 0000DF7A 48890425[F0150000]      	mov qword [free_var_123], rax
 19223 0000DF82 48B8-                   	mov rax, sob_void
 19223 0000DF84 [0000000000000000] 
 19224                                  
 19225 0000DF8C 4889C7                  	mov rdi, rax
 19226 0000DF8F E8859F0000              	call print_sexpr_if_not_void
 19227 0000DF94 48B8-                   	mov rax, L_constants + 0
 19227 0000DF96 [0000000000000000] 
 19228 0000DF9E 48890425[01160000]      	mov qword [free_var_124], rax
 19229 0000DFA6 48B8-                   	mov rax, sob_void
 19229 0000DFA8 [0000000000000000] 
 19230                                  
 19231 0000DFB0 4889C7                  	mov rdi, rax
 19232 0000DFB3 E8619F0000              	call print_sexpr_if_not_void
 19233 0000DFB8 48B8-                   	mov rax, L_constants + 0
 19233 0000DFBA [0000000000000000] 
 19234 0000DFC2 48890425[12160000]      	mov qword [free_var_125], rax
 19235 0000DFCA 48B8-                   	mov rax, sob_void
 19235 0000DFCC [0000000000000000] 
 19236                                  
 19237 0000DFD4 4889C7                  	mov rdi, rax
 19238 0000DFD7 E83D9F0000              	call print_sexpr_if_not_void
 19239                                  	; preparing a non-tail-call
 19240 0000DFDC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19241 0000DFE1 E8DE9C0000              	call malloc
 19242 0000DFE6 50                      	push rax
 19243 0000DFE7 BF00000000              	mov rdi, 8 * 0	; new rib
 19244 0000DFEC E8D39C0000              	call malloc
 19245 0000DFF1 50                      	push rax
 19246 0000DFF2 BF08000000              	mov rdi, 8 * 1	; extended env
 19247 0000DFF7 E8C89C0000              	call malloc
 19248 0000DFFC 488B7D10                	mov rdi, ENV
 19249 0000E000 BE00000000              	mov rsi, 0
 19250 0000E005 BA01000000              	mov rdx, 1
 19251                                  .L_lambda_simple_env_loop_006a:	; ext_env[i + 1] <-- env[i]
 19252 0000E00A 4883FE00                	cmp rsi, 0
 19253 0000E00E 7410                    	je .L_lambda_simple_env_end_006a
 19254 0000E010 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19255 0000E014 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19256 0000E018 48FFC6                  	inc rsi
 19257 0000E01B 48FFC2                  	inc rdx
 19258 0000E01E EBEA                    	jmp .L_lambda_simple_env_loop_006a
 19259                                  .L_lambda_simple_env_end_006a:
 19260 0000E020 5B                      	pop rbx
 19261 0000E021 BE00000000              	mov rsi, 0
 19262                                  .L_lambda_simple_params_loop_006a:	; copy params
 19263 0000E026 4883FE00                	cmp rsi, 0
 19264 0000E02A 740E                    	je .L_lambda_simple_params_end_006a
 19265 0000E02C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19266 0000E031 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19267 0000E035 48FFC6                  	inc rsi
 19268 0000E038 EBEC                    	jmp .L_lambda_simple_params_loop_006a
 19269                                  .L_lambda_simple_params_end_006a:
 19270 0000E03A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19271 0000E03D 4889C3                  	mov rbx, rax
 19272 0000E040 58                      	pop rax
 19273 0000E041 C60004                  	mov byte [rax], T_closure
 19274 0000E044 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19275 0000E048 48C74009[55E00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_006a
 19276 0000E050 E9C00D0000              	jmp .L_lambda_simple_end_006a
 19277                                  .L_lambda_simple_code_006a:	; lambda-simple body
 19278 0000E055 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19279 0000E05B 740B                    	je .L_lambda_simple_arity_check_ok_006a
 19280 0000E05D FF742410                	push qword [rsp + 8 * 2]
 19281 0000E061 6A02                    	push 2
 19282 0000E063 E9159C0000              	jmp L_error_incorrect_arity_simple
 19283                                  .L_lambda_simple_arity_check_ok_006a:
 19284 0000E068 C8000000                	enter 0, 0
 19285                                  	; preparing a tail-call
 19286 0000E06C 48B8-                   	mov rax, L_constants + 1993
 19286 0000E06E [C907000000000000] 
 19287 0000E076 50                      	push rax
 19288 0000E077 6A01                    	push 1	; arg count
 19289 0000E079 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19290 0000E07E E8419C0000              	call malloc
 19291 0000E083 50                      	push rax
 19292 0000E084 BF10000000              	mov rdi, 8 * 2	; new rib
 19293 0000E089 E8369C0000              	call malloc
 19294 0000E08E 50                      	push rax
 19295 0000E08F BF10000000              	mov rdi, 8 * 2	; extended env
 19296 0000E094 E82B9C0000              	call malloc
 19297 0000E099 488B7D10                	mov rdi, ENV
 19298 0000E09D BE00000000              	mov rsi, 0
 19299 0000E0A2 BA01000000              	mov rdx, 1
 19300                                  .L_lambda_simple_env_loop_006b:	; ext_env[i + 1] <-- env[i]
 19301 0000E0A7 4883FE01                	cmp rsi, 1
 19302 0000E0AB 7410                    	je .L_lambda_simple_env_end_006b
 19303 0000E0AD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19304 0000E0B1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19305 0000E0B5 48FFC6                  	inc rsi
 19306 0000E0B8 48FFC2                  	inc rdx
 19307 0000E0BB EBEA                    	jmp .L_lambda_simple_env_loop_006b
 19308                                  .L_lambda_simple_env_end_006b:
 19309 0000E0BD 5B                      	pop rbx
 19310 0000E0BE BE00000000              	mov rsi, 0
 19311                                  .L_lambda_simple_params_loop_006b:	; copy params
 19312 0000E0C3 4883FE02                	cmp rsi, 2
 19313 0000E0C7 740E                    	je .L_lambda_simple_params_end_006b
 19314 0000E0C9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19315 0000E0CE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19316 0000E0D2 48FFC6                  	inc rsi
 19317 0000E0D5 EBEC                    	jmp .L_lambda_simple_params_loop_006b
 19318                                  .L_lambda_simple_params_end_006b:
 19319 0000E0D7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19320 0000E0DA 4889C3                  	mov rbx, rax
 19321 0000E0DD 58                      	pop rax
 19322 0000E0DE C60004                  	mov byte [rax], T_closure
 19323 0000E0E1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19324 0000E0E5 48C74009[F2E00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_006b
 19325 0000E0ED E9CB0C0000              	jmp .L_lambda_simple_end_006b
 19326                                  .L_lambda_simple_code_006b:	; lambda-simple body
 19327 0000E0F2 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19328 0000E0F8 740B                    	je .L_lambda_simple_arity_check_ok_006b
 19329 0000E0FA FF742410                	push qword [rsp + 8 * 2]
 19330 0000E0FE 6A01                    	push 1
 19331 0000E100 E9789B0000              	jmp L_error_incorrect_arity_simple
 19332                                  .L_lambda_simple_arity_check_ok_006b:
 19333 0000E105 C8000000                	enter 0, 0
 19334 0000E109 BF08000000              	mov rdi, 8*1
 19335 0000E10E E8B19B0000              	call malloc
 19336 0000E113 488B5D20                	mov rbx, PARAM(0)
 19337 0000E117 488918                  	mov qword[rax], rbx
 19338 0000E11A 48894520                	mov PARAM(0), rax
 19339 0000E11E 48B8-                   	mov rax, sob_void
 19339 0000E120 [0000000000000000] 
 19340                                  
 19341 0000E128 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19342 0000E12D E8929B0000              	call malloc
 19343 0000E132 50                      	push rax
 19344 0000E133 BF08000000              	mov rdi, 8 * 1	; new rib
 19345 0000E138 E8879B0000              	call malloc
 19346 0000E13D 50                      	push rax
 19347 0000E13E BF18000000              	mov rdi, 8 * 3	; extended env
 19348 0000E143 E87C9B0000              	call malloc
 19349 0000E148 488B7D10                	mov rdi, ENV
 19350 0000E14C BE00000000              	mov rsi, 0
 19351 0000E151 BA01000000              	mov rdx, 1
 19352                                  .L_lambda_simple_env_loop_006c:	; ext_env[i + 1] <-- env[i]
 19353 0000E156 4883FE02                	cmp rsi, 2
 19354 0000E15A 7410                    	je .L_lambda_simple_env_end_006c
 19355 0000E15C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19356 0000E160 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19357 0000E164 48FFC6                  	inc rsi
 19358 0000E167 48FFC2                  	inc rdx
 19359 0000E16A EBEA                    	jmp .L_lambda_simple_env_loop_006c
 19360                                  .L_lambda_simple_env_end_006c:
 19361 0000E16C 5B                      	pop rbx
 19362 0000E16D BE00000000              	mov rsi, 0
 19363                                  .L_lambda_simple_params_loop_006c:	; copy params
 19364 0000E172 4883FE01                	cmp rsi, 1
 19365 0000E176 740E                    	je .L_lambda_simple_params_end_006c
 19366 0000E178 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19367 0000E17D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19368 0000E181 48FFC6                  	inc rsi
 19369 0000E184 EBEC                    	jmp .L_lambda_simple_params_loop_006c
 19370                                  .L_lambda_simple_params_end_006c:
 19371 0000E186 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19372 0000E189 4889C3                  	mov rbx, rax
 19373 0000E18C 58                      	pop rax
 19374 0000E18D C60004                  	mov byte [rax], T_closure
 19375 0000E190 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19376 0000E194 48C74009[A1E10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_006c
 19377 0000E19C E992020000              	jmp .L_lambda_simple_end_006c
 19378                                  .L_lambda_simple_code_006c:	; lambda-simple body
 19379 0000E1A1 48837C241005            	cmp qword [rsp + 8 * 2], 5
 19380 0000E1A7 740B                    	je .L_lambda_simple_arity_check_ok_006c
 19381 0000E1A9 FF742410                	push qword [rsp + 8 * 2]
 19382 0000E1AD 6A05                    	push 5
 19383 0000E1AF E9C99A0000              	jmp L_error_incorrect_arity_simple
 19384                                  .L_lambda_simple_arity_check_ok_006c:
 19385 0000E1B4 C8000000                	enter 0, 0
 19386                                  	; preparing a non-tail-call
 19387 0000E1B8 488B4530                	mov rax, PARAM(2)	; param len1
 19388 0000E1BC 50                      	push rax
 19389 0000E1BD 488B4520                	mov rax, PARAM(0)	; param i
 19390 0000E1C1 50                      	push rax
 19391 0000E1C2 6A02                    	push 2	; arg count
 19392 0000E1C4 488B0425[2B0E0000]      	mov rax, qword [free_var_6]	; free var =
 19393 0000E1CC 803805                  	cmp byte [rax], T_undefined
 19394 0000E1CF 0F84C2990000            	je L_error_fvar_undefined
 19395 0000E1D5 803804                  	cmp byte [rax], T_closure
 19396 0000E1D8 0F853D9A0000            	jne L_error_non_closure
 19397 0000E1DE FF7001                  	push SOB_CLOSURE_ENV(rax)
 19398 0000E1E1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19399 0000E1E4 483D[02000000]          	cmp rax, sob_boolean_false
 19400 0000E1EA 742E                    	je .L_if_else_005b
 19401                                  	; preparing a non-tail-call
 19402 0000E1EC 488B4540                	mov rax, PARAM(4)	; param len2
 19403 0000E1F0 50                      	push rax
 19404 0000E1F1 488B4530                	mov rax, PARAM(2)	; param len1
 19405 0000E1F5 50                      	push rax
 19406 0000E1F6 6A02                    	push 2	; arg count
 19407 0000E1F8 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 19408 0000E200 803805                  	cmp byte [rax], T_undefined
 19409 0000E203 0F848E990000            	je L_error_fvar_undefined
 19410 0000E209 803804                  	cmp byte [rax], T_closure
 19411 0000E20C 0F85099A0000            	jne L_error_non_closure
 19412 0000E212 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19413 0000E215 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19414 0000E218 EB0A                    	jmp .L_if_end_005b
 19415                                  .L_if_else_005b:
 19416 0000E21A 48B8-                   	mov rax, L_constants + 2
 19416 0000E21C [0200000000000000] 
 19417                                  .L_if_end_005b:
 19418 0000E224 483D[02000000]          	cmp rax, sob_boolean_false
 19419 0000E22A 0F85FF010000            	jne .L_or_end_000a
 19420                                  	; preparing a non-tail-call
 19421 0000E230 488B4530                	mov rax, PARAM(2)	; param len1
 19422 0000E234 50                      	push rax
 19423 0000E235 488B4520                	mov rax, PARAM(0)	; param i
 19424 0000E239 50                      	push rax
 19425 0000E23A 6A02                    	push 2	; arg count
 19426 0000E23C 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 19427 0000E244 803805                  	cmp byte [rax], T_undefined
 19428 0000E247 0F844A990000            	je L_error_fvar_undefined
 19429 0000E24D 803804                  	cmp byte [rax], T_closure
 19430 0000E250 0F85C5990000            	jne L_error_non_closure
 19431 0000E256 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19432 0000E259 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19433 0000E25C 483D[02000000]          	cmp rax, sob_boolean_false
 19434 0000E262 0F84BD010000            	je .L_if_else_005d
 19435                                  	; preparing a non-tail-call
 19436                                  	; preparing a non-tail-call
 19437 0000E268 488B4520                	mov rax, PARAM(0)	; param i
 19438 0000E26C 50                      	push rax
 19439 0000E26D 488B4538                	mov rax, PARAM(3)	; param str2
 19440 0000E271 50                      	push rax
 19441 0000E272 6A02                    	push 2	; arg count
 19442 0000E274 488B0425[45160000]      	mov rax, qword [free_var_128]	; free var string-ref
 19443 0000E27C 803805                  	cmp byte [rax], T_undefined
 19444 0000E27F 0F8412990000            	je L_error_fvar_undefined
 19445 0000E285 803804                  	cmp byte [rax], T_closure
 19446 0000E288 0F858D990000            	jne L_error_non_closure
 19447 0000E28E FF7001                  	push SOB_CLOSURE_ENV(rax)
 19448 0000E291 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19449 0000E294 50                      	push rax
 19450                                  	; preparing a non-tail-call
 19451 0000E295 488B4520                	mov rax, PARAM(0)	; param i
 19452 0000E299 50                      	push rax
 19453 0000E29A 488B4528                	mov rax, PARAM(1)	; param str1
 19454 0000E29E 50                      	push rax
 19455 0000E29F 6A02                    	push 2	; arg count
 19456 0000E2A1 488B0425[45160000]      	mov rax, qword [free_var_128]	; free var string-ref
 19457 0000E2A9 803805                  	cmp byte [rax], T_undefined
 19458 0000E2AC 0F84E5980000            	je L_error_fvar_undefined
 19459 0000E2B2 803804                  	cmp byte [rax], T_closure
 19460 0000E2B5 0F8560990000            	jne L_error_non_closure
 19461 0000E2BB FF7001                  	push SOB_CLOSURE_ENV(rax)
 19462 0000E2BE FF5009                  	call SOB_CLOSURE_CODE(rax)
 19463 0000E2C1 50                      	push rax
 19464 0000E2C2 6A02                    	push 2	; arg count
 19465 0000E2C4 488B4510                	mov rax, ENV
 19466 0000E2C8 488B4008                	mov rax, qword [rax + 8 * 1]
 19467 0000E2CC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char<?
 19468 0000E2CF 803804                  	cmp byte [rax], T_closure
 19469 0000E2D2 0F8543990000            	jne L_error_non_closure
 19470 0000E2D8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19471 0000E2DB FF5009                  	call SOB_CLOSURE_CODE(rax)
 19472 0000E2DE 483D[02000000]          	cmp rax, sob_boolean_false
 19473 0000E2E4 0F8539010000            	jne .L_or_end_000b
 19474                                  	; preparing a non-tail-call
 19475                                  	; preparing a non-tail-call
 19476 0000E2EA 488B4520                	mov rax, PARAM(0)	; param i
 19477 0000E2EE 50                      	push rax
 19478 0000E2EF 488B4538                	mov rax, PARAM(3)	; param str2
 19479 0000E2F3 50                      	push rax
 19480 0000E2F4 6A02                    	push 2	; arg count
 19481 0000E2F6 488B0425[45160000]      	mov rax, qword [free_var_128]	; free var string-ref
 19482 0000E2FE 803805                  	cmp byte [rax], T_undefined
 19483 0000E301 0F8490980000            	je L_error_fvar_undefined
 19484 0000E307 803804                  	cmp byte [rax], T_closure
 19485 0000E30A 0F850B990000            	jne L_error_non_closure
 19486 0000E310 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19487 0000E313 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19488 0000E316 50                      	push rax
 19489                                  	; preparing a non-tail-call
 19490 0000E317 488B4520                	mov rax, PARAM(0)	; param i
 19491 0000E31B 50                      	push rax
 19492 0000E31C 488B4528                	mov rax, PARAM(1)	; param str1
 19493 0000E320 50                      	push rax
 19494 0000E321 6A02                    	push 2	; arg count
 19495 0000E323 488B0425[45160000]      	mov rax, qword [free_var_128]	; free var string-ref
 19496 0000E32B 803805                  	cmp byte [rax], T_undefined
 19497 0000E32E 0F8463980000            	je L_error_fvar_undefined
 19498 0000E334 803804                  	cmp byte [rax], T_closure
 19499 0000E337 0F85DE980000            	jne L_error_non_closure
 19500 0000E33D FF7001                  	push SOB_CLOSURE_ENV(rax)
 19501 0000E340 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19502 0000E343 50                      	push rax
 19503 0000E344 6A02                    	push 2	; arg count
 19504 0000E346 488B4510                	mov rax, ENV
 19505 0000E34A 488B4008                	mov rax, qword [rax + 8 * 1]
 19506 0000E34E 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var char=?
 19507 0000E352 803804                  	cmp byte [rax], T_closure
 19508 0000E355 0F85C0980000            	jne L_error_non_closure
 19509 0000E35B FF7001                  	push SOB_CLOSURE_ENV(rax)
 19510 0000E35E FF5009                  	call SOB_CLOSURE_CODE(rax)
 19511 0000E361 483D[02000000]          	cmp rax, sob_boolean_false
 19512 0000E367 0F84AC000000            	je .L_if_else_005c
 19513                                  	; preparing a tail-call
 19514 0000E36D 488B4540                	mov rax, PARAM(4)	; param len2
 19515 0000E371 50                      	push rax
 19516 0000E372 488B4538                	mov rax, PARAM(3)	; param str2
 19517 0000E376 50                      	push rax
 19518 0000E377 488B4530                	mov rax, PARAM(2)	; param len1
 19519 0000E37B 50                      	push rax
 19520 0000E37C 488B4528                	mov rax, PARAM(1)	; param str1
 19521 0000E380 50                      	push rax
 19522                                  	; preparing a non-tail-call
 19523 0000E381 48B8-                   	mov rax, L_constants + 2270
 19523 0000E383 [DE08000000000000] 
 19524 0000E38B 50                      	push rax
 19525 0000E38C 488B4520                	mov rax, PARAM(0)	; param i
 19526 0000E390 50                      	push rax
 19527 0000E391 6A02                    	push 2	; arg count
 19528 0000E393 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 19529 0000E39B 803805                  	cmp byte [rax], T_undefined
 19530 0000E39E 0F84F3970000            	je L_error_fvar_undefined
 19531 0000E3A4 803804                  	cmp byte [rax], T_closure
 19532 0000E3A7 0F856E980000            	jne L_error_non_closure
 19533 0000E3AD FF7001                  	push SOB_CLOSURE_ENV(rax)
 19534 0000E3B0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19535 0000E3B3 50                      	push rax
 19536 0000E3B4 6A05                    	push 5	; arg count
 19537 0000E3B6 488B4510                	mov rax, ENV
 19538 0000E3BA 488B00                  	mov rax, qword [rax + 8 * 0]
 19539 0000E3BD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 19540 0000E3C0 488B00                  	mov rax, qword [rax]
 19541 0000E3C3 803804                  	cmp byte [rax], T_closure
 19542 0000E3C6 0F854F980000            	jne L_error_non_closure
 19543 0000E3CC FF7001                  	push SOB_CLOSURE_ENV(rax)
 19544 0000E3CF FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 19545 0000E3D2 FF7500                  	push qword[rbp]
 19546 0000E3D5 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 19547 0000E3D8 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 19548 0000E3DC 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 19549 0000E3E0 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 19550 0000E3E4 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 19551 0000E3E7 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 19552 0000E3EA 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 19553 0000E3EF 4983C103                	add r9, 3 	 ;for getting to the params
 19554 0000E3F3 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 19555 0000E3F7 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 19556                                  .L_tc_recycle_frame_loop_00b3:
 19557 0000E3FA 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 19558 0000E3FD 7410                    	je .L_tc_recycle_frame_done_00b3
 19559 0000E3FF 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 19560 0000E402 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 19561 0000E405 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 19562 0000E409 4983E808                	sub r8, 8	 ;move the top of the stack one down
 19563 0000E40D EBEB                    	jmp .L_tc_recycle_frame_loop_00b3
 19564                                  .L_tc_recycle_frame_done_00b3:
 19565 0000E40F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 19566 0000E410 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 19567 0000E414 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19568 0000E417 EB0A                    	jmp .L_if_end_005c
 19569                                  .L_if_else_005c:
 19570 0000E419 48B8-                   	mov rax, L_constants + 2
 19570 0000E41B [0200000000000000] 
 19571                                  .L_if_end_005c:
 19572                                  .L_or_end_000b:
 19573 0000E423 EB0A                    	jmp .L_if_end_005d
 19574                                  .L_if_else_005d:
 19575 0000E425 48B8-                   	mov rax, L_constants + 2
 19575 0000E427 [0200000000000000] 
 19576                                  .L_if_end_005d:
 19577                                  .L_or_end_000a:
 19578 0000E42F C9                      	leave
 19579 0000E430 C23800                  	ret AND_KILL_FRAME(5)
 19580                                  .L_lambda_simple_end_006c:	; new closure is in rax
 19581 0000E433 50                      	push rax
 19582 0000E434 488B4520                	mov rax, PARAM(0)	; param run
 19583 0000E438 8F00                    	pop qword [rax]
 19584 0000E43A 48B8-                   	mov rax, sob_void
 19584 0000E43C [0000000000000000] 
 19585                                  
 19586                                  	; preparing a tail-call
 19587 0000E444 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19588 0000E449 E876980000              	call malloc
 19589 0000E44E 50                      	push rax
 19590 0000E44F BF08000000              	mov rdi, 8 * 1	; new rib
 19591 0000E454 E86B980000              	call malloc
 19592 0000E459 50                      	push rax
 19593 0000E45A BF18000000              	mov rdi, 8 * 3	; extended env
 19594 0000E45F E860980000              	call malloc
 19595 0000E464 488B7D10                	mov rdi, ENV
 19596 0000E468 BE00000000              	mov rsi, 0
 19597 0000E46D BA01000000              	mov rdx, 1
 19598                                  .L_lambda_simple_env_loop_006d:	; ext_env[i + 1] <-- env[i]
 19599 0000E472 4883FE02                	cmp rsi, 2
 19600 0000E476 7410                    	je .L_lambda_simple_env_end_006d
 19601 0000E478 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19602 0000E47C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19603 0000E480 48FFC6                  	inc rsi
 19604 0000E483 48FFC2                  	inc rdx
 19605 0000E486 EBEA                    	jmp .L_lambda_simple_env_loop_006d
 19606                                  .L_lambda_simple_env_end_006d:
 19607 0000E488 5B                      	pop rbx
 19608 0000E489 BE00000000              	mov rsi, 0
 19609                                  .L_lambda_simple_params_loop_006d:	; copy params
 19610 0000E48E 4883FE01                	cmp rsi, 1
 19611 0000E492 740E                    	je .L_lambda_simple_params_end_006d
 19612 0000E494 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19613 0000E499 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19614 0000E49D 48FFC6                  	inc rsi
 19615 0000E4A0 EBEC                    	jmp .L_lambda_simple_params_loop_006d
 19616                                  .L_lambda_simple_params_end_006d:
 19617 0000E4A2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19618 0000E4A5 4889C3                  	mov rbx, rax
 19619 0000E4A8 58                      	pop rax
 19620 0000E4A9 C60004                  	mov byte [rax], T_closure
 19621 0000E4AC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19622 0000E4B0 48C74009[BDE40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_006d
 19623 0000E4B8 E9B2020000              	jmp .L_lambda_simple_end_006d
 19624                                  .L_lambda_simple_code_006d:	; lambda-simple body
 19625 0000E4BD 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19626 0000E4C3 740B                    	je .L_lambda_simple_arity_check_ok_006d
 19627 0000E4C5 FF742410                	push qword [rsp + 8 * 2]
 19628 0000E4C9 6A02                    	push 2
 19629 0000E4CB E9AD970000              	jmp L_error_incorrect_arity_simple
 19630                                  .L_lambda_simple_arity_check_ok_006d:
 19631 0000E4D0 C8000000                	enter 0, 0
 19632                                  	; preparing a tail-call
 19633                                  	; preparing a non-tail-call
 19634 0000E4D4 488B4528                	mov rax, PARAM(1)	; param str2
 19635 0000E4D8 50                      	push rax
 19636 0000E4D9 6A01                    	push 1	; arg count
 19637 0000E4DB 488B0425[34160000]      	mov rax, qword [free_var_127]	; free var string-length
 19638 0000E4E3 803805                  	cmp byte [rax], T_undefined
 19639 0000E4E6 0F84AB960000            	je L_error_fvar_undefined
 19640 0000E4EC 803804                  	cmp byte [rax], T_closure
 19641 0000E4EF 0F8526970000            	jne L_error_non_closure
 19642 0000E4F5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19643 0000E4F8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19644 0000E4FB 50                      	push rax
 19645                                  	; preparing a non-tail-call
 19646 0000E4FC 488B4520                	mov rax, PARAM(0)	; param str1
 19647 0000E500 50                      	push rax
 19648 0000E501 6A01                    	push 1	; arg count
 19649 0000E503 488B0425[34160000]      	mov rax, qword [free_var_127]	; free var string-length
 19650 0000E50B 803805                  	cmp byte [rax], T_undefined
 19651 0000E50E 0F8483960000            	je L_error_fvar_undefined
 19652 0000E514 803804                  	cmp byte [rax], T_closure
 19653 0000E517 0F85FE960000            	jne L_error_non_closure
 19654 0000E51D FF7001                  	push SOB_CLOSURE_ENV(rax)
 19655 0000E520 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19656 0000E523 50                      	push rax
 19657 0000E524 6A02                    	push 2	; arg count
 19658 0000E526 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19659 0000E52B E894970000              	call malloc
 19660 0000E530 50                      	push rax
 19661 0000E531 BF10000000              	mov rdi, 8 * 2	; new rib
 19662 0000E536 E889970000              	call malloc
 19663 0000E53B 50                      	push rax
 19664 0000E53C BF20000000              	mov rdi, 8 * 4	; extended env
 19665 0000E541 E87E970000              	call malloc
 19666 0000E546 488B7D10                	mov rdi, ENV
 19667 0000E54A BE00000000              	mov rsi, 0
 19668 0000E54F BA01000000              	mov rdx, 1
 19669                                  .L_lambda_simple_env_loop_006e:	; ext_env[i + 1] <-- env[i]
 19670 0000E554 4883FE03                	cmp rsi, 3
 19671 0000E558 7410                    	je .L_lambda_simple_env_end_006e
 19672 0000E55A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19673 0000E55E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19674 0000E562 48FFC6                  	inc rsi
 19675 0000E565 48FFC2                  	inc rdx
 19676 0000E568 EBEA                    	jmp .L_lambda_simple_env_loop_006e
 19677                                  .L_lambda_simple_env_end_006e:
 19678 0000E56A 5B                      	pop rbx
 19679 0000E56B BE00000000              	mov rsi, 0
 19680                                  .L_lambda_simple_params_loop_006e:	; copy params
 19681 0000E570 4883FE02                	cmp rsi, 2
 19682 0000E574 740E                    	je .L_lambda_simple_params_end_006e
 19683 0000E576 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19684 0000E57B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19685 0000E57F 48FFC6                  	inc rsi
 19686 0000E582 EBEC                    	jmp .L_lambda_simple_params_loop_006e
 19687                                  .L_lambda_simple_params_end_006e:
 19688 0000E584 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19689 0000E587 4889C3                  	mov rbx, rax
 19690 0000E58A 58                      	pop rax
 19691 0000E58B C60004                  	mov byte [rax], T_closure
 19692 0000E58E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19693 0000E592 48C74009[9FE50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_006e
 19694 0000E59A E978010000              	jmp .L_lambda_simple_end_006e
 19695                                  .L_lambda_simple_code_006e:	; lambda-simple body
 19696 0000E59F 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19697 0000E5A5 740B                    	je .L_lambda_simple_arity_check_ok_006e
 19698 0000E5A7 FF742410                	push qword [rsp + 8 * 2]
 19699 0000E5AB 6A02                    	push 2
 19700 0000E5AD E9CB960000              	jmp L_error_incorrect_arity_simple
 19701                                  .L_lambda_simple_arity_check_ok_006e:
 19702 0000E5B2 C8000000                	enter 0, 0
 19703                                  	; preparing a non-tail-call
 19704 0000E5B6 488B4528                	mov rax, PARAM(1)	; param len2
 19705 0000E5BA 50                      	push rax
 19706 0000E5BB 488B4520                	mov rax, PARAM(0)	; param len1
 19707 0000E5BF 50                      	push rax
 19708 0000E5C0 6A02                    	push 2	; arg count
 19709 0000E5C2 488B0425[1A0E0000]      	mov rax, qword [free_var_5]	; free var <=
 19710 0000E5CA 803805                  	cmp byte [rax], T_undefined
 19711 0000E5CD 0F84C4950000            	je L_error_fvar_undefined
 19712 0000E5D3 803804                  	cmp byte [rax], T_closure
 19713 0000E5D6 0F853F960000            	jne L_error_non_closure
 19714 0000E5DC FF7001                  	push SOB_CLOSURE_ENV(rax)
 19715 0000E5DF FF5009                  	call SOB_CLOSURE_CODE(rax)
 19716 0000E5E2 483D[02000000]          	cmp rax, sob_boolean_false
 19717 0000E5E8 0F8495000000            	je .L_if_else_005e
 19718                                  	; preparing a tail-call
 19719 0000E5EE 488B4528                	mov rax, PARAM(1)	; param len2
 19720 0000E5F2 50                      	push rax
 19721 0000E5F3 488B4510                	mov rax, ENV
 19722 0000E5F7 488B00                  	mov rax, qword [rax + 8 * 0]
 19723 0000E5FA 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 19724 0000E5FE 50                      	push rax
 19725 0000E5FF 488B4520                	mov rax, PARAM(0)	; param len1
 19726 0000E603 50                      	push rax
 19727 0000E604 488B4510                	mov rax, ENV
 19728 0000E608 488B00                  	mov rax, qword [rax + 8 * 0]
 19729 0000E60B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 19730 0000E60E 50                      	push rax
 19731 0000E60F 48B8-                   	mov rax, L_constants + 2135
 19731 0000E611 [5708000000000000] 
 19732 0000E619 50                      	push rax
 19733 0000E61A 6A05                    	push 5	; arg count
 19734 0000E61C 488B4510                	mov rax, ENV
 19735 0000E620 488B4008                	mov rax, qword [rax + 8 * 1]
 19736 0000E624 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 19737 0000E627 488B00                  	mov rax, qword [rax]
 19738 0000E62A 803804                  	cmp byte [rax], T_closure
 19739 0000E62D 0F85E8950000            	jne L_error_non_closure
 19740 0000E633 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19741 0000E636 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 19742 0000E639 FF7500                  	push qword[rbp]
 19743 0000E63C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 19744 0000E63F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 19745 0000E643 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 19746 0000E647 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 19747 0000E64B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 19748 0000E64E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 19749 0000E651 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 19750 0000E656 4983C103                	add r9, 3 	 ;for getting to the params
 19751 0000E65A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 19752 0000E65E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 19753                                  .L_tc_recycle_frame_loop_00b4:
 19754 0000E661 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 19755 0000E664 7410                    	je .L_tc_recycle_frame_done_00b4
 19756 0000E666 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 19757 0000E669 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 19758 0000E66C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 19759 0000E670 4983E808                	sub r8, 8	 ;move the top of the stack one down
 19760 0000E674 EBEB                    	jmp .L_tc_recycle_frame_loop_00b4
 19761                                  .L_tc_recycle_frame_done_00b4:
 19762 0000E676 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 19763 0000E677 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 19764 0000E67B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19765 0000E67E E990000000              	jmp .L_if_end_005e
 19766                                  .L_if_else_005e:
 19767                                  	; preparing a tail-call
 19768 0000E683 488B4520                	mov rax, PARAM(0)	; param len1
 19769 0000E687 50                      	push rax
 19770 0000E688 488B4510                	mov rax, ENV
 19771 0000E68C 488B00                  	mov rax, qword [rax + 8 * 0]
 19772 0000E68F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 19773 0000E692 50                      	push rax
 19774 0000E693 488B4528                	mov rax, PARAM(1)	; param len2
 19775 0000E697 50                      	push rax
 19776 0000E698 488B4510                	mov rax, ENV
 19777 0000E69C 488B00                  	mov rax, qword [rax + 8 * 0]
 19778 0000E69F 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 19779 0000E6A3 50                      	push rax
 19780 0000E6A4 48B8-                   	mov rax, L_constants + 2135
 19780 0000E6A6 [5708000000000000] 
 19781 0000E6AE 50                      	push rax
 19782 0000E6AF 6A05                    	push 5	; arg count
 19783 0000E6B1 488B4510                	mov rax, ENV
 19784 0000E6B5 488B4008                	mov rax, qword [rax + 8 * 1]
 19785 0000E6B9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 19786 0000E6BC 488B00                  	mov rax, qword [rax]
 19787 0000E6BF 803804                  	cmp byte [rax], T_closure
 19788 0000E6C2 0F8553950000            	jne L_error_non_closure
 19789 0000E6C8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19790 0000E6CB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 19791 0000E6CE FF7500                  	push qword[rbp]
 19792 0000E6D1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 19793 0000E6D4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 19794 0000E6D8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 19795 0000E6DC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 19796 0000E6E0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 19797 0000E6E3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 19798 0000E6E6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 19799 0000E6EB 4983C103                	add r9, 3 	 ;for getting to the params
 19800 0000E6EF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 19801 0000E6F3 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 19802                                  .L_tc_recycle_frame_loop_00b5:
 19803 0000E6F6 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 19804 0000E6F9 7410                    	je .L_tc_recycle_frame_done_00b5
 19805 0000E6FB 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 19806 0000E6FE 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 19807 0000E701 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 19808 0000E705 4983E808                	sub r8, 8	 ;move the top of the stack one down
 19809 0000E709 EBEB                    	jmp .L_tc_recycle_frame_loop_00b5
 19810                                  .L_tc_recycle_frame_done_00b5:
 19811 0000E70B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 19812 0000E70C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 19813 0000E710 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19814                                  .L_if_end_005e:
 19815 0000E713 C9                      	leave
 19816 0000E714 C22000                  	ret AND_KILL_FRAME(2)
 19817                                  .L_lambda_simple_end_006e:	; new closure is in rax
 19818 0000E717 803804                  	cmp byte [rax], T_closure
 19819 0000E71A 0F85FB940000            	jne L_error_non_closure
 19820 0000E720 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19821 0000E723 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 19822 0000E726 FF7500                  	push qword[rbp]
 19823 0000E729 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 19824 0000E72C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 19825 0000E730 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 19826 0000E734 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 19827 0000E738 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 19828 0000E73B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 19829 0000E73E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 19830 0000E743 4983C103                	add r9, 3 	 ;for getting to the params
 19831 0000E747 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 19832 0000E74B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 19833                                  .L_tc_recycle_frame_loop_00b6:
 19834 0000E74E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 19835 0000E751 7410                    	je .L_tc_recycle_frame_done_00b6
 19836 0000E753 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 19837 0000E756 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 19838 0000E759 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 19839 0000E75D 4983E808                	sub r8, 8	 ;move the top of the stack one down
 19840 0000E761 EBEB                    	jmp .L_tc_recycle_frame_loop_00b6
 19841                                  .L_tc_recycle_frame_done_00b6:
 19842 0000E763 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 19843 0000E764 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 19844 0000E768 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19845 0000E76B C9                      	leave
 19846 0000E76C C22000                  	ret AND_KILL_FRAME(2)
 19847                                  .L_lambda_simple_end_006d:	; new closure is in rax
 19848 0000E76F 50                      	push rax
 19849 0000E770 6A01                    	push 1	; arg count
 19850 0000E772 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19851 0000E777 E848950000              	call malloc
 19852 0000E77C 50                      	push rax
 19853 0000E77D BF08000000              	mov rdi, 8 * 1	; new rib
 19854 0000E782 E83D950000              	call malloc
 19855 0000E787 50                      	push rax
 19856 0000E788 BF18000000              	mov rdi, 8 * 3	; extended env
 19857 0000E78D E832950000              	call malloc
 19858 0000E792 488B7D10                	mov rdi, ENV
 19859 0000E796 BE00000000              	mov rsi, 0
 19860 0000E79B BA01000000              	mov rdx, 1
 19861                                  .L_lambda_simple_env_loop_006f:	; ext_env[i + 1] <-- env[i]
 19862 0000E7A0 4883FE02                	cmp rsi, 2
 19863 0000E7A4 7410                    	je .L_lambda_simple_env_end_006f
 19864 0000E7A6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19865 0000E7AA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19866 0000E7AE 48FFC6                  	inc rsi
 19867 0000E7B1 48FFC2                  	inc rdx
 19868 0000E7B4 EBEA                    	jmp .L_lambda_simple_env_loop_006f
 19869                                  .L_lambda_simple_env_end_006f:
 19870 0000E7B6 5B                      	pop rbx
 19871 0000E7B7 BE00000000              	mov rsi, 0
 19872                                  .L_lambda_simple_params_loop_006f:	; copy params
 19873 0000E7BC 4883FE01                	cmp rsi, 1
 19874 0000E7C0 740E                    	je .L_lambda_simple_params_end_006f
 19875 0000E7C2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19876 0000E7C7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19877 0000E7CB 48FFC6                  	inc rsi
 19878 0000E7CE EBEC                    	jmp .L_lambda_simple_params_loop_006f
 19879                                  .L_lambda_simple_params_end_006f:
 19880 0000E7D0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19881 0000E7D3 4889C3                  	mov rbx, rax
 19882 0000E7D6 58                      	pop rax
 19883 0000E7D7 C60004                  	mov byte [rax], T_closure
 19884 0000E7DA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19885 0000E7DE 48C74009[EBE70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_006f
 19886 0000E7E6 E97A050000              	jmp .L_lambda_simple_end_006f
 19887                                  .L_lambda_simple_code_006f:	; lambda-simple body
 19888 0000E7EB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19889 0000E7F1 740B                    	je .L_lambda_simple_arity_check_ok_006f
 19890 0000E7F3 FF742410                	push qword [rsp + 8 * 2]
 19891 0000E7F7 6A01                    	push 1
 19892 0000E7F9 E97F940000              	jmp L_error_incorrect_arity_simple
 19893                                  .L_lambda_simple_arity_check_ok_006f:
 19894 0000E7FE C8000000                	enter 0, 0
 19895                                  	; preparing a tail-call
 19896 0000E802 48B8-                   	mov rax, L_constants + 1993
 19896 0000E804 [C907000000000000] 
 19897 0000E80C 50                      	push rax
 19898 0000E80D 6A01                    	push 1	; arg count
 19899 0000E80F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19900 0000E814 E8AB940000              	call malloc
 19901 0000E819 50                      	push rax
 19902 0000E81A BF08000000              	mov rdi, 8 * 1	; new rib
 19903 0000E81F E8A0940000              	call malloc
 19904 0000E824 50                      	push rax
 19905 0000E825 BF20000000              	mov rdi, 8 * 4	; extended env
 19906 0000E82A E895940000              	call malloc
 19907 0000E82F 488B7D10                	mov rdi, ENV
 19908 0000E833 BE00000000              	mov rsi, 0
 19909 0000E838 BA01000000              	mov rdx, 1
 19910                                  .L_lambda_simple_env_loop_0070:	; ext_env[i + 1] <-- env[i]
 19911 0000E83D 4883FE03                	cmp rsi, 3
 19912 0000E841 7410                    	je .L_lambda_simple_env_end_0070
 19913 0000E843 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19914 0000E847 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19915 0000E84B 48FFC6                  	inc rsi
 19916 0000E84E 48FFC2                  	inc rdx
 19917 0000E851 EBEA                    	jmp .L_lambda_simple_env_loop_0070
 19918                                  .L_lambda_simple_env_end_0070:
 19919 0000E853 5B                      	pop rbx
 19920 0000E854 BE00000000              	mov rsi, 0
 19921                                  .L_lambda_simple_params_loop_0070:	; copy params
 19922 0000E859 4883FE01                	cmp rsi, 1
 19923 0000E85D 740E                    	je .L_lambda_simple_params_end_0070
 19924 0000E85F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19925 0000E864 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19926 0000E868 48FFC6                  	inc rsi
 19927 0000E86B EBEC                    	jmp .L_lambda_simple_params_loop_0070
 19928                                  .L_lambda_simple_params_end_0070:
 19929 0000E86D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19930 0000E870 4889C3                  	mov rbx, rax
 19931 0000E873 58                      	pop rax
 19932 0000E874 C60004                  	mov byte [rax], T_closure
 19933 0000E877 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19934 0000E87B 48C74009[88E80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0070
 19935 0000E883 E985040000              	jmp .L_lambda_simple_end_0070
 19936                                  .L_lambda_simple_code_0070:	; lambda-simple body
 19937 0000E888 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19938 0000E88E 740B                    	je .L_lambda_simple_arity_check_ok_0070
 19939 0000E890 FF742410                	push qword [rsp + 8 * 2]
 19940 0000E894 6A01                    	push 1
 19941 0000E896 E9E2930000              	jmp L_error_incorrect_arity_simple
 19942                                  .L_lambda_simple_arity_check_ok_0070:
 19943 0000E89B C8000000                	enter 0, 0
 19944 0000E89F BF08000000              	mov rdi, 8*1
 19945 0000E8A4 E81B940000              	call malloc
 19946 0000E8A9 488B5D20                	mov rbx, PARAM(0)
 19947 0000E8AD 488918                  	mov qword[rax], rbx
 19948 0000E8B0 48894520                	mov PARAM(0), rax
 19949 0000E8B4 48B8-                   	mov rax, sob_void
 19949 0000E8B6 [0000000000000000] 
 19950                                  
 19951 0000E8BE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19952 0000E8C3 E8FC930000              	call malloc
 19953 0000E8C8 50                      	push rax
 19954 0000E8C9 BF08000000              	mov rdi, 8 * 1	; new rib
 19955 0000E8CE E8F1930000              	call malloc
 19956 0000E8D3 50                      	push rax
 19957 0000E8D4 BF28000000              	mov rdi, 8 * 5	; extended env
 19958 0000E8D9 E8E6930000              	call malloc
 19959 0000E8DE 488B7D10                	mov rdi, ENV
 19960 0000E8E2 BE00000000              	mov rsi, 0
 19961 0000E8E7 BA01000000              	mov rdx, 1
 19962                                  .L_lambda_simple_env_loop_0071:	; ext_env[i + 1] <-- env[i]
 19963 0000E8EC 4883FE04                	cmp rsi, 4
 19964 0000E8F0 7410                    	je .L_lambda_simple_env_end_0071
 19965 0000E8F2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19966 0000E8F6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19967 0000E8FA 48FFC6                  	inc rsi
 19968 0000E8FD 48FFC2                  	inc rdx
 19969 0000E900 EBEA                    	jmp .L_lambda_simple_env_loop_0071
 19970                                  .L_lambda_simple_env_end_0071:
 19971 0000E902 5B                      	pop rbx
 19972 0000E903 BE00000000              	mov rsi, 0
 19973                                  .L_lambda_simple_params_loop_0071:	; copy params
 19974 0000E908 4883FE01                	cmp rsi, 1
 19975 0000E90C 740E                    	je .L_lambda_simple_params_end_0071
 19976 0000E90E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19977 0000E913 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19978 0000E917 48FFC6                  	inc rsi
 19979 0000E91A EBEC                    	jmp .L_lambda_simple_params_loop_0071
 19980                                  .L_lambda_simple_params_end_0071:
 19981 0000E91C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19982 0000E91F 4889C3                  	mov rbx, rax
 19983 0000E922 58                      	pop rax
 19984 0000E923 C60004                  	mov byte [rax], T_closure
 19985 0000E926 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19986 0000E92A 48C74009[37E90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0071
 19987 0000E932 E962010000              	jmp .L_lambda_simple_end_0071
 19988                                  .L_lambda_simple_code_0071:	; lambda-simple body
 19989 0000E937 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19990 0000E93D 740B                    	je .L_lambda_simple_arity_check_ok_0071
 19991 0000E93F FF742410                	push qword [rsp + 8 * 2]
 19992 0000E943 6A02                    	push 2
 19993 0000E945 E933930000              	jmp L_error_incorrect_arity_simple
 19994                                  .L_lambda_simple_arity_check_ok_0071:
 19995 0000E94A C8000000                	enter 0, 0
 19996                                  	; preparing a non-tail-call
 19997 0000E94E 488B4528                	mov rax, PARAM(1)	; param strs
 19998 0000E952 50                      	push rax
 19999 0000E953 6A01                    	push 1	; arg count
 20000 0000E955 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 20001 0000E95D 803805                  	cmp byte [rax], T_undefined
 20002 0000E960 0F8431920000            	je L_error_fvar_undefined
 20003 0000E966 803804                  	cmp byte [rax], T_closure
 20004 0000E969 0F85AC920000            	jne L_error_non_closure
 20005 0000E96F FF7001                  	push SOB_CLOSURE_ENV(rax)
 20006 0000E972 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20007 0000E975 483D[02000000]          	cmp rax, sob_boolean_false
 20008 0000E97B 0F8514010000            	jne .L_or_end_000c
 20009                                  	; preparing a non-tail-call
 20010                                  	; preparing a non-tail-call
 20011 0000E981 488B4528                	mov rax, PARAM(1)	; param strs
 20012 0000E985 50                      	push rax
 20013 0000E986 6A01                    	push 1	; arg count
 20014 0000E988 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 20015 0000E990 803805                  	cmp byte [rax], T_undefined
 20016 0000E993 0F84FE910000            	je L_error_fvar_undefined
 20017 0000E999 803804                  	cmp byte [rax], T_closure
 20018 0000E99C 0F8579920000            	jne L_error_non_closure
 20019 0000E9A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20020 0000E9A5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20021 0000E9A8 50                      	push rax
 20022 0000E9A9 488B4520                	mov rax, PARAM(0)	; param str
 20023 0000E9AD 50                      	push rax
 20024 0000E9AE 6A02                    	push 2	; arg count
 20025 0000E9B0 488B4510                	mov rax, ENV
 20026 0000E9B4 488B4008                	mov rax, qword [rax + 8 * 1]
 20027 0000E9B8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var binary-string<?
 20028 0000E9BB 803804                  	cmp byte [rax], T_closure
 20029 0000E9BE 0F8557920000            	jne L_error_non_closure
 20030 0000E9C4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20031 0000E9C7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20032 0000E9CA 483D[02000000]          	cmp rax, sob_boolean_false
 20033 0000E9D0 0F84B5000000            	je .L_if_else_005f
 20034                                  	; preparing a tail-call
 20035                                  	; preparing a non-tail-call
 20036 0000E9D6 488B4528                	mov rax, PARAM(1)	; param strs
 20037 0000E9DA 50                      	push rax
 20038 0000E9DB 6A01                    	push 1	; arg count
 20039 0000E9DD 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
 20040 0000E9E5 803805                  	cmp byte [rax], T_undefined
 20041 0000E9E8 0F84A9910000            	je L_error_fvar_undefined
 20042 0000E9EE 803804                  	cmp byte [rax], T_closure
 20043 0000E9F1 0F8524920000            	jne L_error_non_closure
 20044 0000E9F7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20045 0000E9FA FF5009                  	call SOB_CLOSURE_CODE(rax)
 20046 0000E9FD 50                      	push rax
 20047                                  	; preparing a non-tail-call
 20048 0000E9FE 488B4528                	mov rax, PARAM(1)	; param strs
 20049 0000EA02 50                      	push rax
 20050 0000EA03 6A01                    	push 1	; arg count
 20051 0000EA05 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 20052 0000EA0D 803805                  	cmp byte [rax], T_undefined
 20053 0000EA10 0F8481910000            	je L_error_fvar_undefined
 20054 0000EA16 803804                  	cmp byte [rax], T_closure
 20055 0000EA19 0F85FC910000            	jne L_error_non_closure
 20056 0000EA1F FF7001                  	push SOB_CLOSURE_ENV(rax)
 20057 0000EA22 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20058 0000EA25 50                      	push rax
 20059 0000EA26 6A02                    	push 2	; arg count
 20060 0000EA28 488B4510                	mov rax, ENV
 20061 0000EA2C 488B00                  	mov rax, qword [rax + 8 * 0]
 20062 0000EA2F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20063 0000EA32 488B00                  	mov rax, qword [rax]
 20064 0000EA35 803804                  	cmp byte [rax], T_closure
 20065 0000EA38 0F85DD910000            	jne L_error_non_closure
 20066 0000EA3E FF7001                  	push SOB_CLOSURE_ENV(rax)
 20067 0000EA41 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 20068 0000EA44 FF7500                  	push qword[rbp]
 20069 0000EA47 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 20070 0000EA4A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 20071 0000EA4E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 20072 0000EA52 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 20073 0000EA56 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 20074 0000EA59 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 20075 0000EA5C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 20076 0000EA61 4983C103                	add r9, 3 	 ;for getting to the params
 20077 0000EA65 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 20078 0000EA69 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 20079                                  .L_tc_recycle_frame_loop_00b7:
 20080 0000EA6C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 20081 0000EA6F 7410                    	je .L_tc_recycle_frame_done_00b7
 20082 0000EA71 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 20083 0000EA74 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 20084 0000EA77 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 20085 0000EA7B 4983E808                	sub r8, 8	 ;move the top of the stack one down
 20086 0000EA7F EBEB                    	jmp .L_tc_recycle_frame_loop_00b7
 20087                                  .L_tc_recycle_frame_done_00b7:
 20088 0000EA81 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 20089 0000EA82 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 20090 0000EA86 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20091 0000EA89 EB0A                    	jmp .L_if_end_005f
 20092                                  .L_if_else_005f:
 20093 0000EA8B 48B8-                   	mov rax, L_constants + 2
 20093 0000EA8D [0200000000000000] 
 20094                                  .L_if_end_005f:
 20095                                  .L_or_end_000c:
 20096 0000EA95 C9                      	leave
 20097 0000EA96 C22000                  	ret AND_KILL_FRAME(2)
 20098                                  .L_lambda_simple_end_0071:	; new closure is in rax
 20099 0000EA99 50                      	push rax
 20100 0000EA9A 488B4520                	mov rax, PARAM(0)	; param run
 20101 0000EA9E 8F00                    	pop qword [rax]
 20102 0000EAA0 48B8-                   	mov rax, sob_void
 20102 0000EAA2 [0000000000000000] 
 20103                                  
 20104 0000EAAA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20105 0000EAAF E810920000              	call malloc
 20106 0000EAB4 50                      	push rax
 20107 0000EAB5 BF08000000              	mov rdi, 8 * 1	; new rib
 20108 0000EABA E805920000              	call malloc
 20109 0000EABF 50                      	push rax
 20110 0000EAC0 BF28000000              	mov rdi, 8 * 5	; extended env
 20111 0000EAC5 E8FA910000              	call malloc
 20112 0000EACA 488B7D10                	mov rdi, ENV
 20113 0000EACE BE00000000              	mov rsi, 0
 20114 0000EAD3 BA01000000              	mov rdx, 1
 20115                                  .L_lambda_opt_env_loop_0011:	; ext_env[i + 1] <-- env[i]
 20116 0000EAD8 4883FE04                	cmp rsi, 4
 20117 0000EADC 7410                    	je .L_lambda_opt_env_end_0011
 20118 0000EADE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20119 0000EAE2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20120 0000EAE6 48FFC6                  	inc rsi
 20121 0000EAE9 48FFC2                  	inc rdx
 20122 0000EAEC EBEA                    	jmp .L_lambda_opt_env_loop_0011
 20123                                  .L_lambda_opt_env_end_0011:
 20124 0000EAEE 5B                      	pop rbx
 20125 0000EAEF BE00000000              	mov rsi, 0
 20126                                  .L_lambda_opt_params_loop_0011:	; copy params
 20127 0000EAF4 4883FE01                	cmp rsi, 1
 20128 0000EAF8 740E                    	je .L_lambda_opt_params_end_0011
 20129 0000EAFA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20130 0000EAFF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20131 0000EB03 48FFC6                  	inc rsi
 20132 0000EB06 EBEC                    	jmp .L_lambda_opt_params_loop_0011
 20133                                  .L_lambda_opt_params_end_0011:
 20134 0000EB08 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20135 0000EB0B 4889C3                  	mov rbx, rax
 20136 0000EB0E 58                      	pop rax
 20137 0000EB0F C60004                  	mov byte [rax], T_closure
 20138 0000EB12 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20139 0000EB16 48C74009[23EB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0011
 20140 0000EB1E E9E6010000              	jmp .L_lambda_opt_end_0011
 20141                                  .L_lambda_opt_code_0011:	; lambda-opt body
 20142 0000EB23 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20143 0000EB29 7411                    	je .L_lambda_opt_arity_check_exact_0011
 20144 0000EB2B 0F8FBF000000            	jg .L_lambda_opt_arity_check_more_0011
 20145 0000EB31 FF742410                	push qword [rsp + 8 * 2]
 20146 0000EB35 6A01                    	push 1
 20147 0000EB37 E955910000              	jmp L_error_incorrect_arity_opt
 20148                                  .L_lambda_opt_arity_check_exact_0011:
 20149 0000EB3C 4883EC08                	sub rsp, 8
 20150 0000EB40 488B442408              	mov rax, qword[rsp + 8 *1]
 20151 0000EB45 48890424                	mov qword[rsp], rax  
 20152 0000EB49 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 20153 0000EB4E 4889442408              	mov qword[rsp + 8 * 1], rax
 20154 0000EB53 B802000000              	mov rax, 2
 20155 0000EB58 4889442410              	mov qword[rsp + 8 *2], rax
 20156 0000EB5D 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
 20157 0000EB62 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 20158 0000EB67 48B8-                   	mov rax, sob_nil
 20158 0000EB69 [0100000000000000] 
 20159 0000EB71 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
 20160 0000EB76 C8000000                	enter 0, 0
 20161                                  	; preparing a tail-call
 20162 0000EB7A 488B4528                	mov rax, PARAM(1)	; param strs
 20163 0000EB7E 50                      	push rax
 20164 0000EB7F 488B4520                	mov rax, PARAM(0)	; param str
 20165 0000EB83 50                      	push rax
 20166 0000EB84 6A02                    	push 2	; arg count
 20167 0000EB86 488B4510                	mov rax, ENV
 20168 0000EB8A 488B00                  	mov rax, qword [rax + 8 * 0]
 20169 0000EB8D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20170 0000EB90 488B00                  	mov rax, qword [rax]
 20171 0000EB93 803804                  	cmp byte [rax], T_closure
 20172 0000EB96 0F857F900000            	jne L_error_non_closure
 20173 0000EB9C FF7001                  	push SOB_CLOSURE_ENV(rax)
 20174 0000EB9F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 20175 0000EBA2 FF7500                  	push qword[rbp]
 20176 0000EBA5 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 20177 0000EBA8 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 20178 0000EBAC 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 20179 0000EBB0 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 20180 0000EBB4 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 20181 0000EBB7 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 20182 0000EBBA 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 20183 0000EBBF 4983C103                	add r9, 3 	 ;for getting to the params
 20184 0000EBC3 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 20185 0000EBC7 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 20186                                  .L_tc_recycle_frame_loop_00b9:
 20187 0000EBCA 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 20188 0000EBCD 7410                    	je .L_tc_recycle_frame_done_00b9
 20189 0000EBCF 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 20190 0000EBD2 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 20191 0000EBD5 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 20192 0000EBD9 4983E808                	sub r8, 8	 ;move the top of the stack one down
 20193 0000EBDD EBEB                    	jmp .L_tc_recycle_frame_loop_00b9
 20194                                  .L_tc_recycle_frame_done_00b9:
 20195 0000EBDF 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 20196 0000EBE0 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 20197 0000EBE4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20198 0000EBE7 C9                      	leave
 20199 0000EBE8 C22000                  	ret AND_KILL_FRAME(2)
 20200 0000EBEB E919010000              	jmp .L_lambda_opt_end_0011	; new closure is in rax
 20201                                  .L_lambda_opt_arity_check_more_0011:
 20202 0000EBF0 488B442410              	mov rax, qword[rsp + 2 * 8]
 20203 0000EBF5 4889C7                  	mov rdi, rax
 20204 0000EBF8 49B9-                   	mov r9, sob_nil
 20204 0000EBFA [0100000000000000] 
 20205 0000EC02 4989F8                  	mov r8, rdi
 20206                                  .L_lambda_opt_stack_shrink_loop_0011:
 20207 0000EC05 4983F801                	cmp r8, 1
 20208 0000EC09 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_0011
 20209 0000EC0B 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)] 	;rbx is the top of the stack
 20210 0000EC10 BF11000000              	mov rdi, 1+8+8	;for pair
 20211 0000EC15 E8AA900000              	call malloc	 ;to create the pair in the stack
 20212 0000EC1A C60021                  	mov byte [rax], T_pair	 ; to make it a pair
 20213 0000EC1D 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
 20214 0000EC21 4C894809                 	mov qword[rax+1+8],r9
 20215 0000EC25 4989C1                  	mov r9 , rax	 ; for the recursion 
 20216 0000EC28 49FFC8                  	dec r8
 20217 0000EC2B EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_0011
 20218                                  .L_lambda_opt_stack_shrink_loop_exit_0011:
 20219 0000EC2D 488B442410              	mov rax, qword[rsp + 2 * 8]
 20220 0000EC32 BF02000000              	mov rdi, 2
 20221 0000EC37 4829F8                  	sub rax, rdi
 20222 0000EC3A 4889C7                  	mov rdi, rax
 20223 0000EC3D 486BC008                	imul rax,8
 20224 0000EC41 4801C4                  	add rsp, rax
 20225 0000EC44 4889E0                  	mov rax, rsp
 20226 0000EC47 4989F8                  	mov r8, rdi
 20227 0000EC4A 4D6BC008                	imul r8, 8
 20228 0000EC4E 4C29C0                  	sub rax, r8
 20229 0000EC51 4989C2                  	mov r10, rax	; holds the original ret in the stack
 20230 0000EC54 4983C218                	add r10, 8*3
 20231 0000EC58 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
 20232 0000EC5C 4C8B00                  	mov r8, qword[rax] 	;arg count = r8
 20233 0000EC5F 4D6BC008                	imul r8,8
 20234 0000EC63 4C01C0                  	add rax, r8
 20235 0000EC66 4C8908                  	mov qword[rax] ,r9
 20236 0000EC69 4D89D0                   	mov r8, r10
 20237 0000EC6C 4983C000                	add r8, 8 * 0
 20238 0000EC70 4D8B08                  	mov r9,qword[r8]
 20239 0000EC73 4D890CF8                	mov qword [r8 + rdi * 8], r9
 20240 0000EC77 4983EA18                	sub r10, 8*3
 20241 0000EC7B 48C744241002000000      	mov qword [rsp+2*8], 2
 20242 0000EC84 498B4208                	mov rax, qword[r10 + 1 * 8]
 20243 0000EC88 4889442408              	mov qword[rsp + 1*8] ,rax
 20244 0000EC8D 498B02                  	mov rax, qword[r10]
 20245 0000EC90 48890424                	mov qword[rsp], rax
 20246 0000EC94 C8000000                	enter 0, 0
 20247                                  	; preparing a tail-call
 20248 0000EC98 488B4528                	mov rax, PARAM(1)	; param strs
 20249 0000EC9C 50                      	push rax
 20250 0000EC9D 488B4520                	mov rax, PARAM(0)	; param str
 20251 0000ECA1 50                      	push rax
 20252 0000ECA2 6A02                    	push 2	; arg count
 20253 0000ECA4 488B4510                	mov rax, ENV
 20254 0000ECA8 488B00                  	mov rax, qword [rax + 8 * 0]
 20255 0000ECAB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20256 0000ECAE 488B00                  	mov rax, qword [rax]
 20257 0000ECB1 803804                  	cmp byte [rax], T_closure
 20258 0000ECB4 0F85618F0000            	jne L_error_non_closure
 20259 0000ECBA FF7001                  	push SOB_CLOSURE_ENV(rax)
 20260 0000ECBD FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 20261 0000ECC0 FF7500                  	push qword[rbp]
 20262 0000ECC3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 20263 0000ECC6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 20264 0000ECCA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 20265 0000ECCE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 20266 0000ECD2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 20267 0000ECD5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 20268 0000ECD8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 20269 0000ECDD 4983C103                	add r9, 3 	 ;for getting to the params
 20270 0000ECE1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 20271 0000ECE5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 20272                                  .L_tc_recycle_frame_loop_00b8:
 20273 0000ECE8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 20274 0000ECEB 7410                    	je .L_tc_recycle_frame_done_00b8
 20275 0000ECED 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 20276 0000ECF0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 20277 0000ECF3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 20278 0000ECF7 4983E808                	sub r8, 8	 ;move the top of the stack one down
 20279 0000ECFB EBEB                    	jmp .L_tc_recycle_frame_loop_00b8
 20280                                  .L_tc_recycle_frame_done_00b8:
 20281 0000ECFD 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 20282 0000ECFE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 20283 0000ED02 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20284 0000ED05 C9                      	leave
 20285 0000ED06 C22000                  	ret AND_KILL_FRAME(2)
 20286                                  .L_lambda_opt_end_0011:	; new closure is in rax
 20287 0000ED09 C9                      	leave
 20288 0000ED0A C21800                  	ret AND_KILL_FRAME(1)
 20289                                  .L_lambda_simple_end_0070:	; new closure is in rax
 20290 0000ED0D 803804                  	cmp byte [rax], T_closure
 20291 0000ED10 0F85058F0000            	jne L_error_non_closure
 20292 0000ED16 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20293 0000ED19 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 20294 0000ED1C FF7500                  	push qword[rbp]
 20295 0000ED1F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 20296 0000ED22 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 20297 0000ED26 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 20298 0000ED2A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 20299 0000ED2E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 20300 0000ED31 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 20301 0000ED34 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 20302 0000ED39 4983C103                	add r9, 3 	 ;for getting to the params
 20303 0000ED3D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 20304 0000ED41 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 20305                                  .L_tc_recycle_frame_loop_00ba:
 20306 0000ED44 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 20307 0000ED47 7410                    	je .L_tc_recycle_frame_done_00ba
 20308 0000ED49 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 20309 0000ED4C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 20310 0000ED4F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 20311 0000ED53 4983E808                	sub r8, 8	 ;move the top of the stack one down
 20312 0000ED57 EBEB                    	jmp .L_tc_recycle_frame_loop_00ba
 20313                                  .L_tc_recycle_frame_done_00ba:
 20314 0000ED59 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 20315 0000ED5A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 20316 0000ED5E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20317 0000ED61 C9                      	leave
 20318 0000ED62 C21800                  	ret AND_KILL_FRAME(1)
 20319                                  .L_lambda_simple_end_006f:	; new closure is in rax
 20320 0000ED65 803804                  	cmp byte [rax], T_closure
 20321 0000ED68 0F85AD8E0000            	jne L_error_non_closure
 20322 0000ED6E FF7001                  	push SOB_CLOSURE_ENV(rax)
 20323 0000ED71 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 20324 0000ED74 FF7500                  	push qword[rbp]
 20325 0000ED77 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 20326 0000ED7A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 20327 0000ED7E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 20328 0000ED82 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 20329 0000ED86 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 20330 0000ED89 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 20331 0000ED8C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 20332 0000ED91 4983C103                	add r9, 3 	 ;for getting to the params
 20333 0000ED95 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 20334 0000ED99 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 20335                                  .L_tc_recycle_frame_loop_00bb:
 20336 0000ED9C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 20337 0000ED9F 7410                    	je .L_tc_recycle_frame_done_00bb
 20338 0000EDA1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 20339 0000EDA4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 20340 0000EDA7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 20341 0000EDAB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 20342 0000EDAF EBEB                    	jmp .L_tc_recycle_frame_loop_00bb
 20343                                  .L_tc_recycle_frame_done_00bb:
 20344 0000EDB1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 20345 0000EDB2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 20346 0000EDB6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20347 0000EDB9 C9                      	leave
 20348 0000EDBA C21800                  	ret AND_KILL_FRAME(1)
 20349                                  .L_lambda_simple_end_006b:	; new closure is in rax
 20350 0000EDBD 803804                  	cmp byte [rax], T_closure
 20351 0000EDC0 0F85558E0000            	jne L_error_non_closure
 20352 0000EDC6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20353 0000EDC9 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 20354 0000EDCC FF7500                  	push qword[rbp]
 20355 0000EDCF 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 20356 0000EDD2 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 20357 0000EDD6 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 20358 0000EDDA 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 20359 0000EDDE 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 20360 0000EDE1 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 20361 0000EDE4 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 20362 0000EDE9 4983C103                	add r9, 3 	 ;for getting to the params
 20363 0000EDED 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 20364 0000EDF1 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 20365                                  .L_tc_recycle_frame_loop_00bc:
 20366 0000EDF4 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 20367 0000EDF7 7410                    	je .L_tc_recycle_frame_done_00bc
 20368 0000EDF9 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 20369 0000EDFC 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 20370 0000EDFF 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 20371 0000EE03 4983E808                	sub r8, 8	 ;move the top of the stack one down
 20372 0000EE07 EBEB                    	jmp .L_tc_recycle_frame_loop_00bc
 20373                                  .L_tc_recycle_frame_done_00bc:
 20374 0000EE09 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 20375 0000EE0A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 20376 0000EE0E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20377 0000EE11 C9                      	leave
 20378 0000EE12 C22000                  	ret AND_KILL_FRAME(2)
 20379                                  .L_lambda_simple_end_006a:	; new closure is in rax
 20380 0000EE15 50                      	push rax
 20381 0000EE16 6A01                    	push 1	; arg count
 20382 0000EE18 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20383 0000EE1D E8A28E0000              	call malloc
 20384 0000EE22 50                      	push rax
 20385 0000EE23 BF00000000              	mov rdi, 8 * 0	; new rib
 20386 0000EE28 E8978E0000              	call malloc
 20387 0000EE2D 50                      	push rax
 20388 0000EE2E BF08000000              	mov rdi, 8 * 1	; extended env
 20389 0000EE33 E88C8E0000              	call malloc
 20390 0000EE38 488B7D10                	mov rdi, ENV
 20391 0000EE3C BE00000000              	mov rsi, 0
 20392 0000EE41 BA01000000              	mov rdx, 1
 20393                                  .L_lambda_simple_env_loop_0072:	; ext_env[i + 1] <-- env[i]
 20394 0000EE46 4883FE00                	cmp rsi, 0
 20395 0000EE4A 7410                    	je .L_lambda_simple_env_end_0072
 20396 0000EE4C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20397 0000EE50 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20398 0000EE54 48FFC6                  	inc rsi
 20399 0000EE57 48FFC2                  	inc rdx
 20400 0000EE5A EBEA                    	jmp .L_lambda_simple_env_loop_0072
 20401                                  .L_lambda_simple_env_end_0072:
 20402 0000EE5C 5B                      	pop rbx
 20403 0000EE5D BE00000000              	mov rsi, 0
 20404                                  .L_lambda_simple_params_loop_0072:	; copy params
 20405 0000EE62 4883FE00                	cmp rsi, 0
 20406 0000EE66 740E                    	je .L_lambda_simple_params_end_0072
 20407 0000EE68 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20408 0000EE6D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20409 0000EE71 48FFC6                  	inc rsi
 20410 0000EE74 EBEC                    	jmp .L_lambda_simple_params_loop_0072
 20411                                  .L_lambda_simple_params_end_0072:
 20412 0000EE76 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20413 0000EE79 4889C3                  	mov rbx, rax
 20414 0000EE7C 58                      	pop rax
 20415 0000EE7D C60004                  	mov byte [rax], T_closure
 20416 0000EE80 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20417 0000EE84 48C74009[91EE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0072
 20418 0000EE8C E947010000              	jmp .L_lambda_simple_end_0072
 20419                                  .L_lambda_simple_code_0072:	; lambda-simple body
 20420 0000EE91 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20421 0000EE97 740B                    	je .L_lambda_simple_arity_check_ok_0072
 20422 0000EE99 FF742410                	push qword [rsp + 8 * 2]
 20423 0000EE9D 6A01                    	push 1
 20424 0000EE9F E9D98D0000              	jmp L_error_incorrect_arity_simple
 20425                                  .L_lambda_simple_arity_check_ok_0072:
 20426 0000EEA4 C8000000                	enter 0, 0
 20427                                  	; preparing a non-tail-call
 20428 0000EEA8 488B0425[C0120000]      	mov rax, qword [free_var_75]	; free var char=?
 20429 0000EEB0 803805                  	cmp byte [rax], T_undefined
 20430 0000EEB3 0F84DE8C0000            	je L_error_fvar_undefined
 20431 0000EEB9 50                      	push rax
 20432 0000EEBA 488B0425[AF120000]      	mov rax, qword [free_var_74]	; free var char<?
 20433 0000EEC2 803805                  	cmp byte [rax], T_undefined
 20434 0000EEC5 0F84CC8C0000            	je L_error_fvar_undefined
 20435 0000EECB 50                      	push rax
 20436 0000EECC 6A02                    	push 2	; arg count
 20437 0000EECE 488B4520                	mov rax, PARAM(0)	; param make-string<?
 20438 0000EED2 803804                  	cmp byte [rax], T_closure
 20439 0000EED5 0F85408D0000            	jne L_error_non_closure
 20440 0000EEDB FF7001                  	push SOB_CLOSURE_ENV(rax)
 20441 0000EEDE FF5009                  	call SOB_CLOSURE_CODE(rax)
 20442 0000EEE1 48890425[AB160000]      	mov qword [free_var_134], rax
 20443 0000EEE9 48B8-                   	mov rax, sob_void
 20443 0000EEEB [0000000000000000] 
 20444                                  
 20445                                  	; preparing a non-tail-call
 20446 0000EEF3 488B0425[49120000]      	mov rax, qword [free_var_68]	; free var char-ci=?
 20447 0000EEFB 803805                  	cmp byte [rax], T_undefined
 20448 0000EEFE 0F84938C0000            	je L_error_fvar_undefined
 20449 0000EF04 50                      	push rax
 20450 0000EF05 488B0425[38120000]      	mov rax, qword [free_var_67]	; free var char-ci<?
 20451 0000EF0D 803805                  	cmp byte [rax], T_undefined
 20452 0000EF10 0F84818C0000            	je L_error_fvar_undefined
 20453 0000EF16 50                      	push rax
 20454 0000EF17 6A02                    	push 2	; arg count
 20455 0000EF19 488B4520                	mov rax, PARAM(0)	; param make-string<?
 20456 0000EF1D 803804                  	cmp byte [rax], T_closure
 20457 0000EF20 0F85F58C0000            	jne L_error_non_closure
 20458 0000EF26 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20459 0000EF29 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20460 0000EF2C 48890425[DF150000]      	mov qword [free_var_122], rax
 20461 0000EF34 48B8-                   	mov rax, sob_void
 20461 0000EF36 [0000000000000000] 
 20462                                  
 20463                                  	; preparing a non-tail-call
 20464 0000EF3E 488B0425[C0120000]      	mov rax, qword [free_var_75]	; free var char=?
 20465 0000EF46 803805                  	cmp byte [rax], T_undefined
 20466 0000EF49 0F84488C0000            	je L_error_fvar_undefined
 20467 0000EF4F 50                      	push rax
 20468 0000EF50 488B0425[E2120000]      	mov rax, qword [free_var_77]	; free var char>?
 20469 0000EF58 803805                  	cmp byte [rax], T_undefined
 20470 0000EF5B 0F84368C0000            	je L_error_fvar_undefined
 20471 0000EF61 50                      	push rax
 20472 0000EF62 6A02                    	push 2	; arg count
 20473 0000EF64 488B4520                	mov rax, PARAM(0)	; param make-string<?
 20474 0000EF68 803804                  	cmp byte [rax], T_closure
 20475 0000EF6B 0F85AA8C0000            	jne L_error_non_closure
 20476 0000EF71 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20477 0000EF74 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20478 0000EF77 48890425[DE160000]      	mov qword [free_var_137], rax
 20479 0000EF7F 48B8-                   	mov rax, sob_void
 20479 0000EF81 [0000000000000000] 
 20480                                  
 20481                                  	; preparing a non-tail-call
 20482 0000EF89 488B0425[49120000]      	mov rax, qword [free_var_68]	; free var char-ci=?
 20483 0000EF91 803805                  	cmp byte [rax], T_undefined
 20484 0000EF94 0F84FD8B0000            	je L_error_fvar_undefined
 20485 0000EF9A 50                      	push rax
 20486 0000EF9B 488B0425[6B120000]      	mov rax, qword [free_var_70]	; free var char-ci>?
 20487 0000EFA3 803805                  	cmp byte [rax], T_undefined
 20488 0000EFA6 0F84EB8B0000            	je L_error_fvar_undefined
 20489 0000EFAC 50                      	push rax
 20490 0000EFAD 6A02                    	push 2	; arg count
 20491 0000EFAF 488B4520                	mov rax, PARAM(0)	; param make-string<?
 20492 0000EFB3 803804                  	cmp byte [rax], T_closure
 20493 0000EFB6 0F855F8C0000            	jne L_error_non_closure
 20494 0000EFBC FF7001                  	push SOB_CLOSURE_ENV(rax)
 20495 0000EFBF FF5009                  	call SOB_CLOSURE_CODE(rax)
 20496 0000EFC2 48890425[12160000]      	mov qword [free_var_125], rax
 20497 0000EFCA 48B8-                   	mov rax, sob_void
 20497 0000EFCC [0000000000000000] 
 20498 0000EFD4 C9                      	leave
 20499 0000EFD5 C21800                  	ret AND_KILL_FRAME(1)
 20500                                  .L_lambda_simple_end_0072:	; new closure is in rax
 20501 0000EFD8 803804                  	cmp byte [rax], T_closure
 20502 0000EFDB 0F853A8C0000            	jne L_error_non_closure
 20503 0000EFE1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20504 0000EFE4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20505                                  
 20506 0000EFE7 4889C7                  	mov rdi, rax
 20507 0000EFEA E82A8F0000              	call print_sexpr_if_not_void
 20508                                  	; preparing a non-tail-call
 20509 0000EFEF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20510 0000EFF4 E8CB8C0000              	call malloc
 20511 0000EFF9 50                      	push rax
 20512 0000EFFA BF00000000              	mov rdi, 8 * 0	; new rib
 20513 0000EFFF E8C08C0000              	call malloc
 20514 0000F004 50                      	push rax
 20515 0000F005 BF08000000              	mov rdi, 8 * 1	; extended env
 20516 0000F00A E8B58C0000              	call malloc
 20517 0000F00F 488B7D10                	mov rdi, ENV
 20518 0000F013 BE00000000              	mov rsi, 0
 20519 0000F018 BA01000000              	mov rdx, 1
 20520                                  .L_lambda_simple_env_loop_0073:	; ext_env[i + 1] <-- env[i]
 20521 0000F01D 4883FE00                	cmp rsi, 0
 20522 0000F021 7410                    	je .L_lambda_simple_env_end_0073
 20523 0000F023 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20524 0000F027 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20525 0000F02B 48FFC6                  	inc rsi
 20526 0000F02E 48FFC2                  	inc rdx
 20527 0000F031 EBEA                    	jmp .L_lambda_simple_env_loop_0073
 20528                                  .L_lambda_simple_env_end_0073:
 20529 0000F033 5B                      	pop rbx
 20530 0000F034 BE00000000              	mov rsi, 0
 20531                                  .L_lambda_simple_params_loop_0073:	; copy params
 20532 0000F039 4883FE00                	cmp rsi, 0
 20533 0000F03D 740E                    	je .L_lambda_simple_params_end_0073
 20534 0000F03F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20535 0000F044 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20536 0000F048 48FFC6                  	inc rsi
 20537 0000F04B EBEC                    	jmp .L_lambda_simple_params_loop_0073
 20538                                  .L_lambda_simple_params_end_0073:
 20539 0000F04D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20540 0000F050 4889C3                  	mov rbx, rax
 20541 0000F053 58                      	pop rax
 20542 0000F054 C60004                  	mov byte [rax], T_closure
 20543 0000F057 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20544 0000F05B 48C74009[68F00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0073
 20545 0000F063 E9800D0000              	jmp .L_lambda_simple_end_0073
 20546                                  .L_lambda_simple_code_0073:	; lambda-simple body
 20547 0000F068 48837C241002            	cmp qword [rsp + 8 * 2], 2
 20548 0000F06E 740B                    	je .L_lambda_simple_arity_check_ok_0073
 20549 0000F070 FF742410                	push qword [rsp + 8 * 2]
 20550 0000F074 6A02                    	push 2
 20551 0000F076 E9028C0000              	jmp L_error_incorrect_arity_simple
 20552                                  .L_lambda_simple_arity_check_ok_0073:
 20553 0000F07B C8000000                	enter 0, 0
 20554                                  	; preparing a tail-call
 20555 0000F07F 48B8-                   	mov rax, L_constants + 1993
 20555 0000F081 [C907000000000000] 
 20556 0000F089 50                      	push rax
 20557 0000F08A 6A01                    	push 1	; arg count
 20558 0000F08C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20559 0000F091 E82E8C0000              	call malloc
 20560 0000F096 50                      	push rax
 20561 0000F097 BF10000000              	mov rdi, 8 * 2	; new rib
 20562 0000F09C E8238C0000              	call malloc
 20563 0000F0A1 50                      	push rax
 20564 0000F0A2 BF10000000              	mov rdi, 8 * 2	; extended env
 20565 0000F0A7 E8188C0000              	call malloc
 20566 0000F0AC 488B7D10                	mov rdi, ENV
 20567 0000F0B0 BE00000000              	mov rsi, 0
 20568 0000F0B5 BA01000000              	mov rdx, 1
 20569                                  .L_lambda_simple_env_loop_0074:	; ext_env[i + 1] <-- env[i]
 20570 0000F0BA 4883FE01                	cmp rsi, 1
 20571 0000F0BE 7410                    	je .L_lambda_simple_env_end_0074
 20572 0000F0C0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20573 0000F0C4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20574 0000F0C8 48FFC6                  	inc rsi
 20575 0000F0CB 48FFC2                  	inc rdx
 20576 0000F0CE EBEA                    	jmp .L_lambda_simple_env_loop_0074
 20577                                  .L_lambda_simple_env_end_0074:
 20578 0000F0D0 5B                      	pop rbx
 20579 0000F0D1 BE00000000              	mov rsi, 0
 20580                                  .L_lambda_simple_params_loop_0074:	; copy params
 20581 0000F0D6 4883FE02                	cmp rsi, 2
 20582 0000F0DA 740E                    	je .L_lambda_simple_params_end_0074
 20583 0000F0DC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20584 0000F0E1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20585 0000F0E5 48FFC6                  	inc rsi
 20586 0000F0E8 EBEC                    	jmp .L_lambda_simple_params_loop_0074
 20587                                  .L_lambda_simple_params_end_0074:
 20588 0000F0EA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20589 0000F0ED 4889C3                  	mov rbx, rax
 20590 0000F0F0 58                      	pop rax
 20591 0000F0F1 C60004                  	mov byte [rax], T_closure
 20592 0000F0F4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20593 0000F0F8 48C74009[05F10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0074
 20594 0000F100 E98B0C0000              	jmp .L_lambda_simple_end_0074
 20595                                  .L_lambda_simple_code_0074:	; lambda-simple body
 20596 0000F105 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20597 0000F10B 740B                    	je .L_lambda_simple_arity_check_ok_0074
 20598 0000F10D FF742410                	push qword [rsp + 8 * 2]
 20599 0000F111 6A01                    	push 1
 20600 0000F113 E9658B0000              	jmp L_error_incorrect_arity_simple
 20601                                  .L_lambda_simple_arity_check_ok_0074:
 20602 0000F118 C8000000                	enter 0, 0
 20603 0000F11C BF08000000              	mov rdi, 8*1
 20604 0000F121 E89E8B0000              	call malloc
 20605 0000F126 488B5D20                	mov rbx, PARAM(0)
 20606 0000F12A 488918                  	mov qword[rax], rbx
 20607 0000F12D 48894520                	mov PARAM(0), rax
 20608 0000F131 48B8-                   	mov rax, sob_void
 20608 0000F133 [0000000000000000] 
 20609                                  
 20610 0000F13B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20611 0000F140 E87F8B0000              	call malloc
 20612 0000F145 50                      	push rax
 20613 0000F146 BF08000000              	mov rdi, 8 * 1	; new rib
 20614 0000F14B E8748B0000              	call malloc
 20615 0000F150 50                      	push rax
 20616 0000F151 BF18000000              	mov rdi, 8 * 3	; extended env
 20617 0000F156 E8698B0000              	call malloc
 20618 0000F15B 488B7D10                	mov rdi, ENV
 20619 0000F15F BE00000000              	mov rsi, 0
 20620 0000F164 BA01000000              	mov rdx, 1
 20621                                  .L_lambda_simple_env_loop_0075:	; ext_env[i + 1] <-- env[i]
 20622 0000F169 4883FE02                	cmp rsi, 2
 20623 0000F16D 7410                    	je .L_lambda_simple_env_end_0075
 20624 0000F16F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20625 0000F173 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20626 0000F177 48FFC6                  	inc rsi
 20627 0000F17A 48FFC2                  	inc rdx
 20628 0000F17D EBEA                    	jmp .L_lambda_simple_env_loop_0075
 20629                                  .L_lambda_simple_env_end_0075:
 20630 0000F17F 5B                      	pop rbx
 20631 0000F180 BE00000000              	mov rsi, 0
 20632                                  .L_lambda_simple_params_loop_0075:	; copy params
 20633 0000F185 4883FE01                	cmp rsi, 1
 20634 0000F189 740E                    	je .L_lambda_simple_params_end_0075
 20635 0000F18B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20636 0000F190 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20637 0000F194 48FFC6                  	inc rsi
 20638 0000F197 EBEC                    	jmp .L_lambda_simple_params_loop_0075
 20639                                  .L_lambda_simple_params_end_0075:
 20640 0000F199 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20641 0000F19C 4889C3                  	mov rbx, rax
 20642 0000F19F 58                      	pop rax
 20643 0000F1A0 C60004                  	mov byte [rax], T_closure
 20644 0000F1A3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20645 0000F1A7 48C74009[B4F10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0075
 20646 0000F1AF E952020000              	jmp .L_lambda_simple_end_0075
 20647                                  .L_lambda_simple_code_0075:	; lambda-simple body
 20648 0000F1B4 48837C241005            	cmp qword [rsp + 8 * 2], 5
 20649 0000F1BA 740B                    	je .L_lambda_simple_arity_check_ok_0075
 20650 0000F1BC FF742410                	push qword [rsp + 8 * 2]
 20651 0000F1C0 6A05                    	push 5
 20652 0000F1C2 E9B68A0000              	jmp L_error_incorrect_arity_simple
 20653                                  .L_lambda_simple_arity_check_ok_0075:
 20654 0000F1C7 C8000000                	enter 0, 0
 20655                                  	; preparing a non-tail-call
 20656 0000F1CB 488B4530                	mov rax, PARAM(2)	; param len1
 20657 0000F1CF 50                      	push rax
 20658 0000F1D0 488B4520                	mov rax, PARAM(0)	; param i
 20659 0000F1D4 50                      	push rax
 20660 0000F1D5 6A02                    	push 2	; arg count
 20661 0000F1D7 488B0425[2B0E0000]      	mov rax, qword [free_var_6]	; free var =
 20662 0000F1DF 803805                  	cmp byte [rax], T_undefined
 20663 0000F1E2 0F84AF890000            	je L_error_fvar_undefined
 20664 0000F1E8 803804                  	cmp byte [rax], T_closure
 20665 0000F1EB 0F852A8A0000            	jne L_error_non_closure
 20666 0000F1F1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20667 0000F1F4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20668 0000F1F7 483D[02000000]          	cmp rax, sob_boolean_false
 20669 0000F1FD 0F85FF010000            	jne .L_or_end_000d
 20670                                  	; preparing a non-tail-call
 20671                                  	; preparing a non-tail-call
 20672 0000F203 488B4520                	mov rax, PARAM(0)	; param i
 20673 0000F207 50                      	push rax
 20674 0000F208 488B4538                	mov rax, PARAM(3)	; param str2
 20675 0000F20C 50                      	push rax
 20676 0000F20D 6A02                    	push 2	; arg count
 20677 0000F20F 488B0425[45160000]      	mov rax, qword [free_var_128]	; free var string-ref
 20678 0000F217 803805                  	cmp byte [rax], T_undefined
 20679 0000F21A 0F8477890000            	je L_error_fvar_undefined
 20680 0000F220 803804                  	cmp byte [rax], T_closure
 20681 0000F223 0F85F2890000            	jne L_error_non_closure
 20682 0000F229 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20683 0000F22C FF5009                  	call SOB_CLOSURE_CODE(rax)
 20684 0000F22F 50                      	push rax
 20685                                  	; preparing a non-tail-call
 20686 0000F230 488B4520                	mov rax, PARAM(0)	; param i
 20687 0000F234 50                      	push rax
 20688 0000F235 488B4528                	mov rax, PARAM(1)	; param str1
 20689 0000F239 50                      	push rax
 20690 0000F23A 6A02                    	push 2	; arg count
 20691 0000F23C 488B0425[45160000]      	mov rax, qword [free_var_128]	; free var string-ref
 20692 0000F244 803805                  	cmp byte [rax], T_undefined
 20693 0000F247 0F844A890000            	je L_error_fvar_undefined
 20694 0000F24D 803804                  	cmp byte [rax], T_closure
 20695 0000F250 0F85C5890000            	jne L_error_non_closure
 20696 0000F256 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20697 0000F259 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20698 0000F25C 50                      	push rax
 20699 0000F25D 6A02                    	push 2	; arg count
 20700 0000F25F 488B4510                	mov rax, ENV
 20701 0000F263 488B4008                	mov rax, qword [rax + 8 * 1]
 20702 0000F267 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char<?
 20703 0000F26A 803804                  	cmp byte [rax], T_closure
 20704 0000F26D 0F85A8890000            	jne L_error_non_closure
 20705 0000F273 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20706 0000F276 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20707 0000F279 483D[02000000]          	cmp rax, sob_boolean_false
 20708 0000F27F 0F857D010000            	jne .L_or_end_000d
 20709                                  	; preparing a non-tail-call
 20710 0000F285 488B4530                	mov rax, PARAM(2)	; param len1
 20711 0000F289 50                      	push rax
 20712 0000F28A 488B4520                	mov rax, PARAM(0)	; param i
 20713 0000F28E 50                      	push rax
 20714 0000F28F 6A02                    	push 2	; arg count
 20715 0000F291 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 20716 0000F299 803805                  	cmp byte [rax], T_undefined
 20717 0000F29C 0F84F5880000            	je L_error_fvar_undefined
 20718 0000F2A2 803804                  	cmp byte [rax], T_closure
 20719 0000F2A5 0F8570890000            	jne L_error_non_closure
 20720 0000F2AB FF7001                  	push SOB_CLOSURE_ENV(rax)
 20721 0000F2AE FF5009                  	call SOB_CLOSURE_CODE(rax)
 20722 0000F2B1 483D[02000000]          	cmp rax, sob_boolean_false
 20723 0000F2B7 0F843B010000            	je .L_if_else_0061
 20724                                  	; preparing a non-tail-call
 20725                                  	; preparing a non-tail-call
 20726 0000F2BD 488B4520                	mov rax, PARAM(0)	; param i
 20727 0000F2C1 50                      	push rax
 20728 0000F2C2 488B4538                	mov rax, PARAM(3)	; param str2
 20729 0000F2C6 50                      	push rax
 20730 0000F2C7 6A02                    	push 2	; arg count
 20731 0000F2C9 488B0425[45160000]      	mov rax, qword [free_var_128]	; free var string-ref
 20732 0000F2D1 803805                  	cmp byte [rax], T_undefined
 20733 0000F2D4 0F84BD880000            	je L_error_fvar_undefined
 20734 0000F2DA 803804                  	cmp byte [rax], T_closure
 20735 0000F2DD 0F8538890000            	jne L_error_non_closure
 20736 0000F2E3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20737 0000F2E6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20738 0000F2E9 50                      	push rax
 20739                                  	; preparing a non-tail-call
 20740 0000F2EA 488B4520                	mov rax, PARAM(0)	; param i
 20741 0000F2EE 50                      	push rax
 20742 0000F2EF 488B4528                	mov rax, PARAM(1)	; param str1
 20743 0000F2F3 50                      	push rax
 20744 0000F2F4 6A02                    	push 2	; arg count
 20745 0000F2F6 488B0425[45160000]      	mov rax, qword [free_var_128]	; free var string-ref
 20746 0000F2FE 803805                  	cmp byte [rax], T_undefined
 20747 0000F301 0F8490880000            	je L_error_fvar_undefined
 20748 0000F307 803804                  	cmp byte [rax], T_closure
 20749 0000F30A 0F850B890000            	jne L_error_non_closure
 20750 0000F310 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20751 0000F313 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20752 0000F316 50                      	push rax
 20753 0000F317 6A02                    	push 2	; arg count
 20754 0000F319 488B4510                	mov rax, ENV
 20755 0000F31D 488B4008                	mov rax, qword [rax + 8 * 1]
 20756 0000F321 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var char=?
 20757 0000F325 803804                  	cmp byte [rax], T_closure
 20758 0000F328 0F85ED880000            	jne L_error_non_closure
 20759 0000F32E FF7001                  	push SOB_CLOSURE_ENV(rax)
 20760 0000F331 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20761 0000F334 483D[02000000]          	cmp rax, sob_boolean_false
 20762 0000F33A 0F84AC000000            	je .L_if_else_0060
 20763                                  	; preparing a tail-call
 20764 0000F340 488B4540                	mov rax, PARAM(4)	; param len2
 20765 0000F344 50                      	push rax
 20766 0000F345 488B4538                	mov rax, PARAM(3)	; param str2
 20767 0000F349 50                      	push rax
 20768 0000F34A 488B4530                	mov rax, PARAM(2)	; param len1
 20769 0000F34E 50                      	push rax
 20770 0000F34F 488B4528                	mov rax, PARAM(1)	; param str1
 20771 0000F353 50                      	push rax
 20772                                  	; preparing a non-tail-call
 20773 0000F354 48B8-                   	mov rax, L_constants + 2270
 20773 0000F356 [DE08000000000000] 
 20774 0000F35E 50                      	push rax
 20775 0000F35F 488B4520                	mov rax, PARAM(0)	; param i
 20776 0000F363 50                      	push rax
 20777 0000F364 6A02                    	push 2	; arg count
 20778 0000F366 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 20779 0000F36E 803805                  	cmp byte [rax], T_undefined
 20780 0000F371 0F8420880000            	je L_error_fvar_undefined
 20781 0000F377 803804                  	cmp byte [rax], T_closure
 20782 0000F37A 0F859B880000            	jne L_error_non_closure
 20783 0000F380 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20784 0000F383 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20785 0000F386 50                      	push rax
 20786 0000F387 6A05                    	push 5	; arg count
 20787 0000F389 488B4510                	mov rax, ENV
 20788 0000F38D 488B00                  	mov rax, qword [rax + 8 * 0]
 20789 0000F390 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20790 0000F393 488B00                  	mov rax, qword [rax]
 20791 0000F396 803804                  	cmp byte [rax], T_closure
 20792 0000F399 0F857C880000            	jne L_error_non_closure
 20793 0000F39F FF7001                  	push SOB_CLOSURE_ENV(rax)
 20794 0000F3A2 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 20795 0000F3A5 FF7500                  	push qword[rbp]
 20796 0000F3A8 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 20797 0000F3AB 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 20798 0000F3AF 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 20799 0000F3B3 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 20800 0000F3B7 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 20801 0000F3BA 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 20802 0000F3BD 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 20803 0000F3C2 4983C103                	add r9, 3 	 ;for getting to the params
 20804 0000F3C6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 20805 0000F3CA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 20806                                  .L_tc_recycle_frame_loop_00bd:
 20807 0000F3CD 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 20808 0000F3D0 7410                    	je .L_tc_recycle_frame_done_00bd
 20809 0000F3D2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 20810 0000F3D5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 20811 0000F3D8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 20812 0000F3DC 4983E808                	sub r8, 8	 ;move the top of the stack one down
 20813 0000F3E0 EBEB                    	jmp .L_tc_recycle_frame_loop_00bd
 20814                                  .L_tc_recycle_frame_done_00bd:
 20815 0000F3E2 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 20816 0000F3E3 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 20817 0000F3E7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20818 0000F3EA EB0A                    	jmp .L_if_end_0060
 20819                                  .L_if_else_0060:
 20820 0000F3EC 48B8-                   	mov rax, L_constants + 2
 20820 0000F3EE [0200000000000000] 
 20821                                  .L_if_end_0060:
 20822 0000F3F6 EB0A                    	jmp .L_if_end_0061
 20823                                  .L_if_else_0061:
 20824 0000F3F8 48B8-                   	mov rax, L_constants + 2
 20824 0000F3FA [0200000000000000] 
 20825                                  .L_if_end_0061:
 20826                                  .L_or_end_000d:
 20827 0000F402 C9                      	leave
 20828 0000F403 C23800                  	ret AND_KILL_FRAME(5)
 20829                                  .L_lambda_simple_end_0075:	; new closure is in rax
 20830 0000F406 50                      	push rax
 20831 0000F407 488B4520                	mov rax, PARAM(0)	; param run
 20832 0000F40B 8F00                    	pop qword [rax]
 20833 0000F40D 48B8-                   	mov rax, sob_void
 20833 0000F40F [0000000000000000] 
 20834                                  
 20835                                  	; preparing a tail-call
 20836 0000F417 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20837 0000F41C E8A3880000              	call malloc
 20838 0000F421 50                      	push rax
 20839 0000F422 BF08000000              	mov rdi, 8 * 1	; new rib
 20840 0000F427 E898880000              	call malloc
 20841 0000F42C 50                      	push rax
 20842 0000F42D BF18000000              	mov rdi, 8 * 3	; extended env
 20843 0000F432 E88D880000              	call malloc
 20844 0000F437 488B7D10                	mov rdi, ENV
 20845 0000F43B BE00000000              	mov rsi, 0
 20846 0000F440 BA01000000              	mov rdx, 1
 20847                                  .L_lambda_simple_env_loop_0076:	; ext_env[i + 1] <-- env[i]
 20848 0000F445 4883FE02                	cmp rsi, 2
 20849 0000F449 7410                    	je .L_lambda_simple_env_end_0076
 20850 0000F44B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20851 0000F44F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20852 0000F453 48FFC6                  	inc rsi
 20853 0000F456 48FFC2                  	inc rdx
 20854 0000F459 EBEA                    	jmp .L_lambda_simple_env_loop_0076
 20855                                  .L_lambda_simple_env_end_0076:
 20856 0000F45B 5B                      	pop rbx
 20857 0000F45C BE00000000              	mov rsi, 0
 20858                                  .L_lambda_simple_params_loop_0076:	; copy params
 20859 0000F461 4883FE01                	cmp rsi, 1
 20860 0000F465 740E                    	je .L_lambda_simple_params_end_0076
 20861 0000F467 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20862 0000F46C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20863 0000F470 48FFC6                  	inc rsi
 20864 0000F473 EBEC                    	jmp .L_lambda_simple_params_loop_0076
 20865                                  .L_lambda_simple_params_end_0076:
 20866 0000F475 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20867 0000F478 4889C3                  	mov rbx, rax
 20868 0000F47B 58                      	pop rax
 20869 0000F47C C60004                  	mov byte [rax], T_closure
 20870 0000F47F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20871 0000F483 48C74009[90F40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0076
 20872 0000F48B E9B2020000              	jmp .L_lambda_simple_end_0076
 20873                                  .L_lambda_simple_code_0076:	; lambda-simple body
 20874 0000F490 48837C241002            	cmp qword [rsp + 8 * 2], 2
 20875 0000F496 740B                    	je .L_lambda_simple_arity_check_ok_0076
 20876 0000F498 FF742410                	push qword [rsp + 8 * 2]
 20877 0000F49C 6A02                    	push 2
 20878 0000F49E E9DA870000              	jmp L_error_incorrect_arity_simple
 20879                                  .L_lambda_simple_arity_check_ok_0076:
 20880 0000F4A3 C8000000                	enter 0, 0
 20881                                  	; preparing a tail-call
 20882                                  	; preparing a non-tail-call
 20883 0000F4A7 488B4528                	mov rax, PARAM(1)	; param str2
 20884 0000F4AB 50                      	push rax
 20885 0000F4AC 6A01                    	push 1	; arg count
 20886 0000F4AE 488B0425[34160000]      	mov rax, qword [free_var_127]	; free var string-length
 20887 0000F4B6 803805                  	cmp byte [rax], T_undefined
 20888 0000F4B9 0F84D8860000            	je L_error_fvar_undefined
 20889 0000F4BF 803804                  	cmp byte [rax], T_closure
 20890 0000F4C2 0F8553870000            	jne L_error_non_closure
 20891 0000F4C8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20892 0000F4CB FF5009                  	call SOB_CLOSURE_CODE(rax)
 20893 0000F4CE 50                      	push rax
 20894                                  	; preparing a non-tail-call
 20895 0000F4CF 488B4520                	mov rax, PARAM(0)	; param str1
 20896 0000F4D3 50                      	push rax
 20897 0000F4D4 6A01                    	push 1	; arg count
 20898 0000F4D6 488B0425[34160000]      	mov rax, qword [free_var_127]	; free var string-length
 20899 0000F4DE 803805                  	cmp byte [rax], T_undefined
 20900 0000F4E1 0F84B0860000            	je L_error_fvar_undefined
 20901 0000F4E7 803804                  	cmp byte [rax], T_closure
 20902 0000F4EA 0F852B870000            	jne L_error_non_closure
 20903 0000F4F0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20904 0000F4F3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20905 0000F4F6 50                      	push rax
 20906 0000F4F7 6A02                    	push 2	; arg count
 20907 0000F4F9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20908 0000F4FE E8C1870000              	call malloc
 20909 0000F503 50                      	push rax
 20910 0000F504 BF10000000              	mov rdi, 8 * 2	; new rib
 20911 0000F509 E8B6870000              	call malloc
 20912 0000F50E 50                      	push rax
 20913 0000F50F BF20000000              	mov rdi, 8 * 4	; extended env
 20914 0000F514 E8AB870000              	call malloc
 20915 0000F519 488B7D10                	mov rdi, ENV
 20916 0000F51D BE00000000              	mov rsi, 0
 20917 0000F522 BA01000000              	mov rdx, 1
 20918                                  .L_lambda_simple_env_loop_0077:	; ext_env[i + 1] <-- env[i]
 20919 0000F527 4883FE03                	cmp rsi, 3
 20920 0000F52B 7410                    	je .L_lambda_simple_env_end_0077
 20921 0000F52D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20922 0000F531 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20923 0000F535 48FFC6                  	inc rsi
 20924 0000F538 48FFC2                  	inc rdx
 20925 0000F53B EBEA                    	jmp .L_lambda_simple_env_loop_0077
 20926                                  .L_lambda_simple_env_end_0077:
 20927 0000F53D 5B                      	pop rbx
 20928 0000F53E BE00000000              	mov rsi, 0
 20929                                  .L_lambda_simple_params_loop_0077:	; copy params
 20930 0000F543 4883FE02                	cmp rsi, 2
 20931 0000F547 740E                    	je .L_lambda_simple_params_end_0077
 20932 0000F549 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20933 0000F54E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20934 0000F552 48FFC6                  	inc rsi
 20935 0000F555 EBEC                    	jmp .L_lambda_simple_params_loop_0077
 20936                                  .L_lambda_simple_params_end_0077:
 20937 0000F557 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20938 0000F55A 4889C3                  	mov rbx, rax
 20939 0000F55D 58                      	pop rax
 20940 0000F55E C60004                  	mov byte [rax], T_closure
 20941 0000F561 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20942 0000F565 48C74009[72F50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0077
 20943 0000F56D E978010000              	jmp .L_lambda_simple_end_0077
 20944                                  .L_lambda_simple_code_0077:	; lambda-simple body
 20945 0000F572 48837C241002            	cmp qword [rsp + 8 * 2], 2
 20946 0000F578 740B                    	je .L_lambda_simple_arity_check_ok_0077
 20947 0000F57A FF742410                	push qword [rsp + 8 * 2]
 20948 0000F57E 6A02                    	push 2
 20949 0000F580 E9F8860000              	jmp L_error_incorrect_arity_simple
 20950                                  .L_lambda_simple_arity_check_ok_0077:
 20951 0000F585 C8000000                	enter 0, 0
 20952                                  	; preparing a non-tail-call
 20953 0000F589 488B4528                	mov rax, PARAM(1)	; param len2
 20954 0000F58D 50                      	push rax
 20955 0000F58E 488B4520                	mov rax, PARAM(0)	; param len1
 20956 0000F592 50                      	push rax
 20957 0000F593 6A02                    	push 2	; arg count
 20958 0000F595 488B0425[1A0E0000]      	mov rax, qword [free_var_5]	; free var <=
 20959 0000F59D 803805                  	cmp byte [rax], T_undefined
 20960 0000F5A0 0F84F1850000            	je L_error_fvar_undefined
 20961 0000F5A6 803804                  	cmp byte [rax], T_closure
 20962 0000F5A9 0F856C860000            	jne L_error_non_closure
 20963 0000F5AF FF7001                  	push SOB_CLOSURE_ENV(rax)
 20964 0000F5B2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20965 0000F5B5 483D[02000000]          	cmp rax, sob_boolean_false
 20966 0000F5BB 0F8495000000            	je .L_if_else_0062
 20967                                  	; preparing a tail-call
 20968 0000F5C1 488B4528                	mov rax, PARAM(1)	; param len2
 20969 0000F5C5 50                      	push rax
 20970 0000F5C6 488B4510                	mov rax, ENV
 20971 0000F5CA 488B00                  	mov rax, qword [rax + 8 * 0]
 20972 0000F5CD 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 20973 0000F5D1 50                      	push rax
 20974 0000F5D2 488B4520                	mov rax, PARAM(0)	; param len1
 20975 0000F5D6 50                      	push rax
 20976 0000F5D7 488B4510                	mov rax, ENV
 20977 0000F5DB 488B00                  	mov rax, qword [rax + 8 * 0]
 20978 0000F5DE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 20979 0000F5E1 50                      	push rax
 20980 0000F5E2 48B8-                   	mov rax, L_constants + 2135
 20980 0000F5E4 [5708000000000000] 
 20981 0000F5EC 50                      	push rax
 20982 0000F5ED 6A05                    	push 5	; arg count
 20983 0000F5EF 488B4510                	mov rax, ENV
 20984 0000F5F3 488B4008                	mov rax, qword [rax + 8 * 1]
 20985 0000F5F7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20986 0000F5FA 488B00                  	mov rax, qword [rax]
 20987 0000F5FD 803804                  	cmp byte [rax], T_closure
 20988 0000F600 0F8515860000            	jne L_error_non_closure
 20989 0000F606 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20990 0000F609 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 20991 0000F60C FF7500                  	push qword[rbp]
 20992 0000F60F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 20993 0000F612 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 20994 0000F616 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 20995 0000F61A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 20996 0000F61E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 20997 0000F621 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 20998 0000F624 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 20999 0000F629 4983C103                	add r9, 3 	 ;for getting to the params
 21000 0000F62D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21001 0000F631 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21002                                  .L_tc_recycle_frame_loop_00be:
 21003 0000F634 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21004 0000F637 7410                    	je .L_tc_recycle_frame_done_00be
 21005 0000F639 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21006 0000F63C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21007 0000F63F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21008 0000F643 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21009 0000F647 EBEB                    	jmp .L_tc_recycle_frame_loop_00be
 21010                                  .L_tc_recycle_frame_done_00be:
 21011 0000F649 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21012 0000F64A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21013 0000F64E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21014 0000F651 E990000000              	jmp .L_if_end_0062
 21015                                  .L_if_else_0062:
 21016                                  	; preparing a tail-call
 21017 0000F656 488B4520                	mov rax, PARAM(0)	; param len1
 21018 0000F65A 50                      	push rax
 21019 0000F65B 488B4510                	mov rax, ENV
 21020 0000F65F 488B00                  	mov rax, qword [rax + 8 * 0]
 21021 0000F662 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 21022 0000F665 50                      	push rax
 21023 0000F666 488B4528                	mov rax, PARAM(1)	; param len2
 21024 0000F66A 50                      	push rax
 21025 0000F66B 488B4510                	mov rax, ENV
 21026 0000F66F 488B00                  	mov rax, qword [rax + 8 * 0]
 21027 0000F672 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 21028 0000F676 50                      	push rax
 21029 0000F677 48B8-                   	mov rax, L_constants + 2135
 21029 0000F679 [5708000000000000] 
 21030 0000F681 50                      	push rax
 21031 0000F682 6A05                    	push 5	; arg count
 21032 0000F684 488B4510                	mov rax, ENV
 21033 0000F688 488B4008                	mov rax, qword [rax + 8 * 1]
 21034 0000F68C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 21035 0000F68F 488B00                  	mov rax, qword [rax]
 21036 0000F692 803804                  	cmp byte [rax], T_closure
 21037 0000F695 0F8580850000            	jne L_error_non_closure
 21038 0000F69B FF7001                  	push SOB_CLOSURE_ENV(rax)
 21039 0000F69E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21040 0000F6A1 FF7500                  	push qword[rbp]
 21041 0000F6A4 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21042 0000F6A7 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21043 0000F6AB 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21044 0000F6AF 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21045 0000F6B3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21046 0000F6B6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21047 0000F6B9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21048 0000F6BE 4983C103                	add r9, 3 	 ;for getting to the params
 21049 0000F6C2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21050 0000F6C6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21051                                  .L_tc_recycle_frame_loop_00bf:
 21052 0000F6C9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21053 0000F6CC 7410                    	je .L_tc_recycle_frame_done_00bf
 21054 0000F6CE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21055 0000F6D1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21056 0000F6D4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21057 0000F6D8 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21058 0000F6DC EBEB                    	jmp .L_tc_recycle_frame_loop_00bf
 21059                                  .L_tc_recycle_frame_done_00bf:
 21060 0000F6DE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21061 0000F6DF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21062 0000F6E3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21063                                  .L_if_end_0062:
 21064 0000F6E6 C9                      	leave
 21065 0000F6E7 C22000                  	ret AND_KILL_FRAME(2)
 21066                                  .L_lambda_simple_end_0077:	; new closure is in rax
 21067 0000F6EA 803804                  	cmp byte [rax], T_closure
 21068 0000F6ED 0F8528850000            	jne L_error_non_closure
 21069 0000F6F3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21070 0000F6F6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21071 0000F6F9 FF7500                  	push qword[rbp]
 21072 0000F6FC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21073 0000F6FF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21074 0000F703 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21075 0000F707 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21076 0000F70B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21077 0000F70E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21078 0000F711 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21079 0000F716 4983C103                	add r9, 3 	 ;for getting to the params
 21080 0000F71A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21081 0000F71E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21082                                  .L_tc_recycle_frame_loop_00c0:
 21083 0000F721 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21084 0000F724 7410                    	je .L_tc_recycle_frame_done_00c0
 21085 0000F726 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21086 0000F729 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21087 0000F72C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21088 0000F730 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21089 0000F734 EBEB                    	jmp .L_tc_recycle_frame_loop_00c0
 21090                                  .L_tc_recycle_frame_done_00c0:
 21091 0000F736 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21092 0000F737 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21093 0000F73B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21094 0000F73E C9                      	leave
 21095 0000F73F C22000                  	ret AND_KILL_FRAME(2)
 21096                                  .L_lambda_simple_end_0076:	; new closure is in rax
 21097 0000F742 50                      	push rax
 21098 0000F743 6A01                    	push 1	; arg count
 21099 0000F745 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21100 0000F74A E875850000              	call malloc
 21101 0000F74F 50                      	push rax
 21102 0000F750 BF08000000              	mov rdi, 8 * 1	; new rib
 21103 0000F755 E86A850000              	call malloc
 21104 0000F75A 50                      	push rax
 21105 0000F75B BF18000000              	mov rdi, 8 * 3	; extended env
 21106 0000F760 E85F850000              	call malloc
 21107 0000F765 488B7D10                	mov rdi, ENV
 21108 0000F769 BE00000000              	mov rsi, 0
 21109 0000F76E BA01000000              	mov rdx, 1
 21110                                  .L_lambda_simple_env_loop_0078:	; ext_env[i + 1] <-- env[i]
 21111 0000F773 4883FE02                	cmp rsi, 2
 21112 0000F777 7410                    	je .L_lambda_simple_env_end_0078
 21113 0000F779 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21114 0000F77D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21115 0000F781 48FFC6                  	inc rsi
 21116 0000F784 48FFC2                  	inc rdx
 21117 0000F787 EBEA                    	jmp .L_lambda_simple_env_loop_0078
 21118                                  .L_lambda_simple_env_end_0078:
 21119 0000F789 5B                      	pop rbx
 21120 0000F78A BE00000000              	mov rsi, 0
 21121                                  .L_lambda_simple_params_loop_0078:	; copy params
 21122 0000F78F 4883FE01                	cmp rsi, 1
 21123 0000F793 740E                    	je .L_lambda_simple_params_end_0078
 21124 0000F795 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21125 0000F79A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21126 0000F79E 48FFC6                  	inc rsi
 21127 0000F7A1 EBEC                    	jmp .L_lambda_simple_params_loop_0078
 21128                                  .L_lambda_simple_params_end_0078:
 21129 0000F7A3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21130 0000F7A6 4889C3                  	mov rbx, rax
 21131 0000F7A9 58                      	pop rax
 21132 0000F7AA C60004                  	mov byte [rax], T_closure
 21133 0000F7AD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21134 0000F7B1 48C74009[BEF70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0078
 21135 0000F7B9 E97A050000              	jmp .L_lambda_simple_end_0078
 21136                                  .L_lambda_simple_code_0078:	; lambda-simple body
 21137 0000F7BE 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21138 0000F7C4 740B                    	je .L_lambda_simple_arity_check_ok_0078
 21139 0000F7C6 FF742410                	push qword [rsp + 8 * 2]
 21140 0000F7CA 6A01                    	push 1
 21141 0000F7CC E9AC840000              	jmp L_error_incorrect_arity_simple
 21142                                  .L_lambda_simple_arity_check_ok_0078:
 21143 0000F7D1 C8000000                	enter 0, 0
 21144                                  	; preparing a tail-call
 21145 0000F7D5 48B8-                   	mov rax, L_constants + 1993
 21145 0000F7D7 [C907000000000000] 
 21146 0000F7DF 50                      	push rax
 21147 0000F7E0 6A01                    	push 1	; arg count
 21148 0000F7E2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21149 0000F7E7 E8D8840000              	call malloc
 21150 0000F7EC 50                      	push rax
 21151 0000F7ED BF08000000              	mov rdi, 8 * 1	; new rib
 21152 0000F7F2 E8CD840000              	call malloc
 21153 0000F7F7 50                      	push rax
 21154 0000F7F8 BF20000000              	mov rdi, 8 * 4	; extended env
 21155 0000F7FD E8C2840000              	call malloc
 21156 0000F802 488B7D10                	mov rdi, ENV
 21157 0000F806 BE00000000              	mov rsi, 0
 21158 0000F80B BA01000000              	mov rdx, 1
 21159                                  .L_lambda_simple_env_loop_0079:	; ext_env[i + 1] <-- env[i]
 21160 0000F810 4883FE03                	cmp rsi, 3
 21161 0000F814 7410                    	je .L_lambda_simple_env_end_0079
 21162 0000F816 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21163 0000F81A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21164 0000F81E 48FFC6                  	inc rsi
 21165 0000F821 48FFC2                  	inc rdx
 21166 0000F824 EBEA                    	jmp .L_lambda_simple_env_loop_0079
 21167                                  .L_lambda_simple_env_end_0079:
 21168 0000F826 5B                      	pop rbx
 21169 0000F827 BE00000000              	mov rsi, 0
 21170                                  .L_lambda_simple_params_loop_0079:	; copy params
 21171 0000F82C 4883FE01                	cmp rsi, 1
 21172 0000F830 740E                    	je .L_lambda_simple_params_end_0079
 21173 0000F832 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21174 0000F837 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21175 0000F83B 48FFC6                  	inc rsi
 21176 0000F83E EBEC                    	jmp .L_lambda_simple_params_loop_0079
 21177                                  .L_lambda_simple_params_end_0079:
 21178 0000F840 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21179 0000F843 4889C3                  	mov rbx, rax
 21180 0000F846 58                      	pop rax
 21181 0000F847 C60004                  	mov byte [rax], T_closure
 21182 0000F84A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21183 0000F84E 48C74009[5BF80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0079
 21184 0000F856 E985040000              	jmp .L_lambda_simple_end_0079
 21185                                  .L_lambda_simple_code_0079:	; lambda-simple body
 21186 0000F85B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21187 0000F861 740B                    	je .L_lambda_simple_arity_check_ok_0079
 21188 0000F863 FF742410                	push qword [rsp + 8 * 2]
 21189 0000F867 6A01                    	push 1
 21190 0000F869 E90F840000              	jmp L_error_incorrect_arity_simple
 21191                                  .L_lambda_simple_arity_check_ok_0079:
 21192 0000F86E C8000000                	enter 0, 0
 21193 0000F872 BF08000000              	mov rdi, 8*1
 21194 0000F877 E848840000              	call malloc
 21195 0000F87C 488B5D20                	mov rbx, PARAM(0)
 21196 0000F880 488918                  	mov qword[rax], rbx
 21197 0000F883 48894520                	mov PARAM(0), rax
 21198 0000F887 48B8-                   	mov rax, sob_void
 21198 0000F889 [0000000000000000] 
 21199                                  
 21200 0000F891 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21201 0000F896 E829840000              	call malloc
 21202 0000F89B 50                      	push rax
 21203 0000F89C BF08000000              	mov rdi, 8 * 1	; new rib
 21204 0000F8A1 E81E840000              	call malloc
 21205 0000F8A6 50                      	push rax
 21206 0000F8A7 BF28000000              	mov rdi, 8 * 5	; extended env
 21207 0000F8AC E813840000              	call malloc
 21208 0000F8B1 488B7D10                	mov rdi, ENV
 21209 0000F8B5 BE00000000              	mov rsi, 0
 21210 0000F8BA BA01000000              	mov rdx, 1
 21211                                  .L_lambda_simple_env_loop_007a:	; ext_env[i + 1] <-- env[i]
 21212 0000F8BF 4883FE04                	cmp rsi, 4
 21213 0000F8C3 7410                    	je .L_lambda_simple_env_end_007a
 21214 0000F8C5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21215 0000F8C9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21216 0000F8CD 48FFC6                  	inc rsi
 21217 0000F8D0 48FFC2                  	inc rdx
 21218 0000F8D3 EBEA                    	jmp .L_lambda_simple_env_loop_007a
 21219                                  .L_lambda_simple_env_end_007a:
 21220 0000F8D5 5B                      	pop rbx
 21221 0000F8D6 BE00000000              	mov rsi, 0
 21222                                  .L_lambda_simple_params_loop_007a:	; copy params
 21223 0000F8DB 4883FE01                	cmp rsi, 1
 21224 0000F8DF 740E                    	je .L_lambda_simple_params_end_007a
 21225 0000F8E1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21226 0000F8E6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21227 0000F8EA 48FFC6                  	inc rsi
 21228 0000F8ED EBEC                    	jmp .L_lambda_simple_params_loop_007a
 21229                                  .L_lambda_simple_params_end_007a:
 21230 0000F8EF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21231 0000F8F2 4889C3                  	mov rbx, rax
 21232 0000F8F5 58                      	pop rax
 21233 0000F8F6 C60004                  	mov byte [rax], T_closure
 21234 0000F8F9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21235 0000F8FD 48C74009[0AF90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_007a
 21236 0000F905 E962010000              	jmp .L_lambda_simple_end_007a
 21237                                  .L_lambda_simple_code_007a:	; lambda-simple body
 21238 0000F90A 48837C241002            	cmp qword [rsp + 8 * 2], 2
 21239 0000F910 740B                    	je .L_lambda_simple_arity_check_ok_007a
 21240 0000F912 FF742410                	push qword [rsp + 8 * 2]
 21241 0000F916 6A02                    	push 2
 21242 0000F918 E960830000              	jmp L_error_incorrect_arity_simple
 21243                                  .L_lambda_simple_arity_check_ok_007a:
 21244 0000F91D C8000000                	enter 0, 0
 21245                                  	; preparing a non-tail-call
 21246 0000F921 488B4528                	mov rax, PARAM(1)	; param strs
 21247 0000F925 50                      	push rax
 21248 0000F926 6A01                    	push 1	; arg count
 21249 0000F928 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 21250 0000F930 803805                  	cmp byte [rax], T_undefined
 21251 0000F933 0F845E820000            	je L_error_fvar_undefined
 21252 0000F939 803804                  	cmp byte [rax], T_closure
 21253 0000F93C 0F85D9820000            	jne L_error_non_closure
 21254 0000F942 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21255 0000F945 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21256 0000F948 483D[02000000]          	cmp rax, sob_boolean_false
 21257 0000F94E 0F8514010000            	jne .L_or_end_000e
 21258                                  	; preparing a non-tail-call
 21259                                  	; preparing a non-tail-call
 21260 0000F954 488B4528                	mov rax, PARAM(1)	; param strs
 21261 0000F958 50                      	push rax
 21262 0000F959 6A01                    	push 1	; arg count
 21263 0000F95B 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 21264 0000F963 803805                  	cmp byte [rax], T_undefined
 21265 0000F966 0F842B820000            	je L_error_fvar_undefined
 21266 0000F96C 803804                  	cmp byte [rax], T_closure
 21267 0000F96F 0F85A6820000            	jne L_error_non_closure
 21268 0000F975 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21269 0000F978 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21270 0000F97B 50                      	push rax
 21271 0000F97C 488B4520                	mov rax, PARAM(0)	; param str
 21272 0000F980 50                      	push rax
 21273 0000F981 6A02                    	push 2	; arg count
 21274 0000F983 488B4510                	mov rax, ENV
 21275 0000F987 488B4008                	mov rax, qword [rax + 8 * 1]
 21276 0000F98B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var binary-string<=?
 21277 0000F98E 803804                  	cmp byte [rax], T_closure
 21278 0000F991 0F8584820000            	jne L_error_non_closure
 21279 0000F997 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21280 0000F99A FF5009                  	call SOB_CLOSURE_CODE(rax)
 21281 0000F99D 483D[02000000]          	cmp rax, sob_boolean_false
 21282 0000F9A3 0F84B5000000            	je .L_if_else_0063
 21283                                  	; preparing a tail-call
 21284                                  	; preparing a non-tail-call
 21285 0000F9A9 488B4528                	mov rax, PARAM(1)	; param strs
 21286 0000F9AD 50                      	push rax
 21287 0000F9AE 6A01                    	push 1	; arg count
 21288 0000F9B0 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
 21289 0000F9B8 803805                  	cmp byte [rax], T_undefined
 21290 0000F9BB 0F84D6810000            	je L_error_fvar_undefined
 21291 0000F9C1 803804                  	cmp byte [rax], T_closure
 21292 0000F9C4 0F8551820000            	jne L_error_non_closure
 21293 0000F9CA FF7001                  	push SOB_CLOSURE_ENV(rax)
 21294 0000F9CD FF5009                  	call SOB_CLOSURE_CODE(rax)
 21295 0000F9D0 50                      	push rax
 21296                                  	; preparing a non-tail-call
 21297 0000F9D1 488B4528                	mov rax, PARAM(1)	; param strs
 21298 0000F9D5 50                      	push rax
 21299 0000F9D6 6A01                    	push 1	; arg count
 21300 0000F9D8 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 21301 0000F9E0 803805                  	cmp byte [rax], T_undefined
 21302 0000F9E3 0F84AE810000            	je L_error_fvar_undefined
 21303 0000F9E9 803804                  	cmp byte [rax], T_closure
 21304 0000F9EC 0F8529820000            	jne L_error_non_closure
 21305 0000F9F2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21306 0000F9F5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21307 0000F9F8 50                      	push rax
 21308 0000F9F9 6A02                    	push 2	; arg count
 21309 0000F9FB 488B4510                	mov rax, ENV
 21310 0000F9FF 488B00                  	mov rax, qword [rax + 8 * 0]
 21311 0000FA02 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 21312 0000FA05 488B00                  	mov rax, qword [rax]
 21313 0000FA08 803804                  	cmp byte [rax], T_closure
 21314 0000FA0B 0F850A820000            	jne L_error_non_closure
 21315 0000FA11 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21316 0000FA14 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21317 0000FA17 FF7500                  	push qword[rbp]
 21318 0000FA1A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21319 0000FA1D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21320 0000FA21 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21321 0000FA25 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21322 0000FA29 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21323 0000FA2C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21324 0000FA2F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21325 0000FA34 4983C103                	add r9, 3 	 ;for getting to the params
 21326 0000FA38 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21327 0000FA3C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21328                                  .L_tc_recycle_frame_loop_00c1:
 21329 0000FA3F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21330 0000FA42 7410                    	je .L_tc_recycle_frame_done_00c1
 21331 0000FA44 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21332 0000FA47 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21333 0000FA4A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21334 0000FA4E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21335 0000FA52 EBEB                    	jmp .L_tc_recycle_frame_loop_00c1
 21336                                  .L_tc_recycle_frame_done_00c1:
 21337 0000FA54 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21338 0000FA55 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21339 0000FA59 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21340 0000FA5C EB0A                    	jmp .L_if_end_0063
 21341                                  .L_if_else_0063:
 21342 0000FA5E 48B8-                   	mov rax, L_constants + 2
 21342 0000FA60 [0200000000000000] 
 21343                                  .L_if_end_0063:
 21344                                  .L_or_end_000e:
 21345 0000FA68 C9                      	leave
 21346 0000FA69 C22000                  	ret AND_KILL_FRAME(2)
 21347                                  .L_lambda_simple_end_007a:	; new closure is in rax
 21348 0000FA6C 50                      	push rax
 21349 0000FA6D 488B4520                	mov rax, PARAM(0)	; param run
 21350 0000FA71 8F00                    	pop qword [rax]
 21351 0000FA73 48B8-                   	mov rax, sob_void
 21351 0000FA75 [0000000000000000] 
 21352                                  
 21353 0000FA7D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21354 0000FA82 E83D820000              	call malloc
 21355 0000FA87 50                      	push rax
 21356 0000FA88 BF08000000              	mov rdi, 8 * 1	; new rib
 21357 0000FA8D E832820000              	call malloc
 21358 0000FA92 50                      	push rax
 21359 0000FA93 BF28000000              	mov rdi, 8 * 5	; extended env
 21360 0000FA98 E827820000              	call malloc
 21361 0000FA9D 488B7D10                	mov rdi, ENV
 21362 0000FAA1 BE00000000              	mov rsi, 0
 21363 0000FAA6 BA01000000              	mov rdx, 1
 21364                                  .L_lambda_opt_env_loop_0012:	; ext_env[i + 1] <-- env[i]
 21365 0000FAAB 4883FE04                	cmp rsi, 4
 21366 0000FAAF 7410                    	je .L_lambda_opt_env_end_0012
 21367 0000FAB1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21368 0000FAB5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21369 0000FAB9 48FFC6                  	inc rsi
 21370 0000FABC 48FFC2                  	inc rdx
 21371 0000FABF EBEA                    	jmp .L_lambda_opt_env_loop_0012
 21372                                  .L_lambda_opt_env_end_0012:
 21373 0000FAC1 5B                      	pop rbx
 21374 0000FAC2 BE00000000              	mov rsi, 0
 21375                                  .L_lambda_opt_params_loop_0012:	; copy params
 21376 0000FAC7 4883FE01                	cmp rsi, 1
 21377 0000FACB 740E                    	je .L_lambda_opt_params_end_0012
 21378 0000FACD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21379 0000FAD2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21380 0000FAD6 48FFC6                  	inc rsi
 21381 0000FAD9 EBEC                    	jmp .L_lambda_opt_params_loop_0012
 21382                                  .L_lambda_opt_params_end_0012:
 21383 0000FADB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21384 0000FADE 4889C3                  	mov rbx, rax
 21385 0000FAE1 58                      	pop rax
 21386 0000FAE2 C60004                  	mov byte [rax], T_closure
 21387 0000FAE5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21388 0000FAE9 48C74009[F6FA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0012
 21389 0000FAF1 E9E6010000              	jmp .L_lambda_opt_end_0012
 21390                                  .L_lambda_opt_code_0012:	; lambda-opt body
 21391 0000FAF6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21392 0000FAFC 7411                    	je .L_lambda_opt_arity_check_exact_0012
 21393 0000FAFE 0F8FBF000000            	jg .L_lambda_opt_arity_check_more_0012
 21394 0000FB04 FF742410                	push qword [rsp + 8 * 2]
 21395 0000FB08 6A01                    	push 1
 21396 0000FB0A E982810000              	jmp L_error_incorrect_arity_opt
 21397                                  .L_lambda_opt_arity_check_exact_0012:
 21398 0000FB0F 4883EC08                	sub rsp, 8
 21399 0000FB13 488B442408              	mov rax, qword[rsp + 8 *1]
 21400 0000FB18 48890424                	mov qword[rsp], rax  
 21401 0000FB1C 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 21402 0000FB21 4889442408              	mov qword[rsp + 8 * 1], rax
 21403 0000FB26 B802000000              	mov rax, 2
 21404 0000FB2B 4889442410              	mov qword[rsp + 8 *2], rax
 21405 0000FB30 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
 21406 0000FB35 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 21407 0000FB3A 48B8-                   	mov rax, sob_nil
 21407 0000FB3C [0100000000000000] 
 21408 0000FB44 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
 21409 0000FB49 C8000000                	enter 0, 0
 21410                                  	; preparing a tail-call
 21411 0000FB4D 488B4528                	mov rax, PARAM(1)	; param strs
 21412 0000FB51 50                      	push rax
 21413 0000FB52 488B4520                	mov rax, PARAM(0)	; param str
 21414 0000FB56 50                      	push rax
 21415 0000FB57 6A02                    	push 2	; arg count
 21416 0000FB59 488B4510                	mov rax, ENV
 21417 0000FB5D 488B00                  	mov rax, qword [rax + 8 * 0]
 21418 0000FB60 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 21419 0000FB63 488B00                  	mov rax, qword [rax]
 21420 0000FB66 803804                  	cmp byte [rax], T_closure
 21421 0000FB69 0F85AC800000            	jne L_error_non_closure
 21422 0000FB6F FF7001                  	push SOB_CLOSURE_ENV(rax)
 21423 0000FB72 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21424 0000FB75 FF7500                  	push qword[rbp]
 21425 0000FB78 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21426 0000FB7B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21427 0000FB7F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21428 0000FB83 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21429 0000FB87 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21430 0000FB8A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21431 0000FB8D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21432 0000FB92 4983C103                	add r9, 3 	 ;for getting to the params
 21433 0000FB96 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21434 0000FB9A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21435                                  .L_tc_recycle_frame_loop_00c3:
 21436 0000FB9D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21437 0000FBA0 7410                    	je .L_tc_recycle_frame_done_00c3
 21438 0000FBA2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21439 0000FBA5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21440 0000FBA8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21441 0000FBAC 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21442 0000FBB0 EBEB                    	jmp .L_tc_recycle_frame_loop_00c3
 21443                                  .L_tc_recycle_frame_done_00c3:
 21444 0000FBB2 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21445 0000FBB3 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21446 0000FBB7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21447 0000FBBA C9                      	leave
 21448 0000FBBB C22000                  	ret AND_KILL_FRAME(2)
 21449 0000FBBE E919010000              	jmp .L_lambda_opt_end_0012	; new closure is in rax
 21450                                  .L_lambda_opt_arity_check_more_0012:
 21451 0000FBC3 488B442410              	mov rax, qword[rsp + 2 * 8]
 21452 0000FBC8 4889C7                  	mov rdi, rax
 21453 0000FBCB 49B9-                   	mov r9, sob_nil
 21453 0000FBCD [0100000000000000] 
 21454 0000FBD5 4989F8                  	mov r8, rdi
 21455                                  .L_lambda_opt_stack_shrink_loop_0012:
 21456 0000FBD8 4983F801                	cmp r8, 1
 21457 0000FBDC 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_0012
 21458 0000FBDE 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)] 	;rbx is the top of the stack
 21459 0000FBE3 BF11000000              	mov rdi, 1+8+8	;for pair
 21460 0000FBE8 E8D7800000              	call malloc	 ;to create the pair in the stack
 21461 0000FBED C60021                  	mov byte [rax], T_pair	 ; to make it a pair
 21462 0000FBF0 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
 21463 0000FBF4 4C894809                 	mov qword[rax+1+8],r9
 21464 0000FBF8 4989C1                  	mov r9 , rax	 ; for the recursion 
 21465 0000FBFB 49FFC8                  	dec r8
 21466 0000FBFE EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_0012
 21467                                  .L_lambda_opt_stack_shrink_loop_exit_0012:
 21468 0000FC00 488B442410              	mov rax, qword[rsp + 2 * 8]
 21469 0000FC05 BF02000000              	mov rdi, 2
 21470 0000FC0A 4829F8                  	sub rax, rdi
 21471 0000FC0D 4889C7                  	mov rdi, rax
 21472 0000FC10 486BC008                	imul rax,8
 21473 0000FC14 4801C4                  	add rsp, rax
 21474 0000FC17 4889E0                  	mov rax, rsp
 21475 0000FC1A 4989F8                  	mov r8, rdi
 21476 0000FC1D 4D6BC008                	imul r8, 8
 21477 0000FC21 4C29C0                  	sub rax, r8
 21478 0000FC24 4989C2                  	mov r10, rax	; holds the original ret in the stack
 21479 0000FC27 4983C218                	add r10, 8*3
 21480 0000FC2B 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
 21481 0000FC2F 4C8B00                  	mov r8, qword[rax] 	;arg count = r8
 21482 0000FC32 4D6BC008                	imul r8,8
 21483 0000FC36 4C01C0                  	add rax, r8
 21484 0000FC39 4C8908                  	mov qword[rax] ,r9
 21485 0000FC3C 4D89D0                   	mov r8, r10
 21486 0000FC3F 4983C000                	add r8, 8 * 0
 21487 0000FC43 4D8B08                  	mov r9,qword[r8]
 21488 0000FC46 4D890CF8                	mov qword [r8 + rdi * 8], r9
 21489 0000FC4A 4983EA18                	sub r10, 8*3
 21490 0000FC4E 48C744241002000000      	mov qword [rsp+2*8], 2
 21491 0000FC57 498B4208                	mov rax, qword[r10 + 1 * 8]
 21492 0000FC5B 4889442408              	mov qword[rsp + 1*8] ,rax
 21493 0000FC60 498B02                  	mov rax, qword[r10]
 21494 0000FC63 48890424                	mov qword[rsp], rax
 21495 0000FC67 C8000000                	enter 0, 0
 21496                                  	; preparing a tail-call
 21497 0000FC6B 488B4528                	mov rax, PARAM(1)	; param strs
 21498 0000FC6F 50                      	push rax
 21499 0000FC70 488B4520                	mov rax, PARAM(0)	; param str
 21500 0000FC74 50                      	push rax
 21501 0000FC75 6A02                    	push 2	; arg count
 21502 0000FC77 488B4510                	mov rax, ENV
 21503 0000FC7B 488B00                  	mov rax, qword [rax + 8 * 0]
 21504 0000FC7E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 21505 0000FC81 488B00                  	mov rax, qword [rax]
 21506 0000FC84 803804                  	cmp byte [rax], T_closure
 21507 0000FC87 0F858E7F0000            	jne L_error_non_closure
 21508 0000FC8D FF7001                  	push SOB_CLOSURE_ENV(rax)
 21509 0000FC90 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21510 0000FC93 FF7500                  	push qword[rbp]
 21511 0000FC96 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21512 0000FC99 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21513 0000FC9D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21514 0000FCA1 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21515 0000FCA5 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21516 0000FCA8 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21517 0000FCAB 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21518 0000FCB0 4983C103                	add r9, 3 	 ;for getting to the params
 21519 0000FCB4 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21520 0000FCB8 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21521                                  .L_tc_recycle_frame_loop_00c2:
 21522 0000FCBB 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21523 0000FCBE 7410                    	je .L_tc_recycle_frame_done_00c2
 21524 0000FCC0 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21525 0000FCC3 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21526 0000FCC6 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21527 0000FCCA 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21528 0000FCCE EBEB                    	jmp .L_tc_recycle_frame_loop_00c2
 21529                                  .L_tc_recycle_frame_done_00c2:
 21530 0000FCD0 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21531 0000FCD1 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21532 0000FCD5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21533 0000FCD8 C9                      	leave
 21534 0000FCD9 C22000                  	ret AND_KILL_FRAME(2)
 21535                                  .L_lambda_opt_end_0012:	; new closure is in rax
 21536 0000FCDC C9                      	leave
 21537 0000FCDD C21800                  	ret AND_KILL_FRAME(1)
 21538                                  .L_lambda_simple_end_0079:	; new closure is in rax
 21539 0000FCE0 803804                  	cmp byte [rax], T_closure
 21540 0000FCE3 0F85327F0000            	jne L_error_non_closure
 21541 0000FCE9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21542 0000FCEC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21543 0000FCEF FF7500                  	push qword[rbp]
 21544 0000FCF2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21545 0000FCF5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21546 0000FCF9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21547 0000FCFD 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21548 0000FD01 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21549 0000FD04 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21550 0000FD07 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21551 0000FD0C 4983C103                	add r9, 3 	 ;for getting to the params
 21552 0000FD10 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21553 0000FD14 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21554                                  .L_tc_recycle_frame_loop_00c4:
 21555 0000FD17 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21556 0000FD1A 7410                    	je .L_tc_recycle_frame_done_00c4
 21557 0000FD1C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21558 0000FD1F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21559 0000FD22 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21560 0000FD26 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21561 0000FD2A EBEB                    	jmp .L_tc_recycle_frame_loop_00c4
 21562                                  .L_tc_recycle_frame_done_00c4:
 21563 0000FD2C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21564 0000FD2D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21565 0000FD31 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21566 0000FD34 C9                      	leave
 21567 0000FD35 C21800                  	ret AND_KILL_FRAME(1)
 21568                                  .L_lambda_simple_end_0078:	; new closure is in rax
 21569 0000FD38 803804                  	cmp byte [rax], T_closure
 21570 0000FD3B 0F85DA7E0000            	jne L_error_non_closure
 21571 0000FD41 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21572 0000FD44 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21573 0000FD47 FF7500                  	push qword[rbp]
 21574 0000FD4A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21575 0000FD4D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21576 0000FD51 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21577 0000FD55 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21578 0000FD59 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21579 0000FD5C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21580 0000FD5F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21581 0000FD64 4983C103                	add r9, 3 	 ;for getting to the params
 21582 0000FD68 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21583 0000FD6C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21584                                  .L_tc_recycle_frame_loop_00c5:
 21585 0000FD6F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21586 0000FD72 7410                    	je .L_tc_recycle_frame_done_00c5
 21587 0000FD74 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21588 0000FD77 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21589 0000FD7A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21590 0000FD7E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21591 0000FD82 EBEB                    	jmp .L_tc_recycle_frame_loop_00c5
 21592                                  .L_tc_recycle_frame_done_00c5:
 21593 0000FD84 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21594 0000FD85 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21595 0000FD89 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21596 0000FD8C C9                      	leave
 21597 0000FD8D C21800                  	ret AND_KILL_FRAME(1)
 21598                                  .L_lambda_simple_end_0074:	; new closure is in rax
 21599 0000FD90 803804                  	cmp byte [rax], T_closure
 21600 0000FD93 0F85827E0000            	jne L_error_non_closure
 21601 0000FD99 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21602 0000FD9C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21603 0000FD9F FF7500                  	push qword[rbp]
 21604 0000FDA2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21605 0000FDA5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21606 0000FDA9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21607 0000FDAD 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21608 0000FDB1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21609 0000FDB4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21610 0000FDB7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21611 0000FDBC 4983C103                	add r9, 3 	 ;for getting to the params
 21612 0000FDC0 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21613 0000FDC4 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21614                                  .L_tc_recycle_frame_loop_00c6:
 21615 0000FDC7 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21616 0000FDCA 7410                    	je .L_tc_recycle_frame_done_00c6
 21617 0000FDCC 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21618 0000FDCF 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21619 0000FDD2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21620 0000FDD6 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21621 0000FDDA EBEB                    	jmp .L_tc_recycle_frame_loop_00c6
 21622                                  .L_tc_recycle_frame_done_00c6:
 21623 0000FDDC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21624 0000FDDD 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21625 0000FDE1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21626 0000FDE4 C9                      	leave
 21627 0000FDE5 C22000                  	ret AND_KILL_FRAME(2)
 21628                                  .L_lambda_simple_end_0073:	; new closure is in rax
 21629 0000FDE8 50                      	push rax
 21630 0000FDE9 6A01                    	push 1	; arg count
 21631 0000FDEB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21632 0000FDF0 E8CF7E0000              	call malloc
 21633 0000FDF5 50                      	push rax
 21634 0000FDF6 BF00000000              	mov rdi, 8 * 0	; new rib
 21635 0000FDFB E8C47E0000              	call malloc
 21636 0000FE00 50                      	push rax
 21637 0000FE01 BF08000000              	mov rdi, 8 * 1	; extended env
 21638 0000FE06 E8B97E0000              	call malloc
 21639 0000FE0B 488B7D10                	mov rdi, ENV
 21640 0000FE0F BE00000000              	mov rsi, 0
 21641 0000FE14 BA01000000              	mov rdx, 1
 21642                                  .L_lambda_simple_env_loop_007b:	; ext_env[i + 1] <-- env[i]
 21643 0000FE19 4883FE00                	cmp rsi, 0
 21644 0000FE1D 7410                    	je .L_lambda_simple_env_end_007b
 21645 0000FE1F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21646 0000FE23 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21647 0000FE27 48FFC6                  	inc rsi
 21648 0000FE2A 48FFC2                  	inc rdx
 21649 0000FE2D EBEA                    	jmp .L_lambda_simple_env_loop_007b
 21650                                  .L_lambda_simple_env_end_007b:
 21651 0000FE2F 5B                      	pop rbx
 21652 0000FE30 BE00000000              	mov rsi, 0
 21653                                  .L_lambda_simple_params_loop_007b:	; copy params
 21654 0000FE35 4883FE00                	cmp rsi, 0
 21655 0000FE39 740E                    	je .L_lambda_simple_params_end_007b
 21656 0000FE3B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21657 0000FE40 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21658 0000FE44 48FFC6                  	inc rsi
 21659 0000FE47 EBEC                    	jmp .L_lambda_simple_params_loop_007b
 21660                                  .L_lambda_simple_params_end_007b:
 21661 0000FE49 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21662 0000FE4C 4889C3                  	mov rbx, rax
 21663 0000FE4F 58                      	pop rax
 21664 0000FE50 C60004                  	mov byte [rax], T_closure
 21665 0000FE53 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21666 0000FE57 48C74009[64FE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_007b
 21667 0000FE5F E947010000              	jmp .L_lambda_simple_end_007b
 21668                                  .L_lambda_simple_code_007b:	; lambda-simple body
 21669 0000FE64 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21670 0000FE6A 740B                    	je .L_lambda_simple_arity_check_ok_007b
 21671 0000FE6C FF742410                	push qword [rsp + 8 * 2]
 21672 0000FE70 6A01                    	push 1
 21673 0000FE72 E9067E0000              	jmp L_error_incorrect_arity_simple
 21674                                  .L_lambda_simple_arity_check_ok_007b:
 21675 0000FE77 C8000000                	enter 0, 0
 21676                                  	; preparing a non-tail-call
 21677 0000FE7B 488B0425[C0120000]      	mov rax, qword [free_var_75]	; free var char=?
 21678 0000FE83 803805                  	cmp byte [rax], T_undefined
 21679 0000FE86 0F840B7D0000            	je L_error_fvar_undefined
 21680 0000FE8C 50                      	push rax
 21681 0000FE8D 488B0425[AF120000]      	mov rax, qword [free_var_74]	; free var char<?
 21682 0000FE95 803805                  	cmp byte [rax], T_undefined
 21683 0000FE98 0F84F97C0000            	je L_error_fvar_undefined
 21684 0000FE9E 50                      	push rax
 21685 0000FE9F 6A02                    	push 2	; arg count
 21686 0000FEA1 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 21687 0000FEA5 803804                  	cmp byte [rax], T_closure
 21688 0000FEA8 0F856D7D0000            	jne L_error_non_closure
 21689 0000FEAE FF7001                  	push SOB_CLOSURE_ENV(rax)
 21690 0000FEB1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21691 0000FEB4 48890425[9A160000]      	mov qword [free_var_133], rax
 21692 0000FEBC 48B8-                   	mov rax, sob_void
 21692 0000FEBE [0000000000000000] 
 21693                                  
 21694                                  	; preparing a non-tail-call
 21695 0000FEC6 488B0425[49120000]      	mov rax, qword [free_var_68]	; free var char-ci=?
 21696 0000FECE 803805                  	cmp byte [rax], T_undefined
 21697 0000FED1 0F84C07C0000            	je L_error_fvar_undefined
 21698 0000FED7 50                      	push rax
 21699 0000FED8 488B0425[38120000]      	mov rax, qword [free_var_67]	; free var char-ci<?
 21700 0000FEE0 803805                  	cmp byte [rax], T_undefined
 21701 0000FEE3 0F84AE7C0000            	je L_error_fvar_undefined
 21702 0000FEE9 50                      	push rax
 21703 0000FEEA 6A02                    	push 2	; arg count
 21704 0000FEEC 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 21705 0000FEF0 803804                  	cmp byte [rax], T_closure
 21706 0000FEF3 0F85227D0000            	jne L_error_non_closure
 21707 0000FEF9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21708 0000FEFC FF5009                  	call SOB_CLOSURE_CODE(rax)
 21709 0000FEFF 48890425[CE150000]      	mov qword [free_var_121], rax
 21710 0000FF07 48B8-                   	mov rax, sob_void
 21710 0000FF09 [0000000000000000] 
 21711                                  
 21712                                  	; preparing a non-tail-call
 21713 0000FF11 488B0425[C0120000]      	mov rax, qword [free_var_75]	; free var char=?
 21714 0000FF19 803805                  	cmp byte [rax], T_undefined
 21715 0000FF1C 0F84757C0000            	je L_error_fvar_undefined
 21716 0000FF22 50                      	push rax
 21717 0000FF23 488B0425[E2120000]      	mov rax, qword [free_var_77]	; free var char>?
 21718 0000FF2B 803805                  	cmp byte [rax], T_undefined
 21719 0000FF2E 0F84637C0000            	je L_error_fvar_undefined
 21720 0000FF34 50                      	push rax
 21721 0000FF35 6A02                    	push 2	; arg count
 21722 0000FF37 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 21723 0000FF3B 803804                  	cmp byte [rax], T_closure
 21724 0000FF3E 0F85D77C0000            	jne L_error_non_closure
 21725 0000FF44 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21726 0000FF47 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21727 0000FF4A 48890425[CD160000]      	mov qword [free_var_136], rax
 21728 0000FF52 48B8-                   	mov rax, sob_void
 21728 0000FF54 [0000000000000000] 
 21729                                  
 21730                                  	; preparing a non-tail-call
 21731 0000FF5C 488B0425[49120000]      	mov rax, qword [free_var_68]	; free var char-ci=?
 21732 0000FF64 803805                  	cmp byte [rax], T_undefined
 21733 0000FF67 0F842A7C0000            	je L_error_fvar_undefined
 21734 0000FF6D 50                      	push rax
 21735 0000FF6E 488B0425[6B120000]      	mov rax, qword [free_var_70]	; free var char-ci>?
 21736 0000FF76 803805                  	cmp byte [rax], T_undefined
 21737 0000FF79 0F84187C0000            	je L_error_fvar_undefined
 21738 0000FF7F 50                      	push rax
 21739 0000FF80 6A02                    	push 2	; arg count
 21740 0000FF82 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 21741 0000FF86 803804                  	cmp byte [rax], T_closure
 21742 0000FF89 0F858C7C0000            	jne L_error_non_closure
 21743 0000FF8F FF7001                  	push SOB_CLOSURE_ENV(rax)
 21744 0000FF92 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21745 0000FF95 48890425[01160000]      	mov qword [free_var_124], rax
 21746 0000FF9D 48B8-                   	mov rax, sob_void
 21746 0000FF9F [0000000000000000] 
 21747 0000FFA7 C9                      	leave
 21748 0000FFA8 C21800                  	ret AND_KILL_FRAME(1)
 21749                                  .L_lambda_simple_end_007b:	; new closure is in rax
 21750 0000FFAB 803804                  	cmp byte [rax], T_closure
 21751 0000FFAE 0F85677C0000            	jne L_error_non_closure
 21752 0000FFB4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21753 0000FFB7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21754                                  
 21755 0000FFBA 4889C7                  	mov rdi, rax
 21756 0000FFBD E8577F0000              	call print_sexpr_if_not_void
 21757                                  	; preparing a non-tail-call
 21758 0000FFC2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21759 0000FFC7 E8F87C0000              	call malloc
 21760 0000FFCC 50                      	push rax
 21761 0000FFCD BF00000000              	mov rdi, 8 * 0	; new rib
 21762 0000FFD2 E8ED7C0000              	call malloc
 21763 0000FFD7 50                      	push rax
 21764 0000FFD8 BF08000000              	mov rdi, 8 * 1	; extended env
 21765 0000FFDD E8E27C0000              	call malloc
 21766 0000FFE2 488B7D10                	mov rdi, ENV
 21767 0000FFE6 BE00000000              	mov rsi, 0
 21768 0000FFEB BA01000000              	mov rdx, 1
 21769                                  .L_lambda_simple_env_loop_007c:	; ext_env[i + 1] <-- env[i]
 21770 0000FFF0 4883FE00                	cmp rsi, 0
 21771 0000FFF4 7410                    	je .L_lambda_simple_env_end_007c
 21772 0000FFF6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21773 0000FFFA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21774 0000FFFE 48FFC6                  	inc rsi
 21775 00010001 48FFC2                  	inc rdx
 21776 00010004 EBEA                    	jmp .L_lambda_simple_env_loop_007c
 21777                                  .L_lambda_simple_env_end_007c:
 21778 00010006 5B                      	pop rbx
 21779 00010007 BE00000000              	mov rsi, 0
 21780                                  .L_lambda_simple_params_loop_007c:	; copy params
 21781 0001000C 4883FE00                	cmp rsi, 0
 21782 00010010 740E                    	je .L_lambda_simple_params_end_007c
 21783 00010012 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21784 00010017 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21785 0001001B 48FFC6                  	inc rsi
 21786 0001001E EBEC                    	jmp .L_lambda_simple_params_loop_007c
 21787                                  .L_lambda_simple_params_end_007c:
 21788 00010020 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21789 00010023 4889C3                  	mov rbx, rax
 21790 00010026 58                      	pop rax
 21791 00010027 C60004                  	mov byte [rax], T_closure
 21792 0001002A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21793 0001002E 48C74009[3B000100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_007c
 21794 00010036 E96A0C0000              	jmp .L_lambda_simple_end_007c
 21795                                  .L_lambda_simple_code_007c:	; lambda-simple body
 21796 0001003B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21797 00010041 740B                    	je .L_lambda_simple_arity_check_ok_007c
 21798 00010043 FF742410                	push qword [rsp + 8 * 2]
 21799 00010047 6A01                    	push 1
 21800 00010049 E92F7C0000              	jmp L_error_incorrect_arity_simple
 21801                                  .L_lambda_simple_arity_check_ok_007c:
 21802 0001004E C8000000                	enter 0, 0
 21803                                  	; preparing a tail-call
 21804 00010052 48B8-                   	mov rax, L_constants + 1993
 21804 00010054 [C907000000000000] 
 21805 0001005C 50                      	push rax
 21806 0001005D 6A01                    	push 1	; arg count
 21807 0001005F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21808 00010064 E85B7C0000              	call malloc
 21809 00010069 50                      	push rax
 21810 0001006A BF08000000              	mov rdi, 8 * 1	; new rib
 21811 0001006F E8507C0000              	call malloc
 21812 00010074 50                      	push rax
 21813 00010075 BF10000000              	mov rdi, 8 * 2	; extended env
 21814 0001007A E8457C0000              	call malloc
 21815 0001007F 488B7D10                	mov rdi, ENV
 21816 00010083 BE00000000              	mov rsi, 0
 21817 00010088 BA01000000              	mov rdx, 1
 21818                                  .L_lambda_simple_env_loop_007d:	; ext_env[i + 1] <-- env[i]
 21819 0001008D 4883FE01                	cmp rsi, 1
 21820 00010091 7410                    	je .L_lambda_simple_env_end_007d
 21821 00010093 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21822 00010097 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21823 0001009B 48FFC6                  	inc rsi
 21824 0001009E 48FFC2                  	inc rdx
 21825 000100A1 EBEA                    	jmp .L_lambda_simple_env_loop_007d
 21826                                  .L_lambda_simple_env_end_007d:
 21827 000100A3 5B                      	pop rbx
 21828 000100A4 BE00000000              	mov rsi, 0
 21829                                  .L_lambda_simple_params_loop_007d:	; copy params
 21830 000100A9 4883FE01                	cmp rsi, 1
 21831 000100AD 740E                    	je .L_lambda_simple_params_end_007d
 21832 000100AF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21833 000100B4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21834 000100B8 48FFC6                  	inc rsi
 21835 000100BB EBEC                    	jmp .L_lambda_simple_params_loop_007d
 21836                                  .L_lambda_simple_params_end_007d:
 21837 000100BD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21838 000100C0 4889C3                  	mov rbx, rax
 21839 000100C3 58                      	pop rax
 21840 000100C4 C60004                  	mov byte [rax], T_closure
 21841 000100C7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21842 000100CB 48C74009[D8000100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_007d
 21843 000100D3 E9750B0000              	jmp .L_lambda_simple_end_007d
 21844                                  .L_lambda_simple_code_007d:	; lambda-simple body
 21845 000100D8 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21846 000100DE 740B                    	je .L_lambda_simple_arity_check_ok_007d
 21847 000100E0 FF742410                	push qword [rsp + 8 * 2]
 21848 000100E4 6A01                    	push 1
 21849 000100E6 E9927B0000              	jmp L_error_incorrect_arity_simple
 21850                                  .L_lambda_simple_arity_check_ok_007d:
 21851 000100EB C8000000                	enter 0, 0
 21852 000100EF BF08000000              	mov rdi, 8*1
 21853 000100F4 E8CB7B0000              	call malloc
 21854 000100F9 488B5D20                	mov rbx, PARAM(0)
 21855 000100FD 488918                  	mov qword[rax], rbx
 21856 00010100 48894520                	mov PARAM(0), rax
 21857 00010104 48B8-                   	mov rax, sob_void
 21857 00010106 [0000000000000000] 
 21858                                  
 21859 0001010E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21860 00010113 E8AC7B0000              	call malloc
 21861 00010118 50                      	push rax
 21862 00010119 BF08000000              	mov rdi, 8 * 1	; new rib
 21863 0001011E E8A17B0000              	call malloc
 21864 00010123 50                      	push rax
 21865 00010124 BF18000000              	mov rdi, 8 * 3	; extended env
 21866 00010129 E8967B0000              	call malloc
 21867 0001012E 488B7D10                	mov rdi, ENV
 21868 00010132 BE00000000              	mov rsi, 0
 21869 00010137 BA01000000              	mov rdx, 1
 21870                                  .L_lambda_simple_env_loop_007e:	; ext_env[i + 1] <-- env[i]
 21871 0001013C 4883FE02                	cmp rsi, 2
 21872 00010140 7410                    	je .L_lambda_simple_env_end_007e
 21873 00010142 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21874 00010146 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21875 0001014A 48FFC6                  	inc rsi
 21876 0001014D 48FFC2                  	inc rdx
 21877 00010150 EBEA                    	jmp .L_lambda_simple_env_loop_007e
 21878                                  .L_lambda_simple_env_end_007e:
 21879 00010152 5B                      	pop rbx
 21880 00010153 BE00000000              	mov rsi, 0
 21881                                  .L_lambda_simple_params_loop_007e:	; copy params
 21882 00010158 4883FE01                	cmp rsi, 1
 21883 0001015C 740E                    	je .L_lambda_simple_params_end_007e
 21884 0001015E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21885 00010163 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21886 00010167 48FFC6                  	inc rsi
 21887 0001016A EBEC                    	jmp .L_lambda_simple_params_loop_007e
 21888                                  .L_lambda_simple_params_end_007e:
 21889 0001016C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21890 0001016F 4889C3                  	mov rbx, rax
 21891 00010172 58                      	pop rax
 21892 00010173 C60004                  	mov byte [rax], T_closure
 21893 00010176 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21894 0001017A 48C74009[87010100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_007e
 21895 00010182 E9CA010000              	jmp .L_lambda_simple_end_007e
 21896                                  .L_lambda_simple_code_007e:	; lambda-simple body
 21897 00010187 48837C241004            	cmp qword [rsp + 8 * 2], 4
 21898 0001018D 740B                    	je .L_lambda_simple_arity_check_ok_007e
 21899 0001018F FF742410                	push qword [rsp + 8 * 2]
 21900 00010193 6A04                    	push 4
 21901 00010195 E9E37A0000              	jmp L_error_incorrect_arity_simple
 21902                                  .L_lambda_simple_arity_check_ok_007e:
 21903 0001019A C8000000                	enter 0, 0
 21904                                  	; preparing a non-tail-call
 21905 0001019E 488B4538                	mov rax, PARAM(3)	; param len
 21906 000101A2 50                      	push rax
 21907 000101A3 488B4520                	mov rax, PARAM(0)	; param i
 21908 000101A7 50                      	push rax
 21909 000101A8 6A02                    	push 2	; arg count
 21910 000101AA 488B0425[2B0E0000]      	mov rax, qword [free_var_6]	; free var =
 21911 000101B2 803805                  	cmp byte [rax], T_undefined
 21912 000101B5 0F84DC790000            	je L_error_fvar_undefined
 21913 000101BB 803804                  	cmp byte [rax], T_closure
 21914 000101BE 0F85577A0000            	jne L_error_non_closure
 21915 000101C4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21916 000101C7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21917 000101CA 483D[02000000]          	cmp rax, sob_boolean_false
 21918 000101D0 0F8577010000            	jne .L_or_end_000f
 21919                                  	; preparing a non-tail-call
 21920 000101D6 488B4538                	mov rax, PARAM(3)	; param len
 21921 000101DA 50                      	push rax
 21922 000101DB 488B4520                	mov rax, PARAM(0)	; param i
 21923 000101DF 50                      	push rax
 21924 000101E0 6A02                    	push 2	; arg count
 21925 000101E2 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 21926 000101EA 803805                  	cmp byte [rax], T_undefined
 21927 000101ED 0F84A4790000            	je L_error_fvar_undefined
 21928 000101F3 803804                  	cmp byte [rax], T_closure
 21929 000101F6 0F851F7A0000            	jne L_error_non_closure
 21930 000101FC FF7001                  	push SOB_CLOSURE_ENV(rax)
 21931 000101FF FF5009                  	call SOB_CLOSURE_CODE(rax)
 21932 00010202 483D[02000000]          	cmp rax, sob_boolean_false
 21933 00010208 0F8435010000            	je .L_if_else_0065
 21934                                  	; preparing a non-tail-call
 21935                                  	; preparing a non-tail-call
 21936 0001020E 488B4520                	mov rax, PARAM(0)	; param i
 21937 00010212 50                      	push rax
 21938 00010213 488B4530                	mov rax, PARAM(2)	; param str2
 21939 00010217 50                      	push rax
 21940 00010218 6A02                    	push 2	; arg count
 21941 0001021A 488B0425[45160000]      	mov rax, qword [free_var_128]	; free var string-ref
 21942 00010222 803805                  	cmp byte [rax], T_undefined
 21943 00010225 0F846C790000            	je L_error_fvar_undefined
 21944 0001022B 803804                  	cmp byte [rax], T_closure
 21945 0001022E 0F85E7790000            	jne L_error_non_closure
 21946 00010234 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21947 00010237 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21948 0001023A 50                      	push rax
 21949                                  	; preparing a non-tail-call
 21950 0001023B 488B4520                	mov rax, PARAM(0)	; param i
 21951 0001023F 50                      	push rax
 21952 00010240 488B4528                	mov rax, PARAM(1)	; param str1
 21953 00010244 50                      	push rax
 21954 00010245 6A02                    	push 2	; arg count
 21955 00010247 488B0425[45160000]      	mov rax, qword [free_var_128]	; free var string-ref
 21956 0001024F 803805                  	cmp byte [rax], T_undefined
 21957 00010252 0F843F790000            	je L_error_fvar_undefined
 21958 00010258 803804                  	cmp byte [rax], T_closure
 21959 0001025B 0F85BA790000            	jne L_error_non_closure
 21960 00010261 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21961 00010264 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21962 00010267 50                      	push rax
 21963 00010268 6A02                    	push 2	; arg count
 21964 0001026A 488B4510                	mov rax, ENV
 21965 0001026E 488B4008                	mov rax, qword [rax + 8 * 1]
 21966 00010272 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char=?
 21967 00010275 803804                  	cmp byte [rax], T_closure
 21968 00010278 0F859D790000            	jne L_error_non_closure
 21969 0001027E FF7001                  	push SOB_CLOSURE_ENV(rax)
 21970 00010281 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21971 00010284 483D[02000000]          	cmp rax, sob_boolean_false
 21972 0001028A 0F84A7000000            	je .L_if_else_0064
 21973                                  	; preparing a tail-call
 21974 00010290 488B4538                	mov rax, PARAM(3)	; param len
 21975 00010294 50                      	push rax
 21976 00010295 488B4530                	mov rax, PARAM(2)	; param str2
 21977 00010299 50                      	push rax
 21978 0001029A 488B4528                	mov rax, PARAM(1)	; param str1
 21979 0001029E 50                      	push rax
 21980                                  	; preparing a non-tail-call
 21981 0001029F 48B8-                   	mov rax, L_constants + 2270
 21981 000102A1 [DE08000000000000] 
 21982 000102A9 50                      	push rax
 21983 000102AA 488B4520                	mov rax, PARAM(0)	; param i
 21984 000102AE 50                      	push rax
 21985 000102AF 6A02                    	push 2	; arg count
 21986 000102B1 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 21987 000102B9 803805                  	cmp byte [rax], T_undefined
 21988 000102BC 0F84D5780000            	je L_error_fvar_undefined
 21989 000102C2 803804                  	cmp byte [rax], T_closure
 21990 000102C5 0F8550790000            	jne L_error_non_closure
 21991 000102CB FF7001                  	push SOB_CLOSURE_ENV(rax)
 21992 000102CE FF5009                  	call SOB_CLOSURE_CODE(rax)
 21993 000102D1 50                      	push rax
 21994 000102D2 6A04                    	push 4	; arg count
 21995 000102D4 488B4510                	mov rax, ENV
 21996 000102D8 488B00                  	mov rax, qword [rax + 8 * 0]
 21997 000102DB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 21998 000102DE 488B00                  	mov rax, qword [rax]
 21999 000102E1 803804                  	cmp byte [rax], T_closure
 22000 000102E4 0F8531790000            	jne L_error_non_closure
 22001 000102EA FF7001                  	push SOB_CLOSURE_ENV(rax)
 22002 000102ED FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22003 000102F0 FF7500                  	push qword[rbp]
 22004 000102F3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22005 000102F6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22006 000102FA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22007 000102FE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22008 00010302 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22009 00010305 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22010 00010308 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22011 0001030D 4983C103                	add r9, 3 	 ;for getting to the params
 22012 00010311 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22013 00010315 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22014                                  .L_tc_recycle_frame_loop_00c7:
 22015 00010318 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22016 0001031B 7410                    	je .L_tc_recycle_frame_done_00c7
 22017 0001031D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22018 00010320 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22019 00010323 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22020 00010327 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22021 0001032B EBEB                    	jmp .L_tc_recycle_frame_loop_00c7
 22022                                  .L_tc_recycle_frame_done_00c7:
 22023 0001032D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22024 0001032E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22025 00010332 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22026 00010335 EB0A                    	jmp .L_if_end_0064
 22027                                  .L_if_else_0064:
 22028 00010337 48B8-                   	mov rax, L_constants + 2
 22028 00010339 [0200000000000000] 
 22029                                  .L_if_end_0064:
 22030 00010341 EB0A                    	jmp .L_if_end_0065
 22031                                  .L_if_else_0065:
 22032 00010343 48B8-                   	mov rax, L_constants + 2
 22032 00010345 [0200000000000000] 
 22033                                  .L_if_end_0065:
 22034                                  .L_or_end_000f:
 22035 0001034D C9                      	leave
 22036 0001034E C23000                  	ret AND_KILL_FRAME(4)
 22037                                  .L_lambda_simple_end_007e:	; new closure is in rax
 22038 00010351 50                      	push rax
 22039 00010352 488B4520                	mov rax, PARAM(0)	; param run
 22040 00010356 8F00                    	pop qword [rax]
 22041 00010358 48B8-                   	mov rax, sob_void
 22041 0001035A [0000000000000000] 
 22042                                  
 22043                                  	; preparing a tail-call
 22044 00010362 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22045 00010367 E858790000              	call malloc
 22046 0001036C 50                      	push rax
 22047 0001036D BF08000000              	mov rdi, 8 * 1	; new rib
 22048 00010372 E84D790000              	call malloc
 22049 00010377 50                      	push rax
 22050 00010378 BF18000000              	mov rdi, 8 * 3	; extended env
 22051 0001037D E842790000              	call malloc
 22052 00010382 488B7D10                	mov rdi, ENV
 22053 00010386 BE00000000              	mov rsi, 0
 22054 0001038B BA01000000              	mov rdx, 1
 22055                                  .L_lambda_simple_env_loop_007f:	; ext_env[i + 1] <-- env[i]
 22056 00010390 4883FE02                	cmp rsi, 2
 22057 00010394 7410                    	je .L_lambda_simple_env_end_007f
 22058 00010396 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22059 0001039A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22060 0001039E 48FFC6                  	inc rsi
 22061 000103A1 48FFC2                  	inc rdx
 22062 000103A4 EBEA                    	jmp .L_lambda_simple_env_loop_007f
 22063                                  .L_lambda_simple_env_end_007f:
 22064 000103A6 5B                      	pop rbx
 22065 000103A7 BE00000000              	mov rsi, 0
 22066                                  .L_lambda_simple_params_loop_007f:	; copy params
 22067 000103AC 4883FE01                	cmp rsi, 1
 22068 000103B0 740E                    	je .L_lambda_simple_params_end_007f
 22069 000103B2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22070 000103B7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22071 000103BB 48FFC6                  	inc rsi
 22072 000103BE EBEC                    	jmp .L_lambda_simple_params_loop_007f
 22073                                  .L_lambda_simple_params_end_007f:
 22074 000103C0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22075 000103C3 4889C3                  	mov rbx, rax
 22076 000103C6 58                      	pop rax
 22077 000103C7 C60004                  	mov byte [rax], T_closure
 22078 000103CA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22079 000103CE 48C74009[DB030100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_007f
 22080 000103D6 E924020000              	jmp .L_lambda_simple_end_007f
 22081                                  .L_lambda_simple_code_007f:	; lambda-simple body
 22082 000103DB 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22083 000103E1 740B                    	je .L_lambda_simple_arity_check_ok_007f
 22084 000103E3 FF742410                	push qword [rsp + 8 * 2]
 22085 000103E7 6A02                    	push 2
 22086 000103E9 E98F780000              	jmp L_error_incorrect_arity_simple
 22087                                  .L_lambda_simple_arity_check_ok_007f:
 22088 000103EE C8000000                	enter 0, 0
 22089                                  	; preparing a tail-call
 22090                                  	; preparing a non-tail-call
 22091 000103F2 488B4528                	mov rax, PARAM(1)	; param str2
 22092 000103F6 50                      	push rax
 22093 000103F7 6A01                    	push 1	; arg count
 22094 000103F9 488B0425[34160000]      	mov rax, qword [free_var_127]	; free var string-length
 22095 00010401 803805                  	cmp byte [rax], T_undefined
 22096 00010404 0F848D770000            	je L_error_fvar_undefined
 22097 0001040A 803804                  	cmp byte [rax], T_closure
 22098 0001040D 0F8508780000            	jne L_error_non_closure
 22099 00010413 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22100 00010416 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22101 00010419 50                      	push rax
 22102                                  	; preparing a non-tail-call
 22103 0001041A 488B4520                	mov rax, PARAM(0)	; param str1
 22104 0001041E 50                      	push rax
 22105 0001041F 6A01                    	push 1	; arg count
 22106 00010421 488B0425[34160000]      	mov rax, qword [free_var_127]	; free var string-length
 22107 00010429 803805                  	cmp byte [rax], T_undefined
 22108 0001042C 0F8465770000            	je L_error_fvar_undefined
 22109 00010432 803804                  	cmp byte [rax], T_closure
 22110 00010435 0F85E0770000            	jne L_error_non_closure
 22111 0001043B FF7001                  	push SOB_CLOSURE_ENV(rax)
 22112 0001043E FF5009                  	call SOB_CLOSURE_CODE(rax)
 22113 00010441 50                      	push rax
 22114 00010442 6A02                    	push 2	; arg count
 22115 00010444 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22116 00010449 E876780000              	call malloc
 22117 0001044E 50                      	push rax
 22118 0001044F BF10000000              	mov rdi, 8 * 2	; new rib
 22119 00010454 E86B780000              	call malloc
 22120 00010459 50                      	push rax
 22121 0001045A BF20000000              	mov rdi, 8 * 4	; extended env
 22122 0001045F E860780000              	call malloc
 22123 00010464 488B7D10                	mov rdi, ENV
 22124 00010468 BE00000000              	mov rsi, 0
 22125 0001046D BA01000000              	mov rdx, 1
 22126                                  .L_lambda_simple_env_loop_0080:	; ext_env[i + 1] <-- env[i]
 22127 00010472 4883FE03                	cmp rsi, 3
 22128 00010476 7410                    	je .L_lambda_simple_env_end_0080
 22129 00010478 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22130 0001047C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22131 00010480 48FFC6                  	inc rsi
 22132 00010483 48FFC2                  	inc rdx
 22133 00010486 EBEA                    	jmp .L_lambda_simple_env_loop_0080
 22134                                  .L_lambda_simple_env_end_0080:
 22135 00010488 5B                      	pop rbx
 22136 00010489 BE00000000              	mov rsi, 0
 22137                                  .L_lambda_simple_params_loop_0080:	; copy params
 22138 0001048E 4883FE02                	cmp rsi, 2
 22139 00010492 740E                    	je .L_lambda_simple_params_end_0080
 22140 00010494 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22141 00010499 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22142 0001049D 48FFC6                  	inc rsi
 22143 000104A0 EBEC                    	jmp .L_lambda_simple_params_loop_0080
 22144                                  .L_lambda_simple_params_end_0080:
 22145 000104A2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22146 000104A5 4889C3                  	mov rbx, rax
 22147 000104A8 58                      	pop rax
 22148 000104A9 C60004                  	mov byte [rax], T_closure
 22149 000104AC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22150 000104B0 48C74009[BD040100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0080
 22151 000104B8 E9EA000000              	jmp .L_lambda_simple_end_0080
 22152                                  .L_lambda_simple_code_0080:	; lambda-simple body
 22153 000104BD 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22154 000104C3 740B                    	je .L_lambda_simple_arity_check_ok_0080
 22155 000104C5 FF742410                	push qword [rsp + 8 * 2]
 22156 000104C9 6A02                    	push 2
 22157 000104CB E9AD770000              	jmp L_error_incorrect_arity_simple
 22158                                  .L_lambda_simple_arity_check_ok_0080:
 22159 000104D0 C8000000                	enter 0, 0
 22160                                  	; preparing a non-tail-call
 22161 000104D4 488B4528                	mov rax, PARAM(1)	; param len2
 22162 000104D8 50                      	push rax
 22163 000104D9 488B4520                	mov rax, PARAM(0)	; param len1
 22164 000104DD 50                      	push rax
 22165 000104DE 6A02                    	push 2	; arg count
 22166 000104E0 488B0425[2B0E0000]      	mov rax, qword [free_var_6]	; free var =
 22167 000104E8 803805                  	cmp byte [rax], T_undefined
 22168 000104EB 0F84A6760000            	je L_error_fvar_undefined
 22169 000104F1 803804                  	cmp byte [rax], T_closure
 22170 000104F4 0F8521770000            	jne L_error_non_closure
 22171 000104FA FF7001                  	push SOB_CLOSURE_ENV(rax)
 22172 000104FD FF5009                  	call SOB_CLOSURE_CODE(rax)
 22173 00010500 483D[02000000]          	cmp rax, sob_boolean_false
 22174 00010506 0F848D000000            	je .L_if_else_0066
 22175                                  	; preparing a tail-call
 22176 0001050C 488B4520                	mov rax, PARAM(0)	; param len1
 22177 00010510 50                      	push rax
 22178 00010511 488B4510                	mov rax, ENV
 22179 00010515 488B00                  	mov rax, qword [rax + 8 * 0]
 22180 00010518 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 22181 0001051C 50                      	push rax
 22182 0001051D 488B4510                	mov rax, ENV
 22183 00010521 488B00                  	mov rax, qword [rax + 8 * 0]
 22184 00010524 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 22185 00010527 50                      	push rax
 22186 00010528 48B8-                   	mov rax, L_constants + 2135
 22186 0001052A [5708000000000000] 
 22187 00010532 50                      	push rax
 22188 00010533 6A04                    	push 4	; arg count
 22189 00010535 488B4510                	mov rax, ENV
 22190 00010539 488B4008                	mov rax, qword [rax + 8 * 1]
 22191 0001053D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 22192 00010540 488B00                  	mov rax, qword [rax]
 22193 00010543 803804                  	cmp byte [rax], T_closure
 22194 00010546 0F85CF760000            	jne L_error_non_closure
 22195 0001054C FF7001                  	push SOB_CLOSURE_ENV(rax)
 22196 0001054F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22197 00010552 FF7500                  	push qword[rbp]
 22198 00010555 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22199 00010558 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22200 0001055C 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22201 00010560 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22202 00010564 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22203 00010567 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22204 0001056A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22205 0001056F 4983C103                	add r9, 3 	 ;for getting to the params
 22206 00010573 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22207 00010577 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22208                                  .L_tc_recycle_frame_loop_00c8:
 22209 0001057A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22210 0001057D 7410                    	je .L_tc_recycle_frame_done_00c8
 22211 0001057F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22212 00010582 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22213 00010585 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22214 00010589 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22215 0001058D EBEB                    	jmp .L_tc_recycle_frame_loop_00c8
 22216                                  .L_tc_recycle_frame_done_00c8:
 22217 0001058F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22218 00010590 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22219 00010594 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22220 00010597 EB0A                    	jmp .L_if_end_0066
 22221                                  .L_if_else_0066:
 22222 00010599 48B8-                   	mov rax, L_constants + 2
 22222 0001059B [0200000000000000] 
 22223                                  .L_if_end_0066:
 22224 000105A3 C9                      	leave
 22225 000105A4 C22000                  	ret AND_KILL_FRAME(2)
 22226                                  .L_lambda_simple_end_0080:	; new closure is in rax
 22227 000105A7 803804                  	cmp byte [rax], T_closure
 22228 000105AA 0F856B760000            	jne L_error_non_closure
 22229 000105B0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22230 000105B3 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22231 000105B6 FF7500                  	push qword[rbp]
 22232 000105B9 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22233 000105BC 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22234 000105C0 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22235 000105C4 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22236 000105C8 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22237 000105CB 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22238 000105CE 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22239 000105D3 4983C103                	add r9, 3 	 ;for getting to the params
 22240 000105D7 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22241 000105DB 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22242                                  .L_tc_recycle_frame_loop_00c9:
 22243 000105DE 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22244 000105E1 7410                    	je .L_tc_recycle_frame_done_00c9
 22245 000105E3 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22246 000105E6 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22247 000105E9 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22248 000105ED 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22249 000105F1 EBEB                    	jmp .L_tc_recycle_frame_loop_00c9
 22250                                  .L_tc_recycle_frame_done_00c9:
 22251 000105F3 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22252 000105F4 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22253 000105F8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22254 000105FB C9                      	leave
 22255 000105FC C22000                  	ret AND_KILL_FRAME(2)
 22256                                  .L_lambda_simple_end_007f:	; new closure is in rax
 22257 000105FF 50                      	push rax
 22258 00010600 6A01                    	push 1	; arg count
 22259 00010602 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22260 00010607 E8B8760000              	call malloc
 22261 0001060C 50                      	push rax
 22262 0001060D BF08000000              	mov rdi, 8 * 1	; new rib
 22263 00010612 E8AD760000              	call malloc
 22264 00010617 50                      	push rax
 22265 00010618 BF18000000              	mov rdi, 8 * 3	; extended env
 22266 0001061D E8A2760000              	call malloc
 22267 00010622 488B7D10                	mov rdi, ENV
 22268 00010626 BE00000000              	mov rsi, 0
 22269 0001062B BA01000000              	mov rdx, 1
 22270                                  .L_lambda_simple_env_loop_0081:	; ext_env[i + 1] <-- env[i]
 22271 00010630 4883FE02                	cmp rsi, 2
 22272 00010634 7410                    	je .L_lambda_simple_env_end_0081
 22273 00010636 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22274 0001063A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22275 0001063E 48FFC6                  	inc rsi
 22276 00010641 48FFC2                  	inc rdx
 22277 00010644 EBEA                    	jmp .L_lambda_simple_env_loop_0081
 22278                                  .L_lambda_simple_env_end_0081:
 22279 00010646 5B                      	pop rbx
 22280 00010647 BE00000000              	mov rsi, 0
 22281                                  .L_lambda_simple_params_loop_0081:	; copy params
 22282 0001064C 4883FE01                	cmp rsi, 1
 22283 00010650 740E                    	je .L_lambda_simple_params_end_0081
 22284 00010652 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22285 00010657 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22286 0001065B 48FFC6                  	inc rsi
 22287 0001065E EBEC                    	jmp .L_lambda_simple_params_loop_0081
 22288                                  .L_lambda_simple_params_end_0081:
 22289 00010660 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22290 00010663 4889C3                  	mov rbx, rax
 22291 00010666 58                      	pop rax
 22292 00010667 C60004                  	mov byte [rax], T_closure
 22293 0001066A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22294 0001066E 48C74009[7B060100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0081
 22295 00010676 E97A050000              	jmp .L_lambda_simple_end_0081
 22296                                  .L_lambda_simple_code_0081:	; lambda-simple body
 22297 0001067B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22298 00010681 740B                    	je .L_lambda_simple_arity_check_ok_0081
 22299 00010683 FF742410                	push qword [rsp + 8 * 2]
 22300 00010687 6A01                    	push 1
 22301 00010689 E9EF750000              	jmp L_error_incorrect_arity_simple
 22302                                  .L_lambda_simple_arity_check_ok_0081:
 22303 0001068E C8000000                	enter 0, 0
 22304                                  	; preparing a tail-call
 22305 00010692 48B8-                   	mov rax, L_constants + 1993
 22305 00010694 [C907000000000000] 
 22306 0001069C 50                      	push rax
 22307 0001069D 6A01                    	push 1	; arg count
 22308 0001069F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22309 000106A4 E81B760000              	call malloc
 22310 000106A9 50                      	push rax
 22311 000106AA BF08000000              	mov rdi, 8 * 1	; new rib
 22312 000106AF E810760000              	call malloc
 22313 000106B4 50                      	push rax
 22314 000106B5 BF20000000              	mov rdi, 8 * 4	; extended env
 22315 000106BA E805760000              	call malloc
 22316 000106BF 488B7D10                	mov rdi, ENV
 22317 000106C3 BE00000000              	mov rsi, 0
 22318 000106C8 BA01000000              	mov rdx, 1
 22319                                  .L_lambda_simple_env_loop_0082:	; ext_env[i + 1] <-- env[i]
 22320 000106CD 4883FE03                	cmp rsi, 3
 22321 000106D1 7410                    	je .L_lambda_simple_env_end_0082
 22322 000106D3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22323 000106D7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22324 000106DB 48FFC6                  	inc rsi
 22325 000106DE 48FFC2                  	inc rdx
 22326 000106E1 EBEA                    	jmp .L_lambda_simple_env_loop_0082
 22327                                  .L_lambda_simple_env_end_0082:
 22328 000106E3 5B                      	pop rbx
 22329 000106E4 BE00000000              	mov rsi, 0
 22330                                  .L_lambda_simple_params_loop_0082:	; copy params
 22331 000106E9 4883FE01                	cmp rsi, 1
 22332 000106ED 740E                    	je .L_lambda_simple_params_end_0082
 22333 000106EF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22334 000106F4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22335 000106F8 48FFC6                  	inc rsi
 22336 000106FB EBEC                    	jmp .L_lambda_simple_params_loop_0082
 22337                                  .L_lambda_simple_params_end_0082:
 22338 000106FD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22339 00010700 4889C3                  	mov rbx, rax
 22340 00010703 58                      	pop rax
 22341 00010704 C60004                  	mov byte [rax], T_closure
 22342 00010707 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22343 0001070B 48C74009[18070100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0082
 22344 00010713 E985040000              	jmp .L_lambda_simple_end_0082
 22345                                  .L_lambda_simple_code_0082:	; lambda-simple body
 22346 00010718 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22347 0001071E 740B                    	je .L_lambda_simple_arity_check_ok_0082
 22348 00010720 FF742410                	push qword [rsp + 8 * 2]
 22349 00010724 6A01                    	push 1
 22350 00010726 E952750000              	jmp L_error_incorrect_arity_simple
 22351                                  .L_lambda_simple_arity_check_ok_0082:
 22352 0001072B C8000000                	enter 0, 0
 22353 0001072F BF08000000              	mov rdi, 8*1
 22354 00010734 E88B750000              	call malloc
 22355 00010739 488B5D20                	mov rbx, PARAM(0)
 22356 0001073D 488918                  	mov qword[rax], rbx
 22357 00010740 48894520                	mov PARAM(0), rax
 22358 00010744 48B8-                   	mov rax, sob_void
 22358 00010746 [0000000000000000] 
 22359                                  
 22360 0001074E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22361 00010753 E86C750000              	call malloc
 22362 00010758 50                      	push rax
 22363 00010759 BF08000000              	mov rdi, 8 * 1	; new rib
 22364 0001075E E861750000              	call malloc
 22365 00010763 50                      	push rax
 22366 00010764 BF28000000              	mov rdi, 8 * 5	; extended env
 22367 00010769 E856750000              	call malloc
 22368 0001076E 488B7D10                	mov rdi, ENV
 22369 00010772 BE00000000              	mov rsi, 0
 22370 00010777 BA01000000              	mov rdx, 1
 22371                                  .L_lambda_simple_env_loop_0083:	; ext_env[i + 1] <-- env[i]
 22372 0001077C 4883FE04                	cmp rsi, 4
 22373 00010780 7410                    	je .L_lambda_simple_env_end_0083
 22374 00010782 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22375 00010786 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22376 0001078A 48FFC6                  	inc rsi
 22377 0001078D 48FFC2                  	inc rdx
 22378 00010790 EBEA                    	jmp .L_lambda_simple_env_loop_0083
 22379                                  .L_lambda_simple_env_end_0083:
 22380 00010792 5B                      	pop rbx
 22381 00010793 BE00000000              	mov rsi, 0
 22382                                  .L_lambda_simple_params_loop_0083:	; copy params
 22383 00010798 4883FE01                	cmp rsi, 1
 22384 0001079C 740E                    	je .L_lambda_simple_params_end_0083
 22385 0001079E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22386 000107A3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22387 000107A7 48FFC6                  	inc rsi
 22388 000107AA EBEC                    	jmp .L_lambda_simple_params_loop_0083
 22389                                  .L_lambda_simple_params_end_0083:
 22390 000107AC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22391 000107AF 4889C3                  	mov rbx, rax
 22392 000107B2 58                      	pop rax
 22393 000107B3 C60004                  	mov byte [rax], T_closure
 22394 000107B6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22395 000107BA 48C74009[C7070100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0083
 22396 000107C2 E962010000              	jmp .L_lambda_simple_end_0083
 22397                                  .L_lambda_simple_code_0083:	; lambda-simple body
 22398 000107C7 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22399 000107CD 740B                    	je .L_lambda_simple_arity_check_ok_0083
 22400 000107CF FF742410                	push qword [rsp + 8 * 2]
 22401 000107D3 6A02                    	push 2
 22402 000107D5 E9A3740000              	jmp L_error_incorrect_arity_simple
 22403                                  .L_lambda_simple_arity_check_ok_0083:
 22404 000107DA C8000000                	enter 0, 0
 22405                                  	; preparing a non-tail-call
 22406 000107DE 488B4528                	mov rax, PARAM(1)	; param strs
 22407 000107E2 50                      	push rax
 22408 000107E3 6A01                    	push 1	; arg count
 22409 000107E5 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 22410 000107ED 803805                  	cmp byte [rax], T_undefined
 22411 000107F0 0F84A1730000            	je L_error_fvar_undefined
 22412 000107F6 803804                  	cmp byte [rax], T_closure
 22413 000107F9 0F851C740000            	jne L_error_non_closure
 22414 000107FF FF7001                  	push SOB_CLOSURE_ENV(rax)
 22415 00010802 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22416 00010805 483D[02000000]          	cmp rax, sob_boolean_false
 22417 0001080B 0F8514010000            	jne .L_or_end_0010
 22418                                  	; preparing a non-tail-call
 22419                                  	; preparing a non-tail-call
 22420 00010811 488B4528                	mov rax, PARAM(1)	; param strs
 22421 00010815 50                      	push rax
 22422 00010816 6A01                    	push 1	; arg count
 22423 00010818 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 22424 00010820 803805                  	cmp byte [rax], T_undefined
 22425 00010823 0F846E730000            	je L_error_fvar_undefined
 22426 00010829 803804                  	cmp byte [rax], T_closure
 22427 0001082C 0F85E9730000            	jne L_error_non_closure
 22428 00010832 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22429 00010835 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22430 00010838 50                      	push rax
 22431 00010839 488B4520                	mov rax, PARAM(0)	; param str
 22432 0001083D 50                      	push rax
 22433 0001083E 6A02                    	push 2	; arg count
 22434 00010840 488B4510                	mov rax, ENV
 22435 00010844 488B4008                	mov rax, qword [rax + 8 * 1]
 22436 00010848 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var binary-string=?
 22437 0001084B 803804                  	cmp byte [rax], T_closure
 22438 0001084E 0F85C7730000            	jne L_error_non_closure
 22439 00010854 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22440 00010857 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22441 0001085A 483D[02000000]          	cmp rax, sob_boolean_false
 22442 00010860 0F84B5000000            	je .L_if_else_0067
 22443                                  	; preparing a tail-call
 22444                                  	; preparing a non-tail-call
 22445 00010866 488B4528                	mov rax, PARAM(1)	; param strs
 22446 0001086A 50                      	push rax
 22447 0001086B 6A01                    	push 1	; arg count
 22448 0001086D 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
 22449 00010875 803805                  	cmp byte [rax], T_undefined
 22450 00010878 0F8419730000            	je L_error_fvar_undefined
 22451 0001087E 803804                  	cmp byte [rax], T_closure
 22452 00010881 0F8594730000            	jne L_error_non_closure
 22453 00010887 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22454 0001088A FF5009                  	call SOB_CLOSURE_CODE(rax)
 22455 0001088D 50                      	push rax
 22456                                  	; preparing a non-tail-call
 22457 0001088E 488B4528                	mov rax, PARAM(1)	; param strs
 22458 00010892 50                      	push rax
 22459 00010893 6A01                    	push 1	; arg count
 22460 00010895 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 22461 0001089D 803805                  	cmp byte [rax], T_undefined
 22462 000108A0 0F84F1720000            	je L_error_fvar_undefined
 22463 000108A6 803804                  	cmp byte [rax], T_closure
 22464 000108A9 0F856C730000            	jne L_error_non_closure
 22465 000108AF FF7001                  	push SOB_CLOSURE_ENV(rax)
 22466 000108B2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22467 000108B5 50                      	push rax
 22468 000108B6 6A02                    	push 2	; arg count
 22469 000108B8 488B4510                	mov rax, ENV
 22470 000108BC 488B00                  	mov rax, qword [rax + 8 * 0]
 22471 000108BF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 22472 000108C2 488B00                  	mov rax, qword [rax]
 22473 000108C5 803804                  	cmp byte [rax], T_closure
 22474 000108C8 0F854D730000            	jne L_error_non_closure
 22475 000108CE FF7001                  	push SOB_CLOSURE_ENV(rax)
 22476 000108D1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22477 000108D4 FF7500                  	push qword[rbp]
 22478 000108D7 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22479 000108DA 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22480 000108DE 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22481 000108E2 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22482 000108E6 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22483 000108E9 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22484 000108EC 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22485 000108F1 4983C103                	add r9, 3 	 ;for getting to the params
 22486 000108F5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22487 000108F9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22488                                  .L_tc_recycle_frame_loop_00ca:
 22489 000108FC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22490 000108FF 7410                    	je .L_tc_recycle_frame_done_00ca
 22491 00010901 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22492 00010904 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22493 00010907 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22494 0001090B 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22495 0001090F EBEB                    	jmp .L_tc_recycle_frame_loop_00ca
 22496                                  .L_tc_recycle_frame_done_00ca:
 22497 00010911 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22498 00010912 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22499 00010916 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22500 00010919 EB0A                    	jmp .L_if_end_0067
 22501                                  .L_if_else_0067:
 22502 0001091B 48B8-                   	mov rax, L_constants + 2
 22502 0001091D [0200000000000000] 
 22503                                  .L_if_end_0067:
 22504                                  .L_or_end_0010:
 22505 00010925 C9                      	leave
 22506 00010926 C22000                  	ret AND_KILL_FRAME(2)
 22507                                  .L_lambda_simple_end_0083:	; new closure is in rax
 22508 00010929 50                      	push rax
 22509 0001092A 488B4520                	mov rax, PARAM(0)	; param run
 22510 0001092E 8F00                    	pop qword [rax]
 22511 00010930 48B8-                   	mov rax, sob_void
 22511 00010932 [0000000000000000] 
 22512                                  
 22513 0001093A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22514 0001093F E880730000              	call malloc
 22515 00010944 50                      	push rax
 22516 00010945 BF08000000              	mov rdi, 8 * 1	; new rib
 22517 0001094A E875730000              	call malloc
 22518 0001094F 50                      	push rax
 22519 00010950 BF28000000              	mov rdi, 8 * 5	; extended env
 22520 00010955 E86A730000              	call malloc
 22521 0001095A 488B7D10                	mov rdi, ENV
 22522 0001095E BE00000000              	mov rsi, 0
 22523 00010963 BA01000000              	mov rdx, 1
 22524                                  .L_lambda_opt_env_loop_0013:	; ext_env[i + 1] <-- env[i]
 22525 00010968 4883FE04                	cmp rsi, 4
 22526 0001096C 7410                    	je .L_lambda_opt_env_end_0013
 22527 0001096E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22528 00010972 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22529 00010976 48FFC6                  	inc rsi
 22530 00010979 48FFC2                  	inc rdx
 22531 0001097C EBEA                    	jmp .L_lambda_opt_env_loop_0013
 22532                                  .L_lambda_opt_env_end_0013:
 22533 0001097E 5B                      	pop rbx
 22534 0001097F BE00000000              	mov rsi, 0
 22535                                  .L_lambda_opt_params_loop_0013:	; copy params
 22536 00010984 4883FE01                	cmp rsi, 1
 22537 00010988 740E                    	je .L_lambda_opt_params_end_0013
 22538 0001098A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22539 0001098F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22540 00010993 48FFC6                  	inc rsi
 22541 00010996 EBEC                    	jmp .L_lambda_opt_params_loop_0013
 22542                                  .L_lambda_opt_params_end_0013:
 22543 00010998 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22544 0001099B 4889C3                  	mov rbx, rax
 22545 0001099E 58                      	pop rax
 22546 0001099F C60004                  	mov byte [rax], T_closure
 22547 000109A2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22548 000109A6 48C74009[B3090100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0013
 22549 000109AE E9E6010000              	jmp .L_lambda_opt_end_0013
 22550                                  .L_lambda_opt_code_0013:	; lambda-opt body
 22551 000109B3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22552 000109B9 7411                    	je .L_lambda_opt_arity_check_exact_0013
 22553 000109BB 0F8FBF000000            	jg .L_lambda_opt_arity_check_more_0013
 22554 000109C1 FF742410                	push qword [rsp + 8 * 2]
 22555 000109C5 6A01                    	push 1
 22556 000109C7 E9C5720000              	jmp L_error_incorrect_arity_opt
 22557                                  .L_lambda_opt_arity_check_exact_0013:
 22558 000109CC 4883EC08                	sub rsp, 8
 22559 000109D0 488B442408              	mov rax, qword[rsp + 8 *1]
 22560 000109D5 48890424                	mov qword[rsp], rax  
 22561 000109D9 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 22562 000109DE 4889442408              	mov qword[rsp + 8 * 1], rax
 22563 000109E3 B802000000              	mov rax, 2
 22564 000109E8 4889442410              	mov qword[rsp + 8 *2], rax
 22565 000109ED 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
 22566 000109F2 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 22567 000109F7 48B8-                   	mov rax, sob_nil
 22567 000109F9 [0100000000000000] 
 22568 00010A01 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
 22569 00010A06 C8000000                	enter 0, 0
 22570                                  	; preparing a tail-call
 22571 00010A0A 488B4528                	mov rax, PARAM(1)	; param strs
 22572 00010A0E 50                      	push rax
 22573 00010A0F 488B4520                	mov rax, PARAM(0)	; param str
 22574 00010A13 50                      	push rax
 22575 00010A14 6A02                    	push 2	; arg count
 22576 00010A16 488B4510                	mov rax, ENV
 22577 00010A1A 488B00                  	mov rax, qword [rax + 8 * 0]
 22578 00010A1D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 22579 00010A20 488B00                  	mov rax, qword [rax]
 22580 00010A23 803804                  	cmp byte [rax], T_closure
 22581 00010A26 0F85EF710000            	jne L_error_non_closure
 22582 00010A2C FF7001                  	push SOB_CLOSURE_ENV(rax)
 22583 00010A2F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22584 00010A32 FF7500                  	push qword[rbp]
 22585 00010A35 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22586 00010A38 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22587 00010A3C 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22588 00010A40 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22589 00010A44 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22590 00010A47 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22591 00010A4A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22592 00010A4F 4983C103                	add r9, 3 	 ;for getting to the params
 22593 00010A53 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22594 00010A57 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22595                                  .L_tc_recycle_frame_loop_00cc:
 22596 00010A5A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22597 00010A5D 7410                    	je .L_tc_recycle_frame_done_00cc
 22598 00010A5F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22599 00010A62 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22600 00010A65 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22601 00010A69 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22602 00010A6D EBEB                    	jmp .L_tc_recycle_frame_loop_00cc
 22603                                  .L_tc_recycle_frame_done_00cc:
 22604 00010A6F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22605 00010A70 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22606 00010A74 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22607 00010A77 C9                      	leave
 22608 00010A78 C22000                  	ret AND_KILL_FRAME(2)
 22609 00010A7B E919010000              	jmp .L_lambda_opt_end_0013	; new closure is in rax
 22610                                  .L_lambda_opt_arity_check_more_0013:
 22611 00010A80 488B442410              	mov rax, qword[rsp + 2 * 8]
 22612 00010A85 4889C7                  	mov rdi, rax
 22613 00010A88 49B9-                   	mov r9, sob_nil
 22613 00010A8A [0100000000000000] 
 22614 00010A92 4989F8                  	mov r8, rdi
 22615                                  .L_lambda_opt_stack_shrink_loop_0013:
 22616 00010A95 4983F801                	cmp r8, 1
 22617 00010A99 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_0013
 22618 00010A9B 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)] 	;rbx is the top of the stack
 22619 00010AA0 BF11000000              	mov rdi, 1+8+8	;for pair
 22620 00010AA5 E81A720000              	call malloc	 ;to create the pair in the stack
 22621 00010AAA C60021                  	mov byte [rax], T_pair	 ; to make it a pair
 22622 00010AAD 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
 22623 00010AB1 4C894809                 	mov qword[rax+1+8],r9
 22624 00010AB5 4989C1                  	mov r9 , rax	 ; for the recursion 
 22625 00010AB8 49FFC8                  	dec r8
 22626 00010ABB EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_0013
 22627                                  .L_lambda_opt_stack_shrink_loop_exit_0013:
 22628 00010ABD 488B442410              	mov rax, qword[rsp + 2 * 8]
 22629 00010AC2 BF02000000              	mov rdi, 2
 22630 00010AC7 4829F8                  	sub rax, rdi
 22631 00010ACA 4889C7                  	mov rdi, rax
 22632 00010ACD 486BC008                	imul rax,8
 22633 00010AD1 4801C4                  	add rsp, rax
 22634 00010AD4 4889E0                  	mov rax, rsp
 22635 00010AD7 4989F8                  	mov r8, rdi
 22636 00010ADA 4D6BC008                	imul r8, 8
 22637 00010ADE 4C29C0                  	sub rax, r8
 22638 00010AE1 4989C2                  	mov r10, rax	; holds the original ret in the stack
 22639 00010AE4 4983C218                	add r10, 8*3
 22640 00010AE8 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
 22641 00010AEC 4C8B00                  	mov r8, qword[rax] 	;arg count = r8
 22642 00010AEF 4D6BC008                	imul r8,8
 22643 00010AF3 4C01C0                  	add rax, r8
 22644 00010AF6 4C8908                  	mov qword[rax] ,r9
 22645 00010AF9 4D89D0                   	mov r8, r10
 22646 00010AFC 4983C000                	add r8, 8 * 0
 22647 00010B00 4D8B08                  	mov r9,qword[r8]
 22648 00010B03 4D890CF8                	mov qword [r8 + rdi * 8], r9
 22649 00010B07 4983EA18                	sub r10, 8*3
 22650 00010B0B 48C744241002000000      	mov qword [rsp+2*8], 2
 22651 00010B14 498B4208                	mov rax, qword[r10 + 1 * 8]
 22652 00010B18 4889442408              	mov qword[rsp + 1*8] ,rax
 22653 00010B1D 498B02                  	mov rax, qword[r10]
 22654 00010B20 48890424                	mov qword[rsp], rax
 22655 00010B24 C8000000                	enter 0, 0
 22656                                  	; preparing a tail-call
 22657 00010B28 488B4528                	mov rax, PARAM(1)	; param strs
 22658 00010B2C 50                      	push rax
 22659 00010B2D 488B4520                	mov rax, PARAM(0)	; param str
 22660 00010B31 50                      	push rax
 22661 00010B32 6A02                    	push 2	; arg count
 22662 00010B34 488B4510                	mov rax, ENV
 22663 00010B38 488B00                  	mov rax, qword [rax + 8 * 0]
 22664 00010B3B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 22665 00010B3E 488B00                  	mov rax, qword [rax]
 22666 00010B41 803804                  	cmp byte [rax], T_closure
 22667 00010B44 0F85D1700000            	jne L_error_non_closure
 22668 00010B4A FF7001                  	push SOB_CLOSURE_ENV(rax)
 22669 00010B4D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22670 00010B50 FF7500                  	push qword[rbp]
 22671 00010B53 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22672 00010B56 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22673 00010B5A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22674 00010B5E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22675 00010B62 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22676 00010B65 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22677 00010B68 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22678 00010B6D 4983C103                	add r9, 3 	 ;for getting to the params
 22679 00010B71 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22680 00010B75 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22681                                  .L_tc_recycle_frame_loop_00cb:
 22682 00010B78 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22683 00010B7B 7410                    	je .L_tc_recycle_frame_done_00cb
 22684 00010B7D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22685 00010B80 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22686 00010B83 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22687 00010B87 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22688 00010B8B EBEB                    	jmp .L_tc_recycle_frame_loop_00cb
 22689                                  .L_tc_recycle_frame_done_00cb:
 22690 00010B8D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22691 00010B8E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22692 00010B92 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22693 00010B95 C9                      	leave
 22694 00010B96 C22000                  	ret AND_KILL_FRAME(2)
 22695                                  .L_lambda_opt_end_0013:	; new closure is in rax
 22696 00010B99 C9                      	leave
 22697 00010B9A C21800                  	ret AND_KILL_FRAME(1)
 22698                                  .L_lambda_simple_end_0082:	; new closure is in rax
 22699 00010B9D 803804                  	cmp byte [rax], T_closure
 22700 00010BA0 0F8575700000            	jne L_error_non_closure
 22701 00010BA6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22702 00010BA9 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22703 00010BAC FF7500                  	push qword[rbp]
 22704 00010BAF 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22705 00010BB2 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22706 00010BB6 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22707 00010BBA 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22708 00010BBE 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22709 00010BC1 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22710 00010BC4 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22711 00010BC9 4983C103                	add r9, 3 	 ;for getting to the params
 22712 00010BCD 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22713 00010BD1 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22714                                  .L_tc_recycle_frame_loop_00cd:
 22715 00010BD4 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22716 00010BD7 7410                    	je .L_tc_recycle_frame_done_00cd
 22717 00010BD9 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22718 00010BDC 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22719 00010BDF 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22720 00010BE3 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22721 00010BE7 EBEB                    	jmp .L_tc_recycle_frame_loop_00cd
 22722                                  .L_tc_recycle_frame_done_00cd:
 22723 00010BE9 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22724 00010BEA 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22725 00010BEE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22726 00010BF1 C9                      	leave
 22727 00010BF2 C21800                  	ret AND_KILL_FRAME(1)
 22728                                  .L_lambda_simple_end_0081:	; new closure is in rax
 22729 00010BF5 803804                  	cmp byte [rax], T_closure
 22730 00010BF8 0F851D700000            	jne L_error_non_closure
 22731 00010BFE FF7001                  	push SOB_CLOSURE_ENV(rax)
 22732 00010C01 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22733 00010C04 FF7500                  	push qword[rbp]
 22734 00010C07 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22735 00010C0A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22736 00010C0E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22737 00010C12 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22738 00010C16 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22739 00010C19 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22740 00010C1C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22741 00010C21 4983C103                	add r9, 3 	 ;for getting to the params
 22742 00010C25 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22743 00010C29 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22744                                  .L_tc_recycle_frame_loop_00ce:
 22745 00010C2C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22746 00010C2F 7410                    	je .L_tc_recycle_frame_done_00ce
 22747 00010C31 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22748 00010C34 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22749 00010C37 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22750 00010C3B 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22751 00010C3F EBEB                    	jmp .L_tc_recycle_frame_loop_00ce
 22752                                  .L_tc_recycle_frame_done_00ce:
 22753 00010C41 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22754 00010C42 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22755 00010C46 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22756 00010C49 C9                      	leave
 22757 00010C4A C21800                  	ret AND_KILL_FRAME(1)
 22758                                  .L_lambda_simple_end_007d:	; new closure is in rax
 22759 00010C4D 803804                  	cmp byte [rax], T_closure
 22760 00010C50 0F85C56F0000            	jne L_error_non_closure
 22761 00010C56 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22762 00010C59 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22763 00010C5C FF7500                  	push qword[rbp]
 22764 00010C5F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22765 00010C62 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22766 00010C66 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22767 00010C6A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22768 00010C6E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22769 00010C71 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22770 00010C74 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22771 00010C79 4983C103                	add r9, 3 	 ;for getting to the params
 22772 00010C7D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22773 00010C81 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22774                                  .L_tc_recycle_frame_loop_00cf:
 22775 00010C84 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22776 00010C87 7410                    	je .L_tc_recycle_frame_done_00cf
 22777 00010C89 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22778 00010C8C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22779 00010C8F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22780 00010C93 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22781 00010C97 EBEB                    	jmp .L_tc_recycle_frame_loop_00cf
 22782                                  .L_tc_recycle_frame_done_00cf:
 22783 00010C99 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22784 00010C9A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22785 00010C9E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22786 00010CA1 C9                      	leave
 22787 00010CA2 C21800                  	ret AND_KILL_FRAME(1)
 22788                                  .L_lambda_simple_end_007c:	; new closure is in rax
 22789 00010CA5 50                      	push rax
 22790 00010CA6 6A01                    	push 1	; arg count
 22791 00010CA8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22792 00010CAD E812700000              	call malloc
 22793 00010CB2 50                      	push rax
 22794 00010CB3 BF00000000              	mov rdi, 8 * 0	; new rib
 22795 00010CB8 E807700000              	call malloc
 22796 00010CBD 50                      	push rax
 22797 00010CBE BF08000000              	mov rdi, 8 * 1	; extended env
 22798 00010CC3 E8FC6F0000              	call malloc
 22799 00010CC8 488B7D10                	mov rdi, ENV
 22800 00010CCC BE00000000              	mov rsi, 0
 22801 00010CD1 BA01000000              	mov rdx, 1
 22802                                  .L_lambda_simple_env_loop_0084:	; ext_env[i + 1] <-- env[i]
 22803 00010CD6 4883FE00                	cmp rsi, 0
 22804 00010CDA 7410                    	je .L_lambda_simple_env_end_0084
 22805 00010CDC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22806 00010CE0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22807 00010CE4 48FFC6                  	inc rsi
 22808 00010CE7 48FFC2                  	inc rdx
 22809 00010CEA EBEA                    	jmp .L_lambda_simple_env_loop_0084
 22810                                  .L_lambda_simple_env_end_0084:
 22811 00010CEC 5B                      	pop rbx
 22812 00010CED BE00000000              	mov rsi, 0
 22813                                  .L_lambda_simple_params_loop_0084:	; copy params
 22814 00010CF2 4883FE00                	cmp rsi, 0
 22815 00010CF6 740E                    	je .L_lambda_simple_params_end_0084
 22816 00010CF8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22817 00010CFD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22818 00010D01 48FFC6                  	inc rsi
 22819 00010D04 EBEC                    	jmp .L_lambda_simple_params_loop_0084
 22820                                  .L_lambda_simple_params_end_0084:
 22821 00010D06 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22822 00010D09 4889C3                  	mov rbx, rax
 22823 00010D0C 58                      	pop rax
 22824 00010D0D C60004                  	mov byte [rax], T_closure
 22825 00010D10 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22826 00010D14 48C74009[210D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0084
 22827 00010D1C E98D000000              	jmp .L_lambda_simple_end_0084
 22828                                  .L_lambda_simple_code_0084:	; lambda-simple body
 22829 00010D21 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22830 00010D27 740B                    	je .L_lambda_simple_arity_check_ok_0084
 22831 00010D29 FF742410                	push qword [rsp + 8 * 2]
 22832 00010D2D 6A01                    	push 1
 22833 00010D2F E9496F0000              	jmp L_error_incorrect_arity_simple
 22834                                  .L_lambda_simple_arity_check_ok_0084:
 22835 00010D34 C8000000                	enter 0, 0
 22836                                  	; preparing a non-tail-call
 22837 00010D38 488B0425[C0120000]      	mov rax, qword [free_var_75]	; free var char=?
 22838 00010D40 803805                  	cmp byte [rax], T_undefined
 22839 00010D43 0F844E6E0000            	je L_error_fvar_undefined
 22840 00010D49 50                      	push rax
 22841 00010D4A 6A01                    	push 1	; arg count
 22842 00010D4C 488B4520                	mov rax, PARAM(0)	; param make-string=?
 22843 00010D50 803804                  	cmp byte [rax], T_closure
 22844 00010D53 0F85C26E0000            	jne L_error_non_closure
 22845 00010D59 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22846 00010D5C FF5009                  	call SOB_CLOSURE_CODE(rax)
 22847 00010D5F 48890425[BC160000]      	mov qword [free_var_135], rax
 22848 00010D67 48B8-                   	mov rax, sob_void
 22848 00010D69 [0000000000000000] 
 22849                                  
 22850                                  	; preparing a non-tail-call
 22851 00010D71 488B0425[49120000]      	mov rax, qword [free_var_68]	; free var char-ci=?
 22852 00010D79 803805                  	cmp byte [rax], T_undefined
 22853 00010D7C 0F84156E0000            	je L_error_fvar_undefined
 22854 00010D82 50                      	push rax
 22855 00010D83 6A01                    	push 1	; arg count
 22856 00010D85 488B4520                	mov rax, PARAM(0)	; param make-string=?
 22857 00010D89 803804                  	cmp byte [rax], T_closure
 22858 00010D8C 0F85896E0000            	jne L_error_non_closure
 22859 00010D92 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22860 00010D95 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22861 00010D98 48890425[F0150000]      	mov qword [free_var_123], rax
 22862 00010DA0 48B8-                   	mov rax, sob_void
 22862 00010DA2 [0000000000000000] 
 22863 00010DAA C9                      	leave
 22864 00010DAB C21800                  	ret AND_KILL_FRAME(1)
 22865                                  .L_lambda_simple_end_0084:	; new closure is in rax
 22866 00010DAE 803804                  	cmp byte [rax], T_closure
 22867 00010DB1 0F85646E0000            	jne L_error_non_closure
 22868 00010DB7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22869 00010DBA FF5009                  	call SOB_CLOSURE_CODE(rax)
 22870                                  
 22871 00010DBD 4889C7                  	mov rdi, rax
 22872 00010DC0 E854710000              	call print_sexpr_if_not_void
 22873 00010DC5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22874 00010DCA E8F56E0000              	call malloc
 22875 00010DCF 50                      	push rax
 22876 00010DD0 BF00000000              	mov rdi, 8 * 0	; new rib
 22877 00010DD5 E8EA6E0000              	call malloc
 22878 00010DDA 50                      	push rax
 22879 00010DDB BF08000000              	mov rdi, 8 * 1	; extended env
 22880 00010DE0 E8DF6E0000              	call malloc
 22881 00010DE5 488B7D10                	mov rdi, ENV
 22882 00010DE9 BE00000000              	mov rsi, 0
 22883 00010DEE BA01000000              	mov rdx, 1
 22884                                  .L_lambda_simple_env_loop_0085:	; ext_env[i + 1] <-- env[i]
 22885 00010DF3 4883FE00                	cmp rsi, 0
 22886 00010DF7 7410                    	je .L_lambda_simple_env_end_0085
 22887 00010DF9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22888 00010DFD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22889 00010E01 48FFC6                  	inc rsi
 22890 00010E04 48FFC2                  	inc rdx
 22891 00010E07 EBEA                    	jmp .L_lambda_simple_env_loop_0085
 22892                                  .L_lambda_simple_env_end_0085:
 22893 00010E09 5B                      	pop rbx
 22894 00010E0A BE00000000              	mov rsi, 0
 22895                                  .L_lambda_simple_params_loop_0085:	; copy params
 22896 00010E0F 4883FE00                	cmp rsi, 0
 22897 00010E13 740E                    	je .L_lambda_simple_params_end_0085
 22898 00010E15 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22899 00010E1A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22900 00010E1E 48FFC6                  	inc rsi
 22901 00010E21 EBEC                    	jmp .L_lambda_simple_params_loop_0085
 22902                                  .L_lambda_simple_params_end_0085:
 22903 00010E23 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22904 00010E26 4889C3                  	mov rbx, rax
 22905 00010E29 58                      	pop rax
 22906 00010E2A C60004                  	mov byte [rax], T_closure
 22907 00010E2D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22908 00010E31 48C74009[3E0E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0085
 22909 00010E39 E91C010000              	jmp .L_lambda_simple_end_0085
 22910                                  .L_lambda_simple_code_0085:	; lambda-simple body
 22911 00010E3E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22912 00010E44 740B                    	je .L_lambda_simple_arity_check_ok_0085
 22913 00010E46 FF742410                	push qword [rsp + 8 * 2]
 22914 00010E4A 6A01                    	push 1
 22915 00010E4C E92C6E0000              	jmp L_error_incorrect_arity_simple
 22916                                  .L_lambda_simple_arity_check_ok_0085:
 22917 00010E51 C8000000                	enter 0, 0
 22918                                  	; preparing a non-tail-call
 22919 00010E55 488B4520                	mov rax, PARAM(0)	; param e
 22920 00010E59 50                      	push rax
 22921 00010E5A 6A01                    	push 1	; arg count
 22922 00010E5C 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 22923 00010E64 803805                  	cmp byte [rax], T_undefined
 22924 00010E67 0F842A6D0000            	je L_error_fvar_undefined
 22925 00010E6D 803804                  	cmp byte [rax], T_closure
 22926 00010E70 0F85A56D0000            	jne L_error_non_closure
 22927 00010E76 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22928 00010E79 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22929 00010E7C 483D[02000000]          	cmp rax, sob_boolean_false
 22930 00010E82 0F85CE000000            	jne .L_or_end_0011
 22931                                  	; preparing a non-tail-call
 22932 00010E88 488B4520                	mov rax, PARAM(0)	; param e
 22933 00010E8C 50                      	push rax
 22934 00010E8D 6A01                    	push 1	; arg count
 22935 00010E8F 488B0425[24150000]      	mov rax, qword [free_var_111]	; free var pair?
 22936 00010E97 803805                  	cmp byte [rax], T_undefined
 22937 00010E9A 0F84F76C0000            	je L_error_fvar_undefined
 22938 00010EA0 803804                  	cmp byte [rax], T_closure
 22939 00010EA3 0F85726D0000            	jne L_error_non_closure
 22940 00010EA9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22941 00010EAC FF5009                  	call SOB_CLOSURE_CODE(rax)
 22942 00010EAF 483D[02000000]          	cmp rax, sob_boolean_false
 22943 00010EB5 0F8491000000            	je .L_if_else_0068
 22944                                  	; preparing a tail-call
 22945                                  	; preparing a non-tail-call
 22946 00010EBB 488B4520                	mov rax, PARAM(0)	; param e
 22947 00010EBF 50                      	push rax
 22948 00010EC0 6A01                    	push 1	; arg count
 22949 00010EC2 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
 22950 00010ECA 803805                  	cmp byte [rax], T_undefined
 22951 00010ECD 0F84C46C0000            	je L_error_fvar_undefined
 22952 00010ED3 803804                  	cmp byte [rax], T_closure
 22953 00010ED6 0F853F6D0000            	jne L_error_non_closure
 22954 00010EDC FF7001                  	push SOB_CLOSURE_ENV(rax)
 22955 00010EDF FF5009                  	call SOB_CLOSURE_CODE(rax)
 22956 00010EE2 50                      	push rax
 22957 00010EE3 6A01                    	push 1	; arg count
 22958 00010EE5 488B0425[25140000]      	mov rax, qword [free_var_96]	; free var list?
 22959 00010EED 803805                  	cmp byte [rax], T_undefined
 22960 00010EF0 0F84A16C0000            	je L_error_fvar_undefined
 22961 00010EF6 803804                  	cmp byte [rax], T_closure
 22962 00010EF9 0F851C6D0000            	jne L_error_non_closure
 22963 00010EFF FF7001                  	push SOB_CLOSURE_ENV(rax)
 22964 00010F02 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22965 00010F05 FF7500                  	push qword[rbp]
 22966 00010F08 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22967 00010F0B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22968 00010F0F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22969 00010F13 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22970 00010F17 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22971 00010F1A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22972 00010F1D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22973 00010F22 4983C103                	add r9, 3 	 ;for getting to the params
 22974 00010F26 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22975 00010F2A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22976                                  .L_tc_recycle_frame_loop_00d0:
 22977 00010F2D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22978 00010F30 7410                    	je .L_tc_recycle_frame_done_00d0
 22979 00010F32 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22980 00010F35 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22981 00010F38 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22982 00010F3C 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22983 00010F40 EBEB                    	jmp .L_tc_recycle_frame_loop_00d0
 22984                                  .L_tc_recycle_frame_done_00d0:
 22985 00010F42 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22986 00010F43 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22987 00010F47 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22988 00010F4A EB0A                    	jmp .L_if_end_0068
 22989                                  .L_if_else_0068:
 22990 00010F4C 48B8-                   	mov rax, L_constants + 2
 22990 00010F4E [0200000000000000] 
 22991                                  .L_if_end_0068:
 22992                                  .L_or_end_0011:
 22993 00010F56 C9                      	leave
 22994 00010F57 C21800                  	ret AND_KILL_FRAME(1)
 22995                                  .L_lambda_simple_end_0085:	; new closure is in rax
 22996 00010F5A 48890425[25140000]      	mov qword [free_var_96], rax
 22997 00010F62 48B8-                   	mov rax, sob_void
 22997 00010F64 [0000000000000000] 
 22998                                  
 22999 00010F6C 4889C7                  	mov rdi, rax
 23000 00010F6F E8A56F0000              	call print_sexpr_if_not_void
 23001                                  	; preparing a non-tail-call
 23002 00010F74 488B0425[7A140000]      	mov rax, qword [free_var_101]	; free var make-vector
 23003 00010F7C 803805                  	cmp byte [rax], T_undefined
 23004 00010F7F 0F84126C0000            	je L_error_fvar_undefined
 23005 00010F85 50                      	push rax
 23006 00010F86 6A01                    	push 1	; arg count
 23007 00010F88 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23008 00010F8D E8326D0000              	call malloc
 23009 00010F92 50                      	push rax
 23010 00010F93 BF00000000              	mov rdi, 8 * 0	; new rib
 23011 00010F98 E8276D0000              	call malloc
 23012 00010F9D 50                      	push rax
 23013 00010F9E BF08000000              	mov rdi, 8 * 1	; extended env
 23014 00010FA3 E81C6D0000              	call malloc
 23015 00010FA8 488B7D10                	mov rdi, ENV
 23016 00010FAC BE00000000              	mov rsi, 0
 23017 00010FB1 BA01000000              	mov rdx, 1
 23018                                  .L_lambda_simple_env_loop_0086:	; ext_env[i + 1] <-- env[i]
 23019 00010FB6 4883FE00                	cmp rsi, 0
 23020 00010FBA 7410                    	je .L_lambda_simple_env_end_0086
 23021 00010FBC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23022 00010FC0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23023 00010FC4 48FFC6                  	inc rsi
 23024 00010FC7 48FFC2                  	inc rdx
 23025 00010FCA EBEA                    	jmp .L_lambda_simple_env_loop_0086
 23026                                  .L_lambda_simple_env_end_0086:
 23027 00010FCC 5B                      	pop rbx
 23028 00010FCD BE00000000              	mov rsi, 0
 23029                                  .L_lambda_simple_params_loop_0086:	; copy params
 23030 00010FD2 4883FE00                	cmp rsi, 0
 23031 00010FD6 740E                    	je .L_lambda_simple_params_end_0086
 23032 00010FD8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23033 00010FDD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23034 00010FE1 48FFC6                  	inc rsi
 23035 00010FE4 EBEC                    	jmp .L_lambda_simple_params_loop_0086
 23036                                  .L_lambda_simple_params_end_0086:
 23037 00010FE6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23038 00010FE9 4889C3                  	mov rbx, rax
 23039 00010FEC 58                      	pop rax
 23040 00010FED C60004                  	mov byte [rax], T_closure
 23041 00010FF0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23042 00010FF4 48C74009[01100100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0086
 23043 00010FFC E9B0060000              	jmp .L_lambda_simple_end_0086
 23044                                  .L_lambda_simple_code_0086:	; lambda-simple body
 23045 00011001 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23046 00011007 740B                    	je .L_lambda_simple_arity_check_ok_0086
 23047 00011009 FF742410                	push qword [rsp + 8 * 2]
 23048 0001100D 6A01                    	push 1
 23049 0001100F E9696C0000              	jmp L_error_incorrect_arity_simple
 23050                                  .L_lambda_simple_arity_check_ok_0086:
 23051 00011014 C8000000                	enter 0, 0
 23052 00011018 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23053 0001101D E8A26C0000              	call malloc
 23054 00011022 50                      	push rax
 23055 00011023 BF08000000              	mov rdi, 8 * 1	; new rib
 23056 00011028 E8976C0000              	call malloc
 23057 0001102D 50                      	push rax
 23058 0001102E BF10000000              	mov rdi, 8 * 2	; extended env
 23059 00011033 E88C6C0000              	call malloc
 23060 00011038 488B7D10                	mov rdi, ENV
 23061 0001103C BE00000000              	mov rsi, 0
 23062 00011041 BA01000000              	mov rdx, 1
 23063                                  .L_lambda_opt_env_loop_0014:	; ext_env[i + 1] <-- env[i]
 23064 00011046 4883FE01                	cmp rsi, 1
 23065 0001104A 7410                    	je .L_lambda_opt_env_end_0014
 23066 0001104C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23067 00011050 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23068 00011054 48FFC6                  	inc rsi
 23069 00011057 48FFC2                  	inc rdx
 23070 0001105A EBEA                    	jmp .L_lambda_opt_env_loop_0014
 23071                                  .L_lambda_opt_env_end_0014:
 23072 0001105C 5B                      	pop rbx
 23073 0001105D BE00000000              	mov rsi, 0
 23074                                  .L_lambda_opt_params_loop_0014:	; copy params
 23075 00011062 4883FE01                	cmp rsi, 1
 23076 00011066 740E                    	je .L_lambda_opt_params_end_0014
 23077 00011068 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23078 0001106D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23079 00011071 48FFC6                  	inc rsi
 23080 00011074 EBEC                    	jmp .L_lambda_opt_params_loop_0014
 23081                                  .L_lambda_opt_params_end_0014:
 23082 00011076 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23083 00011079 4889C3                  	mov rbx, rax
 23084 0001107C 58                      	pop rax
 23085 0001107D C60004                  	mov byte [rax], T_closure
 23086 00011080 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23087 00011084 48C74009[91100100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0014
 23088 0001108C E91C060000              	jmp .L_lambda_opt_end_0014
 23089                                  .L_lambda_opt_code_0014:	; lambda-opt body
 23090 00011091 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23091 00011097 7411                    	je .L_lambda_opt_arity_check_exact_0014
 23092 00011099 0F8FDA020000            	jg .L_lambda_opt_arity_check_more_0014
 23093 0001109F FF742410                	push qword [rsp + 8 * 2]
 23094 000110A3 6A01                    	push 1
 23095 000110A5 E9E76B0000              	jmp L_error_incorrect_arity_opt
 23096                                  .L_lambda_opt_arity_check_exact_0014:
 23097 000110AA 4883EC08                	sub rsp, 8
 23098 000110AE 488B442408              	mov rax, qword[rsp + 8 *1]
 23099 000110B3 48890424                	mov qword[rsp], rax  
 23100 000110B7 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 23101 000110BC 4889442408              	mov qword[rsp + 8 * 1], rax
 23102 000110C1 B802000000              	mov rax, 2
 23103 000110C6 4889442410              	mov qword[rsp + 8 *2], rax
 23104 000110CB 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
 23105 000110D0 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 23106 000110D5 48B8-                   	mov rax, sob_nil
 23106 000110D7 [0100000000000000] 
 23107 000110DF 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
 23108 000110E4 C8000000                	enter 0, 0
 23109                                  	; preparing a tail-call
 23110                                  	; preparing a non-tail-call
 23111 000110E8 488B4528                	mov rax, PARAM(1)	; param xs
 23112 000110EC 50                      	push rax
 23113 000110ED 6A01                    	push 1	; arg count
 23114 000110EF 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 23115 000110F7 803805                  	cmp byte [rax], T_undefined
 23116 000110FA 0F84976A0000            	je L_error_fvar_undefined
 23117 00011100 803804                  	cmp byte [rax], T_closure
 23118 00011103 0F85126B0000            	jne L_error_non_closure
 23119 00011109 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23120 0001110C FF5009                  	call SOB_CLOSURE_CODE(rax)
 23121 0001110F 483D[02000000]          	cmp rax, sob_boolean_false
 23122 00011115 740F                    	je .L_if_else_006e
 23123 00011117 48B8-                   	mov rax, L_constants + 0
 23123 00011119 [0000000000000000] 
 23124 00011121 E9EE000000              	jmp .L_if_end_006e
 23125                                  .L_if_else_006e:
 23126                                  	; preparing a non-tail-call
 23127 00011126 488B4528                	mov rax, PARAM(1)	; param xs
 23128 0001112A 50                      	push rax
 23129 0001112B 6A01                    	push 1	; arg count
 23130 0001112D 488B0425[24150000]      	mov rax, qword [free_var_111]	; free var pair?
 23131 00011135 803805                  	cmp byte [rax], T_undefined
 23132 00011138 0F84596A0000            	je L_error_fvar_undefined
 23133 0001113E 803804                  	cmp byte [rax], T_closure
 23134 00011141 0F85D46A0000            	jne L_error_non_closure
 23135 00011147 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23136 0001114A FF5009                  	call SOB_CLOSURE_CODE(rax)
 23137 0001114D 483D[02000000]          	cmp rax, sob_boolean_false
 23138 00011153 744C                    	je .L_if_else_006c
 23139                                  	; preparing a non-tail-call
 23140                                  	; preparing a non-tail-call
 23141 00011155 488B4528                	mov rax, PARAM(1)	; param xs
 23142 00011159 50                      	push rax
 23143 0001115A 6A01                    	push 1	; arg count
 23144 0001115C 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
 23145 00011164 803805                  	cmp byte [rax], T_undefined
 23146 00011167 0F842A6A0000            	je L_error_fvar_undefined
 23147 0001116D 803804                  	cmp byte [rax], T_closure
 23148 00011170 0F85A56A0000            	jne L_error_non_closure
 23149 00011176 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23150 00011179 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23151 0001117C 50                      	push rax
 23152 0001117D 6A01                    	push 1	; arg count
 23153 0001117F 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 23154 00011187 803805                  	cmp byte [rax], T_undefined
 23155 0001118A 0F84076A0000            	je L_error_fvar_undefined
 23156 00011190 803804                  	cmp byte [rax], T_closure
 23157 00011193 0F85826A0000            	jne L_error_non_closure
 23158 00011199 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23159 0001119C FF5009                  	call SOB_CLOSURE_CODE(rax)
 23160 0001119F EB0A                    	jmp .L_if_end_006c
 23161                                  .L_if_else_006c:
 23162 000111A1 48B8-                   	mov rax, L_constants + 2
 23162 000111A3 [0200000000000000] 
 23163                                  .L_if_end_006c:
 23164 000111AB 483D[02000000]          	cmp rax, sob_boolean_false
 23165 000111B1 7429                    	je .L_if_else_006d
 23166                                  	; preparing a non-tail-call
 23167 000111B3 488B4528                	mov rax, PARAM(1)	; param xs
 23168 000111B7 50                      	push rax
 23169 000111B8 6A01                    	push 1	; arg count
 23170 000111BA 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 23171 000111C2 803805                  	cmp byte [rax], T_undefined
 23172 000111C5 0F84CC690000            	je L_error_fvar_undefined
 23173 000111CB 803804                  	cmp byte [rax], T_closure
 23174 000111CE 0F85476A0000            	jne L_error_non_closure
 23175 000111D4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23176 000111D7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23177 000111DA EB38                    	jmp .L_if_end_006d
 23178                                  .L_if_else_006d:
 23179                                  	; preparing a non-tail-call
 23180 000111DC 48B8-                   	mov rax, L_constants + 2955
 23180 000111DE [8B0B000000000000] 
 23181 000111E6 50                      	push rax
 23182 000111E7 48B8-                   	mov rax, L_constants + 2946
 23182 000111E9 [820B000000000000] 
 23183 000111F1 50                      	push rax
 23184 000111F2 6A02                    	push 2	; arg count
 23185 000111F4 488B0425[37130000]      	mov rax, qword [free_var_82]	; free var error
 23186 000111FC 803805                  	cmp byte [rax], T_undefined
 23187 000111FF 0F8492690000            	je L_error_fvar_undefined
 23188 00011205 803804                  	cmp byte [rax], T_closure
 23189 00011208 0F850D6A0000            	jne L_error_non_closure
 23190 0001120E FF7001                  	push SOB_CLOSURE_ENV(rax)
 23191 00011211 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23192                                  .L_if_end_006d:
 23193                                  .L_if_end_006e:
 23194 00011214 50                      	push rax
 23195 00011215 6A01                    	push 1	; arg count
 23196 00011217 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23197 0001121C E8A36A0000              	call malloc
 23198 00011221 50                      	push rax
 23199 00011222 BF10000000              	mov rdi, 8 * 2	; new rib
 23200 00011227 E8986A0000              	call malloc
 23201 0001122C 50                      	push rax
 23202 0001122D BF18000000              	mov rdi, 8 * 3	; extended env
 23203 00011232 E88D6A0000              	call malloc
 23204 00011237 488B7D10                	mov rdi, ENV
 23205 0001123B BE00000000              	mov rsi, 0
 23206 00011240 BA01000000              	mov rdx, 1
 23207                                  .L_lambda_simple_env_loop_0088:	; ext_env[i + 1] <-- env[i]
 23208 00011245 4883FE02                	cmp rsi, 2
 23209 00011249 7410                    	je .L_lambda_simple_env_end_0088
 23210 0001124B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23211 0001124F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23212 00011253 48FFC6                  	inc rsi
 23213 00011256 48FFC2                  	inc rdx
 23214 00011259 EBEA                    	jmp .L_lambda_simple_env_loop_0088
 23215                                  .L_lambda_simple_env_end_0088:
 23216 0001125B 5B                      	pop rbx
 23217 0001125C BE00000000              	mov rsi, 0
 23218                                  .L_lambda_simple_params_loop_0088:	; copy params
 23219 00011261 4883FE02                	cmp rsi, 2
 23220 00011265 740E                    	je .L_lambda_simple_params_end_0088
 23221 00011267 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23222 0001126C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23223 00011270 48FFC6                  	inc rsi
 23224 00011273 EBEC                    	jmp .L_lambda_simple_params_loop_0088
 23225                                  .L_lambda_simple_params_end_0088:
 23226 00011275 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23227 00011278 4889C3                  	mov rbx, rax
 23228 0001127B 58                      	pop rax
 23229 0001127C C60004                  	mov byte [rax], T_closure
 23230 0001127F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23231 00011283 48C74009[90120100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0088
 23232 0001128B E98C000000              	jmp .L_lambda_simple_end_0088
 23233                                  .L_lambda_simple_code_0088:	; lambda-simple body
 23234 00011290 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23235 00011296 740B                    	je .L_lambda_simple_arity_check_ok_0088
 23236 00011298 FF742410                	push qword [rsp + 8 * 2]
 23237 0001129C 6A01                    	push 1
 23238 0001129E E9DA690000              	jmp L_error_incorrect_arity_simple
 23239                                  .L_lambda_simple_arity_check_ok_0088:
 23240 000112A3 C8000000                	enter 0, 0
 23241                                  	; preparing a tail-call
 23242 000112A7 488B4520                	mov rax, PARAM(0)	; param x
 23243 000112AB 50                      	push rax
 23244 000112AC 488B4510                	mov rax, ENV
 23245 000112B0 488B00                  	mov rax, qword [rax + 8 * 0]
 23246 000112B3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 23247 000112B6 50                      	push rax
 23248 000112B7 6A02                    	push 2	; arg count
 23249 000112B9 488B4510                	mov rax, ENV
 23250 000112BD 488B4008                	mov rax, qword [rax + 8 * 1]
 23251 000112C1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var asm-make-vector
 23252 000112C4 803804                  	cmp byte [rax], T_closure
 23253 000112C7 0F854E690000            	jne L_error_non_closure
 23254 000112CD FF7001                  	push SOB_CLOSURE_ENV(rax)
 23255 000112D0 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 23256 000112D3 FF7500                  	push qword[rbp]
 23257 000112D6 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 23258 000112D9 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 23259 000112DD 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 23260 000112E1 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 23261 000112E5 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 23262 000112E8 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 23263 000112EB 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 23264 000112F0 4983C103                	add r9, 3 	 ;for getting to the params
 23265 000112F4 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 23266 000112F8 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 23267                                  .L_tc_recycle_frame_loop_00d3:
 23268 000112FB 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 23269 000112FE 7410                    	je .L_tc_recycle_frame_done_00d3
 23270 00011300 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 23271 00011303 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 23272 00011306 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 23273 0001130A 4983E808                	sub r8, 8	 ;move the top of the stack one down
 23274 0001130E EBEB                    	jmp .L_tc_recycle_frame_loop_00d3
 23275                                  .L_tc_recycle_frame_done_00d3:
 23276 00011310 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 23277 00011311 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 23278 00011315 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23279 00011318 C9                      	leave
 23280 00011319 C21800                  	ret AND_KILL_FRAME(1)
 23281                                  .L_lambda_simple_end_0088:	; new closure is in rax
 23282 0001131C 803804                  	cmp byte [rax], T_closure
 23283 0001131F 0F85F6680000            	jne L_error_non_closure
 23284 00011325 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23285 00011328 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 23286 0001132B FF7500                  	push qword[rbp]
 23287 0001132E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 23288 00011331 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 23289 00011335 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 23290 00011339 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 23291 0001133D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 23292 00011340 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 23293 00011343 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 23294 00011348 4983C103                	add r9, 3 	 ;for getting to the params
 23295 0001134C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 23296 00011350 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 23297                                  .L_tc_recycle_frame_loop_00d4:
 23298 00011353 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 23299 00011356 7410                    	je .L_tc_recycle_frame_done_00d4
 23300 00011358 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 23301 0001135B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 23302 0001135E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 23303 00011362 4983E808                	sub r8, 8	 ;move the top of the stack one down
 23304 00011366 EBEB                    	jmp .L_tc_recycle_frame_loop_00d4
 23305                                  .L_tc_recycle_frame_done_00d4:
 23306 00011368 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 23307 00011369 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 23308 0001136D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23309 00011370 C9                      	leave
 23310 00011371 C22000                  	ret AND_KILL_FRAME(2)
 23311 00011374 E934030000              	jmp .L_lambda_opt_end_0014	; new closure is in rax
 23312                                  .L_lambda_opt_arity_check_more_0014:
 23313 00011379 488B442410              	mov rax, qword[rsp + 2 * 8]
 23314 0001137E 4889C7                  	mov rdi, rax
 23315 00011381 49B9-                   	mov r9, sob_nil
 23315 00011383 [0100000000000000] 
 23316 0001138B 4989F8                  	mov r8, rdi
 23317                                  .L_lambda_opt_stack_shrink_loop_0014:
 23318 0001138E 4983F801                	cmp r8, 1
 23319 00011392 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_0014
 23320 00011394 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)] 	;rbx is the top of the stack
 23321 00011399 BF11000000              	mov rdi, 1+8+8	;for pair
 23322 0001139E E821690000              	call malloc	 ;to create the pair in the stack
 23323 000113A3 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
 23324 000113A6 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
 23325 000113AA 4C894809                 	mov qword[rax+1+8],r9
 23326 000113AE 4989C1                  	mov r9 , rax	 ; for the recursion 
 23327 000113B1 49FFC8                  	dec r8
 23328 000113B4 EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_0014
 23329                                  .L_lambda_opt_stack_shrink_loop_exit_0014:
 23330 000113B6 488B442410              	mov rax, qword[rsp + 2 * 8]
 23331 000113BB BF02000000              	mov rdi, 2
 23332 000113C0 4829F8                  	sub rax, rdi
 23333 000113C3 4889C7                  	mov rdi, rax
 23334 000113C6 486BC008                	imul rax,8
 23335 000113CA 4801C4                  	add rsp, rax
 23336 000113CD 4889E0                  	mov rax, rsp
 23337 000113D0 4989F8                  	mov r8, rdi
 23338 000113D3 4D6BC008                	imul r8, 8
 23339 000113D7 4C29C0                  	sub rax, r8
 23340 000113DA 4989C2                  	mov r10, rax	; holds the original ret in the stack
 23341 000113DD 4983C218                	add r10, 8*3
 23342 000113E1 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
 23343 000113E5 4C8B00                  	mov r8, qword[rax] 	;arg count = r8
 23344 000113E8 4D6BC008                	imul r8,8
 23345 000113EC 4C01C0                  	add rax, r8
 23346 000113EF 4C8908                  	mov qword[rax] ,r9
 23347 000113F2 4D89D0                   	mov r8, r10
 23348 000113F5 4983C000                	add r8, 8 * 0
 23349 000113F9 4D8B08                  	mov r9,qword[r8]
 23350 000113FC 4D890CF8                	mov qword [r8 + rdi * 8], r9
 23351 00011400 4983EA18                	sub r10, 8*3
 23352 00011404 48C744241002000000      	mov qword [rsp+2*8], 2
 23353 0001140D 498B4208                	mov rax, qword[r10 + 1 * 8]
 23354 00011411 4889442408              	mov qword[rsp + 1*8] ,rax
 23355 00011416 498B02                  	mov rax, qword[r10]
 23356 00011419 48890424                	mov qword[rsp], rax
 23357 0001141D C8000000                	enter 0, 0
 23358                                  	; preparing a tail-call
 23359                                  	; preparing a non-tail-call
 23360 00011421 488B4528                	mov rax, PARAM(1)	; param xs
 23361 00011425 50                      	push rax
 23362 00011426 6A01                    	push 1	; arg count
 23363 00011428 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 23364 00011430 803805                  	cmp byte [rax], T_undefined
 23365 00011433 0F845E670000            	je L_error_fvar_undefined
 23366 00011439 803804                  	cmp byte [rax], T_closure
 23367 0001143C 0F85D9670000            	jne L_error_non_closure
 23368 00011442 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23369 00011445 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23370 00011448 483D[02000000]          	cmp rax, sob_boolean_false
 23371 0001144E 740F                    	je .L_if_else_006b
 23372 00011450 48B8-                   	mov rax, L_constants + 0
 23372 00011452 [0000000000000000] 
 23373 0001145A E9EE000000              	jmp .L_if_end_006b
 23374                                  .L_if_else_006b:
 23375                                  	; preparing a non-tail-call
 23376 0001145F 488B4528                	mov rax, PARAM(1)	; param xs
 23377 00011463 50                      	push rax
 23378 00011464 6A01                    	push 1	; arg count
 23379 00011466 488B0425[24150000]      	mov rax, qword [free_var_111]	; free var pair?
 23380 0001146E 803805                  	cmp byte [rax], T_undefined
 23381 00011471 0F8420670000            	je L_error_fvar_undefined
 23382 00011477 803804                  	cmp byte [rax], T_closure
 23383 0001147A 0F859B670000            	jne L_error_non_closure
 23384 00011480 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23385 00011483 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23386 00011486 483D[02000000]          	cmp rax, sob_boolean_false
 23387 0001148C 744C                    	je .L_if_else_0069
 23388                                  	; preparing a non-tail-call
 23389                                  	; preparing a non-tail-call
 23390 0001148E 488B4528                	mov rax, PARAM(1)	; param xs
 23391 00011492 50                      	push rax
 23392 00011493 6A01                    	push 1	; arg count
 23393 00011495 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
 23394 0001149D 803805                  	cmp byte [rax], T_undefined
 23395 000114A0 0F84F1660000            	je L_error_fvar_undefined
 23396 000114A6 803804                  	cmp byte [rax], T_closure
 23397 000114A9 0F856C670000            	jne L_error_non_closure
 23398 000114AF FF7001                  	push SOB_CLOSURE_ENV(rax)
 23399 000114B2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23400 000114B5 50                      	push rax
 23401 000114B6 6A01                    	push 1	; arg count
 23402 000114B8 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 23403 000114C0 803805                  	cmp byte [rax], T_undefined
 23404 000114C3 0F84CE660000            	je L_error_fvar_undefined
 23405 000114C9 803804                  	cmp byte [rax], T_closure
 23406 000114CC 0F8549670000            	jne L_error_non_closure
 23407 000114D2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23408 000114D5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23409 000114D8 EB0A                    	jmp .L_if_end_0069
 23410                                  .L_if_else_0069:
 23411 000114DA 48B8-                   	mov rax, L_constants + 2
 23411 000114DC [0200000000000000] 
 23412                                  .L_if_end_0069:
 23413 000114E4 483D[02000000]          	cmp rax, sob_boolean_false
 23414 000114EA 7429                    	je .L_if_else_006a
 23415                                  	; preparing a non-tail-call
 23416 000114EC 488B4528                	mov rax, PARAM(1)	; param xs
 23417 000114F0 50                      	push rax
 23418 000114F1 6A01                    	push 1	; arg count
 23419 000114F3 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 23420 000114FB 803805                  	cmp byte [rax], T_undefined
 23421 000114FE 0F8493660000            	je L_error_fvar_undefined
 23422 00011504 803804                  	cmp byte [rax], T_closure
 23423 00011507 0F850E670000            	jne L_error_non_closure
 23424 0001150D FF7001                  	push SOB_CLOSURE_ENV(rax)
 23425 00011510 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23426 00011513 EB38                    	jmp .L_if_end_006a
 23427                                  .L_if_else_006a:
 23428                                  	; preparing a non-tail-call
 23429 00011515 48B8-                   	mov rax, L_constants + 2955
 23429 00011517 [8B0B000000000000] 
 23430 0001151F 50                      	push rax
 23431 00011520 48B8-                   	mov rax, L_constants + 2946
 23431 00011522 [820B000000000000] 
 23432 0001152A 50                      	push rax
 23433 0001152B 6A02                    	push 2	; arg count
 23434 0001152D 488B0425[37130000]      	mov rax, qword [free_var_82]	; free var error
 23435 00011535 803805                  	cmp byte [rax], T_undefined
 23436 00011538 0F8459660000            	je L_error_fvar_undefined
 23437 0001153E 803804                  	cmp byte [rax], T_closure
 23438 00011541 0F85D4660000            	jne L_error_non_closure
 23439 00011547 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23440 0001154A FF5009                  	call SOB_CLOSURE_CODE(rax)
 23441                                  .L_if_end_006a:
 23442                                  .L_if_end_006b:
 23443 0001154D 50                      	push rax
 23444 0001154E 6A01                    	push 1	; arg count
 23445 00011550 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23446 00011555 E86A670000              	call malloc
 23447 0001155A 50                      	push rax
 23448 0001155B BF10000000              	mov rdi, 8 * 2	; new rib
 23449 00011560 E85F670000              	call malloc
 23450 00011565 50                      	push rax
 23451 00011566 BF18000000              	mov rdi, 8 * 3	; extended env
 23452 0001156B E854670000              	call malloc
 23453 00011570 488B7D10                	mov rdi, ENV
 23454 00011574 BE00000000              	mov rsi, 0
 23455 00011579 BA01000000              	mov rdx, 1
 23456                                  .L_lambda_simple_env_loop_0087:	; ext_env[i + 1] <-- env[i]
 23457 0001157E 4883FE02                	cmp rsi, 2
 23458 00011582 7410                    	je .L_lambda_simple_env_end_0087
 23459 00011584 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23460 00011588 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23461 0001158C 48FFC6                  	inc rsi
 23462 0001158F 48FFC2                  	inc rdx
 23463 00011592 EBEA                    	jmp .L_lambda_simple_env_loop_0087
 23464                                  .L_lambda_simple_env_end_0087:
 23465 00011594 5B                      	pop rbx
 23466 00011595 BE00000000              	mov rsi, 0
 23467                                  .L_lambda_simple_params_loop_0087:	; copy params
 23468 0001159A 4883FE02                	cmp rsi, 2
 23469 0001159E 740E                    	je .L_lambda_simple_params_end_0087
 23470 000115A0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23471 000115A5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23472 000115A9 48FFC6                  	inc rsi
 23473 000115AC EBEC                    	jmp .L_lambda_simple_params_loop_0087
 23474                                  .L_lambda_simple_params_end_0087:
 23475 000115AE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23476 000115B1 4889C3                  	mov rbx, rax
 23477 000115B4 58                      	pop rax
 23478 000115B5 C60004                  	mov byte [rax], T_closure
 23479 000115B8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23480 000115BC 48C74009[C9150100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0087
 23481 000115C4 E98C000000              	jmp .L_lambda_simple_end_0087
 23482                                  .L_lambda_simple_code_0087:	; lambda-simple body
 23483 000115C9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23484 000115CF 740B                    	je .L_lambda_simple_arity_check_ok_0087
 23485 000115D1 FF742410                	push qword [rsp + 8 * 2]
 23486 000115D5 6A01                    	push 1
 23487 000115D7 E9A1660000              	jmp L_error_incorrect_arity_simple
 23488                                  .L_lambda_simple_arity_check_ok_0087:
 23489 000115DC C8000000                	enter 0, 0
 23490                                  	; preparing a tail-call
 23491 000115E0 488B4520                	mov rax, PARAM(0)	; param x
 23492 000115E4 50                      	push rax
 23493 000115E5 488B4510                	mov rax, ENV
 23494 000115E9 488B00                  	mov rax, qword [rax + 8 * 0]
 23495 000115EC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 23496 000115EF 50                      	push rax
 23497 000115F0 6A02                    	push 2	; arg count
 23498 000115F2 488B4510                	mov rax, ENV
 23499 000115F6 488B4008                	mov rax, qword [rax + 8 * 1]
 23500 000115FA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var asm-make-vector
 23501 000115FD 803804                  	cmp byte [rax], T_closure
 23502 00011600 0F8515660000            	jne L_error_non_closure
 23503 00011606 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23504 00011609 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 23505 0001160C FF7500                  	push qword[rbp]
 23506 0001160F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 23507 00011612 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 23508 00011616 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 23509 0001161A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 23510 0001161E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 23511 00011621 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 23512 00011624 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 23513 00011629 4983C103                	add r9, 3 	 ;for getting to the params
 23514 0001162D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 23515 00011631 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 23516                                  .L_tc_recycle_frame_loop_00d1:
 23517 00011634 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 23518 00011637 7410                    	je .L_tc_recycle_frame_done_00d1
 23519 00011639 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 23520 0001163C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 23521 0001163F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 23522 00011643 4983E808                	sub r8, 8	 ;move the top of the stack one down
 23523 00011647 EBEB                    	jmp .L_tc_recycle_frame_loop_00d1
 23524                                  .L_tc_recycle_frame_done_00d1:
 23525 00011649 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 23526 0001164A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 23527 0001164E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23528 00011651 C9                      	leave
 23529 00011652 C21800                  	ret AND_KILL_FRAME(1)
 23530                                  .L_lambda_simple_end_0087:	; new closure is in rax
 23531 00011655 803804                  	cmp byte [rax], T_closure
 23532 00011658 0F85BD650000            	jne L_error_non_closure
 23533 0001165E FF7001                  	push SOB_CLOSURE_ENV(rax)
 23534 00011661 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 23535 00011664 FF7500                  	push qword[rbp]
 23536 00011667 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 23537 0001166A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 23538 0001166E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 23539 00011672 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 23540 00011676 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 23541 00011679 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 23542 0001167C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 23543 00011681 4983C103                	add r9, 3 	 ;for getting to the params
 23544 00011685 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 23545 00011689 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 23546                                  .L_tc_recycle_frame_loop_00d2:
 23547 0001168C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 23548 0001168F 7410                    	je .L_tc_recycle_frame_done_00d2
 23549 00011691 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 23550 00011694 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 23551 00011697 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 23552 0001169B 4983E808                	sub r8, 8	 ;move the top of the stack one down
 23553 0001169F EBEB                    	jmp .L_tc_recycle_frame_loop_00d2
 23554                                  .L_tc_recycle_frame_done_00d2:
 23555 000116A1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 23556 000116A2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 23557 000116A6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23558 000116A9 C9                      	leave
 23559 000116AA C22000                  	ret AND_KILL_FRAME(2)
 23560                                  .L_lambda_opt_end_0014:	; new closure is in rax
 23561 000116AD C9                      	leave
 23562 000116AE C21800                  	ret AND_KILL_FRAME(1)
 23563                                  .L_lambda_simple_end_0086:	; new closure is in rax
 23564 000116B1 803804                  	cmp byte [rax], T_closure
 23565 000116B4 0F8561650000            	jne L_error_non_closure
 23566 000116BA FF7001                  	push SOB_CLOSURE_ENV(rax)
 23567 000116BD FF5009                  	call SOB_CLOSURE_CODE(rax)
 23568 000116C0 48890425[7A140000]      	mov qword [free_var_101], rax
 23569 000116C8 48B8-                   	mov rax, sob_void
 23569 000116CA [0000000000000000] 
 23570                                  
 23571 000116D2 4889C7                  	mov rdi, rax
 23572 000116D5 E83F680000              	call print_sexpr_if_not_void
 23573                                  	; preparing a non-tail-call
 23574 000116DA 488B0425[58140000]      	mov rax, qword [free_var_99]	; free var make-string
 23575 000116E2 803805                  	cmp byte [rax], T_undefined
 23576 000116E5 0F84AC640000            	je L_error_fvar_undefined
 23577 000116EB 50                      	push rax
 23578 000116EC 6A01                    	push 1	; arg count
 23579 000116EE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23580 000116F3 E8CC650000              	call malloc
 23581 000116F8 50                      	push rax
 23582 000116F9 BF00000000              	mov rdi, 8 * 0	; new rib
 23583 000116FE E8C1650000              	call malloc
 23584 00011703 50                      	push rax
 23585 00011704 BF08000000              	mov rdi, 8 * 1	; extended env
 23586 00011709 E8B6650000              	call malloc
 23587 0001170E 488B7D10                	mov rdi, ENV
 23588 00011712 BE00000000              	mov rsi, 0
 23589 00011717 BA01000000              	mov rdx, 1
 23590                                  .L_lambda_simple_env_loop_0089:	; ext_env[i + 1] <-- env[i]
 23591 0001171C 4883FE00                	cmp rsi, 0
 23592 00011720 7410                    	je .L_lambda_simple_env_end_0089
 23593 00011722 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23594 00011726 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23595 0001172A 48FFC6                  	inc rsi
 23596 0001172D 48FFC2                  	inc rdx
 23597 00011730 EBEA                    	jmp .L_lambda_simple_env_loop_0089
 23598                                  .L_lambda_simple_env_end_0089:
 23599 00011732 5B                      	pop rbx
 23600 00011733 BE00000000              	mov rsi, 0
 23601                                  .L_lambda_simple_params_loop_0089:	; copy params
 23602 00011738 4883FE00                	cmp rsi, 0
 23603 0001173C 740E                    	je .L_lambda_simple_params_end_0089
 23604 0001173E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23605 00011743 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23606 00011747 48FFC6                  	inc rsi
 23607 0001174A EBEC                    	jmp .L_lambda_simple_params_loop_0089
 23608                                  .L_lambda_simple_params_end_0089:
 23609 0001174C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23610 0001174F 4889C3                  	mov rbx, rax
 23611 00011752 58                      	pop rax
 23612 00011753 C60004                  	mov byte [rax], T_closure
 23613 00011756 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23614 0001175A 48C74009[67170100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0089
 23615 00011762 E9B0060000              	jmp .L_lambda_simple_end_0089
 23616                                  .L_lambda_simple_code_0089:	; lambda-simple body
 23617 00011767 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23618 0001176D 740B                    	je .L_lambda_simple_arity_check_ok_0089
 23619 0001176F FF742410                	push qword [rsp + 8 * 2]
 23620 00011773 6A01                    	push 1
 23621 00011775 E903650000              	jmp L_error_incorrect_arity_simple
 23622                                  .L_lambda_simple_arity_check_ok_0089:
 23623 0001177A C8000000                	enter 0, 0
 23624 0001177E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23625 00011783 E83C650000              	call malloc
 23626 00011788 50                      	push rax
 23627 00011789 BF08000000              	mov rdi, 8 * 1	; new rib
 23628 0001178E E831650000              	call malloc
 23629 00011793 50                      	push rax
 23630 00011794 BF10000000              	mov rdi, 8 * 2	; extended env
 23631 00011799 E826650000              	call malloc
 23632 0001179E 488B7D10                	mov rdi, ENV
 23633 000117A2 BE00000000              	mov rsi, 0
 23634 000117A7 BA01000000              	mov rdx, 1
 23635                                  .L_lambda_opt_env_loop_0015:	; ext_env[i + 1] <-- env[i]
 23636 000117AC 4883FE01                	cmp rsi, 1
 23637 000117B0 7410                    	je .L_lambda_opt_env_end_0015
 23638 000117B2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23639 000117B6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23640 000117BA 48FFC6                  	inc rsi
 23641 000117BD 48FFC2                  	inc rdx
 23642 000117C0 EBEA                    	jmp .L_lambda_opt_env_loop_0015
 23643                                  .L_lambda_opt_env_end_0015:
 23644 000117C2 5B                      	pop rbx
 23645 000117C3 BE00000000              	mov rsi, 0
 23646                                  .L_lambda_opt_params_loop_0015:	; copy params
 23647 000117C8 4883FE01                	cmp rsi, 1
 23648 000117CC 740E                    	je .L_lambda_opt_params_end_0015
 23649 000117CE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23650 000117D3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23651 000117D7 48FFC6                  	inc rsi
 23652 000117DA EBEC                    	jmp .L_lambda_opt_params_loop_0015
 23653                                  .L_lambda_opt_params_end_0015:
 23654 000117DC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23655 000117DF 4889C3                  	mov rbx, rax
 23656 000117E2 58                      	pop rax
 23657 000117E3 C60004                  	mov byte [rax], T_closure
 23658 000117E6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23659 000117EA 48C74009[F7170100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0015
 23660 000117F2 E91C060000              	jmp .L_lambda_opt_end_0015
 23661                                  .L_lambda_opt_code_0015:	; lambda-opt body
 23662 000117F7 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23663 000117FD 7411                    	je .L_lambda_opt_arity_check_exact_0015
 23664 000117FF 0F8FDA020000            	jg .L_lambda_opt_arity_check_more_0015
 23665 00011805 FF742410                	push qword [rsp + 8 * 2]
 23666 00011809 6A01                    	push 1
 23667 0001180B E981640000              	jmp L_error_incorrect_arity_opt
 23668                                  .L_lambda_opt_arity_check_exact_0015:
 23669 00011810 4883EC08                	sub rsp, 8
 23670 00011814 488B442408              	mov rax, qword[rsp + 8 *1]
 23671 00011819 48890424                	mov qword[rsp], rax  
 23672 0001181D 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 23673 00011822 4889442408              	mov qword[rsp + 8 * 1], rax
 23674 00011827 B802000000              	mov rax, 2
 23675 0001182C 4889442410              	mov qword[rsp + 8 *2], rax
 23676 00011831 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
 23677 00011836 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 23678 0001183B 48B8-                   	mov rax, sob_nil
 23678 0001183D [0100000000000000] 
 23679 00011845 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
 23680 0001184A C8000000                	enter 0, 0
 23681                                  	; preparing a tail-call
 23682                                  	; preparing a non-tail-call
 23683 0001184E 488B4528                	mov rax, PARAM(1)	; param chs
 23684 00011852 50                      	push rax
 23685 00011853 6A01                    	push 1	; arg count
 23686 00011855 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 23687 0001185D 803805                  	cmp byte [rax], T_undefined
 23688 00011860 0F8431630000            	je L_error_fvar_undefined
 23689 00011866 803804                  	cmp byte [rax], T_closure
 23690 00011869 0F85AC630000            	jne L_error_non_closure
 23691 0001186F FF7001                  	push SOB_CLOSURE_ENV(rax)
 23692 00011872 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23693 00011875 483D[02000000]          	cmp rax, sob_boolean_false
 23694 0001187B 740F                    	je .L_if_else_0074
 23695 0001187D 48B8-                   	mov rax, L_constants + 4
 23695 0001187F [0400000000000000] 
 23696 00011887 E9EE000000              	jmp .L_if_end_0074
 23697                                  .L_if_else_0074:
 23698                                  	; preparing a non-tail-call
 23699 0001188C 488B4528                	mov rax, PARAM(1)	; param chs
 23700 00011890 50                      	push rax
 23701 00011891 6A01                    	push 1	; arg count
 23702 00011893 488B0425[24150000]      	mov rax, qword [free_var_111]	; free var pair?
 23703 0001189B 803805                  	cmp byte [rax], T_undefined
 23704 0001189E 0F84F3620000            	je L_error_fvar_undefined
 23705 000118A4 803804                  	cmp byte [rax], T_closure
 23706 000118A7 0F856E630000            	jne L_error_non_closure
 23707 000118AD FF7001                  	push SOB_CLOSURE_ENV(rax)
 23708 000118B0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23709 000118B3 483D[02000000]          	cmp rax, sob_boolean_false
 23710 000118B9 744C                    	je .L_if_else_0072
 23711                                  	; preparing a non-tail-call
 23712                                  	; preparing a non-tail-call
 23713 000118BB 488B4528                	mov rax, PARAM(1)	; param chs
 23714 000118BF 50                      	push rax
 23715 000118C0 6A01                    	push 1	; arg count
 23716 000118C2 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
 23717 000118CA 803805                  	cmp byte [rax], T_undefined
 23718 000118CD 0F84C4620000            	je L_error_fvar_undefined
 23719 000118D3 803804                  	cmp byte [rax], T_closure
 23720 000118D6 0F853F630000            	jne L_error_non_closure
 23721 000118DC FF7001                  	push SOB_CLOSURE_ENV(rax)
 23722 000118DF FF5009                  	call SOB_CLOSURE_CODE(rax)
 23723 000118E2 50                      	push rax
 23724 000118E3 6A01                    	push 1	; arg count
 23725 000118E5 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 23726 000118ED 803805                  	cmp byte [rax], T_undefined
 23727 000118F0 0F84A1620000            	je L_error_fvar_undefined
 23728 000118F6 803804                  	cmp byte [rax], T_closure
 23729 000118F9 0F851C630000            	jne L_error_non_closure
 23730 000118FF FF7001                  	push SOB_CLOSURE_ENV(rax)
 23731 00011902 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23732 00011905 EB0A                    	jmp .L_if_end_0072
 23733                                  .L_if_else_0072:
 23734 00011907 48B8-                   	mov rax, L_constants + 2
 23734 00011909 [0200000000000000] 
 23735                                  .L_if_end_0072:
 23736 00011911 483D[02000000]          	cmp rax, sob_boolean_false
 23737 00011917 7429                    	je .L_if_else_0073
 23738                                  	; preparing a non-tail-call
 23739 00011919 488B4528                	mov rax, PARAM(1)	; param chs
 23740 0001191D 50                      	push rax
 23741 0001191E 6A01                    	push 1	; arg count
 23742 00011920 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 23743 00011928 803805                  	cmp byte [rax], T_undefined
 23744 0001192B 0F8466620000            	je L_error_fvar_undefined
 23745 00011931 803804                  	cmp byte [rax], T_closure
 23746 00011934 0F85E1620000            	jne L_error_non_closure
 23747 0001193A FF7001                  	push SOB_CLOSURE_ENV(rax)
 23748 0001193D FF5009                  	call SOB_CLOSURE_CODE(rax)
 23749 00011940 EB38                    	jmp .L_if_end_0073
 23750                                  .L_if_else_0073:
 23751                                  	; preparing a non-tail-call
 23752 00011942 48B8-                   	mov rax, L_constants + 3016
 23752 00011944 [C80B000000000000] 
 23753 0001194C 50                      	push rax
 23754 0001194D 48B8-                   	mov rax, L_constants + 3007
 23754 0001194F [BF0B000000000000] 
 23755 00011957 50                      	push rax
 23756 00011958 6A02                    	push 2	; arg count
 23757 0001195A 488B0425[37130000]      	mov rax, qword [free_var_82]	; free var error
 23758 00011962 803805                  	cmp byte [rax], T_undefined
 23759 00011965 0F842C620000            	je L_error_fvar_undefined
 23760 0001196B 803804                  	cmp byte [rax], T_closure
 23761 0001196E 0F85A7620000            	jne L_error_non_closure
 23762 00011974 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23763 00011977 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23764                                  .L_if_end_0073:
 23765                                  .L_if_end_0074:
 23766 0001197A 50                      	push rax
 23767 0001197B 6A01                    	push 1	; arg count
 23768 0001197D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23769 00011982 E83D630000              	call malloc
 23770 00011987 50                      	push rax
 23771 00011988 BF10000000              	mov rdi, 8 * 2	; new rib
 23772 0001198D E832630000              	call malloc
 23773 00011992 50                      	push rax
 23774 00011993 BF18000000              	mov rdi, 8 * 3	; extended env
 23775 00011998 E827630000              	call malloc
 23776 0001199D 488B7D10                	mov rdi, ENV
 23777 000119A1 BE00000000              	mov rsi, 0
 23778 000119A6 BA01000000              	mov rdx, 1
 23779                                  .L_lambda_simple_env_loop_008b:	; ext_env[i + 1] <-- env[i]
 23780 000119AB 4883FE02                	cmp rsi, 2
 23781 000119AF 7410                    	je .L_lambda_simple_env_end_008b
 23782 000119B1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23783 000119B5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23784 000119B9 48FFC6                  	inc rsi
 23785 000119BC 48FFC2                  	inc rdx
 23786 000119BF EBEA                    	jmp .L_lambda_simple_env_loop_008b
 23787                                  .L_lambda_simple_env_end_008b:
 23788 000119C1 5B                      	pop rbx
 23789 000119C2 BE00000000              	mov rsi, 0
 23790                                  .L_lambda_simple_params_loop_008b:	; copy params
 23791 000119C7 4883FE02                	cmp rsi, 2
 23792 000119CB 740E                    	je .L_lambda_simple_params_end_008b
 23793 000119CD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23794 000119D2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23795 000119D6 48FFC6                  	inc rsi
 23796 000119D9 EBEC                    	jmp .L_lambda_simple_params_loop_008b
 23797                                  .L_lambda_simple_params_end_008b:
 23798 000119DB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23799 000119DE 4889C3                  	mov rbx, rax
 23800 000119E1 58                      	pop rax
 23801 000119E2 C60004                  	mov byte [rax], T_closure
 23802 000119E5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23803 000119E9 48C74009[F6190100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_008b
 23804 000119F1 E98C000000              	jmp .L_lambda_simple_end_008b
 23805                                  .L_lambda_simple_code_008b:	; lambda-simple body
 23806 000119F6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23807 000119FC 740B                    	je .L_lambda_simple_arity_check_ok_008b
 23808 000119FE FF742410                	push qword [rsp + 8 * 2]
 23809 00011A02 6A01                    	push 1
 23810 00011A04 E974620000              	jmp L_error_incorrect_arity_simple
 23811                                  .L_lambda_simple_arity_check_ok_008b:
 23812 00011A09 C8000000                	enter 0, 0
 23813                                  	; preparing a tail-call
 23814 00011A0D 488B4520                	mov rax, PARAM(0)	; param ch
 23815 00011A11 50                      	push rax
 23816 00011A12 488B4510                	mov rax, ENV
 23817 00011A16 488B00                  	mov rax, qword [rax + 8 * 0]
 23818 00011A19 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 23819 00011A1C 50                      	push rax
 23820 00011A1D 6A02                    	push 2	; arg count
 23821 00011A1F 488B4510                	mov rax, ENV
 23822 00011A23 488B4008                	mov rax, qword [rax + 8 * 1]
 23823 00011A27 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var asm-make-string
 23824 00011A2A 803804                  	cmp byte [rax], T_closure
 23825 00011A2D 0F85E8610000            	jne L_error_non_closure
 23826 00011A33 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23827 00011A36 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 23828 00011A39 FF7500                  	push qword[rbp]
 23829 00011A3C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 23830 00011A3F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 23831 00011A43 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 23832 00011A47 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 23833 00011A4B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 23834 00011A4E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 23835 00011A51 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 23836 00011A56 4983C103                	add r9, 3 	 ;for getting to the params
 23837 00011A5A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 23838 00011A5E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 23839                                  .L_tc_recycle_frame_loop_00d7:
 23840 00011A61 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 23841 00011A64 7410                    	je .L_tc_recycle_frame_done_00d7
 23842 00011A66 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 23843 00011A69 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 23844 00011A6C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 23845 00011A70 4983E808                	sub r8, 8	 ;move the top of the stack one down
 23846 00011A74 EBEB                    	jmp .L_tc_recycle_frame_loop_00d7
 23847                                  .L_tc_recycle_frame_done_00d7:
 23848 00011A76 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 23849 00011A77 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 23850 00011A7B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23851 00011A7E C9                      	leave
 23852 00011A7F C21800                  	ret AND_KILL_FRAME(1)
 23853                                  .L_lambda_simple_end_008b:	; new closure is in rax
 23854 00011A82 803804                  	cmp byte [rax], T_closure
 23855 00011A85 0F8590610000            	jne L_error_non_closure
 23856 00011A8B FF7001                  	push SOB_CLOSURE_ENV(rax)
 23857 00011A8E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 23858 00011A91 FF7500                  	push qword[rbp]
 23859 00011A94 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 23860 00011A97 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 23861 00011A9B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 23862 00011A9F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 23863 00011AA3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 23864 00011AA6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 23865 00011AA9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 23866 00011AAE 4983C103                	add r9, 3 	 ;for getting to the params
 23867 00011AB2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 23868 00011AB6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 23869                                  .L_tc_recycle_frame_loop_00d8:
 23870 00011AB9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 23871 00011ABC 7410                    	je .L_tc_recycle_frame_done_00d8
 23872 00011ABE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 23873 00011AC1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 23874 00011AC4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 23875 00011AC8 4983E808                	sub r8, 8	 ;move the top of the stack one down
 23876 00011ACC EBEB                    	jmp .L_tc_recycle_frame_loop_00d8
 23877                                  .L_tc_recycle_frame_done_00d8:
 23878 00011ACE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 23879 00011ACF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 23880 00011AD3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23881 00011AD6 C9                      	leave
 23882 00011AD7 C22000                  	ret AND_KILL_FRAME(2)
 23883 00011ADA E934030000              	jmp .L_lambda_opt_end_0015	; new closure is in rax
 23884                                  .L_lambda_opt_arity_check_more_0015:
 23885 00011ADF 488B442410              	mov rax, qword[rsp + 2 * 8]
 23886 00011AE4 4889C7                  	mov rdi, rax
 23887 00011AE7 49B9-                   	mov r9, sob_nil
 23887 00011AE9 [0100000000000000] 
 23888 00011AF1 4989F8                  	mov r8, rdi
 23889                                  .L_lambda_opt_stack_shrink_loop_0015:
 23890 00011AF4 4983F801                	cmp r8, 1
 23891 00011AF8 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_0015
 23892 00011AFA 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)] 	;rbx is the top of the stack
 23893 00011AFF BF11000000              	mov rdi, 1+8+8	;for pair
 23894 00011B04 E8BB610000              	call malloc	 ;to create the pair in the stack
 23895 00011B09 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
 23896 00011B0C 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
 23897 00011B10 4C894809                 	mov qword[rax+1+8],r9
 23898 00011B14 4989C1                  	mov r9 , rax	 ; for the recursion 
 23899 00011B17 49FFC8                  	dec r8
 23900 00011B1A EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_0015
 23901                                  .L_lambda_opt_stack_shrink_loop_exit_0015:
 23902 00011B1C 488B442410              	mov rax, qword[rsp + 2 * 8]
 23903 00011B21 BF02000000              	mov rdi, 2
 23904 00011B26 4829F8                  	sub rax, rdi
 23905 00011B29 4889C7                  	mov rdi, rax
 23906 00011B2C 486BC008                	imul rax,8
 23907 00011B30 4801C4                  	add rsp, rax
 23908 00011B33 4889E0                  	mov rax, rsp
 23909 00011B36 4989F8                  	mov r8, rdi
 23910 00011B39 4D6BC008                	imul r8, 8
 23911 00011B3D 4C29C0                  	sub rax, r8
 23912 00011B40 4989C2                  	mov r10, rax	; holds the original ret in the stack
 23913 00011B43 4983C218                	add r10, 8*3
 23914 00011B47 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
 23915 00011B4B 4C8B00                  	mov r8, qword[rax] 	;arg count = r8
 23916 00011B4E 4D6BC008                	imul r8,8
 23917 00011B52 4C01C0                  	add rax, r8
 23918 00011B55 4C8908                  	mov qword[rax] ,r9
 23919 00011B58 4D89D0                   	mov r8, r10
 23920 00011B5B 4983C000                	add r8, 8 * 0
 23921 00011B5F 4D8B08                  	mov r9,qword[r8]
 23922 00011B62 4D890CF8                	mov qword [r8 + rdi * 8], r9
 23923 00011B66 4983EA18                	sub r10, 8*3
 23924 00011B6A 48C744241002000000      	mov qword [rsp+2*8], 2
 23925 00011B73 498B4208                	mov rax, qword[r10 + 1 * 8]
 23926 00011B77 4889442408              	mov qword[rsp + 1*8] ,rax
 23927 00011B7C 498B02                  	mov rax, qword[r10]
 23928 00011B7F 48890424                	mov qword[rsp], rax
 23929 00011B83 C8000000                	enter 0, 0
 23930                                  	; preparing a tail-call
 23931                                  	; preparing a non-tail-call
 23932 00011B87 488B4528                	mov rax, PARAM(1)	; param chs
 23933 00011B8B 50                      	push rax
 23934 00011B8C 6A01                    	push 1	; arg count
 23935 00011B8E 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 23936 00011B96 803805                  	cmp byte [rax], T_undefined
 23937 00011B99 0F84F85F0000            	je L_error_fvar_undefined
 23938 00011B9F 803804                  	cmp byte [rax], T_closure
 23939 00011BA2 0F8573600000            	jne L_error_non_closure
 23940 00011BA8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23941 00011BAB FF5009                  	call SOB_CLOSURE_CODE(rax)
 23942 00011BAE 483D[02000000]          	cmp rax, sob_boolean_false
 23943 00011BB4 740F                    	je .L_if_else_0071
 23944 00011BB6 48B8-                   	mov rax, L_constants + 4
 23944 00011BB8 [0400000000000000] 
 23945 00011BC0 E9EE000000              	jmp .L_if_end_0071
 23946                                  .L_if_else_0071:
 23947                                  	; preparing a non-tail-call
 23948 00011BC5 488B4528                	mov rax, PARAM(1)	; param chs
 23949 00011BC9 50                      	push rax
 23950 00011BCA 6A01                    	push 1	; arg count
 23951 00011BCC 488B0425[24150000]      	mov rax, qword [free_var_111]	; free var pair?
 23952 00011BD4 803805                  	cmp byte [rax], T_undefined
 23953 00011BD7 0F84BA5F0000            	je L_error_fvar_undefined
 23954 00011BDD 803804                  	cmp byte [rax], T_closure
 23955 00011BE0 0F8535600000            	jne L_error_non_closure
 23956 00011BE6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23957 00011BE9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23958 00011BEC 483D[02000000]          	cmp rax, sob_boolean_false
 23959 00011BF2 744C                    	je .L_if_else_006f
 23960                                  	; preparing a non-tail-call
 23961                                  	; preparing a non-tail-call
 23962 00011BF4 488B4528                	mov rax, PARAM(1)	; param chs
 23963 00011BF8 50                      	push rax
 23964 00011BF9 6A01                    	push 1	; arg count
 23965 00011BFB 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
 23966 00011C03 803805                  	cmp byte [rax], T_undefined
 23967 00011C06 0F848B5F0000            	je L_error_fvar_undefined
 23968 00011C0C 803804                  	cmp byte [rax], T_closure
 23969 00011C0F 0F8506600000            	jne L_error_non_closure
 23970 00011C15 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23971 00011C18 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23972 00011C1B 50                      	push rax
 23973 00011C1C 6A01                    	push 1	; arg count
 23974 00011C1E 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 23975 00011C26 803805                  	cmp byte [rax], T_undefined
 23976 00011C29 0F84685F0000            	je L_error_fvar_undefined
 23977 00011C2F 803804                  	cmp byte [rax], T_closure
 23978 00011C32 0F85E35F0000            	jne L_error_non_closure
 23979 00011C38 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23980 00011C3B FF5009                  	call SOB_CLOSURE_CODE(rax)
 23981 00011C3E EB0A                    	jmp .L_if_end_006f
 23982                                  .L_if_else_006f:
 23983 00011C40 48B8-                   	mov rax, L_constants + 2
 23983 00011C42 [0200000000000000] 
 23984                                  .L_if_end_006f:
 23985 00011C4A 483D[02000000]          	cmp rax, sob_boolean_false
 23986 00011C50 7429                    	je .L_if_else_0070
 23987                                  	; preparing a non-tail-call
 23988 00011C52 488B4528                	mov rax, PARAM(1)	; param chs
 23989 00011C56 50                      	push rax
 23990 00011C57 6A01                    	push 1	; arg count
 23991 00011C59 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 23992 00011C61 803805                  	cmp byte [rax], T_undefined
 23993 00011C64 0F842D5F0000            	je L_error_fvar_undefined
 23994 00011C6A 803804                  	cmp byte [rax], T_closure
 23995 00011C6D 0F85A85F0000            	jne L_error_non_closure
 23996 00011C73 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23997 00011C76 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23998 00011C79 EB38                    	jmp .L_if_end_0070
 23999                                  .L_if_else_0070:
 24000                                  	; preparing a non-tail-call
 24001 00011C7B 48B8-                   	mov rax, L_constants + 3016
 24001 00011C7D [C80B000000000000] 
 24002 00011C85 50                      	push rax
 24003 00011C86 48B8-                   	mov rax, L_constants + 3007
 24003 00011C88 [BF0B000000000000] 
 24004 00011C90 50                      	push rax
 24005 00011C91 6A02                    	push 2	; arg count
 24006 00011C93 488B0425[37130000]      	mov rax, qword [free_var_82]	; free var error
 24007 00011C9B 803805                  	cmp byte [rax], T_undefined
 24008 00011C9E 0F84F35E0000            	je L_error_fvar_undefined
 24009 00011CA4 803804                  	cmp byte [rax], T_closure
 24010 00011CA7 0F856E5F0000            	jne L_error_non_closure
 24011 00011CAD FF7001                  	push SOB_CLOSURE_ENV(rax)
 24012 00011CB0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24013                                  .L_if_end_0070:
 24014                                  .L_if_end_0071:
 24015 00011CB3 50                      	push rax
 24016 00011CB4 6A01                    	push 1	; arg count
 24017 00011CB6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24018 00011CBB E804600000              	call malloc
 24019 00011CC0 50                      	push rax
 24020 00011CC1 BF10000000              	mov rdi, 8 * 2	; new rib
 24021 00011CC6 E8F95F0000              	call malloc
 24022 00011CCB 50                      	push rax
 24023 00011CCC BF18000000              	mov rdi, 8 * 3	; extended env
 24024 00011CD1 E8EE5F0000              	call malloc
 24025 00011CD6 488B7D10                	mov rdi, ENV
 24026 00011CDA BE00000000              	mov rsi, 0
 24027 00011CDF BA01000000              	mov rdx, 1
 24028                                  .L_lambda_simple_env_loop_008a:	; ext_env[i + 1] <-- env[i]
 24029 00011CE4 4883FE02                	cmp rsi, 2
 24030 00011CE8 7410                    	je .L_lambda_simple_env_end_008a
 24031 00011CEA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24032 00011CEE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24033 00011CF2 48FFC6                  	inc rsi
 24034 00011CF5 48FFC2                  	inc rdx
 24035 00011CF8 EBEA                    	jmp .L_lambda_simple_env_loop_008a
 24036                                  .L_lambda_simple_env_end_008a:
 24037 00011CFA 5B                      	pop rbx
 24038 00011CFB BE00000000              	mov rsi, 0
 24039                                  .L_lambda_simple_params_loop_008a:	; copy params
 24040 00011D00 4883FE02                	cmp rsi, 2
 24041 00011D04 740E                    	je .L_lambda_simple_params_end_008a
 24042 00011D06 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24043 00011D0B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24044 00011D0F 48FFC6                  	inc rsi
 24045 00011D12 EBEC                    	jmp .L_lambda_simple_params_loop_008a
 24046                                  .L_lambda_simple_params_end_008a:
 24047 00011D14 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24048 00011D17 4889C3                  	mov rbx, rax
 24049 00011D1A 58                      	pop rax
 24050 00011D1B C60004                  	mov byte [rax], T_closure
 24051 00011D1E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24052 00011D22 48C74009[2F1D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_008a
 24053 00011D2A E98C000000              	jmp .L_lambda_simple_end_008a
 24054                                  .L_lambda_simple_code_008a:	; lambda-simple body
 24055 00011D2F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24056 00011D35 740B                    	je .L_lambda_simple_arity_check_ok_008a
 24057 00011D37 FF742410                	push qword [rsp + 8 * 2]
 24058 00011D3B 6A01                    	push 1
 24059 00011D3D E93B5F0000              	jmp L_error_incorrect_arity_simple
 24060                                  .L_lambda_simple_arity_check_ok_008a:
 24061 00011D42 C8000000                	enter 0, 0
 24062                                  	; preparing a tail-call
 24063 00011D46 488B4520                	mov rax, PARAM(0)	; param ch
 24064 00011D4A 50                      	push rax
 24065 00011D4B 488B4510                	mov rax, ENV
 24066 00011D4F 488B00                  	mov rax, qword [rax + 8 * 0]
 24067 00011D52 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 24068 00011D55 50                      	push rax
 24069 00011D56 6A02                    	push 2	; arg count
 24070 00011D58 488B4510                	mov rax, ENV
 24071 00011D5C 488B4008                	mov rax, qword [rax + 8 * 1]
 24072 00011D60 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var asm-make-string
 24073 00011D63 803804                  	cmp byte [rax], T_closure
 24074 00011D66 0F85AF5E0000            	jne L_error_non_closure
 24075 00011D6C FF7001                  	push SOB_CLOSURE_ENV(rax)
 24076 00011D6F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 24077 00011D72 FF7500                  	push qword[rbp]
 24078 00011D75 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 24079 00011D78 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 24080 00011D7C 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 24081 00011D80 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 24082 00011D84 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 24083 00011D87 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 24084 00011D8A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 24085 00011D8F 4983C103                	add r9, 3 	 ;for getting to the params
 24086 00011D93 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 24087 00011D97 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 24088                                  .L_tc_recycle_frame_loop_00d5:
 24089 00011D9A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 24090 00011D9D 7410                    	je .L_tc_recycle_frame_done_00d5
 24091 00011D9F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 24092 00011DA2 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 24093 00011DA5 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 24094 00011DA9 4983E808                	sub r8, 8	 ;move the top of the stack one down
 24095 00011DAD EBEB                    	jmp .L_tc_recycle_frame_loop_00d5
 24096                                  .L_tc_recycle_frame_done_00d5:
 24097 00011DAF 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 24098 00011DB0 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 24099 00011DB4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24100 00011DB7 C9                      	leave
 24101 00011DB8 C21800                  	ret AND_KILL_FRAME(1)
 24102                                  .L_lambda_simple_end_008a:	; new closure is in rax
 24103 00011DBB 803804                  	cmp byte [rax], T_closure
 24104 00011DBE 0F85575E0000            	jne L_error_non_closure
 24105 00011DC4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24106 00011DC7 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 24107 00011DCA FF7500                  	push qword[rbp]
 24108 00011DCD 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 24109 00011DD0 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 24110 00011DD4 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 24111 00011DD8 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 24112 00011DDC 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 24113 00011DDF 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 24114 00011DE2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 24115 00011DE7 4983C103                	add r9, 3 	 ;for getting to the params
 24116 00011DEB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 24117 00011DEF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 24118                                  .L_tc_recycle_frame_loop_00d6:
 24119 00011DF2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 24120 00011DF5 7410                    	je .L_tc_recycle_frame_done_00d6
 24121 00011DF7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 24122 00011DFA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 24123 00011DFD 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 24124 00011E01 4983E808                	sub r8, 8	 ;move the top of the stack one down
 24125 00011E05 EBEB                    	jmp .L_tc_recycle_frame_loop_00d6
 24126                                  .L_tc_recycle_frame_done_00d6:
 24127 00011E07 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 24128 00011E08 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 24129 00011E0C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24130 00011E0F C9                      	leave
 24131 00011E10 C22000                  	ret AND_KILL_FRAME(2)
 24132                                  .L_lambda_opt_end_0015:	; new closure is in rax
 24133 00011E13 C9                      	leave
 24134 00011E14 C21800                  	ret AND_KILL_FRAME(1)
 24135                                  .L_lambda_simple_end_0089:	; new closure is in rax
 24136 00011E17 803804                  	cmp byte [rax], T_closure
 24137 00011E1A 0F85FB5D0000            	jne L_error_non_closure
 24138 00011E20 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24139 00011E23 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24140 00011E26 48890425[58140000]      	mov qword [free_var_99], rax
 24141 00011E2E 48B8-                   	mov rax, sob_void
 24141 00011E30 [0000000000000000] 
 24142                                  
 24143 00011E38 4889C7                  	mov rdi, rax
 24144 00011E3B E8D9600000              	call print_sexpr_if_not_void
 24145                                  	; preparing a non-tail-call
 24146 00011E40 48B8-                   	mov rax, L_constants + 1993
 24146 00011E42 [C907000000000000] 
 24147 00011E4A 50                      	push rax
 24148 00011E4B 6A01                    	push 1	; arg count
 24149 00011E4D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24150 00011E52 E86D5E0000              	call malloc
 24151 00011E57 50                      	push rax
 24152 00011E58 BF00000000              	mov rdi, 8 * 0	; new rib
 24153 00011E5D E8625E0000              	call malloc
 24154 00011E62 50                      	push rax
 24155 00011E63 BF08000000              	mov rdi, 8 * 1	; extended env
 24156 00011E68 E8575E0000              	call malloc
 24157 00011E6D 488B7D10                	mov rdi, ENV
 24158 00011E71 BE00000000              	mov rsi, 0
 24159 00011E76 BA01000000              	mov rdx, 1
 24160                                  .L_lambda_simple_env_loop_008c:	; ext_env[i + 1] <-- env[i]
 24161 00011E7B 4883FE00                	cmp rsi, 0
 24162 00011E7F 7410                    	je .L_lambda_simple_env_end_008c
 24163 00011E81 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24164 00011E85 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24165 00011E89 48FFC6                  	inc rsi
 24166 00011E8C 48FFC2                  	inc rdx
 24167 00011E8F EBEA                    	jmp .L_lambda_simple_env_loop_008c
 24168                                  .L_lambda_simple_env_end_008c:
 24169 00011E91 5B                      	pop rbx
 24170 00011E92 BE00000000              	mov rsi, 0
 24171                                  .L_lambda_simple_params_loop_008c:	; copy params
 24172 00011E97 4883FE00                	cmp rsi, 0
 24173 00011E9B 740E                    	je .L_lambda_simple_params_end_008c
 24174 00011E9D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24175 00011EA2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24176 00011EA6 48FFC6                  	inc rsi
 24177 00011EA9 EBEC                    	jmp .L_lambda_simple_params_loop_008c
 24178                                  .L_lambda_simple_params_end_008c:
 24179 00011EAB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24180 00011EAE 4889C3                  	mov rbx, rax
 24181 00011EB1 58                      	pop rax
 24182 00011EB2 C60004                  	mov byte [rax], T_closure
 24183 00011EB5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24184 00011EB9 48C74009[C61E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_008c
 24185 00011EC1 E95E040000              	jmp .L_lambda_simple_end_008c
 24186                                  .L_lambda_simple_code_008c:	; lambda-simple body
 24187 00011EC6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24188 00011ECC 740B                    	je .L_lambda_simple_arity_check_ok_008c
 24189 00011ECE FF742410                	push qword [rsp + 8 * 2]
 24190 00011ED2 6A01                    	push 1
 24191 00011ED4 E9A45D0000              	jmp L_error_incorrect_arity_simple
 24192                                  .L_lambda_simple_arity_check_ok_008c:
 24193 00011ED9 C8000000                	enter 0, 0
 24194 00011EDD BF08000000              	mov rdi, 8*1
 24195 00011EE2 E8DD5D0000              	call malloc
 24196 00011EE7 488B5D20                	mov rbx, PARAM(0)
 24197 00011EEB 488918                  	mov qword[rax], rbx
 24198 00011EEE 48894520                	mov PARAM(0), rax
 24199 00011EF2 48B8-                   	mov rax, sob_void
 24199 00011EF4 [0000000000000000] 
 24200                                  
 24201 00011EFC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24202 00011F01 E8BE5D0000              	call malloc
 24203 00011F06 50                      	push rax
 24204 00011F07 BF08000000              	mov rdi, 8 * 1	; new rib
 24205 00011F0C E8B35D0000              	call malloc
 24206 00011F11 50                      	push rax
 24207 00011F12 BF10000000              	mov rdi, 8 * 2	; extended env
 24208 00011F17 E8A85D0000              	call malloc
 24209 00011F1C 488B7D10                	mov rdi, ENV
 24210 00011F20 BE00000000              	mov rsi, 0
 24211 00011F25 BA01000000              	mov rdx, 1
 24212                                  .L_lambda_simple_env_loop_008d:	; ext_env[i + 1] <-- env[i]
 24213 00011F2A 4883FE01                	cmp rsi, 1
 24214 00011F2E 7410                    	je .L_lambda_simple_env_end_008d
 24215 00011F30 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24216 00011F34 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24217 00011F38 48FFC6                  	inc rsi
 24218 00011F3B 48FFC2                  	inc rdx
 24219 00011F3E EBEA                    	jmp .L_lambda_simple_env_loop_008d
 24220                                  .L_lambda_simple_env_end_008d:
 24221 00011F40 5B                      	pop rbx
 24222 00011F41 BE00000000              	mov rsi, 0
 24223                                  .L_lambda_simple_params_loop_008d:	; copy params
 24224 00011F46 4883FE01                	cmp rsi, 1
 24225 00011F4A 740E                    	je .L_lambda_simple_params_end_008d
 24226 00011F4C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24227 00011F51 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24228 00011F55 48FFC6                  	inc rsi
 24229 00011F58 EBEC                    	jmp .L_lambda_simple_params_loop_008d
 24230                                  .L_lambda_simple_params_end_008d:
 24231 00011F5A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24232 00011F5D 4889C3                  	mov rbx, rax
 24233 00011F60 58                      	pop rax
 24234 00011F61 C60004                  	mov byte [rax], T_closure
 24235 00011F64 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24236 00011F68 48C74009[751F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_008d
 24237 00011F70 E993020000              	jmp .L_lambda_simple_end_008d
 24238                                  .L_lambda_simple_code_008d:	; lambda-simple body
 24239 00011F75 48837C241002            	cmp qword [rsp + 8 * 2], 2
 24240 00011F7B 740B                    	je .L_lambda_simple_arity_check_ok_008d
 24241 00011F7D FF742410                	push qword [rsp + 8 * 2]
 24242 00011F81 6A02                    	push 2
 24243 00011F83 E9F55C0000              	jmp L_error_incorrect_arity_simple
 24244                                  .L_lambda_simple_arity_check_ok_008d:
 24245 00011F88 C8000000                	enter 0, 0
 24246                                  	; preparing a non-tail-call
 24247 00011F8C 488B4520                	mov rax, PARAM(0)	; param s
 24248 00011F90 50                      	push rax
 24249 00011F91 6A01                    	push 1	; arg count
 24250 00011F93 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 24251 00011F9B 803805                  	cmp byte [rax], T_undefined
 24252 00011F9E 0F84F35B0000            	je L_error_fvar_undefined
 24253 00011FA4 803804                  	cmp byte [rax], T_closure
 24254 00011FA7 0F856E5C0000            	jne L_error_non_closure
 24255 00011FAD FF7001                  	push SOB_CLOSURE_ENV(rax)
 24256 00011FB0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24257 00011FB3 483D[02000000]          	cmp rax, sob_boolean_false
 24258 00011FB9 0F847C000000            	je .L_if_else_0075
 24259                                  	; preparing a tail-call
 24260 00011FBF 48B8-                   	mov rax, L_constants + 0
 24260 00011FC1 [0000000000000000] 
 24261 00011FC9 50                      	push rax
 24262 00011FCA 488B4528                	mov rax, PARAM(1)	; param i
 24263 00011FCE 50                      	push rax
 24264 00011FCF 6A02                    	push 2	; arg count
 24265 00011FD1 488B0425[7A140000]      	mov rax, qword [free_var_101]	; free var make-vector
 24266 00011FD9 803805                  	cmp byte [rax], T_undefined
 24267 00011FDC 0F84B55B0000            	je L_error_fvar_undefined
 24268 00011FE2 803804                  	cmp byte [rax], T_closure
 24269 00011FE5 0F85305C0000            	jne L_error_non_closure
 24270 00011FEB FF7001                  	push SOB_CLOSURE_ENV(rax)
 24271 00011FEE FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 24272 00011FF1 FF7500                  	push qword[rbp]
 24273 00011FF4 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 24274 00011FF7 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 24275 00011FFB 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 24276 00011FFF 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 24277 00012003 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 24278 00012006 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 24279 00012009 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 24280 0001200E 4983C103                	add r9, 3 	 ;for getting to the params
 24281 00012012 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 24282 00012016 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 24283                                  .L_tc_recycle_frame_loop_00d9:
 24284 00012019 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 24285 0001201C 7410                    	je .L_tc_recycle_frame_done_00d9
 24286 0001201E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 24287 00012021 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 24288 00012024 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 24289 00012028 4983E808                	sub r8, 8	 ;move the top of the stack one down
 24290 0001202C EBEB                    	jmp .L_tc_recycle_frame_loop_00d9
 24291                                  .L_tc_recycle_frame_done_00d9:
 24292 0001202E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 24293 0001202F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 24294 00012033 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24295 00012036 E9C9010000              	jmp .L_if_end_0075
 24296                                  .L_if_else_0075:
 24297                                  	; preparing a tail-call
 24298                                  	; preparing a non-tail-call
 24299                                  	; preparing a non-tail-call
 24300 0001203B 48B8-                   	mov rax, L_constants + 2270
 24300 0001203D [DE08000000000000] 
 24301 00012045 50                      	push rax
 24302 00012046 488B4528                	mov rax, PARAM(1)	; param i
 24303 0001204A 50                      	push rax
 24304 0001204B 6A02                    	push 2	; arg count
 24305 0001204D 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 24306 00012055 803805                  	cmp byte [rax], T_undefined
 24307 00012058 0F84395B0000            	je L_error_fvar_undefined
 24308 0001205E 803804                  	cmp byte [rax], T_closure
 24309 00012061 0F85B45B0000            	jne L_error_non_closure
 24310 00012067 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24311 0001206A FF5009                  	call SOB_CLOSURE_CODE(rax)
 24312 0001206D 50                      	push rax
 24313                                  	; preparing a non-tail-call
 24314 0001206E 488B4520                	mov rax, PARAM(0)	; param s
 24315 00012072 50                      	push rax
 24316 00012073 6A01                    	push 1	; arg count
 24317 00012075 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
 24318 0001207D 803805                  	cmp byte [rax], T_undefined
 24319 00012080 0F84115B0000            	je L_error_fvar_undefined
 24320 00012086 803804                  	cmp byte [rax], T_closure
 24321 00012089 0F858C5B0000            	jne L_error_non_closure
 24322 0001208F FF7001                  	push SOB_CLOSURE_ENV(rax)
 24323 00012092 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24324 00012095 50                      	push rax
 24325 00012096 6A02                    	push 2	; arg count
 24326 00012098 488B4510                	mov rax, ENV
 24327 0001209C 488B00                  	mov rax, qword [rax + 8 * 0]
 24328 0001209F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 24329 000120A2 488B00                  	mov rax, qword [rax]
 24330 000120A5 803804                  	cmp byte [rax], T_closure
 24331 000120A8 0F856D5B0000            	jne L_error_non_closure
 24332 000120AE FF7001                  	push SOB_CLOSURE_ENV(rax)
 24333 000120B1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24334 000120B4 50                      	push rax
 24335 000120B5 6A01                    	push 1	; arg count
 24336 000120B7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24337 000120BC E8035C0000              	call malloc
 24338 000120C1 50                      	push rax
 24339 000120C2 BF10000000              	mov rdi, 8 * 2	; new rib
 24340 000120C7 E8F85B0000              	call malloc
 24341 000120CC 50                      	push rax
 24342 000120CD BF18000000              	mov rdi, 8 * 3	; extended env
 24343 000120D2 E8ED5B0000              	call malloc
 24344 000120D7 488B7D10                	mov rdi, ENV
 24345 000120DB BE00000000              	mov rsi, 0
 24346 000120E0 BA01000000              	mov rdx, 1
 24347                                  .L_lambda_simple_env_loop_008e:	; ext_env[i + 1] <-- env[i]
 24348 000120E5 4883FE02                	cmp rsi, 2
 24349 000120E9 7410                    	je .L_lambda_simple_env_end_008e
 24350 000120EB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24351 000120EF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24352 000120F3 48FFC6                  	inc rsi
 24353 000120F6 48FFC2                  	inc rdx
 24354 000120F9 EBEA                    	jmp .L_lambda_simple_env_loop_008e
 24355                                  .L_lambda_simple_env_end_008e:
 24356 000120FB 5B                      	pop rbx
 24357 000120FC BE00000000              	mov rsi, 0
 24358                                  .L_lambda_simple_params_loop_008e:	; copy params
 24359 00012101 4883FE02                	cmp rsi, 2
 24360 00012105 740E                    	je .L_lambda_simple_params_end_008e
 24361 00012107 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24362 0001210C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24363 00012110 48FFC6                  	inc rsi
 24364 00012113 EBEC                    	jmp .L_lambda_simple_params_loop_008e
 24365                                  .L_lambda_simple_params_end_008e:
 24366 00012115 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24367 00012118 4889C3                  	mov rbx, rax
 24368 0001211B 58                      	pop rax
 24369 0001211C C60004                  	mov byte [rax], T_closure
 24370 0001211F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24371 00012123 48C74009[30210100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_008e
 24372 0001212B E980000000              	jmp .L_lambda_simple_end_008e
 24373                                  .L_lambda_simple_code_008e:	; lambda-simple body
 24374 00012130 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24375 00012136 740B                    	je .L_lambda_simple_arity_check_ok_008e
 24376 00012138 FF742410                	push qword [rsp + 8 * 2]
 24377 0001213C 6A01                    	push 1
 24378 0001213E E93A5B0000              	jmp L_error_incorrect_arity_simple
 24379                                  .L_lambda_simple_arity_check_ok_008e:
 24380 00012143 C8000000                	enter 0, 0
 24381                                  	; preparing a non-tail-call
 24382                                  	; preparing a non-tail-call
 24383 00012147 488B4510                	mov rax, ENV
 24384 0001214B 488B00                  	mov rax, qword [rax + 8 * 0]
 24385 0001214E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var s
 24386 00012151 50                      	push rax
 24387 00012152 6A01                    	push 1	; arg count
 24388 00012154 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 24389 0001215C 803805                  	cmp byte [rax], T_undefined
 24390 0001215F 0F84325A0000            	je L_error_fvar_undefined
 24391 00012165 803804                  	cmp byte [rax], T_closure
 24392 00012168 0F85AD5A0000            	jne L_error_non_closure
 24393 0001216E FF7001                  	push SOB_CLOSURE_ENV(rax)
 24394 00012171 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24395 00012174 50                      	push rax
 24396 00012175 488B4510                	mov rax, ENV
 24397 00012179 488B00                  	mov rax, qword [rax + 8 * 0]
 24398 0001217C 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 24399 00012180 50                      	push rax
 24400 00012181 488B4520                	mov rax, PARAM(0)	; param v
 24401 00012185 50                      	push rax
 24402 00012186 6A03                    	push 3	; arg count
 24403 00012188 488B0425[88170000]      	mov rax, qword [free_var_147]	; free var vector-set!
 24404 00012190 803805                  	cmp byte [rax], T_undefined
 24405 00012193 0F84FE590000            	je L_error_fvar_undefined
 24406 00012199 803804                  	cmp byte [rax], T_closure
 24407 0001219C 0F85795A0000            	jne L_error_non_closure
 24408 000121A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24409 000121A5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24410                                  
 24411 000121A8 488B4520                	mov rax, PARAM(0)	; param v
 24412 000121AC C9                      	leave
 24413 000121AD C21800                  	ret AND_KILL_FRAME(1)
 24414                                  .L_lambda_simple_end_008e:	; new closure is in rax
 24415 000121B0 803804                  	cmp byte [rax], T_closure
 24416 000121B3 0F85625A0000            	jne L_error_non_closure
 24417 000121B9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24418 000121BC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 24419 000121BF FF7500                  	push qword[rbp]
 24420 000121C2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 24421 000121C5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 24422 000121C9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 24423 000121CD 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 24424 000121D1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 24425 000121D4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 24426 000121D7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 24427 000121DC 4983C103                	add r9, 3 	 ;for getting to the params
 24428 000121E0 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 24429 000121E4 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 24430                                  .L_tc_recycle_frame_loop_00da:
 24431 000121E7 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 24432 000121EA 7410                    	je .L_tc_recycle_frame_done_00da
 24433 000121EC 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 24434 000121EF 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 24435 000121F2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 24436 000121F6 4983E808                	sub r8, 8	 ;move the top of the stack one down
 24437 000121FA EBEB                    	jmp .L_tc_recycle_frame_loop_00da
 24438                                  .L_tc_recycle_frame_done_00da:
 24439 000121FC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 24440 000121FD 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 24441 00012201 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24442                                  .L_if_end_0075:
 24443 00012204 C9                      	leave
 24444 00012205 C22000                  	ret AND_KILL_FRAME(2)
 24445                                  .L_lambda_simple_end_008d:	; new closure is in rax
 24446 00012208 50                      	push rax
 24447 00012209 488B4520                	mov rax, PARAM(0)	; param run
 24448 0001220D 8F00                    	pop qword [rax]
 24449 0001220F 48B8-                   	mov rax, sob_void
 24449 00012211 [0000000000000000] 
 24450                                  
 24451 00012219 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24452 0001221E E8A15A0000              	call malloc
 24453 00012223 50                      	push rax
 24454 00012224 BF08000000              	mov rdi, 8 * 1	; new rib
 24455 00012229 E8965A0000              	call malloc
 24456 0001222E 50                      	push rax
 24457 0001222F BF10000000              	mov rdi, 8 * 2	; extended env
 24458 00012234 E88B5A0000              	call malloc
 24459 00012239 488B7D10                	mov rdi, ENV
 24460 0001223D BE00000000              	mov rsi, 0
 24461 00012242 BA01000000              	mov rdx, 1
 24462                                  .L_lambda_simple_env_loop_008f:	; ext_env[i + 1] <-- env[i]
 24463 00012247 4883FE01                	cmp rsi, 1
 24464 0001224B 7410                    	je .L_lambda_simple_env_end_008f
 24465 0001224D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24466 00012251 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24467 00012255 48FFC6                  	inc rsi
 24468 00012258 48FFC2                  	inc rdx
 24469 0001225B EBEA                    	jmp .L_lambda_simple_env_loop_008f
 24470                                  .L_lambda_simple_env_end_008f:
 24471 0001225D 5B                      	pop rbx
 24472 0001225E BE00000000              	mov rsi, 0
 24473                                  .L_lambda_simple_params_loop_008f:	; copy params
 24474 00012263 4883FE01                	cmp rsi, 1
 24475 00012267 740E                    	je .L_lambda_simple_params_end_008f
 24476 00012269 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24477 0001226E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24478 00012272 48FFC6                  	inc rsi
 24479 00012275 EBEC                    	jmp .L_lambda_simple_params_loop_008f
 24480                                  .L_lambda_simple_params_end_008f:
 24481 00012277 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24482 0001227A 4889C3                  	mov rbx, rax
 24483 0001227D 58                      	pop rax
 24484 0001227E C60004                  	mov byte [rax], T_closure
 24485 00012281 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24486 00012285 48C74009[92220100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_008f
 24487 0001228D E98E000000              	jmp .L_lambda_simple_end_008f
 24488                                  .L_lambda_simple_code_008f:	; lambda-simple body
 24489 00012292 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24490 00012298 740B                    	je .L_lambda_simple_arity_check_ok_008f
 24491 0001229A FF742410                	push qword [rsp + 8 * 2]
 24492 0001229E 6A01                    	push 1
 24493 000122A0 E9D8590000              	jmp L_error_incorrect_arity_simple
 24494                                  .L_lambda_simple_arity_check_ok_008f:
 24495 000122A5 C8000000                	enter 0, 0
 24496                                  	; preparing a tail-call
 24497 000122A9 48B8-                   	mov rax, L_constants + 2135
 24497 000122AB [5708000000000000] 
 24498 000122B3 50                      	push rax
 24499 000122B4 488B4520                	mov rax, PARAM(0)	; param s
 24500 000122B8 50                      	push rax
 24501 000122B9 6A02                    	push 2	; arg count
 24502 000122BB 488B4510                	mov rax, ENV
 24503 000122BF 488B00                  	mov rax, qword [rax + 8 * 0]
 24504 000122C2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 24505 000122C5 488B00                  	mov rax, qword [rax]
 24506 000122C8 803804                  	cmp byte [rax], T_closure
 24507 000122CB 0F854A590000            	jne L_error_non_closure
 24508 000122D1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24509 000122D4 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 24510 000122D7 FF7500                  	push qword[rbp]
 24511 000122DA 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 24512 000122DD 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 24513 000122E1 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 24514 000122E5 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 24515 000122E9 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 24516 000122EC 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 24517 000122EF 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 24518 000122F4 4983C103                	add r9, 3 	 ;for getting to the params
 24519 000122F8 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 24520 000122FC 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 24521                                  .L_tc_recycle_frame_loop_00db:
 24522 000122FF 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 24523 00012302 7410                    	je .L_tc_recycle_frame_done_00db
 24524 00012304 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 24525 00012307 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 24526 0001230A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 24527 0001230E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 24528 00012312 EBEB                    	jmp .L_tc_recycle_frame_loop_00db
 24529                                  .L_tc_recycle_frame_done_00db:
 24530 00012314 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 24531 00012315 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 24532 00012319 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24533 0001231C C9                      	leave
 24534 0001231D C21800                  	ret AND_KILL_FRAME(1)
 24535                                  .L_lambda_simple_end_008f:	; new closure is in rax
 24536 00012320 C9                      	leave
 24537 00012321 C21800                  	ret AND_KILL_FRAME(1)
 24538                                  .L_lambda_simple_end_008c:	; new closure is in rax
 24539 00012324 803804                  	cmp byte [rax], T_closure
 24540 00012327 0F85EE580000            	jne L_error_non_closure
 24541 0001232D FF7001                  	push SOB_CLOSURE_ENV(rax)
 24542 00012330 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24543 00012333 48890425[14140000]      	mov qword [free_var_95], rax
 24544 0001233B 48B8-                   	mov rax, sob_void
 24544 0001233D [0000000000000000] 
 24545                                  
 24546 00012345 4889C7                  	mov rdi, rax
 24547 00012348 E8CC5B0000              	call print_sexpr_if_not_void
 24548                                  	; preparing a non-tail-call
 24549 0001234D 48B8-                   	mov rax, L_constants + 1993
 24549 0001234F [C907000000000000] 
 24550 00012357 50                      	push rax
 24551 00012358 6A01                    	push 1	; arg count
 24552 0001235A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24553 0001235F E860590000              	call malloc
 24554 00012364 50                      	push rax
 24555 00012365 BF00000000              	mov rdi, 8 * 0	; new rib
 24556 0001236A E855590000              	call malloc
 24557 0001236F 50                      	push rax
 24558 00012370 BF08000000              	mov rdi, 8 * 1	; extended env
 24559 00012375 E84A590000              	call malloc
 24560 0001237A 488B7D10                	mov rdi, ENV
 24561 0001237E BE00000000              	mov rsi, 0
 24562 00012383 BA01000000              	mov rdx, 1
 24563                                  .L_lambda_simple_env_loop_0090:	; ext_env[i + 1] <-- env[i]
 24564 00012388 4883FE00                	cmp rsi, 0
 24565 0001238C 7410                    	je .L_lambda_simple_env_end_0090
 24566 0001238E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24567 00012392 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24568 00012396 48FFC6                  	inc rsi
 24569 00012399 48FFC2                  	inc rdx
 24570 0001239C EBEA                    	jmp .L_lambda_simple_env_loop_0090
 24571                                  .L_lambda_simple_env_end_0090:
 24572 0001239E 5B                      	pop rbx
 24573 0001239F BE00000000              	mov rsi, 0
 24574                                  .L_lambda_simple_params_loop_0090:	; copy params
 24575 000123A4 4883FE00                	cmp rsi, 0
 24576 000123A8 740E                    	je .L_lambda_simple_params_end_0090
 24577 000123AA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24578 000123AF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24579 000123B3 48FFC6                  	inc rsi
 24580 000123B6 EBEC                    	jmp .L_lambda_simple_params_loop_0090
 24581                                  .L_lambda_simple_params_end_0090:
 24582 000123B8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24583 000123BB 4889C3                  	mov rbx, rax
 24584 000123BE 58                      	pop rax
 24585 000123BF C60004                  	mov byte [rax], T_closure
 24586 000123C2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24587 000123C6 48C74009[D3230100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0090
 24588 000123CE E95E040000              	jmp .L_lambda_simple_end_0090
 24589                                  .L_lambda_simple_code_0090:	; lambda-simple body
 24590 000123D3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24591 000123D9 740B                    	je .L_lambda_simple_arity_check_ok_0090
 24592 000123DB FF742410                	push qword [rsp + 8 * 2]
 24593 000123DF 6A01                    	push 1
 24594 000123E1 E997580000              	jmp L_error_incorrect_arity_simple
 24595                                  .L_lambda_simple_arity_check_ok_0090:
 24596 000123E6 C8000000                	enter 0, 0
 24597 000123EA BF08000000              	mov rdi, 8*1
 24598 000123EF E8D0580000              	call malloc
 24599 000123F4 488B5D20                	mov rbx, PARAM(0)
 24600 000123F8 488918                  	mov qword[rax], rbx
 24601 000123FB 48894520                	mov PARAM(0), rax
 24602 000123FF 48B8-                   	mov rax, sob_void
 24602 00012401 [0000000000000000] 
 24603                                  
 24604 00012409 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24605 0001240E E8B1580000              	call malloc
 24606 00012413 50                      	push rax
 24607 00012414 BF08000000              	mov rdi, 8 * 1	; new rib
 24608 00012419 E8A6580000              	call malloc
 24609 0001241E 50                      	push rax
 24610 0001241F BF10000000              	mov rdi, 8 * 2	; extended env
 24611 00012424 E89B580000              	call malloc
 24612 00012429 488B7D10                	mov rdi, ENV
 24613 0001242D BE00000000              	mov rsi, 0
 24614 00012432 BA01000000              	mov rdx, 1
 24615                                  .L_lambda_simple_env_loop_0091:	; ext_env[i + 1] <-- env[i]
 24616 00012437 4883FE01                	cmp rsi, 1
 24617 0001243B 7410                    	je .L_lambda_simple_env_end_0091
 24618 0001243D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24619 00012441 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24620 00012445 48FFC6                  	inc rsi
 24621 00012448 48FFC2                  	inc rdx
 24622 0001244B EBEA                    	jmp .L_lambda_simple_env_loop_0091
 24623                                  .L_lambda_simple_env_end_0091:
 24624 0001244D 5B                      	pop rbx
 24625 0001244E BE00000000              	mov rsi, 0
 24626                                  .L_lambda_simple_params_loop_0091:	; copy params
 24627 00012453 4883FE01                	cmp rsi, 1
 24628 00012457 740E                    	je .L_lambda_simple_params_end_0091
 24629 00012459 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24630 0001245E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24631 00012462 48FFC6                  	inc rsi
 24632 00012465 EBEC                    	jmp .L_lambda_simple_params_loop_0091
 24633                                  .L_lambda_simple_params_end_0091:
 24634 00012467 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24635 0001246A 4889C3                  	mov rbx, rax
 24636 0001246D 58                      	pop rax
 24637 0001246E C60004                  	mov byte [rax], T_closure
 24638 00012471 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24639 00012475 48C74009[82240100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0091
 24640 0001247D E993020000              	jmp .L_lambda_simple_end_0091
 24641                                  .L_lambda_simple_code_0091:	; lambda-simple body
 24642 00012482 48837C241002            	cmp qword [rsp + 8 * 2], 2
 24643 00012488 740B                    	je .L_lambda_simple_arity_check_ok_0091
 24644 0001248A FF742410                	push qword [rsp + 8 * 2]
 24645 0001248E 6A02                    	push 2
 24646 00012490 E9E8570000              	jmp L_error_incorrect_arity_simple
 24647                                  .L_lambda_simple_arity_check_ok_0091:
 24648 00012495 C8000000                	enter 0, 0
 24649                                  	; preparing a non-tail-call
 24650 00012499 488B4520                	mov rax, PARAM(0)	; param s
 24651 0001249D 50                      	push rax
 24652 0001249E 6A01                    	push 1	; arg count
 24653 000124A0 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 24654 000124A8 803805                  	cmp byte [rax], T_undefined
 24655 000124AB 0F84E6560000            	je L_error_fvar_undefined
 24656 000124B1 803804                  	cmp byte [rax], T_closure
 24657 000124B4 0F8561570000            	jne L_error_non_closure
 24658 000124BA FF7001                  	push SOB_CLOSURE_ENV(rax)
 24659 000124BD FF5009                  	call SOB_CLOSURE_CODE(rax)
 24660 000124C0 483D[02000000]          	cmp rax, sob_boolean_false
 24661 000124C6 0F847C000000            	je .L_if_else_0076
 24662                                  	; preparing a tail-call
 24663 000124CC 48B8-                   	mov rax, L_constants + 4
 24663 000124CE [0400000000000000] 
 24664 000124D6 50                      	push rax
 24665 000124D7 488B4528                	mov rax, PARAM(1)	; param i
 24666 000124DB 50                      	push rax
 24667 000124DC 6A02                    	push 2	; arg count
 24668 000124DE 488B0425[58140000]      	mov rax, qword [free_var_99]	; free var make-string
 24669 000124E6 803805                  	cmp byte [rax], T_undefined
 24670 000124E9 0F84A8560000            	je L_error_fvar_undefined
 24671 000124EF 803804                  	cmp byte [rax], T_closure
 24672 000124F2 0F8523570000            	jne L_error_non_closure
 24673 000124F8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24674 000124FB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 24675 000124FE FF7500                  	push qword[rbp]
 24676 00012501 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 24677 00012504 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 24678 00012508 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 24679 0001250C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 24680 00012510 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 24681 00012513 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 24682 00012516 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 24683 0001251B 4983C103                	add r9, 3 	 ;for getting to the params
 24684 0001251F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 24685 00012523 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 24686                                  .L_tc_recycle_frame_loop_00dc:
 24687 00012526 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 24688 00012529 7410                    	je .L_tc_recycle_frame_done_00dc
 24689 0001252B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 24690 0001252E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 24691 00012531 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 24692 00012535 4983E808                	sub r8, 8	 ;move the top of the stack one down
 24693 00012539 EBEB                    	jmp .L_tc_recycle_frame_loop_00dc
 24694                                  .L_tc_recycle_frame_done_00dc:
 24695 0001253B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 24696 0001253C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 24697 00012540 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24698 00012543 E9C9010000              	jmp .L_if_end_0076
 24699                                  .L_if_else_0076:
 24700                                  	; preparing a tail-call
 24701                                  	; preparing a non-tail-call
 24702                                  	; preparing a non-tail-call
 24703 00012548 48B8-                   	mov rax, L_constants + 2270
 24703 0001254A [DE08000000000000] 
 24704 00012552 50                      	push rax
 24705 00012553 488B4528                	mov rax, PARAM(1)	; param i
 24706 00012557 50                      	push rax
 24707 00012558 6A02                    	push 2	; arg count
 24708 0001255A 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 24709 00012562 803805                  	cmp byte [rax], T_undefined
 24710 00012565 0F842C560000            	je L_error_fvar_undefined
 24711 0001256B 803804                  	cmp byte [rax], T_closure
 24712 0001256E 0F85A7560000            	jne L_error_non_closure
 24713 00012574 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24714 00012577 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24715 0001257A 50                      	push rax
 24716                                  	; preparing a non-tail-call
 24717 0001257B 488B4520                	mov rax, PARAM(0)	; param s
 24718 0001257F 50                      	push rax
 24719 00012580 6A01                    	push 1	; arg count
 24720 00012582 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
 24721 0001258A 803805                  	cmp byte [rax], T_undefined
 24722 0001258D 0F8404560000            	je L_error_fvar_undefined
 24723 00012593 803804                  	cmp byte [rax], T_closure
 24724 00012596 0F857F560000            	jne L_error_non_closure
 24725 0001259C FF7001                  	push SOB_CLOSURE_ENV(rax)
 24726 0001259F FF5009                  	call SOB_CLOSURE_CODE(rax)
 24727 000125A2 50                      	push rax
 24728 000125A3 6A02                    	push 2	; arg count
 24729 000125A5 488B4510                	mov rax, ENV
 24730 000125A9 488B00                  	mov rax, qword [rax + 8 * 0]
 24731 000125AC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 24732 000125AF 488B00                  	mov rax, qword [rax]
 24733 000125B2 803804                  	cmp byte [rax], T_closure
 24734 000125B5 0F8560560000            	jne L_error_non_closure
 24735 000125BB FF7001                  	push SOB_CLOSURE_ENV(rax)
 24736 000125BE FF5009                  	call SOB_CLOSURE_CODE(rax)
 24737 000125C1 50                      	push rax
 24738 000125C2 6A01                    	push 1	; arg count
 24739 000125C4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24740 000125C9 E8F6560000              	call malloc
 24741 000125CE 50                      	push rax
 24742 000125CF BF10000000              	mov rdi, 8 * 2	; new rib
 24743 000125D4 E8EB560000              	call malloc
 24744 000125D9 50                      	push rax
 24745 000125DA BF18000000              	mov rdi, 8 * 3	; extended env
 24746 000125DF E8E0560000              	call malloc
 24747 000125E4 488B7D10                	mov rdi, ENV
 24748 000125E8 BE00000000              	mov rsi, 0
 24749 000125ED BA01000000              	mov rdx, 1
 24750                                  .L_lambda_simple_env_loop_0092:	; ext_env[i + 1] <-- env[i]
 24751 000125F2 4883FE02                	cmp rsi, 2
 24752 000125F6 7410                    	je .L_lambda_simple_env_end_0092
 24753 000125F8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24754 000125FC 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24755 00012600 48FFC6                  	inc rsi
 24756 00012603 48FFC2                  	inc rdx
 24757 00012606 EBEA                    	jmp .L_lambda_simple_env_loop_0092
 24758                                  .L_lambda_simple_env_end_0092:
 24759 00012608 5B                      	pop rbx
 24760 00012609 BE00000000              	mov rsi, 0
 24761                                  .L_lambda_simple_params_loop_0092:	; copy params
 24762 0001260E 4883FE02                	cmp rsi, 2
 24763 00012612 740E                    	je .L_lambda_simple_params_end_0092
 24764 00012614 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24765 00012619 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24766 0001261D 48FFC6                  	inc rsi
 24767 00012620 EBEC                    	jmp .L_lambda_simple_params_loop_0092
 24768                                  .L_lambda_simple_params_end_0092:
 24769 00012622 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24770 00012625 4889C3                  	mov rbx, rax
 24771 00012628 58                      	pop rax
 24772 00012629 C60004                  	mov byte [rax], T_closure
 24773 0001262C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24774 00012630 48C74009[3D260100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0092
 24775 00012638 E980000000              	jmp .L_lambda_simple_end_0092
 24776                                  .L_lambda_simple_code_0092:	; lambda-simple body
 24777 0001263D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24778 00012643 740B                    	je .L_lambda_simple_arity_check_ok_0092
 24779 00012645 FF742410                	push qword [rsp + 8 * 2]
 24780 00012649 6A01                    	push 1
 24781 0001264B E92D560000              	jmp L_error_incorrect_arity_simple
 24782                                  .L_lambda_simple_arity_check_ok_0092:
 24783 00012650 C8000000                	enter 0, 0
 24784                                  	; preparing a non-tail-call
 24785                                  	; preparing a non-tail-call
 24786 00012654 488B4510                	mov rax, ENV
 24787 00012658 488B00                  	mov rax, qword [rax + 8 * 0]
 24788 0001265B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var s
 24789 0001265E 50                      	push rax
 24790 0001265F 6A01                    	push 1	; arg count
 24791 00012661 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 24792 00012669 803805                  	cmp byte [rax], T_undefined
 24793 0001266C 0F8425550000            	je L_error_fvar_undefined
 24794 00012672 803804                  	cmp byte [rax], T_closure
 24795 00012675 0F85A0550000            	jne L_error_non_closure
 24796 0001267B FF7001                  	push SOB_CLOSURE_ENV(rax)
 24797 0001267E FF5009                  	call SOB_CLOSURE_CODE(rax)
 24798 00012681 50                      	push rax
 24799 00012682 488B4510                	mov rax, ENV
 24800 00012686 488B00                  	mov rax, qword [rax + 8 * 0]
 24801 00012689 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 24802 0001268D 50                      	push rax
 24803 0001268E 488B4520                	mov rax, PARAM(0)	; param str
 24804 00012692 50                      	push rax
 24805 00012693 6A03                    	push 3	; arg count
 24806 00012695 488B0425[78160000]      	mov rax, qword [free_var_131]	; free var string-set!
 24807 0001269D 803805                  	cmp byte [rax], T_undefined
 24808 000126A0 0F84F1540000            	je L_error_fvar_undefined
 24809 000126A6 803804                  	cmp byte [rax], T_closure
 24810 000126A9 0F856C550000            	jne L_error_non_closure
 24811 000126AF FF7001                  	push SOB_CLOSURE_ENV(rax)
 24812 000126B2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24813                                  
 24814 000126B5 488B4520                	mov rax, PARAM(0)	; param str
 24815 000126B9 C9                      	leave
 24816 000126BA C21800                  	ret AND_KILL_FRAME(1)
 24817                                  .L_lambda_simple_end_0092:	; new closure is in rax
 24818 000126BD 803804                  	cmp byte [rax], T_closure
 24819 000126C0 0F8555550000            	jne L_error_non_closure
 24820 000126C6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24821 000126C9 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 24822 000126CC FF7500                  	push qword[rbp]
 24823 000126CF 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 24824 000126D2 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 24825 000126D6 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 24826 000126DA 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 24827 000126DE 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 24828 000126E1 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 24829 000126E4 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 24830 000126E9 4983C103                	add r9, 3 	 ;for getting to the params
 24831 000126ED 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 24832 000126F1 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 24833                                  .L_tc_recycle_frame_loop_00dd:
 24834 000126F4 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 24835 000126F7 7410                    	je .L_tc_recycle_frame_done_00dd
 24836 000126F9 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 24837 000126FC 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 24838 000126FF 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 24839 00012703 4983E808                	sub r8, 8	 ;move the top of the stack one down
 24840 00012707 EBEB                    	jmp .L_tc_recycle_frame_loop_00dd
 24841                                  .L_tc_recycle_frame_done_00dd:
 24842 00012709 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 24843 0001270A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 24844 0001270E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24845                                  .L_if_end_0076:
 24846 00012711 C9                      	leave
 24847 00012712 C22000                  	ret AND_KILL_FRAME(2)
 24848                                  .L_lambda_simple_end_0091:	; new closure is in rax
 24849 00012715 50                      	push rax
 24850 00012716 488B4520                	mov rax, PARAM(0)	; param run
 24851 0001271A 8F00                    	pop qword [rax]
 24852 0001271C 48B8-                   	mov rax, sob_void
 24852 0001271E [0000000000000000] 
 24853                                  
 24854 00012726 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24855 0001272B E894550000              	call malloc
 24856 00012730 50                      	push rax
 24857 00012731 BF08000000              	mov rdi, 8 * 1	; new rib
 24858 00012736 E889550000              	call malloc
 24859 0001273B 50                      	push rax
 24860 0001273C BF10000000              	mov rdi, 8 * 2	; extended env
 24861 00012741 E87E550000              	call malloc
 24862 00012746 488B7D10                	mov rdi, ENV
 24863 0001274A BE00000000              	mov rsi, 0
 24864 0001274F BA01000000              	mov rdx, 1
 24865                                  .L_lambda_simple_env_loop_0093:	; ext_env[i + 1] <-- env[i]
 24866 00012754 4883FE01                	cmp rsi, 1
 24867 00012758 7410                    	je .L_lambda_simple_env_end_0093
 24868 0001275A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24869 0001275E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24870 00012762 48FFC6                  	inc rsi
 24871 00012765 48FFC2                  	inc rdx
 24872 00012768 EBEA                    	jmp .L_lambda_simple_env_loop_0093
 24873                                  .L_lambda_simple_env_end_0093:
 24874 0001276A 5B                      	pop rbx
 24875 0001276B BE00000000              	mov rsi, 0
 24876                                  .L_lambda_simple_params_loop_0093:	; copy params
 24877 00012770 4883FE01                	cmp rsi, 1
 24878 00012774 740E                    	je .L_lambda_simple_params_end_0093
 24879 00012776 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24880 0001277B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24881 0001277F 48FFC6                  	inc rsi
 24882 00012782 EBEC                    	jmp .L_lambda_simple_params_loop_0093
 24883                                  .L_lambda_simple_params_end_0093:
 24884 00012784 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24885 00012787 4889C3                  	mov rbx, rax
 24886 0001278A 58                      	pop rax
 24887 0001278B C60004                  	mov byte [rax], T_closure
 24888 0001278E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24889 00012792 48C74009[9F270100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0093
 24890 0001279A E98E000000              	jmp .L_lambda_simple_end_0093
 24891                                  .L_lambda_simple_code_0093:	; lambda-simple body
 24892 0001279F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24893 000127A5 740B                    	je .L_lambda_simple_arity_check_ok_0093
 24894 000127A7 FF742410                	push qword [rsp + 8 * 2]
 24895 000127AB 6A01                    	push 1
 24896 000127AD E9CB540000              	jmp L_error_incorrect_arity_simple
 24897                                  .L_lambda_simple_arity_check_ok_0093:
 24898 000127B2 C8000000                	enter 0, 0
 24899                                  	; preparing a tail-call
 24900 000127B6 48B8-                   	mov rax, L_constants + 2135
 24900 000127B8 [5708000000000000] 
 24901 000127C0 50                      	push rax
 24902 000127C1 488B4520                	mov rax, PARAM(0)	; param s
 24903 000127C5 50                      	push rax
 24904 000127C6 6A02                    	push 2	; arg count
 24905 000127C8 488B4510                	mov rax, ENV
 24906 000127CC 488B00                  	mov rax, qword [rax + 8 * 0]
 24907 000127CF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 24908 000127D2 488B00                  	mov rax, qword [rax]
 24909 000127D5 803804                  	cmp byte [rax], T_closure
 24910 000127D8 0F853D540000            	jne L_error_non_closure
 24911 000127DE FF7001                  	push SOB_CLOSURE_ENV(rax)
 24912 000127E1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 24913 000127E4 FF7500                  	push qword[rbp]
 24914 000127E7 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 24915 000127EA 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 24916 000127EE 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 24917 000127F2 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 24918 000127F6 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 24919 000127F9 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 24920 000127FC 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 24921 00012801 4983C103                	add r9, 3 	 ;for getting to the params
 24922 00012805 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 24923 00012809 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 24924                                  .L_tc_recycle_frame_loop_00de:
 24925 0001280C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 24926 0001280F 7410                    	je .L_tc_recycle_frame_done_00de
 24927 00012811 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 24928 00012814 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 24929 00012817 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 24930 0001281B 4983E808                	sub r8, 8	 ;move the top of the stack one down
 24931 0001281F EBEB                    	jmp .L_tc_recycle_frame_loop_00de
 24932                                  .L_tc_recycle_frame_done_00de:
 24933 00012821 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 24934 00012822 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 24935 00012826 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24936 00012829 C9                      	leave
 24937 0001282A C21800                  	ret AND_KILL_FRAME(1)
 24938                                  .L_lambda_simple_end_0093:	; new closure is in rax
 24939 0001282D C9                      	leave
 24940 0001282E C21800                  	ret AND_KILL_FRAME(1)
 24941                                  .L_lambda_simple_end_0090:	; new closure is in rax
 24942 00012831 803804                  	cmp byte [rax], T_closure
 24943 00012834 0F85E1530000            	jne L_error_non_closure
 24944 0001283A FF7001                  	push SOB_CLOSURE_ENV(rax)
 24945 0001283D FF5009                  	call SOB_CLOSURE_CODE(rax)
 24946 00012840 48890425[03140000]      	mov qword [free_var_94], rax
 24947 00012848 48B8-                   	mov rax, sob_void
 24947 0001284A [0000000000000000] 
 24948                                  
 24949 00012852 4889C7                  	mov rdi, rax
 24950 00012855 E8BF560000              	call print_sexpr_if_not_void
 24951 0001285A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24952 0001285F E860540000              	call malloc
 24953 00012864 50                      	push rax
 24954 00012865 BF00000000              	mov rdi, 8 * 0	; new rib
 24955 0001286A E855540000              	call malloc
 24956 0001286F 50                      	push rax
 24957 00012870 BF08000000              	mov rdi, 8 * 1	; extended env
 24958 00012875 E84A540000              	call malloc
 24959 0001287A 488B7D10                	mov rdi, ENV
 24960 0001287E BE00000000              	mov rsi, 0
 24961 00012883 BA01000000              	mov rdx, 1
 24962                                  .L_lambda_opt_env_loop_0016:	; ext_env[i + 1] <-- env[i]
 24963 00012888 4883FE00                	cmp rsi, 0
 24964 0001288C 7410                    	je .L_lambda_opt_env_end_0016
 24965 0001288E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24966 00012892 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24967 00012896 48FFC6                  	inc rsi
 24968 00012899 48FFC2                  	inc rdx
 24969 0001289C EBEA                    	jmp .L_lambda_opt_env_loop_0016
 24970                                  .L_lambda_opt_env_end_0016:
 24971 0001289E 5B                      	pop rbx
 24972 0001289F BE00000000              	mov rsi, 0
 24973                                  .L_lambda_opt_params_loop_0016:	; copy params
 24974 000128A4 4883FE00                	cmp rsi, 0
 24975 000128A8 740E                    	je .L_lambda_opt_params_end_0016
 24976 000128AA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24977 000128AF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24978 000128B3 48FFC6                  	inc rsi
 24979 000128B6 EBEC                    	jmp .L_lambda_opt_params_loop_0016
 24980                                  .L_lambda_opt_params_end_0016:
 24981 000128B8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24982 000128BB 4889C3                  	mov rbx, rax
 24983 000128BE 58                      	pop rax
 24984 000128BF C60004                  	mov byte [rax], T_closure
 24985 000128C2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24986 000128C6 48C74009[D3280100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0016
 24987 000128CE E9CC010000              	jmp .L_lambda_opt_end_0016
 24988                                  .L_lambda_opt_code_0016:	; lambda-opt body
 24989 000128D3 48837C241000            	cmp qword [rsp + 8 * 2], 0
 24990 000128D9 7411                    	je .L_lambda_opt_arity_check_exact_0016
 24991 000128DB 0F8FB4000000            	jg .L_lambda_opt_arity_check_more_0016
 24992 000128E1 FF742410                	push qword [rsp + 8 * 2]
 24993 000128E5 6A00                    	push 0
 24994 000128E7 E9A5530000              	jmp L_error_incorrect_arity_opt
 24995                                  .L_lambda_opt_arity_check_exact_0016:
 24996 000128EC 4883EC08                	sub rsp, 8
 24997 000128F0 488B442408              	mov rax, qword[rsp + 8 *1]
 24998 000128F5 48890424                	mov qword[rsp], rax  
 24999 000128F9 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 25000 000128FE 4889442408              	mov qword[rsp + 8 * 1], rax
 25001 00012903 B801000000              	mov rax, 1
 25002 00012908 4889442410              	mov qword[rsp + 8 *2], rax
 25003 0001290D 48B8-                   	mov rax, sob_nil
 25003 0001290F [0100000000000000] 
 25004 00012917 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 25005 0001291C C8000000                	enter 0, 0
 25006                                  	; preparing a tail-call
 25007 00012920 488B4520                	mov rax, PARAM(0)	; param s
 25008 00012924 50                      	push rax
 25009 00012925 6A01                    	push 1	; arg count
 25010 00012927 488B0425[14140000]      	mov rax, qword [free_var_95]	; free var list->vector
 25011 0001292F 803805                  	cmp byte [rax], T_undefined
 25012 00012932 0F845F520000            	je L_error_fvar_undefined
 25013 00012938 803804                  	cmp byte [rax], T_closure
 25014 0001293B 0F85DA520000            	jne L_error_non_closure
 25015 00012941 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25016 00012944 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 25017 00012947 FF7500                  	push qword[rbp]
 25018 0001294A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 25019 0001294D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 25020 00012951 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 25021 00012955 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 25022 00012959 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 25023 0001295C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 25024 0001295F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 25025 00012964 4983C103                	add r9, 3 	 ;for getting to the params
 25026 00012968 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 25027 0001296C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 25028                                  .L_tc_recycle_frame_loop_00e0:
 25029 0001296F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 25030 00012972 7410                    	je .L_tc_recycle_frame_done_00e0
 25031 00012974 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 25032 00012977 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 25033 0001297A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 25034 0001297E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 25035 00012982 EBEB                    	jmp .L_tc_recycle_frame_loop_00e0
 25036                                  .L_tc_recycle_frame_done_00e0:
 25037 00012984 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 25038 00012985 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 25039 00012989 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25040 0001298C C9                      	leave
 25041 0001298D C21800                  	ret AND_KILL_FRAME(1)
 25042 00012990 E90A010000              	jmp .L_lambda_opt_end_0016	; new closure is in rax
 25043                                  .L_lambda_opt_arity_check_more_0016:
 25044 00012995 488B442410              	mov rax, qword[rsp + 2 * 8]
 25045 0001299A 4889C7                  	mov rdi, rax
 25046 0001299D 49B9-                   	mov r9, sob_nil
 25046 0001299F [0100000000000000] 
 25047 000129A7 4989F8                  	mov r8, rdi
 25048                                  .L_lambda_opt_stack_shrink_loop_0016:
 25049 000129AA 4983F800                	cmp r8, 0
 25050 000129AE 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_0016
 25051 000129B0 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)] 	;rbx is the top of the stack
 25052 000129B5 BF11000000              	mov rdi, 1+8+8	;for pair
 25053 000129BA E805530000              	call malloc	 ;to create the pair in the stack
 25054 000129BF C60021                  	mov byte [rax], T_pair	 ; to make it a pair
 25055 000129C2 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
 25056 000129C6 4C894809                 	mov qword[rax+1+8],r9
 25057 000129CA 4989C1                  	mov r9 , rax	 ; for the recursion 
 25058 000129CD 49FFC8                  	dec r8
 25059 000129D0 EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_0016
 25060                                  .L_lambda_opt_stack_shrink_loop_exit_0016:
 25061 000129D2 488B442410              	mov rax, qword[rsp + 2 * 8]
 25062 000129D7 BF01000000              	mov rdi, 1
 25063 000129DC 4829F8                  	sub rax, rdi
 25064 000129DF 4889C7                  	mov rdi, rax
 25065 000129E2 486BC008                	imul rax,8
 25066 000129E6 4801C4                  	add rsp, rax
 25067 000129E9 4889E0                  	mov rax, rsp
 25068 000129EC 4989F8                  	mov r8, rdi
 25069 000129EF 4D6BC008                	imul r8, 8
 25070 000129F3 4C29C0                  	sub rax, r8
 25071 000129F6 4989C2                  	mov r10, rax	; holds the original ret in the stack
 25072 000129F9 4983C218                	add r10, 8*3
 25073 000129FD 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
 25074 00012A01 4C8B00                  	mov r8, qword[rax] 	;arg count = r8
 25075 00012A04 4D6BC008                	imul r8,8
 25076 00012A08 4C01C0                  	add rax, r8
 25077 00012A0B 4C8908                  	mov qword[rax] ,r9
 25078 00012A0E 4983EA18                 	sub r10, 8*3
 25079 00012A12 48C744241001000000      	mov qword [rsp+2*8], 1
 25080 00012A1B 498B4208                	mov rax, qword[r10 + 1 * 8]
 25081 00012A1F 4889442408              	mov qword[rsp + 1*8] ,rax
 25082 00012A24 498B02                  	mov rax, qword[r10]
 25083 00012A27 48890424                	mov qword[rsp], rax
 25084 00012A2B C8000000                	enter 0, 0
 25085                                  	; preparing a tail-call
 25086 00012A2F 488B4520                	mov rax, PARAM(0)	; param s
 25087 00012A33 50                      	push rax
 25088 00012A34 6A01                    	push 1	; arg count
 25089 00012A36 488B0425[14140000]      	mov rax, qword [free_var_95]	; free var list->vector
 25090 00012A3E 803805                  	cmp byte [rax], T_undefined
 25091 00012A41 0F8450510000            	je L_error_fvar_undefined
 25092 00012A47 803804                  	cmp byte [rax], T_closure
 25093 00012A4A 0F85CB510000            	jne L_error_non_closure
 25094 00012A50 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25095 00012A53 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 25096 00012A56 FF7500                  	push qword[rbp]
 25097 00012A59 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 25098 00012A5C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 25099 00012A60 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 25100 00012A64 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 25101 00012A68 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 25102 00012A6B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 25103 00012A6E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 25104 00012A73 4983C103                	add r9, 3 	 ;for getting to the params
 25105 00012A77 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 25106 00012A7B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 25107                                  .L_tc_recycle_frame_loop_00df:
 25108 00012A7E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 25109 00012A81 7410                    	je .L_tc_recycle_frame_done_00df
 25110 00012A83 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 25111 00012A86 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 25112 00012A89 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 25113 00012A8D 4983E808                	sub r8, 8	 ;move the top of the stack one down
 25114 00012A91 EBEB                    	jmp .L_tc_recycle_frame_loop_00df
 25115                                  .L_tc_recycle_frame_done_00df:
 25116 00012A93 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 25117 00012A94 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 25118 00012A98 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25119 00012A9B C9                      	leave
 25120 00012A9C C21800                  	ret AND_KILL_FRAME(1)
 25121                                  .L_lambda_opt_end_0016:	; new closure is in rax
 25122 00012A9F 48890425[11170000]      	mov qword [free_var_140], rax
 25123 00012AA7 48B8-                   	mov rax, sob_void
 25123 00012AA9 [0000000000000000] 
 25124                                  
 25125 00012AB1 4889C7                  	mov rdi, rax
 25126 00012AB4 E860540000              	call print_sexpr_if_not_void
 25127                                  	; preparing a non-tail-call
 25128 00012AB9 48B8-                   	mov rax, L_constants + 1993
 25128 00012ABB [C907000000000000] 
 25129 00012AC3 50                      	push rax
 25130 00012AC4 6A01                    	push 1	; arg count
 25131 00012AC6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25132 00012ACB E8F4510000              	call malloc
 25133 00012AD0 50                      	push rax
 25134 00012AD1 BF00000000              	mov rdi, 8 * 0	; new rib
 25135 00012AD6 E8E9510000              	call malloc
 25136 00012ADB 50                      	push rax
 25137 00012ADC BF08000000              	mov rdi, 8 * 1	; extended env
 25138 00012AE1 E8DE510000              	call malloc
 25139 00012AE6 488B7D10                	mov rdi, ENV
 25140 00012AEA BE00000000              	mov rsi, 0
 25141 00012AEF BA01000000              	mov rdx, 1
 25142                                  .L_lambda_simple_env_loop_0094:	; ext_env[i + 1] <-- env[i]
 25143 00012AF4 4883FE00                	cmp rsi, 0
 25144 00012AF8 7410                    	je .L_lambda_simple_env_end_0094
 25145 00012AFA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25146 00012AFE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25147 00012B02 48FFC6                  	inc rsi
 25148 00012B05 48FFC2                  	inc rdx
 25149 00012B08 EBEA                    	jmp .L_lambda_simple_env_loop_0094
 25150                                  .L_lambda_simple_env_end_0094:
 25151 00012B0A 5B                      	pop rbx
 25152 00012B0B BE00000000              	mov rsi, 0
 25153                                  .L_lambda_simple_params_loop_0094:	; copy params
 25154 00012B10 4883FE00                	cmp rsi, 0
 25155 00012B14 740E                    	je .L_lambda_simple_params_end_0094
 25156 00012B16 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25157 00012B1B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25158 00012B1F 48FFC6                  	inc rsi
 25159 00012B22 EBEC                    	jmp .L_lambda_simple_params_loop_0094
 25160                                  .L_lambda_simple_params_end_0094:
 25161 00012B24 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25162 00012B27 4889C3                  	mov rbx, rax
 25163 00012B2A 58                      	pop rax
 25164 00012B2B C60004                  	mov byte [rax], T_closure
 25165 00012B2E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25166 00012B32 48C74009[3F2B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0094
 25167 00012B3A E942030000              	jmp .L_lambda_simple_end_0094
 25168                                  .L_lambda_simple_code_0094:	; lambda-simple body
 25169 00012B3F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25170 00012B45 740B                    	je .L_lambda_simple_arity_check_ok_0094
 25171 00012B47 FF742410                	push qword [rsp + 8 * 2]
 25172 00012B4B 6A01                    	push 1
 25173 00012B4D E92B510000              	jmp L_error_incorrect_arity_simple
 25174                                  .L_lambda_simple_arity_check_ok_0094:
 25175 00012B52 C8000000                	enter 0, 0
 25176 00012B56 BF08000000              	mov rdi, 8*1
 25177 00012B5B E864510000              	call malloc
 25178 00012B60 488B5D20                	mov rbx, PARAM(0)
 25179 00012B64 488918                  	mov qword[rax], rbx
 25180 00012B67 48894520                	mov PARAM(0), rax
 25181 00012B6B 48B8-                   	mov rax, sob_void
 25181 00012B6D [0000000000000000] 
 25182                                  
 25183 00012B75 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25184 00012B7A E845510000              	call malloc
 25185 00012B7F 50                      	push rax
 25186 00012B80 BF08000000              	mov rdi, 8 * 1	; new rib
 25187 00012B85 E83A510000              	call malloc
 25188 00012B8A 50                      	push rax
 25189 00012B8B BF10000000              	mov rdi, 8 * 2	; extended env
 25190 00012B90 E82F510000              	call malloc
 25191 00012B95 488B7D10                	mov rdi, ENV
 25192 00012B99 BE00000000              	mov rsi, 0
 25193 00012B9E BA01000000              	mov rdx, 1
 25194                                  .L_lambda_simple_env_loop_0095:	; ext_env[i + 1] <-- env[i]
 25195 00012BA3 4883FE01                	cmp rsi, 1
 25196 00012BA7 7410                    	je .L_lambda_simple_env_end_0095
 25197 00012BA9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25198 00012BAD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25199 00012BB1 48FFC6                  	inc rsi
 25200 00012BB4 48FFC2                  	inc rdx
 25201 00012BB7 EBEA                    	jmp .L_lambda_simple_env_loop_0095
 25202                                  .L_lambda_simple_env_end_0095:
 25203 00012BB9 5B                      	pop rbx
 25204 00012BBA BE00000000              	mov rsi, 0
 25205                                  .L_lambda_simple_params_loop_0095:	; copy params
 25206 00012BBF 4883FE01                	cmp rsi, 1
 25207 00012BC3 740E                    	je .L_lambda_simple_params_end_0095
 25208 00012BC5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25209 00012BCA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25210 00012BCE 48FFC6                  	inc rsi
 25211 00012BD1 EBEC                    	jmp .L_lambda_simple_params_loop_0095
 25212                                  .L_lambda_simple_params_end_0095:
 25213 00012BD3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25214 00012BD6 4889C3                  	mov rbx, rax
 25215 00012BD9 58                      	pop rax
 25216 00012BDA C60004                  	mov byte [rax], T_closure
 25217 00012BDD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25218 00012BE1 48C74009[EE2B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0095
 25219 00012BE9 E94F010000              	jmp .L_lambda_simple_end_0095
 25220                                  .L_lambda_simple_code_0095:	; lambda-simple body
 25221 00012BEE 48837C241003            	cmp qword [rsp + 8 * 2], 3
 25222 00012BF4 740B                    	je .L_lambda_simple_arity_check_ok_0095
 25223 00012BF6 FF742410                	push qword [rsp + 8 * 2]
 25224 00012BFA 6A03                    	push 3
 25225 00012BFC E97C500000              	jmp L_error_incorrect_arity_simple
 25226                                  .L_lambda_simple_arity_check_ok_0095:
 25227 00012C01 C8000000                	enter 0, 0
 25228                                  	; preparing a non-tail-call
 25229 00012C05 488B4530                	mov rax, PARAM(2)	; param n
 25230 00012C09 50                      	push rax
 25231 00012C0A 488B4528                	mov rax, PARAM(1)	; param i
 25232 00012C0E 50                      	push rax
 25233 00012C0F 6A02                    	push 2	; arg count
 25234 00012C11 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 25235 00012C19 803805                  	cmp byte [rax], T_undefined
 25236 00012C1C 0F84754F0000            	je L_error_fvar_undefined
 25237 00012C22 803804                  	cmp byte [rax], T_closure
 25238 00012C25 0F85F04F0000            	jne L_error_non_closure
 25239 00012C2B FF7001                  	push SOB_CLOSURE_ENV(rax)
 25240 00012C2E FF5009                  	call SOB_CLOSURE_CODE(rax)
 25241 00012C31 483D[02000000]          	cmp rax, sob_boolean_false
 25242 00012C37 0F84F2000000            	je .L_if_else_0077
 25243                                  	; preparing a tail-call
 25244                                  	; preparing a non-tail-call
 25245 00012C3D 488B4530                	mov rax, PARAM(2)	; param n
 25246 00012C41 50                      	push rax
 25247                                  	; preparing a non-tail-call
 25248 00012C42 48B8-                   	mov rax, L_constants + 2270
 25248 00012C44 [DE08000000000000] 
 25249 00012C4C 50                      	push rax
 25250 00012C4D 488B4528                	mov rax, PARAM(1)	; param i
 25251 00012C51 50                      	push rax
 25252 00012C52 6A02                    	push 2	; arg count
 25253 00012C54 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 25254 00012C5C 803805                  	cmp byte [rax], T_undefined
 25255 00012C5F 0F84324F0000            	je L_error_fvar_undefined
 25256 00012C65 803804                  	cmp byte [rax], T_closure
 25257 00012C68 0F85AD4F0000            	jne L_error_non_closure
 25258 00012C6E FF7001                  	push SOB_CLOSURE_ENV(rax)
 25259 00012C71 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25260 00012C74 50                      	push rax
 25261 00012C75 488B4520                	mov rax, PARAM(0)	; param str
 25262 00012C79 50                      	push rax
 25263 00012C7A 6A03                    	push 3	; arg count
 25264 00012C7C 488B4510                	mov rax, ENV
 25265 00012C80 488B00                  	mov rax, qword [rax + 8 * 0]
 25266 00012C83 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 25267 00012C86 488B00                  	mov rax, qword [rax]
 25268 00012C89 803804                  	cmp byte [rax], T_closure
 25269 00012C8C 0F85894F0000            	jne L_error_non_closure
 25270 00012C92 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25271 00012C95 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25272 00012C98 50                      	push rax
 25273                                  	; preparing a non-tail-call
 25274 00012C99 488B4528                	mov rax, PARAM(1)	; param i
 25275 00012C9D 50                      	push rax
 25276 00012C9E 488B4520                	mov rax, PARAM(0)	; param str
 25277 00012CA2 50                      	push rax
 25278 00012CA3 6A02                    	push 2	; arg count
 25279 00012CA5 488B0425[45160000]      	mov rax, qword [free_var_128]	; free var string-ref
 25280 00012CAD 803805                  	cmp byte [rax], T_undefined
 25281 00012CB0 0F84E14E0000            	je L_error_fvar_undefined
 25282 00012CB6 803804                  	cmp byte [rax], T_closure
 25283 00012CB9 0F855C4F0000            	jne L_error_non_closure
 25284 00012CBF FF7001                  	push SOB_CLOSURE_ENV(rax)
 25285 00012CC2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25286 00012CC5 50                      	push rax
 25287 00012CC6 6A02                    	push 2	; arg count
 25288 00012CC8 488B0425[04130000]      	mov rax, qword [free_var_79]	; free var cons
 25289 00012CD0 803805                  	cmp byte [rax], T_undefined
 25290 00012CD3 0F84BE4E0000            	je L_error_fvar_undefined
 25291 00012CD9 803804                  	cmp byte [rax], T_closure
 25292 00012CDC 0F85394F0000            	jne L_error_non_closure
 25293 00012CE2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25294 00012CE5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 25295 00012CE8 FF7500                  	push qword[rbp]
 25296 00012CEB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 25297 00012CEE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 25298 00012CF2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 25299 00012CF6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 25300 00012CFA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 25301 00012CFD 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 25302 00012D00 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 25303 00012D05 4983C103                	add r9, 3 	 ;for getting to the params
 25304 00012D09 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 25305 00012D0D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 25306                                  .L_tc_recycle_frame_loop_00e1:
 25307 00012D10 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 25308 00012D13 7410                    	je .L_tc_recycle_frame_done_00e1
 25309 00012D15 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 25310 00012D18 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 25311 00012D1B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 25312 00012D1F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 25313 00012D23 EBEB                    	jmp .L_tc_recycle_frame_loop_00e1
 25314                                  .L_tc_recycle_frame_done_00e1:
 25315 00012D25 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 25316 00012D26 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 25317 00012D2A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25318 00012D2D EB0A                    	jmp .L_if_end_0077
 25319                                  .L_if_else_0077:
 25320 00012D2F 48B8-                   	mov rax, L_constants + 1
 25320 00012D31 [0100000000000000] 
 25321                                  .L_if_end_0077:
 25322 00012D39 C9                      	leave
 25323 00012D3A C22800                  	ret AND_KILL_FRAME(3)
 25324                                  .L_lambda_simple_end_0095:	; new closure is in rax
 25325 00012D3D 50                      	push rax
 25326 00012D3E 488B4520                	mov rax, PARAM(0)	; param run
 25327 00012D42 8F00                    	pop qword [rax]
 25328 00012D44 48B8-                   	mov rax, sob_void
 25328 00012D46 [0000000000000000] 
 25329                                  
 25330 00012D4E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25331 00012D53 E86C4F0000              	call malloc
 25332 00012D58 50                      	push rax
 25333 00012D59 BF08000000              	mov rdi, 8 * 1	; new rib
 25334 00012D5E E8614F0000              	call malloc
 25335 00012D63 50                      	push rax
 25336 00012D64 BF10000000              	mov rdi, 8 * 2	; extended env
 25337 00012D69 E8564F0000              	call malloc
 25338 00012D6E 488B7D10                	mov rdi, ENV
 25339 00012D72 BE00000000              	mov rsi, 0
 25340 00012D77 BA01000000              	mov rdx, 1
 25341                                  .L_lambda_simple_env_loop_0096:	; ext_env[i + 1] <-- env[i]
 25342 00012D7C 4883FE01                	cmp rsi, 1
 25343 00012D80 7410                    	je .L_lambda_simple_env_end_0096
 25344 00012D82 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25345 00012D86 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25346 00012D8A 48FFC6                  	inc rsi
 25347 00012D8D 48FFC2                  	inc rdx
 25348 00012D90 EBEA                    	jmp .L_lambda_simple_env_loop_0096
 25349                                  .L_lambda_simple_env_end_0096:
 25350 00012D92 5B                      	pop rbx
 25351 00012D93 BE00000000              	mov rsi, 0
 25352                                  .L_lambda_simple_params_loop_0096:	; copy params
 25353 00012D98 4883FE01                	cmp rsi, 1
 25354 00012D9C 740E                    	je .L_lambda_simple_params_end_0096
 25355 00012D9E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25356 00012DA3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25357 00012DA7 48FFC6                  	inc rsi
 25358 00012DAA EBEC                    	jmp .L_lambda_simple_params_loop_0096
 25359                                  .L_lambda_simple_params_end_0096:
 25360 00012DAC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25361 00012DAF 4889C3                  	mov rbx, rax
 25362 00012DB2 58                      	pop rax
 25363 00012DB3 C60004                  	mov byte [rax], T_closure
 25364 00012DB6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25365 00012DBA 48C74009[C72D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0096
 25366 00012DC2 E9B6000000              	jmp .L_lambda_simple_end_0096
 25367                                  .L_lambda_simple_code_0096:	; lambda-simple body
 25368 00012DC7 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25369 00012DCD 740B                    	je .L_lambda_simple_arity_check_ok_0096
 25370 00012DCF FF742410                	push qword [rsp + 8 * 2]
 25371 00012DD3 6A01                    	push 1
 25372 00012DD5 E9A34E0000              	jmp L_error_incorrect_arity_simple
 25373                                  .L_lambda_simple_arity_check_ok_0096:
 25374 00012DDA C8000000                	enter 0, 0
 25375                                  	; preparing a tail-call
 25376                                  	; preparing a non-tail-call
 25377 00012DDE 488B4520                	mov rax, PARAM(0)	; param str
 25378 00012DE2 50                      	push rax
 25379 00012DE3 6A01                    	push 1	; arg count
 25380 00012DE5 488B0425[34160000]      	mov rax, qword [free_var_127]	; free var string-length
 25381 00012DED 803805                  	cmp byte [rax], T_undefined
 25382 00012DF0 0F84A14D0000            	je L_error_fvar_undefined
 25383 00012DF6 803804                  	cmp byte [rax], T_closure
 25384 00012DF9 0F851C4E0000            	jne L_error_non_closure
 25385 00012DFF FF7001                  	push SOB_CLOSURE_ENV(rax)
 25386 00012E02 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25387 00012E05 50                      	push rax
 25388 00012E06 48B8-                   	mov rax, L_constants + 2135
 25388 00012E08 [5708000000000000] 
 25389 00012E10 50                      	push rax
 25390 00012E11 488B4520                	mov rax, PARAM(0)	; param str
 25391 00012E15 50                      	push rax
 25392 00012E16 6A03                    	push 3	; arg count
 25393 00012E18 488B4510                	mov rax, ENV
 25394 00012E1C 488B00                  	mov rax, qword [rax + 8 * 0]
 25395 00012E1F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 25396 00012E22 488B00                  	mov rax, qword [rax]
 25397 00012E25 803804                  	cmp byte [rax], T_closure
 25398 00012E28 0F85ED4D0000            	jne L_error_non_closure
 25399 00012E2E FF7001                  	push SOB_CLOSURE_ENV(rax)
 25400 00012E31 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 25401 00012E34 FF7500                  	push qword[rbp]
 25402 00012E37 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 25403 00012E3A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 25404 00012E3E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 25405 00012E42 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 25406 00012E46 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 25407 00012E49 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 25408 00012E4C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 25409 00012E51 4983C103                	add r9, 3 	 ;for getting to the params
 25410 00012E55 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 25411 00012E59 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 25412                                  .L_tc_recycle_frame_loop_00e2:
 25413 00012E5C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 25414 00012E5F 7410                    	je .L_tc_recycle_frame_done_00e2
 25415 00012E61 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 25416 00012E64 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 25417 00012E67 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 25418 00012E6B 4983E808                	sub r8, 8	 ;move the top of the stack one down
 25419 00012E6F EBEB                    	jmp .L_tc_recycle_frame_loop_00e2
 25420                                  .L_tc_recycle_frame_done_00e2:
 25421 00012E71 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 25422 00012E72 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 25423 00012E76 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25424 00012E79 C9                      	leave
 25425 00012E7A C21800                  	ret AND_KILL_FRAME(1)
 25426                                  .L_lambda_simple_end_0096:	; new closure is in rax
 25427 00012E7D C9                      	leave
 25428 00012E7E C21800                  	ret AND_KILL_FRAME(1)
 25429                                  .L_lambda_simple_end_0094:	; new closure is in rax
 25430 00012E81 803804                  	cmp byte [rax], T_closure
 25431 00012E84 0F85914D0000            	jne L_error_non_closure
 25432 00012E8A FF7001                  	push SOB_CLOSURE_ENV(rax)
 25433 00012E8D FF5009                  	call SOB_CLOSURE_CODE(rax)
 25434 00012E90 48890425[AC150000]      	mov qword [free_var_119], rax
 25435 00012E98 48B8-                   	mov rax, sob_void
 25435 00012E9A [0000000000000000] 
 25436                                  
 25437 00012EA2 4889C7                  	mov rdi, rax
 25438 00012EA5 E86F500000              	call print_sexpr_if_not_void
 25439                                  	; preparing a non-tail-call
 25440 00012EAA 48B8-                   	mov rax, L_constants + 1993
 25440 00012EAC [C907000000000000] 
 25441 00012EB4 50                      	push rax
 25442 00012EB5 6A01                    	push 1	; arg count
 25443 00012EB7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25444 00012EBC E8034E0000              	call malloc
 25445 00012EC1 50                      	push rax
 25446 00012EC2 BF00000000              	mov rdi, 8 * 0	; new rib
 25447 00012EC7 E8F84D0000              	call malloc
 25448 00012ECC 50                      	push rax
 25449 00012ECD BF08000000              	mov rdi, 8 * 1	; extended env
 25450 00012ED2 E8ED4D0000              	call malloc
 25451 00012ED7 488B7D10                	mov rdi, ENV
 25452 00012EDB BE00000000              	mov rsi, 0
 25453 00012EE0 BA01000000              	mov rdx, 1
 25454                                  .L_lambda_simple_env_loop_0097:	; ext_env[i + 1] <-- env[i]
 25455 00012EE5 4883FE00                	cmp rsi, 0
 25456 00012EE9 7410                    	je .L_lambda_simple_env_end_0097
 25457 00012EEB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25458 00012EEF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25459 00012EF3 48FFC6                  	inc rsi
 25460 00012EF6 48FFC2                  	inc rdx
 25461 00012EF9 EBEA                    	jmp .L_lambda_simple_env_loop_0097
 25462                                  .L_lambda_simple_env_end_0097:
 25463 00012EFB 5B                      	pop rbx
 25464 00012EFC BE00000000              	mov rsi, 0
 25465                                  .L_lambda_simple_params_loop_0097:	; copy params
 25466 00012F01 4883FE00                	cmp rsi, 0
 25467 00012F05 740E                    	je .L_lambda_simple_params_end_0097
 25468 00012F07 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25469 00012F0C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25470 00012F10 48FFC6                  	inc rsi
 25471 00012F13 EBEC                    	jmp .L_lambda_simple_params_loop_0097
 25472                                  .L_lambda_simple_params_end_0097:
 25473 00012F15 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25474 00012F18 4889C3                  	mov rbx, rax
 25475 00012F1B 58                      	pop rax
 25476 00012F1C C60004                  	mov byte [rax], T_closure
 25477 00012F1F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25478 00012F23 48C74009[302F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0097
 25479 00012F2B E942030000              	jmp .L_lambda_simple_end_0097
 25480                                  .L_lambda_simple_code_0097:	; lambda-simple body
 25481 00012F30 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25482 00012F36 740B                    	je .L_lambda_simple_arity_check_ok_0097
 25483 00012F38 FF742410                	push qword [rsp + 8 * 2]
 25484 00012F3C 6A01                    	push 1
 25485 00012F3E E93A4D0000              	jmp L_error_incorrect_arity_simple
 25486                                  .L_lambda_simple_arity_check_ok_0097:
 25487 00012F43 C8000000                	enter 0, 0
 25488 00012F47 BF08000000              	mov rdi, 8*1
 25489 00012F4C E8734D0000              	call malloc
 25490 00012F51 488B5D20                	mov rbx, PARAM(0)
 25491 00012F55 488918                  	mov qword[rax], rbx
 25492 00012F58 48894520                	mov PARAM(0), rax
 25493 00012F5C 48B8-                   	mov rax, sob_void
 25493 00012F5E [0000000000000000] 
 25494                                  
 25495 00012F66 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25496 00012F6B E8544D0000              	call malloc
 25497 00012F70 50                      	push rax
 25498 00012F71 BF08000000              	mov rdi, 8 * 1	; new rib
 25499 00012F76 E8494D0000              	call malloc
 25500 00012F7B 50                      	push rax
 25501 00012F7C BF10000000              	mov rdi, 8 * 2	; extended env
 25502 00012F81 E83E4D0000              	call malloc
 25503 00012F86 488B7D10                	mov rdi, ENV
 25504 00012F8A BE00000000              	mov rsi, 0
 25505 00012F8F BA01000000              	mov rdx, 1
 25506                                  .L_lambda_simple_env_loop_0098:	; ext_env[i + 1] <-- env[i]
 25507 00012F94 4883FE01                	cmp rsi, 1
 25508 00012F98 7410                    	je .L_lambda_simple_env_end_0098
 25509 00012F9A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25510 00012F9E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25511 00012FA2 48FFC6                  	inc rsi
 25512 00012FA5 48FFC2                  	inc rdx
 25513 00012FA8 EBEA                    	jmp .L_lambda_simple_env_loop_0098
 25514                                  .L_lambda_simple_env_end_0098:
 25515 00012FAA 5B                      	pop rbx
 25516 00012FAB BE00000000              	mov rsi, 0
 25517                                  .L_lambda_simple_params_loop_0098:	; copy params
 25518 00012FB0 4883FE01                	cmp rsi, 1
 25519 00012FB4 740E                    	je .L_lambda_simple_params_end_0098
 25520 00012FB6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25521 00012FBB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25522 00012FBF 48FFC6                  	inc rsi
 25523 00012FC2 EBEC                    	jmp .L_lambda_simple_params_loop_0098
 25524                                  .L_lambda_simple_params_end_0098:
 25525 00012FC4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25526 00012FC7 4889C3                  	mov rbx, rax
 25527 00012FCA 58                      	pop rax
 25528 00012FCB C60004                  	mov byte [rax], T_closure
 25529 00012FCE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25530 00012FD2 48C74009[DF2F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0098
 25531 00012FDA E94F010000              	jmp .L_lambda_simple_end_0098
 25532                                  .L_lambda_simple_code_0098:	; lambda-simple body
 25533 00012FDF 48837C241003            	cmp qword [rsp + 8 * 2], 3
 25534 00012FE5 740B                    	je .L_lambda_simple_arity_check_ok_0098
 25535 00012FE7 FF742410                	push qword [rsp + 8 * 2]
 25536 00012FEB 6A03                    	push 3
 25537 00012FED E98B4C0000              	jmp L_error_incorrect_arity_simple
 25538                                  .L_lambda_simple_arity_check_ok_0098:
 25539 00012FF2 C8000000                	enter 0, 0
 25540                                  	; preparing a non-tail-call
 25541 00012FF6 488B4530                	mov rax, PARAM(2)	; param n
 25542 00012FFA 50                      	push rax
 25543 00012FFB 488B4528                	mov rax, PARAM(1)	; param i
 25544 00012FFF 50                      	push rax
 25545 00013000 6A02                    	push 2	; arg count
 25546 00013002 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 25547 0001300A 803805                  	cmp byte [rax], T_undefined
 25548 0001300D 0F84844B0000            	je L_error_fvar_undefined
 25549 00013013 803804                  	cmp byte [rax], T_closure
 25550 00013016 0F85FF4B0000            	jne L_error_non_closure
 25551 0001301C FF7001                  	push SOB_CLOSURE_ENV(rax)
 25552 0001301F FF5009                  	call SOB_CLOSURE_CODE(rax)
 25553 00013022 483D[02000000]          	cmp rax, sob_boolean_false
 25554 00013028 0F84F2000000            	je .L_if_else_0078
 25555                                  	; preparing a tail-call
 25556                                  	; preparing a non-tail-call
 25557 0001302E 488B4530                	mov rax, PARAM(2)	; param n
 25558 00013032 50                      	push rax
 25559                                  	; preparing a non-tail-call
 25560 00013033 48B8-                   	mov rax, L_constants + 2270
 25560 00013035 [DE08000000000000] 
 25561 0001303D 50                      	push rax
 25562 0001303E 488B4528                	mov rax, PARAM(1)	; param i
 25563 00013042 50                      	push rax
 25564 00013043 6A02                    	push 2	; arg count
 25565 00013045 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 25566 0001304D 803805                  	cmp byte [rax], T_undefined
 25567 00013050 0F84414B0000            	je L_error_fvar_undefined
 25568 00013056 803804                  	cmp byte [rax], T_closure
 25569 00013059 0F85BC4B0000            	jne L_error_non_closure
 25570 0001305F FF7001                  	push SOB_CLOSURE_ENV(rax)
 25571 00013062 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25572 00013065 50                      	push rax
 25573 00013066 488B4520                	mov rax, PARAM(0)	; param v
 25574 0001306A 50                      	push rax
 25575 0001306B 6A03                    	push 3	; arg count
 25576 0001306D 488B4510                	mov rax, ENV
 25577 00013071 488B00                  	mov rax, qword [rax + 8 * 0]
 25578 00013074 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 25579 00013077 488B00                  	mov rax, qword [rax]
 25580 0001307A 803804                  	cmp byte [rax], T_closure
 25581 0001307D 0F85984B0000            	jne L_error_non_closure
 25582 00013083 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25583 00013086 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25584 00013089 50                      	push rax
 25585                                  	; preparing a non-tail-call
 25586 0001308A 488B4528                	mov rax, PARAM(1)	; param i
 25587 0001308E 50                      	push rax
 25588 0001308F 488B4520                	mov rax, PARAM(0)	; param v
 25589 00013093 50                      	push rax
 25590 00013094 6A02                    	push 2	; arg count
 25591 00013096 488B0425[55170000]      	mov rax, qword [free_var_144]	; free var vector-ref
 25592 0001309E 803805                  	cmp byte [rax], T_undefined
 25593 000130A1 0F84F04A0000            	je L_error_fvar_undefined
 25594 000130A7 803804                  	cmp byte [rax], T_closure
 25595 000130AA 0F856B4B0000            	jne L_error_non_closure
 25596 000130B0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25597 000130B3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25598 000130B6 50                      	push rax
 25599 000130B7 6A02                    	push 2	; arg count
 25600 000130B9 488B0425[04130000]      	mov rax, qword [free_var_79]	; free var cons
 25601 000130C1 803805                  	cmp byte [rax], T_undefined
 25602 000130C4 0F84CD4A0000            	je L_error_fvar_undefined
 25603 000130CA 803804                  	cmp byte [rax], T_closure
 25604 000130CD 0F85484B0000            	jne L_error_non_closure
 25605 000130D3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25606 000130D6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 25607 000130D9 FF7500                  	push qword[rbp]
 25608 000130DC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 25609 000130DF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 25610 000130E3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 25611 000130E7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 25612 000130EB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 25613 000130EE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 25614 000130F1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 25615 000130F6 4983C103                	add r9, 3 	 ;for getting to the params
 25616 000130FA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 25617 000130FE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 25618                                  .L_tc_recycle_frame_loop_00e3:
 25619 00013101 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 25620 00013104 7410                    	je .L_tc_recycle_frame_done_00e3
 25621 00013106 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 25622 00013109 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 25623 0001310C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 25624 00013110 4983E808                	sub r8, 8	 ;move the top of the stack one down
 25625 00013114 EBEB                    	jmp .L_tc_recycle_frame_loop_00e3
 25626                                  .L_tc_recycle_frame_done_00e3:
 25627 00013116 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 25628 00013117 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 25629 0001311B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25630 0001311E EB0A                    	jmp .L_if_end_0078
 25631                                  .L_if_else_0078:
 25632 00013120 48B8-                   	mov rax, L_constants + 1
 25632 00013122 [0100000000000000] 
 25633                                  .L_if_end_0078:
 25634 0001312A C9                      	leave
 25635 0001312B C22800                  	ret AND_KILL_FRAME(3)
 25636                                  .L_lambda_simple_end_0098:	; new closure is in rax
 25637 0001312E 50                      	push rax
 25638 0001312F 488B4520                	mov rax, PARAM(0)	; param run
 25639 00013133 8F00                    	pop qword [rax]
 25640 00013135 48B8-                   	mov rax, sob_void
 25640 00013137 [0000000000000000] 
 25641                                  
 25642 0001313F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25643 00013144 E87B4B0000              	call malloc
 25644 00013149 50                      	push rax
 25645 0001314A BF08000000              	mov rdi, 8 * 1	; new rib
 25646 0001314F E8704B0000              	call malloc
 25647 00013154 50                      	push rax
 25648 00013155 BF10000000              	mov rdi, 8 * 2	; extended env
 25649 0001315A E8654B0000              	call malloc
 25650 0001315F 488B7D10                	mov rdi, ENV
 25651 00013163 BE00000000              	mov rsi, 0
 25652 00013168 BA01000000              	mov rdx, 1
 25653                                  .L_lambda_simple_env_loop_0099:	; ext_env[i + 1] <-- env[i]
 25654 0001316D 4883FE01                	cmp rsi, 1
 25655 00013171 7410                    	je .L_lambda_simple_env_end_0099
 25656 00013173 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25657 00013177 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25658 0001317B 48FFC6                  	inc rsi
 25659 0001317E 48FFC2                  	inc rdx
 25660 00013181 EBEA                    	jmp .L_lambda_simple_env_loop_0099
 25661                                  .L_lambda_simple_env_end_0099:
 25662 00013183 5B                      	pop rbx
 25663 00013184 BE00000000              	mov rsi, 0
 25664                                  .L_lambda_simple_params_loop_0099:	; copy params
 25665 00013189 4883FE01                	cmp rsi, 1
 25666 0001318D 740E                    	je .L_lambda_simple_params_end_0099
 25667 0001318F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25668 00013194 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25669 00013198 48FFC6                  	inc rsi
 25670 0001319B EBEC                    	jmp .L_lambda_simple_params_loop_0099
 25671                                  .L_lambda_simple_params_end_0099:
 25672 0001319D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25673 000131A0 4889C3                  	mov rbx, rax
 25674 000131A3 58                      	pop rax
 25675 000131A4 C60004                  	mov byte [rax], T_closure
 25676 000131A7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25677 000131AB 48C74009[B8310100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0099
 25678 000131B3 E9B6000000              	jmp .L_lambda_simple_end_0099
 25679                                  .L_lambda_simple_code_0099:	; lambda-simple body
 25680 000131B8 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25681 000131BE 740B                    	je .L_lambda_simple_arity_check_ok_0099
 25682 000131C0 FF742410                	push qword [rsp + 8 * 2]
 25683 000131C4 6A01                    	push 1
 25684 000131C6 E9B24A0000              	jmp L_error_incorrect_arity_simple
 25685                                  .L_lambda_simple_arity_check_ok_0099:
 25686 000131CB C8000000                	enter 0, 0
 25687                                  	; preparing a tail-call
 25688                                  	; preparing a non-tail-call
 25689 000131CF 488B4520                	mov rax, PARAM(0)	; param v
 25690 000131D3 50                      	push rax
 25691 000131D4 6A01                    	push 1	; arg count
 25692 000131D6 488B0425[44170000]      	mov rax, qword [free_var_143]	; free var vector-length
 25693 000131DE 803805                  	cmp byte [rax], T_undefined
 25694 000131E1 0F84B0490000            	je L_error_fvar_undefined
 25695 000131E7 803804                  	cmp byte [rax], T_closure
 25696 000131EA 0F852B4A0000            	jne L_error_non_closure
 25697 000131F0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25698 000131F3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25699 000131F6 50                      	push rax
 25700 000131F7 48B8-                   	mov rax, L_constants + 2135
 25700 000131F9 [5708000000000000] 
 25701 00013201 50                      	push rax
 25702 00013202 488B4520                	mov rax, PARAM(0)	; param v
 25703 00013206 50                      	push rax
 25704 00013207 6A03                    	push 3	; arg count
 25705 00013209 488B4510                	mov rax, ENV
 25706 0001320D 488B00                  	mov rax, qword [rax + 8 * 0]
 25707 00013210 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 25708 00013213 488B00                  	mov rax, qword [rax]
 25709 00013216 803804                  	cmp byte [rax], T_closure
 25710 00013219 0F85FC490000            	jne L_error_non_closure
 25711 0001321F FF7001                  	push SOB_CLOSURE_ENV(rax)
 25712 00013222 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 25713 00013225 FF7500                  	push qword[rbp]
 25714 00013228 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 25715 0001322B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 25716 0001322F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 25717 00013233 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 25718 00013237 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 25719 0001323A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 25720 0001323D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 25721 00013242 4983C103                	add r9, 3 	 ;for getting to the params
 25722 00013246 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 25723 0001324A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 25724                                  .L_tc_recycle_frame_loop_00e4:
 25725 0001324D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 25726 00013250 7410                    	je .L_tc_recycle_frame_done_00e4
 25727 00013252 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 25728 00013255 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 25729 00013258 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 25730 0001325C 4983E808                	sub r8, 8	 ;move the top of the stack one down
 25731 00013260 EBEB                    	jmp .L_tc_recycle_frame_loop_00e4
 25732                                  .L_tc_recycle_frame_done_00e4:
 25733 00013262 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 25734 00013263 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 25735 00013267 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25736 0001326A C9                      	leave
 25737 0001326B C21800                  	ret AND_KILL_FRAME(1)
 25738                                  .L_lambda_simple_end_0099:	; new closure is in rax
 25739 0001326E C9                      	leave
 25740 0001326F C21800                  	ret AND_KILL_FRAME(1)
 25741                                  .L_lambda_simple_end_0097:	; new closure is in rax
 25742 00013272 803804                  	cmp byte [rax], T_closure
 25743 00013275 0F85A0490000            	jne L_error_non_closure
 25744 0001327B FF7001                  	push SOB_CLOSURE_ENV(rax)
 25745 0001327E FF5009                  	call SOB_CLOSURE_CODE(rax)
 25746 00013281 48890425[22170000]      	mov qword [free_var_141], rax
 25747 00013289 48B8-                   	mov rax, sob_void
 25747 0001328B [0000000000000000] 
 25748                                  
 25749 00013293 4889C7                  	mov rdi, rax
 25750 00013296 E87E4C0000              	call print_sexpr_if_not_void
 25751 0001329B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25752 000132A0 E81F4A0000              	call malloc
 25753 000132A5 50                      	push rax
 25754 000132A6 BF00000000              	mov rdi, 8 * 0	; new rib
 25755 000132AB E8144A0000              	call malloc
 25756 000132B0 50                      	push rax
 25757 000132B1 BF08000000              	mov rdi, 8 * 1	; extended env
 25758 000132B6 E8094A0000              	call malloc
 25759 000132BB 488B7D10                	mov rdi, ENV
 25760 000132BF BE00000000              	mov rsi, 0
 25761 000132C4 BA01000000              	mov rdx, 1
 25762                                  .L_lambda_simple_env_loop_009a:	; ext_env[i + 1] <-- env[i]
 25763 000132C9 4883FE00                	cmp rsi, 0
 25764 000132CD 7410                    	je .L_lambda_simple_env_end_009a
 25765 000132CF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25766 000132D3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25767 000132D7 48FFC6                  	inc rsi
 25768 000132DA 48FFC2                  	inc rdx
 25769 000132DD EBEA                    	jmp .L_lambda_simple_env_loop_009a
 25770                                  .L_lambda_simple_env_end_009a:
 25771 000132DF 5B                      	pop rbx
 25772 000132E0 BE00000000              	mov rsi, 0
 25773                                  .L_lambda_simple_params_loop_009a:	; copy params
 25774 000132E5 4883FE00                	cmp rsi, 0
 25775 000132E9 740E                    	je .L_lambda_simple_params_end_009a
 25776 000132EB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25777 000132F0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25778 000132F4 48FFC6                  	inc rsi
 25779 000132F7 EBEC                    	jmp .L_lambda_simple_params_loop_009a
 25780                                  .L_lambda_simple_params_end_009a:
 25781 000132F9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25782 000132FC 4889C3                  	mov rbx, rax
 25783 000132FF 58                      	pop rax
 25784 00013300 C60004                  	mov byte [rax], T_closure
 25785 00013303 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25786 00013307 48C74009[14330100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_009a
 25787 0001330F E9AA000000              	jmp .L_lambda_simple_end_009a
 25788                                  .L_lambda_simple_code_009a:	; lambda-simple body
 25789 00013314 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25790 0001331A 740B                    	je .L_lambda_simple_arity_check_ok_009a
 25791 0001331C FF742410                	push qword [rsp + 8 * 2]
 25792 00013320 6A01                    	push 1
 25793 00013322 E956490000              	jmp L_error_incorrect_arity_simple
 25794                                  .L_lambda_simple_arity_check_ok_009a:
 25795 00013327 C8000000                	enter 0, 0
 25796                                  	; preparing a tail-call
 25797 0001332B 488B4520                	mov rax, PARAM(0)	; param n
 25798 0001332F 50                      	push rax
 25799                                  	; preparing a non-tail-call
 25800 00013330 6A00                    	push 0	; arg count
 25801 00013332 488B0425[00170000]      	mov rax, qword [free_var_139]	; free var trng
 25802 0001333A 803805                  	cmp byte [rax], T_undefined
 25803 0001333D 0F8454480000            	je L_error_fvar_undefined
 25804 00013343 803804                  	cmp byte [rax], T_closure
 25805 00013346 0F85CF480000            	jne L_error_non_closure
 25806 0001334C FF7001                  	push SOB_CLOSURE_ENV(rax)
 25807 0001334F FF5009                  	call SOB_CLOSURE_CODE(rax)
 25808 00013352 50                      	push rax
 25809 00013353 6A02                    	push 2	; arg count
 25810 00013355 488B0425[8A150000]      	mov rax, qword [free_var_117]	; free var remainder
 25811 0001335D 803805                  	cmp byte [rax], T_undefined
 25812 00013360 0F8431480000            	je L_error_fvar_undefined
 25813 00013366 803804                  	cmp byte [rax], T_closure
 25814 00013369 0F85AC480000            	jne L_error_non_closure
 25815 0001336F FF7001                  	push SOB_CLOSURE_ENV(rax)
 25816 00013372 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 25817 00013375 FF7500                  	push qword[rbp]
 25818 00013378 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 25819 0001337B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 25820 0001337F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 25821 00013383 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 25822 00013387 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 25823 0001338A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 25824 0001338D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 25825 00013392 4983C103                	add r9, 3 	 ;for getting to the params
 25826 00013396 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 25827 0001339A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 25828                                  .L_tc_recycle_frame_loop_00e5:
 25829 0001339D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 25830 000133A0 7410                    	je .L_tc_recycle_frame_done_00e5
 25831 000133A2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 25832 000133A5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 25833 000133A8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 25834 000133AC 4983E808                	sub r8, 8	 ;move the top of the stack one down
 25835 000133B0 EBEB                    	jmp .L_tc_recycle_frame_loop_00e5
 25836                                  .L_tc_recycle_frame_done_00e5:
 25837 000133B2 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 25838 000133B3 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 25839 000133B7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25840 000133BA C9                      	leave
 25841 000133BB C21800                  	ret AND_KILL_FRAME(1)
 25842                                  .L_lambda_simple_end_009a:	; new closure is in rax
 25843 000133BE 48890425[46150000]      	mov qword [free_var_113], rax
 25844 000133C6 48B8-                   	mov rax, sob_void
 25844 000133C8 [0000000000000000] 
 25845                                  
 25846 000133D0 4889C7                  	mov rdi, rax
 25847 000133D3 E8414B0000              	call print_sexpr_if_not_void
 25848 000133D8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25849 000133DD E8E2480000              	call malloc
 25850 000133E2 50                      	push rax
 25851 000133E3 BF00000000              	mov rdi, 8 * 0	; new rib
 25852 000133E8 E8D7480000              	call malloc
 25853 000133ED 50                      	push rax
 25854 000133EE BF08000000              	mov rdi, 8 * 1	; extended env
 25855 000133F3 E8CC480000              	call malloc
 25856 000133F8 488B7D10                	mov rdi, ENV
 25857 000133FC BE00000000              	mov rsi, 0
 25858 00013401 BA01000000              	mov rdx, 1
 25859                                  .L_lambda_simple_env_loop_009b:	; ext_env[i + 1] <-- env[i]
 25860 00013406 4883FE00                	cmp rsi, 0
 25861 0001340A 7410                    	je .L_lambda_simple_env_end_009b
 25862 0001340C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25863 00013410 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25864 00013414 48FFC6                  	inc rsi
 25865 00013417 48FFC2                  	inc rdx
 25866 0001341A EBEA                    	jmp .L_lambda_simple_env_loop_009b
 25867                                  .L_lambda_simple_env_end_009b:
 25868 0001341C 5B                      	pop rbx
 25869 0001341D BE00000000              	mov rsi, 0
 25870                                  .L_lambda_simple_params_loop_009b:	; copy params
 25871 00013422 4883FE00                	cmp rsi, 0
 25872 00013426 740E                    	je .L_lambda_simple_params_end_009b
 25873 00013428 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25874 0001342D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25875 00013431 48FFC6                  	inc rsi
 25876 00013434 EBEC                    	jmp .L_lambda_simple_params_loop_009b
 25877                                  .L_lambda_simple_params_end_009b:
 25878 00013436 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25879 00013439 4889C3                  	mov rbx, rax
 25880 0001343C 58                      	pop rax
 25881 0001343D C60004                  	mov byte [rax], T_closure
 25882 00013440 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25883 00013444 48C74009[51340100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_009b
 25884 0001344C E992000000              	jmp .L_lambda_simple_end_009b
 25885                                  .L_lambda_simple_code_009b:	; lambda-simple body
 25886 00013451 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25887 00013457 740B                    	je .L_lambda_simple_arity_check_ok_009b
 25888 00013459 FF742410                	push qword [rsp + 8 * 2]
 25889 0001345D 6A01                    	push 1
 25890 0001345F E919480000              	jmp L_error_incorrect_arity_simple
 25891                                  .L_lambda_simple_arity_check_ok_009b:
 25892 00013464 C8000000                	enter 0, 0
 25893                                  	; preparing a tail-call
 25894 00013468 488B4520                	mov rax, PARAM(0)	; param x
 25895 0001346C 50                      	push rax
 25896 0001346D 48B8-                   	mov rax, L_constants + 2135
 25896 0001346F [5708000000000000] 
 25897 00013477 50                      	push rax
 25898 00013478 6A02                    	push 2	; arg count
 25899 0001347A 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 25900 00013482 803805                  	cmp byte [rax], T_undefined
 25901 00013485 0F840C470000            	je L_error_fvar_undefined
 25902 0001348B 803804                  	cmp byte [rax], T_closure
 25903 0001348E 0F8587470000            	jne L_error_non_closure
 25904 00013494 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25905 00013497 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 25906 0001349A FF7500                  	push qword[rbp]
 25907 0001349D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 25908 000134A0 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 25909 000134A4 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 25910 000134A8 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 25911 000134AC 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 25912 000134AF 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 25913 000134B2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 25914 000134B7 4983C103                	add r9, 3 	 ;for getting to the params
 25915 000134BB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 25916 000134BF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 25917                                  .L_tc_recycle_frame_loop_00e6:
 25918 000134C2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 25919 000134C5 7410                    	je .L_tc_recycle_frame_done_00e6
 25920 000134C7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 25921 000134CA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 25922 000134CD 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 25923 000134D1 4983E808                	sub r8, 8	 ;move the top of the stack one down
 25924 000134D5 EBEB                    	jmp .L_tc_recycle_frame_loop_00e6
 25925                                  .L_tc_recycle_frame_done_00e6:
 25926 000134D7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 25927 000134D8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 25928 000134DC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25929 000134DF C9                      	leave
 25930 000134E0 C21800                  	ret AND_KILL_FRAME(1)
 25931                                  .L_lambda_simple_end_009b:	; new closure is in rax
 25932 000134E3 48890425[35150000]      	mov qword [free_var_112], rax
 25933 000134EB 48B8-                   	mov rax, sob_void
 25933 000134ED [0000000000000000] 
 25934                                  
 25935 000134F5 4889C7                  	mov rdi, rax
 25936 000134F8 E81C4A0000              	call print_sexpr_if_not_void
 25937 000134FD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25938 00013502 E8BD470000              	call malloc
 25939 00013507 50                      	push rax
 25940 00013508 BF00000000              	mov rdi, 8 * 0	; new rib
 25941 0001350D E8B2470000              	call malloc
 25942 00013512 50                      	push rax
 25943 00013513 BF08000000              	mov rdi, 8 * 1	; extended env
 25944 00013518 E8A7470000              	call malloc
 25945 0001351D 488B7D10                	mov rdi, ENV
 25946 00013521 BE00000000              	mov rsi, 0
 25947 00013526 BA01000000              	mov rdx, 1
 25948                                  .L_lambda_simple_env_loop_009c:	; ext_env[i + 1] <-- env[i]
 25949 0001352B 4883FE00                	cmp rsi, 0
 25950 0001352F 7410                    	je .L_lambda_simple_env_end_009c
 25951 00013531 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25952 00013535 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25953 00013539 48FFC6                  	inc rsi
 25954 0001353C 48FFC2                  	inc rdx
 25955 0001353F EBEA                    	jmp .L_lambda_simple_env_loop_009c
 25956                                  .L_lambda_simple_env_end_009c:
 25957 00013541 5B                      	pop rbx
 25958 00013542 BE00000000              	mov rsi, 0
 25959                                  .L_lambda_simple_params_loop_009c:	; copy params
 25960 00013547 4883FE00                	cmp rsi, 0
 25961 0001354B 740E                    	je .L_lambda_simple_params_end_009c
 25962 0001354D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25963 00013552 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25964 00013556 48FFC6                  	inc rsi
 25965 00013559 EBEC                    	jmp .L_lambda_simple_params_loop_009c
 25966                                  .L_lambda_simple_params_end_009c:
 25967 0001355B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25968 0001355E 4889C3                  	mov rbx, rax
 25969 00013561 58                      	pop rax
 25970 00013562 C60004                  	mov byte [rax], T_closure
 25971 00013565 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25972 00013569 48C74009[76350100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_009c
 25973 00013571 E992000000              	jmp .L_lambda_simple_end_009c
 25974                                  .L_lambda_simple_code_009c:	; lambda-simple body
 25975 00013576 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25976 0001357C 740B                    	je .L_lambda_simple_arity_check_ok_009c
 25977 0001357E FF742410                	push qword [rsp + 8 * 2]
 25978 00013582 6A01                    	push 1
 25979 00013584 E9F4460000              	jmp L_error_incorrect_arity_simple
 25980                                  .L_lambda_simple_arity_check_ok_009c:
 25981 00013589 C8000000                	enter 0, 0
 25982                                  	; preparing a tail-call
 25983 0001358D 48B8-                   	mov rax, L_constants + 2135
 25983 0001358F [5708000000000000] 
 25984 00013597 50                      	push rax
 25985 00013598 488B4520                	mov rax, PARAM(0)	; param x
 25986 0001359C 50                      	push rax
 25987 0001359D 6A02                    	push 2	; arg count
 25988 0001359F 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 25989 000135A7 803805                  	cmp byte [rax], T_undefined
 25990 000135AA 0F84E7450000            	je L_error_fvar_undefined
 25991 000135B0 803804                  	cmp byte [rax], T_closure
 25992 000135B3 0F8562460000            	jne L_error_non_closure
 25993 000135B9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25994 000135BC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 25995 000135BF FF7500                  	push qword[rbp]
 25996 000135C2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 25997 000135C5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 25998 000135C9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 25999 000135CD 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26000 000135D1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26001 000135D4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26002 000135D7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26003 000135DC 4983C103                	add r9, 3 	 ;for getting to the params
 26004 000135E0 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26005 000135E4 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26006                                  .L_tc_recycle_frame_loop_00e7:
 26007 000135E7 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26008 000135EA 7410                    	je .L_tc_recycle_frame_done_00e7
 26009 000135EC 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26010 000135EF 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26011 000135F2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26012 000135F6 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26013 000135FA EBEB                    	jmp .L_tc_recycle_frame_loop_00e7
 26014                                  .L_tc_recycle_frame_done_00e7:
 26015 000135FC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26016 000135FD 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26017 00013601 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26018 00013604 C9                      	leave
 26019 00013605 C21800                  	ret AND_KILL_FRAME(1)
 26020                                  .L_lambda_simple_end_009c:	; new closure is in rax
 26021 00013608 48890425[AD140000]      	mov qword [free_var_104], rax
 26022 00013610 48B8-                   	mov rax, sob_void
 26022 00013612 [0000000000000000] 
 26023                                  
 26024 0001361A 4889C7                  	mov rdi, rax
 26025 0001361D E8F7480000              	call print_sexpr_if_not_void
 26026 00013622 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26027 00013627 E898460000              	call malloc
 26028 0001362C 50                      	push rax
 26029 0001362D BF00000000              	mov rdi, 8 * 0	; new rib
 26030 00013632 E88D460000              	call malloc
 26031 00013637 50                      	push rax
 26032 00013638 BF08000000              	mov rdi, 8 * 1	; extended env
 26033 0001363D E882460000              	call malloc
 26034 00013642 488B7D10                	mov rdi, ENV
 26035 00013646 BE00000000              	mov rsi, 0
 26036 0001364B BA01000000              	mov rdx, 1
 26037                                  .L_lambda_simple_env_loop_009d:	; ext_env[i + 1] <-- env[i]
 26038 00013650 4883FE00                	cmp rsi, 0
 26039 00013654 7410                    	je .L_lambda_simple_env_end_009d
 26040 00013656 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26041 0001365A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26042 0001365E 48FFC6                  	inc rsi
 26043 00013661 48FFC2                  	inc rdx
 26044 00013664 EBEA                    	jmp .L_lambda_simple_env_loop_009d
 26045                                  .L_lambda_simple_env_end_009d:
 26046 00013666 5B                      	pop rbx
 26047 00013667 BE00000000              	mov rsi, 0
 26048                                  .L_lambda_simple_params_loop_009d:	; copy params
 26049 0001366C 4883FE00                	cmp rsi, 0
 26050 00013670 740E                    	je .L_lambda_simple_params_end_009d
 26051 00013672 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26052 00013677 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26053 0001367B 48FFC6                  	inc rsi
 26054 0001367E EBEC                    	jmp .L_lambda_simple_params_loop_009d
 26055                                  .L_lambda_simple_params_end_009d:
 26056 00013680 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26057 00013683 4889C3                  	mov rbx, rax
 26058 00013686 58                      	pop rax
 26059 00013687 C60004                  	mov byte [rax], T_closure
 26060 0001368A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26061 0001368E 48C74009[9B360100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_009d
 26062 00013696 E9B5000000              	jmp .L_lambda_simple_end_009d
 26063                                  .L_lambda_simple_code_009d:	; lambda-simple body
 26064 0001369B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26065 000136A1 740B                    	je .L_lambda_simple_arity_check_ok_009d
 26066 000136A3 FF742410                	push qword [rsp + 8 * 2]
 26067 000136A7 6A01                    	push 1
 26068 000136A9 E9CF450000              	jmp L_error_incorrect_arity_simple
 26069                                  .L_lambda_simple_arity_check_ok_009d:
 26070 000136AE C8000000                	enter 0, 0
 26071                                  	; preparing a tail-call
 26072                                  	; preparing a non-tail-call
 26073 000136B2 48B8-                   	mov rax, L_constants + 3190
 26073 000136B4 [760C000000000000] 
 26074 000136BC 50                      	push rax
 26075 000136BD 488B4520                	mov rax, PARAM(0)	; param n
 26076 000136C1 50                      	push rax
 26077 000136C2 6A02                    	push 2	; arg count
 26078 000136C4 488B0425[8A150000]      	mov rax, qword [free_var_117]	; free var remainder
 26079 000136CC 803805                  	cmp byte [rax], T_undefined
 26080 000136CF 0F84C2440000            	je L_error_fvar_undefined
 26081 000136D5 803804                  	cmp byte [rax], T_closure
 26082 000136D8 0F853D450000            	jne L_error_non_closure
 26083 000136DE FF7001                  	push SOB_CLOSURE_ENV(rax)
 26084 000136E1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26085 000136E4 50                      	push rax
 26086 000136E5 6A01                    	push 1	; arg count
 26087 000136E7 488B0425[CC170000]      	mov rax, qword [free_var_151]	; free var zero?
 26088 000136EF 803805                  	cmp byte [rax], T_undefined
 26089 000136F2 0F849F440000            	je L_error_fvar_undefined
 26090 000136F8 803804                  	cmp byte [rax], T_closure
 26091 000136FB 0F851A450000            	jne L_error_non_closure
 26092 00013701 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26093 00013704 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26094 00013707 FF7500                  	push qword[rbp]
 26095 0001370A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26096 0001370D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26097 00013711 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26098 00013715 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26099 00013719 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26100 0001371C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26101 0001371F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26102 00013724 4983C103                	add r9, 3 	 ;for getting to the params
 26103 00013728 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26104 0001372C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26105                                  .L_tc_recycle_frame_loop_00e8:
 26106 0001372F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26107 00013732 7410                    	je .L_tc_recycle_frame_done_00e8
 26108 00013734 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26109 00013737 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26110 0001373A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26111 0001373E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26112 00013742 EBEB                    	jmp .L_tc_recycle_frame_loop_00e8
 26113                                  .L_tc_recycle_frame_done_00e8:
 26114 00013744 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26115 00013745 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26116 00013749 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26117 0001374C C9                      	leave
 26118 0001374D C21800                  	ret AND_KILL_FRAME(1)
 26119                                  .L_lambda_simple_end_009d:	; new closure is in rax
 26120 00013750 48890425[48130000]      	mov qword [free_var_83], rax
 26121 00013758 48B8-                   	mov rax, sob_void
 26121 0001375A [0000000000000000] 
 26122                                  
 26123 00013762 4889C7                  	mov rdi, rax
 26124 00013765 E8AF470000              	call print_sexpr_if_not_void
 26125 0001376A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26126 0001376F E850450000              	call malloc
 26127 00013774 50                      	push rax
 26128 00013775 BF00000000              	mov rdi, 8 * 0	; new rib
 26129 0001377A E845450000              	call malloc
 26130 0001377F 50                      	push rax
 26131 00013780 BF08000000              	mov rdi, 8 * 1	; extended env
 26132 00013785 E83A450000              	call malloc
 26133 0001378A 488B7D10                	mov rdi, ENV
 26134 0001378E BE00000000              	mov rsi, 0
 26135 00013793 BA01000000              	mov rdx, 1
 26136                                  .L_lambda_simple_env_loop_009e:	; ext_env[i + 1] <-- env[i]
 26137 00013798 4883FE00                	cmp rsi, 0
 26138 0001379C 7410                    	je .L_lambda_simple_env_end_009e
 26139 0001379E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26140 000137A2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26141 000137A6 48FFC6                  	inc rsi
 26142 000137A9 48FFC2                  	inc rdx
 26143 000137AC EBEA                    	jmp .L_lambda_simple_env_loop_009e
 26144                                  .L_lambda_simple_env_end_009e:
 26145 000137AE 5B                      	pop rbx
 26146 000137AF BE00000000              	mov rsi, 0
 26147                                  .L_lambda_simple_params_loop_009e:	; copy params
 26148 000137B4 4883FE00                	cmp rsi, 0
 26149 000137B8 740E                    	je .L_lambda_simple_params_end_009e
 26150 000137BA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26151 000137BF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26152 000137C3 48FFC6                  	inc rsi
 26153 000137C6 EBEC                    	jmp .L_lambda_simple_params_loop_009e
 26154                                  .L_lambda_simple_params_end_009e:
 26155 000137C8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26156 000137CB 4889C3                  	mov rbx, rax
 26157 000137CE 58                      	pop rax
 26158 000137CF C60004                  	mov byte [rax], T_closure
 26159 000137D2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26160 000137D6 48C74009[E3370100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_009e
 26161 000137DE E9AA000000              	jmp .L_lambda_simple_end_009e
 26162                                  .L_lambda_simple_code_009e:	; lambda-simple body
 26163 000137E3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26164 000137E9 740B                    	je .L_lambda_simple_arity_check_ok_009e
 26165 000137EB FF742410                	push qword [rsp + 8 * 2]
 26166 000137EF 6A01                    	push 1
 26167 000137F1 E987440000              	jmp L_error_incorrect_arity_simple
 26168                                  .L_lambda_simple_arity_check_ok_009e:
 26169 000137F6 C8000000                	enter 0, 0
 26170                                  	; preparing a tail-call
 26171                                  	; preparing a non-tail-call
 26172 000137FA 488B4520                	mov rax, PARAM(0)	; param n
 26173 000137FE 50                      	push rax
 26174 000137FF 6A01                    	push 1	; arg count
 26175 00013801 488B0425[48130000]      	mov rax, qword [free_var_83]	; free var even?
 26176 00013809 803805                  	cmp byte [rax], T_undefined
 26177 0001380C 0F8485430000            	je L_error_fvar_undefined
 26178 00013812 803804                  	cmp byte [rax], T_closure
 26179 00013815 0F8500440000            	jne L_error_non_closure
 26180 0001381B FF7001                  	push SOB_CLOSURE_ENV(rax)
 26181 0001381E FF5009                  	call SOB_CLOSURE_CODE(rax)
 26182 00013821 50                      	push rax
 26183 00013822 6A01                    	push 1	; arg count
 26184 00013824 488B0425[CF140000]      	mov rax, qword [free_var_106]	; free var not
 26185 0001382C 803805                  	cmp byte [rax], T_undefined
 26186 0001382F 0F8462430000            	je L_error_fvar_undefined
 26187 00013835 803804                  	cmp byte [rax], T_closure
 26188 00013838 0F85DD430000            	jne L_error_non_closure
 26189 0001383E FF7001                  	push SOB_CLOSURE_ENV(rax)
 26190 00013841 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26191 00013844 FF7500                  	push qword[rbp]
 26192 00013847 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26193 0001384A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26194 0001384E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26195 00013852 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26196 00013856 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26197 00013859 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26198 0001385C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26199 00013861 4983C103                	add r9, 3 	 ;for getting to the params
 26200 00013865 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26201 00013869 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26202                                  .L_tc_recycle_frame_loop_00e9:
 26203 0001386C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26204 0001386F 7410                    	je .L_tc_recycle_frame_done_00e9
 26205 00013871 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26206 00013874 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26207 00013877 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26208 0001387B 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26209 0001387F EBEB                    	jmp .L_tc_recycle_frame_loop_00e9
 26210                                  .L_tc_recycle_frame_done_00e9:
 26211 00013881 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26212 00013882 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26213 00013886 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26214 00013889 C9                      	leave
 26215 0001388A C21800                  	ret AND_KILL_FRAME(1)
 26216                                  .L_lambda_simple_end_009e:	; new closure is in rax
 26217 0001388D 48890425[02150000]      	mov qword [free_var_109], rax
 26218 00013895 48B8-                   	mov rax, sob_void
 26218 00013897 [0000000000000000] 
 26219                                  
 26220 0001389F 4889C7                  	mov rdi, rax
 26221 000138A2 E872460000              	call print_sexpr_if_not_void
 26222 000138A7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26223 000138AC E813440000              	call malloc
 26224 000138B1 50                      	push rax
 26225 000138B2 BF00000000              	mov rdi, 8 * 0	; new rib
 26226 000138B7 E808440000              	call malloc
 26227 000138BC 50                      	push rax
 26228 000138BD BF08000000              	mov rdi, 8 * 1	; extended env
 26229 000138C2 E8FD430000              	call malloc
 26230 000138C7 488B7D10                	mov rdi, ENV
 26231 000138CB BE00000000              	mov rsi, 0
 26232 000138D0 BA01000000              	mov rdx, 1
 26233                                  .L_lambda_simple_env_loop_009f:	; ext_env[i + 1] <-- env[i]
 26234 000138D5 4883FE00                	cmp rsi, 0
 26235 000138D9 7410                    	je .L_lambda_simple_env_end_009f
 26236 000138DB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26237 000138DF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26238 000138E3 48FFC6                  	inc rsi
 26239 000138E6 48FFC2                  	inc rdx
 26240 000138E9 EBEA                    	jmp .L_lambda_simple_env_loop_009f
 26241                                  .L_lambda_simple_env_end_009f:
 26242 000138EB 5B                      	pop rbx
 26243 000138EC BE00000000              	mov rsi, 0
 26244                                  .L_lambda_simple_params_loop_009f:	; copy params
 26245 000138F1 4883FE00                	cmp rsi, 0
 26246 000138F5 740E                    	je .L_lambda_simple_params_end_009f
 26247 000138F7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26248 000138FC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26249 00013900 48FFC6                  	inc rsi
 26250 00013903 EBEC                    	jmp .L_lambda_simple_params_loop_009f
 26251                                  .L_lambda_simple_params_end_009f:
 26252 00013905 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26253 00013908 4889C3                  	mov rbx, rax
 26254 0001390B 58                      	pop rax
 26255 0001390C C60004                  	mov byte [rax], T_closure
 26256 0001390F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26257 00013913 48C74009[20390100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_009f
 26258 0001391B E9BC000000              	jmp .L_lambda_simple_end_009f
 26259                                  .L_lambda_simple_code_009f:	; lambda-simple body
 26260 00013920 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26261 00013926 740B                    	je .L_lambda_simple_arity_check_ok_009f
 26262 00013928 FF742410                	push qword [rsp + 8 * 2]
 26263 0001392C 6A01                    	push 1
 26264 0001392E E94A430000              	jmp L_error_incorrect_arity_simple
 26265                                  .L_lambda_simple_arity_check_ok_009f:
 26266 00013933 C8000000                	enter 0, 0
 26267                                  	; preparing a non-tail-call
 26268 00013937 488B4520                	mov rax, PARAM(0)	; param x
 26269 0001393B 50                      	push rax
 26270 0001393C 6A01                    	push 1	; arg count
 26271 0001393E 488B0425[AD140000]      	mov rax, qword [free_var_104]	; free var negative?
 26272 00013946 803805                  	cmp byte [rax], T_undefined
 26273 00013949 0F8448420000            	je L_error_fvar_undefined
 26274 0001394F 803804                  	cmp byte [rax], T_closure
 26275 00013952 0F85C3420000            	jne L_error_non_closure
 26276 00013958 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26277 0001395B FF5009                  	call SOB_CLOSURE_CODE(rax)
 26278 0001395E 483D[02000000]          	cmp rax, sob_boolean_false
 26279 00013964 746E                    	je .L_if_else_0079
 26280                                  	; preparing a tail-call
 26281 00013966 488B4520                	mov rax, PARAM(0)	; param x
 26282 0001396A 50                      	push rax
 26283 0001396B 6A01                    	push 1	; arg count
 26284 0001396D 488B0425[E70D0000]      	mov rax, qword [free_var_2]	; free var -
 26285 00013975 803805                  	cmp byte [rax], T_undefined
 26286 00013978 0F8419420000            	je L_error_fvar_undefined
 26287 0001397E 803804                  	cmp byte [rax], T_closure
 26288 00013981 0F8594420000            	jne L_error_non_closure
 26289 00013987 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26290 0001398A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26291 0001398D FF7500                  	push qword[rbp]
 26292 00013990 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26293 00013993 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26294 00013997 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26295 0001399B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26296 0001399F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26297 000139A2 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26298 000139A5 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26299 000139AA 4983C103                	add r9, 3 	 ;for getting to the params
 26300 000139AE 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26301 000139B2 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26302                                  .L_tc_recycle_frame_loop_00ea:
 26303 000139B5 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26304 000139B8 7410                    	je .L_tc_recycle_frame_done_00ea
 26305 000139BA 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26306 000139BD 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26307 000139C0 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26308 000139C4 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26309 000139C8 EBEB                    	jmp .L_tc_recycle_frame_loop_00ea
 26310                                  .L_tc_recycle_frame_done_00ea:
 26311 000139CA 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26312 000139CB 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26313 000139CF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26314 000139D2 EB04                    	jmp .L_if_end_0079
 26315                                  .L_if_else_0079:
 26316 000139D4 488B4520                	mov rax, PARAM(0)	; param x
 26317                                  .L_if_end_0079:
 26318 000139D8 C9                      	leave
 26319 000139D9 C21800                  	ret AND_KILL_FRAME(1)
 26320                                  .L_lambda_simple_end_009f:	; new closure is in rax
 26321 000139DC 48890425[C30F0000]      	mov qword [free_var_30], rax
 26322 000139E4 48B8-                   	mov rax, sob_void
 26322 000139E6 [0000000000000000] 
 26323                                  
 26324 000139EE 4889C7                  	mov rdi, rax
 26325 000139F1 E823450000              	call print_sexpr_if_not_void
 26326 000139F6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26327 000139FB E8C4420000              	call malloc
 26328 00013A00 50                      	push rax
 26329 00013A01 BF00000000              	mov rdi, 8 * 0	; new rib
 26330 00013A06 E8B9420000              	call malloc
 26331 00013A0B 50                      	push rax
 26332 00013A0C BF08000000              	mov rdi, 8 * 1	; extended env
 26333 00013A11 E8AE420000              	call malloc
 26334 00013A16 488B7D10                	mov rdi, ENV
 26335 00013A1A BE00000000              	mov rsi, 0
 26336 00013A1F BA01000000              	mov rdx, 1
 26337                                  .L_lambda_simple_env_loop_00a0:	; ext_env[i + 1] <-- env[i]
 26338 00013A24 4883FE00                	cmp rsi, 0
 26339 00013A28 7410                    	je .L_lambda_simple_env_end_00a0
 26340 00013A2A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26341 00013A2E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26342 00013A32 48FFC6                  	inc rsi
 26343 00013A35 48FFC2                  	inc rdx
 26344 00013A38 EBEA                    	jmp .L_lambda_simple_env_loop_00a0
 26345                                  .L_lambda_simple_env_end_00a0:
 26346 00013A3A 5B                      	pop rbx
 26347 00013A3B BE00000000              	mov rsi, 0
 26348                                  .L_lambda_simple_params_loop_00a0:	; copy params
 26349 00013A40 4883FE00                	cmp rsi, 0
 26350 00013A44 740E                    	je .L_lambda_simple_params_end_00a0
 26351 00013A46 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26352 00013A4B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26353 00013A4F 48FFC6                  	inc rsi
 26354 00013A52 EBEC                    	jmp .L_lambda_simple_params_loop_00a0
 26355                                  .L_lambda_simple_params_end_00a0:
 26356 00013A54 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26357 00013A57 4889C3                  	mov rbx, rax
 26358 00013A5A 58                      	pop rax
 26359 00013A5B C60004                  	mov byte [rax], T_closure
 26360 00013A5E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26361 00013A62 48C74009[6F3A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a0
 26362 00013A6A E91B070000              	jmp .L_lambda_simple_end_00a0
 26363                                  .L_lambda_simple_code_00a0:	; lambda-simple body
 26364 00013A6F 48837C241002            	cmp qword [rsp + 8 * 2], 2
 26365 00013A75 740B                    	je .L_lambda_simple_arity_check_ok_00a0
 26366 00013A77 FF742410                	push qword [rsp + 8 * 2]
 26367 00013A7B 6A02                    	push 2
 26368 00013A7D E9FB410000              	jmp L_error_incorrect_arity_simple
 26369                                  .L_lambda_simple_arity_check_ok_00a0:
 26370 00013A82 C8000000                	enter 0, 0
 26371                                  	; preparing a non-tail-call
 26372 00013A86 488B4520                	mov rax, PARAM(0)	; param e1
 26373 00013A8A 50                      	push rax
 26374 00013A8B 6A01                    	push 1	; arg count
 26375 00013A8D 488B0425[24150000]      	mov rax, qword [free_var_111]	; free var pair?
 26376 00013A95 803805                  	cmp byte [rax], T_undefined
 26377 00013A98 0F84F9400000            	je L_error_fvar_undefined
 26378 00013A9E 803804                  	cmp byte [rax], T_closure
 26379 00013AA1 0F8574410000            	jne L_error_non_closure
 26380 00013AA7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26381 00013AAA FF5009                  	call SOB_CLOSURE_CODE(rax)
 26382 00013AAD 483D[02000000]          	cmp rax, sob_boolean_false
 26383 00013AB3 7429                    	je .L_if_else_007a
 26384                                  	; preparing a non-tail-call
 26385 00013AB5 488B4528                	mov rax, PARAM(1)	; param e2
 26386 00013AB9 50                      	push rax
 26387 00013ABA 6A01                    	push 1	; arg count
 26388 00013ABC 488B0425[24150000]      	mov rax, qword [free_var_111]	; free var pair?
 26389 00013AC4 803805                  	cmp byte [rax], T_undefined
 26390 00013AC7 0F84CA400000            	je L_error_fvar_undefined
 26391 00013ACD 803804                  	cmp byte [rax], T_closure
 26392 00013AD0 0F8545410000            	jne L_error_non_closure
 26393 00013AD6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26394 00013AD9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26395 00013ADC EB0A                    	jmp .L_if_end_007a
 26396                                  .L_if_else_007a:
 26397 00013ADE 48B8-                   	mov rax, L_constants + 2
 26397 00013AE0 [0200000000000000] 
 26398                                  .L_if_end_007a:
 26399 00013AE8 483D[02000000]          	cmp rax, sob_boolean_false
 26400 00013AEE 0F8446010000            	je .L_if_else_0086
 26401                                  	; preparing a non-tail-call
 26402                                  	; preparing a non-tail-call
 26403 00013AF4 488B4528                	mov rax, PARAM(1)	; param e2
 26404 00013AF8 50                      	push rax
 26405 00013AF9 6A01                    	push 1	; arg count
 26406 00013AFB 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 26407 00013B03 803805                  	cmp byte [rax], T_undefined
 26408 00013B06 0F848B400000            	je L_error_fvar_undefined
 26409 00013B0C 803804                  	cmp byte [rax], T_closure
 26410 00013B0F 0F8506410000            	jne L_error_non_closure
 26411 00013B15 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26412 00013B18 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26413 00013B1B 50                      	push rax
 26414                                  	; preparing a non-tail-call
 26415 00013B1C 488B4520                	mov rax, PARAM(0)	; param e1
 26416 00013B20 50                      	push rax
 26417 00013B21 6A01                    	push 1	; arg count
 26418 00013B23 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 26419 00013B2B 803805                  	cmp byte [rax], T_undefined
 26420 00013B2E 0F8463400000            	je L_error_fvar_undefined
 26421 00013B34 803804                  	cmp byte [rax], T_closure
 26422 00013B37 0F85DE400000            	jne L_error_non_closure
 26423 00013B3D FF7001                  	push SOB_CLOSURE_ENV(rax)
 26424 00013B40 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26425 00013B43 50                      	push rax
 26426 00013B44 6A02                    	push 2	; arg count
 26427 00013B46 488B0425[26130000]      	mov rax, qword [free_var_81]	; free var equal?
 26428 00013B4E 803805                  	cmp byte [rax], T_undefined
 26429 00013B51 0F8440400000            	je L_error_fvar_undefined
 26430 00013B57 803804                  	cmp byte [rax], T_closure
 26431 00013B5A 0F85BB400000            	jne L_error_non_closure
 26432 00013B60 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26433 00013B63 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26434 00013B66 483D[02000000]          	cmp rax, sob_boolean_false
 26435 00013B6C 0F84B9000000            	je .L_if_else_007b
 26436                                  	; preparing a tail-call
 26437                                  	; preparing a non-tail-call
 26438 00013B72 488B4528                	mov rax, PARAM(1)	; param e2
 26439 00013B76 50                      	push rax
 26440 00013B77 6A01                    	push 1	; arg count
 26441 00013B79 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
 26442 00013B81 803805                  	cmp byte [rax], T_undefined
 26443 00013B84 0F840D400000            	je L_error_fvar_undefined
 26444 00013B8A 803804                  	cmp byte [rax], T_closure
 26445 00013B8D 0F8588400000            	jne L_error_non_closure
 26446 00013B93 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26447 00013B96 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26448 00013B99 50                      	push rax
 26449                                  	; preparing a non-tail-call
 26450 00013B9A 488B4520                	mov rax, PARAM(0)	; param e1
 26451 00013B9E 50                      	push rax
 26452 00013B9F 6A01                    	push 1	; arg count
 26453 00013BA1 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
 26454 00013BA9 803805                  	cmp byte [rax], T_undefined
 26455 00013BAC 0F84E53F0000            	je L_error_fvar_undefined
 26456 00013BB2 803804                  	cmp byte [rax], T_closure
 26457 00013BB5 0F8560400000            	jne L_error_non_closure
 26458 00013BBB FF7001                  	push SOB_CLOSURE_ENV(rax)
 26459 00013BBE FF5009                  	call SOB_CLOSURE_CODE(rax)
 26460 00013BC1 50                      	push rax
 26461 00013BC2 6A02                    	push 2	; arg count
 26462 00013BC4 488B0425[26130000]      	mov rax, qword [free_var_81]	; free var equal?
 26463 00013BCC 803805                  	cmp byte [rax], T_undefined
 26464 00013BCF 0F84C23F0000            	je L_error_fvar_undefined
 26465 00013BD5 803804                  	cmp byte [rax], T_closure
 26466 00013BD8 0F853D400000            	jne L_error_non_closure
 26467 00013BDE FF7001                  	push SOB_CLOSURE_ENV(rax)
 26468 00013BE1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26469 00013BE4 FF7500                  	push qword[rbp]
 26470 00013BE7 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26471 00013BEA 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26472 00013BEE 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26473 00013BF2 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26474 00013BF6 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26475 00013BF9 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26476 00013BFC 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26477 00013C01 4983C103                	add r9, 3 	 ;for getting to the params
 26478 00013C05 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26479 00013C09 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26480                                  .L_tc_recycle_frame_loop_00eb:
 26481 00013C0C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26482 00013C0F 7410                    	je .L_tc_recycle_frame_done_00eb
 26483 00013C11 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26484 00013C14 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26485 00013C17 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26486 00013C1B 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26487 00013C1F EBEB                    	jmp .L_tc_recycle_frame_loop_00eb
 26488                                  .L_tc_recycle_frame_done_00eb:
 26489 00013C21 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26490 00013C22 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26491 00013C26 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26492 00013C29 EB0A                    	jmp .L_if_end_007b
 26493                                  .L_if_else_007b:
 26494 00013C2B 48B8-                   	mov rax, L_constants + 2
 26494 00013C2D [0200000000000000] 
 26495                                  .L_if_end_007b:
 26496 00013C35 E94C050000              	jmp .L_if_end_0086
 26497                                  .L_if_else_0086:
 26498                                  	; preparing a non-tail-call
 26499 00013C3A 488B4520                	mov rax, PARAM(0)	; param e1
 26500 00013C3E 50                      	push rax
 26501 00013C3F 6A01                    	push 1	; arg count
 26502 00013C41 488B0425[99170000]      	mov rax, qword [free_var_148]	; free var vector?
 26503 00013C49 803805                  	cmp byte [rax], T_undefined
 26504 00013C4C 0F84453F0000            	je L_error_fvar_undefined
 26505 00013C52 803804                  	cmp byte [rax], T_closure
 26506 00013C55 0F85C03F0000            	jne L_error_non_closure
 26507 00013C5B FF7001                  	push SOB_CLOSURE_ENV(rax)
 26508 00013C5E FF5009                  	call SOB_CLOSURE_CODE(rax)
 26509 00013C61 483D[02000000]          	cmp rax, sob_boolean_false
 26510 00013C67 0F84AF000000            	je .L_if_else_007d
 26511                                  	; preparing a non-tail-call
 26512 00013C6D 488B4528                	mov rax, PARAM(1)	; param e2
 26513 00013C71 50                      	push rax
 26514 00013C72 6A01                    	push 1	; arg count
 26515 00013C74 488B0425[99170000]      	mov rax, qword [free_var_148]	; free var vector?
 26516 00013C7C 803805                  	cmp byte [rax], T_undefined
 26517 00013C7F 0F84123F0000            	je L_error_fvar_undefined
 26518 00013C85 803804                  	cmp byte [rax], T_closure
 26519 00013C88 0F858D3F0000            	jne L_error_non_closure
 26520 00013C8E FF7001                  	push SOB_CLOSURE_ENV(rax)
 26521 00013C91 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26522 00013C94 483D[02000000]          	cmp rax, sob_boolean_false
 26523 00013C9A 7474                    	je .L_if_else_007c
 26524                                  	; preparing a non-tail-call
 26525                                  	; preparing a non-tail-call
 26526 00013C9C 488B4528                	mov rax, PARAM(1)	; param e2
 26527 00013CA0 50                      	push rax
 26528 00013CA1 6A01                    	push 1	; arg count
 26529 00013CA3 488B0425[44170000]      	mov rax, qword [free_var_143]	; free var vector-length
 26530 00013CAB 803805                  	cmp byte [rax], T_undefined
 26531 00013CAE 0F84E33E0000            	je L_error_fvar_undefined
 26532 00013CB4 803804                  	cmp byte [rax], T_closure
 26533 00013CB7 0F855E3F0000            	jne L_error_non_closure
 26534 00013CBD FF7001                  	push SOB_CLOSURE_ENV(rax)
 26535 00013CC0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26536 00013CC3 50                      	push rax
 26537                                  	; preparing a non-tail-call
 26538 00013CC4 488B4520                	mov rax, PARAM(0)	; param e1
 26539 00013CC8 50                      	push rax
 26540 00013CC9 6A01                    	push 1	; arg count
 26541 00013CCB 488B0425[44170000]      	mov rax, qword [free_var_143]	; free var vector-length
 26542 00013CD3 803805                  	cmp byte [rax], T_undefined
 26543 00013CD6 0F84BB3E0000            	je L_error_fvar_undefined
 26544 00013CDC 803804                  	cmp byte [rax], T_closure
 26545 00013CDF 0F85363F0000            	jne L_error_non_closure
 26546 00013CE5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26547 00013CE8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26548 00013CEB 50                      	push rax
 26549 00013CEC 6A02                    	push 2	; arg count
 26550 00013CEE 488B0425[2B0E0000]      	mov rax, qword [free_var_6]	; free var =
 26551 00013CF6 803805                  	cmp byte [rax], T_undefined
 26552 00013CF9 0F84983E0000            	je L_error_fvar_undefined
 26553 00013CFF 803804                  	cmp byte [rax], T_closure
 26554 00013D02 0F85133F0000            	jne L_error_non_closure
 26555 00013D08 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26556 00013D0B FF5009                  	call SOB_CLOSURE_CODE(rax)
 26557 00013D0E EB0A                    	jmp .L_if_end_007c
 26558                                  .L_if_else_007c:
 26559 00013D10 48B8-                   	mov rax, L_constants + 2
 26559 00013D12 [0200000000000000] 
 26560                                  .L_if_end_007c:
 26561 00013D1A EB0A                    	jmp .L_if_end_007d
 26562                                  .L_if_else_007d:
 26563 00013D1C 48B8-                   	mov rax, L_constants + 2
 26563 00013D1E [0200000000000000] 
 26564                                  .L_if_end_007d:
 26565 00013D26 483D[02000000]          	cmp rax, sob_boolean_false
 26566 00013D2C 0F84BC000000            	je .L_if_else_0085
 26567                                  	; preparing a tail-call
 26568                                  	; preparing a non-tail-call
 26569 00013D32 488B4528                	mov rax, PARAM(1)	; param e2
 26570 00013D36 50                      	push rax
 26571 00013D37 6A01                    	push 1	; arg count
 26572 00013D39 488B0425[22170000]      	mov rax, qword [free_var_141]	; free var vector->list
 26573 00013D41 803805                  	cmp byte [rax], T_undefined
 26574 00013D44 0F844D3E0000            	je L_error_fvar_undefined
 26575 00013D4A 803804                  	cmp byte [rax], T_closure
 26576 00013D4D 0F85C83E0000            	jne L_error_non_closure
 26577 00013D53 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26578 00013D56 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26579 00013D59 50                      	push rax
 26580                                  	; preparing a non-tail-call
 26581 00013D5A 488B4520                	mov rax, PARAM(0)	; param e1
 26582 00013D5E 50                      	push rax
 26583 00013D5F 6A01                    	push 1	; arg count
 26584 00013D61 488B0425[22170000]      	mov rax, qword [free_var_141]	; free var vector->list
 26585 00013D69 803805                  	cmp byte [rax], T_undefined
 26586 00013D6C 0F84253E0000            	je L_error_fvar_undefined
 26587 00013D72 803804                  	cmp byte [rax], T_closure
 26588 00013D75 0F85A03E0000            	jne L_error_non_closure
 26589 00013D7B FF7001                  	push SOB_CLOSURE_ENV(rax)
 26590 00013D7E FF5009                  	call SOB_CLOSURE_CODE(rax)
 26591 00013D81 50                      	push rax
 26592 00013D82 6A02                    	push 2	; arg count
 26593 00013D84 488B0425[26130000]      	mov rax, qword [free_var_81]	; free var equal?
 26594 00013D8C 803805                  	cmp byte [rax], T_undefined
 26595 00013D8F 0F84023E0000            	je L_error_fvar_undefined
 26596 00013D95 803804                  	cmp byte [rax], T_closure
 26597 00013D98 0F857D3E0000            	jne L_error_non_closure
 26598 00013D9E FF7001                  	push SOB_CLOSURE_ENV(rax)
 26599 00013DA1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26600 00013DA4 FF7500                  	push qword[rbp]
 26601 00013DA7 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26602 00013DAA 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26603 00013DAE 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26604 00013DB2 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26605 00013DB6 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26606 00013DB9 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26607 00013DBC 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26608 00013DC1 4983C103                	add r9, 3 	 ;for getting to the params
 26609 00013DC5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26610 00013DC9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26611                                  .L_tc_recycle_frame_loop_00ec:
 26612 00013DCC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26613 00013DCF 7410                    	je .L_tc_recycle_frame_done_00ec
 26614 00013DD1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26615 00013DD4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26616 00013DD7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26617 00013DDB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26618 00013DDF EBEB                    	jmp .L_tc_recycle_frame_loop_00ec
 26619                                  .L_tc_recycle_frame_done_00ec:
 26620 00013DE1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26621 00013DE2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26622 00013DE6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26623 00013DE9 E998030000              	jmp .L_if_end_0085
 26624                                  .L_if_else_0085:
 26625                                  	; preparing a non-tail-call
 26626 00013DEE 488B4520                	mov rax, PARAM(0)	; param e1
 26627 00013DF2 50                      	push rax
 26628 00013DF3 6A01                    	push 1	; arg count
 26629 00013DF5 488B0425[EF160000]      	mov rax, qword [free_var_138]	; free var string?
 26630 00013DFD 803805                  	cmp byte [rax], T_undefined
 26631 00013E00 0F84913D0000            	je L_error_fvar_undefined
 26632 00013E06 803804                  	cmp byte [rax], T_closure
 26633 00013E09 0F850C3E0000            	jne L_error_non_closure
 26634 00013E0F FF7001                  	push SOB_CLOSURE_ENV(rax)
 26635 00013E12 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26636 00013E15 483D[02000000]          	cmp rax, sob_boolean_false
 26637 00013E1B 0F84AF000000            	je .L_if_else_007f
 26638                                  	; preparing a non-tail-call
 26639 00013E21 488B4528                	mov rax, PARAM(1)	; param e2
 26640 00013E25 50                      	push rax
 26641 00013E26 6A01                    	push 1	; arg count
 26642 00013E28 488B0425[EF160000]      	mov rax, qword [free_var_138]	; free var string?
 26643 00013E30 803805                  	cmp byte [rax], T_undefined
 26644 00013E33 0F845E3D0000            	je L_error_fvar_undefined
 26645 00013E39 803804                  	cmp byte [rax], T_closure
 26646 00013E3C 0F85D93D0000            	jne L_error_non_closure
 26647 00013E42 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26648 00013E45 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26649 00013E48 483D[02000000]          	cmp rax, sob_boolean_false
 26650 00013E4E 7474                    	je .L_if_else_007e
 26651                                  	; preparing a non-tail-call
 26652                                  	; preparing a non-tail-call
 26653 00013E50 488B4528                	mov rax, PARAM(1)	; param e2
 26654 00013E54 50                      	push rax
 26655 00013E55 6A01                    	push 1	; arg count
 26656 00013E57 488B0425[34160000]      	mov rax, qword [free_var_127]	; free var string-length
 26657 00013E5F 803805                  	cmp byte [rax], T_undefined
 26658 00013E62 0F842F3D0000            	je L_error_fvar_undefined
 26659 00013E68 803804                  	cmp byte [rax], T_closure
 26660 00013E6B 0F85AA3D0000            	jne L_error_non_closure
 26661 00013E71 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26662 00013E74 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26663 00013E77 50                      	push rax
 26664                                  	; preparing a non-tail-call
 26665 00013E78 488B4520                	mov rax, PARAM(0)	; param e1
 26666 00013E7C 50                      	push rax
 26667 00013E7D 6A01                    	push 1	; arg count
 26668 00013E7F 488B0425[34160000]      	mov rax, qword [free_var_127]	; free var string-length
 26669 00013E87 803805                  	cmp byte [rax], T_undefined
 26670 00013E8A 0F84073D0000            	je L_error_fvar_undefined
 26671 00013E90 803804                  	cmp byte [rax], T_closure
 26672 00013E93 0F85823D0000            	jne L_error_non_closure
 26673 00013E99 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26674 00013E9C FF5009                  	call SOB_CLOSURE_CODE(rax)
 26675 00013E9F 50                      	push rax
 26676 00013EA0 6A02                    	push 2	; arg count
 26677 00013EA2 488B0425[2B0E0000]      	mov rax, qword [free_var_6]	; free var =
 26678 00013EAA 803805                  	cmp byte [rax], T_undefined
 26679 00013EAD 0F84E43C0000            	je L_error_fvar_undefined
 26680 00013EB3 803804                  	cmp byte [rax], T_closure
 26681 00013EB6 0F855F3D0000            	jne L_error_non_closure
 26682 00013EBC FF7001                  	push SOB_CLOSURE_ENV(rax)
 26683 00013EBF FF5009                  	call SOB_CLOSURE_CODE(rax)
 26684 00013EC2 EB0A                    	jmp .L_if_end_007e
 26685                                  .L_if_else_007e:
 26686 00013EC4 48B8-                   	mov rax, L_constants + 2
 26686 00013EC6 [0200000000000000] 
 26687                                  .L_if_end_007e:
 26688 00013ECE EB0A                    	jmp .L_if_end_007f
 26689                                  .L_if_else_007f:
 26690 00013ED0 48B8-                   	mov rax, L_constants + 2
 26690 00013ED2 [0200000000000000] 
 26691                                  .L_if_end_007f:
 26692 00013EDA 483D[02000000]          	cmp rax, sob_boolean_false
 26693 00013EE0 7476                    	je .L_if_else_0084
 26694                                  	; preparing a tail-call
 26695 00013EE2 488B4528                	mov rax, PARAM(1)	; param e2
 26696 00013EE6 50                      	push rax
 26697 00013EE7 488B4520                	mov rax, PARAM(0)	; param e1
 26698 00013EEB 50                      	push rax
 26699 00013EEC 6A02                    	push 2	; arg count
 26700 00013EEE 488B0425[BC160000]      	mov rax, qword [free_var_135]	; free var string=?
 26701 00013EF6 803805                  	cmp byte [rax], T_undefined
 26702 00013EF9 0F84983C0000            	je L_error_fvar_undefined
 26703 00013EFF 803804                  	cmp byte [rax], T_closure
 26704 00013F02 0F85133D0000            	jne L_error_non_closure
 26705 00013F08 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26706 00013F0B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26707 00013F0E FF7500                  	push qword[rbp]
 26708 00013F11 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26709 00013F14 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26710 00013F18 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26711 00013F1C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26712 00013F20 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26713 00013F23 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26714 00013F26 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26715 00013F2B 4983C103                	add r9, 3 	 ;for getting to the params
 26716 00013F2F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26717 00013F33 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26718                                  .L_tc_recycle_frame_loop_00ed:
 26719 00013F36 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26720 00013F39 7410                    	je .L_tc_recycle_frame_done_00ed
 26721 00013F3B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26722 00013F3E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26723 00013F41 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26724 00013F45 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26725 00013F49 EBEB                    	jmp .L_tc_recycle_frame_loop_00ed
 26726                                  .L_tc_recycle_frame_done_00ed:
 26727 00013F4B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26728 00013F4C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26729 00013F50 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26730 00013F53 E92E020000              	jmp .L_if_end_0084
 26731                                  .L_if_else_0084:
 26732                                  	; preparing a non-tail-call
 26733 00013F58 488B4520                	mov rax, PARAM(0)	; param e1
 26734 00013F5C 50                      	push rax
 26735 00013F5D 6A01                    	push 1	; arg count
 26736 00013F5F 488B0425[F1140000]      	mov rax, qword [free_var_108]	; free var number?
 26737 00013F67 803805                  	cmp byte [rax], T_undefined
 26738 00013F6A 0F84273C0000            	je L_error_fvar_undefined
 26739 00013F70 803804                  	cmp byte [rax], T_closure
 26740 00013F73 0F85A23C0000            	jne L_error_non_closure
 26741 00013F79 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26742 00013F7C FF5009                  	call SOB_CLOSURE_CODE(rax)
 26743 00013F7F 483D[02000000]          	cmp rax, sob_boolean_false
 26744 00013F85 7429                    	je .L_if_else_0080
 26745                                  	; preparing a non-tail-call
 26746 00013F87 488B4528                	mov rax, PARAM(1)	; param e2
 26747 00013F8B 50                      	push rax
 26748 00013F8C 6A01                    	push 1	; arg count
 26749 00013F8E 488B0425[F1140000]      	mov rax, qword [free_var_108]	; free var number?
 26750 00013F96 803805                  	cmp byte [rax], T_undefined
 26751 00013F99 0F84F83B0000            	je L_error_fvar_undefined
 26752 00013F9F 803804                  	cmp byte [rax], T_closure
 26753 00013FA2 0F85733C0000            	jne L_error_non_closure
 26754 00013FA8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26755 00013FAB FF5009                  	call SOB_CLOSURE_CODE(rax)
 26756 00013FAE EB0A                    	jmp .L_if_end_0080
 26757                                  .L_if_else_0080:
 26758 00013FB0 48B8-                   	mov rax, L_constants + 2
 26758 00013FB2 [0200000000000000] 
 26759                                  .L_if_end_0080:
 26760 00013FBA 483D[02000000]          	cmp rax, sob_boolean_false
 26761 00013FC0 7476                    	je .L_if_else_0083
 26762                                  	; preparing a tail-call
 26763 00013FC2 488B4528                	mov rax, PARAM(1)	; param e2
 26764 00013FC6 50                      	push rax
 26765 00013FC7 488B4520                	mov rax, PARAM(0)	; param e1
 26766 00013FCB 50                      	push rax
 26767 00013FCC 6A02                    	push 2	; arg count
 26768 00013FCE 488B0425[2B0E0000]      	mov rax, qword [free_var_6]	; free var =
 26769 00013FD6 803805                  	cmp byte [rax], T_undefined
 26770 00013FD9 0F84B83B0000            	je L_error_fvar_undefined
 26771 00013FDF 803804                  	cmp byte [rax], T_closure
 26772 00013FE2 0F85333C0000            	jne L_error_non_closure
 26773 00013FE8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26774 00013FEB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26775 00013FEE FF7500                  	push qword[rbp]
 26776 00013FF1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26777 00013FF4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26778 00013FF8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26779 00013FFC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26780 00014000 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26781 00014003 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26782 00014006 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26783 0001400B 4983C103                	add r9, 3 	 ;for getting to the params
 26784 0001400F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26785 00014013 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26786                                  .L_tc_recycle_frame_loop_00ee:
 26787 00014016 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26788 00014019 7410                    	je .L_tc_recycle_frame_done_00ee
 26789 0001401B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26790 0001401E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26791 00014021 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26792 00014025 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26793 00014029 EBEB                    	jmp .L_tc_recycle_frame_loop_00ee
 26794                                  .L_tc_recycle_frame_done_00ee:
 26795 0001402B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26796 0001402C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26797 00014030 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26798 00014033 E94E010000              	jmp .L_if_end_0083
 26799                                  .L_if_else_0083:
 26800                                  	; preparing a non-tail-call
 26801 00014038 488B4520                	mov rax, PARAM(0)	; param e1
 26802 0001403C 50                      	push rax
 26803 0001403D 6A01                    	push 1	; arg count
 26804 0001403F 488B0425[F3120000]      	mov rax, qword [free_var_78]	; free var char?
 26805 00014047 803805                  	cmp byte [rax], T_undefined
 26806 0001404A 0F84473B0000            	je L_error_fvar_undefined
 26807 00014050 803804                  	cmp byte [rax], T_closure
 26808 00014053 0F85C23B0000            	jne L_error_non_closure
 26809 00014059 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26810 0001405C FF5009                  	call SOB_CLOSURE_CODE(rax)
 26811 0001405F 483D[02000000]          	cmp rax, sob_boolean_false
 26812 00014065 7429                    	je .L_if_else_0081
 26813                                  	; preparing a non-tail-call
 26814 00014067 488B4528                	mov rax, PARAM(1)	; param e2
 26815 0001406B 50                      	push rax
 26816 0001406C 6A01                    	push 1	; arg count
 26817 0001406E 488B0425[F3120000]      	mov rax, qword [free_var_78]	; free var char?
 26818 00014076 803805                  	cmp byte [rax], T_undefined
 26819 00014079 0F84183B0000            	je L_error_fvar_undefined
 26820 0001407F 803804                  	cmp byte [rax], T_closure
 26821 00014082 0F85933B0000            	jne L_error_non_closure
 26822 00014088 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26823 0001408B FF5009                  	call SOB_CLOSURE_CODE(rax)
 26824 0001408E EB0A                    	jmp .L_if_end_0081
 26825                                  .L_if_else_0081:
 26826 00014090 48B8-                   	mov rax, L_constants + 2
 26826 00014092 [0200000000000000] 
 26827                                  .L_if_end_0081:
 26828 0001409A 483D[02000000]          	cmp rax, sob_boolean_false
 26829 000140A0 7473                    	je .L_if_else_0082
 26830                                  	; preparing a tail-call
 26831 000140A2 488B4528                	mov rax, PARAM(1)	; param e2
 26832 000140A6 50                      	push rax
 26833 000140A7 488B4520                	mov rax, PARAM(0)	; param e1
 26834 000140AB 50                      	push rax
 26835 000140AC 6A02                    	push 2	; arg count
 26836 000140AE 488B0425[C0120000]      	mov rax, qword [free_var_75]	; free var char=?
 26837 000140B6 803805                  	cmp byte [rax], T_undefined
 26838 000140B9 0F84D83A0000            	je L_error_fvar_undefined
 26839 000140BF 803804                  	cmp byte [rax], T_closure
 26840 000140C2 0F85533B0000            	jne L_error_non_closure
 26841 000140C8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26842 000140CB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26843 000140CE FF7500                  	push qword[rbp]
 26844 000140D1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26845 000140D4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26846 000140D8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26847 000140DC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26848 000140E0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26849 000140E3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26850 000140E6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26851 000140EB 4983C103                	add r9, 3 	 ;for getting to the params
 26852 000140EF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26853 000140F3 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26854                                  .L_tc_recycle_frame_loop_00ef:
 26855 000140F6 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26856 000140F9 7410                    	je .L_tc_recycle_frame_done_00ef
 26857 000140FB 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26858 000140FE 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26859 00014101 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26860 00014105 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26861 00014109 EBEB                    	jmp .L_tc_recycle_frame_loop_00ef
 26862                                  .L_tc_recycle_frame_done_00ef:
 26863 0001410B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26864 0001410C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26865 00014110 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26866 00014113 EB71                    	jmp .L_if_end_0082
 26867                                  .L_if_else_0082:
 26868                                  	; preparing a tail-call
 26869 00014115 488B4528                	mov rax, PARAM(1)	; param e2
 26870 00014119 50                      	push rax
 26871 0001411A 488B4520                	mov rax, PARAM(0)	; param e1
 26872 0001411E 50                      	push rax
 26873 0001411F 6A02                    	push 2	; arg count
 26874 00014121 488B0425[15130000]      	mov rax, qword [free_var_80]	; free var eq?
 26875 00014129 803805                  	cmp byte [rax], T_undefined
 26876 0001412C 0F84653A0000            	je L_error_fvar_undefined
 26877 00014132 803804                  	cmp byte [rax], T_closure
 26878 00014135 0F85E03A0000            	jne L_error_non_closure
 26879 0001413B FF7001                  	push SOB_CLOSURE_ENV(rax)
 26880 0001413E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26881 00014141 FF7500                  	push qword[rbp]
 26882 00014144 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26883 00014147 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26884 0001414B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26885 0001414F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26886 00014153 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26887 00014156 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26888 00014159 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26889 0001415E 4983C103                	add r9, 3 	 ;for getting to the params
 26890 00014162 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26891 00014166 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26892                                  .L_tc_recycle_frame_loop_00f0:
 26893 00014169 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26894 0001416C 7410                    	je .L_tc_recycle_frame_done_00f0
 26895 0001416E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26896 00014171 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26897 00014174 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26898 00014178 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26899 0001417C EBEB                    	jmp .L_tc_recycle_frame_loop_00f0
 26900                                  .L_tc_recycle_frame_done_00f0:
 26901 0001417E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26902 0001417F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26903 00014183 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26904                                  .L_if_end_0082:
 26905                                  .L_if_end_0083:
 26906                                  .L_if_end_0084:
 26907                                  .L_if_end_0085:
 26908                                  .L_if_end_0086:
 26909 00014186 C9                      	leave
 26910 00014187 C22000                  	ret AND_KILL_FRAME(2)
 26911                                  .L_lambda_simple_end_00a0:	; new closure is in rax
 26912 0001418A 48890425[26130000]      	mov qword [free_var_81], rax
 26913 00014192 48B8-                   	mov rax, sob_void
 26913 00014194 [0000000000000000] 
 26914                                  
 26915 0001419C 4889C7                  	mov rdi, rax
 26916 0001419F E8753D0000              	call print_sexpr_if_not_void
 26917 000141A4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26918 000141A9 E8163B0000              	call malloc
 26919 000141AE 50                      	push rax
 26920 000141AF BF00000000              	mov rdi, 8 * 0	; new rib
 26921 000141B4 E80B3B0000              	call malloc
 26922 000141B9 50                      	push rax
 26923 000141BA BF08000000              	mov rdi, 8 * 1	; extended env
 26924 000141BF E8003B0000              	call malloc
 26925 000141C4 488B7D10                	mov rdi, ENV
 26926 000141C8 BE00000000              	mov rsi, 0
 26927 000141CD BA01000000              	mov rdx, 1
 26928                                  .L_lambda_simple_env_loop_00a1:	; ext_env[i + 1] <-- env[i]
 26929 000141D2 4883FE00                	cmp rsi, 0
 26930 000141D6 7410                    	je .L_lambda_simple_env_end_00a1
 26931 000141D8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26932 000141DC 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26933 000141E0 48FFC6                  	inc rsi
 26934 000141E3 48FFC2                  	inc rdx
 26935 000141E6 EBEA                    	jmp .L_lambda_simple_env_loop_00a1
 26936                                  .L_lambda_simple_env_end_00a1:
 26937 000141E8 5B                      	pop rbx
 26938 000141E9 BE00000000              	mov rsi, 0
 26939                                  .L_lambda_simple_params_loop_00a1:	; copy params
 26940 000141EE 4883FE00                	cmp rsi, 0
 26941 000141F2 740E                    	je .L_lambda_simple_params_end_00a1
 26942 000141F4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26943 000141F9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26944 000141FD 48FFC6                  	inc rsi
 26945 00014200 EBEC                    	jmp .L_lambda_simple_params_loop_00a1
 26946                                  .L_lambda_simple_params_end_00a1:
 26947 00014202 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26948 00014205 4889C3                  	mov rbx, rax
 26949 00014208 58                      	pop rax
 26950 00014209 C60004                  	mov byte [rax], T_closure
 26951 0001420C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26952 00014210 48C74009[1D420100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a1
 26953 00014218 E9B5010000              	jmp .L_lambda_simple_end_00a1
 26954                                  .L_lambda_simple_code_00a1:	; lambda-simple body
 26955 0001421D 48837C241002            	cmp qword [rsp + 8 * 2], 2
 26956 00014223 740B                    	je .L_lambda_simple_arity_check_ok_00a1
 26957 00014225 FF742410                	push qword [rsp + 8 * 2]
 26958 00014229 6A02                    	push 2
 26959 0001422B E94D3A0000              	jmp L_error_incorrect_arity_simple
 26960                                  .L_lambda_simple_arity_check_ok_00a1:
 26961 00014230 C8000000                	enter 0, 0
 26962                                  	; preparing a non-tail-call
 26963 00014234 488B4528                	mov rax, PARAM(1)	; param s
 26964 00014238 50                      	push rax
 26965 00014239 6A01                    	push 1	; arg count
 26966 0001423B 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 26967 00014243 803805                  	cmp byte [rax], T_undefined
 26968 00014246 0F844B390000            	je L_error_fvar_undefined
 26969 0001424C 803804                  	cmp byte [rax], T_closure
 26970 0001424F 0F85C6390000            	jne L_error_non_closure
 26971 00014255 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26972 00014258 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26973 0001425B 483D[02000000]          	cmp rax, sob_boolean_false
 26974 00014261 740F                    	je .L_if_else_0088
 26975 00014263 48B8-                   	mov rax, L_constants + 2
 26975 00014265 [0200000000000000] 
 26976 0001426D E95C010000              	jmp .L_if_end_0088
 26977                                  .L_if_else_0088:
 26978                                  	; preparing a non-tail-call
 26979 00014272 488B4520                	mov rax, PARAM(0)	; param a
 26980 00014276 50                      	push rax
 26981                                  	; preparing a non-tail-call
 26982 00014277 488B4528                	mov rax, PARAM(1)	; param s
 26983 0001427B 50                      	push rax
 26984 0001427C 6A01                    	push 1	; arg count
 26985 0001427E 488B0425[7E100000]      	mov rax, qword [free_var_41]	; free var caar
 26986 00014286 803805                  	cmp byte [rax], T_undefined
 26987 00014289 0F8408390000            	je L_error_fvar_undefined
 26988 0001428F 803804                  	cmp byte [rax], T_closure
 26989 00014292 0F8583390000            	jne L_error_non_closure
 26990 00014298 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26991 0001429B FF5009                  	call SOB_CLOSURE_CODE(rax)
 26992 0001429E 50                      	push rax
 26993 0001429F 6A02                    	push 2	; arg count
 26994 000142A1 488B0425[15130000]      	mov rax, qword [free_var_80]	; free var eq?
 26995 000142A9 803805                  	cmp byte [rax], T_undefined
 26996 000142AC 0F84E5380000            	je L_error_fvar_undefined
 26997 000142B2 803804                  	cmp byte [rax], T_closure
 26998 000142B5 0F8560390000            	jne L_error_non_closure
 26999 000142BB FF7001                  	push SOB_CLOSURE_ENV(rax)
 27000 000142BE FF5009                  	call SOB_CLOSURE_CODE(rax)
 27001 000142C1 483D[02000000]          	cmp rax, sob_boolean_false
 27002 000142C7 7471                    	je .L_if_else_0087
 27003                                  	; preparing a tail-call
 27004 000142C9 488B4528                	mov rax, PARAM(1)	; param s
 27005 000142CD 50                      	push rax
 27006 000142CE 6A01                    	push 1	; arg count
 27007 000142D0 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 27008 000142D8 803805                  	cmp byte [rax], T_undefined
 27009 000142DB 0F84B6380000            	je L_error_fvar_undefined
 27010 000142E1 803804                  	cmp byte [rax], T_closure
 27011 000142E4 0F8531390000            	jne L_error_non_closure
 27012 000142EA FF7001                  	push SOB_CLOSURE_ENV(rax)
 27013 000142ED FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 27014 000142F0 FF7500                  	push qword[rbp]
 27015 000142F3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 27016 000142F6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 27017 000142FA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 27018 000142FE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 27019 00014302 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 27020 00014305 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 27021 00014308 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 27022 0001430D 4983C103                	add r9, 3 	 ;for getting to the params
 27023 00014311 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 27024 00014315 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 27025                                  .L_tc_recycle_frame_loop_00f1:
 27026 00014318 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 27027 0001431B 7410                    	je .L_tc_recycle_frame_done_00f1
 27028 0001431D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 27029 00014320 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 27030 00014323 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 27031 00014327 4983E808                	sub r8, 8	 ;move the top of the stack one down
 27032 0001432B EBEB                    	jmp .L_tc_recycle_frame_loop_00f1
 27033                                  .L_tc_recycle_frame_done_00f1:
 27034 0001432D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27035 0001432E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27036 00014332 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27037 00014335 E994000000              	jmp .L_if_end_0087
 27038                                  .L_if_else_0087:
 27039                                  	; preparing a tail-call
 27040                                  	; preparing a non-tail-call
 27041 0001433A 488B4528                	mov rax, PARAM(1)	; param s
 27042 0001433E 50                      	push rax
 27043 0001433F 6A01                    	push 1	; arg count
 27044 00014341 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
 27045 00014349 803805                  	cmp byte [rax], T_undefined
 27046 0001434C 0F8445380000            	je L_error_fvar_undefined
 27047 00014352 803804                  	cmp byte [rax], T_closure
 27048 00014355 0F85C0380000            	jne L_error_non_closure
 27049 0001435B FF7001                  	push SOB_CLOSURE_ENV(rax)
 27050 0001435E FF5009                  	call SOB_CLOSURE_CODE(rax)
 27051 00014361 50                      	push rax
 27052 00014362 488B4520                	mov rax, PARAM(0)	; param a
 27053 00014366 50                      	push rax
 27054 00014367 6A02                    	push 2	; arg count
 27055 00014369 488B0425[07100000]      	mov rax, qword [free_var_34]	; free var assoc
 27056 00014371 803805                  	cmp byte [rax], T_undefined
 27057 00014374 0F841D380000            	je L_error_fvar_undefined
 27058 0001437A 803804                  	cmp byte [rax], T_closure
 27059 0001437D 0F8598380000            	jne L_error_non_closure
 27060 00014383 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27061 00014386 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 27062 00014389 FF7500                  	push qword[rbp]
 27063 0001438C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 27064 0001438F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 27065 00014393 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 27066 00014397 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 27067 0001439B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 27068 0001439E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 27069 000143A1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 27070 000143A6 4983C103                	add r9, 3 	 ;for getting to the params
 27071 000143AA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 27072 000143AE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 27073                                  .L_tc_recycle_frame_loop_00f2:
 27074 000143B1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 27075 000143B4 7410                    	je .L_tc_recycle_frame_done_00f2
 27076 000143B6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 27077 000143B9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 27078 000143BC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 27079 000143C0 4983E808                	sub r8, 8	 ;move the top of the stack one down
 27080 000143C4 EBEB                    	jmp .L_tc_recycle_frame_loop_00f2
 27081                                  .L_tc_recycle_frame_done_00f2:
 27082 000143C6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27083 000143C7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27084 000143CB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27085                                  .L_if_end_0087:
 27086                                  .L_if_end_0088:
 27087 000143CE C9                      	leave
 27088 000143CF C22000                  	ret AND_KILL_FRAME(2)
 27089                                  .L_lambda_simple_end_00a1:	; new closure is in rax
 27090 000143D2 48890425[07100000]      	mov qword [free_var_34], rax
 27091 000143DA 48B8-                   	mov rax, sob_void
 27091 000143DC [0000000000000000] 
 27092                                  
 27093 000143E4 4889C7                  	mov rdi, rax
 27094 000143E7 E82D3B0000              	call print_sexpr_if_not_void
 27095                                  	; preparing a non-tail-call
 27096 000143EC 48B8-                   	mov rax, L_constants + 1993
 27096 000143EE [C907000000000000] 
 27097 000143F6 50                      	push rax
 27098 000143F7 48B8-                   	mov rax, L_constants + 1993
 27098 000143F9 [C907000000000000] 
 27099 00014401 50                      	push rax
 27100 00014402 6A02                    	push 2	; arg count
 27101 00014404 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27102 00014409 E8B6380000              	call malloc
 27103 0001440E 50                      	push rax
 27104 0001440F BF00000000              	mov rdi, 8 * 0	; new rib
 27105 00014414 E8AB380000              	call malloc
 27106 00014419 50                      	push rax
 27107 0001441A BF08000000              	mov rdi, 8 * 1	; extended env
 27108 0001441F E8A0380000              	call malloc
 27109 00014424 488B7D10                	mov rdi, ENV
 27110 00014428 BE00000000              	mov rsi, 0
 27111 0001442D BA01000000              	mov rdx, 1
 27112                                  .L_lambda_simple_env_loop_00a2:	; ext_env[i + 1] <-- env[i]
 27113 00014432 4883FE00                	cmp rsi, 0
 27114 00014436 7410                    	je .L_lambda_simple_env_end_00a2
 27115 00014438 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27116 0001443C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27117 00014440 48FFC6                  	inc rsi
 27118 00014443 48FFC2                  	inc rdx
 27119 00014446 EBEA                    	jmp .L_lambda_simple_env_loop_00a2
 27120                                  .L_lambda_simple_env_end_00a2:
 27121 00014448 5B                      	pop rbx
 27122 00014449 BE00000000              	mov rsi, 0
 27123                                  .L_lambda_simple_params_loop_00a2:	; copy params
 27124 0001444E 4883FE00                	cmp rsi, 0
 27125 00014452 740E                    	je .L_lambda_simple_params_end_00a2
 27126 00014454 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27127 00014459 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27128 0001445D 48FFC6                  	inc rsi
 27129 00014460 EBEC                    	jmp .L_lambda_simple_params_loop_00a2
 27130                                  .L_lambda_simple_params_end_00a2:
 27131 00014462 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27132 00014465 4889C3                  	mov rbx, rax
 27133 00014468 58                      	pop rax
 27134 00014469 C60004                  	mov byte [rax], T_closure
 27135 0001446C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27136 00014470 48C74009[7D440100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a2
 27137 00014478 E9F7080000              	jmp .L_lambda_simple_end_00a2
 27138                                  .L_lambda_simple_code_00a2:	; lambda-simple body
 27139 0001447D 48837C241002            	cmp qword [rsp + 8 * 2], 2
 27140 00014483 740B                    	je .L_lambda_simple_arity_check_ok_00a2
 27141 00014485 FF742410                	push qword [rsp + 8 * 2]
 27142 00014489 6A02                    	push 2
 27143 0001448B E9ED370000              	jmp L_error_incorrect_arity_simple
 27144                                  .L_lambda_simple_arity_check_ok_00a2:
 27145 00014490 C8000000                	enter 0, 0
 27146 00014494 BF08000000              	mov rdi, 8*1
 27147 00014499 E826380000              	call malloc
 27148 0001449E 488B5D20                	mov rbx, PARAM(0)
 27149 000144A2 488918                  	mov qword[rax], rbx
 27150 000144A5 48894520                	mov PARAM(0), rax
 27151 000144A9 48B8-                   	mov rax, sob_void
 27151 000144AB [0000000000000000] 
 27152                                  
 27153 000144B3 BF08000000              	mov rdi, 8*1
 27154 000144B8 E807380000              	call malloc
 27155 000144BD 488B5D28                	mov rbx, PARAM(1)
 27156 000144C1 488918                  	mov qword[rax], rbx
 27157 000144C4 48894528                	mov PARAM(1), rax
 27158 000144C8 48B8-                   	mov rax, sob_void
 27158 000144CA [0000000000000000] 
 27159                                  
 27160 000144D2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27161 000144D7 E8E8370000              	call malloc
 27162 000144DC 50                      	push rax
 27163 000144DD BF10000000              	mov rdi, 8 * 2	; new rib
 27164 000144E2 E8DD370000              	call malloc
 27165 000144E7 50                      	push rax
 27166 000144E8 BF10000000              	mov rdi, 8 * 2	; extended env
 27167 000144ED E8D2370000              	call malloc
 27168 000144F2 488B7D10                	mov rdi, ENV
 27169 000144F6 BE00000000              	mov rsi, 0
 27170 000144FB BA01000000              	mov rdx, 1
 27171                                  .L_lambda_simple_env_loop_00a3:	; ext_env[i + 1] <-- env[i]
 27172 00014500 4883FE01                	cmp rsi, 1
 27173 00014504 7410                    	je .L_lambda_simple_env_end_00a3
 27174 00014506 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27175 0001450A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27176 0001450E 48FFC6                  	inc rsi
 27177 00014511 48FFC2                  	inc rdx
 27178 00014514 EBEA                    	jmp .L_lambda_simple_env_loop_00a3
 27179                                  .L_lambda_simple_env_end_00a3:
 27180 00014516 5B                      	pop rbx
 27181 00014517 BE00000000              	mov rsi, 0
 27182                                  .L_lambda_simple_params_loop_00a3:	; copy params
 27183 0001451C 4883FE02                	cmp rsi, 2
 27184 00014520 740E                    	je .L_lambda_simple_params_end_00a3
 27185 00014522 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27186 00014527 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27187 0001452B 48FFC6                  	inc rsi
 27188 0001452E EBEC                    	jmp .L_lambda_simple_params_loop_00a3
 27189                                  .L_lambda_simple_params_end_00a3:
 27190 00014530 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27191 00014533 4889C3                  	mov rbx, rax
 27192 00014536 58                      	pop rax
 27193 00014537 C60004                  	mov byte [rax], T_closure
 27194 0001453A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27195 0001453E 48C74009[4B450100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a3
 27196 00014546 E988020000              	jmp .L_lambda_simple_end_00a3
 27197                                  .L_lambda_simple_code_00a3:	; lambda-simple body
 27198 0001454B 48837C241003            	cmp qword [rsp + 8 * 2], 3
 27199 00014551 740B                    	je .L_lambda_simple_arity_check_ok_00a3
 27200 00014553 FF742410                	push qword [rsp + 8 * 2]
 27201 00014557 6A03                    	push 3
 27202 00014559 E91F370000              	jmp L_error_incorrect_arity_simple
 27203                                  .L_lambda_simple_arity_check_ok_00a3:
 27204 0001455E C8000000                	enter 0, 0
 27205                                  	; preparing a non-tail-call
 27206 00014562 488B4530                	mov rax, PARAM(2)	; param s
 27207 00014566 50                      	push rax
 27208 00014567 6A01                    	push 1	; arg count
 27209 00014569 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 27210 00014571 803805                  	cmp byte [rax], T_undefined
 27211 00014574 0F841D360000            	je L_error_fvar_undefined
 27212 0001457A 803804                  	cmp byte [rax], T_closure
 27213 0001457D 0F8598360000            	jne L_error_non_closure
 27214 00014583 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27215 00014586 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27216 00014589 483D[02000000]          	cmp rax, sob_boolean_false
 27217 0001458F 7409                    	je .L_if_else_0089
 27218 00014591 488B4520                	mov rax, PARAM(0)	; param target
 27219 00014595 E935020000              	jmp .L_if_end_0089
 27220                                  .L_if_else_0089:
 27221                                  	; preparing a tail-call
 27222                                  	; preparing a non-tail-call
 27223                                  	; preparing a non-tail-call
 27224                                  	; preparing a non-tail-call
 27225 0001459A 488B4530                	mov rax, PARAM(2)	; param s
 27226 0001459E 50                      	push rax
 27227 0001459F 6A01                    	push 1	; arg count
 27228 000145A1 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 27229 000145A9 803805                  	cmp byte [rax], T_undefined
 27230 000145AC 0F84E5350000            	je L_error_fvar_undefined
 27231 000145B2 803804                  	cmp byte [rax], T_closure
 27232 000145B5 0F8560360000            	jne L_error_non_closure
 27233 000145BB FF7001                  	push SOB_CLOSURE_ENV(rax)
 27234 000145BE FF5009                  	call SOB_CLOSURE_CODE(rax)
 27235 000145C1 50                      	push rax
 27236 000145C2 6A01                    	push 1	; arg count
 27237 000145C4 488B0425[34160000]      	mov rax, qword [free_var_127]	; free var string-length
 27238 000145CC 803805                  	cmp byte [rax], T_undefined
 27239 000145CF 0F84C2350000            	je L_error_fvar_undefined
 27240 000145D5 803804                  	cmp byte [rax], T_closure
 27241 000145D8 0F853D360000            	jne L_error_non_closure
 27242 000145DE FF7001                  	push SOB_CLOSURE_ENV(rax)
 27243 000145E1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27244 000145E4 50                      	push rax
 27245 000145E5 48B8-                   	mov rax, L_constants + 2135
 27245 000145E7 [5708000000000000] 
 27246 000145EF 50                      	push rax
 27247                                  	; preparing a non-tail-call
 27248 000145F0 488B4530                	mov rax, PARAM(2)	; param s
 27249 000145F4 50                      	push rax
 27250 000145F5 6A01                    	push 1	; arg count
 27251 000145F7 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 27252 000145FF 803805                  	cmp byte [rax], T_undefined
 27253 00014602 0F848F350000            	je L_error_fvar_undefined
 27254 00014608 803804                  	cmp byte [rax], T_closure
 27255 0001460B 0F850A360000            	jne L_error_non_closure
 27256 00014611 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27257 00014614 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27258 00014617 50                      	push rax
 27259 00014618 488B4528                	mov rax, PARAM(1)	; param i
 27260 0001461C 50                      	push rax
 27261 0001461D 488B4520                	mov rax, PARAM(0)	; param target
 27262 00014621 50                      	push rax
 27263 00014622 6A05                    	push 5	; arg count
 27264 00014624 488B4510                	mov rax, ENV
 27265 00014628 488B00                  	mov rax, qword [rax + 8 * 0]
 27266 0001462B 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 27267 0001462F 488B00                  	mov rax, qword [rax]
 27268 00014632 803804                  	cmp byte [rax], T_closure
 27269 00014635 0F85E0350000            	jne L_error_non_closure
 27270 0001463B FF7001                  	push SOB_CLOSURE_ENV(rax)
 27271 0001463E FF5009                  	call SOB_CLOSURE_CODE(rax)
 27272 00014641 50                      	push rax
 27273 00014642 6A01                    	push 1	; arg count
 27274 00014644 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27275 00014649 E876360000              	call malloc
 27276 0001464E 50                      	push rax
 27277 0001464F BF18000000              	mov rdi, 8 * 3	; new rib
 27278 00014654 E86B360000              	call malloc
 27279 00014659 50                      	push rax
 27280 0001465A BF18000000              	mov rdi, 8 * 3	; extended env
 27281 0001465F E860360000              	call malloc
 27282 00014664 488B7D10                	mov rdi, ENV
 27283 00014668 BE00000000              	mov rsi, 0
 27284 0001466D BA01000000              	mov rdx, 1
 27285                                  .L_lambda_simple_env_loop_00a4:	; ext_env[i + 1] <-- env[i]
 27286 00014672 4883FE02                	cmp rsi, 2
 27287 00014676 7410                    	je .L_lambda_simple_env_end_00a4
 27288 00014678 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27289 0001467C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27290 00014680 48FFC6                  	inc rsi
 27291 00014683 48FFC2                  	inc rdx
 27292 00014686 EBEA                    	jmp .L_lambda_simple_env_loop_00a4
 27293                                  .L_lambda_simple_env_end_00a4:
 27294 00014688 5B                      	pop rbx
 27295 00014689 BE00000000              	mov rsi, 0
 27296                                  .L_lambda_simple_params_loop_00a4:	; copy params
 27297 0001468E 4883FE03                	cmp rsi, 3
 27298 00014692 740E                    	je .L_lambda_simple_params_end_00a4
 27299 00014694 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27300 00014699 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27301 0001469D 48FFC6                  	inc rsi
 27302 000146A0 EBEC                    	jmp .L_lambda_simple_params_loop_00a4
 27303                                  .L_lambda_simple_params_end_00a4:
 27304 000146A2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27305 000146A5 4889C3                  	mov rbx, rax
 27306 000146A8 58                      	pop rax
 27307 000146A9 C60004                  	mov byte [rax], T_closure
 27308 000146AC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27309 000146B0 48C74009[BD460100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a4
 27310 000146B8 E9BE000000              	jmp .L_lambda_simple_end_00a4
 27311                                  .L_lambda_simple_code_00a4:	; lambda-simple body
 27312 000146BD 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27313 000146C3 740B                    	je .L_lambda_simple_arity_check_ok_00a4
 27314 000146C5 FF742410                	push qword [rsp + 8 * 2]
 27315 000146C9 6A01                    	push 1
 27316 000146CB E9AD350000              	jmp L_error_incorrect_arity_simple
 27317                                  .L_lambda_simple_arity_check_ok_00a4:
 27318 000146D0 C8000000                	enter 0, 0
 27319                                  	; preparing a tail-call
 27320                                  	; preparing a non-tail-call
 27321 000146D4 488B4510                	mov rax, ENV
 27322 000146D8 488B00                  	mov rax, qword [rax + 8 * 0]
 27323 000146DB 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var s
 27324 000146DF 50                      	push rax
 27325 000146E0 6A01                    	push 1	; arg count
 27326 000146E2 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
 27327 000146EA 803805                  	cmp byte [rax], T_undefined
 27328 000146ED 0F84A4340000            	je L_error_fvar_undefined
 27329 000146F3 803804                  	cmp byte [rax], T_closure
 27330 000146F6 0F851F350000            	jne L_error_non_closure
 27331 000146FC FF7001                  	push SOB_CLOSURE_ENV(rax)
 27332 000146FF FF5009                  	call SOB_CLOSURE_CODE(rax)
 27333 00014702 50                      	push rax
 27334 00014703 488B4520                	mov rax, PARAM(0)	; param i
 27335 00014707 50                      	push rax
 27336 00014708 488B4510                	mov rax, ENV
 27337 0001470C 488B00                  	mov rax, qword [rax + 8 * 0]
 27338 0001470F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var target
 27339 00014712 50                      	push rax
 27340 00014713 6A03                    	push 3	; arg count
 27341 00014715 488B4510                	mov rax, ENV
 27342 00014719 488B4008                	mov rax, qword [rax + 8 * 1]
 27343 0001471D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 27344 00014720 488B00                  	mov rax, qword [rax]
 27345 00014723 803804                  	cmp byte [rax], T_closure
 27346 00014726 0F85EF340000            	jne L_error_non_closure
 27347 0001472C FF7001                  	push SOB_CLOSURE_ENV(rax)
 27348 0001472F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 27349 00014732 FF7500                  	push qword[rbp]
 27350 00014735 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 27351 00014738 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 27352 0001473C 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 27353 00014740 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 27354 00014744 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 27355 00014747 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 27356 0001474A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 27357 0001474F 4983C103                	add r9, 3 	 ;for getting to the params
 27358 00014753 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 27359 00014757 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 27360                                  .L_tc_recycle_frame_loop_00f3:
 27361 0001475A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 27362 0001475D 7410                    	je .L_tc_recycle_frame_done_00f3
 27363 0001475F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 27364 00014762 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 27365 00014765 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 27366 00014769 4983E808                	sub r8, 8	 ;move the top of the stack one down
 27367 0001476D EBEB                    	jmp .L_tc_recycle_frame_loop_00f3
 27368                                  .L_tc_recycle_frame_done_00f3:
 27369 0001476F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27370 00014770 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27371 00014774 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27372 00014777 C9                      	leave
 27373 00014778 C21800                  	ret AND_KILL_FRAME(1)
 27374                                  .L_lambda_simple_end_00a4:	; new closure is in rax
 27375 0001477B 803804                  	cmp byte [rax], T_closure
 27376 0001477E 0F8597340000            	jne L_error_non_closure
 27377 00014784 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27378 00014787 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 27379 0001478A FF7500                  	push qword[rbp]
 27380 0001478D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 27381 00014790 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 27382 00014794 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 27383 00014798 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 27384 0001479C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 27385 0001479F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 27386 000147A2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 27387 000147A7 4983C103                	add r9, 3 	 ;for getting to the params
 27388 000147AB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 27389 000147AF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 27390                                  .L_tc_recycle_frame_loop_00f4:
 27391 000147B2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 27392 000147B5 7410                    	je .L_tc_recycle_frame_done_00f4
 27393 000147B7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 27394 000147BA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 27395 000147BD 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 27396 000147C1 4983E808                	sub r8, 8	 ;move the top of the stack one down
 27397 000147C5 EBEB                    	jmp .L_tc_recycle_frame_loop_00f4
 27398                                  .L_tc_recycle_frame_done_00f4:
 27399 000147C7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27400 000147C8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27401 000147CC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27402                                  .L_if_end_0089:
 27403 000147CF C9                      	leave
 27404 000147D0 C22800                  	ret AND_KILL_FRAME(3)
 27405                                  .L_lambda_simple_end_00a3:	; new closure is in rax
 27406 000147D3 50                      	push rax
 27407 000147D4 488B4520                	mov rax, PARAM(0)	; param run
 27408 000147D8 8F00                    	pop qword [rax]
 27409 000147DA 48B8-                   	mov rax, sob_void
 27409 000147DC [0000000000000000] 
 27410                                  
 27411 000147E4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27412 000147E9 E8D6340000              	call malloc
 27413 000147EE 50                      	push rax
 27414 000147EF BF10000000              	mov rdi, 8 * 2	; new rib
 27415 000147F4 E8CB340000              	call malloc
 27416 000147F9 50                      	push rax
 27417 000147FA BF10000000              	mov rdi, 8 * 2	; extended env
 27418 000147FF E8C0340000              	call malloc
 27419 00014804 488B7D10                	mov rdi, ENV
 27420 00014808 BE00000000              	mov rsi, 0
 27421 0001480D BA01000000              	mov rdx, 1
 27422                                  .L_lambda_simple_env_loop_00a5:	; ext_env[i + 1] <-- env[i]
 27423 00014812 4883FE01                	cmp rsi, 1
 27424 00014816 7410                    	je .L_lambda_simple_env_end_00a5
 27425 00014818 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27426 0001481C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27427 00014820 48FFC6                  	inc rsi
 27428 00014823 48FFC2                  	inc rdx
 27429 00014826 EBEA                    	jmp .L_lambda_simple_env_loop_00a5
 27430                                  .L_lambda_simple_env_end_00a5:
 27431 00014828 5B                      	pop rbx
 27432 00014829 BE00000000              	mov rsi, 0
 27433                                  .L_lambda_simple_params_loop_00a5:	; copy params
 27434 0001482E 4883FE02                	cmp rsi, 2
 27435 00014832 740E                    	je .L_lambda_simple_params_end_00a5
 27436 00014834 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27437 00014839 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27438 0001483D 48FFC6                  	inc rsi
 27439 00014840 EBEC                    	jmp .L_lambda_simple_params_loop_00a5
 27440                                  .L_lambda_simple_params_end_00a5:
 27441 00014842 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27442 00014845 4889C3                  	mov rbx, rax
 27443 00014848 58                      	pop rax
 27444 00014849 C60004                  	mov byte [rax], T_closure
 27445 0001484C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27446 00014850 48C74009[5D480100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a5
 27447 00014858 E98B010000              	jmp .L_lambda_simple_end_00a5
 27448                                  .L_lambda_simple_code_00a5:	; lambda-simple body
 27449 0001485D 48837C241005            	cmp qword [rsp + 8 * 2], 5
 27450 00014863 740B                    	je .L_lambda_simple_arity_check_ok_00a5
 27451 00014865 FF742410                	push qword [rsp + 8 * 2]
 27452 00014869 6A05                    	push 5
 27453 0001486B E90D340000              	jmp L_error_incorrect_arity_simple
 27454                                  .L_lambda_simple_arity_check_ok_00a5:
 27455 00014870 C8000000                	enter 0, 0
 27456                                  	; preparing a non-tail-call
 27457 00014874 488B4540                	mov rax, PARAM(4)	; param limit
 27458 00014878 50                      	push rax
 27459 00014879 488B4538                	mov rax, PARAM(3)	; param j
 27460 0001487D 50                      	push rax
 27461 0001487E 6A02                    	push 2	; arg count
 27462 00014880 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 27463 00014888 803805                  	cmp byte [rax], T_undefined
 27464 0001488B 0F8406330000            	je L_error_fvar_undefined
 27465 00014891 803804                  	cmp byte [rax], T_closure
 27466 00014894 0F8581330000            	jne L_error_non_closure
 27467 0001489A FF7001                  	push SOB_CLOSURE_ENV(rax)
 27468 0001489D FF5009                  	call SOB_CLOSURE_CODE(rax)
 27469 000148A0 483D[02000000]          	cmp rax, sob_boolean_false
 27470 000148A6 0F8434010000            	je .L_if_else_008a
 27471                                  	; preparing a non-tail-call
 27472                                  	; preparing a non-tail-call
 27473 000148AC 488B4538                	mov rax, PARAM(3)	; param j
 27474 000148B0 50                      	push rax
 27475 000148B1 488B4530                	mov rax, PARAM(2)	; param str
 27476 000148B5 50                      	push rax
 27477 000148B6 6A02                    	push 2	; arg count
 27478 000148B8 488B0425[45160000]      	mov rax, qword [free_var_128]	; free var string-ref
 27479 000148C0 803805                  	cmp byte [rax], T_undefined
 27480 000148C3 0F84CE320000            	je L_error_fvar_undefined
 27481 000148C9 803804                  	cmp byte [rax], T_closure
 27482 000148CC 0F8549330000            	jne L_error_non_closure
 27483 000148D2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27484 000148D5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27485 000148D8 50                      	push rax
 27486 000148D9 488B4528                	mov rax, PARAM(1)	; param i
 27487 000148DD 50                      	push rax
 27488 000148DE 488B4520                	mov rax, PARAM(0)	; param target
 27489 000148E2 50                      	push rax
 27490 000148E3 6A03                    	push 3	; arg count
 27491 000148E5 488B0425[78160000]      	mov rax, qword [free_var_131]	; free var string-set!
 27492 000148ED 803805                  	cmp byte [rax], T_undefined
 27493 000148F0 0F84A1320000            	je L_error_fvar_undefined
 27494 000148F6 803804                  	cmp byte [rax], T_closure
 27495 000148F9 0F851C330000            	jne L_error_non_closure
 27496 000148FF FF7001                  	push SOB_CLOSURE_ENV(rax)
 27497 00014902 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27498                                  
 27499                                  	; preparing a tail-call
 27500 00014905 488B4540                	mov rax, PARAM(4)	; param limit
 27501 00014909 50                      	push rax
 27502                                  	; preparing a non-tail-call
 27503 0001490A 48B8-                   	mov rax, L_constants + 2270
 27503 0001490C [DE08000000000000] 
 27504 00014914 50                      	push rax
 27505 00014915 488B4538                	mov rax, PARAM(3)	; param j
 27506 00014919 50                      	push rax
 27507 0001491A 6A02                    	push 2	; arg count
 27508 0001491C 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 27509 00014924 803805                  	cmp byte [rax], T_undefined
 27510 00014927 0F846A320000            	je L_error_fvar_undefined
 27511 0001492D 803804                  	cmp byte [rax], T_closure
 27512 00014930 0F85E5320000            	jne L_error_non_closure
 27513 00014936 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27514 00014939 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27515 0001493C 50                      	push rax
 27516 0001493D 488B4530                	mov rax, PARAM(2)	; param str
 27517 00014941 50                      	push rax
 27518                                  	; preparing a non-tail-call
 27519 00014942 48B8-                   	mov rax, L_constants + 2270
 27519 00014944 [DE08000000000000] 
 27520 0001494C 50                      	push rax
 27521 0001494D 488B4528                	mov rax, PARAM(1)	; param i
 27522 00014951 50                      	push rax
 27523 00014952 6A02                    	push 2	; arg count
 27524 00014954 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 27525 0001495C 803805                  	cmp byte [rax], T_undefined
 27526 0001495F 0F8432320000            	je L_error_fvar_undefined
 27527 00014965 803804                  	cmp byte [rax], T_closure
 27528 00014968 0F85AD320000            	jne L_error_non_closure
 27529 0001496E FF7001                  	push SOB_CLOSURE_ENV(rax)
 27530 00014971 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27531 00014974 50                      	push rax
 27532 00014975 488B4520                	mov rax, PARAM(0)	; param target
 27533 00014979 50                      	push rax
 27534 0001497A 6A05                    	push 5	; arg count
 27535 0001497C 488B4510                	mov rax, ENV
 27536 00014980 488B00                  	mov rax, qword [rax + 8 * 0]
 27537 00014983 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 27538 00014987 488B00                  	mov rax, qword [rax]
 27539 0001498A 803804                  	cmp byte [rax], T_closure
 27540 0001498D 0F8588320000            	jne L_error_non_closure
 27541 00014993 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27542 00014996 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 27543 00014999 FF7500                  	push qword[rbp]
 27544 0001499C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 27545 0001499F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 27546 000149A3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 27547 000149A7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 27548 000149AB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 27549 000149AE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 27550 000149B1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 27551 000149B6 4983C103                	add r9, 3 	 ;for getting to the params
 27552 000149BA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 27553 000149BE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 27554                                  .L_tc_recycle_frame_loop_00f5:
 27555 000149C1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 27556 000149C4 7410                    	je .L_tc_recycle_frame_done_00f5
 27557 000149C6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 27558 000149C9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 27559 000149CC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 27560 000149D0 4983E808                	sub r8, 8	 ;move the top of the stack one down
 27561 000149D4 EBEB                    	jmp .L_tc_recycle_frame_loop_00f5
 27562                                  .L_tc_recycle_frame_done_00f5:
 27563 000149D6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27564 000149D7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27565 000149DB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27566 000149DE EB04                    	jmp .L_if_end_008a
 27567                                  .L_if_else_008a:
 27568 000149E0 488B4528                	mov rax, PARAM(1)	; param i
 27569                                  .L_if_end_008a:
 27570 000149E4 C9                      	leave
 27571 000149E5 C23800                  	ret AND_KILL_FRAME(5)
 27572                                  .L_lambda_simple_end_00a5:	; new closure is in rax
 27573 000149E8 50                      	push rax
 27574 000149E9 488B4528                	mov rax, PARAM(1)	; param add
 27575 000149ED 8F00                    	pop qword [rax]
 27576 000149EF 48B8-                   	mov rax, sob_void
 27576 000149F1 [0000000000000000] 
 27577                                  
 27578 000149F9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27579 000149FE E8C1320000              	call malloc
 27580 00014A03 50                      	push rax
 27581 00014A04 BF10000000              	mov rdi, 8 * 2	; new rib
 27582 00014A09 E8B6320000              	call malloc
 27583 00014A0E 50                      	push rax
 27584 00014A0F BF10000000              	mov rdi, 8 * 2	; extended env
 27585 00014A14 E8AB320000              	call malloc
 27586 00014A19 488B7D10                	mov rdi, ENV
 27587 00014A1D BE00000000              	mov rsi, 0
 27588 00014A22 BA01000000              	mov rdx, 1
 27589                                  .L_lambda_opt_env_loop_0017:	; ext_env[i + 1] <-- env[i]
 27590 00014A27 4883FE01                	cmp rsi, 1
 27591 00014A2B 7410                    	je .L_lambda_opt_env_end_0017
 27592 00014A2D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27593 00014A31 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27594 00014A35 48FFC6                  	inc rsi
 27595 00014A38 48FFC2                  	inc rdx
 27596 00014A3B EBEA                    	jmp .L_lambda_opt_env_loop_0017
 27597                                  .L_lambda_opt_env_end_0017:
 27598 00014A3D 5B                      	pop rbx
 27599 00014A3E BE00000000              	mov rsi, 0
 27600                                  .L_lambda_opt_params_loop_0017:	; copy params
 27601 00014A43 4883FE02                	cmp rsi, 2
 27602 00014A47 740E                    	je .L_lambda_opt_params_end_0017
 27603 00014A49 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27604 00014A4E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27605 00014A52 48FFC6                  	inc rsi
 27606 00014A55 EBEC                    	jmp .L_lambda_opt_params_loop_0017
 27607                                  .L_lambda_opt_params_end_0017:
 27608 00014A57 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27609 00014A5A 4889C3                  	mov rbx, rax
 27610 00014A5D 58                      	pop rax
 27611 00014A5E C60004                  	mov byte [rax], T_closure
 27612 00014A61 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27613 00014A65 48C74009[724A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0017
 27614 00014A6D E9FE020000              	jmp .L_lambda_opt_end_0017
 27615                                  .L_lambda_opt_code_0017:	; lambda-opt body
 27616 00014A72 48837C241000            	cmp qword [rsp + 8 * 2], 0
 27617 00014A78 7411                    	je .L_lambda_opt_arity_check_exact_0017
 27618 00014A7A 0F8F4D010000            	jg .L_lambda_opt_arity_check_more_0017
 27619 00014A80 FF742410                	push qword [rsp + 8 * 2]
 27620 00014A84 6A00                    	push 0
 27621 00014A86 E906320000              	jmp L_error_incorrect_arity_opt
 27622                                  .L_lambda_opt_arity_check_exact_0017:
 27623 00014A8B 4883EC08                	sub rsp, 8
 27624 00014A8F 488B442408              	mov rax, qword[rsp + 8 *1]
 27625 00014A94 48890424                	mov qword[rsp], rax  
 27626 00014A98 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 27627 00014A9D 4889442408              	mov qword[rsp + 8 * 1], rax
 27628 00014AA2 B801000000              	mov rax, 1
 27629 00014AA7 4889442410              	mov qword[rsp + 8 *2], rax
 27630 00014AAC 48B8-                   	mov rax, sob_nil
 27630 00014AAE [0100000000000000] 
 27631 00014AB6 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 27632 00014ABB C8000000                	enter 0, 0
 27633                                  	; preparing a tail-call
 27634 00014ABF 488B4520                	mov rax, PARAM(0)	; param strings
 27635 00014AC3 50                      	push rax
 27636 00014AC4 48B8-                   	mov rax, L_constants + 2135
 27636 00014AC6 [5708000000000000] 
 27637 00014ACE 50                      	push rax
 27638                                  	; preparing a non-tail-call
 27639                                  	; preparing a non-tail-call
 27640                                  	; preparing a non-tail-call
 27641 00014ACF 488B4520                	mov rax, PARAM(0)	; param strings
 27642 00014AD3 50                      	push rax
 27643 00014AD4 488B0425[34160000]      	mov rax, qword [free_var_127]	; free var string-length
 27644 00014ADC 803805                  	cmp byte [rax], T_undefined
 27645 00014ADF 0F84B2300000            	je L_error_fvar_undefined
 27646 00014AE5 50                      	push rax
 27647 00014AE6 6A02                    	push 2	; arg count
 27648 00014AE8 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
 27649 00014AF0 803805                  	cmp byte [rax], T_undefined
 27650 00014AF3 0F849E300000            	je L_error_fvar_undefined
 27651 00014AF9 803804                  	cmp byte [rax], T_closure
 27652 00014AFC 0F8519310000            	jne L_error_non_closure
 27653 00014B02 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27654 00014B05 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27655 00014B08 50                      	push rax
 27656 00014B09 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 27657 00014B11 803805                  	cmp byte [rax], T_undefined
 27658 00014B14 0F847D300000            	je L_error_fvar_undefined
 27659 00014B1A 50                      	push rax
 27660 00014B1B 6A02                    	push 2	; arg count
 27661 00014B1D 488B0425[F60F0000]      	mov rax, qword [free_var_33]	; free var apply
 27662 00014B25 803805                  	cmp byte [rax], T_undefined
 27663 00014B28 0F8469300000            	je L_error_fvar_undefined
 27664 00014B2E 803804                  	cmp byte [rax], T_closure
 27665 00014B31 0F85E4300000            	jne L_error_non_closure
 27666 00014B37 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27667 00014B3A FF5009                  	call SOB_CLOSURE_CODE(rax)
 27668 00014B3D 50                      	push rax
 27669 00014B3E 6A01                    	push 1	; arg count
 27670 00014B40 488B0425[58140000]      	mov rax, qword [free_var_99]	; free var make-string
 27671 00014B48 803805                  	cmp byte [rax], T_undefined
 27672 00014B4B 0F8446300000            	je L_error_fvar_undefined
 27673 00014B51 803804                  	cmp byte [rax], T_closure
 27674 00014B54 0F85C1300000            	jne L_error_non_closure
 27675 00014B5A FF7001                  	push SOB_CLOSURE_ENV(rax)
 27676 00014B5D FF5009                  	call SOB_CLOSURE_CODE(rax)
 27677 00014B60 50                      	push rax
 27678 00014B61 6A03                    	push 3	; arg count
 27679 00014B63 488B4510                	mov rax, ENV
 27680 00014B67 488B00                  	mov rax, qword [rax + 8 * 0]
 27681 00014B6A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 27682 00014B6D 488B00                  	mov rax, qword [rax]
 27683 00014B70 803804                  	cmp byte [rax], T_closure
 27684 00014B73 0F85A2300000            	jne L_error_non_closure
 27685 00014B79 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27686 00014B7C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 27687 00014B7F FF7500                  	push qword[rbp]
 27688 00014B82 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 27689 00014B85 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 27690 00014B89 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 27691 00014B8D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 27692 00014B91 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 27693 00014B94 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 27694 00014B97 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 27695 00014B9C 4983C103                	add r9, 3 	 ;for getting to the params
 27696 00014BA0 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 27697 00014BA4 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 27698                                  .L_tc_recycle_frame_loop_00f7:
 27699 00014BA7 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 27700 00014BAA 7410                    	je .L_tc_recycle_frame_done_00f7
 27701 00014BAC 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 27702 00014BAF 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 27703 00014BB2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 27704 00014BB6 4983E808                	sub r8, 8	 ;move the top of the stack one down
 27705 00014BBA EBEB                    	jmp .L_tc_recycle_frame_loop_00f7
 27706                                  .L_tc_recycle_frame_done_00f7:
 27707 00014BBC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27708 00014BBD 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27709 00014BC1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27710 00014BC4 C9                      	leave
 27711 00014BC5 C21800                  	ret AND_KILL_FRAME(1)
 27712 00014BC8 E9A3010000              	jmp .L_lambda_opt_end_0017	; new closure is in rax
 27713                                  .L_lambda_opt_arity_check_more_0017:
 27714 00014BCD 488B442410              	mov rax, qword[rsp + 2 * 8]
 27715 00014BD2 4889C7                  	mov rdi, rax
 27716 00014BD5 49B9-                   	mov r9, sob_nil
 27716 00014BD7 [0100000000000000] 
 27717 00014BDF 4989F8                  	mov r8, rdi
 27718                                  .L_lambda_opt_stack_shrink_loop_0017:
 27719 00014BE2 4983F800                	cmp r8, 0
 27720 00014BE6 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_0017
 27721 00014BE8 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)] 	;rbx is the top of the stack
 27722 00014BED BF11000000              	mov rdi, 1+8+8	;for pair
 27723 00014BF2 E8CD300000              	call malloc	 ;to create the pair in the stack
 27724 00014BF7 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
 27725 00014BFA 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
 27726 00014BFE 4C894809                 	mov qword[rax+1+8],r9
 27727 00014C02 4989C1                  	mov r9 , rax	 ; for the recursion 
 27728 00014C05 49FFC8                  	dec r8
 27729 00014C08 EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_0017
 27730                                  .L_lambda_opt_stack_shrink_loop_exit_0017:
 27731 00014C0A 488B442410              	mov rax, qword[rsp + 2 * 8]
 27732 00014C0F BF01000000              	mov rdi, 1
 27733 00014C14 4829F8                  	sub rax, rdi
 27734 00014C17 4889C7                  	mov rdi, rax
 27735 00014C1A 486BC008                	imul rax,8
 27736 00014C1E 4801C4                  	add rsp, rax
 27737 00014C21 4889E0                  	mov rax, rsp
 27738 00014C24 4989F8                  	mov r8, rdi
 27739 00014C27 4D6BC008                	imul r8, 8
 27740 00014C2B 4C29C0                  	sub rax, r8
 27741 00014C2E 4989C2                  	mov r10, rax	; holds the original ret in the stack
 27742 00014C31 4983C218                	add r10, 8*3
 27743 00014C35 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
 27744 00014C39 4C8B00                  	mov r8, qword[rax] 	;arg count = r8
 27745 00014C3C 4D6BC008                	imul r8,8
 27746 00014C40 4C01C0                  	add rax, r8
 27747 00014C43 4C8908                  	mov qword[rax] ,r9
 27748 00014C46 4983EA18                 	sub r10, 8*3
 27749 00014C4A 48C744241001000000      	mov qword [rsp+2*8], 1
 27750 00014C53 498B4208                	mov rax, qword[r10 + 1 * 8]
 27751 00014C57 4889442408              	mov qword[rsp + 1*8] ,rax
 27752 00014C5C 498B02                  	mov rax, qword[r10]
 27753 00014C5F 48890424                	mov qword[rsp], rax
 27754 00014C63 C8000000                	enter 0, 0
 27755                                  	; preparing a tail-call
 27756 00014C67 488B4520                	mov rax, PARAM(0)	; param strings
 27757 00014C6B 50                      	push rax
 27758 00014C6C 48B8-                   	mov rax, L_constants + 2135
 27758 00014C6E [5708000000000000] 
 27759 00014C76 50                      	push rax
 27760                                  	; preparing a non-tail-call
 27761                                  	; preparing a non-tail-call
 27762                                  	; preparing a non-tail-call
 27763 00014C77 488B4520                	mov rax, PARAM(0)	; param strings
 27764 00014C7B 50                      	push rax
 27765 00014C7C 488B0425[34160000]      	mov rax, qword [free_var_127]	; free var string-length
 27766 00014C84 803805                  	cmp byte [rax], T_undefined
 27767 00014C87 0F840A2F0000            	je L_error_fvar_undefined
 27768 00014C8D 50                      	push rax
 27769 00014C8E 6A02                    	push 2	; arg count
 27770 00014C90 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
 27771 00014C98 803805                  	cmp byte [rax], T_undefined
 27772 00014C9B 0F84F62E0000            	je L_error_fvar_undefined
 27773 00014CA1 803804                  	cmp byte [rax], T_closure
 27774 00014CA4 0F85712F0000            	jne L_error_non_closure
 27775 00014CAA FF7001                  	push SOB_CLOSURE_ENV(rax)
 27776 00014CAD FF5009                  	call SOB_CLOSURE_CODE(rax)
 27777 00014CB0 50                      	push rax
 27778 00014CB1 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 27779 00014CB9 803805                  	cmp byte [rax], T_undefined
 27780 00014CBC 0F84D52E0000            	je L_error_fvar_undefined
 27781 00014CC2 50                      	push rax
 27782 00014CC3 6A02                    	push 2	; arg count
 27783 00014CC5 488B0425[F60F0000]      	mov rax, qword [free_var_33]	; free var apply
 27784 00014CCD 803805                  	cmp byte [rax], T_undefined
 27785 00014CD0 0F84C12E0000            	je L_error_fvar_undefined
 27786 00014CD6 803804                  	cmp byte [rax], T_closure
 27787 00014CD9 0F853C2F0000            	jne L_error_non_closure
 27788 00014CDF FF7001                  	push SOB_CLOSURE_ENV(rax)
 27789 00014CE2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27790 00014CE5 50                      	push rax
 27791 00014CE6 6A01                    	push 1	; arg count
 27792 00014CE8 488B0425[58140000]      	mov rax, qword [free_var_99]	; free var make-string
 27793 00014CF0 803805                  	cmp byte [rax], T_undefined
 27794 00014CF3 0F849E2E0000            	je L_error_fvar_undefined
 27795 00014CF9 803804                  	cmp byte [rax], T_closure
 27796 00014CFC 0F85192F0000            	jne L_error_non_closure
 27797 00014D02 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27798 00014D05 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27799 00014D08 50                      	push rax
 27800 00014D09 6A03                    	push 3	; arg count
 27801 00014D0B 488B4510                	mov rax, ENV
 27802 00014D0F 488B00                  	mov rax, qword [rax + 8 * 0]
 27803 00014D12 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 27804 00014D15 488B00                  	mov rax, qword [rax]
 27805 00014D18 803804                  	cmp byte [rax], T_closure
 27806 00014D1B 0F85FA2E0000            	jne L_error_non_closure
 27807 00014D21 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27808 00014D24 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 27809 00014D27 FF7500                  	push qword[rbp]
 27810 00014D2A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 27811 00014D2D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 27812 00014D31 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 27813 00014D35 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 27814 00014D39 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 27815 00014D3C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 27816 00014D3F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 27817 00014D44 4983C103                	add r9, 3 	 ;for getting to the params
 27818 00014D48 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 27819 00014D4C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 27820                                  .L_tc_recycle_frame_loop_00f6:
 27821 00014D4F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 27822 00014D52 7410                    	je .L_tc_recycle_frame_done_00f6
 27823 00014D54 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 27824 00014D57 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 27825 00014D5A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 27826 00014D5E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 27827 00014D62 EBEB                    	jmp .L_tc_recycle_frame_loop_00f6
 27828                                  .L_tc_recycle_frame_done_00f6:
 27829 00014D64 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27830 00014D65 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27831 00014D69 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27832 00014D6C C9                      	leave
 27833 00014D6D C21800                  	ret AND_KILL_FRAME(1)
 27834                                  .L_lambda_opt_end_0017:	; new closure is in rax
 27835 00014D70 C9                      	leave
 27836 00014D71 C22000                  	ret AND_KILL_FRAME(2)
 27837                                  .L_lambda_simple_end_00a2:	; new closure is in rax
 27838 00014D74 803804                  	cmp byte [rax], T_closure
 27839 00014D77 0F859E2E0000            	jne L_error_non_closure
 27840 00014D7D FF7001                  	push SOB_CLOSURE_ENV(rax)
 27841 00014D80 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27842 00014D83 48890425[BD150000]      	mov qword [free_var_120], rax
 27843 00014D8B 48B8-                   	mov rax, sob_void
 27843 00014D8D [0000000000000000] 
 27844                                  
 27845 00014D95 4889C7                  	mov rdi, rax
 27846 00014D98 E87C310000              	call print_sexpr_if_not_void
 27847                                  	; preparing a non-tail-call
 27848 00014D9D 48B8-                   	mov rax, L_constants + 1993
 27848 00014D9F [C907000000000000] 
 27849 00014DA7 50                      	push rax
 27850 00014DA8 48B8-                   	mov rax, L_constants + 1993
 27850 00014DAA [C907000000000000] 
 27851 00014DB2 50                      	push rax
 27852 00014DB3 6A02                    	push 2	; arg count
 27853 00014DB5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27854 00014DBA E8052F0000              	call malloc
 27855 00014DBF 50                      	push rax
 27856 00014DC0 BF00000000              	mov rdi, 8 * 0	; new rib
 27857 00014DC5 E8FA2E0000              	call malloc
 27858 00014DCA 50                      	push rax
 27859 00014DCB BF08000000              	mov rdi, 8 * 1	; extended env
 27860 00014DD0 E8EF2E0000              	call malloc
 27861 00014DD5 488B7D10                	mov rdi, ENV
 27862 00014DD9 BE00000000              	mov rsi, 0
 27863 00014DDE BA01000000              	mov rdx, 1
 27864                                  .L_lambda_simple_env_loop_00a6:	; ext_env[i + 1] <-- env[i]
 27865 00014DE3 4883FE00                	cmp rsi, 0
 27866 00014DE7 7410                    	je .L_lambda_simple_env_end_00a6
 27867 00014DE9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27868 00014DED 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27869 00014DF1 48FFC6                  	inc rsi
 27870 00014DF4 48FFC2                  	inc rdx
 27871 00014DF7 EBEA                    	jmp .L_lambda_simple_env_loop_00a6
 27872                                  .L_lambda_simple_env_end_00a6:
 27873 00014DF9 5B                      	pop rbx
 27874 00014DFA BE00000000              	mov rsi, 0
 27875                                  .L_lambda_simple_params_loop_00a6:	; copy params
 27876 00014DFF 4883FE00                	cmp rsi, 0
 27877 00014E03 740E                    	je .L_lambda_simple_params_end_00a6
 27878 00014E05 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27879 00014E0A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27880 00014E0E 48FFC6                  	inc rsi
 27881 00014E11 EBEC                    	jmp .L_lambda_simple_params_loop_00a6
 27882                                  .L_lambda_simple_params_end_00a6:
 27883 00014E13 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27884 00014E16 4889C3                  	mov rbx, rax
 27885 00014E19 58                      	pop rax
 27886 00014E1A C60004                  	mov byte [rax], T_closure
 27887 00014E1D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27888 00014E21 48C74009[2E4E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a6
 27889 00014E29 E9F7080000              	jmp .L_lambda_simple_end_00a6
 27890                                  .L_lambda_simple_code_00a6:	; lambda-simple body
 27891 00014E2E 48837C241002            	cmp qword [rsp + 8 * 2], 2
 27892 00014E34 740B                    	je .L_lambda_simple_arity_check_ok_00a6
 27893 00014E36 FF742410                	push qword [rsp + 8 * 2]
 27894 00014E3A 6A02                    	push 2
 27895 00014E3C E93C2E0000              	jmp L_error_incorrect_arity_simple
 27896                                  .L_lambda_simple_arity_check_ok_00a6:
 27897 00014E41 C8000000                	enter 0, 0
 27898 00014E45 BF08000000              	mov rdi, 8*1
 27899 00014E4A E8752E0000              	call malloc
 27900 00014E4F 488B5D20                	mov rbx, PARAM(0)
 27901 00014E53 488918                  	mov qword[rax], rbx
 27902 00014E56 48894520                	mov PARAM(0), rax
 27903 00014E5A 48B8-                   	mov rax, sob_void
 27903 00014E5C [0000000000000000] 
 27904                                  
 27905 00014E64 BF08000000              	mov rdi, 8*1
 27906 00014E69 E8562E0000              	call malloc
 27907 00014E6E 488B5D28                	mov rbx, PARAM(1)
 27908 00014E72 488918                  	mov qword[rax], rbx
 27909 00014E75 48894528                	mov PARAM(1), rax
 27910 00014E79 48B8-                   	mov rax, sob_void
 27910 00014E7B [0000000000000000] 
 27911                                  
 27912 00014E83 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27913 00014E88 E8372E0000              	call malloc
 27914 00014E8D 50                      	push rax
 27915 00014E8E BF10000000              	mov rdi, 8 * 2	; new rib
 27916 00014E93 E82C2E0000              	call malloc
 27917 00014E98 50                      	push rax
 27918 00014E99 BF10000000              	mov rdi, 8 * 2	; extended env
 27919 00014E9E E8212E0000              	call malloc
 27920 00014EA3 488B7D10                	mov rdi, ENV
 27921 00014EA7 BE00000000              	mov rsi, 0
 27922 00014EAC BA01000000              	mov rdx, 1
 27923                                  .L_lambda_simple_env_loop_00a7:	; ext_env[i + 1] <-- env[i]
 27924 00014EB1 4883FE01                	cmp rsi, 1
 27925 00014EB5 7410                    	je .L_lambda_simple_env_end_00a7
 27926 00014EB7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27927 00014EBB 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27928 00014EBF 48FFC6                  	inc rsi
 27929 00014EC2 48FFC2                  	inc rdx
 27930 00014EC5 EBEA                    	jmp .L_lambda_simple_env_loop_00a7
 27931                                  .L_lambda_simple_env_end_00a7:
 27932 00014EC7 5B                      	pop rbx
 27933 00014EC8 BE00000000              	mov rsi, 0
 27934                                  .L_lambda_simple_params_loop_00a7:	; copy params
 27935 00014ECD 4883FE02                	cmp rsi, 2
 27936 00014ED1 740E                    	je .L_lambda_simple_params_end_00a7
 27937 00014ED3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27938 00014ED8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27939 00014EDC 48FFC6                  	inc rsi
 27940 00014EDF EBEC                    	jmp .L_lambda_simple_params_loop_00a7
 27941                                  .L_lambda_simple_params_end_00a7:
 27942 00014EE1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27943 00014EE4 4889C3                  	mov rbx, rax
 27944 00014EE7 58                      	pop rax
 27945 00014EE8 C60004                  	mov byte [rax], T_closure
 27946 00014EEB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27947 00014EEF 48C74009[FC4E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a7
 27948 00014EF7 E988020000              	jmp .L_lambda_simple_end_00a7
 27949                                  .L_lambda_simple_code_00a7:	; lambda-simple body
 27950 00014EFC 48837C241003            	cmp qword [rsp + 8 * 2], 3
 27951 00014F02 740B                    	je .L_lambda_simple_arity_check_ok_00a7
 27952 00014F04 FF742410                	push qword [rsp + 8 * 2]
 27953 00014F08 6A03                    	push 3
 27954 00014F0A E96E2D0000              	jmp L_error_incorrect_arity_simple
 27955                                  .L_lambda_simple_arity_check_ok_00a7:
 27956 00014F0F C8000000                	enter 0, 0
 27957                                  	; preparing a non-tail-call
 27958 00014F13 488B4530                	mov rax, PARAM(2)	; param s
 27959 00014F17 50                      	push rax
 27960 00014F18 6A01                    	push 1	; arg count
 27961 00014F1A 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 27962 00014F22 803805                  	cmp byte [rax], T_undefined
 27963 00014F25 0F846C2C0000            	je L_error_fvar_undefined
 27964 00014F2B 803804                  	cmp byte [rax], T_closure
 27965 00014F2E 0F85E72C0000            	jne L_error_non_closure
 27966 00014F34 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27967 00014F37 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27968 00014F3A 483D[02000000]          	cmp rax, sob_boolean_false
 27969 00014F40 7409                    	je .L_if_else_008b
 27970 00014F42 488B4520                	mov rax, PARAM(0)	; param target
 27971 00014F46 E935020000              	jmp .L_if_end_008b
 27972                                  .L_if_else_008b:
 27973                                  	; preparing a tail-call
 27974                                  	; preparing a non-tail-call
 27975                                  	; preparing a non-tail-call
 27976                                  	; preparing a non-tail-call
 27977 00014F4B 488B4530                	mov rax, PARAM(2)	; param s
 27978 00014F4F 50                      	push rax
 27979 00014F50 6A01                    	push 1	; arg count
 27980 00014F52 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 27981 00014F5A 803805                  	cmp byte [rax], T_undefined
 27982 00014F5D 0F84342C0000            	je L_error_fvar_undefined
 27983 00014F63 803804                  	cmp byte [rax], T_closure
 27984 00014F66 0F85AF2C0000            	jne L_error_non_closure
 27985 00014F6C FF7001                  	push SOB_CLOSURE_ENV(rax)
 27986 00014F6F FF5009                  	call SOB_CLOSURE_CODE(rax)
 27987 00014F72 50                      	push rax
 27988 00014F73 6A01                    	push 1	; arg count
 27989 00014F75 488B0425[44170000]      	mov rax, qword [free_var_143]	; free var vector-length
 27990 00014F7D 803805                  	cmp byte [rax], T_undefined
 27991 00014F80 0F84112C0000            	je L_error_fvar_undefined
 27992 00014F86 803804                  	cmp byte [rax], T_closure
 27993 00014F89 0F858C2C0000            	jne L_error_non_closure
 27994 00014F8F FF7001                  	push SOB_CLOSURE_ENV(rax)
 27995 00014F92 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27996 00014F95 50                      	push rax
 27997 00014F96 48B8-                   	mov rax, L_constants + 2135
 27997 00014F98 [5708000000000000] 
 27998 00014FA0 50                      	push rax
 27999                                  	; preparing a non-tail-call
 28000 00014FA1 488B4530                	mov rax, PARAM(2)	; param s
 28001 00014FA5 50                      	push rax
 28002 00014FA6 6A01                    	push 1	; arg count
 28003 00014FA8 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 28004 00014FB0 803805                  	cmp byte [rax], T_undefined
 28005 00014FB3 0F84DE2B0000            	je L_error_fvar_undefined
 28006 00014FB9 803804                  	cmp byte [rax], T_closure
 28007 00014FBC 0F85592C0000            	jne L_error_non_closure
 28008 00014FC2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28009 00014FC5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28010 00014FC8 50                      	push rax
 28011 00014FC9 488B4528                	mov rax, PARAM(1)	; param i
 28012 00014FCD 50                      	push rax
 28013 00014FCE 488B4520                	mov rax, PARAM(0)	; param target
 28014 00014FD2 50                      	push rax
 28015 00014FD3 6A05                    	push 5	; arg count
 28016 00014FD5 488B4510                	mov rax, ENV
 28017 00014FD9 488B00                  	mov rax, qword [rax + 8 * 0]
 28018 00014FDC 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 28019 00014FE0 488B00                  	mov rax, qword [rax]
 28020 00014FE3 803804                  	cmp byte [rax], T_closure
 28021 00014FE6 0F852F2C0000            	jne L_error_non_closure
 28022 00014FEC FF7001                  	push SOB_CLOSURE_ENV(rax)
 28023 00014FEF FF5009                  	call SOB_CLOSURE_CODE(rax)
 28024 00014FF2 50                      	push rax
 28025 00014FF3 6A01                    	push 1	; arg count
 28026 00014FF5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28027 00014FFA E8C52C0000              	call malloc
 28028 00014FFF 50                      	push rax
 28029 00015000 BF18000000              	mov rdi, 8 * 3	; new rib
 28030 00015005 E8BA2C0000              	call malloc
 28031 0001500A 50                      	push rax
 28032 0001500B BF18000000              	mov rdi, 8 * 3	; extended env
 28033 00015010 E8AF2C0000              	call malloc
 28034 00015015 488B7D10                	mov rdi, ENV
 28035 00015019 BE00000000              	mov rsi, 0
 28036 0001501E BA01000000              	mov rdx, 1
 28037                                  .L_lambda_simple_env_loop_00a8:	; ext_env[i + 1] <-- env[i]
 28038 00015023 4883FE02                	cmp rsi, 2
 28039 00015027 7410                    	je .L_lambda_simple_env_end_00a8
 28040 00015029 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28041 0001502D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28042 00015031 48FFC6                  	inc rsi
 28043 00015034 48FFC2                  	inc rdx
 28044 00015037 EBEA                    	jmp .L_lambda_simple_env_loop_00a8
 28045                                  .L_lambda_simple_env_end_00a8:
 28046 00015039 5B                      	pop rbx
 28047 0001503A BE00000000              	mov rsi, 0
 28048                                  .L_lambda_simple_params_loop_00a8:	; copy params
 28049 0001503F 4883FE03                	cmp rsi, 3
 28050 00015043 740E                    	je .L_lambda_simple_params_end_00a8
 28051 00015045 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28052 0001504A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28053 0001504E 48FFC6                  	inc rsi
 28054 00015051 EBEC                    	jmp .L_lambda_simple_params_loop_00a8
 28055                                  .L_lambda_simple_params_end_00a8:
 28056 00015053 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28057 00015056 4889C3                  	mov rbx, rax
 28058 00015059 58                      	pop rax
 28059 0001505A C60004                  	mov byte [rax], T_closure
 28060 0001505D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28061 00015061 48C74009[6E500100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a8
 28062 00015069 E9BE000000              	jmp .L_lambda_simple_end_00a8
 28063                                  .L_lambda_simple_code_00a8:	; lambda-simple body
 28064 0001506E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28065 00015074 740B                    	je .L_lambda_simple_arity_check_ok_00a8
 28066 00015076 FF742410                	push qword [rsp + 8 * 2]
 28067 0001507A 6A01                    	push 1
 28068 0001507C E9FC2B0000              	jmp L_error_incorrect_arity_simple
 28069                                  .L_lambda_simple_arity_check_ok_00a8:
 28070 00015081 C8000000                	enter 0, 0
 28071                                  	; preparing a tail-call
 28072                                  	; preparing a non-tail-call
 28073 00015085 488B4510                	mov rax, ENV
 28074 00015089 488B00                  	mov rax, qword [rax + 8 * 0]
 28075 0001508C 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var s
 28076 00015090 50                      	push rax
 28077 00015091 6A01                    	push 1	; arg count
 28078 00015093 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
 28079 0001509B 803805                  	cmp byte [rax], T_undefined
 28080 0001509E 0F84F32A0000            	je L_error_fvar_undefined
 28081 000150A4 803804                  	cmp byte [rax], T_closure
 28082 000150A7 0F856E2B0000            	jne L_error_non_closure
 28083 000150AD FF7001                  	push SOB_CLOSURE_ENV(rax)
 28084 000150B0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28085 000150B3 50                      	push rax
 28086 000150B4 488B4520                	mov rax, PARAM(0)	; param i
 28087 000150B8 50                      	push rax
 28088 000150B9 488B4510                	mov rax, ENV
 28089 000150BD 488B00                  	mov rax, qword [rax + 8 * 0]
 28090 000150C0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var target
 28091 000150C3 50                      	push rax
 28092 000150C4 6A03                    	push 3	; arg count
 28093 000150C6 488B4510                	mov rax, ENV
 28094 000150CA 488B4008                	mov rax, qword [rax + 8 * 1]
 28095 000150CE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 28096 000150D1 488B00                  	mov rax, qword [rax]
 28097 000150D4 803804                  	cmp byte [rax], T_closure
 28098 000150D7 0F853E2B0000            	jne L_error_non_closure
 28099 000150DD FF7001                  	push SOB_CLOSURE_ENV(rax)
 28100 000150E0 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 28101 000150E3 FF7500                  	push qword[rbp]
 28102 000150E6 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 28103 000150E9 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 28104 000150ED 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 28105 000150F1 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 28106 000150F5 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 28107 000150F8 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 28108 000150FB 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 28109 00015100 4983C103                	add r9, 3 	 ;for getting to the params
 28110 00015104 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 28111 00015108 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 28112                                  .L_tc_recycle_frame_loop_00f8:
 28113 0001510B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 28114 0001510E 7410                    	je .L_tc_recycle_frame_done_00f8
 28115 00015110 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 28116 00015113 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 28117 00015116 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 28118 0001511A 4983E808                	sub r8, 8	 ;move the top of the stack one down
 28119 0001511E EBEB                    	jmp .L_tc_recycle_frame_loop_00f8
 28120                                  .L_tc_recycle_frame_done_00f8:
 28121 00015120 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 28122 00015121 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 28123 00015125 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28124 00015128 C9                      	leave
 28125 00015129 C21800                  	ret AND_KILL_FRAME(1)
 28126                                  .L_lambda_simple_end_00a8:	; new closure is in rax
 28127 0001512C 803804                  	cmp byte [rax], T_closure
 28128 0001512F 0F85E62A0000            	jne L_error_non_closure
 28129 00015135 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28130 00015138 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 28131 0001513B FF7500                  	push qword[rbp]
 28132 0001513E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 28133 00015141 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 28134 00015145 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 28135 00015149 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 28136 0001514D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 28137 00015150 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 28138 00015153 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 28139 00015158 4983C103                	add r9, 3 	 ;for getting to the params
 28140 0001515C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 28141 00015160 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 28142                                  .L_tc_recycle_frame_loop_00f9:
 28143 00015163 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 28144 00015166 7410                    	je .L_tc_recycle_frame_done_00f9
 28145 00015168 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 28146 0001516B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 28147 0001516E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 28148 00015172 4983E808                	sub r8, 8	 ;move the top of the stack one down
 28149 00015176 EBEB                    	jmp .L_tc_recycle_frame_loop_00f9
 28150                                  .L_tc_recycle_frame_done_00f9:
 28151 00015178 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 28152 00015179 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 28153 0001517D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28154                                  .L_if_end_008b:
 28155 00015180 C9                      	leave
 28156 00015181 C22800                  	ret AND_KILL_FRAME(3)
 28157                                  .L_lambda_simple_end_00a7:	; new closure is in rax
 28158 00015184 50                      	push rax
 28159 00015185 488B4520                	mov rax, PARAM(0)	; param run
 28160 00015189 8F00                    	pop qword [rax]
 28161 0001518B 48B8-                   	mov rax, sob_void
 28161 0001518D [0000000000000000] 
 28162                                  
 28163 00015195 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28164 0001519A E8252B0000              	call malloc
 28165 0001519F 50                      	push rax
 28166 000151A0 BF10000000              	mov rdi, 8 * 2	; new rib
 28167 000151A5 E81A2B0000              	call malloc
 28168 000151AA 50                      	push rax
 28169 000151AB BF10000000              	mov rdi, 8 * 2	; extended env
 28170 000151B0 E80F2B0000              	call malloc
 28171 000151B5 488B7D10                	mov rdi, ENV
 28172 000151B9 BE00000000              	mov rsi, 0
 28173 000151BE BA01000000              	mov rdx, 1
 28174                                  .L_lambda_simple_env_loop_00a9:	; ext_env[i + 1] <-- env[i]
 28175 000151C3 4883FE01                	cmp rsi, 1
 28176 000151C7 7410                    	je .L_lambda_simple_env_end_00a9
 28177 000151C9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28178 000151CD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28179 000151D1 48FFC6                  	inc rsi
 28180 000151D4 48FFC2                  	inc rdx
 28181 000151D7 EBEA                    	jmp .L_lambda_simple_env_loop_00a9
 28182                                  .L_lambda_simple_env_end_00a9:
 28183 000151D9 5B                      	pop rbx
 28184 000151DA BE00000000              	mov rsi, 0
 28185                                  .L_lambda_simple_params_loop_00a9:	; copy params
 28186 000151DF 4883FE02                	cmp rsi, 2
 28187 000151E3 740E                    	je .L_lambda_simple_params_end_00a9
 28188 000151E5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28189 000151EA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28190 000151EE 48FFC6                  	inc rsi
 28191 000151F1 EBEC                    	jmp .L_lambda_simple_params_loop_00a9
 28192                                  .L_lambda_simple_params_end_00a9:
 28193 000151F3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28194 000151F6 4889C3                  	mov rbx, rax
 28195 000151F9 58                      	pop rax
 28196 000151FA C60004                  	mov byte [rax], T_closure
 28197 000151FD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28198 00015201 48C74009[0E520100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a9
 28199 00015209 E98B010000              	jmp .L_lambda_simple_end_00a9
 28200                                  .L_lambda_simple_code_00a9:	; lambda-simple body
 28201 0001520E 48837C241005            	cmp qword [rsp + 8 * 2], 5
 28202 00015214 740B                    	je .L_lambda_simple_arity_check_ok_00a9
 28203 00015216 FF742410                	push qword [rsp + 8 * 2]
 28204 0001521A 6A05                    	push 5
 28205 0001521C E95C2A0000              	jmp L_error_incorrect_arity_simple
 28206                                  .L_lambda_simple_arity_check_ok_00a9:
 28207 00015221 C8000000                	enter 0, 0
 28208                                  	; preparing a non-tail-call
 28209 00015225 488B4540                	mov rax, PARAM(4)	; param limit
 28210 00015229 50                      	push rax
 28211 0001522A 488B4538                	mov rax, PARAM(3)	; param j
 28212 0001522E 50                      	push rax
 28213 0001522F 6A02                    	push 2	; arg count
 28214 00015231 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 28215 00015239 803805                  	cmp byte [rax], T_undefined
 28216 0001523C 0F8455290000            	je L_error_fvar_undefined
 28217 00015242 803804                  	cmp byte [rax], T_closure
 28218 00015245 0F85D0290000            	jne L_error_non_closure
 28219 0001524B FF7001                  	push SOB_CLOSURE_ENV(rax)
 28220 0001524E FF5009                  	call SOB_CLOSURE_CODE(rax)
 28221 00015251 483D[02000000]          	cmp rax, sob_boolean_false
 28222 00015257 0F8434010000            	je .L_if_else_008c
 28223                                  	; preparing a non-tail-call
 28224                                  	; preparing a non-tail-call
 28225 0001525D 488B4538                	mov rax, PARAM(3)	; param j
 28226 00015261 50                      	push rax
 28227 00015262 488B4530                	mov rax, PARAM(2)	; param vec
 28228 00015266 50                      	push rax
 28229 00015267 6A02                    	push 2	; arg count
 28230 00015269 488B0425[55170000]      	mov rax, qword [free_var_144]	; free var vector-ref
 28231 00015271 803805                  	cmp byte [rax], T_undefined
 28232 00015274 0F841D290000            	je L_error_fvar_undefined
 28233 0001527A 803804                  	cmp byte [rax], T_closure
 28234 0001527D 0F8598290000            	jne L_error_non_closure
 28235 00015283 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28236 00015286 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28237 00015289 50                      	push rax
 28238 0001528A 488B4528                	mov rax, PARAM(1)	; param i
 28239 0001528E 50                      	push rax
 28240 0001528F 488B4520                	mov rax, PARAM(0)	; param target
 28241 00015293 50                      	push rax
 28242 00015294 6A03                    	push 3	; arg count
 28243 00015296 488B0425[88170000]      	mov rax, qword [free_var_147]	; free var vector-set!
 28244 0001529E 803805                  	cmp byte [rax], T_undefined
 28245 000152A1 0F84F0280000            	je L_error_fvar_undefined
 28246 000152A7 803804                  	cmp byte [rax], T_closure
 28247 000152AA 0F856B290000            	jne L_error_non_closure
 28248 000152B0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28249 000152B3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28250                                  
 28251                                  	; preparing a tail-call
 28252 000152B6 488B4540                	mov rax, PARAM(4)	; param limit
 28253 000152BA 50                      	push rax
 28254                                  	; preparing a non-tail-call
 28255 000152BB 48B8-                   	mov rax, L_constants + 2270
 28255 000152BD [DE08000000000000] 
 28256 000152C5 50                      	push rax
 28257 000152C6 488B4538                	mov rax, PARAM(3)	; param j
 28258 000152CA 50                      	push rax
 28259 000152CB 6A02                    	push 2	; arg count
 28260 000152CD 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 28261 000152D5 803805                  	cmp byte [rax], T_undefined
 28262 000152D8 0F84B9280000            	je L_error_fvar_undefined
 28263 000152DE 803804                  	cmp byte [rax], T_closure
 28264 000152E1 0F8534290000            	jne L_error_non_closure
 28265 000152E7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28266 000152EA FF5009                  	call SOB_CLOSURE_CODE(rax)
 28267 000152ED 50                      	push rax
 28268 000152EE 488B4530                	mov rax, PARAM(2)	; param vec
 28269 000152F2 50                      	push rax
 28270                                  	; preparing a non-tail-call
 28271 000152F3 48B8-                   	mov rax, L_constants + 2270
 28271 000152F5 [DE08000000000000] 
 28272 000152FD 50                      	push rax
 28273 000152FE 488B4528                	mov rax, PARAM(1)	; param i
 28274 00015302 50                      	push rax
 28275 00015303 6A02                    	push 2	; arg count
 28276 00015305 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 28277 0001530D 803805                  	cmp byte [rax], T_undefined
 28278 00015310 0F8481280000            	je L_error_fvar_undefined
 28279 00015316 803804                  	cmp byte [rax], T_closure
 28280 00015319 0F85FC280000            	jne L_error_non_closure
 28281 0001531F FF7001                  	push SOB_CLOSURE_ENV(rax)
 28282 00015322 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28283 00015325 50                      	push rax
 28284 00015326 488B4520                	mov rax, PARAM(0)	; param target
 28285 0001532A 50                      	push rax
 28286 0001532B 6A05                    	push 5	; arg count
 28287 0001532D 488B4510                	mov rax, ENV
 28288 00015331 488B00                  	mov rax, qword [rax + 8 * 0]
 28289 00015334 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 28290 00015338 488B00                  	mov rax, qword [rax]
 28291 0001533B 803804                  	cmp byte [rax], T_closure
 28292 0001533E 0F85D7280000            	jne L_error_non_closure
 28293 00015344 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28294 00015347 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 28295 0001534A FF7500                  	push qword[rbp]
 28296 0001534D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 28297 00015350 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 28298 00015354 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 28299 00015358 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 28300 0001535C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 28301 0001535F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 28302 00015362 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 28303 00015367 4983C103                	add r9, 3 	 ;for getting to the params
 28304 0001536B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 28305 0001536F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 28306                                  .L_tc_recycle_frame_loop_00fa:
 28307 00015372 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 28308 00015375 7410                    	je .L_tc_recycle_frame_done_00fa
 28309 00015377 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 28310 0001537A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 28311 0001537D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 28312 00015381 4983E808                	sub r8, 8	 ;move the top of the stack one down
 28313 00015385 EBEB                    	jmp .L_tc_recycle_frame_loop_00fa
 28314                                  .L_tc_recycle_frame_done_00fa:
 28315 00015387 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 28316 00015388 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 28317 0001538C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28318 0001538F EB04                    	jmp .L_if_end_008c
 28319                                  .L_if_else_008c:
 28320 00015391 488B4528                	mov rax, PARAM(1)	; param i
 28321                                  .L_if_end_008c:
 28322 00015395 C9                      	leave
 28323 00015396 C23800                  	ret AND_KILL_FRAME(5)
 28324                                  .L_lambda_simple_end_00a9:	; new closure is in rax
 28325 00015399 50                      	push rax
 28326 0001539A 488B4528                	mov rax, PARAM(1)	; param add
 28327 0001539E 8F00                    	pop qword [rax]
 28328 000153A0 48B8-                   	mov rax, sob_void
 28328 000153A2 [0000000000000000] 
 28329                                  
 28330 000153AA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28331 000153AF E810290000              	call malloc
 28332 000153B4 50                      	push rax
 28333 000153B5 BF10000000              	mov rdi, 8 * 2	; new rib
 28334 000153BA E805290000              	call malloc
 28335 000153BF 50                      	push rax
 28336 000153C0 BF10000000              	mov rdi, 8 * 2	; extended env
 28337 000153C5 E8FA280000              	call malloc
 28338 000153CA 488B7D10                	mov rdi, ENV
 28339 000153CE BE00000000              	mov rsi, 0
 28340 000153D3 BA01000000              	mov rdx, 1
 28341                                  .L_lambda_opt_env_loop_0018:	; ext_env[i + 1] <-- env[i]
 28342 000153D8 4883FE01                	cmp rsi, 1
 28343 000153DC 7410                    	je .L_lambda_opt_env_end_0018
 28344 000153DE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28345 000153E2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28346 000153E6 48FFC6                  	inc rsi
 28347 000153E9 48FFC2                  	inc rdx
 28348 000153EC EBEA                    	jmp .L_lambda_opt_env_loop_0018
 28349                                  .L_lambda_opt_env_end_0018:
 28350 000153EE 5B                      	pop rbx
 28351 000153EF BE00000000              	mov rsi, 0
 28352                                  .L_lambda_opt_params_loop_0018:	; copy params
 28353 000153F4 4883FE02                	cmp rsi, 2
 28354 000153F8 740E                    	je .L_lambda_opt_params_end_0018
 28355 000153FA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28356 000153FF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28357 00015403 48FFC6                  	inc rsi
 28358 00015406 EBEC                    	jmp .L_lambda_opt_params_loop_0018
 28359                                  .L_lambda_opt_params_end_0018:
 28360 00015408 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28361 0001540B 4889C3                  	mov rbx, rax
 28362 0001540E 58                      	pop rax
 28363 0001540F C60004                  	mov byte [rax], T_closure
 28364 00015412 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28365 00015416 48C74009[23540100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0018
 28366 0001541E E9FE020000              	jmp .L_lambda_opt_end_0018
 28367                                  .L_lambda_opt_code_0018:	; lambda-opt body
 28368 00015423 48837C241000            	cmp qword [rsp + 8 * 2], 0
 28369 00015429 7411                    	je .L_lambda_opt_arity_check_exact_0018
 28370 0001542B 0F8F4D010000            	jg .L_lambda_opt_arity_check_more_0018
 28371 00015431 FF742410                	push qword [rsp + 8 * 2]
 28372 00015435 6A00                    	push 0
 28373 00015437 E955280000              	jmp L_error_incorrect_arity_opt
 28374                                  .L_lambda_opt_arity_check_exact_0018:
 28375 0001543C 4883EC08                	sub rsp, 8
 28376 00015440 488B442408              	mov rax, qword[rsp + 8 *1]
 28377 00015445 48890424                	mov qword[rsp], rax  
 28378 00015449 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 28379 0001544E 4889442408              	mov qword[rsp + 8 * 1], rax
 28380 00015453 B801000000              	mov rax, 1
 28381 00015458 4889442410              	mov qword[rsp + 8 *2], rax
 28382 0001545D 48B8-                   	mov rax, sob_nil
 28382 0001545F [0100000000000000] 
 28383 00015467 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 28384 0001546C C8000000                	enter 0, 0
 28385                                  	; preparing a tail-call
 28386 00015470 488B4520                	mov rax, PARAM(0)	; param vectors
 28387 00015474 50                      	push rax
 28388 00015475 48B8-                   	mov rax, L_constants + 2135
 28388 00015477 [5708000000000000] 
 28389 0001547F 50                      	push rax
 28390                                  	; preparing a non-tail-call
 28391                                  	; preparing a non-tail-call
 28392                                  	; preparing a non-tail-call
 28393 00015480 488B4520                	mov rax, PARAM(0)	; param vectors
 28394 00015484 50                      	push rax
 28395 00015485 488B0425[44170000]      	mov rax, qword [free_var_143]	; free var vector-length
 28396 0001548D 803805                  	cmp byte [rax], T_undefined
 28397 00015490 0F8401270000            	je L_error_fvar_undefined
 28398 00015496 50                      	push rax
 28399 00015497 6A02                    	push 2	; arg count
 28400 00015499 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
 28401 000154A1 803805                  	cmp byte [rax], T_undefined
 28402 000154A4 0F84ED260000            	je L_error_fvar_undefined
 28403 000154AA 803804                  	cmp byte [rax], T_closure
 28404 000154AD 0F8568270000            	jne L_error_non_closure
 28405 000154B3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28406 000154B6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28407 000154B9 50                      	push rax
 28408 000154BA 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 28409 000154C2 803805                  	cmp byte [rax], T_undefined
 28410 000154C5 0F84CC260000            	je L_error_fvar_undefined
 28411 000154CB 50                      	push rax
 28412 000154CC 6A02                    	push 2	; arg count
 28413 000154CE 488B0425[F60F0000]      	mov rax, qword [free_var_33]	; free var apply
 28414 000154D6 803805                  	cmp byte [rax], T_undefined
 28415 000154D9 0F84B8260000            	je L_error_fvar_undefined
 28416 000154DF 803804                  	cmp byte [rax], T_closure
 28417 000154E2 0F8533270000            	jne L_error_non_closure
 28418 000154E8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28419 000154EB FF5009                  	call SOB_CLOSURE_CODE(rax)
 28420 000154EE 50                      	push rax
 28421 000154EF 6A01                    	push 1	; arg count
 28422 000154F1 488B0425[7A140000]      	mov rax, qword [free_var_101]	; free var make-vector
 28423 000154F9 803805                  	cmp byte [rax], T_undefined
 28424 000154FC 0F8495260000            	je L_error_fvar_undefined
 28425 00015502 803804                  	cmp byte [rax], T_closure
 28426 00015505 0F8510270000            	jne L_error_non_closure
 28427 0001550B FF7001                  	push SOB_CLOSURE_ENV(rax)
 28428 0001550E FF5009                  	call SOB_CLOSURE_CODE(rax)
 28429 00015511 50                      	push rax
 28430 00015512 6A03                    	push 3	; arg count
 28431 00015514 488B4510                	mov rax, ENV
 28432 00015518 488B00                  	mov rax, qword [rax + 8 * 0]
 28433 0001551B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 28434 0001551E 488B00                  	mov rax, qword [rax]
 28435 00015521 803804                  	cmp byte [rax], T_closure
 28436 00015524 0F85F1260000            	jne L_error_non_closure
 28437 0001552A FF7001                  	push SOB_CLOSURE_ENV(rax)
 28438 0001552D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 28439 00015530 FF7500                  	push qword[rbp]
 28440 00015533 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 28441 00015536 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 28442 0001553A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 28443 0001553E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 28444 00015542 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 28445 00015545 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 28446 00015548 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 28447 0001554D 4983C103                	add r9, 3 	 ;for getting to the params
 28448 00015551 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 28449 00015555 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 28450                                  .L_tc_recycle_frame_loop_00fc:
 28451 00015558 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 28452 0001555B 7410                    	je .L_tc_recycle_frame_done_00fc
 28453 0001555D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 28454 00015560 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 28455 00015563 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 28456 00015567 4983E808                	sub r8, 8	 ;move the top of the stack one down
 28457 0001556B EBEB                    	jmp .L_tc_recycle_frame_loop_00fc
 28458                                  .L_tc_recycle_frame_done_00fc:
 28459 0001556D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 28460 0001556E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 28461 00015572 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28462 00015575 C9                      	leave
 28463 00015576 C21800                  	ret AND_KILL_FRAME(1)
 28464 00015579 E9A3010000              	jmp .L_lambda_opt_end_0018	; new closure is in rax
 28465                                  .L_lambda_opt_arity_check_more_0018:
 28466 0001557E 488B442410              	mov rax, qword[rsp + 2 * 8]
 28467 00015583 4889C7                  	mov rdi, rax
 28468 00015586 49B9-                   	mov r9, sob_nil
 28468 00015588 [0100000000000000] 
 28469 00015590 4989F8                  	mov r8, rdi
 28470                                  .L_lambda_opt_stack_shrink_loop_0018:
 28471 00015593 4983F800                	cmp r8, 0
 28472 00015597 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_0018
 28473 00015599 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)] 	;rbx is the top of the stack
 28474 0001559E BF11000000              	mov rdi, 1+8+8	;for pair
 28475 000155A3 E81C270000              	call malloc	 ;to create the pair in the stack
 28476 000155A8 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
 28477 000155AB 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
 28478 000155AF 4C894809                 	mov qword[rax+1+8],r9
 28479 000155B3 4989C1                  	mov r9 , rax	 ; for the recursion 
 28480 000155B6 49FFC8                  	dec r8
 28481 000155B9 EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_0018
 28482                                  .L_lambda_opt_stack_shrink_loop_exit_0018:
 28483 000155BB 488B442410              	mov rax, qword[rsp + 2 * 8]
 28484 000155C0 BF01000000              	mov rdi, 1
 28485 000155C5 4829F8                  	sub rax, rdi
 28486 000155C8 4889C7                  	mov rdi, rax
 28487 000155CB 486BC008                	imul rax,8
 28488 000155CF 4801C4                  	add rsp, rax
 28489 000155D2 4889E0                  	mov rax, rsp
 28490 000155D5 4989F8                  	mov r8, rdi
 28491 000155D8 4D6BC008                	imul r8, 8
 28492 000155DC 4C29C0                  	sub rax, r8
 28493 000155DF 4989C2                  	mov r10, rax	; holds the original ret in the stack
 28494 000155E2 4983C218                	add r10, 8*3
 28495 000155E6 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
 28496 000155EA 4C8B00                  	mov r8, qword[rax] 	;arg count = r8
 28497 000155ED 4D6BC008                	imul r8,8
 28498 000155F1 4C01C0                  	add rax, r8
 28499 000155F4 4C8908                  	mov qword[rax] ,r9
 28500 000155F7 4983EA18                 	sub r10, 8*3
 28501 000155FB 48C744241001000000      	mov qword [rsp+2*8], 1
 28502 00015604 498B4208                	mov rax, qword[r10 + 1 * 8]
 28503 00015608 4889442408              	mov qword[rsp + 1*8] ,rax
 28504 0001560D 498B02                  	mov rax, qword[r10]
 28505 00015610 48890424                	mov qword[rsp], rax
 28506 00015614 C8000000                	enter 0, 0
 28507                                  	; preparing a tail-call
 28508 00015618 488B4520                	mov rax, PARAM(0)	; param vectors
 28509 0001561C 50                      	push rax
 28510 0001561D 48B8-                   	mov rax, L_constants + 2135
 28510 0001561F [5708000000000000] 
 28511 00015627 50                      	push rax
 28512                                  	; preparing a non-tail-call
 28513                                  	; preparing a non-tail-call
 28514                                  	; preparing a non-tail-call
 28515 00015628 488B4520                	mov rax, PARAM(0)	; param vectors
 28516 0001562C 50                      	push rax
 28517 0001562D 488B0425[44170000]      	mov rax, qword [free_var_143]	; free var vector-length
 28518 00015635 803805                  	cmp byte [rax], T_undefined
 28519 00015638 0F8459250000            	je L_error_fvar_undefined
 28520 0001563E 50                      	push rax
 28521 0001563F 6A02                    	push 2	; arg count
 28522 00015641 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
 28523 00015649 803805                  	cmp byte [rax], T_undefined
 28524 0001564C 0F8445250000            	je L_error_fvar_undefined
 28525 00015652 803804                  	cmp byte [rax], T_closure
 28526 00015655 0F85C0250000            	jne L_error_non_closure
 28527 0001565B FF7001                  	push SOB_CLOSURE_ENV(rax)
 28528 0001565E FF5009                  	call SOB_CLOSURE_CODE(rax)
 28529 00015661 50                      	push rax
 28530 00015662 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 28531 0001566A 803805                  	cmp byte [rax], T_undefined
 28532 0001566D 0F8424250000            	je L_error_fvar_undefined
 28533 00015673 50                      	push rax
 28534 00015674 6A02                    	push 2	; arg count
 28535 00015676 488B0425[F60F0000]      	mov rax, qword [free_var_33]	; free var apply
 28536 0001567E 803805                  	cmp byte [rax], T_undefined
 28537 00015681 0F8410250000            	je L_error_fvar_undefined
 28538 00015687 803804                  	cmp byte [rax], T_closure
 28539 0001568A 0F858B250000            	jne L_error_non_closure
 28540 00015690 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28541 00015693 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28542 00015696 50                      	push rax
 28543 00015697 6A01                    	push 1	; arg count
 28544 00015699 488B0425[7A140000]      	mov rax, qword [free_var_101]	; free var make-vector
 28545 000156A1 803805                  	cmp byte [rax], T_undefined
 28546 000156A4 0F84ED240000            	je L_error_fvar_undefined
 28547 000156AA 803804                  	cmp byte [rax], T_closure
 28548 000156AD 0F8568250000            	jne L_error_non_closure
 28549 000156B3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28550 000156B6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28551 000156B9 50                      	push rax
 28552 000156BA 6A03                    	push 3	; arg count
 28553 000156BC 488B4510                	mov rax, ENV
 28554 000156C0 488B00                  	mov rax, qword [rax + 8 * 0]
 28555 000156C3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 28556 000156C6 488B00                  	mov rax, qword [rax]
 28557 000156C9 803804                  	cmp byte [rax], T_closure
 28558 000156CC 0F8549250000            	jne L_error_non_closure
 28559 000156D2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28560 000156D5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 28561 000156D8 FF7500                  	push qword[rbp]
 28562 000156DB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 28563 000156DE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 28564 000156E2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 28565 000156E6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 28566 000156EA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 28567 000156ED 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 28568 000156F0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 28569 000156F5 4983C103                	add r9, 3 	 ;for getting to the params
 28570 000156F9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 28571 000156FD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 28572                                  .L_tc_recycle_frame_loop_00fb:
 28573 00015700 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 28574 00015703 7410                    	je .L_tc_recycle_frame_done_00fb
 28575 00015705 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 28576 00015708 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 28577 0001570B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 28578 0001570F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 28579 00015713 EBEB                    	jmp .L_tc_recycle_frame_loop_00fb
 28580                                  .L_tc_recycle_frame_done_00fb:
 28581 00015715 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 28582 00015716 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 28583 0001571A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28584 0001571D C9                      	leave
 28585 0001571E C21800                  	ret AND_KILL_FRAME(1)
 28586                                  .L_lambda_opt_end_0018:	; new closure is in rax
 28587 00015721 C9                      	leave
 28588 00015722 C22000                  	ret AND_KILL_FRAME(2)
 28589                                  .L_lambda_simple_end_00a6:	; new closure is in rax
 28590 00015725 803804                  	cmp byte [rax], T_closure
 28591 00015728 0F85ED240000            	jne L_error_non_closure
 28592 0001572E FF7001                  	push SOB_CLOSURE_ENV(rax)
 28593 00015731 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28594 00015734 48890425[33170000]      	mov qword [free_var_142], rax
 28595 0001573C 48B8-                   	mov rax, sob_void
 28595 0001573E [0000000000000000] 
 28596                                  
 28597 00015746 4889C7                  	mov rdi, rax
 28598 00015749 E8CB270000              	call print_sexpr_if_not_void
 28599 0001574E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28600 00015753 E86C250000              	call malloc
 28601 00015758 50                      	push rax
 28602 00015759 BF00000000              	mov rdi, 8 * 0	; new rib
 28603 0001575E E861250000              	call malloc
 28604 00015763 50                      	push rax
 28605 00015764 BF08000000              	mov rdi, 8 * 1	; extended env
 28606 00015769 E856250000              	call malloc
 28607 0001576E 488B7D10                	mov rdi, ENV
 28608 00015772 BE00000000              	mov rsi, 0
 28609 00015777 BA01000000              	mov rdx, 1
 28610                                  .L_lambda_simple_env_loop_00aa:	; ext_env[i + 1] <-- env[i]
 28611 0001577C 4883FE00                	cmp rsi, 0
 28612 00015780 7410                    	je .L_lambda_simple_env_end_00aa
 28613 00015782 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28614 00015786 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28615 0001578A 48FFC6                  	inc rsi
 28616 0001578D 48FFC2                  	inc rdx
 28617 00015790 EBEA                    	jmp .L_lambda_simple_env_loop_00aa
 28618                                  .L_lambda_simple_env_end_00aa:
 28619 00015792 5B                      	pop rbx
 28620 00015793 BE00000000              	mov rsi, 0
 28621                                  .L_lambda_simple_params_loop_00aa:	; copy params
 28622 00015798 4883FE00                	cmp rsi, 0
 28623 0001579C 740E                    	je .L_lambda_simple_params_end_00aa
 28624 0001579E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28625 000157A3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28626 000157A7 48FFC6                  	inc rsi
 28627 000157AA EBEC                    	jmp .L_lambda_simple_params_loop_00aa
 28628                                  .L_lambda_simple_params_end_00aa:
 28629 000157AC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28630 000157AF 4889C3                  	mov rbx, rax
 28631 000157B2 58                      	pop rax
 28632 000157B3 C60004                  	mov byte [rax], T_closure
 28633 000157B6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28634 000157BA 48C74009[C7570100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00aa
 28635 000157C2 E9CD000000              	jmp .L_lambda_simple_end_00aa
 28636                                  .L_lambda_simple_code_00aa:	; lambda-simple body
 28637 000157C7 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28638 000157CD 740B                    	je .L_lambda_simple_arity_check_ok_00aa
 28639 000157CF FF742410                	push qword [rsp + 8 * 2]
 28640 000157D3 6A01                    	push 1
 28641 000157D5 E9A3240000              	jmp L_error_incorrect_arity_simple
 28642                                  .L_lambda_simple_arity_check_ok_00aa:
 28643 000157DA C8000000                	enter 0, 0
 28644                                  	; preparing a tail-call
 28645                                  	; preparing a non-tail-call
 28646                                  	; preparing a non-tail-call
 28647 000157DE 488B4520                	mov rax, PARAM(0)	; param str
 28648 000157E2 50                      	push rax
 28649 000157E3 6A01                    	push 1	; arg count
 28650 000157E5 488B0425[AC150000]      	mov rax, qword [free_var_119]	; free var string->list
 28651 000157ED 803805                  	cmp byte [rax], T_undefined
 28652 000157F0 0F84A1230000            	je L_error_fvar_undefined
 28653 000157F6 803804                  	cmp byte [rax], T_closure
 28654 000157F9 0F851C240000            	jne L_error_non_closure
 28655 000157FF FF7001                  	push SOB_CLOSURE_ENV(rax)
 28656 00015802 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28657 00015805 50                      	push rax
 28658 00015806 6A01                    	push 1	; arg count
 28659 00015808 488B0425[9B150000]      	mov rax, qword [free_var_118]	; free var reverse
 28660 00015810 803805                  	cmp byte [rax], T_undefined
 28661 00015813 0F847E230000            	je L_error_fvar_undefined
 28662 00015819 803804                  	cmp byte [rax], T_closure
 28663 0001581C 0F85F9230000            	jne L_error_non_closure
 28664 00015822 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28665 00015825 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28666 00015828 50                      	push rax
 28667 00015829 6A01                    	push 1	; arg count
 28668 0001582B 488B0425[03140000]      	mov rax, qword [free_var_94]	; free var list->string
 28669 00015833 803805                  	cmp byte [rax], T_undefined
 28670 00015836 0F845B230000            	je L_error_fvar_undefined
 28671 0001583C 803804                  	cmp byte [rax], T_closure
 28672 0001583F 0F85D6230000            	jne L_error_non_closure
 28673 00015845 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28674 00015848 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 28675 0001584B FF7500                  	push qword[rbp]
 28676 0001584E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 28677 00015851 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 28678 00015855 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 28679 00015859 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 28680 0001585D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 28681 00015860 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 28682 00015863 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 28683 00015868 4983C103                	add r9, 3 	 ;for getting to the params
 28684 0001586C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 28685 00015870 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 28686                                  .L_tc_recycle_frame_loop_00fd:
 28687 00015873 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 28688 00015876 7410                    	je .L_tc_recycle_frame_done_00fd
 28689 00015878 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 28690 0001587B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 28691 0001587E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 28692 00015882 4983E808                	sub r8, 8	 ;move the top of the stack one down
 28693 00015886 EBEB                    	jmp .L_tc_recycle_frame_loop_00fd
 28694                                  .L_tc_recycle_frame_done_00fd:
 28695 00015888 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 28696 00015889 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 28697 0001588D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28698 00015890 C9                      	leave
 28699 00015891 C21800                  	ret AND_KILL_FRAME(1)
 28700                                  .L_lambda_simple_end_00aa:	; new closure is in rax
 28701 00015894 48890425[56160000]      	mov qword [free_var_129], rax
 28702 0001589C 48B8-                   	mov rax, sob_void
 28702 0001589E [0000000000000000] 
 28703                                  
 28704 000158A6 4889C7                  	mov rdi, rax
 28705 000158A9 E86B260000              	call print_sexpr_if_not_void
 28706 000158AE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28707 000158B3 E80C240000              	call malloc
 28708 000158B8 50                      	push rax
 28709 000158B9 BF00000000              	mov rdi, 8 * 0	; new rib
 28710 000158BE E801240000              	call malloc
 28711 000158C3 50                      	push rax
 28712 000158C4 BF08000000              	mov rdi, 8 * 1	; extended env
 28713 000158C9 E8F6230000              	call malloc
 28714 000158CE 488B7D10                	mov rdi, ENV
 28715 000158D2 BE00000000              	mov rsi, 0
 28716 000158D7 BA01000000              	mov rdx, 1
 28717                                  .L_lambda_simple_env_loop_00ab:	; ext_env[i + 1] <-- env[i]
 28718 000158DC 4883FE00                	cmp rsi, 0
 28719 000158E0 7410                    	je .L_lambda_simple_env_end_00ab
 28720 000158E2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28721 000158E6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28722 000158EA 48FFC6                  	inc rsi
 28723 000158ED 48FFC2                  	inc rdx
 28724 000158F0 EBEA                    	jmp .L_lambda_simple_env_loop_00ab
 28725                                  .L_lambda_simple_env_end_00ab:
 28726 000158F2 5B                      	pop rbx
 28727 000158F3 BE00000000              	mov rsi, 0
 28728                                  .L_lambda_simple_params_loop_00ab:	; copy params
 28729 000158F8 4883FE00                	cmp rsi, 0
 28730 000158FC 740E                    	je .L_lambda_simple_params_end_00ab
 28731 000158FE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28732 00015903 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28733 00015907 48FFC6                  	inc rsi
 28734 0001590A EBEC                    	jmp .L_lambda_simple_params_loop_00ab
 28735                                  .L_lambda_simple_params_end_00ab:
 28736 0001590C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28737 0001590F 4889C3                  	mov rbx, rax
 28738 00015912 58                      	pop rax
 28739 00015913 C60004                  	mov byte [rax], T_closure
 28740 00015916 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28741 0001591A 48C74009[27590100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ab
 28742 00015922 E9CD000000              	jmp .L_lambda_simple_end_00ab
 28743                                  .L_lambda_simple_code_00ab:	; lambda-simple body
 28744 00015927 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28745 0001592D 740B                    	je .L_lambda_simple_arity_check_ok_00ab
 28746 0001592F FF742410                	push qword [rsp + 8 * 2]
 28747 00015933 6A01                    	push 1
 28748 00015935 E943230000              	jmp L_error_incorrect_arity_simple
 28749                                  .L_lambda_simple_arity_check_ok_00ab:
 28750 0001593A C8000000                	enter 0, 0
 28751                                  	; preparing a tail-call
 28752                                  	; preparing a non-tail-call
 28753                                  	; preparing a non-tail-call
 28754 0001593E 488B4520                	mov rax, PARAM(0)	; param vec
 28755 00015942 50                      	push rax
 28756 00015943 6A01                    	push 1	; arg count
 28757 00015945 488B0425[22170000]      	mov rax, qword [free_var_141]	; free var vector->list
 28758 0001594D 803805                  	cmp byte [rax], T_undefined
 28759 00015950 0F8441220000            	je L_error_fvar_undefined
 28760 00015956 803804                  	cmp byte [rax], T_closure
 28761 00015959 0F85BC220000            	jne L_error_non_closure
 28762 0001595F FF7001                  	push SOB_CLOSURE_ENV(rax)
 28763 00015962 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28764 00015965 50                      	push rax
 28765 00015966 6A01                    	push 1	; arg count
 28766 00015968 488B0425[9B150000]      	mov rax, qword [free_var_118]	; free var reverse
 28767 00015970 803805                  	cmp byte [rax], T_undefined
 28768 00015973 0F841E220000            	je L_error_fvar_undefined
 28769 00015979 803804                  	cmp byte [rax], T_closure
 28770 0001597C 0F8599220000            	jne L_error_non_closure
 28771 00015982 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28772 00015985 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28773 00015988 50                      	push rax
 28774 00015989 6A01                    	push 1	; arg count
 28775 0001598B 488B0425[14140000]      	mov rax, qword [free_var_95]	; free var list->vector
 28776 00015993 803805                  	cmp byte [rax], T_undefined
 28777 00015996 0F84FB210000            	je L_error_fvar_undefined
 28778 0001599C 803804                  	cmp byte [rax], T_closure
 28779 0001599F 0F8576220000            	jne L_error_non_closure
 28780 000159A5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28781 000159A8 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 28782 000159AB FF7500                  	push qword[rbp]
 28783 000159AE 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 28784 000159B1 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 28785 000159B5 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 28786 000159B9 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 28787 000159BD 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 28788 000159C0 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 28789 000159C3 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 28790 000159C8 4983C103                	add r9, 3 	 ;for getting to the params
 28791 000159CC 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 28792 000159D0 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 28793                                  .L_tc_recycle_frame_loop_00fe:
 28794 000159D3 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 28795 000159D6 7410                    	je .L_tc_recycle_frame_done_00fe
 28796 000159D8 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 28797 000159DB 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 28798 000159DE 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 28799 000159E2 4983E808                	sub r8, 8	 ;move the top of the stack one down
 28800 000159E6 EBEB                    	jmp .L_tc_recycle_frame_loop_00fe
 28801                                  .L_tc_recycle_frame_done_00fe:
 28802 000159E8 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 28803 000159E9 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 28804 000159ED FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28805 000159F0 C9                      	leave
 28806 000159F1 C21800                  	ret AND_KILL_FRAME(1)
 28807                                  .L_lambda_simple_end_00ab:	; new closure is in rax
 28808 000159F4 48890425[66170000]      	mov qword [free_var_145], rax
 28809 000159FC 48B8-                   	mov rax, sob_void
 28809 000159FE [0000000000000000] 
 28810                                  
 28811 00015A06 4889C7                  	mov rdi, rax
 28812 00015A09 E80B250000              	call print_sexpr_if_not_void
 28813                                  	; preparing a non-tail-call
 28814 00015A0E 48B8-                   	mov rax, L_constants + 1993
 28814 00015A10 [C907000000000000] 
 28815 00015A18 50                      	push rax
 28816 00015A19 6A01                    	push 1	; arg count
 28817 00015A1B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28818 00015A20 E89F220000              	call malloc
 28819 00015A25 50                      	push rax
 28820 00015A26 BF00000000              	mov rdi, 8 * 0	; new rib
 28821 00015A2B E894220000              	call malloc
 28822 00015A30 50                      	push rax
 28823 00015A31 BF08000000              	mov rdi, 8 * 1	; extended env
 28824 00015A36 E889220000              	call malloc
 28825 00015A3B 488B7D10                	mov rdi, ENV
 28826 00015A3F BE00000000              	mov rsi, 0
 28827 00015A44 BA01000000              	mov rdx, 1
 28828                                  .L_lambda_simple_env_loop_00ac:	; ext_env[i + 1] <-- env[i]
 28829 00015A49 4883FE00                	cmp rsi, 0
 28830 00015A4D 7410                    	je .L_lambda_simple_env_end_00ac
 28831 00015A4F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28832 00015A53 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28833 00015A57 48FFC6                  	inc rsi
 28834 00015A5A 48FFC2                  	inc rdx
 28835 00015A5D EBEA                    	jmp .L_lambda_simple_env_loop_00ac
 28836                                  .L_lambda_simple_env_end_00ac:
 28837 00015A5F 5B                      	pop rbx
 28838 00015A60 BE00000000              	mov rsi, 0
 28839                                  .L_lambda_simple_params_loop_00ac:	; copy params
 28840 00015A65 4883FE00                	cmp rsi, 0
 28841 00015A69 740E                    	je .L_lambda_simple_params_end_00ac
 28842 00015A6B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28843 00015A70 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28844 00015A74 48FFC6                  	inc rsi
 28845 00015A77 EBEC                    	jmp .L_lambda_simple_params_loop_00ac
 28846                                  .L_lambda_simple_params_end_00ac:
 28847 00015A79 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28848 00015A7C 4889C3                  	mov rbx, rax
 28849 00015A7F 58                      	pop rax
 28850 00015A80 C60004                  	mov byte [rax], T_closure
 28851 00015A83 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28852 00015A87 48C74009[945A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ac
 28853 00015A8F E959060000              	jmp .L_lambda_simple_end_00ac
 28854                                  .L_lambda_simple_code_00ac:	; lambda-simple body
 28855 00015A94 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28856 00015A9A 740B                    	je .L_lambda_simple_arity_check_ok_00ac
 28857 00015A9C FF742410                	push qword [rsp + 8 * 2]
 28858 00015AA0 6A01                    	push 1
 28859 00015AA2 E9D6210000              	jmp L_error_incorrect_arity_simple
 28860                                  .L_lambda_simple_arity_check_ok_00ac:
 28861 00015AA7 C8000000                	enter 0, 0
 28862 00015AAB BF08000000              	mov rdi, 8*1
 28863 00015AB0 E80F220000              	call malloc
 28864 00015AB5 488B5D20                	mov rbx, PARAM(0)
 28865 00015AB9 488918                  	mov qword[rax], rbx
 28866 00015ABC 48894520                	mov PARAM(0), rax
 28867 00015AC0 48B8-                   	mov rax, sob_void
 28867 00015AC2 [0000000000000000] 
 28868                                  
 28869 00015ACA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28870 00015ACF E8F0210000              	call malloc
 28871 00015AD4 50                      	push rax
 28872 00015AD5 BF08000000              	mov rdi, 8 * 1	; new rib
 28873 00015ADA E8E5210000              	call malloc
 28874 00015ADF 50                      	push rax
 28875 00015AE0 BF10000000              	mov rdi, 8 * 2	; extended env
 28876 00015AE5 E8DA210000              	call malloc
 28877 00015AEA 488B7D10                	mov rdi, ENV
 28878 00015AEE BE00000000              	mov rsi, 0
 28879 00015AF3 BA01000000              	mov rdx, 1
 28880                                  .L_lambda_simple_env_loop_00ad:	; ext_env[i + 1] <-- env[i]
 28881 00015AF8 4883FE01                	cmp rsi, 1
 28882 00015AFC 7410                    	je .L_lambda_simple_env_end_00ad
 28883 00015AFE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28884 00015B02 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28885 00015B06 48FFC6                  	inc rsi
 28886 00015B09 48FFC2                  	inc rdx
 28887 00015B0C EBEA                    	jmp .L_lambda_simple_env_loop_00ad
 28888                                  .L_lambda_simple_env_end_00ad:
 28889 00015B0E 5B                      	pop rbx
 28890 00015B0F BE00000000              	mov rsi, 0
 28891                                  .L_lambda_simple_params_loop_00ad:	; copy params
 28892 00015B14 4883FE01                	cmp rsi, 1
 28893 00015B18 740E                    	je .L_lambda_simple_params_end_00ad
 28894 00015B1A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28895 00015B1F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28896 00015B23 48FFC6                  	inc rsi
 28897 00015B26 EBEC                    	jmp .L_lambda_simple_params_loop_00ad
 28898                                  .L_lambda_simple_params_end_00ad:
 28899 00015B28 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28900 00015B2B 4889C3                  	mov rbx, rax
 28901 00015B2E 58                      	pop rax
 28902 00015B2F C60004                  	mov byte [rax], T_closure
 28903 00015B32 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28904 00015B36 48C74009[435B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ad
 28905 00015B3E E904030000              	jmp .L_lambda_simple_end_00ad
 28906                                  .L_lambda_simple_code_00ad:	; lambda-simple body
 28907 00015B43 48837C241003            	cmp qword [rsp + 8 * 2], 3
 28908 00015B49 740B                    	je .L_lambda_simple_arity_check_ok_00ad
 28909 00015B4B FF742410                	push qword [rsp + 8 * 2]
 28910 00015B4F 6A03                    	push 3
 28911 00015B51 E927210000              	jmp L_error_incorrect_arity_simple
 28912                                  .L_lambda_simple_arity_check_ok_00ad:
 28913 00015B56 C8000000                	enter 0, 0
 28914                                  	; preparing a non-tail-call
 28915 00015B5A 488B4530                	mov rax, PARAM(2)	; param j
 28916 00015B5E 50                      	push rax
 28917 00015B5F 488B4528                	mov rax, PARAM(1)	; param i
 28918 00015B63 50                      	push rax
 28919 00015B64 6A02                    	push 2	; arg count
 28920 00015B66 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 28921 00015B6E 803805                  	cmp byte [rax], T_undefined
 28922 00015B71 0F8420200000            	je L_error_fvar_undefined
 28923 00015B77 803804                  	cmp byte [rax], T_closure
 28924 00015B7A 0F859B200000            	jne L_error_non_closure
 28925 00015B80 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28926 00015B83 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28927 00015B86 483D[02000000]          	cmp rax, sob_boolean_false
 28928 00015B8C 0F84AD020000            	je .L_if_else_008d
 28929                                  	; preparing a tail-call
 28930                                  	; preparing a non-tail-call
 28931 00015B92 488B4528                	mov rax, PARAM(1)	; param i
 28932 00015B96 50                      	push rax
 28933 00015B97 488B4520                	mov rax, PARAM(0)	; param str
 28934 00015B9B 50                      	push rax
 28935 00015B9C 6A02                    	push 2	; arg count
 28936 00015B9E 488B0425[45160000]      	mov rax, qword [free_var_128]	; free var string-ref
 28937 00015BA6 803805                  	cmp byte [rax], T_undefined
 28938 00015BA9 0F84E81F0000            	je L_error_fvar_undefined
 28939 00015BAF 803804                  	cmp byte [rax], T_closure
 28940 00015BB2 0F8563200000            	jne L_error_non_closure
 28941 00015BB8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28942 00015BBB FF5009                  	call SOB_CLOSURE_CODE(rax)
 28943 00015BBE 50                      	push rax
 28944 00015BBF 6A01                    	push 1	; arg count
 28945 00015BC1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28946 00015BC6 E8F9200000              	call malloc
 28947 00015BCB 50                      	push rax
 28948 00015BCC BF18000000              	mov rdi, 8 * 3	; new rib
 28949 00015BD1 E8EE200000              	call malloc
 28950 00015BD6 50                      	push rax
 28951 00015BD7 BF18000000              	mov rdi, 8 * 3	; extended env
 28952 00015BDC E8E3200000              	call malloc
 28953 00015BE1 488B7D10                	mov rdi, ENV
 28954 00015BE5 BE00000000              	mov rsi, 0
 28955 00015BEA BA01000000              	mov rdx, 1
 28956                                  .L_lambda_simple_env_loop_00ae:	; ext_env[i + 1] <-- env[i]
 28957 00015BEF 4883FE02                	cmp rsi, 2
 28958 00015BF3 7410                    	je .L_lambda_simple_env_end_00ae
 28959 00015BF5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28960 00015BF9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28961 00015BFD 48FFC6                  	inc rsi
 28962 00015C00 48FFC2                  	inc rdx
 28963 00015C03 EBEA                    	jmp .L_lambda_simple_env_loop_00ae
 28964                                  .L_lambda_simple_env_end_00ae:
 28965 00015C05 5B                      	pop rbx
 28966 00015C06 BE00000000              	mov rsi, 0
 28967                                  .L_lambda_simple_params_loop_00ae:	; copy params
 28968 00015C0B 4883FE03                	cmp rsi, 3
 28969 00015C0F 740E                    	je .L_lambda_simple_params_end_00ae
 28970 00015C11 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28971 00015C16 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28972 00015C1A 48FFC6                  	inc rsi
 28973 00015C1D EBEC                    	jmp .L_lambda_simple_params_loop_00ae
 28974                                  .L_lambda_simple_params_end_00ae:
 28975 00015C1F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28976 00015C22 4889C3                  	mov rbx, rax
 28977 00015C25 58                      	pop rax
 28978 00015C26 C60004                  	mov byte [rax], T_closure
 28979 00015C29 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28980 00015C2D 48C74009[3A5C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ae
 28981 00015C35 E9AF010000              	jmp .L_lambda_simple_end_00ae
 28982                                  .L_lambda_simple_code_00ae:	; lambda-simple body
 28983 00015C3A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28984 00015C40 740B                    	je .L_lambda_simple_arity_check_ok_00ae
 28985 00015C42 FF742410                	push qword [rsp + 8 * 2]
 28986 00015C46 6A01                    	push 1
 28987 00015C48 E930200000              	jmp L_error_incorrect_arity_simple
 28988                                  .L_lambda_simple_arity_check_ok_00ae:
 28989 00015C4D C8000000                	enter 0, 0
 28990                                  	; preparing a non-tail-call
 28991                                  	; preparing a non-tail-call
 28992 00015C51 488B4510                	mov rax, ENV
 28993 00015C55 488B00                  	mov rax, qword [rax + 8 * 0]
 28994 00015C58 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 28995 00015C5C 50                      	push rax
 28996 00015C5D 488B4510                	mov rax, ENV
 28997 00015C61 488B00                  	mov rax, qword [rax + 8 * 0]
 28998 00015C64 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 28999 00015C67 50                      	push rax
 29000 00015C68 6A02                    	push 2	; arg count
 29001 00015C6A 488B0425[45160000]      	mov rax, qword [free_var_128]	; free var string-ref
 29002 00015C72 803805                  	cmp byte [rax], T_undefined
 29003 00015C75 0F841C1F0000            	je L_error_fvar_undefined
 29004 00015C7B 803804                  	cmp byte [rax], T_closure
 29005 00015C7E 0F85971F0000            	jne L_error_non_closure
 29006 00015C84 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29007 00015C87 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29008 00015C8A 50                      	push rax
 29009 00015C8B 488B4510                	mov rax, ENV
 29010 00015C8F 488B00                  	mov rax, qword [rax + 8 * 0]
 29011 00015C92 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 29012 00015C96 50                      	push rax
 29013 00015C97 488B4510                	mov rax, ENV
 29014 00015C9B 488B00                  	mov rax, qword [rax + 8 * 0]
 29015 00015C9E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 29016 00015CA1 50                      	push rax
 29017 00015CA2 6A03                    	push 3	; arg count
 29018 00015CA4 488B0425[78160000]      	mov rax, qword [free_var_131]	; free var string-set!
 29019 00015CAC 803805                  	cmp byte [rax], T_undefined
 29020 00015CAF 0F84E21E0000            	je L_error_fvar_undefined
 29021 00015CB5 803804                  	cmp byte [rax], T_closure
 29022 00015CB8 0F855D1F0000            	jne L_error_non_closure
 29023 00015CBE FF7001                  	push SOB_CLOSURE_ENV(rax)
 29024 00015CC1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29025                                  
 29026                                  	; preparing a non-tail-call
 29027 00015CC4 488B4520                	mov rax, PARAM(0)	; param ch
 29028 00015CC8 50                      	push rax
 29029 00015CC9 488B4510                	mov rax, ENV
 29030 00015CCD 488B00                  	mov rax, qword [rax + 8 * 0]
 29031 00015CD0 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 29032 00015CD4 50                      	push rax
 29033 00015CD5 488B4510                	mov rax, ENV
 29034 00015CD9 488B00                  	mov rax, qword [rax + 8 * 0]
 29035 00015CDC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 29036 00015CDF 50                      	push rax
 29037 00015CE0 6A03                    	push 3	; arg count
 29038 00015CE2 488B0425[78160000]      	mov rax, qword [free_var_131]	; free var string-set!
 29039 00015CEA 803805                  	cmp byte [rax], T_undefined
 29040 00015CED 0F84A41E0000            	je L_error_fvar_undefined
 29041 00015CF3 803804                  	cmp byte [rax], T_closure
 29042 00015CF6 0F851F1F0000            	jne L_error_non_closure
 29043 00015CFC FF7001                  	push SOB_CLOSURE_ENV(rax)
 29044 00015CFF FF5009                  	call SOB_CLOSURE_CODE(rax)
 29045                                  
 29046                                  	; preparing a tail-call
 29047                                  	; preparing a non-tail-call
 29048 00015D02 48B8-                   	mov rax, L_constants + 2270
 29048 00015D04 [DE08000000000000] 
 29049 00015D0C 50                      	push rax
 29050 00015D0D 488B4510                	mov rax, ENV
 29051 00015D11 488B00                  	mov rax, qword [rax + 8 * 0]
 29052 00015D14 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 29053 00015D18 50                      	push rax
 29054 00015D19 6A02                    	push 2	; arg count
 29055 00015D1B 488B0425[E70D0000]      	mov rax, qword [free_var_2]	; free var -
 29056 00015D23 803805                  	cmp byte [rax], T_undefined
 29057 00015D26 0F846B1E0000            	je L_error_fvar_undefined
 29058 00015D2C 803804                  	cmp byte [rax], T_closure
 29059 00015D2F 0F85E61E0000            	jne L_error_non_closure
 29060 00015D35 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29061 00015D38 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29062 00015D3B 50                      	push rax
 29063                                  	; preparing a non-tail-call
 29064 00015D3C 48B8-                   	mov rax, L_constants + 2270
 29064 00015D3E [DE08000000000000] 
 29065 00015D46 50                      	push rax
 29066 00015D47 488B4510                	mov rax, ENV
 29067 00015D4B 488B00                  	mov rax, qword [rax + 8 * 0]
 29068 00015D4E 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 29069 00015D52 50                      	push rax
 29070 00015D53 6A02                    	push 2	; arg count
 29071 00015D55 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 29072 00015D5D 803805                  	cmp byte [rax], T_undefined
 29073 00015D60 0F84311E0000            	je L_error_fvar_undefined
 29074 00015D66 803804                  	cmp byte [rax], T_closure
 29075 00015D69 0F85AC1E0000            	jne L_error_non_closure
 29076 00015D6F FF7001                  	push SOB_CLOSURE_ENV(rax)
 29077 00015D72 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29078 00015D75 50                      	push rax
 29079 00015D76 488B4510                	mov rax, ENV
 29080 00015D7A 488B00                  	mov rax, qword [rax + 8 * 0]
 29081 00015D7D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 29082 00015D80 50                      	push rax
 29083 00015D81 6A03                    	push 3	; arg count
 29084 00015D83 488B4510                	mov rax, ENV
 29085 00015D87 488B4008                	mov rax, qword [rax + 8 * 1]
 29086 00015D8B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 29087 00015D8E 488B00                  	mov rax, qword [rax]
 29088 00015D91 803804                  	cmp byte [rax], T_closure
 29089 00015D94 0F85811E0000            	jne L_error_non_closure
 29090 00015D9A FF7001                  	push SOB_CLOSURE_ENV(rax)
 29091 00015D9D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 29092 00015DA0 FF7500                  	push qword[rbp]
 29093 00015DA3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 29094 00015DA6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 29095 00015DAA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 29096 00015DAE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 29097 00015DB2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 29098 00015DB5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 29099 00015DB8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 29100 00015DBD 4983C103                	add r9, 3 	 ;for getting to the params
 29101 00015DC1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 29102 00015DC5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 29103                                  .L_tc_recycle_frame_loop_00ff:
 29104 00015DC8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 29105 00015DCB 7410                    	je .L_tc_recycle_frame_done_00ff
 29106 00015DCD 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 29107 00015DD0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 29108 00015DD3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 29109 00015DD7 4983E808                	sub r8, 8	 ;move the top of the stack one down
 29110 00015DDB EBEB                    	jmp .L_tc_recycle_frame_loop_00ff
 29111                                  .L_tc_recycle_frame_done_00ff:
 29112 00015DDD 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 29113 00015DDE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 29114 00015DE2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29115 00015DE5 C9                      	leave
 29116 00015DE6 C21800                  	ret AND_KILL_FRAME(1)
 29117                                  .L_lambda_simple_end_00ae:	; new closure is in rax
 29118 00015DE9 803804                  	cmp byte [rax], T_closure
 29119 00015DEC 0F85291E0000            	jne L_error_non_closure
 29120 00015DF2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29121 00015DF5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 29122 00015DF8 FF7500                  	push qword[rbp]
 29123 00015DFB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 29124 00015DFE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 29125 00015E02 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 29126 00015E06 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 29127 00015E0A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 29128 00015E0D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 29129 00015E10 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 29130 00015E15 4983C103                	add r9, 3 	 ;for getting to the params
 29131 00015E19 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 29132 00015E1D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 29133                                  .L_tc_recycle_frame_loop_0100:
 29134 00015E20 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 29135 00015E23 7410                    	je .L_tc_recycle_frame_done_0100
 29136 00015E25 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 29137 00015E28 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 29138 00015E2B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 29139 00015E2F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 29140 00015E33 EBEB                    	jmp .L_tc_recycle_frame_loop_0100
 29141                                  .L_tc_recycle_frame_done_0100:
 29142 00015E35 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 29143 00015E36 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 29144 00015E3A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29145 00015E3D EB04                    	jmp .L_if_end_008d
 29146                                  .L_if_else_008d:
 29147 00015E3F 488B4520                	mov rax, PARAM(0)	; param str
 29148                                  .L_if_end_008d:
 29149 00015E43 C9                      	leave
 29150 00015E44 C22800                  	ret AND_KILL_FRAME(3)
 29151                                  .L_lambda_simple_end_00ad:	; new closure is in rax
 29152 00015E47 50                      	push rax
 29153 00015E48 488B4520                	mov rax, PARAM(0)	; param run
 29154 00015E4C 8F00                    	pop qword [rax]
 29155 00015E4E 48B8-                   	mov rax, sob_void
 29155 00015E50 [0000000000000000] 
 29156                                  
 29157 00015E58 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29158 00015E5D E8621E0000              	call malloc
 29159 00015E62 50                      	push rax
 29160 00015E63 BF08000000              	mov rdi, 8 * 1	; new rib
 29161 00015E68 E8571E0000              	call malloc
 29162 00015E6D 50                      	push rax
 29163 00015E6E BF10000000              	mov rdi, 8 * 2	; extended env
 29164 00015E73 E84C1E0000              	call malloc
 29165 00015E78 488B7D10                	mov rdi, ENV
 29166 00015E7C BE00000000              	mov rsi, 0
 29167 00015E81 BA01000000              	mov rdx, 1
 29168                                  .L_lambda_simple_env_loop_00af:	; ext_env[i + 1] <-- env[i]
 29169 00015E86 4883FE01                	cmp rsi, 1
 29170 00015E8A 7410                    	je .L_lambda_simple_env_end_00af
 29171 00015E8C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29172 00015E90 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29173 00015E94 48FFC6                  	inc rsi
 29174 00015E97 48FFC2                  	inc rdx
 29175 00015E9A EBEA                    	jmp .L_lambda_simple_env_loop_00af
 29176                                  .L_lambda_simple_env_end_00af:
 29177 00015E9C 5B                      	pop rbx
 29178 00015E9D BE00000000              	mov rsi, 0
 29179                                  .L_lambda_simple_params_loop_00af:	; copy params
 29180 00015EA2 4883FE01                	cmp rsi, 1
 29181 00015EA6 740E                    	je .L_lambda_simple_params_end_00af
 29182 00015EA8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29183 00015EAD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29184 00015EB1 48FFC6                  	inc rsi
 29185 00015EB4 EBEC                    	jmp .L_lambda_simple_params_loop_00af
 29186                                  .L_lambda_simple_params_end_00af:
 29187 00015EB6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29188 00015EB9 4889C3                  	mov rbx, rax
 29189 00015EBC 58                      	pop rax
 29190 00015EBD C60004                  	mov byte [rax], T_closure
 29191 00015EC0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29192 00015EC4 48C74009[D15E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00af
 29193 00015ECC E918020000              	jmp .L_lambda_simple_end_00af
 29194                                  .L_lambda_simple_code_00af:	; lambda-simple body
 29195 00015ED1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29196 00015ED7 740B                    	je .L_lambda_simple_arity_check_ok_00af
 29197 00015ED9 FF742410                	push qword [rsp + 8 * 2]
 29198 00015EDD 6A01                    	push 1
 29199 00015EDF E9991D0000              	jmp L_error_incorrect_arity_simple
 29200                                  .L_lambda_simple_arity_check_ok_00af:
 29201 00015EE4 C8000000                	enter 0, 0
 29202                                  	; preparing a tail-call
 29203                                  	; preparing a non-tail-call
 29204 00015EE8 488B4520                	mov rax, PARAM(0)	; param str
 29205 00015EEC 50                      	push rax
 29206 00015EED 6A01                    	push 1	; arg count
 29207 00015EEF 488B0425[34160000]      	mov rax, qword [free_var_127]	; free var string-length
 29208 00015EF7 803805                  	cmp byte [rax], T_undefined
 29209 00015EFA 0F84971C0000            	je L_error_fvar_undefined
 29210 00015F00 803804                  	cmp byte [rax], T_closure
 29211 00015F03 0F85121D0000            	jne L_error_non_closure
 29212 00015F09 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29213 00015F0C FF5009                  	call SOB_CLOSURE_CODE(rax)
 29214 00015F0F 50                      	push rax
 29215 00015F10 6A01                    	push 1	; arg count
 29216 00015F12 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29217 00015F17 E8A81D0000              	call malloc
 29218 00015F1C 50                      	push rax
 29219 00015F1D BF08000000              	mov rdi, 8 * 1	; new rib
 29220 00015F22 E89D1D0000              	call malloc
 29221 00015F27 50                      	push rax
 29222 00015F28 BF18000000              	mov rdi, 8 * 3	; extended env
 29223 00015F2D E8921D0000              	call malloc
 29224 00015F32 488B7D10                	mov rdi, ENV
 29225 00015F36 BE00000000              	mov rsi, 0
 29226 00015F3B BA01000000              	mov rdx, 1
 29227                                  .L_lambda_simple_env_loop_00b0:	; ext_env[i + 1] <-- env[i]
 29228 00015F40 4883FE02                	cmp rsi, 2
 29229 00015F44 7410                    	je .L_lambda_simple_env_end_00b0
 29230 00015F46 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29231 00015F4A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29232 00015F4E 48FFC6                  	inc rsi
 29233 00015F51 48FFC2                  	inc rdx
 29234 00015F54 EBEA                    	jmp .L_lambda_simple_env_loop_00b0
 29235                                  .L_lambda_simple_env_end_00b0:
 29236 00015F56 5B                      	pop rbx
 29237 00015F57 BE00000000              	mov rsi, 0
 29238                                  .L_lambda_simple_params_loop_00b0:	; copy params
 29239 00015F5C 4883FE01                	cmp rsi, 1
 29240 00015F60 740E                    	je .L_lambda_simple_params_end_00b0
 29241 00015F62 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29242 00015F67 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29243 00015F6B 48FFC6                  	inc rsi
 29244 00015F6E EBEC                    	jmp .L_lambda_simple_params_loop_00b0
 29245                                  .L_lambda_simple_params_end_00b0:
 29246 00015F70 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29247 00015F73 4889C3                  	mov rbx, rax
 29248 00015F76 58                      	pop rax
 29249 00015F77 C60004                  	mov byte [rax], T_closure
 29250 00015F7A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29251 00015F7E 48C74009[8B5F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b0
 29252 00015F86 E906010000              	jmp .L_lambda_simple_end_00b0
 29253                                  .L_lambda_simple_code_00b0:	; lambda-simple body
 29254 00015F8B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29255 00015F91 740B                    	je .L_lambda_simple_arity_check_ok_00b0
 29256 00015F93 FF742410                	push qword [rsp + 8 * 2]
 29257 00015F97 6A01                    	push 1
 29258 00015F99 E9DF1C0000              	jmp L_error_incorrect_arity_simple
 29259                                  .L_lambda_simple_arity_check_ok_00b0:
 29260 00015F9E C8000000                	enter 0, 0
 29261                                  	; preparing a non-tail-call
 29262 00015FA2 488B4520                	mov rax, PARAM(0)	; param n
 29263 00015FA6 50                      	push rax
 29264 00015FA7 6A01                    	push 1	; arg count
 29265 00015FA9 488B0425[CC170000]      	mov rax, qword [free_var_151]	; free var zero?
 29266 00015FB1 803805                  	cmp byte [rax], T_undefined
 29267 00015FB4 0F84DD1B0000            	je L_error_fvar_undefined
 29268 00015FBA 803804                  	cmp byte [rax], T_closure
 29269 00015FBD 0F85581C0000            	jne L_error_non_closure
 29270 00015FC3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29271 00015FC6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29272 00015FC9 483D[02000000]          	cmp rax, sob_boolean_false
 29273 00015FCF 740F                    	je .L_if_else_008e
 29274 00015FD1 488B4510                	mov rax, ENV
 29275 00015FD5 488B00                  	mov rax, qword [rax + 8 * 0]
 29276 00015FD8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 29277 00015FDB E9AD000000              	jmp .L_if_end_008e
 29278                                  .L_if_else_008e:
 29279                                  	; preparing a tail-call
 29280                                  	; preparing a non-tail-call
 29281 00015FE0 48B8-                   	mov rax, L_constants + 2270
 29281 00015FE2 [DE08000000000000] 
 29282 00015FEA 50                      	push rax
 29283 00015FEB 488B4520                	mov rax, PARAM(0)	; param n
 29284 00015FEF 50                      	push rax
 29285 00015FF0 6A02                    	push 2	; arg count
 29286 00015FF2 488B0425[E70D0000]      	mov rax, qword [free_var_2]	; free var -
 29287 00015FFA 803805                  	cmp byte [rax], T_undefined
 29288 00015FFD 0F84941B0000            	je L_error_fvar_undefined
 29289 00016003 803804                  	cmp byte [rax], T_closure
 29290 00016006 0F850F1C0000            	jne L_error_non_closure
 29291 0001600C FF7001                  	push SOB_CLOSURE_ENV(rax)
 29292 0001600F FF5009                  	call SOB_CLOSURE_CODE(rax)
 29293 00016012 50                      	push rax
 29294 00016013 48B8-                   	mov rax, L_constants + 2135
 29294 00016015 [5708000000000000] 
 29295 0001601D 50                      	push rax
 29296 0001601E 488B4510                	mov rax, ENV
 29297 00016022 488B00                  	mov rax, qword [rax + 8 * 0]
 29298 00016025 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 29299 00016028 50                      	push rax
 29300 00016029 6A03                    	push 3	; arg count
 29301 0001602B 488B4510                	mov rax, ENV
 29302 0001602F 488B4008                	mov rax, qword [rax + 8 * 1]
 29303 00016033 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 29304 00016036 488B00                  	mov rax, qword [rax]
 29305 00016039 803804                  	cmp byte [rax], T_closure
 29306 0001603C 0F85D91B0000            	jne L_error_non_closure
 29307 00016042 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29308 00016045 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 29309 00016048 FF7500                  	push qword[rbp]
 29310 0001604B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 29311 0001604E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 29312 00016052 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 29313 00016056 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 29314 0001605A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 29315 0001605D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 29316 00016060 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 29317 00016065 4983C103                	add r9, 3 	 ;for getting to the params
 29318 00016069 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 29319 0001606D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 29320                                  .L_tc_recycle_frame_loop_0101:
 29321 00016070 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 29322 00016073 7410                    	je .L_tc_recycle_frame_done_0101
 29323 00016075 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 29324 00016078 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 29325 0001607B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 29326 0001607F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 29327 00016083 EBEB                    	jmp .L_tc_recycle_frame_loop_0101
 29328                                  .L_tc_recycle_frame_done_0101:
 29329 00016085 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 29330 00016086 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 29331 0001608A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29332                                  .L_if_end_008e:
 29333 0001608D C9                      	leave
 29334 0001608E C21800                  	ret AND_KILL_FRAME(1)
 29335                                  .L_lambda_simple_end_00b0:	; new closure is in rax
 29336 00016091 803804                  	cmp byte [rax], T_closure
 29337 00016094 0F85811B0000            	jne L_error_non_closure
 29338 0001609A FF7001                  	push SOB_CLOSURE_ENV(rax)
 29339 0001609D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 29340 000160A0 FF7500                  	push qword[rbp]
 29341 000160A3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 29342 000160A6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 29343 000160AA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 29344 000160AE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 29345 000160B2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 29346 000160B5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 29347 000160B8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 29348 000160BD 4983C103                	add r9, 3 	 ;for getting to the params
 29349 000160C1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 29350 000160C5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 29351                                  .L_tc_recycle_frame_loop_0102:
 29352 000160C8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 29353 000160CB 7410                    	je .L_tc_recycle_frame_done_0102
 29354 000160CD 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 29355 000160D0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 29356 000160D3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 29357 000160D7 4983E808                	sub r8, 8	 ;move the top of the stack one down
 29358 000160DB EBEB                    	jmp .L_tc_recycle_frame_loop_0102
 29359                                  .L_tc_recycle_frame_done_0102:
 29360 000160DD 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 29361 000160DE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 29362 000160E2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29363 000160E5 C9                      	leave
 29364 000160E6 C21800                  	ret AND_KILL_FRAME(1)
 29365                                  .L_lambda_simple_end_00af:	; new closure is in rax
 29366 000160E9 C9                      	leave
 29367 000160EA C21800                  	ret AND_KILL_FRAME(1)
 29368                                  .L_lambda_simple_end_00ac:	; new closure is in rax
 29369 000160ED 803804                  	cmp byte [rax], T_closure
 29370 000160F0 0F85251B0000            	jne L_error_non_closure
 29371 000160F6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29372 000160F9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29373 000160FC 48890425[67160000]      	mov qword [free_var_130], rax
 29374 00016104 48B8-                   	mov rax, sob_void
 29374 00016106 [0000000000000000] 
 29375                                  
 29376 0001610E 4889C7                  	mov rdi, rax
 29377 00016111 E8031E0000              	call print_sexpr_if_not_void
 29378                                  	; preparing a non-tail-call
 29379 00016116 48B8-                   	mov rax, L_constants + 1993
 29379 00016118 [C907000000000000] 
 29380 00016120 50                      	push rax
 29381 00016121 6A01                    	push 1	; arg count
 29382 00016123 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29383 00016128 E8971B0000              	call malloc
 29384 0001612D 50                      	push rax
 29385 0001612E BF00000000              	mov rdi, 8 * 0	; new rib
 29386 00016133 E88C1B0000              	call malloc
 29387 00016138 50                      	push rax
 29388 00016139 BF08000000              	mov rdi, 8 * 1	; extended env
 29389 0001613E E8811B0000              	call malloc
 29390 00016143 488B7D10                	mov rdi, ENV
 29391 00016147 BE00000000              	mov rsi, 0
 29392 0001614C BA01000000              	mov rdx, 1
 29393                                  .L_lambda_simple_env_loop_00b1:	; ext_env[i + 1] <-- env[i]
 29394 00016151 4883FE00                	cmp rsi, 0
 29395 00016155 7410                    	je .L_lambda_simple_env_end_00b1
 29396 00016157 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29397 0001615B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29398 0001615F 48FFC6                  	inc rsi
 29399 00016162 48FFC2                  	inc rdx
 29400 00016165 EBEA                    	jmp .L_lambda_simple_env_loop_00b1
 29401                                  .L_lambda_simple_env_end_00b1:
 29402 00016167 5B                      	pop rbx
 29403 00016168 BE00000000              	mov rsi, 0
 29404                                  .L_lambda_simple_params_loop_00b1:	; copy params
 29405 0001616D 4883FE00                	cmp rsi, 0
 29406 00016171 740E                    	je .L_lambda_simple_params_end_00b1
 29407 00016173 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29408 00016178 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29409 0001617C 48FFC6                  	inc rsi
 29410 0001617F EBEC                    	jmp .L_lambda_simple_params_loop_00b1
 29411                                  .L_lambda_simple_params_end_00b1:
 29412 00016181 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29413 00016184 4889C3                  	mov rbx, rax
 29414 00016187 58                      	pop rax
 29415 00016188 C60004                  	mov byte [rax], T_closure
 29416 0001618B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29417 0001618F 48C74009[9C610100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b1
 29418 00016197 E959060000              	jmp .L_lambda_simple_end_00b1
 29419                                  .L_lambda_simple_code_00b1:	; lambda-simple body
 29420 0001619C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29421 000161A2 740B                    	je .L_lambda_simple_arity_check_ok_00b1
 29422 000161A4 FF742410                	push qword [rsp + 8 * 2]
 29423 000161A8 6A01                    	push 1
 29424 000161AA E9CE1A0000              	jmp L_error_incorrect_arity_simple
 29425                                  .L_lambda_simple_arity_check_ok_00b1:
 29426 000161AF C8000000                	enter 0, 0
 29427 000161B3 BF08000000              	mov rdi, 8*1
 29428 000161B8 E8071B0000              	call malloc
 29429 000161BD 488B5D20                	mov rbx, PARAM(0)
 29430 000161C1 488918                  	mov qword[rax], rbx
 29431 000161C4 48894520                	mov PARAM(0), rax
 29432 000161C8 48B8-                   	mov rax, sob_void
 29432 000161CA [0000000000000000] 
 29433                                  
 29434 000161D2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29435 000161D7 E8E81A0000              	call malloc
 29436 000161DC 50                      	push rax
 29437 000161DD BF08000000              	mov rdi, 8 * 1	; new rib
 29438 000161E2 E8DD1A0000              	call malloc
 29439 000161E7 50                      	push rax
 29440 000161E8 BF10000000              	mov rdi, 8 * 2	; extended env
 29441 000161ED E8D21A0000              	call malloc
 29442 000161F2 488B7D10                	mov rdi, ENV
 29443 000161F6 BE00000000              	mov rsi, 0
 29444 000161FB BA01000000              	mov rdx, 1
 29445                                  .L_lambda_simple_env_loop_00b2:	; ext_env[i + 1] <-- env[i]
 29446 00016200 4883FE01                	cmp rsi, 1
 29447 00016204 7410                    	je .L_lambda_simple_env_end_00b2
 29448 00016206 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29449 0001620A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29450 0001620E 48FFC6                  	inc rsi
 29451 00016211 48FFC2                  	inc rdx
 29452 00016214 EBEA                    	jmp .L_lambda_simple_env_loop_00b2
 29453                                  .L_lambda_simple_env_end_00b2:
 29454 00016216 5B                      	pop rbx
 29455 00016217 BE00000000              	mov rsi, 0
 29456                                  .L_lambda_simple_params_loop_00b2:	; copy params
 29457 0001621C 4883FE01                	cmp rsi, 1
 29458 00016220 740E                    	je .L_lambda_simple_params_end_00b2
 29459 00016222 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29460 00016227 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29461 0001622B 48FFC6                  	inc rsi
 29462 0001622E EBEC                    	jmp .L_lambda_simple_params_loop_00b2
 29463                                  .L_lambda_simple_params_end_00b2:
 29464 00016230 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29465 00016233 4889C3                  	mov rbx, rax
 29466 00016236 58                      	pop rax
 29467 00016237 C60004                  	mov byte [rax], T_closure
 29468 0001623A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29469 0001623E 48C74009[4B620100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b2
 29470 00016246 E904030000              	jmp .L_lambda_simple_end_00b2
 29471                                  .L_lambda_simple_code_00b2:	; lambda-simple body
 29472 0001624B 48837C241003            	cmp qword [rsp + 8 * 2], 3
 29473 00016251 740B                    	je .L_lambda_simple_arity_check_ok_00b2
 29474 00016253 FF742410                	push qword [rsp + 8 * 2]
 29475 00016257 6A03                    	push 3
 29476 00016259 E91F1A0000              	jmp L_error_incorrect_arity_simple
 29477                                  .L_lambda_simple_arity_check_ok_00b2:
 29478 0001625E C8000000                	enter 0, 0
 29479                                  	; preparing a non-tail-call
 29480 00016262 488B4530                	mov rax, PARAM(2)	; param j
 29481 00016266 50                      	push rax
 29482 00016267 488B4528                	mov rax, PARAM(1)	; param i
 29483 0001626B 50                      	push rax
 29484 0001626C 6A02                    	push 2	; arg count
 29485 0001626E 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 29486 00016276 803805                  	cmp byte [rax], T_undefined
 29487 00016279 0F8418190000            	je L_error_fvar_undefined
 29488 0001627F 803804                  	cmp byte [rax], T_closure
 29489 00016282 0F8593190000            	jne L_error_non_closure
 29490 00016288 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29491 0001628B FF5009                  	call SOB_CLOSURE_CODE(rax)
 29492 0001628E 483D[02000000]          	cmp rax, sob_boolean_false
 29493 00016294 0F84AD020000            	je .L_if_else_008f
 29494                                  	; preparing a tail-call
 29495                                  	; preparing a non-tail-call
 29496 0001629A 488B4528                	mov rax, PARAM(1)	; param i
 29497 0001629E 50                      	push rax
 29498 0001629F 488B4520                	mov rax, PARAM(0)	; param vec
 29499 000162A3 50                      	push rax
 29500 000162A4 6A02                    	push 2	; arg count
 29501 000162A6 488B0425[55170000]      	mov rax, qword [free_var_144]	; free var vector-ref
 29502 000162AE 803805                  	cmp byte [rax], T_undefined
 29503 000162B1 0F84E0180000            	je L_error_fvar_undefined
 29504 000162B7 803804                  	cmp byte [rax], T_closure
 29505 000162BA 0F855B190000            	jne L_error_non_closure
 29506 000162C0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29507 000162C3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29508 000162C6 50                      	push rax
 29509 000162C7 6A01                    	push 1	; arg count
 29510 000162C9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29511 000162CE E8F1190000              	call malloc
 29512 000162D3 50                      	push rax
 29513 000162D4 BF18000000              	mov rdi, 8 * 3	; new rib
 29514 000162D9 E8E6190000              	call malloc
 29515 000162DE 50                      	push rax
 29516 000162DF BF18000000              	mov rdi, 8 * 3	; extended env
 29517 000162E4 E8DB190000              	call malloc
 29518 000162E9 488B7D10                	mov rdi, ENV
 29519 000162ED BE00000000              	mov rsi, 0
 29520 000162F2 BA01000000              	mov rdx, 1
 29521                                  .L_lambda_simple_env_loop_00b3:	; ext_env[i + 1] <-- env[i]
 29522 000162F7 4883FE02                	cmp rsi, 2
 29523 000162FB 7410                    	je .L_lambda_simple_env_end_00b3
 29524 000162FD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29525 00016301 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29526 00016305 48FFC6                  	inc rsi
 29527 00016308 48FFC2                  	inc rdx
 29528 0001630B EBEA                    	jmp .L_lambda_simple_env_loop_00b3
 29529                                  .L_lambda_simple_env_end_00b3:
 29530 0001630D 5B                      	pop rbx
 29531 0001630E BE00000000              	mov rsi, 0
 29532                                  .L_lambda_simple_params_loop_00b3:	; copy params
 29533 00016313 4883FE03                	cmp rsi, 3
 29534 00016317 740E                    	je .L_lambda_simple_params_end_00b3
 29535 00016319 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29536 0001631E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29537 00016322 48FFC6                  	inc rsi
 29538 00016325 EBEC                    	jmp .L_lambda_simple_params_loop_00b3
 29539                                  .L_lambda_simple_params_end_00b3:
 29540 00016327 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29541 0001632A 4889C3                  	mov rbx, rax
 29542 0001632D 58                      	pop rax
 29543 0001632E C60004                  	mov byte [rax], T_closure
 29544 00016331 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29545 00016335 48C74009[42630100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b3
 29546 0001633D E9AF010000              	jmp .L_lambda_simple_end_00b3
 29547                                  .L_lambda_simple_code_00b3:	; lambda-simple body
 29548 00016342 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29549 00016348 740B                    	je .L_lambda_simple_arity_check_ok_00b3
 29550 0001634A FF742410                	push qword [rsp + 8 * 2]
 29551 0001634E 6A01                    	push 1
 29552 00016350 E928190000              	jmp L_error_incorrect_arity_simple
 29553                                  .L_lambda_simple_arity_check_ok_00b3:
 29554 00016355 C8000000                	enter 0, 0
 29555                                  	; preparing a non-tail-call
 29556                                  	; preparing a non-tail-call
 29557 00016359 488B4510                	mov rax, ENV
 29558 0001635D 488B00                  	mov rax, qword [rax + 8 * 0]
 29559 00016360 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 29560 00016364 50                      	push rax
 29561 00016365 488B4510                	mov rax, ENV
 29562 00016369 488B00                  	mov rax, qword [rax + 8 * 0]
 29563 0001636C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 29564 0001636F 50                      	push rax
 29565 00016370 6A02                    	push 2	; arg count
 29566 00016372 488B0425[55170000]      	mov rax, qword [free_var_144]	; free var vector-ref
 29567 0001637A 803805                  	cmp byte [rax], T_undefined
 29568 0001637D 0F8414180000            	je L_error_fvar_undefined
 29569 00016383 803804                  	cmp byte [rax], T_closure
 29570 00016386 0F858F180000            	jne L_error_non_closure
 29571 0001638C FF7001                  	push SOB_CLOSURE_ENV(rax)
 29572 0001638F FF5009                  	call SOB_CLOSURE_CODE(rax)
 29573 00016392 50                      	push rax
 29574 00016393 488B4510                	mov rax, ENV
 29575 00016397 488B00                  	mov rax, qword [rax + 8 * 0]
 29576 0001639A 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 29577 0001639E 50                      	push rax
 29578 0001639F 488B4510                	mov rax, ENV
 29579 000163A3 488B00                  	mov rax, qword [rax + 8 * 0]
 29580 000163A6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 29581 000163A9 50                      	push rax
 29582 000163AA 6A03                    	push 3	; arg count
 29583 000163AC 488B0425[88170000]      	mov rax, qword [free_var_147]	; free var vector-set!
 29584 000163B4 803805                  	cmp byte [rax], T_undefined
 29585 000163B7 0F84DA170000            	je L_error_fvar_undefined
 29586 000163BD 803804                  	cmp byte [rax], T_closure
 29587 000163C0 0F8555180000            	jne L_error_non_closure
 29588 000163C6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29589 000163C9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29590                                  
 29591                                  	; preparing a non-tail-call
 29592 000163CC 488B4520                	mov rax, PARAM(0)	; param ch
 29593 000163D0 50                      	push rax
 29594 000163D1 488B4510                	mov rax, ENV
 29595 000163D5 488B00                  	mov rax, qword [rax + 8 * 0]
 29596 000163D8 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 29597 000163DC 50                      	push rax
 29598 000163DD 488B4510                	mov rax, ENV
 29599 000163E1 488B00                  	mov rax, qword [rax + 8 * 0]
 29600 000163E4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 29601 000163E7 50                      	push rax
 29602 000163E8 6A03                    	push 3	; arg count
 29603 000163EA 488B0425[88170000]      	mov rax, qword [free_var_147]	; free var vector-set!
 29604 000163F2 803805                  	cmp byte [rax], T_undefined
 29605 000163F5 0F849C170000            	je L_error_fvar_undefined
 29606 000163FB 803804                  	cmp byte [rax], T_closure
 29607 000163FE 0F8517180000            	jne L_error_non_closure
 29608 00016404 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29609 00016407 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29610                                  
 29611                                  	; preparing a tail-call
 29612                                  	; preparing a non-tail-call
 29613 0001640A 48B8-                   	mov rax, L_constants + 2270
 29613 0001640C [DE08000000000000] 
 29614 00016414 50                      	push rax
 29615 00016415 488B4510                	mov rax, ENV
 29616 00016419 488B00                  	mov rax, qword [rax + 8 * 0]
 29617 0001641C 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 29618 00016420 50                      	push rax
 29619 00016421 6A02                    	push 2	; arg count
 29620 00016423 488B0425[E70D0000]      	mov rax, qword [free_var_2]	; free var -
 29621 0001642B 803805                  	cmp byte [rax], T_undefined
 29622 0001642E 0F8463170000            	je L_error_fvar_undefined
 29623 00016434 803804                  	cmp byte [rax], T_closure
 29624 00016437 0F85DE170000            	jne L_error_non_closure
 29625 0001643D FF7001                  	push SOB_CLOSURE_ENV(rax)
 29626 00016440 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29627 00016443 50                      	push rax
 29628                                  	; preparing a non-tail-call
 29629 00016444 48B8-                   	mov rax, L_constants + 2270
 29629 00016446 [DE08000000000000] 
 29630 0001644E 50                      	push rax
 29631 0001644F 488B4510                	mov rax, ENV
 29632 00016453 488B00                  	mov rax, qword [rax + 8 * 0]
 29633 00016456 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 29634 0001645A 50                      	push rax
 29635 0001645B 6A02                    	push 2	; arg count
 29636 0001645D 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 29637 00016465 803805                  	cmp byte [rax], T_undefined
 29638 00016468 0F8429170000            	je L_error_fvar_undefined
 29639 0001646E 803804                  	cmp byte [rax], T_closure
 29640 00016471 0F85A4170000            	jne L_error_non_closure
 29641 00016477 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29642 0001647A FF5009                  	call SOB_CLOSURE_CODE(rax)
 29643 0001647D 50                      	push rax
 29644 0001647E 488B4510                	mov rax, ENV
 29645 00016482 488B00                  	mov rax, qword [rax + 8 * 0]
 29646 00016485 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 29647 00016488 50                      	push rax
 29648 00016489 6A03                    	push 3	; arg count
 29649 0001648B 488B4510                	mov rax, ENV
 29650 0001648F 488B4008                	mov rax, qword [rax + 8 * 1]
 29651 00016493 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 29652 00016496 488B00                  	mov rax, qword [rax]
 29653 00016499 803804                  	cmp byte [rax], T_closure
 29654 0001649C 0F8579170000            	jne L_error_non_closure
 29655 000164A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29656 000164A5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 29657 000164A8 FF7500                  	push qword[rbp]
 29658 000164AB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 29659 000164AE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 29660 000164B2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 29661 000164B6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 29662 000164BA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 29663 000164BD 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 29664 000164C0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 29665 000164C5 4983C103                	add r9, 3 	 ;for getting to the params
 29666 000164C9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 29667 000164CD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 29668                                  .L_tc_recycle_frame_loop_0103:
 29669 000164D0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 29670 000164D3 7410                    	je .L_tc_recycle_frame_done_0103
 29671 000164D5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 29672 000164D8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 29673 000164DB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 29674 000164DF 4983E808                	sub r8, 8	 ;move the top of the stack one down
 29675 000164E3 EBEB                    	jmp .L_tc_recycle_frame_loop_0103
 29676                                  .L_tc_recycle_frame_done_0103:
 29677 000164E5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 29678 000164E6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 29679 000164EA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29680 000164ED C9                      	leave
 29681 000164EE C21800                  	ret AND_KILL_FRAME(1)
 29682                                  .L_lambda_simple_end_00b3:	; new closure is in rax
 29683 000164F1 803804                  	cmp byte [rax], T_closure
 29684 000164F4 0F8521170000            	jne L_error_non_closure
 29685 000164FA FF7001                  	push SOB_CLOSURE_ENV(rax)
 29686 000164FD FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 29687 00016500 FF7500                  	push qword[rbp]
 29688 00016503 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 29689 00016506 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 29690 0001650A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 29691 0001650E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 29692 00016512 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 29693 00016515 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 29694 00016518 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 29695 0001651D 4983C103                	add r9, 3 	 ;for getting to the params
 29696 00016521 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 29697 00016525 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 29698                                  .L_tc_recycle_frame_loop_0104:
 29699 00016528 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 29700 0001652B 7410                    	je .L_tc_recycle_frame_done_0104
 29701 0001652D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 29702 00016530 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 29703 00016533 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 29704 00016537 4983E808                	sub r8, 8	 ;move the top of the stack one down
 29705 0001653B EBEB                    	jmp .L_tc_recycle_frame_loop_0104
 29706                                  .L_tc_recycle_frame_done_0104:
 29707 0001653D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 29708 0001653E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 29709 00016542 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29710 00016545 EB04                    	jmp .L_if_end_008f
 29711                                  .L_if_else_008f:
 29712 00016547 488B4520                	mov rax, PARAM(0)	; param vec
 29713                                  .L_if_end_008f:
 29714 0001654B C9                      	leave
 29715 0001654C C22800                  	ret AND_KILL_FRAME(3)
 29716                                  .L_lambda_simple_end_00b2:	; new closure is in rax
 29717 0001654F 50                      	push rax
 29718 00016550 488B4520                	mov rax, PARAM(0)	; param run
 29719 00016554 8F00                    	pop qword [rax]
 29720 00016556 48B8-                   	mov rax, sob_void
 29720 00016558 [0000000000000000] 
 29721                                  
 29722 00016560 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29723 00016565 E85A170000              	call malloc
 29724 0001656A 50                      	push rax
 29725 0001656B BF08000000              	mov rdi, 8 * 1	; new rib
 29726 00016570 E84F170000              	call malloc
 29727 00016575 50                      	push rax
 29728 00016576 BF10000000              	mov rdi, 8 * 2	; extended env
 29729 0001657B E844170000              	call malloc
 29730 00016580 488B7D10                	mov rdi, ENV
 29731 00016584 BE00000000              	mov rsi, 0
 29732 00016589 BA01000000              	mov rdx, 1
 29733                                  .L_lambda_simple_env_loop_00b4:	; ext_env[i + 1] <-- env[i]
 29734 0001658E 4883FE01                	cmp rsi, 1
 29735 00016592 7410                    	je .L_lambda_simple_env_end_00b4
 29736 00016594 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29737 00016598 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29738 0001659C 48FFC6                  	inc rsi
 29739 0001659F 48FFC2                  	inc rdx
 29740 000165A2 EBEA                    	jmp .L_lambda_simple_env_loop_00b4
 29741                                  .L_lambda_simple_env_end_00b4:
 29742 000165A4 5B                      	pop rbx
 29743 000165A5 BE00000000              	mov rsi, 0
 29744                                  .L_lambda_simple_params_loop_00b4:	; copy params
 29745 000165AA 4883FE01                	cmp rsi, 1
 29746 000165AE 740E                    	je .L_lambda_simple_params_end_00b4
 29747 000165B0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29748 000165B5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29749 000165B9 48FFC6                  	inc rsi
 29750 000165BC EBEC                    	jmp .L_lambda_simple_params_loop_00b4
 29751                                  .L_lambda_simple_params_end_00b4:
 29752 000165BE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29753 000165C1 4889C3                  	mov rbx, rax
 29754 000165C4 58                      	pop rax
 29755 000165C5 C60004                  	mov byte [rax], T_closure
 29756 000165C8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29757 000165CC 48C74009[D9650100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b4
 29758 000165D4 E918020000              	jmp .L_lambda_simple_end_00b4
 29759                                  .L_lambda_simple_code_00b4:	; lambda-simple body
 29760 000165D9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29761 000165DF 740B                    	je .L_lambda_simple_arity_check_ok_00b4
 29762 000165E1 FF742410                	push qword [rsp + 8 * 2]
 29763 000165E5 6A01                    	push 1
 29764 000165E7 E991160000              	jmp L_error_incorrect_arity_simple
 29765                                  .L_lambda_simple_arity_check_ok_00b4:
 29766 000165EC C8000000                	enter 0, 0
 29767                                  	; preparing a tail-call
 29768                                  	; preparing a non-tail-call
 29769 000165F0 488B4520                	mov rax, PARAM(0)	; param vec
 29770 000165F4 50                      	push rax
 29771 000165F5 6A01                    	push 1	; arg count
 29772 000165F7 488B0425[44170000]      	mov rax, qword [free_var_143]	; free var vector-length
 29773 000165FF 803805                  	cmp byte [rax], T_undefined
 29774 00016602 0F848F150000            	je L_error_fvar_undefined
 29775 00016608 803804                  	cmp byte [rax], T_closure
 29776 0001660B 0F850A160000            	jne L_error_non_closure
 29777 00016611 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29778 00016614 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29779 00016617 50                      	push rax
 29780 00016618 6A01                    	push 1	; arg count
 29781 0001661A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29782 0001661F E8A0160000              	call malloc
 29783 00016624 50                      	push rax
 29784 00016625 BF08000000              	mov rdi, 8 * 1	; new rib
 29785 0001662A E895160000              	call malloc
 29786 0001662F 50                      	push rax
 29787 00016630 BF18000000              	mov rdi, 8 * 3	; extended env
 29788 00016635 E88A160000              	call malloc
 29789 0001663A 488B7D10                	mov rdi, ENV
 29790 0001663E BE00000000              	mov rsi, 0
 29791 00016643 BA01000000              	mov rdx, 1
 29792                                  .L_lambda_simple_env_loop_00b5:	; ext_env[i + 1] <-- env[i]
 29793 00016648 4883FE02                	cmp rsi, 2
 29794 0001664C 7410                    	je .L_lambda_simple_env_end_00b5
 29795 0001664E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29796 00016652 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29797 00016656 48FFC6                  	inc rsi
 29798 00016659 48FFC2                  	inc rdx
 29799 0001665C EBEA                    	jmp .L_lambda_simple_env_loop_00b5
 29800                                  .L_lambda_simple_env_end_00b5:
 29801 0001665E 5B                      	pop rbx
 29802 0001665F BE00000000              	mov rsi, 0
 29803                                  .L_lambda_simple_params_loop_00b5:	; copy params
 29804 00016664 4883FE01                	cmp rsi, 1
 29805 00016668 740E                    	je .L_lambda_simple_params_end_00b5
 29806 0001666A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29807 0001666F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29808 00016673 48FFC6                  	inc rsi
 29809 00016676 EBEC                    	jmp .L_lambda_simple_params_loop_00b5
 29810                                  .L_lambda_simple_params_end_00b5:
 29811 00016678 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29812 0001667B 4889C3                  	mov rbx, rax
 29813 0001667E 58                      	pop rax
 29814 0001667F C60004                  	mov byte [rax], T_closure
 29815 00016682 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29816 00016686 48C74009[93660100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b5
 29817 0001668E E906010000              	jmp .L_lambda_simple_end_00b5
 29818                                  .L_lambda_simple_code_00b5:	; lambda-simple body
 29819 00016693 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29820 00016699 740B                    	je .L_lambda_simple_arity_check_ok_00b5
 29821 0001669B FF742410                	push qword [rsp + 8 * 2]
 29822 0001669F 6A01                    	push 1
 29823 000166A1 E9D7150000              	jmp L_error_incorrect_arity_simple
 29824                                  .L_lambda_simple_arity_check_ok_00b5:
 29825 000166A6 C8000000                	enter 0, 0
 29826                                  	; preparing a non-tail-call
 29827 000166AA 488B4520                	mov rax, PARAM(0)	; param n
 29828 000166AE 50                      	push rax
 29829 000166AF 6A01                    	push 1	; arg count
 29830 000166B1 488B0425[CC170000]      	mov rax, qword [free_var_151]	; free var zero?
 29831 000166B9 803805                  	cmp byte [rax], T_undefined
 29832 000166BC 0F84D5140000            	je L_error_fvar_undefined
 29833 000166C2 803804                  	cmp byte [rax], T_closure
 29834 000166C5 0F8550150000            	jne L_error_non_closure
 29835 000166CB FF7001                  	push SOB_CLOSURE_ENV(rax)
 29836 000166CE FF5009                  	call SOB_CLOSURE_CODE(rax)
 29837 000166D1 483D[02000000]          	cmp rax, sob_boolean_false
 29838 000166D7 740F                    	je .L_if_else_0090
 29839 000166D9 488B4510                	mov rax, ENV
 29840 000166DD 488B00                  	mov rax, qword [rax + 8 * 0]
 29841 000166E0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 29842 000166E3 E9AD000000              	jmp .L_if_end_0090
 29843                                  .L_if_else_0090:
 29844                                  	; preparing a tail-call
 29845                                  	; preparing a non-tail-call
 29846 000166E8 48B8-                   	mov rax, L_constants + 2270
 29846 000166EA [DE08000000000000] 
 29847 000166F2 50                      	push rax
 29848 000166F3 488B4520                	mov rax, PARAM(0)	; param n
 29849 000166F7 50                      	push rax
 29850 000166F8 6A02                    	push 2	; arg count
 29851 000166FA 488B0425[E70D0000]      	mov rax, qword [free_var_2]	; free var -
 29852 00016702 803805                  	cmp byte [rax], T_undefined
 29853 00016705 0F848C140000            	je L_error_fvar_undefined
 29854 0001670B 803804                  	cmp byte [rax], T_closure
 29855 0001670E 0F8507150000            	jne L_error_non_closure
 29856 00016714 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29857 00016717 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29858 0001671A 50                      	push rax
 29859 0001671B 48B8-                   	mov rax, L_constants + 2135
 29859 0001671D [5708000000000000] 
 29860 00016725 50                      	push rax
 29861 00016726 488B4510                	mov rax, ENV
 29862 0001672A 488B00                  	mov rax, qword [rax + 8 * 0]
 29863 0001672D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 29864 00016730 50                      	push rax
 29865 00016731 6A03                    	push 3	; arg count
 29866 00016733 488B4510                	mov rax, ENV
 29867 00016737 488B4008                	mov rax, qword [rax + 8 * 1]
 29868 0001673B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 29869 0001673E 488B00                  	mov rax, qword [rax]
 29870 00016741 803804                  	cmp byte [rax], T_closure
 29871 00016744 0F85D1140000            	jne L_error_non_closure
 29872 0001674A FF7001                  	push SOB_CLOSURE_ENV(rax)
 29873 0001674D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 29874 00016750 FF7500                  	push qword[rbp]
 29875 00016753 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 29876 00016756 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 29877 0001675A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 29878 0001675E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 29879 00016762 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 29880 00016765 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 29881 00016768 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 29882 0001676D 4983C103                	add r9, 3 	 ;for getting to the params
 29883 00016771 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 29884 00016775 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 29885                                  .L_tc_recycle_frame_loop_0105:
 29886 00016778 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 29887 0001677B 7410                    	je .L_tc_recycle_frame_done_0105
 29888 0001677D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 29889 00016780 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 29890 00016783 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 29891 00016787 4983E808                	sub r8, 8	 ;move the top of the stack one down
 29892 0001678B EBEB                    	jmp .L_tc_recycle_frame_loop_0105
 29893                                  .L_tc_recycle_frame_done_0105:
 29894 0001678D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 29895 0001678E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 29896 00016792 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29897                                  .L_if_end_0090:
 29898 00016795 C9                      	leave
 29899 00016796 C21800                  	ret AND_KILL_FRAME(1)
 29900                                  .L_lambda_simple_end_00b5:	; new closure is in rax
 29901 00016799 803804                  	cmp byte [rax], T_closure
 29902 0001679C 0F8579140000            	jne L_error_non_closure
 29903 000167A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29904 000167A5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 29905 000167A8 FF7500                  	push qword[rbp]
 29906 000167AB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 29907 000167AE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 29908 000167B2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 29909 000167B6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 29910 000167BA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 29911 000167BD 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 29912 000167C0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 29913 000167C5 4983C103                	add r9, 3 	 ;for getting to the params
 29914 000167C9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 29915 000167CD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 29916                                  .L_tc_recycle_frame_loop_0106:
 29917 000167D0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 29918 000167D3 7410                    	je .L_tc_recycle_frame_done_0106
 29919 000167D5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 29920 000167D8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 29921 000167DB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 29922 000167DF 4983E808                	sub r8, 8	 ;move the top of the stack one down
 29923 000167E3 EBEB                    	jmp .L_tc_recycle_frame_loop_0106
 29924                                  .L_tc_recycle_frame_done_0106:
 29925 000167E5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 29926 000167E6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 29927 000167EA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29928 000167ED C9                      	leave
 29929 000167EE C21800                  	ret AND_KILL_FRAME(1)
 29930                                  .L_lambda_simple_end_00b4:	; new closure is in rax
 29931 000167F1 C9                      	leave
 29932 000167F2 C21800                  	ret AND_KILL_FRAME(1)
 29933                                  .L_lambda_simple_end_00b1:	; new closure is in rax
 29934 000167F5 803804                  	cmp byte [rax], T_closure
 29935 000167F8 0F851D140000            	jne L_error_non_closure
 29936 000167FE FF7001                  	push SOB_CLOSURE_ENV(rax)
 29937 00016801 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29938 00016804 48890425[77170000]      	mov qword [free_var_146], rax
 29939 0001680C 48B8-                   	mov rax, sob_void
 29939 0001680E [0000000000000000] 
 29940                                  
 29941 00016816 4889C7                  	mov rdi, rax
 29942 00016819 E8FB160000              	call print_sexpr_if_not_void
 29943 0001681E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29944 00016823 E89C140000              	call malloc
 29945 00016828 50                      	push rax
 29946 00016829 BF00000000              	mov rdi, 8 * 0	; new rib
 29947 0001682E E891140000              	call malloc
 29948 00016833 50                      	push rax
 29949 00016834 BF08000000              	mov rdi, 8 * 1	; extended env
 29950 00016839 E886140000              	call malloc
 29951 0001683E 488B7D10                	mov rdi, ENV
 29952 00016842 BE00000000              	mov rsi, 0
 29953 00016847 BA01000000              	mov rdx, 1
 29954                                  .L_lambda_simple_env_loop_00b6:	; ext_env[i + 1] <-- env[i]
 29955 0001684C 4883FE00                	cmp rsi, 0
 29956 00016850 7410                    	je .L_lambda_simple_env_end_00b6
 29957 00016852 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29958 00016856 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29959 0001685A 48FFC6                  	inc rsi
 29960 0001685D 48FFC2                  	inc rdx
 29961 00016860 EBEA                    	jmp .L_lambda_simple_env_loop_00b6
 29962                                  .L_lambda_simple_env_end_00b6:
 29963 00016862 5B                      	pop rbx
 29964 00016863 BE00000000              	mov rsi, 0
 29965                                  .L_lambda_simple_params_loop_00b6:	; copy params
 29966 00016868 4883FE00                	cmp rsi, 0
 29967 0001686C 740E                    	je .L_lambda_simple_params_end_00b6
 29968 0001686E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29969 00016873 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29970 00016877 48FFC6                  	inc rsi
 29971 0001687A EBEC                    	jmp .L_lambda_simple_params_loop_00b6
 29972                                  .L_lambda_simple_params_end_00b6:
 29973 0001687C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29974 0001687F 4889C3                  	mov rbx, rax
 29975 00016882 58                      	pop rax
 29976 00016883 C60004                  	mov byte [rax], T_closure
 29977 00016886 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29978 0001688A 48C74009[97680100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b6
 29979 00016892 E963030000              	jmp .L_lambda_simple_end_00b6
 29980                                  .L_lambda_simple_code_00b6:	; lambda-simple body
 29981 00016897 48837C241002            	cmp qword [rsp + 8 * 2], 2
 29982 0001689D 740B                    	je .L_lambda_simple_arity_check_ok_00b6
 29983 0001689F FF742410                	push qword [rsp + 8 * 2]
 29984 000168A3 6A02                    	push 2
 29985 000168A5 E9D3130000              	jmp L_error_incorrect_arity_simple
 29986                                  .L_lambda_simple_arity_check_ok_00b6:
 29987 000168AA C8000000                	enter 0, 0
 29988                                  	; preparing a tail-call
 29989 000168AE 48B8-                   	mov rax, L_constants + 1993
 29989 000168B0 [C907000000000000] 
 29990 000168B8 50                      	push rax
 29991 000168B9 6A01                    	push 1	; arg count
 29992 000168BB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29993 000168C0 E8FF130000              	call malloc
 29994 000168C5 50                      	push rax
 29995 000168C6 BF10000000              	mov rdi, 8 * 2	; new rib
 29996 000168CB E8F4130000              	call malloc
 29997 000168D0 50                      	push rax
 29998 000168D1 BF10000000              	mov rdi, 8 * 2	; extended env
 29999 000168D6 E8E9130000              	call malloc
 30000 000168DB 488B7D10                	mov rdi, ENV
 30001 000168DF BE00000000              	mov rsi, 0
 30002 000168E4 BA01000000              	mov rdx, 1
 30003                                  .L_lambda_simple_env_loop_00b7:	; ext_env[i + 1] <-- env[i]
 30004 000168E9 4883FE01                	cmp rsi, 1
 30005 000168ED 7410                    	je .L_lambda_simple_env_end_00b7
 30006 000168EF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30007 000168F3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30008 000168F7 48FFC6                  	inc rsi
 30009 000168FA 48FFC2                  	inc rdx
 30010 000168FD EBEA                    	jmp .L_lambda_simple_env_loop_00b7
 30011                                  .L_lambda_simple_env_end_00b7:
 30012 000168FF 5B                      	pop rbx
 30013 00016900 BE00000000              	mov rsi, 0
 30014                                  .L_lambda_simple_params_loop_00b7:	; copy params
 30015 00016905 4883FE02                	cmp rsi, 2
 30016 00016909 740E                    	je .L_lambda_simple_params_end_00b7
 30017 0001690B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30018 00016910 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30019 00016914 48FFC6                  	inc rsi
 30020 00016917 EBEC                    	jmp .L_lambda_simple_params_loop_00b7
 30021                                  .L_lambda_simple_params_end_00b7:
 30022 00016919 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30023 0001691C 4889C3                  	mov rbx, rax
 30024 0001691F 58                      	pop rax
 30025 00016920 C60004                  	mov byte [rax], T_closure
 30026 00016923 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30027 00016927 48C74009[34690100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b7
 30028 0001692F E96E020000              	jmp .L_lambda_simple_end_00b7
 30029                                  .L_lambda_simple_code_00b7:	; lambda-simple body
 30030 00016934 48837C241001            	cmp qword [rsp + 8 * 2], 1
 30031 0001693A 740B                    	je .L_lambda_simple_arity_check_ok_00b7
 30032 0001693C FF742410                	push qword [rsp + 8 * 2]
 30033 00016940 6A01                    	push 1
 30034 00016942 E936130000              	jmp L_error_incorrect_arity_simple
 30035                                  .L_lambda_simple_arity_check_ok_00b7:
 30036 00016947 C8000000                	enter 0, 0
 30037 0001694B BF08000000              	mov rdi, 8*1
 30038 00016950 E86F130000              	call malloc
 30039 00016955 488B5D20                	mov rbx, PARAM(0)
 30040 00016959 488918                  	mov qword[rax], rbx
 30041 0001695C 48894520                	mov PARAM(0), rax
 30042 00016960 48B8-                   	mov rax, sob_void
 30042 00016962 [0000000000000000] 
 30043                                  
 30044 0001696A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30045 0001696F E850130000              	call malloc
 30046 00016974 50                      	push rax
 30047 00016975 BF08000000              	mov rdi, 8 * 1	; new rib
 30048 0001697A E845130000              	call malloc
 30049 0001697F 50                      	push rax
 30050 00016980 BF18000000              	mov rdi, 8 * 3	; extended env
 30051 00016985 E83A130000              	call malloc
 30052 0001698A 488B7D10                	mov rdi, ENV
 30053 0001698E BE00000000              	mov rsi, 0
 30054 00016993 BA01000000              	mov rdx, 1
 30055                                  .L_lambda_simple_env_loop_00b8:	; ext_env[i + 1] <-- env[i]
 30056 00016998 4883FE02                	cmp rsi, 2
 30057 0001699C 7410                    	je .L_lambda_simple_env_end_00b8
 30058 0001699E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30059 000169A2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30060 000169A6 48FFC6                  	inc rsi
 30061 000169A9 48FFC2                  	inc rdx
 30062 000169AC EBEA                    	jmp .L_lambda_simple_env_loop_00b8
 30063                                  .L_lambda_simple_env_end_00b8:
 30064 000169AE 5B                      	pop rbx
 30065 000169AF BE00000000              	mov rsi, 0
 30066                                  .L_lambda_simple_params_loop_00b8:	; copy params
 30067 000169B4 4883FE01                	cmp rsi, 1
 30068 000169B8 740E                    	je .L_lambda_simple_params_end_00b8
 30069 000169BA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30070 000169BF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30071 000169C3 48FFC6                  	inc rsi
 30072 000169C6 EBEC                    	jmp .L_lambda_simple_params_loop_00b8
 30073                                  .L_lambda_simple_params_end_00b8:
 30074 000169C8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30075 000169CB 4889C3                  	mov rbx, rax
 30076 000169CE 58                      	pop rax
 30077 000169CF C60004                  	mov byte [rax], T_closure
 30078 000169D2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30079 000169D6 48C74009[E3690100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b8
 30080 000169DE E942010000              	jmp .L_lambda_simple_end_00b8
 30081                                  .L_lambda_simple_code_00b8:	; lambda-simple body
 30082 000169E3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 30083 000169E9 740B                    	je .L_lambda_simple_arity_check_ok_00b8
 30084 000169EB FF742410                	push qword [rsp + 8 * 2]
 30085 000169EF 6A01                    	push 1
 30086 000169F1 E987120000              	jmp L_error_incorrect_arity_simple
 30087                                  .L_lambda_simple_arity_check_ok_00b8:
 30088 000169F6 C8000000                	enter 0, 0
 30089                                  	; preparing a non-tail-call
 30090 000169FA 488B4510                	mov rax, ENV
 30091 000169FE 488B4008                	mov rax, qword [rax + 8 * 1]
 30092 00016A02 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 30093 00016A05 50                      	push rax
 30094 00016A06 488B4520                	mov rax, PARAM(0)	; param i
 30095 00016A0A 50                      	push rax
 30096 00016A0B 6A02                    	push 2	; arg count
 30097 00016A0D 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 30098 00016A15 803805                  	cmp byte [rax], T_undefined
 30099 00016A18 0F8479110000            	je L_error_fvar_undefined
 30100 00016A1E 803804                  	cmp byte [rax], T_closure
 30101 00016A21 0F85F4110000            	jne L_error_non_closure
 30102 00016A27 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30103 00016A2A FF5009                  	call SOB_CLOSURE_CODE(rax)
 30104 00016A2D 483D[02000000]          	cmp rax, sob_boolean_false
 30105 00016A33 0F84DE000000            	je .L_if_else_0091
 30106                                  	; preparing a tail-call
 30107                                  	; preparing a non-tail-call
 30108                                  	; preparing a non-tail-call
 30109 00016A39 48B8-                   	mov rax, L_constants + 2270
 30109 00016A3B [DE08000000000000] 
 30110 00016A43 50                      	push rax
 30111 00016A44 488B4520                	mov rax, PARAM(0)	; param i
 30112 00016A48 50                      	push rax
 30113 00016A49 6A02                    	push 2	; arg count
 30114 00016A4B 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 30115 00016A53 803805                  	cmp byte [rax], T_undefined
 30116 00016A56 0F843B110000            	je L_error_fvar_undefined
 30117 00016A5C 803804                  	cmp byte [rax], T_closure
 30118 00016A5F 0F85B6110000            	jne L_error_non_closure
 30119 00016A65 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30120 00016A68 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30121 00016A6B 50                      	push rax
 30122 00016A6C 6A01                    	push 1	; arg count
 30123 00016A6E 488B4510                	mov rax, ENV
 30124 00016A72 488B00                  	mov rax, qword [rax + 8 * 0]
 30125 00016A75 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 30126 00016A78 488B00                  	mov rax, qword [rax]
 30127 00016A7B 803804                  	cmp byte [rax], T_closure
 30128 00016A7E 0F8597110000            	jne L_error_non_closure
 30129 00016A84 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30130 00016A87 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30131 00016A8A 50                      	push rax
 30132                                  	; preparing a non-tail-call
 30133 00016A8B 488B4520                	mov rax, PARAM(0)	; param i
 30134 00016A8F 50                      	push rax
 30135 00016A90 6A01                    	push 1	; arg count
 30136 00016A92 488B4510                	mov rax, ENV
 30137 00016A96 488B4008                	mov rax, qword [rax + 8 * 1]
 30138 00016A9A 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var thunk
 30139 00016A9E 803804                  	cmp byte [rax], T_closure
 30140 00016AA1 0F8574110000            	jne L_error_non_closure
 30141 00016AA7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30142 00016AAA FF5009                  	call SOB_CLOSURE_CODE(rax)
 30143 00016AAD 50                      	push rax
 30144 00016AAE 6A02                    	push 2	; arg count
 30145 00016AB0 488B0425[04130000]      	mov rax, qword [free_var_79]	; free var cons
 30146 00016AB8 803805                  	cmp byte [rax], T_undefined
 30147 00016ABB 0F84D6100000            	je L_error_fvar_undefined
 30148 00016AC1 803804                  	cmp byte [rax], T_closure
 30149 00016AC4 0F8551110000            	jne L_error_non_closure
 30150 00016ACA FF7001                  	push SOB_CLOSURE_ENV(rax)
 30151 00016ACD FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30152 00016AD0 FF7500                  	push qword[rbp]
 30153 00016AD3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30154 00016AD6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30155 00016ADA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30156 00016ADE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30157 00016AE2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30158 00016AE5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30159 00016AE8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30160 00016AED 4983C103                	add r9, 3 	 ;for getting to the params
 30161 00016AF1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30162 00016AF5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30163                                  .L_tc_recycle_frame_loop_0107:
 30164 00016AF8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30165 00016AFB 7410                    	je .L_tc_recycle_frame_done_0107
 30166 00016AFD 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30167 00016B00 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30168 00016B03 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30169 00016B07 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30170 00016B0B EBEB                    	jmp .L_tc_recycle_frame_loop_0107
 30171                                  .L_tc_recycle_frame_done_0107:
 30172 00016B0D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30173 00016B0E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30174 00016B12 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30175 00016B15 EB0A                    	jmp .L_if_end_0091
 30176                                  .L_if_else_0091:
 30177 00016B17 48B8-                   	mov rax, L_constants + 1
 30177 00016B19 [0100000000000000] 
 30178                                  .L_if_end_0091:
 30179 00016B21 C9                      	leave
 30180 00016B22 C21800                  	ret AND_KILL_FRAME(1)
 30181                                  .L_lambda_simple_end_00b8:	; new closure is in rax
 30182 00016B25 50                      	push rax
 30183 00016B26 488B4520                	mov rax, PARAM(0)	; param run
 30184 00016B2A 8F00                    	pop qword [rax]
 30185 00016B2C 48B8-                   	mov rax, sob_void
 30185 00016B2E [0000000000000000] 
 30186                                  
 30187                                  	; preparing a tail-call
 30188 00016B36 48B8-                   	mov rax, L_constants + 2135
 30188 00016B38 [5708000000000000] 
 30189 00016B40 50                      	push rax
 30190 00016B41 6A01                    	push 1	; arg count
 30191 00016B43 488B4520                	mov rax, PARAM(0)	; param run
 30192 00016B47 488B00                  	mov rax, qword [rax]
 30193 00016B4A 803804                  	cmp byte [rax], T_closure
 30194 00016B4D 0F85C8100000            	jne L_error_non_closure
 30195 00016B53 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30196 00016B56 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30197 00016B59 FF7500                  	push qword[rbp]
 30198 00016B5C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30199 00016B5F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30200 00016B63 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30201 00016B67 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30202 00016B6B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30203 00016B6E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30204 00016B71 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30205 00016B76 4983C103                	add r9, 3 	 ;for getting to the params
 30206 00016B7A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30207 00016B7E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30208                                  .L_tc_recycle_frame_loop_0108:
 30209 00016B81 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30210 00016B84 7410                    	je .L_tc_recycle_frame_done_0108
 30211 00016B86 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30212 00016B89 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30213 00016B8C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30214 00016B90 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30215 00016B94 EBEB                    	jmp .L_tc_recycle_frame_loop_0108
 30216                                  .L_tc_recycle_frame_done_0108:
 30217 00016B96 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30218 00016B97 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30219 00016B9B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30220 00016B9E C9                      	leave
 30221 00016B9F C21800                  	ret AND_KILL_FRAME(1)
 30222                                  .L_lambda_simple_end_00b7:	; new closure is in rax
 30223 00016BA2 803804                  	cmp byte [rax], T_closure
 30224 00016BA5 0F8570100000            	jne L_error_non_closure
 30225 00016BAB FF7001                  	push SOB_CLOSURE_ENV(rax)
 30226 00016BAE FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30227 00016BB1 FF7500                  	push qword[rbp]
 30228 00016BB4 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30229 00016BB7 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30230 00016BBB 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30231 00016BBF 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30232 00016BC3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30233 00016BC6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30234 00016BC9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30235 00016BCE 4983C103                	add r9, 3 	 ;for getting to the params
 30236 00016BD2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30237 00016BD6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30238                                  .L_tc_recycle_frame_loop_0109:
 30239 00016BD9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30240 00016BDC 7410                    	je .L_tc_recycle_frame_done_0109
 30241 00016BDE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30242 00016BE1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30243 00016BE4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30244 00016BE8 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30245 00016BEC EBEB                    	jmp .L_tc_recycle_frame_loop_0109
 30246                                  .L_tc_recycle_frame_done_0109:
 30247 00016BEE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30248 00016BEF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30249 00016BF3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30250 00016BF6 C9                      	leave
 30251 00016BF7 C22000                  	ret AND_KILL_FRAME(2)
 30252                                  .L_lambda_simple_end_00b6:	; new closure is in rax
 30253 00016BFA 48890425[47140000]      	mov qword [free_var_98], rax
 30254 00016C02 48B8-                   	mov rax, sob_void
 30254 00016C04 [0000000000000000] 
 30255                                  
 30256 00016C0C 4889C7                  	mov rdi, rax
 30257 00016C0F E805130000              	call print_sexpr_if_not_void
 30258 00016C14 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30259 00016C19 E8A6100000              	call malloc
 30260 00016C1E 50                      	push rax
 30261 00016C1F BF00000000              	mov rdi, 8 * 0	; new rib
 30262 00016C24 E89B100000              	call malloc
 30263 00016C29 50                      	push rax
 30264 00016C2A BF08000000              	mov rdi, 8 * 1	; extended env
 30265 00016C2F E890100000              	call malloc
 30266 00016C34 488B7D10                	mov rdi, ENV
 30267 00016C38 BE00000000              	mov rsi, 0
 30268 00016C3D BA01000000              	mov rdx, 1
 30269                                  .L_lambda_simple_env_loop_00b9:	; ext_env[i + 1] <-- env[i]
 30270 00016C42 4883FE00                	cmp rsi, 0
 30271 00016C46 7410                    	je .L_lambda_simple_env_end_00b9
 30272 00016C48 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30273 00016C4C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30274 00016C50 48FFC6                  	inc rsi
 30275 00016C53 48FFC2                  	inc rdx
 30276 00016C56 EBEA                    	jmp .L_lambda_simple_env_loop_00b9
 30277                                  .L_lambda_simple_env_end_00b9:
 30278 00016C58 5B                      	pop rbx
 30279 00016C59 BE00000000              	mov rsi, 0
 30280                                  .L_lambda_simple_params_loop_00b9:	; copy params
 30281 00016C5E 4883FE00                	cmp rsi, 0
 30282 00016C62 740E                    	je .L_lambda_simple_params_end_00b9
 30283 00016C64 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30284 00016C69 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30285 00016C6D 48FFC6                  	inc rsi
 30286 00016C70 EBEC                    	jmp .L_lambda_simple_params_loop_00b9
 30287                                  .L_lambda_simple_params_end_00b9:
 30288 00016C72 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30289 00016C75 4889C3                  	mov rbx, rax
 30290 00016C78 58                      	pop rax
 30291 00016C79 C60004                  	mov byte [rax], T_closure
 30292 00016C7C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30293 00016C80 48C74009[8D6C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b9
 30294 00016C88 E986040000              	jmp .L_lambda_simple_end_00b9
 30295                                  .L_lambda_simple_code_00b9:	; lambda-simple body
 30296 00016C8D 48837C241002            	cmp qword [rsp + 8 * 2], 2
 30297 00016C93 740B                    	je .L_lambda_simple_arity_check_ok_00b9
 30298 00016C95 FF742410                	push qword [rsp + 8 * 2]
 30299 00016C99 6A02                    	push 2
 30300 00016C9B E9DD0F0000              	jmp L_error_incorrect_arity_simple
 30301                                  .L_lambda_simple_arity_check_ok_00b9:
 30302 00016CA0 C8000000                	enter 0, 0
 30303                                  	; preparing a tail-call
 30304                                  	; preparing a non-tail-call
 30305 00016CA4 488B4520                	mov rax, PARAM(0)	; param n
 30306 00016CA8 50                      	push rax
 30307 00016CA9 6A01                    	push 1	; arg count
 30308 00016CAB 488B0425[58140000]      	mov rax, qword [free_var_99]	; free var make-string
 30309 00016CB3 803805                  	cmp byte [rax], T_undefined
 30310 00016CB6 0F84DB0E0000            	je L_error_fvar_undefined
 30311 00016CBC 803804                  	cmp byte [rax], T_closure
 30312 00016CBF 0F85560F0000            	jne L_error_non_closure
 30313 00016CC5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30314 00016CC8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30315 00016CCB 50                      	push rax
 30316 00016CCC 6A01                    	push 1	; arg count
 30317 00016CCE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30318 00016CD3 E8EC0F0000              	call malloc
 30319 00016CD8 50                      	push rax
 30320 00016CD9 BF10000000              	mov rdi, 8 * 2	; new rib
 30321 00016CDE E8E10F0000              	call malloc
 30322 00016CE3 50                      	push rax
 30323 00016CE4 BF10000000              	mov rdi, 8 * 2	; extended env
 30324 00016CE9 E8D60F0000              	call malloc
 30325 00016CEE 488B7D10                	mov rdi, ENV
 30326 00016CF2 BE00000000              	mov rsi, 0
 30327 00016CF7 BA01000000              	mov rdx, 1
 30328                                  .L_lambda_simple_env_loop_00ba:	; ext_env[i + 1] <-- env[i]
 30329 00016CFC 4883FE01                	cmp rsi, 1
 30330 00016D00 7410                    	je .L_lambda_simple_env_end_00ba
 30331 00016D02 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30332 00016D06 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30333 00016D0A 48FFC6                  	inc rsi
 30334 00016D0D 48FFC2                  	inc rdx
 30335 00016D10 EBEA                    	jmp .L_lambda_simple_env_loop_00ba
 30336                                  .L_lambda_simple_env_end_00ba:
 30337 00016D12 5B                      	pop rbx
 30338 00016D13 BE00000000              	mov rsi, 0
 30339                                  .L_lambda_simple_params_loop_00ba:	; copy params
 30340 00016D18 4883FE02                	cmp rsi, 2
 30341 00016D1C 740E                    	je .L_lambda_simple_params_end_00ba
 30342 00016D1E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30343 00016D23 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30344 00016D27 48FFC6                  	inc rsi
 30345 00016D2A EBEC                    	jmp .L_lambda_simple_params_loop_00ba
 30346                                  .L_lambda_simple_params_end_00ba:
 30347 00016D2C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30348 00016D2F 4889C3                  	mov rbx, rax
 30349 00016D32 58                      	pop rax
 30350 00016D33 C60004                  	mov byte [rax], T_closure
 30351 00016D36 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30352 00016D3A 48C74009[476D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ba
 30353 00016D42 E974030000              	jmp .L_lambda_simple_end_00ba
 30354                                  .L_lambda_simple_code_00ba:	; lambda-simple body
 30355 00016D47 48837C241001            	cmp qword [rsp + 8 * 2], 1
 30356 00016D4D 740B                    	je .L_lambda_simple_arity_check_ok_00ba
 30357 00016D4F FF742410                	push qword [rsp + 8 * 2]
 30358 00016D53 6A01                    	push 1
 30359 00016D55 E9230F0000              	jmp L_error_incorrect_arity_simple
 30360                                  .L_lambda_simple_arity_check_ok_00ba:
 30361 00016D5A C8000000                	enter 0, 0
 30362                                  	; preparing a tail-call
 30363 00016D5E 48B8-                   	mov rax, L_constants + 1993
 30363 00016D60 [C907000000000000] 
 30364 00016D68 50                      	push rax
 30365 00016D69 6A01                    	push 1	; arg count
 30366 00016D6B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30367 00016D70 E84F0F0000              	call malloc
 30368 00016D75 50                      	push rax
 30369 00016D76 BF08000000              	mov rdi, 8 * 1	; new rib
 30370 00016D7B E8440F0000              	call malloc
 30371 00016D80 50                      	push rax
 30372 00016D81 BF18000000              	mov rdi, 8 * 3	; extended env
 30373 00016D86 E8390F0000              	call malloc
 30374 00016D8B 488B7D10                	mov rdi, ENV
 30375 00016D8F BE00000000              	mov rsi, 0
 30376 00016D94 BA01000000              	mov rdx, 1
 30377                                  .L_lambda_simple_env_loop_00bb:	; ext_env[i + 1] <-- env[i]
 30378 00016D99 4883FE02                	cmp rsi, 2
 30379 00016D9D 7410                    	je .L_lambda_simple_env_end_00bb
 30380 00016D9F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30381 00016DA3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30382 00016DA7 48FFC6                  	inc rsi
 30383 00016DAA 48FFC2                  	inc rdx
 30384 00016DAD EBEA                    	jmp .L_lambda_simple_env_loop_00bb
 30385                                  .L_lambda_simple_env_end_00bb:
 30386 00016DAF 5B                      	pop rbx
 30387 00016DB0 BE00000000              	mov rsi, 0
 30388                                  .L_lambda_simple_params_loop_00bb:	; copy params
 30389 00016DB5 4883FE01                	cmp rsi, 1
 30390 00016DB9 740E                    	je .L_lambda_simple_params_end_00bb
 30391 00016DBB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30392 00016DC0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30393 00016DC4 48FFC6                  	inc rsi
 30394 00016DC7 EBEC                    	jmp .L_lambda_simple_params_loop_00bb
 30395                                  .L_lambda_simple_params_end_00bb:
 30396 00016DC9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30397 00016DCC 4889C3                  	mov rbx, rax
 30398 00016DCF 58                      	pop rax
 30399 00016DD0 C60004                  	mov byte [rax], T_closure
 30400 00016DD3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30401 00016DD7 48C74009[E46D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00bb
 30402 00016DDF E97F020000              	jmp .L_lambda_simple_end_00bb
 30403                                  .L_lambda_simple_code_00bb:	; lambda-simple body
 30404 00016DE4 48837C241001            	cmp qword [rsp + 8 * 2], 1
 30405 00016DEA 740B                    	je .L_lambda_simple_arity_check_ok_00bb
 30406 00016DEC FF742410                	push qword [rsp + 8 * 2]
 30407 00016DF0 6A01                    	push 1
 30408 00016DF2 E9860E0000              	jmp L_error_incorrect_arity_simple
 30409                                  .L_lambda_simple_arity_check_ok_00bb:
 30410 00016DF7 C8000000                	enter 0, 0
 30411 00016DFB BF08000000              	mov rdi, 8*1
 30412 00016E00 E8BF0E0000              	call malloc
 30413 00016E05 488B5D20                	mov rbx, PARAM(0)
 30414 00016E09 488918                  	mov qword[rax], rbx
 30415 00016E0C 48894520                	mov PARAM(0), rax
 30416 00016E10 48B8-                   	mov rax, sob_void
 30416 00016E12 [0000000000000000] 
 30417                                  
 30418 00016E1A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30419 00016E1F E8A00E0000              	call malloc
 30420 00016E24 50                      	push rax
 30421 00016E25 BF08000000              	mov rdi, 8 * 1	; new rib
 30422 00016E2A E8950E0000              	call malloc
 30423 00016E2F 50                      	push rax
 30424 00016E30 BF20000000              	mov rdi, 8 * 4	; extended env
 30425 00016E35 E88A0E0000              	call malloc
 30426 00016E3A 488B7D10                	mov rdi, ENV
 30427 00016E3E BE00000000              	mov rsi, 0
 30428 00016E43 BA01000000              	mov rdx, 1
 30429                                  .L_lambda_simple_env_loop_00bc:	; ext_env[i + 1] <-- env[i]
 30430 00016E48 4883FE03                	cmp rsi, 3
 30431 00016E4C 7410                    	je .L_lambda_simple_env_end_00bc
 30432 00016E4E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30433 00016E52 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30434 00016E56 48FFC6                  	inc rsi
 30435 00016E59 48FFC2                  	inc rdx
 30436 00016E5C EBEA                    	jmp .L_lambda_simple_env_loop_00bc
 30437                                  .L_lambda_simple_env_end_00bc:
 30438 00016E5E 5B                      	pop rbx
 30439 00016E5F BE00000000              	mov rsi, 0
 30440                                  .L_lambda_simple_params_loop_00bc:	; copy params
 30441 00016E64 4883FE01                	cmp rsi, 1
 30442 00016E68 740E                    	je .L_lambda_simple_params_end_00bc
 30443 00016E6A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30444 00016E6F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30445 00016E73 48FFC6                  	inc rsi
 30446 00016E76 EBEC                    	jmp .L_lambda_simple_params_loop_00bc
 30447                                  .L_lambda_simple_params_end_00bc:
 30448 00016E78 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30449 00016E7B 4889C3                  	mov rbx, rax
 30450 00016E7E 58                      	pop rax
 30451 00016E7F C60004                  	mov byte [rax], T_closure
 30452 00016E82 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30453 00016E86 48C74009[936E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00bc
 30454 00016E8E E953010000              	jmp .L_lambda_simple_end_00bc
 30455                                  .L_lambda_simple_code_00bc:	; lambda-simple body
 30456 00016E93 48837C241001            	cmp qword [rsp + 8 * 2], 1
 30457 00016E99 740B                    	je .L_lambda_simple_arity_check_ok_00bc
 30458 00016E9B FF742410                	push qword [rsp + 8 * 2]
 30459 00016E9F 6A01                    	push 1
 30460 00016EA1 E9D70D0000              	jmp L_error_incorrect_arity_simple
 30461                                  .L_lambda_simple_arity_check_ok_00bc:
 30462 00016EA6 C8000000                	enter 0, 0
 30463                                  	; preparing a non-tail-call
 30464 00016EAA 488B4510                	mov rax, ENV
 30465 00016EAE 488B4010                	mov rax, qword [rax + 8 * 2]
 30466 00016EB2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 30467 00016EB5 50                      	push rax
 30468 00016EB6 488B4520                	mov rax, PARAM(0)	; param i
 30469 00016EBA 50                      	push rax
 30470 00016EBB 6A02                    	push 2	; arg count
 30471 00016EBD 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 30472 00016EC5 803805                  	cmp byte [rax], T_undefined
 30473 00016EC8 0F84C90C0000            	je L_error_fvar_undefined
 30474 00016ECE 803804                  	cmp byte [rax], T_closure
 30475 00016ED1 0F85440D0000            	jne L_error_non_closure
 30476 00016ED7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30477 00016EDA FF5009                  	call SOB_CLOSURE_CODE(rax)
 30478 00016EDD 483D[02000000]          	cmp rax, sob_boolean_false
 30479 00016EE3 0F84EE000000            	je .L_if_else_0092
 30480                                  	; preparing a non-tail-call
 30481                                  	; preparing a non-tail-call
 30482 00016EE9 488B4520                	mov rax, PARAM(0)	; param i
 30483 00016EED 50                      	push rax
 30484 00016EEE 6A01                    	push 1	; arg count
 30485 00016EF0 488B4510                	mov rax, ENV
 30486 00016EF4 488B4010                	mov rax, qword [rax + 8 * 2]
 30487 00016EF8 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var thunk
 30488 00016EFC 803804                  	cmp byte [rax], T_closure
 30489 00016EFF 0F85160D0000            	jne L_error_non_closure
 30490 00016F05 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30491 00016F08 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30492 00016F0B 50                      	push rax
 30493 00016F0C 488B4520                	mov rax, PARAM(0)	; param i
 30494 00016F10 50                      	push rax
 30495 00016F11 488B4510                	mov rax, ENV
 30496 00016F15 488B4008                	mov rax, qword [rax + 8 * 1]
 30497 00016F19 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 30498 00016F1C 50                      	push rax
 30499 00016F1D 6A03                    	push 3	; arg count
 30500 00016F1F 488B0425[78160000]      	mov rax, qword [free_var_131]	; free var string-set!
 30501 00016F27 803805                  	cmp byte [rax], T_undefined
 30502 00016F2A 0F84670C0000            	je L_error_fvar_undefined
 30503 00016F30 803804                  	cmp byte [rax], T_closure
 30504 00016F33 0F85E20C0000            	jne L_error_non_closure
 30505 00016F39 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30506 00016F3C FF5009                  	call SOB_CLOSURE_CODE(rax)
 30507                                  
 30508                                  	; preparing a tail-call
 30509                                  	; preparing a non-tail-call
 30510 00016F3F 48B8-                   	mov rax, L_constants + 2270
 30510 00016F41 [DE08000000000000] 
 30511 00016F49 50                      	push rax
 30512 00016F4A 488B4520                	mov rax, PARAM(0)	; param i
 30513 00016F4E 50                      	push rax
 30514 00016F4F 6A02                    	push 2	; arg count
 30515 00016F51 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 30516 00016F59 803805                  	cmp byte [rax], T_undefined
 30517 00016F5C 0F84350C0000            	je L_error_fvar_undefined
 30518 00016F62 803804                  	cmp byte [rax], T_closure
 30519 00016F65 0F85B00C0000            	jne L_error_non_closure
 30520 00016F6B FF7001                  	push SOB_CLOSURE_ENV(rax)
 30521 00016F6E FF5009                  	call SOB_CLOSURE_CODE(rax)
 30522 00016F71 50                      	push rax
 30523 00016F72 6A01                    	push 1	; arg count
 30524 00016F74 488B4510                	mov rax, ENV
 30525 00016F78 488B00                  	mov rax, qword [rax + 8 * 0]
 30526 00016F7B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 30527 00016F7E 488B00                  	mov rax, qword [rax]
 30528 00016F81 803804                  	cmp byte [rax], T_closure
 30529 00016F84 0F85910C0000            	jne L_error_non_closure
 30530 00016F8A FF7001                  	push SOB_CLOSURE_ENV(rax)
 30531 00016F8D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30532 00016F90 FF7500                  	push qword[rbp]
 30533 00016F93 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30534 00016F96 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30535 00016F9A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30536 00016F9E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30537 00016FA2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30538 00016FA5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30539 00016FA8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30540 00016FAD 4983C103                	add r9, 3 	 ;for getting to the params
 30541 00016FB1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30542 00016FB5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30543                                  .L_tc_recycle_frame_loop_010a:
 30544 00016FB8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30545 00016FBB 7410                    	je .L_tc_recycle_frame_done_010a
 30546 00016FBD 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30547 00016FC0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30548 00016FC3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30549 00016FC7 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30550 00016FCB EBEB                    	jmp .L_tc_recycle_frame_loop_010a
 30551                                  .L_tc_recycle_frame_done_010a:
 30552 00016FCD 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30553 00016FCE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30554 00016FD2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30555 00016FD5 EB0B                    	jmp .L_if_end_0092
 30556                                  .L_if_else_0092:
 30557 00016FD7 488B4510                	mov rax, ENV
 30558 00016FDB 488B4008                	mov rax, qword [rax + 8 * 1]
 30559 00016FDF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 30560                                  .L_if_end_0092:
 30561 00016FE2 C9                      	leave
 30562 00016FE3 C21800                  	ret AND_KILL_FRAME(1)
 30563                                  .L_lambda_simple_end_00bc:	; new closure is in rax
 30564 00016FE6 50                      	push rax
 30565 00016FE7 488B4520                	mov rax, PARAM(0)	; param run
 30566 00016FEB 8F00                    	pop qword [rax]
 30567 00016FED 48B8-                   	mov rax, sob_void
 30567 00016FEF [0000000000000000] 
 30568                                  
 30569                                  	; preparing a tail-call
 30570 00016FF7 48B8-                   	mov rax, L_constants + 2135
 30570 00016FF9 [5708000000000000] 
 30571 00017001 50                      	push rax
 30572 00017002 6A01                    	push 1	; arg count
 30573 00017004 488B4520                	mov rax, PARAM(0)	; param run
 30574 00017008 488B00                  	mov rax, qword [rax]
 30575 0001700B 803804                  	cmp byte [rax], T_closure
 30576 0001700E 0F85070C0000            	jne L_error_non_closure
 30577 00017014 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30578 00017017 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30579 0001701A FF7500                  	push qword[rbp]
 30580 0001701D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30581 00017020 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30582 00017024 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30583 00017028 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30584 0001702C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30585 0001702F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30586 00017032 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30587 00017037 4983C103                	add r9, 3 	 ;for getting to the params
 30588 0001703B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30589 0001703F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30590                                  .L_tc_recycle_frame_loop_010b:
 30591 00017042 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30592 00017045 7410                    	je .L_tc_recycle_frame_done_010b
 30593 00017047 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30594 0001704A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30595 0001704D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30596 00017051 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30597 00017055 EBEB                    	jmp .L_tc_recycle_frame_loop_010b
 30598                                  .L_tc_recycle_frame_done_010b:
 30599 00017057 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30600 00017058 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30601 0001705C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30602 0001705F C9                      	leave
 30603 00017060 C21800                  	ret AND_KILL_FRAME(1)
 30604                                  .L_lambda_simple_end_00bb:	; new closure is in rax
 30605 00017063 803804                  	cmp byte [rax], T_closure
 30606 00017066 0F85AF0B0000            	jne L_error_non_closure
 30607 0001706C FF7001                  	push SOB_CLOSURE_ENV(rax)
 30608 0001706F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30609 00017072 FF7500                  	push qword[rbp]
 30610 00017075 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30611 00017078 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30612 0001707C 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30613 00017080 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30614 00017084 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30615 00017087 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30616 0001708A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30617 0001708F 4983C103                	add r9, 3 	 ;for getting to the params
 30618 00017093 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30619 00017097 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30620                                  .L_tc_recycle_frame_loop_010c:
 30621 0001709A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30622 0001709D 7410                    	je .L_tc_recycle_frame_done_010c
 30623 0001709F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30624 000170A2 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30625 000170A5 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30626 000170A9 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30627 000170AD EBEB                    	jmp .L_tc_recycle_frame_loop_010c
 30628                                  .L_tc_recycle_frame_done_010c:
 30629 000170AF 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30630 000170B0 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30631 000170B4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30632 000170B7 C9                      	leave
 30633 000170B8 C21800                  	ret AND_KILL_FRAME(1)
 30634                                  .L_lambda_simple_end_00ba:	; new closure is in rax
 30635 000170BB 803804                  	cmp byte [rax], T_closure
 30636 000170BE 0F85570B0000            	jne L_error_non_closure
 30637 000170C4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30638 000170C7 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30639 000170CA FF7500                  	push qword[rbp]
 30640 000170CD 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30641 000170D0 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30642 000170D4 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30643 000170D8 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30644 000170DC 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30645 000170DF 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30646 000170E2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30647 000170E7 4983C103                	add r9, 3 	 ;for getting to the params
 30648 000170EB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30649 000170EF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30650                                  .L_tc_recycle_frame_loop_010d:
 30651 000170F2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30652 000170F5 7410                    	je .L_tc_recycle_frame_done_010d
 30653 000170F7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30654 000170FA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30655 000170FD 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30656 00017101 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30657 00017105 EBEB                    	jmp .L_tc_recycle_frame_loop_010d
 30658                                  .L_tc_recycle_frame_done_010d:
 30659 00017107 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30660 00017108 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30661 0001710C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30662 0001710F C9                      	leave
 30663 00017110 C22000                  	ret AND_KILL_FRAME(2)
 30664                                  .L_lambda_simple_end_00b9:	; new closure is in rax
 30665 00017113 48890425[69140000]      	mov qword [free_var_100], rax
 30666 0001711B 48B8-                   	mov rax, sob_void
 30666 0001711D [0000000000000000] 
 30667                                  
 30668 00017125 4889C7                  	mov rdi, rax
 30669 00017128 E8EC0D0000              	call print_sexpr_if_not_void
 30670 0001712D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30671 00017132 E88D0B0000              	call malloc
 30672 00017137 50                      	push rax
 30673 00017138 BF00000000              	mov rdi, 8 * 0	; new rib
 30674 0001713D E8820B0000              	call malloc
 30675 00017142 50                      	push rax
 30676 00017143 BF08000000              	mov rdi, 8 * 1	; extended env
 30677 00017148 E8770B0000              	call malloc
 30678 0001714D 488B7D10                	mov rdi, ENV
 30679 00017151 BE00000000              	mov rsi, 0
 30680 00017156 BA01000000              	mov rdx, 1
 30681                                  .L_lambda_simple_env_loop_00bd:	; ext_env[i + 1] <-- env[i]
 30682 0001715B 4883FE00                	cmp rsi, 0
 30683 0001715F 7410                    	je .L_lambda_simple_env_end_00bd
 30684 00017161 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30685 00017165 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30686 00017169 48FFC6                  	inc rsi
 30687 0001716C 48FFC2                  	inc rdx
 30688 0001716F EBEA                    	jmp .L_lambda_simple_env_loop_00bd
 30689                                  .L_lambda_simple_env_end_00bd:
 30690 00017171 5B                      	pop rbx
 30691 00017172 BE00000000              	mov rsi, 0
 30692                                  .L_lambda_simple_params_loop_00bd:	; copy params
 30693 00017177 4883FE00                	cmp rsi, 0
 30694 0001717B 740E                    	je .L_lambda_simple_params_end_00bd
 30695 0001717D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30696 00017182 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30697 00017186 48FFC6                  	inc rsi
 30698 00017189 EBEC                    	jmp .L_lambda_simple_params_loop_00bd
 30699                                  .L_lambda_simple_params_end_00bd:
 30700 0001718B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30701 0001718E 4889C3                  	mov rbx, rax
 30702 00017191 58                      	pop rax
 30703 00017192 C60004                  	mov byte [rax], T_closure
 30704 00017195 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30705 00017199 48C74009[A6710100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00bd
 30706 000171A1 E986040000              	jmp .L_lambda_simple_end_00bd
 30707                                  .L_lambda_simple_code_00bd:	; lambda-simple body
 30708 000171A6 48837C241002            	cmp qword [rsp + 8 * 2], 2
 30709 000171AC 740B                    	je .L_lambda_simple_arity_check_ok_00bd
 30710 000171AE FF742410                	push qword [rsp + 8 * 2]
 30711 000171B2 6A02                    	push 2
 30712 000171B4 E9C40A0000              	jmp L_error_incorrect_arity_simple
 30713                                  .L_lambda_simple_arity_check_ok_00bd:
 30714 000171B9 C8000000                	enter 0, 0
 30715                                  	; preparing a tail-call
 30716                                  	; preparing a non-tail-call
 30717 000171BD 488B4520                	mov rax, PARAM(0)	; param n
 30718 000171C1 50                      	push rax
 30719 000171C2 6A01                    	push 1	; arg count
 30720 000171C4 488B0425[7A140000]      	mov rax, qword [free_var_101]	; free var make-vector
 30721 000171CC 803805                  	cmp byte [rax], T_undefined
 30722 000171CF 0F84C2090000            	je L_error_fvar_undefined
 30723 000171D5 803804                  	cmp byte [rax], T_closure
 30724 000171D8 0F853D0A0000            	jne L_error_non_closure
 30725 000171DE FF7001                  	push SOB_CLOSURE_ENV(rax)
 30726 000171E1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30727 000171E4 50                      	push rax
 30728 000171E5 6A01                    	push 1	; arg count
 30729 000171E7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30730 000171EC E8D30A0000              	call malloc
 30731 000171F1 50                      	push rax
 30732 000171F2 BF10000000              	mov rdi, 8 * 2	; new rib
 30733 000171F7 E8C80A0000              	call malloc
 30734 000171FC 50                      	push rax
 30735 000171FD BF10000000              	mov rdi, 8 * 2	; extended env
 30736 00017202 E8BD0A0000              	call malloc
 30737 00017207 488B7D10                	mov rdi, ENV
 30738 0001720B BE00000000              	mov rsi, 0
 30739 00017210 BA01000000              	mov rdx, 1
 30740                                  .L_lambda_simple_env_loop_00be:	; ext_env[i + 1] <-- env[i]
 30741 00017215 4883FE01                	cmp rsi, 1
 30742 00017219 7410                    	je .L_lambda_simple_env_end_00be
 30743 0001721B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30744 0001721F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30745 00017223 48FFC6                  	inc rsi
 30746 00017226 48FFC2                  	inc rdx
 30747 00017229 EBEA                    	jmp .L_lambda_simple_env_loop_00be
 30748                                  .L_lambda_simple_env_end_00be:
 30749 0001722B 5B                      	pop rbx
 30750 0001722C BE00000000              	mov rsi, 0
 30751                                  .L_lambda_simple_params_loop_00be:	; copy params
 30752 00017231 4883FE02                	cmp rsi, 2
 30753 00017235 740E                    	je .L_lambda_simple_params_end_00be
 30754 00017237 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30755 0001723C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30756 00017240 48FFC6                  	inc rsi
 30757 00017243 EBEC                    	jmp .L_lambda_simple_params_loop_00be
 30758                                  .L_lambda_simple_params_end_00be:
 30759 00017245 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30760 00017248 4889C3                  	mov rbx, rax
 30761 0001724B 58                      	pop rax
 30762 0001724C C60004                  	mov byte [rax], T_closure
 30763 0001724F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30764 00017253 48C74009[60720100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00be
 30765 0001725B E974030000              	jmp .L_lambda_simple_end_00be
 30766                                  .L_lambda_simple_code_00be:	; lambda-simple body
 30767 00017260 48837C241001            	cmp qword [rsp + 8 * 2], 1
 30768 00017266 740B                    	je .L_lambda_simple_arity_check_ok_00be
 30769 00017268 FF742410                	push qword [rsp + 8 * 2]
 30770 0001726C 6A01                    	push 1
 30771 0001726E E90A0A0000              	jmp L_error_incorrect_arity_simple
 30772                                  .L_lambda_simple_arity_check_ok_00be:
 30773 00017273 C8000000                	enter 0, 0
 30774                                  	; preparing a tail-call
 30775 00017277 48B8-                   	mov rax, L_constants + 1993
 30775 00017279 [C907000000000000] 
 30776 00017281 50                      	push rax
 30777 00017282 6A01                    	push 1	; arg count
 30778 00017284 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30779 00017289 E8360A0000              	call malloc
 30780 0001728E 50                      	push rax
 30781 0001728F BF08000000              	mov rdi, 8 * 1	; new rib
 30782 00017294 E82B0A0000              	call malloc
 30783 00017299 50                      	push rax
 30784 0001729A BF18000000              	mov rdi, 8 * 3	; extended env
 30785 0001729F E8200A0000              	call malloc
 30786 000172A4 488B7D10                	mov rdi, ENV
 30787 000172A8 BE00000000              	mov rsi, 0
 30788 000172AD BA01000000              	mov rdx, 1
 30789                                  .L_lambda_simple_env_loop_00bf:	; ext_env[i + 1] <-- env[i]
 30790 000172B2 4883FE02                	cmp rsi, 2
 30791 000172B6 7410                    	je .L_lambda_simple_env_end_00bf
 30792 000172B8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30793 000172BC 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30794 000172C0 48FFC6                  	inc rsi
 30795 000172C3 48FFC2                  	inc rdx
 30796 000172C6 EBEA                    	jmp .L_lambda_simple_env_loop_00bf
 30797                                  .L_lambda_simple_env_end_00bf:
 30798 000172C8 5B                      	pop rbx
 30799 000172C9 BE00000000              	mov rsi, 0
 30800                                  .L_lambda_simple_params_loop_00bf:	; copy params
 30801 000172CE 4883FE01                	cmp rsi, 1
 30802 000172D2 740E                    	je .L_lambda_simple_params_end_00bf
 30803 000172D4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30804 000172D9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30805 000172DD 48FFC6                  	inc rsi
 30806 000172E0 EBEC                    	jmp .L_lambda_simple_params_loop_00bf
 30807                                  .L_lambda_simple_params_end_00bf:
 30808 000172E2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30809 000172E5 4889C3                  	mov rbx, rax
 30810 000172E8 58                      	pop rax
 30811 000172E9 C60004                  	mov byte [rax], T_closure
 30812 000172EC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30813 000172F0 48C74009[FD720100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00bf
 30814 000172F8 E97F020000              	jmp .L_lambda_simple_end_00bf
 30815                                  .L_lambda_simple_code_00bf:	; lambda-simple body
 30816 000172FD 48837C241001            	cmp qword [rsp + 8 * 2], 1
 30817 00017303 740B                    	je .L_lambda_simple_arity_check_ok_00bf
 30818 00017305 FF742410                	push qword [rsp + 8 * 2]
 30819 00017309 6A01                    	push 1
 30820 0001730B E96D090000              	jmp L_error_incorrect_arity_simple
 30821                                  .L_lambda_simple_arity_check_ok_00bf:
 30822 00017310 C8000000                	enter 0, 0
 30823 00017314 BF08000000              	mov rdi, 8*1
 30824 00017319 E8A6090000              	call malloc
 30825 0001731E 488B5D20                	mov rbx, PARAM(0)
 30826 00017322 488918                  	mov qword[rax], rbx
 30827 00017325 48894520                	mov PARAM(0), rax
 30828 00017329 48B8-                   	mov rax, sob_void
 30828 0001732B [0000000000000000] 
 30829                                  
 30830 00017333 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30831 00017338 E887090000              	call malloc
 30832 0001733D 50                      	push rax
 30833 0001733E BF08000000              	mov rdi, 8 * 1	; new rib
 30834 00017343 E87C090000              	call malloc
 30835 00017348 50                      	push rax
 30836 00017349 BF20000000              	mov rdi, 8 * 4	; extended env
 30837 0001734E E871090000              	call malloc
 30838 00017353 488B7D10                	mov rdi, ENV
 30839 00017357 BE00000000              	mov rsi, 0
 30840 0001735C BA01000000              	mov rdx, 1
 30841                                  .L_lambda_simple_env_loop_00c0:	; ext_env[i + 1] <-- env[i]
 30842 00017361 4883FE03                	cmp rsi, 3
 30843 00017365 7410                    	je .L_lambda_simple_env_end_00c0
 30844 00017367 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30845 0001736B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30846 0001736F 48FFC6                  	inc rsi
 30847 00017372 48FFC2                  	inc rdx
 30848 00017375 EBEA                    	jmp .L_lambda_simple_env_loop_00c0
 30849                                  .L_lambda_simple_env_end_00c0:
 30850 00017377 5B                      	pop rbx
 30851 00017378 BE00000000              	mov rsi, 0
 30852                                  .L_lambda_simple_params_loop_00c0:	; copy params
 30853 0001737D 4883FE01                	cmp rsi, 1
 30854 00017381 740E                    	je .L_lambda_simple_params_end_00c0
 30855 00017383 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30856 00017388 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30857 0001738C 48FFC6                  	inc rsi
 30858 0001738F EBEC                    	jmp .L_lambda_simple_params_loop_00c0
 30859                                  .L_lambda_simple_params_end_00c0:
 30860 00017391 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30861 00017394 4889C3                  	mov rbx, rax
 30862 00017397 58                      	pop rax
 30863 00017398 C60004                  	mov byte [rax], T_closure
 30864 0001739B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30865 0001739F 48C74009[AC730100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c0
 30866 000173A7 E953010000              	jmp .L_lambda_simple_end_00c0
 30867                                  .L_lambda_simple_code_00c0:	; lambda-simple body
 30868 000173AC 48837C241001            	cmp qword [rsp + 8 * 2], 1
 30869 000173B2 740B                    	je .L_lambda_simple_arity_check_ok_00c0
 30870 000173B4 FF742410                	push qword [rsp + 8 * 2]
 30871 000173B8 6A01                    	push 1
 30872 000173BA E9BE080000              	jmp L_error_incorrect_arity_simple
 30873                                  .L_lambda_simple_arity_check_ok_00c0:
 30874 000173BF C8000000                	enter 0, 0
 30875                                  	; preparing a non-tail-call
 30876 000173C3 488B4510                	mov rax, ENV
 30877 000173C7 488B4010                	mov rax, qword [rax + 8 * 2]
 30878 000173CB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 30879 000173CE 50                      	push rax
 30880 000173CF 488B4520                	mov rax, PARAM(0)	; param i
 30881 000173D3 50                      	push rax
 30882 000173D4 6A02                    	push 2	; arg count
 30883 000173D6 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 30884 000173DE 803805                  	cmp byte [rax], T_undefined
 30885 000173E1 0F84B0070000            	je L_error_fvar_undefined
 30886 000173E7 803804                  	cmp byte [rax], T_closure
 30887 000173EA 0F852B080000            	jne L_error_non_closure
 30888 000173F0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30889 000173F3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30890 000173F6 483D[02000000]          	cmp rax, sob_boolean_false
 30891 000173FC 0F84EE000000            	je .L_if_else_0093
 30892                                  	; preparing a non-tail-call
 30893                                  	; preparing a non-tail-call
 30894 00017402 488B4520                	mov rax, PARAM(0)	; param i
 30895 00017406 50                      	push rax
 30896 00017407 6A01                    	push 1	; arg count
 30897 00017409 488B4510                	mov rax, ENV
 30898 0001740D 488B4010                	mov rax, qword [rax + 8 * 2]
 30899 00017411 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var thunk
 30900 00017415 803804                  	cmp byte [rax], T_closure
 30901 00017418 0F85FD070000            	jne L_error_non_closure
 30902 0001741E FF7001                  	push SOB_CLOSURE_ENV(rax)
 30903 00017421 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30904 00017424 50                      	push rax
 30905 00017425 488B4520                	mov rax, PARAM(0)	; param i
 30906 00017429 50                      	push rax
 30907 0001742A 488B4510                	mov rax, ENV
 30908 0001742E 488B4008                	mov rax, qword [rax + 8 * 1]
 30909 00017432 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 30910 00017435 50                      	push rax
 30911 00017436 6A03                    	push 3	; arg count
 30912 00017438 488B0425[88170000]      	mov rax, qword [free_var_147]	; free var vector-set!
 30913 00017440 803805                  	cmp byte [rax], T_undefined
 30914 00017443 0F844E070000            	je L_error_fvar_undefined
 30915 00017449 803804                  	cmp byte [rax], T_closure
 30916 0001744C 0F85C9070000            	jne L_error_non_closure
 30917 00017452 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30918 00017455 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30919                                  
 30920                                  	; preparing a tail-call
 30921                                  	; preparing a non-tail-call
 30922 00017458 48B8-                   	mov rax, L_constants + 2270
 30922 0001745A [DE08000000000000] 
 30923 00017462 50                      	push rax
 30924 00017463 488B4520                	mov rax, PARAM(0)	; param i
 30925 00017467 50                      	push rax
 30926 00017468 6A02                    	push 2	; arg count
 30927 0001746A 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 30928 00017472 803805                  	cmp byte [rax], T_undefined
 30929 00017475 0F841C070000            	je L_error_fvar_undefined
 30930 0001747B 803804                  	cmp byte [rax], T_closure
 30931 0001747E 0F8597070000            	jne L_error_non_closure
 30932 00017484 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30933 00017487 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30934 0001748A 50                      	push rax
 30935 0001748B 6A01                    	push 1	; arg count
 30936 0001748D 488B4510                	mov rax, ENV
 30937 00017491 488B00                  	mov rax, qword [rax + 8 * 0]
 30938 00017494 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 30939 00017497 488B00                  	mov rax, qword [rax]
 30940 0001749A 803804                  	cmp byte [rax], T_closure
 30941 0001749D 0F8578070000            	jne L_error_non_closure
 30942 000174A3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30943 000174A6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30944 000174A9 FF7500                  	push qword[rbp]
 30945 000174AC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30946 000174AF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30947 000174B3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30948 000174B7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30949 000174BB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30950 000174BE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30951 000174C1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30952 000174C6 4983C103                	add r9, 3 	 ;for getting to the params
 30953 000174CA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30954 000174CE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30955                                  .L_tc_recycle_frame_loop_010e:
 30956 000174D1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30957 000174D4 7410                    	je .L_tc_recycle_frame_done_010e
 30958 000174D6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30959 000174D9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30960 000174DC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30961 000174E0 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30962 000174E4 EBEB                    	jmp .L_tc_recycle_frame_loop_010e
 30963                                  .L_tc_recycle_frame_done_010e:
 30964 000174E6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30965 000174E7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30966 000174EB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30967 000174EE EB0B                    	jmp .L_if_end_0093
 30968                                  .L_if_else_0093:
 30969 000174F0 488B4510                	mov rax, ENV
 30970 000174F4 488B4008                	mov rax, qword [rax + 8 * 1]
 30971 000174F8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 30972                                  .L_if_end_0093:
 30973 000174FB C9                      	leave
 30974 000174FC C21800                  	ret AND_KILL_FRAME(1)
 30975                                  .L_lambda_simple_end_00c0:	; new closure is in rax
 30976 000174FF 50                      	push rax
 30977 00017500 488B4520                	mov rax, PARAM(0)	; param run
 30978 00017504 8F00                    	pop qword [rax]
 30979 00017506 48B8-                   	mov rax, sob_void
 30979 00017508 [0000000000000000] 
 30980                                  
 30981                                  	; preparing a tail-call
 30982 00017510 48B8-                   	mov rax, L_constants + 2135
 30982 00017512 [5708000000000000] 
 30983 0001751A 50                      	push rax
 30984 0001751B 6A01                    	push 1	; arg count
 30985 0001751D 488B4520                	mov rax, PARAM(0)	; param run
 30986 00017521 488B00                  	mov rax, qword [rax]
 30987 00017524 803804                  	cmp byte [rax], T_closure
 30988 00017527 0F85EE060000            	jne L_error_non_closure
 30989 0001752D FF7001                  	push SOB_CLOSURE_ENV(rax)
 30990 00017530 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30991 00017533 FF7500                  	push qword[rbp]
 30992 00017536 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30993 00017539 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30994 0001753D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30995 00017541 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30996 00017545 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30997 00017548 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30998 0001754B 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30999 00017550 4983C103                	add r9, 3 	 ;for getting to the params
 31000 00017554 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 31001 00017558 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 31002                                  .L_tc_recycle_frame_loop_010f:
 31003 0001755B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 31004 0001755E 7410                    	je .L_tc_recycle_frame_done_010f
 31005 00017560 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 31006 00017563 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 31007 00017566 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 31008 0001756A 4983E808                	sub r8, 8	 ;move the top of the stack one down
 31009 0001756E EBEB                    	jmp .L_tc_recycle_frame_loop_010f
 31010                                  .L_tc_recycle_frame_done_010f:
 31011 00017570 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 31012 00017571 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 31013 00017575 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 31014 00017578 C9                      	leave
 31015 00017579 C21800                  	ret AND_KILL_FRAME(1)
 31016                                  .L_lambda_simple_end_00bf:	; new closure is in rax
 31017 0001757C 803804                  	cmp byte [rax], T_closure
 31018 0001757F 0F8596060000            	jne L_error_non_closure
 31019 00017585 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31020 00017588 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 31021 0001758B FF7500                  	push qword[rbp]
 31022 0001758E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 31023 00017591 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 31024 00017595 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 31025 00017599 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 31026 0001759D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 31027 000175A0 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 31028 000175A3 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 31029 000175A8 4983C103                	add r9, 3 	 ;for getting to the params
 31030 000175AC 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 31031 000175B0 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 31032                                  .L_tc_recycle_frame_loop_0110:
 31033 000175B3 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 31034 000175B6 7410                    	je .L_tc_recycle_frame_done_0110
 31035 000175B8 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 31036 000175BB 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 31037 000175BE 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 31038 000175C2 4983E808                	sub r8, 8	 ;move the top of the stack one down
 31039 000175C6 EBEB                    	jmp .L_tc_recycle_frame_loop_0110
 31040                                  .L_tc_recycle_frame_done_0110:
 31041 000175C8 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 31042 000175C9 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 31043 000175CD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 31044 000175D0 C9                      	leave
 31045 000175D1 C21800                  	ret AND_KILL_FRAME(1)
 31046                                  .L_lambda_simple_end_00be:	; new closure is in rax
 31047 000175D4 803804                  	cmp byte [rax], T_closure
 31048 000175D7 0F853E060000            	jne L_error_non_closure
 31049 000175DD FF7001                  	push SOB_CLOSURE_ENV(rax)
 31050 000175E0 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 31051 000175E3 FF7500                  	push qword[rbp]
 31052 000175E6 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 31053 000175E9 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 31054 000175ED 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 31055 000175F1 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 31056 000175F5 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 31057 000175F8 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 31058 000175FB 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 31059 00017600 4983C103                	add r9, 3 	 ;for getting to the params
 31060 00017604 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 31061 00017608 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 31062                                  .L_tc_recycle_frame_loop_0111:
 31063 0001760B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 31064 0001760E 7410                    	je .L_tc_recycle_frame_done_0111
 31065 00017610 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 31066 00017613 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 31067 00017616 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 31068 0001761A 4983E808                	sub r8, 8	 ;move the top of the stack one down
 31069 0001761E EBEB                    	jmp .L_tc_recycle_frame_loop_0111
 31070                                  .L_tc_recycle_frame_done_0111:
 31071 00017620 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 31072 00017621 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 31073 00017625 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 31074 00017628 C9                      	leave
 31075 00017629 C22000                  	ret AND_KILL_FRAME(2)
 31076                                  .L_lambda_simple_end_00bd:	; new closure is in rax
 31077 0001762C 48890425[8B140000]      	mov qword [free_var_102], rax
 31078 00017634 48B8-                   	mov rax, sob_void
 31078 00017636 [0000000000000000] 
 31079                                  
 31080 0001763E 4889C7                  	mov rdi, rax
 31081 00017641 E8D3080000              	call print_sexpr_if_not_void
 31082 00017646 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 31083 0001764B E874060000              	call malloc
 31084 00017650 50                      	push rax
 31085 00017651 BF00000000              	mov rdi, 8 * 0	; new rib
 31086 00017656 E869060000              	call malloc
 31087 0001765B 50                      	push rax
 31088 0001765C BF08000000              	mov rdi, 8 * 1	; extended env
 31089 00017661 E85E060000              	call malloc
 31090 00017666 488B7D10                	mov rdi, ENV
 31091 0001766A BE00000000              	mov rsi, 0
 31092 0001766F BA01000000              	mov rdx, 1
 31093                                  .L_lambda_simple_env_loop_00c1:	; ext_env[i + 1] <-- env[i]
 31094 00017674 4883FE00                	cmp rsi, 0
 31095 00017678 7410                    	je .L_lambda_simple_env_end_00c1
 31096 0001767A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 31097 0001767E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 31098 00017682 48FFC6                  	inc rsi
 31099 00017685 48FFC2                  	inc rdx
 31100 00017688 EBEA                    	jmp .L_lambda_simple_env_loop_00c1
 31101                                  .L_lambda_simple_env_end_00c1:
 31102 0001768A 5B                      	pop rbx
 31103 0001768B BE00000000              	mov rsi, 0
 31104                                  .L_lambda_simple_params_loop_00c1:	; copy params
 31105 00017690 4883FE00                	cmp rsi, 0
 31106 00017694 740E                    	je .L_lambda_simple_params_end_00c1
 31107 00017696 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 31108 0001769B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 31109 0001769F 48FFC6                  	inc rsi
 31110 000176A2 EBEC                    	jmp .L_lambda_simple_params_loop_00c1
 31111                                  .L_lambda_simple_params_end_00c1:
 31112 000176A4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 31113 000176A7 4889C3                  	mov rbx, rax
 31114 000176AA 58                      	pop rax
 31115 000176AB C60004                  	mov byte [rax], T_closure
 31116 000176AE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 31117 000176B2 48C74009[BF760100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c1
 31118 000176BA E977020000              	jmp .L_lambda_simple_end_00c1
 31119                                  .L_lambda_simple_code_00c1:	; lambda-simple body
 31120 000176BF 48837C241003            	cmp qword [rsp + 8 * 2], 3
 31121 000176C5 740B                    	je .L_lambda_simple_arity_check_ok_00c1
 31122 000176C7 FF742410                	push qword [rsp + 8 * 2]
 31123 000176CB 6A03                    	push 3
 31124 000176CD E9AB050000              	jmp L_error_incorrect_arity_simple
 31125                                  .L_lambda_simple_arity_check_ok_00c1:
 31126 000176D2 C8000000                	enter 0, 0
 31127                                  	; preparing a non-tail-call
 31128 000176D6 488B4530                	mov rax, PARAM(2)	; param n
 31129 000176DA 50                      	push rax
 31130 000176DB 6A01                    	push 1	; arg count
 31131 000176DD 488B0425[CC170000]      	mov rax, qword [free_var_151]	; free var zero?
 31132 000176E5 803805                  	cmp byte [rax], T_undefined
 31133 000176E8 0F84A9040000            	je L_error_fvar_undefined
 31134 000176EE 803804                  	cmp byte [rax], T_closure
 31135 000176F1 0F8524050000            	jne L_error_non_closure
 31136 000176F7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31137 000176FA FF5009                  	call SOB_CLOSURE_CODE(rax)
 31138 000176FD 483D[02000000]          	cmp rax, sob_boolean_false
 31139 00017703 740F                    	je .L_if_else_0096
 31140 00017705 48B8-                   	mov rax, L_constants + 3485
 31140 00017707 [9D0D000000000000] 
 31141 0001770F E91E020000              	jmp .L_if_end_0096
 31142                                  .L_if_else_0096:
 31143                                  	; preparing a non-tail-call
 31144 00017714 488B4528                	mov rax, PARAM(1)	; param b
 31145 00017718 50                      	push rax
 31146 00017719 488B4520                	mov rax, PARAM(0)	; param a
 31147 0001771D 50                      	push rax
 31148 0001771E 6A02                    	push 2	; arg count
 31149 00017720 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 31150 00017728 803805                  	cmp byte [rax], T_undefined
 31151 0001772B 0F8466040000            	je L_error_fvar_undefined
 31152 00017731 803804                  	cmp byte [rax], T_closure
 31153 00017734 0F85E1040000            	jne L_error_non_closure
 31154 0001773A FF7001                  	push SOB_CLOSURE_ENV(rax)
 31155 0001773D FF5009                  	call SOB_CLOSURE_CODE(rax)
 31156 00017740 483D[02000000]          	cmp rax, sob_boolean_false
 31157 00017746 0F84D1000000            	je .L_if_else_0095
 31158                                  	; preparing a tail-call
 31159                                  	; preparing a non-tail-call
 31160 0001774C 488B4530                	mov rax, PARAM(2)	; param n
 31161 00017750 50                      	push rax
 31162                                  	; preparing a non-tail-call
 31163 00017751 488B4520                	mov rax, PARAM(0)	; param a
 31164 00017755 50                      	push rax
 31165 00017756 488B4528                	mov rax, PARAM(1)	; param b
 31166 0001775A 50                      	push rax
 31167 0001775B 6A02                    	push 2	; arg count
 31168 0001775D 488B0425[F80D0000]      	mov rax, qword [free_var_3]	; free var /
 31169 00017765 803805                  	cmp byte [rax], T_undefined
 31170 00017768 0F8429040000            	je L_error_fvar_undefined
 31171 0001776E 803804                  	cmp byte [rax], T_closure
 31172 00017771 0F85A4040000            	jne L_error_non_closure
 31173 00017777 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31174 0001777A FF5009                  	call SOB_CLOSURE_CODE(rax)
 31175 0001777D 50                      	push rax
 31176 0001777E 488B4520                	mov rax, PARAM(0)	; param a
 31177 00017782 50                      	push rax
 31178 00017783 6A03                    	push 3	; arg count
 31179 00017785 488B0425[36140000]      	mov rax, qword [free_var_97]	; free var logarithm
 31180 0001778D 803805                  	cmp byte [rax], T_undefined
 31181 00017790 0F8401040000            	je L_error_fvar_undefined
 31182 00017796 803804                  	cmp byte [rax], T_closure
 31183 00017799 0F857C040000            	jne L_error_non_closure
 31184 0001779F FF7001                  	push SOB_CLOSURE_ENV(rax)
 31185 000177A2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 31186 000177A5 50                      	push rax
 31187 000177A6 48B8-                   	mov rax, L_constants + 3485
 31187 000177A8 [9D0D000000000000] 
 31188 000177B0 50                      	push rax
 31189 000177B1 6A02                    	push 2	; arg count
 31190 000177B3 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 31191 000177BB 803805                  	cmp byte [rax], T_undefined
 31192 000177BE 0F84D3030000            	je L_error_fvar_undefined
 31193 000177C4 803804                  	cmp byte [rax], T_closure
 31194 000177C7 0F854E040000            	jne L_error_non_closure
 31195 000177CD FF7001                  	push SOB_CLOSURE_ENV(rax)
 31196 000177D0 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 31197 000177D3 FF7500                  	push qword[rbp]
 31198 000177D6 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 31199 000177D9 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 31200 000177DD 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 31201 000177E1 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 31202 000177E5 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 31203 000177E8 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 31204 000177EB 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 31205 000177F0 4983C103                	add r9, 3 	 ;for getting to the params
 31206 000177F4 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 31207 000177F8 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 31208                                  .L_tc_recycle_frame_loop_0112:
 31209 000177FB 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 31210 000177FE 7410                    	je .L_tc_recycle_frame_done_0112
 31211 00017800 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 31212 00017803 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 31213 00017806 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 31214 0001780A 4983E808                	sub r8, 8	 ;move the top of the stack one down
 31215 0001780E EBEB                    	jmp .L_tc_recycle_frame_loop_0112
 31216                                  .L_tc_recycle_frame_done_0112:
 31217 00017810 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 31218 00017811 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 31219 00017815 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 31220 00017818 E915010000              	jmp .L_if_end_0095
 31221                                  .L_if_else_0095:
 31222                                  	; preparing a non-tail-call
 31223 0001781D 488B4528                	mov rax, PARAM(1)	; param b
 31224 00017821 50                      	push rax
 31225 00017822 488B4520                	mov rax, PARAM(0)	; param a
 31226 00017826 50                      	push rax
 31227 00017827 6A02                    	push 2	; arg count
 31228 00017829 488B0425[2B0E0000]      	mov rax, qword [free_var_6]	; free var =
 31229 00017831 803805                  	cmp byte [rax], T_undefined
 31230 00017834 0F845D030000            	je L_error_fvar_undefined
 31231 0001783A 803804                  	cmp byte [rax], T_closure
 31232 0001783D 0F85D8030000            	jne L_error_non_closure
 31233 00017843 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31234 00017846 FF5009                  	call SOB_CLOSURE_CODE(rax)
 31235 00017849 483D[02000000]          	cmp rax, sob_boolean_false
 31236 0001784F 740F                    	je .L_if_else_0094
 31237 00017851 48B8-                   	mov rax, L_constants + 3485
 31237 00017853 [9D0D000000000000] 
 31238 0001785B E9D2000000              	jmp .L_if_end_0094
 31239                                  .L_if_else_0094:
 31240                                  	; preparing a tail-call
 31241                                  	; preparing a non-tail-call
 31242                                  	; preparing a non-tail-call
 31243 00017860 48B8-                   	mov rax, L_constants + 2270
 31243 00017862 [DE08000000000000] 
 31244 0001786A 50                      	push rax
 31245 0001786B 488B4530                	mov rax, PARAM(2)	; param n
 31246 0001786F 50                      	push rax
 31247 00017870 6A02                    	push 2	; arg count
 31248 00017872 488B0425[E70D0000]      	mov rax, qword [free_var_2]	; free var -
 31249 0001787A 803805                  	cmp byte [rax], T_undefined
 31250 0001787D 0F8414030000            	je L_error_fvar_undefined
 31251 00017883 803804                  	cmp byte [rax], T_closure
 31252 00017886 0F858F030000            	jne L_error_non_closure
 31253 0001788C FF7001                  	push SOB_CLOSURE_ENV(rax)
 31254 0001788F FF5009                  	call SOB_CLOSURE_CODE(rax)
 31255 00017892 50                      	push rax
 31256 00017893 488B4520                	mov rax, PARAM(0)	; param a
 31257 00017897 50                      	push rax
 31258 00017898 488B4528                	mov rax, PARAM(1)	; param b
 31259 0001789C 50                      	push rax
 31260 0001789D 6A03                    	push 3	; arg count
 31261 0001789F 488B0425[36140000]      	mov rax, qword [free_var_97]	; free var logarithm
 31262 000178A7 803805                  	cmp byte [rax], T_undefined
 31263 000178AA 0F84E7020000            	je L_error_fvar_undefined
 31264 000178B0 803804                  	cmp byte [rax], T_closure
 31265 000178B3 0F8562030000            	jne L_error_non_closure
 31266 000178B9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31267 000178BC FF5009                  	call SOB_CLOSURE_CODE(rax)
 31268 000178BF 50                      	push rax
 31269 000178C0 48B8-                   	mov rax, L_constants + 3485
 31269 000178C2 [9D0D000000000000] 
 31270 000178CA 50                      	push rax
 31271 000178CB 6A02                    	push 2	; arg count
 31272 000178CD 488B0425[F80D0000]      	mov rax, qword [free_var_3]	; free var /
 31273 000178D5 803805                  	cmp byte [rax], T_undefined
 31274 000178D8 0F84B9020000            	je L_error_fvar_undefined
 31275 000178DE 803804                  	cmp byte [rax], T_closure
 31276 000178E1 0F8534030000            	jne L_error_non_closure
 31277 000178E7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31278 000178EA FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 31279 000178ED FF7500                  	push qword[rbp]
 31280 000178F0 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 31281 000178F3 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 31282 000178F7 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 31283 000178FB 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 31284 000178FF 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 31285 00017902 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 31286 00017905 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 31287 0001790A 4983C103                	add r9, 3 	 ;for getting to the params
 31288 0001790E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 31289 00017912 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 31290                                  .L_tc_recycle_frame_loop_0113:
 31291 00017915 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 31292 00017918 7410                    	je .L_tc_recycle_frame_done_0113
 31293 0001791A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 31294 0001791D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 31295 00017920 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 31296 00017924 4983E808                	sub r8, 8	 ;move the top of the stack one down
 31297 00017928 EBEB                    	jmp .L_tc_recycle_frame_loop_0113
 31298                                  .L_tc_recycle_frame_done_0113:
 31299 0001792A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 31300 0001792B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 31301 0001792F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 31302                                  .L_if_end_0094:
 31303                                  .L_if_end_0095:
 31304                                  .L_if_end_0096:
 31305 00017932 C9                      	leave
 31306 00017933 C22800                  	ret AND_KILL_FRAME(3)
 31307                                  .L_lambda_simple_end_00c1:	; new closure is in rax
 31308 00017936 48890425[36140000]      	mov qword [free_var_97], rax
 31309 0001793E 48B8-                   	mov rax, sob_void
 31309 00017940 [0000000000000000] 
 31310                                  
 31311 00017948 4889C7                  	mov rdi, rax
 31312 0001794B E8C9050000              	call print_sexpr_if_not_void
 31313 00017950 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 31314 00017955 E86A030000              	call malloc
 31315 0001795A 50                      	push rax
 31316 0001795B BF00000000              	mov rdi, 8 * 0	; new rib
 31317 00017960 E85F030000              	call malloc
 31318 00017965 50                      	push rax
 31319 00017966 BF08000000              	mov rdi, 8 * 1	; extended env
 31320 0001796B E854030000              	call malloc
 31321 00017970 488B7D10                	mov rdi, ENV
 31322 00017974 BE00000000              	mov rsi, 0
 31323 00017979 BA01000000              	mov rdx, 1
 31324                                  .L_lambda_simple_env_loop_00c2:	; ext_env[i + 1] <-- env[i]
 31325 0001797E 4883FE00                	cmp rsi, 0
 31326 00017982 7410                    	je .L_lambda_simple_env_end_00c2
 31327 00017984 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 31328 00017988 48890CD0                	mov qword [rax + 8 * rdx], rcx
 31329 0001798C 48FFC6                  	inc rsi
 31330 0001798F 48FFC2                  	inc rdx
 31331 00017992 EBEA                    	jmp .L_lambda_simple_env_loop_00c2
 31332                                  .L_lambda_simple_env_end_00c2:
 31333 00017994 5B                      	pop rbx
 31334 00017995 BE00000000              	mov rsi, 0
 31335                                  .L_lambda_simple_params_loop_00c2:	; copy params
 31336 0001799A 4883FE00                	cmp rsi, 0
 31337 0001799E 740E                    	je .L_lambda_simple_params_end_00c2
 31338 000179A0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 31339 000179A5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 31340 000179A9 48FFC6                  	inc rsi
 31341 000179AC EBEC                    	jmp .L_lambda_simple_params_loop_00c2
 31342                                  .L_lambda_simple_params_end_00c2:
 31343 000179AE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 31344 000179B1 4889C3                  	mov rbx, rax
 31345 000179B4 58                      	pop rax
 31346 000179B5 C60004                  	mov byte [rax], T_closure
 31347 000179B8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 31348 000179BC 48C74009[C9790100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c2
 31349 000179C4 E98D000000              	jmp .L_lambda_simple_end_00c2
 31350                                  .L_lambda_simple_code_00c2:	; lambda-simple body
 31351 000179C9 48837C241000            	cmp qword [rsp + 8 * 2], 0
 31352 000179CF 740B                    	je .L_lambda_simple_arity_check_ok_00c2
 31353 000179D1 FF742410                	push qword [rsp + 8 * 2]
 31354 000179D5 6A00                    	push 0
 31355 000179D7 E9A1020000              	jmp L_error_incorrect_arity_simple
 31356                                  .L_lambda_simple_arity_check_ok_00c2:
 31357 000179DC C8000000                	enter 0, 0
 31358                                  	; preparing a tail-call
 31359 000179E0 48B8-                   	mov rax, L_constants + 3510
 31359 000179E2 [B60D000000000000] 
 31360 000179EA 50                      	push rax
 31361 000179EB 6A01                    	push 1	; arg count
 31362 000179ED 488B0425[BB170000]      	mov rax, qword [free_var_150]	; free var write-char
 31363 000179F5 803805                  	cmp byte [rax], T_undefined
 31364 000179F8 0F8499010000            	je L_error_fvar_undefined
 31365 000179FE 803804                  	cmp byte [rax], T_closure
 31366 00017A01 0F8514020000            	jne L_error_non_closure
 31367 00017A07 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31368 00017A0A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 31369 00017A0D FF7500                  	push qword[rbp]
 31370 00017A10 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 31371 00017A13 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 31372 00017A17 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 31373 00017A1B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 31374 00017A1F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 31375 00017A22 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 31376 00017A25 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 31377 00017A2A 4983C103                	add r9, 3 	 ;for getting to the params
 31378 00017A2E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 31379 00017A32 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 31380                                  .L_tc_recycle_frame_loop_0114:
 31381 00017A35 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 31382 00017A38 7410                    	je .L_tc_recycle_frame_done_0114
 31383 00017A3A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 31384 00017A3D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 31385 00017A40 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 31386 00017A44 4983E808                	sub r8, 8	 ;move the top of the stack one down
 31387 00017A48 EBEB                    	jmp .L_tc_recycle_frame_loop_0114
 31388                                  .L_tc_recycle_frame_done_0114:
 31389 00017A4A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 31390 00017A4B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 31391 00017A4F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 31392 00017A52 C9                      	leave
 31393 00017A53 C21000                  	ret AND_KILL_FRAME(0)
 31394                                  .L_lambda_simple_end_00c2:	; new closure is in rax
 31395 00017A56 48890425[BE140000]      	mov qword [free_var_105], rax
 31396 00017A5E 48B8-                   	mov rax, sob_void
 31396 00017A60 [0000000000000000] 
 31397                                  
 31398 00017A68 4889C7                  	mov rdi, rax
 31399 00017A6B E8A9040000              	call print_sexpr_if_not_void
 31400 00017A70 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 31401 00017A75 E84A020000              	call malloc
 31402 00017A7A 50                      	push rax
 31403 00017A7B BF00000000              	mov rdi, 8 * 0	; new rib
 31404 00017A80 E83F020000              	call malloc
 31405 00017A85 50                      	push rax
 31406 00017A86 BF08000000              	mov rdi, 8 * 1	; extended env
 31407 00017A8B E834020000              	call malloc
 31408 00017A90 488B7D10                	mov rdi, ENV
 31409 00017A94 BE00000000              	mov rsi, 0
 31410 00017A99 BA01000000              	mov rdx, 1
 31411                                  .L_lambda_simple_env_loop_00c3:	; ext_env[i + 1] <-- env[i]
 31412 00017A9E 4883FE00                	cmp rsi, 0
 31413 00017AA2 7410                    	je .L_lambda_simple_env_end_00c3
 31414 00017AA4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 31415 00017AA8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 31416 00017AAC 48FFC6                  	inc rsi
 31417 00017AAF 48FFC2                  	inc rdx
 31418 00017AB2 EBEA                    	jmp .L_lambda_simple_env_loop_00c3
 31419                                  .L_lambda_simple_env_end_00c3:
 31420 00017AB4 5B                      	pop rbx
 31421 00017AB5 BE00000000              	mov rsi, 0
 31422                                  .L_lambda_simple_params_loop_00c3:	; copy params
 31423 00017ABA 4883FE00                	cmp rsi, 0
 31424 00017ABE 740E                    	je .L_lambda_simple_params_end_00c3
 31425 00017AC0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 31426 00017AC5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 31427 00017AC9 48FFC6                  	inc rsi
 31428 00017ACC EBEC                    	jmp .L_lambda_simple_params_loop_00c3
 31429                                  .L_lambda_simple_params_end_00c3:
 31430 00017ACE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 31431 00017AD1 4889C3                  	mov rbx, rax
 31432 00017AD4 58                      	pop rax
 31433 00017AD5 C60004                  	mov byte [rax], T_closure
 31434 00017AD8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 31435 00017ADC 48C74009[E67A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c3
 31436 00017AE4 EB25                    	jmp .L_lambda_simple_end_00c3
 31437                                  .L_lambda_simple_code_00c3:	; lambda-simple body
 31438 00017AE6 48837C241000            	cmp qword [rsp + 8 * 2], 0
 31439 00017AEC 740B                    	je .L_lambda_simple_arity_check_ok_00c3
 31440 00017AEE FF742410                	push qword [rsp + 8 * 2]
 31441 00017AF2 6A00                    	push 0
 31442 00017AF4 E984010000              	jmp L_error_incorrect_arity_simple
 31443                                  .L_lambda_simple_arity_check_ok_00c3:
 31444 00017AF9 C8000000                	enter 0, 0
 31445 00017AFD 48B8-                   	mov rax, L_constants + 0
 31445 00017AFF [0000000000000000] 
 31446 00017B07 C9                      	leave
 31447 00017B08 C21000                  	ret AND_KILL_FRAME(0)
 31448                                  .L_lambda_simple_end_00c3:	; new closure is in rax
 31449 00017B0B 48890425[AA170000]      	mov qword [free_var_149], rax
 31450 00017B13 48B8-                   	mov rax, sob_void
 31450 00017B15 [0000000000000000] 
 31451                                  
 31452 00017B1D 4889C7                  	mov rdi, rax
 31453 00017B20 E8F4030000              	call print_sexpr_if_not_void
 31454                                  	; preparing a non-tail-call
 31455 00017B25 48B8-                   	mov rax, L_constants + 3190
 31455 00017B27 [760C000000000000] 
 31456 00017B2F 50                      	push rax
 31457 00017B30 48B8-                   	mov rax, L_constants + 2270
 31457 00017B32 [DE08000000000000] 
 31458 00017B3A 50                      	push rax
 31459 00017B3B 6A02                    	push 2	; arg count
 31460 00017B3D 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 31461 00017B45 803805                  	cmp byte [rax], T_undefined
 31462 00017B48 744D                    	je L_error_fvar_undefined
 31463 00017B4A 803804                  	cmp byte [rax], T_closure
 31464 00017B4D 0F85C8000000            	jne L_error_non_closure
 31465 00017B53 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31466 00017B56 FF5009                  	call SOB_CLOSURE_CODE(rax)
 31467                                  Lend:
 31468 00017B59 4889C7                  	mov rdi, rax
 31469 00017B5C E8B8030000              	call print_sexpr_if_not_void
 31470                                  
 31471 00017B61 48BF-                           mov rdi, fmt_memory_usage
 31471 00017B63 [7518000000000000] 
 31472 00017B6B 488B3425[FB180000]              mov rsi, qword [top_of_memory]
 31473 00017B73 4881EE[00000000]                sub rsi, memory
 31474 00017B7A B800000000                      mov rax, 0
 31475                                          ENTER
    44 00017B7F C8000000            <1>  enter 0, 0
    45 00017B83 4883E4F0            <1>  and rsp, ~15
 31476 00017B87 E8(00000000)                    call printf
 31477                                          LEAVE
    49 00017B8C C9                  <1>  leave
 31478 00017B8D B800000000                      mov rax, 0
 31479 00017B92 E8(00000000)                    call exit
 31480                                  
 31481                                  L_error_fvar_undefined:
 31482 00017B97 50                              push rax
 31483 00017B98 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
 31484 00017BA0 48BE-                           mov rsi, fmt_undefined_free_var_1
 31484 00017BA2 [DD17000000000000] 
 31485 00017BAA B800000000                      mov rax, 0
 31486                                          ENTER
    44 00017BAF C8000000            <1>  enter 0, 0
    45 00017BB3 4883E4F0            <1>  and rsp, ~15
 31487 00017BB7 E8(00000000)                    call fprintf
 31488                                          LEAVE
    49 00017BBC C9                  <1>  leave
 31489 00017BBD 58                              pop rax
 31490 00017BBE 488B4001                        mov rax, qword [rax + 1] ; string
 31491 00017BC2 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
 31492 00017BC6 BE01000000                      mov rsi, 1               ; sizeof(char)
 31493 00017BCB 488B5001                        mov rdx, qword [rax + 1] ; string-length
 31494 00017BCF 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
 31495 00017BD7 B800000000                      mov rax, 0
 31496                                          ENTER
    44 00017BDC C8000000            <1>  enter 0, 0
    45 00017BE0 4883E4F0            <1>  and rsp, ~15
 31497 00017BE4 E8(00000000)                    call fwrite
 31498                                          LEAVE
    49 00017BE9 C9                  <1>  leave
 31499 00017BEA 488B3C25[00000000]              mov rdi, [stderr]       ; destination
 31500 00017BF2 48BE-                           mov rsi, fmt_undefined_free_var_2
 31500 00017BF4 [F417000000000000] 
 31501 00017BFC B800000000                      mov rax, 0
 31502                                          ENTER
    44 00017C01 C8000000            <1>  enter 0, 0
    45 00017C05 4883E4F0            <1>  and rsp, ~15
 31503 00017C09 E8(00000000)                    call fprintf
 31504                                          LEAVE
    49 00017C0E C9                  <1>  leave
 31505 00017C0F 48C7C0F6FFFFFF                  mov rax, -10
 31506 00017C16 E8(00000000)                    call exit
 31507                                  
 31508                                  L_error_non_closure:
 31509 00017C1B 488B3C25[00000000]              mov rdi, qword [stderr]
 31510 00017C23 48BE-                           mov rsi, fmt_non_closure
 31510 00017C25 [AB18000000000000] 
 31511 00017C2D B800000000                      mov rax, 0
 31512                                          ENTER
    44 00017C32 C8000000            <1>  enter 0, 0
    45 00017C36 4883E4F0            <1>  and rsp, ~15
 31513 00017C3A E8(00000000)                    call fprintf
 31514                                          LEAVE
    49 00017C3F C9                  <1>  leave
 31515 00017C40 48C7C0FEFFFFFF                  mov rax, -2
 31516 00017C47 E8(00000000)                    call exit
 31517                                  
 31518                                  L_error_improper_list:
 31519 00017C4C 488B3C25[00000000]      	mov rdi, qword [stderr]
 31520 00017C54 48BE-                   	mov rsi, fmt_error_improper_list
 31520 00017C56 [D318000000000000] 
 31521 00017C5E B800000000              	mov rax, 0
 31522                                          ENTER
    44 00017C63 C8000000            <1>  enter 0, 0
    45 00017C67 4883E4F0            <1>  and rsp, ~15
 31523 00017C6B E8(00000000)            	call fprintf
 31524                                          LEAVE
    49 00017C70 C9                  <1>  leave
 31525 00017C71 48C7C0F9FFFFFF          	mov rax, -7
 31526 00017C78 E8(00000000)            	call exit
 31527                                  
 31528                                  L_error_incorrect_arity_simple:
 31529 00017C7D 488B3C25[00000000]              mov rdi, qword [stderr]
 31530 00017C85 48BE-                           mov rsi, fmt_incorrect_arity_simple
 31530 00017C87 [1618000000000000] 
 31531 00017C8F EB12                            jmp L_error_incorrect_arity_common
 31532                                  L_error_incorrect_arity_opt:
 31533 00017C91 488B3C25[00000000]              mov rdi, qword [stderr]
 31534 00017C99 48BE-                           mov rsi, fmt_incorrect_arity_opt
 31534 00017C9B [4118000000000000] 
 31535                                  L_error_incorrect_arity_common:
 31536 00017CA3 5A                              pop rdx
 31537 00017CA4 59                              pop rcx
 31538 00017CA5 B800000000                      mov rax, 0
 31539                                          ENTER
    44 00017CAA C8000000            <1>  enter 0, 0
    45 00017CAE 4883E4F0            <1>  and rsp, ~15
 31540 00017CB2 E8(00000000)                    call fprintf
 31541                                          LEAVE
    49 00017CB7 C9                  <1>  leave
 31542 00017CB8 48C7C0FAFFFFFF                  mov rax, -6
 31543 00017CBF E8(00000000)                    call exit
 31544                                  
 31545                                  section .data
 31546                                  fmt_undefined_free_var_1:
 31547 000017DD 212121205468652066-             db `!!! The free variable \0`
 31547 000017E6 726565207661726961-
 31547 000017EF 626C652000         
 31548                                  fmt_undefined_free_var_2:
 31549 000017F4 207761732075736564-             db ` was used before it was defined.\n\0`
 31549 000017FD 206265666F72652069-
 31549 00001806 742077617320646566-
 31549 0000180F 696E65642E0A00     
 31550                                  fmt_incorrect_arity_simple:
 31551 00001816 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
 31551 0000181F 74656420256C642061-
 31551 00001828 7267756D656E74732C-
 31551 00001831 206275742067697665-
 31551 0000183A 6E20256C640A00     
 31552                                  fmt_incorrect_arity_opt:
 31553 00001841 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
 31553 0000184A 746564206174206C65-
 31553 00001853 61737420256C642061-
 31553 0000185C 7267756D656E74732C-
 31553 00001865 206275742067697665-
 31553 0000186E 6E20256C640A00     
 31554                                  fmt_memory_usage:
 31555 00001875 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
 31555 0000187E 20256C642062797465-
 31555 00001887 73206F662064796E61-
 31555 00001890 6D6963616C6C792D61-
 31555 00001899 6C6C6F636174656420-
 31555 000018A2 6D656D6F72790A0A00 
 31556                                  fmt_non_closure:
 31557 000018AB 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
 31557 000018B4 7074696E6720746F20-
 31557 000018BD 6170706C792061206E-
 31557 000018C6 6F6E2D636C6F737572-
 31557 000018CF 65210A00           
 31558                                  fmt_error_improper_list:
 31559 000018D3 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
 31559 000018DC 7267756D656E742069-
 31559 000018E5 73206E6F7420612070-
 31559 000018EE 726F706572206C6973-
 31559 000018F7 74210A00           
 31560                                  
 31561                                  section .bss
 31562                                  memory:
 31563 00000000 <res 40000000h>         	resb gbytes(1)
 31564                                  
 31565                                  section .data
 31566                                  top_of_memory:
 31567 000018FB [0000000000000000]              dq memory
 31568                                  
 31569                                  section .text
 31570                                  malloc:
 31571 00017CC4 488B0425[FB180000]              mov rax, qword [top_of_memory]
 31572 00017CCC 48013C25[FB180000]              add qword [top_of_memory], rdi
 31573 00017CD4 C3                              ret
 31574                                  
 31575                                  L_code_ptr_return:
 31576 00017CD5 48837C241002            	cmp qword [rsp + 8*2], 2
 31577 00017CDB 0F85E51C0000            	jne L_error_arg_count_2
 31578 00017CE1 488B4C2418              	mov rcx, qword [rsp + 8*3]
 31579                                  	assert_integer(rcx)
    53 00017CE6 803911              <1>  cmp byte [%1], %2
    54 00017CE9 0F85761D0000        <1>  jne L_error_incorrect_type
 31580 00017CEF 488B4901                	mov rcx, qword [rcx + 1]
 31581 00017CF3 4883F900                	cmp rcx, 0
 31582 00017CF7 0F8CFD1B0000            	jl L_error_integer_range
 31583 00017CFD 488B442420              	mov rax, qword [rsp + 8*4]
 31584                                  .L0:
 31585 00017D02 4883F900                        cmp rcx, 0
 31586 00017D06 7409                            je .L1
 31587 00017D08 488B6D00                	mov rbp, qword [rbp]
 31588 00017D0C 48FFC9                  	dec rcx
 31589 00017D0F 7FF1                    	jg .L0
 31590                                  .L1:
 31591 00017D11 4889EC                  	mov rsp, rbp
 31592 00017D14 5D                      	pop rbp
 31593 00017D15 5B                              pop rbx
 31594 00017D16 488B4C2408                      mov rcx, qword [rsp + 8*1]
 31595 00017D1B 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
 31596 00017D20 FFE3                    	jmp rbx
 31597                                  
 31598                                  L_code_ptr_make_list:
 31599 00017D22 C8000000                	enter 0, 0
 31600 00017D26 48837D1801                      cmp COUNT, 1
 31601 00017D2B 740C                            je .L0
 31602 00017D2D 48837D1802                      cmp COUNT, 2
 31603 00017D32 7411                            je .L1
 31604 00017D34 E9C21C0000                      jmp L_error_arg_count_12
 31605                                  .L0:
 31606 00017D39 49B9-                           mov r9, sob_void
 31606 00017D3B [0000000000000000] 
 31607 00017D43 EB04                            jmp .L2
 31608                                  .L1:
 31609 00017D45 4C8B4D28                        mov r9, PARAM(1)
 31610                                  .L2:
 31611 00017D49 488B4D20                        mov rcx, PARAM(0)
 31612                                          assert_integer(rcx)
    53 00017D4D 803911              <1>  cmp byte [%1], %2
    54 00017D50 0F850F1D0000        <1>  jne L_error_incorrect_type
 31613 00017D56 488B4901                        mov rcx, qword [rcx + 1]
 31614 00017D5A 4883F900                        cmp rcx, 0
 31615 00017D5E 0F8CC71B0000                    jl L_error_arg_negative
 31616 00017D64 49B8-                           mov r8, sob_nil
 31616 00017D66 [0100000000000000] 
 31617                                  .L3:
 31618 00017D6E 4883F900                        cmp rcx, 0
 31619 00017D72 7E1D                            jle .L4
 31620 00017D74 BF11000000                      mov rdi, 1 + 8 + 8
 31621 00017D79 E846FFFFFF                      call malloc
 31622 00017D7E C60021                          mov byte [rax], T_pair
 31623 00017D81 4C894801                        mov qword [rax + 1], r9
 31624 00017D85 4C894009                        mov qword [rax + 1 + 8], r8
 31625 00017D89 4989C0                          mov r8, rax
 31626 00017D8C 48FFC9                          dec rcx
 31627 00017D8F EBDD                            jmp .L3
 31628                                  .L4:
 31629 00017D91 4C89C0                          mov rax, r8
 31630 00017D94 48837D1802                      cmp COUNT, 2
 31631 00017D99 7404                            je .L5
 31632 00017D9B C9                              leave
 31633 00017D9C C21800                          ret AND_KILL_FRAME(1)
 31634                                  .L5:
 31635 00017D9F C9                      	leave
 31636 00017DA0 C22000                  	ret AND_KILL_FRAME(2)
 31637                                  
 31638                                  L_code_ptr_is_primitive:
 31639 00017DA3 C8000000                	enter 0, 0
 31640 00017DA7 48837D1801              	cmp COUNT, 1
 31641 00017DAC 0F85DF1B0000            	jne L_error_arg_count_1
 31642 00017DB2 488B4520                	mov rax, PARAM(0)
 31643                                  	assert_closure(rax)
    53 00017DB6 803804              <1>  cmp byte [%1], %2
    54 00017DB9 0F85A61C0000        <1>  jne L_error_incorrect_type
 31644 00017DBF 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
 31645 00017DC4 750C                    	jne .L_false
 31646 00017DC6 48B8-                   	mov rax, sob_boolean_true
 31646 00017DC8 [0300000000000000] 
 31647 00017DD0 EB0A                    	jmp .L_end
 31648                                  .L_false:
 31649 00017DD2 48B8-                   	mov rax, sob_boolean_false
 31649 00017DD4 [0200000000000000] 
 31650                                  .L_end:
 31651 00017DDC C9                      	leave
 31652 00017DDD C21800                  	ret AND_KILL_FRAME(1)
 31653                                  
 31654                                  L_code_ptr_length:
 31655 00017DE0 C8000000                	enter 0, 0
 31656 00017DE4 48837D1801              	cmp COUNT, 1
 31657 00017DE9 0F85A21B0000            	jne L_error_arg_count_1
 31658 00017DEF 488B5D20                	mov rbx, PARAM(0)
 31659 00017DF3 BF00000000              	mov rdi, 0
 31660                                  .L:
 31661 00017DF8 803B01                  	cmp byte [rbx], T_nil
 31662 00017DFB 7412                    	je .L_end
 31663                                  	assert_pair(rbx)
    53 00017DFD 803B21              <1>  cmp byte [%1], %2
    54 00017E00 0F855F1C0000        <1>  jne L_error_incorrect_type
 31664 00017E06 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
 31665 00017E0A 48FFC7                  	inc rdi
 31666 00017E0D EBE9                    	jmp .L
 31667                                  .L_end:
 31668 00017E0F E8CC1A0000              	call make_integer
 31669 00017E14 C9                      	leave
 31670 00017E15 C21800                  	ret AND_KILL_FRAME(1)
 31671                                  
 31672                                  L_code_ptr_break:
 31673 00017E18 48837C241000                    cmp qword [rsp + 8 * 2], 0
 31674 00017E1E 0F85381B0000                    jne L_error_arg_count_0
 31675 00017E24 CC                              int3
 31676 00017E25 48B8-                           mov rax, sob_void
 31676 00017E27 [0000000000000000] 
 31677 00017E2F C21000                          ret AND_KILL_FRAME(0)        
 31678                                  
 31679                                  L_code_ptr_frame:
 31680 00017E32 C8000000                        enter 0, 0
 31681 00017E36 48837D1800                      cmp COUNT, 0
 31682 00017E3B 0F851B1B0000                    jne L_error_arg_count_0
 31683                                  
 31684 00017E41 48BF-                           mov rdi, fmt_frame
 31684 00017E43 [0319000000000000] 
 31685 00017E4B 488B7500                        mov rsi, qword [rbp]    ; old rbp
 31686 00017E4F 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
 31687 00017E53 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
 31688 00017E57 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
 31689 00017E5B 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
 31690 00017E5F 6A00                            push 0
 31691 00017E61 4151                            push r9
 31692 00017E63 4150                            push r8                   ; we'll use it when printing the params
 31693 00017E65 B800000000                      mov rax, 0
 31694                                          
 31695                                          ENTER
    44 00017E6A C8000000            <1>  enter 0, 0
    45 00017E6E 4883E4F0            <1>  and rsp, ~15
 31696 00017E72 E8(00000000)                    call printf
 31697                                          LEAVE
    49 00017E77 C9                  <1>  leave
 31698                                  
 31699                                  .L:
 31700 00017E78 488B0C24                        mov rcx, qword [rsp]
 31701 00017E7C 4883F900                        cmp rcx, 0
 31702 00017E80 7467                            je .L_out
 31703 00017E82 48BF-                           mov rdi, fmt_frame_param_prefix
 31703 00017E84 [3C19000000000000] 
 31704 00017E8C 488B742410                      mov rsi, qword [rsp + 8*2]
 31705 00017E91 B800000000                      mov rax, 0
 31706                                          
 31707                                          ENTER
    44 00017E96 C8000000            <1>  enter 0, 0
    45 00017E9A 4883E4F0            <1>  and rsp, ~15
 31708 00017E9E E8(00000000)                    call printf
 31709                                          LEAVE
    49 00017EA3 C9                  <1>  leave
 31710                                  
 31711 00017EA4 488B0C24                        mov rcx, qword [rsp]
 31712 00017EA8 48FFC9                          dec rcx
 31713 00017EAB 48890C24                        mov qword [rsp], rcx    ; dec arg count
 31714 00017EAF 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
 31715 00017EB4 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
 31716 00017EB9 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
 31717 00017EBD 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
 31718 00017EC2 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
 31719 00017EC5 E87B000000                      call print_sexpr
 31720 00017ECA 48BF-                           mov rdi, fmt_newline
 31720 00017ECC [6819000000000000] 
 31721 00017ED4 B800000000                      mov rax, 0
 31722                                          ENTER
    44 00017ED9 C8000000            <1>  enter 0, 0
    45 00017EDD 4883E4F0            <1>  and rsp, ~15
 31723 00017EE1 E8(00000000)                    call printf
 31724                                          LEAVE
    49 00017EE6 C9                  <1>  leave
 31725 00017EE7 EB8F                            jmp .L
 31726                                  .L_out:
 31727 00017EE9 48BF-                           mov rdi, fmt_frame_continue
 31727 00017EEB [4D19000000000000] 
 31728 00017EF3 B800000000                      mov rax, 0
 31729                                          ENTER
    44 00017EF8 C8000000            <1>  enter 0, 0
    45 00017EFC 4883E4F0            <1>  and rsp, ~15
 31730 00017F00 E8(00000000)                    call printf
 31731 00017F05 E8(00000000)                    call getchar
 31732                                          LEAVE
    49 00017F0A C9                  <1>  leave
 31733                                          
 31734 00017F0B 48B8-                           mov rax, sob_void
 31734 00017F0D [0000000000000000] 
 31735 00017F15 C9                              leave
 31736 00017F16 C21000                          ret AND_KILL_FRAME(0)
 31737                                          
 31738                                  print_sexpr_if_not_void:
 31739 00017F19 4881FF[00000000]        	cmp rdi, sob_void
 31740 00017F20 7422                    	je .done
 31741 00017F22 E81E000000              	call print_sexpr
 31742 00017F27 48BF-                   	mov rdi, fmt_newline
 31742 00017F29 [6819000000000000] 
 31743 00017F31 B800000000              	mov rax, 0
 31744                                  	ENTER
    44 00017F36 C8000000            <1>  enter 0, 0
    45 00017F3A 4883E4F0            <1>  and rsp, ~15
 31745 00017F3E E8(00000000)            	call printf
 31746                                  	LEAVE
    49 00017F43 C9                  <1>  leave
 31747                                  .done:
 31748 00017F44 C3                      	ret
 31749                                  
 31750                                  section .data
 31751                                  fmt_frame:
 31752 00001903 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
 31752 0000190C 207265742061646472-
 31752 00001915 203D2025703B206C65-
 31752 0000191E 7820656E76203D2025-
 31752 00001927 703B20706172616D20-
 31752 00001930 636F756E74203D2025-
 31752 00001939 640A00             
 31753                                  fmt_frame_param_prefix:
 31754 0000193C 3D3D5B706172616D20-             db `==[param %d]==> \0`
 31754 00001945 25645D3D3D3E2000   
 31755                                  fmt_frame_continue:
 31756 0000194D 486974203C456E7465-             db `Hit <Enter> to continue...\0`
 31756 00001956 723E20746F20636F6E-
 31756 0000195F 74696E75652E2E2E00 
 31757                                  fmt_newline:
 31758 00001968 0A00                    	db `\n\0`
 31759                                  fmt_void:
 31760 0000196A 233C766F69643E00        	db `#<void>\0`
 31761                                  fmt_nil:
 31762 00001972 282900                  	db `()\0`
 31763                                  fmt_boolean_false:
 31764 00001975 236600                  	db `#f\0`
 31765                                  fmt_boolean_true:
 31766 00001978 237400                  	db `#t\0`
 31767                                  fmt_char_backslash:
 31768 0000197B 235C5C00                	db `#\\\\\0`
 31769                                  fmt_char_dquote:
 31770 0000197F 235C2200                	db `#\\"\0`
 31771                                  fmt_char_simple:
 31772 00001983 235C256300              	db `#\\%c\0`
 31773                                  fmt_char_null:
 31774 00001988 235C6E756C00            	db `#\\nul\0`
 31775                                  fmt_char_bell:
 31776 0000198E 235C62656C6C00          	db `#\\bell\0`
 31777                                  fmt_char_backspace:
 31778 00001995 235C6261636B737061-     	db `#\\backspace\0`
 31778 0000199E 636500             
 31779                                  fmt_char_tab:
 31780 000019A1 235C74616200            	db `#\\tab\0`
 31781                                  fmt_char_newline:
 31782 000019A7 235C6E65776C696E65-     	db `#\\newline\0`
 31782 000019B0 00                 
 31783                                  fmt_char_formfeed:
 31784 000019B1 235C7061676500          	db `#\\page\0`
 31785                                  fmt_char_return:
 31786 000019B8 235C72657475726E00      	db `#\\return\0`
 31787                                  fmt_char_escape:
 31788 000019C1 235C65736300            	db `#\\esc\0`
 31789                                  fmt_char_space:
 31790 000019C7 235C737061636500        	db `#\\space\0`
 31791                                  fmt_char_hex:
 31792 000019CF 235C782530325800        	db `#\\x%02X\0`
 31793                                  fmt_gensym:
 31794 000019D7 47256C6400                      db `G%ld\0`
 31795                                  fmt_closure:
 31796 000019DC 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
 31796 000019E5 206174203078253038-
 31796 000019EE 5820656E763D307825-
 31796 000019F7 30385820636F64653D-
 31796 00001A00 3078253038583E00   
 31797                                  fmt_lparen:
 31798 00001A08 2800                    	db `(\0`
 31799                                  fmt_dotted_pair:
 31800 00001A0A 202E2000                	db ` . \0`
 31801                                  fmt_rparen:
 31802 00001A0E 2900                    	db `)\0`
 31803                                  fmt_space:
 31804 00001A10 2000                    	db ` \0`
 31805                                  fmt_empty_vector:
 31806 00001A12 23282900                	db `#()\0`
 31807                                  fmt_vector:
 31808 00001A16 232800                  	db `#(\0`
 31809                                  fmt_real:
 31810 00001A19 256600                  	db `%f\0`
 31811                                  fmt_fraction:
 31812 00001A1C 256C642F256C6400        	db `%ld/%ld\0`
 31813                                  fmt_zero:
 31814 00001A24 3000                    	db `0\0`
 31815                                  fmt_int:
 31816 00001A26 256C6400                	db `%ld\0`
 31817                                  fmt_unknown_scheme_object_error:
 31818 00001A2A 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
 31818 00001A33 6F723A20556E6B6E6F-
 31818 00001A3C 776E20536368656D65-
 31818 00001A45 2D6F626A6563742028-
 31818 00001A4E 525454492030782530-
 31818 00001A57 32582920           
 31819 00001A5B 617420616464726573-     	db `at address 0x%08X\n\n\0`
 31819 00001A64 73203078253038580A-
 31819 00001A6D 0A00               
 31820                                  fmt_dquote:
 31821 00001A6F 2200                    	db `\"\0`
 31822                                  fmt_string_char:
 31823 00001A71 256300                          db `%c\0`
 31824                                  fmt_string_char_7:
 31825 00001A74 5C6100                          db `\\a\0`
 31826                                  fmt_string_char_8:
 31827 00001A77 5C6200                          db `\\b\0`
 31828                                  fmt_string_char_9:
 31829 00001A7A 5C7400                          db `\\t\0`
 31830                                  fmt_string_char_10:
 31831 00001A7D 5C6E00                          db `\\n\0`
 31832                                  fmt_string_char_11:
 31833 00001A80 5C7600                          db `\\v\0`
 31834                                  fmt_string_char_12:
 31835 00001A83 5C6600                          db `\\f\0`
 31836                                  fmt_string_char_13:
 31837 00001A86 5C7200                          db `\\r\0`
 31838                                  fmt_string_char_34:
 31839 00001A89 5C2200                          db `\\"\0`
 31840                                  fmt_string_char_92:
 31841 00001A8C 5C5C00                          db `\\\\\0`
 31842                                  fmt_string_char_hex:
 31843 00001A8F 5C7825583B00                    db `\\x%X;\0`
 31844                                  
 31845                                  section .text
 31846                                  
 31847                                  print_sexpr:
 31848 00017F45 C8000000                	enter 0, 0
 31849 00017F49 8A07                    	mov al, byte [rdi]
 31850 00017F4B 3C00                    	cmp al, T_void
 31851 00017F4D 7465                    	je .Lvoid
 31852 00017F4F 3C01                    	cmp al, T_nil
 31853 00017F51 7470                    	je .Lnil
 31854 00017F53 3C09                    	cmp al, T_boolean_false
 31855 00017F55 747B                    	je .Lboolean_false
 31856 00017F57 3C0A                    	cmp al, T_boolean_true
 31857 00017F59 0F8482000000            	je .Lboolean_true
 31858 00017F5F 3C02                    	cmp al, T_char
 31859 00017F61 0F8489000000            	je .Lchar
 31860 00017F67 3C41                    	cmp al, T_interned_symbol
 31861 00017F69 0F84CB010000            	je .Linterned_symbol
 31862 00017F6F 3C42                            cmp al, T_uninterned_symbol
 31863 00017F71 0F84EF010000                    je .Luninterned_symbol
 31864 00017F77 3C21                    	cmp al, T_pair
 31865 00017F79 0F84FA010000            	je .Lpair
 31866 00017F7F 3C22                    	cmp al, T_vector
 31867 00017F81 0F84C3020000            	je .Lvector
 31868 00017F87 3C04                    	cmp al, T_closure
 31869 00017F89 0F8491010000            	je .Lclosure
 31870 00017F8F 3C13                    	cmp al, T_real
 31871 00017F91 0F8454030000            	je .Lreal
 31872 00017F97 3C12                    	cmp al, T_fraction
 31873 00017F99 0F847A030000            	je .Lfraction
 31874 00017F9F 3C11                    	cmp al, T_integer
 31875 00017FA1 0F84B3030000            	je .Linteger
 31876 00017FA7 3C03                    	cmp al, T_string
 31877 00017FA9 0F84BE030000            	je .Lstring
 31878                                  
 31879 00017FAF E9F6040000              	jmp .Lunknown_sexpr_type
 31880                                  
 31881                                  .Lvoid:
 31882 00017FB4 48BF-                   	mov rdi, fmt_void
 31882 00017FB6 [6A19000000000000] 
 31883 00017FBE E91A050000              	jmp .Lemit
 31884                                  
 31885                                  .Lnil:
 31886 00017FC3 48BF-                   	mov rdi, fmt_nil
 31886 00017FC5 [7219000000000000] 
 31887 00017FCD E90B050000              	jmp .Lemit
 31888                                  
 31889                                  .Lboolean_false:
 31890 00017FD2 48BF-                   	mov rdi, fmt_boolean_false
 31890 00017FD4 [7519000000000000] 
 31891 00017FDC E9FC040000              	jmp .Lemit
 31892                                  
 31893                                  .Lboolean_true:
 31894 00017FE1 48BF-                   	mov rdi, fmt_boolean_true
 31894 00017FE3 [7819000000000000] 
 31895 00017FEB E9ED040000              	jmp .Lemit
 31896                                  
 31897                                  .Lchar:
 31898 00017FF0 8A4701                  	mov al, byte [rdi + 1]
 31899 00017FF3 3C20                    	cmp al, ' '
 31900 00017FF5 7E28                    	jle .Lchar_whitespace
 31901 00017FF7 3C5C                    	cmp al, 92 		; backslash
 31902 00017FF9 0F847C000000            	je .Lchar_backslash
 31903 00017FFF 3C22                    	cmp al, '"'
 31904 00018001 0F8483000000            	je .Lchar_dquote
 31905 00018007 4825FF000000            	and rax, 255
 31906 0001800D 48BF-                   	mov rdi, fmt_char_simple
 31906 0001800F [8319000000000000] 
 31907 00018017 4889C6                  	mov rsi, rax
 31908 0001801A E9BE040000              	jmp .Lemit
 31909                                  
 31910                                  .Lchar_whitespace:
 31911 0001801F 3C00                    	cmp al, 0
 31912 00018021 7476                    	je .Lchar_null
 31913 00018023 3C07                    	cmp al, 7
 31914 00018025 0F847D000000            	je .Lchar_bell
 31915 0001802B 3C08                    	cmp al, 8
 31916 0001802D 0F8484000000            	je .Lchar_backspace
 31917 00018033 3C09                    	cmp al, 9
 31918 00018035 0F848B000000            	je .Lchar_tab
 31919 0001803B 3C0A                    	cmp al, 10
 31920 0001803D 0F8492000000            	je .Lchar_newline
 31921 00018043 3C0C                    	cmp al, 12
 31922 00018045 0F8499000000            	je .Lchar_formfeed
 31923 0001804B 3C0D                    	cmp al, 13
 31924 0001804D 0F84A0000000            	je .Lchar_return
 31925 00018053 3C1B                    	cmp al, 27
 31926 00018055 0F84A7000000            	je .Lchar_escape
 31927 0001805B 4825FF000000            	and rax, 255
 31928 00018061 3C20                    	cmp al, ' '
 31929 00018063 0F84A8000000            	je .Lchar_space
 31930 00018069 48BF-                   	mov rdi, fmt_char_hex
 31930 0001806B [CF19000000000000] 
 31931 00018073 4889C6                  	mov rsi, rax
 31932 00018076 E962040000              	jmp .Lemit	
 31933                                  
 31934                                  .Lchar_backslash:
 31935 0001807B 48BF-                   	mov rdi, fmt_char_backslash
 31935 0001807D [7B19000000000000] 
 31936 00018085 E953040000              	jmp .Lemit
 31937                                  
 31938                                  .Lchar_dquote:
 31939 0001808A 48BF-                   	mov rdi, fmt_char_dquote
 31939 0001808C [7F19000000000000] 
 31940 00018094 E944040000              	jmp .Lemit
 31941                                  
 31942                                  .Lchar_null:
 31943 00018099 48BF-                   	mov rdi, fmt_char_null
 31943 0001809B [8819000000000000] 
 31944 000180A3 E935040000              	jmp .Lemit
 31945                                  
 31946                                  .Lchar_bell:
 31947 000180A8 48BF-                   	mov rdi, fmt_char_bell
 31947 000180AA [8E19000000000000] 
 31948 000180B2 E926040000              	jmp .Lemit
 31949                                  
 31950                                  .Lchar_backspace:
 31951 000180B7 48BF-                   	mov rdi, fmt_char_backspace
 31951 000180B9 [9519000000000000] 
 31952 000180C1 E917040000              	jmp .Lemit
 31953                                  
 31954                                  .Lchar_tab:
 31955 000180C6 48BF-                   	mov rdi, fmt_char_tab
 31955 000180C8 [A119000000000000] 
 31956 000180D0 E908040000              	jmp .Lemit
 31957                                  
 31958                                  .Lchar_newline:
 31959 000180D5 48BF-                   	mov rdi, fmt_char_newline
 31959 000180D7 [A719000000000000] 
 31960 000180DF E9F9030000              	jmp .Lemit
 31961                                  
 31962                                  .Lchar_formfeed:
 31963 000180E4 48BF-                   	mov rdi, fmt_char_formfeed
 31963 000180E6 [B119000000000000] 
 31964 000180EE E9EA030000              	jmp .Lemit
 31965                                  
 31966                                  .Lchar_return:
 31967 000180F3 48BF-                   	mov rdi, fmt_char_return
 31967 000180F5 [B819000000000000] 
 31968 000180FD E9DB030000              	jmp .Lemit
 31969                                  
 31970                                  .Lchar_escape:
 31971 00018102 48BF-                   	mov rdi, fmt_char_escape
 31971 00018104 [C119000000000000] 
 31972 0001810C E9CC030000              	jmp .Lemit
 31973                                  
 31974                                  .Lchar_space:
 31975 00018111 48BF-                   	mov rdi, fmt_char_space
 31975 00018113 [C719000000000000] 
 31976 0001811B E9BD030000              	jmp .Lemit
 31977                                  
 31978                                  .Lclosure:
 31979 00018120 4889FE                  	mov rsi, qword rdi
 31980 00018123 48BF-                   	mov rdi, fmt_closure
 31980 00018125 [DC19000000000000] 
 31981 0001812D 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
 31982 00018131 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
 31983 00018135 E9A3030000              	jmp .Lemit
 31984                                  
 31985                                  .Linterned_symbol:
 31986 0001813A 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
 31987 0001813E BE01000000              	mov rsi, 1		 ; size = 1 byte
 31988 00018143 488B5701                	mov rdx, qword [rdi + 1] ; length
 31989 00018147 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
 31990 0001814B 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
 31991                                  	ENTER
    44 00018153 C8000000            <1>  enter 0, 0
    45 00018157 4883E4F0            <1>  and rsp, ~15
 31992 0001815B E8(00000000)            	call fwrite
 31993                                  	LEAVE
    49 00018160 C9                  <1>  leave
 31994 00018161 E98C030000              	jmp .Lend
 31995                                  
 31996                                  .Luninterned_symbol:
 31997 00018166 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
 31998 0001816A 48BF-                           mov rdi, fmt_gensym
 31998 0001816C [D719000000000000] 
 31999 00018174 E964030000                      jmp .Lemit
 32000                                  	
 32001                                  .Lpair:
 32002 00018179 57                      	push rdi
 32003 0001817A 48BF-                   	mov rdi, fmt_lparen
 32003 0001817C [081A000000000000] 
 32004 00018184 B800000000              	mov rax, 0
 32005                                          ENTER
    44 00018189 C8000000            <1>  enter 0, 0
    45 0001818D 4883E4F0            <1>  and rsp, ~15
 32006 00018191 E8(00000000)            	call printf
 32007                                          LEAVE
    49 00018196 C9                  <1>  leave
 32008 00018197 488B3C24                	mov rdi, qword [rsp] 	; pair
 32009 0001819B 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 32010 0001819F E8A1FDFFFF              	call print_sexpr
 32011 000181A4 5F                      	pop rdi 		; pair
 32012 000181A5 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 32013                                  .Lcdr:
 32014 000181A9 8A07                    	mov al, byte [rdi]
 32015 000181AB 3C01                    	cmp al, T_nil
 32016 000181AD 7447                    	je .Lcdr_nil
 32017 000181AF 3C21                    	cmp al, T_pair
 32018 000181B1 7462                    	je .Lcdr_pair
 32019 000181B3 57                      	push rdi
 32020 000181B4 48BF-                   	mov rdi, fmt_dotted_pair
 32020 000181B6 [0A1A000000000000] 
 32021 000181BE B800000000              	mov rax, 0
 32022                                          ENTER
    44 000181C3 C8000000            <1>  enter 0, 0
    45 000181C7 4883E4F0            <1>  and rsp, ~15
 32023 000181CB E8(00000000)            	call printf
 32024                                          LEAVE
    49 000181D0 C9                  <1>  leave
 32025 000181D1 5F                      	pop rdi
 32026 000181D2 E86EFDFFFF              	call print_sexpr
 32027 000181D7 48BF-                   	mov rdi, fmt_rparen
 32027 000181D9 [0E1A000000000000] 
 32028 000181E1 B800000000              	mov rax, 0
 32029                                          ENTER
    44 000181E6 C8000000            <1>  enter 0, 0
    45 000181EA 4883E4F0            <1>  and rsp, ~15
 32030 000181EE E8(00000000)            	call printf
 32031                                          LEAVE
    49 000181F3 C9                  <1>  leave
 32032 000181F4 C9                      	leave
 32033 000181F5 C3                      	ret
 32034                                  
 32035                                  .Lcdr_nil:
 32036 000181F6 48BF-                   	mov rdi, fmt_rparen
 32036 000181F8 [0E1A000000000000] 
 32037 00018200 B800000000              	mov rax, 0
 32038                                          ENTER
    44 00018205 C8000000            <1>  enter 0, 0
    45 00018209 4883E4F0            <1>  and rsp, ~15
 32039 0001820D E8(00000000)            	call printf
 32040                                          LEAVE
    49 00018212 C9                  <1>  leave
 32041 00018213 C9                      	leave
 32042 00018214 C3                      	ret
 32043                                  
 32044                                  .Lcdr_pair:
 32045 00018215 57                      	push rdi
 32046 00018216 48BF-                   	mov rdi, fmt_space
 32046 00018218 [101A000000000000] 
 32047 00018220 B800000000              	mov rax, 0
 32048                                          ENTER
    44 00018225 C8000000            <1>  enter 0, 0
    45 00018229 4883E4F0            <1>  and rsp, ~15
 32049 0001822D E8(00000000)            	call printf
 32050                                          LEAVE
    49 00018232 C9                  <1>  leave
 32051 00018233 488B3C24                	mov rdi, qword [rsp]
 32052 00018237 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 32053 0001823B E805FDFFFF              	call print_sexpr
 32054 00018240 5F                      	pop rdi
 32055 00018241 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 32056 00018245 E95FFFFFFF              	jmp .Lcdr
 32057                                  
 32058                                  .Lvector:
 32059 0001824A 488B4701                	mov rax, qword [rdi + 1] ; length
 32060 0001824E 4883F800                	cmp rax, 0
 32061 00018252 0F8484000000            	je .Lvector_empty
 32062 00018258 57                      	push rdi
 32063 00018259 48BF-                   	mov rdi, fmt_vector
 32063 0001825B [161A000000000000] 
 32064 00018263 B800000000              	mov rax, 0
 32065                                          ENTER
    44 00018268 C8000000            <1>  enter 0, 0
    45 0001826C 4883E4F0            <1>  and rsp, ~15
 32066 00018270 E8(00000000)            	call printf
 32067                                          LEAVE
    49 00018275 C9                  <1>  leave
 32068 00018276 488B3C24                	mov rdi, qword [rsp]
 32069 0001827A FF7701                  	push qword [rdi + 1]
 32070 0001827D 6A01                    	push 1
 32071 0001827F 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
 32072 00018283 E8BDFCFFFF              	call print_sexpr
 32073                                  .Lvector_loop:
 32074                                  	; [rsp] index
 32075                                  	; [rsp + 8*1] limit
 32076                                  	; [rsp + 8*2] vector
 32077 00018288 488B0424                	mov rax, qword [rsp]
 32078 0001828C 483B442408              	cmp rax, qword [rsp + 8*1]
 32079 00018291 7436                    	je .Lvector_end
 32080 00018293 48BF-                   	mov rdi, fmt_space
 32080 00018295 [101A000000000000] 
 32081 0001829D B800000000              	mov rax, 0
 32082                                          ENTER
    44 000182A2 C8000000            <1>  enter 0, 0
    45 000182A6 4883E4F0            <1>  and rsp, ~15
 32083 000182AA E8(00000000)            	call printf
 32084                                          LEAVE
    49 000182AF C9                  <1>  leave
 32085 000182B0 488B0424                	mov rax, qword [rsp]
 32086 000182B4 488B5C2410              	mov rbx, qword [rsp + 8*2]
 32087 000182B9 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
 32088 000182BE E882FCFFFF              	call print_sexpr
 32089 000182C3 48FF0424                	inc qword [rsp]
 32090 000182C7 EBBF                    	jmp .Lvector_loop
 32091                                  
 32092                                  .Lvector_end:
 32093 000182C9 4883C418                	add rsp, 8*3
 32094 000182CD 48BF-                   	mov rdi, fmt_rparen
 32094 000182CF [0E1A000000000000] 
 32095 000182D7 E901020000              	jmp .Lemit	
 32096                                  
 32097                                  .Lvector_empty:
 32098 000182DC 48BF-                   	mov rdi, fmt_empty_vector
 32098 000182DE [121A000000000000] 
 32099 000182E6 E9F2010000              	jmp .Lemit
 32100                                  
 32101                                  .Lreal:
 32102 000182EB FF7701                  	push qword [rdi + 1]
 32103 000182EE F20F100424              	movsd xmm0, qword [rsp]
 32104 000182F3 4883C408                	add rsp, 8*1
 32105 000182F7 48BF-                   	mov rdi, fmt_real
 32105 000182F9 [191A000000000000] 
 32106 00018301 B801000000              	mov rax, 1
 32107                                  	ENTER
    44 00018306 C8000000            <1>  enter 0, 0
    45 0001830A 4883E4F0            <1>  and rsp, ~15
 32108 0001830E E8(00000000)            	call printf
 32109                                  	LEAVE
    49 00018313 C9                  <1>  leave
 32110 00018314 E9D9010000              	jmp .Lend
 32111                                  
 32112                                  .Lfraction:
 32113 00018319 488B7701                	mov rsi, qword [rdi + 1]
 32114 0001831D 488B5709                	mov rdx, qword [rdi + 1 + 8]
 32115 00018321 4883FE00                	cmp rsi, 0
 32116 00018325 7415                    	je .Lrat_zero
 32117 00018327 4883FA01                	cmp rdx, 1
 32118 0001832B 741E                    	je .Lrat_int
 32119 0001832D 48BF-                   	mov rdi, fmt_fraction
 32119 0001832F [1C1A000000000000] 
 32120 00018337 E9A1010000              	jmp .Lemit
 32121                                  
 32122                                  .Lrat_zero:
 32123 0001833C 48BF-                   	mov rdi, fmt_zero
 32123 0001833E [241A000000000000] 
 32124 00018346 E992010000              	jmp .Lemit
 32125                                  
 32126                                  .Lrat_int:
 32127 0001834B 48BF-                   	mov rdi, fmt_int
 32127 0001834D [261A000000000000] 
 32128 00018355 E983010000              	jmp .Lemit
 32129                                  
 32130                                  .Linteger:
 32131 0001835A 488B7701                	mov rsi, qword [rdi + 1]
 32132 0001835E 48BF-                   	mov rdi, fmt_int
 32132 00018360 [261A000000000000] 
 32133 00018368 E970010000              	jmp .Lemit
 32134                                  
 32135                                  .Lstring:
 32136 0001836D 488D4709                	lea rax, [rdi + 1 + 8]
 32137 00018371 50                      	push rax
 32138 00018372 FF7701                  	push qword [rdi + 1]
 32139 00018375 48BF-                   	mov rdi, fmt_dquote
 32139 00018377 [6F1A000000000000] 
 32140 0001837F B800000000              	mov rax, 0
 32141                                  	ENTER
    44 00018384 C8000000            <1>  enter 0, 0
    45 00018388 4883E4F0            <1>  and rsp, ~15
 32142 0001838C E8(00000000)            	call printf
 32143                                  	LEAVE
    49 00018391 C9                  <1>  leave
 32144                                  .Lstring_loop:
 32145                                  	; qword [rsp]: limit
 32146                                  	; qword [rsp + 8*1]: char *
 32147 00018392 48833C2400              	cmp qword [rsp], 0
 32148 00018397 0F84FD000000            	je .Lstring_end
 32149 0001839D 488B442408              	mov rax, qword [rsp + 8*1]
 32150 000183A2 8A00                    	mov al, byte [rax]
 32151 000183A4 4825FF000000            	and rax, 255
 32152 000183AA 3C07                    	cmp al, 7
 32153 000183AC 7468                            je .Lstring_char_7
 32154 000183AE 3C08                            cmp al, 8
 32155 000183B0 7470                            je .Lstring_char_8
 32156 000183B2 3C09                            cmp al, 9
 32157 000183B4 7478                            je .Lstring_char_9
 32158 000183B6 3C0A                            cmp al, 10
 32159 000183B8 0F847C000000                    je .Lstring_char_10
 32160 000183BE 3C0B                            cmp al, 11
 32161 000183C0 0F8480000000                    je .Lstring_char_11
 32162 000183C6 3C0C                            cmp al, 12
 32163 000183C8 0F8484000000                    je .Lstring_char_12
 32164 000183CE 3C0D                            cmp al, 13
 32165 000183D0 0F8488000000                    je .Lstring_char_13
 32166 000183D6 3C22                            cmp al, 34
 32167 000183D8 0F848C000000                    je .Lstring_char_34
 32168 000183DE 3C5C                            cmp al, 92              ;         je .Lstring_char_92
 32170 000183E0 3C20                            cmp al, ' '
 32171 000183E2 0F8CA0000000                    jl .Lstring_char_hex
 32172 000183E8 48BF-                           mov rdi, fmt_string_char
 32172 000183EA [711A000000000000] 
 32173 000183F2 4889C6                          mov rsi, rax
 32174                                  .Lstring_char_emit:
 32175 000183F5 B800000000                      mov rax, 0
 32176                                          ENTER
    44 000183FA C8000000            <1>  enter 0, 0
    45 000183FE 4883E4F0            <1>  and rsp, ~15
 32177 00018402 E8(00000000)                    call printf
 32178                                          LEAVE
    49 00018407 C9                  <1>  leave
 32179 00018408 48FF0C24                        dec qword [rsp]
 32180 0001840C 48FF442408                      inc qword [rsp + 8*1]
 32181 00018411 E97CFFFFFF                      jmp .Lstring_loop
 32182                                  
 32183                                  .Lstring_char_7:
 32184 00018416 48BF-                           mov rdi, fmt_string_char_7
 32184 00018418 [741A000000000000] 
 32185 00018420 EBD3                            jmp .Lstring_char_emit
 32186                                  
 32187                                  .Lstring_char_8:
 32188 00018422 48BF-                           mov rdi, fmt_string_char_8
 32188 00018424 [771A000000000000] 
 32189 0001842C EBC7                            jmp .Lstring_char_emit
 32190                                          
 32191                                  .Lstring_char_9:
 32192 0001842E 48BF-                           mov rdi, fmt_string_char_9
 32192 00018430 [7A1A000000000000] 
 32193 00018438 EBBB                            jmp .Lstring_char_emit
 32194                                  
 32195                                  .Lstring_char_10:
 32196 0001843A 48BF-                           mov rdi, fmt_string_char_10
 32196 0001843C [7D1A000000000000] 
 32197 00018444 EBAF                            jmp .Lstring_char_emit
 32198                                  
 32199                                  .Lstring_char_11:
 32200 00018446 48BF-                           mov rdi, fmt_string_char_11
 32200 00018448 [801A000000000000] 
 32201 00018450 EBA3                            jmp .Lstring_char_emit
 32202                                  
 32203                                  .Lstring_char_12:
 32204 00018452 48BF-                           mov rdi, fmt_string_char_12
 32204 00018454 [831A000000000000] 
 32205 0001845C EB97                            jmp .Lstring_char_emit
 32206                                  
 32207                                  .Lstring_char_13:
 32208 0001845E 48BF-                           mov rdi, fmt_string_char_13
 32208 00018460 [861A000000000000] 
 32209 00018468 EB8B                            jmp .Lstring_char_emit
 32210                                  
 32211                                  .Lstring_char_34:
 32212 0001846A 48BF-                           mov rdi, fmt_string_char_34
 32212 0001846C [891A000000000000] 
 32213 00018474 E97CFFFFFF                      jmp .Lstring_char_emit
 32214                                  
 32215                                  .Lstring_char_92:
 32216 00018479 48BF-                           mov rdi, fmt_string_char_92
 32216 0001847B [8C1A000000000000] 
 32217 00018483 E96DFFFFFF                      jmp .Lstring_char_emit
 32218                                  
 32219                                  .Lstring_char_hex:
 32220 00018488 48BF-                           mov rdi, fmt_string_char_hex
 32220 0001848A [8F1A000000000000] 
 32221 00018492 4889C6                          mov rsi, rax
 32222 00018495 E95BFFFFFF                      jmp .Lstring_char_emit        
 32223                                  
 32224                                  .Lstring_end:
 32225 0001849A 4883C410                	add rsp, 8 * 2
 32226 0001849E 48BF-                   	mov rdi, fmt_dquote
 32226 000184A0 [6F1A000000000000] 
 32227 000184A8 EB33                    	jmp .Lemit
 32228                                  
 32229                                  .Lunknown_sexpr_type:
 32230 000184AA 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
 32230 000184AC [2A1A000000000000] 
 32231 000184B4 4825FF000000            	and rax, 255
 32232 000184BA 4889C2                  	mov rdx, rax
 32233 000184BD 4889F9                  	mov rcx, rdi
 32234 000184C0 488B3C25[00000000]      	mov rdi, qword [stderr]
 32235 000184C8 B800000000              	mov rax, 0
 32236                                          ENTER
    44 000184CD C8000000            <1>  enter 0, 0
    45 000184D1 4883E4F0            <1>  and rsp, ~15
 32237 000184D5 E8(00000000)            	call fprintf
 32238                                          LEAVE
    49 000184DA C9                  <1>  leave
 32239 000184DB C9                              leave
 32240 000184DC C3                              ret
 32241                                  
 32242                                  .Lemit:
 32243 000184DD B800000000              	mov rax, 0
 32244                                          ENTER
    44 000184E2 C8000000            <1>  enter 0, 0
    45 000184E6 4883E4F0            <1>  and rsp, ~15
 32245 000184EA E8(00000000)            	call printf
 32246                                          LEAVE
    49 000184EF C9                  <1>  leave
 32247 000184F0 EB00                    	jmp .Lend
 32248                                  
 32249                                  .Lend:
 32250                                  	LEAVE
    49 000184F2 C9                  <1>  leave
 32251 000184F3 C3                      	ret
 32252                                  
 32253                                  ;;; rdi: address of free variable
 32254                                  ;;; rsi: address of code-pointer
 32255                                  bind_primitive:
 32256 000184F4 C8000000                        enter 0, 0
 32257 000184F8 57                              push rdi
 32258 000184F9 BF11000000                      mov rdi, (1 + 8 + 8)
 32259 000184FE E8C1F7FFFF                      call malloc
 32260 00018503 5F                              pop rdi
 32261 00018504 C60004                          mov byte [rax], T_closure
 32262 00018507 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
 32263 0001850F 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
 32264 00018513 488907                          mov qword [rdi], rax
 32265 00018516 48B8-                           mov rax, sob_void
 32265 00018518 [0000000000000000] 
 32266 00018520 C9                              leave
 32267 00018521 C3                              ret
 32268                                  
 32269                                  L_code_ptr_ash:
 32270 00018522 C8000000                        enter 0, 0
 32271 00018526 48837D1802                      cmp COUNT, 2
 32272 0001852B 0F8595140000                    jne L_error_arg_count_2
 32273 00018531 488B7D20                        mov rdi, PARAM(0)
 32274                                          assert_integer(rdi)
    53 00018535 803F11              <1>  cmp byte [%1], %2
    54 00018538 0F8527150000        <1>  jne L_error_incorrect_type
 32275 0001853E 488B4D28                        mov rcx, PARAM(1)
 32276                                          assert_integer(rcx)
    53 00018542 803911              <1>  cmp byte [%1], %2
    54 00018545 0F851A150000        <1>  jne L_error_incorrect_type
 32277 0001854B 488B7F01                        mov rdi, qword [rdi + 1]
 32278 0001854F 488B4901                        mov rcx, qword [rcx + 1]
 32279 00018553 4883F900                        cmp rcx, 0
 32280 00018557 7C0F                            jl .L_negative
 32281                                  .L_loop_positive:
 32282 00018559 4883F900                        cmp rcx, 0
 32283 0001855D 741B                            je .L_exit
 32284 0001855F 48D3E7                          sal rdi, cl
 32285 00018562 48C1E908                        shr rcx, 8
 32286 00018566 EBF1                            jmp .L_loop_positive
 32287                                  .L_negative:
 32288 00018568 48F7D9                          neg rcx
 32289                                  .L_loop_negative:
 32290 0001856B 4883F900                        cmp rcx, 0
 32291 0001856F 7409                            je .L_exit
 32292 00018571 48D3FF                          sar rdi, cl
 32293 00018574 48C1E908                        shr rcx, 8
 32294 00018578 EBF1                            jmp .L_loop_negative
 32295                                  .L_exit:
 32296 0001857A E861130000                      call make_integer
 32297 0001857F C9                              leave
 32298 00018580 C22000                          ret AND_KILL_FRAME(2)
 32299                                  
 32300                                  L_code_ptr_logand:
 32301 00018583 C8000000                        enter 0, 0
 32302 00018587 48837D1802                      cmp COUNT, 2
 32303 0001858C 0F8534140000                    jne L_error_arg_count_2
 32304 00018592 4C8B4520                        mov r8, PARAM(0)
 32305                                          assert_integer(r8)
    53 00018596 41803811            <1>  cmp byte [%1], %2
    54 0001859A 0F85C5140000        <1>  jne L_error_incorrect_type
 32306 000185A0 4C8B4D28                        mov r9, PARAM(1)
 32307                                          assert_integer(r9)
    53 000185A4 41803911            <1>  cmp byte [%1], %2
    54 000185A8 0F85B7140000        <1>  jne L_error_incorrect_type
 32308 000185AE 498B7801                        mov rdi, qword [r8 + 1]
 32309 000185B2 49237901                        and rdi, qword [r9 + 1]
 32310 000185B6 E825130000                      call make_integer
 32311 000185BB C9                              leave
 32312 000185BC C22000                          ret AND_KILL_FRAME(2)
 32313                                  
 32314                                  L_code_ptr_logor:
 32315 000185BF C8000000                        enter 0, 0
 32316 000185C3 48837D1802                      cmp COUNT, 2
 32317 000185C8 0F85F8130000                    jne L_error_arg_count_2
 32318 000185CE 4C8B4520                        mov r8, PARAM(0)
 32319                                          assert_integer(r8)
    53 000185D2 41803811            <1>  cmp byte [%1], %2
    54 000185D6 0F8589140000        <1>  jne L_error_incorrect_type
 32320 000185DC 4C8B4D28                        mov r9, PARAM(1)
 32321                                          assert_integer(r9)
    53 000185E0 41803911            <1>  cmp byte [%1], %2
    54 000185E4 0F857B140000        <1>  jne L_error_incorrect_type
 32322 000185EA 498B7801                        mov rdi, qword [r8 + 1]
 32323 000185EE 490B7901                        or rdi, qword [r9 + 1]
 32324 000185F2 E8E9120000                      call make_integer
 32325 000185F7 C9                              leave
 32326 000185F8 C22000                          ret AND_KILL_FRAME(2)
 32327                                  
 32328                                  L_code_ptr_logxor:
 32329 000185FB C8000000                        enter 0, 0
 32330 000185FF 48837D1802                      cmp COUNT, 2
 32331 00018604 0F85BC130000                    jne L_error_arg_count_2
 32332 0001860A 4C8B4520                        mov r8, PARAM(0)
 32333                                          assert_integer(r8)
    53 0001860E 41803811            <1>  cmp byte [%1], %2
    54 00018612 0F854D140000        <1>  jne L_error_incorrect_type
 32334 00018618 4C8B4D28                        mov r9, PARAM(1)
 32335                                          assert_integer(r9)
    53 0001861C 41803911            <1>  cmp byte [%1], %2
    54 00018620 0F853F140000        <1>  jne L_error_incorrect_type
 32336 00018626 498B7801                        mov rdi, qword [r8 + 1]
 32337 0001862A 49337901                        xor rdi, qword [r9 + 1]
 32338 0001862E E8AD120000                      call make_integer
 32339                                          LEAVE
    49 00018633 C9                  <1>  leave
 32340 00018634 C22000                          ret AND_KILL_FRAME(2)
 32341                                  
 32342                                  L_code_ptr_lognot:
 32343 00018637 C8000000                        enter 0, 0
 32344 0001863B 48837D1801                      cmp COUNT, 1
 32345 00018640 0F854B130000                    jne L_error_arg_count_1
 32346 00018646 4C8B4520                        mov r8, PARAM(0)
 32347                                          assert_integer(r8)
    53 0001864A 41803811            <1>  cmp byte [%1], %2
    54 0001864E 0F8511140000        <1>  jne L_error_incorrect_type
 32348 00018654 498B7801                        mov rdi, qword [r8 + 1]
 32349 00018658 48F7D7                          not rdi
 32350 0001865B E880120000                      call make_integer
 32351 00018660 C9                              leave
 32352 00018661 C21800                          ret AND_KILL_FRAME(1)
 32353                                  
 32354                                  L_code_ptr_bin_apply:
 32355                                          ;assuming we have 2 params - f and list to apply f on it
 32356 00018664 48837D1802                      cmp COUNT, 2
 32357 00018669 0F8C57130000                    jl L_error_arg_count_2    ; f and list
 32358 0001866F 4C8B4500                        mov r8, qword[rbp]      ;backup rbp  
 32359 00018673 4C8B4D08                        mov r9, qword[rbp +8]   ;backup ret addr
 32360 00018677 4C8B7D28                        mov r15, PARAM(1)         ;get list
 32361 0001867B 488B4520                        mov rax, PARAM(0)         ;get f
 32362                                  
 32363                                          assert_closure(rax)        ; Count elements in the list
    53 0001867F 803804              <1>  cmp byte [%1], %2
    54 00018682 0F85DD130000        <1>  jne L_error_incorrect_type
 32364 00018688 41BA00000000                    mov r10, 0                ;counter
 32365 0001868E 4D89FB                          mov r11, r15 ; Is the list pointer
 32366                                         
 32367                                          
 32368                                  .count_loop:
 32369 00018691 49813B[01000000]                cmp qword[r11], sob_nil ;checking if we done, it's a proper list
 32370 00018698 7409                            je .write_over_frame
 32371 0001869A 49FFC2                          inc r10                   ; Increment list element count
 32372 0001869D 4D8B5B09                        mov r11, SOB_PAIR_CDR(r11) ;getting the next element in s if error might be here
 32373 000186A1 EBEE                            jmp .count_loop
 32374                                  
 32375                                          ;r10 list length
 32376                                  
 32377                                  .write_over_frame:
 32378 000186A3 4D89D3                          mov r11, r10 ;
 32379 000186A6 4983EB02                        sub r11, 2 ;how much to increase rbp for list argumetns
 32380 000186AA 49C1E303                        shl r11, 3 ;multiply by 8
 32381 000186AE 4C29DD                          sub rbp, r11 ;making space for list arguemtns
 32382                                  
 32383                                  .mov_env_rbp:
 32384 000186B1 4C894500                        mov qword[rbp], r8 ;restore old rbp ;now rbp points to the right position
 32385 000186B5 4C894D08                        mov qword[rbp + 8], r9 ;restore old ret addr
 32386 000186B9 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 32387 000186BD 48895D10                        mov qword[rbp + 8*2], rbx ;save the env in the new frame
 32388 000186C1 4C895518                        mov qword[rbp+ 8*3], r10 ;save the number of params in the new frame
 32389 000186C5 41BB00000000                    mov r11, 0;
 32390                                          ;r10 is the originl list length
 32391                                  .copy_list_arguments:
 32392 000186CB 4D39D3                          cmp r11, r10 ;reached to the end of the list
 32393 000186CE 7412                            je .done_copy_list_arguments;
 32394 000186D0 4D8B6701                        mov r12, SOB_PAIR_CAR(r15) ;get the car of the list
 32395 000186D4 4E8964DD20                      mov qword PARAM(r11), r12 ;copy the car to the new frame
 32396 000186D9 4D8B7F09                        mov r15, SOB_PAIR_CDR(r15) ;get the cdr of the list
 32397 000186DD 49FFC3                          inc r11
 32398 000186E0 EBE9                            jmp .copy_list_arguments
 32399                                          ;;;rsp now points to the old ret?
 32400                                          ;;;rbp now points to the older rbp?
 32401                                  .done_copy_list_arguments:
 32402 000186E2 488D6508                        lea rsp, [rbp + 8*1]
 32403 000186E6 FF6009                          jmp SOB_CLOSURE_CODE(rax) ;jump to the code of the closure
 32404                                  
 32405                                  
 32406                                  L_code_ptr_is_null:
 32407 000186E9 C8000000                        enter 0, 0
 32408 000186ED 48837D1801                      cmp COUNT, 1
 32409 000186F2 0F8599120000                    jne L_error_arg_count_1
 32410 000186F8 488B4520                        mov rax, PARAM(0)
 32411 000186FC 803801                          cmp byte [rax], T_nil
 32412 000186FF 750C                            jne .L_false
 32413 00018701 48B8-                           mov rax, sob_boolean_true
 32413 00018703 [0300000000000000] 
 32414 0001870B EB0A                            jmp .L_end
 32415                                  .L_false:
 32416 0001870D 48B8-                           mov rax, sob_boolean_false
 32416 0001870F [0200000000000000] 
 32417                                  .L_end:
 32418 00018717 C9                              leave
 32419 00018718 C21800                          ret AND_KILL_FRAME(1)
 32420                                  
 32421                                  L_code_ptr_is_pair:
 32422 0001871B C8000000                        enter 0, 0
 32423 0001871F 48837D1801                      cmp COUNT, 1
 32424 00018724 0F8567120000                    jne L_error_arg_count_1
 32425 0001872A 488B4520                        mov rax, PARAM(0)
 32426 0001872E 803821                          cmp byte [rax], T_pair
 32427 00018731 750C                            jne .L_false
 32428 00018733 48B8-                           mov rax, sob_boolean_true
 32428 00018735 [0300000000000000] 
 32429 0001873D EB0A                            jmp .L_end
 32430                                  .L_false:
 32431 0001873F 48B8-                           mov rax, sob_boolean_false
 32431 00018741 [0200000000000000] 
 32432                                  .L_end:
 32433 00018749 C9                              leave
 32434 0001874A C21800                          ret AND_KILL_FRAME(1)
 32435                                          
 32436                                  L_code_ptr_is_void:
 32437 0001874D C8000000                        enter 0, 0
 32438 00018751 48837D1801                      cmp COUNT, 1
 32439 00018756 0F8535120000                    jne L_error_arg_count_1
 32440 0001875C 488B4520                        mov rax, PARAM(0)
 32441 00018760 803800                          cmp byte [rax], T_void
 32442 00018763 750C                            jne .L_false
 32443 00018765 48B8-                           mov rax, sob_boolean_true
 32443 00018767 [0300000000000000] 
 32444 0001876F EB0A                            jmp .L_end
 32445                                  .L_false:
 32446 00018771 48B8-                           mov rax, sob_boolean_false
 32446 00018773 [0200000000000000] 
 32447                                  .L_end:
 32448 0001877B C9                              leave
 32449 0001877C C21800                          ret AND_KILL_FRAME(1)
 32450                                  
 32451                                  L_code_ptr_is_char:
 32452 0001877F C8000000                        enter 0, 0
 32453 00018783 48837D1801                      cmp COUNT, 1
 32454 00018788 0F8503120000                    jne L_error_arg_count_1
 32455 0001878E 488B4520                        mov rax, PARAM(0)
 32456 00018792 803802                          cmp byte [rax], T_char
 32457 00018795 750C                            jne .L_false
 32458 00018797 48B8-                           mov rax, sob_boolean_true
 32458 00018799 [0300000000000000] 
 32459 000187A1 EB0A                            jmp .L_end
 32460                                  .L_false:
 32461 000187A3 48B8-                           mov rax, sob_boolean_false
 32461 000187A5 [0200000000000000] 
 32462                                  .L_end:
 32463 000187AD C9                              leave
 32464 000187AE C21800                          ret AND_KILL_FRAME(1)
 32465                                  
 32466                                  L_code_ptr_is_string:
 32467 000187B1 C8000000                        enter 0, 0
 32468 000187B5 48837D1801                      cmp COUNT, 1
 32469 000187BA 0F85D1110000                    jne L_error_arg_count_1
 32470 000187C0 488B4520                        mov rax, PARAM(0)
 32471 000187C4 803803                          cmp byte [rax], T_string
 32472 000187C7 750C                            jne .L_false
 32473 000187C9 48B8-                           mov rax, sob_boolean_true
 32473 000187CB [0300000000000000] 
 32474 000187D3 EB0A                            jmp .L_end
 32475                                  .L_false:
 32476 000187D5 48B8-                           mov rax, sob_boolean_false
 32476 000187D7 [0200000000000000] 
 32477                                  .L_end:
 32478 000187DF C9                              leave
 32479 000187E0 C21800                          ret AND_KILL_FRAME(1)
 32480                                  
 32481                                  L_code_ptr_is_symbol:
 32482 000187E3 C8000000                        enter 0, 0
 32483 000187E7 48837D1801                      cmp COUNT, 1
 32484 000187EC 0F859F110000                    jne L_error_arg_count_1
 32485 000187F2 4C8B4520                        mov r8, PARAM(0)
 32486 000187F6 41802040                        and byte [r8], T_symbol
 32487 000187FA 740C                            jz .L_false
 32488 000187FC 48B8-                           mov rax, sob_boolean_true
 32488 000187FE [0300000000000000] 
 32489 00018806 EB0A                            jmp .L_exit
 32490                                  .L_false:
 32491 00018808 48B8-                           mov rax, sob_boolean_false
 32491 0001880A [0200000000000000] 
 32492                                  .L_exit:
 32493 00018812 C9                              leave
 32494 00018813 C21800                          ret AND_KILL_FRAME(1)
 32495                                  
 32496                                  L_code_ptr_is_uninterned_symbol:
 32497 00018816 C8000000                        enter 0, 0
 32498 0001881A 48837D1801                      cmp COUNT, 1
 32499 0001881F 0F856C110000                    jne L_error_arg_count_1
 32500 00018825 4C8B4520                        mov r8, PARAM(0)
 32501 00018829 41803842                        cmp byte [r8], T_uninterned_symbol
 32502 0001882D 750C                            jne .L_false
 32503 0001882F 48B8-                           mov rax, sob_boolean_true
 32503 00018831 [0300000000000000] 
 32504 00018839 EB0A                            jmp .L_exit
 32505                                  .L_false:
 32506 0001883B 48B8-                           mov rax, sob_boolean_false
 32506 0001883D [0200000000000000] 
 32507                                  .L_exit:
 32508 00018845 C9                              leave
 32509 00018846 C21800                          ret AND_KILL_FRAME(1)
 32510                                  
 32511                                  L_code_ptr_is_interned_symbol:
 32512 00018849 C8000000                        enter 0, 0
 32513 0001884D 48837D1801                      cmp COUNT, 1
 32514 00018852 0F8539110000                    jne L_error_arg_count_1
 32515 00018858 488B4520                        mov rax, PARAM(0)
 32516 0001885C 803841                          cmp byte [rax], T_interned_symbol
 32517 0001885F 750C                            jne .L_false
 32518 00018861 48B8-                           mov rax, sob_boolean_true
 32518 00018863 [0300000000000000] 
 32519 0001886B EB0A                            jmp .L_end
 32520                                  .L_false:
 32521 0001886D 48B8-                           mov rax, sob_boolean_false
 32521 0001886F [0200000000000000] 
 32522                                  .L_end:
 32523 00018877 C9                              leave
 32524 00018878 C21800                          ret AND_KILL_FRAME(1)
 32525                                  
 32526                                  L_code_ptr_gensym:
 32527 0001887B C8000000                        enter 0, 0
 32528 0001887F 48837D1800                      cmp COUNT, 0
 32529 00018884 0F85D2100000                    jne L_error_arg_count_0
 32530 0001888A 48FF0425[951A0000]              inc qword [gensym_count]
 32531 00018892 BF09000000                      mov rdi, (1 + 8)
 32532 00018897 E828F4FFFF                      call malloc
 32533 0001889C C60042                          mov byte [rax], T_uninterned_symbol
 32534 0001889F 488B0C25[951A0000]              mov rcx, qword [gensym_count]
 32535 000188A7 48894801                        mov qword [rax + 1], rcx
 32536 000188AB C9                              leave
 32537 000188AC C21000                          ret AND_KILL_FRAME(0)
 32538                                  
 32539                                  L_code_ptr_is_vector:
 32540 000188AF C8000000                        enter 0, 0
 32541 000188B3 48837D1801                      cmp COUNT, 1
 32542 000188B8 0F85D3100000                    jne L_error_arg_count_1
 32543 000188BE 488B4520                        mov rax, PARAM(0)
 32544 000188C2 803822                          cmp byte [rax], T_vector
 32545 000188C5 750C                            jne .L_false
 32546 000188C7 48B8-                           mov rax, sob_boolean_true
 32546 000188C9 [0300000000000000] 
 32547 000188D1 EB0A                            jmp .L_end
 32548                                  .L_false:
 32549 000188D3 48B8-                           mov rax, sob_boolean_false
 32549 000188D5 [0200000000000000] 
 32550                                  .L_end:
 32551 000188DD C9                              leave
 32552 000188DE C21800                          ret AND_KILL_FRAME(1)
 32553                                  
 32554                                  L_code_ptr_is_closure:
 32555 000188E1 C8000000                        enter 0, 0
 32556 000188E5 48837D1801                      cmp COUNT, 1
 32557 000188EA 0F85A1100000                    jne L_error_arg_count_1
 32558 000188F0 488B4520                        mov rax, PARAM(0)
 32559 000188F4 803804                          cmp byte [rax], T_closure
 32560 000188F7 750C                            jne .L_false
 32561 000188F9 48B8-                           mov rax, sob_boolean_true
 32561 000188FB [0300000000000000] 
 32562 00018903 EB0A                            jmp .L_end
 32563                                  .L_false:
 32564 00018905 48B8-                           mov rax, sob_boolean_false
 32564 00018907 [0200000000000000] 
 32565                                  .L_end:
 32566 0001890F C9                              leave
 32567 00018910 C21800                          ret AND_KILL_FRAME(1)
 32568                                  
 32569                                  L_code_ptr_is_real:
 32570 00018913 C8000000                        enter 0, 0
 32571 00018917 48837D1801                      cmp COUNT, 1
 32572 0001891C 0F856F100000                    jne L_error_arg_count_1
 32573 00018922 488B4520                        mov rax, PARAM(0)
 32574 00018926 803813                          cmp byte [rax], T_real
 32575 00018929 750C                            jne .L_false
 32576 0001892B 48B8-                           mov rax, sob_boolean_true
 32576 0001892D [0300000000000000] 
 32577 00018935 EB0A                            jmp .L_end
 32578                                  .L_false:
 32579 00018937 48B8-                           mov rax, sob_boolean_false
 32579 00018939 [0200000000000000] 
 32580                                  .L_end:
 32581 00018941 C9                              leave
 32582 00018942 C21800                          ret AND_KILL_FRAME(1)
 32583                                  
 32584                                  L_code_ptr_is_fraction:
 32585 00018945 C8000000                        enter 0, 0
 32586 00018949 48837D1801                      cmp COUNT, 1
 32587 0001894E 0F853D100000                    jne L_error_arg_count_1
 32588 00018954 488B4520                        mov rax, PARAM(0)
 32589 00018958 803812                          cmp byte [rax], T_fraction
 32590 0001895B 750C                            jne .L_false
 32591 0001895D 48B8-                           mov rax, sob_boolean_true
 32591 0001895F [0300000000000000] 
 32592 00018967 EB0A                            jmp .L_end
 32593                                  .L_false:
 32594 00018969 48B8-                           mov rax, sob_boolean_false
 32594 0001896B [0200000000000000] 
 32595                                  .L_end:
 32596 00018973 C9                              leave
 32597 00018974 C21800                          ret AND_KILL_FRAME(1)
 32598                                  
 32599                                  L_code_ptr_is_boolean:
 32600 00018977 C8000000                        enter 0, 0
 32601 0001897B 48837D1801                      cmp COUNT, 1
 32602 00018980 0F850B100000                    jne L_error_arg_count_1
 32603 00018986 488B4520                        mov rax, PARAM(0)
 32604 0001898A 8A18                            mov bl, byte [rax]
 32605 0001898C 80E308                          and bl, T_boolean
 32606 0001898F 740C                            je .L_false
 32607 00018991 48B8-                           mov rax, sob_boolean_true
 32607 00018993 [0300000000000000] 
 32608 0001899B EB0A                            jmp .L_end
 32609                                  .L_false:
 32610 0001899D 48B8-                           mov rax, sob_boolean_false
 32610 0001899F [0200000000000000] 
 32611                                  .L_end:
 32612 000189A7 C9                              leave
 32613 000189A8 C21800                          ret AND_KILL_FRAME(1)
 32614                                          
 32615                                  L_code_ptr_is_boolean_false:
 32616 000189AB C8000000                        enter 0, 0
 32617 000189AF 48837D1801                      cmp COUNT, 1
 32618 000189B4 0F85D70F0000                    jne L_error_arg_count_1
 32619 000189BA 488B4520                        mov rax, PARAM(0)
 32620 000189BE 8A18                            mov bl, byte [rax]
 32621 000189C0 80FB09                          cmp bl, T_boolean_false
 32622 000189C3 750C                            jne .L_false
 32623 000189C5 48B8-                           mov rax, sob_boolean_true
 32623 000189C7 [0300000000000000] 
 32624 000189CF EB0A                            jmp .L_end
 32625                                  .L_false:
 32626 000189D1 48B8-                           mov rax, sob_boolean_false
 32626 000189D3 [0200000000000000] 
 32627                                  .L_end:
 32628 000189DB C9                              leave
 32629 000189DC C21800                          ret AND_KILL_FRAME(1)
 32630                                  
 32631                                  L_code_ptr_is_boolean_true:
 32632 000189DF C8000000                        enter 0, 0
 32633 000189E3 48837D1801                      cmp COUNT, 1
 32634 000189E8 0F85A30F0000                    jne L_error_arg_count_1
 32635 000189EE 488B4520                        mov rax, PARAM(0)
 32636 000189F2 8A18                            mov bl, byte [rax]
 32637 000189F4 80FB0A                          cmp bl, T_boolean_true
 32638 000189F7 750C                            jne .L_false
 32639 000189F9 48B8-                           mov rax, sob_boolean_true
 32639 000189FB [0300000000000000] 
 32640 00018A03 EB0A                            jmp .L_end
 32641                                  .L_false:
 32642 00018A05 48B8-                           mov rax, sob_boolean_false
 32642 00018A07 [0200000000000000] 
 32643                                  .L_end:
 32644 00018A0F C9                              leave
 32645 00018A10 C21800                          ret AND_KILL_FRAME(1)
 32646                                  
 32647                                  L_code_ptr_is_number:
 32648 00018A13 C8000000                        enter 0, 0
 32649 00018A17 48837D1801                      cmp COUNT, 1
 32650 00018A1C 0F856F0F0000                    jne L_error_arg_count_1
 32651 00018A22 488B4520                        mov rax, PARAM(0)
 32652 00018A26 8A18                            mov bl, byte [rax]
 32653 00018A28 80E310                          and bl, T_number
 32654 00018A2B 740C                            jz .L_false
 32655 00018A2D 48B8-                           mov rax, sob_boolean_true
 32655 00018A2F [0300000000000000] 
 32656 00018A37 EB0A                            jmp .L_end
 32657                                  .L_false:
 32658 00018A39 48B8-                           mov rax, sob_boolean_false
 32658 00018A3B [0200000000000000] 
 32659                                  .L_end:
 32660 00018A43 C9                              leave
 32661 00018A44 C21800                          ret AND_KILL_FRAME(1)
 32662                                          
 32663                                  L_code_ptr_is_collection:
 32664 00018A47 C8000000                        enter 0, 0
 32665 00018A4B 48837D1801                      cmp COUNT, 1
 32666 00018A50 0F853B0F0000                    jne L_error_arg_count_1
 32667 00018A56 488B4520                        mov rax, PARAM(0)
 32668 00018A5A 8A18                            mov bl, byte [rax]
 32669 00018A5C 80E320                          and bl, T_collection
 32670 00018A5F 740C                            je .L_false
 32671 00018A61 48B8-                           mov rax, sob_boolean_true
 32671 00018A63 [0300000000000000] 
 32672 00018A6B EB0A                            jmp .L_end
 32673                                  .L_false:
 32674 00018A6D 48B8-                           mov rax, sob_boolean_false
 32674 00018A6F [0200000000000000] 
 32675                                  .L_end:
 32676 00018A77 C9                              leave
 32677 00018A78 C21800                          ret AND_KILL_FRAME(1)
 32678                                  
 32679                                  L_code_ptr_cons:
 32680 00018A7B C8000000                        enter 0, 0
 32681 00018A7F 48837D1802                      cmp COUNT, 2
 32682 00018A84 0F853C0F0000                    jne L_error_arg_count_2
 32683 00018A8A BF11000000                      mov rdi, (1 + 8 + 8)
 32684 00018A8F E830F2FFFF                      call malloc
 32685 00018A94 C60021                          mov byte [rax], T_pair
 32686 00018A97 488B5D20                        mov rbx, PARAM(0)
 32687 00018A9B 48895801                        mov SOB_PAIR_CAR(rax), rbx
 32688 00018A9F 488B5D28                        mov rbx, PARAM(1)
 32689 00018AA3 48895809                        mov SOB_PAIR_CDR(rax), rbx
 32690 00018AA7 C9                              leave
 32691 00018AA8 C22000                          ret AND_KILL_FRAME(2)
 32692                                  
 32693                                  L_code_ptr_display_sexpr:
 32694 00018AAB C8000000                        enter 0, 0
 32695 00018AAF 48837D1801                      cmp COUNT, 1
 32696 00018AB4 0F85D70E0000                    jne L_error_arg_count_1
 32697 00018ABA 488B7D20                        mov rdi, PARAM(0)
 32698 00018ABE E882F4FFFF                      call print_sexpr
 32699 00018AC3 48B8-                           mov rax, sob_void
 32699 00018AC5 [0000000000000000] 
 32700 00018ACD C9                              leave
 32701 00018ACE C21800                          ret AND_KILL_FRAME(1)
 32702                                  
 32703                                  L_code_ptr_write_char:
 32704 00018AD1 C8000000                        enter 0, 0
 32705 00018AD5 48837D1801                      cmp COUNT, 1
 32706 00018ADA 0F85B10E0000                    jne L_error_arg_count_1
 32707 00018AE0 488B4520                        mov rax, PARAM(0)
 32708                                          assert_char(rax)
    53 00018AE4 803802              <1>  cmp byte [%1], %2
    54 00018AE7 0F85780F0000        <1>  jne L_error_incorrect_type
 32709 00018AED 8A4001                          mov al, SOB_CHAR_VALUE(rax)
 32710 00018AF0 4825FF000000                    and rax, 255
 32711 00018AF6 48BF-                           mov rdi, fmt_char
 32711 00018AF8 [9D1A000000000000] 
 32712 00018B00 4889C6                          mov rsi, rax
 32713 00018B03 B800000000                      mov rax, 0
 32714                                          ENTER
    44 00018B08 C8000000            <1>  enter 0, 0
    45 00018B0C 4883E4F0            <1>  and rsp, ~15
 32715 00018B10 E8(00000000)                    call printf
 32716                                          LEAVE
    49 00018B15 C9                  <1>  leave
 32717 00018B16 48B8-                           mov rax, sob_void
 32717 00018B18 [0000000000000000] 
 32718 00018B20 C9                              leave
 32719 00018B21 C21800                          ret AND_KILL_FRAME(1)
 32720                                  
 32721                                  L_code_ptr_car:
 32722 00018B24 C8000000                        enter 0, 0
 32723 00018B28 48837D1801                      cmp COUNT, 1
 32724 00018B2D 0F855E0E0000                    jne L_error_arg_count_1
 32725 00018B33 488B4520                        mov rax, PARAM(0)
 32726                                          assert_pair(rax)
    53 00018B37 803821              <1>  cmp byte [%1], %2
    54 00018B3A 0F85250F0000        <1>  jne L_error_incorrect_type
 32727 00018B40 488B4001                        mov rax, SOB_PAIR_CAR(rax)
 32728 00018B44 C9                              leave
 32729 00018B45 C21800                          ret AND_KILL_FRAME(1)
 32730                                          
 32731                                  L_code_ptr_cdr:
 32732 00018B48 C8000000                        enter 0, 0
 32733 00018B4C 48837D1801                      cmp COUNT, 1
 32734 00018B51 0F853A0E0000                    jne L_error_arg_count_1
 32735 00018B57 488B4520                        mov rax, PARAM(0)
 32736                                          assert_pair(rax)
    53 00018B5B 803821              <1>  cmp byte [%1], %2
    54 00018B5E 0F85010F0000        <1>  jne L_error_incorrect_type
 32737 00018B64 488B4009                        mov rax, SOB_PAIR_CDR(rax)
 32738 00018B68 C9                              leave
 32739 00018B69 C21800                          ret AND_KILL_FRAME(1)
 32740                                          
 32741                                  L_code_ptr_string_length:
 32742 00018B6C C8000000                        enter 0, 0
 32743 00018B70 48837D1801                      cmp COUNT, 1
 32744 00018B75 0F85160E0000                    jne L_error_arg_count_1
 32745 00018B7B 488B4520                        mov rax, PARAM(0)
 32746                                          assert_string(rax)
    53 00018B7F 803803              <1>  cmp byte [%1], %2
    54 00018B82 0F85DD0E0000        <1>  jne L_error_incorrect_type
 32747 00018B88 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
 32748 00018B8C E84F0D0000                      call make_integer
 32749 00018B91 C9                              leave
 32750 00018B92 C21800                          ret AND_KILL_FRAME(1)
 32751                                  
 32752                                  L_code_ptr_vector_length:
 32753 00018B95 C8000000                        enter 0, 0
 32754 00018B99 48837D1801                      cmp COUNT, 1
 32755 00018B9E 0F85ED0D0000                    jne L_error_arg_count_1
 32756 00018BA4 488B4520                        mov rax, PARAM(0)
 32757                                          assert_vector(rax)
    53 00018BA8 803822              <1>  cmp byte [%1], %2
    54 00018BAB 0F85B40E0000        <1>  jne L_error_incorrect_type
 32758 00018BB1 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
 32759 00018BB5 E8260D0000                      call make_integer
 32760 00018BBA C9                              leave
 32761 00018BBB C21800                          ret AND_KILL_FRAME(1)
 32762                                  
 32763                                  L_code_ptr_real_to_integer:
 32764 00018BBE C8000000                        enter 0, 0
 32765 00018BC2 48837D1801                      cmp COUNT, 1
 32766 00018BC7 0F85C40D0000                    jne L_error_arg_count_1
 32767 00018BCD 488B5D20                        mov rbx, PARAM(0)
 32768                                          assert_real(rbx)
    53 00018BD1 803B13              <1>  cmp byte [%1], %2
    54 00018BD4 0F858B0E0000        <1>  jne L_error_incorrect_type
 32769 00018BDA F20F104301                      movsd xmm0, qword [rbx + 1]
 32770 00018BDF F2480F2CF8                      cvttsd2si rdi, xmm0
 32771 00018BE4 E8F70C0000                      call make_integer
 32772 00018BE9 C9                              leave
 32773 00018BEA C21800                          ret AND_KILL_FRAME(1)
 32774                                  
 32775                                  L_code_ptr_exit:
 32776 00018BED C8000000                        enter 0, 0
 32777 00018BF1 48837D1800                      cmp COUNT, 0
 32778 00018BF6 0F85600D0000                    jne L_error_arg_count_0
 32779 00018BFC B800000000                      mov rax, 0
 32780 00018C01 E8(00000000)                    call exit
 32781                                  
 32782                                  L_code_ptr_integer_to_real:
 32783 00018C06 C8000000                        enter 0, 0
 32784 00018C0A 48837D1801                      cmp COUNT, 1
 32785 00018C0F 0F857C0D0000                    jne L_error_arg_count_1
 32786 00018C15 488B4520                        mov rax, PARAM(0)
 32787                                          assert_integer(rax)
    53 00018C19 803811              <1>  cmp byte [%1], %2
    54 00018C1C 0F85430E0000        <1>  jne L_error_incorrect_type
 32788 00018C22 FF7001                          push qword [rax + 1]
 32789 00018C25 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 32790 00018C2B E8980C0000                      call make_real
 32791 00018C30 C9                              leave
 32792 00018C31 C21800                          ret AND_KILL_FRAME(1)
 32793                                  
 32794                                  L_code_ptr_fraction_to_real:
 32795 00018C34 C8000000                        enter 0, 0
 32796 00018C38 48837D1801                      cmp COUNT, 1
 32797 00018C3D 0F854E0D0000                    jne L_error_arg_count_1
 32798 00018C43 488B4520                        mov rax, PARAM(0)
 32799                                          assert_fraction(rax)
    53 00018C47 803812              <1>  cmp byte [%1], %2
    54 00018C4A 0F85150E0000        <1>  jne L_error_incorrect_type
 32800 00018C50 FF7001                          push qword [rax + 1]
 32801 00018C53 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 32802 00018C59 FF7009                          push qword [rax + 1 + 8]
 32803 00018C5C F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
 32804 00018C62 F20F5EC1                        divsd xmm0, xmm1
 32805 00018C66 E85D0C0000                      call make_real
 32806 00018C6B C9                              leave
 32807 00018C6C C21800                          ret AND_KILL_FRAME(1)
 32808                                  
 32809                                  L_code_ptr_char_to_integer:
 32810 00018C6F C8000000                        enter 0, 0
 32811 00018C73 48837D1801                      cmp COUNT, 1
 32812 00018C78 0F85130D0000                    jne L_error_arg_count_1
 32813 00018C7E 488B4520                        mov rax, PARAM(0)
 32814                                          assert_char(rax)
    53 00018C82 803802              <1>  cmp byte [%1], %2
    54 00018C85 0F85DA0D0000        <1>  jne L_error_incorrect_type
 32815 00018C8B 8A4001                          mov al, byte [rax + 1]
 32816 00018C8E 4825FF000000                    and rax, 255
 32817 00018C94 4889C7                          mov rdi, rax
 32818 00018C97 E8440C0000                      call make_integer
 32819 00018C9C C9                              leave
 32820 00018C9D C21800                          ret AND_KILL_FRAME(1)
 32821                                  
 32822                                  L_code_ptr_integer_to_fraction:
 32823 00018CA0 C8000000                        enter 0, 0
 32824 00018CA4 48837D1801                      cmp COUNT, 1
 32825 00018CA9 0F85E20C0000                    jne L_error_arg_count_1
 32826 00018CAF 4C8B4520                        mov r8, PARAM(0)
 32827                                          assert_integer(r8)
    53 00018CB3 41803811            <1>  cmp byte [%1], %2
    54 00018CB7 0F85A80D0000        <1>  jne L_error_incorrect_type
 32828 00018CBD BF11000000                      mov rdi, (1 + 8 + 8)
 32829 00018CC2 E8FDEFFFFF                      call malloc
 32830 00018CC7 498B5801                        mov rbx, qword [r8 + 1]
 32831 00018CCB C60012                          mov byte [rax], T_fraction
 32832 00018CCE 48895801                        mov qword [rax + 1], rbx
 32833 00018CD2 48C7400901000000                mov qword [rax + 1 + 8], 1
 32834 00018CDA C9                              leave
 32835 00018CDB C21800                          ret AND_KILL_FRAME(1)
 32836                                  
 32837                                  L_code_ptr_integer_to_char:
 32838 00018CDE C8000000                        enter 0, 0
 32839 00018CE2 48837D1801                      cmp COUNT, 1
 32840 00018CE7 0F85A40C0000                    jne L_error_arg_count_1
 32841 00018CED 488B4520                        mov rax, PARAM(0)
 32842                                          assert_integer(rax)
    53 00018CF1 803811              <1>  cmp byte [%1], %2
    54 00018CF4 0F856B0D0000        <1>  jne L_error_incorrect_type
 32843 00018CFA 488B5801                        mov rbx, qword [rax + 1]
 32844 00018CFE 4883FB00                        cmp rbx, 0
 32845 00018D02 0F8EF20B0000                    jle L_error_integer_range
 32846 00018D08 4881FB00010000                  cmp rbx, 256
 32847 00018D0F 0F8DE50B0000                    jge L_error_integer_range
 32848 00018D15 BF02000000                      mov rdi, (1 + 1)
 32849 00018D1A E8A5EFFFFF                      call malloc
 32850 00018D1F C60002                          mov byte [rax], T_char
 32851 00018D22 885801                          mov byte [rax + 1], bl
 32852 00018D25 C9                              leave
 32853 00018D26 C21800                          ret AND_KILL_FRAME(1)
 32854                                  
 32855                                  L_code_ptr_trng:
 32856 00018D29 C8000000                        enter 0, 0
 32857 00018D2D 48837D1800                      cmp COUNT, 0
 32858 00018D32 0F85240C0000                    jne L_error_arg_count_0
 32859 00018D38 480FC7F7                        rdrand rdi
 32860 00018D3C 48D1EF                          shr rdi, 1
 32861 00018D3F E89C0B0000                      call make_integer
 32862 00018D44 C9                              leave
 32863 00018D45 C21000                          ret AND_KILL_FRAME(0)
 32864                                  
 32865                                  L_code_ptr_is_zero:
 32866 00018D48 C8000000                        enter 0, 0
 32867 00018D4C 48837D1801                      cmp COUNT, 1
 32868 00018D51 0F853A0C0000                    jne L_error_arg_count_1
 32869 00018D57 488B4520                        mov rax, PARAM(0)
 32870 00018D5B 803811                          cmp byte [rax], T_integer
 32871 00018D5E 740F                            je .L_integer
 32872 00018D60 803812                          cmp byte [rax], T_fraction
 32873 00018D63 7413                            je .L_fraction
 32874 00018D65 803813                          cmp byte [rax], T_real
 32875 00018D68 7417                            je .L_real
 32876 00018D6A E9F60C0000                      jmp L_error_incorrect_type
 32877                                  .L_integer:
 32878 00018D6F 4883780100                      cmp qword [rax + 1], 0
 32879 00018D74 7429                            je .L_zero
 32880 00018D76 EB1B                            jmp .L_not_zero
 32881                                  .L_fraction:
 32882 00018D78 4883780100                      cmp qword [rax + 1], 0
 32883 00018D7D 7420                            je .L_zero
 32884 00018D7F EB12                            jmp .L_not_zero
 32885                                  .L_real:
 32886 00018D81 660FEFC0                        pxor xmm0, xmm0
 32887 00018D85 FF7001                          push qword [rax + 1]
 32888 00018D88 F20F100C24                      movsd xmm1, qword [rsp]
 32889 00018D8D 660F2EC1                        ucomisd xmm0, xmm1
 32890 00018D91 740C                            je .L_zero
 32891                                  .L_not_zero:
 32892 00018D93 48B8-                           mov rax, sob_boolean_false
 32892 00018D95 [0200000000000000] 
 32893 00018D9D EB0A                            jmp .L_end
 32894                                  .L_zero:
 32895 00018D9F 48B8-                           mov rax, sob_boolean_true
 32895 00018DA1 [0300000000000000] 
 32896                                  .L_end:
 32897 00018DA9 C9                              leave
 32898 00018DAA C21800                          ret AND_KILL_FRAME(1)
 32899                                  
 32900                                  L_code_ptr_is_integer:
 32901 00018DAD C8000000                        enter 0, 0
 32902 00018DB1 48837D1801                      cmp COUNT, 1
 32903 00018DB6 0F85D50B0000                    jne L_error_arg_count_1
 32904 00018DBC 488B4520                        mov rax, PARAM(0)
 32905 00018DC0 803811                          cmp byte [rax], T_integer
 32906 00018DC3 750C                            jne .L_false
 32907 00018DC5 48B8-                           mov rax, sob_boolean_true
 32907 00018DC7 [0300000000000000] 
 32908 00018DCF EB0A                            jmp .L_exit
 32909                                  .L_false:
 32910 00018DD1 48B8-                           mov rax, sob_boolean_false
 32910 00018DD3 [0200000000000000] 
 32911                                  .L_exit:
 32912 00018DDB C9                              leave
 32913 00018DDC C21800                          ret AND_KILL_FRAME(1)
 32914                                  
 32915                                  L_code_ptr_raw_bin_add_rr:
 32916 00018DDF C8000000                        enter 0, 0
 32917 00018DE3 48837D1802                      cmp COUNT, 2
 32918 00018DE8 0F85D80B0000                    jne L_error_arg_count_2
 32919 00018DEE 488B5D20                        mov rbx, PARAM(0)
 32920                                          assert_real(rbx)
    53 00018DF2 803B13              <1>  cmp byte [%1], %2
    54 00018DF5 0F856A0C0000        <1>  jne L_error_incorrect_type
 32921 00018DFB 488B4D28                        mov rcx, PARAM(1)
 32922                                          assert_real(rcx)
    53 00018DFF 803913              <1>  cmp byte [%1], %2
    54 00018E02 0F855D0C0000        <1>  jne L_error_incorrect_type
 32923 00018E08 F20F104301                      movsd xmm0, qword [rbx + 1]
 32924 00018E0D F20F104901                      movsd xmm1, qword [rcx + 1]
 32925 00018E12 F20F58C1                        addsd xmm0, xmm1
 32926 00018E16 E8AD0A0000                      call make_real
 32927 00018E1B C9                              leave
 32928 00018E1C C22000                          ret AND_KILL_FRAME(2)
 32929                                  
 32930                                  L_code_ptr_raw_bin_sub_rr:
 32931 00018E1F C8000000                        enter 0, 0
 32932 00018E23 48837D1802                      cmp COUNT, 2
 32933 00018E28 0F85980B0000                    jne L_error_arg_count_2
 32934 00018E2E 488B5D20                        mov rbx, PARAM(0)
 32935                                          assert_real(rbx)
    53 00018E32 803B13              <1>  cmp byte [%1], %2
    54 00018E35 0F852A0C0000        <1>  jne L_error_incorrect_type
 32936 00018E3B 488B4D28                        mov rcx, PARAM(1)
 32937                                          assert_real(rcx)
    53 00018E3F 803913              <1>  cmp byte [%1], %2
    54 00018E42 0F851D0C0000        <1>  jne L_error_incorrect_type
 32938 00018E48 F20F104301                      movsd xmm0, qword [rbx + 1]
 32939 00018E4D F20F104901                      movsd xmm1, qword [rcx + 1]
 32940 00018E52 F20F5CC1                        subsd xmm0, xmm1
 32941 00018E56 E86D0A0000                      call make_real
 32942 00018E5B C9                              leave
 32943 00018E5C C22000                          ret AND_KILL_FRAME(2)
 32944                                  
 32945                                  L_code_ptr_raw_bin_mul_rr:
 32946 00018E5F C8000000                        enter 0, 0
 32947 00018E63 48837D1802                      cmp COUNT, 2
 32948 00018E68 0F85580B0000                    jne L_error_arg_count_2
 32949 00018E6E 488B5D20                        mov rbx, PARAM(0)
 32950                                          assert_real(rbx)
    53 00018E72 803B13              <1>  cmp byte [%1], %2
    54 00018E75 0F85EA0B0000        <1>  jne L_error_incorrect_type
 32951 00018E7B 488B4D28                        mov rcx, PARAM(1)
 32952                                          assert_real(rcx)
    53 00018E7F 803913              <1>  cmp byte [%1], %2
    54 00018E82 0F85DD0B0000        <1>  jne L_error_incorrect_type
 32953 00018E88 F20F104301                      movsd xmm0, qword [rbx + 1]
 32954 00018E8D F20F104901                      movsd xmm1, qword [rcx + 1]
 32955 00018E92 F20F59C1                        mulsd xmm0, xmm1
 32956 00018E96 E82D0A0000                      call make_real
 32957 00018E9B C9                              leave
 32958 00018E9C C22000                          ret AND_KILL_FRAME(2)
 32959                                  
 32960                                  L_code_ptr_raw_bin_div_rr:
 32961 00018E9F C8000000                        enter 0, 0
 32962 00018EA3 48837D1802                      cmp COUNT, 2
 32963 00018EA8 0F85180B0000                    jne L_error_arg_count_2
 32964 00018EAE 488B5D20                        mov rbx, PARAM(0)
 32965                                          assert_real(rbx)
    53 00018EB2 803B13              <1>  cmp byte [%1], %2
    54 00018EB5 0F85AA0B0000        <1>  jne L_error_incorrect_type
 32966 00018EBB 488B4D28                        mov rcx, PARAM(1)
 32967                                          assert_real(rcx)
    53 00018EBF 803913              <1>  cmp byte [%1], %2
    54 00018EC2 0F859D0B0000        <1>  jne L_error_incorrect_type
 32968 00018EC8 F20F104301                      movsd xmm0, qword [rbx + 1]
 32969 00018ECD F20F104901                      movsd xmm1, qword [rcx + 1]
 32970 00018ED2 660FEFD2                        pxor xmm2, xmm2
 32971 00018ED6 660F2ECA                        ucomisd xmm1, xmm2
 32972 00018EDA 0F84B60B0000                    je L_error_division_by_zero
 32973 00018EE0 F20F5EC1                        divsd xmm0, xmm1
 32974 00018EE4 E8DF090000                      call make_real
 32975 00018EE9 C9                              leave
 32976 00018EEA C22000                          ret AND_KILL_FRAME(2)
 32977                                  
 32978                                  L_code_ptr_raw_bin_add_zz:
 32979 00018EED C8000000                	enter 0, 0
 32980 00018EF1 48837D1802              	cmp COUNT, 2
 32981 00018EF6 0F85CA0A0000            	jne L_error_arg_count_2
 32982 00018EFC 4C8B4520                	mov r8, PARAM(0)
 32983                                  	assert_integer(r8)
    53 00018F00 41803811            <1>  cmp byte [%1], %2
    54 00018F04 0F855B0B0000        <1>  jne L_error_incorrect_type
 32984 00018F0A 4C8B4D28                	mov r9, PARAM(1)
 32985                                  	assert_integer(r9)
    53 00018F0E 41803911            <1>  cmp byte [%1], %2
    54 00018F12 0F854D0B0000        <1>  jne L_error_incorrect_type
 32986 00018F18 498B7801                	mov rdi, qword [r8 + 1]
 32987 00018F1C 49037901                	add rdi, qword [r9 + 1]
 32988 00018F20 E8BB090000              	call make_integer
 32989 00018F25 C9                      	leave
 32990 00018F26 C22000                  	ret AND_KILL_FRAME(2)
 32991                                  
 32992                                  L_code_ptr_raw_bin_add_qq:
 32993 00018F29 C8000000                        enter 0, 0
 32994 00018F2D 48837D1802                      cmp COUNT, 2
 32995 00018F32 0F858E0A0000                    jne L_error_arg_count_2
 32996 00018F38 4C8B4520                        mov r8, PARAM(0)
 32997                                          assert_fraction(r8)
    53 00018F3C 41803812            <1>  cmp byte [%1], %2
    54 00018F40 0F851F0B0000        <1>  jne L_error_incorrect_type
 32998 00018F46 4C8B4D28                        mov r9, PARAM(1)
 32999                                          assert_fraction(r9)
    53 00018F4A 41803912            <1>  cmp byte [%1], %2
    54 00018F4E 0F85110B0000        <1>  jne L_error_incorrect_type
 33000 00018F54 498B4001                        mov rax, qword [r8 + 1] ; num1
 33001 00018F58 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 33002 00018F5C 4899                            cqo
 33003 00018F5E 48F7EB                          imul rbx
 33004 00018F61 4889C6                          mov rsi, rax
 33005 00018F64 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 33006 00018F68 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 33007 00018F6C 4899                            cqo
 33008 00018F6E 48F7EB                          imul rbx
 33009 00018F71 4801C6                          add rsi, rax
 33010 00018F74 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 33011 00018F78 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 33012 00018F7C 4899                            cqo
 33013 00018F7E 48F7EB                          imul rbx
 33014 00018F81 4889C7                          mov rdi, rax
 33015 00018F84 E8DE010000                      call normalize_fraction
 33016 00018F89 C9                              leave
 33017 00018F8A C22000                          ret AND_KILL_FRAME(2)
 33018                                  
 33019                                  L_code_ptr_raw_bin_sub_zz:
 33020 00018F8D C8000000                	enter 0, 0
 33021 00018F91 48837D1802              	cmp COUNT, 2
 33022 00018F96 0F852A0A0000            	jne L_error_arg_count_2
 33023 00018F9C 4C8B4520                	mov r8, PARAM(0)
 33024                                  	assert_integer(r8)
    53 00018FA0 41803811            <1>  cmp byte [%1], %2
    54 00018FA4 0F85BB0A0000        <1>  jne L_error_incorrect_type
 33025 00018FAA 4C8B4D28                	mov r9, PARAM(1)
 33026                                  	assert_integer(r9)
    53 00018FAE 41803911            <1>  cmp byte [%1], %2
    54 00018FB2 0F85AD0A0000        <1>  jne L_error_incorrect_type
 33027 00018FB8 498B7801                	mov rdi, qword [r8 + 1]
 33028 00018FBC 492B7901                	sub rdi, qword [r9 + 1]
 33029 00018FC0 E81B090000              	call make_integer
 33030 00018FC5 C9                      	leave
 33031 00018FC6 C22000                  	ret AND_KILL_FRAME(2)
 33032                                  
 33033                                  L_code_ptr_raw_bin_sub_qq:
 33034 00018FC9 C8000000                        enter 0, 0
 33035 00018FCD 48837D1802                      cmp COUNT, 2
 33036 00018FD2 0F85EE090000                    jne L_error_arg_count_2
 33037 00018FD8 4C8B4520                        mov r8, PARAM(0)
 33038                                          assert_fraction(r8)
    53 00018FDC 41803812            <1>  cmp byte [%1], %2
    54 00018FE0 0F857F0A0000        <1>  jne L_error_incorrect_type
 33039 00018FE6 4C8B4D28                        mov r9, PARAM(1)
 33040                                          assert_fraction(r9)
    53 00018FEA 41803912            <1>  cmp byte [%1], %2
    54 00018FEE 0F85710A0000        <1>  jne L_error_incorrect_type
 33041 00018FF4 498B4001                        mov rax, qword [r8 + 1] ; num1
 33042 00018FF8 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 33043 00018FFC 4899                            cqo
 33044 00018FFE 48F7EB                          imul rbx
 33045 00019001 4889C6                          mov rsi, rax
 33046 00019004 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 33047 00019008 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 33048 0001900C 4899                            cqo
 33049 0001900E 48F7EB                          imul rbx
 33050 00019011 4829C6                          sub rsi, rax
 33051 00019014 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 33052 00019018 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 33053 0001901C 4899                            cqo
 33054 0001901E 48F7EB                          imul rbx
 33055 00019021 4889C7                          mov rdi, rax
 33056 00019024 E83E010000                      call normalize_fraction
 33057 00019029 C9                              leave
 33058 0001902A C22000                          ret AND_KILL_FRAME(2)
 33059                                  
 33060                                  L_code_ptr_raw_bin_mul_zz:
 33061 0001902D C8000000                	enter 0, 0
 33062 00019031 48837D1802              	cmp COUNT, 2
 33063 00019036 0F858A090000            	jne L_error_arg_count_2
 33064 0001903C 4C8B4520                	mov r8, PARAM(0)
 33065                                  	assert_integer(r8)
    53 00019040 41803811            <1>  cmp byte [%1], %2
    54 00019044 0F851B0A0000        <1>  jne L_error_incorrect_type
 33066 0001904A 4C8B4D28                	mov r9, PARAM(1)
 33067                                  	assert_integer(r9)
    53 0001904E 41803911            <1>  cmp byte [%1], %2
    54 00019052 0F850D0A0000        <1>  jne L_error_incorrect_type
 33068 00019058 4899                    	cqo
 33069 0001905A 498B4001                	mov rax, qword [r8 + 1]
 33070 0001905E 49F76101                	mul qword [r9 + 1]
 33071 00019062 4889C7                  	mov rdi, rax
 33072 00019065 E876080000              	call make_integer
 33073 0001906A C9                      	leave
 33074 0001906B C22000                  	ret AND_KILL_FRAME(2)
 33075                                  
 33076                                  L_code_ptr_raw_bin_mul_qq:
 33077 0001906E C8000000                        enter 0, 0
 33078 00019072 48837D1802                      cmp COUNT, 2
 33079 00019077 0F8549090000                    jne L_error_arg_count_2
 33080 0001907D 4C8B4520                        mov r8, PARAM(0)
 33081                                          assert_fraction(r8)
    53 00019081 41803812            <1>  cmp byte [%1], %2
    54 00019085 0F85DA090000        <1>  jne L_error_incorrect_type
 33082 0001908B 4C8B4D28                        mov r9, PARAM(1)
 33083                                          assert_fraction(r9)
    53 0001908F 41803912            <1>  cmp byte [%1], %2
    54 00019093 0F85CC090000        <1>  jne L_error_incorrect_type
 33084 00019099 498B4001                        mov rax, qword [r8 + 1] ; num1
 33085 0001909D 498B5901                        mov rbx, qword [r9 + 1] ; num2
 33086 000190A1 4899                            cqo
 33087 000190A3 48F7EB                          imul rbx
 33088 000190A6 4889C6                          mov rsi, rax
 33089 000190A9 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 33090 000190AD 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 33091 000190B1 4899                            cqo
 33092 000190B3 48F7EB                          imul rbx
 33093 000190B6 4889C7                          mov rdi, rax
 33094 000190B9 E8A9000000                      call normalize_fraction
 33095 000190BE C9                              leave
 33096 000190BF C22000                          ret AND_KILL_FRAME(2)
 33097                                          
 33098                                  L_code_ptr_raw_bin_div_zz:
 33099 000190C2 C8000000                	enter 0, 0
 33100 000190C6 48837D1802              	cmp COUNT, 2
 33101 000190CB 0F85F5080000            	jne L_error_arg_count_2
 33102 000190D1 4C8B4520                	mov r8, PARAM(0)
 33103                                  	assert_integer(r8)
    53 000190D5 41803811            <1>  cmp byte [%1], %2
    54 000190D9 0F8586090000        <1>  jne L_error_incorrect_type
 33104 000190DF 4C8B4D28                	mov r9, PARAM(1)
 33105                                  	assert_integer(r9)
    53 000190E3 41803911            <1>  cmp byte [%1], %2
    54 000190E7 0F8578090000        <1>  jne L_error_incorrect_type
 33106 000190ED 498B7901                	mov rdi, qword [r9 + 1]
 33107 000190F1 4883FF00                	cmp rdi, 0
 33108 000190F5 0F849B090000            	je L_error_division_by_zero
 33109 000190FB 498B7001                	mov rsi, qword [r8 + 1]
 33110 000190FF E863000000              	call normalize_fraction
 33111 00019104 C9                      	leave
 33112 00019105 C22000                  	ret AND_KILL_FRAME(2)
 33113                                  
 33114                                  L_code_ptr_raw_bin_div_qq:
 33115 00019108 C8000000                        enter 0, 0
 33116 0001910C 48837D1802                      cmp COUNT, 2
 33117 00019111 0F85AF080000                    jne L_error_arg_count_2
 33118 00019117 4C8B4520                        mov r8, PARAM(0)
 33119                                          assert_fraction(r8)
    53 0001911B 41803812            <1>  cmp byte [%1], %2
    54 0001911F 0F8540090000        <1>  jne L_error_incorrect_type
 33120 00019125 4C8B4D28                        mov r9, PARAM(1)
 33121                                          assert_fraction(r9)
    53 00019129 41803912            <1>  cmp byte [%1], %2
    54 0001912D 0F8532090000        <1>  jne L_error_incorrect_type
 33122 00019133 4983790100                      cmp qword [r9 + 1], 0
 33123 00019138 0F8458090000                    je L_error_division_by_zero
 33124 0001913E 498B4001                        mov rax, qword [r8 + 1] ; num1
 33125 00019142 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 33126 00019146 4899                            cqo
 33127 00019148 48F7EB                          imul rbx
 33128 0001914B 4889C6                          mov rsi, rax
 33129 0001914E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 33130 00019152 498B5901                        mov rbx, qword [r9 + 1] ; num2
 33131 00019156 4899                            cqo
 33132 00019158 48F7EB                          imul rbx
 33133 0001915B 4889C7                          mov rdi, rax
 33134 0001915E E804000000                      call normalize_fraction
 33135 00019163 C9                              leave
 33136 00019164 C22000                          ret AND_KILL_FRAME(2)
 33137                                          
 33138                                  normalize_fraction:
 33139 00019167 56                              push rsi
 33140 00019168 57                              push rdi
 33141 00019169 E859000000                      call gcd
 33142 0001916E 4889C3                          mov rbx, rax
 33143 00019171 58                              pop rax
 33144 00019172 4899                            cqo
 33145 00019174 48F7FB                          idiv rbx
 33146 00019177 4989C0                          mov r8, rax
 33147 0001917A 58                              pop rax
 33148 0001917B 4899                            cqo
 33149 0001917D 48F7FB                          idiv rbx
 33150 00019180 4989C1                          mov r9, rax
 33151 00019183 4983F900                        cmp r9, 0
 33152 00019187 741C                            je .L_zero
 33153 00019189 4983F801                        cmp r8, 1
 33154 0001918D 7421                            je .L_int
 33155 0001918F BF11000000                      mov rdi, (1 + 8 + 8)
 33156 00019194 E82BEBFFFF                      call malloc
 33157 00019199 C60012                          mov byte [rax], T_fraction
 33158 0001919C 4C894801                        mov qword [rax + 1], r9
 33159 000191A0 4C894009                        mov qword [rax + 1 + 8], r8
 33160 000191A4 C3                              ret
 33161                                  .L_zero:
 33162 000191A5 BF00000000                      mov rdi, 0
 33163 000191AA E831070000                      call make_integer
 33164 000191AF C3                              ret
 33165                                  .L_int:
 33166 000191B0 4C89CF                          mov rdi, r9
 33167 000191B3 E828070000                      call make_integer
 33168 000191B8 C3                              ret
 33169                                  
 33170                                  iabs:
 33171 000191B9 4889F8                          mov rax, rdi
 33172 000191BC 4883F800                        cmp rax, 0
 33173 000191C0 7C01                            jl .Lneg
 33174 000191C2 C3                              ret
 33175                                  .Lneg:
 33176 000191C3 48F7D8                          neg rax
 33177 000191C6 C3                              ret
 33178                                  
 33179                                  gcd:
 33180 000191C7 E8EDFFFFFF                      call iabs
 33181 000191CC 4889C3                          mov rbx, rax
 33182 000191CF 4889F7                          mov rdi, rsi
 33183 000191D2 E8E2FFFFFF                      call iabs
 33184 000191D7 4883F800                        cmp rax, 0
 33185 000191DB 7502                            jne .L0
 33186 000191DD 4893                            xchg rax, rbx
 33187                                  .L0:
 33188 000191DF 4883FB00                        cmp rbx, 0
 33189 000191E3 740C                            je .L1
 33190 000191E5 4899                            cqo
 33191 000191E7 48F7F3                          div rbx
 33192 000191EA 4889D0                          mov rax, rdx
 33193 000191ED 4893                            xchg rax, rbx
 33194 000191EF EBEE                            jmp .L0
 33195                                  .L1:
 33196 000191F1 C3                              ret
 33197                                  
 33198                                  L_code_ptr_error:
 33199 000191F2 C8000000                        enter 0, 0
 33200 000191F6 48837D1802                      cmp COUNT, 2
 33201 000191FB 0F85C5070000                    jne L_error_arg_count_2
 33202 00019201 488B7520                        mov rsi, PARAM(0)
 33203                                          assert_interned_symbol(rsi)
    53 00019205 803E41              <1>  cmp byte [%1], %2
    54 00019208 0F8557080000        <1>  jne L_error_incorrect_type
 33204 0001920E 488B7528                        mov rsi, PARAM(1)
 33205                                          assert_string(rsi)
    53 00019212 803E03              <1>  cmp byte [%1], %2
    54 00019215 0F854A080000        <1>  jne L_error_incorrect_type
 33206 0001921B 48BF-                           mov rdi, fmt_scheme_error_part_1
 33206 0001921D [FB1B000000000000] 
 33207 00019225 B800000000                      mov rax, 0
 33208                                          ENTER
    44 0001922A C8000000            <1>  enter 0, 0
    45 0001922E 4883E4F0            <1>  and rsp, ~15
 33209 00019232 E8(00000000)                    call printf
 33210                                          LEAVE
    49 00019237 C9                  <1>  leave
 33211 00019238 488B7D20                        mov rdi, PARAM(0)
 33212 0001923C E804EDFFFF                      call print_sexpr
 33213 00019241 48BF-                           mov rdi, fmt_scheme_error_part_2
 33213 00019243 [0F1C000000000000] 
 33214 0001924B B800000000                      mov rax, 0
 33215                                          ENTER
    44 00019250 C8000000            <1>  enter 0, 0
    45 00019254 4883E4F0            <1>  and rsp, ~15
 33216 00019258 E8(00000000)                    call printf
 33217                                          LEAVE
    49 0001925D C9                  <1>  leave
 33218 0001925E 488B4528                        mov rax, PARAM(1)       ; sob_string
 33219 00019262 BE01000000                      mov rsi, 1              ; size = 1 byte
 33220 00019267 488B5001                        mov rdx, qword [rax + 1] ; length
 33221 0001926B 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
 33222 0001926F 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
 33223                                  	ENTER
    44 00019277 C8000000            <1>  enter 0, 0
    45 0001927B 4883E4F0            <1>  and rsp, ~15
 33224 0001927F E8(00000000)                    call fwrite
 33225                                  	LEAVE
    49 00019284 C9                  <1>  leave
 33226 00019285 48BF-                           mov rdi, fmt_scheme_error_part_3
 33226 00019287 [511C000000000000] 
 33227 0001928F B800000000                      mov rax, 0
 33228                                          ENTER
    44 00019294 C8000000            <1>  enter 0, 0
    45 00019298 4883E4F0            <1>  and rsp, ~15
 33229 0001929C E8(00000000)                    call printf
 33230                                          LEAVE
    49 000192A1 C9                  <1>  leave
 33231 000192A2 48C7C0F7FFFFFF                  mov rax, -9
 33232 000192A9 E8(00000000)                    call exit
 33233                                  
 33234                                  L_code_ptr_raw_less_than_rr:
 33235 000192AE C8000000                        enter 0, 0
 33236 000192B2 48837D1802                      cmp COUNT, 2
 33237 000192B7 0F8509070000                    jne L_error_arg_count_2
 33238 000192BD 488B7520                        mov rsi, PARAM(0)
 33239                                          assert_real(rsi)
    53 000192C1 803E13              <1>  cmp byte [%1], %2
    54 000192C4 0F859B070000        <1>  jne L_error_incorrect_type
 33240 000192CA 488B7D28                        mov rdi, PARAM(1)
 33241                                          assert_real(rdi)
    53 000192CE 803F13              <1>  cmp byte [%1], %2
    54 000192D1 0F858E070000        <1>  jne L_error_incorrect_type
 33242 000192D7 F20F104601                      movsd xmm0, qword [rsi + 1]
 33243 000192DC F20F104F01                      movsd xmm1, qword [rdi + 1]
 33244 000192E1 660F2FC1                        comisd xmm0, xmm1
 33245 000192E5 730C                            jae .L_false
 33246 000192E7 48B8-                           mov rax, sob_boolean_true
 33246 000192E9 [0300000000000000] 
 33247 000192F1 EB0A                            jmp .L_exit
 33248                                  .L_false:
 33249 000192F3 48B8-                           mov rax, sob_boolean_false
 33249 000192F5 [0200000000000000] 
 33250                                  .L_exit:
 33251 000192FD C9                              leave
 33252 000192FE C22000                          ret AND_KILL_FRAME(2)
 33253                                          
 33254                                  L_code_ptr_raw_less_than_zz:
 33255 00019301 C8000000                	enter 0, 0
 33256 00019305 48837D1802              	cmp COUNT, 2
 33257 0001930A 0F85B6060000            	jne L_error_arg_count_2
 33258 00019310 4C8B4520                	mov r8, PARAM(0)
 33259                                  	assert_integer(r8)
    53 00019314 41803811            <1>  cmp byte [%1], %2
    54 00019318 0F8547070000        <1>  jne L_error_incorrect_type
 33260 0001931E 4C8B4D28                	mov r9, PARAM(1)
 33261                                  	assert_integer(r9)
    53 00019322 41803911            <1>  cmp byte [%1], %2
    54 00019326 0F8539070000        <1>  jne L_error_incorrect_type
 33262 0001932C 498B7801                	mov rdi, qword [r8 + 1]
 33263 00019330 493B7901                	cmp rdi, qword [r9 + 1]
 33264 00019334 7D0C                    	jge .L_false
 33265 00019336 48B8-                   	mov rax, sob_boolean_true
 33265 00019338 [0300000000000000] 
 33266 00019340 EB0A                    	jmp .L_exit
 33267                                  .L_false:
 33268 00019342 48B8-                   	mov rax, sob_boolean_false
 33268 00019344 [0200000000000000] 
 33269                                  .L_exit:
 33270 0001934C C9                      	leave
 33271 0001934D C22000                  	ret AND_KILL_FRAME(2)
 33272                                  
 33273                                  L_code_ptr_raw_less_than_qq:
 33274 00019350 C8000000                        enter 0, 0
 33275 00019354 48837D1802                      cmp COUNT, 2
 33276 00019359 0F8567060000                    jne L_error_arg_count_2
 33277 0001935F 488B7520                        mov rsi, PARAM(0)
 33278                                          assert_fraction(rsi)
    53 00019363 803E12              <1>  cmp byte [%1], %2
    54 00019366 0F85F9060000        <1>  jne L_error_incorrect_type
 33279 0001936C 488B7D28                        mov rdi, PARAM(1)
 33280                                          assert_fraction(rdi)
    53 00019370 803F12              <1>  cmp byte [%1], %2
    54 00019373 0F85EC060000        <1>  jne L_error_incorrect_type
 33281 00019379 488B4601                        mov rax, qword [rsi + 1] ; num1
 33282 0001937D 4899                            cqo
 33283 0001937F 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 33284 00019383 4889C1                          mov rcx, rax
 33285 00019386 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
 33286 0001938A 4899                            cqo
 33287 0001938C 48F76F01                        imul qword [rdi + 1]          ; num2
 33288 00019390 4829C1                          sub rcx, rax
 33289 00019393 7D0C                            jge .L_false
 33290 00019395 48B8-                           mov rax, sob_boolean_true
 33290 00019397 [0300000000000000] 
 33291 0001939F EB0A                            jmp .L_exit
 33292                                  .L_false:
 33293 000193A1 48B8-                           mov rax, sob_boolean_false
 33293 000193A3 [0200000000000000] 
 33294                                  .L_exit:
 33295 000193AB C9                              leave
 33296 000193AC C22000                          ret AND_KILL_FRAME(2)
 33297                                  
 33298                                  L_code_ptr_raw_equal_rr:
 33299 000193AF C8000000                        enter 0, 0
 33300 000193B3 48837D1802                      cmp COUNT, 2
 33301 000193B8 0F8508060000                    jne L_error_arg_count_2
 33302 000193BE 488B7520                        mov rsi, PARAM(0)
 33303                                          assert_real(rsi)
    53 000193C2 803E13              <1>  cmp byte [%1], %2
    54 000193C5 0F859A060000        <1>  jne L_error_incorrect_type
 33304 000193CB 488B7D28                        mov rdi, PARAM(1)
 33305                                          assert_real(rdi)
    53 000193CF 803F13              <1>  cmp byte [%1], %2
    54 000193D2 0F858D060000        <1>  jne L_error_incorrect_type
 33306 000193D8 F20F104601                      movsd xmm0, qword [rsi + 1]
 33307 000193DD F20F104F01                      movsd xmm1, qword [rdi + 1]
 33308 000193E2 660F2FC1                        comisd xmm0, xmm1
 33309 000193E6 750C                            jne .L_false
 33310 000193E8 48B8-                           mov rax, sob_boolean_true
 33310 000193EA [0300000000000000] 
 33311 000193F2 EB0A                            jmp .L_exit
 33312                                  .L_false:
 33313 000193F4 48B8-                           mov rax, sob_boolean_false
 33313 000193F6 [0200000000000000] 
 33314                                  .L_exit:
 33315 000193FE C9                              leave
 33316 000193FF C22000                          ret AND_KILL_FRAME(2)
 33317                                          
 33318                                  L_code_ptr_raw_equal_zz:
 33319 00019402 C8000000                	enter 0, 0
 33320 00019406 48837D1802              	cmp COUNT, 2
 33321 0001940B 0F85B5050000            	jne L_error_arg_count_2
 33322 00019411 4C8B4520                	mov r8, PARAM(0)
 33323                                  	assert_integer(r8)
    53 00019415 41803811            <1>  cmp byte [%1], %2
    54 00019419 0F8546060000        <1>  jne L_error_incorrect_type
 33324 0001941F 4C8B4D28                	mov r9, PARAM(1)
 33325                                  	assert_integer(r9)
    53 00019423 41803911            <1>  cmp byte [%1], %2
    54 00019427 0F8538060000        <1>  jne L_error_incorrect_type
 33326 0001942D 498B7801                	mov rdi, qword [r8 + 1]
 33327 00019431 493B7901                	cmp rdi, qword [r9 + 1]
 33328 00019435 750C                    	jne .L_false
 33329 00019437 48B8-                   	mov rax, sob_boolean_true
 33329 00019439 [0300000000000000] 
 33330 00019441 EB0A                    	jmp .L_exit
 33331                                  .L_false:
 33332 00019443 48B8-                   	mov rax, sob_boolean_false
 33332 00019445 [0200000000000000] 
 33333                                  .L_exit:
 33334 0001944D C9                      	leave
 33335 0001944E C22000                  	ret AND_KILL_FRAME(2)
 33336                                  
 33337                                  L_code_ptr_raw_equal_qq:
 33338 00019451 C8000000                        enter 0, 0
 33339 00019455 48837D1802                      cmp COUNT, 2
 33340 0001945A 0F8566050000                    jne L_error_arg_count_2
 33341 00019460 488B7520                        mov rsi, PARAM(0)
 33342                                          assert_fraction(rsi)
    53 00019464 803E12              <1>  cmp byte [%1], %2
    54 00019467 0F85F8050000        <1>  jne L_error_incorrect_type
 33343 0001946D 488B7D28                        mov rdi, PARAM(1)
 33344                                          assert_fraction(rdi)
    53 00019471 803F12              <1>  cmp byte [%1], %2
    54 00019474 0F85EB050000        <1>  jne L_error_incorrect_type
 33345 0001947A 488B4601                        mov rax, qword [rsi + 1] ; num1
 33346 0001947E 4899                            cqo
 33347 00019480 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 33348 00019484 4889C1                          mov rcx, rax
 33349 00019487 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
 33350 0001948B 4899                            cqo
 33351 0001948D 48F76F01                        imul qword [rdi + 1]          ; num2
 33352 00019491 4829C1                          sub rcx, rax
 33353 00019494 750C                            jne .L_false
 33354 00019496 48B8-                           mov rax, sob_boolean_true
 33354 00019498 [0300000000000000] 
 33355 000194A0 EB0A                            jmp .L_exit
 33356                                  .L_false:
 33357 000194A2 48B8-                           mov rax, sob_boolean_false
 33357 000194A4 [0200000000000000] 
 33358                                  .L_exit:
 33359 000194AC C9                              leave
 33360 000194AD C22000                          ret AND_KILL_FRAME(2)
 33361                                  
 33362                                  L_code_ptr_quotient:
 33363 000194B0 C8000000                        enter 0, 0
 33364 000194B4 48837D1802                      cmp COUNT, 2
 33365 000194B9 0F8507050000                    jne L_error_arg_count_2
 33366 000194BF 488B7520                        mov rsi, PARAM(0)
 33367                                          assert_integer(rsi)
    53 000194C3 803E11              <1>  cmp byte [%1], %2
    54 000194C6 0F8599050000        <1>  jne L_error_incorrect_type
 33368 000194CC 488B7D28                        mov rdi, PARAM(1)
 33369                                          assert_integer(rdi)
    53 000194D0 803F11              <1>  cmp byte [%1], %2
    54 000194D3 0F858C050000        <1>  jne L_error_incorrect_type
 33370 000194D9 488B4601                        mov rax, qword [rsi + 1]
 33371 000194DD 488B5F01                        mov rbx, qword [rdi + 1]
 33372 000194E1 4883FB00                        cmp rbx, 0
 33373 000194E5 0F84AB050000                    je L_error_division_by_zero
 33374 000194EB 4899                            cqo
 33375 000194ED 48F7FB                          idiv rbx
 33376 000194F0 4889C7                          mov rdi, rax
 33377 000194F3 E8E8030000                      call make_integer
 33378 000194F8 C9                              leave
 33379 000194F9 C22000                          ret AND_KILL_FRAME(2)
 33380                                          
 33381                                  L_code_ptr_remainder:
 33382 000194FC C8000000                        enter 0, 0
 33383 00019500 48837D1802                      cmp COUNT, 2
 33384 00019505 0F85BB040000                    jne L_error_arg_count_2
 33385 0001950B 488B7520                        mov rsi, PARAM(0)
 33386                                          assert_integer(rsi)
    53 0001950F 803E11              <1>  cmp byte [%1], %2
    54 00019512 0F854D050000        <1>  jne L_error_incorrect_type
 33387 00019518 488B7D28                        mov rdi, PARAM(1)
 33388                                          assert_integer(rdi)
    53 0001951C 803F11              <1>  cmp byte [%1], %2
    54 0001951F 0F8540050000        <1>  jne L_error_incorrect_type
 33389 00019525 488B4601                        mov rax, qword [rsi + 1]
 33390 00019529 488B5F01                        mov rbx, qword [rdi + 1]
 33391 0001952D 4883FB00                        cmp rbx, 0
 33392 00019531 0F845F050000                    je L_error_division_by_zero
 33393 00019537 4899                            cqo
 33394 00019539 48F7FB                          idiv rbx
 33395 0001953C 4889D7                          mov rdi, rdx
 33396 0001953F E89C030000                      call make_integer
 33397 00019544 C9                              leave
 33398 00019545 C22000                          ret AND_KILL_FRAME(2)
 33399                                  
 33400                                  L_code_ptr_set_car:
 33401 00019548 C8000000                        enter 0, 0
 33402 0001954C 48837D1802                      cmp COUNT, 2
 33403 00019551 0F856F040000                    jne L_error_arg_count_2
 33404 00019557 488B4520                        mov rax, PARAM(0)
 33405                                          assert_pair(rax)
    53 0001955B 803821              <1>  cmp byte [%1], %2
    54 0001955E 0F8501050000        <1>  jne L_error_incorrect_type
 33406 00019564 488B5D28                        mov rbx, PARAM(1)
 33407 00019568 48895801                        mov SOB_PAIR_CAR(rax), rbx
 33408 0001956C 48B8-                           mov rax, sob_void
 33408 0001956E [0000000000000000] 
 33409 00019576 C9                              leave
 33410 00019577 C22000                          ret AND_KILL_FRAME(2)
 33411                                  
 33412                                  L_code_ptr_set_cdr:
 33413 0001957A C8000000                        enter 0, 0
 33414 0001957E 48837D1802                      cmp COUNT, 2
 33415 00019583 0F853D040000                    jne L_error_arg_count_2
 33416 00019589 488B4520                        mov rax, PARAM(0)
 33417                                          assert_pair(rax)
    53 0001958D 803821              <1>  cmp byte [%1], %2
    54 00019590 0F85CF040000        <1>  jne L_error_incorrect_type
 33418 00019596 488B5D28                        mov rbx, PARAM(1)
 33419 0001959A 48895809                        mov SOB_PAIR_CDR(rax), rbx
 33420 0001959E 48B8-                           mov rax, sob_void
 33420 000195A0 [0000000000000000] 
 33421 000195A8 C9                              leave
 33422 000195A9 C22000                          ret AND_KILL_FRAME(2)
 33423                                  
 33424                                  L_code_ptr_string_ref:
 33425 000195AC C8000000                        enter 0, 0
 33426 000195B0 48837D1802                      cmp COUNT, 2
 33427 000195B5 0F850B040000                    jne L_error_arg_count_2
 33428 000195BB 488B7D20                        mov rdi, PARAM(0)
 33429                                          assert_string(rdi)
    53 000195BF 803F03              <1>  cmp byte [%1], %2
    54 000195C2 0F859D040000        <1>  jne L_error_incorrect_type
 33430 000195C8 488B7528                        mov rsi, PARAM(1)
 33431                                          assert_integer(rsi)
    53 000195CC 803E11              <1>  cmp byte [%1], %2
    54 000195CF 0F8590040000        <1>  jne L_error_incorrect_type
 33432 000195D5 488B5701                        mov rdx, qword [rdi + 1]
 33433 000195D9 488B4E01                        mov rcx, qword [rsi + 1]
 33434 000195DD 4839D1                          cmp rcx, rdx
 33435 000195E0 0F8D14030000                    jge L_error_integer_range
 33436 000195E6 4883F900                        cmp rcx, 0
 33437 000195EA 0F8C0A030000                    jl L_error_integer_range
 33438 000195F0 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
 33439 000195F4 BF02000000                      mov rdi, 2
 33440 000195F9 E8C6E6FFFF                      call malloc
 33441 000195FE C60002                          mov byte [rax], T_char
 33442 00019601 885801                          mov byte [rax + 1], bl
 33443 00019604 C9                              leave
 33444 00019605 C22000                          ret AND_KILL_FRAME(2)
 33445                                  
 33446                                  L_code_ptr_vector_ref:
 33447 00019608 C8000000                        enter 0, 0
 33448 0001960C 48837D1802                      cmp COUNT, 2
 33449 00019611 0F85AF030000                    jne L_error_arg_count_2
 33450 00019617 488B7D20                        mov rdi, PARAM(0)
 33451                                          assert_vector(rdi)
    53 0001961B 803F22              <1>  cmp byte [%1], %2
    54 0001961E 0F8541040000        <1>  jne L_error_incorrect_type
 33452 00019624 488B7528                        mov rsi, PARAM(1)
 33453                                          assert_integer(rsi)
    53 00019628 803E11              <1>  cmp byte [%1], %2
    54 0001962B 0F8534040000        <1>  jne L_error_incorrect_type
 33454 00019631 488B5701                        mov rdx, qword [rdi + 1]
 33455 00019635 488B4E01                        mov rcx, qword [rsi + 1]
 33456 00019639 4839D1                          cmp rcx, rdx
 33457 0001963C 0F8DB8020000                    jge L_error_integer_range
 33458 00019642 4883F900                        cmp rcx, 0
 33459 00019646 0F8CAE020000                    jl L_error_integer_range
 33460 0001964C 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
 33461 00019651 C9                              leave
 33462 00019652 C22000                          ret AND_KILL_FRAME(2)
 33463                                  
 33464                                  L_code_ptr_vector_set:
 33465 00019655 C8000000                        enter 0, 0
 33466 00019659 48837D1803                      cmp COUNT, 3
 33467 0001965E 0F85CC030000                    jne L_error_arg_count_3
 33468 00019664 488B7D20                        mov rdi, PARAM(0)
 33469                                          assert_vector(rdi)
    53 00019668 803F22              <1>  cmp byte [%1], %2
    54 0001966B 0F85F4030000        <1>  jne L_error_incorrect_type
 33470 00019671 488B7528                        mov rsi, PARAM(1)
 33471                                          assert_integer(rsi)
    53 00019675 803E11              <1>  cmp byte [%1], %2
    54 00019678 0F85E7030000        <1>  jne L_error_incorrect_type
 33472 0001967E 488B5701                        mov rdx, qword [rdi + 1]
 33473 00019682 488B4E01                        mov rcx, qword [rsi + 1]
 33474 00019686 4839D1                          cmp rcx, rdx
 33475 00019689 0F8D6B020000                    jge L_error_integer_range
 33476 0001968F 4883F900                        cmp rcx, 0
 33477 00019693 0F8C61020000                    jl L_error_integer_range
 33478 00019699 488B4530                        mov rax, PARAM(2)
 33479 0001969D 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
 33480 000196A2 48B8-                           mov rax, sob_void
 33480 000196A4 [0000000000000000] 
 33481 000196AC C9                              leave
 33482 000196AD C22800                          ret AND_KILL_FRAME(3)
 33483                                  
 33484                                  L_code_ptr_string_set:
 33485 000196B0 C8000000                        enter 0, 0
 33486 000196B4 48837D1803                      cmp COUNT, 3
 33487 000196B9 0F8571030000                    jne L_error_arg_count_3
 33488 000196BF 488B7D20                        mov rdi, PARAM(0)
 33489                                          assert_string(rdi)
    53 000196C3 803F03              <1>  cmp byte [%1], %2
    54 000196C6 0F8599030000        <1>  jne L_error_incorrect_type
 33490 000196CC 488B7528                        mov rsi, PARAM(1)
 33491                                          assert_integer(rsi)
    53 000196D0 803E11              <1>  cmp byte [%1], %2
    54 000196D3 0F858C030000        <1>  jne L_error_incorrect_type
 33492 000196D9 488B5701                        mov rdx, qword [rdi + 1]
 33493 000196DD 488B4E01                        mov rcx, qword [rsi + 1]
 33494 000196E1 4839D1                          cmp rcx, rdx
 33495 000196E4 0F8D10020000                    jge L_error_integer_range
 33496 000196EA 4883F900                        cmp rcx, 0
 33497 000196EE 0F8C06020000                    jl L_error_integer_range
 33498 000196F4 488B4530                        mov rax, PARAM(2)
 33499                                          assert_char(rax)
    53 000196F8 803802              <1>  cmp byte [%1], %2
    54 000196FB 0F8564030000        <1>  jne L_error_incorrect_type
 33500 00019701 8A4001                          mov al, byte [rax + 1]
 33501 00019704 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
 33502 00019708 48B8-                           mov rax, sob_void
 33502 0001970A [0000000000000000] 
 33503 00019712 C9                              leave
 33504 00019713 C22800                          ret AND_KILL_FRAME(3)
 33505                                  
 33506                                  L_code_ptr_make_vector:
 33507 00019716 C8000000                        enter 0, 0
 33508 0001971A 48837D1802                      cmp COUNT, 2
 33509 0001971F 0F85A1020000                    jne L_error_arg_count_2
 33510 00019725 488B4D20                        mov rcx, PARAM(0)
 33511                                          assert_integer(rcx)
    53 00019729 803911              <1>  cmp byte [%1], %2
    54 0001972C 0F8533030000        <1>  jne L_error_incorrect_type
 33512 00019732 488B4901                        mov rcx, qword [rcx + 1]
 33513 00019736 4883F900                        cmp rcx, 0
 33514 0001973A 0F8CBA010000                    jl L_error_integer_range
 33515 00019740 488B5528                        mov rdx, PARAM(1)
 33516 00019744 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
 33517 0001974C E873E5FFFF                      call malloc
 33518 00019751 C60022                          mov byte [rax], T_vector
 33519 00019754 48894801                        mov qword [rax + 1], rcx
 33520 00019758 41B800000000                    mov r8, 0
 33521                                  .L0:
 33522 0001975E 4939C8                          cmp r8, rcx
 33523 00019761 740A                            je .L1
 33524 00019763 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
 33525 00019768 49FFC0                          inc r8
 33526 0001976B EBF1                            jmp .L0
 33527                                  .L1:
 33528 0001976D C9                              leave
 33529 0001976E C22000                          ret AND_KILL_FRAME(2)
 33530                                          
 33531                                  L_code_ptr_make_string:
 33532 00019771 C8000000                        enter 0, 0
 33533 00019775 48837D1802                      cmp COUNT, 2
 33534 0001977A 0F8546020000                    jne L_error_arg_count_2
 33535 00019780 488B4D20                        mov rcx, PARAM(0)
 33536                                          assert_integer(rcx)
    53 00019784 803911              <1>  cmp byte [%1], %2
    54 00019787 0F85D8020000        <1>  jne L_error_incorrect_type
 33537 0001978D 488B4901                        mov rcx, qword [rcx + 1]
 33538 00019791 4883F900                        cmp rcx, 0
 33539 00019795 0F8C5F010000                    jl L_error_integer_range
 33540 0001979B 488B5528                        mov rdx, PARAM(1)
 33541                                          assert_char(rdx)
    53 0001979F 803A02              <1>  cmp byte [%1], %2
    54 000197A2 0F85BD020000        <1>  jne L_error_incorrect_type
 33542 000197A8 8A5201                          mov dl, byte [rdx + 1]
 33543 000197AB 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
 33544 000197AF E810E5FFFF                      call malloc
 33545 000197B4 C60003                          mov byte [rax], T_string
 33546 000197B7 48894801                        mov qword [rax + 1], rcx
 33547 000197BB 41B800000000                    mov r8, 0
 33548                                  .L0:
 33549 000197C1 4939C8                          cmp r8, rcx
 33550 000197C4 740A                            je .L1
 33551 000197C6 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
 33552 000197CB 49FFC0                          inc r8
 33553 000197CE EBF1                            jmp .L0
 33554                                  .L1:
 33555 000197D0 C9                              leave
 33556 000197D1 C22000                          ret AND_KILL_FRAME(2)
 33557                                  
 33558                                  L_code_ptr_numerator:
 33559 000197D4 C8000000                        enter 0, 0
 33560 000197D8 48837D1801                      cmp COUNT, 1
 33561 000197DD 0F85AE010000                    jne L_error_arg_count_1
 33562 000197E3 488B4520                        mov rax, PARAM(0)
 33563                                          assert_fraction(rax)
    53 000197E7 803812              <1>  cmp byte [%1], %2
    54 000197EA 0F8575020000        <1>  jne L_error_incorrect_type
 33564 000197F0 488B7801                        mov rdi, qword [rax + 1]
 33565 000197F4 E8E7000000                      call make_integer
 33566 000197F9 C9                              leave
 33567 000197FA C21800                          ret AND_KILL_FRAME(1)
 33568                                          
 33569                                  L_code_ptr_denominator:
 33570 000197FD C8000000                        enter 0, 0
 33571 00019801 48837D1801                      cmp COUNT, 1
 33572 00019806 0F8585010000                    jne L_error_arg_count_1
 33573 0001980C 488B4520                        mov rax, PARAM(0)
 33574                                          assert_fraction(rax)
    53 00019810 803812              <1>  cmp byte [%1], %2
    54 00019813 0F854C020000        <1>  jne L_error_incorrect_type
 33575 00019819 488B7809                        mov rdi, qword [rax + 1 + 8]
 33576 0001981D E8BE000000                      call make_integer
 33577 00019822 C9                              leave
 33578 00019823 C21800                          ret AND_KILL_FRAME(1)
 33579                                  
 33580                                  L_code_ptr_is_eq:
 33581 00019826 C8000000                	enter 0, 0
 33582 0001982A 48837D1802              	cmp COUNT, 2
 33583 0001982F 0F8591010000            	jne L_error_arg_count_2
 33584 00019835 488B7D20                	mov rdi, PARAM(0)
 33585 00019839 488B7528                	mov rsi, PARAM(1)
 33586 0001983D 4839F7                  	cmp rdi, rsi
 33587 00019840 746C                    	je .L_eq_true
 33588 00019842 8A17                    	mov dl, byte [rdi]
 33589 00019844 3A16                    	cmp dl, byte [rsi]
 33590 00019846 7572                    	jne .L_eq_false
 33591 00019848 80FA02                  	cmp dl, T_char
 33592 0001984B 7459                    	je .L_char
 33593 0001984D 80FA41                  	cmp dl, T_interned_symbol
 33594 00019850 7440                    	je .L_interned_symbol
 33595 00019852 80FA42                          cmp dl, T_uninterned_symbol
 33596 00019855 7443                            je .L_uninterned_symbol
 33597 00019857 80FA13                  	cmp dl, T_real
 33598 0001985A 742E                    	je .L_real
 33599 0001985C 80FA12                  	cmp dl, T_fraction
 33600 0001985F 7413                    	je .L_fraction
 33601 00019861 80FA11                          cmp dl, T_integer
 33602 00019864 7402                            je .L_integer
 33603 00019866 EB52                    	jmp .L_eq_false
 33604                                  .L_integer:
 33605 00019868 488B4601                        mov rax, qword [rsi + 1]
 33606 0001986C 483B4701                        cmp rax, qword [rdi + 1]
 33607 00019870 7548                            jne .L_eq_false
 33608 00019872 EB3A                            jmp .L_eq_true
 33609                                  .L_fraction:
 33610 00019874 488B4601                	mov rax, qword [rsi + 1]
 33611 00019878 483B4701                	cmp rax, qword [rdi + 1]
 33612 0001987C 753C                    	jne .L_eq_false
 33613 0001987E 488B4609                	mov rax, qword [rsi + 1 + 8]
 33614 00019882 483B4709                	cmp rax, qword [rdi + 1 + 8]
 33615 00019886 7532                    	jne .L_eq_false
 33616 00019888 EB24                    	jmp .L_eq_true
 33617                                  .L_real:
 33618 0001988A 488B4601                	mov rax, qword [rsi + 1]
 33619 0001988E 483B4701                	cmp rax, qword [rdi + 1]
 33620                                  .L_interned_symbol:
 33621                                  	; never reached, because interned_symbols are static!
 33622                                  	; but I'm keeping it in case, I'll ever change
 33623                                  	; the implementation
 33624 00019892 488B4601                	mov rax, qword [rsi + 1]
 33625 00019896 483B4701                	cmp rax, qword [rdi + 1]
 33626                                  .L_uninterned_symbol:
 33627 0001989A 4C8B4701                        mov r8, qword [rdi + 1]
 33628 0001989E 4C3B4601                        cmp r8, qword [rsi + 1]
 33629 000198A2 7516                            jne .L_eq_false
 33630 000198A4 EB08                            jmp .L_eq_true
 33631                                  .L_char:
 33632 000198A6 8A5E01                  	mov bl, byte [rsi + 1]
 33633 000198A9 3A5F01                  	cmp bl, byte [rdi + 1]
 33634 000198AC 750C                    	jne .L_eq_false
 33635                                  .L_eq_true:
 33636 000198AE 48B8-                   	mov rax, sob_boolean_true
 33636 000198B0 [0300000000000000] 
 33637 000198B8 EB0A                    	jmp .L_eq_exit
 33638                                  .L_eq_false:
 33639 000198BA 48B8-                   	mov rax, sob_boolean_false
 33639 000198BC [0200000000000000] 
 33640                                  .L_eq_exit:
 33641 000198C4 C9                      	leave
 33642 000198C5 C22000                  	ret AND_KILL_FRAME(2)
 33643                                  
 33644                                  make_real:
 33645 000198C8 C8000000                        enter 0, 0
 33646 000198CC BF09000000                      mov rdi, (1 + 8)
 33647 000198D1 E8EEE3FFFF                      call malloc
 33648 000198D6 C60013                          mov byte [rax], T_real
 33649 000198D9 F20F114001                      movsd qword [rax + 1], xmm0
 33650 000198DE C9                              leave 
 33651 000198DF C3                              ret
 33652                                          
 33653                                  make_integer:
 33654 000198E0 C8000000                        enter 0, 0
 33655 000198E4 4889FE                          mov rsi, rdi
 33656 000198E7 BF09000000                      mov rdi, (1 + 8)
 33657 000198EC E8D3E3FFFF                      call malloc
 33658 000198F1 C60011                          mov byte [rax], T_integer
 33659 000198F4 48897001                        mov qword [rax + 1], rsi
 33660 000198F8 C9                              leave
 33661 000198F9 C3                              ret
 33662                                          
 33663                                  L_error_integer_range:
 33664 000198FA 488B3C25[00000000]              mov rdi, qword [stderr]
 33665 00019902 48BE-                           mov rsi, fmt_integer_range
 33665 00019904 [C81B000000000000] 
 33666 0001990C B800000000                      mov rax, 0
 33667                                          ENTER
    44 00019911 C8000000            <1>  enter 0, 0
    45 00019915 4883E4F0            <1>  and rsp, ~15
 33668 00019919 E8(00000000)                    call fprintf
 33669                                          LEAVE
    49 0001991E C9                  <1>  leave
 33670 0001991F 48C7C0FBFFFFFF                  mov rax, -5
 33671 00019926 E8(00000000)                    call exit
 33672                                  
 33673                                  L_error_arg_negative:
 33674 0001992B 488B3C25[00000000]              mov rdi, qword [stderr]
 33675 00019933 48BE-                           mov rsi, fmt_arg_negative
 33675 00019935 [A01A000000000000] 
 33676 0001993D B800000000                      mov rax, 0
 33677                                          ENTER
    44 00019942 C8000000            <1>  enter 0, 0
    45 00019946 4883E4F0            <1>  and rsp, ~15
 33678 0001994A E8(00000000)                    call fprintf
 33679                                          LEAVE
    49 0001994F C9                  <1>  leave
 33680 00019950 48C7C0FDFFFFFF                  mov rax, -3
 33681 00019957 E8(00000000)                    call exit
 33682                                  
 33683                                  L_error_arg_count_0:
 33684 0001995C 488B3C25[00000000]              mov rdi, qword [stderr]
 33685 00019964 48BE-                           mov rsi, fmt_arg_count_0
 33685 00019966 [C61A000000000000] 
 33686 0001996E 488B5518                        mov rdx, COUNT
 33687 00019972 B800000000                      mov rax, 0
 33688                                          ENTER
    44 00019977 C8000000            <1>  enter 0, 0
    45 0001997B 4883E4F0            <1>  and rsp, ~15
 33689 0001997F E8(00000000)                    call fprintf
 33690                                          LEAVE
    49 00019984 C9                  <1>  leave
 33691 00019985 48C7C0FDFFFFFF                  mov rax, -3
 33692 0001998C E8(00000000)                    call exit
 33693                                  
 33694                                  L_error_arg_count_1:
 33695 00019991 488B3C25[00000000]              mov rdi, qword [stderr]
 33696 00019999 48BE-                           mov rsi, fmt_arg_count_1
 33696 0001999B [EE1A000000000000] 
 33697 000199A3 488B5518                        mov rdx, COUNT
 33698 000199A7 B800000000                      mov rax, 0
 33699                                          ENTER
    44 000199AC C8000000            <1>  enter 0, 0
    45 000199B0 4883E4F0            <1>  and rsp, ~15
 33700 000199B4 E8(00000000)                    call fprintf
 33701                                          LEAVE
    49 000199B9 C9                  <1>  leave
 33702 000199BA 48C7C0FDFFFFFF                  mov rax, -3
 33703 000199C1 E8(00000000)                    call exit
 33704                                  
 33705                                  L_error_arg_count_2:
 33706 000199C6 488B3C25[00000000]              mov rdi, qword [stderr]
 33707 000199CE 48BE-                           mov rsi, fmt_arg_count_2
 33707 000199D0 [541B000000000000] 
 33708 000199D8 488B5518                        mov rdx, COUNT
 33709 000199DC B800000000                      mov rax, 0
 33710                                          ENTER
    44 000199E1 C8000000            <1>  enter 0, 0
    45 000199E5 4883E4F0            <1>  and rsp, ~15
 33711 000199E9 E8(00000000)                    call fprintf
 33712                                          LEAVE
    49 000199EE C9                  <1>  leave
 33713 000199EF 48C7C0FDFFFFFF                  mov rax, -3
 33714 000199F6 E8(00000000)                    call exit
 33715                                  
 33716                                  L_error_arg_count_12:
 33717 000199FB 488B3C25[00000000]              mov rdi, qword [stderr]
 33718 00019A03 48BE-                           mov rsi, fmt_arg_count_12
 33718 00019A05 [141B000000000000] 
 33719 00019A0D 488B5518                        mov rdx, COUNT
 33720 00019A11 B800000000                      mov rax, 0
 33721                                          ENTER
    44 00019A16 C8000000            <1>  enter 0, 0
    45 00019A1A 4883E4F0            <1>  and rsp, ~15
 33722 00019A1E E8(00000000)                    call fprintf
 33723                                          LEAVE
    49 00019A23 C9                  <1>  leave
 33724 00019A24 48C7C0FDFFFFFF                  mov rax, -3
 33725 00019A2B E8(00000000)                    call exit
 33726                                  
 33727                                  L_error_arg_count_3:
 33728 00019A30 488B3C25[00000000]              mov rdi, qword [stderr]
 33729 00019A38 48BE-                           mov rsi, fmt_arg_count_3
 33729 00019A3A [7B1B000000000000] 
 33730 00019A42 488B5518                        mov rdx, COUNT
 33731 00019A46 B800000000                      mov rax, 0
 33732                                          ENTER
    44 00019A4B C8000000            <1>  enter 0, 0
    45 00019A4F 4883E4F0            <1>  and rsp, ~15
 33733 00019A53 E8(00000000)                    call fprintf
 33734                                          LEAVE
    49 00019A58 C9                  <1>  leave
 33735 00019A59 48C7C0FDFFFFFF                  mov rax, -3
 33736 00019A60 E8(00000000)                    call exit
 33737                                          
 33738                                  L_error_incorrect_type:
 33739 00019A65 488B3C25[00000000]              mov rdi, qword [stderr]
 33740 00019A6D 48BE-                           mov rsi, fmt_type
 33740 00019A6F [A41B000000000000] 
 33741 00019A77 B800000000                      mov rax, 0
 33742                                          ENTER
    44 00019A7C C8000000            <1>  enter 0, 0
    45 00019A80 4883E4F0            <1>  and rsp, ~15
 33743 00019A84 E8(00000000)                    call fprintf
 33744                                          LEAVE
    49 00019A89 C9                  <1>  leave
 33745 00019A8A 48C7C0FCFFFFFF                  mov rax, -4
 33746 00019A91 E8(00000000)                    call exit
 33747                                  
 33748                                  L_error_division_by_zero:
 33749 00019A96 488B3C25[00000000]              mov rdi, qword [stderr]
 33750 00019A9E 48BE-                           mov rsi, fmt_division_by_zero
 33750 00019AA0 [E51B000000000000] 
 33751 00019AA8 B800000000                      mov rax, 0
 33752                                          ENTER
    44 00019AAD C8000000            <1>  enter 0, 0
    45 00019AB1 4883E4F0            <1>  and rsp, ~15
 33753 00019AB5 E8(00000000)                    call fprintf
 33754                                          LEAVE
    49 00019ABA C9                  <1>  leave
 33755 00019ABB 48C7C0F8FFFFFF                  mov rax, -8
 33756 00019AC2 E8(00000000)                    call exit
 33757                                  
 33758                                  section .data
 33759                                  gensym_count:
 33760 00001A95 0000000000000000                dq 0
 33761                                  fmt_char:
 33762 00001A9D 256300                          db `%c\0`
 33763                                  fmt_arg_negative:
 33764 00001AA0 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
 33764 00001AA9 7267756D656E742063-
 33764 00001AB2 616E6E6F7420626520-
 33764 00001ABB 6E656761746976652E-
 33764 00001AC4 0A00               
 33765                                  fmt_arg_count_0:
 33766 00001AC6 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
 33766 00001ACF 74696E67207A65726F-
 33766 00001AD8 20617267756D656E74-
 33766 00001AE1 732E20466F756E6420-
 33766 00001AEA 25640A00           
 33767                                  fmt_arg_count_1:
 33768 00001AEE 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
 33768 00001AF7 74696E67206F6E6520-
 33768 00001B00 617267756D656E742E-
 33768 00001B09 20466F756E64202564-
 33768 00001B12 0A00               
 33769                                  fmt_arg_count_12:
 33770 00001B14 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
 33770 00001B1D 74696E67206F6E6520-
 33770 00001B26 726571756972656420-
 33770 00001B2F 616E64206F6E65206F-
 33770 00001B38 7074696F6E616C2061-
 33770 00001B41 7267756D656E742E20-
 33770 00001B4A 466F756E642025640A-
 33770 00001B53 00                 
 33771                                  fmt_arg_count_2:
 33772 00001B54 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
 33772 00001B5D 74696E672074776F20-
 33772 00001B66 617267756D656E7473-
 33772 00001B6F 2E20466F756E642025-
 33772 00001B78 640A00             
 33773                                  fmt_arg_count_3:
 33774 00001B7B 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
 33774 00001B84 74696E672074687265-
 33774 00001B8D 6520617267756D656E-
 33774 00001B96 74732E20466F756E64-
 33774 00001B9F 2025640A00         
 33775                                  fmt_type:
 33776 00001BA4 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
 33776 00001BAD 696F6E207061737365-
 33776 00001BB6 6420696E636F727265-
 33776 00001BBF 637420747970650A00 
 33777                                  fmt_integer_range:
 33778 00001BC8 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
 33778 00001BD1 7265637420696E7465-
 33778 00001BDA 6765722072616E6765-
 33778 00001BE3 0A00               
 33779                                  fmt_division_by_zero:
 33780 00001BE5 212121204469766973-             db `!!! Division by zero\n\0`
 33780 00001BEE 696F6E206279207A65-
 33780 00001BF7 726F0A00           
 33781                                  fmt_scheme_error_part_1:
 33782 00001BFB 0A2121212054686520-             db `\n!!! The procedure \0`
 33782 00001C04 70726F636564757265-
 33782 00001C0D 2000               
 33783                                  fmt_scheme_error_part_2:
 33784 00001C0F 2061736B656420746F-             db ` asked to terminate the program\n`
 33784 00001C18 207465726D696E6174-
 33784 00001C21 65207468652070726F-
 33784 00001C2A 6772616D0A         
 33785 00001C2F 202020207769746820-             db `    with the following message:\n\n\0`
 33785 00001C38 74686520666F6C6C6F-
 33785 00001C41 77696E67206D657373-
 33785 00001C4A 6167653A0A0A00     
 33786                                  fmt_scheme_error_part_3:
 33787 00001C51 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
 33787 00001C5A 210A0A00           
