     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "return"
    97 00000007 0600000000000000        	dq 6
    98 0000000F 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
    99                                  	; L_constants + 21:
   100 00000015 11                      	db T_integer	; 1
   101 00000016 0100000000000000        	dq 1
   102                                  	; L_constants + 30:
   103 0000001E 11                      	db T_integer	; 2
   104 0000001F 0200000000000000        	dq 2
   105                                  
   106                                  
   107                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
   108                                  global main
   109                                  section .text
   110                                  main:
   111 00000000 C8000000                        enter 0, 0
   112 00000004 6A00                            push 0
   113 00000006 6A00                            push 0
   114 00000008 68[BA010000]                    push Lend
   115 0000000D C8000000                        enter 0, 0
   116                                  
   117                                  	; preparing a non-tail-call
   118 00000011 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   119 00000016 E80A030000              	call malloc
   120 0000001B 50                      	push rax
   121 0000001C BF00000000              	mov rdi, 8 * 0	; new rib
   122 00000021 E8FF020000              	call malloc
   123 00000026 50                      	push rax
   124 00000027 BF08000000              	mov rdi, 8 * 1	; extended env
   125 0000002C E8F4020000              	call malloc
   126 00000031 488B7D10                	mov rdi, ENV
   127 00000035 BE00000000              	mov rsi, 0
   128 0000003A BA01000000              	mov rdx, 1
   129                                  .L_lambda_opt_env_loop_0004:	; ext_env[i + 1] <-- env[i]
   130 0000003F 4883FE00                	cmp rsi, 0
   131 00000043 7410                    	je .L_lambda_opt_env_end_0004
   132 00000045 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   133 00000049 48890CD0                	mov qword [rax + 8 * rdx], rcx
   134 0000004D 48FFC6                  	inc rsi
   135 00000050 48FFC2                  	inc rdx
   136 00000053 EBEA                    	jmp .L_lambda_opt_env_loop_0004
   137                                  .L_lambda_opt_env_end_0004:
   138 00000055 5B                      	pop rbx
   139 00000056 BE00000000              	mov rsi, 0
   140                                  .L_lambda_opt_params_loop_0004:	; copy params
   141 0000005B 4883FE00                	cmp rsi, 0
   142 0000005F 740E                    	je .L_lambda_opt_params_end_0004
   143 00000061 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   144 00000066 488914F3                	mov qword [rbx + 8 * rsi], rdx
   145 0000006A 48FFC6                  	inc rsi
   146 0000006D EBEC                    	jmp .L_lambda_opt_params_loop_0004
   147                                  .L_lambda_opt_params_end_0004:
   148 0000006F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   149 00000072 4889C3                  	mov rbx, rax
   150 00000075 58                      	pop rax
   151 00000076 C60004                  	mov byte [rax], T_closure
   152 00000079 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   153 0000007D 48C74009[87000000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0004
   154 00000085 EB65                    	jmp .L_lambda_opt_end_0004
   155                                  .L_lambda_opt_code_0004:	; lambda-opt body
   156 00000087 48837C241002            	cmp qword [rsp + 8 * 2], 2
   157 0000008D 740D                    	je .L_lambda_opt_arity_check_exact_0004
   158 0000008F 7F5B                    	jg .L_lambda_opt_arity_check_more_0004
   159 00000091 FF742410                	push qword [rsp + 8 * 2]
   160 00000095 6A02                    	push 2
   161 00000097 E956020000              	jmp L_error_incorrect_arity_opt
   162                                  .L_lambda_opt_arity_check_exact_0004:
   163 0000009C 4883EC08                	sub rsp, 8
   164 000000A0 488B442408              	mov rax, qword[rsp + 8 *1]
   165 000000A5 48890424                	mov qword[rsp], rax  
   166 000000A9 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
   167 000000AE 4889442408              	mov qword[rsp + 8 * 1], rax
   168 000000B3 B803000000              	mov rax, 3
   169 000000B8 4889442410              	mov qword[rsp + 8 *2], rax
   170 000000BD 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
   171 000000C2 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
   172                                  
   173 000000C7 488B442428              	mov rax, qword[rsp + 8 * (4 + 1)]
   174 000000CC 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
   175 000000D1 48B8-                   	mov rax, sob_nil
   175 000000D3 [0100000000000000] 
   176 000000DB 4889442428              	mov qword[rsp + 8 * (3 + 2)], rax
   177 000000E0 C8000000                	enter 0, 0
   178 000000E4 488B4530                	mov rax, PARAM(2)	; param c
   179 000000E8 C9                      	leave
   180 000000E9 C22800                  	ret AND_KILL_FRAME(3)
   181                                  .L_lambda_opt_end_0004:	; new closure is in rax
   182                                  .L_lambda_opt_arity_check_more_0004:
   183 000000EC 50                      	push rax
   184 000000ED 6A01                    	push 1	; arg count
   185 000000EF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   186 000000F4 E82C020000              	call malloc
   187 000000F9 50                      	push rax
   188 000000FA BF00000000              	mov rdi, 8 * 0	; new rib
   189 000000FF E821020000              	call malloc
   190 00000104 50                      	push rax
   191 00000105 BF08000000              	mov rdi, 8 * 1	; extended env
   192 0000010A E816020000              	call malloc
   193 0000010F 488B7D10                	mov rdi, ENV
   194 00000113 BE00000000              	mov rsi, 0
   195 00000118 BA01000000              	mov rdx, 1
   196                                  .L_lambda_simple_env_loop_0004:	; ext_env[i + 1] <-- env[i]
   197 0000011D 4883FE00                	cmp rsi, 0
   198 00000121 7410                    	je .L_lambda_simple_env_end_0004
   199 00000123 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   200 00000127 48890CD0                	mov qword [rax + 8 * rdx], rcx
   201 0000012B 48FFC6                  	inc rsi
   202 0000012E 48FFC2                  	inc rdx
   203 00000131 EBEA                    	jmp .L_lambda_simple_env_loop_0004
   204                                  .L_lambda_simple_env_end_0004:
   205 00000133 5B                      	pop rbx
   206 00000134 BE00000000              	mov rsi, 0
   207                                  .L_lambda_simple_params_loop_0004:	; copy params
   208 00000139 4883FE00                	cmp rsi, 0
   209 0000013D 740E                    	je .L_lambda_simple_params_end_0004
   210 0000013F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   211 00000144 488914F3                	mov qword [rbx + 8 * rsi], rdx
   212 00000148 48FFC6                  	inc rsi
   213 0000014B EBEC                    	jmp .L_lambda_simple_params_loop_0004
   214                                  .L_lambda_simple_params_end_0004:
   215 0000014D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   216 00000150 4889C3                  	mov rbx, rax
   217 00000153 58                      	pop rax
   218 00000154 C60004                  	mov byte [rax], T_closure
   219 00000157 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   220 0000015B 48C74009[65010000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0004
   221 00000163 EB46                    	jmp .L_lambda_simple_end_0004
   222                                  .L_lambda_simple_code_0004:	; lambda-simple body
   223 00000165 48837C241001            	cmp qword [rsp + 8 * 2], 1
   224 0000016B 740B                    	je .L_lambda_simple_arity_check_ok_0004
   225 0000016D FF742410                	push qword [rsp + 8 * 2]
   226 00000171 6A01                    	push 1
   227 00000173 E966010000              	jmp L_error_incorrect_arity_simple
   228                                  .L_lambda_simple_arity_check_ok_0004:
   229 00000178 C8000000                	enter 0, 0
   230                                  	; preparing a non-tail-call
   231 0000017C 48B8-                   	mov rax, L_constants + 30
   231 0000017E [1E00000000000000] 
   232 00000186 50                      	push rax
   233 00000187 48B8-                   	mov rax, L_constants + 21
   233 00000189 [1500000000000000] 
   234 00000191 50                      	push rax
   235 00000192 6A02                    	push 2	; arg count
   236 00000194 488B4520                	mov rax, PARAM(0)	; param f
   237 00000198 803804                  	cmp byte [rax], T_closure
   238 0000019B 0F85DB000000            	jne L_error_non_closure
   239 000001A1 FF7001                  	push SOB_CLOSURE_ENV(rax)
   240 000001A4 FF5009                  	call SOB_CLOSURE_CODE(rax)
   241 000001A7 C9                      	leave
   242 000001A8 C21800                  	ret AND_KILL_FRAME(1)
   243                                  .L_lambda_simple_end_0004:	; new closure is in rax
   244 000001AB 803804                  	cmp byte [rax], T_closure
   245 000001AE 0F85C8000000            	jne L_error_non_closure
   246 000001B4 FF7001                  	push SOB_CLOSURE_ENV(rax)
   247 000001B7 FF5009                  	call SOB_CLOSURE_CODE(rax)
   248                                  Lend:
   249 000001BA 4889C7                  	mov rdi, rax
   250 000001BD E8B8030000              	call print_sexpr_if_not_void
   251                                  
   252 000001C2 48BF-                           mov rdi, fmt_memory_usage
   252 000001C4 [BF00000000000000] 
   253 000001CC 488B3425[45010000]              mov rsi, qword [top_of_memory]
   254 000001D4 4881EE[00000000]                sub rsi, memory
   255 000001DB B800000000                      mov rax, 0
   256                                          ENTER
    44 000001E0 C8000000            <1>  enter 0, 0
    45 000001E4 4883E4F0            <1>  and rsp, ~15
   257 000001E8 E8(00000000)                    call printf
   258                                          LEAVE
    49 000001ED C9                  <1>  leave
   259 000001EE B800000000                      mov rax, 0
   260 000001F3 E8(00000000)                    call exit
   261                                  
   262                                  L_error_fvar_undefined:
   263 000001F8 50                              push rax
   264 000001F9 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
   265 00000201 48BE-                           mov rsi, fmt_undefined_free_var_1
   265 00000203 [2700000000000000] 
   266 0000020B B800000000                      mov rax, 0
   267                                          ENTER
    44 00000210 C8000000            <1>  enter 0, 0
    45 00000214 4883E4F0            <1>  and rsp, ~15
   268 00000218 E8(00000000)                    call fprintf
   269                                          LEAVE
    49 0000021D C9                  <1>  leave
   270 0000021E 58                              pop rax
   271 0000021F 488B4001                        mov rax, qword [rax + 1] ; string
   272 00000223 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
   273 00000227 BE01000000                      mov rsi, 1               ; sizeof(char)
   274 0000022C 488B5001                        mov rdx, qword [rax + 1] ; string-length
   275 00000230 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
   276 00000238 B800000000                      mov rax, 0
   277                                          ENTER
    44 0000023D C8000000            <1>  enter 0, 0
    45 00000241 4883E4F0            <1>  and rsp, ~15
   278 00000245 E8(00000000)                    call fwrite
   279                                          LEAVE
    49 0000024A C9                  <1>  leave
   280 0000024B 488B3C25[00000000]              mov rdi, [stderr]       ; destination
   281 00000253 48BE-                           mov rsi, fmt_undefined_free_var_2
   281 00000255 [3E00000000000000] 
   282 0000025D B800000000                      mov rax, 0
   283                                          ENTER
    44 00000262 C8000000            <1>  enter 0, 0
    45 00000266 4883E4F0            <1>  and rsp, ~15
   284 0000026A E8(00000000)                    call fprintf
   285                                          LEAVE
    49 0000026F C9                  <1>  leave
   286 00000270 48C7C0F6FFFFFF                  mov rax, -10
   287 00000277 E8(00000000)                    call exit
   288                                  
   289                                  L_error_non_closure:
   290 0000027C 488B3C25[00000000]              mov rdi, qword [stderr]
   291 00000284 48BE-                           mov rsi, fmt_non_closure
   291 00000286 [F500000000000000] 
   292 0000028E B800000000                      mov rax, 0
   293                                          ENTER
    44 00000293 C8000000            <1>  enter 0, 0
    45 00000297 4883E4F0            <1>  and rsp, ~15
   294 0000029B E8(00000000)                    call fprintf
   295                                          LEAVE
    49 000002A0 C9                  <1>  leave
   296 000002A1 48C7C0FEFFFFFF                  mov rax, -2
   297 000002A8 E8(00000000)                    call exit
   298                                  
   299                                  L_error_improper_list:
   300 000002AD 488B3C25[00000000]      	mov rdi, qword [stderr]
   301 000002B5 48BE-                   	mov rsi, fmt_error_improper_list
   301 000002B7 [1D01000000000000] 
   302 000002BF B800000000              	mov rax, 0
   303                                          ENTER
    44 000002C4 C8000000            <1>  enter 0, 0
    45 000002C8 4883E4F0            <1>  and rsp, ~15
   304 000002CC E8(00000000)            	call fprintf
   305                                          LEAVE
    49 000002D1 C9                  <1>  leave
   306 000002D2 48C7C0F9FFFFFF          	mov rax, -7
   307 000002D9 E8(00000000)            	call exit
   308                                  
   309                                  L_error_incorrect_arity_simple:
   310 000002DE 488B3C25[00000000]              mov rdi, qword [stderr]
   311 000002E6 48BE-                           mov rsi, fmt_incorrect_arity_simple
   311 000002E8 [6000000000000000] 
   312 000002F0 EB12                            jmp L_error_incorrect_arity_common
   313                                  L_error_incorrect_arity_opt:
   314 000002F2 488B3C25[00000000]              mov rdi, qword [stderr]
   315 000002FA 48BE-                           mov rsi, fmt_incorrect_arity_opt
   315 000002FC [8B00000000000000] 
   316                                  L_error_incorrect_arity_common:
   317 00000304 5A                              pop rdx
   318 00000305 59                              pop rcx
   319 00000306 B800000000                      mov rax, 0
   320                                          ENTER
    44 0000030B C8000000            <1>  enter 0, 0
    45 0000030F 4883E4F0            <1>  and rsp, ~15
   321 00000313 E8(00000000)                    call fprintf
   322                                          LEAVE
    49 00000318 C9                  <1>  leave
   323 00000319 48C7C0FAFFFFFF                  mov rax, -6
   324 00000320 E8(00000000)                    call exit
   325                                  
   326                                  section .data
   327                                  fmt_undefined_free_var_1:
   328 00000027 212121205468652066-             db `!!! The free variable \0`
   328 00000030 726565207661726961-
   328 00000039 626C652000         
   329                                  fmt_undefined_free_var_2:
   330 0000003E 207761732075736564-             db ` was used before it was defined.\n\0`
   330 00000047 206265666F72652069-
   330 00000050 742077617320646566-
   330 00000059 696E65642E0A00     
   331                                  fmt_incorrect_arity_simple:
   332 00000060 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   332 00000069 74656420256C642061-
   332 00000072 7267756D656E74732C-
   332 0000007B 206275742067697665-
   332 00000084 6E20256C640A00     
   333                                  fmt_incorrect_arity_opt:
   334 0000008B 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   334 00000094 746564206174206C65-
   334 0000009D 61737420256C642061-
   334 000000A6 7267756D656E74732C-
   334 000000AF 206275742067697665-
   334 000000B8 6E20256C640A00     
   335                                  fmt_memory_usage:
   336 000000BF 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   336 000000C8 20256C642062797465-
   336 000000D1 73206F662064796E61-
   336 000000DA 6D6963616C6C792D61-
   336 000000E3 6C6C6F636174656420-
   336 000000EC 6D656D6F72790A0A00 
   337                                  fmt_non_closure:
   338 000000F5 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   338 000000FE 7074696E6720746F20-
   338 00000107 6170706C792061206E-
   338 00000110 6F6E2D636C6F737572-
   338 00000119 65210A00           
   339                                  fmt_error_improper_list:
   340 0000011D 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   340 00000126 7267756D656E742069-
   340 0000012F 73206E6F7420612070-
   340 00000138 726F706572206C6973-
   340 00000141 74210A00           
   341                                  
   342                                  section .bss
   343                                  memory:
   344 00000000 <res 40000000h>         	resb gbytes(1)
   345                                  
   346                                  section .data
   347                                  top_of_memory:
   348 00000145 [0000000000000000]              dq memory
   349                                  
   350                                  section .text
   351                                  malloc:
   352 00000325 488B0425[45010000]              mov rax, qword [top_of_memory]
   353 0000032D 48013C25[45010000]              add qword [top_of_memory], rdi
   354 00000335 C3                              ret
   355                                  
   356                                  L_code_ptr_return:
   357 00000336 48837C241002            	cmp qword [rsp + 8*2], 2
   358 0000033C 0F85461C0000            	jne L_error_arg_count_2
   359 00000342 488B4C2418              	mov rcx, qword [rsp + 8*3]
   360                                  	assert_integer(rcx)
    53 00000347 803911              <1>  cmp byte [%1], %2
    54 0000034A 0F85D71C0000        <1>  jne L_error_incorrect_type
   361 00000350 488B4901                	mov rcx, qword [rcx + 1]
   362 00000354 4883F900                	cmp rcx, 0
   363 00000358 0F8C5E1B0000            	jl L_error_integer_range
   364 0000035E 488B442420              	mov rax, qword [rsp + 8*4]
   365                                  .L0:
   366 00000363 4883F900                        cmp rcx, 0
   367 00000367 7409                            je .L1
   368 00000369 488B6D00                	mov rbp, qword [rbp]
   369 0000036D 48FFC9                  	dec rcx
   370 00000370 7FF1                    	jg .L0
   371                                  .L1:
   372 00000372 4889EC                  	mov rsp, rbp
   373 00000375 5D                      	pop rbp
   374 00000376 5B                              pop rbx
   375 00000377 488B4C2408                      mov rcx, qword [rsp + 8*1]
   376 0000037C 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
   377 00000381 FFE3                    	jmp rbx
   378                                  
   379                                  L_code_ptr_make_list:
   380 00000383 C8000000                	enter 0, 0
   381 00000387 48837D1801                      cmp COUNT, 1
   382 0000038C 740C                            je .L0
   383 0000038E 48837D1802                      cmp COUNT, 2
   384 00000393 7411                            je .L1
   385 00000395 E9231C0000                      jmp L_error_arg_count_12
   386                                  .L0:
   387 0000039A 49B9-                           mov r9, sob_void
   387 0000039C [0000000000000000] 
   388 000003A4 EB04                            jmp .L2
   389                                  .L1:
   390 000003A6 4C8B4D28                        mov r9, PARAM(1)
   391                                  .L2:
   392 000003AA 488B4D20                        mov rcx, PARAM(0)
   393                                          assert_integer(rcx)
    53 000003AE 803911              <1>  cmp byte [%1], %2
    54 000003B1 0F85701C0000        <1>  jne L_error_incorrect_type
   394 000003B7 488B4901                        mov rcx, qword [rcx + 1]
   395 000003BB 4883F900                        cmp rcx, 0
   396 000003BF 0F8C281B0000                    jl L_error_arg_negative
   397 000003C5 49B8-                           mov r8, sob_nil
   397 000003C7 [0100000000000000] 
   398                                  .L3:
   399 000003CF 4883F900                        cmp rcx, 0
   400 000003D3 7E1D                            jle .L4
   401 000003D5 BF11000000                      mov rdi, 1 + 8 + 8
   402 000003DA E846FFFFFF                      call malloc
   403 000003DF C60021                          mov byte [rax], T_pair
   404 000003E2 4C894801                        mov qword [rax + 1], r9
   405 000003E6 4C894009                        mov qword [rax + 1 + 8], r8
   406 000003EA 4989C0                          mov r8, rax
   407 000003ED 48FFC9                          dec rcx
   408 000003F0 EBDD                            jmp .L3
   409                                  .L4:
   410 000003F2 4C89C0                          mov rax, r8
   411 000003F5 48837D1802                      cmp COUNT, 2
   412 000003FA 7404                            je .L5
   413 000003FC C9                              leave
   414 000003FD C21800                          ret AND_KILL_FRAME(1)
   415                                  .L5:
   416 00000400 C9                      	leave
   417 00000401 C22000                  	ret AND_KILL_FRAME(2)
   418                                  
   419                                  L_code_ptr_is_primitive:
   420 00000404 C8000000                	enter 0, 0
   421 00000408 48837D1801              	cmp COUNT, 1
   422 0000040D 0F85401B0000            	jne L_error_arg_count_1
   423 00000413 488B4520                	mov rax, PARAM(0)
   424                                  	assert_closure(rax)
    53 00000417 803804              <1>  cmp byte [%1], %2
    54 0000041A 0F85071C0000        <1>  jne L_error_incorrect_type
   425 00000420 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
   426 00000425 750C                    	jne .L_false
   427 00000427 48B8-                   	mov rax, sob_boolean_true
   427 00000429 [0300000000000000] 
   428 00000431 EB0A                    	jmp .L_end
   429                                  .L_false:
   430 00000433 48B8-                   	mov rax, sob_boolean_false
   430 00000435 [0200000000000000] 
   431                                  .L_end:
   432 0000043D C9                      	leave
   433 0000043E C21800                  	ret AND_KILL_FRAME(1)
   434                                  
   435                                  L_code_ptr_length:
   436 00000441 C8000000                	enter 0, 0
   437 00000445 48837D1801              	cmp COUNT, 1
   438 0000044A 0F85031B0000            	jne L_error_arg_count_1
   439 00000450 488B5D20                	mov rbx, PARAM(0)
   440 00000454 BF00000000              	mov rdi, 0
   441                                  .L:
   442 00000459 803B01                  	cmp byte [rbx], T_nil
   443 0000045C 7412                    	je .L_end
   444                                  	assert_pair(rbx)
    53 0000045E 803B21              <1>  cmp byte [%1], %2
    54 00000461 0F85C01B0000        <1>  jne L_error_incorrect_type
   445 00000467 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
   446 0000046B 48FFC7                  	inc rdi
   447 0000046E EBE9                    	jmp .L
   448                                  .L_end:
   449 00000470 E82D1A0000              	call make_integer
   450 00000475 C9                      	leave
   451 00000476 C21800                  	ret AND_KILL_FRAME(1)
   452                                  
   453                                  L_code_ptr_break:
   454 00000479 48837C241000                    cmp qword [rsp + 8 * 2], 0
   455 0000047F 0F85991A0000                    jne L_error_arg_count_0
   456 00000485 CC                              int3
   457 00000486 48B8-                           mov rax, sob_void
   457 00000488 [0000000000000000] 
   458 00000490 C21000                          ret AND_KILL_FRAME(0)        
   459                                  
   460                                  L_code_ptr_frame:
   461 00000493 C8000000                        enter 0, 0
   462 00000497 48837D1800                      cmp COUNT, 0
   463 0000049C 0F857C1A0000                    jne L_error_arg_count_0
   464                                  
   465 000004A2 48BF-                           mov rdi, fmt_frame
   465 000004A4 [4D01000000000000] 
   466 000004AC 488B7500                        mov rsi, qword [rbp]    ; old rbp
   467 000004B0 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
   468 000004B4 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
   469 000004B8 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
   470 000004BC 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
   471 000004C0 6A00                            push 0
   472 000004C2 4151                            push r9
   473 000004C4 4150                            push r8                   ; we'll use it when printing the params
   474 000004C6 B800000000                      mov rax, 0
   475                                          
   476                                          ENTER
    44 000004CB C8000000            <1>  enter 0, 0
    45 000004CF 4883E4F0            <1>  and rsp, ~15
   477 000004D3 E8(00000000)                    call printf
   478                                          LEAVE
    49 000004D8 C9                  <1>  leave
   479                                  
   480                                  .L:
   481 000004D9 488B0C24                        mov rcx, qword [rsp]
   482 000004DD 4883F900                        cmp rcx, 0
   483 000004E1 7467                            je .L_out
   484 000004E3 48BF-                           mov rdi, fmt_frame_param_prefix
   484 000004E5 [8601000000000000] 
   485 000004ED 488B742410                      mov rsi, qword [rsp + 8*2]
   486 000004F2 B800000000                      mov rax, 0
   487                                          
   488                                          ENTER
    44 000004F7 C8000000            <1>  enter 0, 0
    45 000004FB 4883E4F0            <1>  and rsp, ~15
   489 000004FF E8(00000000)                    call printf
   490                                          LEAVE
    49 00000504 C9                  <1>  leave
   491                                  
   492 00000505 488B0C24                        mov rcx, qword [rsp]
   493 00000509 48FFC9                          dec rcx
   494 0000050C 48890C24                        mov qword [rsp], rcx    ; dec arg count
   495 00000510 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
   496 00000515 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
   497 0000051A 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
   498 0000051E 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
   499 00000523 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
   500 00000526 E87B000000                      call print_sexpr
   501 0000052B 48BF-                           mov rdi, fmt_newline
   501 0000052D [B201000000000000] 
   502 00000535 B800000000                      mov rax, 0
   503                                          ENTER
    44 0000053A C8000000            <1>  enter 0, 0
    45 0000053E 4883E4F0            <1>  and rsp, ~15
   504 00000542 E8(00000000)                    call printf
   505                                          LEAVE
    49 00000547 C9                  <1>  leave
   506 00000548 EB8F                            jmp .L
   507                                  .L_out:
   508 0000054A 48BF-                           mov rdi, fmt_frame_continue
   508 0000054C [9701000000000000] 
   509 00000554 B800000000                      mov rax, 0
   510                                          ENTER
    44 00000559 C8000000            <1>  enter 0, 0
    45 0000055D 4883E4F0            <1>  and rsp, ~15
   511 00000561 E8(00000000)                    call printf
   512 00000566 E8(00000000)                    call getchar
   513                                          LEAVE
    49 0000056B C9                  <1>  leave
   514                                          
   515 0000056C 48B8-                           mov rax, sob_void
   515 0000056E [0000000000000000] 
   516 00000576 C9                              leave
   517 00000577 C21000                          ret AND_KILL_FRAME(0)
   518                                          
   519                                  print_sexpr_if_not_void:
   520 0000057A 4881FF[00000000]        	cmp rdi, sob_void
   521 00000581 7422                    	je .done
   522 00000583 E81E000000              	call print_sexpr
   523 00000588 48BF-                   	mov rdi, fmt_newline
   523 0000058A [B201000000000000] 
   524 00000592 B800000000              	mov rax, 0
   525                                  	ENTER
    44 00000597 C8000000            <1>  enter 0, 0
    45 0000059B 4883E4F0            <1>  and rsp, ~15
   526 0000059F E8(00000000)            	call printf
   527                                  	LEAVE
    49 000005A4 C9                  <1>  leave
   528                                  .done:
   529 000005A5 C3                      	ret
   530                                  
   531                                  section .data
   532                                  fmt_frame:
   533 0000014D 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
   533 00000156 207265742061646472-
   533 0000015F 203D2025703B206C65-
   533 00000168 7820656E76203D2025-
   533 00000171 703B20706172616D20-
   533 0000017A 636F756E74203D2025-
   533 00000183 640A00             
   534                                  fmt_frame_param_prefix:
   535 00000186 3D3D5B706172616D20-             db `==[param %d]==> \0`
   535 0000018F 25645D3D3D3E2000   
   536                                  fmt_frame_continue:
   537 00000197 486974203C456E7465-             db `Hit <Enter> to continue...\0`
   537 000001A0 723E20746F20636F6E-
   537 000001A9 74696E75652E2E2E00 
   538                                  fmt_newline:
   539 000001B2 0A00                    	db `\n\0`
   540                                  fmt_void:
   541 000001B4 233C766F69643E00        	db `#<void>\0`
   542                                  fmt_nil:
   543 000001BC 282900                  	db `()\0`
   544                                  fmt_boolean_false:
   545 000001BF 236600                  	db `#f\0`
   546                                  fmt_boolean_true:
   547 000001C2 237400                  	db `#t\0`
   548                                  fmt_char_backslash:
   549 000001C5 235C5C00                	db `#\\\\\0`
   550                                  fmt_char_dquote:
   551 000001C9 235C2200                	db `#\\"\0`
   552                                  fmt_char_simple:
   553 000001CD 235C256300              	db `#\\%c\0`
   554                                  fmt_char_null:
   555 000001D2 235C6E756C00            	db `#\\nul\0`
   556                                  fmt_char_bell:
   557 000001D8 235C62656C6C00          	db `#\\bell\0`
   558                                  fmt_char_backspace:
   559 000001DF 235C6261636B737061-     	db `#\\backspace\0`
   559 000001E8 636500             
   560                                  fmt_char_tab:
   561 000001EB 235C74616200            	db `#\\tab\0`
   562                                  fmt_char_newline:
   563 000001F1 235C6E65776C696E65-     	db `#\\newline\0`
   563 000001FA 00                 
   564                                  fmt_char_formfeed:
   565 000001FB 235C7061676500          	db `#\\page\0`
   566                                  fmt_char_return:
   567 00000202 235C72657475726E00      	db `#\\return\0`
   568                                  fmt_char_escape:
   569 0000020B 235C65736300            	db `#\\esc\0`
   570                                  fmt_char_space:
   571 00000211 235C737061636500        	db `#\\space\0`
   572                                  fmt_char_hex:
   573 00000219 235C782530325800        	db `#\\x%02X\0`
   574                                  fmt_gensym:
   575 00000221 47256C6400                      db `G%ld\0`
   576                                  fmt_closure:
   577 00000226 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   577 0000022F 206174203078253038-
   577 00000238 5820656E763D307825-
   577 00000241 30385820636F64653D-
   577 0000024A 3078253038583E00   
   578                                  fmt_lparen:
   579 00000252 2800                    	db `(\0`
   580                                  fmt_dotted_pair:
   581 00000254 202E2000                	db ` . \0`
   582                                  fmt_rparen:
   583 00000258 2900                    	db `)\0`
   584                                  fmt_space:
   585 0000025A 2000                    	db ` \0`
   586                                  fmt_empty_vector:
   587 0000025C 23282900                	db `#()\0`
   588                                  fmt_vector:
   589 00000260 232800                  	db `#(\0`
   590                                  fmt_real:
   591 00000263 256600                  	db `%f\0`
   592                                  fmt_fraction:
   593 00000266 256C642F256C6400        	db `%ld/%ld\0`
   594                                  fmt_zero:
   595 0000026E 3000                    	db `0\0`
   596                                  fmt_int:
   597 00000270 256C6400                	db `%ld\0`
   598                                  fmt_unknown_scheme_object_error:
   599 00000274 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
   599 0000027D 6F723A20556E6B6E6F-
   599 00000286 776E20536368656D65-
   599 0000028F 2D6F626A6563742028-
   599 00000298 525454492030782530-
   599 000002A1 32582920           
   600 000002A5 617420616464726573-     	db `at address 0x%08X\n\n\0`
   600 000002AE 73203078253038580A-
   600 000002B7 0A00               
   601                                  fmt_dquote:
   602 000002B9 2200                    	db `\"\0`
   603                                  fmt_string_char:
   604 000002BB 256300                          db `%c\0`
   605                                  fmt_string_char_7:
   606 000002BE 5C6100                          db `\\a\0`
   607                                  fmt_string_char_8:
   608 000002C1 5C6200                          db `\\b\0`
   609                                  fmt_string_char_9:
   610 000002C4 5C7400                          db `\\t\0`
   611                                  fmt_string_char_10:
   612 000002C7 5C6E00                          db `\\n\0`
   613                                  fmt_string_char_11:
   614 000002CA 5C7600                          db `\\v\0`
   615                                  fmt_string_char_12:
   616 000002CD 5C6600                          db `\\f\0`
   617                                  fmt_string_char_13:
   618 000002D0 5C7200                          db `\\r\0`
   619                                  fmt_string_char_34:
   620 000002D3 5C2200                          db `\\"\0`
   621                                  fmt_string_char_92:
   622 000002D6 5C5C00                          db `\\\\\0`
   623                                  fmt_string_char_hex:
   624 000002D9 5C7825583B00                    db `\\x%X;\0`
   625                                  
   626                                  section .text
   627                                  
   628                                  print_sexpr:
   629 000005A6 C8000000                	enter 0, 0
   630 000005AA 8A07                    	mov al, byte [rdi]
   631 000005AC 3C00                    	cmp al, T_void
   632 000005AE 7465                    	je .Lvoid
   633 000005B0 3C01                    	cmp al, T_nil
   634 000005B2 7470                    	je .Lnil
   635 000005B4 3C09                    	cmp al, T_boolean_false
   636 000005B6 747B                    	je .Lboolean_false
   637 000005B8 3C0A                    	cmp al, T_boolean_true
   638 000005BA 0F8482000000            	je .Lboolean_true
   639 000005C0 3C02                    	cmp al, T_char
   640 000005C2 0F8489000000            	je .Lchar
   641 000005C8 3C41                    	cmp al, T_interned_symbol
   642 000005CA 0F84BF010000            	je .Linterned_symbol
   643 000005D0 3C42                            cmp al, T_uninterned_symbol
   644 000005D2 0F84E3010000                    je .Luninterned_symbol
   645 000005D8 3C21                    	cmp al, T_pair
   646 000005DA 0F84EE010000            	je .Lpair
   647 000005E0 3C22                    	cmp al, T_vector
   648 000005E2 0F84B7020000            	je .Lvector
   649 000005E8 3C04                    	cmp al, T_closure
   650 000005EA 0F8485010000            	je .Lclosure
   651 000005F0 3C13                    	cmp al, T_real
   652 000005F2 0F8448030000            	je .Lreal
   653 000005F8 3C12                    	cmp al, T_fraction
   654 000005FA 0F846E030000            	je .Lfraction
   655 00000600 3C11                    	cmp al, T_integer
   656 00000602 0F84A7030000            	je .Linteger
   657 00000608 3C03                    	cmp al, T_string
   658 0000060A 0F84B2030000            	je .Lstring
   659                                  
   660 00000610 E9DC040000              	jmp .Lunknown_sexpr_type
   661                                  
   662                                  .Lvoid:
   663 00000615 48BF-                   	mov rdi, fmt_void
   663 00000617 [B401000000000000] 
   664 0000061F E900050000              	jmp .Lemit
   665                                  
   666                                  .Lnil:
   667 00000624 48BF-                   	mov rdi, fmt_nil
   667 00000626 [BC01000000000000] 
   668 0000062E E9F1040000              	jmp .Lemit
   669                                  
   670                                  .Lboolean_false:
   671 00000633 48BF-                   	mov rdi, fmt_boolean_false
   671 00000635 [BF01000000000000] 
   672 0000063D E9E2040000              	jmp .Lemit
   673                                  
   674                                  .Lboolean_true:
   675 00000642 48BF-                   	mov rdi, fmt_boolean_true
   675 00000644 [C201000000000000] 
   676 0000064C E9D3040000              	jmp .Lemit
   677                                  
   678                                  .Lchar:
   679 00000651 8A4701                  	mov al, byte [rdi + 1]
   680 00000654 3C20                    	cmp al, ' '
   681 00000656 7E20                    	jle .Lchar_whitespace
   682 00000658 3C5C                    	cmp al, 92 		; backslash
   683 0000065A 7474                    	je .Lchar_backslash
   684 0000065C 3C22                    	cmp al, '"'
   685 0000065E 747F                    	je .Lchar_dquote
   686 00000660 4825FF000000            	and rax, 255
   687 00000666 48BF-                   	mov rdi, fmt_char_simple
   687 00000668 [CD01000000000000] 
   688 00000670 4889C6                  	mov rsi, rax
   689 00000673 E9AC040000              	jmp .Lemit
   690                                  
   691                                  .Lchar_whitespace:
   692 00000678 3C00                    	cmp al, 0
   693 0000067A 7472                    	je .Lchar_null
   694 0000067C 3C07                    	cmp al, 7
   695 0000067E 747D                    	je .Lchar_bell
   696 00000680 3C08                    	cmp al, 8
   697 00000682 0F8484000000            	je .Lchar_backspace
   698 00000688 3C09                    	cmp al, 9
   699 0000068A 0F848B000000            	je .Lchar_tab
   700 00000690 3C0A                    	cmp al, 10
   701 00000692 0F8492000000            	je .Lchar_newline
   702 00000698 3C0C                    	cmp al, 12
   703 0000069A 0F8499000000            	je .Lchar_formfeed
   704 000006A0 3C0D                    	cmp al, 13
   705 000006A2 0F84A0000000            	je .Lchar_return
   706 000006A8 3C1B                    	cmp al, 27
   707 000006AA 0F84A7000000            	je .Lchar_escape
   708 000006B0 4825FF000000            	and rax, 255
   709 000006B6 3C20                    	cmp al, ' '
   710 000006B8 0F84A8000000            	je .Lchar_space
   711 000006BE 48BF-                   	mov rdi, fmt_char_hex
   711 000006C0 [1902000000000000] 
   712 000006C8 4889C6                  	mov rsi, rax
   713 000006CB E954040000              	jmp .Lemit	
   714                                  
   715                                  .Lchar_backslash:
   716 000006D0 48BF-                   	mov rdi, fmt_char_backslash
   716 000006D2 [C501000000000000] 
   717 000006DA E945040000              	jmp .Lemit
   718                                  
   719                                  .Lchar_dquote:
   720 000006DF 48BF-                   	mov rdi, fmt_char_dquote
   720 000006E1 [C901000000000000] 
   721 000006E9 E936040000              	jmp .Lemit
   722                                  
   723                                  .Lchar_null:
   724 000006EE 48BF-                   	mov rdi, fmt_char_null
   724 000006F0 [D201000000000000] 
   725 000006F8 E927040000              	jmp .Lemit
   726                                  
   727                                  .Lchar_bell:
   728 000006FD 48BF-                   	mov rdi, fmt_char_bell
   728 000006FF [D801000000000000] 
   729 00000707 E918040000              	jmp .Lemit
   730                                  
   731                                  .Lchar_backspace:
   732 0000070C 48BF-                   	mov rdi, fmt_char_backspace
   732 0000070E [DF01000000000000] 
   733 00000716 E909040000              	jmp .Lemit
   734                                  
   735                                  .Lchar_tab:
   736 0000071B 48BF-                   	mov rdi, fmt_char_tab
   736 0000071D [EB01000000000000] 
   737 00000725 E9FA030000              	jmp .Lemit
   738                                  
   739                                  .Lchar_newline:
   740 0000072A 48BF-                   	mov rdi, fmt_char_newline
   740 0000072C [F101000000000000] 
   741 00000734 E9EB030000              	jmp .Lemit
   742                                  
   743                                  .Lchar_formfeed:
   744 00000739 48BF-                   	mov rdi, fmt_char_formfeed
   744 0000073B [FB01000000000000] 
   745 00000743 E9DC030000              	jmp .Lemit
   746                                  
   747                                  .Lchar_return:
   748 00000748 48BF-                   	mov rdi, fmt_char_return
   748 0000074A [0202000000000000] 
   749 00000752 E9CD030000              	jmp .Lemit
   750                                  
   751                                  .Lchar_escape:
   752 00000757 48BF-                   	mov rdi, fmt_char_escape
   752 00000759 [0B02000000000000] 
   753 00000761 E9BE030000              	jmp .Lemit
   754                                  
   755                                  .Lchar_space:
   756 00000766 48BF-                   	mov rdi, fmt_char_space
   756 00000768 [1102000000000000] 
   757 00000770 E9AF030000              	jmp .Lemit
   758                                  
   759                                  .Lclosure:
   760 00000775 4889FE                  	mov rsi, qword rdi
   761 00000778 48BF-                   	mov rdi, fmt_closure
   761 0000077A [2602000000000000] 
   762 00000782 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   763 00000786 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   764 0000078A E995030000              	jmp .Lemit
   765                                  
   766                                  .Linterned_symbol:
   767 0000078F 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   768 00000793 BE01000000              	mov rsi, 1		 ; size = 1 byte
   769 00000798 488B5701                	mov rdx, qword [rdi + 1] ; length
   770 0000079C 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   771 000007A0 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   772                                  	ENTER
    44 000007A8 C8000000            <1>  enter 0, 0
    45 000007AC 4883E4F0            <1>  and rsp, ~15
   773 000007B0 E8(00000000)            	call fwrite
   774                                  	LEAVE
    49 000007B5 C9                  <1>  leave
   775 000007B6 E97E030000              	jmp .Lend
   776                                  
   777                                  .Luninterned_symbol:
   778 000007BB 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
   779 000007BF 48BF-                           mov rdi, fmt_gensym
   779 000007C1 [2102000000000000] 
   780 000007C9 E956030000                      jmp .Lemit
   781                                  	
   782                                  .Lpair:
   783 000007CE 57                      	push rdi
   784 000007CF 48BF-                   	mov rdi, fmt_lparen
   784 000007D1 [5202000000000000] 
   785 000007D9 B800000000              	mov rax, 0
   786                                          ENTER
    44 000007DE C8000000            <1>  enter 0, 0
    45 000007E2 4883E4F0            <1>  and rsp, ~15
   787 000007E6 E8(00000000)            	call printf
   788                                          LEAVE
    49 000007EB C9                  <1>  leave
   789 000007EC 488B3C24                	mov rdi, qword [rsp] 	; pair
   790 000007F0 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   791 000007F4 E8ADFDFFFF              	call print_sexpr
   792 000007F9 5F                      	pop rdi 		; pair
   793 000007FA 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   794                                  .Lcdr:
   795 000007FE 8A07                    	mov al, byte [rdi]
   796 00000800 3C01                    	cmp al, T_nil
   797 00000802 7447                    	je .Lcdr_nil
   798 00000804 3C21                    	cmp al, T_pair
   799 00000806 7462                    	je .Lcdr_pair
   800 00000808 57                      	push rdi
   801 00000809 48BF-                   	mov rdi, fmt_dotted_pair
   801 0000080B [5402000000000000] 
   802 00000813 B800000000              	mov rax, 0
   803                                          ENTER
    44 00000818 C8000000            <1>  enter 0, 0
    45 0000081C 4883E4F0            <1>  and rsp, ~15
   804 00000820 E8(00000000)            	call printf
   805                                          LEAVE
    49 00000825 C9                  <1>  leave
   806 00000826 5F                      	pop rdi
   807 00000827 E87AFDFFFF              	call print_sexpr
   808 0000082C 48BF-                   	mov rdi, fmt_rparen
   808 0000082E [5802000000000000] 
   809 00000836 B800000000              	mov rax, 0
   810                                          ENTER
    44 0000083B C8000000            <1>  enter 0, 0
    45 0000083F 4883E4F0            <1>  and rsp, ~15
   811 00000843 E8(00000000)            	call printf
   812                                          LEAVE
    49 00000848 C9                  <1>  leave
   813 00000849 C9                      	leave
   814 0000084A C3                      	ret
   815                                  
   816                                  .Lcdr_nil:
   817 0000084B 48BF-                   	mov rdi, fmt_rparen
   817 0000084D [5802000000000000] 
   818 00000855 B800000000              	mov rax, 0
   819                                          ENTER
    44 0000085A C8000000            <1>  enter 0, 0
    45 0000085E 4883E4F0            <1>  and rsp, ~15
   820 00000862 E8(00000000)            	call printf
   821                                          LEAVE
    49 00000867 C9                  <1>  leave
   822 00000868 C9                      	leave
   823 00000869 C3                      	ret
   824                                  
   825                                  .Lcdr_pair:
   826 0000086A 57                      	push rdi
   827 0000086B 48BF-                   	mov rdi, fmt_space
   827 0000086D [5A02000000000000] 
   828 00000875 B800000000              	mov rax, 0
   829                                          ENTER
    44 0000087A C8000000            <1>  enter 0, 0
    45 0000087E 4883E4F0            <1>  and rsp, ~15
   830 00000882 E8(00000000)            	call printf
   831                                          LEAVE
    49 00000887 C9                  <1>  leave
   832 00000888 488B3C24                	mov rdi, qword [rsp]
   833 0000088C 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   834 00000890 E811FDFFFF              	call print_sexpr
   835 00000895 5F                      	pop rdi
   836 00000896 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   837 0000089A E95FFFFFFF              	jmp .Lcdr
   838                                  
   839                                  .Lvector:
   840 0000089F 488B4701                	mov rax, qword [rdi + 1] ; length
   841 000008A3 4883F800                	cmp rax, 0
   842 000008A7 0F8484000000            	je .Lvector_empty
   843 000008AD 57                      	push rdi
   844 000008AE 48BF-                   	mov rdi, fmt_vector
   844 000008B0 [6002000000000000] 
   845 000008B8 B800000000              	mov rax, 0
   846                                          ENTER
    44 000008BD C8000000            <1>  enter 0, 0
    45 000008C1 4883E4F0            <1>  and rsp, ~15
   847 000008C5 E8(00000000)            	call printf
   848                                          LEAVE
    49 000008CA C9                  <1>  leave
   849 000008CB 488B3C24                	mov rdi, qword [rsp]
   850 000008CF FF7701                  	push qword [rdi + 1]
   851 000008D2 6A01                    	push 1
   852 000008D4 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   853 000008D8 E8C9FCFFFF              	call print_sexpr
   854                                  .Lvector_loop:
   855                                  	; [rsp] index
   856                                  	; [rsp + 8*1] limit
   857                                  	; [rsp + 8*2] vector
   858 000008DD 488B0424                	mov rax, qword [rsp]
   859 000008E1 483B442408              	cmp rax, qword [rsp + 8*1]
   860 000008E6 7436                    	je .Lvector_end
   861 000008E8 48BF-                   	mov rdi, fmt_space
   861 000008EA [5A02000000000000] 
   862 000008F2 B800000000              	mov rax, 0
   863                                          ENTER
    44 000008F7 C8000000            <1>  enter 0, 0
    45 000008FB 4883E4F0            <1>  and rsp, ~15
   864 000008FF E8(00000000)            	call printf
   865                                          LEAVE
    49 00000904 C9                  <1>  leave
   866 00000905 488B0424                	mov rax, qword [rsp]
   867 00000909 488B5C2410              	mov rbx, qword [rsp + 8*2]
   868 0000090E 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   869 00000913 E88EFCFFFF              	call print_sexpr
   870 00000918 48FF0424                	inc qword [rsp]
   871 0000091C EBBF                    	jmp .Lvector_loop
   872                                  
   873                                  .Lvector_end:
   874 0000091E 4883C418                	add rsp, 8*3
   875 00000922 48BF-                   	mov rdi, fmt_rparen
   875 00000924 [5802000000000000] 
   876 0000092C E9F3010000              	jmp .Lemit	
   877                                  
   878                                  .Lvector_empty:
   879 00000931 48BF-                   	mov rdi, fmt_empty_vector
   879 00000933 [5C02000000000000] 
   880 0000093B E9E4010000              	jmp .Lemit
   881                                  
   882                                  .Lreal:
   883 00000940 FF7701                  	push qword [rdi + 1]
   884 00000943 F20F100424              	movsd xmm0, qword [rsp]
   885 00000948 4883C408                	add rsp, 8*1
   886 0000094C 48BF-                   	mov rdi, fmt_real
   886 0000094E [6302000000000000] 
   887 00000956 B801000000              	mov rax, 1
   888                                  	ENTER
    44 0000095B C8000000            <1>  enter 0, 0
    45 0000095F 4883E4F0            <1>  and rsp, ~15
   889 00000963 E8(00000000)            	call printf
   890                                  	LEAVE
    49 00000968 C9                  <1>  leave
   891 00000969 E9CB010000              	jmp .Lend
   892                                  
   893                                  .Lfraction:
   894 0000096E 488B7701                	mov rsi, qword [rdi + 1]
   895 00000972 488B5709                	mov rdx, qword [rdi + 1 + 8]
   896 00000976 4883FE00                	cmp rsi, 0
   897 0000097A 7415                    	je .Lrat_zero
   898 0000097C 4883FA01                	cmp rdx, 1
   899 00000980 741E                    	je .Lrat_int
   900 00000982 48BF-                   	mov rdi, fmt_fraction
   900 00000984 [6602000000000000] 
   901 0000098C E993010000              	jmp .Lemit
   902                                  
   903                                  .Lrat_zero:
   904 00000991 48BF-                   	mov rdi, fmt_zero
   904 00000993 [6E02000000000000] 
   905 0000099B E984010000              	jmp .Lemit
   906                                  
   907                                  .Lrat_int:
   908 000009A0 48BF-                   	mov rdi, fmt_int
   908 000009A2 [7002000000000000] 
   909 000009AA E975010000              	jmp .Lemit
   910                                  
   911                                  .Linteger:
   912 000009AF 488B7701                	mov rsi, qword [rdi + 1]
   913 000009B3 48BF-                   	mov rdi, fmt_int
   913 000009B5 [7002000000000000] 
   914 000009BD E962010000              	jmp .Lemit
   915                                  
   916                                  .Lstring:
   917 000009C2 488D4709                	lea rax, [rdi + 1 + 8]
   918 000009C6 50                      	push rax
   919 000009C7 FF7701                  	push qword [rdi + 1]
   920 000009CA 48BF-                   	mov rdi, fmt_dquote
   920 000009CC [B902000000000000] 
   921 000009D4 B800000000              	mov rax, 0
   922                                  	ENTER
    44 000009D9 C8000000            <1>  enter 0, 0
    45 000009DD 4883E4F0            <1>  and rsp, ~15
   923 000009E1 E8(00000000)            	call printf
   924                                  	LEAVE
    49 000009E6 C9                  <1>  leave
   925                                  .Lstring_loop:
   926                                  	; qword [rsp]: limit
   927                                  	; qword [rsp + 8*1]: char *
   928 000009E7 48833C2400              	cmp qword [rsp], 0
   929 000009EC 0F84EF000000            	je .Lstring_end
   930 000009F2 488B442408              	mov rax, qword [rsp + 8*1]
   931 000009F7 8A00                    	mov al, byte [rax]
   932 000009F9 4825FF000000            	and rax, 255
   933 000009FF 3C07                    	cmp al, 7
   934 00000A01 745D                            je .Lstring_char_7
   935 00000A03 3C08                            cmp al, 8
   936 00000A05 7465                            je .Lstring_char_8
   937 00000A07 3C09                            cmp al, 9
   938 00000A09 746D                            je .Lstring_char_9
   939 00000A0B 3C0A                            cmp al, 10
   940 00000A0D 7475                            je .Lstring_char_10
   941 00000A0F 3C0B                            cmp al, 11
   942 00000A11 747D                            je .Lstring_char_11
   943 00000A13 3C0C                            cmp al, 12
   944 00000A15 0F8481000000                    je .Lstring_char_12
   945 00000A1B 3C0D                            cmp al, 13
   946 00000A1D 0F8485000000                    je .Lstring_char_13
   947 00000A23 3C22                            cmp al, 34
   948 00000A25 0F8489000000                    je .Lstring_char_34
   949 00000A2B 3C5C                            cmp al, 92              ;         je .Lstring_char_92
   951 00000A2D 3C20                            cmp al, ' '
   952 00000A2F 0F8C9A000000                    jl .Lstring_char_hex
   953 00000A35 48BF-                           mov rdi, fmt_string_char
   953 00000A37 [BB02000000000000] 
   954 00000A3F 4889C6                          mov rsi, rax
   955                                  .Lstring_char_emit:
   956 00000A42 B800000000                      mov rax, 0
   957                                          ENTER
    44 00000A47 C8000000            <1>  enter 0, 0
    45 00000A4B 4883E4F0            <1>  and rsp, ~15
   958 00000A4F E8(00000000)                    call printf
   959                                          LEAVE
    49 00000A54 C9                  <1>  leave
   960 00000A55 48FF0C24                        dec qword [rsp]
   961 00000A59 48FF442408                      inc qword [rsp + 8*1]
   962 00000A5E EB87                            jmp .Lstring_loop
   963                                  
   964                                  .Lstring_char_7:
   965 00000A60 48BF-                           mov rdi, fmt_string_char_7
   965 00000A62 [BE02000000000000] 
   966 00000A6A EBD6                            jmp .Lstring_char_emit
   967                                  
   968                                  .Lstring_char_8:
   969 00000A6C 48BF-                           mov rdi, fmt_string_char_8
   969 00000A6E [C102000000000000] 
   970 00000A76 EBCA                            jmp .Lstring_char_emit
   971                                          
   972                                  .Lstring_char_9:
   973 00000A78 48BF-                           mov rdi, fmt_string_char_9
   973 00000A7A [C402000000000000] 
   974 00000A82 EBBE                            jmp .Lstring_char_emit
   975                                  
   976                                  .Lstring_char_10:
   977 00000A84 48BF-                           mov rdi, fmt_string_char_10
   977 00000A86 [C702000000000000] 
   978 00000A8E EBB2                            jmp .Lstring_char_emit
   979                                  
   980                                  .Lstring_char_11:
   981 00000A90 48BF-                           mov rdi, fmt_string_char_11
   981 00000A92 [CA02000000000000] 
   982 00000A9A EBA6                            jmp .Lstring_char_emit
   983                                  
   984                                  .Lstring_char_12:
   985 00000A9C 48BF-                           mov rdi, fmt_string_char_12
   985 00000A9E [CD02000000000000] 
   986 00000AA6 EB9A                            jmp .Lstring_char_emit
   987                                  
   988                                  .Lstring_char_13:
   989 00000AA8 48BF-                           mov rdi, fmt_string_char_13
   989 00000AAA [D002000000000000] 
   990 00000AB2 EB8E                            jmp .Lstring_char_emit
   991                                  
   992                                  .Lstring_char_34:
   993 00000AB4 48BF-                           mov rdi, fmt_string_char_34
   993 00000AB6 [D302000000000000] 
   994 00000ABE EB82                            jmp .Lstring_char_emit
   995                                  
   996                                  .Lstring_char_92:
   997 00000AC0 48BF-                           mov rdi, fmt_string_char_92
   997 00000AC2 [D602000000000000] 
   998 00000ACA E973FFFFFF                      jmp .Lstring_char_emit
   999                                  
  1000                                  .Lstring_char_hex:
  1001 00000ACF 48BF-                           mov rdi, fmt_string_char_hex
  1001 00000AD1 [D902000000000000] 
  1002 00000AD9 4889C6                          mov rsi, rax
  1003 00000ADC E961FFFFFF                      jmp .Lstring_char_emit        
  1004                                  
  1005                                  .Lstring_end:
  1006 00000AE1 4883C410                	add rsp, 8 * 2
  1007 00000AE5 48BF-                   	mov rdi, fmt_dquote
  1007 00000AE7 [B902000000000000] 
  1008 00000AEF EB33                    	jmp .Lemit
  1009                                  
  1010                                  .Lunknown_sexpr_type:
  1011 00000AF1 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
  1011 00000AF3 [7402000000000000] 
  1012 00000AFB 4825FF000000            	and rax, 255
  1013 00000B01 4889C2                  	mov rdx, rax
  1014 00000B04 4889F9                  	mov rcx, rdi
  1015 00000B07 488B3C25[00000000]      	mov rdi, qword [stderr]
  1016 00000B0F B800000000              	mov rax, 0
  1017                                          ENTER
    44 00000B14 C8000000            <1>  enter 0, 0
    45 00000B18 4883E4F0            <1>  and rsp, ~15
  1018 00000B1C E8(00000000)            	call fprintf
  1019                                          LEAVE
    49 00000B21 C9                  <1>  leave
  1020 00000B22 C9                              leave
  1021 00000B23 C3                              ret
  1022                                  
  1023                                  .Lemit:
  1024 00000B24 B800000000              	mov rax, 0
  1025                                          ENTER
    44 00000B29 C8000000            <1>  enter 0, 0
    45 00000B2D 4883E4F0            <1>  and rsp, ~15
  1026 00000B31 E8(00000000)            	call printf
  1027                                          LEAVE
    49 00000B36 C9                  <1>  leave
  1028 00000B37 EB00                    	jmp .Lend
  1029                                  
  1030                                  .Lend:
  1031                                  	LEAVE
    49 00000B39 C9                  <1>  leave
  1032 00000B3A C3                      	ret
  1033                                  
  1034                                  ;;; rdi: address of free variable
  1035                                  ;;; rsi: address of code-pointer
  1036                                  bind_primitive:
  1037 00000B3B C8000000                        enter 0, 0
  1038 00000B3F 57                              push rdi
  1039 00000B40 BF11000000                      mov rdi, (1 + 8 + 8)
  1040 00000B45 E8DBF7FFFF                      call malloc
  1041 00000B4A 5F                              pop rdi
  1042 00000B4B C60004                          mov byte [rax], T_closure
  1043 00000B4E 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1044 00000B56 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1045 00000B5A 488907                          mov qword [rdi], rax
  1046 00000B5D 48B8-                           mov rax, sob_void
  1046 00000B5F [0000000000000000] 
  1047 00000B67 C9                              leave
  1048 00000B68 C3                              ret
  1049                                  
  1050                                  L_code_ptr_ash:
  1051 00000B69 C8000000                        enter 0, 0
  1052 00000B6D 48837D1802                      cmp COUNT, 2
  1053 00000B72 0F8510140000                    jne L_error_arg_count_2
  1054 00000B78 488B7D20                        mov rdi, PARAM(0)
  1055                                          assert_integer(rdi)
    53 00000B7C 803F11              <1>  cmp byte [%1], %2
    54 00000B7F 0F85A2140000        <1>  jne L_error_incorrect_type
  1056 00000B85 488B4D28                        mov rcx, PARAM(1)
  1057                                          assert_integer(rcx)
    53 00000B89 803911              <1>  cmp byte [%1], %2
    54 00000B8C 0F8595140000        <1>  jne L_error_incorrect_type
  1058 00000B92 488B7F01                        mov rdi, qword [rdi + 1]
  1059 00000B96 488B4901                        mov rcx, qword [rcx + 1]
  1060 00000B9A 4883F900                        cmp rcx, 0
  1061 00000B9E 7C0F                            jl .L_negative
  1062                                  .L_loop_positive:
  1063 00000BA0 4883F900                        cmp rcx, 0
  1064 00000BA4 741B                            je .L_exit
  1065 00000BA6 48D3E7                          sal rdi, cl
  1066 00000BA9 48C1E908                        shr rcx, 8
  1067 00000BAD EBF1                            jmp .L_loop_positive
  1068                                  .L_negative:
  1069 00000BAF 48F7D9                          neg rcx
  1070                                  .L_loop_negative:
  1071 00000BB2 4883F900                        cmp rcx, 0
  1072 00000BB6 7409                            je .L_exit
  1073 00000BB8 48D3FF                          sar rdi, cl
  1074 00000BBB 48C1E908                        shr rcx, 8
  1075 00000BBF EBF1                            jmp .L_loop_negative
  1076                                  .L_exit:
  1077 00000BC1 E8DC120000                      call make_integer
  1078 00000BC6 C9                              leave
  1079 00000BC7 C22000                          ret AND_KILL_FRAME(2)
  1080                                  
  1081                                  L_code_ptr_logand:
  1082 00000BCA C8000000                        enter 0, 0
  1083 00000BCE 48837D1802                      cmp COUNT, 2
  1084 00000BD3 0F85AF130000                    jne L_error_arg_count_2
  1085 00000BD9 4C8B4520                        mov r8, PARAM(0)
  1086                                          assert_integer(r8)
    53 00000BDD 41803811            <1>  cmp byte [%1], %2
    54 00000BE1 0F8540140000        <1>  jne L_error_incorrect_type
  1087 00000BE7 4C8B4D28                        mov r9, PARAM(1)
  1088                                          assert_integer(r9)
    53 00000BEB 41803911            <1>  cmp byte [%1], %2
    54 00000BEF 0F8532140000        <1>  jne L_error_incorrect_type
  1089 00000BF5 498B7801                        mov rdi, qword [r8 + 1]
  1090 00000BF9 49237901                        and rdi, qword [r9 + 1]
  1091 00000BFD E8A0120000                      call make_integer
  1092 00000C02 C9                              leave
  1093 00000C03 C22000                          ret AND_KILL_FRAME(2)
  1094                                  
  1095                                  L_code_ptr_logor:
  1096 00000C06 C8000000                        enter 0, 0
  1097 00000C0A 48837D1802                      cmp COUNT, 2
  1098 00000C0F 0F8573130000                    jne L_error_arg_count_2
  1099 00000C15 4C8B4520                        mov r8, PARAM(0)
  1100                                          assert_integer(r8)
    53 00000C19 41803811            <1>  cmp byte [%1], %2
    54 00000C1D 0F8504140000        <1>  jne L_error_incorrect_type
  1101 00000C23 4C8B4D28                        mov r9, PARAM(1)
  1102                                          assert_integer(r9)
    53 00000C27 41803911            <1>  cmp byte [%1], %2
    54 00000C2B 0F85F6130000        <1>  jne L_error_incorrect_type
  1103 00000C31 498B7801                        mov rdi, qword [r8 + 1]
  1104 00000C35 490B7901                        or rdi, qword [r9 + 1]
  1105 00000C39 E864120000                      call make_integer
  1106 00000C3E C9                              leave
  1107 00000C3F C22000                          ret AND_KILL_FRAME(2)
  1108                                  
  1109                                  L_code_ptr_logxor:
  1110 00000C42 C8000000                        enter 0, 0
  1111 00000C46 48837D1802                      cmp COUNT, 2
  1112 00000C4B 0F8537130000                    jne L_error_arg_count_2
  1113 00000C51 4C8B4520                        mov r8, PARAM(0)
  1114                                          assert_integer(r8)
    53 00000C55 41803811            <1>  cmp byte [%1], %2
    54 00000C59 0F85C8130000        <1>  jne L_error_incorrect_type
  1115 00000C5F 4C8B4D28                        mov r9, PARAM(1)
  1116                                          assert_integer(r9)
    53 00000C63 41803911            <1>  cmp byte [%1], %2
    54 00000C67 0F85BA130000        <1>  jne L_error_incorrect_type
  1117 00000C6D 498B7801                        mov rdi, qword [r8 + 1]
  1118 00000C71 49337901                        xor rdi, qword [r9 + 1]
  1119 00000C75 E828120000                      call make_integer
  1120                                          LEAVE
    49 00000C7A C9                  <1>  leave
  1121 00000C7B C22000                          ret AND_KILL_FRAME(2)
  1122                                  
  1123                                  L_code_ptr_lognot:
  1124 00000C7E C8000000                        enter 0, 0
  1125 00000C82 48837D1801                      cmp COUNT, 1
  1126 00000C87 0F85C6120000                    jne L_error_arg_count_1
  1127 00000C8D 4C8B4520                        mov r8, PARAM(0)
  1128                                          assert_integer(r8)
    53 00000C91 41803811            <1>  cmp byte [%1], %2
    54 00000C95 0F858C130000        <1>  jne L_error_incorrect_type
  1129 00000C9B 498B7801                        mov rdi, qword [r8 + 1]
  1130 00000C9F 48F7D7                          not rdi
  1131 00000CA2 E8FB110000                      call make_integer
  1132 00000CA7 C9                              leave
  1133 00000CA8 C21800                          ret AND_KILL_FRAME(1)
  1134                                  
  1135                                  L_code_ptr_bin_apply:
  1136                                  ;;; fill in for final project!
  1137                                  
  1138                                  L_code_ptr_is_null:
  1139 00000CAB C8000000                        enter 0, 0
  1140 00000CAF 48837D1801                      cmp COUNT, 1
  1141 00000CB4 0F8599120000                    jne L_error_arg_count_1
  1142 00000CBA 488B4520                        mov rax, PARAM(0)
  1143 00000CBE 803801                          cmp byte [rax], T_nil
  1144 00000CC1 750C                            jne .L_false
  1145 00000CC3 48B8-                           mov rax, sob_boolean_true
  1145 00000CC5 [0300000000000000] 
  1146 00000CCD EB0A                            jmp .L_end
  1147                                  .L_false:
  1148 00000CCF 48B8-                           mov rax, sob_boolean_false
  1148 00000CD1 [0200000000000000] 
  1149                                  .L_end:
  1150 00000CD9 C9                              leave
  1151 00000CDA C21800                          ret AND_KILL_FRAME(1)
  1152                                  
  1153                                  L_code_ptr_is_pair:
  1154 00000CDD C8000000                        enter 0, 0
  1155 00000CE1 48837D1801                      cmp COUNT, 1
  1156 00000CE6 0F8567120000                    jne L_error_arg_count_1
  1157 00000CEC 488B4520                        mov rax, PARAM(0)
  1158 00000CF0 803821                          cmp byte [rax], T_pair
  1159 00000CF3 750C                            jne .L_false
  1160 00000CF5 48B8-                           mov rax, sob_boolean_true
  1160 00000CF7 [0300000000000000] 
  1161 00000CFF EB0A                            jmp .L_end
  1162                                  .L_false:
  1163 00000D01 48B8-                           mov rax, sob_boolean_false
  1163 00000D03 [0200000000000000] 
  1164                                  .L_end:
  1165 00000D0B C9                              leave
  1166 00000D0C C21800                          ret AND_KILL_FRAME(1)
  1167                                          
  1168                                  L_code_ptr_is_void:
  1169 00000D0F C8000000                        enter 0, 0
  1170 00000D13 48837D1801                      cmp COUNT, 1
  1171 00000D18 0F8535120000                    jne L_error_arg_count_1
  1172 00000D1E 488B4520                        mov rax, PARAM(0)
  1173 00000D22 803800                          cmp byte [rax], T_void
  1174 00000D25 750C                            jne .L_false
  1175 00000D27 48B8-                           mov rax, sob_boolean_true
  1175 00000D29 [0300000000000000] 
  1176 00000D31 EB0A                            jmp .L_end
  1177                                  .L_false:
  1178 00000D33 48B8-                           mov rax, sob_boolean_false
  1178 00000D35 [0200000000000000] 
  1179                                  .L_end:
  1180 00000D3D C9                              leave
  1181 00000D3E C21800                          ret AND_KILL_FRAME(1)
  1182                                  
  1183                                  L_code_ptr_is_char:
  1184 00000D41 C8000000                        enter 0, 0
  1185 00000D45 48837D1801                      cmp COUNT, 1
  1186 00000D4A 0F8503120000                    jne L_error_arg_count_1
  1187 00000D50 488B4520                        mov rax, PARAM(0)
  1188 00000D54 803802                          cmp byte [rax], T_char
  1189 00000D57 750C                            jne .L_false
  1190 00000D59 48B8-                           mov rax, sob_boolean_true
  1190 00000D5B [0300000000000000] 
  1191 00000D63 EB0A                            jmp .L_end
  1192                                  .L_false:
  1193 00000D65 48B8-                           mov rax, sob_boolean_false
  1193 00000D67 [0200000000000000] 
  1194                                  .L_end:
  1195 00000D6F C9                              leave
  1196 00000D70 C21800                          ret AND_KILL_FRAME(1)
  1197                                  
  1198                                  L_code_ptr_is_string:
  1199 00000D73 C8000000                        enter 0, 0
  1200 00000D77 48837D1801                      cmp COUNT, 1
  1201 00000D7C 0F85D1110000                    jne L_error_arg_count_1
  1202 00000D82 488B4520                        mov rax, PARAM(0)
  1203 00000D86 803803                          cmp byte [rax], T_string
  1204 00000D89 750C                            jne .L_false
  1205 00000D8B 48B8-                           mov rax, sob_boolean_true
  1205 00000D8D [0300000000000000] 
  1206 00000D95 EB0A                            jmp .L_end
  1207                                  .L_false:
  1208 00000D97 48B8-                           mov rax, sob_boolean_false
  1208 00000D99 [0200000000000000] 
  1209                                  .L_end:
  1210 00000DA1 C9                              leave
  1211 00000DA2 C21800                          ret AND_KILL_FRAME(1)
  1212                                  
  1213                                  L_code_ptr_is_symbol:
  1214 00000DA5 C8000000                        enter 0, 0
  1215 00000DA9 48837D1801                      cmp COUNT, 1
  1216 00000DAE 0F859F110000                    jne L_error_arg_count_1
  1217 00000DB4 4C8B4520                        mov r8, PARAM(0)
  1218 00000DB8 41802040                        and byte [r8], T_symbol
  1219 00000DBC 740C                            jz .L_false
  1220 00000DBE 48B8-                           mov rax, sob_boolean_true
  1220 00000DC0 [0300000000000000] 
  1221 00000DC8 EB0A                            jmp .L_exit
  1222                                  .L_false:
  1223 00000DCA 48B8-                           mov rax, sob_boolean_false
  1223 00000DCC [0200000000000000] 
  1224                                  .L_exit:
  1225 00000DD4 C9                              leave
  1226 00000DD5 C21800                          ret AND_KILL_FRAME(1)
  1227                                  
  1228                                  L_code_ptr_is_uninterned_symbol:
  1229 00000DD8 C8000000                        enter 0, 0
  1230 00000DDC 48837D1801                      cmp COUNT, 1
  1231 00000DE1 0F856C110000                    jne L_error_arg_count_1
  1232 00000DE7 4C8B4520                        mov r8, PARAM(0)
  1233 00000DEB 41803842                        cmp byte [r8], T_uninterned_symbol
  1234 00000DEF 750C                            jne .L_false
  1235 00000DF1 48B8-                           mov rax, sob_boolean_true
  1235 00000DF3 [0300000000000000] 
  1236 00000DFB EB0A                            jmp .L_exit
  1237                                  .L_false:
  1238 00000DFD 48B8-                           mov rax, sob_boolean_false
  1238 00000DFF [0200000000000000] 
  1239                                  .L_exit:
  1240 00000E07 C9                              leave
  1241 00000E08 C21800                          ret AND_KILL_FRAME(1)
  1242                                  
  1243                                  L_code_ptr_is_interned_symbol:
  1244 00000E0B C8000000                        enter 0, 0
  1245 00000E0F 48837D1801                      cmp COUNT, 1
  1246 00000E14 0F8539110000                    jne L_error_arg_count_1
  1247 00000E1A 488B4520                        mov rax, PARAM(0)
  1248 00000E1E 803841                          cmp byte [rax], T_interned_symbol
  1249 00000E21 750C                            jne .L_false
  1250 00000E23 48B8-                           mov rax, sob_boolean_true
  1250 00000E25 [0300000000000000] 
  1251 00000E2D EB0A                            jmp .L_end
  1252                                  .L_false:
  1253 00000E2F 48B8-                           mov rax, sob_boolean_false
  1253 00000E31 [0200000000000000] 
  1254                                  .L_end:
  1255 00000E39 C9                              leave
  1256 00000E3A C21800                          ret AND_KILL_FRAME(1)
  1257                                  
  1258                                  L_code_ptr_gensym:
  1259 00000E3D C8000000                        enter 0, 0
  1260 00000E41 48837D1800                      cmp COUNT, 0
  1261 00000E46 0F85D2100000                    jne L_error_arg_count_0
  1262 00000E4C 48FF0425[DF020000]              inc qword [gensym_count]
  1263 00000E54 BF09000000                      mov rdi, (1 + 8)
  1264 00000E59 E8C7F4FFFF                      call malloc
  1265 00000E5E C60042                          mov byte [rax], T_uninterned_symbol
  1266 00000E61 488B0C25[DF020000]              mov rcx, qword [gensym_count]
  1267 00000E69 48894801                        mov qword [rax + 1], rcx
  1268 00000E6D C9                              leave
  1269 00000E6E C21000                          ret AND_KILL_FRAME(0)
  1270                                  
  1271                                  L_code_ptr_is_vector:
  1272 00000E71 C8000000                        enter 0, 0
  1273 00000E75 48837D1801                      cmp COUNT, 1
  1274 00000E7A 0F85D3100000                    jne L_error_arg_count_1
  1275 00000E80 488B4520                        mov rax, PARAM(0)
  1276 00000E84 803822                          cmp byte [rax], T_vector
  1277 00000E87 750C                            jne .L_false
  1278 00000E89 48B8-                           mov rax, sob_boolean_true
  1278 00000E8B [0300000000000000] 
  1279 00000E93 EB0A                            jmp .L_end
  1280                                  .L_false:
  1281 00000E95 48B8-                           mov rax, sob_boolean_false
  1281 00000E97 [0200000000000000] 
  1282                                  .L_end:
  1283 00000E9F C9                              leave
  1284 00000EA0 C21800                          ret AND_KILL_FRAME(1)
  1285                                  
  1286                                  L_code_ptr_is_closure:
  1287 00000EA3 C8000000                        enter 0, 0
  1288 00000EA7 48837D1801                      cmp COUNT, 1
  1289 00000EAC 0F85A1100000                    jne L_error_arg_count_1
  1290 00000EB2 488B4520                        mov rax, PARAM(0)
  1291 00000EB6 803804                          cmp byte [rax], T_closure
  1292 00000EB9 750C                            jne .L_false
  1293 00000EBB 48B8-                           mov rax, sob_boolean_true
  1293 00000EBD [0300000000000000] 
  1294 00000EC5 EB0A                            jmp .L_end
  1295                                  .L_false:
  1296 00000EC7 48B8-                           mov rax, sob_boolean_false
  1296 00000EC9 [0200000000000000] 
  1297                                  .L_end:
  1298 00000ED1 C9                              leave
  1299 00000ED2 C21800                          ret AND_KILL_FRAME(1)
  1300                                  
  1301                                  L_code_ptr_is_real:
  1302 00000ED5 C8000000                        enter 0, 0
  1303 00000ED9 48837D1801                      cmp COUNT, 1
  1304 00000EDE 0F856F100000                    jne L_error_arg_count_1
  1305 00000EE4 488B4520                        mov rax, PARAM(0)
  1306 00000EE8 803813                          cmp byte [rax], T_real
  1307 00000EEB 750C                            jne .L_false
  1308 00000EED 48B8-                           mov rax, sob_boolean_true
  1308 00000EEF [0300000000000000] 
  1309 00000EF7 EB0A                            jmp .L_end
  1310                                  .L_false:
  1311 00000EF9 48B8-                           mov rax, sob_boolean_false
  1311 00000EFB [0200000000000000] 
  1312                                  .L_end:
  1313 00000F03 C9                              leave
  1314 00000F04 C21800                          ret AND_KILL_FRAME(1)
  1315                                  
  1316                                  L_code_ptr_is_fraction:
  1317 00000F07 C8000000                        enter 0, 0
  1318 00000F0B 48837D1801                      cmp COUNT, 1
  1319 00000F10 0F853D100000                    jne L_error_arg_count_1
  1320 00000F16 488B4520                        mov rax, PARAM(0)
  1321 00000F1A 803812                          cmp byte [rax], T_fraction
  1322 00000F1D 750C                            jne .L_false
  1323 00000F1F 48B8-                           mov rax, sob_boolean_true
  1323 00000F21 [0300000000000000] 
  1324 00000F29 EB0A                            jmp .L_end
  1325                                  .L_false:
  1326 00000F2B 48B8-                           mov rax, sob_boolean_false
  1326 00000F2D [0200000000000000] 
  1327                                  .L_end:
  1328 00000F35 C9                              leave
  1329 00000F36 C21800                          ret AND_KILL_FRAME(1)
  1330                                  
  1331                                  L_code_ptr_is_boolean:
  1332 00000F39 C8000000                        enter 0, 0
  1333 00000F3D 48837D1801                      cmp COUNT, 1
  1334 00000F42 0F850B100000                    jne L_error_arg_count_1
  1335 00000F48 488B4520                        mov rax, PARAM(0)
  1336 00000F4C 8A18                            mov bl, byte [rax]
  1337 00000F4E 80E308                          and bl, T_boolean
  1338 00000F51 740C                            je .L_false
  1339 00000F53 48B8-                           mov rax, sob_boolean_true
  1339 00000F55 [0300000000000000] 
  1340 00000F5D EB0A                            jmp .L_end
  1341                                  .L_false:
  1342 00000F5F 48B8-                           mov rax, sob_boolean_false
  1342 00000F61 [0200000000000000] 
  1343                                  .L_end:
  1344 00000F69 C9                              leave
  1345 00000F6A C21800                          ret AND_KILL_FRAME(1)
  1346                                          
  1347                                  L_code_ptr_is_boolean_false:
  1348 00000F6D C8000000                        enter 0, 0
  1349 00000F71 48837D1801                      cmp COUNT, 1
  1350 00000F76 0F85D70F0000                    jne L_error_arg_count_1
  1351 00000F7C 488B4520                        mov rax, PARAM(0)
  1352 00000F80 8A18                            mov bl, byte [rax]
  1353 00000F82 80FB09                          cmp bl, T_boolean_false
  1354 00000F85 750C                            jne .L_false
  1355 00000F87 48B8-                           mov rax, sob_boolean_true
  1355 00000F89 [0300000000000000] 
  1356 00000F91 EB0A                            jmp .L_end
  1357                                  .L_false:
  1358 00000F93 48B8-                           mov rax, sob_boolean_false
  1358 00000F95 [0200000000000000] 
  1359                                  .L_end:
  1360 00000F9D C9                              leave
  1361 00000F9E C21800                          ret AND_KILL_FRAME(1)
  1362                                  
  1363                                  L_code_ptr_is_boolean_true:
  1364 00000FA1 C8000000                        enter 0, 0
  1365 00000FA5 48837D1801                      cmp COUNT, 1
  1366 00000FAA 0F85A30F0000                    jne L_error_arg_count_1
  1367 00000FB0 488B4520                        mov rax, PARAM(0)
  1368 00000FB4 8A18                            mov bl, byte [rax]
  1369 00000FB6 80FB0A                          cmp bl, T_boolean_true
  1370 00000FB9 750C                            jne .L_false
  1371 00000FBB 48B8-                           mov rax, sob_boolean_true
  1371 00000FBD [0300000000000000] 
  1372 00000FC5 EB0A                            jmp .L_end
  1373                                  .L_false:
  1374 00000FC7 48B8-                           mov rax, sob_boolean_false
  1374 00000FC9 [0200000000000000] 
  1375                                  .L_end:
  1376 00000FD1 C9                              leave
  1377 00000FD2 C21800                          ret AND_KILL_FRAME(1)
  1378                                  
  1379                                  L_code_ptr_is_number:
  1380 00000FD5 C8000000                        enter 0, 0
  1381 00000FD9 48837D1801                      cmp COUNT, 1
  1382 00000FDE 0F856F0F0000                    jne L_error_arg_count_1
  1383 00000FE4 488B4520                        mov rax, PARAM(0)
  1384 00000FE8 8A18                            mov bl, byte [rax]
  1385 00000FEA 80E310                          and bl, T_number
  1386 00000FED 740C                            jz .L_false
  1387 00000FEF 48B8-                           mov rax, sob_boolean_true
  1387 00000FF1 [0300000000000000] 
  1388 00000FF9 EB0A                            jmp .L_end
  1389                                  .L_false:
  1390 00000FFB 48B8-                           mov rax, sob_boolean_false
  1390 00000FFD [0200000000000000] 
  1391                                  .L_end:
  1392 00001005 C9                              leave
  1393 00001006 C21800                          ret AND_KILL_FRAME(1)
  1394                                          
  1395                                  L_code_ptr_is_collection:
  1396 00001009 C8000000                        enter 0, 0
  1397 0000100D 48837D1801                      cmp COUNT, 1
  1398 00001012 0F853B0F0000                    jne L_error_arg_count_1
  1399 00001018 488B4520                        mov rax, PARAM(0)
  1400 0000101C 8A18                            mov bl, byte [rax]
  1401 0000101E 80E320                          and bl, T_collection
  1402 00001021 740C                            je .L_false
  1403 00001023 48B8-                           mov rax, sob_boolean_true
  1403 00001025 [0300000000000000] 
  1404 0000102D EB0A                            jmp .L_end
  1405                                  .L_false:
  1406 0000102F 48B8-                           mov rax, sob_boolean_false
  1406 00001031 [0200000000000000] 
  1407                                  .L_end:
  1408 00001039 C9                              leave
  1409 0000103A C21800                          ret AND_KILL_FRAME(1)
  1410                                  
  1411                                  L_code_ptr_cons:
  1412 0000103D C8000000                        enter 0, 0
  1413 00001041 48837D1802                      cmp COUNT, 2
  1414 00001046 0F853C0F0000                    jne L_error_arg_count_2
  1415 0000104C BF11000000                      mov rdi, (1 + 8 + 8)
  1416 00001051 E8CFF2FFFF                      call malloc
  1417 00001056 C60021                          mov byte [rax], T_pair
  1418 00001059 488B5D20                        mov rbx, PARAM(0)
  1419 0000105D 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1420 00001061 488B5D28                        mov rbx, PARAM(1)
  1421 00001065 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1422 00001069 C9                              leave
  1423 0000106A C22000                          ret AND_KILL_FRAME(2)
  1424                                  
  1425                                  L_code_ptr_display_sexpr:
  1426 0000106D C8000000                        enter 0, 0
  1427 00001071 48837D1801                      cmp COUNT, 1
  1428 00001076 0F85D70E0000                    jne L_error_arg_count_1
  1429 0000107C 488B7D20                        mov rdi, PARAM(0)
  1430 00001080 E821F5FFFF                      call print_sexpr
  1431 00001085 48B8-                           mov rax, sob_void
  1431 00001087 [0000000000000000] 
  1432 0000108F C9                              leave
  1433 00001090 C21800                          ret AND_KILL_FRAME(1)
  1434                                  
  1435                                  L_code_ptr_write_char:
  1436 00001093 C8000000                        enter 0, 0
  1437 00001097 48837D1801                      cmp COUNT, 1
  1438 0000109C 0F85B10E0000                    jne L_error_arg_count_1
  1439 000010A2 488B4520                        mov rax, PARAM(0)
  1440                                          assert_char(rax)
    53 000010A6 803802              <1>  cmp byte [%1], %2
    54 000010A9 0F85780F0000        <1>  jne L_error_incorrect_type
  1441 000010AF 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1442 000010B2 4825FF000000                    and rax, 255
  1443 000010B8 48BF-                           mov rdi, fmt_char
  1443 000010BA [E702000000000000] 
  1444 000010C2 4889C6                          mov rsi, rax
  1445 000010C5 B800000000                      mov rax, 0
  1446                                          ENTER
    44 000010CA C8000000            <1>  enter 0, 0
    45 000010CE 4883E4F0            <1>  and rsp, ~15
  1447 000010D2 E8(00000000)                    call printf
  1448                                          LEAVE
    49 000010D7 C9                  <1>  leave
  1449 000010D8 48B8-                           mov rax, sob_void
  1449 000010DA [0000000000000000] 
  1450 000010E2 C9                              leave
  1451 000010E3 C21800                          ret AND_KILL_FRAME(1)
  1452                                  
  1453                                  L_code_ptr_car:
  1454 000010E6 C8000000                        enter 0, 0
  1455 000010EA 48837D1801                      cmp COUNT, 1
  1456 000010EF 0F855E0E0000                    jne L_error_arg_count_1
  1457 000010F5 488B4520                        mov rax, PARAM(0)
  1458                                          assert_pair(rax)
    53 000010F9 803821              <1>  cmp byte [%1], %2
    54 000010FC 0F85250F0000        <1>  jne L_error_incorrect_type
  1459 00001102 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1460 00001106 C9                              leave
  1461 00001107 C21800                          ret AND_KILL_FRAME(1)
  1462                                          
  1463                                  L_code_ptr_cdr:
  1464 0000110A C8000000                        enter 0, 0
  1465 0000110E 48837D1801                      cmp COUNT, 1
  1466 00001113 0F853A0E0000                    jne L_error_arg_count_1
  1467 00001119 488B4520                        mov rax, PARAM(0)
  1468                                          assert_pair(rax)
    53 0000111D 803821              <1>  cmp byte [%1], %2
    54 00001120 0F85010F0000        <1>  jne L_error_incorrect_type
  1469 00001126 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1470 0000112A C9                              leave
  1471 0000112B C21800                          ret AND_KILL_FRAME(1)
  1472                                          
  1473                                  L_code_ptr_string_length:
  1474 0000112E C8000000                        enter 0, 0
  1475 00001132 48837D1801                      cmp COUNT, 1
  1476 00001137 0F85160E0000                    jne L_error_arg_count_1
  1477 0000113D 488B4520                        mov rax, PARAM(0)
  1478                                          assert_string(rax)
    53 00001141 803803              <1>  cmp byte [%1], %2
    54 00001144 0F85DD0E0000        <1>  jne L_error_incorrect_type
  1479 0000114A 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1480 0000114E E84F0D0000                      call make_integer
  1481 00001153 C9                              leave
  1482 00001154 C21800                          ret AND_KILL_FRAME(1)
  1483                                  
  1484                                  L_code_ptr_vector_length:
  1485 00001157 C8000000                        enter 0, 0
  1486 0000115B 48837D1801                      cmp COUNT, 1
  1487 00001160 0F85ED0D0000                    jne L_error_arg_count_1
  1488 00001166 488B4520                        mov rax, PARAM(0)
  1489                                          assert_vector(rax)
    53 0000116A 803822              <1>  cmp byte [%1], %2
    54 0000116D 0F85B40E0000        <1>  jne L_error_incorrect_type
  1490 00001173 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1491 00001177 E8260D0000                      call make_integer
  1492 0000117C C9                              leave
  1493 0000117D C21800                          ret AND_KILL_FRAME(1)
  1494                                  
  1495                                  L_code_ptr_real_to_integer:
  1496 00001180 C8000000                        enter 0, 0
  1497 00001184 48837D1801                      cmp COUNT, 1
  1498 00001189 0F85C40D0000                    jne L_error_arg_count_1
  1499 0000118F 488B5D20                        mov rbx, PARAM(0)
  1500                                          assert_real(rbx)
    53 00001193 803B13              <1>  cmp byte [%1], %2
    54 00001196 0F858B0E0000        <1>  jne L_error_incorrect_type
  1501 0000119C F20F104301                      movsd xmm0, qword [rbx + 1]
  1502 000011A1 F2480F2CF8                      cvttsd2si rdi, xmm0
  1503 000011A6 E8F70C0000                      call make_integer
  1504 000011AB C9                              leave
  1505 000011AC C21800                          ret AND_KILL_FRAME(1)
  1506                                  
  1507                                  L_code_ptr_exit:
  1508 000011AF C8000000                        enter 0, 0
  1509 000011B3 48837D1800                      cmp COUNT, 0
  1510 000011B8 0F85600D0000                    jne L_error_arg_count_0
  1511 000011BE B800000000                      mov rax, 0
  1512 000011C3 E8(00000000)                    call exit
  1513                                  
  1514                                  L_code_ptr_integer_to_real:
  1515 000011C8 C8000000                        enter 0, 0
  1516 000011CC 48837D1801                      cmp COUNT, 1
  1517 000011D1 0F857C0D0000                    jne L_error_arg_count_1
  1518 000011D7 488B4520                        mov rax, PARAM(0)
  1519                                          assert_integer(rax)
    53 000011DB 803811              <1>  cmp byte [%1], %2
    54 000011DE 0F85430E0000        <1>  jne L_error_incorrect_type
  1520 000011E4 FF7001                          push qword [rax + 1]
  1521 000011E7 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1522 000011ED E8980C0000                      call make_real
  1523 000011F2 C9                              leave
  1524 000011F3 C21800                          ret AND_KILL_FRAME(1)
  1525                                  
  1526                                  L_code_ptr_fraction_to_real:
  1527 000011F6 C8000000                        enter 0, 0
  1528 000011FA 48837D1801                      cmp COUNT, 1
  1529 000011FF 0F854E0D0000                    jne L_error_arg_count_1
  1530 00001205 488B4520                        mov rax, PARAM(0)
  1531                                          assert_fraction(rax)
    53 00001209 803812              <1>  cmp byte [%1], %2
    54 0000120C 0F85150E0000        <1>  jne L_error_incorrect_type
  1532 00001212 FF7001                          push qword [rax + 1]
  1533 00001215 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1534 0000121B FF7009                          push qword [rax + 1 + 8]
  1535 0000121E F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1536 00001224 F20F5EC1                        divsd xmm0, xmm1
  1537 00001228 E85D0C0000                      call make_real
  1538 0000122D C9                              leave
  1539 0000122E C21800                          ret AND_KILL_FRAME(1)
  1540                                  
  1541                                  L_code_ptr_char_to_integer:
  1542 00001231 C8000000                        enter 0, 0
  1543 00001235 48837D1801                      cmp COUNT, 1
  1544 0000123A 0F85130D0000                    jne L_error_arg_count_1
  1545 00001240 488B4520                        mov rax, PARAM(0)
  1546                                          assert_char(rax)
    53 00001244 803802              <1>  cmp byte [%1], %2
    54 00001247 0F85DA0D0000        <1>  jne L_error_incorrect_type
  1547 0000124D 8A4001                          mov al, byte [rax + 1]
  1548 00001250 4825FF000000                    and rax, 255
  1549 00001256 4889C7                          mov rdi, rax
  1550 00001259 E8440C0000                      call make_integer
  1551 0000125E C9                              leave
  1552 0000125F C21800                          ret AND_KILL_FRAME(1)
  1553                                  
  1554                                  L_code_ptr_integer_to_fraction:
  1555 00001262 C8000000                        enter 0, 0
  1556 00001266 48837D1801                      cmp COUNT, 1
  1557 0000126B 0F85E20C0000                    jne L_error_arg_count_1
  1558 00001271 4C8B4520                        mov r8, PARAM(0)
  1559                                          assert_integer(r8)
    53 00001275 41803811            <1>  cmp byte [%1], %2
    54 00001279 0F85A80D0000        <1>  jne L_error_incorrect_type
  1560 0000127F BF11000000                      mov rdi, (1 + 8 + 8)
  1561 00001284 E89CF0FFFF                      call malloc
  1562 00001289 498B5801                        mov rbx, qword [r8 + 1]
  1563 0000128D C60012                          mov byte [rax], T_fraction
  1564 00001290 48895801                        mov qword [rax + 1], rbx
  1565 00001294 48C7400901000000                mov qword [rax + 1 + 8], 1
  1566 0000129C C9                              leave
  1567 0000129D C21800                          ret AND_KILL_FRAME(1)
  1568                                  
  1569                                  L_code_ptr_integer_to_char:
  1570 000012A0 C8000000                        enter 0, 0
  1571 000012A4 48837D1801                      cmp COUNT, 1
  1572 000012A9 0F85A40C0000                    jne L_error_arg_count_1
  1573 000012AF 488B4520                        mov rax, PARAM(0)
  1574                                          assert_integer(rax)
    53 000012B3 803811              <1>  cmp byte [%1], %2
    54 000012B6 0F856B0D0000        <1>  jne L_error_incorrect_type
  1575 000012BC 488B5801                        mov rbx, qword [rax + 1]
  1576 000012C0 4883FB00                        cmp rbx, 0
  1577 000012C4 0F8EF20B0000                    jle L_error_integer_range
  1578 000012CA 4881FB00010000                  cmp rbx, 256
  1579 000012D1 0F8DE50B0000                    jge L_error_integer_range
  1580 000012D7 BF02000000                      mov rdi, (1 + 1)
  1581 000012DC E844F0FFFF                      call malloc
  1582 000012E1 C60002                          mov byte [rax], T_char
  1583 000012E4 885801                          mov byte [rax + 1], bl
  1584 000012E7 C9                              leave
  1585 000012E8 C21800                          ret AND_KILL_FRAME(1)
  1586                                  
  1587                                  L_code_ptr_trng:
  1588 000012EB C8000000                        enter 0, 0
  1589 000012EF 48837D1800                      cmp COUNT, 0
  1590 000012F4 0F85240C0000                    jne L_error_arg_count_0
  1591 000012FA 480FC7F7                        rdrand rdi
  1592 000012FE 48D1EF                          shr rdi, 1
  1593 00001301 E89C0B0000                      call make_integer
  1594 00001306 C9                              leave
  1595 00001307 C21000                          ret AND_KILL_FRAME(0)
  1596                                  
  1597                                  L_code_ptr_is_zero:
  1598 0000130A C8000000                        enter 0, 0
  1599 0000130E 48837D1801                      cmp COUNT, 1
  1600 00001313 0F853A0C0000                    jne L_error_arg_count_1
  1601 00001319 488B4520                        mov rax, PARAM(0)
  1602 0000131D 803811                          cmp byte [rax], T_integer
  1603 00001320 740F                            je .L_integer
  1604 00001322 803812                          cmp byte [rax], T_fraction
  1605 00001325 7413                            je .L_fraction
  1606 00001327 803813                          cmp byte [rax], T_real
  1607 0000132A 7417                            je .L_real
  1608 0000132C E9F60C0000                      jmp L_error_incorrect_type
  1609                                  .L_integer:
  1610 00001331 4883780100                      cmp qword [rax + 1], 0
  1611 00001336 7429                            je .L_zero
  1612 00001338 EB1B                            jmp .L_not_zero
  1613                                  .L_fraction:
  1614 0000133A 4883780100                      cmp qword [rax + 1], 0
  1615 0000133F 7420                            je .L_zero
  1616 00001341 EB12                            jmp .L_not_zero
  1617                                  .L_real:
  1618 00001343 660FEFC0                        pxor xmm0, xmm0
  1619 00001347 FF7001                          push qword [rax + 1]
  1620 0000134A F20F100C24                      movsd xmm1, qword [rsp]
  1621 0000134F 660F2EC1                        ucomisd xmm0, xmm1
  1622 00001353 740C                            je .L_zero
  1623                                  .L_not_zero:
  1624 00001355 48B8-                           mov rax, sob_boolean_false
  1624 00001357 [0200000000000000] 
  1625 0000135F EB0A                            jmp .L_end
  1626                                  .L_zero:
  1627 00001361 48B8-                           mov rax, sob_boolean_true
  1627 00001363 [0300000000000000] 
  1628                                  .L_end:
  1629 0000136B C9                              leave
  1630 0000136C C21800                          ret AND_KILL_FRAME(1)
  1631                                  
  1632                                  L_code_ptr_is_integer:
  1633 0000136F C8000000                        enter 0, 0
  1634 00001373 48837D1801                      cmp COUNT, 1
  1635 00001378 0F85D50B0000                    jne L_error_arg_count_1
  1636 0000137E 488B4520                        mov rax, PARAM(0)
  1637 00001382 803811                          cmp byte [rax], T_integer
  1638 00001385 750C                            jne .L_false
  1639 00001387 48B8-                           mov rax, sob_boolean_true
  1639 00001389 [0300000000000000] 
  1640 00001391 EB0A                            jmp .L_exit
  1641                                  .L_false:
  1642 00001393 48B8-                           mov rax, sob_boolean_false
  1642 00001395 [0200000000000000] 
  1643                                  .L_exit:
  1644 0000139D C9                              leave
  1645 0000139E C21800                          ret AND_KILL_FRAME(1)
  1646                                  
  1647                                  L_code_ptr_raw_bin_add_rr:
  1648 000013A1 C8000000                        enter 0, 0
  1649 000013A5 48837D1802                      cmp COUNT, 2
  1650 000013AA 0F85D80B0000                    jne L_error_arg_count_2
  1651 000013B0 488B5D20                        mov rbx, PARAM(0)
  1652                                          assert_real(rbx)
    53 000013B4 803B13              <1>  cmp byte [%1], %2
    54 000013B7 0F856A0C0000        <1>  jne L_error_incorrect_type
  1653 000013BD 488B4D28                        mov rcx, PARAM(1)
  1654                                          assert_real(rcx)
    53 000013C1 803913              <1>  cmp byte [%1], %2
    54 000013C4 0F855D0C0000        <1>  jne L_error_incorrect_type
  1655 000013CA F20F104301                      movsd xmm0, qword [rbx + 1]
  1656 000013CF F20F104901                      movsd xmm1, qword [rcx + 1]
  1657 000013D4 F20F58C1                        addsd xmm0, xmm1
  1658 000013D8 E8AD0A0000                      call make_real
  1659 000013DD C9                              leave
  1660 000013DE C22000                          ret AND_KILL_FRAME(2)
  1661                                  
  1662                                  L_code_ptr_raw_bin_sub_rr:
  1663 000013E1 C8000000                        enter 0, 0
  1664 000013E5 48837D1802                      cmp COUNT, 2
  1665 000013EA 0F85980B0000                    jne L_error_arg_count_2
  1666 000013F0 488B5D20                        mov rbx, PARAM(0)
  1667                                          assert_real(rbx)
    53 000013F4 803B13              <1>  cmp byte [%1], %2
    54 000013F7 0F852A0C0000        <1>  jne L_error_incorrect_type
  1668 000013FD 488B4D28                        mov rcx, PARAM(1)
  1669                                          assert_real(rcx)
    53 00001401 803913              <1>  cmp byte [%1], %2
    54 00001404 0F851D0C0000        <1>  jne L_error_incorrect_type
  1670 0000140A F20F104301                      movsd xmm0, qword [rbx + 1]
  1671 0000140F F20F104901                      movsd xmm1, qword [rcx + 1]
  1672 00001414 F20F5CC1                        subsd xmm0, xmm1
  1673 00001418 E86D0A0000                      call make_real
  1674 0000141D C9                              leave
  1675 0000141E C22000                          ret AND_KILL_FRAME(2)
  1676                                  
  1677                                  L_code_ptr_raw_bin_mul_rr:
  1678 00001421 C8000000                        enter 0, 0
  1679 00001425 48837D1802                      cmp COUNT, 2
  1680 0000142A 0F85580B0000                    jne L_error_arg_count_2
  1681 00001430 488B5D20                        mov rbx, PARAM(0)
  1682                                          assert_real(rbx)
    53 00001434 803B13              <1>  cmp byte [%1], %2
    54 00001437 0F85EA0B0000        <1>  jne L_error_incorrect_type
  1683 0000143D 488B4D28                        mov rcx, PARAM(1)
  1684                                          assert_real(rcx)
    53 00001441 803913              <1>  cmp byte [%1], %2
    54 00001444 0F85DD0B0000        <1>  jne L_error_incorrect_type
  1685 0000144A F20F104301                      movsd xmm0, qword [rbx + 1]
  1686 0000144F F20F104901                      movsd xmm1, qword [rcx + 1]
  1687 00001454 F20F59C1                        mulsd xmm0, xmm1
  1688 00001458 E82D0A0000                      call make_real
  1689 0000145D C9                              leave
  1690 0000145E C22000                          ret AND_KILL_FRAME(2)
  1691                                  
  1692                                  L_code_ptr_raw_bin_div_rr:
  1693 00001461 C8000000                        enter 0, 0
  1694 00001465 48837D1802                      cmp COUNT, 2
  1695 0000146A 0F85180B0000                    jne L_error_arg_count_2
  1696 00001470 488B5D20                        mov rbx, PARAM(0)
  1697                                          assert_real(rbx)
    53 00001474 803B13              <1>  cmp byte [%1], %2
    54 00001477 0F85AA0B0000        <1>  jne L_error_incorrect_type
  1698 0000147D 488B4D28                        mov rcx, PARAM(1)
  1699                                          assert_real(rcx)
    53 00001481 803913              <1>  cmp byte [%1], %2
    54 00001484 0F859D0B0000        <1>  jne L_error_incorrect_type
  1700 0000148A F20F104301                      movsd xmm0, qword [rbx + 1]
  1701 0000148F F20F104901                      movsd xmm1, qword [rcx + 1]
  1702 00001494 660FEFD2                        pxor xmm2, xmm2
  1703 00001498 660F2ECA                        ucomisd xmm1, xmm2
  1704 0000149C 0F84B60B0000                    je L_error_division_by_zero
  1705 000014A2 F20F5EC1                        divsd xmm0, xmm1
  1706 000014A6 E8DF090000                      call make_real
  1707 000014AB C9                              leave
  1708 000014AC C22000                          ret AND_KILL_FRAME(2)
  1709                                  
  1710                                  L_code_ptr_raw_bin_add_zz:
  1711 000014AF C8000000                	enter 0, 0
  1712 000014B3 48837D1802              	cmp COUNT, 2
  1713 000014B8 0F85CA0A0000            	jne L_error_arg_count_2
  1714 000014BE 4C8B4520                	mov r8, PARAM(0)
  1715                                  	assert_integer(r8)
    53 000014C2 41803811            <1>  cmp byte [%1], %2
    54 000014C6 0F855B0B0000        <1>  jne L_error_incorrect_type
  1716 000014CC 4C8B4D28                	mov r9, PARAM(1)
  1717                                  	assert_integer(r9)
    53 000014D0 41803911            <1>  cmp byte [%1], %2
    54 000014D4 0F854D0B0000        <1>  jne L_error_incorrect_type
  1718 000014DA 498B7801                	mov rdi, qword [r8 + 1]
  1719 000014DE 49037901                	add rdi, qword [r9 + 1]
  1720 000014E2 E8BB090000              	call make_integer
  1721 000014E7 C9                      	leave
  1722 000014E8 C22000                  	ret AND_KILL_FRAME(2)
  1723                                  
  1724                                  L_code_ptr_raw_bin_add_qq:
  1725 000014EB C8000000                        enter 0, 0
  1726 000014EF 48837D1802                      cmp COUNT, 2
  1727 000014F4 0F858E0A0000                    jne L_error_arg_count_2
  1728 000014FA 4C8B4520                        mov r8, PARAM(0)
  1729                                          assert_fraction(r8)
    53 000014FE 41803812            <1>  cmp byte [%1], %2
    54 00001502 0F851F0B0000        <1>  jne L_error_incorrect_type
  1730 00001508 4C8B4D28                        mov r9, PARAM(1)
  1731                                          assert_fraction(r9)
    53 0000150C 41803912            <1>  cmp byte [%1], %2
    54 00001510 0F85110B0000        <1>  jne L_error_incorrect_type
  1732 00001516 498B4001                        mov rax, qword [r8 + 1] ; num1
  1733 0000151A 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1734 0000151E 4899                            cqo
  1735 00001520 48F7EB                          imul rbx
  1736 00001523 4889C6                          mov rsi, rax
  1737 00001526 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1738 0000152A 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1739 0000152E 4899                            cqo
  1740 00001530 48F7EB                          imul rbx
  1741 00001533 4801C6                          add rsi, rax
  1742 00001536 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1743 0000153A 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1744 0000153E 4899                            cqo
  1745 00001540 48F7EB                          imul rbx
  1746 00001543 4889C7                          mov rdi, rax
  1747 00001546 E8DE010000                      call normalize_fraction
  1748 0000154B C9                              leave
  1749 0000154C C22000                          ret AND_KILL_FRAME(2)
  1750                                  
  1751                                  L_code_ptr_raw_bin_sub_zz:
  1752 0000154F C8000000                	enter 0, 0
  1753 00001553 48837D1802              	cmp COUNT, 2
  1754 00001558 0F852A0A0000            	jne L_error_arg_count_2
  1755 0000155E 4C8B4520                	mov r8, PARAM(0)
  1756                                  	assert_integer(r8)
    53 00001562 41803811            <1>  cmp byte [%1], %2
    54 00001566 0F85BB0A0000        <1>  jne L_error_incorrect_type
  1757 0000156C 4C8B4D28                	mov r9, PARAM(1)
  1758                                  	assert_integer(r9)
    53 00001570 41803911            <1>  cmp byte [%1], %2
    54 00001574 0F85AD0A0000        <1>  jne L_error_incorrect_type
  1759 0000157A 498B7801                	mov rdi, qword [r8 + 1]
  1760 0000157E 492B7901                	sub rdi, qword [r9 + 1]
  1761 00001582 E81B090000              	call make_integer
  1762 00001587 C9                      	leave
  1763 00001588 C22000                  	ret AND_KILL_FRAME(2)
  1764                                  
  1765                                  L_code_ptr_raw_bin_sub_qq:
  1766 0000158B C8000000                        enter 0, 0
  1767 0000158F 48837D1802                      cmp COUNT, 2
  1768 00001594 0F85EE090000                    jne L_error_arg_count_2
  1769 0000159A 4C8B4520                        mov r8, PARAM(0)
  1770                                          assert_fraction(r8)
    53 0000159E 41803812            <1>  cmp byte [%1], %2
    54 000015A2 0F857F0A0000        <1>  jne L_error_incorrect_type
  1771 000015A8 4C8B4D28                        mov r9, PARAM(1)
  1772                                          assert_fraction(r9)
    53 000015AC 41803912            <1>  cmp byte [%1], %2
    54 000015B0 0F85710A0000        <1>  jne L_error_incorrect_type
  1773 000015B6 498B4001                        mov rax, qword [r8 + 1] ; num1
  1774 000015BA 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1775 000015BE 4899                            cqo
  1776 000015C0 48F7EB                          imul rbx
  1777 000015C3 4889C6                          mov rsi, rax
  1778 000015C6 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1779 000015CA 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1780 000015CE 4899                            cqo
  1781 000015D0 48F7EB                          imul rbx
  1782 000015D3 4829C6                          sub rsi, rax
  1783 000015D6 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1784 000015DA 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1785 000015DE 4899                            cqo
  1786 000015E0 48F7EB                          imul rbx
  1787 000015E3 4889C7                          mov rdi, rax
  1788 000015E6 E83E010000                      call normalize_fraction
  1789 000015EB C9                              leave
  1790 000015EC C22000                          ret AND_KILL_FRAME(2)
  1791                                  
  1792                                  L_code_ptr_raw_bin_mul_zz:
  1793 000015EF C8000000                	enter 0, 0
  1794 000015F3 48837D1802              	cmp COUNT, 2
  1795 000015F8 0F858A090000            	jne L_error_arg_count_2
  1796 000015FE 4C8B4520                	mov r8, PARAM(0)
  1797                                  	assert_integer(r8)
    53 00001602 41803811            <1>  cmp byte [%1], %2
    54 00001606 0F851B0A0000        <1>  jne L_error_incorrect_type
  1798 0000160C 4C8B4D28                	mov r9, PARAM(1)
  1799                                  	assert_integer(r9)
    53 00001610 41803911            <1>  cmp byte [%1], %2
    54 00001614 0F850D0A0000        <1>  jne L_error_incorrect_type
  1800 0000161A 4899                    	cqo
  1801 0000161C 498B4001                	mov rax, qword [r8 + 1]
  1802 00001620 49F76101                	mul qword [r9 + 1]
  1803 00001624 4889C7                  	mov rdi, rax
  1804 00001627 E876080000              	call make_integer
  1805 0000162C C9                      	leave
  1806 0000162D C22000                  	ret AND_KILL_FRAME(2)
  1807                                  
  1808                                  L_code_ptr_raw_bin_mul_qq:
  1809 00001630 C8000000                        enter 0, 0
  1810 00001634 48837D1802                      cmp COUNT, 2
  1811 00001639 0F8549090000                    jne L_error_arg_count_2
  1812 0000163F 4C8B4520                        mov r8, PARAM(0)
  1813                                          assert_fraction(r8)
    53 00001643 41803812            <1>  cmp byte [%1], %2
    54 00001647 0F85DA090000        <1>  jne L_error_incorrect_type
  1814 0000164D 4C8B4D28                        mov r9, PARAM(1)
  1815                                          assert_fraction(r9)
    53 00001651 41803912            <1>  cmp byte [%1], %2
    54 00001655 0F85CC090000        <1>  jne L_error_incorrect_type
  1816 0000165B 498B4001                        mov rax, qword [r8 + 1] ; num1
  1817 0000165F 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1818 00001663 4899                            cqo
  1819 00001665 48F7EB                          imul rbx
  1820 00001668 4889C6                          mov rsi, rax
  1821 0000166B 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1822 0000166F 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1823 00001673 4899                            cqo
  1824 00001675 48F7EB                          imul rbx
  1825 00001678 4889C7                          mov rdi, rax
  1826 0000167B E8A9000000                      call normalize_fraction
  1827 00001680 C9                              leave
  1828 00001681 C22000                          ret AND_KILL_FRAME(2)
  1829                                          
  1830                                  L_code_ptr_raw_bin_div_zz:
  1831 00001684 C8000000                	enter 0, 0
  1832 00001688 48837D1802              	cmp COUNT, 2
  1833 0000168D 0F85F5080000            	jne L_error_arg_count_2
  1834 00001693 4C8B4520                	mov r8, PARAM(0)
  1835                                  	assert_integer(r8)
    53 00001697 41803811            <1>  cmp byte [%1], %2
    54 0000169B 0F8586090000        <1>  jne L_error_incorrect_type
  1836 000016A1 4C8B4D28                	mov r9, PARAM(1)
  1837                                  	assert_integer(r9)
    53 000016A5 41803911            <1>  cmp byte [%1], %2
    54 000016A9 0F8578090000        <1>  jne L_error_incorrect_type
  1838 000016AF 498B7901                	mov rdi, qword [r9 + 1]
  1839 000016B3 4883FF00                	cmp rdi, 0
  1840 000016B7 0F849B090000            	je L_error_division_by_zero
  1841 000016BD 498B7001                	mov rsi, qword [r8 + 1]
  1842 000016C1 E863000000              	call normalize_fraction
  1843 000016C6 C9                      	leave
  1844 000016C7 C22000                  	ret AND_KILL_FRAME(2)
  1845                                  
  1846                                  L_code_ptr_raw_bin_div_qq:
  1847 000016CA C8000000                        enter 0, 0
  1848 000016CE 48837D1802                      cmp COUNT, 2
  1849 000016D3 0F85AF080000                    jne L_error_arg_count_2
  1850 000016D9 4C8B4520                        mov r8, PARAM(0)
  1851                                          assert_fraction(r8)
    53 000016DD 41803812            <1>  cmp byte [%1], %2
    54 000016E1 0F8540090000        <1>  jne L_error_incorrect_type
  1852 000016E7 4C8B4D28                        mov r9, PARAM(1)
  1853                                          assert_fraction(r9)
    53 000016EB 41803912            <1>  cmp byte [%1], %2
    54 000016EF 0F8532090000        <1>  jne L_error_incorrect_type
  1854 000016F5 4983790100                      cmp qword [r9 + 1], 0
  1855 000016FA 0F8458090000                    je L_error_division_by_zero
  1856 00001700 498B4001                        mov rax, qword [r8 + 1] ; num1
  1857 00001704 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1858 00001708 4899                            cqo
  1859 0000170A 48F7EB                          imul rbx
  1860 0000170D 4889C6                          mov rsi, rax
  1861 00001710 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1862 00001714 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1863 00001718 4899                            cqo
  1864 0000171A 48F7EB                          imul rbx
  1865 0000171D 4889C7                          mov rdi, rax
  1866 00001720 E804000000                      call normalize_fraction
  1867 00001725 C9                              leave
  1868 00001726 C22000                          ret AND_KILL_FRAME(2)
  1869                                          
  1870                                  normalize_fraction:
  1871 00001729 56                              push rsi
  1872 0000172A 57                              push rdi
  1873 0000172B E859000000                      call gcd
  1874 00001730 4889C3                          mov rbx, rax
  1875 00001733 58                              pop rax
  1876 00001734 4899                            cqo
  1877 00001736 48F7FB                          idiv rbx
  1878 00001739 4989C0                          mov r8, rax
  1879 0000173C 58                              pop rax
  1880 0000173D 4899                            cqo
  1881 0000173F 48F7FB                          idiv rbx
  1882 00001742 4989C1                          mov r9, rax
  1883 00001745 4983F900                        cmp r9, 0
  1884 00001749 741C                            je .L_zero
  1885 0000174B 4983F801                        cmp r8, 1
  1886 0000174F 7421                            je .L_int
  1887 00001751 BF11000000                      mov rdi, (1 + 8 + 8)
  1888 00001756 E8CAEBFFFF                      call malloc
  1889 0000175B C60012                          mov byte [rax], T_fraction
  1890 0000175E 4C894801                        mov qword [rax + 1], r9
  1891 00001762 4C894009                        mov qword [rax + 1 + 8], r8
  1892 00001766 C3                              ret
  1893                                  .L_zero:
  1894 00001767 BF00000000                      mov rdi, 0
  1895 0000176C E831070000                      call make_integer
  1896 00001771 C3                              ret
  1897                                  .L_int:
  1898 00001772 4C89CF                          mov rdi, r9
  1899 00001775 E828070000                      call make_integer
  1900 0000177A C3                              ret
  1901                                  
  1902                                  iabs:
  1903 0000177B 4889F8                          mov rax, rdi
  1904 0000177E 4883F800                        cmp rax, 0
  1905 00001782 7C01                            jl .Lneg
  1906 00001784 C3                              ret
  1907                                  .Lneg:
  1908 00001785 48F7D8                          neg rax
  1909 00001788 C3                              ret
  1910                                  
  1911                                  gcd:
  1912 00001789 E8EDFFFFFF                      call iabs
  1913 0000178E 4889C3                          mov rbx, rax
  1914 00001791 4889F7                          mov rdi, rsi
  1915 00001794 E8E2FFFFFF                      call iabs
  1916 00001799 4883F800                        cmp rax, 0
  1917 0000179D 7502                            jne .L0
  1918 0000179F 4893                            xchg rax, rbx
  1919                                  .L0:
  1920 000017A1 4883FB00                        cmp rbx, 0
  1921 000017A5 740C                            je .L1
  1922 000017A7 4899                            cqo
  1923 000017A9 48F7F3                          div rbx
  1924 000017AC 4889D0                          mov rax, rdx
  1925 000017AF 4893                            xchg rax, rbx
  1926 000017B1 EBEE                            jmp .L0
  1927                                  .L1:
  1928 000017B3 C3                              ret
  1929                                  
  1930                                  L_code_ptr_error:
  1931 000017B4 C8000000                        enter 0, 0
  1932 000017B8 48837D1802                      cmp COUNT, 2
  1933 000017BD 0F85C5070000                    jne L_error_arg_count_2
  1934 000017C3 488B7520                        mov rsi, PARAM(0)
  1935                                          assert_interned_symbol(rsi)
    53 000017C7 803E41              <1>  cmp byte [%1], %2
    54 000017CA 0F8557080000        <1>  jne L_error_incorrect_type
  1936 000017D0 488B7528                        mov rsi, PARAM(1)
  1937                                          assert_string(rsi)
    53 000017D4 803E03              <1>  cmp byte [%1], %2
    54 000017D7 0F854A080000        <1>  jne L_error_incorrect_type
  1938 000017DD 48BF-                           mov rdi, fmt_scheme_error_part_1
  1938 000017DF [4504000000000000] 
  1939 000017E7 B800000000                      mov rax, 0
  1940                                          ENTER
    44 000017EC C8000000            <1>  enter 0, 0
    45 000017F0 4883E4F0            <1>  and rsp, ~15
  1941 000017F4 E8(00000000)                    call printf
  1942                                          LEAVE
    49 000017F9 C9                  <1>  leave
  1943 000017FA 488B7D20                        mov rdi, PARAM(0)
  1944 000017FE E8A3EDFFFF                      call print_sexpr
  1945 00001803 48BF-                           mov rdi, fmt_scheme_error_part_2
  1945 00001805 [5904000000000000] 
  1946 0000180D B800000000                      mov rax, 0
  1947                                          ENTER
    44 00001812 C8000000            <1>  enter 0, 0
    45 00001816 4883E4F0            <1>  and rsp, ~15
  1948 0000181A E8(00000000)                    call printf
  1949                                          LEAVE
    49 0000181F C9                  <1>  leave
  1950 00001820 488B4528                        mov rax, PARAM(1)       ; sob_string
  1951 00001824 BE01000000                      mov rsi, 1              ; size = 1 byte
  1952 00001829 488B5001                        mov rdx, qword [rax + 1] ; length
  1953 0000182D 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1954 00001831 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1955                                  	ENTER
    44 00001839 C8000000            <1>  enter 0, 0
    45 0000183D 4883E4F0            <1>  and rsp, ~15
  1956 00001841 E8(00000000)                    call fwrite
  1957                                  	LEAVE
    49 00001846 C9                  <1>  leave
  1958 00001847 48BF-                           mov rdi, fmt_scheme_error_part_3
  1958 00001849 [9B04000000000000] 
  1959 00001851 B800000000                      mov rax, 0
  1960                                          ENTER
    44 00001856 C8000000            <1>  enter 0, 0
    45 0000185A 4883E4F0            <1>  and rsp, ~15
  1961 0000185E E8(00000000)                    call printf
  1962                                          LEAVE
    49 00001863 C9                  <1>  leave
  1963 00001864 48C7C0F7FFFFFF                  mov rax, -9
  1964 0000186B E8(00000000)                    call exit
  1965                                  
  1966                                  L_code_ptr_raw_less_than_rr:
  1967 00001870 C8000000                        enter 0, 0
  1968 00001874 48837D1802                      cmp COUNT, 2
  1969 00001879 0F8509070000                    jne L_error_arg_count_2
  1970 0000187F 488B7520                        mov rsi, PARAM(0)
  1971                                          assert_real(rsi)
    53 00001883 803E13              <1>  cmp byte [%1], %2
    54 00001886 0F859B070000        <1>  jne L_error_incorrect_type
  1972 0000188C 488B7D28                        mov rdi, PARAM(1)
  1973                                          assert_real(rdi)
    53 00001890 803F13              <1>  cmp byte [%1], %2
    54 00001893 0F858E070000        <1>  jne L_error_incorrect_type
  1974 00001899 F20F104601                      movsd xmm0, qword [rsi + 1]
  1975 0000189E F20F104F01                      movsd xmm1, qword [rdi + 1]
  1976 000018A3 660F2FC1                        comisd xmm0, xmm1
  1977 000018A7 730C                            jae .L_false
  1978 000018A9 48B8-                           mov rax, sob_boolean_true
  1978 000018AB [0300000000000000] 
  1979 000018B3 EB0A                            jmp .L_exit
  1980                                  .L_false:
  1981 000018B5 48B8-                           mov rax, sob_boolean_false
  1981 000018B7 [0200000000000000] 
  1982                                  .L_exit:
  1983 000018BF C9                              leave
  1984 000018C0 C22000                          ret AND_KILL_FRAME(2)
  1985                                          
  1986                                  L_code_ptr_raw_less_than_zz:
  1987 000018C3 C8000000                	enter 0, 0
  1988 000018C7 48837D1802              	cmp COUNT, 2
  1989 000018CC 0F85B6060000            	jne L_error_arg_count_2
  1990 000018D2 4C8B4520                	mov r8, PARAM(0)
  1991                                  	assert_integer(r8)
    53 000018D6 41803811            <1>  cmp byte [%1], %2
    54 000018DA 0F8547070000        <1>  jne L_error_incorrect_type
  1992 000018E0 4C8B4D28                	mov r9, PARAM(1)
  1993                                  	assert_integer(r9)
    53 000018E4 41803911            <1>  cmp byte [%1], %2
    54 000018E8 0F8539070000        <1>  jne L_error_incorrect_type
  1994 000018EE 498B7801                	mov rdi, qword [r8 + 1]
  1995 000018F2 493B7901                	cmp rdi, qword [r9 + 1]
  1996 000018F6 7D0C                    	jge .L_false
  1997 000018F8 48B8-                   	mov rax, sob_boolean_true
  1997 000018FA [0300000000000000] 
  1998 00001902 EB0A                    	jmp .L_exit
  1999                                  .L_false:
  2000 00001904 48B8-                   	mov rax, sob_boolean_false
  2000 00001906 [0200000000000000] 
  2001                                  .L_exit:
  2002 0000190E C9                      	leave
  2003 0000190F C22000                  	ret AND_KILL_FRAME(2)
  2004                                  
  2005                                  L_code_ptr_raw_less_than_qq:
  2006 00001912 C8000000                        enter 0, 0
  2007 00001916 48837D1802                      cmp COUNT, 2
  2008 0000191B 0F8567060000                    jne L_error_arg_count_2
  2009 00001921 488B7520                        mov rsi, PARAM(0)
  2010                                          assert_fraction(rsi)
    53 00001925 803E12              <1>  cmp byte [%1], %2
    54 00001928 0F85F9060000        <1>  jne L_error_incorrect_type
  2011 0000192E 488B7D28                        mov rdi, PARAM(1)
  2012                                          assert_fraction(rdi)
    53 00001932 803F12              <1>  cmp byte [%1], %2
    54 00001935 0F85EC060000        <1>  jne L_error_incorrect_type
  2013 0000193B 488B4601                        mov rax, qword [rsi + 1] ; num1
  2014 0000193F 4899                            cqo
  2015 00001941 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2016 00001945 4889C1                          mov rcx, rax
  2017 00001948 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  2018 0000194C 4899                            cqo
  2019 0000194E 48F76F01                        imul qword [rdi + 1]          ; num2
  2020 00001952 4829C1                          sub rcx, rax
  2021 00001955 7D0C                            jge .L_false
  2022 00001957 48B8-                           mov rax, sob_boolean_true
  2022 00001959 [0300000000000000] 
  2023 00001961 EB0A                            jmp .L_exit
  2024                                  .L_false:
  2025 00001963 48B8-                           mov rax, sob_boolean_false
  2025 00001965 [0200000000000000] 
  2026                                  .L_exit:
  2027 0000196D C9                              leave
  2028 0000196E C22000                          ret AND_KILL_FRAME(2)
  2029                                  
  2030                                  L_code_ptr_raw_equal_rr:
  2031 00001971 C8000000                        enter 0, 0
  2032 00001975 48837D1802                      cmp COUNT, 2
  2033 0000197A 0F8508060000                    jne L_error_arg_count_2
  2034 00001980 488B7520                        mov rsi, PARAM(0)
  2035                                          assert_real(rsi)
    53 00001984 803E13              <1>  cmp byte [%1], %2
    54 00001987 0F859A060000        <1>  jne L_error_incorrect_type
  2036 0000198D 488B7D28                        mov rdi, PARAM(1)
  2037                                          assert_real(rdi)
    53 00001991 803F13              <1>  cmp byte [%1], %2
    54 00001994 0F858D060000        <1>  jne L_error_incorrect_type
  2038 0000199A F20F104601                      movsd xmm0, qword [rsi + 1]
  2039 0000199F F20F104F01                      movsd xmm1, qword [rdi + 1]
  2040 000019A4 660F2FC1                        comisd xmm0, xmm1
  2041 000019A8 750C                            jne .L_false
  2042 000019AA 48B8-                           mov rax, sob_boolean_true
  2042 000019AC [0300000000000000] 
  2043 000019B4 EB0A                            jmp .L_exit
  2044                                  .L_false:
  2045 000019B6 48B8-                           mov rax, sob_boolean_false
  2045 000019B8 [0200000000000000] 
  2046                                  .L_exit:
  2047 000019C0 C9                              leave
  2048 000019C1 C22000                          ret AND_KILL_FRAME(2)
  2049                                          
  2050                                  L_code_ptr_raw_equal_zz:
  2051 000019C4 C8000000                	enter 0, 0
  2052 000019C8 48837D1802              	cmp COUNT, 2
  2053 000019CD 0F85B5050000            	jne L_error_arg_count_2
  2054 000019D3 4C8B4520                	mov r8, PARAM(0)
  2055                                  	assert_integer(r8)
    53 000019D7 41803811            <1>  cmp byte [%1], %2
    54 000019DB 0F8546060000        <1>  jne L_error_incorrect_type
  2056 000019E1 4C8B4D28                	mov r9, PARAM(1)
  2057                                  	assert_integer(r9)
    53 000019E5 41803911            <1>  cmp byte [%1], %2
    54 000019E9 0F8538060000        <1>  jne L_error_incorrect_type
  2058 000019EF 498B7801                	mov rdi, qword [r8 + 1]
  2059 000019F3 493B7901                	cmp rdi, qword [r9 + 1]
  2060 000019F7 750C                    	jne .L_false
  2061 000019F9 48B8-                   	mov rax, sob_boolean_true
  2061 000019FB [0300000000000000] 
  2062 00001A03 EB0A                    	jmp .L_exit
  2063                                  .L_false:
  2064 00001A05 48B8-                   	mov rax, sob_boolean_false
  2064 00001A07 [0200000000000000] 
  2065                                  .L_exit:
  2066 00001A0F C9                      	leave
  2067 00001A10 C22000                  	ret AND_KILL_FRAME(2)
  2068                                  
  2069                                  L_code_ptr_raw_equal_qq:
  2070 00001A13 C8000000                        enter 0, 0
  2071 00001A17 48837D1802                      cmp COUNT, 2
  2072 00001A1C 0F8566050000                    jne L_error_arg_count_2
  2073 00001A22 488B7520                        mov rsi, PARAM(0)
  2074                                          assert_fraction(rsi)
    53 00001A26 803E12              <1>  cmp byte [%1], %2
    54 00001A29 0F85F8050000        <1>  jne L_error_incorrect_type
  2075 00001A2F 488B7D28                        mov rdi, PARAM(1)
  2076                                          assert_fraction(rdi)
    53 00001A33 803F12              <1>  cmp byte [%1], %2
    54 00001A36 0F85EB050000        <1>  jne L_error_incorrect_type
  2077 00001A3C 488B4601                        mov rax, qword [rsi + 1] ; num1
  2078 00001A40 4899                            cqo
  2079 00001A42 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2080 00001A46 4889C1                          mov rcx, rax
  2081 00001A49 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  2082 00001A4D 4899                            cqo
  2083 00001A4F 48F76F01                        imul qword [rdi + 1]          ; num2
  2084 00001A53 4829C1                          sub rcx, rax
  2085 00001A56 750C                            jne .L_false
  2086 00001A58 48B8-                           mov rax, sob_boolean_true
  2086 00001A5A [0300000000000000] 
  2087 00001A62 EB0A                            jmp .L_exit
  2088                                  .L_false:
  2089 00001A64 48B8-                           mov rax, sob_boolean_false
  2089 00001A66 [0200000000000000] 
  2090                                  .L_exit:
  2091 00001A6E C9                              leave
  2092 00001A6F C22000                          ret AND_KILL_FRAME(2)
  2093                                  
  2094                                  L_code_ptr_quotient:
  2095 00001A72 C8000000                        enter 0, 0
  2096 00001A76 48837D1802                      cmp COUNT, 2
  2097 00001A7B 0F8507050000                    jne L_error_arg_count_2
  2098 00001A81 488B7520                        mov rsi, PARAM(0)
  2099                                          assert_integer(rsi)
    53 00001A85 803E11              <1>  cmp byte [%1], %2
    54 00001A88 0F8599050000        <1>  jne L_error_incorrect_type
  2100 00001A8E 488B7D28                        mov rdi, PARAM(1)
  2101                                          assert_integer(rdi)
    53 00001A92 803F11              <1>  cmp byte [%1], %2
    54 00001A95 0F858C050000        <1>  jne L_error_incorrect_type
  2102 00001A9B 488B4601                        mov rax, qword [rsi + 1]
  2103 00001A9F 488B5F01                        mov rbx, qword [rdi + 1]
  2104 00001AA3 4883FB00                        cmp rbx, 0
  2105 00001AA7 0F84AB050000                    je L_error_division_by_zero
  2106 00001AAD 4899                            cqo
  2107 00001AAF 48F7FB                          idiv rbx
  2108 00001AB2 4889C7                          mov rdi, rax
  2109 00001AB5 E8E8030000                      call make_integer
  2110 00001ABA C9                              leave
  2111 00001ABB C22000                          ret AND_KILL_FRAME(2)
  2112                                          
  2113                                  L_code_ptr_remainder:
  2114 00001ABE C8000000                        enter 0, 0
  2115 00001AC2 48837D1802                      cmp COUNT, 2
  2116 00001AC7 0F85BB040000                    jne L_error_arg_count_2
  2117 00001ACD 488B7520                        mov rsi, PARAM(0)
  2118                                          assert_integer(rsi)
    53 00001AD1 803E11              <1>  cmp byte [%1], %2
    54 00001AD4 0F854D050000        <1>  jne L_error_incorrect_type
  2119 00001ADA 488B7D28                        mov rdi, PARAM(1)
  2120                                          assert_integer(rdi)
    53 00001ADE 803F11              <1>  cmp byte [%1], %2
    54 00001AE1 0F8540050000        <1>  jne L_error_incorrect_type
  2121 00001AE7 488B4601                        mov rax, qword [rsi + 1]
  2122 00001AEB 488B5F01                        mov rbx, qword [rdi + 1]
  2123 00001AEF 4883FB00                        cmp rbx, 0
  2124 00001AF3 0F845F050000                    je L_error_division_by_zero
  2125 00001AF9 4899                            cqo
  2126 00001AFB 48F7FB                          idiv rbx
  2127 00001AFE 4889D7                          mov rdi, rdx
  2128 00001B01 E89C030000                      call make_integer
  2129 00001B06 C9                              leave
  2130 00001B07 C22000                          ret AND_KILL_FRAME(2)
  2131                                  
  2132                                  L_code_ptr_set_car:
  2133 00001B0A C8000000                        enter 0, 0
  2134 00001B0E 48837D1802                      cmp COUNT, 2
  2135 00001B13 0F856F040000                    jne L_error_arg_count_2
  2136 00001B19 488B4520                        mov rax, PARAM(0)
  2137                                          assert_pair(rax)
    53 00001B1D 803821              <1>  cmp byte [%1], %2
    54 00001B20 0F8501050000        <1>  jne L_error_incorrect_type
  2138 00001B26 488B5D28                        mov rbx, PARAM(1)
  2139 00001B2A 48895801                        mov SOB_PAIR_CAR(rax), rbx
  2140 00001B2E 48B8-                           mov rax, sob_void
  2140 00001B30 [0000000000000000] 
  2141 00001B38 C9                              leave
  2142 00001B39 C22000                          ret AND_KILL_FRAME(2)
  2143                                  
  2144                                  L_code_ptr_set_cdr:
  2145 00001B3C C8000000                        enter 0, 0
  2146 00001B40 48837D1802                      cmp COUNT, 2
  2147 00001B45 0F853D040000                    jne L_error_arg_count_2
  2148 00001B4B 488B4520                        mov rax, PARAM(0)
  2149                                          assert_pair(rax)
    53 00001B4F 803821              <1>  cmp byte [%1], %2
    54 00001B52 0F85CF040000        <1>  jne L_error_incorrect_type
  2150 00001B58 488B5D28                        mov rbx, PARAM(1)
  2151 00001B5C 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2152 00001B60 48B8-                           mov rax, sob_void
  2152 00001B62 [0000000000000000] 
  2153 00001B6A C9                              leave
  2154 00001B6B C22000                          ret AND_KILL_FRAME(2)
  2155                                  
  2156                                  L_code_ptr_string_ref:
  2157 00001B6E C8000000                        enter 0, 0
  2158 00001B72 48837D1802                      cmp COUNT, 2
  2159 00001B77 0F850B040000                    jne L_error_arg_count_2
  2160 00001B7D 488B7D20                        mov rdi, PARAM(0)
  2161                                          assert_string(rdi)
    53 00001B81 803F03              <1>  cmp byte [%1], %2
    54 00001B84 0F859D040000        <1>  jne L_error_incorrect_type
  2162 00001B8A 488B7528                        mov rsi, PARAM(1)
  2163                                          assert_integer(rsi)
    53 00001B8E 803E11              <1>  cmp byte [%1], %2
    54 00001B91 0F8590040000        <1>  jne L_error_incorrect_type
  2164 00001B97 488B5701                        mov rdx, qword [rdi + 1]
  2165 00001B9B 488B4E01                        mov rcx, qword [rsi + 1]
  2166 00001B9F 4839D1                          cmp rcx, rdx
  2167 00001BA2 0F8D14030000                    jge L_error_integer_range
  2168 00001BA8 4883F900                        cmp rcx, 0
  2169 00001BAC 0F8C0A030000                    jl L_error_integer_range
  2170 00001BB2 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  2171 00001BB6 BF02000000                      mov rdi, 2
  2172 00001BBB E865E7FFFF                      call malloc
  2173 00001BC0 C60002                          mov byte [rax], T_char
  2174 00001BC3 885801                          mov byte [rax + 1], bl
  2175 00001BC6 C9                              leave
  2176 00001BC7 C22000                          ret AND_KILL_FRAME(2)
  2177                                  
  2178                                  L_code_ptr_vector_ref:
  2179 00001BCA C8000000                        enter 0, 0
  2180 00001BCE 48837D1802                      cmp COUNT, 2
  2181 00001BD3 0F85AF030000                    jne L_error_arg_count_2
  2182 00001BD9 488B7D20                        mov rdi, PARAM(0)
  2183                                          assert_vector(rdi)
    53 00001BDD 803F22              <1>  cmp byte [%1], %2
    54 00001BE0 0F8541040000        <1>  jne L_error_incorrect_type
  2184 00001BE6 488B7528                        mov rsi, PARAM(1)
  2185                                          assert_integer(rsi)
    53 00001BEA 803E11              <1>  cmp byte [%1], %2
    54 00001BED 0F8534040000        <1>  jne L_error_incorrect_type
  2186 00001BF3 488B5701                        mov rdx, qword [rdi + 1]
  2187 00001BF7 488B4E01                        mov rcx, qword [rsi + 1]
  2188 00001BFB 4839D1                          cmp rcx, rdx
  2189 00001BFE 0F8DB8020000                    jge L_error_integer_range
  2190 00001C04 4883F900                        cmp rcx, 0
  2191 00001C08 0F8CAE020000                    jl L_error_integer_range
  2192 00001C0E 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2193 00001C13 C9                              leave
  2194 00001C14 C22000                          ret AND_KILL_FRAME(2)
  2195                                  
  2196                                  L_code_ptr_vector_set:
  2197 00001C17 C8000000                        enter 0, 0
  2198 00001C1B 48837D1803                      cmp COUNT, 3
  2199 00001C20 0F85CC030000                    jne L_error_arg_count_3
  2200 00001C26 488B7D20                        mov rdi, PARAM(0)
  2201                                          assert_vector(rdi)
    53 00001C2A 803F22              <1>  cmp byte [%1], %2
    54 00001C2D 0F85F4030000        <1>  jne L_error_incorrect_type
  2202 00001C33 488B7528                        mov rsi, PARAM(1)
  2203                                          assert_integer(rsi)
    53 00001C37 803E11              <1>  cmp byte [%1], %2
    54 00001C3A 0F85E7030000        <1>  jne L_error_incorrect_type
  2204 00001C40 488B5701                        mov rdx, qword [rdi + 1]
  2205 00001C44 488B4E01                        mov rcx, qword [rsi + 1]
  2206 00001C48 4839D1                          cmp rcx, rdx
  2207 00001C4B 0F8D6B020000                    jge L_error_integer_range
  2208 00001C51 4883F900                        cmp rcx, 0
  2209 00001C55 0F8C61020000                    jl L_error_integer_range
  2210 00001C5B 488B4530                        mov rax, PARAM(2)
  2211 00001C5F 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2212 00001C64 48B8-                           mov rax, sob_void
  2212 00001C66 [0000000000000000] 
  2213 00001C6E C9                              leave
  2214 00001C6F C22800                          ret AND_KILL_FRAME(3)
  2215                                  
  2216                                  L_code_ptr_string_set:
  2217 00001C72 C8000000                        enter 0, 0
  2218 00001C76 48837D1803                      cmp COUNT, 3
  2219 00001C7B 0F8571030000                    jne L_error_arg_count_3
  2220 00001C81 488B7D20                        mov rdi, PARAM(0)
  2221                                          assert_string(rdi)
    53 00001C85 803F03              <1>  cmp byte [%1], %2
    54 00001C88 0F8599030000        <1>  jne L_error_incorrect_type
  2222 00001C8E 488B7528                        mov rsi, PARAM(1)
  2223                                          assert_integer(rsi)
    53 00001C92 803E11              <1>  cmp byte [%1], %2
    54 00001C95 0F858C030000        <1>  jne L_error_incorrect_type
  2224 00001C9B 488B5701                        mov rdx, qword [rdi + 1]
  2225 00001C9F 488B4E01                        mov rcx, qword [rsi + 1]
  2226 00001CA3 4839D1                          cmp rcx, rdx
  2227 00001CA6 0F8D10020000                    jge L_error_integer_range
  2228 00001CAC 4883F900                        cmp rcx, 0
  2229 00001CB0 0F8C06020000                    jl L_error_integer_range
  2230 00001CB6 488B4530                        mov rax, PARAM(2)
  2231                                          assert_char(rax)
    53 00001CBA 803802              <1>  cmp byte [%1], %2
    54 00001CBD 0F8564030000        <1>  jne L_error_incorrect_type
  2232 00001CC3 8A4001                          mov al, byte [rax + 1]
  2233 00001CC6 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2234 00001CCA 48B8-                           mov rax, sob_void
  2234 00001CCC [0000000000000000] 
  2235 00001CD4 C9                              leave
  2236 00001CD5 C22800                          ret AND_KILL_FRAME(3)
  2237                                  
  2238                                  L_code_ptr_make_vector:
  2239 00001CD8 C8000000                        enter 0, 0
  2240 00001CDC 48837D1802                      cmp COUNT, 2
  2241 00001CE1 0F85A1020000                    jne L_error_arg_count_2
  2242 00001CE7 488B4D20                        mov rcx, PARAM(0)
  2243                                          assert_integer(rcx)
    53 00001CEB 803911              <1>  cmp byte [%1], %2
    54 00001CEE 0F8533030000        <1>  jne L_error_incorrect_type
  2244 00001CF4 488B4901                        mov rcx, qword [rcx + 1]
  2245 00001CF8 4883F900                        cmp rcx, 0
  2246 00001CFC 0F8CBA010000                    jl L_error_integer_range
  2247 00001D02 488B5528                        mov rdx, PARAM(1)
  2248 00001D06 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2249 00001D0E E812E6FFFF                      call malloc
  2250 00001D13 C60022                          mov byte [rax], T_vector
  2251 00001D16 48894801                        mov qword [rax + 1], rcx
  2252 00001D1A 41B800000000                    mov r8, 0
  2253                                  .L0:
  2254 00001D20 4939C8                          cmp r8, rcx
  2255 00001D23 740A                            je .L1
  2256 00001D25 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2257 00001D2A 49FFC0                          inc r8
  2258 00001D2D EBF1                            jmp .L0
  2259                                  .L1:
  2260 00001D2F C9                              leave
  2261 00001D30 C22000                          ret AND_KILL_FRAME(2)
  2262                                          
  2263                                  L_code_ptr_make_string:
  2264 00001D33 C8000000                        enter 0, 0
  2265 00001D37 48837D1802                      cmp COUNT, 2
  2266 00001D3C 0F8546020000                    jne L_error_arg_count_2
  2267 00001D42 488B4D20                        mov rcx, PARAM(0)
  2268                                          assert_integer(rcx)
    53 00001D46 803911              <1>  cmp byte [%1], %2
    54 00001D49 0F85D8020000        <1>  jne L_error_incorrect_type
  2269 00001D4F 488B4901                        mov rcx, qword [rcx + 1]
  2270 00001D53 4883F900                        cmp rcx, 0
  2271 00001D57 0F8C5F010000                    jl L_error_integer_range
  2272 00001D5D 488B5528                        mov rdx, PARAM(1)
  2273                                          assert_char(rdx)
    53 00001D61 803A02              <1>  cmp byte [%1], %2
    54 00001D64 0F85BD020000        <1>  jne L_error_incorrect_type
  2274 00001D6A 8A5201                          mov dl, byte [rdx + 1]
  2275 00001D6D 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2276 00001D71 E8AFE5FFFF                      call malloc
  2277 00001D76 C60003                          mov byte [rax], T_string
  2278 00001D79 48894801                        mov qword [rax + 1], rcx
  2279 00001D7D 41B800000000                    mov r8, 0
  2280                                  .L0:
  2281 00001D83 4939C8                          cmp r8, rcx
  2282 00001D86 740A                            je .L1
  2283 00001D88 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2284 00001D8D 49FFC0                          inc r8
  2285 00001D90 EBF1                            jmp .L0
  2286                                  .L1:
  2287 00001D92 C9                              leave
  2288 00001D93 C22000                          ret AND_KILL_FRAME(2)
  2289                                  
  2290                                  L_code_ptr_numerator:
  2291 00001D96 C8000000                        enter 0, 0
  2292 00001D9A 48837D1801                      cmp COUNT, 1
  2293 00001D9F 0F85AE010000                    jne L_error_arg_count_1
  2294 00001DA5 488B4520                        mov rax, PARAM(0)
  2295                                          assert_fraction(rax)
    53 00001DA9 803812              <1>  cmp byte [%1], %2
    54 00001DAC 0F8575020000        <1>  jne L_error_incorrect_type
  2296 00001DB2 488B7801                        mov rdi, qword [rax + 1]
  2297 00001DB6 E8E7000000                      call make_integer
  2298 00001DBB C9                              leave
  2299 00001DBC C21800                          ret AND_KILL_FRAME(1)
  2300                                          
  2301                                  L_code_ptr_denominator:
  2302 00001DBF C8000000                        enter 0, 0
  2303 00001DC3 48837D1801                      cmp COUNT, 1
  2304 00001DC8 0F8585010000                    jne L_error_arg_count_1
  2305 00001DCE 488B4520                        mov rax, PARAM(0)
  2306                                          assert_fraction(rax)
    53 00001DD2 803812              <1>  cmp byte [%1], %2
    54 00001DD5 0F854C020000        <1>  jne L_error_incorrect_type
  2307 00001DDB 488B7809                        mov rdi, qword [rax + 1 + 8]
  2308 00001DDF E8BE000000                      call make_integer
  2309 00001DE4 C9                              leave
  2310 00001DE5 C21800                          ret AND_KILL_FRAME(1)
  2311                                  
  2312                                  L_code_ptr_is_eq:
  2313 00001DE8 C8000000                	enter 0, 0
  2314 00001DEC 48837D1802              	cmp COUNT, 2
  2315 00001DF1 0F8591010000            	jne L_error_arg_count_2
  2316 00001DF7 488B7D20                	mov rdi, PARAM(0)
  2317 00001DFB 488B7528                	mov rsi, PARAM(1)
  2318 00001DFF 4839F7                  	cmp rdi, rsi
  2319 00001E02 746C                    	je .L_eq_true
  2320 00001E04 8A17                    	mov dl, byte [rdi]
  2321 00001E06 3A16                    	cmp dl, byte [rsi]
  2322 00001E08 7572                    	jne .L_eq_false
  2323 00001E0A 80FA02                  	cmp dl, T_char
  2324 00001E0D 7459                    	je .L_char
  2325 00001E0F 80FA41                  	cmp dl, T_interned_symbol
  2326 00001E12 7440                    	je .L_interned_symbol
  2327 00001E14 80FA42                          cmp dl, T_uninterned_symbol
  2328 00001E17 7443                            je .L_uninterned_symbol
  2329 00001E19 80FA13                  	cmp dl, T_real
  2330 00001E1C 742E                    	je .L_real
  2331 00001E1E 80FA12                  	cmp dl, T_fraction
  2332 00001E21 7413                    	je .L_fraction
  2333 00001E23 80FA11                          cmp dl, T_integer
  2334 00001E26 7402                            je .L_integer
  2335 00001E28 EB52                    	jmp .L_eq_false
  2336                                  .L_integer:
  2337 00001E2A 488B4601                        mov rax, qword [rsi + 1]
  2338 00001E2E 483B4701                        cmp rax, qword [rdi + 1]
  2339 00001E32 7548                            jne .L_eq_false
  2340 00001E34 EB3A                            jmp .L_eq_true
  2341                                  .L_fraction:
  2342 00001E36 488B4601                	mov rax, qword [rsi + 1]
  2343 00001E3A 483B4701                	cmp rax, qword [rdi + 1]
  2344 00001E3E 753C                    	jne .L_eq_false
  2345 00001E40 488B4609                	mov rax, qword [rsi + 1 + 8]
  2346 00001E44 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2347 00001E48 7532                    	jne .L_eq_false
  2348 00001E4A EB24                    	jmp .L_eq_true
  2349                                  .L_real:
  2350 00001E4C 488B4601                	mov rax, qword [rsi + 1]
  2351 00001E50 483B4701                	cmp rax, qword [rdi + 1]
  2352                                  .L_interned_symbol:
  2353                                  	; never reached, because interned_symbols are static!
  2354                                  	; but I'm keeping it in case, I'll ever change
  2355                                  	; the implementation
  2356 00001E54 488B4601                	mov rax, qword [rsi + 1]
  2357 00001E58 483B4701                	cmp rax, qword [rdi + 1]
  2358                                  .L_uninterned_symbol:
  2359 00001E5C 4C8B4701                        mov r8, qword [rdi + 1]
  2360 00001E60 4C3B4601                        cmp r8, qword [rsi + 1]
  2361 00001E64 7516                            jne .L_eq_false
  2362 00001E66 EB08                            jmp .L_eq_true
  2363                                  .L_char:
  2364 00001E68 8A5E01                  	mov bl, byte [rsi + 1]
  2365 00001E6B 3A5F01                  	cmp bl, byte [rdi + 1]
  2366 00001E6E 750C                    	jne .L_eq_false
  2367                                  .L_eq_true:
  2368 00001E70 48B8-                   	mov rax, sob_boolean_true
  2368 00001E72 [0300000000000000] 
  2369 00001E7A EB0A                    	jmp .L_eq_exit
  2370                                  .L_eq_false:
  2371 00001E7C 48B8-                   	mov rax, sob_boolean_false
  2371 00001E7E [0200000000000000] 
  2372                                  .L_eq_exit:
  2373 00001E86 C9                      	leave
  2374 00001E87 C22000                  	ret AND_KILL_FRAME(2)
  2375                                  
  2376                                  make_real:
  2377 00001E8A C8000000                        enter 0, 0
  2378 00001E8E BF09000000                      mov rdi, (1 + 8)
  2379 00001E93 E88DE4FFFF                      call malloc
  2380 00001E98 C60013                          mov byte [rax], T_real
  2381 00001E9B F20F114001                      movsd qword [rax + 1], xmm0
  2382 00001EA0 C9                              leave 
  2383 00001EA1 C3                              ret
  2384                                          
  2385                                  make_integer:
  2386 00001EA2 C8000000                        enter 0, 0
  2387 00001EA6 4889FE                          mov rsi, rdi
  2388 00001EA9 BF09000000                      mov rdi, (1 + 8)
  2389 00001EAE E872E4FFFF                      call malloc
  2390 00001EB3 C60011                          mov byte [rax], T_integer
  2391 00001EB6 48897001                        mov qword [rax + 1], rsi
  2392 00001EBA C9                              leave
  2393 00001EBB C3                              ret
  2394                                          
  2395                                  L_error_integer_range:
  2396 00001EBC 488B3C25[00000000]              mov rdi, qword [stderr]
  2397 00001EC4 48BE-                           mov rsi, fmt_integer_range
  2397 00001EC6 [1204000000000000] 
  2398 00001ECE B800000000                      mov rax, 0
  2399                                          ENTER
    44 00001ED3 C8000000            <1>  enter 0, 0
    45 00001ED7 4883E4F0            <1>  and rsp, ~15
  2400 00001EDB E8(00000000)                    call fprintf
  2401                                          LEAVE
    49 00001EE0 C9                  <1>  leave
  2402 00001EE1 48C7C0FBFFFFFF                  mov rax, -5
  2403 00001EE8 E8(00000000)                    call exit
  2404                                  
  2405                                  L_error_arg_negative:
  2406 00001EED 488B3C25[00000000]              mov rdi, qword [stderr]
  2407 00001EF5 48BE-                           mov rsi, fmt_arg_negative
  2407 00001EF7 [EA02000000000000] 
  2408 00001EFF B800000000                      mov rax, 0
  2409                                          ENTER
    44 00001F04 C8000000            <1>  enter 0, 0
    45 00001F08 4883E4F0            <1>  and rsp, ~15
  2410 00001F0C E8(00000000)                    call fprintf
  2411                                          LEAVE
    49 00001F11 C9                  <1>  leave
  2412 00001F12 48C7C0FDFFFFFF                  mov rax, -3
  2413 00001F19 E8(00000000)                    call exit
  2414                                  
  2415                                  L_error_arg_count_0:
  2416 00001F1E 488B3C25[00000000]              mov rdi, qword [stderr]
  2417 00001F26 48BE-                           mov rsi, fmt_arg_count_0
  2417 00001F28 [1003000000000000] 
  2418 00001F30 488B5518                        mov rdx, COUNT
  2419 00001F34 B800000000                      mov rax, 0
  2420                                          ENTER
    44 00001F39 C8000000            <1>  enter 0, 0
    45 00001F3D 4883E4F0            <1>  and rsp, ~15
  2421 00001F41 E8(00000000)                    call fprintf
  2422                                          LEAVE
    49 00001F46 C9                  <1>  leave
  2423 00001F47 48C7C0FDFFFFFF                  mov rax, -3
  2424 00001F4E E8(00000000)                    call exit
  2425                                  
  2426                                  L_error_arg_count_1:
  2427 00001F53 488B3C25[00000000]              mov rdi, qword [stderr]
  2428 00001F5B 48BE-                           mov rsi, fmt_arg_count_1
  2428 00001F5D [3803000000000000] 
  2429 00001F65 488B5518                        mov rdx, COUNT
  2430 00001F69 B800000000                      mov rax, 0
  2431                                          ENTER
    44 00001F6E C8000000            <1>  enter 0, 0
    45 00001F72 4883E4F0            <1>  and rsp, ~15
  2432 00001F76 E8(00000000)                    call fprintf
  2433                                          LEAVE
    49 00001F7B C9                  <1>  leave
  2434 00001F7C 48C7C0FDFFFFFF                  mov rax, -3
  2435 00001F83 E8(00000000)                    call exit
  2436                                  
  2437                                  L_error_arg_count_2:
  2438 00001F88 488B3C25[00000000]              mov rdi, qword [stderr]
  2439 00001F90 48BE-                           mov rsi, fmt_arg_count_2
  2439 00001F92 [9E03000000000000] 
  2440 00001F9A 488B5518                        mov rdx, COUNT
  2441 00001F9E B800000000                      mov rax, 0
  2442                                          ENTER
    44 00001FA3 C8000000            <1>  enter 0, 0
    45 00001FA7 4883E4F0            <1>  and rsp, ~15
  2443 00001FAB E8(00000000)                    call fprintf
  2444                                          LEAVE
    49 00001FB0 C9                  <1>  leave
  2445 00001FB1 48C7C0FDFFFFFF                  mov rax, -3
  2446 00001FB8 E8(00000000)                    call exit
  2447                                  
  2448                                  L_error_arg_count_12:
  2449 00001FBD 488B3C25[00000000]              mov rdi, qword [stderr]
  2450 00001FC5 48BE-                           mov rsi, fmt_arg_count_12
  2450 00001FC7 [5E03000000000000] 
  2451 00001FCF 488B5518                        mov rdx, COUNT
  2452 00001FD3 B800000000                      mov rax, 0
  2453                                          ENTER
    44 00001FD8 C8000000            <1>  enter 0, 0
    45 00001FDC 4883E4F0            <1>  and rsp, ~15
  2454 00001FE0 E8(00000000)                    call fprintf
  2455                                          LEAVE
    49 00001FE5 C9                  <1>  leave
  2456 00001FE6 48C7C0FDFFFFFF                  mov rax, -3
  2457 00001FED E8(00000000)                    call exit
  2458                                  
  2459                                  L_error_arg_count_3:
  2460 00001FF2 488B3C25[00000000]              mov rdi, qword [stderr]
  2461 00001FFA 48BE-                           mov rsi, fmt_arg_count_3
  2461 00001FFC [C503000000000000] 
  2462 00002004 488B5518                        mov rdx, COUNT
  2463 00002008 B800000000                      mov rax, 0
  2464                                          ENTER
    44 0000200D C8000000            <1>  enter 0, 0
    45 00002011 4883E4F0            <1>  and rsp, ~15
  2465 00002015 E8(00000000)                    call fprintf
  2466                                          LEAVE
    49 0000201A C9                  <1>  leave
  2467 0000201B 48C7C0FDFFFFFF                  mov rax, -3
  2468 00002022 E8(00000000)                    call exit
  2469                                          
  2470                                  L_error_incorrect_type:
  2471 00002027 488B3C25[00000000]              mov rdi, qword [stderr]
  2472 0000202F 48BE-                           mov rsi, fmt_type
  2472 00002031 [EE03000000000000] 
  2473 00002039 B800000000                      mov rax, 0
  2474                                          ENTER
    44 0000203E C8000000            <1>  enter 0, 0
    45 00002042 4883E4F0            <1>  and rsp, ~15
  2475 00002046 E8(00000000)                    call fprintf
  2476                                          LEAVE
    49 0000204B C9                  <1>  leave
  2477 0000204C 48C7C0FCFFFFFF                  mov rax, -4
  2478 00002053 E8(00000000)                    call exit
  2479                                  
  2480                                  L_error_division_by_zero:
  2481 00002058 488B3C25[00000000]              mov rdi, qword [stderr]
  2482 00002060 48BE-                           mov rsi, fmt_division_by_zero
  2482 00002062 [2F04000000000000] 
  2483 0000206A B800000000                      mov rax, 0
  2484                                          ENTER
    44 0000206F C8000000            <1>  enter 0, 0
    45 00002073 4883E4F0            <1>  and rsp, ~15
  2485 00002077 E8(00000000)                    call fprintf
  2486                                          LEAVE
    49 0000207C C9                  <1>  leave
  2487 0000207D 48C7C0F8FFFFFF                  mov rax, -8
  2488 00002084 E8(00000000)                    call exit
  2489                                  
  2490                                  section .data
  2491                                  gensym_count:
  2492 000002DF 0000000000000000                dq 0
  2493                                  fmt_char:
  2494 000002E7 256300                          db `%c\0`
  2495                                  fmt_arg_negative:
  2496 000002EA 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
  2496 000002F3 7267756D656E742063-
  2496 000002FC 616E6E6F7420626520-
  2496 00000305 6E656761746976652E-
  2496 0000030E 0A00               
  2497                                  fmt_arg_count_0:
  2498 00000310 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2498 00000319 74696E67207A65726F-
  2498 00000322 20617267756D656E74-
  2498 0000032B 732E20466F756E6420-
  2498 00000334 25640A00           
  2499                                  fmt_arg_count_1:
  2500 00000338 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2500 00000341 74696E67206F6E6520-
  2500 0000034A 617267756D656E742E-
  2500 00000353 20466F756E64202564-
  2500 0000035C 0A00               
  2501                                  fmt_arg_count_12:
  2502 0000035E 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2502 00000367 74696E67206F6E6520-
  2502 00000370 726571756972656420-
  2502 00000379 616E64206F6E65206F-
  2502 00000382 7074696F6E616C2061-
  2502 0000038B 7267756D656E742E20-
  2502 00000394 466F756E642025640A-
  2502 0000039D 00                 
  2503                                  fmt_arg_count_2:
  2504 0000039E 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2504 000003A7 74696E672074776F20-
  2504 000003B0 617267756D656E7473-
  2504 000003B9 2E20466F756E642025-
  2504 000003C2 640A00             
  2505                                  fmt_arg_count_3:
  2506 000003C5 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2506 000003CE 74696E672074687265-
  2506 000003D7 6520617267756D656E-
  2506 000003E0 74732E20466F756E64-
  2506 000003E9 2025640A00         
  2507                                  fmt_type:
  2508 000003EE 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2508 000003F7 696F6E207061737365-
  2508 00000400 6420696E636F727265-
  2508 00000409 637420747970650A00 
  2509                                  fmt_integer_range:
  2510 00000412 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2510 0000041B 7265637420696E7465-
  2510 00000424 6765722072616E6765-
  2510 0000042D 0A00               
  2511                                  fmt_division_by_zero:
  2512 0000042F 212121204469766973-             db `!!! Division by zero\n\0`
  2512 00000438 696F6E206279207A65-
  2512 00000441 726F0A00           
  2513                                  fmt_scheme_error_part_1:
  2514 00000445 0A2121212054686520-             db `\n!!! The procedure \0`
  2514 0000044E 70726F636564757265-
  2514 00000457 2000               
  2515                                  fmt_scheme_error_part_2:
  2516 00000459 2061736B656420746F-             db ` asked to terminate the program\n`
  2516 00000462 207465726D696E6174-
  2516 0000046B 65207468652070726F-
  2516 00000474 6772616D0A         
  2517 00000479 202020207769746820-             db `    with the following message:\n\n\0`
  2517 00000482 74686520666F6C6C6F-
  2517 0000048B 77696E67206D657373-
  2517 00000494 6167653A0A0A00     
  2518                                  fmt_scheme_error_part_3:
  2519 0000049B 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2519 000004A4 210A0A00           
