     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "return"
    97 00000007 0600000000000000        	dq 6
    98 0000000F 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
    99                                  	; L_constants + 21:
   100 00000015 11                      	db T_integer	; 1
   101 00000016 0100000000000000        	dq 1
   102                                  	; L_constants + 30:
   103 0000001E 11                      	db T_integer	; 2
   104 0000001F 0200000000000000        	dq 2
   105                                  	; L_constants + 39:
   106 00000027 11                      	db T_integer	; 3
   107 00000028 0300000000000000        	dq 3
   108                                  	; L_constants + 48:
   109 00000030 11                      	db T_integer	; 4
   110 00000031 0400000000000000        	dq 4
   111                                  
   112                                  
   113                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
   114                                  global main
   115                                  section .text
   116                                  main:
   117 00000000 C8000000                        enter 0, 0
   118 00000004 6A00                            push 0
   119 00000006 6A00                            push 0
   120 00000008 68[87020000]                    push Lend
   121 0000000D C8000000                        enter 0, 0
   122                                  
   123                                  	; preparing a non-tail-call
   124 00000011 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   125 00000016 E8D7030000              	call malloc
   126 0000001B 50                      	push rax
   127 0000001C BF00000000              	mov rdi, 8 * 0	; new rib
   128 00000021 E8CC030000              	call malloc
   129 00000026 50                      	push rax
   130 00000027 BF08000000              	mov rdi, 8 * 1	; extended env
   131 0000002C E8C1030000              	call malloc
   132 00000031 488B7D10                	mov rdi, ENV
   133 00000035 BE00000000              	mov rsi, 0
   134 0000003A BA01000000              	mov rdx, 1
   135                                  .L_lambda_opt_env_loop_0004:	; ext_env[i + 1] <-- env[i]
   136 0000003F 4883FE00                	cmp rsi, 0
   137 00000043 7410                    	je .L_lambda_opt_env_end_0004
   138 00000045 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   139 00000049 48890CD0                	mov qword [rax + 8 * rdx], rcx
   140 0000004D 48FFC6                  	inc rsi
   141 00000050 48FFC2                  	inc rdx
   142 00000053 EBEA                    	jmp .L_lambda_opt_env_loop_0004
   143                                  .L_lambda_opt_env_end_0004:
   144 00000055 5B                      	pop rbx
   145 00000056 BE00000000              	mov rsi, 0
   146                                  .L_lambda_opt_params_loop_0004:	; copy params
   147 0000005B 4883FE00                	cmp rsi, 0
   148 0000005F 740E                    	je .L_lambda_opt_params_end_0004
   149 00000061 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   150 00000066 488914F3                	mov qword [rbx + 8 * rsi], rdx
   151 0000006A 48FFC6                  	inc rsi
   152 0000006D EBEC                    	jmp .L_lambda_opt_params_loop_0004
   153                                  .L_lambda_opt_params_end_0004:
   154 0000006F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   155 00000072 4889C3                  	mov rbx, rax
   156 00000075 58                      	pop rax
   157 00000076 C60004                  	mov byte [rax], T_closure
   158 00000079 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   159 0000007D 48C74009[8A000000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0004
   160 00000085 E919010000              	jmp .L_lambda_opt_end_0004
   161                                  .L_lambda_opt_code_0004:	; lambda-opt body
   162 0000008A 48837C241002            	cmp qword [rsp + 8 * 2], 2
   163 00000090 740D                    	je .L_lambda_opt_arity_check_exact_0004
   164 00000092 7F66                    	jg .L_lambda_opt_arity_check_more_0004
   165 00000094 FF742410                	push qword [rsp + 8 * 2]
   166 00000098 6A02                    	push 2
   167 0000009A E920030000              	jmp L_error_incorrect_arity_opt
   168                                  .L_lambda_opt_arity_check_exact_0004:
   169 0000009F 4883EC08                	sub rsp, 8
   170 000000A3 488B442408              	mov rax, qword[rsp + 8 *1]
   171 000000A8 48890424                	mov qword[rsp], rax  
   172 000000AC 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
   173 000000B1 4889442408              	mov qword[rsp + 8 * 1], rax
   174 000000B6 B803000000              	mov rax, 3
   175 000000BB 4889442410              	mov qword[rsp + 8 *2], rax
   176 000000C0 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
   177 000000C5 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
   178 000000CA 488B442428              	mov rax, qword[rsp + 8 * (4 + 1)]
   179 000000CF 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
   180 000000D4 48B8-                   	mov rax, sob_nil
   180 000000D6 [0100000000000000] 
   181 000000DE 4889442428              	mov qword[rsp + 8 * (3 + 2)], rax
   182 000000E3 C8000000                	enter 0, 0
   183 000000E7 48B8-                   	mov rax, L_constants + 21
   183 000000E9 [1500000000000000] 
   184 000000F1 C9                      	leave
   185 000000F2 C22800                  	ret AND_KILL_FRAME(3)
   186 000000F5 E9A9000000              	jmp .L_lambda_opt_end_0004	; new closure is in rax
   187                                  .L_lambda_opt_arity_check_more_0004:
   188 000000FA 488B442410              	mov rax, qword[rsp + 2 * 8]
   189 000000FF 4889C7                  	mov rdi, rax
   190                                  .L_lambda_opt_stack_shrink_loop_0004:
   191 00000102 4883FF02                	cmp rdi, 2
   192 00000106 7419                    	je .L_lambda_opt_stack_shrink_loop_exit_0004
   193 00000108 488B44FC18              	mov rax, qword[rsp + 8 * (3 + rdi)]
   194 0000010D 50                      	push rax
   195 0000010E 68[01000000]            	push sob_nil
   196 00000113 E8F20F0000              	call L_code_ptr_cons
   197 00000118 4883C410                	add rsp, 16
   198 0000011C 48FFCF                  	dec rdi
   199 0000011F EBE1                    	jmp .L_lambda_opt_stack_shrink_loop_0004
   200                                  .L_lambda_opt_stack_shrink_loop_exit_0004:
   201 00000121 488B442410              	mov rax, qword[rsp + 2 * 8]
   202 00000126 BF03000000              	mov rdi, 3
   203 0000012B 4829F8                  	sub rax, rdi
   204 0000012E 4889C7                  	mov rdi, rax
   205 00000131 486BC008                	imul rax,8
   206 00000135 4801C4                  	add rsp, rax
   207 00000138 4889FB                  	mov rbx, rdi
   208 0000013B 486BDB08                	imul rbx, 8
   209 0000013F 488B442420              	mov rax, qword[rsp + 8 * (3 + 1)]
   210 00000144 4829D8                  	sub rax, rbx
   211 00000147 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
   212 0000014C 4889FB                  	mov rbx, rdi
   213 0000014F 486BDB08                	imul rbx, 8
   214 00000153 488B442418              	mov rax, qword[rsp + 8 * (3 + 0)]
   215 00000158 4829D8                  	sub rax, rbx
   216 0000015B 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
   217 00000160 4889F8                  	mov rax, rdi
   218 00000163 486BC008                	imul rax, 8
   219 00000167 4829E0                  	sub rax, rsp
   220 0000016A 4889C7                  	mov rdi, rax
   221 0000016D 4883C010                	add rax, 8 * 2
   222 00000171 48C70003000000          	mov qword [rax], 3
   223 00000178 4889F8                  	mov rax, rdi
   224 0000017B 4883C008                	add rax, 8 * 1
   225 0000017F 488B00                  	mov rax, qword[rax] ;rax now holds env 
   226 00000182 4889442408              	mov qword[rsp + 8 * 1], rax
   227 00000187 4889F8                  	mov rax, rdi
   228 0000018A 488B00                  	mov rax, qword[rax]
   229 0000018D 48890424                	mov qword[rsp], rax
   230 00000191 C8000000                	enter 0, 0
   231 00000195 48B8-                   	mov rax, L_constants + 21
   231 00000197 [1500000000000000] 
   232 0000019F C9                      	leave
   233 000001A0 C22800                  	ret AND_KILL_FRAME(3)
   234                                  .L_lambda_opt_end_0004:	; new closure is in rax
   235 000001A3 50                      	push rax
   236 000001A4 6A01                    	push 1	; arg count
   237 000001A6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   238 000001AB E842020000              	call malloc
   239 000001B0 50                      	push rax
   240 000001B1 BF00000000              	mov rdi, 8 * 0	; new rib
   241 000001B6 E837020000              	call malloc
   242 000001BB 50                      	push rax
   243 000001BC BF08000000              	mov rdi, 8 * 1	; extended env
   244 000001C1 E82C020000              	call malloc
   245 000001C6 488B7D10                	mov rdi, ENV
   246 000001CA BE00000000              	mov rsi, 0
   247 000001CF BA01000000              	mov rdx, 1
   248                                  .L_lambda_simple_env_loop_0004:	; ext_env[i + 1] <-- env[i]
   249 000001D4 4883FE00                	cmp rsi, 0
   250 000001D8 7410                    	je .L_lambda_simple_env_end_0004
   251 000001DA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   252 000001DE 48890CD0                	mov qword [rax + 8 * rdx], rcx
   253 000001E2 48FFC6                  	inc rsi
   254 000001E5 48FFC2                  	inc rdx
   255 000001E8 EBEA                    	jmp .L_lambda_simple_env_loop_0004
   256                                  .L_lambda_simple_env_end_0004:
   257 000001EA 5B                      	pop rbx
   258 000001EB BE00000000              	mov rsi, 0
   259                                  .L_lambda_simple_params_loop_0004:	; copy params
   260 000001F0 4883FE00                	cmp rsi, 0
   261 000001F4 740E                    	je .L_lambda_simple_params_end_0004
   262 000001F6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   263 000001FB 488914F3                	mov qword [rbx + 8 * rsi], rdx
   264 000001FF 48FFC6                  	inc rsi
   265 00000202 EBEC                    	jmp .L_lambda_simple_params_loop_0004
   266                                  .L_lambda_simple_params_end_0004:
   267 00000204 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   268 00000207 4889C3                  	mov rbx, rax
   269 0000020A 58                      	pop rax
   270 0000020B C60004                  	mov byte [rax], T_closure
   271 0000020E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   272 00000212 48C74009[1C020000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0004
   273 0000021A EB5C                    	jmp .L_lambda_simple_end_0004
   274                                  .L_lambda_simple_code_0004:	; lambda-simple body
   275 0000021C 48837C241001            	cmp qword [rsp + 8 * 2], 1
   276 00000222 740B                    	je .L_lambda_simple_arity_check_ok_0004
   277 00000224 FF742410                	push qword [rsp + 8 * 2]
   278 00000228 6A01                    	push 1
   279 0000022A E97C010000              	jmp L_error_incorrect_arity_simple
   280                                  .L_lambda_simple_arity_check_ok_0004:
   281 0000022F C8000000                	enter 0, 0
   282                                  	; preparing a non-tail-call
   283 00000233 48B8-                   	mov rax, L_constants + 48
   283 00000235 [3000000000000000] 
   284 0000023D 50                      	push rax
   285 0000023E 48B8-                   	mov rax, L_constants + 39
   285 00000240 [2700000000000000] 
   286 00000248 50                      	push rax
   287 00000249 48B8-                   	mov rax, L_constants + 30
   287 0000024B [1E00000000000000] 
   288 00000253 50                      	push rax
   289 00000254 48B8-                   	mov rax, L_constants + 21
   289 00000256 [1500000000000000] 
   290 0000025E 50                      	push rax
   291 0000025F 6A04                    	push 4	; arg count
   292 00000261 488B4520                	mov rax, PARAM(0)	; param f
   293 00000265 803804                  	cmp byte [rax], T_closure
   294 00000268 0F85DB000000            	jne L_error_non_closure
   295 0000026E FF7001                  	push SOB_CLOSURE_ENV(rax)
   296 00000271 FF5009                  	call SOB_CLOSURE_CODE(rax)
   297 00000274 C9                      	leave
   298 00000275 C21800                  	ret AND_KILL_FRAME(1)
   299                                  .L_lambda_simple_end_0004:	; new closure is in rax
   300 00000278 803804                  	cmp byte [rax], T_closure
   301 0000027B 0F85C8000000            	jne L_error_non_closure
   302 00000281 FF7001                  	push SOB_CLOSURE_ENV(rax)
   303 00000284 FF5009                  	call SOB_CLOSURE_CODE(rax)
   304                                  Lend:
   305 00000287 4889C7                  	mov rdi, rax
   306 0000028A E8B8030000              	call print_sexpr_if_not_void
   307                                  
   308 0000028F 48BF-                           mov rdi, fmt_memory_usage
   308 00000291 [D100000000000000] 
   309 00000299 488B3425[57010000]              mov rsi, qword [top_of_memory]
   310 000002A1 4881EE[00000000]                sub rsi, memory
   311 000002A8 B800000000                      mov rax, 0
   312                                          ENTER
    44 000002AD C8000000            <1>  enter 0, 0
    45 000002B1 4883E4F0            <1>  and rsp, ~15
   313 000002B5 E8(00000000)                    call printf
   314                                          LEAVE
    49 000002BA C9                  <1>  leave
   315 000002BB B800000000                      mov rax, 0
   316 000002C0 E8(00000000)                    call exit
   317                                  
   318                                  L_error_fvar_undefined:
   319 000002C5 50                              push rax
   320 000002C6 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
   321 000002CE 48BE-                           mov rsi, fmt_undefined_free_var_1
   321 000002D0 [3900000000000000] 
   322 000002D8 B800000000                      mov rax, 0
   323                                          ENTER
    44 000002DD C8000000            <1>  enter 0, 0
    45 000002E1 4883E4F0            <1>  and rsp, ~15
   324 000002E5 E8(00000000)                    call fprintf
   325                                          LEAVE
    49 000002EA C9                  <1>  leave
   326 000002EB 58                              pop rax
   327 000002EC 488B4001                        mov rax, qword [rax + 1] ; string
   328 000002F0 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
   329 000002F4 BE01000000                      mov rsi, 1               ; sizeof(char)
   330 000002F9 488B5001                        mov rdx, qword [rax + 1] ; string-length
   331 000002FD 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
   332 00000305 B800000000                      mov rax, 0
   333                                          ENTER
    44 0000030A C8000000            <1>  enter 0, 0
    45 0000030E 4883E4F0            <1>  and rsp, ~15
   334 00000312 E8(00000000)                    call fwrite
   335                                          LEAVE
    49 00000317 C9                  <1>  leave
   336 00000318 488B3C25[00000000]              mov rdi, [stderr]       ; destination
   337 00000320 48BE-                           mov rsi, fmt_undefined_free_var_2
   337 00000322 [5000000000000000] 
   338 0000032A B800000000                      mov rax, 0
   339                                          ENTER
    44 0000032F C8000000            <1>  enter 0, 0
    45 00000333 4883E4F0            <1>  and rsp, ~15
   340 00000337 E8(00000000)                    call fprintf
   341                                          LEAVE
    49 0000033C C9                  <1>  leave
   342 0000033D 48C7C0F6FFFFFF                  mov rax, -10
   343 00000344 E8(00000000)                    call exit
   344                                  
   345                                  L_error_non_closure:
   346 00000349 488B3C25[00000000]              mov rdi, qword [stderr]
   347 00000351 48BE-                           mov rsi, fmt_non_closure
   347 00000353 [0701000000000000] 
   348 0000035B B800000000                      mov rax, 0
   349                                          ENTER
    44 00000360 C8000000            <1>  enter 0, 0
    45 00000364 4883E4F0            <1>  and rsp, ~15
   350 00000368 E8(00000000)                    call fprintf
   351                                          LEAVE
    49 0000036D C9                  <1>  leave
   352 0000036E 48C7C0FEFFFFFF                  mov rax, -2
   353 00000375 E8(00000000)                    call exit
   354                                  
   355                                  L_error_improper_list:
   356 0000037A 488B3C25[00000000]      	mov rdi, qword [stderr]
   357 00000382 48BE-                   	mov rsi, fmt_error_improper_list
   357 00000384 [2F01000000000000] 
   358 0000038C B800000000              	mov rax, 0
   359                                          ENTER
    44 00000391 C8000000            <1>  enter 0, 0
    45 00000395 4883E4F0            <1>  and rsp, ~15
   360 00000399 E8(00000000)            	call fprintf
   361                                          LEAVE
    49 0000039E C9                  <1>  leave
   362 0000039F 48C7C0F9FFFFFF          	mov rax, -7
   363 000003A6 E8(00000000)            	call exit
   364                                  
   365                                  L_error_incorrect_arity_simple:
   366 000003AB 488B3C25[00000000]              mov rdi, qword [stderr]
   367 000003B3 48BE-                           mov rsi, fmt_incorrect_arity_simple
   367 000003B5 [7200000000000000] 
   368 000003BD EB12                            jmp L_error_incorrect_arity_common
   369                                  L_error_incorrect_arity_opt:
   370 000003BF 488B3C25[00000000]              mov rdi, qword [stderr]
   371 000003C7 48BE-                           mov rsi, fmt_incorrect_arity_opt
   371 000003C9 [9D00000000000000] 
   372                                  L_error_incorrect_arity_common:
   373 000003D1 5A                              pop rdx
   374 000003D2 59                              pop rcx
   375 000003D3 B800000000                      mov rax, 0
   376                                          ENTER
    44 000003D8 C8000000            <1>  enter 0, 0
    45 000003DC 4883E4F0            <1>  and rsp, ~15
   377 000003E0 E8(00000000)                    call fprintf
   378                                          LEAVE
    49 000003E5 C9                  <1>  leave
   379 000003E6 48C7C0FAFFFFFF                  mov rax, -6
   380 000003ED E8(00000000)                    call exit
   381                                  
   382                                  section .data
   383                                  fmt_undefined_free_var_1:
   384 00000039 212121205468652066-             db `!!! The free variable \0`
   384 00000042 726565207661726961-
   384 0000004B 626C652000         
   385                                  fmt_undefined_free_var_2:
   386 00000050 207761732075736564-             db ` was used before it was defined.\n\0`
   386 00000059 206265666F72652069-
   386 00000062 742077617320646566-
   386 0000006B 696E65642E0A00     
   387                                  fmt_incorrect_arity_simple:
   388 00000072 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   388 0000007B 74656420256C642061-
   388 00000084 7267756D656E74732C-
   388 0000008D 206275742067697665-
   388 00000096 6E20256C640A00     
   389                                  fmt_incorrect_arity_opt:
   390 0000009D 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   390 000000A6 746564206174206C65-
   390 000000AF 61737420256C642061-
   390 000000B8 7267756D656E74732C-
   390 000000C1 206275742067697665-
   390 000000CA 6E20256C640A00     
   391                                  fmt_memory_usage:
   392 000000D1 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   392 000000DA 20256C642062797465-
   392 000000E3 73206F662064796E61-
   392 000000EC 6D6963616C6C792D61-
   392 000000F5 6C6C6F636174656420-
   392 000000FE 6D656D6F72790A0A00 
   393                                  fmt_non_closure:
   394 00000107 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   394 00000110 7074696E6720746F20-
   394 00000119 6170706C792061206E-
   394 00000122 6F6E2D636C6F737572-
   394 0000012B 65210A00           
   395                                  fmt_error_improper_list:
   396 0000012F 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   396 00000138 7267756D656E742069-
   396 00000141 73206E6F7420612070-
   396 0000014A 726F706572206C6973-
   396 00000153 74210A00           
   397                                  
   398                                  section .bss
   399                                  memory:
   400 00000000 <res 40000000h>         	resb gbytes(1)
   401                                  
   402                                  section .data
   403                                  top_of_memory:
   404 00000157 [0000000000000000]              dq memory
   405                                  
   406                                  section .text
   407                                  malloc:
   408 000003F2 488B0425[57010000]              mov rax, qword [top_of_memory]
   409 000003FA 48013C25[57010000]              add qword [top_of_memory], rdi
   410 00000402 C3                              ret
   411                                  
   412                                  L_code_ptr_return:
   413 00000403 48837C241002            	cmp qword [rsp + 8*2], 2
   414 00000409 0F85461C0000            	jne L_error_arg_count_2
   415 0000040F 488B4C2418              	mov rcx, qword [rsp + 8*3]
   416                                  	assert_integer(rcx)
    53 00000414 803911              <1>  cmp byte [%1], %2
    54 00000417 0F85D71C0000        <1>  jne L_error_incorrect_type
   417 0000041D 488B4901                	mov rcx, qword [rcx + 1]
   418 00000421 4883F900                	cmp rcx, 0
   419 00000425 0F8C5E1B0000            	jl L_error_integer_range
   420 0000042B 488B442420              	mov rax, qword [rsp + 8*4]
   421                                  .L0:
   422 00000430 4883F900                        cmp rcx, 0
   423 00000434 7409                            je .L1
   424 00000436 488B6D00                	mov rbp, qword [rbp]
   425 0000043A 48FFC9                  	dec rcx
   426 0000043D 7FF1                    	jg .L0
   427                                  .L1:
   428 0000043F 4889EC                  	mov rsp, rbp
   429 00000442 5D                      	pop rbp
   430 00000443 5B                              pop rbx
   431 00000444 488B4C2408                      mov rcx, qword [rsp + 8*1]
   432 00000449 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
   433 0000044E FFE3                    	jmp rbx
   434                                  
   435                                  L_code_ptr_make_list:
   436 00000450 C8000000                	enter 0, 0
   437 00000454 48837D1801                      cmp COUNT, 1
   438 00000459 740C                            je .L0
   439 0000045B 48837D1802                      cmp COUNT, 2
   440 00000460 7411                            je .L1
   441 00000462 E9231C0000                      jmp L_error_arg_count_12
   442                                  .L0:
   443 00000467 49B9-                           mov r9, sob_void
   443 00000469 [0000000000000000] 
   444 00000471 EB04                            jmp .L2
   445                                  .L1:
   446 00000473 4C8B4D28                        mov r9, PARAM(1)
   447                                  .L2:
   448 00000477 488B4D20                        mov rcx, PARAM(0)
   449                                          assert_integer(rcx)
    53 0000047B 803911              <1>  cmp byte [%1], %2
    54 0000047E 0F85701C0000        <1>  jne L_error_incorrect_type
   450 00000484 488B4901                        mov rcx, qword [rcx + 1]
   451 00000488 4883F900                        cmp rcx, 0
   452 0000048C 0F8C281B0000                    jl L_error_arg_negative
   453 00000492 49B8-                           mov r8, sob_nil
   453 00000494 [0100000000000000] 
   454                                  .L3:
   455 0000049C 4883F900                        cmp rcx, 0
   456 000004A0 7E1D                            jle .L4
   457 000004A2 BF11000000                      mov rdi, 1 + 8 + 8
   458 000004A7 E846FFFFFF                      call malloc
   459 000004AC C60021                          mov byte [rax], T_pair
   460 000004AF 4C894801                        mov qword [rax + 1], r9
   461 000004B3 4C894009                        mov qword [rax + 1 + 8], r8
   462 000004B7 4989C0                          mov r8, rax
   463 000004BA 48FFC9                          dec rcx
   464 000004BD EBDD                            jmp .L3
   465                                  .L4:
   466 000004BF 4C89C0                          mov rax, r8
   467 000004C2 48837D1802                      cmp COUNT, 2
   468 000004C7 7404                            je .L5
   469 000004C9 C9                              leave
   470 000004CA C21800                          ret AND_KILL_FRAME(1)
   471                                  .L5:
   472 000004CD C9                      	leave
   473 000004CE C22000                  	ret AND_KILL_FRAME(2)
   474                                  
   475                                  L_code_ptr_is_primitive:
   476 000004D1 C8000000                	enter 0, 0
   477 000004D5 48837D1801              	cmp COUNT, 1
   478 000004DA 0F85401B0000            	jne L_error_arg_count_1
   479 000004E0 488B4520                	mov rax, PARAM(0)
   480                                  	assert_closure(rax)
    53 000004E4 803804              <1>  cmp byte [%1], %2
    54 000004E7 0F85071C0000        <1>  jne L_error_incorrect_type
   481 000004ED 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
   482 000004F2 750C                    	jne .L_false
   483 000004F4 48B8-                   	mov rax, sob_boolean_true
   483 000004F6 [0300000000000000] 
   484 000004FE EB0A                    	jmp .L_end
   485                                  .L_false:
   486 00000500 48B8-                   	mov rax, sob_boolean_false
   486 00000502 [0200000000000000] 
   487                                  .L_end:
   488 0000050A C9                      	leave
   489 0000050B C21800                  	ret AND_KILL_FRAME(1)
   490                                  
   491                                  L_code_ptr_length:
   492 0000050E C8000000                	enter 0, 0
   493 00000512 48837D1801              	cmp COUNT, 1
   494 00000517 0F85031B0000            	jne L_error_arg_count_1
   495 0000051D 488B5D20                	mov rbx, PARAM(0)
   496 00000521 BF00000000              	mov rdi, 0
   497                                  .L:
   498 00000526 803B01                  	cmp byte [rbx], T_nil
   499 00000529 7412                    	je .L_end
   500                                  	assert_pair(rbx)
    53 0000052B 803B21              <1>  cmp byte [%1], %2
    54 0000052E 0F85C01B0000        <1>  jne L_error_incorrect_type
   501 00000534 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
   502 00000538 48FFC7                  	inc rdi
   503 0000053B EBE9                    	jmp .L
   504                                  .L_end:
   505 0000053D E82D1A0000              	call make_integer
   506 00000542 C9                      	leave
   507 00000543 C21800                  	ret AND_KILL_FRAME(1)
   508                                  
   509                                  L_code_ptr_break:
   510 00000546 48837C241000                    cmp qword [rsp + 8 * 2], 0
   511 0000054C 0F85991A0000                    jne L_error_arg_count_0
   512 00000552 CC                              int3
   513 00000553 48B8-                           mov rax, sob_void
   513 00000555 [0000000000000000] 
   514 0000055D C21000                          ret AND_KILL_FRAME(0)        
   515                                  
   516                                  L_code_ptr_frame:
   517 00000560 C8000000                        enter 0, 0
   518 00000564 48837D1800                      cmp COUNT, 0
   519 00000569 0F857C1A0000                    jne L_error_arg_count_0
   520                                  
   521 0000056F 48BF-                           mov rdi, fmt_frame
   521 00000571 [5F01000000000000] 
   522 00000579 488B7500                        mov rsi, qword [rbp]    ; old rbp
   523 0000057D 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
   524 00000581 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
   525 00000585 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
   526 00000589 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
   527 0000058D 6A00                            push 0
   528 0000058F 4151                            push r9
   529 00000591 4150                            push r8                   ; we'll use it when printing the params
   530 00000593 B800000000                      mov rax, 0
   531                                          
   532                                          ENTER
    44 00000598 C8000000            <1>  enter 0, 0
    45 0000059C 4883E4F0            <1>  and rsp, ~15
   533 000005A0 E8(00000000)                    call printf
   534                                          LEAVE
    49 000005A5 C9                  <1>  leave
   535                                  
   536                                  .L:
   537 000005A6 488B0C24                        mov rcx, qword [rsp]
   538 000005AA 4883F900                        cmp rcx, 0
   539 000005AE 7467                            je .L_out
   540 000005B0 48BF-                           mov rdi, fmt_frame_param_prefix
   540 000005B2 [9801000000000000] 
   541 000005BA 488B742410                      mov rsi, qword [rsp + 8*2]
   542 000005BF B800000000                      mov rax, 0
   543                                          
   544                                          ENTER
    44 000005C4 C8000000            <1>  enter 0, 0
    45 000005C8 4883E4F0            <1>  and rsp, ~15
   545 000005CC E8(00000000)                    call printf
   546                                          LEAVE
    49 000005D1 C9                  <1>  leave
   547                                  
   548 000005D2 488B0C24                        mov rcx, qword [rsp]
   549 000005D6 48FFC9                          dec rcx
   550 000005D9 48890C24                        mov qword [rsp], rcx    ; dec arg count
   551 000005DD 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
   552 000005E2 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
   553 000005E7 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
   554 000005EB 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
   555 000005F0 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
   556 000005F3 E87B000000                      call print_sexpr
   557 000005F8 48BF-                           mov rdi, fmt_newline
   557 000005FA [C401000000000000] 
   558 00000602 B800000000                      mov rax, 0
   559                                          ENTER
    44 00000607 C8000000            <1>  enter 0, 0
    45 0000060B 4883E4F0            <1>  and rsp, ~15
   560 0000060F E8(00000000)                    call printf
   561                                          LEAVE
    49 00000614 C9                  <1>  leave
   562 00000615 EB8F                            jmp .L
   563                                  .L_out:
   564 00000617 48BF-                           mov rdi, fmt_frame_continue
   564 00000619 [A901000000000000] 
   565 00000621 B800000000                      mov rax, 0
   566                                          ENTER
    44 00000626 C8000000            <1>  enter 0, 0
    45 0000062A 4883E4F0            <1>  and rsp, ~15
   567 0000062E E8(00000000)                    call printf
   568 00000633 E8(00000000)                    call getchar
   569                                          LEAVE
    49 00000638 C9                  <1>  leave
   570                                          
   571 00000639 48B8-                           mov rax, sob_void
   571 0000063B [0000000000000000] 
   572 00000643 C9                              leave
   573 00000644 C21000                          ret AND_KILL_FRAME(0)
   574                                          
   575                                  print_sexpr_if_not_void:
   576 00000647 4881FF[00000000]        	cmp rdi, sob_void
   577 0000064E 7422                    	je .done
   578 00000650 E81E000000              	call print_sexpr
   579 00000655 48BF-                   	mov rdi, fmt_newline
   579 00000657 [C401000000000000] 
   580 0000065F B800000000              	mov rax, 0
   581                                  	ENTER
    44 00000664 C8000000            <1>  enter 0, 0
    45 00000668 4883E4F0            <1>  and rsp, ~15
   582 0000066C E8(00000000)            	call printf
   583                                  	LEAVE
    49 00000671 C9                  <1>  leave
   584                                  .done:
   585 00000672 C3                      	ret
   586                                  
   587                                  section .data
   588                                  fmt_frame:
   589 0000015F 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
   589 00000168 207265742061646472-
   589 00000171 203D2025703B206C65-
   589 0000017A 7820656E76203D2025-
   589 00000183 703B20706172616D20-
   589 0000018C 636F756E74203D2025-
   589 00000195 640A00             
   590                                  fmt_frame_param_prefix:
   591 00000198 3D3D5B706172616D20-             db `==[param %d]==> \0`
   591 000001A1 25645D3D3D3E2000   
   592                                  fmt_frame_continue:
   593 000001A9 486974203C456E7465-             db `Hit <Enter> to continue...\0`
   593 000001B2 723E20746F20636F6E-
   593 000001BB 74696E75652E2E2E00 
   594                                  fmt_newline:
   595 000001C4 0A00                    	db `\n\0`
   596                                  fmt_void:
   597 000001C6 233C766F69643E00        	db `#<void>\0`
   598                                  fmt_nil:
   599 000001CE 282900                  	db `()\0`
   600                                  fmt_boolean_false:
   601 000001D1 236600                  	db `#f\0`
   602                                  fmt_boolean_true:
   603 000001D4 237400                  	db `#t\0`
   604                                  fmt_char_backslash:
   605 000001D7 235C5C00                	db `#\\\\\0`
   606                                  fmt_char_dquote:
   607 000001DB 235C2200                	db `#\\"\0`
   608                                  fmt_char_simple:
   609 000001DF 235C256300              	db `#\\%c\0`
   610                                  fmt_char_null:
   611 000001E4 235C6E756C00            	db `#\\nul\0`
   612                                  fmt_char_bell:
   613 000001EA 235C62656C6C00          	db `#\\bell\0`
   614                                  fmt_char_backspace:
   615 000001F1 235C6261636B737061-     	db `#\\backspace\0`
   615 000001FA 636500             
   616                                  fmt_char_tab:
   617 000001FD 235C74616200            	db `#\\tab\0`
   618                                  fmt_char_newline:
   619 00000203 235C6E65776C696E65-     	db `#\\newline\0`
   619 0000020C 00                 
   620                                  fmt_char_formfeed:
   621 0000020D 235C7061676500          	db `#\\page\0`
   622                                  fmt_char_return:
   623 00000214 235C72657475726E00      	db `#\\return\0`
   624                                  fmt_char_escape:
   625 0000021D 235C65736300            	db `#\\esc\0`
   626                                  fmt_char_space:
   627 00000223 235C737061636500        	db `#\\space\0`
   628                                  fmt_char_hex:
   629 0000022B 235C782530325800        	db `#\\x%02X\0`
   630                                  fmt_gensym:
   631 00000233 47256C6400                      db `G%ld\0`
   632                                  fmt_closure:
   633 00000238 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   633 00000241 206174203078253038-
   633 0000024A 5820656E763D307825-
   633 00000253 30385820636F64653D-
   633 0000025C 3078253038583E00   
   634                                  fmt_lparen:
   635 00000264 2800                    	db `(\0`
   636                                  fmt_dotted_pair:
   637 00000266 202E2000                	db ` . \0`
   638                                  fmt_rparen:
   639 0000026A 2900                    	db `)\0`
   640                                  fmt_space:
   641 0000026C 2000                    	db ` \0`
   642                                  fmt_empty_vector:
   643 0000026E 23282900                	db `#()\0`
   644                                  fmt_vector:
   645 00000272 232800                  	db `#(\0`
   646                                  fmt_real:
   647 00000275 256600                  	db `%f\0`
   648                                  fmt_fraction:
   649 00000278 256C642F256C6400        	db `%ld/%ld\0`
   650                                  fmt_zero:
   651 00000280 3000                    	db `0\0`
   652                                  fmt_int:
   653 00000282 256C6400                	db `%ld\0`
   654                                  fmt_unknown_scheme_object_error:
   655 00000286 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
   655 0000028F 6F723A20556E6B6E6F-
   655 00000298 776E20536368656D65-
   655 000002A1 2D6F626A6563742028-
   655 000002AA 525454492030782530-
   655 000002B3 32582920           
   656 000002B7 617420616464726573-     	db `at address 0x%08X\n\n\0`
   656 000002C0 73203078253038580A-
   656 000002C9 0A00               
   657                                  fmt_dquote:
   658 000002CB 2200                    	db `\"\0`
   659                                  fmt_string_char:
   660 000002CD 256300                          db `%c\0`
   661                                  fmt_string_char_7:
   662 000002D0 5C6100                          db `\\a\0`
   663                                  fmt_string_char_8:
   664 000002D3 5C6200                          db `\\b\0`
   665                                  fmt_string_char_9:
   666 000002D6 5C7400                          db `\\t\0`
   667                                  fmt_string_char_10:
   668 000002D9 5C6E00                          db `\\n\0`
   669                                  fmt_string_char_11:
   670 000002DC 5C7600                          db `\\v\0`
   671                                  fmt_string_char_12:
   672 000002DF 5C6600                          db `\\f\0`
   673                                  fmt_string_char_13:
   674 000002E2 5C7200                          db `\\r\0`
   675                                  fmt_string_char_34:
   676 000002E5 5C2200                          db `\\"\0`
   677                                  fmt_string_char_92:
   678 000002E8 5C5C00                          db `\\\\\0`
   679                                  fmt_string_char_hex:
   680 000002EB 5C7825583B00                    db `\\x%X;\0`
   681                                  
   682                                  section .text
   683                                  
   684                                  print_sexpr:
   685 00000673 C8000000                	enter 0, 0
   686 00000677 8A07                    	mov al, byte [rdi]
   687 00000679 3C00                    	cmp al, T_void
   688 0000067B 7465                    	je .Lvoid
   689 0000067D 3C01                    	cmp al, T_nil
   690 0000067F 7470                    	je .Lnil
   691 00000681 3C09                    	cmp al, T_boolean_false
   692 00000683 747B                    	je .Lboolean_false
   693 00000685 3C0A                    	cmp al, T_boolean_true
   694 00000687 0F8482000000            	je .Lboolean_true
   695 0000068D 3C02                    	cmp al, T_char
   696 0000068F 0F8489000000            	je .Lchar
   697 00000695 3C41                    	cmp al, T_interned_symbol
   698 00000697 0F84BF010000            	je .Linterned_symbol
   699 0000069D 3C42                            cmp al, T_uninterned_symbol
   700 0000069F 0F84E3010000                    je .Luninterned_symbol
   701 000006A5 3C21                    	cmp al, T_pair
   702 000006A7 0F84EE010000            	je .Lpair
   703 000006AD 3C22                    	cmp al, T_vector
   704 000006AF 0F84B7020000            	je .Lvector
   705 000006B5 3C04                    	cmp al, T_closure
   706 000006B7 0F8485010000            	je .Lclosure
   707 000006BD 3C13                    	cmp al, T_real
   708 000006BF 0F8448030000            	je .Lreal
   709 000006C5 3C12                    	cmp al, T_fraction
   710 000006C7 0F846E030000            	je .Lfraction
   711 000006CD 3C11                    	cmp al, T_integer
   712 000006CF 0F84A7030000            	je .Linteger
   713 000006D5 3C03                    	cmp al, T_string
   714 000006D7 0F84B2030000            	je .Lstring
   715                                  
   716 000006DD E9DC040000              	jmp .Lunknown_sexpr_type
   717                                  
   718                                  .Lvoid:
   719 000006E2 48BF-                   	mov rdi, fmt_void
   719 000006E4 [C601000000000000] 
   720 000006EC E900050000              	jmp .Lemit
   721                                  
   722                                  .Lnil:
   723 000006F1 48BF-                   	mov rdi, fmt_nil
   723 000006F3 [CE01000000000000] 
   724 000006FB E9F1040000              	jmp .Lemit
   725                                  
   726                                  .Lboolean_false:
   727 00000700 48BF-                   	mov rdi, fmt_boolean_false
   727 00000702 [D101000000000000] 
   728 0000070A E9E2040000              	jmp .Lemit
   729                                  
   730                                  .Lboolean_true:
   731 0000070F 48BF-                   	mov rdi, fmt_boolean_true
   731 00000711 [D401000000000000] 
   732 00000719 E9D3040000              	jmp .Lemit
   733                                  
   734                                  .Lchar:
   735 0000071E 8A4701                  	mov al, byte [rdi + 1]
   736 00000721 3C20                    	cmp al, ' '
   737 00000723 7E20                    	jle .Lchar_whitespace
   738 00000725 3C5C                    	cmp al, 92 		; backslash
   739 00000727 7474                    	je .Lchar_backslash
   740 00000729 3C22                    	cmp al, '"'
   741 0000072B 747F                    	je .Lchar_dquote
   742 0000072D 4825FF000000            	and rax, 255
   743 00000733 48BF-                   	mov rdi, fmt_char_simple
   743 00000735 [DF01000000000000] 
   744 0000073D 4889C6                  	mov rsi, rax
   745 00000740 E9AC040000              	jmp .Lemit
   746                                  
   747                                  .Lchar_whitespace:
   748 00000745 3C00                    	cmp al, 0
   749 00000747 7472                    	je .Lchar_null
   750 00000749 3C07                    	cmp al, 7
   751 0000074B 747D                    	je .Lchar_bell
   752 0000074D 3C08                    	cmp al, 8
   753 0000074F 0F8484000000            	je .Lchar_backspace
   754 00000755 3C09                    	cmp al, 9
   755 00000757 0F848B000000            	je .Lchar_tab
   756 0000075D 3C0A                    	cmp al, 10
   757 0000075F 0F8492000000            	je .Lchar_newline
   758 00000765 3C0C                    	cmp al, 12
   759 00000767 0F8499000000            	je .Lchar_formfeed
   760 0000076D 3C0D                    	cmp al, 13
   761 0000076F 0F84A0000000            	je .Lchar_return
   762 00000775 3C1B                    	cmp al, 27
   763 00000777 0F84A7000000            	je .Lchar_escape
   764 0000077D 4825FF000000            	and rax, 255
   765 00000783 3C20                    	cmp al, ' '
   766 00000785 0F84A8000000            	je .Lchar_space
   767 0000078B 48BF-                   	mov rdi, fmt_char_hex
   767 0000078D [2B02000000000000] 
   768 00000795 4889C6                  	mov rsi, rax
   769 00000798 E954040000              	jmp .Lemit	
   770                                  
   771                                  .Lchar_backslash:
   772 0000079D 48BF-                   	mov rdi, fmt_char_backslash
   772 0000079F [D701000000000000] 
   773 000007A7 E945040000              	jmp .Lemit
   774                                  
   775                                  .Lchar_dquote:
   776 000007AC 48BF-                   	mov rdi, fmt_char_dquote
   776 000007AE [DB01000000000000] 
   777 000007B6 E936040000              	jmp .Lemit
   778                                  
   779                                  .Lchar_null:
   780 000007BB 48BF-                   	mov rdi, fmt_char_null
   780 000007BD [E401000000000000] 
   781 000007C5 E927040000              	jmp .Lemit
   782                                  
   783                                  .Lchar_bell:
   784 000007CA 48BF-                   	mov rdi, fmt_char_bell
   784 000007CC [EA01000000000000] 
   785 000007D4 E918040000              	jmp .Lemit
   786                                  
   787                                  .Lchar_backspace:
   788 000007D9 48BF-                   	mov rdi, fmt_char_backspace
   788 000007DB [F101000000000000] 
   789 000007E3 E909040000              	jmp .Lemit
   790                                  
   791                                  .Lchar_tab:
   792 000007E8 48BF-                   	mov rdi, fmt_char_tab
   792 000007EA [FD01000000000000] 
   793 000007F2 E9FA030000              	jmp .Lemit
   794                                  
   795                                  .Lchar_newline:
   796 000007F7 48BF-                   	mov rdi, fmt_char_newline
   796 000007F9 [0302000000000000] 
   797 00000801 E9EB030000              	jmp .Lemit
   798                                  
   799                                  .Lchar_formfeed:
   800 00000806 48BF-                   	mov rdi, fmt_char_formfeed
   800 00000808 [0D02000000000000] 
   801 00000810 E9DC030000              	jmp .Lemit
   802                                  
   803                                  .Lchar_return:
   804 00000815 48BF-                   	mov rdi, fmt_char_return
   804 00000817 [1402000000000000] 
   805 0000081F E9CD030000              	jmp .Lemit
   806                                  
   807                                  .Lchar_escape:
   808 00000824 48BF-                   	mov rdi, fmt_char_escape
   808 00000826 [1D02000000000000] 
   809 0000082E E9BE030000              	jmp .Lemit
   810                                  
   811                                  .Lchar_space:
   812 00000833 48BF-                   	mov rdi, fmt_char_space
   812 00000835 [2302000000000000] 
   813 0000083D E9AF030000              	jmp .Lemit
   814                                  
   815                                  .Lclosure:
   816 00000842 4889FE                  	mov rsi, qword rdi
   817 00000845 48BF-                   	mov rdi, fmt_closure
   817 00000847 [3802000000000000] 
   818 0000084F 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   819 00000853 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   820 00000857 E995030000              	jmp .Lemit
   821                                  
   822                                  .Linterned_symbol:
   823 0000085C 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   824 00000860 BE01000000              	mov rsi, 1		 ; size = 1 byte
   825 00000865 488B5701                	mov rdx, qword [rdi + 1] ; length
   826 00000869 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   827 0000086D 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   828                                  	ENTER
    44 00000875 C8000000            <1>  enter 0, 0
    45 00000879 4883E4F0            <1>  and rsp, ~15
   829 0000087D E8(00000000)            	call fwrite
   830                                  	LEAVE
    49 00000882 C9                  <1>  leave
   831 00000883 E97E030000              	jmp .Lend
   832                                  
   833                                  .Luninterned_symbol:
   834 00000888 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
   835 0000088C 48BF-                           mov rdi, fmt_gensym
   835 0000088E [3302000000000000] 
   836 00000896 E956030000                      jmp .Lemit
   837                                  	
   838                                  .Lpair:
   839 0000089B 57                      	push rdi
   840 0000089C 48BF-                   	mov rdi, fmt_lparen
   840 0000089E [6402000000000000] 
   841 000008A6 B800000000              	mov rax, 0
   842                                          ENTER
    44 000008AB C8000000            <1>  enter 0, 0
    45 000008AF 4883E4F0            <1>  and rsp, ~15
   843 000008B3 E8(00000000)            	call printf
   844                                          LEAVE
    49 000008B8 C9                  <1>  leave
   845 000008B9 488B3C24                	mov rdi, qword [rsp] 	; pair
   846 000008BD 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   847 000008C1 E8ADFDFFFF              	call print_sexpr
   848 000008C6 5F                      	pop rdi 		; pair
   849 000008C7 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   850                                  .Lcdr:
   851 000008CB 8A07                    	mov al, byte [rdi]
   852 000008CD 3C01                    	cmp al, T_nil
   853 000008CF 7447                    	je .Lcdr_nil
   854 000008D1 3C21                    	cmp al, T_pair
   855 000008D3 7462                    	je .Lcdr_pair
   856 000008D5 57                      	push rdi
   857 000008D6 48BF-                   	mov rdi, fmt_dotted_pair
   857 000008D8 [6602000000000000] 
   858 000008E0 B800000000              	mov rax, 0
   859                                          ENTER
    44 000008E5 C8000000            <1>  enter 0, 0
    45 000008E9 4883E4F0            <1>  and rsp, ~15
   860 000008ED E8(00000000)            	call printf
   861                                          LEAVE
    49 000008F2 C9                  <1>  leave
   862 000008F3 5F                      	pop rdi
   863 000008F4 E87AFDFFFF              	call print_sexpr
   864 000008F9 48BF-                   	mov rdi, fmt_rparen
   864 000008FB [6A02000000000000] 
   865 00000903 B800000000              	mov rax, 0
   866                                          ENTER
    44 00000908 C8000000            <1>  enter 0, 0
    45 0000090C 4883E4F0            <1>  and rsp, ~15
   867 00000910 E8(00000000)            	call printf
   868                                          LEAVE
    49 00000915 C9                  <1>  leave
   869 00000916 C9                      	leave
   870 00000917 C3                      	ret
   871                                  
   872                                  .Lcdr_nil:
   873 00000918 48BF-                   	mov rdi, fmt_rparen
   873 0000091A [6A02000000000000] 
   874 00000922 B800000000              	mov rax, 0
   875                                          ENTER
    44 00000927 C8000000            <1>  enter 0, 0
    45 0000092B 4883E4F0            <1>  and rsp, ~15
   876 0000092F E8(00000000)            	call printf
   877                                          LEAVE
    49 00000934 C9                  <1>  leave
   878 00000935 C9                      	leave
   879 00000936 C3                      	ret
   880                                  
   881                                  .Lcdr_pair:
   882 00000937 57                      	push rdi
   883 00000938 48BF-                   	mov rdi, fmt_space
   883 0000093A [6C02000000000000] 
   884 00000942 B800000000              	mov rax, 0
   885                                          ENTER
    44 00000947 C8000000            <1>  enter 0, 0
    45 0000094B 4883E4F0            <1>  and rsp, ~15
   886 0000094F E8(00000000)            	call printf
   887                                          LEAVE
    49 00000954 C9                  <1>  leave
   888 00000955 488B3C24                	mov rdi, qword [rsp]
   889 00000959 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   890 0000095D E811FDFFFF              	call print_sexpr
   891 00000962 5F                      	pop rdi
   892 00000963 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   893 00000967 E95FFFFFFF              	jmp .Lcdr
   894                                  
   895                                  .Lvector:
   896 0000096C 488B4701                	mov rax, qword [rdi + 1] ; length
   897 00000970 4883F800                	cmp rax, 0
   898 00000974 0F8484000000            	je .Lvector_empty
   899 0000097A 57                      	push rdi
   900 0000097B 48BF-                   	mov rdi, fmt_vector
   900 0000097D [7202000000000000] 
   901 00000985 B800000000              	mov rax, 0
   902                                          ENTER
    44 0000098A C8000000            <1>  enter 0, 0
    45 0000098E 4883E4F0            <1>  and rsp, ~15
   903 00000992 E8(00000000)            	call printf
   904                                          LEAVE
    49 00000997 C9                  <1>  leave
   905 00000998 488B3C24                	mov rdi, qword [rsp]
   906 0000099C FF7701                  	push qword [rdi + 1]
   907 0000099F 6A01                    	push 1
   908 000009A1 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   909 000009A5 E8C9FCFFFF              	call print_sexpr
   910                                  .Lvector_loop:
   911                                  	; [rsp] index
   912                                  	; [rsp + 8*1] limit
   913                                  	; [rsp + 8*2] vector
   914 000009AA 488B0424                	mov rax, qword [rsp]
   915 000009AE 483B442408              	cmp rax, qword [rsp + 8*1]
   916 000009B3 7436                    	je .Lvector_end
   917 000009B5 48BF-                   	mov rdi, fmt_space
   917 000009B7 [6C02000000000000] 
   918 000009BF B800000000              	mov rax, 0
   919                                          ENTER
    44 000009C4 C8000000            <1>  enter 0, 0
    45 000009C8 4883E4F0            <1>  and rsp, ~15
   920 000009CC E8(00000000)            	call printf
   921                                          LEAVE
    49 000009D1 C9                  <1>  leave
   922 000009D2 488B0424                	mov rax, qword [rsp]
   923 000009D6 488B5C2410              	mov rbx, qword [rsp + 8*2]
   924 000009DB 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   925 000009E0 E88EFCFFFF              	call print_sexpr
   926 000009E5 48FF0424                	inc qword [rsp]
   927 000009E9 EBBF                    	jmp .Lvector_loop
   928                                  
   929                                  .Lvector_end:
   930 000009EB 4883C418                	add rsp, 8*3
   931 000009EF 48BF-                   	mov rdi, fmt_rparen
   931 000009F1 [6A02000000000000] 
   932 000009F9 E9F3010000              	jmp .Lemit	
   933                                  
   934                                  .Lvector_empty:
   935 000009FE 48BF-                   	mov rdi, fmt_empty_vector
   935 00000A00 [6E02000000000000] 
   936 00000A08 E9E4010000              	jmp .Lemit
   937                                  
   938                                  .Lreal:
   939 00000A0D FF7701                  	push qword [rdi + 1]
   940 00000A10 F20F100424              	movsd xmm0, qword [rsp]
   941 00000A15 4883C408                	add rsp, 8*1
   942 00000A19 48BF-                   	mov rdi, fmt_real
   942 00000A1B [7502000000000000] 
   943 00000A23 B801000000              	mov rax, 1
   944                                  	ENTER
    44 00000A28 C8000000            <1>  enter 0, 0
    45 00000A2C 4883E4F0            <1>  and rsp, ~15
   945 00000A30 E8(00000000)            	call printf
   946                                  	LEAVE
    49 00000A35 C9                  <1>  leave
   947 00000A36 E9CB010000              	jmp .Lend
   948                                  
   949                                  .Lfraction:
   950 00000A3B 488B7701                	mov rsi, qword [rdi + 1]
   951 00000A3F 488B5709                	mov rdx, qword [rdi + 1 + 8]
   952 00000A43 4883FE00                	cmp rsi, 0
   953 00000A47 7415                    	je .Lrat_zero
   954 00000A49 4883FA01                	cmp rdx, 1
   955 00000A4D 741E                    	je .Lrat_int
   956 00000A4F 48BF-                   	mov rdi, fmt_fraction
   956 00000A51 [7802000000000000] 
   957 00000A59 E993010000              	jmp .Lemit
   958                                  
   959                                  .Lrat_zero:
   960 00000A5E 48BF-                   	mov rdi, fmt_zero
   960 00000A60 [8002000000000000] 
   961 00000A68 E984010000              	jmp .Lemit
   962                                  
   963                                  .Lrat_int:
   964 00000A6D 48BF-                   	mov rdi, fmt_int
   964 00000A6F [8202000000000000] 
   965 00000A77 E975010000              	jmp .Lemit
   966                                  
   967                                  .Linteger:
   968 00000A7C 488B7701                	mov rsi, qword [rdi + 1]
   969 00000A80 48BF-                   	mov rdi, fmt_int
   969 00000A82 [8202000000000000] 
   970 00000A8A E962010000              	jmp .Lemit
   971                                  
   972                                  .Lstring:
   973 00000A8F 488D4709                	lea rax, [rdi + 1 + 8]
   974 00000A93 50                      	push rax
   975 00000A94 FF7701                  	push qword [rdi + 1]
   976 00000A97 48BF-                   	mov rdi, fmt_dquote
   976 00000A99 [CB02000000000000] 
   977 00000AA1 B800000000              	mov rax, 0
   978                                  	ENTER
    44 00000AA6 C8000000            <1>  enter 0, 0
    45 00000AAA 4883E4F0            <1>  and rsp, ~15
   979 00000AAE E8(00000000)            	call printf
   980                                  	LEAVE
    49 00000AB3 C9                  <1>  leave
   981                                  .Lstring_loop:
   982                                  	; qword [rsp]: limit
   983                                  	; qword [rsp + 8*1]: char *
   984 00000AB4 48833C2400              	cmp qword [rsp], 0
   985 00000AB9 0F84EF000000            	je .Lstring_end
   986 00000ABF 488B442408              	mov rax, qword [rsp + 8*1]
   987 00000AC4 8A00                    	mov al, byte [rax]
   988 00000AC6 4825FF000000            	and rax, 255
   989 00000ACC 3C07                    	cmp al, 7
   990 00000ACE 745D                            je .Lstring_char_7
   991 00000AD0 3C08                            cmp al, 8
   992 00000AD2 7465                            je .Lstring_char_8
   993 00000AD4 3C09                            cmp al, 9
   994 00000AD6 746D                            je .Lstring_char_9
   995 00000AD8 3C0A                            cmp al, 10
   996 00000ADA 7475                            je .Lstring_char_10
   997 00000ADC 3C0B                            cmp al, 11
   998 00000ADE 747D                            je .Lstring_char_11
   999 00000AE0 3C0C                            cmp al, 12
  1000 00000AE2 0F8481000000                    je .Lstring_char_12
  1001 00000AE8 3C0D                            cmp al, 13
  1002 00000AEA 0F8485000000                    je .Lstring_char_13
  1003 00000AF0 3C22                            cmp al, 34
  1004 00000AF2 0F8489000000                    je .Lstring_char_34
  1005 00000AF8 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  1007 00000AFA 3C20                            cmp al, ' '
  1008 00000AFC 0F8C9A000000                    jl .Lstring_char_hex
  1009 00000B02 48BF-                           mov rdi, fmt_string_char
  1009 00000B04 [CD02000000000000] 
  1010 00000B0C 4889C6                          mov rsi, rax
  1011                                  .Lstring_char_emit:
  1012 00000B0F B800000000                      mov rax, 0
  1013                                          ENTER
    44 00000B14 C8000000            <1>  enter 0, 0
    45 00000B18 4883E4F0            <1>  and rsp, ~15
  1014 00000B1C E8(00000000)                    call printf
  1015                                          LEAVE
    49 00000B21 C9                  <1>  leave
  1016 00000B22 48FF0C24                        dec qword [rsp]
  1017 00000B26 48FF442408                      inc qword [rsp + 8*1]
  1018 00000B2B EB87                            jmp .Lstring_loop
  1019                                  
  1020                                  .Lstring_char_7:
  1021 00000B2D 48BF-                           mov rdi, fmt_string_char_7
  1021 00000B2F [D002000000000000] 
  1022 00000B37 EBD6                            jmp .Lstring_char_emit
  1023                                  
  1024                                  .Lstring_char_8:
  1025 00000B39 48BF-                           mov rdi, fmt_string_char_8
  1025 00000B3B [D302000000000000] 
  1026 00000B43 EBCA                            jmp .Lstring_char_emit
  1027                                          
  1028                                  .Lstring_char_9:
  1029 00000B45 48BF-                           mov rdi, fmt_string_char_9
  1029 00000B47 [D602000000000000] 
  1030 00000B4F EBBE                            jmp .Lstring_char_emit
  1031                                  
  1032                                  .Lstring_char_10:
  1033 00000B51 48BF-                           mov rdi, fmt_string_char_10
  1033 00000B53 [D902000000000000] 
  1034 00000B5B EBB2                            jmp .Lstring_char_emit
  1035                                  
  1036                                  .Lstring_char_11:
  1037 00000B5D 48BF-                           mov rdi, fmt_string_char_11
  1037 00000B5F [DC02000000000000] 
  1038 00000B67 EBA6                            jmp .Lstring_char_emit
  1039                                  
  1040                                  .Lstring_char_12:
  1041 00000B69 48BF-                           mov rdi, fmt_string_char_12
  1041 00000B6B [DF02000000000000] 
  1042 00000B73 EB9A                            jmp .Lstring_char_emit
  1043                                  
  1044                                  .Lstring_char_13:
  1045 00000B75 48BF-                           mov rdi, fmt_string_char_13
  1045 00000B77 [E202000000000000] 
  1046 00000B7F EB8E                            jmp .Lstring_char_emit
  1047                                  
  1048                                  .Lstring_char_34:
  1049 00000B81 48BF-                           mov rdi, fmt_string_char_34
  1049 00000B83 [E502000000000000] 
  1050 00000B8B EB82                            jmp .Lstring_char_emit
  1051                                  
  1052                                  .Lstring_char_92:
  1053 00000B8D 48BF-                           mov rdi, fmt_string_char_92
  1053 00000B8F [E802000000000000] 
  1054 00000B97 E973FFFFFF                      jmp .Lstring_char_emit
  1055                                  
  1056                                  .Lstring_char_hex:
  1057 00000B9C 48BF-                           mov rdi, fmt_string_char_hex
  1057 00000B9E [EB02000000000000] 
  1058 00000BA6 4889C6                          mov rsi, rax
  1059 00000BA9 E961FFFFFF                      jmp .Lstring_char_emit        
  1060                                  
  1061                                  .Lstring_end:
  1062 00000BAE 4883C410                	add rsp, 8 * 2
  1063 00000BB2 48BF-                   	mov rdi, fmt_dquote
  1063 00000BB4 [CB02000000000000] 
  1064 00000BBC EB33                    	jmp .Lemit
  1065                                  
  1066                                  .Lunknown_sexpr_type:
  1067 00000BBE 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
  1067 00000BC0 [8602000000000000] 
  1068 00000BC8 4825FF000000            	and rax, 255
  1069 00000BCE 4889C2                  	mov rdx, rax
  1070 00000BD1 4889F9                  	mov rcx, rdi
  1071 00000BD4 488B3C25[00000000]      	mov rdi, qword [stderr]
  1072 00000BDC B800000000              	mov rax, 0
  1073                                          ENTER
    44 00000BE1 C8000000            <1>  enter 0, 0
    45 00000BE5 4883E4F0            <1>  and rsp, ~15
  1074 00000BE9 E8(00000000)            	call fprintf
  1075                                          LEAVE
    49 00000BEE C9                  <1>  leave
  1076 00000BEF C9                              leave
  1077 00000BF0 C3                              ret
  1078                                  
  1079                                  .Lemit:
  1080 00000BF1 B800000000              	mov rax, 0
  1081                                          ENTER
    44 00000BF6 C8000000            <1>  enter 0, 0
    45 00000BFA 4883E4F0            <1>  and rsp, ~15
  1082 00000BFE E8(00000000)            	call printf
  1083                                          LEAVE
    49 00000C03 C9                  <1>  leave
  1084 00000C04 EB00                    	jmp .Lend
  1085                                  
  1086                                  .Lend:
  1087                                  	LEAVE
    49 00000C06 C9                  <1>  leave
  1088 00000C07 C3                      	ret
  1089                                  
  1090                                  ;;; rdi: address of free variable
  1091                                  ;;; rsi: address of code-pointer
  1092                                  bind_primitive:
  1093 00000C08 C8000000                        enter 0, 0
  1094 00000C0C 57                              push rdi
  1095 00000C0D BF11000000                      mov rdi, (1 + 8 + 8)
  1096 00000C12 E8DBF7FFFF                      call malloc
  1097 00000C17 5F                              pop rdi
  1098 00000C18 C60004                          mov byte [rax], T_closure
  1099 00000C1B 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1100 00000C23 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1101 00000C27 488907                          mov qword [rdi], rax
  1102 00000C2A 48B8-                           mov rax, sob_void
  1102 00000C2C [0000000000000000] 
  1103 00000C34 C9                              leave
  1104 00000C35 C3                              ret
  1105                                  
  1106                                  L_code_ptr_ash:
  1107 00000C36 C8000000                        enter 0, 0
  1108 00000C3A 48837D1802                      cmp COUNT, 2
  1109 00000C3F 0F8510140000                    jne L_error_arg_count_2
  1110 00000C45 488B7D20                        mov rdi, PARAM(0)
  1111                                          assert_integer(rdi)
    53 00000C49 803F11              <1>  cmp byte [%1], %2
    54 00000C4C 0F85A2140000        <1>  jne L_error_incorrect_type
  1112 00000C52 488B4D28                        mov rcx, PARAM(1)
  1113                                          assert_integer(rcx)
    53 00000C56 803911              <1>  cmp byte [%1], %2
    54 00000C59 0F8595140000        <1>  jne L_error_incorrect_type
  1114 00000C5F 488B7F01                        mov rdi, qword [rdi + 1]
  1115 00000C63 488B4901                        mov rcx, qword [rcx + 1]
  1116 00000C67 4883F900                        cmp rcx, 0
  1117 00000C6B 7C0F                            jl .L_negative
  1118                                  .L_loop_positive:
  1119 00000C6D 4883F900                        cmp rcx, 0
  1120 00000C71 741B                            je .L_exit
  1121 00000C73 48D3E7                          sal rdi, cl
  1122 00000C76 48C1E908                        shr rcx, 8
  1123 00000C7A EBF1                            jmp .L_loop_positive
  1124                                  .L_negative:
  1125 00000C7C 48F7D9                          neg rcx
  1126                                  .L_loop_negative:
  1127 00000C7F 4883F900                        cmp rcx, 0
  1128 00000C83 7409                            je .L_exit
  1129 00000C85 48D3FF                          sar rdi, cl
  1130 00000C88 48C1E908                        shr rcx, 8
  1131 00000C8C EBF1                            jmp .L_loop_negative
  1132                                  .L_exit:
  1133 00000C8E E8DC120000                      call make_integer
  1134 00000C93 C9                              leave
  1135 00000C94 C22000                          ret AND_KILL_FRAME(2)
  1136                                  
  1137                                  L_code_ptr_logand:
  1138 00000C97 C8000000                        enter 0, 0
  1139 00000C9B 48837D1802                      cmp COUNT, 2
  1140 00000CA0 0F85AF130000                    jne L_error_arg_count_2
  1141 00000CA6 4C8B4520                        mov r8, PARAM(0)
  1142                                          assert_integer(r8)
    53 00000CAA 41803811            <1>  cmp byte [%1], %2
    54 00000CAE 0F8540140000        <1>  jne L_error_incorrect_type
  1143 00000CB4 4C8B4D28                        mov r9, PARAM(1)
  1144                                          assert_integer(r9)
    53 00000CB8 41803911            <1>  cmp byte [%1], %2
    54 00000CBC 0F8532140000        <1>  jne L_error_incorrect_type
  1145 00000CC2 498B7801                        mov rdi, qword [r8 + 1]
  1146 00000CC6 49237901                        and rdi, qword [r9 + 1]
  1147 00000CCA E8A0120000                      call make_integer
  1148 00000CCF C9                              leave
  1149 00000CD0 C22000                          ret AND_KILL_FRAME(2)
  1150                                  
  1151                                  L_code_ptr_logor:
  1152 00000CD3 C8000000                        enter 0, 0
  1153 00000CD7 48837D1802                      cmp COUNT, 2
  1154 00000CDC 0F8573130000                    jne L_error_arg_count_2
  1155 00000CE2 4C8B4520                        mov r8, PARAM(0)
  1156                                          assert_integer(r8)
    53 00000CE6 41803811            <1>  cmp byte [%1], %2
    54 00000CEA 0F8504140000        <1>  jne L_error_incorrect_type
  1157 00000CF0 4C8B4D28                        mov r9, PARAM(1)
  1158                                          assert_integer(r9)
    53 00000CF4 41803911            <1>  cmp byte [%1], %2
    54 00000CF8 0F85F6130000        <1>  jne L_error_incorrect_type
  1159 00000CFE 498B7801                        mov rdi, qword [r8 + 1]
  1160 00000D02 490B7901                        or rdi, qword [r9 + 1]
  1161 00000D06 E864120000                      call make_integer
  1162 00000D0B C9                              leave
  1163 00000D0C C22000                          ret AND_KILL_FRAME(2)
  1164                                  
  1165                                  L_code_ptr_logxor:
  1166 00000D0F C8000000                        enter 0, 0
  1167 00000D13 48837D1802                      cmp COUNT, 2
  1168 00000D18 0F8537130000                    jne L_error_arg_count_2
  1169 00000D1E 4C8B4520                        mov r8, PARAM(0)
  1170                                          assert_integer(r8)
    53 00000D22 41803811            <1>  cmp byte [%1], %2
    54 00000D26 0F85C8130000        <1>  jne L_error_incorrect_type
  1171 00000D2C 4C8B4D28                        mov r9, PARAM(1)
  1172                                          assert_integer(r9)
    53 00000D30 41803911            <1>  cmp byte [%1], %2
    54 00000D34 0F85BA130000        <1>  jne L_error_incorrect_type
  1173 00000D3A 498B7801                        mov rdi, qword [r8 + 1]
  1174 00000D3E 49337901                        xor rdi, qword [r9 + 1]
  1175 00000D42 E828120000                      call make_integer
  1176                                          LEAVE
    49 00000D47 C9                  <1>  leave
  1177 00000D48 C22000                          ret AND_KILL_FRAME(2)
  1178                                  
  1179                                  L_code_ptr_lognot:
  1180 00000D4B C8000000                        enter 0, 0
  1181 00000D4F 48837D1801                      cmp COUNT, 1
  1182 00000D54 0F85C6120000                    jne L_error_arg_count_1
  1183 00000D5A 4C8B4520                        mov r8, PARAM(0)
  1184                                          assert_integer(r8)
    53 00000D5E 41803811            <1>  cmp byte [%1], %2
    54 00000D62 0F858C130000        <1>  jne L_error_incorrect_type
  1185 00000D68 498B7801                        mov rdi, qword [r8 + 1]
  1186 00000D6C 48F7D7                          not rdi
  1187 00000D6F E8FB110000                      call make_integer
  1188 00000D74 C9                              leave
  1189 00000D75 C21800                          ret AND_KILL_FRAME(1)
  1190                                  
  1191                                  L_code_ptr_bin_apply:
  1192                                  ;;; fill in for final project!
  1193                                  
  1194                                  L_code_ptr_is_null:
  1195 00000D78 C8000000                        enter 0, 0
  1196 00000D7C 48837D1801                      cmp COUNT, 1
  1197 00000D81 0F8599120000                    jne L_error_arg_count_1
  1198 00000D87 488B4520                        mov rax, PARAM(0)
  1199 00000D8B 803801                          cmp byte [rax], T_nil
  1200 00000D8E 750C                            jne .L_false
  1201 00000D90 48B8-                           mov rax, sob_boolean_true
  1201 00000D92 [0300000000000000] 
  1202 00000D9A EB0A                            jmp .L_end
  1203                                  .L_false:
  1204 00000D9C 48B8-                           mov rax, sob_boolean_false
  1204 00000D9E [0200000000000000] 
  1205                                  .L_end:
  1206 00000DA6 C9                              leave
  1207 00000DA7 C21800                          ret AND_KILL_FRAME(1)
  1208                                  
  1209                                  L_code_ptr_is_pair:
  1210 00000DAA C8000000                        enter 0, 0
  1211 00000DAE 48837D1801                      cmp COUNT, 1
  1212 00000DB3 0F8567120000                    jne L_error_arg_count_1
  1213 00000DB9 488B4520                        mov rax, PARAM(0)
  1214 00000DBD 803821                          cmp byte [rax], T_pair
  1215 00000DC0 750C                            jne .L_false
  1216 00000DC2 48B8-                           mov rax, sob_boolean_true
  1216 00000DC4 [0300000000000000] 
  1217 00000DCC EB0A                            jmp .L_end
  1218                                  .L_false:
  1219 00000DCE 48B8-                           mov rax, sob_boolean_false
  1219 00000DD0 [0200000000000000] 
  1220                                  .L_end:
  1221 00000DD8 C9                              leave
  1222 00000DD9 C21800                          ret AND_KILL_FRAME(1)
  1223                                          
  1224                                  L_code_ptr_is_void:
  1225 00000DDC C8000000                        enter 0, 0
  1226 00000DE0 48837D1801                      cmp COUNT, 1
  1227 00000DE5 0F8535120000                    jne L_error_arg_count_1
  1228 00000DEB 488B4520                        mov rax, PARAM(0)
  1229 00000DEF 803800                          cmp byte [rax], T_void
  1230 00000DF2 750C                            jne .L_false
  1231 00000DF4 48B8-                           mov rax, sob_boolean_true
  1231 00000DF6 [0300000000000000] 
  1232 00000DFE EB0A                            jmp .L_end
  1233                                  .L_false:
  1234 00000E00 48B8-                           mov rax, sob_boolean_false
  1234 00000E02 [0200000000000000] 
  1235                                  .L_end:
  1236 00000E0A C9                              leave
  1237 00000E0B C21800                          ret AND_KILL_FRAME(1)
  1238                                  
  1239                                  L_code_ptr_is_char:
  1240 00000E0E C8000000                        enter 0, 0
  1241 00000E12 48837D1801                      cmp COUNT, 1
  1242 00000E17 0F8503120000                    jne L_error_arg_count_1
  1243 00000E1D 488B4520                        mov rax, PARAM(0)
  1244 00000E21 803802                          cmp byte [rax], T_char
  1245 00000E24 750C                            jne .L_false
  1246 00000E26 48B8-                           mov rax, sob_boolean_true
  1246 00000E28 [0300000000000000] 
  1247 00000E30 EB0A                            jmp .L_end
  1248                                  .L_false:
  1249 00000E32 48B8-                           mov rax, sob_boolean_false
  1249 00000E34 [0200000000000000] 
  1250                                  .L_end:
  1251 00000E3C C9                              leave
  1252 00000E3D C21800                          ret AND_KILL_FRAME(1)
  1253                                  
  1254                                  L_code_ptr_is_string:
  1255 00000E40 C8000000                        enter 0, 0
  1256 00000E44 48837D1801                      cmp COUNT, 1
  1257 00000E49 0F85D1110000                    jne L_error_arg_count_1
  1258 00000E4F 488B4520                        mov rax, PARAM(0)
  1259 00000E53 803803                          cmp byte [rax], T_string
  1260 00000E56 750C                            jne .L_false
  1261 00000E58 48B8-                           mov rax, sob_boolean_true
  1261 00000E5A [0300000000000000] 
  1262 00000E62 EB0A                            jmp .L_end
  1263                                  .L_false:
  1264 00000E64 48B8-                           mov rax, sob_boolean_false
  1264 00000E66 [0200000000000000] 
  1265                                  .L_end:
  1266 00000E6E C9                              leave
  1267 00000E6F C21800                          ret AND_KILL_FRAME(1)
  1268                                  
  1269                                  L_code_ptr_is_symbol:
  1270 00000E72 C8000000                        enter 0, 0
  1271 00000E76 48837D1801                      cmp COUNT, 1
  1272 00000E7B 0F859F110000                    jne L_error_arg_count_1
  1273 00000E81 4C8B4520                        mov r8, PARAM(0)
  1274 00000E85 41802040                        and byte [r8], T_symbol
  1275 00000E89 740C                            jz .L_false
  1276 00000E8B 48B8-                           mov rax, sob_boolean_true
  1276 00000E8D [0300000000000000] 
  1277 00000E95 EB0A                            jmp .L_exit
  1278                                  .L_false:
  1279 00000E97 48B8-                           mov rax, sob_boolean_false
  1279 00000E99 [0200000000000000] 
  1280                                  .L_exit:
  1281 00000EA1 C9                              leave
  1282 00000EA2 C21800                          ret AND_KILL_FRAME(1)
  1283                                  
  1284                                  L_code_ptr_is_uninterned_symbol:
  1285 00000EA5 C8000000                        enter 0, 0
  1286 00000EA9 48837D1801                      cmp COUNT, 1
  1287 00000EAE 0F856C110000                    jne L_error_arg_count_1
  1288 00000EB4 4C8B4520                        mov r8, PARAM(0)
  1289 00000EB8 41803842                        cmp byte [r8], T_uninterned_symbol
  1290 00000EBC 750C                            jne .L_false
  1291 00000EBE 48B8-                           mov rax, sob_boolean_true
  1291 00000EC0 [0300000000000000] 
  1292 00000EC8 EB0A                            jmp .L_exit
  1293                                  .L_false:
  1294 00000ECA 48B8-                           mov rax, sob_boolean_false
  1294 00000ECC [0200000000000000] 
  1295                                  .L_exit:
  1296 00000ED4 C9                              leave
  1297 00000ED5 C21800                          ret AND_KILL_FRAME(1)
  1298                                  
  1299                                  L_code_ptr_is_interned_symbol:
  1300 00000ED8 C8000000                        enter 0, 0
  1301 00000EDC 48837D1801                      cmp COUNT, 1
  1302 00000EE1 0F8539110000                    jne L_error_arg_count_1
  1303 00000EE7 488B4520                        mov rax, PARAM(0)
  1304 00000EEB 803841                          cmp byte [rax], T_interned_symbol
  1305 00000EEE 750C                            jne .L_false
  1306 00000EF0 48B8-                           mov rax, sob_boolean_true
  1306 00000EF2 [0300000000000000] 
  1307 00000EFA EB0A                            jmp .L_end
  1308                                  .L_false:
  1309 00000EFC 48B8-                           mov rax, sob_boolean_false
  1309 00000EFE [0200000000000000] 
  1310                                  .L_end:
  1311 00000F06 C9                              leave
  1312 00000F07 C21800                          ret AND_KILL_FRAME(1)
  1313                                  
  1314                                  L_code_ptr_gensym:
  1315 00000F0A C8000000                        enter 0, 0
  1316 00000F0E 48837D1800                      cmp COUNT, 0
  1317 00000F13 0F85D2100000                    jne L_error_arg_count_0
  1318 00000F19 48FF0425[F1020000]              inc qword [gensym_count]
  1319 00000F21 BF09000000                      mov rdi, (1 + 8)
  1320 00000F26 E8C7F4FFFF                      call malloc
  1321 00000F2B C60042                          mov byte [rax], T_uninterned_symbol
  1322 00000F2E 488B0C25[F1020000]              mov rcx, qword [gensym_count]
  1323 00000F36 48894801                        mov qword [rax + 1], rcx
  1324 00000F3A C9                              leave
  1325 00000F3B C21000                          ret AND_KILL_FRAME(0)
  1326                                  
  1327                                  L_code_ptr_is_vector:
  1328 00000F3E C8000000                        enter 0, 0
  1329 00000F42 48837D1801                      cmp COUNT, 1
  1330 00000F47 0F85D3100000                    jne L_error_arg_count_1
  1331 00000F4D 488B4520                        mov rax, PARAM(0)
  1332 00000F51 803822                          cmp byte [rax], T_vector
  1333 00000F54 750C                            jne .L_false
  1334 00000F56 48B8-                           mov rax, sob_boolean_true
  1334 00000F58 [0300000000000000] 
  1335 00000F60 EB0A                            jmp .L_end
  1336                                  .L_false:
  1337 00000F62 48B8-                           mov rax, sob_boolean_false
  1337 00000F64 [0200000000000000] 
  1338                                  .L_end:
  1339 00000F6C C9                              leave
  1340 00000F6D C21800                          ret AND_KILL_FRAME(1)
  1341                                  
  1342                                  L_code_ptr_is_closure:
  1343 00000F70 C8000000                        enter 0, 0
  1344 00000F74 48837D1801                      cmp COUNT, 1
  1345 00000F79 0F85A1100000                    jne L_error_arg_count_1
  1346 00000F7F 488B4520                        mov rax, PARAM(0)
  1347 00000F83 803804                          cmp byte [rax], T_closure
  1348 00000F86 750C                            jne .L_false
  1349 00000F88 48B8-                           mov rax, sob_boolean_true
  1349 00000F8A [0300000000000000] 
  1350 00000F92 EB0A                            jmp .L_end
  1351                                  .L_false:
  1352 00000F94 48B8-                           mov rax, sob_boolean_false
  1352 00000F96 [0200000000000000] 
  1353                                  .L_end:
  1354 00000F9E C9                              leave
  1355 00000F9F C21800                          ret AND_KILL_FRAME(1)
  1356                                  
  1357                                  L_code_ptr_is_real:
  1358 00000FA2 C8000000                        enter 0, 0
  1359 00000FA6 48837D1801                      cmp COUNT, 1
  1360 00000FAB 0F856F100000                    jne L_error_arg_count_1
  1361 00000FB1 488B4520                        mov rax, PARAM(0)
  1362 00000FB5 803813                          cmp byte [rax], T_real
  1363 00000FB8 750C                            jne .L_false
  1364 00000FBA 48B8-                           mov rax, sob_boolean_true
  1364 00000FBC [0300000000000000] 
  1365 00000FC4 EB0A                            jmp .L_end
  1366                                  .L_false:
  1367 00000FC6 48B8-                           mov rax, sob_boolean_false
  1367 00000FC8 [0200000000000000] 
  1368                                  .L_end:
  1369 00000FD0 C9                              leave
  1370 00000FD1 C21800                          ret AND_KILL_FRAME(1)
  1371                                  
  1372                                  L_code_ptr_is_fraction:
  1373 00000FD4 C8000000                        enter 0, 0
  1374 00000FD8 48837D1801                      cmp COUNT, 1
  1375 00000FDD 0F853D100000                    jne L_error_arg_count_1
  1376 00000FE3 488B4520                        mov rax, PARAM(0)
  1377 00000FE7 803812                          cmp byte [rax], T_fraction
  1378 00000FEA 750C                            jne .L_false
  1379 00000FEC 48B8-                           mov rax, sob_boolean_true
  1379 00000FEE [0300000000000000] 
  1380 00000FF6 EB0A                            jmp .L_end
  1381                                  .L_false:
  1382 00000FF8 48B8-                           mov rax, sob_boolean_false
  1382 00000FFA [0200000000000000] 
  1383                                  .L_end:
  1384 00001002 C9                              leave
  1385 00001003 C21800                          ret AND_KILL_FRAME(1)
  1386                                  
  1387                                  L_code_ptr_is_boolean:
  1388 00001006 C8000000                        enter 0, 0
  1389 0000100A 48837D1801                      cmp COUNT, 1
  1390 0000100F 0F850B100000                    jne L_error_arg_count_1
  1391 00001015 488B4520                        mov rax, PARAM(0)
  1392 00001019 8A18                            mov bl, byte [rax]
  1393 0000101B 80E308                          and bl, T_boolean
  1394 0000101E 740C                            je .L_false
  1395 00001020 48B8-                           mov rax, sob_boolean_true
  1395 00001022 [0300000000000000] 
  1396 0000102A EB0A                            jmp .L_end
  1397                                  .L_false:
  1398 0000102C 48B8-                           mov rax, sob_boolean_false
  1398 0000102E [0200000000000000] 
  1399                                  .L_end:
  1400 00001036 C9                              leave
  1401 00001037 C21800                          ret AND_KILL_FRAME(1)
  1402                                          
  1403                                  L_code_ptr_is_boolean_false:
  1404 0000103A C8000000                        enter 0, 0
  1405 0000103E 48837D1801                      cmp COUNT, 1
  1406 00001043 0F85D70F0000                    jne L_error_arg_count_1
  1407 00001049 488B4520                        mov rax, PARAM(0)
  1408 0000104D 8A18                            mov bl, byte [rax]
  1409 0000104F 80FB09                          cmp bl, T_boolean_false
  1410 00001052 750C                            jne .L_false
  1411 00001054 48B8-                           mov rax, sob_boolean_true
  1411 00001056 [0300000000000000] 
  1412 0000105E EB0A                            jmp .L_end
  1413                                  .L_false:
  1414 00001060 48B8-                           mov rax, sob_boolean_false
  1414 00001062 [0200000000000000] 
  1415                                  .L_end:
  1416 0000106A C9                              leave
  1417 0000106B C21800                          ret AND_KILL_FRAME(1)
  1418                                  
  1419                                  L_code_ptr_is_boolean_true:
  1420 0000106E C8000000                        enter 0, 0
  1421 00001072 48837D1801                      cmp COUNT, 1
  1422 00001077 0F85A30F0000                    jne L_error_arg_count_1
  1423 0000107D 488B4520                        mov rax, PARAM(0)
  1424 00001081 8A18                            mov bl, byte [rax]
  1425 00001083 80FB0A                          cmp bl, T_boolean_true
  1426 00001086 750C                            jne .L_false
  1427 00001088 48B8-                           mov rax, sob_boolean_true
  1427 0000108A [0300000000000000] 
  1428 00001092 EB0A                            jmp .L_end
  1429                                  .L_false:
  1430 00001094 48B8-                           mov rax, sob_boolean_false
  1430 00001096 [0200000000000000] 
  1431                                  .L_end:
  1432 0000109E C9                              leave
  1433 0000109F C21800                          ret AND_KILL_FRAME(1)
  1434                                  
  1435                                  L_code_ptr_is_number:
  1436 000010A2 C8000000                        enter 0, 0
  1437 000010A6 48837D1801                      cmp COUNT, 1
  1438 000010AB 0F856F0F0000                    jne L_error_arg_count_1
  1439 000010B1 488B4520                        mov rax, PARAM(0)
  1440 000010B5 8A18                            mov bl, byte [rax]
  1441 000010B7 80E310                          and bl, T_number
  1442 000010BA 740C                            jz .L_false
  1443 000010BC 48B8-                           mov rax, sob_boolean_true
  1443 000010BE [0300000000000000] 
  1444 000010C6 EB0A                            jmp .L_end
  1445                                  .L_false:
  1446 000010C8 48B8-                           mov rax, sob_boolean_false
  1446 000010CA [0200000000000000] 
  1447                                  .L_end:
  1448 000010D2 C9                              leave
  1449 000010D3 C21800                          ret AND_KILL_FRAME(1)
  1450                                          
  1451                                  L_code_ptr_is_collection:
  1452 000010D6 C8000000                        enter 0, 0
  1453 000010DA 48837D1801                      cmp COUNT, 1
  1454 000010DF 0F853B0F0000                    jne L_error_arg_count_1
  1455 000010E5 488B4520                        mov rax, PARAM(0)
  1456 000010E9 8A18                            mov bl, byte [rax]
  1457 000010EB 80E320                          and bl, T_collection
  1458 000010EE 740C                            je .L_false
  1459 000010F0 48B8-                           mov rax, sob_boolean_true
  1459 000010F2 [0300000000000000] 
  1460 000010FA EB0A                            jmp .L_end
  1461                                  .L_false:
  1462 000010FC 48B8-                           mov rax, sob_boolean_false
  1462 000010FE [0200000000000000] 
  1463                                  .L_end:
  1464 00001106 C9                              leave
  1465 00001107 C21800                          ret AND_KILL_FRAME(1)
  1466                                  
  1467                                  L_code_ptr_cons:
  1468 0000110A C8000000                        enter 0, 0
  1469 0000110E 48837D1802                      cmp COUNT, 2
  1470 00001113 0F853C0F0000                    jne L_error_arg_count_2
  1471 00001119 BF11000000                      mov rdi, (1 + 8 + 8)
  1472 0000111E E8CFF2FFFF                      call malloc
  1473 00001123 C60021                          mov byte [rax], T_pair
  1474 00001126 488B5D20                        mov rbx, PARAM(0)
  1475 0000112A 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1476 0000112E 488B5D28                        mov rbx, PARAM(1)
  1477 00001132 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1478 00001136 C9                              leave
  1479 00001137 C22000                          ret AND_KILL_FRAME(2)
  1480                                  
  1481                                  L_code_ptr_display_sexpr:
  1482 0000113A C8000000                        enter 0, 0
  1483 0000113E 48837D1801                      cmp COUNT, 1
  1484 00001143 0F85D70E0000                    jne L_error_arg_count_1
  1485 00001149 488B7D20                        mov rdi, PARAM(0)
  1486 0000114D E821F5FFFF                      call print_sexpr
  1487 00001152 48B8-                           mov rax, sob_void
  1487 00001154 [0000000000000000] 
  1488 0000115C C9                              leave
  1489 0000115D C21800                          ret AND_KILL_FRAME(1)
  1490                                  
  1491                                  L_code_ptr_write_char:
  1492 00001160 C8000000                        enter 0, 0
  1493 00001164 48837D1801                      cmp COUNT, 1
  1494 00001169 0F85B10E0000                    jne L_error_arg_count_1
  1495 0000116F 488B4520                        mov rax, PARAM(0)
  1496                                          assert_char(rax)
    53 00001173 803802              <1>  cmp byte [%1], %2
    54 00001176 0F85780F0000        <1>  jne L_error_incorrect_type
  1497 0000117C 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1498 0000117F 4825FF000000                    and rax, 255
  1499 00001185 48BF-                           mov rdi, fmt_char
  1499 00001187 [F902000000000000] 
  1500 0000118F 4889C6                          mov rsi, rax
  1501 00001192 B800000000                      mov rax, 0
  1502                                          ENTER
    44 00001197 C8000000            <1>  enter 0, 0
    45 0000119B 4883E4F0            <1>  and rsp, ~15
  1503 0000119F E8(00000000)                    call printf
  1504                                          LEAVE
    49 000011A4 C9                  <1>  leave
  1505 000011A5 48B8-                           mov rax, sob_void
  1505 000011A7 [0000000000000000] 
  1506 000011AF C9                              leave
  1507 000011B0 C21800                          ret AND_KILL_FRAME(1)
  1508                                  
  1509                                  L_code_ptr_car:
  1510 000011B3 C8000000                        enter 0, 0
  1511 000011B7 48837D1801                      cmp COUNT, 1
  1512 000011BC 0F855E0E0000                    jne L_error_arg_count_1
  1513 000011C2 488B4520                        mov rax, PARAM(0)
  1514                                          assert_pair(rax)
    53 000011C6 803821              <1>  cmp byte [%1], %2
    54 000011C9 0F85250F0000        <1>  jne L_error_incorrect_type
  1515 000011CF 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1516 000011D3 C9                              leave
  1517 000011D4 C21800                          ret AND_KILL_FRAME(1)
  1518                                          
  1519                                  L_code_ptr_cdr:
  1520 000011D7 C8000000                        enter 0, 0
  1521 000011DB 48837D1801                      cmp COUNT, 1
  1522 000011E0 0F853A0E0000                    jne L_error_arg_count_1
  1523 000011E6 488B4520                        mov rax, PARAM(0)
  1524                                          assert_pair(rax)
    53 000011EA 803821              <1>  cmp byte [%1], %2
    54 000011ED 0F85010F0000        <1>  jne L_error_incorrect_type
  1525 000011F3 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1526 000011F7 C9                              leave
  1527 000011F8 C21800                          ret AND_KILL_FRAME(1)
  1528                                          
  1529                                  L_code_ptr_string_length:
  1530 000011FB C8000000                        enter 0, 0
  1531 000011FF 48837D1801                      cmp COUNT, 1
  1532 00001204 0F85160E0000                    jne L_error_arg_count_1
  1533 0000120A 488B4520                        mov rax, PARAM(0)
  1534                                          assert_string(rax)
    53 0000120E 803803              <1>  cmp byte [%1], %2
    54 00001211 0F85DD0E0000        <1>  jne L_error_incorrect_type
  1535 00001217 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1536 0000121B E84F0D0000                      call make_integer
  1537 00001220 C9                              leave
  1538 00001221 C21800                          ret AND_KILL_FRAME(1)
  1539                                  
  1540                                  L_code_ptr_vector_length:
  1541 00001224 C8000000                        enter 0, 0
  1542 00001228 48837D1801                      cmp COUNT, 1
  1543 0000122D 0F85ED0D0000                    jne L_error_arg_count_1
  1544 00001233 488B4520                        mov rax, PARAM(0)
  1545                                          assert_vector(rax)
    53 00001237 803822              <1>  cmp byte [%1], %2
    54 0000123A 0F85B40E0000        <1>  jne L_error_incorrect_type
  1546 00001240 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1547 00001244 E8260D0000                      call make_integer
  1548 00001249 C9                              leave
  1549 0000124A C21800                          ret AND_KILL_FRAME(1)
  1550                                  
  1551                                  L_code_ptr_real_to_integer:
  1552 0000124D C8000000                        enter 0, 0
  1553 00001251 48837D1801                      cmp COUNT, 1
  1554 00001256 0F85C40D0000                    jne L_error_arg_count_1
  1555 0000125C 488B5D20                        mov rbx, PARAM(0)
  1556                                          assert_real(rbx)
    53 00001260 803B13              <1>  cmp byte [%1], %2
    54 00001263 0F858B0E0000        <1>  jne L_error_incorrect_type
  1557 00001269 F20F104301                      movsd xmm0, qword [rbx + 1]
  1558 0000126E F2480F2CF8                      cvttsd2si rdi, xmm0
  1559 00001273 E8F70C0000                      call make_integer
  1560 00001278 C9                              leave
  1561 00001279 C21800                          ret AND_KILL_FRAME(1)
  1562                                  
  1563                                  L_code_ptr_exit:
  1564 0000127C C8000000                        enter 0, 0
  1565 00001280 48837D1800                      cmp COUNT, 0
  1566 00001285 0F85600D0000                    jne L_error_arg_count_0
  1567 0000128B B800000000                      mov rax, 0
  1568 00001290 E8(00000000)                    call exit
  1569                                  
  1570                                  L_code_ptr_integer_to_real:
  1571 00001295 C8000000                        enter 0, 0
  1572 00001299 48837D1801                      cmp COUNT, 1
  1573 0000129E 0F857C0D0000                    jne L_error_arg_count_1
  1574 000012A4 488B4520                        mov rax, PARAM(0)
  1575                                          assert_integer(rax)
    53 000012A8 803811              <1>  cmp byte [%1], %2
    54 000012AB 0F85430E0000        <1>  jne L_error_incorrect_type
  1576 000012B1 FF7001                          push qword [rax + 1]
  1577 000012B4 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1578 000012BA E8980C0000                      call make_real
  1579 000012BF C9                              leave
  1580 000012C0 C21800                          ret AND_KILL_FRAME(1)
  1581                                  
  1582                                  L_code_ptr_fraction_to_real:
  1583 000012C3 C8000000                        enter 0, 0
  1584 000012C7 48837D1801                      cmp COUNT, 1
  1585 000012CC 0F854E0D0000                    jne L_error_arg_count_1
  1586 000012D2 488B4520                        mov rax, PARAM(0)
  1587                                          assert_fraction(rax)
    53 000012D6 803812              <1>  cmp byte [%1], %2
    54 000012D9 0F85150E0000        <1>  jne L_error_incorrect_type
  1588 000012DF FF7001                          push qword [rax + 1]
  1589 000012E2 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1590 000012E8 FF7009                          push qword [rax + 1 + 8]
  1591 000012EB F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1592 000012F1 F20F5EC1                        divsd xmm0, xmm1
  1593 000012F5 E85D0C0000                      call make_real
  1594 000012FA C9                              leave
  1595 000012FB C21800                          ret AND_KILL_FRAME(1)
  1596                                  
  1597                                  L_code_ptr_char_to_integer:
  1598 000012FE C8000000                        enter 0, 0
  1599 00001302 48837D1801                      cmp COUNT, 1
  1600 00001307 0F85130D0000                    jne L_error_arg_count_1
  1601 0000130D 488B4520                        mov rax, PARAM(0)
  1602                                          assert_char(rax)
    53 00001311 803802              <1>  cmp byte [%1], %2
    54 00001314 0F85DA0D0000        <1>  jne L_error_incorrect_type
  1603 0000131A 8A4001                          mov al, byte [rax + 1]
  1604 0000131D 4825FF000000                    and rax, 255
  1605 00001323 4889C7                          mov rdi, rax
  1606 00001326 E8440C0000                      call make_integer
  1607 0000132B C9                              leave
  1608 0000132C C21800                          ret AND_KILL_FRAME(1)
  1609                                  
  1610                                  L_code_ptr_integer_to_fraction:
  1611 0000132F C8000000                        enter 0, 0
  1612 00001333 48837D1801                      cmp COUNT, 1
  1613 00001338 0F85E20C0000                    jne L_error_arg_count_1
  1614 0000133E 4C8B4520                        mov r8, PARAM(0)
  1615                                          assert_integer(r8)
    53 00001342 41803811            <1>  cmp byte [%1], %2
    54 00001346 0F85A80D0000        <1>  jne L_error_incorrect_type
  1616 0000134C BF11000000                      mov rdi, (1 + 8 + 8)
  1617 00001351 E89CF0FFFF                      call malloc
  1618 00001356 498B5801                        mov rbx, qword [r8 + 1]
  1619 0000135A C60012                          mov byte [rax], T_fraction
  1620 0000135D 48895801                        mov qword [rax + 1], rbx
  1621 00001361 48C7400901000000                mov qword [rax + 1 + 8], 1
  1622 00001369 C9                              leave
  1623 0000136A C21800                          ret AND_KILL_FRAME(1)
  1624                                  
  1625                                  L_code_ptr_integer_to_char:
  1626 0000136D C8000000                        enter 0, 0
  1627 00001371 48837D1801                      cmp COUNT, 1
  1628 00001376 0F85A40C0000                    jne L_error_arg_count_1
  1629 0000137C 488B4520                        mov rax, PARAM(0)
  1630                                          assert_integer(rax)
    53 00001380 803811              <1>  cmp byte [%1], %2
    54 00001383 0F856B0D0000        <1>  jne L_error_incorrect_type
  1631 00001389 488B5801                        mov rbx, qword [rax + 1]
  1632 0000138D 4883FB00                        cmp rbx, 0
  1633 00001391 0F8EF20B0000                    jle L_error_integer_range
  1634 00001397 4881FB00010000                  cmp rbx, 256
  1635 0000139E 0F8DE50B0000                    jge L_error_integer_range
  1636 000013A4 BF02000000                      mov rdi, (1 + 1)
  1637 000013A9 E844F0FFFF                      call malloc
  1638 000013AE C60002                          mov byte [rax], T_char
  1639 000013B1 885801                          mov byte [rax + 1], bl
  1640 000013B4 C9                              leave
  1641 000013B5 C21800                          ret AND_KILL_FRAME(1)
  1642                                  
  1643                                  L_code_ptr_trng:
  1644 000013B8 C8000000                        enter 0, 0
  1645 000013BC 48837D1800                      cmp COUNT, 0
  1646 000013C1 0F85240C0000                    jne L_error_arg_count_0
  1647 000013C7 480FC7F7                        rdrand rdi
  1648 000013CB 48D1EF                          shr rdi, 1
  1649 000013CE E89C0B0000                      call make_integer
  1650 000013D3 C9                              leave
  1651 000013D4 C21000                          ret AND_KILL_FRAME(0)
  1652                                  
  1653                                  L_code_ptr_is_zero:
  1654 000013D7 C8000000                        enter 0, 0
  1655 000013DB 48837D1801                      cmp COUNT, 1
  1656 000013E0 0F853A0C0000                    jne L_error_arg_count_1
  1657 000013E6 488B4520                        mov rax, PARAM(0)
  1658 000013EA 803811                          cmp byte [rax], T_integer
  1659 000013ED 740F                            je .L_integer
  1660 000013EF 803812                          cmp byte [rax], T_fraction
  1661 000013F2 7413                            je .L_fraction
  1662 000013F4 803813                          cmp byte [rax], T_real
  1663 000013F7 7417                            je .L_real
  1664 000013F9 E9F60C0000                      jmp L_error_incorrect_type
  1665                                  .L_integer:
  1666 000013FE 4883780100                      cmp qword [rax + 1], 0
  1667 00001403 7429                            je .L_zero
  1668 00001405 EB1B                            jmp .L_not_zero
  1669                                  .L_fraction:
  1670 00001407 4883780100                      cmp qword [rax + 1], 0
  1671 0000140C 7420                            je .L_zero
  1672 0000140E EB12                            jmp .L_not_zero
  1673                                  .L_real:
  1674 00001410 660FEFC0                        pxor xmm0, xmm0
  1675 00001414 FF7001                          push qword [rax + 1]
  1676 00001417 F20F100C24                      movsd xmm1, qword [rsp]
  1677 0000141C 660F2EC1                        ucomisd xmm0, xmm1
  1678 00001420 740C                            je .L_zero
  1679                                  .L_not_zero:
  1680 00001422 48B8-                           mov rax, sob_boolean_false
  1680 00001424 [0200000000000000] 
  1681 0000142C EB0A                            jmp .L_end
  1682                                  .L_zero:
  1683 0000142E 48B8-                           mov rax, sob_boolean_true
  1683 00001430 [0300000000000000] 
  1684                                  .L_end:
  1685 00001438 C9                              leave
  1686 00001439 C21800                          ret AND_KILL_FRAME(1)
  1687                                  
  1688                                  L_code_ptr_is_integer:
  1689 0000143C C8000000                        enter 0, 0
  1690 00001440 48837D1801                      cmp COUNT, 1
  1691 00001445 0F85D50B0000                    jne L_error_arg_count_1
  1692 0000144B 488B4520                        mov rax, PARAM(0)
  1693 0000144F 803811                          cmp byte [rax], T_integer
  1694 00001452 750C                            jne .L_false
  1695 00001454 48B8-                           mov rax, sob_boolean_true
  1695 00001456 [0300000000000000] 
  1696 0000145E EB0A                            jmp .L_exit
  1697                                  .L_false:
  1698 00001460 48B8-                           mov rax, sob_boolean_false
  1698 00001462 [0200000000000000] 
  1699                                  .L_exit:
  1700 0000146A C9                              leave
  1701 0000146B C21800                          ret AND_KILL_FRAME(1)
  1702                                  
  1703                                  L_code_ptr_raw_bin_add_rr:
  1704 0000146E C8000000                        enter 0, 0
  1705 00001472 48837D1802                      cmp COUNT, 2
  1706 00001477 0F85D80B0000                    jne L_error_arg_count_2
  1707 0000147D 488B5D20                        mov rbx, PARAM(0)
  1708                                          assert_real(rbx)
    53 00001481 803B13              <1>  cmp byte [%1], %2
    54 00001484 0F856A0C0000        <1>  jne L_error_incorrect_type
  1709 0000148A 488B4D28                        mov rcx, PARAM(1)
  1710                                          assert_real(rcx)
    53 0000148E 803913              <1>  cmp byte [%1], %2
    54 00001491 0F855D0C0000        <1>  jne L_error_incorrect_type
  1711 00001497 F20F104301                      movsd xmm0, qword [rbx + 1]
  1712 0000149C F20F104901                      movsd xmm1, qword [rcx + 1]
  1713 000014A1 F20F58C1                        addsd xmm0, xmm1
  1714 000014A5 E8AD0A0000                      call make_real
  1715 000014AA C9                              leave
  1716 000014AB C22000                          ret AND_KILL_FRAME(2)
  1717                                  
  1718                                  L_code_ptr_raw_bin_sub_rr:
  1719 000014AE C8000000                        enter 0, 0
  1720 000014B2 48837D1802                      cmp COUNT, 2
  1721 000014B7 0F85980B0000                    jne L_error_arg_count_2
  1722 000014BD 488B5D20                        mov rbx, PARAM(0)
  1723                                          assert_real(rbx)
    53 000014C1 803B13              <1>  cmp byte [%1], %2
    54 000014C4 0F852A0C0000        <1>  jne L_error_incorrect_type
  1724 000014CA 488B4D28                        mov rcx, PARAM(1)
  1725                                          assert_real(rcx)
    53 000014CE 803913              <1>  cmp byte [%1], %2
    54 000014D1 0F851D0C0000        <1>  jne L_error_incorrect_type
  1726 000014D7 F20F104301                      movsd xmm0, qword [rbx + 1]
  1727 000014DC F20F104901                      movsd xmm1, qword [rcx + 1]
  1728 000014E1 F20F5CC1                        subsd xmm0, xmm1
  1729 000014E5 E86D0A0000                      call make_real
  1730 000014EA C9                              leave
  1731 000014EB C22000                          ret AND_KILL_FRAME(2)
  1732                                  
  1733                                  L_code_ptr_raw_bin_mul_rr:
  1734 000014EE C8000000                        enter 0, 0
  1735 000014F2 48837D1802                      cmp COUNT, 2
  1736 000014F7 0F85580B0000                    jne L_error_arg_count_2
  1737 000014FD 488B5D20                        mov rbx, PARAM(0)
  1738                                          assert_real(rbx)
    53 00001501 803B13              <1>  cmp byte [%1], %2
    54 00001504 0F85EA0B0000        <1>  jne L_error_incorrect_type
  1739 0000150A 488B4D28                        mov rcx, PARAM(1)
  1740                                          assert_real(rcx)
    53 0000150E 803913              <1>  cmp byte [%1], %2
    54 00001511 0F85DD0B0000        <1>  jne L_error_incorrect_type
  1741 00001517 F20F104301                      movsd xmm0, qword [rbx + 1]
  1742 0000151C F20F104901                      movsd xmm1, qword [rcx + 1]
  1743 00001521 F20F59C1                        mulsd xmm0, xmm1
  1744 00001525 E82D0A0000                      call make_real
  1745 0000152A C9                              leave
  1746 0000152B C22000                          ret AND_KILL_FRAME(2)
  1747                                  
  1748                                  L_code_ptr_raw_bin_div_rr:
  1749 0000152E C8000000                        enter 0, 0
  1750 00001532 48837D1802                      cmp COUNT, 2
  1751 00001537 0F85180B0000                    jne L_error_arg_count_2
  1752 0000153D 488B5D20                        mov rbx, PARAM(0)
  1753                                          assert_real(rbx)
    53 00001541 803B13              <1>  cmp byte [%1], %2
    54 00001544 0F85AA0B0000        <1>  jne L_error_incorrect_type
  1754 0000154A 488B4D28                        mov rcx, PARAM(1)
  1755                                          assert_real(rcx)
    53 0000154E 803913              <1>  cmp byte [%1], %2
    54 00001551 0F859D0B0000        <1>  jne L_error_incorrect_type
  1756 00001557 F20F104301                      movsd xmm0, qword [rbx + 1]
  1757 0000155C F20F104901                      movsd xmm1, qword [rcx + 1]
  1758 00001561 660FEFD2                        pxor xmm2, xmm2
  1759 00001565 660F2ECA                        ucomisd xmm1, xmm2
  1760 00001569 0F84B60B0000                    je L_error_division_by_zero
  1761 0000156F F20F5EC1                        divsd xmm0, xmm1
  1762 00001573 E8DF090000                      call make_real
  1763 00001578 C9                              leave
  1764 00001579 C22000                          ret AND_KILL_FRAME(2)
  1765                                  
  1766                                  L_code_ptr_raw_bin_add_zz:
  1767 0000157C C8000000                	enter 0, 0
  1768 00001580 48837D1802              	cmp COUNT, 2
  1769 00001585 0F85CA0A0000            	jne L_error_arg_count_2
  1770 0000158B 4C8B4520                	mov r8, PARAM(0)
  1771                                  	assert_integer(r8)
    53 0000158F 41803811            <1>  cmp byte [%1], %2
    54 00001593 0F855B0B0000        <1>  jne L_error_incorrect_type
  1772 00001599 4C8B4D28                	mov r9, PARAM(1)
  1773                                  	assert_integer(r9)
    53 0000159D 41803911            <1>  cmp byte [%1], %2
    54 000015A1 0F854D0B0000        <1>  jne L_error_incorrect_type
  1774 000015A7 498B7801                	mov rdi, qword [r8 + 1]
  1775 000015AB 49037901                	add rdi, qword [r9 + 1]
  1776 000015AF E8BB090000              	call make_integer
  1777 000015B4 C9                      	leave
  1778 000015B5 C22000                  	ret AND_KILL_FRAME(2)
  1779                                  
  1780                                  L_code_ptr_raw_bin_add_qq:
  1781 000015B8 C8000000                        enter 0, 0
  1782 000015BC 48837D1802                      cmp COUNT, 2
  1783 000015C1 0F858E0A0000                    jne L_error_arg_count_2
  1784 000015C7 4C8B4520                        mov r8, PARAM(0)
  1785                                          assert_fraction(r8)
    53 000015CB 41803812            <1>  cmp byte [%1], %2
    54 000015CF 0F851F0B0000        <1>  jne L_error_incorrect_type
  1786 000015D5 4C8B4D28                        mov r9, PARAM(1)
  1787                                          assert_fraction(r9)
    53 000015D9 41803912            <1>  cmp byte [%1], %2
    54 000015DD 0F85110B0000        <1>  jne L_error_incorrect_type
  1788 000015E3 498B4001                        mov rax, qword [r8 + 1] ; num1
  1789 000015E7 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1790 000015EB 4899                            cqo
  1791 000015ED 48F7EB                          imul rbx
  1792 000015F0 4889C6                          mov rsi, rax
  1793 000015F3 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1794 000015F7 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1795 000015FB 4899                            cqo
  1796 000015FD 48F7EB                          imul rbx
  1797 00001600 4801C6                          add rsi, rax
  1798 00001603 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1799 00001607 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1800 0000160B 4899                            cqo
  1801 0000160D 48F7EB                          imul rbx
  1802 00001610 4889C7                          mov rdi, rax
  1803 00001613 E8DE010000                      call normalize_fraction
  1804 00001618 C9                              leave
  1805 00001619 C22000                          ret AND_KILL_FRAME(2)
  1806                                  
  1807                                  L_code_ptr_raw_bin_sub_zz:
  1808 0000161C C8000000                	enter 0, 0
  1809 00001620 48837D1802              	cmp COUNT, 2
  1810 00001625 0F852A0A0000            	jne L_error_arg_count_2
  1811 0000162B 4C8B4520                	mov r8, PARAM(0)
  1812                                  	assert_integer(r8)
    53 0000162F 41803811            <1>  cmp byte [%1], %2
    54 00001633 0F85BB0A0000        <1>  jne L_error_incorrect_type
  1813 00001639 4C8B4D28                	mov r9, PARAM(1)
  1814                                  	assert_integer(r9)
    53 0000163D 41803911            <1>  cmp byte [%1], %2
    54 00001641 0F85AD0A0000        <1>  jne L_error_incorrect_type
  1815 00001647 498B7801                	mov rdi, qword [r8 + 1]
  1816 0000164B 492B7901                	sub rdi, qword [r9 + 1]
  1817 0000164F E81B090000              	call make_integer
  1818 00001654 C9                      	leave
  1819 00001655 C22000                  	ret AND_KILL_FRAME(2)
  1820                                  
  1821                                  L_code_ptr_raw_bin_sub_qq:
  1822 00001658 C8000000                        enter 0, 0
  1823 0000165C 48837D1802                      cmp COUNT, 2
  1824 00001661 0F85EE090000                    jne L_error_arg_count_2
  1825 00001667 4C8B4520                        mov r8, PARAM(0)
  1826                                          assert_fraction(r8)
    53 0000166B 41803812            <1>  cmp byte [%1], %2
    54 0000166F 0F857F0A0000        <1>  jne L_error_incorrect_type
  1827 00001675 4C8B4D28                        mov r9, PARAM(1)
  1828                                          assert_fraction(r9)
    53 00001679 41803912            <1>  cmp byte [%1], %2
    54 0000167D 0F85710A0000        <1>  jne L_error_incorrect_type
  1829 00001683 498B4001                        mov rax, qword [r8 + 1] ; num1
  1830 00001687 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1831 0000168B 4899                            cqo
  1832 0000168D 48F7EB                          imul rbx
  1833 00001690 4889C6                          mov rsi, rax
  1834 00001693 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1835 00001697 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1836 0000169B 4899                            cqo
  1837 0000169D 48F7EB                          imul rbx
  1838 000016A0 4829C6                          sub rsi, rax
  1839 000016A3 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1840 000016A7 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1841 000016AB 4899                            cqo
  1842 000016AD 48F7EB                          imul rbx
  1843 000016B0 4889C7                          mov rdi, rax
  1844 000016B3 E83E010000                      call normalize_fraction
  1845 000016B8 C9                              leave
  1846 000016B9 C22000                          ret AND_KILL_FRAME(2)
  1847                                  
  1848                                  L_code_ptr_raw_bin_mul_zz:
  1849 000016BC C8000000                	enter 0, 0
  1850 000016C0 48837D1802              	cmp COUNT, 2
  1851 000016C5 0F858A090000            	jne L_error_arg_count_2
  1852 000016CB 4C8B4520                	mov r8, PARAM(0)
  1853                                  	assert_integer(r8)
    53 000016CF 41803811            <1>  cmp byte [%1], %2
    54 000016D3 0F851B0A0000        <1>  jne L_error_incorrect_type
  1854 000016D9 4C8B4D28                	mov r9, PARAM(1)
  1855                                  	assert_integer(r9)
    53 000016DD 41803911            <1>  cmp byte [%1], %2
    54 000016E1 0F850D0A0000        <1>  jne L_error_incorrect_type
  1856 000016E7 4899                    	cqo
  1857 000016E9 498B4001                	mov rax, qword [r8 + 1]
  1858 000016ED 49F76101                	mul qword [r9 + 1]
  1859 000016F1 4889C7                  	mov rdi, rax
  1860 000016F4 E876080000              	call make_integer
  1861 000016F9 C9                      	leave
  1862 000016FA C22000                  	ret AND_KILL_FRAME(2)
  1863                                  
  1864                                  L_code_ptr_raw_bin_mul_qq:
  1865 000016FD C8000000                        enter 0, 0
  1866 00001701 48837D1802                      cmp COUNT, 2
  1867 00001706 0F8549090000                    jne L_error_arg_count_2
  1868 0000170C 4C8B4520                        mov r8, PARAM(0)
  1869                                          assert_fraction(r8)
    53 00001710 41803812            <1>  cmp byte [%1], %2
    54 00001714 0F85DA090000        <1>  jne L_error_incorrect_type
  1870 0000171A 4C8B4D28                        mov r9, PARAM(1)
  1871                                          assert_fraction(r9)
    53 0000171E 41803912            <1>  cmp byte [%1], %2
    54 00001722 0F85CC090000        <1>  jne L_error_incorrect_type
  1872 00001728 498B4001                        mov rax, qword [r8 + 1] ; num1
  1873 0000172C 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1874 00001730 4899                            cqo
  1875 00001732 48F7EB                          imul rbx
  1876 00001735 4889C6                          mov rsi, rax
  1877 00001738 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1878 0000173C 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1879 00001740 4899                            cqo
  1880 00001742 48F7EB                          imul rbx
  1881 00001745 4889C7                          mov rdi, rax
  1882 00001748 E8A9000000                      call normalize_fraction
  1883 0000174D C9                              leave
  1884 0000174E C22000                          ret AND_KILL_FRAME(2)
  1885                                          
  1886                                  L_code_ptr_raw_bin_div_zz:
  1887 00001751 C8000000                	enter 0, 0
  1888 00001755 48837D1802              	cmp COUNT, 2
  1889 0000175A 0F85F5080000            	jne L_error_arg_count_2
  1890 00001760 4C8B4520                	mov r8, PARAM(0)
  1891                                  	assert_integer(r8)
    53 00001764 41803811            <1>  cmp byte [%1], %2
    54 00001768 0F8586090000        <1>  jne L_error_incorrect_type
  1892 0000176E 4C8B4D28                	mov r9, PARAM(1)
  1893                                  	assert_integer(r9)
    53 00001772 41803911            <1>  cmp byte [%1], %2
    54 00001776 0F8578090000        <1>  jne L_error_incorrect_type
  1894 0000177C 498B7901                	mov rdi, qword [r9 + 1]
  1895 00001780 4883FF00                	cmp rdi, 0
  1896 00001784 0F849B090000            	je L_error_division_by_zero
  1897 0000178A 498B7001                	mov rsi, qword [r8 + 1]
  1898 0000178E E863000000              	call normalize_fraction
  1899 00001793 C9                      	leave
  1900 00001794 C22000                  	ret AND_KILL_FRAME(2)
  1901                                  
  1902                                  L_code_ptr_raw_bin_div_qq:
  1903 00001797 C8000000                        enter 0, 0
  1904 0000179B 48837D1802                      cmp COUNT, 2
  1905 000017A0 0F85AF080000                    jne L_error_arg_count_2
  1906 000017A6 4C8B4520                        mov r8, PARAM(0)
  1907                                          assert_fraction(r8)
    53 000017AA 41803812            <1>  cmp byte [%1], %2
    54 000017AE 0F8540090000        <1>  jne L_error_incorrect_type
  1908 000017B4 4C8B4D28                        mov r9, PARAM(1)
  1909                                          assert_fraction(r9)
    53 000017B8 41803912            <1>  cmp byte [%1], %2
    54 000017BC 0F8532090000        <1>  jne L_error_incorrect_type
  1910 000017C2 4983790100                      cmp qword [r9 + 1], 0
  1911 000017C7 0F8458090000                    je L_error_division_by_zero
  1912 000017CD 498B4001                        mov rax, qword [r8 + 1] ; num1
  1913 000017D1 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1914 000017D5 4899                            cqo
  1915 000017D7 48F7EB                          imul rbx
  1916 000017DA 4889C6                          mov rsi, rax
  1917 000017DD 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1918 000017E1 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1919 000017E5 4899                            cqo
  1920 000017E7 48F7EB                          imul rbx
  1921 000017EA 4889C7                          mov rdi, rax
  1922 000017ED E804000000                      call normalize_fraction
  1923 000017F2 C9                              leave
  1924 000017F3 C22000                          ret AND_KILL_FRAME(2)
  1925                                          
  1926                                  normalize_fraction:
  1927 000017F6 56                              push rsi
  1928 000017F7 57                              push rdi
  1929 000017F8 E859000000                      call gcd
  1930 000017FD 4889C3                          mov rbx, rax
  1931 00001800 58                              pop rax
  1932 00001801 4899                            cqo
  1933 00001803 48F7FB                          idiv rbx
  1934 00001806 4989C0                          mov r8, rax
  1935 00001809 58                              pop rax
  1936 0000180A 4899                            cqo
  1937 0000180C 48F7FB                          idiv rbx
  1938 0000180F 4989C1                          mov r9, rax
  1939 00001812 4983F900                        cmp r9, 0
  1940 00001816 741C                            je .L_zero
  1941 00001818 4983F801                        cmp r8, 1
  1942 0000181C 7421                            je .L_int
  1943 0000181E BF11000000                      mov rdi, (1 + 8 + 8)
  1944 00001823 E8CAEBFFFF                      call malloc
  1945 00001828 C60012                          mov byte [rax], T_fraction
  1946 0000182B 4C894801                        mov qword [rax + 1], r9
  1947 0000182F 4C894009                        mov qword [rax + 1 + 8], r8
  1948 00001833 C3                              ret
  1949                                  .L_zero:
  1950 00001834 BF00000000                      mov rdi, 0
  1951 00001839 E831070000                      call make_integer
  1952 0000183E C3                              ret
  1953                                  .L_int:
  1954 0000183F 4C89CF                          mov rdi, r9
  1955 00001842 E828070000                      call make_integer
  1956 00001847 C3                              ret
  1957                                  
  1958                                  iabs:
  1959 00001848 4889F8                          mov rax, rdi
  1960 0000184B 4883F800                        cmp rax, 0
  1961 0000184F 7C01                            jl .Lneg
  1962 00001851 C3                              ret
  1963                                  .Lneg:
  1964 00001852 48F7D8                          neg rax
  1965 00001855 C3                              ret
  1966                                  
  1967                                  gcd:
  1968 00001856 E8EDFFFFFF                      call iabs
  1969 0000185B 4889C3                          mov rbx, rax
  1970 0000185E 4889F7                          mov rdi, rsi
  1971 00001861 E8E2FFFFFF                      call iabs
  1972 00001866 4883F800                        cmp rax, 0
  1973 0000186A 7502                            jne .L0
  1974 0000186C 4893                            xchg rax, rbx
  1975                                  .L0:
  1976 0000186E 4883FB00                        cmp rbx, 0
  1977 00001872 740C                            je .L1
  1978 00001874 4899                            cqo
  1979 00001876 48F7F3                          div rbx
  1980 00001879 4889D0                          mov rax, rdx
  1981 0000187C 4893                            xchg rax, rbx
  1982 0000187E EBEE                            jmp .L0
  1983                                  .L1:
  1984 00001880 C3                              ret
  1985                                  
  1986                                  L_code_ptr_error:
  1987 00001881 C8000000                        enter 0, 0
  1988 00001885 48837D1802                      cmp COUNT, 2
  1989 0000188A 0F85C5070000                    jne L_error_arg_count_2
  1990 00001890 488B7520                        mov rsi, PARAM(0)
  1991                                          assert_interned_symbol(rsi)
    53 00001894 803E41              <1>  cmp byte [%1], %2
    54 00001897 0F8557080000        <1>  jne L_error_incorrect_type
  1992 0000189D 488B7528                        mov rsi, PARAM(1)
  1993                                          assert_string(rsi)
    53 000018A1 803E03              <1>  cmp byte [%1], %2
    54 000018A4 0F854A080000        <1>  jne L_error_incorrect_type
  1994 000018AA 48BF-                           mov rdi, fmt_scheme_error_part_1
  1994 000018AC [5704000000000000] 
  1995 000018B4 B800000000                      mov rax, 0
  1996                                          ENTER
    44 000018B9 C8000000            <1>  enter 0, 0
    45 000018BD 4883E4F0            <1>  and rsp, ~15
  1997 000018C1 E8(00000000)                    call printf
  1998                                          LEAVE
    49 000018C6 C9                  <1>  leave
  1999 000018C7 488B7D20                        mov rdi, PARAM(0)
  2000 000018CB E8A3EDFFFF                      call print_sexpr
  2001 000018D0 48BF-                           mov rdi, fmt_scheme_error_part_2
  2001 000018D2 [6B04000000000000] 
  2002 000018DA B800000000                      mov rax, 0
  2003                                          ENTER
    44 000018DF C8000000            <1>  enter 0, 0
    45 000018E3 4883E4F0            <1>  and rsp, ~15
  2004 000018E7 E8(00000000)                    call printf
  2005                                          LEAVE
    49 000018EC C9                  <1>  leave
  2006 000018ED 488B4528                        mov rax, PARAM(1)       ; sob_string
  2007 000018F1 BE01000000                      mov rsi, 1              ; size = 1 byte
  2008 000018F6 488B5001                        mov rdx, qword [rax + 1] ; length
  2009 000018FA 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  2010 000018FE 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  2011                                  	ENTER
    44 00001906 C8000000            <1>  enter 0, 0
    45 0000190A 4883E4F0            <1>  and rsp, ~15
  2012 0000190E E8(00000000)                    call fwrite
  2013                                  	LEAVE
    49 00001913 C9                  <1>  leave
  2014 00001914 48BF-                           mov rdi, fmt_scheme_error_part_3
  2014 00001916 [AD04000000000000] 
  2015 0000191E B800000000                      mov rax, 0
  2016                                          ENTER
    44 00001923 C8000000            <1>  enter 0, 0
    45 00001927 4883E4F0            <1>  and rsp, ~15
  2017 0000192B E8(00000000)                    call printf
  2018                                          LEAVE
    49 00001930 C9                  <1>  leave
  2019 00001931 48C7C0F7FFFFFF                  mov rax, -9
  2020 00001938 E8(00000000)                    call exit
  2021                                  
  2022                                  L_code_ptr_raw_less_than_rr:
  2023 0000193D C8000000                        enter 0, 0
  2024 00001941 48837D1802                      cmp COUNT, 2
  2025 00001946 0F8509070000                    jne L_error_arg_count_2
  2026 0000194C 488B7520                        mov rsi, PARAM(0)
  2027                                          assert_real(rsi)
    53 00001950 803E13              <1>  cmp byte [%1], %2
    54 00001953 0F859B070000        <1>  jne L_error_incorrect_type
  2028 00001959 488B7D28                        mov rdi, PARAM(1)
  2029                                          assert_real(rdi)
    53 0000195D 803F13              <1>  cmp byte [%1], %2
    54 00001960 0F858E070000        <1>  jne L_error_incorrect_type
  2030 00001966 F20F104601                      movsd xmm0, qword [rsi + 1]
  2031 0000196B F20F104F01                      movsd xmm1, qword [rdi + 1]
  2032 00001970 660F2FC1                        comisd xmm0, xmm1
  2033 00001974 730C                            jae .L_false
  2034 00001976 48B8-                           mov rax, sob_boolean_true
  2034 00001978 [0300000000000000] 
  2035 00001980 EB0A                            jmp .L_exit
  2036                                  .L_false:
  2037 00001982 48B8-                           mov rax, sob_boolean_false
  2037 00001984 [0200000000000000] 
  2038                                  .L_exit:
  2039 0000198C C9                              leave
  2040 0000198D C22000                          ret AND_KILL_FRAME(2)
  2041                                          
  2042                                  L_code_ptr_raw_less_than_zz:
  2043 00001990 C8000000                	enter 0, 0
  2044 00001994 48837D1802              	cmp COUNT, 2
  2045 00001999 0F85B6060000            	jne L_error_arg_count_2
  2046 0000199F 4C8B4520                	mov r8, PARAM(0)
  2047                                  	assert_integer(r8)
    53 000019A3 41803811            <1>  cmp byte [%1], %2
    54 000019A7 0F8547070000        <1>  jne L_error_incorrect_type
  2048 000019AD 4C8B4D28                	mov r9, PARAM(1)
  2049                                  	assert_integer(r9)
    53 000019B1 41803911            <1>  cmp byte [%1], %2
    54 000019B5 0F8539070000        <1>  jne L_error_incorrect_type
  2050 000019BB 498B7801                	mov rdi, qword [r8 + 1]
  2051 000019BF 493B7901                	cmp rdi, qword [r9 + 1]
  2052 000019C3 7D0C                    	jge .L_false
  2053 000019C5 48B8-                   	mov rax, sob_boolean_true
  2053 000019C7 [0300000000000000] 
  2054 000019CF EB0A                    	jmp .L_exit
  2055                                  .L_false:
  2056 000019D1 48B8-                   	mov rax, sob_boolean_false
  2056 000019D3 [0200000000000000] 
  2057                                  .L_exit:
  2058 000019DB C9                      	leave
  2059 000019DC C22000                  	ret AND_KILL_FRAME(2)
  2060                                  
  2061                                  L_code_ptr_raw_less_than_qq:
  2062 000019DF C8000000                        enter 0, 0
  2063 000019E3 48837D1802                      cmp COUNT, 2
  2064 000019E8 0F8567060000                    jne L_error_arg_count_2
  2065 000019EE 488B7520                        mov rsi, PARAM(0)
  2066                                          assert_fraction(rsi)
    53 000019F2 803E12              <1>  cmp byte [%1], %2
    54 000019F5 0F85F9060000        <1>  jne L_error_incorrect_type
  2067 000019FB 488B7D28                        mov rdi, PARAM(1)
  2068                                          assert_fraction(rdi)
    53 000019FF 803F12              <1>  cmp byte [%1], %2
    54 00001A02 0F85EC060000        <1>  jne L_error_incorrect_type
  2069 00001A08 488B4601                        mov rax, qword [rsi + 1] ; num1
  2070 00001A0C 4899                            cqo
  2071 00001A0E 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2072 00001A12 4889C1                          mov rcx, rax
  2073 00001A15 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  2074 00001A19 4899                            cqo
  2075 00001A1B 48F76F01                        imul qword [rdi + 1]          ; num2
  2076 00001A1F 4829C1                          sub rcx, rax
  2077 00001A22 7D0C                            jge .L_false
  2078 00001A24 48B8-                           mov rax, sob_boolean_true
  2078 00001A26 [0300000000000000] 
  2079 00001A2E EB0A                            jmp .L_exit
  2080                                  .L_false:
  2081 00001A30 48B8-                           mov rax, sob_boolean_false
  2081 00001A32 [0200000000000000] 
  2082                                  .L_exit:
  2083 00001A3A C9                              leave
  2084 00001A3B C22000                          ret AND_KILL_FRAME(2)
  2085                                  
  2086                                  L_code_ptr_raw_equal_rr:
  2087 00001A3E C8000000                        enter 0, 0
  2088 00001A42 48837D1802                      cmp COUNT, 2
  2089 00001A47 0F8508060000                    jne L_error_arg_count_2
  2090 00001A4D 488B7520                        mov rsi, PARAM(0)
  2091                                          assert_real(rsi)
    53 00001A51 803E13              <1>  cmp byte [%1], %2
    54 00001A54 0F859A060000        <1>  jne L_error_incorrect_type
  2092 00001A5A 488B7D28                        mov rdi, PARAM(1)
  2093                                          assert_real(rdi)
    53 00001A5E 803F13              <1>  cmp byte [%1], %2
    54 00001A61 0F858D060000        <1>  jne L_error_incorrect_type
  2094 00001A67 F20F104601                      movsd xmm0, qword [rsi + 1]
  2095 00001A6C F20F104F01                      movsd xmm1, qword [rdi + 1]
  2096 00001A71 660F2FC1                        comisd xmm0, xmm1
  2097 00001A75 750C                            jne .L_false
  2098 00001A77 48B8-                           mov rax, sob_boolean_true
  2098 00001A79 [0300000000000000] 
  2099 00001A81 EB0A                            jmp .L_exit
  2100                                  .L_false:
  2101 00001A83 48B8-                           mov rax, sob_boolean_false
  2101 00001A85 [0200000000000000] 
  2102                                  .L_exit:
  2103 00001A8D C9                              leave
  2104 00001A8E C22000                          ret AND_KILL_FRAME(2)
  2105                                          
  2106                                  L_code_ptr_raw_equal_zz:
  2107 00001A91 C8000000                	enter 0, 0
  2108 00001A95 48837D1802              	cmp COUNT, 2
  2109 00001A9A 0F85B5050000            	jne L_error_arg_count_2
  2110 00001AA0 4C8B4520                	mov r8, PARAM(0)
  2111                                  	assert_integer(r8)
    53 00001AA4 41803811            <1>  cmp byte [%1], %2
    54 00001AA8 0F8546060000        <1>  jne L_error_incorrect_type
  2112 00001AAE 4C8B4D28                	mov r9, PARAM(1)
  2113                                  	assert_integer(r9)
    53 00001AB2 41803911            <1>  cmp byte [%1], %2
    54 00001AB6 0F8538060000        <1>  jne L_error_incorrect_type
  2114 00001ABC 498B7801                	mov rdi, qword [r8 + 1]
  2115 00001AC0 493B7901                	cmp rdi, qword [r9 + 1]
  2116 00001AC4 750C                    	jne .L_false
  2117 00001AC6 48B8-                   	mov rax, sob_boolean_true
  2117 00001AC8 [0300000000000000] 
  2118 00001AD0 EB0A                    	jmp .L_exit
  2119                                  .L_false:
  2120 00001AD2 48B8-                   	mov rax, sob_boolean_false
  2120 00001AD4 [0200000000000000] 
  2121                                  .L_exit:
  2122 00001ADC C9                      	leave
  2123 00001ADD C22000                  	ret AND_KILL_FRAME(2)
  2124                                  
  2125                                  L_code_ptr_raw_equal_qq:
  2126 00001AE0 C8000000                        enter 0, 0
  2127 00001AE4 48837D1802                      cmp COUNT, 2
  2128 00001AE9 0F8566050000                    jne L_error_arg_count_2
  2129 00001AEF 488B7520                        mov rsi, PARAM(0)
  2130                                          assert_fraction(rsi)
    53 00001AF3 803E12              <1>  cmp byte [%1], %2
    54 00001AF6 0F85F8050000        <1>  jne L_error_incorrect_type
  2131 00001AFC 488B7D28                        mov rdi, PARAM(1)
  2132                                          assert_fraction(rdi)
    53 00001B00 803F12              <1>  cmp byte [%1], %2
    54 00001B03 0F85EB050000        <1>  jne L_error_incorrect_type
  2133 00001B09 488B4601                        mov rax, qword [rsi + 1] ; num1
  2134 00001B0D 4899                            cqo
  2135 00001B0F 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2136 00001B13 4889C1                          mov rcx, rax
  2137 00001B16 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  2138 00001B1A 4899                            cqo
  2139 00001B1C 48F76F01                        imul qword [rdi + 1]          ; num2
  2140 00001B20 4829C1                          sub rcx, rax
  2141 00001B23 750C                            jne .L_false
  2142 00001B25 48B8-                           mov rax, sob_boolean_true
  2142 00001B27 [0300000000000000] 
  2143 00001B2F EB0A                            jmp .L_exit
  2144                                  .L_false:
  2145 00001B31 48B8-                           mov rax, sob_boolean_false
  2145 00001B33 [0200000000000000] 
  2146                                  .L_exit:
  2147 00001B3B C9                              leave
  2148 00001B3C C22000                          ret AND_KILL_FRAME(2)
  2149                                  
  2150                                  L_code_ptr_quotient:
  2151 00001B3F C8000000                        enter 0, 0
  2152 00001B43 48837D1802                      cmp COUNT, 2
  2153 00001B48 0F8507050000                    jne L_error_arg_count_2
  2154 00001B4E 488B7520                        mov rsi, PARAM(0)
  2155                                          assert_integer(rsi)
    53 00001B52 803E11              <1>  cmp byte [%1], %2
    54 00001B55 0F8599050000        <1>  jne L_error_incorrect_type
  2156 00001B5B 488B7D28                        mov rdi, PARAM(1)
  2157                                          assert_integer(rdi)
    53 00001B5F 803F11              <1>  cmp byte [%1], %2
    54 00001B62 0F858C050000        <1>  jne L_error_incorrect_type
  2158 00001B68 488B4601                        mov rax, qword [rsi + 1]
  2159 00001B6C 488B5F01                        mov rbx, qword [rdi + 1]
  2160 00001B70 4883FB00                        cmp rbx, 0
  2161 00001B74 0F84AB050000                    je L_error_division_by_zero
  2162 00001B7A 4899                            cqo
  2163 00001B7C 48F7FB                          idiv rbx
  2164 00001B7F 4889C7                          mov rdi, rax
  2165 00001B82 E8E8030000                      call make_integer
  2166 00001B87 C9                              leave
  2167 00001B88 C22000                          ret AND_KILL_FRAME(2)
  2168                                          
  2169                                  L_code_ptr_remainder:
  2170 00001B8B C8000000                        enter 0, 0
  2171 00001B8F 48837D1802                      cmp COUNT, 2
  2172 00001B94 0F85BB040000                    jne L_error_arg_count_2
  2173 00001B9A 488B7520                        mov rsi, PARAM(0)
  2174                                          assert_integer(rsi)
    53 00001B9E 803E11              <1>  cmp byte [%1], %2
    54 00001BA1 0F854D050000        <1>  jne L_error_incorrect_type
  2175 00001BA7 488B7D28                        mov rdi, PARAM(1)
  2176                                          assert_integer(rdi)
    53 00001BAB 803F11              <1>  cmp byte [%1], %2
    54 00001BAE 0F8540050000        <1>  jne L_error_incorrect_type
  2177 00001BB4 488B4601                        mov rax, qword [rsi + 1]
  2178 00001BB8 488B5F01                        mov rbx, qword [rdi + 1]
  2179 00001BBC 4883FB00                        cmp rbx, 0
  2180 00001BC0 0F845F050000                    je L_error_division_by_zero
  2181 00001BC6 4899                            cqo
  2182 00001BC8 48F7FB                          idiv rbx
  2183 00001BCB 4889D7                          mov rdi, rdx
  2184 00001BCE E89C030000                      call make_integer
  2185 00001BD3 C9                              leave
  2186 00001BD4 C22000                          ret AND_KILL_FRAME(2)
  2187                                  
  2188                                  L_code_ptr_set_car:
  2189 00001BD7 C8000000                        enter 0, 0
  2190 00001BDB 48837D1802                      cmp COUNT, 2
  2191 00001BE0 0F856F040000                    jne L_error_arg_count_2
  2192 00001BE6 488B4520                        mov rax, PARAM(0)
  2193                                          assert_pair(rax)
    53 00001BEA 803821              <1>  cmp byte [%1], %2
    54 00001BED 0F8501050000        <1>  jne L_error_incorrect_type
  2194 00001BF3 488B5D28                        mov rbx, PARAM(1)
  2195 00001BF7 48895801                        mov SOB_PAIR_CAR(rax), rbx
  2196 00001BFB 48B8-                           mov rax, sob_void
  2196 00001BFD [0000000000000000] 
  2197 00001C05 C9                              leave
  2198 00001C06 C22000                          ret AND_KILL_FRAME(2)
  2199                                  
  2200                                  L_code_ptr_set_cdr:
  2201 00001C09 C8000000                        enter 0, 0
  2202 00001C0D 48837D1802                      cmp COUNT, 2
  2203 00001C12 0F853D040000                    jne L_error_arg_count_2
  2204 00001C18 488B4520                        mov rax, PARAM(0)
  2205                                          assert_pair(rax)
    53 00001C1C 803821              <1>  cmp byte [%1], %2
    54 00001C1F 0F85CF040000        <1>  jne L_error_incorrect_type
  2206 00001C25 488B5D28                        mov rbx, PARAM(1)
  2207 00001C29 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2208 00001C2D 48B8-                           mov rax, sob_void
  2208 00001C2F [0000000000000000] 
  2209 00001C37 C9                              leave
  2210 00001C38 C22000                          ret AND_KILL_FRAME(2)
  2211                                  
  2212                                  L_code_ptr_string_ref:
  2213 00001C3B C8000000                        enter 0, 0
  2214 00001C3F 48837D1802                      cmp COUNT, 2
  2215 00001C44 0F850B040000                    jne L_error_arg_count_2
  2216 00001C4A 488B7D20                        mov rdi, PARAM(0)
  2217                                          assert_string(rdi)
    53 00001C4E 803F03              <1>  cmp byte [%1], %2
    54 00001C51 0F859D040000        <1>  jne L_error_incorrect_type
  2218 00001C57 488B7528                        mov rsi, PARAM(1)
  2219                                          assert_integer(rsi)
    53 00001C5B 803E11              <1>  cmp byte [%1], %2
    54 00001C5E 0F8590040000        <1>  jne L_error_incorrect_type
  2220 00001C64 488B5701                        mov rdx, qword [rdi + 1]
  2221 00001C68 488B4E01                        mov rcx, qword [rsi + 1]
  2222 00001C6C 4839D1                          cmp rcx, rdx
  2223 00001C6F 0F8D14030000                    jge L_error_integer_range
  2224 00001C75 4883F900                        cmp rcx, 0
  2225 00001C79 0F8C0A030000                    jl L_error_integer_range
  2226 00001C7F 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  2227 00001C83 BF02000000                      mov rdi, 2
  2228 00001C88 E865E7FFFF                      call malloc
  2229 00001C8D C60002                          mov byte [rax], T_char
  2230 00001C90 885801                          mov byte [rax + 1], bl
  2231 00001C93 C9                              leave
  2232 00001C94 C22000                          ret AND_KILL_FRAME(2)
  2233                                  
  2234                                  L_code_ptr_vector_ref:
  2235 00001C97 C8000000                        enter 0, 0
  2236 00001C9B 48837D1802                      cmp COUNT, 2
  2237 00001CA0 0F85AF030000                    jne L_error_arg_count_2
  2238 00001CA6 488B7D20                        mov rdi, PARAM(0)
  2239                                          assert_vector(rdi)
    53 00001CAA 803F22              <1>  cmp byte [%1], %2
    54 00001CAD 0F8541040000        <1>  jne L_error_incorrect_type
  2240 00001CB3 488B7528                        mov rsi, PARAM(1)
  2241                                          assert_integer(rsi)
    53 00001CB7 803E11              <1>  cmp byte [%1], %2
    54 00001CBA 0F8534040000        <1>  jne L_error_incorrect_type
  2242 00001CC0 488B5701                        mov rdx, qword [rdi + 1]
  2243 00001CC4 488B4E01                        mov rcx, qword [rsi + 1]
  2244 00001CC8 4839D1                          cmp rcx, rdx
  2245 00001CCB 0F8DB8020000                    jge L_error_integer_range
  2246 00001CD1 4883F900                        cmp rcx, 0
  2247 00001CD5 0F8CAE020000                    jl L_error_integer_range
  2248 00001CDB 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2249 00001CE0 C9                              leave
  2250 00001CE1 C22000                          ret AND_KILL_FRAME(2)
  2251                                  
  2252                                  L_code_ptr_vector_set:
  2253 00001CE4 C8000000                        enter 0, 0
  2254 00001CE8 48837D1803                      cmp COUNT, 3
  2255 00001CED 0F85CC030000                    jne L_error_arg_count_3
  2256 00001CF3 488B7D20                        mov rdi, PARAM(0)
  2257                                          assert_vector(rdi)
    53 00001CF7 803F22              <1>  cmp byte [%1], %2
    54 00001CFA 0F85F4030000        <1>  jne L_error_incorrect_type
  2258 00001D00 488B7528                        mov rsi, PARAM(1)
  2259                                          assert_integer(rsi)
    53 00001D04 803E11              <1>  cmp byte [%1], %2
    54 00001D07 0F85E7030000        <1>  jne L_error_incorrect_type
  2260 00001D0D 488B5701                        mov rdx, qword [rdi + 1]
  2261 00001D11 488B4E01                        mov rcx, qword [rsi + 1]
  2262 00001D15 4839D1                          cmp rcx, rdx
  2263 00001D18 0F8D6B020000                    jge L_error_integer_range
  2264 00001D1E 4883F900                        cmp rcx, 0
  2265 00001D22 0F8C61020000                    jl L_error_integer_range
  2266 00001D28 488B4530                        mov rax, PARAM(2)
  2267 00001D2C 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2268 00001D31 48B8-                           mov rax, sob_void
  2268 00001D33 [0000000000000000] 
  2269 00001D3B C9                              leave
  2270 00001D3C C22800                          ret AND_KILL_FRAME(3)
  2271                                  
  2272                                  L_code_ptr_string_set:
  2273 00001D3F C8000000                        enter 0, 0
  2274 00001D43 48837D1803                      cmp COUNT, 3
  2275 00001D48 0F8571030000                    jne L_error_arg_count_3
  2276 00001D4E 488B7D20                        mov rdi, PARAM(0)
  2277                                          assert_string(rdi)
    53 00001D52 803F03              <1>  cmp byte [%1], %2
    54 00001D55 0F8599030000        <1>  jne L_error_incorrect_type
  2278 00001D5B 488B7528                        mov rsi, PARAM(1)
  2279                                          assert_integer(rsi)
    53 00001D5F 803E11              <1>  cmp byte [%1], %2
    54 00001D62 0F858C030000        <1>  jne L_error_incorrect_type
  2280 00001D68 488B5701                        mov rdx, qword [rdi + 1]
  2281 00001D6C 488B4E01                        mov rcx, qword [rsi + 1]
  2282 00001D70 4839D1                          cmp rcx, rdx
  2283 00001D73 0F8D10020000                    jge L_error_integer_range
  2284 00001D79 4883F900                        cmp rcx, 0
  2285 00001D7D 0F8C06020000                    jl L_error_integer_range
  2286 00001D83 488B4530                        mov rax, PARAM(2)
  2287                                          assert_char(rax)
    53 00001D87 803802              <1>  cmp byte [%1], %2
    54 00001D8A 0F8564030000        <1>  jne L_error_incorrect_type
  2288 00001D90 8A4001                          mov al, byte [rax + 1]
  2289 00001D93 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2290 00001D97 48B8-                           mov rax, sob_void
  2290 00001D99 [0000000000000000] 
  2291 00001DA1 C9                              leave
  2292 00001DA2 C22800                          ret AND_KILL_FRAME(3)
  2293                                  
  2294                                  L_code_ptr_make_vector:
  2295 00001DA5 C8000000                        enter 0, 0
  2296 00001DA9 48837D1802                      cmp COUNT, 2
  2297 00001DAE 0F85A1020000                    jne L_error_arg_count_2
  2298 00001DB4 488B4D20                        mov rcx, PARAM(0)
  2299                                          assert_integer(rcx)
    53 00001DB8 803911              <1>  cmp byte [%1], %2
    54 00001DBB 0F8533030000        <1>  jne L_error_incorrect_type
  2300 00001DC1 488B4901                        mov rcx, qword [rcx + 1]
  2301 00001DC5 4883F900                        cmp rcx, 0
  2302 00001DC9 0F8CBA010000                    jl L_error_integer_range
  2303 00001DCF 488B5528                        mov rdx, PARAM(1)
  2304 00001DD3 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2305 00001DDB E812E6FFFF                      call malloc
  2306 00001DE0 C60022                          mov byte [rax], T_vector
  2307 00001DE3 48894801                        mov qword [rax + 1], rcx
  2308 00001DE7 41B800000000                    mov r8, 0
  2309                                  .L0:
  2310 00001DED 4939C8                          cmp r8, rcx
  2311 00001DF0 740A                            je .L1
  2312 00001DF2 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2313 00001DF7 49FFC0                          inc r8
  2314 00001DFA EBF1                            jmp .L0
  2315                                  .L1:
  2316 00001DFC C9                              leave
  2317 00001DFD C22000                          ret AND_KILL_FRAME(2)
  2318                                          
  2319                                  L_code_ptr_make_string:
  2320 00001E00 C8000000                        enter 0, 0
  2321 00001E04 48837D1802                      cmp COUNT, 2
  2322 00001E09 0F8546020000                    jne L_error_arg_count_2
  2323 00001E0F 488B4D20                        mov rcx, PARAM(0)
  2324                                          assert_integer(rcx)
    53 00001E13 803911              <1>  cmp byte [%1], %2
    54 00001E16 0F85D8020000        <1>  jne L_error_incorrect_type
  2325 00001E1C 488B4901                        mov rcx, qword [rcx + 1]
  2326 00001E20 4883F900                        cmp rcx, 0
  2327 00001E24 0F8C5F010000                    jl L_error_integer_range
  2328 00001E2A 488B5528                        mov rdx, PARAM(1)
  2329                                          assert_char(rdx)
    53 00001E2E 803A02              <1>  cmp byte [%1], %2
    54 00001E31 0F85BD020000        <1>  jne L_error_incorrect_type
  2330 00001E37 8A5201                          mov dl, byte [rdx + 1]
  2331 00001E3A 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2332 00001E3E E8AFE5FFFF                      call malloc
  2333 00001E43 C60003                          mov byte [rax], T_string
  2334 00001E46 48894801                        mov qword [rax + 1], rcx
  2335 00001E4A 41B800000000                    mov r8, 0
  2336                                  .L0:
  2337 00001E50 4939C8                          cmp r8, rcx
  2338 00001E53 740A                            je .L1
  2339 00001E55 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2340 00001E5A 49FFC0                          inc r8
  2341 00001E5D EBF1                            jmp .L0
  2342                                  .L1:
  2343 00001E5F C9                              leave
  2344 00001E60 C22000                          ret AND_KILL_FRAME(2)
  2345                                  
  2346                                  L_code_ptr_numerator:
  2347 00001E63 C8000000                        enter 0, 0
  2348 00001E67 48837D1801                      cmp COUNT, 1
  2349 00001E6C 0F85AE010000                    jne L_error_arg_count_1
  2350 00001E72 488B4520                        mov rax, PARAM(0)
  2351                                          assert_fraction(rax)
    53 00001E76 803812              <1>  cmp byte [%1], %2
    54 00001E79 0F8575020000        <1>  jne L_error_incorrect_type
  2352 00001E7F 488B7801                        mov rdi, qword [rax + 1]
  2353 00001E83 E8E7000000                      call make_integer
  2354 00001E88 C9                              leave
  2355 00001E89 C21800                          ret AND_KILL_FRAME(1)
  2356                                          
  2357                                  L_code_ptr_denominator:
  2358 00001E8C C8000000                        enter 0, 0
  2359 00001E90 48837D1801                      cmp COUNT, 1
  2360 00001E95 0F8585010000                    jne L_error_arg_count_1
  2361 00001E9B 488B4520                        mov rax, PARAM(0)
  2362                                          assert_fraction(rax)
    53 00001E9F 803812              <1>  cmp byte [%1], %2
    54 00001EA2 0F854C020000        <1>  jne L_error_incorrect_type
  2363 00001EA8 488B7809                        mov rdi, qword [rax + 1 + 8]
  2364 00001EAC E8BE000000                      call make_integer
  2365 00001EB1 C9                              leave
  2366 00001EB2 C21800                          ret AND_KILL_FRAME(1)
  2367                                  
  2368                                  L_code_ptr_is_eq:
  2369 00001EB5 C8000000                	enter 0, 0
  2370 00001EB9 48837D1802              	cmp COUNT, 2
  2371 00001EBE 0F8591010000            	jne L_error_arg_count_2
  2372 00001EC4 488B7D20                	mov rdi, PARAM(0)
  2373 00001EC8 488B7528                	mov rsi, PARAM(1)
  2374 00001ECC 4839F7                  	cmp rdi, rsi
  2375 00001ECF 746C                    	je .L_eq_true
  2376 00001ED1 8A17                    	mov dl, byte [rdi]
  2377 00001ED3 3A16                    	cmp dl, byte [rsi]
  2378 00001ED5 7572                    	jne .L_eq_false
  2379 00001ED7 80FA02                  	cmp dl, T_char
  2380 00001EDA 7459                    	je .L_char
  2381 00001EDC 80FA41                  	cmp dl, T_interned_symbol
  2382 00001EDF 7440                    	je .L_interned_symbol
  2383 00001EE1 80FA42                          cmp dl, T_uninterned_symbol
  2384 00001EE4 7443                            je .L_uninterned_symbol
  2385 00001EE6 80FA13                  	cmp dl, T_real
  2386 00001EE9 742E                    	je .L_real
  2387 00001EEB 80FA12                  	cmp dl, T_fraction
  2388 00001EEE 7413                    	je .L_fraction
  2389 00001EF0 80FA11                          cmp dl, T_integer
  2390 00001EF3 7402                            je .L_integer
  2391 00001EF5 EB52                    	jmp .L_eq_false
  2392                                  .L_integer:
  2393 00001EF7 488B4601                        mov rax, qword [rsi + 1]
  2394 00001EFB 483B4701                        cmp rax, qword [rdi + 1]
  2395 00001EFF 7548                            jne .L_eq_false
  2396 00001F01 EB3A                            jmp .L_eq_true
  2397                                  .L_fraction:
  2398 00001F03 488B4601                	mov rax, qword [rsi + 1]
  2399 00001F07 483B4701                	cmp rax, qword [rdi + 1]
  2400 00001F0B 753C                    	jne .L_eq_false
  2401 00001F0D 488B4609                	mov rax, qword [rsi + 1 + 8]
  2402 00001F11 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2403 00001F15 7532                    	jne .L_eq_false
  2404 00001F17 EB24                    	jmp .L_eq_true
  2405                                  .L_real:
  2406 00001F19 488B4601                	mov rax, qword [rsi + 1]
  2407 00001F1D 483B4701                	cmp rax, qword [rdi + 1]
  2408                                  .L_interned_symbol:
  2409                                  	; never reached, because interned_symbols are static!
  2410                                  	; but I'm keeping it in case, I'll ever change
  2411                                  	; the implementation
  2412 00001F21 488B4601                	mov rax, qword [rsi + 1]
  2413 00001F25 483B4701                	cmp rax, qword [rdi + 1]
  2414                                  .L_uninterned_symbol:
  2415 00001F29 4C8B4701                        mov r8, qword [rdi + 1]
  2416 00001F2D 4C3B4601                        cmp r8, qword [rsi + 1]
  2417 00001F31 7516                            jne .L_eq_false
  2418 00001F33 EB08                            jmp .L_eq_true
  2419                                  .L_char:
  2420 00001F35 8A5E01                  	mov bl, byte [rsi + 1]
  2421 00001F38 3A5F01                  	cmp bl, byte [rdi + 1]
  2422 00001F3B 750C                    	jne .L_eq_false
  2423                                  .L_eq_true:
  2424 00001F3D 48B8-                   	mov rax, sob_boolean_true
  2424 00001F3F [0300000000000000] 
  2425 00001F47 EB0A                    	jmp .L_eq_exit
  2426                                  .L_eq_false:
  2427 00001F49 48B8-                   	mov rax, sob_boolean_false
  2427 00001F4B [0200000000000000] 
  2428                                  .L_eq_exit:
  2429 00001F53 C9                      	leave
  2430 00001F54 C22000                  	ret AND_KILL_FRAME(2)
  2431                                  
  2432                                  make_real:
  2433 00001F57 C8000000                        enter 0, 0
  2434 00001F5B BF09000000                      mov rdi, (1 + 8)
  2435 00001F60 E88DE4FFFF                      call malloc
  2436 00001F65 C60013                          mov byte [rax], T_real
  2437 00001F68 F20F114001                      movsd qword [rax + 1], xmm0
  2438 00001F6D C9                              leave 
  2439 00001F6E C3                              ret
  2440                                          
  2441                                  make_integer:
  2442 00001F6F C8000000                        enter 0, 0
  2443 00001F73 4889FE                          mov rsi, rdi
  2444 00001F76 BF09000000                      mov rdi, (1 + 8)
  2445 00001F7B E872E4FFFF                      call malloc
  2446 00001F80 C60011                          mov byte [rax], T_integer
  2447 00001F83 48897001                        mov qword [rax + 1], rsi
  2448 00001F87 C9                              leave
  2449 00001F88 C3                              ret
  2450                                          
  2451                                  L_error_integer_range:
  2452 00001F89 488B3C25[00000000]              mov rdi, qword [stderr]
  2453 00001F91 48BE-                           mov rsi, fmt_integer_range
  2453 00001F93 [2404000000000000] 
  2454 00001F9B B800000000                      mov rax, 0
  2455                                          ENTER
    44 00001FA0 C8000000            <1>  enter 0, 0
    45 00001FA4 4883E4F0            <1>  and rsp, ~15
  2456 00001FA8 E8(00000000)                    call fprintf
  2457                                          LEAVE
    49 00001FAD C9                  <1>  leave
  2458 00001FAE 48C7C0FBFFFFFF                  mov rax, -5
  2459 00001FB5 E8(00000000)                    call exit
  2460                                  
  2461                                  L_error_arg_negative:
  2462 00001FBA 488B3C25[00000000]              mov rdi, qword [stderr]
  2463 00001FC2 48BE-                           mov rsi, fmt_arg_negative
  2463 00001FC4 [FC02000000000000] 
  2464 00001FCC B800000000                      mov rax, 0
  2465                                          ENTER
    44 00001FD1 C8000000            <1>  enter 0, 0
    45 00001FD5 4883E4F0            <1>  and rsp, ~15
  2466 00001FD9 E8(00000000)                    call fprintf
  2467                                          LEAVE
    49 00001FDE C9                  <1>  leave
  2468 00001FDF 48C7C0FDFFFFFF                  mov rax, -3
  2469 00001FE6 E8(00000000)                    call exit
  2470                                  
  2471                                  L_error_arg_count_0:
  2472 00001FEB 488B3C25[00000000]              mov rdi, qword [stderr]
  2473 00001FF3 48BE-                           mov rsi, fmt_arg_count_0
  2473 00001FF5 [2203000000000000] 
  2474 00001FFD 488B5518                        mov rdx, COUNT
  2475 00002001 B800000000                      mov rax, 0
  2476                                          ENTER
    44 00002006 C8000000            <1>  enter 0, 0
    45 0000200A 4883E4F0            <1>  and rsp, ~15
  2477 0000200E E8(00000000)                    call fprintf
  2478                                          LEAVE
    49 00002013 C9                  <1>  leave
  2479 00002014 48C7C0FDFFFFFF                  mov rax, -3
  2480 0000201B E8(00000000)                    call exit
  2481                                  
  2482                                  L_error_arg_count_1:
  2483 00002020 488B3C25[00000000]              mov rdi, qword [stderr]
  2484 00002028 48BE-                           mov rsi, fmt_arg_count_1
  2484 0000202A [4A03000000000000] 
  2485 00002032 488B5518                        mov rdx, COUNT
  2486 00002036 B800000000                      mov rax, 0
  2487                                          ENTER
    44 0000203B C8000000            <1>  enter 0, 0
    45 0000203F 4883E4F0            <1>  and rsp, ~15
  2488 00002043 E8(00000000)                    call fprintf
  2489                                          LEAVE
    49 00002048 C9                  <1>  leave
  2490 00002049 48C7C0FDFFFFFF                  mov rax, -3
  2491 00002050 E8(00000000)                    call exit
  2492                                  
  2493                                  L_error_arg_count_2:
  2494 00002055 488B3C25[00000000]              mov rdi, qword [stderr]
  2495 0000205D 48BE-                           mov rsi, fmt_arg_count_2
  2495 0000205F [B003000000000000] 
  2496 00002067 488B5518                        mov rdx, COUNT
  2497 0000206B B800000000                      mov rax, 0
  2498                                          ENTER
    44 00002070 C8000000            <1>  enter 0, 0
    45 00002074 4883E4F0            <1>  and rsp, ~15
  2499 00002078 E8(00000000)                    call fprintf
  2500                                          LEAVE
    49 0000207D C9                  <1>  leave
  2501 0000207E 48C7C0FDFFFFFF                  mov rax, -3
  2502 00002085 E8(00000000)                    call exit
  2503                                  
  2504                                  L_error_arg_count_12:
  2505 0000208A 488B3C25[00000000]              mov rdi, qword [stderr]
  2506 00002092 48BE-                           mov rsi, fmt_arg_count_12
  2506 00002094 [7003000000000000] 
  2507 0000209C 488B5518                        mov rdx, COUNT
  2508 000020A0 B800000000                      mov rax, 0
  2509                                          ENTER
    44 000020A5 C8000000            <1>  enter 0, 0
    45 000020A9 4883E4F0            <1>  and rsp, ~15
  2510 000020AD E8(00000000)                    call fprintf
  2511                                          LEAVE
    49 000020B2 C9                  <1>  leave
  2512 000020B3 48C7C0FDFFFFFF                  mov rax, -3
  2513 000020BA E8(00000000)                    call exit
  2514                                  
  2515                                  L_error_arg_count_3:
  2516 000020BF 488B3C25[00000000]              mov rdi, qword [stderr]
  2517 000020C7 48BE-                           mov rsi, fmt_arg_count_3
  2517 000020C9 [D703000000000000] 
  2518 000020D1 488B5518                        mov rdx, COUNT
  2519 000020D5 B800000000                      mov rax, 0
  2520                                          ENTER
    44 000020DA C8000000            <1>  enter 0, 0
    45 000020DE 4883E4F0            <1>  and rsp, ~15
  2521 000020E2 E8(00000000)                    call fprintf
  2522                                          LEAVE
    49 000020E7 C9                  <1>  leave
  2523 000020E8 48C7C0FDFFFFFF                  mov rax, -3
  2524 000020EF E8(00000000)                    call exit
  2525                                          
  2526                                  L_error_incorrect_type:
  2527 000020F4 488B3C25[00000000]              mov rdi, qword [stderr]
  2528 000020FC 48BE-                           mov rsi, fmt_type
  2528 000020FE [0004000000000000] 
  2529 00002106 B800000000                      mov rax, 0
  2530                                          ENTER
    44 0000210B C8000000            <1>  enter 0, 0
    45 0000210F 4883E4F0            <1>  and rsp, ~15
  2531 00002113 E8(00000000)                    call fprintf
  2532                                          LEAVE
    49 00002118 C9                  <1>  leave
  2533 00002119 48C7C0FCFFFFFF                  mov rax, -4
  2534 00002120 E8(00000000)                    call exit
  2535                                  
  2536                                  L_error_division_by_zero:
  2537 00002125 488B3C25[00000000]              mov rdi, qword [stderr]
  2538 0000212D 48BE-                           mov rsi, fmt_division_by_zero
  2538 0000212F [4104000000000000] 
  2539 00002137 B800000000                      mov rax, 0
  2540                                          ENTER
    44 0000213C C8000000            <1>  enter 0, 0
    45 00002140 4883E4F0            <1>  and rsp, ~15
  2541 00002144 E8(00000000)                    call fprintf
  2542                                          LEAVE
    49 00002149 C9                  <1>  leave
  2543 0000214A 48C7C0F8FFFFFF                  mov rax, -8
  2544 00002151 E8(00000000)                    call exit
  2545                                  
  2546                                  section .data
  2547                                  gensym_count:
  2548 000002F1 0000000000000000                dq 0
  2549                                  fmt_char:
  2550 000002F9 256300                          db `%c\0`
  2551                                  fmt_arg_negative:
  2552 000002FC 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
  2552 00000305 7267756D656E742063-
  2552 0000030E 616E6E6F7420626520-
  2552 00000317 6E656761746976652E-
  2552 00000320 0A00               
  2553                                  fmt_arg_count_0:
  2554 00000322 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2554 0000032B 74696E67207A65726F-
  2554 00000334 20617267756D656E74-
  2554 0000033D 732E20466F756E6420-
  2554 00000346 25640A00           
  2555                                  fmt_arg_count_1:
  2556 0000034A 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2556 00000353 74696E67206F6E6520-
  2556 0000035C 617267756D656E742E-
  2556 00000365 20466F756E64202564-
  2556 0000036E 0A00               
  2557                                  fmt_arg_count_12:
  2558 00000370 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2558 00000379 74696E67206F6E6520-
  2558 00000382 726571756972656420-
  2558 0000038B 616E64206F6E65206F-
  2558 00000394 7074696F6E616C2061-
  2558 0000039D 7267756D656E742E20-
  2558 000003A6 466F756E642025640A-
  2558 000003AF 00                 
  2559                                  fmt_arg_count_2:
  2560 000003B0 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2560 000003B9 74696E672074776F20-
  2560 000003C2 617267756D656E7473-
  2560 000003CB 2E20466F756E642025-
  2560 000003D4 640A00             
  2561                                  fmt_arg_count_3:
  2562 000003D7 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2562 000003E0 74696E672074687265-
  2562 000003E9 6520617267756D656E-
  2562 000003F2 74732E20466F756E64-
  2562 000003FB 2025640A00         
  2563                                  fmt_type:
  2564 00000400 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2564 00000409 696F6E207061737365-
  2564 00000412 6420696E636F727265-
  2564 0000041B 637420747970650A00 
  2565                                  fmt_integer_range:
  2566 00000424 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2566 0000042D 7265637420696E7465-
  2566 00000436 6765722072616E6765-
  2566 0000043F 0A00               
  2567                                  fmt_division_by_zero:
  2568 00000441 212121204469766973-             db `!!! Division by zero\n\0`
  2568 0000044A 696F6E206279207A65-
  2568 00000453 726F0A00           
  2569                                  fmt_scheme_error_part_1:
  2570 00000457 0A2121212054686520-             db `\n!!! The procedure \0`
  2570 00000460 70726F636564757265-
  2570 00000469 2000               
  2571                                  fmt_scheme_error_part_2:
  2572 0000046B 2061736B656420746F-             db ` asked to terminate the program\n`
  2572 00000474 207465726D696E6174-
  2572 0000047D 65207468652070726F-
  2572 00000486 6772616D0A         
  2573 0000048B 202020207769746820-             db `    with the following message:\n\n\0`
  2573 00000494 74686520666F6C6C6F-
  2573 0000049D 77696E67206D657373-
  2573 000004A6 6167653A0A0A00     
  2574                                  fmt_scheme_error_part_3:
  2575 000004AD 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2575 000004B6 210A0A00           
