     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "return"
    97 00000007 0600000000000000        	dq 6
    98 0000000F 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
    99                                  	; L_constants + 21:
   100 00000015 11                      	db T_integer	; 1
   101 00000016 0100000000000000        	dq 1
   102                                  
   103                                  
   104                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
   105                                  global main
   106                                  section .text
   107                                  main:
   108 00000000 C8000000                        enter 0, 0
   109 00000004 6A00                            push 0
   110 00000006 6A00                            push 0
   111 00000008 68[A5010000]                    push Lend
   112 0000000D C8000000                        enter 0, 0
   113                                  
   114                                  	; preparing a non-tail-call
   115 00000011 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   116 00000016 E8F5020000              	call malloc
   117 0000001B 50                      	push rax
   118 0000001C BF00000000              	mov rdi, 8 * 0	; new rib
   119 00000021 E8EA020000              	call malloc
   120 00000026 50                      	push rax
   121 00000027 BF08000000              	mov rdi, 8 * 1	; extended env
   122 0000002C E8DF020000              	call malloc
   123 00000031 488B7D10                	mov rdi, ENV
   124 00000035 BE00000000              	mov rsi, 0
   125 0000003A BA01000000              	mov rdx, 1
   126                                  .L_lambda_opt_env_loop_0001:	; ext_env[i + 1] <-- env[i]
   127 0000003F 4883FE00                	cmp rsi, 0
   128 00000043 7410                    	je .L_lambda_opt_env_end_0001
   129 00000045 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   130 00000049 48890CD0                	mov qword [rax + 8 * rdx], rcx
   131 0000004D 48FFC6                  	inc rsi
   132 00000050 48FFC2                  	inc rdx
   133 00000053 EBEA                    	jmp .L_lambda_opt_env_loop_0001
   134                                  .L_lambda_opt_env_end_0001:
   135 00000055 5B                      	pop rbx
   136 00000056 BE00000000              	mov rsi, 0
   137                                  .L_lambda_opt_params_loop_0001:	; copy params
   138 0000005B 4883FE00                	cmp rsi, 0
   139 0000005F 740E                    	je .L_lambda_opt_params_end_0001
   140 00000061 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   141 00000066 488914F3                	mov qword [rbx + 8 * rsi], rdx
   142 0000006A 48FFC6                  	inc rsi
   143 0000006D EBEC                    	jmp .L_lambda_opt_params_loop_0001
   144                                  .L_lambda_opt_params_end_0001:
   145 0000006F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   146 00000072 4889C3                  	mov rbx, rax
   147 00000075 58                      	pop rax
   148 00000076 C60004                  	mov byte [rax], T_closure
   149 00000079 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   150 0000007D 48C74009[87000000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0001
   151 00000085 EB5B                    	jmp .L_lambda_opt_end_0001
   152                                  .L_lambda_opt_code_0001:	; lambda-opt body
   153 00000087 48837C241001            	cmp qword [rsp + 8 * 2], 1
   154 0000008D 740D                    	je .L_lambda_opt_arity_check_exact_0001
   155 0000008F 7F51                    	jg .L_lambda_opt_arity_check_more_0001
   156 00000091 FF742410                	push qword [rsp + 8 * 2]
   157 00000095 6A01                    	push 1
   158 00000097 E941020000              	jmp L_error_incorrect_arity_opt
   159                                  .L_lambda_opt_arity_check_exact_0001:
   160 0000009C 4883EC08                	sub rsp, 8
   161 000000A0 488B442408              	mov rax, qword[rsp + 8 *1]
   162 000000A5 48890424                	mov qword[rsp], rax
   163 000000A9 488B442410              	mov rax, qword[rsp + 8 *2]
   164 000000AE 4889442401              	mov qword[rsp + 1], rax
   165 000000B3 B802000000              	mov rax, 2
   166 000000B8 4889442410              	mov qword[rsp + 8 *2], rax
   167 000000BD 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
   168 000000C2 4889442418              	mov qword[rsp + 8 * 3 + 0 * 8], rax
   169 000000C7 48B8-                   	mov rax, sob_nil
   169 000000C9 [0100000000000000] 
   170 000000D1 4889442430              	mov qword[rsp + 8 * 4 + 8 * 2], rax
   171 000000D6 C8000000                	enter 0, 0
   172 000000DA 488B4520                	mov rax, PARAM(0)	; param a
   173 000000DE C9                      	leave
   174 000000DF C22000                  	ret AND_KILL_FRAME(2)
   175                                  .L_lambda_opt_end_0001:	; new closure is in rax
   176                                  .L_lambda_opt_arity_check_more_0001:
   177 000000E2 50                      	push rax
   178 000000E3 6A01                    	push 1	; arg count
   179 000000E5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   180 000000EA E821020000              	call malloc
   181 000000EF 50                      	push rax
   182 000000F0 BF00000000              	mov rdi, 8 * 0	; new rib
   183 000000F5 E816020000              	call malloc
   184 000000FA 50                      	push rax
   185 000000FB BF08000000              	mov rdi, 8 * 1	; extended env
   186 00000100 E80B020000              	call malloc
   187 00000105 488B7D10                	mov rdi, ENV
   188 00000109 BE00000000              	mov rsi, 0
   189 0000010E BA01000000              	mov rdx, 1
   190                                  .L_lambda_simple_env_loop_0001:	; ext_env[i + 1] <-- env[i]
   191 00000113 4883FE00                	cmp rsi, 0
   192 00000117 7410                    	je .L_lambda_simple_env_end_0001
   193 00000119 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   194 0000011D 48890CD0                	mov qword [rax + 8 * rdx], rcx
   195 00000121 48FFC6                  	inc rsi
   196 00000124 48FFC2                  	inc rdx
   197 00000127 EBEA                    	jmp .L_lambda_simple_env_loop_0001
   198                                  .L_lambda_simple_env_end_0001:
   199 00000129 5B                      	pop rbx
   200 0000012A BE00000000              	mov rsi, 0
   201                                  .L_lambda_simple_params_loop_0001:	; copy params
   202 0000012F 4883FE00                	cmp rsi, 0
   203 00000133 740E                    	je .L_lambda_simple_params_end_0001
   204 00000135 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   205 0000013A 488914F3                	mov qword [rbx + 8 * rsi], rdx
   206 0000013E 48FFC6                  	inc rsi
   207 00000141 EBEC                    	jmp .L_lambda_simple_params_loop_0001
   208                                  .L_lambda_simple_params_end_0001:
   209 00000143 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   210 00000146 4889C3                  	mov rbx, rax
   211 00000149 58                      	pop rax
   212 0000014A C60004                  	mov byte [rax], T_closure
   213 0000014D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   214 00000151 48C74009[5B010000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0001
   215 00000159 EB3B                    	jmp .L_lambda_simple_end_0001
   216                                  .L_lambda_simple_code_0001:	; lambda-simple body
   217 0000015B 48837C241001            	cmp qword [rsp + 8 * 2], 1
   218 00000161 740B                    	je .L_lambda_simple_arity_check_ok_0001
   219 00000163 FF742410                	push qword [rsp + 8 * 2]
   220 00000167 6A01                    	push 1
   221 00000169 E95B010000              	jmp L_error_incorrect_arity_simple
   222                                  .L_lambda_simple_arity_check_ok_0001:
   223 0000016E C8000000                	enter 0, 0
   224                                  	; preparing a non-tail-call
   225 00000172 48B8-                   	mov rax, L_constants + 21
   225 00000174 [1500000000000000] 
   226 0000017C 50                      	push rax
   227 0000017D 6A01                    	push 1	; arg count
   228 0000017F 488B4520                	mov rax, PARAM(0)	; param f
   229 00000183 803804                  	cmp byte [rax], T_closure
   230 00000186 0F85DB000000            	jne L_error_non_closure
   231 0000018C FF7001                  	push SOB_CLOSURE_ENV(rax)
   232 0000018F FF5009                  	call SOB_CLOSURE_CODE(rax)
   233 00000192 C9                      	leave
   234 00000193 C21800                  	ret AND_KILL_FRAME(1)
   235                                  .L_lambda_simple_end_0001:	; new closure is in rax
   236 00000196 803804                  	cmp byte [rax], T_closure
   237 00000199 0F85C8000000            	jne L_error_non_closure
   238 0000019F FF7001                  	push SOB_CLOSURE_ENV(rax)
   239 000001A2 FF5009                  	call SOB_CLOSURE_CODE(rax)
   240                                  Lend:
   241 000001A5 4889C7                  	mov rdi, rax
   242 000001A8 E8B8030000              	call print_sexpr_if_not_void
   243                                  
   244 000001AD 48BF-                           mov rdi, fmt_memory_usage
   244 000001AF [B600000000000000] 
   245 000001B7 488B3425[3C010000]              mov rsi, qword [top_of_memory]
   246 000001BF 4881EE[00000000]                sub rsi, memory
   247 000001C6 B800000000                      mov rax, 0
   248                                          ENTER
    44 000001CB C8000000            <1>  enter 0, 0
    45 000001CF 4883E4F0            <1>  and rsp, ~15
   249 000001D3 E8(00000000)                    call printf
   250                                          LEAVE
    49 000001D8 C9                  <1>  leave
   251 000001D9 B800000000                      mov rax, 0
   252 000001DE E8(00000000)                    call exit
   253                                  
   254                                  L_error_fvar_undefined:
   255 000001E3 50                              push rax
   256 000001E4 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
   257 000001EC 48BE-                           mov rsi, fmt_undefined_free_var_1
   257 000001EE [1E00000000000000] 
   258 000001F6 B800000000                      mov rax, 0
   259                                          ENTER
    44 000001FB C8000000            <1>  enter 0, 0
    45 000001FF 4883E4F0            <1>  and rsp, ~15
   260 00000203 E8(00000000)                    call fprintf
   261                                          LEAVE
    49 00000208 C9                  <1>  leave
   262 00000209 58                              pop rax
   263 0000020A 488B4001                        mov rax, qword [rax + 1] ; string
   264 0000020E 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
   265 00000212 BE01000000                      mov rsi, 1               ; sizeof(char)
   266 00000217 488B5001                        mov rdx, qword [rax + 1] ; string-length
   267 0000021B 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
   268 00000223 B800000000                      mov rax, 0
   269                                          ENTER
    44 00000228 C8000000            <1>  enter 0, 0
    45 0000022C 4883E4F0            <1>  and rsp, ~15
   270 00000230 E8(00000000)                    call fwrite
   271                                          LEAVE
    49 00000235 C9                  <1>  leave
   272 00000236 488B3C25[00000000]              mov rdi, [stderr]       ; destination
   273 0000023E 48BE-                           mov rsi, fmt_undefined_free_var_2
   273 00000240 [3500000000000000] 
   274 00000248 B800000000                      mov rax, 0
   275                                          ENTER
    44 0000024D C8000000            <1>  enter 0, 0
    45 00000251 4883E4F0            <1>  and rsp, ~15
   276 00000255 E8(00000000)                    call fprintf
   277                                          LEAVE
    49 0000025A C9                  <1>  leave
   278 0000025B 48C7C0F6FFFFFF                  mov rax, -10
   279 00000262 E8(00000000)                    call exit
   280                                  
   281                                  L_error_non_closure:
   282 00000267 488B3C25[00000000]              mov rdi, qword [stderr]
   283 0000026F 48BE-                           mov rsi, fmt_non_closure
   283 00000271 [EC00000000000000] 
   284 00000279 B800000000                      mov rax, 0
   285                                          ENTER
    44 0000027E C8000000            <1>  enter 0, 0
    45 00000282 4883E4F0            <1>  and rsp, ~15
   286 00000286 E8(00000000)                    call fprintf
   287                                          LEAVE
    49 0000028B C9                  <1>  leave
   288 0000028C 48C7C0FEFFFFFF                  mov rax, -2
   289 00000293 E8(00000000)                    call exit
   290                                  
   291                                  L_error_improper_list:
   292 00000298 488B3C25[00000000]      	mov rdi, qword [stderr]
   293 000002A0 48BE-                   	mov rsi, fmt_error_improper_list
   293 000002A2 [1401000000000000] 
   294 000002AA B800000000              	mov rax, 0
   295                                          ENTER
    44 000002AF C8000000            <1>  enter 0, 0
    45 000002B3 4883E4F0            <1>  and rsp, ~15
   296 000002B7 E8(00000000)            	call fprintf
   297                                          LEAVE
    49 000002BC C9                  <1>  leave
   298 000002BD 48C7C0F9FFFFFF          	mov rax, -7
   299 000002C4 E8(00000000)            	call exit
   300                                  
   301                                  L_error_incorrect_arity_simple:
   302 000002C9 488B3C25[00000000]              mov rdi, qword [stderr]
   303 000002D1 48BE-                           mov rsi, fmt_incorrect_arity_simple
   303 000002D3 [5700000000000000] 
   304 000002DB EB12                            jmp L_error_incorrect_arity_common
   305                                  L_error_incorrect_arity_opt:
   306 000002DD 488B3C25[00000000]              mov rdi, qword [stderr]
   307 000002E5 48BE-                           mov rsi, fmt_incorrect_arity_opt
   307 000002E7 [8200000000000000] 
   308                                  L_error_incorrect_arity_common:
   309 000002EF 5A                              pop rdx
   310 000002F0 59                              pop rcx
   311 000002F1 B800000000                      mov rax, 0
   312                                          ENTER
    44 000002F6 C8000000            <1>  enter 0, 0
    45 000002FA 4883E4F0            <1>  and rsp, ~15
   313 000002FE E8(00000000)                    call fprintf
   314                                          LEAVE
    49 00000303 C9                  <1>  leave
   315 00000304 48C7C0FAFFFFFF                  mov rax, -6
   316 0000030B E8(00000000)                    call exit
   317                                  
   318                                  section .data
   319                                  fmt_undefined_free_var_1:
   320 0000001E 212121205468652066-             db `!!! The free variable \0`
   320 00000027 726565207661726961-
   320 00000030 626C652000         
   321                                  fmt_undefined_free_var_2:
   322 00000035 207761732075736564-             db ` was used before it was defined.\n\0`
   322 0000003E 206265666F72652069-
   322 00000047 742077617320646566-
   322 00000050 696E65642E0A00     
   323                                  fmt_incorrect_arity_simple:
   324 00000057 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   324 00000060 74656420256C642061-
   324 00000069 7267756D656E74732C-
   324 00000072 206275742067697665-
   324 0000007B 6E20256C640A00     
   325                                  fmt_incorrect_arity_opt:
   326 00000082 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   326 0000008B 746564206174206C65-
   326 00000094 61737420256C642061-
   326 0000009D 7267756D656E74732C-
   326 000000A6 206275742067697665-
   326 000000AF 6E20256C640A00     
   327                                  fmt_memory_usage:
   328 000000B6 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   328 000000BF 20256C642062797465-
   328 000000C8 73206F662064796E61-
   328 000000D1 6D6963616C6C792D61-
   328 000000DA 6C6C6F636174656420-
   328 000000E3 6D656D6F72790A0A00 
   329                                  fmt_non_closure:
   330 000000EC 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   330 000000F5 7074696E6720746F20-
   330 000000FE 6170706C792061206E-
   330 00000107 6F6E2D636C6F737572-
   330 00000110 65210A00           
   331                                  fmt_error_improper_list:
   332 00000114 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   332 0000011D 7267756D656E742069-
   332 00000126 73206E6F7420612070-
   332 0000012F 726F706572206C6973-
   332 00000138 74210A00           
   333                                  
   334                                  section .bss
   335                                  memory:
   336 00000000 <res 40000000h>         	resb gbytes(1)
   337                                  
   338                                  section .data
   339                                  top_of_memory:
   340 0000013C [0000000000000000]              dq memory
   341                                  
   342                                  section .text
   343                                  malloc:
   344 00000310 488B0425[3C010000]              mov rax, qword [top_of_memory]
   345 00000318 48013C25[3C010000]              add qword [top_of_memory], rdi
   346 00000320 C3                              ret
   347                                  
   348                                  L_code_ptr_return:
   349 00000321 48837C241002            	cmp qword [rsp + 8*2], 2
   350 00000327 0F85461C0000            	jne L_error_arg_count_2
   351 0000032D 488B4C2418              	mov rcx, qword [rsp + 8*3]
   352                                  	assert_integer(rcx)
    53 00000332 803911              <1>  cmp byte [%1], %2
    54 00000335 0F85D71C0000        <1>  jne L_error_incorrect_type
   353 0000033B 488B4901                	mov rcx, qword [rcx + 1]
   354 0000033F 4883F900                	cmp rcx, 0
   355 00000343 0F8C5E1B0000            	jl L_error_integer_range
   356 00000349 488B442420              	mov rax, qword [rsp + 8*4]
   357                                  .L0:
   358 0000034E 4883F900                        cmp rcx, 0
   359 00000352 7409                            je .L1
   360 00000354 488B6D00                	mov rbp, qword [rbp]
   361 00000358 48FFC9                  	dec rcx
   362 0000035B 7FF1                    	jg .L0
   363                                  .L1:
   364 0000035D 4889EC                  	mov rsp, rbp
   365 00000360 5D                      	pop rbp
   366 00000361 5B                              pop rbx
   367 00000362 488B4C2408                      mov rcx, qword [rsp + 8*1]
   368 00000367 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
   369 0000036C FFE3                    	jmp rbx
   370                                  
   371                                  L_code_ptr_make_list:
   372 0000036E C8000000                	enter 0, 0
   373 00000372 48837D1801                      cmp COUNT, 1
   374 00000377 740C                            je .L0
   375 00000379 48837D1802                      cmp COUNT, 2
   376 0000037E 7411                            je .L1
   377 00000380 E9231C0000                      jmp L_error_arg_count_12
   378                                  .L0:
   379 00000385 49B9-                           mov r9, sob_void
   379 00000387 [0000000000000000] 
   380 0000038F EB04                            jmp .L2
   381                                  .L1:
   382 00000391 4C8B4D28                        mov r9, PARAM(1)
   383                                  .L2:
   384 00000395 488B4D20                        mov rcx, PARAM(0)
   385                                          assert_integer(rcx)
    53 00000399 803911              <1>  cmp byte [%1], %2
    54 0000039C 0F85701C0000        <1>  jne L_error_incorrect_type
   386 000003A2 488B4901                        mov rcx, qword [rcx + 1]
   387 000003A6 4883F900                        cmp rcx, 0
   388 000003AA 0F8C281B0000                    jl L_error_arg_negative
   389 000003B0 49B8-                           mov r8, sob_nil
   389 000003B2 [0100000000000000] 
   390                                  .L3:
   391 000003BA 4883F900                        cmp rcx, 0
   392 000003BE 7E1D                            jle .L4
   393 000003C0 BF11000000                      mov rdi, 1 + 8 + 8
   394 000003C5 E846FFFFFF                      call malloc
   395 000003CA C60021                          mov byte [rax], T_pair
   396 000003CD 4C894801                        mov qword [rax + 1], r9
   397 000003D1 4C894009                        mov qword [rax + 1 + 8], r8
   398 000003D5 4989C0                          mov r8, rax
   399 000003D8 48FFC9                          dec rcx
   400 000003DB EBDD                            jmp .L3
   401                                  .L4:
   402 000003DD 4C89C0                          mov rax, r8
   403 000003E0 48837D1802                      cmp COUNT, 2
   404 000003E5 7404                            je .L5
   405 000003E7 C9                              leave
   406 000003E8 C21800                          ret AND_KILL_FRAME(1)
   407                                  .L5:
   408 000003EB C9                      	leave
   409 000003EC C22000                  	ret AND_KILL_FRAME(2)
   410                                  
   411                                  L_code_ptr_is_primitive:
   412 000003EF C8000000                	enter 0, 0
   413 000003F3 48837D1801              	cmp COUNT, 1
   414 000003F8 0F85401B0000            	jne L_error_arg_count_1
   415 000003FE 488B4520                	mov rax, PARAM(0)
   416                                  	assert_closure(rax)
    53 00000402 803804              <1>  cmp byte [%1], %2
    54 00000405 0F85071C0000        <1>  jne L_error_incorrect_type
   417 0000040B 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
   418 00000410 750C                    	jne .L_false
   419 00000412 48B8-                   	mov rax, sob_boolean_true
   419 00000414 [0300000000000000] 
   420 0000041C EB0A                    	jmp .L_end
   421                                  .L_false:
   422 0000041E 48B8-                   	mov rax, sob_boolean_false
   422 00000420 [0200000000000000] 
   423                                  .L_end:
   424 00000428 C9                      	leave
   425 00000429 C21800                  	ret AND_KILL_FRAME(1)
   426                                  
   427                                  L_code_ptr_length:
   428 0000042C C8000000                	enter 0, 0
   429 00000430 48837D1801              	cmp COUNT, 1
   430 00000435 0F85031B0000            	jne L_error_arg_count_1
   431 0000043B 488B5D20                	mov rbx, PARAM(0)
   432 0000043F BF00000000              	mov rdi, 0
   433                                  .L:
   434 00000444 803B01                  	cmp byte [rbx], T_nil
   435 00000447 7412                    	je .L_end
   436                                  	assert_pair(rbx)
    53 00000449 803B21              <1>  cmp byte [%1], %2
    54 0000044C 0F85C01B0000        <1>  jne L_error_incorrect_type
   437 00000452 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
   438 00000456 48FFC7                  	inc rdi
   439 00000459 EBE9                    	jmp .L
   440                                  .L_end:
   441 0000045B E82D1A0000              	call make_integer
   442 00000460 C9                      	leave
   443 00000461 C21800                  	ret AND_KILL_FRAME(1)
   444                                  
   445                                  L_code_ptr_break:
   446 00000464 48837C241000                    cmp qword [rsp + 8 * 2], 0
   447 0000046A 0F85991A0000                    jne L_error_arg_count_0
   448 00000470 CC                              int3
   449 00000471 48B8-                           mov rax, sob_void
   449 00000473 [0000000000000000] 
   450 0000047B C21000                          ret AND_KILL_FRAME(0)        
   451                                  
   452                                  L_code_ptr_frame:
   453 0000047E C8000000                        enter 0, 0
   454 00000482 48837D1800                      cmp COUNT, 0
   455 00000487 0F857C1A0000                    jne L_error_arg_count_0
   456                                  
   457 0000048D 48BF-                           mov rdi, fmt_frame
   457 0000048F [4401000000000000] 
   458 00000497 488B7500                        mov rsi, qword [rbp]    ; old rbp
   459 0000049B 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
   460 0000049F 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
   461 000004A3 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
   462 000004A7 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
   463 000004AB 6A00                            push 0
   464 000004AD 4151                            push r9
   465 000004AF 4150                            push r8                   ; we'll use it when printing the params
   466 000004B1 B800000000                      mov rax, 0
   467                                          
   468                                          ENTER
    44 000004B6 C8000000            <1>  enter 0, 0
    45 000004BA 4883E4F0            <1>  and rsp, ~15
   469 000004BE E8(00000000)                    call printf
   470                                          LEAVE
    49 000004C3 C9                  <1>  leave
   471                                  
   472                                  .L:
   473 000004C4 488B0C24                        mov rcx, qword [rsp]
   474 000004C8 4883F900                        cmp rcx, 0
   475 000004CC 7467                            je .L_out
   476 000004CE 48BF-                           mov rdi, fmt_frame_param_prefix
   476 000004D0 [7D01000000000000] 
   477 000004D8 488B742410                      mov rsi, qword [rsp + 8*2]
   478 000004DD B800000000                      mov rax, 0
   479                                          
   480                                          ENTER
    44 000004E2 C8000000            <1>  enter 0, 0
    45 000004E6 4883E4F0            <1>  and rsp, ~15
   481 000004EA E8(00000000)                    call printf
   482                                          LEAVE
    49 000004EF C9                  <1>  leave
   483                                  
   484 000004F0 488B0C24                        mov rcx, qword [rsp]
   485 000004F4 48FFC9                          dec rcx
   486 000004F7 48890C24                        mov qword [rsp], rcx    ; dec arg count
   487 000004FB 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
   488 00000500 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
   489 00000505 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
   490 00000509 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
   491 0000050E 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
   492 00000511 E87B000000                      call print_sexpr
   493 00000516 48BF-                           mov rdi, fmt_newline
   493 00000518 [A901000000000000] 
   494 00000520 B800000000                      mov rax, 0
   495                                          ENTER
    44 00000525 C8000000            <1>  enter 0, 0
    45 00000529 4883E4F0            <1>  and rsp, ~15
   496 0000052D E8(00000000)                    call printf
   497                                          LEAVE
    49 00000532 C9                  <1>  leave
   498 00000533 EB8F                            jmp .L
   499                                  .L_out:
   500 00000535 48BF-                           mov rdi, fmt_frame_continue
   500 00000537 [8E01000000000000] 
   501 0000053F B800000000                      mov rax, 0
   502                                          ENTER
    44 00000544 C8000000            <1>  enter 0, 0
    45 00000548 4883E4F0            <1>  and rsp, ~15
   503 0000054C E8(00000000)                    call printf
   504 00000551 E8(00000000)                    call getchar
   505                                          LEAVE
    49 00000556 C9                  <1>  leave
   506                                          
   507 00000557 48B8-                           mov rax, sob_void
   507 00000559 [0000000000000000] 
   508 00000561 C9                              leave
   509 00000562 C21000                          ret AND_KILL_FRAME(0)
   510                                          
   511                                  print_sexpr_if_not_void:
   512 00000565 4881FF[00000000]        	cmp rdi, sob_void
   513 0000056C 7422                    	je .done
   514 0000056E E81E000000              	call print_sexpr
   515 00000573 48BF-                   	mov rdi, fmt_newline
   515 00000575 [A901000000000000] 
   516 0000057D B800000000              	mov rax, 0
   517                                  	ENTER
    44 00000582 C8000000            <1>  enter 0, 0
    45 00000586 4883E4F0            <1>  and rsp, ~15
   518 0000058A E8(00000000)            	call printf
   519                                  	LEAVE
    49 0000058F C9                  <1>  leave
   520                                  .done:
   521 00000590 C3                      	ret
   522                                  
   523                                  section .data
   524                                  fmt_frame:
   525 00000144 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
   525 0000014D 207265742061646472-
   525 00000156 203D2025703B206C65-
   525 0000015F 7820656E76203D2025-
   525 00000168 703B20706172616D20-
   525 00000171 636F756E74203D2025-
   525 0000017A 640A00             
   526                                  fmt_frame_param_prefix:
   527 0000017D 3D3D5B706172616D20-             db `==[param %d]==> \0`
   527 00000186 25645D3D3D3E2000   
   528                                  fmt_frame_continue:
   529 0000018E 486974203C456E7465-             db `Hit <Enter> to continue...\0`
   529 00000197 723E20746F20636F6E-
   529 000001A0 74696E75652E2E2E00 
   530                                  fmt_newline:
   531 000001A9 0A00                    	db `\n\0`
   532                                  fmt_void:
   533 000001AB 233C766F69643E00        	db `#<void>\0`
   534                                  fmt_nil:
   535 000001B3 282900                  	db `()\0`
   536                                  fmt_boolean_false:
   537 000001B6 236600                  	db `#f\0`
   538                                  fmt_boolean_true:
   539 000001B9 237400                  	db `#t\0`
   540                                  fmt_char_backslash:
   541 000001BC 235C5C00                	db `#\\\\\0`
   542                                  fmt_char_dquote:
   543 000001C0 235C2200                	db `#\\"\0`
   544                                  fmt_char_simple:
   545 000001C4 235C256300              	db `#\\%c\0`
   546                                  fmt_char_null:
   547 000001C9 235C6E756C00            	db `#\\nul\0`
   548                                  fmt_char_bell:
   549 000001CF 235C62656C6C00          	db `#\\bell\0`
   550                                  fmt_char_backspace:
   551 000001D6 235C6261636B737061-     	db `#\\backspace\0`
   551 000001DF 636500             
   552                                  fmt_char_tab:
   553 000001E2 235C74616200            	db `#\\tab\0`
   554                                  fmt_char_newline:
   555 000001E8 235C6E65776C696E65-     	db `#\\newline\0`
   555 000001F1 00                 
   556                                  fmt_char_formfeed:
   557 000001F2 235C7061676500          	db `#\\page\0`
   558                                  fmt_char_return:
   559 000001F9 235C72657475726E00      	db `#\\return\0`
   560                                  fmt_char_escape:
   561 00000202 235C65736300            	db `#\\esc\0`
   562                                  fmt_char_space:
   563 00000208 235C737061636500        	db `#\\space\0`
   564                                  fmt_char_hex:
   565 00000210 235C782530325800        	db `#\\x%02X\0`
   566                                  fmt_gensym:
   567 00000218 47256C6400                      db `G%ld\0`
   568                                  fmt_closure:
   569 0000021D 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   569 00000226 206174203078253038-
   569 0000022F 5820656E763D307825-
   569 00000238 30385820636F64653D-
   569 00000241 3078253038583E00   
   570                                  fmt_lparen:
   571 00000249 2800                    	db `(\0`
   572                                  fmt_dotted_pair:
   573 0000024B 202E2000                	db ` . \0`
   574                                  fmt_rparen:
   575 0000024F 2900                    	db `)\0`
   576                                  fmt_space:
   577 00000251 2000                    	db ` \0`
   578                                  fmt_empty_vector:
   579 00000253 23282900                	db `#()\0`
   580                                  fmt_vector:
   581 00000257 232800                  	db `#(\0`
   582                                  fmt_real:
   583 0000025A 256600                  	db `%f\0`
   584                                  fmt_fraction:
   585 0000025D 256C642F256C6400        	db `%ld/%ld\0`
   586                                  fmt_zero:
   587 00000265 3000                    	db `0\0`
   588                                  fmt_int:
   589 00000267 256C6400                	db `%ld\0`
   590                                  fmt_unknown_scheme_object_error:
   591 0000026B 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
   591 00000274 6F723A20556E6B6E6F-
   591 0000027D 776E20536368656D65-
   591 00000286 2D6F626A6563742028-
   591 0000028F 525454492030782530-
   591 00000298 32582920           
   592 0000029C 617420616464726573-     	db `at address 0x%08X\n\n\0`
   592 000002A5 73203078253038580A-
   592 000002AE 0A00               
   593                                  fmt_dquote:
   594 000002B0 2200                    	db `\"\0`
   595                                  fmt_string_char:
   596 000002B2 256300                          db `%c\0`
   597                                  fmt_string_char_7:
   598 000002B5 5C6100                          db `\\a\0`
   599                                  fmt_string_char_8:
   600 000002B8 5C6200                          db `\\b\0`
   601                                  fmt_string_char_9:
   602 000002BB 5C7400                          db `\\t\0`
   603                                  fmt_string_char_10:
   604 000002BE 5C6E00                          db `\\n\0`
   605                                  fmt_string_char_11:
   606 000002C1 5C7600                          db `\\v\0`
   607                                  fmt_string_char_12:
   608 000002C4 5C6600                          db `\\f\0`
   609                                  fmt_string_char_13:
   610 000002C7 5C7200                          db `\\r\0`
   611                                  fmt_string_char_34:
   612 000002CA 5C2200                          db `\\"\0`
   613                                  fmt_string_char_92:
   614 000002CD 5C5C00                          db `\\\\\0`
   615                                  fmt_string_char_hex:
   616 000002D0 5C7825583B00                    db `\\x%X;\0`
   617                                  
   618                                  section .text
   619                                  
   620                                  print_sexpr:
   621 00000591 C8000000                	enter 0, 0
   622 00000595 8A07                    	mov al, byte [rdi]
   623 00000597 3C00                    	cmp al, T_void
   624 00000599 7465                    	je .Lvoid
   625 0000059B 3C01                    	cmp al, T_nil
   626 0000059D 7470                    	je .Lnil
   627 0000059F 3C09                    	cmp al, T_boolean_false
   628 000005A1 747B                    	je .Lboolean_false
   629 000005A3 3C0A                    	cmp al, T_boolean_true
   630 000005A5 0F8482000000            	je .Lboolean_true
   631 000005AB 3C02                    	cmp al, T_char
   632 000005AD 0F8489000000            	je .Lchar
   633 000005B3 3C41                    	cmp al, T_interned_symbol
   634 000005B5 0F84BF010000            	je .Linterned_symbol
   635 000005BB 3C42                            cmp al, T_uninterned_symbol
   636 000005BD 0F84E3010000                    je .Luninterned_symbol
   637 000005C3 3C21                    	cmp al, T_pair
   638 000005C5 0F84EE010000            	je .Lpair
   639 000005CB 3C22                    	cmp al, T_vector
   640 000005CD 0F84B7020000            	je .Lvector
   641 000005D3 3C04                    	cmp al, T_closure
   642 000005D5 0F8485010000            	je .Lclosure
   643 000005DB 3C13                    	cmp al, T_real
   644 000005DD 0F8448030000            	je .Lreal
   645 000005E3 3C12                    	cmp al, T_fraction
   646 000005E5 0F846E030000            	je .Lfraction
   647 000005EB 3C11                    	cmp al, T_integer
   648 000005ED 0F84A7030000            	je .Linteger
   649 000005F3 3C03                    	cmp al, T_string
   650 000005F5 0F84B2030000            	je .Lstring
   651                                  
   652 000005FB E9DC040000              	jmp .Lunknown_sexpr_type
   653                                  
   654                                  .Lvoid:
   655 00000600 48BF-                   	mov rdi, fmt_void
   655 00000602 [AB01000000000000] 
   656 0000060A E900050000              	jmp .Lemit
   657                                  
   658                                  .Lnil:
   659 0000060F 48BF-                   	mov rdi, fmt_nil
   659 00000611 [B301000000000000] 
   660 00000619 E9F1040000              	jmp .Lemit
   661                                  
   662                                  .Lboolean_false:
   663 0000061E 48BF-                   	mov rdi, fmt_boolean_false
   663 00000620 [B601000000000000] 
   664 00000628 E9E2040000              	jmp .Lemit
   665                                  
   666                                  .Lboolean_true:
   667 0000062D 48BF-                   	mov rdi, fmt_boolean_true
   667 0000062F [B901000000000000] 
   668 00000637 E9D3040000              	jmp .Lemit
   669                                  
   670                                  .Lchar:
   671 0000063C 8A4701                  	mov al, byte [rdi + 1]
   672 0000063F 3C20                    	cmp al, ' '
   673 00000641 7E20                    	jle .Lchar_whitespace
   674 00000643 3C5C                    	cmp al, 92 		; backslash
   675 00000645 7474                    	je .Lchar_backslash
   676 00000647 3C22                    	cmp al, '"'
   677 00000649 747F                    	je .Lchar_dquote
   678 0000064B 4825FF000000            	and rax, 255
   679 00000651 48BF-                   	mov rdi, fmt_char_simple
   679 00000653 [C401000000000000] 
   680 0000065B 4889C6                  	mov rsi, rax
   681 0000065E E9AC040000              	jmp .Lemit
   682                                  
   683                                  .Lchar_whitespace:
   684 00000663 3C00                    	cmp al, 0
   685 00000665 7472                    	je .Lchar_null
   686 00000667 3C07                    	cmp al, 7
   687 00000669 747D                    	je .Lchar_bell
   688 0000066B 3C08                    	cmp al, 8
   689 0000066D 0F8484000000            	je .Lchar_backspace
   690 00000673 3C09                    	cmp al, 9
   691 00000675 0F848B000000            	je .Lchar_tab
   692 0000067B 3C0A                    	cmp al, 10
   693 0000067D 0F8492000000            	je .Lchar_newline
   694 00000683 3C0C                    	cmp al, 12
   695 00000685 0F8499000000            	je .Lchar_formfeed
   696 0000068B 3C0D                    	cmp al, 13
   697 0000068D 0F84A0000000            	je .Lchar_return
   698 00000693 3C1B                    	cmp al, 27
   699 00000695 0F84A7000000            	je .Lchar_escape
   700 0000069B 4825FF000000            	and rax, 255
   701 000006A1 3C20                    	cmp al, ' '
   702 000006A3 0F84A8000000            	je .Lchar_space
   703 000006A9 48BF-                   	mov rdi, fmt_char_hex
   703 000006AB [1002000000000000] 
   704 000006B3 4889C6                  	mov rsi, rax
   705 000006B6 E954040000              	jmp .Lemit	
   706                                  
   707                                  .Lchar_backslash:
   708 000006BB 48BF-                   	mov rdi, fmt_char_backslash
   708 000006BD [BC01000000000000] 
   709 000006C5 E945040000              	jmp .Lemit
   710                                  
   711                                  .Lchar_dquote:
   712 000006CA 48BF-                   	mov rdi, fmt_char_dquote
   712 000006CC [C001000000000000] 
   713 000006D4 E936040000              	jmp .Lemit
   714                                  
   715                                  .Lchar_null:
   716 000006D9 48BF-                   	mov rdi, fmt_char_null
   716 000006DB [C901000000000000] 
   717 000006E3 E927040000              	jmp .Lemit
   718                                  
   719                                  .Lchar_bell:
   720 000006E8 48BF-                   	mov rdi, fmt_char_bell
   720 000006EA [CF01000000000000] 
   721 000006F2 E918040000              	jmp .Lemit
   722                                  
   723                                  .Lchar_backspace:
   724 000006F7 48BF-                   	mov rdi, fmt_char_backspace
   724 000006F9 [D601000000000000] 
   725 00000701 E909040000              	jmp .Lemit
   726                                  
   727                                  .Lchar_tab:
   728 00000706 48BF-                   	mov rdi, fmt_char_tab
   728 00000708 [E201000000000000] 
   729 00000710 E9FA030000              	jmp .Lemit
   730                                  
   731                                  .Lchar_newline:
   732 00000715 48BF-                   	mov rdi, fmt_char_newline
   732 00000717 [E801000000000000] 
   733 0000071F E9EB030000              	jmp .Lemit
   734                                  
   735                                  .Lchar_formfeed:
   736 00000724 48BF-                   	mov rdi, fmt_char_formfeed
   736 00000726 [F201000000000000] 
   737 0000072E E9DC030000              	jmp .Lemit
   738                                  
   739                                  .Lchar_return:
   740 00000733 48BF-                   	mov rdi, fmt_char_return
   740 00000735 [F901000000000000] 
   741 0000073D E9CD030000              	jmp .Lemit
   742                                  
   743                                  .Lchar_escape:
   744 00000742 48BF-                   	mov rdi, fmt_char_escape
   744 00000744 [0202000000000000] 
   745 0000074C E9BE030000              	jmp .Lemit
   746                                  
   747                                  .Lchar_space:
   748 00000751 48BF-                   	mov rdi, fmt_char_space
   748 00000753 [0802000000000000] 
   749 0000075B E9AF030000              	jmp .Lemit
   750                                  
   751                                  .Lclosure:
   752 00000760 4889FE                  	mov rsi, qword rdi
   753 00000763 48BF-                   	mov rdi, fmt_closure
   753 00000765 [1D02000000000000] 
   754 0000076D 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   755 00000771 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   756 00000775 E995030000              	jmp .Lemit
   757                                  
   758                                  .Linterned_symbol:
   759 0000077A 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   760 0000077E BE01000000              	mov rsi, 1		 ; size = 1 byte
   761 00000783 488B5701                	mov rdx, qword [rdi + 1] ; length
   762 00000787 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   763 0000078B 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   764                                  	ENTER
    44 00000793 C8000000            <1>  enter 0, 0
    45 00000797 4883E4F0            <1>  and rsp, ~15
   765 0000079B E8(00000000)            	call fwrite
   766                                  	LEAVE
    49 000007A0 C9                  <1>  leave
   767 000007A1 E97E030000              	jmp .Lend
   768                                  
   769                                  .Luninterned_symbol:
   770 000007A6 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
   771 000007AA 48BF-                           mov rdi, fmt_gensym
   771 000007AC [1802000000000000] 
   772 000007B4 E956030000                      jmp .Lemit
   773                                  	
   774                                  .Lpair:
   775 000007B9 57                      	push rdi
   776 000007BA 48BF-                   	mov rdi, fmt_lparen
   776 000007BC [4902000000000000] 
   777 000007C4 B800000000              	mov rax, 0
   778                                          ENTER
    44 000007C9 C8000000            <1>  enter 0, 0
    45 000007CD 4883E4F0            <1>  and rsp, ~15
   779 000007D1 E8(00000000)            	call printf
   780                                          LEAVE
    49 000007D6 C9                  <1>  leave
   781 000007D7 488B3C24                	mov rdi, qword [rsp] 	; pair
   782 000007DB 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   783 000007DF E8ADFDFFFF              	call print_sexpr
   784 000007E4 5F                      	pop rdi 		; pair
   785 000007E5 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   786                                  .Lcdr:
   787 000007E9 8A07                    	mov al, byte [rdi]
   788 000007EB 3C01                    	cmp al, T_nil
   789 000007ED 7447                    	je .Lcdr_nil
   790 000007EF 3C21                    	cmp al, T_pair
   791 000007F1 7462                    	je .Lcdr_pair
   792 000007F3 57                      	push rdi
   793 000007F4 48BF-                   	mov rdi, fmt_dotted_pair
   793 000007F6 [4B02000000000000] 
   794 000007FE B800000000              	mov rax, 0
   795                                          ENTER
    44 00000803 C8000000            <1>  enter 0, 0
    45 00000807 4883E4F0            <1>  and rsp, ~15
   796 0000080B E8(00000000)            	call printf
   797                                          LEAVE
    49 00000810 C9                  <1>  leave
   798 00000811 5F                      	pop rdi
   799 00000812 E87AFDFFFF              	call print_sexpr
   800 00000817 48BF-                   	mov rdi, fmt_rparen
   800 00000819 [4F02000000000000] 
   801 00000821 B800000000              	mov rax, 0
   802                                          ENTER
    44 00000826 C8000000            <1>  enter 0, 0
    45 0000082A 4883E4F0            <1>  and rsp, ~15
   803 0000082E E8(00000000)            	call printf
   804                                          LEAVE
    49 00000833 C9                  <1>  leave
   805 00000834 C9                      	leave
   806 00000835 C3                      	ret
   807                                  
   808                                  .Lcdr_nil:
   809 00000836 48BF-                   	mov rdi, fmt_rparen
   809 00000838 [4F02000000000000] 
   810 00000840 B800000000              	mov rax, 0
   811                                          ENTER
    44 00000845 C8000000            <1>  enter 0, 0
    45 00000849 4883E4F0            <1>  and rsp, ~15
   812 0000084D E8(00000000)            	call printf
   813                                          LEAVE
    49 00000852 C9                  <1>  leave
   814 00000853 C9                      	leave
   815 00000854 C3                      	ret
   816                                  
   817                                  .Lcdr_pair:
   818 00000855 57                      	push rdi
   819 00000856 48BF-                   	mov rdi, fmt_space
   819 00000858 [5102000000000000] 
   820 00000860 B800000000              	mov rax, 0
   821                                          ENTER
    44 00000865 C8000000            <1>  enter 0, 0
    45 00000869 4883E4F0            <1>  and rsp, ~15
   822 0000086D E8(00000000)            	call printf
   823                                          LEAVE
    49 00000872 C9                  <1>  leave
   824 00000873 488B3C24                	mov rdi, qword [rsp]
   825 00000877 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   826 0000087B E811FDFFFF              	call print_sexpr
   827 00000880 5F                      	pop rdi
   828 00000881 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   829 00000885 E95FFFFFFF              	jmp .Lcdr
   830                                  
   831                                  .Lvector:
   832 0000088A 488B4701                	mov rax, qword [rdi + 1] ; length
   833 0000088E 4883F800                	cmp rax, 0
   834 00000892 0F8484000000            	je .Lvector_empty
   835 00000898 57                      	push rdi
   836 00000899 48BF-                   	mov rdi, fmt_vector
   836 0000089B [5702000000000000] 
   837 000008A3 B800000000              	mov rax, 0
   838                                          ENTER
    44 000008A8 C8000000            <1>  enter 0, 0
    45 000008AC 4883E4F0            <1>  and rsp, ~15
   839 000008B0 E8(00000000)            	call printf
   840                                          LEAVE
    49 000008B5 C9                  <1>  leave
   841 000008B6 488B3C24                	mov rdi, qword [rsp]
   842 000008BA FF7701                  	push qword [rdi + 1]
   843 000008BD 6A01                    	push 1
   844 000008BF 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   845 000008C3 E8C9FCFFFF              	call print_sexpr
   846                                  .Lvector_loop:
   847                                  	; [rsp] index
   848                                  	; [rsp + 8*1] limit
   849                                  	; [rsp + 8*2] vector
   850 000008C8 488B0424                	mov rax, qword [rsp]
   851 000008CC 483B442408              	cmp rax, qword [rsp + 8*1]
   852 000008D1 7436                    	je .Lvector_end
   853 000008D3 48BF-                   	mov rdi, fmt_space
   853 000008D5 [5102000000000000] 
   854 000008DD B800000000              	mov rax, 0
   855                                          ENTER
    44 000008E2 C8000000            <1>  enter 0, 0
    45 000008E6 4883E4F0            <1>  and rsp, ~15
   856 000008EA E8(00000000)            	call printf
   857                                          LEAVE
    49 000008EF C9                  <1>  leave
   858 000008F0 488B0424                	mov rax, qword [rsp]
   859 000008F4 488B5C2410              	mov rbx, qword [rsp + 8*2]
   860 000008F9 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   861 000008FE E88EFCFFFF              	call print_sexpr
   862 00000903 48FF0424                	inc qword [rsp]
   863 00000907 EBBF                    	jmp .Lvector_loop
   864                                  
   865                                  .Lvector_end:
   866 00000909 4883C418                	add rsp, 8*3
   867 0000090D 48BF-                   	mov rdi, fmt_rparen
   867 0000090F [4F02000000000000] 
   868 00000917 E9F3010000              	jmp .Lemit	
   869                                  
   870                                  .Lvector_empty:
   871 0000091C 48BF-                   	mov rdi, fmt_empty_vector
   871 0000091E [5302000000000000] 
   872 00000926 E9E4010000              	jmp .Lemit
   873                                  
   874                                  .Lreal:
   875 0000092B FF7701                  	push qword [rdi + 1]
   876 0000092E F20F100424              	movsd xmm0, qword [rsp]
   877 00000933 4883C408                	add rsp, 8*1
   878 00000937 48BF-                   	mov rdi, fmt_real
   878 00000939 [5A02000000000000] 
   879 00000941 B801000000              	mov rax, 1
   880                                  	ENTER
    44 00000946 C8000000            <1>  enter 0, 0
    45 0000094A 4883E4F0            <1>  and rsp, ~15
   881 0000094E E8(00000000)            	call printf
   882                                  	LEAVE
    49 00000953 C9                  <1>  leave
   883 00000954 E9CB010000              	jmp .Lend
   884                                  
   885                                  .Lfraction:
   886 00000959 488B7701                	mov rsi, qword [rdi + 1]
   887 0000095D 488B5709                	mov rdx, qword [rdi + 1 + 8]
   888 00000961 4883FE00                	cmp rsi, 0
   889 00000965 7415                    	je .Lrat_zero
   890 00000967 4883FA01                	cmp rdx, 1
   891 0000096B 741E                    	je .Lrat_int
   892 0000096D 48BF-                   	mov rdi, fmt_fraction
   892 0000096F [5D02000000000000] 
   893 00000977 E993010000              	jmp .Lemit
   894                                  
   895                                  .Lrat_zero:
   896 0000097C 48BF-                   	mov rdi, fmt_zero
   896 0000097E [6502000000000000] 
   897 00000986 E984010000              	jmp .Lemit
   898                                  
   899                                  .Lrat_int:
   900 0000098B 48BF-                   	mov rdi, fmt_int
   900 0000098D [6702000000000000] 
   901 00000995 E975010000              	jmp .Lemit
   902                                  
   903                                  .Linteger:
   904 0000099A 488B7701                	mov rsi, qword [rdi + 1]
   905 0000099E 48BF-                   	mov rdi, fmt_int
   905 000009A0 [6702000000000000] 
   906 000009A8 E962010000              	jmp .Lemit
   907                                  
   908                                  .Lstring:
   909 000009AD 488D4709                	lea rax, [rdi + 1 + 8]
   910 000009B1 50                      	push rax
   911 000009B2 FF7701                  	push qword [rdi + 1]
   912 000009B5 48BF-                   	mov rdi, fmt_dquote
   912 000009B7 [B002000000000000] 
   913 000009BF B800000000              	mov rax, 0
   914                                  	ENTER
    44 000009C4 C8000000            <1>  enter 0, 0
    45 000009C8 4883E4F0            <1>  and rsp, ~15
   915 000009CC E8(00000000)            	call printf
   916                                  	LEAVE
    49 000009D1 C9                  <1>  leave
   917                                  .Lstring_loop:
   918                                  	; qword [rsp]: limit
   919                                  	; qword [rsp + 8*1]: char *
   920 000009D2 48833C2400              	cmp qword [rsp], 0
   921 000009D7 0F84EF000000            	je .Lstring_end
   922 000009DD 488B442408              	mov rax, qword [rsp + 8*1]
   923 000009E2 8A00                    	mov al, byte [rax]
   924 000009E4 4825FF000000            	and rax, 255
   925 000009EA 3C07                    	cmp al, 7
   926 000009EC 745D                            je .Lstring_char_7
   927 000009EE 3C08                            cmp al, 8
   928 000009F0 7465                            je .Lstring_char_8
   929 000009F2 3C09                            cmp al, 9
   930 000009F4 746D                            je .Lstring_char_9
   931 000009F6 3C0A                            cmp al, 10
   932 000009F8 7475                            je .Lstring_char_10
   933 000009FA 3C0B                            cmp al, 11
   934 000009FC 747D                            je .Lstring_char_11
   935 000009FE 3C0C                            cmp al, 12
   936 00000A00 0F8481000000                    je .Lstring_char_12
   937 00000A06 3C0D                            cmp al, 13
   938 00000A08 0F8485000000                    je .Lstring_char_13
   939 00000A0E 3C22                            cmp al, 34
   940 00000A10 0F8489000000                    je .Lstring_char_34
   941 00000A16 3C5C                            cmp al, 92              ;         je .Lstring_char_92
   943 00000A18 3C20                            cmp al, ' '
   944 00000A1A 0F8C9A000000                    jl .Lstring_char_hex
   945 00000A20 48BF-                           mov rdi, fmt_string_char
   945 00000A22 [B202000000000000] 
   946 00000A2A 4889C6                          mov rsi, rax
   947                                  .Lstring_char_emit:
   948 00000A2D B800000000                      mov rax, 0
   949                                          ENTER
    44 00000A32 C8000000            <1>  enter 0, 0
    45 00000A36 4883E4F0            <1>  and rsp, ~15
   950 00000A3A E8(00000000)                    call printf
   951                                          LEAVE
    49 00000A3F C9                  <1>  leave
   952 00000A40 48FF0C24                        dec qword [rsp]
   953 00000A44 48FF442408                      inc qword [rsp + 8*1]
   954 00000A49 EB87                            jmp .Lstring_loop
   955                                  
   956                                  .Lstring_char_7:
   957 00000A4B 48BF-                           mov rdi, fmt_string_char_7
   957 00000A4D [B502000000000000] 
   958 00000A55 EBD6                            jmp .Lstring_char_emit
   959                                  
   960                                  .Lstring_char_8:
   961 00000A57 48BF-                           mov rdi, fmt_string_char_8
   961 00000A59 [B802000000000000] 
   962 00000A61 EBCA                            jmp .Lstring_char_emit
   963                                          
   964                                  .Lstring_char_9:
   965 00000A63 48BF-                           mov rdi, fmt_string_char_9
   965 00000A65 [BB02000000000000] 
   966 00000A6D EBBE                            jmp .Lstring_char_emit
   967                                  
   968                                  .Lstring_char_10:
   969 00000A6F 48BF-                           mov rdi, fmt_string_char_10
   969 00000A71 [BE02000000000000] 
   970 00000A79 EBB2                            jmp .Lstring_char_emit
   971                                  
   972                                  .Lstring_char_11:
   973 00000A7B 48BF-                           mov rdi, fmt_string_char_11
   973 00000A7D [C102000000000000] 
   974 00000A85 EBA6                            jmp .Lstring_char_emit
   975                                  
   976                                  .Lstring_char_12:
   977 00000A87 48BF-                           mov rdi, fmt_string_char_12
   977 00000A89 [C402000000000000] 
   978 00000A91 EB9A                            jmp .Lstring_char_emit
   979                                  
   980                                  .Lstring_char_13:
   981 00000A93 48BF-                           mov rdi, fmt_string_char_13
   981 00000A95 [C702000000000000] 
   982 00000A9D EB8E                            jmp .Lstring_char_emit
   983                                  
   984                                  .Lstring_char_34:
   985 00000A9F 48BF-                           mov rdi, fmt_string_char_34
   985 00000AA1 [CA02000000000000] 
   986 00000AA9 EB82                            jmp .Lstring_char_emit
   987                                  
   988                                  .Lstring_char_92:
   989 00000AAB 48BF-                           mov rdi, fmt_string_char_92
   989 00000AAD [CD02000000000000] 
   990 00000AB5 E973FFFFFF                      jmp .Lstring_char_emit
   991                                  
   992                                  .Lstring_char_hex:
   993 00000ABA 48BF-                           mov rdi, fmt_string_char_hex
   993 00000ABC [D002000000000000] 
   994 00000AC4 4889C6                          mov rsi, rax
   995 00000AC7 E961FFFFFF                      jmp .Lstring_char_emit        
   996                                  
   997                                  .Lstring_end:
   998 00000ACC 4883C410                	add rsp, 8 * 2
   999 00000AD0 48BF-                   	mov rdi, fmt_dquote
   999 00000AD2 [B002000000000000] 
  1000 00000ADA EB33                    	jmp .Lemit
  1001                                  
  1002                                  .Lunknown_sexpr_type:
  1003 00000ADC 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
  1003 00000ADE [6B02000000000000] 
  1004 00000AE6 4825FF000000            	and rax, 255
  1005 00000AEC 4889C2                  	mov rdx, rax
  1006 00000AEF 4889F9                  	mov rcx, rdi
  1007 00000AF2 488B3C25[00000000]      	mov rdi, qword [stderr]
  1008 00000AFA B800000000              	mov rax, 0
  1009                                          ENTER
    44 00000AFF C8000000            <1>  enter 0, 0
    45 00000B03 4883E4F0            <1>  and rsp, ~15
  1010 00000B07 E8(00000000)            	call fprintf
  1011                                          LEAVE
    49 00000B0C C9                  <1>  leave
  1012 00000B0D C9                              leave
  1013 00000B0E C3                              ret
  1014                                  
  1015                                  .Lemit:
  1016 00000B0F B800000000              	mov rax, 0
  1017                                          ENTER
    44 00000B14 C8000000            <1>  enter 0, 0
    45 00000B18 4883E4F0            <1>  and rsp, ~15
  1018 00000B1C E8(00000000)            	call printf
  1019                                          LEAVE
    49 00000B21 C9                  <1>  leave
  1020 00000B22 EB00                    	jmp .Lend
  1021                                  
  1022                                  .Lend:
  1023                                  	LEAVE
    49 00000B24 C9                  <1>  leave
  1024 00000B25 C3                      	ret
  1025                                  
  1026                                  ;;; rdi: address of free variable
  1027                                  ;;; rsi: address of code-pointer
  1028                                  bind_primitive:
  1029 00000B26 C8000000                        enter 0, 0
  1030 00000B2A 57                              push rdi
  1031 00000B2B BF11000000                      mov rdi, (1 + 8 + 8)
  1032 00000B30 E8DBF7FFFF                      call malloc
  1033 00000B35 5F                              pop rdi
  1034 00000B36 C60004                          mov byte [rax], T_closure
  1035 00000B39 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1036 00000B41 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1037 00000B45 488907                          mov qword [rdi], rax
  1038 00000B48 48B8-                           mov rax, sob_void
  1038 00000B4A [0000000000000000] 
  1039 00000B52 C9                              leave
  1040 00000B53 C3                              ret
  1041                                  
  1042                                  L_code_ptr_ash:
  1043 00000B54 C8000000                        enter 0, 0
  1044 00000B58 48837D1802                      cmp COUNT, 2
  1045 00000B5D 0F8510140000                    jne L_error_arg_count_2
  1046 00000B63 488B7D20                        mov rdi, PARAM(0)
  1047                                          assert_integer(rdi)
    53 00000B67 803F11              <1>  cmp byte [%1], %2
    54 00000B6A 0F85A2140000        <1>  jne L_error_incorrect_type
  1048 00000B70 488B4D28                        mov rcx, PARAM(1)
  1049                                          assert_integer(rcx)
    53 00000B74 803911              <1>  cmp byte [%1], %2
    54 00000B77 0F8595140000        <1>  jne L_error_incorrect_type
  1050 00000B7D 488B7F01                        mov rdi, qword [rdi + 1]
  1051 00000B81 488B4901                        mov rcx, qword [rcx + 1]
  1052 00000B85 4883F900                        cmp rcx, 0
  1053 00000B89 7C0F                            jl .L_negative
  1054                                  .L_loop_positive:
  1055 00000B8B 4883F900                        cmp rcx, 0
  1056 00000B8F 741B                            je .L_exit
  1057 00000B91 48D3E7                          sal rdi, cl
  1058 00000B94 48C1E908                        shr rcx, 8
  1059 00000B98 EBF1                            jmp .L_loop_positive
  1060                                  .L_negative:
  1061 00000B9A 48F7D9                          neg rcx
  1062                                  .L_loop_negative:
  1063 00000B9D 4883F900                        cmp rcx, 0
  1064 00000BA1 7409                            je .L_exit
  1065 00000BA3 48D3FF                          sar rdi, cl
  1066 00000BA6 48C1E908                        shr rcx, 8
  1067 00000BAA EBF1                            jmp .L_loop_negative
  1068                                  .L_exit:
  1069 00000BAC E8DC120000                      call make_integer
  1070 00000BB1 C9                              leave
  1071 00000BB2 C22000                          ret AND_KILL_FRAME(2)
  1072                                  
  1073                                  L_code_ptr_logand:
  1074 00000BB5 C8000000                        enter 0, 0
  1075 00000BB9 48837D1802                      cmp COUNT, 2
  1076 00000BBE 0F85AF130000                    jne L_error_arg_count_2
  1077 00000BC4 4C8B4520                        mov r8, PARAM(0)
  1078                                          assert_integer(r8)
    53 00000BC8 41803811            <1>  cmp byte [%1], %2
    54 00000BCC 0F8540140000        <1>  jne L_error_incorrect_type
  1079 00000BD2 4C8B4D28                        mov r9, PARAM(1)
  1080                                          assert_integer(r9)
    53 00000BD6 41803911            <1>  cmp byte [%1], %2
    54 00000BDA 0F8532140000        <1>  jne L_error_incorrect_type
  1081 00000BE0 498B7801                        mov rdi, qword [r8 + 1]
  1082 00000BE4 49237901                        and rdi, qword [r9 + 1]
  1083 00000BE8 E8A0120000                      call make_integer
  1084 00000BED C9                              leave
  1085 00000BEE C22000                          ret AND_KILL_FRAME(2)
  1086                                  
  1087                                  L_code_ptr_logor:
  1088 00000BF1 C8000000                        enter 0, 0
  1089 00000BF5 48837D1802                      cmp COUNT, 2
  1090 00000BFA 0F8573130000                    jne L_error_arg_count_2
  1091 00000C00 4C8B4520                        mov r8, PARAM(0)
  1092                                          assert_integer(r8)
    53 00000C04 41803811            <1>  cmp byte [%1], %2
    54 00000C08 0F8504140000        <1>  jne L_error_incorrect_type
  1093 00000C0E 4C8B4D28                        mov r9, PARAM(1)
  1094                                          assert_integer(r9)
    53 00000C12 41803911            <1>  cmp byte [%1], %2
    54 00000C16 0F85F6130000        <1>  jne L_error_incorrect_type
  1095 00000C1C 498B7801                        mov rdi, qword [r8 + 1]
  1096 00000C20 490B7901                        or rdi, qword [r9 + 1]
  1097 00000C24 E864120000                      call make_integer
  1098 00000C29 C9                              leave
  1099 00000C2A C22000                          ret AND_KILL_FRAME(2)
  1100                                  
  1101                                  L_code_ptr_logxor:
  1102 00000C2D C8000000                        enter 0, 0
  1103 00000C31 48837D1802                      cmp COUNT, 2
  1104 00000C36 0F8537130000                    jne L_error_arg_count_2
  1105 00000C3C 4C8B4520                        mov r8, PARAM(0)
  1106                                          assert_integer(r8)
    53 00000C40 41803811            <1>  cmp byte [%1], %2
    54 00000C44 0F85C8130000        <1>  jne L_error_incorrect_type
  1107 00000C4A 4C8B4D28                        mov r9, PARAM(1)
  1108                                          assert_integer(r9)
    53 00000C4E 41803911            <1>  cmp byte [%1], %2
    54 00000C52 0F85BA130000        <1>  jne L_error_incorrect_type
  1109 00000C58 498B7801                        mov rdi, qword [r8 + 1]
  1110 00000C5C 49337901                        xor rdi, qword [r9 + 1]
  1111 00000C60 E828120000                      call make_integer
  1112                                          LEAVE
    49 00000C65 C9                  <1>  leave
  1113 00000C66 C22000                          ret AND_KILL_FRAME(2)
  1114                                  
  1115                                  L_code_ptr_lognot:
  1116 00000C69 C8000000                        enter 0, 0
  1117 00000C6D 48837D1801                      cmp COUNT, 1
  1118 00000C72 0F85C6120000                    jne L_error_arg_count_1
  1119 00000C78 4C8B4520                        mov r8, PARAM(0)
  1120                                          assert_integer(r8)
    53 00000C7C 41803811            <1>  cmp byte [%1], %2
    54 00000C80 0F858C130000        <1>  jne L_error_incorrect_type
  1121 00000C86 498B7801                        mov rdi, qword [r8 + 1]
  1122 00000C8A 48F7D7                          not rdi
  1123 00000C8D E8FB110000                      call make_integer
  1124 00000C92 C9                              leave
  1125 00000C93 C21800                          ret AND_KILL_FRAME(1)
  1126                                  
  1127                                  L_code_ptr_bin_apply:
  1128                                  ;;; fill in for final project!
  1129                                  
  1130                                  L_code_ptr_is_null:
  1131 00000C96 C8000000                        enter 0, 0
  1132 00000C9A 48837D1801                      cmp COUNT, 1
  1133 00000C9F 0F8599120000                    jne L_error_arg_count_1
  1134 00000CA5 488B4520                        mov rax, PARAM(0)
  1135 00000CA9 803801                          cmp byte [rax], T_nil
  1136 00000CAC 750C                            jne .L_false
  1137 00000CAE 48B8-                           mov rax, sob_boolean_true
  1137 00000CB0 [0300000000000000] 
  1138 00000CB8 EB0A                            jmp .L_end
  1139                                  .L_false:
  1140 00000CBA 48B8-                           mov rax, sob_boolean_false
  1140 00000CBC [0200000000000000] 
  1141                                  .L_end:
  1142 00000CC4 C9                              leave
  1143 00000CC5 C21800                          ret AND_KILL_FRAME(1)
  1144                                  
  1145                                  L_code_ptr_is_pair:
  1146 00000CC8 C8000000                        enter 0, 0
  1147 00000CCC 48837D1801                      cmp COUNT, 1
  1148 00000CD1 0F8567120000                    jne L_error_arg_count_1
  1149 00000CD7 488B4520                        mov rax, PARAM(0)
  1150 00000CDB 803821                          cmp byte [rax], T_pair
  1151 00000CDE 750C                            jne .L_false
  1152 00000CE0 48B8-                           mov rax, sob_boolean_true
  1152 00000CE2 [0300000000000000] 
  1153 00000CEA EB0A                            jmp .L_end
  1154                                  .L_false:
  1155 00000CEC 48B8-                           mov rax, sob_boolean_false
  1155 00000CEE [0200000000000000] 
  1156                                  .L_end:
  1157 00000CF6 C9                              leave
  1158 00000CF7 C21800                          ret AND_KILL_FRAME(1)
  1159                                          
  1160                                  L_code_ptr_is_void:
  1161 00000CFA C8000000                        enter 0, 0
  1162 00000CFE 48837D1801                      cmp COUNT, 1
  1163 00000D03 0F8535120000                    jne L_error_arg_count_1
  1164 00000D09 488B4520                        mov rax, PARAM(0)
  1165 00000D0D 803800                          cmp byte [rax], T_void
  1166 00000D10 750C                            jne .L_false
  1167 00000D12 48B8-                           mov rax, sob_boolean_true
  1167 00000D14 [0300000000000000] 
  1168 00000D1C EB0A                            jmp .L_end
  1169                                  .L_false:
  1170 00000D1E 48B8-                           mov rax, sob_boolean_false
  1170 00000D20 [0200000000000000] 
  1171                                  .L_end:
  1172 00000D28 C9                              leave
  1173 00000D29 C21800                          ret AND_KILL_FRAME(1)
  1174                                  
  1175                                  L_code_ptr_is_char:
  1176 00000D2C C8000000                        enter 0, 0
  1177 00000D30 48837D1801                      cmp COUNT, 1
  1178 00000D35 0F8503120000                    jne L_error_arg_count_1
  1179 00000D3B 488B4520                        mov rax, PARAM(0)
  1180 00000D3F 803802                          cmp byte [rax], T_char
  1181 00000D42 750C                            jne .L_false
  1182 00000D44 48B8-                           mov rax, sob_boolean_true
  1182 00000D46 [0300000000000000] 
  1183 00000D4E EB0A                            jmp .L_end
  1184                                  .L_false:
  1185 00000D50 48B8-                           mov rax, sob_boolean_false
  1185 00000D52 [0200000000000000] 
  1186                                  .L_end:
  1187 00000D5A C9                              leave
  1188 00000D5B C21800                          ret AND_KILL_FRAME(1)
  1189                                  
  1190                                  L_code_ptr_is_string:
  1191 00000D5E C8000000                        enter 0, 0
  1192 00000D62 48837D1801                      cmp COUNT, 1
  1193 00000D67 0F85D1110000                    jne L_error_arg_count_1
  1194 00000D6D 488B4520                        mov rax, PARAM(0)
  1195 00000D71 803803                          cmp byte [rax], T_string
  1196 00000D74 750C                            jne .L_false
  1197 00000D76 48B8-                           mov rax, sob_boolean_true
  1197 00000D78 [0300000000000000] 
  1198 00000D80 EB0A                            jmp .L_end
  1199                                  .L_false:
  1200 00000D82 48B8-                           mov rax, sob_boolean_false
  1200 00000D84 [0200000000000000] 
  1201                                  .L_end:
  1202 00000D8C C9                              leave
  1203 00000D8D C21800                          ret AND_KILL_FRAME(1)
  1204                                  
  1205                                  L_code_ptr_is_symbol:
  1206 00000D90 C8000000                        enter 0, 0
  1207 00000D94 48837D1801                      cmp COUNT, 1
  1208 00000D99 0F859F110000                    jne L_error_arg_count_1
  1209 00000D9F 4C8B4520                        mov r8, PARAM(0)
  1210 00000DA3 41802040                        and byte [r8], T_symbol
  1211 00000DA7 740C                            jz .L_false
  1212 00000DA9 48B8-                           mov rax, sob_boolean_true
  1212 00000DAB [0300000000000000] 
  1213 00000DB3 EB0A                            jmp .L_exit
  1214                                  .L_false:
  1215 00000DB5 48B8-                           mov rax, sob_boolean_false
  1215 00000DB7 [0200000000000000] 
  1216                                  .L_exit:
  1217 00000DBF C9                              leave
  1218 00000DC0 C21800                          ret AND_KILL_FRAME(1)
  1219                                  
  1220                                  L_code_ptr_is_uninterned_symbol:
  1221 00000DC3 C8000000                        enter 0, 0
  1222 00000DC7 48837D1801                      cmp COUNT, 1
  1223 00000DCC 0F856C110000                    jne L_error_arg_count_1
  1224 00000DD2 4C8B4520                        mov r8, PARAM(0)
  1225 00000DD6 41803842                        cmp byte [r8], T_uninterned_symbol
  1226 00000DDA 750C                            jne .L_false
  1227 00000DDC 48B8-                           mov rax, sob_boolean_true
  1227 00000DDE [0300000000000000] 
  1228 00000DE6 EB0A                            jmp .L_exit
  1229                                  .L_false:
  1230 00000DE8 48B8-                           mov rax, sob_boolean_false
  1230 00000DEA [0200000000000000] 
  1231                                  .L_exit:
  1232 00000DF2 C9                              leave
  1233 00000DF3 C21800                          ret AND_KILL_FRAME(1)
  1234                                  
  1235                                  L_code_ptr_is_interned_symbol:
  1236 00000DF6 C8000000                        enter 0, 0
  1237 00000DFA 48837D1801                      cmp COUNT, 1
  1238 00000DFF 0F8539110000                    jne L_error_arg_count_1
  1239 00000E05 488B4520                        mov rax, PARAM(0)
  1240 00000E09 803841                          cmp byte [rax], T_interned_symbol
  1241 00000E0C 750C                            jne .L_false
  1242 00000E0E 48B8-                           mov rax, sob_boolean_true
  1242 00000E10 [0300000000000000] 
  1243 00000E18 EB0A                            jmp .L_end
  1244                                  .L_false:
  1245 00000E1A 48B8-                           mov rax, sob_boolean_false
  1245 00000E1C [0200000000000000] 
  1246                                  .L_end:
  1247 00000E24 C9                              leave
  1248 00000E25 C21800                          ret AND_KILL_FRAME(1)
  1249                                  
  1250                                  L_code_ptr_gensym:
  1251 00000E28 C8000000                        enter 0, 0
  1252 00000E2C 48837D1800                      cmp COUNT, 0
  1253 00000E31 0F85D2100000                    jne L_error_arg_count_0
  1254 00000E37 48FF0425[D6020000]              inc qword [gensym_count]
  1255 00000E3F BF09000000                      mov rdi, (1 + 8)
  1256 00000E44 E8C7F4FFFF                      call malloc
  1257 00000E49 C60042                          mov byte [rax], T_uninterned_symbol
  1258 00000E4C 488B0C25[D6020000]              mov rcx, qword [gensym_count]
  1259 00000E54 48894801                        mov qword [rax + 1], rcx
  1260 00000E58 C9                              leave
  1261 00000E59 C21000                          ret AND_KILL_FRAME(0)
  1262                                  
  1263                                  L_code_ptr_is_vector:
  1264 00000E5C C8000000                        enter 0, 0
  1265 00000E60 48837D1801                      cmp COUNT, 1
  1266 00000E65 0F85D3100000                    jne L_error_arg_count_1
  1267 00000E6B 488B4520                        mov rax, PARAM(0)
  1268 00000E6F 803822                          cmp byte [rax], T_vector
  1269 00000E72 750C                            jne .L_false
  1270 00000E74 48B8-                           mov rax, sob_boolean_true
  1270 00000E76 [0300000000000000] 
  1271 00000E7E EB0A                            jmp .L_end
  1272                                  .L_false:
  1273 00000E80 48B8-                           mov rax, sob_boolean_false
  1273 00000E82 [0200000000000000] 
  1274                                  .L_end:
  1275 00000E8A C9                              leave
  1276 00000E8B C21800                          ret AND_KILL_FRAME(1)
  1277                                  
  1278                                  L_code_ptr_is_closure:
  1279 00000E8E C8000000                        enter 0, 0
  1280 00000E92 48837D1801                      cmp COUNT, 1
  1281 00000E97 0F85A1100000                    jne L_error_arg_count_1
  1282 00000E9D 488B4520                        mov rax, PARAM(0)
  1283 00000EA1 803804                          cmp byte [rax], T_closure
  1284 00000EA4 750C                            jne .L_false
  1285 00000EA6 48B8-                           mov rax, sob_boolean_true
  1285 00000EA8 [0300000000000000] 
  1286 00000EB0 EB0A                            jmp .L_end
  1287                                  .L_false:
  1288 00000EB2 48B8-                           mov rax, sob_boolean_false
  1288 00000EB4 [0200000000000000] 
  1289                                  .L_end:
  1290 00000EBC C9                              leave
  1291 00000EBD C21800                          ret AND_KILL_FRAME(1)
  1292                                  
  1293                                  L_code_ptr_is_real:
  1294 00000EC0 C8000000                        enter 0, 0
  1295 00000EC4 48837D1801                      cmp COUNT, 1
  1296 00000EC9 0F856F100000                    jne L_error_arg_count_1
  1297 00000ECF 488B4520                        mov rax, PARAM(0)
  1298 00000ED3 803813                          cmp byte [rax], T_real
  1299 00000ED6 750C                            jne .L_false
  1300 00000ED8 48B8-                           mov rax, sob_boolean_true
  1300 00000EDA [0300000000000000] 
  1301 00000EE2 EB0A                            jmp .L_end
  1302                                  .L_false:
  1303 00000EE4 48B8-                           mov rax, sob_boolean_false
  1303 00000EE6 [0200000000000000] 
  1304                                  .L_end:
  1305 00000EEE C9                              leave
  1306 00000EEF C21800                          ret AND_KILL_FRAME(1)
  1307                                  
  1308                                  L_code_ptr_is_fraction:
  1309 00000EF2 C8000000                        enter 0, 0
  1310 00000EF6 48837D1801                      cmp COUNT, 1
  1311 00000EFB 0F853D100000                    jne L_error_arg_count_1
  1312 00000F01 488B4520                        mov rax, PARAM(0)
  1313 00000F05 803812                          cmp byte [rax], T_fraction
  1314 00000F08 750C                            jne .L_false
  1315 00000F0A 48B8-                           mov rax, sob_boolean_true
  1315 00000F0C [0300000000000000] 
  1316 00000F14 EB0A                            jmp .L_end
  1317                                  .L_false:
  1318 00000F16 48B8-                           mov rax, sob_boolean_false
  1318 00000F18 [0200000000000000] 
  1319                                  .L_end:
  1320 00000F20 C9                              leave
  1321 00000F21 C21800                          ret AND_KILL_FRAME(1)
  1322                                  
  1323                                  L_code_ptr_is_boolean:
  1324 00000F24 C8000000                        enter 0, 0
  1325 00000F28 48837D1801                      cmp COUNT, 1
  1326 00000F2D 0F850B100000                    jne L_error_arg_count_1
  1327 00000F33 488B4520                        mov rax, PARAM(0)
  1328 00000F37 8A18                            mov bl, byte [rax]
  1329 00000F39 80E308                          and bl, T_boolean
  1330 00000F3C 740C                            je .L_false
  1331 00000F3E 48B8-                           mov rax, sob_boolean_true
  1331 00000F40 [0300000000000000] 
  1332 00000F48 EB0A                            jmp .L_end
  1333                                  .L_false:
  1334 00000F4A 48B8-                           mov rax, sob_boolean_false
  1334 00000F4C [0200000000000000] 
  1335                                  .L_end:
  1336 00000F54 C9                              leave
  1337 00000F55 C21800                          ret AND_KILL_FRAME(1)
  1338                                          
  1339                                  L_code_ptr_is_boolean_false:
  1340 00000F58 C8000000                        enter 0, 0
  1341 00000F5C 48837D1801                      cmp COUNT, 1
  1342 00000F61 0F85D70F0000                    jne L_error_arg_count_1
  1343 00000F67 488B4520                        mov rax, PARAM(0)
  1344 00000F6B 8A18                            mov bl, byte [rax]
  1345 00000F6D 80FB09                          cmp bl, T_boolean_false
  1346 00000F70 750C                            jne .L_false
  1347 00000F72 48B8-                           mov rax, sob_boolean_true
  1347 00000F74 [0300000000000000] 
  1348 00000F7C EB0A                            jmp .L_end
  1349                                  .L_false:
  1350 00000F7E 48B8-                           mov rax, sob_boolean_false
  1350 00000F80 [0200000000000000] 
  1351                                  .L_end:
  1352 00000F88 C9                              leave
  1353 00000F89 C21800                          ret AND_KILL_FRAME(1)
  1354                                  
  1355                                  L_code_ptr_is_boolean_true:
  1356 00000F8C C8000000                        enter 0, 0
  1357 00000F90 48837D1801                      cmp COUNT, 1
  1358 00000F95 0F85A30F0000                    jne L_error_arg_count_1
  1359 00000F9B 488B4520                        mov rax, PARAM(0)
  1360 00000F9F 8A18                            mov bl, byte [rax]
  1361 00000FA1 80FB0A                          cmp bl, T_boolean_true
  1362 00000FA4 750C                            jne .L_false
  1363 00000FA6 48B8-                           mov rax, sob_boolean_true
  1363 00000FA8 [0300000000000000] 
  1364 00000FB0 EB0A                            jmp .L_end
  1365                                  .L_false:
  1366 00000FB2 48B8-                           mov rax, sob_boolean_false
  1366 00000FB4 [0200000000000000] 
  1367                                  .L_end:
  1368 00000FBC C9                              leave
  1369 00000FBD C21800                          ret AND_KILL_FRAME(1)
  1370                                  
  1371                                  L_code_ptr_is_number:
  1372 00000FC0 C8000000                        enter 0, 0
  1373 00000FC4 48837D1801                      cmp COUNT, 1
  1374 00000FC9 0F856F0F0000                    jne L_error_arg_count_1
  1375 00000FCF 488B4520                        mov rax, PARAM(0)
  1376 00000FD3 8A18                            mov bl, byte [rax]
  1377 00000FD5 80E310                          and bl, T_number
  1378 00000FD8 740C                            jz .L_false
  1379 00000FDA 48B8-                           mov rax, sob_boolean_true
  1379 00000FDC [0300000000000000] 
  1380 00000FE4 EB0A                            jmp .L_end
  1381                                  .L_false:
  1382 00000FE6 48B8-                           mov rax, sob_boolean_false
  1382 00000FE8 [0200000000000000] 
  1383                                  .L_end:
  1384 00000FF0 C9                              leave
  1385 00000FF1 C21800                          ret AND_KILL_FRAME(1)
  1386                                          
  1387                                  L_code_ptr_is_collection:
  1388 00000FF4 C8000000                        enter 0, 0
  1389 00000FF8 48837D1801                      cmp COUNT, 1
  1390 00000FFD 0F853B0F0000                    jne L_error_arg_count_1
  1391 00001003 488B4520                        mov rax, PARAM(0)
  1392 00001007 8A18                            mov bl, byte [rax]
  1393 00001009 80E320                          and bl, T_collection
  1394 0000100C 740C                            je .L_false
  1395 0000100E 48B8-                           mov rax, sob_boolean_true
  1395 00001010 [0300000000000000] 
  1396 00001018 EB0A                            jmp .L_end
  1397                                  .L_false:
  1398 0000101A 48B8-                           mov rax, sob_boolean_false
  1398 0000101C [0200000000000000] 
  1399                                  .L_end:
  1400 00001024 C9                              leave
  1401 00001025 C21800                          ret AND_KILL_FRAME(1)
  1402                                  
  1403                                  L_code_ptr_cons:
  1404 00001028 C8000000                        enter 0, 0
  1405 0000102C 48837D1802                      cmp COUNT, 2
  1406 00001031 0F853C0F0000                    jne L_error_arg_count_2
  1407 00001037 BF11000000                      mov rdi, (1 + 8 + 8)
  1408 0000103C E8CFF2FFFF                      call malloc
  1409 00001041 C60021                          mov byte [rax], T_pair
  1410 00001044 488B5D20                        mov rbx, PARAM(0)
  1411 00001048 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1412 0000104C 488B5D28                        mov rbx, PARAM(1)
  1413 00001050 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1414 00001054 C9                              leave
  1415 00001055 C22000                          ret AND_KILL_FRAME(2)
  1416                                  
  1417                                  L_code_ptr_display_sexpr:
  1418 00001058 C8000000                        enter 0, 0
  1419 0000105C 48837D1801                      cmp COUNT, 1
  1420 00001061 0F85D70E0000                    jne L_error_arg_count_1
  1421 00001067 488B7D20                        mov rdi, PARAM(0)
  1422 0000106B E821F5FFFF                      call print_sexpr
  1423 00001070 48B8-                           mov rax, sob_void
  1423 00001072 [0000000000000000] 
  1424 0000107A C9                              leave
  1425 0000107B C21800                          ret AND_KILL_FRAME(1)
  1426                                  
  1427                                  L_code_ptr_write_char:
  1428 0000107E C8000000                        enter 0, 0
  1429 00001082 48837D1801                      cmp COUNT, 1
  1430 00001087 0F85B10E0000                    jne L_error_arg_count_1
  1431 0000108D 488B4520                        mov rax, PARAM(0)
  1432                                          assert_char(rax)
    53 00001091 803802              <1>  cmp byte [%1], %2
    54 00001094 0F85780F0000        <1>  jne L_error_incorrect_type
  1433 0000109A 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1434 0000109D 4825FF000000                    and rax, 255
  1435 000010A3 48BF-                           mov rdi, fmt_char
  1435 000010A5 [DE02000000000000] 
  1436 000010AD 4889C6                          mov rsi, rax
  1437 000010B0 B800000000                      mov rax, 0
  1438                                          ENTER
    44 000010B5 C8000000            <1>  enter 0, 0
    45 000010B9 4883E4F0            <1>  and rsp, ~15
  1439 000010BD E8(00000000)                    call printf
  1440                                          LEAVE
    49 000010C2 C9                  <1>  leave
  1441 000010C3 48B8-                           mov rax, sob_void
  1441 000010C5 [0000000000000000] 
  1442 000010CD C9                              leave
  1443 000010CE C21800                          ret AND_KILL_FRAME(1)
  1444                                  
  1445                                  L_code_ptr_car:
  1446 000010D1 C8000000                        enter 0, 0
  1447 000010D5 48837D1801                      cmp COUNT, 1
  1448 000010DA 0F855E0E0000                    jne L_error_arg_count_1
  1449 000010E0 488B4520                        mov rax, PARAM(0)
  1450                                          assert_pair(rax)
    53 000010E4 803821              <1>  cmp byte [%1], %2
    54 000010E7 0F85250F0000        <1>  jne L_error_incorrect_type
  1451 000010ED 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1452 000010F1 C9                              leave
  1453 000010F2 C21800                          ret AND_KILL_FRAME(1)
  1454                                          
  1455                                  L_code_ptr_cdr:
  1456 000010F5 C8000000                        enter 0, 0
  1457 000010F9 48837D1801                      cmp COUNT, 1
  1458 000010FE 0F853A0E0000                    jne L_error_arg_count_1
  1459 00001104 488B4520                        mov rax, PARAM(0)
  1460                                          assert_pair(rax)
    53 00001108 803821              <1>  cmp byte [%1], %2
    54 0000110B 0F85010F0000        <1>  jne L_error_incorrect_type
  1461 00001111 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1462 00001115 C9                              leave
  1463 00001116 C21800                          ret AND_KILL_FRAME(1)
  1464                                          
  1465                                  L_code_ptr_string_length:
  1466 00001119 C8000000                        enter 0, 0
  1467 0000111D 48837D1801                      cmp COUNT, 1
  1468 00001122 0F85160E0000                    jne L_error_arg_count_1
  1469 00001128 488B4520                        mov rax, PARAM(0)
  1470                                          assert_string(rax)
    53 0000112C 803803              <1>  cmp byte [%1], %2
    54 0000112F 0F85DD0E0000        <1>  jne L_error_incorrect_type
  1471 00001135 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1472 00001139 E84F0D0000                      call make_integer
  1473 0000113E C9                              leave
  1474 0000113F C21800                          ret AND_KILL_FRAME(1)
  1475                                  
  1476                                  L_code_ptr_vector_length:
  1477 00001142 C8000000                        enter 0, 0
  1478 00001146 48837D1801                      cmp COUNT, 1
  1479 0000114B 0F85ED0D0000                    jne L_error_arg_count_1
  1480 00001151 488B4520                        mov rax, PARAM(0)
  1481                                          assert_vector(rax)
    53 00001155 803822              <1>  cmp byte [%1], %2
    54 00001158 0F85B40E0000        <1>  jne L_error_incorrect_type
  1482 0000115E 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1483 00001162 E8260D0000                      call make_integer
  1484 00001167 C9                              leave
  1485 00001168 C21800                          ret AND_KILL_FRAME(1)
  1486                                  
  1487                                  L_code_ptr_real_to_integer:
  1488 0000116B C8000000                        enter 0, 0
  1489 0000116F 48837D1801                      cmp COUNT, 1
  1490 00001174 0F85C40D0000                    jne L_error_arg_count_1
  1491 0000117A 488B5D20                        mov rbx, PARAM(0)
  1492                                          assert_real(rbx)
    53 0000117E 803B13              <1>  cmp byte [%1], %2
    54 00001181 0F858B0E0000        <1>  jne L_error_incorrect_type
  1493 00001187 F20F104301                      movsd xmm0, qword [rbx + 1]
  1494 0000118C F2480F2CF8                      cvttsd2si rdi, xmm0
  1495 00001191 E8F70C0000                      call make_integer
  1496 00001196 C9                              leave
  1497 00001197 C21800                          ret AND_KILL_FRAME(1)
  1498                                  
  1499                                  L_code_ptr_exit:
  1500 0000119A C8000000                        enter 0, 0
  1501 0000119E 48837D1800                      cmp COUNT, 0
  1502 000011A3 0F85600D0000                    jne L_error_arg_count_0
  1503 000011A9 B800000000                      mov rax, 0
  1504 000011AE E8(00000000)                    call exit
  1505                                  
  1506                                  L_code_ptr_integer_to_real:
  1507 000011B3 C8000000                        enter 0, 0
  1508 000011B7 48837D1801                      cmp COUNT, 1
  1509 000011BC 0F857C0D0000                    jne L_error_arg_count_1
  1510 000011C2 488B4520                        mov rax, PARAM(0)
  1511                                          assert_integer(rax)
    53 000011C6 803811              <1>  cmp byte [%1], %2
    54 000011C9 0F85430E0000        <1>  jne L_error_incorrect_type
  1512 000011CF FF7001                          push qword [rax + 1]
  1513 000011D2 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1514 000011D8 E8980C0000                      call make_real
  1515 000011DD C9                              leave
  1516 000011DE C21800                          ret AND_KILL_FRAME(1)
  1517                                  
  1518                                  L_code_ptr_fraction_to_real:
  1519 000011E1 C8000000                        enter 0, 0
  1520 000011E5 48837D1801                      cmp COUNT, 1
  1521 000011EA 0F854E0D0000                    jne L_error_arg_count_1
  1522 000011F0 488B4520                        mov rax, PARAM(0)
  1523                                          assert_fraction(rax)
    53 000011F4 803812              <1>  cmp byte [%1], %2
    54 000011F7 0F85150E0000        <1>  jne L_error_incorrect_type
  1524 000011FD FF7001                          push qword [rax + 1]
  1525 00001200 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1526 00001206 FF7009                          push qword [rax + 1 + 8]
  1527 00001209 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1528 0000120F F20F5EC1                        divsd xmm0, xmm1
  1529 00001213 E85D0C0000                      call make_real
  1530 00001218 C9                              leave
  1531 00001219 C21800                          ret AND_KILL_FRAME(1)
  1532                                  
  1533                                  L_code_ptr_char_to_integer:
  1534 0000121C C8000000                        enter 0, 0
  1535 00001220 48837D1801                      cmp COUNT, 1
  1536 00001225 0F85130D0000                    jne L_error_arg_count_1
  1537 0000122B 488B4520                        mov rax, PARAM(0)
  1538                                          assert_char(rax)
    53 0000122F 803802              <1>  cmp byte [%1], %2
    54 00001232 0F85DA0D0000        <1>  jne L_error_incorrect_type
  1539 00001238 8A4001                          mov al, byte [rax + 1]
  1540 0000123B 4825FF000000                    and rax, 255
  1541 00001241 4889C7                          mov rdi, rax
  1542 00001244 E8440C0000                      call make_integer
  1543 00001249 C9                              leave
  1544 0000124A C21800                          ret AND_KILL_FRAME(1)
  1545                                  
  1546                                  L_code_ptr_integer_to_fraction:
  1547 0000124D C8000000                        enter 0, 0
  1548 00001251 48837D1801                      cmp COUNT, 1
  1549 00001256 0F85E20C0000                    jne L_error_arg_count_1
  1550 0000125C 4C8B4520                        mov r8, PARAM(0)
  1551                                          assert_integer(r8)
    53 00001260 41803811            <1>  cmp byte [%1], %2
    54 00001264 0F85A80D0000        <1>  jne L_error_incorrect_type
  1552 0000126A BF11000000                      mov rdi, (1 + 8 + 8)
  1553 0000126F E89CF0FFFF                      call malloc
  1554 00001274 498B5801                        mov rbx, qword [r8 + 1]
  1555 00001278 C60012                          mov byte [rax], T_fraction
  1556 0000127B 48895801                        mov qword [rax + 1], rbx
  1557 0000127F 48C7400901000000                mov qword [rax + 1 + 8], 1
  1558 00001287 C9                              leave
  1559 00001288 C21800                          ret AND_KILL_FRAME(1)
  1560                                  
  1561                                  L_code_ptr_integer_to_char:
  1562 0000128B C8000000                        enter 0, 0
  1563 0000128F 48837D1801                      cmp COUNT, 1
  1564 00001294 0F85A40C0000                    jne L_error_arg_count_1
  1565 0000129A 488B4520                        mov rax, PARAM(0)
  1566                                          assert_integer(rax)
    53 0000129E 803811              <1>  cmp byte [%1], %2
    54 000012A1 0F856B0D0000        <1>  jne L_error_incorrect_type
  1567 000012A7 488B5801                        mov rbx, qword [rax + 1]
  1568 000012AB 4883FB00                        cmp rbx, 0
  1569 000012AF 0F8EF20B0000                    jle L_error_integer_range
  1570 000012B5 4881FB00010000                  cmp rbx, 256
  1571 000012BC 0F8DE50B0000                    jge L_error_integer_range
  1572 000012C2 BF02000000                      mov rdi, (1 + 1)
  1573 000012C7 E844F0FFFF                      call malloc
  1574 000012CC C60002                          mov byte [rax], T_char
  1575 000012CF 885801                          mov byte [rax + 1], bl
  1576 000012D2 C9                              leave
  1577 000012D3 C21800                          ret AND_KILL_FRAME(1)
  1578                                  
  1579                                  L_code_ptr_trng:
  1580 000012D6 C8000000                        enter 0, 0
  1581 000012DA 48837D1800                      cmp COUNT, 0
  1582 000012DF 0F85240C0000                    jne L_error_arg_count_0
  1583 000012E5 480FC7F7                        rdrand rdi
  1584 000012E9 48D1EF                          shr rdi, 1
  1585 000012EC E89C0B0000                      call make_integer
  1586 000012F1 C9                              leave
  1587 000012F2 C21000                          ret AND_KILL_FRAME(0)
  1588                                  
  1589                                  L_code_ptr_is_zero:
  1590 000012F5 C8000000                        enter 0, 0
  1591 000012F9 48837D1801                      cmp COUNT, 1
  1592 000012FE 0F853A0C0000                    jne L_error_arg_count_1
  1593 00001304 488B4520                        mov rax, PARAM(0)
  1594 00001308 803811                          cmp byte [rax], T_integer
  1595 0000130B 740F                            je .L_integer
  1596 0000130D 803812                          cmp byte [rax], T_fraction
  1597 00001310 7413                            je .L_fraction
  1598 00001312 803813                          cmp byte [rax], T_real
  1599 00001315 7417                            je .L_real
  1600 00001317 E9F60C0000                      jmp L_error_incorrect_type
  1601                                  .L_integer:
  1602 0000131C 4883780100                      cmp qword [rax + 1], 0
  1603 00001321 7429                            je .L_zero
  1604 00001323 EB1B                            jmp .L_not_zero
  1605                                  .L_fraction:
  1606 00001325 4883780100                      cmp qword [rax + 1], 0
  1607 0000132A 7420                            je .L_zero
  1608 0000132C EB12                            jmp .L_not_zero
  1609                                  .L_real:
  1610 0000132E 660FEFC0                        pxor xmm0, xmm0
  1611 00001332 FF7001                          push qword [rax + 1]
  1612 00001335 F20F100C24                      movsd xmm1, qword [rsp]
  1613 0000133A 660F2EC1                        ucomisd xmm0, xmm1
  1614 0000133E 740C                            je .L_zero
  1615                                  .L_not_zero:
  1616 00001340 48B8-                           mov rax, sob_boolean_false
  1616 00001342 [0200000000000000] 
  1617 0000134A EB0A                            jmp .L_end
  1618                                  .L_zero:
  1619 0000134C 48B8-                           mov rax, sob_boolean_true
  1619 0000134E [0300000000000000] 
  1620                                  .L_end:
  1621 00001356 C9                              leave
  1622 00001357 C21800                          ret AND_KILL_FRAME(1)
  1623                                  
  1624                                  L_code_ptr_is_integer:
  1625 0000135A C8000000                        enter 0, 0
  1626 0000135E 48837D1801                      cmp COUNT, 1
  1627 00001363 0F85D50B0000                    jne L_error_arg_count_1
  1628 00001369 488B4520                        mov rax, PARAM(0)
  1629 0000136D 803811                          cmp byte [rax], T_integer
  1630 00001370 750C                            jne .L_false
  1631 00001372 48B8-                           mov rax, sob_boolean_true
  1631 00001374 [0300000000000000] 
  1632 0000137C EB0A                            jmp .L_exit
  1633                                  .L_false:
  1634 0000137E 48B8-                           mov rax, sob_boolean_false
  1634 00001380 [0200000000000000] 
  1635                                  .L_exit:
  1636 00001388 C9                              leave
  1637 00001389 C21800                          ret AND_KILL_FRAME(1)
  1638                                  
  1639                                  L_code_ptr_raw_bin_add_rr:
  1640 0000138C C8000000                        enter 0, 0
  1641 00001390 48837D1802                      cmp COUNT, 2
  1642 00001395 0F85D80B0000                    jne L_error_arg_count_2
  1643 0000139B 488B5D20                        mov rbx, PARAM(0)
  1644                                          assert_real(rbx)
    53 0000139F 803B13              <1>  cmp byte [%1], %2
    54 000013A2 0F856A0C0000        <1>  jne L_error_incorrect_type
  1645 000013A8 488B4D28                        mov rcx, PARAM(1)
  1646                                          assert_real(rcx)
    53 000013AC 803913              <1>  cmp byte [%1], %2
    54 000013AF 0F855D0C0000        <1>  jne L_error_incorrect_type
  1647 000013B5 F20F104301                      movsd xmm0, qword [rbx + 1]
  1648 000013BA F20F104901                      movsd xmm1, qword [rcx + 1]
  1649 000013BF F20F58C1                        addsd xmm0, xmm1
  1650 000013C3 E8AD0A0000                      call make_real
  1651 000013C8 C9                              leave
  1652 000013C9 C22000                          ret AND_KILL_FRAME(2)
  1653                                  
  1654                                  L_code_ptr_raw_bin_sub_rr:
  1655 000013CC C8000000                        enter 0, 0
  1656 000013D0 48837D1802                      cmp COUNT, 2
  1657 000013D5 0F85980B0000                    jne L_error_arg_count_2
  1658 000013DB 488B5D20                        mov rbx, PARAM(0)
  1659                                          assert_real(rbx)
    53 000013DF 803B13              <1>  cmp byte [%1], %2
    54 000013E2 0F852A0C0000        <1>  jne L_error_incorrect_type
  1660 000013E8 488B4D28                        mov rcx, PARAM(1)
  1661                                          assert_real(rcx)
    53 000013EC 803913              <1>  cmp byte [%1], %2
    54 000013EF 0F851D0C0000        <1>  jne L_error_incorrect_type
  1662 000013F5 F20F104301                      movsd xmm0, qword [rbx + 1]
  1663 000013FA F20F104901                      movsd xmm1, qword [rcx + 1]
  1664 000013FF F20F5CC1                        subsd xmm0, xmm1
  1665 00001403 E86D0A0000                      call make_real
  1666 00001408 C9                              leave
  1667 00001409 C22000                          ret AND_KILL_FRAME(2)
  1668                                  
  1669                                  L_code_ptr_raw_bin_mul_rr:
  1670 0000140C C8000000                        enter 0, 0
  1671 00001410 48837D1802                      cmp COUNT, 2
  1672 00001415 0F85580B0000                    jne L_error_arg_count_2
  1673 0000141B 488B5D20                        mov rbx, PARAM(0)
  1674                                          assert_real(rbx)
    53 0000141F 803B13              <1>  cmp byte [%1], %2
    54 00001422 0F85EA0B0000        <1>  jne L_error_incorrect_type
  1675 00001428 488B4D28                        mov rcx, PARAM(1)
  1676                                          assert_real(rcx)
    53 0000142C 803913              <1>  cmp byte [%1], %2
    54 0000142F 0F85DD0B0000        <1>  jne L_error_incorrect_type
  1677 00001435 F20F104301                      movsd xmm0, qword [rbx + 1]
  1678 0000143A F20F104901                      movsd xmm1, qword [rcx + 1]
  1679 0000143F F20F59C1                        mulsd xmm0, xmm1
  1680 00001443 E82D0A0000                      call make_real
  1681 00001448 C9                              leave
  1682 00001449 C22000                          ret AND_KILL_FRAME(2)
  1683                                  
  1684                                  L_code_ptr_raw_bin_div_rr:
  1685 0000144C C8000000                        enter 0, 0
  1686 00001450 48837D1802                      cmp COUNT, 2
  1687 00001455 0F85180B0000                    jne L_error_arg_count_2
  1688 0000145B 488B5D20                        mov rbx, PARAM(0)
  1689                                          assert_real(rbx)
    53 0000145F 803B13              <1>  cmp byte [%1], %2
    54 00001462 0F85AA0B0000        <1>  jne L_error_incorrect_type
  1690 00001468 488B4D28                        mov rcx, PARAM(1)
  1691                                          assert_real(rcx)
    53 0000146C 803913              <1>  cmp byte [%1], %2
    54 0000146F 0F859D0B0000        <1>  jne L_error_incorrect_type
  1692 00001475 F20F104301                      movsd xmm0, qword [rbx + 1]
  1693 0000147A F20F104901                      movsd xmm1, qword [rcx + 1]
  1694 0000147F 660FEFD2                        pxor xmm2, xmm2
  1695 00001483 660F2ECA                        ucomisd xmm1, xmm2
  1696 00001487 0F84B60B0000                    je L_error_division_by_zero
  1697 0000148D F20F5EC1                        divsd xmm0, xmm1
  1698 00001491 E8DF090000                      call make_real
  1699 00001496 C9                              leave
  1700 00001497 C22000                          ret AND_KILL_FRAME(2)
  1701                                  
  1702                                  L_code_ptr_raw_bin_add_zz:
  1703 0000149A C8000000                	enter 0, 0
  1704 0000149E 48837D1802              	cmp COUNT, 2
  1705 000014A3 0F85CA0A0000            	jne L_error_arg_count_2
  1706 000014A9 4C8B4520                	mov r8, PARAM(0)
  1707                                  	assert_integer(r8)
    53 000014AD 41803811            <1>  cmp byte [%1], %2
    54 000014B1 0F855B0B0000        <1>  jne L_error_incorrect_type
  1708 000014B7 4C8B4D28                	mov r9, PARAM(1)
  1709                                  	assert_integer(r9)
    53 000014BB 41803911            <1>  cmp byte [%1], %2
    54 000014BF 0F854D0B0000        <1>  jne L_error_incorrect_type
  1710 000014C5 498B7801                	mov rdi, qword [r8 + 1]
  1711 000014C9 49037901                	add rdi, qword [r9 + 1]
  1712 000014CD E8BB090000              	call make_integer
  1713 000014D2 C9                      	leave
  1714 000014D3 C22000                  	ret AND_KILL_FRAME(2)
  1715                                  
  1716                                  L_code_ptr_raw_bin_add_qq:
  1717 000014D6 C8000000                        enter 0, 0
  1718 000014DA 48837D1802                      cmp COUNT, 2
  1719 000014DF 0F858E0A0000                    jne L_error_arg_count_2
  1720 000014E5 4C8B4520                        mov r8, PARAM(0)
  1721                                          assert_fraction(r8)
    53 000014E9 41803812            <1>  cmp byte [%1], %2
    54 000014ED 0F851F0B0000        <1>  jne L_error_incorrect_type
  1722 000014F3 4C8B4D28                        mov r9, PARAM(1)
  1723                                          assert_fraction(r9)
    53 000014F7 41803912            <1>  cmp byte [%1], %2
    54 000014FB 0F85110B0000        <1>  jne L_error_incorrect_type
  1724 00001501 498B4001                        mov rax, qword [r8 + 1] ; num1
  1725 00001505 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1726 00001509 4899                            cqo
  1727 0000150B 48F7EB                          imul rbx
  1728 0000150E 4889C6                          mov rsi, rax
  1729 00001511 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1730 00001515 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1731 00001519 4899                            cqo
  1732 0000151B 48F7EB                          imul rbx
  1733 0000151E 4801C6                          add rsi, rax
  1734 00001521 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1735 00001525 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1736 00001529 4899                            cqo
  1737 0000152B 48F7EB                          imul rbx
  1738 0000152E 4889C7                          mov rdi, rax
  1739 00001531 E8DE010000                      call normalize_fraction
  1740 00001536 C9                              leave
  1741 00001537 C22000                          ret AND_KILL_FRAME(2)
  1742                                  
  1743                                  L_code_ptr_raw_bin_sub_zz:
  1744 0000153A C8000000                	enter 0, 0
  1745 0000153E 48837D1802              	cmp COUNT, 2
  1746 00001543 0F852A0A0000            	jne L_error_arg_count_2
  1747 00001549 4C8B4520                	mov r8, PARAM(0)
  1748                                  	assert_integer(r8)
    53 0000154D 41803811            <1>  cmp byte [%1], %2
    54 00001551 0F85BB0A0000        <1>  jne L_error_incorrect_type
  1749 00001557 4C8B4D28                	mov r9, PARAM(1)
  1750                                  	assert_integer(r9)
    53 0000155B 41803911            <1>  cmp byte [%1], %2
    54 0000155F 0F85AD0A0000        <1>  jne L_error_incorrect_type
  1751 00001565 498B7801                	mov rdi, qword [r8 + 1]
  1752 00001569 492B7901                	sub rdi, qword [r9 + 1]
  1753 0000156D E81B090000              	call make_integer
  1754 00001572 C9                      	leave
  1755 00001573 C22000                  	ret AND_KILL_FRAME(2)
  1756                                  
  1757                                  L_code_ptr_raw_bin_sub_qq:
  1758 00001576 C8000000                        enter 0, 0
  1759 0000157A 48837D1802                      cmp COUNT, 2
  1760 0000157F 0F85EE090000                    jne L_error_arg_count_2
  1761 00001585 4C8B4520                        mov r8, PARAM(0)
  1762                                          assert_fraction(r8)
    53 00001589 41803812            <1>  cmp byte [%1], %2
    54 0000158D 0F857F0A0000        <1>  jne L_error_incorrect_type
  1763 00001593 4C8B4D28                        mov r9, PARAM(1)
  1764                                          assert_fraction(r9)
    53 00001597 41803912            <1>  cmp byte [%1], %2
    54 0000159B 0F85710A0000        <1>  jne L_error_incorrect_type
  1765 000015A1 498B4001                        mov rax, qword [r8 + 1] ; num1
  1766 000015A5 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1767 000015A9 4899                            cqo
  1768 000015AB 48F7EB                          imul rbx
  1769 000015AE 4889C6                          mov rsi, rax
  1770 000015B1 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1771 000015B5 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1772 000015B9 4899                            cqo
  1773 000015BB 48F7EB                          imul rbx
  1774 000015BE 4829C6                          sub rsi, rax
  1775 000015C1 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1776 000015C5 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1777 000015C9 4899                            cqo
  1778 000015CB 48F7EB                          imul rbx
  1779 000015CE 4889C7                          mov rdi, rax
  1780 000015D1 E83E010000                      call normalize_fraction
  1781 000015D6 C9                              leave
  1782 000015D7 C22000                          ret AND_KILL_FRAME(2)
  1783                                  
  1784                                  L_code_ptr_raw_bin_mul_zz:
  1785 000015DA C8000000                	enter 0, 0
  1786 000015DE 48837D1802              	cmp COUNT, 2
  1787 000015E3 0F858A090000            	jne L_error_arg_count_2
  1788 000015E9 4C8B4520                	mov r8, PARAM(0)
  1789                                  	assert_integer(r8)
    53 000015ED 41803811            <1>  cmp byte [%1], %2
    54 000015F1 0F851B0A0000        <1>  jne L_error_incorrect_type
  1790 000015F7 4C8B4D28                	mov r9, PARAM(1)
  1791                                  	assert_integer(r9)
    53 000015FB 41803911            <1>  cmp byte [%1], %2
    54 000015FF 0F850D0A0000        <1>  jne L_error_incorrect_type
  1792 00001605 4899                    	cqo
  1793 00001607 498B4001                	mov rax, qword [r8 + 1]
  1794 0000160B 49F76101                	mul qword [r9 + 1]
  1795 0000160F 4889C7                  	mov rdi, rax
  1796 00001612 E876080000              	call make_integer
  1797 00001617 C9                      	leave
  1798 00001618 C22000                  	ret AND_KILL_FRAME(2)
  1799                                  
  1800                                  L_code_ptr_raw_bin_mul_qq:
  1801 0000161B C8000000                        enter 0, 0
  1802 0000161F 48837D1802                      cmp COUNT, 2
  1803 00001624 0F8549090000                    jne L_error_arg_count_2
  1804 0000162A 4C8B4520                        mov r8, PARAM(0)
  1805                                          assert_fraction(r8)
    53 0000162E 41803812            <1>  cmp byte [%1], %2
    54 00001632 0F85DA090000        <1>  jne L_error_incorrect_type
  1806 00001638 4C8B4D28                        mov r9, PARAM(1)
  1807                                          assert_fraction(r9)
    53 0000163C 41803912            <1>  cmp byte [%1], %2
    54 00001640 0F85CC090000        <1>  jne L_error_incorrect_type
  1808 00001646 498B4001                        mov rax, qword [r8 + 1] ; num1
  1809 0000164A 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1810 0000164E 4899                            cqo
  1811 00001650 48F7EB                          imul rbx
  1812 00001653 4889C6                          mov rsi, rax
  1813 00001656 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1814 0000165A 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1815 0000165E 4899                            cqo
  1816 00001660 48F7EB                          imul rbx
  1817 00001663 4889C7                          mov rdi, rax
  1818 00001666 E8A9000000                      call normalize_fraction
  1819 0000166B C9                              leave
  1820 0000166C C22000                          ret AND_KILL_FRAME(2)
  1821                                          
  1822                                  L_code_ptr_raw_bin_div_zz:
  1823 0000166F C8000000                	enter 0, 0
  1824 00001673 48837D1802              	cmp COUNT, 2
  1825 00001678 0F85F5080000            	jne L_error_arg_count_2
  1826 0000167E 4C8B4520                	mov r8, PARAM(0)
  1827                                  	assert_integer(r8)
    53 00001682 41803811            <1>  cmp byte [%1], %2
    54 00001686 0F8586090000        <1>  jne L_error_incorrect_type
  1828 0000168C 4C8B4D28                	mov r9, PARAM(1)
  1829                                  	assert_integer(r9)
    53 00001690 41803911            <1>  cmp byte [%1], %2
    54 00001694 0F8578090000        <1>  jne L_error_incorrect_type
  1830 0000169A 498B7901                	mov rdi, qword [r9 + 1]
  1831 0000169E 4883FF00                	cmp rdi, 0
  1832 000016A2 0F849B090000            	je L_error_division_by_zero
  1833 000016A8 498B7001                	mov rsi, qword [r8 + 1]
  1834 000016AC E863000000              	call normalize_fraction
  1835 000016B1 C9                      	leave
  1836 000016B2 C22000                  	ret AND_KILL_FRAME(2)
  1837                                  
  1838                                  L_code_ptr_raw_bin_div_qq:
  1839 000016B5 C8000000                        enter 0, 0
  1840 000016B9 48837D1802                      cmp COUNT, 2
  1841 000016BE 0F85AF080000                    jne L_error_arg_count_2
  1842 000016C4 4C8B4520                        mov r8, PARAM(0)
  1843                                          assert_fraction(r8)
    53 000016C8 41803812            <1>  cmp byte [%1], %2
    54 000016CC 0F8540090000        <1>  jne L_error_incorrect_type
  1844 000016D2 4C8B4D28                        mov r9, PARAM(1)
  1845                                          assert_fraction(r9)
    53 000016D6 41803912            <1>  cmp byte [%1], %2
    54 000016DA 0F8532090000        <1>  jne L_error_incorrect_type
  1846 000016E0 4983790100                      cmp qword [r9 + 1], 0
  1847 000016E5 0F8458090000                    je L_error_division_by_zero
  1848 000016EB 498B4001                        mov rax, qword [r8 + 1] ; num1
  1849 000016EF 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1850 000016F3 4899                            cqo
  1851 000016F5 48F7EB                          imul rbx
  1852 000016F8 4889C6                          mov rsi, rax
  1853 000016FB 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1854 000016FF 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1855 00001703 4899                            cqo
  1856 00001705 48F7EB                          imul rbx
  1857 00001708 4889C7                          mov rdi, rax
  1858 0000170B E804000000                      call normalize_fraction
  1859 00001710 C9                              leave
  1860 00001711 C22000                          ret AND_KILL_FRAME(2)
  1861                                          
  1862                                  normalize_fraction:
  1863 00001714 56                              push rsi
  1864 00001715 57                              push rdi
  1865 00001716 E859000000                      call gcd
  1866 0000171B 4889C3                          mov rbx, rax
  1867 0000171E 58                              pop rax
  1868 0000171F 4899                            cqo
  1869 00001721 48F7FB                          idiv rbx
  1870 00001724 4989C0                          mov r8, rax
  1871 00001727 58                              pop rax
  1872 00001728 4899                            cqo
  1873 0000172A 48F7FB                          idiv rbx
  1874 0000172D 4989C1                          mov r9, rax
  1875 00001730 4983F900                        cmp r9, 0
  1876 00001734 741C                            je .L_zero
  1877 00001736 4983F801                        cmp r8, 1
  1878 0000173A 7421                            je .L_int
  1879 0000173C BF11000000                      mov rdi, (1 + 8 + 8)
  1880 00001741 E8CAEBFFFF                      call malloc
  1881 00001746 C60012                          mov byte [rax], T_fraction
  1882 00001749 4C894801                        mov qword [rax + 1], r9
  1883 0000174D 4C894009                        mov qword [rax + 1 + 8], r8
  1884 00001751 C3                              ret
  1885                                  .L_zero:
  1886 00001752 BF00000000                      mov rdi, 0
  1887 00001757 E831070000                      call make_integer
  1888 0000175C C3                              ret
  1889                                  .L_int:
  1890 0000175D 4C89CF                          mov rdi, r9
  1891 00001760 E828070000                      call make_integer
  1892 00001765 C3                              ret
  1893                                  
  1894                                  iabs:
  1895 00001766 4889F8                          mov rax, rdi
  1896 00001769 4883F800                        cmp rax, 0
  1897 0000176D 7C01                            jl .Lneg
  1898 0000176F C3                              ret
  1899                                  .Lneg:
  1900 00001770 48F7D8                          neg rax
  1901 00001773 C3                              ret
  1902                                  
  1903                                  gcd:
  1904 00001774 E8EDFFFFFF                      call iabs
  1905 00001779 4889C3                          mov rbx, rax
  1906 0000177C 4889F7                          mov rdi, rsi
  1907 0000177F E8E2FFFFFF                      call iabs
  1908 00001784 4883F800                        cmp rax, 0
  1909 00001788 7502                            jne .L0
  1910 0000178A 4893                            xchg rax, rbx
  1911                                  .L0:
  1912 0000178C 4883FB00                        cmp rbx, 0
  1913 00001790 740C                            je .L1
  1914 00001792 4899                            cqo
  1915 00001794 48F7F3                          div rbx
  1916 00001797 4889D0                          mov rax, rdx
  1917 0000179A 4893                            xchg rax, rbx
  1918 0000179C EBEE                            jmp .L0
  1919                                  .L1:
  1920 0000179E C3                              ret
  1921                                  
  1922                                  L_code_ptr_error:
  1923 0000179F C8000000                        enter 0, 0
  1924 000017A3 48837D1802                      cmp COUNT, 2
  1925 000017A8 0F85C5070000                    jne L_error_arg_count_2
  1926 000017AE 488B7520                        mov rsi, PARAM(0)
  1927                                          assert_interned_symbol(rsi)
    53 000017B2 803E41              <1>  cmp byte [%1], %2
    54 000017B5 0F8557080000        <1>  jne L_error_incorrect_type
  1928 000017BB 488B7528                        mov rsi, PARAM(1)
  1929                                          assert_string(rsi)
    53 000017BF 803E03              <1>  cmp byte [%1], %2
    54 000017C2 0F854A080000        <1>  jne L_error_incorrect_type
  1930 000017C8 48BF-                           mov rdi, fmt_scheme_error_part_1
  1930 000017CA [3C04000000000000] 
  1931 000017D2 B800000000                      mov rax, 0
  1932                                          ENTER
    44 000017D7 C8000000            <1>  enter 0, 0
    45 000017DB 4883E4F0            <1>  and rsp, ~15
  1933 000017DF E8(00000000)                    call printf
  1934                                          LEAVE
    49 000017E4 C9                  <1>  leave
  1935 000017E5 488B7D20                        mov rdi, PARAM(0)
  1936 000017E9 E8A3EDFFFF                      call print_sexpr
  1937 000017EE 48BF-                           mov rdi, fmt_scheme_error_part_2
  1937 000017F0 [5004000000000000] 
  1938 000017F8 B800000000                      mov rax, 0
  1939                                          ENTER
    44 000017FD C8000000            <1>  enter 0, 0
    45 00001801 4883E4F0            <1>  and rsp, ~15
  1940 00001805 E8(00000000)                    call printf
  1941                                          LEAVE
    49 0000180A C9                  <1>  leave
  1942 0000180B 488B4528                        mov rax, PARAM(1)       ; sob_string
  1943 0000180F BE01000000                      mov rsi, 1              ; size = 1 byte
  1944 00001814 488B5001                        mov rdx, qword [rax + 1] ; length
  1945 00001818 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1946 0000181C 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1947                                  	ENTER
    44 00001824 C8000000            <1>  enter 0, 0
    45 00001828 4883E4F0            <1>  and rsp, ~15
  1948 0000182C E8(00000000)                    call fwrite
  1949                                  	LEAVE
    49 00001831 C9                  <1>  leave
  1950 00001832 48BF-                           mov rdi, fmt_scheme_error_part_3
  1950 00001834 [9204000000000000] 
  1951 0000183C B800000000                      mov rax, 0
  1952                                          ENTER
    44 00001841 C8000000            <1>  enter 0, 0
    45 00001845 4883E4F0            <1>  and rsp, ~15
  1953 00001849 E8(00000000)                    call printf
  1954                                          LEAVE
    49 0000184E C9                  <1>  leave
  1955 0000184F 48C7C0F7FFFFFF                  mov rax, -9
  1956 00001856 E8(00000000)                    call exit
  1957                                  
  1958                                  L_code_ptr_raw_less_than_rr:
  1959 0000185B C8000000                        enter 0, 0
  1960 0000185F 48837D1802                      cmp COUNT, 2
  1961 00001864 0F8509070000                    jne L_error_arg_count_2
  1962 0000186A 488B7520                        mov rsi, PARAM(0)
  1963                                          assert_real(rsi)
    53 0000186E 803E13              <1>  cmp byte [%1], %2
    54 00001871 0F859B070000        <1>  jne L_error_incorrect_type
  1964 00001877 488B7D28                        mov rdi, PARAM(1)
  1965                                          assert_real(rdi)
    53 0000187B 803F13              <1>  cmp byte [%1], %2
    54 0000187E 0F858E070000        <1>  jne L_error_incorrect_type
  1966 00001884 F20F104601                      movsd xmm0, qword [rsi + 1]
  1967 00001889 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1968 0000188E 660F2FC1                        comisd xmm0, xmm1
  1969 00001892 730C                            jae .L_false
  1970 00001894 48B8-                           mov rax, sob_boolean_true
  1970 00001896 [0300000000000000] 
  1971 0000189E EB0A                            jmp .L_exit
  1972                                  .L_false:
  1973 000018A0 48B8-                           mov rax, sob_boolean_false
  1973 000018A2 [0200000000000000] 
  1974                                  .L_exit:
  1975 000018AA C9                              leave
  1976 000018AB C22000                          ret AND_KILL_FRAME(2)
  1977                                          
  1978                                  L_code_ptr_raw_less_than_zz:
  1979 000018AE C8000000                	enter 0, 0
  1980 000018B2 48837D1802              	cmp COUNT, 2
  1981 000018B7 0F85B6060000            	jne L_error_arg_count_2
  1982 000018BD 4C8B4520                	mov r8, PARAM(0)
  1983                                  	assert_integer(r8)
    53 000018C1 41803811            <1>  cmp byte [%1], %2
    54 000018C5 0F8547070000        <1>  jne L_error_incorrect_type
  1984 000018CB 4C8B4D28                	mov r9, PARAM(1)
  1985                                  	assert_integer(r9)
    53 000018CF 41803911            <1>  cmp byte [%1], %2
    54 000018D3 0F8539070000        <1>  jne L_error_incorrect_type
  1986 000018D9 498B7801                	mov rdi, qword [r8 + 1]
  1987 000018DD 493B7901                	cmp rdi, qword [r9 + 1]
  1988 000018E1 7D0C                    	jge .L_false
  1989 000018E3 48B8-                   	mov rax, sob_boolean_true
  1989 000018E5 [0300000000000000] 
  1990 000018ED EB0A                    	jmp .L_exit
  1991                                  .L_false:
  1992 000018EF 48B8-                   	mov rax, sob_boolean_false
  1992 000018F1 [0200000000000000] 
  1993                                  .L_exit:
  1994 000018F9 C9                      	leave
  1995 000018FA C22000                  	ret AND_KILL_FRAME(2)
  1996                                  
  1997                                  L_code_ptr_raw_less_than_qq:
  1998 000018FD C8000000                        enter 0, 0
  1999 00001901 48837D1802                      cmp COUNT, 2
  2000 00001906 0F8567060000                    jne L_error_arg_count_2
  2001 0000190C 488B7520                        mov rsi, PARAM(0)
  2002                                          assert_fraction(rsi)
    53 00001910 803E12              <1>  cmp byte [%1], %2
    54 00001913 0F85F9060000        <1>  jne L_error_incorrect_type
  2003 00001919 488B7D28                        mov rdi, PARAM(1)
  2004                                          assert_fraction(rdi)
    53 0000191D 803F12              <1>  cmp byte [%1], %2
    54 00001920 0F85EC060000        <1>  jne L_error_incorrect_type
  2005 00001926 488B4601                        mov rax, qword [rsi + 1] ; num1
  2006 0000192A 4899                            cqo
  2007 0000192C 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2008 00001930 4889C1                          mov rcx, rax
  2009 00001933 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  2010 00001937 4899                            cqo
  2011 00001939 48F76F01                        imul qword [rdi + 1]          ; num2
  2012 0000193D 4829C1                          sub rcx, rax
  2013 00001940 7D0C                            jge .L_false
  2014 00001942 48B8-                           mov rax, sob_boolean_true
  2014 00001944 [0300000000000000] 
  2015 0000194C EB0A                            jmp .L_exit
  2016                                  .L_false:
  2017 0000194E 48B8-                           mov rax, sob_boolean_false
  2017 00001950 [0200000000000000] 
  2018                                  .L_exit:
  2019 00001958 C9                              leave
  2020 00001959 C22000                          ret AND_KILL_FRAME(2)
  2021                                  
  2022                                  L_code_ptr_raw_equal_rr:
  2023 0000195C C8000000                        enter 0, 0
  2024 00001960 48837D1802                      cmp COUNT, 2
  2025 00001965 0F8508060000                    jne L_error_arg_count_2
  2026 0000196B 488B7520                        mov rsi, PARAM(0)
  2027                                          assert_real(rsi)
    53 0000196F 803E13              <1>  cmp byte [%1], %2
    54 00001972 0F859A060000        <1>  jne L_error_incorrect_type
  2028 00001978 488B7D28                        mov rdi, PARAM(1)
  2029                                          assert_real(rdi)
    53 0000197C 803F13              <1>  cmp byte [%1], %2
    54 0000197F 0F858D060000        <1>  jne L_error_incorrect_type
  2030 00001985 F20F104601                      movsd xmm0, qword [rsi + 1]
  2031 0000198A F20F104F01                      movsd xmm1, qword [rdi + 1]
  2032 0000198F 660F2FC1                        comisd xmm0, xmm1
  2033 00001993 750C                            jne .L_false
  2034 00001995 48B8-                           mov rax, sob_boolean_true
  2034 00001997 [0300000000000000] 
  2035 0000199F EB0A                            jmp .L_exit
  2036                                  .L_false:
  2037 000019A1 48B8-                           mov rax, sob_boolean_false
  2037 000019A3 [0200000000000000] 
  2038                                  .L_exit:
  2039 000019AB C9                              leave
  2040 000019AC C22000                          ret AND_KILL_FRAME(2)
  2041                                          
  2042                                  L_code_ptr_raw_equal_zz:
  2043 000019AF C8000000                	enter 0, 0
  2044 000019B3 48837D1802              	cmp COUNT, 2
  2045 000019B8 0F85B5050000            	jne L_error_arg_count_2
  2046 000019BE 4C8B4520                	mov r8, PARAM(0)
  2047                                  	assert_integer(r8)
    53 000019C2 41803811            <1>  cmp byte [%1], %2
    54 000019C6 0F8546060000        <1>  jne L_error_incorrect_type
  2048 000019CC 4C8B4D28                	mov r9, PARAM(1)
  2049                                  	assert_integer(r9)
    53 000019D0 41803911            <1>  cmp byte [%1], %2
    54 000019D4 0F8538060000        <1>  jne L_error_incorrect_type
  2050 000019DA 498B7801                	mov rdi, qword [r8 + 1]
  2051 000019DE 493B7901                	cmp rdi, qword [r9 + 1]
  2052 000019E2 750C                    	jne .L_false
  2053 000019E4 48B8-                   	mov rax, sob_boolean_true
  2053 000019E6 [0300000000000000] 
  2054 000019EE EB0A                    	jmp .L_exit
  2055                                  .L_false:
  2056 000019F0 48B8-                   	mov rax, sob_boolean_false
  2056 000019F2 [0200000000000000] 
  2057                                  .L_exit:
  2058 000019FA C9                      	leave
  2059 000019FB C22000                  	ret AND_KILL_FRAME(2)
  2060                                  
  2061                                  L_code_ptr_raw_equal_qq:
  2062 000019FE C8000000                        enter 0, 0
  2063 00001A02 48837D1802                      cmp COUNT, 2
  2064 00001A07 0F8566050000                    jne L_error_arg_count_2
  2065 00001A0D 488B7520                        mov rsi, PARAM(0)
  2066                                          assert_fraction(rsi)
    53 00001A11 803E12              <1>  cmp byte [%1], %2
    54 00001A14 0F85F8050000        <1>  jne L_error_incorrect_type
  2067 00001A1A 488B7D28                        mov rdi, PARAM(1)
  2068                                          assert_fraction(rdi)
    53 00001A1E 803F12              <1>  cmp byte [%1], %2
    54 00001A21 0F85EB050000        <1>  jne L_error_incorrect_type
  2069 00001A27 488B4601                        mov rax, qword [rsi + 1] ; num1
  2070 00001A2B 4899                            cqo
  2071 00001A2D 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2072 00001A31 4889C1                          mov rcx, rax
  2073 00001A34 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  2074 00001A38 4899                            cqo
  2075 00001A3A 48F76F01                        imul qword [rdi + 1]          ; num2
  2076 00001A3E 4829C1                          sub rcx, rax
  2077 00001A41 750C                            jne .L_false
  2078 00001A43 48B8-                           mov rax, sob_boolean_true
  2078 00001A45 [0300000000000000] 
  2079 00001A4D EB0A                            jmp .L_exit
  2080                                  .L_false:
  2081 00001A4F 48B8-                           mov rax, sob_boolean_false
  2081 00001A51 [0200000000000000] 
  2082                                  .L_exit:
  2083 00001A59 C9                              leave
  2084 00001A5A C22000                          ret AND_KILL_FRAME(2)
  2085                                  
  2086                                  L_code_ptr_quotient:
  2087 00001A5D C8000000                        enter 0, 0
  2088 00001A61 48837D1802                      cmp COUNT, 2
  2089 00001A66 0F8507050000                    jne L_error_arg_count_2
  2090 00001A6C 488B7520                        mov rsi, PARAM(0)
  2091                                          assert_integer(rsi)
    53 00001A70 803E11              <1>  cmp byte [%1], %2
    54 00001A73 0F8599050000        <1>  jne L_error_incorrect_type
  2092 00001A79 488B7D28                        mov rdi, PARAM(1)
  2093                                          assert_integer(rdi)
    53 00001A7D 803F11              <1>  cmp byte [%1], %2
    54 00001A80 0F858C050000        <1>  jne L_error_incorrect_type
  2094 00001A86 488B4601                        mov rax, qword [rsi + 1]
  2095 00001A8A 488B5F01                        mov rbx, qword [rdi + 1]
  2096 00001A8E 4883FB00                        cmp rbx, 0
  2097 00001A92 0F84AB050000                    je L_error_division_by_zero
  2098 00001A98 4899                            cqo
  2099 00001A9A 48F7FB                          idiv rbx
  2100 00001A9D 4889C7                          mov rdi, rax
  2101 00001AA0 E8E8030000                      call make_integer
  2102 00001AA5 C9                              leave
  2103 00001AA6 C22000                          ret AND_KILL_FRAME(2)
  2104                                          
  2105                                  L_code_ptr_remainder:
  2106 00001AA9 C8000000                        enter 0, 0
  2107 00001AAD 48837D1802                      cmp COUNT, 2
  2108 00001AB2 0F85BB040000                    jne L_error_arg_count_2
  2109 00001AB8 488B7520                        mov rsi, PARAM(0)
  2110                                          assert_integer(rsi)
    53 00001ABC 803E11              <1>  cmp byte [%1], %2
    54 00001ABF 0F854D050000        <1>  jne L_error_incorrect_type
  2111 00001AC5 488B7D28                        mov rdi, PARAM(1)
  2112                                          assert_integer(rdi)
    53 00001AC9 803F11              <1>  cmp byte [%1], %2
    54 00001ACC 0F8540050000        <1>  jne L_error_incorrect_type
  2113 00001AD2 488B4601                        mov rax, qword [rsi + 1]
  2114 00001AD6 488B5F01                        mov rbx, qword [rdi + 1]
  2115 00001ADA 4883FB00                        cmp rbx, 0
  2116 00001ADE 0F845F050000                    je L_error_division_by_zero
  2117 00001AE4 4899                            cqo
  2118 00001AE6 48F7FB                          idiv rbx
  2119 00001AE9 4889D7                          mov rdi, rdx
  2120 00001AEC E89C030000                      call make_integer
  2121 00001AF1 C9                              leave
  2122 00001AF2 C22000                          ret AND_KILL_FRAME(2)
  2123                                  
  2124                                  L_code_ptr_set_car:
  2125 00001AF5 C8000000                        enter 0, 0
  2126 00001AF9 48837D1802                      cmp COUNT, 2
  2127 00001AFE 0F856F040000                    jne L_error_arg_count_2
  2128 00001B04 488B4520                        mov rax, PARAM(0)
  2129                                          assert_pair(rax)
    53 00001B08 803821              <1>  cmp byte [%1], %2
    54 00001B0B 0F8501050000        <1>  jne L_error_incorrect_type
  2130 00001B11 488B5D28                        mov rbx, PARAM(1)
  2131 00001B15 48895801                        mov SOB_PAIR_CAR(rax), rbx
  2132 00001B19 48B8-                           mov rax, sob_void
  2132 00001B1B [0000000000000000] 
  2133 00001B23 C9                              leave
  2134 00001B24 C22000                          ret AND_KILL_FRAME(2)
  2135                                  
  2136                                  L_code_ptr_set_cdr:
  2137 00001B27 C8000000                        enter 0, 0
  2138 00001B2B 48837D1802                      cmp COUNT, 2
  2139 00001B30 0F853D040000                    jne L_error_arg_count_2
  2140 00001B36 488B4520                        mov rax, PARAM(0)
  2141                                          assert_pair(rax)
    53 00001B3A 803821              <1>  cmp byte [%1], %2
    54 00001B3D 0F85CF040000        <1>  jne L_error_incorrect_type
  2142 00001B43 488B5D28                        mov rbx, PARAM(1)
  2143 00001B47 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2144 00001B4B 48B8-                           mov rax, sob_void
  2144 00001B4D [0000000000000000] 
  2145 00001B55 C9                              leave
  2146 00001B56 C22000                          ret AND_KILL_FRAME(2)
  2147                                  
  2148                                  L_code_ptr_string_ref:
  2149 00001B59 C8000000                        enter 0, 0
  2150 00001B5D 48837D1802                      cmp COUNT, 2
  2151 00001B62 0F850B040000                    jne L_error_arg_count_2
  2152 00001B68 488B7D20                        mov rdi, PARAM(0)
  2153                                          assert_string(rdi)
    53 00001B6C 803F03              <1>  cmp byte [%1], %2
    54 00001B6F 0F859D040000        <1>  jne L_error_incorrect_type
  2154 00001B75 488B7528                        mov rsi, PARAM(1)
  2155                                          assert_integer(rsi)
    53 00001B79 803E11              <1>  cmp byte [%1], %2
    54 00001B7C 0F8590040000        <1>  jne L_error_incorrect_type
  2156 00001B82 488B5701                        mov rdx, qword [rdi + 1]
  2157 00001B86 488B4E01                        mov rcx, qword [rsi + 1]
  2158 00001B8A 4839D1                          cmp rcx, rdx
  2159 00001B8D 0F8D14030000                    jge L_error_integer_range
  2160 00001B93 4883F900                        cmp rcx, 0
  2161 00001B97 0F8C0A030000                    jl L_error_integer_range
  2162 00001B9D 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  2163 00001BA1 BF02000000                      mov rdi, 2
  2164 00001BA6 E865E7FFFF                      call malloc
  2165 00001BAB C60002                          mov byte [rax], T_char
  2166 00001BAE 885801                          mov byte [rax + 1], bl
  2167 00001BB1 C9                              leave
  2168 00001BB2 C22000                          ret AND_KILL_FRAME(2)
  2169                                  
  2170                                  L_code_ptr_vector_ref:
  2171 00001BB5 C8000000                        enter 0, 0
  2172 00001BB9 48837D1802                      cmp COUNT, 2
  2173 00001BBE 0F85AF030000                    jne L_error_arg_count_2
  2174 00001BC4 488B7D20                        mov rdi, PARAM(0)
  2175                                          assert_vector(rdi)
    53 00001BC8 803F22              <1>  cmp byte [%1], %2
    54 00001BCB 0F8541040000        <1>  jne L_error_incorrect_type
  2176 00001BD1 488B7528                        mov rsi, PARAM(1)
  2177                                          assert_integer(rsi)
    53 00001BD5 803E11              <1>  cmp byte [%1], %2
    54 00001BD8 0F8534040000        <1>  jne L_error_incorrect_type
  2178 00001BDE 488B5701                        mov rdx, qword [rdi + 1]
  2179 00001BE2 488B4E01                        mov rcx, qword [rsi + 1]
  2180 00001BE6 4839D1                          cmp rcx, rdx
  2181 00001BE9 0F8DB8020000                    jge L_error_integer_range
  2182 00001BEF 4883F900                        cmp rcx, 0
  2183 00001BF3 0F8CAE020000                    jl L_error_integer_range
  2184 00001BF9 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2185 00001BFE C9                              leave
  2186 00001BFF C22000                          ret AND_KILL_FRAME(2)
  2187                                  
  2188                                  L_code_ptr_vector_set:
  2189 00001C02 C8000000                        enter 0, 0
  2190 00001C06 48837D1803                      cmp COUNT, 3
  2191 00001C0B 0F85CC030000                    jne L_error_arg_count_3
  2192 00001C11 488B7D20                        mov rdi, PARAM(0)
  2193                                          assert_vector(rdi)
    53 00001C15 803F22              <1>  cmp byte [%1], %2
    54 00001C18 0F85F4030000        <1>  jne L_error_incorrect_type
  2194 00001C1E 488B7528                        mov rsi, PARAM(1)
  2195                                          assert_integer(rsi)
    53 00001C22 803E11              <1>  cmp byte [%1], %2
    54 00001C25 0F85E7030000        <1>  jne L_error_incorrect_type
  2196 00001C2B 488B5701                        mov rdx, qword [rdi + 1]
  2197 00001C2F 488B4E01                        mov rcx, qword [rsi + 1]
  2198 00001C33 4839D1                          cmp rcx, rdx
  2199 00001C36 0F8D6B020000                    jge L_error_integer_range
  2200 00001C3C 4883F900                        cmp rcx, 0
  2201 00001C40 0F8C61020000                    jl L_error_integer_range
  2202 00001C46 488B4530                        mov rax, PARAM(2)
  2203 00001C4A 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2204 00001C4F 48B8-                           mov rax, sob_void
  2204 00001C51 [0000000000000000] 
  2205 00001C59 C9                              leave
  2206 00001C5A C22800                          ret AND_KILL_FRAME(3)
  2207                                  
  2208                                  L_code_ptr_string_set:
  2209 00001C5D C8000000                        enter 0, 0
  2210 00001C61 48837D1803                      cmp COUNT, 3
  2211 00001C66 0F8571030000                    jne L_error_arg_count_3
  2212 00001C6C 488B7D20                        mov rdi, PARAM(0)
  2213                                          assert_string(rdi)
    53 00001C70 803F03              <1>  cmp byte [%1], %2
    54 00001C73 0F8599030000        <1>  jne L_error_incorrect_type
  2214 00001C79 488B7528                        mov rsi, PARAM(1)
  2215                                          assert_integer(rsi)
    53 00001C7D 803E11              <1>  cmp byte [%1], %2
    54 00001C80 0F858C030000        <1>  jne L_error_incorrect_type
  2216 00001C86 488B5701                        mov rdx, qword [rdi + 1]
  2217 00001C8A 488B4E01                        mov rcx, qword [rsi + 1]
  2218 00001C8E 4839D1                          cmp rcx, rdx
  2219 00001C91 0F8D10020000                    jge L_error_integer_range
  2220 00001C97 4883F900                        cmp rcx, 0
  2221 00001C9B 0F8C06020000                    jl L_error_integer_range
  2222 00001CA1 488B4530                        mov rax, PARAM(2)
  2223                                          assert_char(rax)
    53 00001CA5 803802              <1>  cmp byte [%1], %2
    54 00001CA8 0F8564030000        <1>  jne L_error_incorrect_type
  2224 00001CAE 8A4001                          mov al, byte [rax + 1]
  2225 00001CB1 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2226 00001CB5 48B8-                           mov rax, sob_void
  2226 00001CB7 [0000000000000000] 
  2227 00001CBF C9                              leave
  2228 00001CC0 C22800                          ret AND_KILL_FRAME(3)
  2229                                  
  2230                                  L_code_ptr_make_vector:
  2231 00001CC3 C8000000                        enter 0, 0
  2232 00001CC7 48837D1802                      cmp COUNT, 2
  2233 00001CCC 0F85A1020000                    jne L_error_arg_count_2
  2234 00001CD2 488B4D20                        mov rcx, PARAM(0)
  2235                                          assert_integer(rcx)
    53 00001CD6 803911              <1>  cmp byte [%1], %2
    54 00001CD9 0F8533030000        <1>  jne L_error_incorrect_type
  2236 00001CDF 488B4901                        mov rcx, qword [rcx + 1]
  2237 00001CE3 4883F900                        cmp rcx, 0
  2238 00001CE7 0F8CBA010000                    jl L_error_integer_range
  2239 00001CED 488B5528                        mov rdx, PARAM(1)
  2240 00001CF1 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2241 00001CF9 E812E6FFFF                      call malloc
  2242 00001CFE C60022                          mov byte [rax], T_vector
  2243 00001D01 48894801                        mov qword [rax + 1], rcx
  2244 00001D05 41B800000000                    mov r8, 0
  2245                                  .L0:
  2246 00001D0B 4939C8                          cmp r8, rcx
  2247 00001D0E 740A                            je .L1
  2248 00001D10 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2249 00001D15 49FFC0                          inc r8
  2250 00001D18 EBF1                            jmp .L0
  2251                                  .L1:
  2252 00001D1A C9                              leave
  2253 00001D1B C22000                          ret AND_KILL_FRAME(2)
  2254                                          
  2255                                  L_code_ptr_make_string:
  2256 00001D1E C8000000                        enter 0, 0
  2257 00001D22 48837D1802                      cmp COUNT, 2
  2258 00001D27 0F8546020000                    jne L_error_arg_count_2
  2259 00001D2D 488B4D20                        mov rcx, PARAM(0)
  2260                                          assert_integer(rcx)
    53 00001D31 803911              <1>  cmp byte [%1], %2
    54 00001D34 0F85D8020000        <1>  jne L_error_incorrect_type
  2261 00001D3A 488B4901                        mov rcx, qword [rcx + 1]
  2262 00001D3E 4883F900                        cmp rcx, 0
  2263 00001D42 0F8C5F010000                    jl L_error_integer_range
  2264 00001D48 488B5528                        mov rdx, PARAM(1)
  2265                                          assert_char(rdx)
    53 00001D4C 803A02              <1>  cmp byte [%1], %2
    54 00001D4F 0F85BD020000        <1>  jne L_error_incorrect_type
  2266 00001D55 8A5201                          mov dl, byte [rdx + 1]
  2267 00001D58 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2268 00001D5C E8AFE5FFFF                      call malloc
  2269 00001D61 C60003                          mov byte [rax], T_string
  2270 00001D64 48894801                        mov qword [rax + 1], rcx
  2271 00001D68 41B800000000                    mov r8, 0
  2272                                  .L0:
  2273 00001D6E 4939C8                          cmp r8, rcx
  2274 00001D71 740A                            je .L1
  2275 00001D73 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2276 00001D78 49FFC0                          inc r8
  2277 00001D7B EBF1                            jmp .L0
  2278                                  .L1:
  2279 00001D7D C9                              leave
  2280 00001D7E C22000                          ret AND_KILL_FRAME(2)
  2281                                  
  2282                                  L_code_ptr_numerator:
  2283 00001D81 C8000000                        enter 0, 0
  2284 00001D85 48837D1801                      cmp COUNT, 1
  2285 00001D8A 0F85AE010000                    jne L_error_arg_count_1
  2286 00001D90 488B4520                        mov rax, PARAM(0)
  2287                                          assert_fraction(rax)
    53 00001D94 803812              <1>  cmp byte [%1], %2
    54 00001D97 0F8575020000        <1>  jne L_error_incorrect_type
  2288 00001D9D 488B7801                        mov rdi, qword [rax + 1]
  2289 00001DA1 E8E7000000                      call make_integer
  2290 00001DA6 C9                              leave
  2291 00001DA7 C21800                          ret AND_KILL_FRAME(1)
  2292                                          
  2293                                  L_code_ptr_denominator:
  2294 00001DAA C8000000                        enter 0, 0
  2295 00001DAE 48837D1801                      cmp COUNT, 1
  2296 00001DB3 0F8585010000                    jne L_error_arg_count_1
  2297 00001DB9 488B4520                        mov rax, PARAM(0)
  2298                                          assert_fraction(rax)
    53 00001DBD 803812              <1>  cmp byte [%1], %2
    54 00001DC0 0F854C020000        <1>  jne L_error_incorrect_type
  2299 00001DC6 488B7809                        mov rdi, qword [rax + 1 + 8]
  2300 00001DCA E8BE000000                      call make_integer
  2301 00001DCF C9                              leave
  2302 00001DD0 C21800                          ret AND_KILL_FRAME(1)
  2303                                  
  2304                                  L_code_ptr_is_eq:
  2305 00001DD3 C8000000                	enter 0, 0
  2306 00001DD7 48837D1802              	cmp COUNT, 2
  2307 00001DDC 0F8591010000            	jne L_error_arg_count_2
  2308 00001DE2 488B7D20                	mov rdi, PARAM(0)
  2309 00001DE6 488B7528                	mov rsi, PARAM(1)
  2310 00001DEA 4839F7                  	cmp rdi, rsi
  2311 00001DED 746C                    	je .L_eq_true
  2312 00001DEF 8A17                    	mov dl, byte [rdi]
  2313 00001DF1 3A16                    	cmp dl, byte [rsi]
  2314 00001DF3 7572                    	jne .L_eq_false
  2315 00001DF5 80FA02                  	cmp dl, T_char
  2316 00001DF8 7459                    	je .L_char
  2317 00001DFA 80FA41                  	cmp dl, T_interned_symbol
  2318 00001DFD 7440                    	je .L_interned_symbol
  2319 00001DFF 80FA42                          cmp dl, T_uninterned_symbol
  2320 00001E02 7443                            je .L_uninterned_symbol
  2321 00001E04 80FA13                  	cmp dl, T_real
  2322 00001E07 742E                    	je .L_real
  2323 00001E09 80FA12                  	cmp dl, T_fraction
  2324 00001E0C 7413                    	je .L_fraction
  2325 00001E0E 80FA11                          cmp dl, T_integer
  2326 00001E11 7402                            je .L_integer
  2327 00001E13 EB52                    	jmp .L_eq_false
  2328                                  .L_integer:
  2329 00001E15 488B4601                        mov rax, qword [rsi + 1]
  2330 00001E19 483B4701                        cmp rax, qword [rdi + 1]
  2331 00001E1D 7548                            jne .L_eq_false
  2332 00001E1F EB3A                            jmp .L_eq_true
  2333                                  .L_fraction:
  2334 00001E21 488B4601                	mov rax, qword [rsi + 1]
  2335 00001E25 483B4701                	cmp rax, qword [rdi + 1]
  2336 00001E29 753C                    	jne .L_eq_false
  2337 00001E2B 488B4609                	mov rax, qword [rsi + 1 + 8]
  2338 00001E2F 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2339 00001E33 7532                    	jne .L_eq_false
  2340 00001E35 EB24                    	jmp .L_eq_true
  2341                                  .L_real:
  2342 00001E37 488B4601                	mov rax, qword [rsi + 1]
  2343 00001E3B 483B4701                	cmp rax, qword [rdi + 1]
  2344                                  .L_interned_symbol:
  2345                                  	; never reached, because interned_symbols are static!
  2346                                  	; but I'm keeping it in case, I'll ever change
  2347                                  	; the implementation
  2348 00001E3F 488B4601                	mov rax, qword [rsi + 1]
  2349 00001E43 483B4701                	cmp rax, qword [rdi + 1]
  2350                                  .L_uninterned_symbol:
  2351 00001E47 4C8B4701                        mov r8, qword [rdi + 1]
  2352 00001E4B 4C3B4601                        cmp r8, qword [rsi + 1]
  2353 00001E4F 7516                            jne .L_eq_false
  2354 00001E51 EB08                            jmp .L_eq_true
  2355                                  .L_char:
  2356 00001E53 8A5E01                  	mov bl, byte [rsi + 1]
  2357 00001E56 3A5F01                  	cmp bl, byte [rdi + 1]
  2358 00001E59 750C                    	jne .L_eq_false
  2359                                  .L_eq_true:
  2360 00001E5B 48B8-                   	mov rax, sob_boolean_true
  2360 00001E5D [0300000000000000] 
  2361 00001E65 EB0A                    	jmp .L_eq_exit
  2362                                  .L_eq_false:
  2363 00001E67 48B8-                   	mov rax, sob_boolean_false
  2363 00001E69 [0200000000000000] 
  2364                                  .L_eq_exit:
  2365 00001E71 C9                      	leave
  2366 00001E72 C22000                  	ret AND_KILL_FRAME(2)
  2367                                  
  2368                                  make_real:
  2369 00001E75 C8000000                        enter 0, 0
  2370 00001E79 BF09000000                      mov rdi, (1 + 8)
  2371 00001E7E E88DE4FFFF                      call malloc
  2372 00001E83 C60013                          mov byte [rax], T_real
  2373 00001E86 F20F114001                      movsd qword [rax + 1], xmm0
  2374 00001E8B C9                              leave 
  2375 00001E8C C3                              ret
  2376                                          
  2377                                  make_integer:
  2378 00001E8D C8000000                        enter 0, 0
  2379 00001E91 4889FE                          mov rsi, rdi
  2380 00001E94 BF09000000                      mov rdi, (1 + 8)
  2381 00001E99 E872E4FFFF                      call malloc
  2382 00001E9E C60011                          mov byte [rax], T_integer
  2383 00001EA1 48897001                        mov qword [rax + 1], rsi
  2384 00001EA5 C9                              leave
  2385 00001EA6 C3                              ret
  2386                                          
  2387                                  L_error_integer_range:
  2388 00001EA7 488B3C25[00000000]              mov rdi, qword [stderr]
  2389 00001EAF 48BE-                           mov rsi, fmt_integer_range
  2389 00001EB1 [0904000000000000] 
  2390 00001EB9 B800000000                      mov rax, 0
  2391                                          ENTER
    44 00001EBE C8000000            <1>  enter 0, 0
    45 00001EC2 4883E4F0            <1>  and rsp, ~15
  2392 00001EC6 E8(00000000)                    call fprintf
  2393                                          LEAVE
    49 00001ECB C9                  <1>  leave
  2394 00001ECC 48C7C0FBFFFFFF                  mov rax, -5
  2395 00001ED3 E8(00000000)                    call exit
  2396                                  
  2397                                  L_error_arg_negative:
  2398 00001ED8 488B3C25[00000000]              mov rdi, qword [stderr]
  2399 00001EE0 48BE-                           mov rsi, fmt_arg_negative
  2399 00001EE2 [E102000000000000] 
  2400 00001EEA B800000000                      mov rax, 0
  2401                                          ENTER
    44 00001EEF C8000000            <1>  enter 0, 0
    45 00001EF3 4883E4F0            <1>  and rsp, ~15
  2402 00001EF7 E8(00000000)                    call fprintf
  2403                                          LEAVE
    49 00001EFC C9                  <1>  leave
  2404 00001EFD 48C7C0FDFFFFFF                  mov rax, -3
  2405 00001F04 E8(00000000)                    call exit
  2406                                  
  2407                                  L_error_arg_count_0:
  2408 00001F09 488B3C25[00000000]              mov rdi, qword [stderr]
  2409 00001F11 48BE-                           mov rsi, fmt_arg_count_0
  2409 00001F13 [0703000000000000] 
  2410 00001F1B 488B5518                        mov rdx, COUNT
  2411 00001F1F B800000000                      mov rax, 0
  2412                                          ENTER
    44 00001F24 C8000000            <1>  enter 0, 0
    45 00001F28 4883E4F0            <1>  and rsp, ~15
  2413 00001F2C E8(00000000)                    call fprintf
  2414                                          LEAVE
    49 00001F31 C9                  <1>  leave
  2415 00001F32 48C7C0FDFFFFFF                  mov rax, -3
  2416 00001F39 E8(00000000)                    call exit
  2417                                  
  2418                                  L_error_arg_count_1:
  2419 00001F3E 488B3C25[00000000]              mov rdi, qword [stderr]
  2420 00001F46 48BE-                           mov rsi, fmt_arg_count_1
  2420 00001F48 [2F03000000000000] 
  2421 00001F50 488B5518                        mov rdx, COUNT
  2422 00001F54 B800000000                      mov rax, 0
  2423                                          ENTER
    44 00001F59 C8000000            <1>  enter 0, 0
    45 00001F5D 4883E4F0            <1>  and rsp, ~15
  2424 00001F61 E8(00000000)                    call fprintf
  2425                                          LEAVE
    49 00001F66 C9                  <1>  leave
  2426 00001F67 48C7C0FDFFFFFF                  mov rax, -3
  2427 00001F6E E8(00000000)                    call exit
  2428                                  
  2429                                  L_error_arg_count_2:
  2430 00001F73 488B3C25[00000000]              mov rdi, qword [stderr]
  2431 00001F7B 48BE-                           mov rsi, fmt_arg_count_2
  2431 00001F7D [9503000000000000] 
  2432 00001F85 488B5518                        mov rdx, COUNT
  2433 00001F89 B800000000                      mov rax, 0
  2434                                          ENTER
    44 00001F8E C8000000            <1>  enter 0, 0
    45 00001F92 4883E4F0            <1>  and rsp, ~15
  2435 00001F96 E8(00000000)                    call fprintf
  2436                                          LEAVE
    49 00001F9B C9                  <1>  leave
  2437 00001F9C 48C7C0FDFFFFFF                  mov rax, -3
  2438 00001FA3 E8(00000000)                    call exit
  2439                                  
  2440                                  L_error_arg_count_12:
  2441 00001FA8 488B3C25[00000000]              mov rdi, qword [stderr]
  2442 00001FB0 48BE-                           mov rsi, fmt_arg_count_12
  2442 00001FB2 [5503000000000000] 
  2443 00001FBA 488B5518                        mov rdx, COUNT
  2444 00001FBE B800000000                      mov rax, 0
  2445                                          ENTER
    44 00001FC3 C8000000            <1>  enter 0, 0
    45 00001FC7 4883E4F0            <1>  and rsp, ~15
  2446 00001FCB E8(00000000)                    call fprintf
  2447                                          LEAVE
    49 00001FD0 C9                  <1>  leave
  2448 00001FD1 48C7C0FDFFFFFF                  mov rax, -3
  2449 00001FD8 E8(00000000)                    call exit
  2450                                  
  2451                                  L_error_arg_count_3:
  2452 00001FDD 488B3C25[00000000]              mov rdi, qword [stderr]
  2453 00001FE5 48BE-                           mov rsi, fmt_arg_count_3
  2453 00001FE7 [BC03000000000000] 
  2454 00001FEF 488B5518                        mov rdx, COUNT
  2455 00001FF3 B800000000                      mov rax, 0
  2456                                          ENTER
    44 00001FF8 C8000000            <1>  enter 0, 0
    45 00001FFC 4883E4F0            <1>  and rsp, ~15
  2457 00002000 E8(00000000)                    call fprintf
  2458                                          LEAVE
    49 00002005 C9                  <1>  leave
  2459 00002006 48C7C0FDFFFFFF                  mov rax, -3
  2460 0000200D E8(00000000)                    call exit
  2461                                          
  2462                                  L_error_incorrect_type:
  2463 00002012 488B3C25[00000000]              mov rdi, qword [stderr]
  2464 0000201A 48BE-                           mov rsi, fmt_type
  2464 0000201C [E503000000000000] 
  2465 00002024 B800000000                      mov rax, 0
  2466                                          ENTER
    44 00002029 C8000000            <1>  enter 0, 0
    45 0000202D 4883E4F0            <1>  and rsp, ~15
  2467 00002031 E8(00000000)                    call fprintf
  2468                                          LEAVE
    49 00002036 C9                  <1>  leave
  2469 00002037 48C7C0FCFFFFFF                  mov rax, -4
  2470 0000203E E8(00000000)                    call exit
  2471                                  
  2472                                  L_error_division_by_zero:
  2473 00002043 488B3C25[00000000]              mov rdi, qword [stderr]
  2474 0000204B 48BE-                           mov rsi, fmt_division_by_zero
  2474 0000204D [2604000000000000] 
  2475 00002055 B800000000                      mov rax, 0
  2476                                          ENTER
    44 0000205A C8000000            <1>  enter 0, 0
    45 0000205E 4883E4F0            <1>  and rsp, ~15
  2477 00002062 E8(00000000)                    call fprintf
  2478                                          LEAVE
    49 00002067 C9                  <1>  leave
  2479 00002068 48C7C0F8FFFFFF                  mov rax, -8
  2480 0000206F E8(00000000)                    call exit
  2481                                  
  2482                                  section .data
  2483                                  gensym_count:
  2484 000002D6 0000000000000000                dq 0
  2485                                  fmt_char:
  2486 000002DE 256300                          db `%c\0`
  2487                                  fmt_arg_negative:
  2488 000002E1 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
  2488 000002EA 7267756D656E742063-
  2488 000002F3 616E6E6F7420626520-
  2488 000002FC 6E656761746976652E-
  2488 00000305 0A00               
  2489                                  fmt_arg_count_0:
  2490 00000307 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2490 00000310 74696E67207A65726F-
  2490 00000319 20617267756D656E74-
  2490 00000322 732E20466F756E6420-
  2490 0000032B 25640A00           
  2491                                  fmt_arg_count_1:
  2492 0000032F 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2492 00000338 74696E67206F6E6520-
  2492 00000341 617267756D656E742E-
  2492 0000034A 20466F756E64202564-
  2492 00000353 0A00               
  2493                                  fmt_arg_count_12:
  2494 00000355 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2494 0000035E 74696E67206F6E6520-
  2494 00000367 726571756972656420-
  2494 00000370 616E64206F6E65206F-
  2494 00000379 7074696F6E616C2061-
  2494 00000382 7267756D656E742E20-
  2494 0000038B 466F756E642025640A-
  2494 00000394 00                 
  2495                                  fmt_arg_count_2:
  2496 00000395 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2496 0000039E 74696E672074776F20-
  2496 000003A7 617267756D656E7473-
  2496 000003B0 2E20466F756E642025-
  2496 000003B9 640A00             
  2497                                  fmt_arg_count_3:
  2498 000003BC 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2498 000003C5 74696E672074687265-
  2498 000003CE 6520617267756D656E-
  2498 000003D7 74732E20466F756E64-
  2498 000003E0 2025640A00         
  2499                                  fmt_type:
  2500 000003E5 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2500 000003EE 696F6E207061737365-
  2500 000003F7 6420696E636F727265-
  2500 00000400 637420747970650A00 
  2501                                  fmt_integer_range:
  2502 00000409 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2502 00000412 7265637420696E7465-
  2502 0000041B 6765722072616E6765-
  2502 00000424 0A00               
  2503                                  fmt_division_by_zero:
  2504 00000426 212121204469766973-             db `!!! Division by zero\n\0`
  2504 0000042F 696F6E206279207A65-
  2504 00000438 726F0A00           
  2505                                  fmt_scheme_error_part_1:
  2506 0000043C 0A2121212054686520-             db `\n!!! The procedure \0`
  2506 00000445 70726F636564757265-
  2506 0000044E 2000               
  2507                                  fmt_scheme_error_part_2:
  2508 00000450 2061736B656420746F-             db ` asked to terminate the program\n`
  2508 00000459 207465726D696E6174-
  2508 00000462 65207468652070726F-
  2508 0000046B 6772616D0A         
  2509 00000470 202020207769746820-             db `    with the following message:\n\n\0`
  2509 00000479 74686520666F6C6C6F-
  2509 00000482 77696E67206D657373-
  2509 0000048B 6167653A0A0A00     
  2510                                  fmt_scheme_error_part_3:
  2511 00000492 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2511 0000049B 210A0A00           
