     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "return"
    97 00000007 0600000000000000        	dq 6
    98 0000000F 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
    99                                  	; L_constants + 21:
   100 00000015 11                      	db T_integer	; 1
   101 00000016 0100000000000000        	dq 1
   102                                  
   103                                  
   104                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
   105                                  global main
   106                                  section .text
   107                                  main:
   108 00000000 C8000000                        enter 0, 0
   109 00000004 6A00                            push 0
   110 00000006 6A00                            push 0
   111 00000008 68[6E010000]                    push Lend
   112 0000000D C8000000                        enter 0, 0
   113                                  
   114                                  	; preparing a non-tail-call
   115 00000011 48B8-                   	mov rax, L_constants + 21
   115 00000013 [1500000000000000] 
   116 0000001B 50                      	push rax
   117 0000001C 6A01                    	push 1	; arg count
   118 0000001E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   119 00000023 E8B1020000              	call malloc
   120 00000028 50                      	push rax
   121 00000029 BF00000000              	mov rdi, 8 * 0	; new rib
   122 0000002E E8A6020000              	call malloc
   123 00000033 50                      	push rax
   124 00000034 BF08000000              	mov rdi, 8 * 1	; extended env
   125 00000039 E89B020000              	call malloc
   126 0000003E 488B7D10                	mov rdi, ENV
   127 00000042 BE00000000              	mov rsi, 0
   128 00000047 BA01000000              	mov rdx, 1
   129                                  .L_lambda_simple_env_loop_000b:	; ext_env[i + 1] <-- env[i]
   130 0000004C 4883FE00                	cmp rsi, 0
   131 00000050 7410                    	je .L_lambda_simple_env_end_000b
   132 00000052 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   133 00000056 48890CD0                	mov qword [rax + 8 * rdx], rcx
   134 0000005A 48FFC6                  	inc rsi
   135 0000005D 48FFC2                  	inc rdx
   136 00000060 EBEA                    	jmp .L_lambda_simple_env_loop_000b
   137                                  .L_lambda_simple_env_end_000b:
   138 00000062 5B                      	pop rbx
   139 00000063 BE00000000              	mov rsi, 0
   140                                  .L_lambda_simple_params_loop_000b:	; copy params
   141 00000068 4883FE00                	cmp rsi, 0
   142 0000006C 740E                    	je .L_lambda_simple_params_end_000b
   143 0000006E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   144 00000073 488914F3                	mov qword [rbx + 8 * rsi], rdx
   145 00000077 48FFC6                  	inc rsi
   146 0000007A EBEC                    	jmp .L_lambda_simple_params_loop_000b
   147                                  .L_lambda_simple_params_end_000b:
   148 0000007C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   149 0000007F 4889C3                  	mov rbx, rax
   150 00000082 58                      	pop rax
   151 00000083 C60004                  	mov byte [rax], T_closure
   152 00000086 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   153 0000008A 48C74009[97000000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000b
   154 00000092 E9C8000000              	jmp .L_lambda_simple_end_000b
   155                                  .L_lambda_simple_code_000b:	; lambda-simple body
   156 00000097 48837C241001            	cmp qword [rsp + 8 * 2], 1
   157 0000009D 740B                    	je .L_lambda_simple_arity_check_ok_000b
   158 0000009F FF742410                	push qword [rsp + 8 * 2]
   159 000000A3 6A01                    	push 1
   160 000000A5 E9E8010000              	jmp L_error_incorrect_arity_simple
   161                                  .L_lambda_simple_arity_check_ok_000b:
   162 000000AA C8000000                	enter 0, 0
   163 000000AE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   164 000000B3 E821020000              	call malloc
   165 000000B8 50                      	push rax
   166 000000B9 BF08000000              	mov rdi, 8 * 1	; new rib
   167 000000BE E816020000              	call malloc
   168 000000C3 50                      	push rax
   169 000000C4 BF10000000              	mov rdi, 8 * 2	; extended env
   170 000000C9 E80B020000              	call malloc
   171 000000CE 488B7D10                	mov rdi, ENV
   172 000000D2 BE00000000              	mov rsi, 0
   173 000000D7 BA01000000              	mov rdx, 1
   174                                  .L_lambda_simple_env_loop_000c:	; ext_env[i + 1] <-- env[i]
   175 000000DC 4883FE01                	cmp rsi, 1
   176 000000E0 7410                    	je .L_lambda_simple_env_end_000c
   177 000000E2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   178 000000E6 48890CD0                	mov qword [rax + 8 * rdx], rcx
   179 000000EA 48FFC6                  	inc rsi
   180 000000ED 48FFC2                  	inc rdx
   181 000000F0 EBEA                    	jmp .L_lambda_simple_env_loop_000c
   182                                  .L_lambda_simple_env_end_000c:
   183 000000F2 5B                      	pop rbx
   184 000000F3 BE00000000              	mov rsi, 0
   185                                  .L_lambda_simple_params_loop_000c:	; copy params
   186 000000F8 4883FE01                	cmp rsi, 1
   187 000000FC 740E                    	je .L_lambda_simple_params_end_000c
   188 000000FE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   189 00000103 488914F3                	mov qword [rbx + 8 * rsi], rdx
   190 00000107 48FFC6                  	inc rsi
   191 0000010A EBEC                    	jmp .L_lambda_simple_params_loop_000c
   192                                  .L_lambda_simple_params_end_000c:
   193 0000010C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   194 0000010F 4889C3                  	mov rbx, rax
   195 00000112 58                      	pop rax
   196 00000113 C60004                  	mov byte [rax], T_closure
   197 00000116 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   198 0000011A 48C74009[24010000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000c
   199 00000122 EB37                    	jmp .L_lambda_simple_end_000c
   200                                  .L_lambda_simple_code_000c:	; lambda-simple body
   201 00000124 48837C241001            	cmp qword [rsp + 8 * 2], 1
   202 0000012A 740B                    	je .L_lambda_simple_arity_check_ok_000c
   203 0000012C FF742410                	push qword [rsp + 8 * 2]
   204 00000130 6A01                    	push 1
   205 00000132 E95B010000              	jmp L_error_incorrect_arity_simple
   206                                  .L_lambda_simple_arity_check_ok_000c:
   207 00000137 C8000000                	enter 0, 0
   208 0000013B 488B4510                	mov rax, ENV
   209 0000013F 488B00                  	mov rax, qword [rax + 8 * 0]
   210 00000142 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
   211 00000145 48894520                	mov PARAM(0), rax	; 
   212 00000149 48B8-                   	mov rax, sob_void
   212 0000014B [0000000000000000] 
   213                                  
   214 00000153 488B4520                	mov rax, PARAM(0)	; param y
   215 00000157 C9                      	leave
   216 00000158 C21800                  	ret AND_KILL_FRAME(1)
   217                                  .L_lambda_simple_end_000c:	; new closure is in rax
   218 0000015B C9                      	leave
   219 0000015C C21800                  	ret AND_KILL_FRAME(1)
   220                                  .L_lambda_simple_end_000b:	; new closure is in rax
   221 0000015F 803804                  	cmp byte [rax], T_closure
   222 00000162 0F85C8000000            	jne L_error_non_closure
   223 00000168 FF7001                  	push SOB_CLOSURE_ENV(rax)
   224 0000016B FF5009                  	call SOB_CLOSURE_CODE(rax)
   225                                  Lend:
   226 0000016E 4889C7                  	mov rdi, rax
   227 00000171 E8B8030000              	call print_sexpr_if_not_void
   228                                  
   229 00000176 48BF-                           mov rdi, fmt_memory_usage
   229 00000178 [B600000000000000] 
   230 00000180 488B3425[3C010000]              mov rsi, qword [top_of_memory]
   231 00000188 4881EE[00000000]                sub rsi, memory
   232 0000018F B800000000                      mov rax, 0
   233                                          ENTER
    44 00000194 C8000000            <1>  enter 0, 0
    45 00000198 4883E4F0            <1>  and rsp, ~15
   234 0000019C E8(00000000)                    call printf
   235                                          LEAVE
    49 000001A1 C9                  <1>  leave
   236 000001A2 B800000000                      mov rax, 0
   237 000001A7 E8(00000000)                    call exit
   238                                  
   239                                  L_error_fvar_undefined:
   240 000001AC 50                              push rax
   241 000001AD 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
   242 000001B5 48BE-                           mov rsi, fmt_undefined_free_var_1
   242 000001B7 [1E00000000000000] 
   243 000001BF B800000000                      mov rax, 0
   244                                          ENTER
    44 000001C4 C8000000            <1>  enter 0, 0
    45 000001C8 4883E4F0            <1>  and rsp, ~15
   245 000001CC E8(00000000)                    call fprintf
   246                                          LEAVE
    49 000001D1 C9                  <1>  leave
   247 000001D2 58                              pop rax
   248 000001D3 488B4001                        mov rax, qword [rax + 1] ; string
   249 000001D7 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
   250 000001DB BE01000000                      mov rsi, 1               ; sizeof(char)
   251 000001E0 488B5001                        mov rdx, qword [rax + 1] ; string-length
   252 000001E4 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
   253 000001EC B800000000                      mov rax, 0
   254                                          ENTER
    44 000001F1 C8000000            <1>  enter 0, 0
    45 000001F5 4883E4F0            <1>  and rsp, ~15
   255 000001F9 E8(00000000)                    call fwrite
   256                                          LEAVE
    49 000001FE C9                  <1>  leave
   257 000001FF 488B3C25[00000000]              mov rdi, [stderr]       ; destination
   258 00000207 48BE-                           mov rsi, fmt_undefined_free_var_2
   258 00000209 [3500000000000000] 
   259 00000211 B800000000                      mov rax, 0
   260                                          ENTER
    44 00000216 C8000000            <1>  enter 0, 0
    45 0000021A 4883E4F0            <1>  and rsp, ~15
   261 0000021E E8(00000000)                    call fprintf
   262                                          LEAVE
    49 00000223 C9                  <1>  leave
   263 00000224 48C7C0F6FFFFFF                  mov rax, -10
   264 0000022B E8(00000000)                    call exit
   265                                  
   266                                  L_error_non_closure:
   267 00000230 488B3C25[00000000]              mov rdi, qword [stderr]
   268 00000238 48BE-                           mov rsi, fmt_non_closure
   268 0000023A [EC00000000000000] 
   269 00000242 B800000000                      mov rax, 0
   270                                          ENTER
    44 00000247 C8000000            <1>  enter 0, 0
    45 0000024B 4883E4F0            <1>  and rsp, ~15
   271 0000024F E8(00000000)                    call fprintf
   272                                          LEAVE
    49 00000254 C9                  <1>  leave
   273 00000255 48C7C0FEFFFFFF                  mov rax, -2
   274 0000025C E8(00000000)                    call exit
   275                                  
   276                                  L_error_improper_list:
   277 00000261 488B3C25[00000000]      	mov rdi, qword [stderr]
   278 00000269 48BE-                   	mov rsi, fmt_error_improper_list
   278 0000026B [1401000000000000] 
   279 00000273 B800000000              	mov rax, 0
   280                                          ENTER
    44 00000278 C8000000            <1>  enter 0, 0
    45 0000027C 4883E4F0            <1>  and rsp, ~15
   281 00000280 E8(00000000)            	call fprintf
   282                                          LEAVE
    49 00000285 C9                  <1>  leave
   283 00000286 48C7C0F9FFFFFF          	mov rax, -7
   284 0000028D E8(00000000)            	call exit
   285                                  
   286                                  L_error_incorrect_arity_simple:
   287 00000292 488B3C25[00000000]              mov rdi, qword [stderr]
   288 0000029A 48BE-                           mov rsi, fmt_incorrect_arity_simple
   288 0000029C [5700000000000000] 
   289 000002A4 EB12                            jmp L_error_incorrect_arity_common
   290                                  L_error_incorrect_arity_opt:
   291 000002A6 488B3C25[00000000]              mov rdi, qword [stderr]
   292 000002AE 48BE-                           mov rsi, fmt_incorrect_arity_opt
   292 000002B0 [8200000000000000] 
   293                                  L_error_incorrect_arity_common:
   294 000002B8 5A                              pop rdx
   295 000002B9 59                              pop rcx
   296 000002BA B800000000                      mov rax, 0
   297                                          ENTER
    44 000002BF C8000000            <1>  enter 0, 0
    45 000002C3 4883E4F0            <1>  and rsp, ~15
   298 000002C7 E8(00000000)                    call fprintf
   299                                          LEAVE
    49 000002CC C9                  <1>  leave
   300 000002CD 48C7C0FAFFFFFF                  mov rax, -6
   301 000002D4 E8(00000000)                    call exit
   302                                  
   303                                  section .data
   304                                  fmt_undefined_free_var_1:
   305 0000001E 212121205468652066-             db `!!! The free variable \0`
   305 00000027 726565207661726961-
   305 00000030 626C652000         
   306                                  fmt_undefined_free_var_2:
   307 00000035 207761732075736564-             db ` was used before it was defined.\n\0`
   307 0000003E 206265666F72652069-
   307 00000047 742077617320646566-
   307 00000050 696E65642E0A00     
   308                                  fmt_incorrect_arity_simple:
   309 00000057 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   309 00000060 74656420256C642061-
   309 00000069 7267756D656E74732C-
   309 00000072 206275742067697665-
   309 0000007B 6E20256C640A00     
   310                                  fmt_incorrect_arity_opt:
   311 00000082 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   311 0000008B 746564206174206C65-
   311 00000094 61737420256C642061-
   311 0000009D 7267756D656E74732C-
   311 000000A6 206275742067697665-
   311 000000AF 6E20256C640A00     
   312                                  fmt_memory_usage:
   313 000000B6 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   313 000000BF 20256C642062797465-
   313 000000C8 73206F662064796E61-
   313 000000D1 6D6963616C6C792D61-
   313 000000DA 6C6C6F636174656420-
   313 000000E3 6D656D6F72790A0A00 
   314                                  fmt_non_closure:
   315 000000EC 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   315 000000F5 7074696E6720746F20-
   315 000000FE 6170706C792061206E-
   315 00000107 6F6E2D636C6F737572-
   315 00000110 65210A00           
   316                                  fmt_error_improper_list:
   317 00000114 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   317 0000011D 7267756D656E742069-
   317 00000126 73206E6F7420612070-
   317 0000012F 726F706572206C6973-
   317 00000138 74210A00           
   318                                  
   319                                  section .bss
   320                                  memory:
   321 00000000 <res 40000000h>         	resb gbytes(1)
   322                                  
   323                                  section .data
   324                                  top_of_memory:
   325 0000013C [0000000000000000]              dq memory
   326                                  
   327                                  section .text
   328                                  malloc:
   329 000002D9 488B0425[3C010000]              mov rax, qword [top_of_memory]
   330 000002E1 48013C25[3C010000]              add qword [top_of_memory], rdi
   331 000002E9 C3                              ret
   332                                  
   333                                  L_code_ptr_return:
   334 000002EA 48837C241002            	cmp qword [rsp + 8*2], 2
   335 000002F0 0F85461C0000            	jne L_error_arg_count_2
   336 000002F6 488B4C2418              	mov rcx, qword [rsp + 8*3]
   337                                  	assert_integer(rcx)
    53 000002FB 803911              <1>  cmp byte [%1], %2
    54 000002FE 0F85D71C0000        <1>  jne L_error_incorrect_type
   338 00000304 488B4901                	mov rcx, qword [rcx + 1]
   339 00000308 4883F900                	cmp rcx, 0
   340 0000030C 0F8C5E1B0000            	jl L_error_integer_range
   341 00000312 488B442420              	mov rax, qword [rsp + 8*4]
   342                                  .L0:
   343 00000317 4883F900                        cmp rcx, 0
   344 0000031B 7409                            je .L1
   345 0000031D 488B6D00                	mov rbp, qword [rbp]
   346 00000321 48FFC9                  	dec rcx
   347 00000324 7FF1                    	jg .L0
   348                                  .L1:
   349 00000326 4889EC                  	mov rsp, rbp
   350 00000329 5D                      	pop rbp
   351 0000032A 5B                              pop rbx
   352 0000032B 488B4C2408                      mov rcx, qword [rsp + 8*1]
   353 00000330 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
   354 00000335 FFE3                    	jmp rbx
   355                                  
   356                                  L_code_ptr_make_list:
   357 00000337 C8000000                	enter 0, 0
   358 0000033B 48837D1801                      cmp COUNT, 1
   359 00000340 740C                            je .L0
   360 00000342 48837D1802                      cmp COUNT, 2
   361 00000347 7411                            je .L1
   362 00000349 E9231C0000                      jmp L_error_arg_count_12
   363                                  .L0:
   364 0000034E 49B9-                           mov r9, sob_void
   364 00000350 [0000000000000000] 
   365 00000358 EB04                            jmp .L2
   366                                  .L1:
   367 0000035A 4C8B4D28                        mov r9, PARAM(1)
   368                                  .L2:
   369 0000035E 488B4D20                        mov rcx, PARAM(0)
   370                                          assert_integer(rcx)
    53 00000362 803911              <1>  cmp byte [%1], %2
    54 00000365 0F85701C0000        <1>  jne L_error_incorrect_type
   371 0000036B 488B4901                        mov rcx, qword [rcx + 1]
   372 0000036F 4883F900                        cmp rcx, 0
   373 00000373 0F8C281B0000                    jl L_error_arg_negative
   374 00000379 49B8-                           mov r8, sob_nil
   374 0000037B [0100000000000000] 
   375                                  .L3:
   376 00000383 4883F900                        cmp rcx, 0
   377 00000387 7E1D                            jle .L4
   378 00000389 BF11000000                      mov rdi, 1 + 8 + 8
   379 0000038E E846FFFFFF                      call malloc
   380 00000393 C60021                          mov byte [rax], T_pair
   381 00000396 4C894801                        mov qword [rax + 1], r9
   382 0000039A 4C894009                        mov qword [rax + 1 + 8], r8
   383 0000039E 4989C0                          mov r8, rax
   384 000003A1 48FFC9                          dec rcx
   385 000003A4 EBDD                            jmp .L3
   386                                  .L4:
   387 000003A6 4C89C0                          mov rax, r8
   388 000003A9 48837D1802                      cmp COUNT, 2
   389 000003AE 7404                            je .L5
   390 000003B0 C9                              leave
   391 000003B1 C21800                          ret AND_KILL_FRAME(1)
   392                                  .L5:
   393 000003B4 C9                      	leave
   394 000003B5 C22000                  	ret AND_KILL_FRAME(2)
   395                                  
   396                                  L_code_ptr_is_primitive:
   397 000003B8 C8000000                	enter 0, 0
   398 000003BC 48837D1801              	cmp COUNT, 1
   399 000003C1 0F85401B0000            	jne L_error_arg_count_1
   400 000003C7 488B4520                	mov rax, PARAM(0)
   401                                  	assert_closure(rax)
    53 000003CB 803804              <1>  cmp byte [%1], %2
    54 000003CE 0F85071C0000        <1>  jne L_error_incorrect_type
   402 000003D4 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
   403 000003D9 750C                    	jne .L_false
   404 000003DB 48B8-                   	mov rax, sob_boolean_true
   404 000003DD [0300000000000000] 
   405 000003E5 EB0A                    	jmp .L_end
   406                                  .L_false:
   407 000003E7 48B8-                   	mov rax, sob_boolean_false
   407 000003E9 [0200000000000000] 
   408                                  .L_end:
   409 000003F1 C9                      	leave
   410 000003F2 C21800                  	ret AND_KILL_FRAME(1)
   411                                  
   412                                  L_code_ptr_length:
   413 000003F5 C8000000                	enter 0, 0
   414 000003F9 48837D1801              	cmp COUNT, 1
   415 000003FE 0F85031B0000            	jne L_error_arg_count_1
   416 00000404 488B5D20                	mov rbx, PARAM(0)
   417 00000408 BF00000000              	mov rdi, 0
   418                                  .L:
   419 0000040D 803B01                  	cmp byte [rbx], T_nil
   420 00000410 7412                    	je .L_end
   421                                  	assert_pair(rbx)
    53 00000412 803B21              <1>  cmp byte [%1], %2
    54 00000415 0F85C01B0000        <1>  jne L_error_incorrect_type
   422 0000041B 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
   423 0000041F 48FFC7                  	inc rdi
   424 00000422 EBE9                    	jmp .L
   425                                  .L_end:
   426 00000424 E82D1A0000              	call make_integer
   427 00000429 C9                      	leave
   428 0000042A C21800                  	ret AND_KILL_FRAME(1)
   429                                  
   430                                  L_code_ptr_break:
   431 0000042D 48837C241000                    cmp qword [rsp + 8 * 2], 0
   432 00000433 0F85991A0000                    jne L_error_arg_count_0
   433 00000439 CC                              int3
   434 0000043A 48B8-                           mov rax, sob_void
   434 0000043C [0000000000000000] 
   435 00000444 C21000                          ret AND_KILL_FRAME(0)        
   436                                  
   437                                  L_code_ptr_frame:
   438 00000447 C8000000                        enter 0, 0
   439 0000044B 48837D1800                      cmp COUNT, 0
   440 00000450 0F857C1A0000                    jne L_error_arg_count_0
   441                                  
   442 00000456 48BF-                           mov rdi, fmt_frame
   442 00000458 [4401000000000000] 
   443 00000460 488B7500                        mov rsi, qword [rbp]    ; old rbp
   444 00000464 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
   445 00000468 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
   446 0000046C 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
   447 00000470 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
   448 00000474 6A00                            push 0
   449 00000476 4151                            push r9
   450 00000478 4150                            push r8                   ; we'll use it when printing the params
   451 0000047A B800000000                      mov rax, 0
   452                                          
   453                                          ENTER
    44 0000047F C8000000            <1>  enter 0, 0
    45 00000483 4883E4F0            <1>  and rsp, ~15
   454 00000487 E8(00000000)                    call printf
   455                                          LEAVE
    49 0000048C C9                  <1>  leave
   456                                  
   457                                  .L:
   458 0000048D 488B0C24                        mov rcx, qword [rsp]
   459 00000491 4883F900                        cmp rcx, 0
   460 00000495 7467                            je .L_out
   461 00000497 48BF-                           mov rdi, fmt_frame_param_prefix
   461 00000499 [7D01000000000000] 
   462 000004A1 488B742410                      mov rsi, qword [rsp + 8*2]
   463 000004A6 B800000000                      mov rax, 0
   464                                          
   465                                          ENTER
    44 000004AB C8000000            <1>  enter 0, 0
    45 000004AF 4883E4F0            <1>  and rsp, ~15
   466 000004B3 E8(00000000)                    call printf
   467                                          LEAVE
    49 000004B8 C9                  <1>  leave
   468                                  
   469 000004B9 488B0C24                        mov rcx, qword [rsp]
   470 000004BD 48FFC9                          dec rcx
   471 000004C0 48890C24                        mov qword [rsp], rcx    ; dec arg count
   472 000004C4 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
   473 000004C9 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
   474 000004CE 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
   475 000004D2 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
   476 000004D7 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
   477 000004DA E87B000000                      call print_sexpr
   478 000004DF 48BF-                           mov rdi, fmt_newline
   478 000004E1 [A901000000000000] 
   479 000004E9 B800000000                      mov rax, 0
   480                                          ENTER
    44 000004EE C8000000            <1>  enter 0, 0
    45 000004F2 4883E4F0            <1>  and rsp, ~15
   481 000004F6 E8(00000000)                    call printf
   482                                          LEAVE
    49 000004FB C9                  <1>  leave
   483 000004FC EB8F                            jmp .L
   484                                  .L_out:
   485 000004FE 48BF-                           mov rdi, fmt_frame_continue
   485 00000500 [8E01000000000000] 
   486 00000508 B800000000                      mov rax, 0
   487                                          ENTER
    44 0000050D C8000000            <1>  enter 0, 0
    45 00000511 4883E4F0            <1>  and rsp, ~15
   488 00000515 E8(00000000)                    call printf
   489 0000051A E8(00000000)                    call getchar
   490                                          LEAVE
    49 0000051F C9                  <1>  leave
   491                                          
   492 00000520 48B8-                           mov rax, sob_void
   492 00000522 [0000000000000000] 
   493 0000052A C9                              leave
   494 0000052B C21000                          ret AND_KILL_FRAME(0)
   495                                          
   496                                  print_sexpr_if_not_void:
   497 0000052E 4881FF[00000000]        	cmp rdi, sob_void
   498 00000535 7422                    	je .done
   499 00000537 E81E000000              	call print_sexpr
   500 0000053C 48BF-                   	mov rdi, fmt_newline
   500 0000053E [A901000000000000] 
   501 00000546 B800000000              	mov rax, 0
   502                                  	ENTER
    44 0000054B C8000000            <1>  enter 0, 0
    45 0000054F 4883E4F0            <1>  and rsp, ~15
   503 00000553 E8(00000000)            	call printf
   504                                  	LEAVE
    49 00000558 C9                  <1>  leave
   505                                  .done:
   506 00000559 C3                      	ret
   507                                  
   508                                  section .data
   509                                  fmt_frame:
   510 00000144 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
   510 0000014D 207265742061646472-
   510 00000156 203D2025703B206C65-
   510 0000015F 7820656E76203D2025-
   510 00000168 703B20706172616D20-
   510 00000171 636F756E74203D2025-
   510 0000017A 640A00             
   511                                  fmt_frame_param_prefix:
   512 0000017D 3D3D5B706172616D20-             db `==[param %d]==> \0`
   512 00000186 25645D3D3D3E2000   
   513                                  fmt_frame_continue:
   514 0000018E 486974203C456E7465-             db `Hit <Enter> to continue...\0`
   514 00000197 723E20746F20636F6E-
   514 000001A0 74696E75652E2E2E00 
   515                                  fmt_newline:
   516 000001A9 0A00                    	db `\n\0`
   517                                  fmt_void:
   518 000001AB 233C766F69643E00        	db `#<void>\0`
   519                                  fmt_nil:
   520 000001B3 282900                  	db `()\0`
   521                                  fmt_boolean_false:
   522 000001B6 236600                  	db `#f\0`
   523                                  fmt_boolean_true:
   524 000001B9 237400                  	db `#t\0`
   525                                  fmt_char_backslash:
   526 000001BC 235C5C00                	db `#\\\\\0`
   527                                  fmt_char_dquote:
   528 000001C0 235C2200                	db `#\\"\0`
   529                                  fmt_char_simple:
   530 000001C4 235C256300              	db `#\\%c\0`
   531                                  fmt_char_null:
   532 000001C9 235C6E756C00            	db `#\\nul\0`
   533                                  fmt_char_bell:
   534 000001CF 235C62656C6C00          	db `#\\bell\0`
   535                                  fmt_char_backspace:
   536 000001D6 235C6261636B737061-     	db `#\\backspace\0`
   536 000001DF 636500             
   537                                  fmt_char_tab:
   538 000001E2 235C74616200            	db `#\\tab\0`
   539                                  fmt_char_newline:
   540 000001E8 235C6E65776C696E65-     	db `#\\newline\0`
   540 000001F1 00                 
   541                                  fmt_char_formfeed:
   542 000001F2 235C7061676500          	db `#\\page\0`
   543                                  fmt_char_return:
   544 000001F9 235C72657475726E00      	db `#\\return\0`
   545                                  fmt_char_escape:
   546 00000202 235C65736300            	db `#\\esc\0`
   547                                  fmt_char_space:
   548 00000208 235C737061636500        	db `#\\space\0`
   549                                  fmt_char_hex:
   550 00000210 235C782530325800        	db `#\\x%02X\0`
   551                                  fmt_gensym:
   552 00000218 47256C6400                      db `G%ld\0`
   553                                  fmt_closure:
   554 0000021D 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   554 00000226 206174203078253038-
   554 0000022F 5820656E763D307825-
   554 00000238 30385820636F64653D-
   554 00000241 3078253038583E00   
   555                                  fmt_lparen:
   556 00000249 2800                    	db `(\0`
   557                                  fmt_dotted_pair:
   558 0000024B 202E2000                	db ` . \0`
   559                                  fmt_rparen:
   560 0000024F 2900                    	db `)\0`
   561                                  fmt_space:
   562 00000251 2000                    	db ` \0`
   563                                  fmt_empty_vector:
   564 00000253 23282900                	db `#()\0`
   565                                  fmt_vector:
   566 00000257 232800                  	db `#(\0`
   567                                  fmt_real:
   568 0000025A 256600                  	db `%f\0`
   569                                  fmt_fraction:
   570 0000025D 256C642F256C6400        	db `%ld/%ld\0`
   571                                  fmt_zero:
   572 00000265 3000                    	db `0\0`
   573                                  fmt_int:
   574 00000267 256C6400                	db `%ld\0`
   575                                  fmt_unknown_scheme_object_error:
   576 0000026B 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
   576 00000274 6F723A20556E6B6E6F-
   576 0000027D 776E20536368656D65-
   576 00000286 2D6F626A6563742028-
   576 0000028F 525454492030782530-
   576 00000298 32582920           
   577 0000029C 617420616464726573-     	db `at address 0x%08X\n\n\0`
   577 000002A5 73203078253038580A-
   577 000002AE 0A00               
   578                                  fmt_dquote:
   579 000002B0 2200                    	db `\"\0`
   580                                  fmt_string_char:
   581 000002B2 256300                          db `%c\0`
   582                                  fmt_string_char_7:
   583 000002B5 5C6100                          db `\\a\0`
   584                                  fmt_string_char_8:
   585 000002B8 5C6200                          db `\\b\0`
   586                                  fmt_string_char_9:
   587 000002BB 5C7400                          db `\\t\0`
   588                                  fmt_string_char_10:
   589 000002BE 5C6E00                          db `\\n\0`
   590                                  fmt_string_char_11:
   591 000002C1 5C7600                          db `\\v\0`
   592                                  fmt_string_char_12:
   593 000002C4 5C6600                          db `\\f\0`
   594                                  fmt_string_char_13:
   595 000002C7 5C7200                          db `\\r\0`
   596                                  fmt_string_char_34:
   597 000002CA 5C2200                          db `\\"\0`
   598                                  fmt_string_char_92:
   599 000002CD 5C5C00                          db `\\\\\0`
   600                                  fmt_string_char_hex:
   601 000002D0 5C7825583B00                    db `\\x%X;\0`
   602                                  
   603                                  section .text
   604                                  
   605                                  print_sexpr:
   606 0000055A C8000000                	enter 0, 0
   607 0000055E 8A07                    	mov al, byte [rdi]
   608 00000560 3C00                    	cmp al, T_void
   609 00000562 7465                    	je .Lvoid
   610 00000564 3C01                    	cmp al, T_nil
   611 00000566 7470                    	je .Lnil
   612 00000568 3C09                    	cmp al, T_boolean_false
   613 0000056A 747B                    	je .Lboolean_false
   614 0000056C 3C0A                    	cmp al, T_boolean_true
   615 0000056E 0F8482000000            	je .Lboolean_true
   616 00000574 3C02                    	cmp al, T_char
   617 00000576 0F8489000000            	je .Lchar
   618 0000057C 3C41                    	cmp al, T_interned_symbol
   619 0000057E 0F84BF010000            	je .Linterned_symbol
   620 00000584 3C42                            cmp al, T_uninterned_symbol
   621 00000586 0F84E3010000                    je .Luninterned_symbol
   622 0000058C 3C21                    	cmp al, T_pair
   623 0000058E 0F84EE010000            	je .Lpair
   624 00000594 3C22                    	cmp al, T_vector
   625 00000596 0F84B7020000            	je .Lvector
   626 0000059C 3C04                    	cmp al, T_closure
   627 0000059E 0F8485010000            	je .Lclosure
   628 000005A4 3C13                    	cmp al, T_real
   629 000005A6 0F8448030000            	je .Lreal
   630 000005AC 3C12                    	cmp al, T_fraction
   631 000005AE 0F846E030000            	je .Lfraction
   632 000005B4 3C11                    	cmp al, T_integer
   633 000005B6 0F84A7030000            	je .Linteger
   634 000005BC 3C03                    	cmp al, T_string
   635 000005BE 0F84B2030000            	je .Lstring
   636                                  
   637 000005C4 E9DC040000              	jmp .Lunknown_sexpr_type
   638                                  
   639                                  .Lvoid:
   640 000005C9 48BF-                   	mov rdi, fmt_void
   640 000005CB [AB01000000000000] 
   641 000005D3 E900050000              	jmp .Lemit
   642                                  
   643                                  .Lnil:
   644 000005D8 48BF-                   	mov rdi, fmt_nil
   644 000005DA [B301000000000000] 
   645 000005E2 E9F1040000              	jmp .Lemit
   646                                  
   647                                  .Lboolean_false:
   648 000005E7 48BF-                   	mov rdi, fmt_boolean_false
   648 000005E9 [B601000000000000] 
   649 000005F1 E9E2040000              	jmp .Lemit
   650                                  
   651                                  .Lboolean_true:
   652 000005F6 48BF-                   	mov rdi, fmt_boolean_true
   652 000005F8 [B901000000000000] 
   653 00000600 E9D3040000              	jmp .Lemit
   654                                  
   655                                  .Lchar:
   656 00000605 8A4701                  	mov al, byte [rdi + 1]
   657 00000608 3C20                    	cmp al, ' '
   658 0000060A 7E20                    	jle .Lchar_whitespace
   659 0000060C 3C5C                    	cmp al, 92 		; backslash
   660 0000060E 7474                    	je .Lchar_backslash
   661 00000610 3C22                    	cmp al, '"'
   662 00000612 747F                    	je .Lchar_dquote
   663 00000614 4825FF000000            	and rax, 255
   664 0000061A 48BF-                   	mov rdi, fmt_char_simple
   664 0000061C [C401000000000000] 
   665 00000624 4889C6                  	mov rsi, rax
   666 00000627 E9AC040000              	jmp .Lemit
   667                                  
   668                                  .Lchar_whitespace:
   669 0000062C 3C00                    	cmp al, 0
   670 0000062E 7472                    	je .Lchar_null
   671 00000630 3C07                    	cmp al, 7
   672 00000632 747D                    	je .Lchar_bell
   673 00000634 3C08                    	cmp al, 8
   674 00000636 0F8484000000            	je .Lchar_backspace
   675 0000063C 3C09                    	cmp al, 9
   676 0000063E 0F848B000000            	je .Lchar_tab
   677 00000644 3C0A                    	cmp al, 10
   678 00000646 0F8492000000            	je .Lchar_newline
   679 0000064C 3C0C                    	cmp al, 12
   680 0000064E 0F8499000000            	je .Lchar_formfeed
   681 00000654 3C0D                    	cmp al, 13
   682 00000656 0F84A0000000            	je .Lchar_return
   683 0000065C 3C1B                    	cmp al, 27
   684 0000065E 0F84A7000000            	je .Lchar_escape
   685 00000664 4825FF000000            	and rax, 255
   686 0000066A 3C20                    	cmp al, ' '
   687 0000066C 0F84A8000000            	je .Lchar_space
   688 00000672 48BF-                   	mov rdi, fmt_char_hex
   688 00000674 [1002000000000000] 
   689 0000067C 4889C6                  	mov rsi, rax
   690 0000067F E954040000              	jmp .Lemit	
   691                                  
   692                                  .Lchar_backslash:
   693 00000684 48BF-                   	mov rdi, fmt_char_backslash
   693 00000686 [BC01000000000000] 
   694 0000068E E945040000              	jmp .Lemit
   695                                  
   696                                  .Lchar_dquote:
   697 00000693 48BF-                   	mov rdi, fmt_char_dquote
   697 00000695 [C001000000000000] 
   698 0000069D E936040000              	jmp .Lemit
   699                                  
   700                                  .Lchar_null:
   701 000006A2 48BF-                   	mov rdi, fmt_char_null
   701 000006A4 [C901000000000000] 
   702 000006AC E927040000              	jmp .Lemit
   703                                  
   704                                  .Lchar_bell:
   705 000006B1 48BF-                   	mov rdi, fmt_char_bell
   705 000006B3 [CF01000000000000] 
   706 000006BB E918040000              	jmp .Lemit
   707                                  
   708                                  .Lchar_backspace:
   709 000006C0 48BF-                   	mov rdi, fmt_char_backspace
   709 000006C2 [D601000000000000] 
   710 000006CA E909040000              	jmp .Lemit
   711                                  
   712                                  .Lchar_tab:
   713 000006CF 48BF-                   	mov rdi, fmt_char_tab
   713 000006D1 [E201000000000000] 
   714 000006D9 E9FA030000              	jmp .Lemit
   715                                  
   716                                  .Lchar_newline:
   717 000006DE 48BF-                   	mov rdi, fmt_char_newline
   717 000006E0 [E801000000000000] 
   718 000006E8 E9EB030000              	jmp .Lemit
   719                                  
   720                                  .Lchar_formfeed:
   721 000006ED 48BF-                   	mov rdi, fmt_char_formfeed
   721 000006EF [F201000000000000] 
   722 000006F7 E9DC030000              	jmp .Lemit
   723                                  
   724                                  .Lchar_return:
   725 000006FC 48BF-                   	mov rdi, fmt_char_return
   725 000006FE [F901000000000000] 
   726 00000706 E9CD030000              	jmp .Lemit
   727                                  
   728                                  .Lchar_escape:
   729 0000070B 48BF-                   	mov rdi, fmt_char_escape
   729 0000070D [0202000000000000] 
   730 00000715 E9BE030000              	jmp .Lemit
   731                                  
   732                                  .Lchar_space:
   733 0000071A 48BF-                   	mov rdi, fmt_char_space
   733 0000071C [0802000000000000] 
   734 00000724 E9AF030000              	jmp .Lemit
   735                                  
   736                                  .Lclosure:
   737 00000729 4889FE                  	mov rsi, qword rdi
   738 0000072C 48BF-                   	mov rdi, fmt_closure
   738 0000072E [1D02000000000000] 
   739 00000736 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   740 0000073A 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   741 0000073E E995030000              	jmp .Lemit
   742                                  
   743                                  .Linterned_symbol:
   744 00000743 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   745 00000747 BE01000000              	mov rsi, 1		 ; size = 1 byte
   746 0000074C 488B5701                	mov rdx, qword [rdi + 1] ; length
   747 00000750 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   748 00000754 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   749                                  	ENTER
    44 0000075C C8000000            <1>  enter 0, 0
    45 00000760 4883E4F0            <1>  and rsp, ~15
   750 00000764 E8(00000000)            	call fwrite
   751                                  	LEAVE
    49 00000769 C9                  <1>  leave
   752 0000076A E97E030000              	jmp .Lend
   753                                  
   754                                  .Luninterned_symbol:
   755 0000076F 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
   756 00000773 48BF-                           mov rdi, fmt_gensym
   756 00000775 [1802000000000000] 
   757 0000077D E956030000                      jmp .Lemit
   758                                  	
   759                                  .Lpair:
   760 00000782 57                      	push rdi
   761 00000783 48BF-                   	mov rdi, fmt_lparen
   761 00000785 [4902000000000000] 
   762 0000078D B800000000              	mov rax, 0
   763                                          ENTER
    44 00000792 C8000000            <1>  enter 0, 0
    45 00000796 4883E4F0            <1>  and rsp, ~15
   764 0000079A E8(00000000)            	call printf
   765                                          LEAVE
    49 0000079F C9                  <1>  leave
   766 000007A0 488B3C24                	mov rdi, qword [rsp] 	; pair
   767 000007A4 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   768 000007A8 E8ADFDFFFF              	call print_sexpr
   769 000007AD 5F                      	pop rdi 		; pair
   770 000007AE 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   771                                  .Lcdr:
   772 000007B2 8A07                    	mov al, byte [rdi]
   773 000007B4 3C01                    	cmp al, T_nil
   774 000007B6 7447                    	je .Lcdr_nil
   775 000007B8 3C21                    	cmp al, T_pair
   776 000007BA 7462                    	je .Lcdr_pair
   777 000007BC 57                      	push rdi
   778 000007BD 48BF-                   	mov rdi, fmt_dotted_pair
   778 000007BF [4B02000000000000] 
   779 000007C7 B800000000              	mov rax, 0
   780                                          ENTER
    44 000007CC C8000000            <1>  enter 0, 0
    45 000007D0 4883E4F0            <1>  and rsp, ~15
   781 000007D4 E8(00000000)            	call printf
   782                                          LEAVE
    49 000007D9 C9                  <1>  leave
   783 000007DA 5F                      	pop rdi
   784 000007DB E87AFDFFFF              	call print_sexpr
   785 000007E0 48BF-                   	mov rdi, fmt_rparen
   785 000007E2 [4F02000000000000] 
   786 000007EA B800000000              	mov rax, 0
   787                                          ENTER
    44 000007EF C8000000            <1>  enter 0, 0
    45 000007F3 4883E4F0            <1>  and rsp, ~15
   788 000007F7 E8(00000000)            	call printf
   789                                          LEAVE
    49 000007FC C9                  <1>  leave
   790 000007FD C9                      	leave
   791 000007FE C3                      	ret
   792                                  
   793                                  .Lcdr_nil:
   794 000007FF 48BF-                   	mov rdi, fmt_rparen
   794 00000801 [4F02000000000000] 
   795 00000809 B800000000              	mov rax, 0
   796                                          ENTER
    44 0000080E C8000000            <1>  enter 0, 0
    45 00000812 4883E4F0            <1>  and rsp, ~15
   797 00000816 E8(00000000)            	call printf
   798                                          LEAVE
    49 0000081B C9                  <1>  leave
   799 0000081C C9                      	leave
   800 0000081D C3                      	ret
   801                                  
   802                                  .Lcdr_pair:
   803 0000081E 57                      	push rdi
   804 0000081F 48BF-                   	mov rdi, fmt_space
   804 00000821 [5102000000000000] 
   805 00000829 B800000000              	mov rax, 0
   806                                          ENTER
    44 0000082E C8000000            <1>  enter 0, 0
    45 00000832 4883E4F0            <1>  and rsp, ~15
   807 00000836 E8(00000000)            	call printf
   808                                          LEAVE
    49 0000083B C9                  <1>  leave
   809 0000083C 488B3C24                	mov rdi, qword [rsp]
   810 00000840 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   811 00000844 E811FDFFFF              	call print_sexpr
   812 00000849 5F                      	pop rdi
   813 0000084A 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   814 0000084E E95FFFFFFF              	jmp .Lcdr
   815                                  
   816                                  .Lvector:
   817 00000853 488B4701                	mov rax, qword [rdi + 1] ; length
   818 00000857 4883F800                	cmp rax, 0
   819 0000085B 0F8484000000            	je .Lvector_empty
   820 00000861 57                      	push rdi
   821 00000862 48BF-                   	mov rdi, fmt_vector
   821 00000864 [5702000000000000] 
   822 0000086C B800000000              	mov rax, 0
   823                                          ENTER
    44 00000871 C8000000            <1>  enter 0, 0
    45 00000875 4883E4F0            <1>  and rsp, ~15
   824 00000879 E8(00000000)            	call printf
   825                                          LEAVE
    49 0000087E C9                  <1>  leave
   826 0000087F 488B3C24                	mov rdi, qword [rsp]
   827 00000883 FF7701                  	push qword [rdi + 1]
   828 00000886 6A01                    	push 1
   829 00000888 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   830 0000088C E8C9FCFFFF              	call print_sexpr
   831                                  .Lvector_loop:
   832                                  	; [rsp] index
   833                                  	; [rsp + 8*1] limit
   834                                  	; [rsp + 8*2] vector
   835 00000891 488B0424                	mov rax, qword [rsp]
   836 00000895 483B442408              	cmp rax, qword [rsp + 8*1]
   837 0000089A 7436                    	je .Lvector_end
   838 0000089C 48BF-                   	mov rdi, fmt_space
   838 0000089E [5102000000000000] 
   839 000008A6 B800000000              	mov rax, 0
   840                                          ENTER
    44 000008AB C8000000            <1>  enter 0, 0
    45 000008AF 4883E4F0            <1>  and rsp, ~15
   841 000008B3 E8(00000000)            	call printf
   842                                          LEAVE
    49 000008B8 C9                  <1>  leave
   843 000008B9 488B0424                	mov rax, qword [rsp]
   844 000008BD 488B5C2410              	mov rbx, qword [rsp + 8*2]
   845 000008C2 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   846 000008C7 E88EFCFFFF              	call print_sexpr
   847 000008CC 48FF0424                	inc qword [rsp]
   848 000008D0 EBBF                    	jmp .Lvector_loop
   849                                  
   850                                  .Lvector_end:
   851 000008D2 4883C418                	add rsp, 8*3
   852 000008D6 48BF-                   	mov rdi, fmt_rparen
   852 000008D8 [4F02000000000000] 
   853 000008E0 E9F3010000              	jmp .Lemit	
   854                                  
   855                                  .Lvector_empty:
   856 000008E5 48BF-                   	mov rdi, fmt_empty_vector
   856 000008E7 [5302000000000000] 
   857 000008EF E9E4010000              	jmp .Lemit
   858                                  
   859                                  .Lreal:
   860 000008F4 FF7701                  	push qword [rdi + 1]
   861 000008F7 F20F100424              	movsd xmm0, qword [rsp]
   862 000008FC 4883C408                	add rsp, 8*1
   863 00000900 48BF-                   	mov rdi, fmt_real
   863 00000902 [5A02000000000000] 
   864 0000090A B801000000              	mov rax, 1
   865                                  	ENTER
    44 0000090F C8000000            <1>  enter 0, 0
    45 00000913 4883E4F0            <1>  and rsp, ~15
   866 00000917 E8(00000000)            	call printf
   867                                  	LEAVE
    49 0000091C C9                  <1>  leave
   868 0000091D E9CB010000              	jmp .Lend
   869                                  
   870                                  .Lfraction:
   871 00000922 488B7701                	mov rsi, qword [rdi + 1]
   872 00000926 488B5709                	mov rdx, qword [rdi + 1 + 8]
   873 0000092A 4883FE00                	cmp rsi, 0
   874 0000092E 7415                    	je .Lrat_zero
   875 00000930 4883FA01                	cmp rdx, 1
   876 00000934 741E                    	je .Lrat_int
   877 00000936 48BF-                   	mov rdi, fmt_fraction
   877 00000938 [5D02000000000000] 
   878 00000940 E993010000              	jmp .Lemit
   879                                  
   880                                  .Lrat_zero:
   881 00000945 48BF-                   	mov rdi, fmt_zero
   881 00000947 [6502000000000000] 
   882 0000094F E984010000              	jmp .Lemit
   883                                  
   884                                  .Lrat_int:
   885 00000954 48BF-                   	mov rdi, fmt_int
   885 00000956 [6702000000000000] 
   886 0000095E E975010000              	jmp .Lemit
   887                                  
   888                                  .Linteger:
   889 00000963 488B7701                	mov rsi, qword [rdi + 1]
   890 00000967 48BF-                   	mov rdi, fmt_int
   890 00000969 [6702000000000000] 
   891 00000971 E962010000              	jmp .Lemit
   892                                  
   893                                  .Lstring:
   894 00000976 488D4709                	lea rax, [rdi + 1 + 8]
   895 0000097A 50                      	push rax
   896 0000097B FF7701                  	push qword [rdi + 1]
   897 0000097E 48BF-                   	mov rdi, fmt_dquote
   897 00000980 [B002000000000000] 
   898 00000988 B800000000              	mov rax, 0
   899                                  	ENTER
    44 0000098D C8000000            <1>  enter 0, 0
    45 00000991 4883E4F0            <1>  and rsp, ~15
   900 00000995 E8(00000000)            	call printf
   901                                  	LEAVE
    49 0000099A C9                  <1>  leave
   902                                  .Lstring_loop:
   903                                  	; qword [rsp]: limit
   904                                  	; qword [rsp + 8*1]: char *
   905 0000099B 48833C2400              	cmp qword [rsp], 0
   906 000009A0 0F84EF000000            	je .Lstring_end
   907 000009A6 488B442408              	mov rax, qword [rsp + 8*1]
   908 000009AB 8A00                    	mov al, byte [rax]
   909 000009AD 4825FF000000            	and rax, 255
   910 000009B3 3C07                    	cmp al, 7
   911 000009B5 745D                            je .Lstring_char_7
   912 000009B7 3C08                            cmp al, 8
   913 000009B9 7465                            je .Lstring_char_8
   914 000009BB 3C09                            cmp al, 9
   915 000009BD 746D                            je .Lstring_char_9
   916 000009BF 3C0A                            cmp al, 10
   917 000009C1 7475                            je .Lstring_char_10
   918 000009C3 3C0B                            cmp al, 11
   919 000009C5 747D                            je .Lstring_char_11
   920 000009C7 3C0C                            cmp al, 12
   921 000009C9 0F8481000000                    je .Lstring_char_12
   922 000009CF 3C0D                            cmp al, 13
   923 000009D1 0F8485000000                    je .Lstring_char_13
   924 000009D7 3C22                            cmp al, 34
   925 000009D9 0F8489000000                    je .Lstring_char_34
   926 000009DF 3C5C                            cmp al, 92              ;         je .Lstring_char_92
   928 000009E1 3C20                            cmp al, ' '
   929 000009E3 0F8C9A000000                    jl .Lstring_char_hex
   930 000009E9 48BF-                           mov rdi, fmt_string_char
   930 000009EB [B202000000000000] 
   931 000009F3 4889C6                          mov rsi, rax
   932                                  .Lstring_char_emit:
   933 000009F6 B800000000                      mov rax, 0
   934                                          ENTER
    44 000009FB C8000000            <1>  enter 0, 0
    45 000009FF 4883E4F0            <1>  and rsp, ~15
   935 00000A03 E8(00000000)                    call printf
   936                                          LEAVE
    49 00000A08 C9                  <1>  leave
   937 00000A09 48FF0C24                        dec qword [rsp]
   938 00000A0D 48FF442408                      inc qword [rsp + 8*1]
   939 00000A12 EB87                            jmp .Lstring_loop
   940                                  
   941                                  .Lstring_char_7:
   942 00000A14 48BF-                           mov rdi, fmt_string_char_7
   942 00000A16 [B502000000000000] 
   943 00000A1E EBD6                            jmp .Lstring_char_emit
   944                                  
   945                                  .Lstring_char_8:
   946 00000A20 48BF-                           mov rdi, fmt_string_char_8
   946 00000A22 [B802000000000000] 
   947 00000A2A EBCA                            jmp .Lstring_char_emit
   948                                          
   949                                  .Lstring_char_9:
   950 00000A2C 48BF-                           mov rdi, fmt_string_char_9
   950 00000A2E [BB02000000000000] 
   951 00000A36 EBBE                            jmp .Lstring_char_emit
   952                                  
   953                                  .Lstring_char_10:
   954 00000A38 48BF-                           mov rdi, fmt_string_char_10
   954 00000A3A [BE02000000000000] 
   955 00000A42 EBB2                            jmp .Lstring_char_emit
   956                                  
   957                                  .Lstring_char_11:
   958 00000A44 48BF-                           mov rdi, fmt_string_char_11
   958 00000A46 [C102000000000000] 
   959 00000A4E EBA6                            jmp .Lstring_char_emit
   960                                  
   961                                  .Lstring_char_12:
   962 00000A50 48BF-                           mov rdi, fmt_string_char_12
   962 00000A52 [C402000000000000] 
   963 00000A5A EB9A                            jmp .Lstring_char_emit
   964                                  
   965                                  .Lstring_char_13:
   966 00000A5C 48BF-                           mov rdi, fmt_string_char_13
   966 00000A5E [C702000000000000] 
   967 00000A66 EB8E                            jmp .Lstring_char_emit
   968                                  
   969                                  .Lstring_char_34:
   970 00000A68 48BF-                           mov rdi, fmt_string_char_34
   970 00000A6A [CA02000000000000] 
   971 00000A72 EB82                            jmp .Lstring_char_emit
   972                                  
   973                                  .Lstring_char_92:
   974 00000A74 48BF-                           mov rdi, fmt_string_char_92
   974 00000A76 [CD02000000000000] 
   975 00000A7E E973FFFFFF                      jmp .Lstring_char_emit
   976                                  
   977                                  .Lstring_char_hex:
   978 00000A83 48BF-                           mov rdi, fmt_string_char_hex
   978 00000A85 [D002000000000000] 
   979 00000A8D 4889C6                          mov rsi, rax
   980 00000A90 E961FFFFFF                      jmp .Lstring_char_emit        
   981                                  
   982                                  .Lstring_end:
   983 00000A95 4883C410                	add rsp, 8 * 2
   984 00000A99 48BF-                   	mov rdi, fmt_dquote
   984 00000A9B [B002000000000000] 
   985 00000AA3 EB33                    	jmp .Lemit
   986                                  
   987                                  .Lunknown_sexpr_type:
   988 00000AA5 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
   988 00000AA7 [6B02000000000000] 
   989 00000AAF 4825FF000000            	and rax, 255
   990 00000AB5 4889C2                  	mov rdx, rax
   991 00000AB8 4889F9                  	mov rcx, rdi
   992 00000ABB 488B3C25[00000000]      	mov rdi, qword [stderr]
   993 00000AC3 B800000000              	mov rax, 0
   994                                          ENTER
    44 00000AC8 C8000000            <1>  enter 0, 0
    45 00000ACC 4883E4F0            <1>  and rsp, ~15
   995 00000AD0 E8(00000000)            	call fprintf
   996                                          LEAVE
    49 00000AD5 C9                  <1>  leave
   997 00000AD6 C9                              leave
   998 00000AD7 C3                              ret
   999                                  
  1000                                  .Lemit:
  1001 00000AD8 B800000000              	mov rax, 0
  1002                                          ENTER
    44 00000ADD C8000000            <1>  enter 0, 0
    45 00000AE1 4883E4F0            <1>  and rsp, ~15
  1003 00000AE5 E8(00000000)            	call printf
  1004                                          LEAVE
    49 00000AEA C9                  <1>  leave
  1005 00000AEB EB00                    	jmp .Lend
  1006                                  
  1007                                  .Lend:
  1008                                  	LEAVE
    49 00000AED C9                  <1>  leave
  1009 00000AEE C3                      	ret
  1010                                  
  1011                                  ;;; rdi: address of free variable
  1012                                  ;;; rsi: address of code-pointer
  1013                                  bind_primitive:
  1014 00000AEF C8000000                        enter 0, 0
  1015 00000AF3 57                              push rdi
  1016 00000AF4 BF11000000                      mov rdi, (1 + 8 + 8)
  1017 00000AF9 E8DBF7FFFF                      call malloc
  1018 00000AFE 5F                              pop rdi
  1019 00000AFF C60004                          mov byte [rax], T_closure
  1020 00000B02 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1021 00000B0A 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1022 00000B0E 488907                          mov qword [rdi], rax
  1023 00000B11 48B8-                           mov rax, sob_void
  1023 00000B13 [0000000000000000] 
  1024 00000B1B C9                              leave
  1025 00000B1C C3                              ret
  1026                                  
  1027                                  L_code_ptr_ash:
  1028 00000B1D C8000000                        enter 0, 0
  1029 00000B21 48837D1802                      cmp COUNT, 2
  1030 00000B26 0F8510140000                    jne L_error_arg_count_2
  1031 00000B2C 488B7D20                        mov rdi, PARAM(0)
  1032                                          assert_integer(rdi)
    53 00000B30 803F11              <1>  cmp byte [%1], %2
    54 00000B33 0F85A2140000        <1>  jne L_error_incorrect_type
  1033 00000B39 488B4D28                        mov rcx, PARAM(1)
  1034                                          assert_integer(rcx)
    53 00000B3D 803911              <1>  cmp byte [%1], %2
    54 00000B40 0F8595140000        <1>  jne L_error_incorrect_type
  1035 00000B46 488B7F01                        mov rdi, qword [rdi + 1]
  1036 00000B4A 488B4901                        mov rcx, qword [rcx + 1]
  1037 00000B4E 4883F900                        cmp rcx, 0
  1038 00000B52 7C0F                            jl .L_negative
  1039                                  .L_loop_positive:
  1040 00000B54 4883F900                        cmp rcx, 0
  1041 00000B58 741B                            je .L_exit
  1042 00000B5A 48D3E7                          sal rdi, cl
  1043 00000B5D 48C1E908                        shr rcx, 8
  1044 00000B61 EBF1                            jmp .L_loop_positive
  1045                                  .L_negative:
  1046 00000B63 48F7D9                          neg rcx
  1047                                  .L_loop_negative:
  1048 00000B66 4883F900                        cmp rcx, 0
  1049 00000B6A 7409                            je .L_exit
  1050 00000B6C 48D3FF                          sar rdi, cl
  1051 00000B6F 48C1E908                        shr rcx, 8
  1052 00000B73 EBF1                            jmp .L_loop_negative
  1053                                  .L_exit:
  1054 00000B75 E8DC120000                      call make_integer
  1055 00000B7A C9                              leave
  1056 00000B7B C22000                          ret AND_KILL_FRAME(2)
  1057                                  
  1058                                  L_code_ptr_logand:
  1059 00000B7E C8000000                        enter 0, 0
  1060 00000B82 48837D1802                      cmp COUNT, 2
  1061 00000B87 0F85AF130000                    jne L_error_arg_count_2
  1062 00000B8D 4C8B4520                        mov r8, PARAM(0)
  1063                                          assert_integer(r8)
    53 00000B91 41803811            <1>  cmp byte [%1], %2
    54 00000B95 0F8540140000        <1>  jne L_error_incorrect_type
  1064 00000B9B 4C8B4D28                        mov r9, PARAM(1)
  1065                                          assert_integer(r9)
    53 00000B9F 41803911            <1>  cmp byte [%1], %2
    54 00000BA3 0F8532140000        <1>  jne L_error_incorrect_type
  1066 00000BA9 498B7801                        mov rdi, qword [r8 + 1]
  1067 00000BAD 49237901                        and rdi, qword [r9 + 1]
  1068 00000BB1 E8A0120000                      call make_integer
  1069 00000BB6 C9                              leave
  1070 00000BB7 C22000                          ret AND_KILL_FRAME(2)
  1071                                  
  1072                                  L_code_ptr_logor:
  1073 00000BBA C8000000                        enter 0, 0
  1074 00000BBE 48837D1802                      cmp COUNT, 2
  1075 00000BC3 0F8573130000                    jne L_error_arg_count_2
  1076 00000BC9 4C8B4520                        mov r8, PARAM(0)
  1077                                          assert_integer(r8)
    53 00000BCD 41803811            <1>  cmp byte [%1], %2
    54 00000BD1 0F8504140000        <1>  jne L_error_incorrect_type
  1078 00000BD7 4C8B4D28                        mov r9, PARAM(1)
  1079                                          assert_integer(r9)
    53 00000BDB 41803911            <1>  cmp byte [%1], %2
    54 00000BDF 0F85F6130000        <1>  jne L_error_incorrect_type
  1080 00000BE5 498B7801                        mov rdi, qword [r8 + 1]
  1081 00000BE9 490B7901                        or rdi, qword [r9 + 1]
  1082 00000BED E864120000                      call make_integer
  1083 00000BF2 C9                              leave
  1084 00000BF3 C22000                          ret AND_KILL_FRAME(2)
  1085                                  
  1086                                  L_code_ptr_logxor:
  1087 00000BF6 C8000000                        enter 0, 0
  1088 00000BFA 48837D1802                      cmp COUNT, 2
  1089 00000BFF 0F8537130000                    jne L_error_arg_count_2
  1090 00000C05 4C8B4520                        mov r8, PARAM(0)
  1091                                          assert_integer(r8)
    53 00000C09 41803811            <1>  cmp byte [%1], %2
    54 00000C0D 0F85C8130000        <1>  jne L_error_incorrect_type
  1092 00000C13 4C8B4D28                        mov r9, PARAM(1)
  1093                                          assert_integer(r9)
    53 00000C17 41803911            <1>  cmp byte [%1], %2
    54 00000C1B 0F85BA130000        <1>  jne L_error_incorrect_type
  1094 00000C21 498B7801                        mov rdi, qword [r8 + 1]
  1095 00000C25 49337901                        xor rdi, qword [r9 + 1]
  1096 00000C29 E828120000                      call make_integer
  1097                                          LEAVE
    49 00000C2E C9                  <1>  leave
  1098 00000C2F C22000                          ret AND_KILL_FRAME(2)
  1099                                  
  1100                                  L_code_ptr_lognot:
  1101 00000C32 C8000000                        enter 0, 0
  1102 00000C36 48837D1801                      cmp COUNT, 1
  1103 00000C3B 0F85C6120000                    jne L_error_arg_count_1
  1104 00000C41 4C8B4520                        mov r8, PARAM(0)
  1105                                          assert_integer(r8)
    53 00000C45 41803811            <1>  cmp byte [%1], %2
    54 00000C49 0F858C130000        <1>  jne L_error_incorrect_type
  1106 00000C4F 498B7801                        mov rdi, qword [r8 + 1]
  1107 00000C53 48F7D7                          not rdi
  1108 00000C56 E8FB110000                      call make_integer
  1109 00000C5B C9                              leave
  1110 00000C5C C21800                          ret AND_KILL_FRAME(1)
  1111                                  
  1112                                  L_code_ptr_bin_apply:
  1113                                  ;;; fill in for final project!
  1114                                  
  1115                                  L_code_ptr_is_null:
  1116 00000C5F C8000000                        enter 0, 0
  1117 00000C63 48837D1801                      cmp COUNT, 1
  1118 00000C68 0F8599120000                    jne L_error_arg_count_1
  1119 00000C6E 488B4520                        mov rax, PARAM(0)
  1120 00000C72 803801                          cmp byte [rax], T_nil
  1121 00000C75 750C                            jne .L_false
  1122 00000C77 48B8-                           mov rax, sob_boolean_true
  1122 00000C79 [0300000000000000] 
  1123 00000C81 EB0A                            jmp .L_end
  1124                                  .L_false:
  1125 00000C83 48B8-                           mov rax, sob_boolean_false
  1125 00000C85 [0200000000000000] 
  1126                                  .L_end:
  1127 00000C8D C9                              leave
  1128 00000C8E C21800                          ret AND_KILL_FRAME(1)
  1129                                  
  1130                                  L_code_ptr_is_pair:
  1131 00000C91 C8000000                        enter 0, 0
  1132 00000C95 48837D1801                      cmp COUNT, 1
  1133 00000C9A 0F8567120000                    jne L_error_arg_count_1
  1134 00000CA0 488B4520                        mov rax, PARAM(0)
  1135 00000CA4 803821                          cmp byte [rax], T_pair
  1136 00000CA7 750C                            jne .L_false
  1137 00000CA9 48B8-                           mov rax, sob_boolean_true
  1137 00000CAB [0300000000000000] 
  1138 00000CB3 EB0A                            jmp .L_end
  1139                                  .L_false:
  1140 00000CB5 48B8-                           mov rax, sob_boolean_false
  1140 00000CB7 [0200000000000000] 
  1141                                  .L_end:
  1142 00000CBF C9                              leave
  1143 00000CC0 C21800                          ret AND_KILL_FRAME(1)
  1144                                          
  1145                                  L_code_ptr_is_void:
  1146 00000CC3 C8000000                        enter 0, 0
  1147 00000CC7 48837D1801                      cmp COUNT, 1
  1148 00000CCC 0F8535120000                    jne L_error_arg_count_1
  1149 00000CD2 488B4520                        mov rax, PARAM(0)
  1150 00000CD6 803800                          cmp byte [rax], T_void
  1151 00000CD9 750C                            jne .L_false
  1152 00000CDB 48B8-                           mov rax, sob_boolean_true
  1152 00000CDD [0300000000000000] 
  1153 00000CE5 EB0A                            jmp .L_end
  1154                                  .L_false:
  1155 00000CE7 48B8-                           mov rax, sob_boolean_false
  1155 00000CE9 [0200000000000000] 
  1156                                  .L_end:
  1157 00000CF1 C9                              leave
  1158 00000CF2 C21800                          ret AND_KILL_FRAME(1)
  1159                                  
  1160                                  L_code_ptr_is_char:
  1161 00000CF5 C8000000                        enter 0, 0
  1162 00000CF9 48837D1801                      cmp COUNT, 1
  1163 00000CFE 0F8503120000                    jne L_error_arg_count_1
  1164 00000D04 488B4520                        mov rax, PARAM(0)
  1165 00000D08 803802                          cmp byte [rax], T_char
  1166 00000D0B 750C                            jne .L_false
  1167 00000D0D 48B8-                           mov rax, sob_boolean_true
  1167 00000D0F [0300000000000000] 
  1168 00000D17 EB0A                            jmp .L_end
  1169                                  .L_false:
  1170 00000D19 48B8-                           mov rax, sob_boolean_false
  1170 00000D1B [0200000000000000] 
  1171                                  .L_end:
  1172 00000D23 C9                              leave
  1173 00000D24 C21800                          ret AND_KILL_FRAME(1)
  1174                                  
  1175                                  L_code_ptr_is_string:
  1176 00000D27 C8000000                        enter 0, 0
  1177 00000D2B 48837D1801                      cmp COUNT, 1
  1178 00000D30 0F85D1110000                    jne L_error_arg_count_1
  1179 00000D36 488B4520                        mov rax, PARAM(0)
  1180 00000D3A 803803                          cmp byte [rax], T_string
  1181 00000D3D 750C                            jne .L_false
  1182 00000D3F 48B8-                           mov rax, sob_boolean_true
  1182 00000D41 [0300000000000000] 
  1183 00000D49 EB0A                            jmp .L_end
  1184                                  .L_false:
  1185 00000D4B 48B8-                           mov rax, sob_boolean_false
  1185 00000D4D [0200000000000000] 
  1186                                  .L_end:
  1187 00000D55 C9                              leave
  1188 00000D56 C21800                          ret AND_KILL_FRAME(1)
  1189                                  
  1190                                  L_code_ptr_is_symbol:
  1191 00000D59 C8000000                        enter 0, 0
  1192 00000D5D 48837D1801                      cmp COUNT, 1
  1193 00000D62 0F859F110000                    jne L_error_arg_count_1
  1194 00000D68 4C8B4520                        mov r8, PARAM(0)
  1195 00000D6C 41802040                        and byte [r8], T_symbol
  1196 00000D70 740C                            jz .L_false
  1197 00000D72 48B8-                           mov rax, sob_boolean_true
  1197 00000D74 [0300000000000000] 
  1198 00000D7C EB0A                            jmp .L_exit
  1199                                  .L_false:
  1200 00000D7E 48B8-                           mov rax, sob_boolean_false
  1200 00000D80 [0200000000000000] 
  1201                                  .L_exit:
  1202 00000D88 C9                              leave
  1203 00000D89 C21800                          ret AND_KILL_FRAME(1)
  1204                                  
  1205                                  L_code_ptr_is_uninterned_symbol:
  1206 00000D8C C8000000                        enter 0, 0
  1207 00000D90 48837D1801                      cmp COUNT, 1
  1208 00000D95 0F856C110000                    jne L_error_arg_count_1
  1209 00000D9B 4C8B4520                        mov r8, PARAM(0)
  1210 00000D9F 41803842                        cmp byte [r8], T_uninterned_symbol
  1211 00000DA3 750C                            jne .L_false
  1212 00000DA5 48B8-                           mov rax, sob_boolean_true
  1212 00000DA7 [0300000000000000] 
  1213 00000DAF EB0A                            jmp .L_exit
  1214                                  .L_false:
  1215 00000DB1 48B8-                           mov rax, sob_boolean_false
  1215 00000DB3 [0200000000000000] 
  1216                                  .L_exit:
  1217 00000DBB C9                              leave
  1218 00000DBC C21800                          ret AND_KILL_FRAME(1)
  1219                                  
  1220                                  L_code_ptr_is_interned_symbol:
  1221 00000DBF C8000000                        enter 0, 0
  1222 00000DC3 48837D1801                      cmp COUNT, 1
  1223 00000DC8 0F8539110000                    jne L_error_arg_count_1
  1224 00000DCE 488B4520                        mov rax, PARAM(0)
  1225 00000DD2 803841                          cmp byte [rax], T_interned_symbol
  1226 00000DD5 750C                            jne .L_false
  1227 00000DD7 48B8-                           mov rax, sob_boolean_true
  1227 00000DD9 [0300000000000000] 
  1228 00000DE1 EB0A                            jmp .L_end
  1229                                  .L_false:
  1230 00000DE3 48B8-                           mov rax, sob_boolean_false
  1230 00000DE5 [0200000000000000] 
  1231                                  .L_end:
  1232 00000DED C9                              leave
  1233 00000DEE C21800                          ret AND_KILL_FRAME(1)
  1234                                  
  1235                                  L_code_ptr_gensym:
  1236 00000DF1 C8000000                        enter 0, 0
  1237 00000DF5 48837D1800                      cmp COUNT, 0
  1238 00000DFA 0F85D2100000                    jne L_error_arg_count_0
  1239 00000E00 48FF0425[D6020000]              inc qword [gensym_count]
  1240 00000E08 BF09000000                      mov rdi, (1 + 8)
  1241 00000E0D E8C7F4FFFF                      call malloc
  1242 00000E12 C60042                          mov byte [rax], T_uninterned_symbol
  1243 00000E15 488B0C25[D6020000]              mov rcx, qword [gensym_count]
  1244 00000E1D 48894801                        mov qword [rax + 1], rcx
  1245 00000E21 C9                              leave
  1246 00000E22 C21000                          ret AND_KILL_FRAME(0)
  1247                                  
  1248                                  L_code_ptr_is_vector:
  1249 00000E25 C8000000                        enter 0, 0
  1250 00000E29 48837D1801                      cmp COUNT, 1
  1251 00000E2E 0F85D3100000                    jne L_error_arg_count_1
  1252 00000E34 488B4520                        mov rax, PARAM(0)
  1253 00000E38 803822                          cmp byte [rax], T_vector
  1254 00000E3B 750C                            jne .L_false
  1255 00000E3D 48B8-                           mov rax, sob_boolean_true
  1255 00000E3F [0300000000000000] 
  1256 00000E47 EB0A                            jmp .L_end
  1257                                  .L_false:
  1258 00000E49 48B8-                           mov rax, sob_boolean_false
  1258 00000E4B [0200000000000000] 
  1259                                  .L_end:
  1260 00000E53 C9                              leave
  1261 00000E54 C21800                          ret AND_KILL_FRAME(1)
  1262                                  
  1263                                  L_code_ptr_is_closure:
  1264 00000E57 C8000000                        enter 0, 0
  1265 00000E5B 48837D1801                      cmp COUNT, 1
  1266 00000E60 0F85A1100000                    jne L_error_arg_count_1
  1267 00000E66 488B4520                        mov rax, PARAM(0)
  1268 00000E6A 803804                          cmp byte [rax], T_closure
  1269 00000E6D 750C                            jne .L_false
  1270 00000E6F 48B8-                           mov rax, sob_boolean_true
  1270 00000E71 [0300000000000000] 
  1271 00000E79 EB0A                            jmp .L_end
  1272                                  .L_false:
  1273 00000E7B 48B8-                           mov rax, sob_boolean_false
  1273 00000E7D [0200000000000000] 
  1274                                  .L_end:
  1275 00000E85 C9                              leave
  1276 00000E86 C21800                          ret AND_KILL_FRAME(1)
  1277                                  
  1278                                  L_code_ptr_is_real:
  1279 00000E89 C8000000                        enter 0, 0
  1280 00000E8D 48837D1801                      cmp COUNT, 1
  1281 00000E92 0F856F100000                    jne L_error_arg_count_1
  1282 00000E98 488B4520                        mov rax, PARAM(0)
  1283 00000E9C 803813                          cmp byte [rax], T_real
  1284 00000E9F 750C                            jne .L_false
  1285 00000EA1 48B8-                           mov rax, sob_boolean_true
  1285 00000EA3 [0300000000000000] 
  1286 00000EAB EB0A                            jmp .L_end
  1287                                  .L_false:
  1288 00000EAD 48B8-                           mov rax, sob_boolean_false
  1288 00000EAF [0200000000000000] 
  1289                                  .L_end:
  1290 00000EB7 C9                              leave
  1291 00000EB8 C21800                          ret AND_KILL_FRAME(1)
  1292                                  
  1293                                  L_code_ptr_is_fraction:
  1294 00000EBB C8000000                        enter 0, 0
  1295 00000EBF 48837D1801                      cmp COUNT, 1
  1296 00000EC4 0F853D100000                    jne L_error_arg_count_1
  1297 00000ECA 488B4520                        mov rax, PARAM(0)
  1298 00000ECE 803812                          cmp byte [rax], T_fraction
  1299 00000ED1 750C                            jne .L_false
  1300 00000ED3 48B8-                           mov rax, sob_boolean_true
  1300 00000ED5 [0300000000000000] 
  1301 00000EDD EB0A                            jmp .L_end
  1302                                  .L_false:
  1303 00000EDF 48B8-                           mov rax, sob_boolean_false
  1303 00000EE1 [0200000000000000] 
  1304                                  .L_end:
  1305 00000EE9 C9                              leave
  1306 00000EEA C21800                          ret AND_KILL_FRAME(1)
  1307                                  
  1308                                  L_code_ptr_is_boolean:
  1309 00000EED C8000000                        enter 0, 0
  1310 00000EF1 48837D1801                      cmp COUNT, 1
  1311 00000EF6 0F850B100000                    jne L_error_arg_count_1
  1312 00000EFC 488B4520                        mov rax, PARAM(0)
  1313 00000F00 8A18                            mov bl, byte [rax]
  1314 00000F02 80E308                          and bl, T_boolean
  1315 00000F05 740C                            je .L_false
  1316 00000F07 48B8-                           mov rax, sob_boolean_true
  1316 00000F09 [0300000000000000] 
  1317 00000F11 EB0A                            jmp .L_end
  1318                                  .L_false:
  1319 00000F13 48B8-                           mov rax, sob_boolean_false
  1319 00000F15 [0200000000000000] 
  1320                                  .L_end:
  1321 00000F1D C9                              leave
  1322 00000F1E C21800                          ret AND_KILL_FRAME(1)
  1323                                          
  1324                                  L_code_ptr_is_boolean_false:
  1325 00000F21 C8000000                        enter 0, 0
  1326 00000F25 48837D1801                      cmp COUNT, 1
  1327 00000F2A 0F85D70F0000                    jne L_error_arg_count_1
  1328 00000F30 488B4520                        mov rax, PARAM(0)
  1329 00000F34 8A18                            mov bl, byte [rax]
  1330 00000F36 80FB09                          cmp bl, T_boolean_false
  1331 00000F39 750C                            jne .L_false
  1332 00000F3B 48B8-                           mov rax, sob_boolean_true
  1332 00000F3D [0300000000000000] 
  1333 00000F45 EB0A                            jmp .L_end
  1334                                  .L_false:
  1335 00000F47 48B8-                           mov rax, sob_boolean_false
  1335 00000F49 [0200000000000000] 
  1336                                  .L_end:
  1337 00000F51 C9                              leave
  1338 00000F52 C21800                          ret AND_KILL_FRAME(1)
  1339                                  
  1340                                  L_code_ptr_is_boolean_true:
  1341 00000F55 C8000000                        enter 0, 0
  1342 00000F59 48837D1801                      cmp COUNT, 1
  1343 00000F5E 0F85A30F0000                    jne L_error_arg_count_1
  1344 00000F64 488B4520                        mov rax, PARAM(0)
  1345 00000F68 8A18                            mov bl, byte [rax]
  1346 00000F6A 80FB0A                          cmp bl, T_boolean_true
  1347 00000F6D 750C                            jne .L_false
  1348 00000F6F 48B8-                           mov rax, sob_boolean_true
  1348 00000F71 [0300000000000000] 
  1349 00000F79 EB0A                            jmp .L_end
  1350                                  .L_false:
  1351 00000F7B 48B8-                           mov rax, sob_boolean_false
  1351 00000F7D [0200000000000000] 
  1352                                  .L_end:
  1353 00000F85 C9                              leave
  1354 00000F86 C21800                          ret AND_KILL_FRAME(1)
  1355                                  
  1356                                  L_code_ptr_is_number:
  1357 00000F89 C8000000                        enter 0, 0
  1358 00000F8D 48837D1801                      cmp COUNT, 1
  1359 00000F92 0F856F0F0000                    jne L_error_arg_count_1
  1360 00000F98 488B4520                        mov rax, PARAM(0)
  1361 00000F9C 8A18                            mov bl, byte [rax]
  1362 00000F9E 80E310                          and bl, T_number
  1363 00000FA1 740C                            jz .L_false
  1364 00000FA3 48B8-                           mov rax, sob_boolean_true
  1364 00000FA5 [0300000000000000] 
  1365 00000FAD EB0A                            jmp .L_end
  1366                                  .L_false:
  1367 00000FAF 48B8-                           mov rax, sob_boolean_false
  1367 00000FB1 [0200000000000000] 
  1368                                  .L_end:
  1369 00000FB9 C9                              leave
  1370 00000FBA C21800                          ret AND_KILL_FRAME(1)
  1371                                          
  1372                                  L_code_ptr_is_collection:
  1373 00000FBD C8000000                        enter 0, 0
  1374 00000FC1 48837D1801                      cmp COUNT, 1
  1375 00000FC6 0F853B0F0000                    jne L_error_arg_count_1
  1376 00000FCC 488B4520                        mov rax, PARAM(0)
  1377 00000FD0 8A18                            mov bl, byte [rax]
  1378 00000FD2 80E320                          and bl, T_collection
  1379 00000FD5 740C                            je .L_false
  1380 00000FD7 48B8-                           mov rax, sob_boolean_true
  1380 00000FD9 [0300000000000000] 
  1381 00000FE1 EB0A                            jmp .L_end
  1382                                  .L_false:
  1383 00000FE3 48B8-                           mov rax, sob_boolean_false
  1383 00000FE5 [0200000000000000] 
  1384                                  .L_end:
  1385 00000FED C9                              leave
  1386 00000FEE C21800                          ret AND_KILL_FRAME(1)
  1387                                  
  1388                                  L_code_ptr_cons:
  1389 00000FF1 C8000000                        enter 0, 0
  1390 00000FF5 48837D1802                      cmp COUNT, 2
  1391 00000FFA 0F853C0F0000                    jne L_error_arg_count_2
  1392 00001000 BF11000000                      mov rdi, (1 + 8 + 8)
  1393 00001005 E8CFF2FFFF                      call malloc
  1394 0000100A C60021                          mov byte [rax], T_pair
  1395 0000100D 488B5D20                        mov rbx, PARAM(0)
  1396 00001011 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1397 00001015 488B5D28                        mov rbx, PARAM(1)
  1398 00001019 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1399 0000101D C9                              leave
  1400 0000101E C22000                          ret AND_KILL_FRAME(2)
  1401                                  
  1402                                  L_code_ptr_display_sexpr:
  1403 00001021 C8000000                        enter 0, 0
  1404 00001025 48837D1801                      cmp COUNT, 1
  1405 0000102A 0F85D70E0000                    jne L_error_arg_count_1
  1406 00001030 488B7D20                        mov rdi, PARAM(0)
  1407 00001034 E821F5FFFF                      call print_sexpr
  1408 00001039 48B8-                           mov rax, sob_void
  1408 0000103B [0000000000000000] 
  1409 00001043 C9                              leave
  1410 00001044 C21800                          ret AND_KILL_FRAME(1)
  1411                                  
  1412                                  L_code_ptr_write_char:
  1413 00001047 C8000000                        enter 0, 0
  1414 0000104B 48837D1801                      cmp COUNT, 1
  1415 00001050 0F85B10E0000                    jne L_error_arg_count_1
  1416 00001056 488B4520                        mov rax, PARAM(0)
  1417                                          assert_char(rax)
    53 0000105A 803802              <1>  cmp byte [%1], %2
    54 0000105D 0F85780F0000        <1>  jne L_error_incorrect_type
  1418 00001063 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1419 00001066 4825FF000000                    and rax, 255
  1420 0000106C 48BF-                           mov rdi, fmt_char
  1420 0000106E [DE02000000000000] 
  1421 00001076 4889C6                          mov rsi, rax
  1422 00001079 B800000000                      mov rax, 0
  1423                                          ENTER
    44 0000107E C8000000            <1>  enter 0, 0
    45 00001082 4883E4F0            <1>  and rsp, ~15
  1424 00001086 E8(00000000)                    call printf
  1425                                          LEAVE
    49 0000108B C9                  <1>  leave
  1426 0000108C 48B8-                           mov rax, sob_void
  1426 0000108E [0000000000000000] 
  1427 00001096 C9                              leave
  1428 00001097 C21800                          ret AND_KILL_FRAME(1)
  1429                                  
  1430                                  L_code_ptr_car:
  1431 0000109A C8000000                        enter 0, 0
  1432 0000109E 48837D1801                      cmp COUNT, 1
  1433 000010A3 0F855E0E0000                    jne L_error_arg_count_1
  1434 000010A9 488B4520                        mov rax, PARAM(0)
  1435                                          assert_pair(rax)
    53 000010AD 803821              <1>  cmp byte [%1], %2
    54 000010B0 0F85250F0000        <1>  jne L_error_incorrect_type
  1436 000010B6 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1437 000010BA C9                              leave
  1438 000010BB C21800                          ret AND_KILL_FRAME(1)
  1439                                          
  1440                                  L_code_ptr_cdr:
  1441 000010BE C8000000                        enter 0, 0
  1442 000010C2 48837D1801                      cmp COUNT, 1
  1443 000010C7 0F853A0E0000                    jne L_error_arg_count_1
  1444 000010CD 488B4520                        mov rax, PARAM(0)
  1445                                          assert_pair(rax)
    53 000010D1 803821              <1>  cmp byte [%1], %2
    54 000010D4 0F85010F0000        <1>  jne L_error_incorrect_type
  1446 000010DA 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1447 000010DE C9                              leave
  1448 000010DF C21800                          ret AND_KILL_FRAME(1)
  1449                                          
  1450                                  L_code_ptr_string_length:
  1451 000010E2 C8000000                        enter 0, 0
  1452 000010E6 48837D1801                      cmp COUNT, 1
  1453 000010EB 0F85160E0000                    jne L_error_arg_count_1
  1454 000010F1 488B4520                        mov rax, PARAM(0)
  1455                                          assert_string(rax)
    53 000010F5 803803              <1>  cmp byte [%1], %2
    54 000010F8 0F85DD0E0000        <1>  jne L_error_incorrect_type
  1456 000010FE 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1457 00001102 E84F0D0000                      call make_integer
  1458 00001107 C9                              leave
  1459 00001108 C21800                          ret AND_KILL_FRAME(1)
  1460                                  
  1461                                  L_code_ptr_vector_length:
  1462 0000110B C8000000                        enter 0, 0
  1463 0000110F 48837D1801                      cmp COUNT, 1
  1464 00001114 0F85ED0D0000                    jne L_error_arg_count_1
  1465 0000111A 488B4520                        mov rax, PARAM(0)
  1466                                          assert_vector(rax)
    53 0000111E 803822              <1>  cmp byte [%1], %2
    54 00001121 0F85B40E0000        <1>  jne L_error_incorrect_type
  1467 00001127 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1468 0000112B E8260D0000                      call make_integer
  1469 00001130 C9                              leave
  1470 00001131 C21800                          ret AND_KILL_FRAME(1)
  1471                                  
  1472                                  L_code_ptr_real_to_integer:
  1473 00001134 C8000000                        enter 0, 0
  1474 00001138 48837D1801                      cmp COUNT, 1
  1475 0000113D 0F85C40D0000                    jne L_error_arg_count_1
  1476 00001143 488B5D20                        mov rbx, PARAM(0)
  1477                                          assert_real(rbx)
    53 00001147 803B13              <1>  cmp byte [%1], %2
    54 0000114A 0F858B0E0000        <1>  jne L_error_incorrect_type
  1478 00001150 F20F104301                      movsd xmm0, qword [rbx + 1]
  1479 00001155 F2480F2CF8                      cvttsd2si rdi, xmm0
  1480 0000115A E8F70C0000                      call make_integer
  1481 0000115F C9                              leave
  1482 00001160 C21800                          ret AND_KILL_FRAME(1)
  1483                                  
  1484                                  L_code_ptr_exit:
  1485 00001163 C8000000                        enter 0, 0
  1486 00001167 48837D1800                      cmp COUNT, 0
  1487 0000116C 0F85600D0000                    jne L_error_arg_count_0
  1488 00001172 B800000000                      mov rax, 0
  1489 00001177 E8(00000000)                    call exit
  1490                                  
  1491                                  L_code_ptr_integer_to_real:
  1492 0000117C C8000000                        enter 0, 0
  1493 00001180 48837D1801                      cmp COUNT, 1
  1494 00001185 0F857C0D0000                    jne L_error_arg_count_1
  1495 0000118B 488B4520                        mov rax, PARAM(0)
  1496                                          assert_integer(rax)
    53 0000118F 803811              <1>  cmp byte [%1], %2
    54 00001192 0F85430E0000        <1>  jne L_error_incorrect_type
  1497 00001198 FF7001                          push qword [rax + 1]
  1498 0000119B F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1499 000011A1 E8980C0000                      call make_real
  1500 000011A6 C9                              leave
  1501 000011A7 C21800                          ret AND_KILL_FRAME(1)
  1502                                  
  1503                                  L_code_ptr_fraction_to_real:
  1504 000011AA C8000000                        enter 0, 0
  1505 000011AE 48837D1801                      cmp COUNT, 1
  1506 000011B3 0F854E0D0000                    jne L_error_arg_count_1
  1507 000011B9 488B4520                        mov rax, PARAM(0)
  1508                                          assert_fraction(rax)
    53 000011BD 803812              <1>  cmp byte [%1], %2
    54 000011C0 0F85150E0000        <1>  jne L_error_incorrect_type
  1509 000011C6 FF7001                          push qword [rax + 1]
  1510 000011C9 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1511 000011CF FF7009                          push qword [rax + 1 + 8]
  1512 000011D2 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1513 000011D8 F20F5EC1                        divsd xmm0, xmm1
  1514 000011DC E85D0C0000                      call make_real
  1515 000011E1 C9                              leave
  1516 000011E2 C21800                          ret AND_KILL_FRAME(1)
  1517                                  
  1518                                  L_code_ptr_char_to_integer:
  1519 000011E5 C8000000                        enter 0, 0
  1520 000011E9 48837D1801                      cmp COUNT, 1
  1521 000011EE 0F85130D0000                    jne L_error_arg_count_1
  1522 000011F4 488B4520                        mov rax, PARAM(0)
  1523                                          assert_char(rax)
    53 000011F8 803802              <1>  cmp byte [%1], %2
    54 000011FB 0F85DA0D0000        <1>  jne L_error_incorrect_type
  1524 00001201 8A4001                          mov al, byte [rax + 1]
  1525 00001204 4825FF000000                    and rax, 255
  1526 0000120A 4889C7                          mov rdi, rax
  1527 0000120D E8440C0000                      call make_integer
  1528 00001212 C9                              leave
  1529 00001213 C21800                          ret AND_KILL_FRAME(1)
  1530                                  
  1531                                  L_code_ptr_integer_to_fraction:
  1532 00001216 C8000000                        enter 0, 0
  1533 0000121A 48837D1801                      cmp COUNT, 1
  1534 0000121F 0F85E20C0000                    jne L_error_arg_count_1
  1535 00001225 4C8B4520                        mov r8, PARAM(0)
  1536                                          assert_integer(r8)
    53 00001229 41803811            <1>  cmp byte [%1], %2
    54 0000122D 0F85A80D0000        <1>  jne L_error_incorrect_type
  1537 00001233 BF11000000                      mov rdi, (1 + 8 + 8)
  1538 00001238 E89CF0FFFF                      call malloc
  1539 0000123D 498B5801                        mov rbx, qword [r8 + 1]
  1540 00001241 C60012                          mov byte [rax], T_fraction
  1541 00001244 48895801                        mov qword [rax + 1], rbx
  1542 00001248 48C7400901000000                mov qword [rax + 1 + 8], 1
  1543 00001250 C9                              leave
  1544 00001251 C21800                          ret AND_KILL_FRAME(1)
  1545                                  
  1546                                  L_code_ptr_integer_to_char:
  1547 00001254 C8000000                        enter 0, 0
  1548 00001258 48837D1801                      cmp COUNT, 1
  1549 0000125D 0F85A40C0000                    jne L_error_arg_count_1
  1550 00001263 488B4520                        mov rax, PARAM(0)
  1551                                          assert_integer(rax)
    53 00001267 803811              <1>  cmp byte [%1], %2
    54 0000126A 0F856B0D0000        <1>  jne L_error_incorrect_type
  1552 00001270 488B5801                        mov rbx, qword [rax + 1]
  1553 00001274 4883FB00                        cmp rbx, 0
  1554 00001278 0F8EF20B0000                    jle L_error_integer_range
  1555 0000127E 4881FB00010000                  cmp rbx, 256
  1556 00001285 0F8DE50B0000                    jge L_error_integer_range
  1557 0000128B BF02000000                      mov rdi, (1 + 1)
  1558 00001290 E844F0FFFF                      call malloc
  1559 00001295 C60002                          mov byte [rax], T_char
  1560 00001298 885801                          mov byte [rax + 1], bl
  1561 0000129B C9                              leave
  1562 0000129C C21800                          ret AND_KILL_FRAME(1)
  1563                                  
  1564                                  L_code_ptr_trng:
  1565 0000129F C8000000                        enter 0, 0
  1566 000012A3 48837D1800                      cmp COUNT, 0
  1567 000012A8 0F85240C0000                    jne L_error_arg_count_0
  1568 000012AE 480FC7F7                        rdrand rdi
  1569 000012B2 48D1EF                          shr rdi, 1
  1570 000012B5 E89C0B0000                      call make_integer
  1571 000012BA C9                              leave
  1572 000012BB C21000                          ret AND_KILL_FRAME(0)
  1573                                  
  1574                                  L_code_ptr_is_zero:
  1575 000012BE C8000000                        enter 0, 0
  1576 000012C2 48837D1801                      cmp COUNT, 1
  1577 000012C7 0F853A0C0000                    jne L_error_arg_count_1
  1578 000012CD 488B4520                        mov rax, PARAM(0)
  1579 000012D1 803811                          cmp byte [rax], T_integer
  1580 000012D4 740F                            je .L_integer
  1581 000012D6 803812                          cmp byte [rax], T_fraction
  1582 000012D9 7413                            je .L_fraction
  1583 000012DB 803813                          cmp byte [rax], T_real
  1584 000012DE 7417                            je .L_real
  1585 000012E0 E9F60C0000                      jmp L_error_incorrect_type
  1586                                  .L_integer:
  1587 000012E5 4883780100                      cmp qword [rax + 1], 0
  1588 000012EA 7429                            je .L_zero
  1589 000012EC EB1B                            jmp .L_not_zero
  1590                                  .L_fraction:
  1591 000012EE 4883780100                      cmp qword [rax + 1], 0
  1592 000012F3 7420                            je .L_zero
  1593 000012F5 EB12                            jmp .L_not_zero
  1594                                  .L_real:
  1595 000012F7 660FEFC0                        pxor xmm0, xmm0
  1596 000012FB FF7001                          push qword [rax + 1]
  1597 000012FE F20F100C24                      movsd xmm1, qword [rsp]
  1598 00001303 660F2EC1                        ucomisd xmm0, xmm1
  1599 00001307 740C                            je .L_zero
  1600                                  .L_not_zero:
  1601 00001309 48B8-                           mov rax, sob_boolean_false
  1601 0000130B [0200000000000000] 
  1602 00001313 EB0A                            jmp .L_end
  1603                                  .L_zero:
  1604 00001315 48B8-                           mov rax, sob_boolean_true
  1604 00001317 [0300000000000000] 
  1605                                  .L_end:
  1606 0000131F C9                              leave
  1607 00001320 C21800                          ret AND_KILL_FRAME(1)
  1608                                  
  1609                                  L_code_ptr_is_integer:
  1610 00001323 C8000000                        enter 0, 0
  1611 00001327 48837D1801                      cmp COUNT, 1
  1612 0000132C 0F85D50B0000                    jne L_error_arg_count_1
  1613 00001332 488B4520                        mov rax, PARAM(0)
  1614 00001336 803811                          cmp byte [rax], T_integer
  1615 00001339 750C                            jne .L_false
  1616 0000133B 48B8-                           mov rax, sob_boolean_true
  1616 0000133D [0300000000000000] 
  1617 00001345 EB0A                            jmp .L_exit
  1618                                  .L_false:
  1619 00001347 48B8-                           mov rax, sob_boolean_false
  1619 00001349 [0200000000000000] 
  1620                                  .L_exit:
  1621 00001351 C9                              leave
  1622 00001352 C21800                          ret AND_KILL_FRAME(1)
  1623                                  
  1624                                  L_code_ptr_raw_bin_add_rr:
  1625 00001355 C8000000                        enter 0, 0
  1626 00001359 48837D1802                      cmp COUNT, 2
  1627 0000135E 0F85D80B0000                    jne L_error_arg_count_2
  1628 00001364 488B5D20                        mov rbx, PARAM(0)
  1629                                          assert_real(rbx)
    53 00001368 803B13              <1>  cmp byte [%1], %2
    54 0000136B 0F856A0C0000        <1>  jne L_error_incorrect_type
  1630 00001371 488B4D28                        mov rcx, PARAM(1)
  1631                                          assert_real(rcx)
    53 00001375 803913              <1>  cmp byte [%1], %2
    54 00001378 0F855D0C0000        <1>  jne L_error_incorrect_type
  1632 0000137E F20F104301                      movsd xmm0, qword [rbx + 1]
  1633 00001383 F20F104901                      movsd xmm1, qword [rcx + 1]
  1634 00001388 F20F58C1                        addsd xmm0, xmm1
  1635 0000138C E8AD0A0000                      call make_real
  1636 00001391 C9                              leave
  1637 00001392 C22000                          ret AND_KILL_FRAME(2)
  1638                                  
  1639                                  L_code_ptr_raw_bin_sub_rr:
  1640 00001395 C8000000                        enter 0, 0
  1641 00001399 48837D1802                      cmp COUNT, 2
  1642 0000139E 0F85980B0000                    jne L_error_arg_count_2
  1643 000013A4 488B5D20                        mov rbx, PARAM(0)
  1644                                          assert_real(rbx)
    53 000013A8 803B13              <1>  cmp byte [%1], %2
    54 000013AB 0F852A0C0000        <1>  jne L_error_incorrect_type
  1645 000013B1 488B4D28                        mov rcx, PARAM(1)
  1646                                          assert_real(rcx)
    53 000013B5 803913              <1>  cmp byte [%1], %2
    54 000013B8 0F851D0C0000        <1>  jne L_error_incorrect_type
  1647 000013BE F20F104301                      movsd xmm0, qword [rbx + 1]
  1648 000013C3 F20F104901                      movsd xmm1, qword [rcx + 1]
  1649 000013C8 F20F5CC1                        subsd xmm0, xmm1
  1650 000013CC E86D0A0000                      call make_real
  1651 000013D1 C9                              leave
  1652 000013D2 C22000                          ret AND_KILL_FRAME(2)
  1653                                  
  1654                                  L_code_ptr_raw_bin_mul_rr:
  1655 000013D5 C8000000                        enter 0, 0
  1656 000013D9 48837D1802                      cmp COUNT, 2
  1657 000013DE 0F85580B0000                    jne L_error_arg_count_2
  1658 000013E4 488B5D20                        mov rbx, PARAM(0)
  1659                                          assert_real(rbx)
    53 000013E8 803B13              <1>  cmp byte [%1], %2
    54 000013EB 0F85EA0B0000        <1>  jne L_error_incorrect_type
  1660 000013F1 488B4D28                        mov rcx, PARAM(1)
  1661                                          assert_real(rcx)
    53 000013F5 803913              <1>  cmp byte [%1], %2
    54 000013F8 0F85DD0B0000        <1>  jne L_error_incorrect_type
  1662 000013FE F20F104301                      movsd xmm0, qword [rbx + 1]
  1663 00001403 F20F104901                      movsd xmm1, qword [rcx + 1]
  1664 00001408 F20F59C1                        mulsd xmm0, xmm1
  1665 0000140C E82D0A0000                      call make_real
  1666 00001411 C9                              leave
  1667 00001412 C22000                          ret AND_KILL_FRAME(2)
  1668                                  
  1669                                  L_code_ptr_raw_bin_div_rr:
  1670 00001415 C8000000                        enter 0, 0
  1671 00001419 48837D1802                      cmp COUNT, 2
  1672 0000141E 0F85180B0000                    jne L_error_arg_count_2
  1673 00001424 488B5D20                        mov rbx, PARAM(0)
  1674                                          assert_real(rbx)
    53 00001428 803B13              <1>  cmp byte [%1], %2
    54 0000142B 0F85AA0B0000        <1>  jne L_error_incorrect_type
  1675 00001431 488B4D28                        mov rcx, PARAM(1)
  1676                                          assert_real(rcx)
    53 00001435 803913              <1>  cmp byte [%1], %2
    54 00001438 0F859D0B0000        <1>  jne L_error_incorrect_type
  1677 0000143E F20F104301                      movsd xmm0, qword [rbx + 1]
  1678 00001443 F20F104901                      movsd xmm1, qword [rcx + 1]
  1679 00001448 660FEFD2                        pxor xmm2, xmm2
  1680 0000144C 660F2ECA                        ucomisd xmm1, xmm2
  1681 00001450 0F84B60B0000                    je L_error_division_by_zero
  1682 00001456 F20F5EC1                        divsd xmm0, xmm1
  1683 0000145A E8DF090000                      call make_real
  1684 0000145F C9                              leave
  1685 00001460 C22000                          ret AND_KILL_FRAME(2)
  1686                                  
  1687                                  L_code_ptr_raw_bin_add_zz:
  1688 00001463 C8000000                	enter 0, 0
  1689 00001467 48837D1802              	cmp COUNT, 2
  1690 0000146C 0F85CA0A0000            	jne L_error_arg_count_2
  1691 00001472 4C8B4520                	mov r8, PARAM(0)
  1692                                  	assert_integer(r8)
    53 00001476 41803811            <1>  cmp byte [%1], %2
    54 0000147A 0F855B0B0000        <1>  jne L_error_incorrect_type
  1693 00001480 4C8B4D28                	mov r9, PARAM(1)
  1694                                  	assert_integer(r9)
    53 00001484 41803911            <1>  cmp byte [%1], %2
    54 00001488 0F854D0B0000        <1>  jne L_error_incorrect_type
  1695 0000148E 498B7801                	mov rdi, qword [r8 + 1]
  1696 00001492 49037901                	add rdi, qword [r9 + 1]
  1697 00001496 E8BB090000              	call make_integer
  1698 0000149B C9                      	leave
  1699 0000149C C22000                  	ret AND_KILL_FRAME(2)
  1700                                  
  1701                                  L_code_ptr_raw_bin_add_qq:
  1702 0000149F C8000000                        enter 0, 0
  1703 000014A3 48837D1802                      cmp COUNT, 2
  1704 000014A8 0F858E0A0000                    jne L_error_arg_count_2
  1705 000014AE 4C8B4520                        mov r8, PARAM(0)
  1706                                          assert_fraction(r8)
    53 000014B2 41803812            <1>  cmp byte [%1], %2
    54 000014B6 0F851F0B0000        <1>  jne L_error_incorrect_type
  1707 000014BC 4C8B4D28                        mov r9, PARAM(1)
  1708                                          assert_fraction(r9)
    53 000014C0 41803912            <1>  cmp byte [%1], %2
    54 000014C4 0F85110B0000        <1>  jne L_error_incorrect_type
  1709 000014CA 498B4001                        mov rax, qword [r8 + 1] ; num1
  1710 000014CE 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1711 000014D2 4899                            cqo
  1712 000014D4 48F7EB                          imul rbx
  1713 000014D7 4889C6                          mov rsi, rax
  1714 000014DA 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1715 000014DE 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1716 000014E2 4899                            cqo
  1717 000014E4 48F7EB                          imul rbx
  1718 000014E7 4801C6                          add rsi, rax
  1719 000014EA 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1720 000014EE 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1721 000014F2 4899                            cqo
  1722 000014F4 48F7EB                          imul rbx
  1723 000014F7 4889C7                          mov rdi, rax
  1724 000014FA E8DE010000                      call normalize_fraction
  1725 000014FF C9                              leave
  1726 00001500 C22000                          ret AND_KILL_FRAME(2)
  1727                                  
  1728                                  L_code_ptr_raw_bin_sub_zz:
  1729 00001503 C8000000                	enter 0, 0
  1730 00001507 48837D1802              	cmp COUNT, 2
  1731 0000150C 0F852A0A0000            	jne L_error_arg_count_2
  1732 00001512 4C8B4520                	mov r8, PARAM(0)
  1733                                  	assert_integer(r8)
    53 00001516 41803811            <1>  cmp byte [%1], %2
    54 0000151A 0F85BB0A0000        <1>  jne L_error_incorrect_type
  1734 00001520 4C8B4D28                	mov r9, PARAM(1)
  1735                                  	assert_integer(r9)
    53 00001524 41803911            <1>  cmp byte [%1], %2
    54 00001528 0F85AD0A0000        <1>  jne L_error_incorrect_type
  1736 0000152E 498B7801                	mov rdi, qword [r8 + 1]
  1737 00001532 492B7901                	sub rdi, qword [r9 + 1]
  1738 00001536 E81B090000              	call make_integer
  1739 0000153B C9                      	leave
  1740 0000153C C22000                  	ret AND_KILL_FRAME(2)
  1741                                  
  1742                                  L_code_ptr_raw_bin_sub_qq:
  1743 0000153F C8000000                        enter 0, 0
  1744 00001543 48837D1802                      cmp COUNT, 2
  1745 00001548 0F85EE090000                    jne L_error_arg_count_2
  1746 0000154E 4C8B4520                        mov r8, PARAM(0)
  1747                                          assert_fraction(r8)
    53 00001552 41803812            <1>  cmp byte [%1], %2
    54 00001556 0F857F0A0000        <1>  jne L_error_incorrect_type
  1748 0000155C 4C8B4D28                        mov r9, PARAM(1)
  1749                                          assert_fraction(r9)
    53 00001560 41803912            <1>  cmp byte [%1], %2
    54 00001564 0F85710A0000        <1>  jne L_error_incorrect_type
  1750 0000156A 498B4001                        mov rax, qword [r8 + 1] ; num1
  1751 0000156E 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1752 00001572 4899                            cqo
  1753 00001574 48F7EB                          imul rbx
  1754 00001577 4889C6                          mov rsi, rax
  1755 0000157A 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1756 0000157E 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1757 00001582 4899                            cqo
  1758 00001584 48F7EB                          imul rbx
  1759 00001587 4829C6                          sub rsi, rax
  1760 0000158A 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1761 0000158E 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1762 00001592 4899                            cqo
  1763 00001594 48F7EB                          imul rbx
  1764 00001597 4889C7                          mov rdi, rax
  1765 0000159A E83E010000                      call normalize_fraction
  1766 0000159F C9                              leave
  1767 000015A0 C22000                          ret AND_KILL_FRAME(2)
  1768                                  
  1769                                  L_code_ptr_raw_bin_mul_zz:
  1770 000015A3 C8000000                	enter 0, 0
  1771 000015A7 48837D1802              	cmp COUNT, 2
  1772 000015AC 0F858A090000            	jne L_error_arg_count_2
  1773 000015B2 4C8B4520                	mov r8, PARAM(0)
  1774                                  	assert_integer(r8)
    53 000015B6 41803811            <1>  cmp byte [%1], %2
    54 000015BA 0F851B0A0000        <1>  jne L_error_incorrect_type
  1775 000015C0 4C8B4D28                	mov r9, PARAM(1)
  1776                                  	assert_integer(r9)
    53 000015C4 41803911            <1>  cmp byte [%1], %2
    54 000015C8 0F850D0A0000        <1>  jne L_error_incorrect_type
  1777 000015CE 4899                    	cqo
  1778 000015D0 498B4001                	mov rax, qword [r8 + 1]
  1779 000015D4 49F76101                	mul qword [r9 + 1]
  1780 000015D8 4889C7                  	mov rdi, rax
  1781 000015DB E876080000              	call make_integer
  1782 000015E0 C9                      	leave
  1783 000015E1 C22000                  	ret AND_KILL_FRAME(2)
  1784                                  
  1785                                  L_code_ptr_raw_bin_mul_qq:
  1786 000015E4 C8000000                        enter 0, 0
  1787 000015E8 48837D1802                      cmp COUNT, 2
  1788 000015ED 0F8549090000                    jne L_error_arg_count_2
  1789 000015F3 4C8B4520                        mov r8, PARAM(0)
  1790                                          assert_fraction(r8)
    53 000015F7 41803812            <1>  cmp byte [%1], %2
    54 000015FB 0F85DA090000        <1>  jne L_error_incorrect_type
  1791 00001601 4C8B4D28                        mov r9, PARAM(1)
  1792                                          assert_fraction(r9)
    53 00001605 41803912            <1>  cmp byte [%1], %2
    54 00001609 0F85CC090000        <1>  jne L_error_incorrect_type
  1793 0000160F 498B4001                        mov rax, qword [r8 + 1] ; num1
  1794 00001613 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1795 00001617 4899                            cqo
  1796 00001619 48F7EB                          imul rbx
  1797 0000161C 4889C6                          mov rsi, rax
  1798 0000161F 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1799 00001623 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1800 00001627 4899                            cqo
  1801 00001629 48F7EB                          imul rbx
  1802 0000162C 4889C7                          mov rdi, rax
  1803 0000162F E8A9000000                      call normalize_fraction
  1804 00001634 C9                              leave
  1805 00001635 C22000                          ret AND_KILL_FRAME(2)
  1806                                          
  1807                                  L_code_ptr_raw_bin_div_zz:
  1808 00001638 C8000000                	enter 0, 0
  1809 0000163C 48837D1802              	cmp COUNT, 2
  1810 00001641 0F85F5080000            	jne L_error_arg_count_2
  1811 00001647 4C8B4520                	mov r8, PARAM(0)
  1812                                  	assert_integer(r8)
    53 0000164B 41803811            <1>  cmp byte [%1], %2
    54 0000164F 0F8586090000        <1>  jne L_error_incorrect_type
  1813 00001655 4C8B4D28                	mov r9, PARAM(1)
  1814                                  	assert_integer(r9)
    53 00001659 41803911            <1>  cmp byte [%1], %2
    54 0000165D 0F8578090000        <1>  jne L_error_incorrect_type
  1815 00001663 498B7901                	mov rdi, qword [r9 + 1]
  1816 00001667 4883FF00                	cmp rdi, 0
  1817 0000166B 0F849B090000            	je L_error_division_by_zero
  1818 00001671 498B7001                	mov rsi, qword [r8 + 1]
  1819 00001675 E863000000              	call normalize_fraction
  1820 0000167A C9                      	leave
  1821 0000167B C22000                  	ret AND_KILL_FRAME(2)
  1822                                  
  1823                                  L_code_ptr_raw_bin_div_qq:
  1824 0000167E C8000000                        enter 0, 0
  1825 00001682 48837D1802                      cmp COUNT, 2
  1826 00001687 0F85AF080000                    jne L_error_arg_count_2
  1827 0000168D 4C8B4520                        mov r8, PARAM(0)
  1828                                          assert_fraction(r8)
    53 00001691 41803812            <1>  cmp byte [%1], %2
    54 00001695 0F8540090000        <1>  jne L_error_incorrect_type
  1829 0000169B 4C8B4D28                        mov r9, PARAM(1)
  1830                                          assert_fraction(r9)
    53 0000169F 41803912            <1>  cmp byte [%1], %2
    54 000016A3 0F8532090000        <1>  jne L_error_incorrect_type
  1831 000016A9 4983790100                      cmp qword [r9 + 1], 0
  1832 000016AE 0F8458090000                    je L_error_division_by_zero
  1833 000016B4 498B4001                        mov rax, qword [r8 + 1] ; num1
  1834 000016B8 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1835 000016BC 4899                            cqo
  1836 000016BE 48F7EB                          imul rbx
  1837 000016C1 4889C6                          mov rsi, rax
  1838 000016C4 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1839 000016C8 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1840 000016CC 4899                            cqo
  1841 000016CE 48F7EB                          imul rbx
  1842 000016D1 4889C7                          mov rdi, rax
  1843 000016D4 E804000000                      call normalize_fraction
  1844 000016D9 C9                              leave
  1845 000016DA C22000                          ret AND_KILL_FRAME(2)
  1846                                          
  1847                                  normalize_fraction:
  1848 000016DD 56                              push rsi
  1849 000016DE 57                              push rdi
  1850 000016DF E859000000                      call gcd
  1851 000016E4 4889C3                          mov rbx, rax
  1852 000016E7 58                              pop rax
  1853 000016E8 4899                            cqo
  1854 000016EA 48F7FB                          idiv rbx
  1855 000016ED 4989C0                          mov r8, rax
  1856 000016F0 58                              pop rax
  1857 000016F1 4899                            cqo
  1858 000016F3 48F7FB                          idiv rbx
  1859 000016F6 4989C1                          mov r9, rax
  1860 000016F9 4983F900                        cmp r9, 0
  1861 000016FD 741C                            je .L_zero
  1862 000016FF 4983F801                        cmp r8, 1
  1863 00001703 7421                            je .L_int
  1864 00001705 BF11000000                      mov rdi, (1 + 8 + 8)
  1865 0000170A E8CAEBFFFF                      call malloc
  1866 0000170F C60012                          mov byte [rax], T_fraction
  1867 00001712 4C894801                        mov qword [rax + 1], r9
  1868 00001716 4C894009                        mov qword [rax + 1 + 8], r8
  1869 0000171A C3                              ret
  1870                                  .L_zero:
  1871 0000171B BF00000000                      mov rdi, 0
  1872 00001720 E831070000                      call make_integer
  1873 00001725 C3                              ret
  1874                                  .L_int:
  1875 00001726 4C89CF                          mov rdi, r9
  1876 00001729 E828070000                      call make_integer
  1877 0000172E C3                              ret
  1878                                  
  1879                                  iabs:
  1880 0000172F 4889F8                          mov rax, rdi
  1881 00001732 4883F800                        cmp rax, 0
  1882 00001736 7C01                            jl .Lneg
  1883 00001738 C3                              ret
  1884                                  .Lneg:
  1885 00001739 48F7D8                          neg rax
  1886 0000173C C3                              ret
  1887                                  
  1888                                  gcd:
  1889 0000173D E8EDFFFFFF                      call iabs
  1890 00001742 4889C3                          mov rbx, rax
  1891 00001745 4889F7                          mov rdi, rsi
  1892 00001748 E8E2FFFFFF                      call iabs
  1893 0000174D 4883F800                        cmp rax, 0
  1894 00001751 7502                            jne .L0
  1895 00001753 4893                            xchg rax, rbx
  1896                                  .L0:
  1897 00001755 4883FB00                        cmp rbx, 0
  1898 00001759 740C                            je .L1
  1899 0000175B 4899                            cqo
  1900 0000175D 48F7F3                          div rbx
  1901 00001760 4889D0                          mov rax, rdx
  1902 00001763 4893                            xchg rax, rbx
  1903 00001765 EBEE                            jmp .L0
  1904                                  .L1:
  1905 00001767 C3                              ret
  1906                                  
  1907                                  L_code_ptr_error:
  1908 00001768 C8000000                        enter 0, 0
  1909 0000176C 48837D1802                      cmp COUNT, 2
  1910 00001771 0F85C5070000                    jne L_error_arg_count_2
  1911 00001777 488B7520                        mov rsi, PARAM(0)
  1912                                          assert_interned_symbol(rsi)
    53 0000177B 803E41              <1>  cmp byte [%1], %2
    54 0000177E 0F8557080000        <1>  jne L_error_incorrect_type
  1913 00001784 488B7528                        mov rsi, PARAM(1)
  1914                                          assert_string(rsi)
    53 00001788 803E03              <1>  cmp byte [%1], %2
    54 0000178B 0F854A080000        <1>  jne L_error_incorrect_type
  1915 00001791 48BF-                           mov rdi, fmt_scheme_error_part_1
  1915 00001793 [3C04000000000000] 
  1916 0000179B B800000000                      mov rax, 0
  1917                                          ENTER
    44 000017A0 C8000000            <1>  enter 0, 0
    45 000017A4 4883E4F0            <1>  and rsp, ~15
  1918 000017A8 E8(00000000)                    call printf
  1919                                          LEAVE
    49 000017AD C9                  <1>  leave
  1920 000017AE 488B7D20                        mov rdi, PARAM(0)
  1921 000017B2 E8A3EDFFFF                      call print_sexpr
  1922 000017B7 48BF-                           mov rdi, fmt_scheme_error_part_2
  1922 000017B9 [5004000000000000] 
  1923 000017C1 B800000000                      mov rax, 0
  1924                                          ENTER
    44 000017C6 C8000000            <1>  enter 0, 0
    45 000017CA 4883E4F0            <1>  and rsp, ~15
  1925 000017CE E8(00000000)                    call printf
  1926                                          LEAVE
    49 000017D3 C9                  <1>  leave
  1927 000017D4 488B4528                        mov rax, PARAM(1)       ; sob_string
  1928 000017D8 BE01000000                      mov rsi, 1              ; size = 1 byte
  1929 000017DD 488B5001                        mov rdx, qword [rax + 1] ; length
  1930 000017E1 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1931 000017E5 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1932                                  	ENTER
    44 000017ED C8000000            <1>  enter 0, 0
    45 000017F1 4883E4F0            <1>  and rsp, ~15
  1933 000017F5 E8(00000000)                    call fwrite
  1934                                  	LEAVE
    49 000017FA C9                  <1>  leave
  1935 000017FB 48BF-                           mov rdi, fmt_scheme_error_part_3
  1935 000017FD [9204000000000000] 
  1936 00001805 B800000000                      mov rax, 0
  1937                                          ENTER
    44 0000180A C8000000            <1>  enter 0, 0
    45 0000180E 4883E4F0            <1>  and rsp, ~15
  1938 00001812 E8(00000000)                    call printf
  1939                                          LEAVE
    49 00001817 C9                  <1>  leave
  1940 00001818 48C7C0F7FFFFFF                  mov rax, -9
  1941 0000181F E8(00000000)                    call exit
  1942                                  
  1943                                  L_code_ptr_raw_less_than_rr:
  1944 00001824 C8000000                        enter 0, 0
  1945 00001828 48837D1802                      cmp COUNT, 2
  1946 0000182D 0F8509070000                    jne L_error_arg_count_2
  1947 00001833 488B7520                        mov rsi, PARAM(0)
  1948                                          assert_real(rsi)
    53 00001837 803E13              <1>  cmp byte [%1], %2
    54 0000183A 0F859B070000        <1>  jne L_error_incorrect_type
  1949 00001840 488B7D28                        mov rdi, PARAM(1)
  1950                                          assert_real(rdi)
    53 00001844 803F13              <1>  cmp byte [%1], %2
    54 00001847 0F858E070000        <1>  jne L_error_incorrect_type
  1951 0000184D F20F104601                      movsd xmm0, qword [rsi + 1]
  1952 00001852 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1953 00001857 660F2FC1                        comisd xmm0, xmm1
  1954 0000185B 730C                            jae .L_false
  1955 0000185D 48B8-                           mov rax, sob_boolean_true
  1955 0000185F [0300000000000000] 
  1956 00001867 EB0A                            jmp .L_exit
  1957                                  .L_false:
  1958 00001869 48B8-                           mov rax, sob_boolean_false
  1958 0000186B [0200000000000000] 
  1959                                  .L_exit:
  1960 00001873 C9                              leave
  1961 00001874 C22000                          ret AND_KILL_FRAME(2)
  1962                                          
  1963                                  L_code_ptr_raw_less_than_zz:
  1964 00001877 C8000000                	enter 0, 0
  1965 0000187B 48837D1802              	cmp COUNT, 2
  1966 00001880 0F85B6060000            	jne L_error_arg_count_2
  1967 00001886 4C8B4520                	mov r8, PARAM(0)
  1968                                  	assert_integer(r8)
    53 0000188A 41803811            <1>  cmp byte [%1], %2
    54 0000188E 0F8547070000        <1>  jne L_error_incorrect_type
  1969 00001894 4C8B4D28                	mov r9, PARAM(1)
  1970                                  	assert_integer(r9)
    53 00001898 41803911            <1>  cmp byte [%1], %2
    54 0000189C 0F8539070000        <1>  jne L_error_incorrect_type
  1971 000018A2 498B7801                	mov rdi, qword [r8 + 1]
  1972 000018A6 493B7901                	cmp rdi, qword [r9 + 1]
  1973 000018AA 7D0C                    	jge .L_false
  1974 000018AC 48B8-                   	mov rax, sob_boolean_true
  1974 000018AE [0300000000000000] 
  1975 000018B6 EB0A                    	jmp .L_exit
  1976                                  .L_false:
  1977 000018B8 48B8-                   	mov rax, sob_boolean_false
  1977 000018BA [0200000000000000] 
  1978                                  .L_exit:
  1979 000018C2 C9                      	leave
  1980 000018C3 C22000                  	ret AND_KILL_FRAME(2)
  1981                                  
  1982                                  L_code_ptr_raw_less_than_qq:
  1983 000018C6 C8000000                        enter 0, 0
  1984 000018CA 48837D1802                      cmp COUNT, 2
  1985 000018CF 0F8567060000                    jne L_error_arg_count_2
  1986 000018D5 488B7520                        mov rsi, PARAM(0)
  1987                                          assert_fraction(rsi)
    53 000018D9 803E12              <1>  cmp byte [%1], %2
    54 000018DC 0F85F9060000        <1>  jne L_error_incorrect_type
  1988 000018E2 488B7D28                        mov rdi, PARAM(1)
  1989                                          assert_fraction(rdi)
    53 000018E6 803F12              <1>  cmp byte [%1], %2
    54 000018E9 0F85EC060000        <1>  jne L_error_incorrect_type
  1990 000018EF 488B4601                        mov rax, qword [rsi + 1] ; num1
  1991 000018F3 4899                            cqo
  1992 000018F5 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1993 000018F9 4889C1                          mov rcx, rax
  1994 000018FC 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  1995 00001900 4899                            cqo
  1996 00001902 48F76F01                        imul qword [rdi + 1]          ; num2
  1997 00001906 4829C1                          sub rcx, rax
  1998 00001909 7D0C                            jge .L_false
  1999 0000190B 48B8-                           mov rax, sob_boolean_true
  1999 0000190D [0300000000000000] 
  2000 00001915 EB0A                            jmp .L_exit
  2001                                  .L_false:
  2002 00001917 48B8-                           mov rax, sob_boolean_false
  2002 00001919 [0200000000000000] 
  2003                                  .L_exit:
  2004 00001921 C9                              leave
  2005 00001922 C22000                          ret AND_KILL_FRAME(2)
  2006                                  
  2007                                  L_code_ptr_raw_equal_rr:
  2008 00001925 C8000000                        enter 0, 0
  2009 00001929 48837D1802                      cmp COUNT, 2
  2010 0000192E 0F8508060000                    jne L_error_arg_count_2
  2011 00001934 488B7520                        mov rsi, PARAM(0)
  2012                                          assert_real(rsi)
    53 00001938 803E13              <1>  cmp byte [%1], %2
    54 0000193B 0F859A060000        <1>  jne L_error_incorrect_type
  2013 00001941 488B7D28                        mov rdi, PARAM(1)
  2014                                          assert_real(rdi)
    53 00001945 803F13              <1>  cmp byte [%1], %2
    54 00001948 0F858D060000        <1>  jne L_error_incorrect_type
  2015 0000194E F20F104601                      movsd xmm0, qword [rsi + 1]
  2016 00001953 F20F104F01                      movsd xmm1, qword [rdi + 1]
  2017 00001958 660F2FC1                        comisd xmm0, xmm1
  2018 0000195C 750C                            jne .L_false
  2019 0000195E 48B8-                           mov rax, sob_boolean_true
  2019 00001960 [0300000000000000] 
  2020 00001968 EB0A                            jmp .L_exit
  2021                                  .L_false:
  2022 0000196A 48B8-                           mov rax, sob_boolean_false
  2022 0000196C [0200000000000000] 
  2023                                  .L_exit:
  2024 00001974 C9                              leave
  2025 00001975 C22000                          ret AND_KILL_FRAME(2)
  2026                                          
  2027                                  L_code_ptr_raw_equal_zz:
  2028 00001978 C8000000                	enter 0, 0
  2029 0000197C 48837D1802              	cmp COUNT, 2
  2030 00001981 0F85B5050000            	jne L_error_arg_count_2
  2031 00001987 4C8B4520                	mov r8, PARAM(0)
  2032                                  	assert_integer(r8)
    53 0000198B 41803811            <1>  cmp byte [%1], %2
    54 0000198F 0F8546060000        <1>  jne L_error_incorrect_type
  2033 00001995 4C8B4D28                	mov r9, PARAM(1)
  2034                                  	assert_integer(r9)
    53 00001999 41803911            <1>  cmp byte [%1], %2
    54 0000199D 0F8538060000        <1>  jne L_error_incorrect_type
  2035 000019A3 498B7801                	mov rdi, qword [r8 + 1]
  2036 000019A7 493B7901                	cmp rdi, qword [r9 + 1]
  2037 000019AB 750C                    	jne .L_false
  2038 000019AD 48B8-                   	mov rax, sob_boolean_true
  2038 000019AF [0300000000000000] 
  2039 000019B7 EB0A                    	jmp .L_exit
  2040                                  .L_false:
  2041 000019B9 48B8-                   	mov rax, sob_boolean_false
  2041 000019BB [0200000000000000] 
  2042                                  .L_exit:
  2043 000019C3 C9                      	leave
  2044 000019C4 C22000                  	ret AND_KILL_FRAME(2)
  2045                                  
  2046                                  L_code_ptr_raw_equal_qq:
  2047 000019C7 C8000000                        enter 0, 0
  2048 000019CB 48837D1802                      cmp COUNT, 2
  2049 000019D0 0F8566050000                    jne L_error_arg_count_2
  2050 000019D6 488B7520                        mov rsi, PARAM(0)
  2051                                          assert_fraction(rsi)
    53 000019DA 803E12              <1>  cmp byte [%1], %2
    54 000019DD 0F85F8050000        <1>  jne L_error_incorrect_type
  2052 000019E3 488B7D28                        mov rdi, PARAM(1)
  2053                                          assert_fraction(rdi)
    53 000019E7 803F12              <1>  cmp byte [%1], %2
    54 000019EA 0F85EB050000        <1>  jne L_error_incorrect_type
  2054 000019F0 488B4601                        mov rax, qword [rsi + 1] ; num1
  2055 000019F4 4899                            cqo
  2056 000019F6 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2057 000019FA 4889C1                          mov rcx, rax
  2058 000019FD 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  2059 00001A01 4899                            cqo
  2060 00001A03 48F76F01                        imul qword [rdi + 1]          ; num2
  2061 00001A07 4829C1                          sub rcx, rax
  2062 00001A0A 750C                            jne .L_false
  2063 00001A0C 48B8-                           mov rax, sob_boolean_true
  2063 00001A0E [0300000000000000] 
  2064 00001A16 EB0A                            jmp .L_exit
  2065                                  .L_false:
  2066 00001A18 48B8-                           mov rax, sob_boolean_false
  2066 00001A1A [0200000000000000] 
  2067                                  .L_exit:
  2068 00001A22 C9                              leave
  2069 00001A23 C22000                          ret AND_KILL_FRAME(2)
  2070                                  
  2071                                  L_code_ptr_quotient:
  2072 00001A26 C8000000                        enter 0, 0
  2073 00001A2A 48837D1802                      cmp COUNT, 2
  2074 00001A2F 0F8507050000                    jne L_error_arg_count_2
  2075 00001A35 488B7520                        mov rsi, PARAM(0)
  2076                                          assert_integer(rsi)
    53 00001A39 803E11              <1>  cmp byte [%1], %2
    54 00001A3C 0F8599050000        <1>  jne L_error_incorrect_type
  2077 00001A42 488B7D28                        mov rdi, PARAM(1)
  2078                                          assert_integer(rdi)
    53 00001A46 803F11              <1>  cmp byte [%1], %2
    54 00001A49 0F858C050000        <1>  jne L_error_incorrect_type
  2079 00001A4F 488B4601                        mov rax, qword [rsi + 1]
  2080 00001A53 488B5F01                        mov rbx, qword [rdi + 1]
  2081 00001A57 4883FB00                        cmp rbx, 0
  2082 00001A5B 0F84AB050000                    je L_error_division_by_zero
  2083 00001A61 4899                            cqo
  2084 00001A63 48F7FB                          idiv rbx
  2085 00001A66 4889C7                          mov rdi, rax
  2086 00001A69 E8E8030000                      call make_integer
  2087 00001A6E C9                              leave
  2088 00001A6F C22000                          ret AND_KILL_FRAME(2)
  2089                                          
  2090                                  L_code_ptr_remainder:
  2091 00001A72 C8000000                        enter 0, 0
  2092 00001A76 48837D1802                      cmp COUNT, 2
  2093 00001A7B 0F85BB040000                    jne L_error_arg_count_2
  2094 00001A81 488B7520                        mov rsi, PARAM(0)
  2095                                          assert_integer(rsi)
    53 00001A85 803E11              <1>  cmp byte [%1], %2
    54 00001A88 0F854D050000        <1>  jne L_error_incorrect_type
  2096 00001A8E 488B7D28                        mov rdi, PARAM(1)
  2097                                          assert_integer(rdi)
    53 00001A92 803F11              <1>  cmp byte [%1], %2
    54 00001A95 0F8540050000        <1>  jne L_error_incorrect_type
  2098 00001A9B 488B4601                        mov rax, qword [rsi + 1]
  2099 00001A9F 488B5F01                        mov rbx, qword [rdi + 1]
  2100 00001AA3 4883FB00                        cmp rbx, 0
  2101 00001AA7 0F845F050000                    je L_error_division_by_zero
  2102 00001AAD 4899                            cqo
  2103 00001AAF 48F7FB                          idiv rbx
  2104 00001AB2 4889D7                          mov rdi, rdx
  2105 00001AB5 E89C030000                      call make_integer
  2106 00001ABA C9                              leave
  2107 00001ABB C22000                          ret AND_KILL_FRAME(2)
  2108                                  
  2109                                  L_code_ptr_set_car:
  2110 00001ABE C8000000                        enter 0, 0
  2111 00001AC2 48837D1802                      cmp COUNT, 2
  2112 00001AC7 0F856F040000                    jne L_error_arg_count_2
  2113 00001ACD 488B4520                        mov rax, PARAM(0)
  2114                                          assert_pair(rax)
    53 00001AD1 803821              <1>  cmp byte [%1], %2
    54 00001AD4 0F8501050000        <1>  jne L_error_incorrect_type
  2115 00001ADA 488B5D28                        mov rbx, PARAM(1)
  2116 00001ADE 48895801                        mov SOB_PAIR_CAR(rax), rbx
  2117 00001AE2 48B8-                           mov rax, sob_void
  2117 00001AE4 [0000000000000000] 
  2118 00001AEC C9                              leave
  2119 00001AED C22000                          ret AND_KILL_FRAME(2)
  2120                                  
  2121                                  L_code_ptr_set_cdr:
  2122 00001AF0 C8000000                        enter 0, 0
  2123 00001AF4 48837D1802                      cmp COUNT, 2
  2124 00001AF9 0F853D040000                    jne L_error_arg_count_2
  2125 00001AFF 488B4520                        mov rax, PARAM(0)
  2126                                          assert_pair(rax)
    53 00001B03 803821              <1>  cmp byte [%1], %2
    54 00001B06 0F85CF040000        <1>  jne L_error_incorrect_type
  2127 00001B0C 488B5D28                        mov rbx, PARAM(1)
  2128 00001B10 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2129 00001B14 48B8-                           mov rax, sob_void
  2129 00001B16 [0000000000000000] 
  2130 00001B1E C9                              leave
  2131 00001B1F C22000                          ret AND_KILL_FRAME(2)
  2132                                  
  2133                                  L_code_ptr_string_ref:
  2134 00001B22 C8000000                        enter 0, 0
  2135 00001B26 48837D1802                      cmp COUNT, 2
  2136 00001B2B 0F850B040000                    jne L_error_arg_count_2
  2137 00001B31 488B7D20                        mov rdi, PARAM(0)
  2138                                          assert_string(rdi)
    53 00001B35 803F03              <1>  cmp byte [%1], %2
    54 00001B38 0F859D040000        <1>  jne L_error_incorrect_type
  2139 00001B3E 488B7528                        mov rsi, PARAM(1)
  2140                                          assert_integer(rsi)
    53 00001B42 803E11              <1>  cmp byte [%1], %2
    54 00001B45 0F8590040000        <1>  jne L_error_incorrect_type
  2141 00001B4B 488B5701                        mov rdx, qword [rdi + 1]
  2142 00001B4F 488B4E01                        mov rcx, qword [rsi + 1]
  2143 00001B53 4839D1                          cmp rcx, rdx
  2144 00001B56 0F8D14030000                    jge L_error_integer_range
  2145 00001B5C 4883F900                        cmp rcx, 0
  2146 00001B60 0F8C0A030000                    jl L_error_integer_range
  2147 00001B66 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  2148 00001B6A BF02000000                      mov rdi, 2
  2149 00001B6F E865E7FFFF                      call malloc
  2150 00001B74 C60002                          mov byte [rax], T_char
  2151 00001B77 885801                          mov byte [rax + 1], bl
  2152 00001B7A C9                              leave
  2153 00001B7B C22000                          ret AND_KILL_FRAME(2)
  2154                                  
  2155                                  L_code_ptr_vector_ref:
  2156 00001B7E C8000000                        enter 0, 0
  2157 00001B82 48837D1802                      cmp COUNT, 2
  2158 00001B87 0F85AF030000                    jne L_error_arg_count_2
  2159 00001B8D 488B7D20                        mov rdi, PARAM(0)
  2160                                          assert_vector(rdi)
    53 00001B91 803F22              <1>  cmp byte [%1], %2
    54 00001B94 0F8541040000        <1>  jne L_error_incorrect_type
  2161 00001B9A 488B7528                        mov rsi, PARAM(1)
  2162                                          assert_integer(rsi)
    53 00001B9E 803E11              <1>  cmp byte [%1], %2
    54 00001BA1 0F8534040000        <1>  jne L_error_incorrect_type
  2163 00001BA7 488B5701                        mov rdx, qword [rdi + 1]
  2164 00001BAB 488B4E01                        mov rcx, qword [rsi + 1]
  2165 00001BAF 4839D1                          cmp rcx, rdx
  2166 00001BB2 0F8DB8020000                    jge L_error_integer_range
  2167 00001BB8 4883F900                        cmp rcx, 0
  2168 00001BBC 0F8CAE020000                    jl L_error_integer_range
  2169 00001BC2 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2170 00001BC7 C9                              leave
  2171 00001BC8 C22000                          ret AND_KILL_FRAME(2)
  2172                                  
  2173                                  L_code_ptr_vector_set:
  2174 00001BCB C8000000                        enter 0, 0
  2175 00001BCF 48837D1803                      cmp COUNT, 3
  2176 00001BD4 0F85CC030000                    jne L_error_arg_count_3
  2177 00001BDA 488B7D20                        mov rdi, PARAM(0)
  2178                                          assert_vector(rdi)
    53 00001BDE 803F22              <1>  cmp byte [%1], %2
    54 00001BE1 0F85F4030000        <1>  jne L_error_incorrect_type
  2179 00001BE7 488B7528                        mov rsi, PARAM(1)
  2180                                          assert_integer(rsi)
    53 00001BEB 803E11              <1>  cmp byte [%1], %2
    54 00001BEE 0F85E7030000        <1>  jne L_error_incorrect_type
  2181 00001BF4 488B5701                        mov rdx, qword [rdi + 1]
  2182 00001BF8 488B4E01                        mov rcx, qword [rsi + 1]
  2183 00001BFC 4839D1                          cmp rcx, rdx
  2184 00001BFF 0F8D6B020000                    jge L_error_integer_range
  2185 00001C05 4883F900                        cmp rcx, 0
  2186 00001C09 0F8C61020000                    jl L_error_integer_range
  2187 00001C0F 488B4530                        mov rax, PARAM(2)
  2188 00001C13 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2189 00001C18 48B8-                           mov rax, sob_void
  2189 00001C1A [0000000000000000] 
  2190 00001C22 C9                              leave
  2191 00001C23 C22800                          ret AND_KILL_FRAME(3)
  2192                                  
  2193                                  L_code_ptr_string_set:
  2194 00001C26 C8000000                        enter 0, 0
  2195 00001C2A 48837D1803                      cmp COUNT, 3
  2196 00001C2F 0F8571030000                    jne L_error_arg_count_3
  2197 00001C35 488B7D20                        mov rdi, PARAM(0)
  2198                                          assert_string(rdi)
    53 00001C39 803F03              <1>  cmp byte [%1], %2
    54 00001C3C 0F8599030000        <1>  jne L_error_incorrect_type
  2199 00001C42 488B7528                        mov rsi, PARAM(1)
  2200                                          assert_integer(rsi)
    53 00001C46 803E11              <1>  cmp byte [%1], %2
    54 00001C49 0F858C030000        <1>  jne L_error_incorrect_type
  2201 00001C4F 488B5701                        mov rdx, qword [rdi + 1]
  2202 00001C53 488B4E01                        mov rcx, qword [rsi + 1]
  2203 00001C57 4839D1                          cmp rcx, rdx
  2204 00001C5A 0F8D10020000                    jge L_error_integer_range
  2205 00001C60 4883F900                        cmp rcx, 0
  2206 00001C64 0F8C06020000                    jl L_error_integer_range
  2207 00001C6A 488B4530                        mov rax, PARAM(2)
  2208                                          assert_char(rax)
    53 00001C6E 803802              <1>  cmp byte [%1], %2
    54 00001C71 0F8564030000        <1>  jne L_error_incorrect_type
  2209 00001C77 8A4001                          mov al, byte [rax + 1]
  2210 00001C7A 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2211 00001C7E 48B8-                           mov rax, sob_void
  2211 00001C80 [0000000000000000] 
  2212 00001C88 C9                              leave
  2213 00001C89 C22800                          ret AND_KILL_FRAME(3)
  2214                                  
  2215                                  L_code_ptr_make_vector:
  2216 00001C8C C8000000                        enter 0, 0
  2217 00001C90 48837D1802                      cmp COUNT, 2
  2218 00001C95 0F85A1020000                    jne L_error_arg_count_2
  2219 00001C9B 488B4D20                        mov rcx, PARAM(0)
  2220                                          assert_integer(rcx)
    53 00001C9F 803911              <1>  cmp byte [%1], %2
    54 00001CA2 0F8533030000        <1>  jne L_error_incorrect_type
  2221 00001CA8 488B4901                        mov rcx, qword [rcx + 1]
  2222 00001CAC 4883F900                        cmp rcx, 0
  2223 00001CB0 0F8CBA010000                    jl L_error_integer_range
  2224 00001CB6 488B5528                        mov rdx, PARAM(1)
  2225 00001CBA 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2226 00001CC2 E812E6FFFF                      call malloc
  2227 00001CC7 C60022                          mov byte [rax], T_vector
  2228 00001CCA 48894801                        mov qword [rax + 1], rcx
  2229 00001CCE 41B800000000                    mov r8, 0
  2230                                  .L0:
  2231 00001CD4 4939C8                          cmp r8, rcx
  2232 00001CD7 740A                            je .L1
  2233 00001CD9 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2234 00001CDE 49FFC0                          inc r8
  2235 00001CE1 EBF1                            jmp .L0
  2236                                  .L1:
  2237 00001CE3 C9                              leave
  2238 00001CE4 C22000                          ret AND_KILL_FRAME(2)
  2239                                          
  2240                                  L_code_ptr_make_string:
  2241 00001CE7 C8000000                        enter 0, 0
  2242 00001CEB 48837D1802                      cmp COUNT, 2
  2243 00001CF0 0F8546020000                    jne L_error_arg_count_2
  2244 00001CF6 488B4D20                        mov rcx, PARAM(0)
  2245                                          assert_integer(rcx)
    53 00001CFA 803911              <1>  cmp byte [%1], %2
    54 00001CFD 0F85D8020000        <1>  jne L_error_incorrect_type
  2246 00001D03 488B4901                        mov rcx, qword [rcx + 1]
  2247 00001D07 4883F900                        cmp rcx, 0
  2248 00001D0B 0F8C5F010000                    jl L_error_integer_range
  2249 00001D11 488B5528                        mov rdx, PARAM(1)
  2250                                          assert_char(rdx)
    53 00001D15 803A02              <1>  cmp byte [%1], %2
    54 00001D18 0F85BD020000        <1>  jne L_error_incorrect_type
  2251 00001D1E 8A5201                          mov dl, byte [rdx + 1]
  2252 00001D21 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2253 00001D25 E8AFE5FFFF                      call malloc
  2254 00001D2A C60003                          mov byte [rax], T_string
  2255 00001D2D 48894801                        mov qword [rax + 1], rcx
  2256 00001D31 41B800000000                    mov r8, 0
  2257                                  .L0:
  2258 00001D37 4939C8                          cmp r8, rcx
  2259 00001D3A 740A                            je .L1
  2260 00001D3C 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2261 00001D41 49FFC0                          inc r8
  2262 00001D44 EBF1                            jmp .L0
  2263                                  .L1:
  2264 00001D46 C9                              leave
  2265 00001D47 C22000                          ret AND_KILL_FRAME(2)
  2266                                  
  2267                                  L_code_ptr_numerator:
  2268 00001D4A C8000000                        enter 0, 0
  2269 00001D4E 48837D1801                      cmp COUNT, 1
  2270 00001D53 0F85AE010000                    jne L_error_arg_count_1
  2271 00001D59 488B4520                        mov rax, PARAM(0)
  2272                                          assert_fraction(rax)
    53 00001D5D 803812              <1>  cmp byte [%1], %2
    54 00001D60 0F8575020000        <1>  jne L_error_incorrect_type
  2273 00001D66 488B7801                        mov rdi, qword [rax + 1]
  2274 00001D6A E8E7000000                      call make_integer
  2275 00001D6F C9                              leave
  2276 00001D70 C21800                          ret AND_KILL_FRAME(1)
  2277                                          
  2278                                  L_code_ptr_denominator:
  2279 00001D73 C8000000                        enter 0, 0
  2280 00001D77 48837D1801                      cmp COUNT, 1
  2281 00001D7C 0F8585010000                    jne L_error_arg_count_1
  2282 00001D82 488B4520                        mov rax, PARAM(0)
  2283                                          assert_fraction(rax)
    53 00001D86 803812              <1>  cmp byte [%1], %2
    54 00001D89 0F854C020000        <1>  jne L_error_incorrect_type
  2284 00001D8F 488B7809                        mov rdi, qword [rax + 1 + 8]
  2285 00001D93 E8BE000000                      call make_integer
  2286 00001D98 C9                              leave
  2287 00001D99 C21800                          ret AND_KILL_FRAME(1)
  2288                                  
  2289                                  L_code_ptr_is_eq:
  2290 00001D9C C8000000                	enter 0, 0
  2291 00001DA0 48837D1802              	cmp COUNT, 2
  2292 00001DA5 0F8591010000            	jne L_error_arg_count_2
  2293 00001DAB 488B7D20                	mov rdi, PARAM(0)
  2294 00001DAF 488B7528                	mov rsi, PARAM(1)
  2295 00001DB3 4839F7                  	cmp rdi, rsi
  2296 00001DB6 746C                    	je .L_eq_true
  2297 00001DB8 8A17                    	mov dl, byte [rdi]
  2298 00001DBA 3A16                    	cmp dl, byte [rsi]
  2299 00001DBC 7572                    	jne .L_eq_false
  2300 00001DBE 80FA02                  	cmp dl, T_char
  2301 00001DC1 7459                    	je .L_char
  2302 00001DC3 80FA41                  	cmp dl, T_interned_symbol
  2303 00001DC6 7440                    	je .L_interned_symbol
  2304 00001DC8 80FA42                          cmp dl, T_uninterned_symbol
  2305 00001DCB 7443                            je .L_uninterned_symbol
  2306 00001DCD 80FA13                  	cmp dl, T_real
  2307 00001DD0 742E                    	je .L_real
  2308 00001DD2 80FA12                  	cmp dl, T_fraction
  2309 00001DD5 7413                    	je .L_fraction
  2310 00001DD7 80FA11                          cmp dl, T_integer
  2311 00001DDA 7402                            je .L_integer
  2312 00001DDC EB52                    	jmp .L_eq_false
  2313                                  .L_integer:
  2314 00001DDE 488B4601                        mov rax, qword [rsi + 1]
  2315 00001DE2 483B4701                        cmp rax, qword [rdi + 1]
  2316 00001DE6 7548                            jne .L_eq_false
  2317 00001DE8 EB3A                            jmp .L_eq_true
  2318                                  .L_fraction:
  2319 00001DEA 488B4601                	mov rax, qword [rsi + 1]
  2320 00001DEE 483B4701                	cmp rax, qword [rdi + 1]
  2321 00001DF2 753C                    	jne .L_eq_false
  2322 00001DF4 488B4609                	mov rax, qword [rsi + 1 + 8]
  2323 00001DF8 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2324 00001DFC 7532                    	jne .L_eq_false
  2325 00001DFE EB24                    	jmp .L_eq_true
  2326                                  .L_real:
  2327 00001E00 488B4601                	mov rax, qword [rsi + 1]
  2328 00001E04 483B4701                	cmp rax, qword [rdi + 1]
  2329                                  .L_interned_symbol:
  2330                                  	; never reached, because interned_symbols are static!
  2331                                  	; but I'm keeping it in case, I'll ever change
  2332                                  	; the implementation
  2333 00001E08 488B4601                	mov rax, qword [rsi + 1]
  2334 00001E0C 483B4701                	cmp rax, qword [rdi + 1]
  2335                                  .L_uninterned_symbol:
  2336 00001E10 4C8B4701                        mov r8, qword [rdi + 1]
  2337 00001E14 4C3B4601                        cmp r8, qword [rsi + 1]
  2338 00001E18 7516                            jne .L_eq_false
  2339 00001E1A EB08                            jmp .L_eq_true
  2340                                  .L_char:
  2341 00001E1C 8A5E01                  	mov bl, byte [rsi + 1]
  2342 00001E1F 3A5F01                  	cmp bl, byte [rdi + 1]
  2343 00001E22 750C                    	jne .L_eq_false
  2344                                  .L_eq_true:
  2345 00001E24 48B8-                   	mov rax, sob_boolean_true
  2345 00001E26 [0300000000000000] 
  2346 00001E2E EB0A                    	jmp .L_eq_exit
  2347                                  .L_eq_false:
  2348 00001E30 48B8-                   	mov rax, sob_boolean_false
  2348 00001E32 [0200000000000000] 
  2349                                  .L_eq_exit:
  2350 00001E3A C9                      	leave
  2351 00001E3B C22000                  	ret AND_KILL_FRAME(2)
  2352                                  
  2353                                  make_real:
  2354 00001E3E C8000000                        enter 0, 0
  2355 00001E42 BF09000000                      mov rdi, (1 + 8)
  2356 00001E47 E88DE4FFFF                      call malloc
  2357 00001E4C C60013                          mov byte [rax], T_real
  2358 00001E4F F20F114001                      movsd qword [rax + 1], xmm0
  2359 00001E54 C9                              leave 
  2360 00001E55 C3                              ret
  2361                                          
  2362                                  make_integer:
  2363 00001E56 C8000000                        enter 0, 0
  2364 00001E5A 4889FE                          mov rsi, rdi
  2365 00001E5D BF09000000                      mov rdi, (1 + 8)
  2366 00001E62 E872E4FFFF                      call malloc
  2367 00001E67 C60011                          mov byte [rax], T_integer
  2368 00001E6A 48897001                        mov qword [rax + 1], rsi
  2369 00001E6E C9                              leave
  2370 00001E6F C3                              ret
  2371                                          
  2372                                  L_error_integer_range:
  2373 00001E70 488B3C25[00000000]              mov rdi, qword [stderr]
  2374 00001E78 48BE-                           mov rsi, fmt_integer_range
  2374 00001E7A [0904000000000000] 
  2375 00001E82 B800000000                      mov rax, 0
  2376                                          ENTER
    44 00001E87 C8000000            <1>  enter 0, 0
    45 00001E8B 4883E4F0            <1>  and rsp, ~15
  2377 00001E8F E8(00000000)                    call fprintf
  2378                                          LEAVE
    49 00001E94 C9                  <1>  leave
  2379 00001E95 48C7C0FBFFFFFF                  mov rax, -5
  2380 00001E9C E8(00000000)                    call exit
  2381                                  
  2382                                  L_error_arg_negative:
  2383 00001EA1 488B3C25[00000000]              mov rdi, qword [stderr]
  2384 00001EA9 48BE-                           mov rsi, fmt_arg_negative
  2384 00001EAB [E102000000000000] 
  2385 00001EB3 B800000000                      mov rax, 0
  2386                                          ENTER
    44 00001EB8 C8000000            <1>  enter 0, 0
    45 00001EBC 4883E4F0            <1>  and rsp, ~15
  2387 00001EC0 E8(00000000)                    call fprintf
  2388                                          LEAVE
    49 00001EC5 C9                  <1>  leave
  2389 00001EC6 48C7C0FDFFFFFF                  mov rax, -3
  2390 00001ECD E8(00000000)                    call exit
  2391                                  
  2392                                  L_error_arg_count_0:
  2393 00001ED2 488B3C25[00000000]              mov rdi, qword [stderr]
  2394 00001EDA 48BE-                           mov rsi, fmt_arg_count_0
  2394 00001EDC [0703000000000000] 
  2395 00001EE4 488B5518                        mov rdx, COUNT
  2396 00001EE8 B800000000                      mov rax, 0
  2397                                          ENTER
    44 00001EED C8000000            <1>  enter 0, 0
    45 00001EF1 4883E4F0            <1>  and rsp, ~15
  2398 00001EF5 E8(00000000)                    call fprintf
  2399                                          LEAVE
    49 00001EFA C9                  <1>  leave
  2400 00001EFB 48C7C0FDFFFFFF                  mov rax, -3
  2401 00001F02 E8(00000000)                    call exit
  2402                                  
  2403                                  L_error_arg_count_1:
  2404 00001F07 488B3C25[00000000]              mov rdi, qword [stderr]
  2405 00001F0F 48BE-                           mov rsi, fmt_arg_count_1
  2405 00001F11 [2F03000000000000] 
  2406 00001F19 488B5518                        mov rdx, COUNT
  2407 00001F1D B800000000                      mov rax, 0
  2408                                          ENTER
    44 00001F22 C8000000            <1>  enter 0, 0
    45 00001F26 4883E4F0            <1>  and rsp, ~15
  2409 00001F2A E8(00000000)                    call fprintf
  2410                                          LEAVE
    49 00001F2F C9                  <1>  leave
  2411 00001F30 48C7C0FDFFFFFF                  mov rax, -3
  2412 00001F37 E8(00000000)                    call exit
  2413                                  
  2414                                  L_error_arg_count_2:
  2415 00001F3C 488B3C25[00000000]              mov rdi, qword [stderr]
  2416 00001F44 48BE-                           mov rsi, fmt_arg_count_2
  2416 00001F46 [9503000000000000] 
  2417 00001F4E 488B5518                        mov rdx, COUNT
  2418 00001F52 B800000000                      mov rax, 0
  2419                                          ENTER
    44 00001F57 C8000000            <1>  enter 0, 0
    45 00001F5B 4883E4F0            <1>  and rsp, ~15
  2420 00001F5F E8(00000000)                    call fprintf
  2421                                          LEAVE
    49 00001F64 C9                  <1>  leave
  2422 00001F65 48C7C0FDFFFFFF                  mov rax, -3
  2423 00001F6C E8(00000000)                    call exit
  2424                                  
  2425                                  L_error_arg_count_12:
  2426 00001F71 488B3C25[00000000]              mov rdi, qword [stderr]
  2427 00001F79 48BE-                           mov rsi, fmt_arg_count_12
  2427 00001F7B [5503000000000000] 
  2428 00001F83 488B5518                        mov rdx, COUNT
  2429 00001F87 B800000000                      mov rax, 0
  2430                                          ENTER
    44 00001F8C C8000000            <1>  enter 0, 0
    45 00001F90 4883E4F0            <1>  and rsp, ~15
  2431 00001F94 E8(00000000)                    call fprintf
  2432                                          LEAVE
    49 00001F99 C9                  <1>  leave
  2433 00001F9A 48C7C0FDFFFFFF                  mov rax, -3
  2434 00001FA1 E8(00000000)                    call exit
  2435                                  
  2436                                  L_error_arg_count_3:
  2437 00001FA6 488B3C25[00000000]              mov rdi, qword [stderr]
  2438 00001FAE 48BE-                           mov rsi, fmt_arg_count_3
  2438 00001FB0 [BC03000000000000] 
  2439 00001FB8 488B5518                        mov rdx, COUNT
  2440 00001FBC B800000000                      mov rax, 0
  2441                                          ENTER
    44 00001FC1 C8000000            <1>  enter 0, 0
    45 00001FC5 4883E4F0            <1>  and rsp, ~15
  2442 00001FC9 E8(00000000)                    call fprintf
  2443                                          LEAVE
    49 00001FCE C9                  <1>  leave
  2444 00001FCF 48C7C0FDFFFFFF                  mov rax, -3
  2445 00001FD6 E8(00000000)                    call exit
  2446                                          
  2447                                  L_error_incorrect_type:
  2448 00001FDB 488B3C25[00000000]              mov rdi, qword [stderr]
  2449 00001FE3 48BE-                           mov rsi, fmt_type
  2449 00001FE5 [E503000000000000] 
  2450 00001FED B800000000                      mov rax, 0
  2451                                          ENTER
    44 00001FF2 C8000000            <1>  enter 0, 0
    45 00001FF6 4883E4F0            <1>  and rsp, ~15
  2452 00001FFA E8(00000000)                    call fprintf
  2453                                          LEAVE
    49 00001FFF C9                  <1>  leave
  2454 00002000 48C7C0FCFFFFFF                  mov rax, -4
  2455 00002007 E8(00000000)                    call exit
  2456                                  
  2457                                  L_error_division_by_zero:
  2458 0000200C 488B3C25[00000000]              mov rdi, qword [stderr]
  2459 00002014 48BE-                           mov rsi, fmt_division_by_zero
  2459 00002016 [2604000000000000] 
  2460 0000201E B800000000                      mov rax, 0
  2461                                          ENTER
    44 00002023 C8000000            <1>  enter 0, 0
    45 00002027 4883E4F0            <1>  and rsp, ~15
  2462 0000202B E8(00000000)                    call fprintf
  2463                                          LEAVE
    49 00002030 C9                  <1>  leave
  2464 00002031 48C7C0F8FFFFFF                  mov rax, -8
  2465 00002038 E8(00000000)                    call exit
  2466                                  
  2467                                  section .data
  2468                                  gensym_count:
  2469 000002D6 0000000000000000                dq 0
  2470                                  fmt_char:
  2471 000002DE 256300                          db `%c\0`
  2472                                  fmt_arg_negative:
  2473 000002E1 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
  2473 000002EA 7267756D656E742063-
  2473 000002F3 616E6E6F7420626520-
  2473 000002FC 6E656761746976652E-
  2473 00000305 0A00               
  2474                                  fmt_arg_count_0:
  2475 00000307 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2475 00000310 74696E67207A65726F-
  2475 00000319 20617267756D656E74-
  2475 00000322 732E20466F756E6420-
  2475 0000032B 25640A00           
  2476                                  fmt_arg_count_1:
  2477 0000032F 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2477 00000338 74696E67206F6E6520-
  2477 00000341 617267756D656E742E-
  2477 0000034A 20466F756E64202564-
  2477 00000353 0A00               
  2478                                  fmt_arg_count_12:
  2479 00000355 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2479 0000035E 74696E67206F6E6520-
  2479 00000367 726571756972656420-
  2479 00000370 616E64206F6E65206F-
  2479 00000379 7074696F6E616C2061-
  2479 00000382 7267756D656E742E20-
  2479 0000038B 466F756E642025640A-
  2479 00000394 00                 
  2480                                  fmt_arg_count_2:
  2481 00000395 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2481 0000039E 74696E672074776F20-
  2481 000003A7 617267756D656E7473-
  2481 000003B0 2E20466F756E642025-
  2481 000003B9 640A00             
  2482                                  fmt_arg_count_3:
  2483 000003BC 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2483 000003C5 74696E672074687265-
  2483 000003CE 6520617267756D656E-
  2483 000003D7 74732E20466F756E64-
  2483 000003E0 2025640A00         
  2484                                  fmt_type:
  2485 000003E5 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2485 000003EE 696F6E207061737365-
  2485 000003F7 6420696E636F727265-
  2485 00000400 637420747970650A00 
  2486                                  fmt_integer_range:
  2487 00000409 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2487 00000412 7265637420696E7465-
  2487 0000041B 6765722072616E6765-
  2487 00000424 0A00               
  2488                                  fmt_division_by_zero:
  2489 00000426 212121204469766973-             db `!!! Division by zero\n\0`
  2489 0000042F 696F6E206279207A65-
  2489 00000438 726F0A00           
  2490                                  fmt_scheme_error_part_1:
  2491 0000043C 0A2121212054686520-             db `\n!!! The procedure \0`
  2491 00000445 70726F636564757265-
  2491 0000044E 2000               
  2492                                  fmt_scheme_error_part_2:
  2493 00000450 2061736B656420746F-             db ` asked to terminate the program\n`
  2493 00000459 207465726D696E6174-
  2493 00000462 65207468652070726F-
  2493 0000046B 6772616D0A         
  2494 00000470 202020207769746820-             db `    with the following message:\n\n\0`
  2494 00000479 74686520666F6C6C6F-
  2494 00000482 77696E67206D657373-
  2494 0000048B 6167653A0A0A00     
  2495                                  fmt_scheme_error_part_3:
  2496 00000492 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2496 0000049B 210A0A00           
