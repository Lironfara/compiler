     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "return"
    97 00000007 0600000000000000        	dq 6
    98 0000000F 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
    99                                  	; L_constants + 21:
   100 00000015 03                      	db T_string	; "f?"
   101 00000016 0200000000000000        	dq 2
   102 0000001E 663F                    	db 0x66, 0x3F
   103                                  	; L_constants + 32:
   104 00000020 03                      	db T_string	; "x"
   105 00000021 0100000000000000        	dq 1
   106 00000029 78                      	db 0x78
   107                                  	; L_constants + 42:
   108 0000002A 03                      	db T_string	; "f"
   109 0000002B 0100000000000000        	dq 1
   110 00000033 66                      	db 0x66
   111                                  	; L_constants + 52:
   112 00000034 03                      	db T_string	; "y"
   113 00000035 0100000000000000        	dq 1
   114 0000003D 79                      	db 0x79
   115                                  	; L_constants + 62:
   116 0000003E 03                      	db T_string	; "z"
   117 0000003F 0100000000000000        	dq 1
   118 00000047 7A                      	db 0x7A
   119                                  	; L_constants + 72:
   120 00000048 03                      	db T_string	; "g?"
   121 00000049 0200000000000000        	dq 2
   122 00000051 673F                    	db 0x67, 0x3F
   123                                  	; L_constants + 83:
   124 00000053 03                      	db T_string	; "g"
   125 00000054 0100000000000000        	dq 1
   126 0000005C 67                      	db 0x67
   127                                  free_var_0:	; location of f
   128 0000005D [6500000000000000]      	dq .undefined_object
   129                                  .undefined_object:
   130 00000065 05                      	db T_undefined
   131 00000066 [2A00000000000000]      	dq L_constants + 42
   132                                  
   133                                  free_var_1:	; location of f?
   134 0000006E [7600000000000000]      	dq .undefined_object
   135                                  .undefined_object:
   136 00000076 05                      	db T_undefined
   137 00000077 [1500000000000000]      	dq L_constants + 21
   138                                  
   139                                  free_var_2:	; location of g
   140 0000007F [8700000000000000]      	dq .undefined_object
   141                                  .undefined_object:
   142 00000087 05                      	db T_undefined
   143 00000088 [5300000000000000]      	dq L_constants + 83
   144                                  
   145                                  free_var_3:	; location of g?
   146 00000090 [9800000000000000]      	dq .undefined_object
   147                                  .undefined_object:
   148 00000098 05                      	db T_undefined
   149 00000099 [4800000000000000]      	dq L_constants + 72
   150                                  
   151                                  free_var_4:	; location of x
   152 000000A1 [A900000000000000]      	dq .undefined_object
   153                                  .undefined_object:
   154 000000A9 05                      	db T_undefined
   155 000000AA [2000000000000000]      	dq L_constants + 32
   156                                  
   157                                  free_var_5:	; location of y
   158 000000B2 [BA00000000000000]      	dq .undefined_object
   159                                  .undefined_object:
   160 000000BA 05                      	db T_undefined
   161 000000BB [3400000000000000]      	dq L_constants + 52
   162                                  
   163                                  free_var_6:	; location of z
   164 000000C3 [CB00000000000000]      	dq .undefined_object
   165                                  .undefined_object:
   166 000000CB 05                      	db T_undefined
   167 000000CC [3E00000000000000]      	dq L_constants + 62
   168                                  
   169                                  
   170                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
   171                                  global main
   172                                  section .text
   173                                  main:
   174 00000000 C8000000                        enter 0, 0
   175 00000004 6A00                            push 0
   176 00000006 6A00                            push 0
   177 00000008 68[62010000]                    push Lend
   178 0000000D C8000000                        enter 0, 0
   179                                  
   180                                  	; preparing a non-tail-call
   181 00000011 488B0425[A1000000]      	mov rax, qword [free_var_4]	; free var x
   182 00000019 803805                  	cmp byte [rax], T_undefined
   183 0000001C 0F847E010000            	je L_error_fvar_undefined
   184 00000022 50                      	push rax
   185 00000023 6A01                    	push 1	; arg count
   186 00000025 488B0425[6E000000]      	mov rax, qword [free_var_1]	; free var f?
   187 0000002D 803805                  	cmp byte [rax], T_undefined
   188 00000030 0F846A010000            	je L_error_fvar_undefined
   189 00000036 803804                  	cmp byte [rax], T_closure
   190 00000039 0F85E5010000            	jne L_error_non_closure
   191 0000003F FF7001                  	push SOB_CLOSURE_ENV(rax)
   192 00000042 FF5009                  	call SOB_CLOSURE_CODE(rax)
   193 00000045 483D[02000000]          	cmp rax, sob_boolean_false
   194 0000004B 746D                    	je .L_if_else_0002
   195                                  	; preparing a non-tail-call
   196 0000004D 488B0425[B2000000]      	mov rax, qword [free_var_5]	; free var y
   197 00000055 803805                  	cmp byte [rax], T_undefined
   198 00000058 0F8442010000            	je L_error_fvar_undefined
   199 0000005E 50                      	push rax
   200 0000005F 6A01                    	push 1	; arg count
   201 00000061 488B0425[5D000000]      	mov rax, qword [free_var_0]	; free var f
   202 00000069 803805                  	cmp byte [rax], T_undefined
   203 0000006C 0F842E010000            	je L_error_fvar_undefined
   204 00000072 803804                  	cmp byte [rax], T_closure
   205 00000075 0F85A9010000            	jne L_error_non_closure
   206 0000007B FF7001                  	push SOB_CLOSURE_ENV(rax)
   207 0000007E FF5009                  	call SOB_CLOSURE_CODE(rax)
   208                                  
   209                                  	; preparing a non-tail-call
   210 00000081 488B0425[C3000000]      	mov rax, qword [free_var_6]	; free var z
   211 00000089 803805                  	cmp byte [rax], T_undefined
   212 0000008C 0F840E010000            	je L_error_fvar_undefined
   213 00000092 50                      	push rax
   214 00000093 6A01                    	push 1	; arg count
   215 00000095 488B0425[5D000000]      	mov rax, qword [free_var_0]	; free var f
   216 0000009D 803805                  	cmp byte [rax], T_undefined
   217 000000A0 0F84FA000000            	je L_error_fvar_undefined
   218 000000A6 803804                  	cmp byte [rax], T_closure
   219 000000A9 0F8575010000            	jne L_error_non_closure
   220 000000AF FF7001                  	push SOB_CLOSURE_ENV(rax)
   221 000000B2 FF5009                  	call SOB_CLOSURE_CODE(rax)
   222 000000B5 E9A8000000              	jmp .L_if_end_0002
   223                                  .L_if_else_0002:
   224                                  	; preparing a non-tail-call
   225 000000BA 488B0425[A1000000]      	mov rax, qword [free_var_4]	; free var x
   226 000000C2 803805                  	cmp byte [rax], T_undefined
   227 000000C5 0F84D5000000            	je L_error_fvar_undefined
   228 000000CB 50                      	push rax
   229 000000CC 6A01                    	push 1	; arg count
   230 000000CE 488B0425[90000000]      	mov rax, qword [free_var_3]	; free var g?
   231 000000D6 803805                  	cmp byte [rax], T_undefined
   232 000000D9 0F84C1000000            	je L_error_fvar_undefined
   233 000000DF 803804                  	cmp byte [rax], T_closure
   234 000000E2 0F853C010000            	jne L_error_non_closure
   235 000000E8 FF7001                  	push SOB_CLOSURE_ENV(rax)
   236 000000EB FF5009                  	call SOB_CLOSURE_CODE(rax)
   237 000000EE 483D[02000000]          	cmp rax, sob_boolean_false
   238 000000F4 7462                    	je .L_if_else_0001
   239                                  	; preparing a non-tail-call
   240 000000F6 488B0425[B2000000]      	mov rax, qword [free_var_5]	; free var y
   241 000000FE 803805                  	cmp byte [rax], T_undefined
   242 00000101 0F8499000000            	je L_error_fvar_undefined
   243 00000107 50                      	push rax
   244 00000108 6A01                    	push 1	; arg count
   245 0000010A 488B0425[7F000000]      	mov rax, qword [free_var_2]	; free var g
   246 00000112 803805                  	cmp byte [rax], T_undefined
   247 00000115 0F8485000000            	je L_error_fvar_undefined
   248 0000011B 803804                  	cmp byte [rax], T_closure
   249 0000011E 0F8500010000            	jne L_error_non_closure
   250 00000124 FF7001                  	push SOB_CLOSURE_ENV(rax)
   251 00000127 FF5009                  	call SOB_CLOSURE_CODE(rax)
   252                                  
   253                                  	; preparing a non-tail-call
   254 0000012A 488B0425[C3000000]      	mov rax, qword [free_var_6]	; free var z
   255 00000132 803805                  	cmp byte [rax], T_undefined
   256 00000135 7469                    	je L_error_fvar_undefined
   257 00000137 50                      	push rax
   258 00000138 6A01                    	push 1	; arg count
   259 0000013A 488B0425[7F000000]      	mov rax, qword [free_var_2]	; free var g
   260 00000142 803805                  	cmp byte [rax], T_undefined
   261 00000145 7459                    	je L_error_fvar_undefined
   262 00000147 803804                  	cmp byte [rax], T_closure
   263 0000014A 0F85D4000000            	jne L_error_non_closure
   264 00000150 FF7001                  	push SOB_CLOSURE_ENV(rax)
   265 00000153 FF5009                  	call SOB_CLOSURE_CODE(rax)
   266 00000156 EB0A                    	jmp .L_if_end_0001
   267                                  .L_if_else_0001:
   268 00000158 48B8-                   	mov rax, L_constants + 1
   268 0000015A [0100000000000000] 
   269                                  .L_if_end_0001:
   270                                  .L_if_end_0002:
   271                                  Lend:
   272 00000162 4889C7                  	mov rdi, rax
   273 00000165 E8B8030000              	call print_sexpr_if_not_void
   274                                  
   275 0000016A 48BF-                           mov rdi, fmt_memory_usage
   275 0000016C [6C01000000000000] 
   276 00000174 488B3425[F2010000]              mov rsi, qword [top_of_memory]
   277 0000017C 4881EE[00000000]                sub rsi, memory
   278 00000183 B800000000                      mov rax, 0
   279                                          ENTER
    44 00000188 C8000000            <1>  enter 0, 0
    45 0000018C 4883E4F0            <1>  and rsp, ~15
   280 00000190 E8(00000000)                    call printf
   281                                          LEAVE
    49 00000195 C9                  <1>  leave
   282 00000196 B800000000                      mov rax, 0
   283 0000019B E8(00000000)                    call exit
   284                                  
   285                                  L_error_fvar_undefined:
   286 000001A0 50                              push rax
   287 000001A1 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
   288 000001A9 48BE-                           mov rsi, fmt_undefined_free_var_1
   288 000001AB [D400000000000000] 
   289 000001B3 B800000000                      mov rax, 0
   290                                          ENTER
    44 000001B8 C8000000            <1>  enter 0, 0
    45 000001BC 4883E4F0            <1>  and rsp, ~15
   291 000001C0 E8(00000000)                    call fprintf
   292                                          LEAVE
    49 000001C5 C9                  <1>  leave
   293 000001C6 58                              pop rax
   294 000001C7 488B4001                        mov rax, qword [rax + 1] ; string
   295 000001CB 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
   296 000001CF BE01000000                      mov rsi, 1               ; sizeof(char)
   297 000001D4 488B5001                        mov rdx, qword [rax + 1] ; string-length
   298 000001D8 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
   299 000001E0 B800000000                      mov rax, 0
   300                                          ENTER
    44 000001E5 C8000000            <1>  enter 0, 0
    45 000001E9 4883E4F0            <1>  and rsp, ~15
   301 000001ED E8(00000000)                    call fwrite
   302                                          LEAVE
    49 000001F2 C9                  <1>  leave
   303 000001F3 488B3C25[00000000]              mov rdi, [stderr]       ; destination
   304 000001FB 48BE-                           mov rsi, fmt_undefined_free_var_2
   304 000001FD [EB00000000000000] 
   305 00000205 B800000000                      mov rax, 0
   306                                          ENTER
    44 0000020A C8000000            <1>  enter 0, 0
    45 0000020E 4883E4F0            <1>  and rsp, ~15
   307 00000212 E8(00000000)                    call fprintf
   308                                          LEAVE
    49 00000217 C9                  <1>  leave
   309 00000218 48C7C0F6FFFFFF                  mov rax, -10
   310 0000021F E8(00000000)                    call exit
   311                                  
   312                                  L_error_non_closure:
   313 00000224 488B3C25[00000000]              mov rdi, qword [stderr]
   314 0000022C 48BE-                           mov rsi, fmt_non_closure
   314 0000022E [A201000000000000] 
   315 00000236 B800000000                      mov rax, 0
   316                                          ENTER
    44 0000023B C8000000            <1>  enter 0, 0
    45 0000023F 4883E4F0            <1>  and rsp, ~15
   317 00000243 E8(00000000)                    call fprintf
   318                                          LEAVE
    49 00000248 C9                  <1>  leave
   319 00000249 48C7C0FEFFFFFF                  mov rax, -2
   320 00000250 E8(00000000)                    call exit
   321                                  
   322                                  L_error_improper_list:
   323 00000255 488B3C25[00000000]      	mov rdi, qword [stderr]
   324 0000025D 48BE-                   	mov rsi, fmt_error_improper_list
   324 0000025F [CA01000000000000] 
   325 00000267 B800000000              	mov rax, 0
   326                                          ENTER
    44 0000026C C8000000            <1>  enter 0, 0
    45 00000270 4883E4F0            <1>  and rsp, ~15
   327 00000274 E8(00000000)            	call fprintf
   328                                          LEAVE
    49 00000279 C9                  <1>  leave
   329 0000027A 48C7C0F9FFFFFF          	mov rax, -7
   330 00000281 E8(00000000)            	call exit
   331                                  
   332                                  L_error_incorrect_arity_simple:
   333 00000286 488B3C25[00000000]              mov rdi, qword [stderr]
   334 0000028E 48BE-                           mov rsi, fmt_incorrect_arity_simple
   334 00000290 [0D01000000000000] 
   335 00000298 EB12                            jmp L_error_incorrect_arity_common
   336                                  L_error_incorrect_arity_opt:
   337 0000029A 488B3C25[00000000]              mov rdi, qword [stderr]
   338 000002A2 48BE-                           mov rsi, fmt_incorrect_arity_opt
   338 000002A4 [3801000000000000] 
   339                                  L_error_incorrect_arity_common:
   340 000002AC 5A                              pop rdx
   341 000002AD 59                              pop rcx
   342 000002AE B800000000                      mov rax, 0
   343                                          ENTER
    44 000002B3 C8000000            <1>  enter 0, 0
    45 000002B7 4883E4F0            <1>  and rsp, ~15
   344 000002BB E8(00000000)                    call fprintf
   345                                          LEAVE
    49 000002C0 C9                  <1>  leave
   346 000002C1 48C7C0FAFFFFFF                  mov rax, -6
   347 000002C8 E8(00000000)                    call exit
   348                                  
   349                                  section .data
   350                                  fmt_undefined_free_var_1:
   351 000000D4 212121205468652066-             db `!!! The free variable \0`
   351 000000DD 726565207661726961-
   351 000000E6 626C652000         
   352                                  fmt_undefined_free_var_2:
   353 000000EB 207761732075736564-             db ` was used before it was defined.\n\0`
   353 000000F4 206265666F72652069-
   353 000000FD 742077617320646566-
   353 00000106 696E65642E0A00     
   354                                  fmt_incorrect_arity_simple:
   355 0000010D 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   355 00000116 74656420256C642061-
   355 0000011F 7267756D656E74732C-
   355 00000128 206275742067697665-
   355 00000131 6E20256C640A00     
   356                                  fmt_incorrect_arity_opt:
   357 00000138 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   357 00000141 746564206174206C65-
   357 0000014A 61737420256C642061-
   357 00000153 7267756D656E74732C-
   357 0000015C 206275742067697665-
   357 00000165 6E20256C640A00     
   358                                  fmt_memory_usage:
   359 0000016C 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   359 00000175 20256C642062797465-
   359 0000017E 73206F662064796E61-
   359 00000187 6D6963616C6C792D61-
   359 00000190 6C6C6F636174656420-
   359 00000199 6D656D6F72790A0A00 
   360                                  fmt_non_closure:
   361 000001A2 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   361 000001AB 7074696E6720746F20-
   361 000001B4 6170706C792061206E-
   361 000001BD 6F6E2D636C6F737572-
   361 000001C6 65210A00           
   362                                  fmt_error_improper_list:
   363 000001CA 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   363 000001D3 7267756D656E742069-
   363 000001DC 73206E6F7420612070-
   363 000001E5 726F706572206C6973-
   363 000001EE 74210A00           
   364                                  
   365                                  section .bss
   366                                  memory:
   367 00000000 <res 40000000h>         	resb gbytes(1)
   368                                  
   369                                  section .data
   370                                  top_of_memory:
   371 000001F2 [0000000000000000]              dq memory
   372                                  
   373                                  section .text
   374                                  malloc:
   375 000002CD 488B0425[F2010000]              mov rax, qword [top_of_memory]
   376 000002D5 48013C25[F2010000]              add qword [top_of_memory], rdi
   377 000002DD C3                              ret
   378                                  
   379                                  L_code_ptr_return:
   380 000002DE 48837C241002            	cmp qword [rsp + 8*2], 2
   381 000002E4 0F85461C0000            	jne L_error_arg_count_2
   382 000002EA 488B4C2418              	mov rcx, qword [rsp + 8*3]
   383                                  	assert_integer(rcx)
    53 000002EF 803911              <1>  cmp byte [%1], %2
    54 000002F2 0F85D71C0000        <1>  jne L_error_incorrect_type
   384 000002F8 488B4901                	mov rcx, qword [rcx + 1]
   385 000002FC 4883F900                	cmp rcx, 0
   386 00000300 0F8C5E1B0000            	jl L_error_integer_range
   387 00000306 488B442420              	mov rax, qword [rsp + 8*4]
   388                                  .L0:
   389 0000030B 4883F900                        cmp rcx, 0
   390 0000030F 7409                            je .L1
   391 00000311 488B6D00                	mov rbp, qword [rbp]
   392 00000315 48FFC9                  	dec rcx
   393 00000318 7FF1                    	jg .L0
   394                                  .L1:
   395 0000031A 4889EC                  	mov rsp, rbp
   396 0000031D 5D                      	pop rbp
   397 0000031E 5B                              pop rbx
   398 0000031F 488B4C2408                      mov rcx, qword [rsp + 8*1]
   399 00000324 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
   400 00000329 FFE3                    	jmp rbx
   401                                  
   402                                  L_code_ptr_make_list:
   403 0000032B C8000000                	enter 0, 0
   404 0000032F 48837D1801                      cmp COUNT, 1
   405 00000334 740C                            je .L0
   406 00000336 48837D1802                      cmp COUNT, 2
   407 0000033B 7411                            je .L1
   408 0000033D E9231C0000                      jmp L_error_arg_count_12
   409                                  .L0:
   410 00000342 49B9-                           mov r9, sob_void
   410 00000344 [0000000000000000] 
   411 0000034C EB04                            jmp .L2
   412                                  .L1:
   413 0000034E 4C8B4D28                        mov r9, PARAM(1)
   414                                  .L2:
   415 00000352 488B4D20                        mov rcx, PARAM(0)
   416                                          assert_integer(rcx)
    53 00000356 803911              <1>  cmp byte [%1], %2
    54 00000359 0F85701C0000        <1>  jne L_error_incorrect_type
   417 0000035F 488B4901                        mov rcx, qword [rcx + 1]
   418 00000363 4883F900                        cmp rcx, 0
   419 00000367 0F8C281B0000                    jl L_error_arg_negative
   420 0000036D 49B8-                           mov r8, sob_nil
   420 0000036F [0100000000000000] 
   421                                  .L3:
   422 00000377 4883F900                        cmp rcx, 0
   423 0000037B 7E1D                            jle .L4
   424 0000037D BF11000000                      mov rdi, 1 + 8 + 8
   425 00000382 E846FFFFFF                      call malloc
   426 00000387 C60021                          mov byte [rax], T_pair
   427 0000038A 4C894801                        mov qword [rax + 1], r9
   428 0000038E 4C894009                        mov qword [rax + 1 + 8], r8
   429 00000392 4989C0                          mov r8, rax
   430 00000395 48FFC9                          dec rcx
   431 00000398 EBDD                            jmp .L3
   432                                  .L4:
   433 0000039A 4C89C0                          mov rax, r8
   434 0000039D 48837D1802                      cmp COUNT, 2
   435 000003A2 7404                            je .L5
   436 000003A4 C9                              leave
   437 000003A5 C21800                          ret AND_KILL_FRAME(1)
   438                                  .L5:
   439 000003A8 C9                      	leave
   440 000003A9 C22000                  	ret AND_KILL_FRAME(2)
   441                                  
   442                                  L_code_ptr_is_primitive:
   443 000003AC C8000000                	enter 0, 0
   444 000003B0 48837D1801              	cmp COUNT, 1
   445 000003B5 0F85401B0000            	jne L_error_arg_count_1
   446 000003BB 488B4520                	mov rax, PARAM(0)
   447                                  	assert_closure(rax)
    53 000003BF 803804              <1>  cmp byte [%1], %2
    54 000003C2 0F85071C0000        <1>  jne L_error_incorrect_type
   448 000003C8 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
   449 000003CD 750C                    	jne .L_false
   450 000003CF 48B8-                   	mov rax, sob_boolean_true
   450 000003D1 [0300000000000000] 
   451 000003D9 EB0A                    	jmp .L_end
   452                                  .L_false:
   453 000003DB 48B8-                   	mov rax, sob_boolean_false
   453 000003DD [0200000000000000] 
   454                                  .L_end:
   455 000003E5 C9                      	leave
   456 000003E6 C21800                  	ret AND_KILL_FRAME(1)
   457                                  
   458                                  L_code_ptr_length:
   459 000003E9 C8000000                	enter 0, 0
   460 000003ED 48837D1801              	cmp COUNT, 1
   461 000003F2 0F85031B0000            	jne L_error_arg_count_1
   462 000003F8 488B5D20                	mov rbx, PARAM(0)
   463 000003FC BF00000000              	mov rdi, 0
   464                                  .L:
   465 00000401 803B01                  	cmp byte [rbx], T_nil
   466 00000404 7412                    	je .L_end
   467                                  	assert_pair(rbx)
    53 00000406 803B21              <1>  cmp byte [%1], %2
    54 00000409 0F85C01B0000        <1>  jne L_error_incorrect_type
   468 0000040F 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
   469 00000413 48FFC7                  	inc rdi
   470 00000416 EBE9                    	jmp .L
   471                                  .L_end:
   472 00000418 E82D1A0000              	call make_integer
   473 0000041D C9                      	leave
   474 0000041E C21800                  	ret AND_KILL_FRAME(1)
   475                                  
   476                                  L_code_ptr_break:
   477 00000421 48837C241000                    cmp qword [rsp + 8 * 2], 0
   478 00000427 0F85991A0000                    jne L_error_arg_count_0
   479 0000042D CC                              int3
   480 0000042E 48B8-                           mov rax, sob_void
   480 00000430 [0000000000000000] 
   481 00000438 C21000                          ret AND_KILL_FRAME(0)        
   482                                  
   483                                  L_code_ptr_frame:
   484 0000043B C8000000                        enter 0, 0
   485 0000043F 48837D1800                      cmp COUNT, 0
   486 00000444 0F857C1A0000                    jne L_error_arg_count_0
   487                                  
   488 0000044A 48BF-                           mov rdi, fmt_frame
   488 0000044C [FA01000000000000] 
   489 00000454 488B7500                        mov rsi, qword [rbp]    ; old rbp
   490 00000458 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
   491 0000045C 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
   492 00000460 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
   493 00000464 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
   494 00000468 6A00                            push 0
   495 0000046A 4151                            push r9
   496 0000046C 4150                            push r8                   ; we'll use it when printing the params
   497 0000046E B800000000                      mov rax, 0
   498                                          
   499                                          ENTER
    44 00000473 C8000000            <1>  enter 0, 0
    45 00000477 4883E4F0            <1>  and rsp, ~15
   500 0000047B E8(00000000)                    call printf
   501                                          LEAVE
    49 00000480 C9                  <1>  leave
   502                                  
   503                                  .L:
   504 00000481 488B0C24                        mov rcx, qword [rsp]
   505 00000485 4883F900                        cmp rcx, 0
   506 00000489 7467                            je .L_out
   507 0000048B 48BF-                           mov rdi, fmt_frame_param_prefix
   507 0000048D [3302000000000000] 
   508 00000495 488B742410                      mov rsi, qword [rsp + 8*2]
   509 0000049A B800000000                      mov rax, 0
   510                                          
   511                                          ENTER
    44 0000049F C8000000            <1>  enter 0, 0
    45 000004A3 4883E4F0            <1>  and rsp, ~15
   512 000004A7 E8(00000000)                    call printf
   513                                          LEAVE
    49 000004AC C9                  <1>  leave
   514                                  
   515 000004AD 488B0C24                        mov rcx, qword [rsp]
   516 000004B1 48FFC9                          dec rcx
   517 000004B4 48890C24                        mov qword [rsp], rcx    ; dec arg count
   518 000004B8 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
   519 000004BD 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
   520 000004C2 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
   521 000004C6 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
   522 000004CB 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
   523 000004CE E87B000000                      call print_sexpr
   524 000004D3 48BF-                           mov rdi, fmt_newline
   524 000004D5 [5F02000000000000] 
   525 000004DD B800000000                      mov rax, 0
   526                                          ENTER
    44 000004E2 C8000000            <1>  enter 0, 0
    45 000004E6 4883E4F0            <1>  and rsp, ~15
   527 000004EA E8(00000000)                    call printf
   528                                          LEAVE
    49 000004EF C9                  <1>  leave
   529 000004F0 EB8F                            jmp .L
   530                                  .L_out:
   531 000004F2 48BF-                           mov rdi, fmt_frame_continue
   531 000004F4 [4402000000000000] 
   532 000004FC B800000000                      mov rax, 0
   533                                          ENTER
    44 00000501 C8000000            <1>  enter 0, 0
    45 00000505 4883E4F0            <1>  and rsp, ~15
   534 00000509 E8(00000000)                    call printf
   535 0000050E E8(00000000)                    call getchar
   536                                          LEAVE
    49 00000513 C9                  <1>  leave
   537                                          
   538 00000514 48B8-                           mov rax, sob_void
   538 00000516 [0000000000000000] 
   539 0000051E C9                              leave
   540 0000051F C21000                          ret AND_KILL_FRAME(0)
   541                                          
   542                                  print_sexpr_if_not_void:
   543 00000522 4881FF[00000000]        	cmp rdi, sob_void
   544 00000529 7422                    	je .done
   545 0000052B E81E000000              	call print_sexpr
   546 00000530 48BF-                   	mov rdi, fmt_newline
   546 00000532 [5F02000000000000] 
   547 0000053A B800000000              	mov rax, 0
   548                                  	ENTER
    44 0000053F C8000000            <1>  enter 0, 0
    45 00000543 4883E4F0            <1>  and rsp, ~15
   549 00000547 E8(00000000)            	call printf
   550                                  	LEAVE
    49 0000054C C9                  <1>  leave
   551                                  .done:
   552 0000054D C3                      	ret
   553                                  
   554                                  section .data
   555                                  fmt_frame:
   556 000001FA 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
   556 00000203 207265742061646472-
   556 0000020C 203D2025703B206C65-
   556 00000215 7820656E76203D2025-
   556 0000021E 703B20706172616D20-
   556 00000227 636F756E74203D2025-
   556 00000230 640A00             
   557                                  fmt_frame_param_prefix:
   558 00000233 3D3D5B706172616D20-             db `==[param %d]==> \0`
   558 0000023C 25645D3D3D3E2000   
   559                                  fmt_frame_continue:
   560 00000244 486974203C456E7465-             db `Hit <Enter> to continue...\0`
   560 0000024D 723E20746F20636F6E-
   560 00000256 74696E75652E2E2E00 
   561                                  fmt_newline:
   562 0000025F 0A00                    	db `\n\0`
   563                                  fmt_void:
   564 00000261 233C766F69643E00        	db `#<void>\0`
   565                                  fmt_nil:
   566 00000269 282900                  	db `()\0`
   567                                  fmt_boolean_false:
   568 0000026C 236600                  	db `#f\0`
   569                                  fmt_boolean_true:
   570 0000026F 237400                  	db `#t\0`
   571                                  fmt_char_backslash:
   572 00000272 235C5C00                	db `#\\\\\0`
   573                                  fmt_char_dquote:
   574 00000276 235C2200                	db `#\\"\0`
   575                                  fmt_char_simple:
   576 0000027A 235C256300              	db `#\\%c\0`
   577                                  fmt_char_null:
   578 0000027F 235C6E756C00            	db `#\\nul\0`
   579                                  fmt_char_bell:
   580 00000285 235C62656C6C00          	db `#\\bell\0`
   581                                  fmt_char_backspace:
   582 0000028C 235C6261636B737061-     	db `#\\backspace\0`
   582 00000295 636500             
   583                                  fmt_char_tab:
   584 00000298 235C74616200            	db `#\\tab\0`
   585                                  fmt_char_newline:
   586 0000029E 235C6E65776C696E65-     	db `#\\newline\0`
   586 000002A7 00                 
   587                                  fmt_char_formfeed:
   588 000002A8 235C7061676500          	db `#\\page\0`
   589                                  fmt_char_return:
   590 000002AF 235C72657475726E00      	db `#\\return\0`
   591                                  fmt_char_escape:
   592 000002B8 235C65736300            	db `#\\esc\0`
   593                                  fmt_char_space:
   594 000002BE 235C737061636500        	db `#\\space\0`
   595                                  fmt_char_hex:
   596 000002C6 235C782530325800        	db `#\\x%02X\0`
   597                                  fmt_gensym:
   598 000002CE 47256C6400                      db `G%ld\0`
   599                                  fmt_closure:
   600 000002D3 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   600 000002DC 206174203078253038-
   600 000002E5 5820656E763D307825-
   600 000002EE 30385820636F64653D-
   600 000002F7 3078253038583E00   
   601                                  fmt_lparen:
   602 000002FF 2800                    	db `(\0`
   603                                  fmt_dotted_pair:
   604 00000301 202E2000                	db ` . \0`
   605                                  fmt_rparen:
   606 00000305 2900                    	db `)\0`
   607                                  fmt_space:
   608 00000307 2000                    	db ` \0`
   609                                  fmt_empty_vector:
   610 00000309 23282900                	db `#()\0`
   611                                  fmt_vector:
   612 0000030D 232800                  	db `#(\0`
   613                                  fmt_real:
   614 00000310 256600                  	db `%f\0`
   615                                  fmt_fraction:
   616 00000313 256C642F256C6400        	db `%ld/%ld\0`
   617                                  fmt_zero:
   618 0000031B 3000                    	db `0\0`
   619                                  fmt_int:
   620 0000031D 256C6400                	db `%ld\0`
   621                                  fmt_unknown_scheme_object_error:
   622 00000321 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
   622 0000032A 6F723A20556E6B6E6F-
   622 00000333 776E20536368656D65-
   622 0000033C 2D6F626A6563742028-
   622 00000345 525454492030782530-
   622 0000034E 32582920           
   623 00000352 617420616464726573-     	db `at address 0x%08X\n\n\0`
   623 0000035B 73203078253038580A-
   623 00000364 0A00               
   624                                  fmt_dquote:
   625 00000366 2200                    	db `\"\0`
   626                                  fmt_string_char:
   627 00000368 256300                          db `%c\0`
   628                                  fmt_string_char_7:
   629 0000036B 5C6100                          db `\\a\0`
   630                                  fmt_string_char_8:
   631 0000036E 5C6200                          db `\\b\0`
   632                                  fmt_string_char_9:
   633 00000371 5C7400                          db `\\t\0`
   634                                  fmt_string_char_10:
   635 00000374 5C6E00                          db `\\n\0`
   636                                  fmt_string_char_11:
   637 00000377 5C7600                          db `\\v\0`
   638                                  fmt_string_char_12:
   639 0000037A 5C6600                          db `\\f\0`
   640                                  fmt_string_char_13:
   641 0000037D 5C7200                          db `\\r\0`
   642                                  fmt_string_char_34:
   643 00000380 5C2200                          db `\\"\0`
   644                                  fmt_string_char_92:
   645 00000383 5C5C00                          db `\\\\\0`
   646                                  fmt_string_char_hex:
   647 00000386 5C7825583B00                    db `\\x%X;\0`
   648                                  
   649                                  section .text
   650                                  
   651                                  print_sexpr:
   652 0000054E C8000000                	enter 0, 0
   653 00000552 8A07                    	mov al, byte [rdi]
   654 00000554 3C00                    	cmp al, T_void
   655 00000556 7465                    	je .Lvoid
   656 00000558 3C01                    	cmp al, T_nil
   657 0000055A 7470                    	je .Lnil
   658 0000055C 3C09                    	cmp al, T_boolean_false
   659 0000055E 747B                    	je .Lboolean_false
   660 00000560 3C0A                    	cmp al, T_boolean_true
   661 00000562 0F8482000000            	je .Lboolean_true
   662 00000568 3C02                    	cmp al, T_char
   663 0000056A 0F8489000000            	je .Lchar
   664 00000570 3C41                    	cmp al, T_interned_symbol
   665 00000572 0F84BF010000            	je .Linterned_symbol
   666 00000578 3C42                            cmp al, T_uninterned_symbol
   667 0000057A 0F84E3010000                    je .Luninterned_symbol
   668 00000580 3C21                    	cmp al, T_pair
   669 00000582 0F84EE010000            	je .Lpair
   670 00000588 3C22                    	cmp al, T_vector
   671 0000058A 0F84B7020000            	je .Lvector
   672 00000590 3C04                    	cmp al, T_closure
   673 00000592 0F8485010000            	je .Lclosure
   674 00000598 3C13                    	cmp al, T_real
   675 0000059A 0F8448030000            	je .Lreal
   676 000005A0 3C12                    	cmp al, T_fraction
   677 000005A2 0F846E030000            	je .Lfraction
   678 000005A8 3C11                    	cmp al, T_integer
   679 000005AA 0F84A7030000            	je .Linteger
   680 000005B0 3C03                    	cmp al, T_string
   681 000005B2 0F84B2030000            	je .Lstring
   682                                  
   683 000005B8 E9DC040000              	jmp .Lunknown_sexpr_type
   684                                  
   685                                  .Lvoid:
   686 000005BD 48BF-                   	mov rdi, fmt_void
   686 000005BF [6102000000000000] 
   687 000005C7 E900050000              	jmp .Lemit
   688                                  
   689                                  .Lnil:
   690 000005CC 48BF-                   	mov rdi, fmt_nil
   690 000005CE [6902000000000000] 
   691 000005D6 E9F1040000              	jmp .Lemit
   692                                  
   693                                  .Lboolean_false:
   694 000005DB 48BF-                   	mov rdi, fmt_boolean_false
   694 000005DD [6C02000000000000] 
   695 000005E5 E9E2040000              	jmp .Lemit
   696                                  
   697                                  .Lboolean_true:
   698 000005EA 48BF-                   	mov rdi, fmt_boolean_true
   698 000005EC [6F02000000000000] 
   699 000005F4 E9D3040000              	jmp .Lemit
   700                                  
   701                                  .Lchar:
   702 000005F9 8A4701                  	mov al, byte [rdi + 1]
   703 000005FC 3C20                    	cmp al, ' '
   704 000005FE 7E20                    	jle .Lchar_whitespace
   705 00000600 3C5C                    	cmp al, 92 		; backslash
   706 00000602 7474                    	je .Lchar_backslash
   707 00000604 3C22                    	cmp al, '"'
   708 00000606 747F                    	je .Lchar_dquote
   709 00000608 4825FF000000            	and rax, 255
   710 0000060E 48BF-                   	mov rdi, fmt_char_simple
   710 00000610 [7A02000000000000] 
   711 00000618 4889C6                  	mov rsi, rax
   712 0000061B E9AC040000              	jmp .Lemit
   713                                  
   714                                  .Lchar_whitespace:
   715 00000620 3C00                    	cmp al, 0
   716 00000622 7472                    	je .Lchar_null
   717 00000624 3C07                    	cmp al, 7
   718 00000626 747D                    	je .Lchar_bell
   719 00000628 3C08                    	cmp al, 8
   720 0000062A 0F8484000000            	je .Lchar_backspace
   721 00000630 3C09                    	cmp al, 9
   722 00000632 0F848B000000            	je .Lchar_tab
   723 00000638 3C0A                    	cmp al, 10
   724 0000063A 0F8492000000            	je .Lchar_newline
   725 00000640 3C0C                    	cmp al, 12
   726 00000642 0F8499000000            	je .Lchar_formfeed
   727 00000648 3C0D                    	cmp al, 13
   728 0000064A 0F84A0000000            	je .Lchar_return
   729 00000650 3C1B                    	cmp al, 27
   730 00000652 0F84A7000000            	je .Lchar_escape
   731 00000658 4825FF000000            	and rax, 255
   732 0000065E 3C20                    	cmp al, ' '
   733 00000660 0F84A8000000            	je .Lchar_space
   734 00000666 48BF-                   	mov rdi, fmt_char_hex
   734 00000668 [C602000000000000] 
   735 00000670 4889C6                  	mov rsi, rax
   736 00000673 E954040000              	jmp .Lemit	
   737                                  
   738                                  .Lchar_backslash:
   739 00000678 48BF-                   	mov rdi, fmt_char_backslash
   739 0000067A [7202000000000000] 
   740 00000682 E945040000              	jmp .Lemit
   741                                  
   742                                  .Lchar_dquote:
   743 00000687 48BF-                   	mov rdi, fmt_char_dquote
   743 00000689 [7602000000000000] 
   744 00000691 E936040000              	jmp .Lemit
   745                                  
   746                                  .Lchar_null:
   747 00000696 48BF-                   	mov rdi, fmt_char_null
   747 00000698 [7F02000000000000] 
   748 000006A0 E927040000              	jmp .Lemit
   749                                  
   750                                  .Lchar_bell:
   751 000006A5 48BF-                   	mov rdi, fmt_char_bell
   751 000006A7 [8502000000000000] 
   752 000006AF E918040000              	jmp .Lemit
   753                                  
   754                                  .Lchar_backspace:
   755 000006B4 48BF-                   	mov rdi, fmt_char_backspace
   755 000006B6 [8C02000000000000] 
   756 000006BE E909040000              	jmp .Lemit
   757                                  
   758                                  .Lchar_tab:
   759 000006C3 48BF-                   	mov rdi, fmt_char_tab
   759 000006C5 [9802000000000000] 
   760 000006CD E9FA030000              	jmp .Lemit
   761                                  
   762                                  .Lchar_newline:
   763 000006D2 48BF-                   	mov rdi, fmt_char_newline
   763 000006D4 [9E02000000000000] 
   764 000006DC E9EB030000              	jmp .Lemit
   765                                  
   766                                  .Lchar_formfeed:
   767 000006E1 48BF-                   	mov rdi, fmt_char_formfeed
   767 000006E3 [A802000000000000] 
   768 000006EB E9DC030000              	jmp .Lemit
   769                                  
   770                                  .Lchar_return:
   771 000006F0 48BF-                   	mov rdi, fmt_char_return
   771 000006F2 [AF02000000000000] 
   772 000006FA E9CD030000              	jmp .Lemit
   773                                  
   774                                  .Lchar_escape:
   775 000006FF 48BF-                   	mov rdi, fmt_char_escape
   775 00000701 [B802000000000000] 
   776 00000709 E9BE030000              	jmp .Lemit
   777                                  
   778                                  .Lchar_space:
   779 0000070E 48BF-                   	mov rdi, fmt_char_space
   779 00000710 [BE02000000000000] 
   780 00000718 E9AF030000              	jmp .Lemit
   781                                  
   782                                  .Lclosure:
   783 0000071D 4889FE                  	mov rsi, qword rdi
   784 00000720 48BF-                   	mov rdi, fmt_closure
   784 00000722 [D302000000000000] 
   785 0000072A 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   786 0000072E 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   787 00000732 E995030000              	jmp .Lemit
   788                                  
   789                                  .Linterned_symbol:
   790 00000737 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   791 0000073B BE01000000              	mov rsi, 1		 ; size = 1 byte
   792 00000740 488B5701                	mov rdx, qword [rdi + 1] ; length
   793 00000744 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   794 00000748 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   795                                  	ENTER
    44 00000750 C8000000            <1>  enter 0, 0
    45 00000754 4883E4F0            <1>  and rsp, ~15
   796 00000758 E8(00000000)            	call fwrite
   797                                  	LEAVE
    49 0000075D C9                  <1>  leave
   798 0000075E E97E030000              	jmp .Lend
   799                                  
   800                                  .Luninterned_symbol:
   801 00000763 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
   802 00000767 48BF-                           mov rdi, fmt_gensym
   802 00000769 [CE02000000000000] 
   803 00000771 E956030000                      jmp .Lemit
   804                                  	
   805                                  .Lpair:
   806 00000776 57                      	push rdi
   807 00000777 48BF-                   	mov rdi, fmt_lparen
   807 00000779 [FF02000000000000] 
   808 00000781 B800000000              	mov rax, 0
   809                                          ENTER
    44 00000786 C8000000            <1>  enter 0, 0
    45 0000078A 4883E4F0            <1>  and rsp, ~15
   810 0000078E E8(00000000)            	call printf
   811                                          LEAVE
    49 00000793 C9                  <1>  leave
   812 00000794 488B3C24                	mov rdi, qword [rsp] 	; pair
   813 00000798 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   814 0000079C E8ADFDFFFF              	call print_sexpr
   815 000007A1 5F                      	pop rdi 		; pair
   816 000007A2 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   817                                  .Lcdr:
   818 000007A6 8A07                    	mov al, byte [rdi]
   819 000007A8 3C01                    	cmp al, T_nil
   820 000007AA 7447                    	je .Lcdr_nil
   821 000007AC 3C21                    	cmp al, T_pair
   822 000007AE 7462                    	je .Lcdr_pair
   823 000007B0 57                      	push rdi
   824 000007B1 48BF-                   	mov rdi, fmt_dotted_pair
   824 000007B3 [0103000000000000] 
   825 000007BB B800000000              	mov rax, 0
   826                                          ENTER
    44 000007C0 C8000000            <1>  enter 0, 0
    45 000007C4 4883E4F0            <1>  and rsp, ~15
   827 000007C8 E8(00000000)            	call printf
   828                                          LEAVE
    49 000007CD C9                  <1>  leave
   829 000007CE 5F                      	pop rdi
   830 000007CF E87AFDFFFF              	call print_sexpr
   831 000007D4 48BF-                   	mov rdi, fmt_rparen
   831 000007D6 [0503000000000000] 
   832 000007DE B800000000              	mov rax, 0
   833                                          ENTER
    44 000007E3 C8000000            <1>  enter 0, 0
    45 000007E7 4883E4F0            <1>  and rsp, ~15
   834 000007EB E8(00000000)            	call printf
   835                                          LEAVE
    49 000007F0 C9                  <1>  leave
   836 000007F1 C9                      	leave
   837 000007F2 C3                      	ret
   838                                  
   839                                  .Lcdr_nil:
   840 000007F3 48BF-                   	mov rdi, fmt_rparen
   840 000007F5 [0503000000000000] 
   841 000007FD B800000000              	mov rax, 0
   842                                          ENTER
    44 00000802 C8000000            <1>  enter 0, 0
    45 00000806 4883E4F0            <1>  and rsp, ~15
   843 0000080A E8(00000000)            	call printf
   844                                          LEAVE
    49 0000080F C9                  <1>  leave
   845 00000810 C9                      	leave
   846 00000811 C3                      	ret
   847                                  
   848                                  .Lcdr_pair:
   849 00000812 57                      	push rdi
   850 00000813 48BF-                   	mov rdi, fmt_space
   850 00000815 [0703000000000000] 
   851 0000081D B800000000              	mov rax, 0
   852                                          ENTER
    44 00000822 C8000000            <1>  enter 0, 0
    45 00000826 4883E4F0            <1>  and rsp, ~15
   853 0000082A E8(00000000)            	call printf
   854                                          LEAVE
    49 0000082F C9                  <1>  leave
   855 00000830 488B3C24                	mov rdi, qword [rsp]
   856 00000834 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   857 00000838 E811FDFFFF              	call print_sexpr
   858 0000083D 5F                      	pop rdi
   859 0000083E 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   860 00000842 E95FFFFFFF              	jmp .Lcdr
   861                                  
   862                                  .Lvector:
   863 00000847 488B4701                	mov rax, qword [rdi + 1] ; length
   864 0000084B 4883F800                	cmp rax, 0
   865 0000084F 0F8484000000            	je .Lvector_empty
   866 00000855 57                      	push rdi
   867 00000856 48BF-                   	mov rdi, fmt_vector
   867 00000858 [0D03000000000000] 
   868 00000860 B800000000              	mov rax, 0
   869                                          ENTER
    44 00000865 C8000000            <1>  enter 0, 0
    45 00000869 4883E4F0            <1>  and rsp, ~15
   870 0000086D E8(00000000)            	call printf
   871                                          LEAVE
    49 00000872 C9                  <1>  leave
   872 00000873 488B3C24                	mov rdi, qword [rsp]
   873 00000877 FF7701                  	push qword [rdi + 1]
   874 0000087A 6A01                    	push 1
   875 0000087C 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   876 00000880 E8C9FCFFFF              	call print_sexpr
   877                                  .Lvector_loop:
   878                                  	; [rsp] index
   879                                  	; [rsp + 8*1] limit
   880                                  	; [rsp + 8*2] vector
   881 00000885 488B0424                	mov rax, qword [rsp]
   882 00000889 483B442408              	cmp rax, qword [rsp + 8*1]
   883 0000088E 7436                    	je .Lvector_end
   884 00000890 48BF-                   	mov rdi, fmt_space
   884 00000892 [0703000000000000] 
   885 0000089A B800000000              	mov rax, 0
   886                                          ENTER
    44 0000089F C8000000            <1>  enter 0, 0
    45 000008A3 4883E4F0            <1>  and rsp, ~15
   887 000008A7 E8(00000000)            	call printf
   888                                          LEAVE
    49 000008AC C9                  <1>  leave
   889 000008AD 488B0424                	mov rax, qword [rsp]
   890 000008B1 488B5C2410              	mov rbx, qword [rsp + 8*2]
   891 000008B6 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   892 000008BB E88EFCFFFF              	call print_sexpr
   893 000008C0 48FF0424                	inc qword [rsp]
   894 000008C4 EBBF                    	jmp .Lvector_loop
   895                                  
   896                                  .Lvector_end:
   897 000008C6 4883C418                	add rsp, 8*3
   898 000008CA 48BF-                   	mov rdi, fmt_rparen
   898 000008CC [0503000000000000] 
   899 000008D4 E9F3010000              	jmp .Lemit	
   900                                  
   901                                  .Lvector_empty:
   902 000008D9 48BF-                   	mov rdi, fmt_empty_vector
   902 000008DB [0903000000000000] 
   903 000008E3 E9E4010000              	jmp .Lemit
   904                                  
   905                                  .Lreal:
   906 000008E8 FF7701                  	push qword [rdi + 1]
   907 000008EB F20F100424              	movsd xmm0, qword [rsp]
   908 000008F0 4883C408                	add rsp, 8*1
   909 000008F4 48BF-                   	mov rdi, fmt_real
   909 000008F6 [1003000000000000] 
   910 000008FE B801000000              	mov rax, 1
   911                                  	ENTER
    44 00000903 C8000000            <1>  enter 0, 0
    45 00000907 4883E4F0            <1>  and rsp, ~15
   912 0000090B E8(00000000)            	call printf
   913                                  	LEAVE
    49 00000910 C9                  <1>  leave
   914 00000911 E9CB010000              	jmp .Lend
   915                                  
   916                                  .Lfraction:
   917 00000916 488B7701                	mov rsi, qword [rdi + 1]
   918 0000091A 488B5709                	mov rdx, qword [rdi + 1 + 8]
   919 0000091E 4883FE00                	cmp rsi, 0
   920 00000922 7415                    	je .Lrat_zero
   921 00000924 4883FA01                	cmp rdx, 1
   922 00000928 741E                    	je .Lrat_int
   923 0000092A 48BF-                   	mov rdi, fmt_fraction
   923 0000092C [1303000000000000] 
   924 00000934 E993010000              	jmp .Lemit
   925                                  
   926                                  .Lrat_zero:
   927 00000939 48BF-                   	mov rdi, fmt_zero
   927 0000093B [1B03000000000000] 
   928 00000943 E984010000              	jmp .Lemit
   929                                  
   930                                  .Lrat_int:
   931 00000948 48BF-                   	mov rdi, fmt_int
   931 0000094A [1D03000000000000] 
   932 00000952 E975010000              	jmp .Lemit
   933                                  
   934                                  .Linteger:
   935 00000957 488B7701                	mov rsi, qword [rdi + 1]
   936 0000095B 48BF-                   	mov rdi, fmt_int
   936 0000095D [1D03000000000000] 
   937 00000965 E962010000              	jmp .Lemit
   938                                  
   939                                  .Lstring:
   940 0000096A 488D4709                	lea rax, [rdi + 1 + 8]
   941 0000096E 50                      	push rax
   942 0000096F FF7701                  	push qword [rdi + 1]
   943 00000972 48BF-                   	mov rdi, fmt_dquote
   943 00000974 [6603000000000000] 
   944 0000097C B800000000              	mov rax, 0
   945                                  	ENTER
    44 00000981 C8000000            <1>  enter 0, 0
    45 00000985 4883E4F0            <1>  and rsp, ~15
   946 00000989 E8(00000000)            	call printf
   947                                  	LEAVE
    49 0000098E C9                  <1>  leave
   948                                  .Lstring_loop:
   949                                  	; qword [rsp]: limit
   950                                  	; qword [rsp + 8*1]: char *
   951 0000098F 48833C2400              	cmp qword [rsp], 0
   952 00000994 0F84EF000000            	je .Lstring_end
   953 0000099A 488B442408              	mov rax, qword [rsp + 8*1]
   954 0000099F 8A00                    	mov al, byte [rax]
   955 000009A1 4825FF000000            	and rax, 255
   956 000009A7 3C07                    	cmp al, 7
   957 000009A9 745D                            je .Lstring_char_7
   958 000009AB 3C08                            cmp al, 8
   959 000009AD 7465                            je .Lstring_char_8
   960 000009AF 3C09                            cmp al, 9
   961 000009B1 746D                            je .Lstring_char_9
   962 000009B3 3C0A                            cmp al, 10
   963 000009B5 7475                            je .Lstring_char_10
   964 000009B7 3C0B                            cmp al, 11
   965 000009B9 747D                            je .Lstring_char_11
   966 000009BB 3C0C                            cmp al, 12
   967 000009BD 0F8481000000                    je .Lstring_char_12
   968 000009C3 3C0D                            cmp al, 13
   969 000009C5 0F8485000000                    je .Lstring_char_13
   970 000009CB 3C22                            cmp al, 34
   971 000009CD 0F8489000000                    je .Lstring_char_34
   972 000009D3 3C5C                            cmp al, 92              ;         je .Lstring_char_92
   974 000009D5 3C20                            cmp al, ' '
   975 000009D7 0F8C9A000000                    jl .Lstring_char_hex
   976 000009DD 48BF-                           mov rdi, fmt_string_char
   976 000009DF [6803000000000000] 
   977 000009E7 4889C6                          mov rsi, rax
   978                                  .Lstring_char_emit:
   979 000009EA B800000000                      mov rax, 0
   980                                          ENTER
    44 000009EF C8000000            <1>  enter 0, 0
    45 000009F3 4883E4F0            <1>  and rsp, ~15
   981 000009F7 E8(00000000)                    call printf
   982                                          LEAVE
    49 000009FC C9                  <1>  leave
   983 000009FD 48FF0C24                        dec qword [rsp]
   984 00000A01 48FF442408                      inc qword [rsp + 8*1]
   985 00000A06 EB87                            jmp .Lstring_loop
   986                                  
   987                                  .Lstring_char_7:
   988 00000A08 48BF-                           mov rdi, fmt_string_char_7
   988 00000A0A [6B03000000000000] 
   989 00000A12 EBD6                            jmp .Lstring_char_emit
   990                                  
   991                                  .Lstring_char_8:
   992 00000A14 48BF-                           mov rdi, fmt_string_char_8
   992 00000A16 [6E03000000000000] 
   993 00000A1E EBCA                            jmp .Lstring_char_emit
   994                                          
   995                                  .Lstring_char_9:
   996 00000A20 48BF-                           mov rdi, fmt_string_char_9
   996 00000A22 [7103000000000000] 
   997 00000A2A EBBE                            jmp .Lstring_char_emit
   998                                  
   999                                  .Lstring_char_10:
  1000 00000A2C 48BF-                           mov rdi, fmt_string_char_10
  1000 00000A2E [7403000000000000] 
  1001 00000A36 EBB2                            jmp .Lstring_char_emit
  1002                                  
  1003                                  .Lstring_char_11:
  1004 00000A38 48BF-                           mov rdi, fmt_string_char_11
  1004 00000A3A [7703000000000000] 
  1005 00000A42 EBA6                            jmp .Lstring_char_emit
  1006                                  
  1007                                  .Lstring_char_12:
  1008 00000A44 48BF-                           mov rdi, fmt_string_char_12
  1008 00000A46 [7A03000000000000] 
  1009 00000A4E EB9A                            jmp .Lstring_char_emit
  1010                                  
  1011                                  .Lstring_char_13:
  1012 00000A50 48BF-                           mov rdi, fmt_string_char_13
  1012 00000A52 [7D03000000000000] 
  1013 00000A5A EB8E                            jmp .Lstring_char_emit
  1014                                  
  1015                                  .Lstring_char_34:
  1016 00000A5C 48BF-                           mov rdi, fmt_string_char_34
  1016 00000A5E [8003000000000000] 
  1017 00000A66 EB82                            jmp .Lstring_char_emit
  1018                                  
  1019                                  .Lstring_char_92:
  1020 00000A68 48BF-                           mov rdi, fmt_string_char_92
  1020 00000A6A [8303000000000000] 
  1021 00000A72 E973FFFFFF                      jmp .Lstring_char_emit
  1022                                  
  1023                                  .Lstring_char_hex:
  1024 00000A77 48BF-                           mov rdi, fmt_string_char_hex
  1024 00000A79 [8603000000000000] 
  1025 00000A81 4889C6                          mov rsi, rax
  1026 00000A84 E961FFFFFF                      jmp .Lstring_char_emit        
  1027                                  
  1028                                  .Lstring_end:
  1029 00000A89 4883C410                	add rsp, 8 * 2
  1030 00000A8D 48BF-                   	mov rdi, fmt_dquote
  1030 00000A8F [6603000000000000] 
  1031 00000A97 EB33                    	jmp .Lemit
  1032                                  
  1033                                  .Lunknown_sexpr_type:
  1034 00000A99 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
  1034 00000A9B [2103000000000000] 
  1035 00000AA3 4825FF000000            	and rax, 255
  1036 00000AA9 4889C2                  	mov rdx, rax
  1037 00000AAC 4889F9                  	mov rcx, rdi
  1038 00000AAF 488B3C25[00000000]      	mov rdi, qword [stderr]
  1039 00000AB7 B800000000              	mov rax, 0
  1040                                          ENTER
    44 00000ABC C8000000            <1>  enter 0, 0
    45 00000AC0 4883E4F0            <1>  and rsp, ~15
  1041 00000AC4 E8(00000000)            	call fprintf
  1042                                          LEAVE
    49 00000AC9 C9                  <1>  leave
  1043 00000ACA C9                              leave
  1044 00000ACB C3                              ret
  1045                                  
  1046                                  .Lemit:
  1047 00000ACC B800000000              	mov rax, 0
  1048                                          ENTER
    44 00000AD1 C8000000            <1>  enter 0, 0
    45 00000AD5 4883E4F0            <1>  and rsp, ~15
  1049 00000AD9 E8(00000000)            	call printf
  1050                                          LEAVE
    49 00000ADE C9                  <1>  leave
  1051 00000ADF EB00                    	jmp .Lend
  1052                                  
  1053                                  .Lend:
  1054                                  	LEAVE
    49 00000AE1 C9                  <1>  leave
  1055 00000AE2 C3                      	ret
  1056                                  
  1057                                  ;;; rdi: address of free variable
  1058                                  ;;; rsi: address of code-pointer
  1059                                  bind_primitive:
  1060 00000AE3 C8000000                        enter 0, 0
  1061 00000AE7 57                              push rdi
  1062 00000AE8 BF11000000                      mov rdi, (1 + 8 + 8)
  1063 00000AED E8DBF7FFFF                      call malloc
  1064 00000AF2 5F                              pop rdi
  1065 00000AF3 C60004                          mov byte [rax], T_closure
  1066 00000AF6 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1067 00000AFE 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1068 00000B02 488907                          mov qword [rdi], rax
  1069 00000B05 48B8-                           mov rax, sob_void
  1069 00000B07 [0000000000000000] 
  1070 00000B0F C9                              leave
  1071 00000B10 C3                              ret
  1072                                  
  1073                                  L_code_ptr_ash:
  1074 00000B11 C8000000                        enter 0, 0
  1075 00000B15 48837D1802                      cmp COUNT, 2
  1076 00000B1A 0F8510140000                    jne L_error_arg_count_2
  1077 00000B20 488B7D20                        mov rdi, PARAM(0)
  1078                                          assert_integer(rdi)
    53 00000B24 803F11              <1>  cmp byte [%1], %2
    54 00000B27 0F85A2140000        <1>  jne L_error_incorrect_type
  1079 00000B2D 488B4D28                        mov rcx, PARAM(1)
  1080                                          assert_integer(rcx)
    53 00000B31 803911              <1>  cmp byte [%1], %2
    54 00000B34 0F8595140000        <1>  jne L_error_incorrect_type
  1081 00000B3A 488B7F01                        mov rdi, qword [rdi + 1]
  1082 00000B3E 488B4901                        mov rcx, qword [rcx + 1]
  1083 00000B42 4883F900                        cmp rcx, 0
  1084 00000B46 7C0F                            jl .L_negative
  1085                                  .L_loop_positive:
  1086 00000B48 4883F900                        cmp rcx, 0
  1087 00000B4C 741B                            je .L_exit
  1088 00000B4E 48D3E7                          sal rdi, cl
  1089 00000B51 48C1E908                        shr rcx, 8
  1090 00000B55 EBF1                            jmp .L_loop_positive
  1091                                  .L_negative:
  1092 00000B57 48F7D9                          neg rcx
  1093                                  .L_loop_negative:
  1094 00000B5A 4883F900                        cmp rcx, 0
  1095 00000B5E 7409                            je .L_exit
  1096 00000B60 48D3FF                          sar rdi, cl
  1097 00000B63 48C1E908                        shr rcx, 8
  1098 00000B67 EBF1                            jmp .L_loop_negative
  1099                                  .L_exit:
  1100 00000B69 E8DC120000                      call make_integer
  1101 00000B6E C9                              leave
  1102 00000B6F C22000                          ret AND_KILL_FRAME(2)
  1103                                  
  1104                                  L_code_ptr_logand:
  1105 00000B72 C8000000                        enter 0, 0
  1106 00000B76 48837D1802                      cmp COUNT, 2
  1107 00000B7B 0F85AF130000                    jne L_error_arg_count_2
  1108 00000B81 4C8B4520                        mov r8, PARAM(0)
  1109                                          assert_integer(r8)
    53 00000B85 41803811            <1>  cmp byte [%1], %2
    54 00000B89 0F8540140000        <1>  jne L_error_incorrect_type
  1110 00000B8F 4C8B4D28                        mov r9, PARAM(1)
  1111                                          assert_integer(r9)
    53 00000B93 41803911            <1>  cmp byte [%1], %2
    54 00000B97 0F8532140000        <1>  jne L_error_incorrect_type
  1112 00000B9D 498B7801                        mov rdi, qword [r8 + 1]
  1113 00000BA1 49237901                        and rdi, qword [r9 + 1]
  1114 00000BA5 E8A0120000                      call make_integer
  1115 00000BAA C9                              leave
  1116 00000BAB C22000                          ret AND_KILL_FRAME(2)
  1117                                  
  1118                                  L_code_ptr_logor:
  1119 00000BAE C8000000                        enter 0, 0
  1120 00000BB2 48837D1802                      cmp COUNT, 2
  1121 00000BB7 0F8573130000                    jne L_error_arg_count_2
  1122 00000BBD 4C8B4520                        mov r8, PARAM(0)
  1123                                          assert_integer(r8)
    53 00000BC1 41803811            <1>  cmp byte [%1], %2
    54 00000BC5 0F8504140000        <1>  jne L_error_incorrect_type
  1124 00000BCB 4C8B4D28                        mov r9, PARAM(1)
  1125                                          assert_integer(r9)
    53 00000BCF 41803911            <1>  cmp byte [%1], %2
    54 00000BD3 0F85F6130000        <1>  jne L_error_incorrect_type
  1126 00000BD9 498B7801                        mov rdi, qword [r8 + 1]
  1127 00000BDD 490B7901                        or rdi, qword [r9 + 1]
  1128 00000BE1 E864120000                      call make_integer
  1129 00000BE6 C9                              leave
  1130 00000BE7 C22000                          ret AND_KILL_FRAME(2)
  1131                                  
  1132                                  L_code_ptr_logxor:
  1133 00000BEA C8000000                        enter 0, 0
  1134 00000BEE 48837D1802                      cmp COUNT, 2
  1135 00000BF3 0F8537130000                    jne L_error_arg_count_2
  1136 00000BF9 4C8B4520                        mov r8, PARAM(0)
  1137                                          assert_integer(r8)
    53 00000BFD 41803811            <1>  cmp byte [%1], %2
    54 00000C01 0F85C8130000        <1>  jne L_error_incorrect_type
  1138 00000C07 4C8B4D28                        mov r9, PARAM(1)
  1139                                          assert_integer(r9)
    53 00000C0B 41803911            <1>  cmp byte [%1], %2
    54 00000C0F 0F85BA130000        <1>  jne L_error_incorrect_type
  1140 00000C15 498B7801                        mov rdi, qword [r8 + 1]
  1141 00000C19 49337901                        xor rdi, qword [r9 + 1]
  1142 00000C1D E828120000                      call make_integer
  1143                                          LEAVE
    49 00000C22 C9                  <1>  leave
  1144 00000C23 C22000                          ret AND_KILL_FRAME(2)
  1145                                  
  1146                                  L_code_ptr_lognot:
  1147 00000C26 C8000000                        enter 0, 0
  1148 00000C2A 48837D1801                      cmp COUNT, 1
  1149 00000C2F 0F85C6120000                    jne L_error_arg_count_1
  1150 00000C35 4C8B4520                        mov r8, PARAM(0)
  1151                                          assert_integer(r8)
    53 00000C39 41803811            <1>  cmp byte [%1], %2
    54 00000C3D 0F858C130000        <1>  jne L_error_incorrect_type
  1152 00000C43 498B7801                        mov rdi, qword [r8 + 1]
  1153 00000C47 48F7D7                          not rdi
  1154 00000C4A E8FB110000                      call make_integer
  1155 00000C4F C9                              leave
  1156 00000C50 C21800                          ret AND_KILL_FRAME(1)
  1157                                  
  1158                                  L_code_ptr_bin_apply:
  1159                                  ;;; fill in for final project!
  1160                                  
  1161                                  L_code_ptr_is_null:
  1162 00000C53 C8000000                        enter 0, 0
  1163 00000C57 48837D1801                      cmp COUNT, 1
  1164 00000C5C 0F8599120000                    jne L_error_arg_count_1
  1165 00000C62 488B4520                        mov rax, PARAM(0)
  1166 00000C66 803801                          cmp byte [rax], T_nil
  1167 00000C69 750C                            jne .L_false
  1168 00000C6B 48B8-                           mov rax, sob_boolean_true
  1168 00000C6D [0300000000000000] 
  1169 00000C75 EB0A                            jmp .L_end
  1170                                  .L_false:
  1171 00000C77 48B8-                           mov rax, sob_boolean_false
  1171 00000C79 [0200000000000000] 
  1172                                  .L_end:
  1173 00000C81 C9                              leave
  1174 00000C82 C21800                          ret AND_KILL_FRAME(1)
  1175                                  
  1176                                  L_code_ptr_is_pair:
  1177 00000C85 C8000000                        enter 0, 0
  1178 00000C89 48837D1801                      cmp COUNT, 1
  1179 00000C8E 0F8567120000                    jne L_error_arg_count_1
  1180 00000C94 488B4520                        mov rax, PARAM(0)
  1181 00000C98 803821                          cmp byte [rax], T_pair
  1182 00000C9B 750C                            jne .L_false
  1183 00000C9D 48B8-                           mov rax, sob_boolean_true
  1183 00000C9F [0300000000000000] 
  1184 00000CA7 EB0A                            jmp .L_end
  1185                                  .L_false:
  1186 00000CA9 48B8-                           mov rax, sob_boolean_false
  1186 00000CAB [0200000000000000] 
  1187                                  .L_end:
  1188 00000CB3 C9                              leave
  1189 00000CB4 C21800                          ret AND_KILL_FRAME(1)
  1190                                          
  1191                                  L_code_ptr_is_void:
  1192 00000CB7 C8000000                        enter 0, 0
  1193 00000CBB 48837D1801                      cmp COUNT, 1
  1194 00000CC0 0F8535120000                    jne L_error_arg_count_1
  1195 00000CC6 488B4520                        mov rax, PARAM(0)
  1196 00000CCA 803800                          cmp byte [rax], T_void
  1197 00000CCD 750C                            jne .L_false
  1198 00000CCF 48B8-                           mov rax, sob_boolean_true
  1198 00000CD1 [0300000000000000] 
  1199 00000CD9 EB0A                            jmp .L_end
  1200                                  .L_false:
  1201 00000CDB 48B8-                           mov rax, sob_boolean_false
  1201 00000CDD [0200000000000000] 
  1202                                  .L_end:
  1203 00000CE5 C9                              leave
  1204 00000CE6 C21800                          ret AND_KILL_FRAME(1)
  1205                                  
  1206                                  L_code_ptr_is_char:
  1207 00000CE9 C8000000                        enter 0, 0
  1208 00000CED 48837D1801                      cmp COUNT, 1
  1209 00000CF2 0F8503120000                    jne L_error_arg_count_1
  1210 00000CF8 488B4520                        mov rax, PARAM(0)
  1211 00000CFC 803802                          cmp byte [rax], T_char
  1212 00000CFF 750C                            jne .L_false
  1213 00000D01 48B8-                           mov rax, sob_boolean_true
  1213 00000D03 [0300000000000000] 
  1214 00000D0B EB0A                            jmp .L_end
  1215                                  .L_false:
  1216 00000D0D 48B8-                           mov rax, sob_boolean_false
  1216 00000D0F [0200000000000000] 
  1217                                  .L_end:
  1218 00000D17 C9                              leave
  1219 00000D18 C21800                          ret AND_KILL_FRAME(1)
  1220                                  
  1221                                  L_code_ptr_is_string:
  1222 00000D1B C8000000                        enter 0, 0
  1223 00000D1F 48837D1801                      cmp COUNT, 1
  1224 00000D24 0F85D1110000                    jne L_error_arg_count_1
  1225 00000D2A 488B4520                        mov rax, PARAM(0)
  1226 00000D2E 803803                          cmp byte [rax], T_string
  1227 00000D31 750C                            jne .L_false
  1228 00000D33 48B8-                           mov rax, sob_boolean_true
  1228 00000D35 [0300000000000000] 
  1229 00000D3D EB0A                            jmp .L_end
  1230                                  .L_false:
  1231 00000D3F 48B8-                           mov rax, sob_boolean_false
  1231 00000D41 [0200000000000000] 
  1232                                  .L_end:
  1233 00000D49 C9                              leave
  1234 00000D4A C21800                          ret AND_KILL_FRAME(1)
  1235                                  
  1236                                  L_code_ptr_is_symbol:
  1237 00000D4D C8000000                        enter 0, 0
  1238 00000D51 48837D1801                      cmp COUNT, 1
  1239 00000D56 0F859F110000                    jne L_error_arg_count_1
  1240 00000D5C 4C8B4520                        mov r8, PARAM(0)
  1241 00000D60 41802040                        and byte [r8], T_symbol
  1242 00000D64 740C                            jz .L_false
  1243 00000D66 48B8-                           mov rax, sob_boolean_true
  1243 00000D68 [0300000000000000] 
  1244 00000D70 EB0A                            jmp .L_exit
  1245                                  .L_false:
  1246 00000D72 48B8-                           mov rax, sob_boolean_false
  1246 00000D74 [0200000000000000] 
  1247                                  .L_exit:
  1248 00000D7C C9                              leave
  1249 00000D7D C21800                          ret AND_KILL_FRAME(1)
  1250                                  
  1251                                  L_code_ptr_is_uninterned_symbol:
  1252 00000D80 C8000000                        enter 0, 0
  1253 00000D84 48837D1801                      cmp COUNT, 1
  1254 00000D89 0F856C110000                    jne L_error_arg_count_1
  1255 00000D8F 4C8B4520                        mov r8, PARAM(0)
  1256 00000D93 41803842                        cmp byte [r8], T_uninterned_symbol
  1257 00000D97 750C                            jne .L_false
  1258 00000D99 48B8-                           mov rax, sob_boolean_true
  1258 00000D9B [0300000000000000] 
  1259 00000DA3 EB0A                            jmp .L_exit
  1260                                  .L_false:
  1261 00000DA5 48B8-                           mov rax, sob_boolean_false
  1261 00000DA7 [0200000000000000] 
  1262                                  .L_exit:
  1263 00000DAF C9                              leave
  1264 00000DB0 C21800                          ret AND_KILL_FRAME(1)
  1265                                  
  1266                                  L_code_ptr_is_interned_symbol:
  1267 00000DB3 C8000000                        enter 0, 0
  1268 00000DB7 48837D1801                      cmp COUNT, 1
  1269 00000DBC 0F8539110000                    jne L_error_arg_count_1
  1270 00000DC2 488B4520                        mov rax, PARAM(0)
  1271 00000DC6 803841                          cmp byte [rax], T_interned_symbol
  1272 00000DC9 750C                            jne .L_false
  1273 00000DCB 48B8-                           mov rax, sob_boolean_true
  1273 00000DCD [0300000000000000] 
  1274 00000DD5 EB0A                            jmp .L_end
  1275                                  .L_false:
  1276 00000DD7 48B8-                           mov rax, sob_boolean_false
  1276 00000DD9 [0200000000000000] 
  1277                                  .L_end:
  1278 00000DE1 C9                              leave
  1279 00000DE2 C21800                          ret AND_KILL_FRAME(1)
  1280                                  
  1281                                  L_code_ptr_gensym:
  1282 00000DE5 C8000000                        enter 0, 0
  1283 00000DE9 48837D1800                      cmp COUNT, 0
  1284 00000DEE 0F85D2100000                    jne L_error_arg_count_0
  1285 00000DF4 48FF0425[8C030000]              inc qword [gensym_count]
  1286 00000DFC BF09000000                      mov rdi, (1 + 8)
  1287 00000E01 E8C7F4FFFF                      call malloc
  1288 00000E06 C60042                          mov byte [rax], T_uninterned_symbol
  1289 00000E09 488B0C25[8C030000]              mov rcx, qword [gensym_count]
  1290 00000E11 48894801                        mov qword [rax + 1], rcx
  1291 00000E15 C9                              leave
  1292 00000E16 C21000                          ret AND_KILL_FRAME(0)
  1293                                  
  1294                                  L_code_ptr_is_vector:
  1295 00000E19 C8000000                        enter 0, 0
  1296 00000E1D 48837D1801                      cmp COUNT, 1
  1297 00000E22 0F85D3100000                    jne L_error_arg_count_1
  1298 00000E28 488B4520                        mov rax, PARAM(0)
  1299 00000E2C 803822                          cmp byte [rax], T_vector
  1300 00000E2F 750C                            jne .L_false
  1301 00000E31 48B8-                           mov rax, sob_boolean_true
  1301 00000E33 [0300000000000000] 
  1302 00000E3B EB0A                            jmp .L_end
  1303                                  .L_false:
  1304 00000E3D 48B8-                           mov rax, sob_boolean_false
  1304 00000E3F [0200000000000000] 
  1305                                  .L_end:
  1306 00000E47 C9                              leave
  1307 00000E48 C21800                          ret AND_KILL_FRAME(1)
  1308                                  
  1309                                  L_code_ptr_is_closure:
  1310 00000E4B C8000000                        enter 0, 0
  1311 00000E4F 48837D1801                      cmp COUNT, 1
  1312 00000E54 0F85A1100000                    jne L_error_arg_count_1
  1313 00000E5A 488B4520                        mov rax, PARAM(0)
  1314 00000E5E 803804                          cmp byte [rax], T_closure
  1315 00000E61 750C                            jne .L_false
  1316 00000E63 48B8-                           mov rax, sob_boolean_true
  1316 00000E65 [0300000000000000] 
  1317 00000E6D EB0A                            jmp .L_end
  1318                                  .L_false:
  1319 00000E6F 48B8-                           mov rax, sob_boolean_false
  1319 00000E71 [0200000000000000] 
  1320                                  .L_end:
  1321 00000E79 C9                              leave
  1322 00000E7A C21800                          ret AND_KILL_FRAME(1)
  1323                                  
  1324                                  L_code_ptr_is_real:
  1325 00000E7D C8000000                        enter 0, 0
  1326 00000E81 48837D1801                      cmp COUNT, 1
  1327 00000E86 0F856F100000                    jne L_error_arg_count_1
  1328 00000E8C 488B4520                        mov rax, PARAM(0)
  1329 00000E90 803813                          cmp byte [rax], T_real
  1330 00000E93 750C                            jne .L_false
  1331 00000E95 48B8-                           mov rax, sob_boolean_true
  1331 00000E97 [0300000000000000] 
  1332 00000E9F EB0A                            jmp .L_end
  1333                                  .L_false:
  1334 00000EA1 48B8-                           mov rax, sob_boolean_false
  1334 00000EA3 [0200000000000000] 
  1335                                  .L_end:
  1336 00000EAB C9                              leave
  1337 00000EAC C21800                          ret AND_KILL_FRAME(1)
  1338                                  
  1339                                  L_code_ptr_is_fraction:
  1340 00000EAF C8000000                        enter 0, 0
  1341 00000EB3 48837D1801                      cmp COUNT, 1
  1342 00000EB8 0F853D100000                    jne L_error_arg_count_1
  1343 00000EBE 488B4520                        mov rax, PARAM(0)
  1344 00000EC2 803812                          cmp byte [rax], T_fraction
  1345 00000EC5 750C                            jne .L_false
  1346 00000EC7 48B8-                           mov rax, sob_boolean_true
  1346 00000EC9 [0300000000000000] 
  1347 00000ED1 EB0A                            jmp .L_end
  1348                                  .L_false:
  1349 00000ED3 48B8-                           mov rax, sob_boolean_false
  1349 00000ED5 [0200000000000000] 
  1350                                  .L_end:
  1351 00000EDD C9                              leave
  1352 00000EDE C21800                          ret AND_KILL_FRAME(1)
  1353                                  
  1354                                  L_code_ptr_is_boolean:
  1355 00000EE1 C8000000                        enter 0, 0
  1356 00000EE5 48837D1801                      cmp COUNT, 1
  1357 00000EEA 0F850B100000                    jne L_error_arg_count_1
  1358 00000EF0 488B4520                        mov rax, PARAM(0)
  1359 00000EF4 8A18                            mov bl, byte [rax]
  1360 00000EF6 80E308                          and bl, T_boolean
  1361 00000EF9 740C                            je .L_false
  1362 00000EFB 48B8-                           mov rax, sob_boolean_true
  1362 00000EFD [0300000000000000] 
  1363 00000F05 EB0A                            jmp .L_end
  1364                                  .L_false:
  1365 00000F07 48B8-                           mov rax, sob_boolean_false
  1365 00000F09 [0200000000000000] 
  1366                                  .L_end:
  1367 00000F11 C9                              leave
  1368 00000F12 C21800                          ret AND_KILL_FRAME(1)
  1369                                          
  1370                                  L_code_ptr_is_boolean_false:
  1371 00000F15 C8000000                        enter 0, 0
  1372 00000F19 48837D1801                      cmp COUNT, 1
  1373 00000F1E 0F85D70F0000                    jne L_error_arg_count_1
  1374 00000F24 488B4520                        mov rax, PARAM(0)
  1375 00000F28 8A18                            mov bl, byte [rax]
  1376 00000F2A 80FB09                          cmp bl, T_boolean_false
  1377 00000F2D 750C                            jne .L_false
  1378 00000F2F 48B8-                           mov rax, sob_boolean_true
  1378 00000F31 [0300000000000000] 
  1379 00000F39 EB0A                            jmp .L_end
  1380                                  .L_false:
  1381 00000F3B 48B8-                           mov rax, sob_boolean_false
  1381 00000F3D [0200000000000000] 
  1382                                  .L_end:
  1383 00000F45 C9                              leave
  1384 00000F46 C21800                          ret AND_KILL_FRAME(1)
  1385                                  
  1386                                  L_code_ptr_is_boolean_true:
  1387 00000F49 C8000000                        enter 0, 0
  1388 00000F4D 48837D1801                      cmp COUNT, 1
  1389 00000F52 0F85A30F0000                    jne L_error_arg_count_1
  1390 00000F58 488B4520                        mov rax, PARAM(0)
  1391 00000F5C 8A18                            mov bl, byte [rax]
  1392 00000F5E 80FB0A                          cmp bl, T_boolean_true
  1393 00000F61 750C                            jne .L_false
  1394 00000F63 48B8-                           mov rax, sob_boolean_true
  1394 00000F65 [0300000000000000] 
  1395 00000F6D EB0A                            jmp .L_end
  1396                                  .L_false:
  1397 00000F6F 48B8-                           mov rax, sob_boolean_false
  1397 00000F71 [0200000000000000] 
  1398                                  .L_end:
  1399 00000F79 C9                              leave
  1400 00000F7A C21800                          ret AND_KILL_FRAME(1)
  1401                                  
  1402                                  L_code_ptr_is_number:
  1403 00000F7D C8000000                        enter 0, 0
  1404 00000F81 48837D1801                      cmp COUNT, 1
  1405 00000F86 0F856F0F0000                    jne L_error_arg_count_1
  1406 00000F8C 488B4520                        mov rax, PARAM(0)
  1407 00000F90 8A18                            mov bl, byte [rax]
  1408 00000F92 80E310                          and bl, T_number
  1409 00000F95 740C                            jz .L_false
  1410 00000F97 48B8-                           mov rax, sob_boolean_true
  1410 00000F99 [0300000000000000] 
  1411 00000FA1 EB0A                            jmp .L_end
  1412                                  .L_false:
  1413 00000FA3 48B8-                           mov rax, sob_boolean_false
  1413 00000FA5 [0200000000000000] 
  1414                                  .L_end:
  1415 00000FAD C9                              leave
  1416 00000FAE C21800                          ret AND_KILL_FRAME(1)
  1417                                          
  1418                                  L_code_ptr_is_collection:
  1419 00000FB1 C8000000                        enter 0, 0
  1420 00000FB5 48837D1801                      cmp COUNT, 1
  1421 00000FBA 0F853B0F0000                    jne L_error_arg_count_1
  1422 00000FC0 488B4520                        mov rax, PARAM(0)
  1423 00000FC4 8A18                            mov bl, byte [rax]
  1424 00000FC6 80E320                          and bl, T_collection
  1425 00000FC9 740C                            je .L_false
  1426 00000FCB 48B8-                           mov rax, sob_boolean_true
  1426 00000FCD [0300000000000000] 
  1427 00000FD5 EB0A                            jmp .L_end
  1428                                  .L_false:
  1429 00000FD7 48B8-                           mov rax, sob_boolean_false
  1429 00000FD9 [0200000000000000] 
  1430                                  .L_end:
  1431 00000FE1 C9                              leave
  1432 00000FE2 C21800                          ret AND_KILL_FRAME(1)
  1433                                  
  1434                                  L_code_ptr_cons:
  1435 00000FE5 C8000000                        enter 0, 0
  1436 00000FE9 48837D1802                      cmp COUNT, 2
  1437 00000FEE 0F853C0F0000                    jne L_error_arg_count_2
  1438 00000FF4 BF11000000                      mov rdi, (1 + 8 + 8)
  1439 00000FF9 E8CFF2FFFF                      call malloc
  1440 00000FFE C60021                          mov byte [rax], T_pair
  1441 00001001 488B5D20                        mov rbx, PARAM(0)
  1442 00001005 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1443 00001009 488B5D28                        mov rbx, PARAM(1)
  1444 0000100D 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1445 00001011 C9                              leave
  1446 00001012 C22000                          ret AND_KILL_FRAME(2)
  1447                                  
  1448                                  L_code_ptr_display_sexpr:
  1449 00001015 C8000000                        enter 0, 0
  1450 00001019 48837D1801                      cmp COUNT, 1
  1451 0000101E 0F85D70E0000                    jne L_error_arg_count_1
  1452 00001024 488B7D20                        mov rdi, PARAM(0)
  1453 00001028 E821F5FFFF                      call print_sexpr
  1454 0000102D 48B8-                           mov rax, sob_void
  1454 0000102F [0000000000000000] 
  1455 00001037 C9                              leave
  1456 00001038 C21800                          ret AND_KILL_FRAME(1)
  1457                                  
  1458                                  L_code_ptr_write_char:
  1459 0000103B C8000000                        enter 0, 0
  1460 0000103F 48837D1801                      cmp COUNT, 1
  1461 00001044 0F85B10E0000                    jne L_error_arg_count_1
  1462 0000104A 488B4520                        mov rax, PARAM(0)
  1463                                          assert_char(rax)
    53 0000104E 803802              <1>  cmp byte [%1], %2
    54 00001051 0F85780F0000        <1>  jne L_error_incorrect_type
  1464 00001057 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1465 0000105A 4825FF000000                    and rax, 255
  1466 00001060 48BF-                           mov rdi, fmt_char
  1466 00001062 [9403000000000000] 
  1467 0000106A 4889C6                          mov rsi, rax
  1468 0000106D B800000000                      mov rax, 0
  1469                                          ENTER
    44 00001072 C8000000            <1>  enter 0, 0
    45 00001076 4883E4F0            <1>  and rsp, ~15
  1470 0000107A E8(00000000)                    call printf
  1471                                          LEAVE
    49 0000107F C9                  <1>  leave
  1472 00001080 48B8-                           mov rax, sob_void
  1472 00001082 [0000000000000000] 
  1473 0000108A C9                              leave
  1474 0000108B C21800                          ret AND_KILL_FRAME(1)
  1475                                  
  1476                                  L_code_ptr_car:
  1477 0000108E C8000000                        enter 0, 0
  1478 00001092 48837D1801                      cmp COUNT, 1
  1479 00001097 0F855E0E0000                    jne L_error_arg_count_1
  1480 0000109D 488B4520                        mov rax, PARAM(0)
  1481                                          assert_pair(rax)
    53 000010A1 803821              <1>  cmp byte [%1], %2
    54 000010A4 0F85250F0000        <1>  jne L_error_incorrect_type
  1482 000010AA 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1483 000010AE C9                              leave
  1484 000010AF C21800                          ret AND_KILL_FRAME(1)
  1485                                          
  1486                                  L_code_ptr_cdr:
  1487 000010B2 C8000000                        enter 0, 0
  1488 000010B6 48837D1801                      cmp COUNT, 1
  1489 000010BB 0F853A0E0000                    jne L_error_arg_count_1
  1490 000010C1 488B4520                        mov rax, PARAM(0)
  1491                                          assert_pair(rax)
    53 000010C5 803821              <1>  cmp byte [%1], %2
    54 000010C8 0F85010F0000        <1>  jne L_error_incorrect_type
  1492 000010CE 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1493 000010D2 C9                              leave
  1494 000010D3 C21800                          ret AND_KILL_FRAME(1)
  1495                                          
  1496                                  L_code_ptr_string_length:
  1497 000010D6 C8000000                        enter 0, 0
  1498 000010DA 48837D1801                      cmp COUNT, 1
  1499 000010DF 0F85160E0000                    jne L_error_arg_count_1
  1500 000010E5 488B4520                        mov rax, PARAM(0)
  1501                                          assert_string(rax)
    53 000010E9 803803              <1>  cmp byte [%1], %2
    54 000010EC 0F85DD0E0000        <1>  jne L_error_incorrect_type
  1502 000010F2 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1503 000010F6 E84F0D0000                      call make_integer
  1504 000010FB C9                              leave
  1505 000010FC C21800                          ret AND_KILL_FRAME(1)
  1506                                  
  1507                                  L_code_ptr_vector_length:
  1508 000010FF C8000000                        enter 0, 0
  1509 00001103 48837D1801                      cmp COUNT, 1
  1510 00001108 0F85ED0D0000                    jne L_error_arg_count_1
  1511 0000110E 488B4520                        mov rax, PARAM(0)
  1512                                          assert_vector(rax)
    53 00001112 803822              <1>  cmp byte [%1], %2
    54 00001115 0F85B40E0000        <1>  jne L_error_incorrect_type
  1513 0000111B 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1514 0000111F E8260D0000                      call make_integer
  1515 00001124 C9                              leave
  1516 00001125 C21800                          ret AND_KILL_FRAME(1)
  1517                                  
  1518                                  L_code_ptr_real_to_integer:
  1519 00001128 C8000000                        enter 0, 0
  1520 0000112C 48837D1801                      cmp COUNT, 1
  1521 00001131 0F85C40D0000                    jne L_error_arg_count_1
  1522 00001137 488B5D20                        mov rbx, PARAM(0)
  1523                                          assert_real(rbx)
    53 0000113B 803B13              <1>  cmp byte [%1], %2
    54 0000113E 0F858B0E0000        <1>  jne L_error_incorrect_type
  1524 00001144 F20F104301                      movsd xmm0, qword [rbx + 1]
  1525 00001149 F2480F2CF8                      cvttsd2si rdi, xmm0
  1526 0000114E E8F70C0000                      call make_integer
  1527 00001153 C9                              leave
  1528 00001154 C21800                          ret AND_KILL_FRAME(1)
  1529                                  
  1530                                  L_code_ptr_exit:
  1531 00001157 C8000000                        enter 0, 0
  1532 0000115B 48837D1800                      cmp COUNT, 0
  1533 00001160 0F85600D0000                    jne L_error_arg_count_0
  1534 00001166 B800000000                      mov rax, 0
  1535 0000116B E8(00000000)                    call exit
  1536                                  
  1537                                  L_code_ptr_integer_to_real:
  1538 00001170 C8000000                        enter 0, 0
  1539 00001174 48837D1801                      cmp COUNT, 1
  1540 00001179 0F857C0D0000                    jne L_error_arg_count_1
  1541 0000117F 488B4520                        mov rax, PARAM(0)
  1542                                          assert_integer(rax)
    53 00001183 803811              <1>  cmp byte [%1], %2
    54 00001186 0F85430E0000        <1>  jne L_error_incorrect_type
  1543 0000118C FF7001                          push qword [rax + 1]
  1544 0000118F F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1545 00001195 E8980C0000                      call make_real
  1546 0000119A C9                              leave
  1547 0000119B C21800                          ret AND_KILL_FRAME(1)
  1548                                  
  1549                                  L_code_ptr_fraction_to_real:
  1550 0000119E C8000000                        enter 0, 0
  1551 000011A2 48837D1801                      cmp COUNT, 1
  1552 000011A7 0F854E0D0000                    jne L_error_arg_count_1
  1553 000011AD 488B4520                        mov rax, PARAM(0)
  1554                                          assert_fraction(rax)
    53 000011B1 803812              <1>  cmp byte [%1], %2
    54 000011B4 0F85150E0000        <1>  jne L_error_incorrect_type
  1555 000011BA FF7001                          push qword [rax + 1]
  1556 000011BD F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1557 000011C3 FF7009                          push qword [rax + 1 + 8]
  1558 000011C6 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1559 000011CC F20F5EC1                        divsd xmm0, xmm1
  1560 000011D0 E85D0C0000                      call make_real
  1561 000011D5 C9                              leave
  1562 000011D6 C21800                          ret AND_KILL_FRAME(1)
  1563                                  
  1564                                  L_code_ptr_char_to_integer:
  1565 000011D9 C8000000                        enter 0, 0
  1566 000011DD 48837D1801                      cmp COUNT, 1
  1567 000011E2 0F85130D0000                    jne L_error_arg_count_1
  1568 000011E8 488B4520                        mov rax, PARAM(0)
  1569                                          assert_char(rax)
    53 000011EC 803802              <1>  cmp byte [%1], %2
    54 000011EF 0F85DA0D0000        <1>  jne L_error_incorrect_type
  1570 000011F5 8A4001                          mov al, byte [rax + 1]
  1571 000011F8 4825FF000000                    and rax, 255
  1572 000011FE 4889C7                          mov rdi, rax
  1573 00001201 E8440C0000                      call make_integer
  1574 00001206 C9                              leave
  1575 00001207 C21800                          ret AND_KILL_FRAME(1)
  1576                                  
  1577                                  L_code_ptr_integer_to_fraction:
  1578 0000120A C8000000                        enter 0, 0
  1579 0000120E 48837D1801                      cmp COUNT, 1
  1580 00001213 0F85E20C0000                    jne L_error_arg_count_1
  1581 00001219 4C8B4520                        mov r8, PARAM(0)
  1582                                          assert_integer(r8)
    53 0000121D 41803811            <1>  cmp byte [%1], %2
    54 00001221 0F85A80D0000        <1>  jne L_error_incorrect_type
  1583 00001227 BF11000000                      mov rdi, (1 + 8 + 8)
  1584 0000122C E89CF0FFFF                      call malloc
  1585 00001231 498B5801                        mov rbx, qword [r8 + 1]
  1586 00001235 C60012                          mov byte [rax], T_fraction
  1587 00001238 48895801                        mov qword [rax + 1], rbx
  1588 0000123C 48C7400901000000                mov qword [rax + 1 + 8], 1
  1589 00001244 C9                              leave
  1590 00001245 C21800                          ret AND_KILL_FRAME(1)
  1591                                  
  1592                                  L_code_ptr_integer_to_char:
  1593 00001248 C8000000                        enter 0, 0
  1594 0000124C 48837D1801                      cmp COUNT, 1
  1595 00001251 0F85A40C0000                    jne L_error_arg_count_1
  1596 00001257 488B4520                        mov rax, PARAM(0)
  1597                                          assert_integer(rax)
    53 0000125B 803811              <1>  cmp byte [%1], %2
    54 0000125E 0F856B0D0000        <1>  jne L_error_incorrect_type
  1598 00001264 488B5801                        mov rbx, qword [rax + 1]
  1599 00001268 4883FB00                        cmp rbx, 0
  1600 0000126C 0F8EF20B0000                    jle L_error_integer_range
  1601 00001272 4881FB00010000                  cmp rbx, 256
  1602 00001279 0F8DE50B0000                    jge L_error_integer_range
  1603 0000127F BF02000000                      mov rdi, (1 + 1)
  1604 00001284 E844F0FFFF                      call malloc
  1605 00001289 C60002                          mov byte [rax], T_char
  1606 0000128C 885801                          mov byte [rax + 1], bl
  1607 0000128F C9                              leave
  1608 00001290 C21800                          ret AND_KILL_FRAME(1)
  1609                                  
  1610                                  L_code_ptr_trng:
  1611 00001293 C8000000                        enter 0, 0
  1612 00001297 48837D1800                      cmp COUNT, 0
  1613 0000129C 0F85240C0000                    jne L_error_arg_count_0
  1614 000012A2 480FC7F7                        rdrand rdi
  1615 000012A6 48D1EF                          shr rdi, 1
  1616 000012A9 E89C0B0000                      call make_integer
  1617 000012AE C9                              leave
  1618 000012AF C21000                          ret AND_KILL_FRAME(0)
  1619                                  
  1620                                  L_code_ptr_is_zero:
  1621 000012B2 C8000000                        enter 0, 0
  1622 000012B6 48837D1801                      cmp COUNT, 1
  1623 000012BB 0F853A0C0000                    jne L_error_arg_count_1
  1624 000012C1 488B4520                        mov rax, PARAM(0)
  1625 000012C5 803811                          cmp byte [rax], T_integer
  1626 000012C8 740F                            je .L_integer
  1627 000012CA 803812                          cmp byte [rax], T_fraction
  1628 000012CD 7413                            je .L_fraction
  1629 000012CF 803813                          cmp byte [rax], T_real
  1630 000012D2 7417                            je .L_real
  1631 000012D4 E9F60C0000                      jmp L_error_incorrect_type
  1632                                  .L_integer:
  1633 000012D9 4883780100                      cmp qword [rax + 1], 0
  1634 000012DE 7429                            je .L_zero
  1635 000012E0 EB1B                            jmp .L_not_zero
  1636                                  .L_fraction:
  1637 000012E2 4883780100                      cmp qword [rax + 1], 0
  1638 000012E7 7420                            je .L_zero
  1639 000012E9 EB12                            jmp .L_not_zero
  1640                                  .L_real:
  1641 000012EB 660FEFC0                        pxor xmm0, xmm0
  1642 000012EF FF7001                          push qword [rax + 1]
  1643 000012F2 F20F100C24                      movsd xmm1, qword [rsp]
  1644 000012F7 660F2EC1                        ucomisd xmm0, xmm1
  1645 000012FB 740C                            je .L_zero
  1646                                  .L_not_zero:
  1647 000012FD 48B8-                           mov rax, sob_boolean_false
  1647 000012FF [0200000000000000] 
  1648 00001307 EB0A                            jmp .L_end
  1649                                  .L_zero:
  1650 00001309 48B8-                           mov rax, sob_boolean_true
  1650 0000130B [0300000000000000] 
  1651                                  .L_end:
  1652 00001313 C9                              leave
  1653 00001314 C21800                          ret AND_KILL_FRAME(1)
  1654                                  
  1655                                  L_code_ptr_is_integer:
  1656 00001317 C8000000                        enter 0, 0
  1657 0000131B 48837D1801                      cmp COUNT, 1
  1658 00001320 0F85D50B0000                    jne L_error_arg_count_1
  1659 00001326 488B4520                        mov rax, PARAM(0)
  1660 0000132A 803811                          cmp byte [rax], T_integer
  1661 0000132D 750C                            jne .L_false
  1662 0000132F 48B8-                           mov rax, sob_boolean_true
  1662 00001331 [0300000000000000] 
  1663 00001339 EB0A                            jmp .L_exit
  1664                                  .L_false:
  1665 0000133B 48B8-                           mov rax, sob_boolean_false
  1665 0000133D [0200000000000000] 
  1666                                  .L_exit:
  1667 00001345 C9                              leave
  1668 00001346 C21800                          ret AND_KILL_FRAME(1)
  1669                                  
  1670                                  L_code_ptr_raw_bin_add_rr:
  1671 00001349 C8000000                        enter 0, 0
  1672 0000134D 48837D1802                      cmp COUNT, 2
  1673 00001352 0F85D80B0000                    jne L_error_arg_count_2
  1674 00001358 488B5D20                        mov rbx, PARAM(0)
  1675                                          assert_real(rbx)
    53 0000135C 803B13              <1>  cmp byte [%1], %2
    54 0000135F 0F856A0C0000        <1>  jne L_error_incorrect_type
  1676 00001365 488B4D28                        mov rcx, PARAM(1)
  1677                                          assert_real(rcx)
    53 00001369 803913              <1>  cmp byte [%1], %2
    54 0000136C 0F855D0C0000        <1>  jne L_error_incorrect_type
  1678 00001372 F20F104301                      movsd xmm0, qword [rbx + 1]
  1679 00001377 F20F104901                      movsd xmm1, qword [rcx + 1]
  1680 0000137C F20F58C1                        addsd xmm0, xmm1
  1681 00001380 E8AD0A0000                      call make_real
  1682 00001385 C9                              leave
  1683 00001386 C22000                          ret AND_KILL_FRAME(2)
  1684                                  
  1685                                  L_code_ptr_raw_bin_sub_rr:
  1686 00001389 C8000000                        enter 0, 0
  1687 0000138D 48837D1802                      cmp COUNT, 2
  1688 00001392 0F85980B0000                    jne L_error_arg_count_2
  1689 00001398 488B5D20                        mov rbx, PARAM(0)
  1690                                          assert_real(rbx)
    53 0000139C 803B13              <1>  cmp byte [%1], %2
    54 0000139F 0F852A0C0000        <1>  jne L_error_incorrect_type
  1691 000013A5 488B4D28                        mov rcx, PARAM(1)
  1692                                          assert_real(rcx)
    53 000013A9 803913              <1>  cmp byte [%1], %2
    54 000013AC 0F851D0C0000        <1>  jne L_error_incorrect_type
  1693 000013B2 F20F104301                      movsd xmm0, qword [rbx + 1]
  1694 000013B7 F20F104901                      movsd xmm1, qword [rcx + 1]
  1695 000013BC F20F5CC1                        subsd xmm0, xmm1
  1696 000013C0 E86D0A0000                      call make_real
  1697 000013C5 C9                              leave
  1698 000013C6 C22000                          ret AND_KILL_FRAME(2)
  1699                                  
  1700                                  L_code_ptr_raw_bin_mul_rr:
  1701 000013C9 C8000000                        enter 0, 0
  1702 000013CD 48837D1802                      cmp COUNT, 2
  1703 000013D2 0F85580B0000                    jne L_error_arg_count_2
  1704 000013D8 488B5D20                        mov rbx, PARAM(0)
  1705                                          assert_real(rbx)
    53 000013DC 803B13              <1>  cmp byte [%1], %2
    54 000013DF 0F85EA0B0000        <1>  jne L_error_incorrect_type
  1706 000013E5 488B4D28                        mov rcx, PARAM(1)
  1707                                          assert_real(rcx)
    53 000013E9 803913              <1>  cmp byte [%1], %2
    54 000013EC 0F85DD0B0000        <1>  jne L_error_incorrect_type
  1708 000013F2 F20F104301                      movsd xmm0, qword [rbx + 1]
  1709 000013F7 F20F104901                      movsd xmm1, qword [rcx + 1]
  1710 000013FC F20F59C1                        mulsd xmm0, xmm1
  1711 00001400 E82D0A0000                      call make_real
  1712 00001405 C9                              leave
  1713 00001406 C22000                          ret AND_KILL_FRAME(2)
  1714                                  
  1715                                  L_code_ptr_raw_bin_div_rr:
  1716 00001409 C8000000                        enter 0, 0
  1717 0000140D 48837D1802                      cmp COUNT, 2
  1718 00001412 0F85180B0000                    jne L_error_arg_count_2
  1719 00001418 488B5D20                        mov rbx, PARAM(0)
  1720                                          assert_real(rbx)
    53 0000141C 803B13              <1>  cmp byte [%1], %2
    54 0000141F 0F85AA0B0000        <1>  jne L_error_incorrect_type
  1721 00001425 488B4D28                        mov rcx, PARAM(1)
  1722                                          assert_real(rcx)
    53 00001429 803913              <1>  cmp byte [%1], %2
    54 0000142C 0F859D0B0000        <1>  jne L_error_incorrect_type
  1723 00001432 F20F104301                      movsd xmm0, qword [rbx + 1]
  1724 00001437 F20F104901                      movsd xmm1, qword [rcx + 1]
  1725 0000143C 660FEFD2                        pxor xmm2, xmm2
  1726 00001440 660F2ECA                        ucomisd xmm1, xmm2
  1727 00001444 0F84B60B0000                    je L_error_division_by_zero
  1728 0000144A F20F5EC1                        divsd xmm0, xmm1
  1729 0000144E E8DF090000                      call make_real
  1730 00001453 C9                              leave
  1731 00001454 C22000                          ret AND_KILL_FRAME(2)
  1732                                  
  1733                                  L_code_ptr_raw_bin_add_zz:
  1734 00001457 C8000000                	enter 0, 0
  1735 0000145B 48837D1802              	cmp COUNT, 2
  1736 00001460 0F85CA0A0000            	jne L_error_arg_count_2
  1737 00001466 4C8B4520                	mov r8, PARAM(0)
  1738                                  	assert_integer(r8)
    53 0000146A 41803811            <1>  cmp byte [%1], %2
    54 0000146E 0F855B0B0000        <1>  jne L_error_incorrect_type
  1739 00001474 4C8B4D28                	mov r9, PARAM(1)
  1740                                  	assert_integer(r9)
    53 00001478 41803911            <1>  cmp byte [%1], %2
    54 0000147C 0F854D0B0000        <1>  jne L_error_incorrect_type
  1741 00001482 498B7801                	mov rdi, qword [r8 + 1]
  1742 00001486 49037901                	add rdi, qword [r9 + 1]
  1743 0000148A E8BB090000              	call make_integer
  1744 0000148F C9                      	leave
  1745 00001490 C22000                  	ret AND_KILL_FRAME(2)
  1746                                  
  1747                                  L_code_ptr_raw_bin_add_qq:
  1748 00001493 C8000000                        enter 0, 0
  1749 00001497 48837D1802                      cmp COUNT, 2
  1750 0000149C 0F858E0A0000                    jne L_error_arg_count_2
  1751 000014A2 4C8B4520                        mov r8, PARAM(0)
  1752                                          assert_fraction(r8)
    53 000014A6 41803812            <1>  cmp byte [%1], %2
    54 000014AA 0F851F0B0000        <1>  jne L_error_incorrect_type
  1753 000014B0 4C8B4D28                        mov r9, PARAM(1)
  1754                                          assert_fraction(r9)
    53 000014B4 41803912            <1>  cmp byte [%1], %2
    54 000014B8 0F85110B0000        <1>  jne L_error_incorrect_type
  1755 000014BE 498B4001                        mov rax, qword [r8 + 1] ; num1
  1756 000014C2 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1757 000014C6 4899                            cqo
  1758 000014C8 48F7EB                          imul rbx
  1759 000014CB 4889C6                          mov rsi, rax
  1760 000014CE 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1761 000014D2 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1762 000014D6 4899                            cqo
  1763 000014D8 48F7EB                          imul rbx
  1764 000014DB 4801C6                          add rsi, rax
  1765 000014DE 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1766 000014E2 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1767 000014E6 4899                            cqo
  1768 000014E8 48F7EB                          imul rbx
  1769 000014EB 4889C7                          mov rdi, rax
  1770 000014EE E8DE010000                      call normalize_fraction
  1771 000014F3 C9                              leave
  1772 000014F4 C22000                          ret AND_KILL_FRAME(2)
  1773                                  
  1774                                  L_code_ptr_raw_bin_sub_zz:
  1775 000014F7 C8000000                	enter 0, 0
  1776 000014FB 48837D1802              	cmp COUNT, 2
  1777 00001500 0F852A0A0000            	jne L_error_arg_count_2
  1778 00001506 4C8B4520                	mov r8, PARAM(0)
  1779                                  	assert_integer(r8)
    53 0000150A 41803811            <1>  cmp byte [%1], %2
    54 0000150E 0F85BB0A0000        <1>  jne L_error_incorrect_type
  1780 00001514 4C8B4D28                	mov r9, PARAM(1)
  1781                                  	assert_integer(r9)
    53 00001518 41803911            <1>  cmp byte [%1], %2
    54 0000151C 0F85AD0A0000        <1>  jne L_error_incorrect_type
  1782 00001522 498B7801                	mov rdi, qword [r8 + 1]
  1783 00001526 492B7901                	sub rdi, qword [r9 + 1]
  1784 0000152A E81B090000              	call make_integer
  1785 0000152F C9                      	leave
  1786 00001530 C22000                  	ret AND_KILL_FRAME(2)
  1787                                  
  1788                                  L_code_ptr_raw_bin_sub_qq:
  1789 00001533 C8000000                        enter 0, 0
  1790 00001537 48837D1802                      cmp COUNT, 2
  1791 0000153C 0F85EE090000                    jne L_error_arg_count_2
  1792 00001542 4C8B4520                        mov r8, PARAM(0)
  1793                                          assert_fraction(r8)
    53 00001546 41803812            <1>  cmp byte [%1], %2
    54 0000154A 0F857F0A0000        <1>  jne L_error_incorrect_type
  1794 00001550 4C8B4D28                        mov r9, PARAM(1)
  1795                                          assert_fraction(r9)
    53 00001554 41803912            <1>  cmp byte [%1], %2
    54 00001558 0F85710A0000        <1>  jne L_error_incorrect_type
  1796 0000155E 498B4001                        mov rax, qword [r8 + 1] ; num1
  1797 00001562 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1798 00001566 4899                            cqo
  1799 00001568 48F7EB                          imul rbx
  1800 0000156B 4889C6                          mov rsi, rax
  1801 0000156E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1802 00001572 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1803 00001576 4899                            cqo
  1804 00001578 48F7EB                          imul rbx
  1805 0000157B 4829C6                          sub rsi, rax
  1806 0000157E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1807 00001582 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1808 00001586 4899                            cqo
  1809 00001588 48F7EB                          imul rbx
  1810 0000158B 4889C7                          mov rdi, rax
  1811 0000158E E83E010000                      call normalize_fraction
  1812 00001593 C9                              leave
  1813 00001594 C22000                          ret AND_KILL_FRAME(2)
  1814                                  
  1815                                  L_code_ptr_raw_bin_mul_zz:
  1816 00001597 C8000000                	enter 0, 0
  1817 0000159B 48837D1802              	cmp COUNT, 2
  1818 000015A0 0F858A090000            	jne L_error_arg_count_2
  1819 000015A6 4C8B4520                	mov r8, PARAM(0)
  1820                                  	assert_integer(r8)
    53 000015AA 41803811            <1>  cmp byte [%1], %2
    54 000015AE 0F851B0A0000        <1>  jne L_error_incorrect_type
  1821 000015B4 4C8B4D28                	mov r9, PARAM(1)
  1822                                  	assert_integer(r9)
    53 000015B8 41803911            <1>  cmp byte [%1], %2
    54 000015BC 0F850D0A0000        <1>  jne L_error_incorrect_type
  1823 000015C2 4899                    	cqo
  1824 000015C4 498B4001                	mov rax, qword [r8 + 1]
  1825 000015C8 49F76101                	mul qword [r9 + 1]
  1826 000015CC 4889C7                  	mov rdi, rax
  1827 000015CF E876080000              	call make_integer
  1828 000015D4 C9                      	leave
  1829 000015D5 C22000                  	ret AND_KILL_FRAME(2)
  1830                                  
  1831                                  L_code_ptr_raw_bin_mul_qq:
  1832 000015D8 C8000000                        enter 0, 0
  1833 000015DC 48837D1802                      cmp COUNT, 2
  1834 000015E1 0F8549090000                    jne L_error_arg_count_2
  1835 000015E7 4C8B4520                        mov r8, PARAM(0)
  1836                                          assert_fraction(r8)
    53 000015EB 41803812            <1>  cmp byte [%1], %2
    54 000015EF 0F85DA090000        <1>  jne L_error_incorrect_type
  1837 000015F5 4C8B4D28                        mov r9, PARAM(1)
  1838                                          assert_fraction(r9)
    53 000015F9 41803912            <1>  cmp byte [%1], %2
    54 000015FD 0F85CC090000        <1>  jne L_error_incorrect_type
  1839 00001603 498B4001                        mov rax, qword [r8 + 1] ; num1
  1840 00001607 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1841 0000160B 4899                            cqo
  1842 0000160D 48F7EB                          imul rbx
  1843 00001610 4889C6                          mov rsi, rax
  1844 00001613 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1845 00001617 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1846 0000161B 4899                            cqo
  1847 0000161D 48F7EB                          imul rbx
  1848 00001620 4889C7                          mov rdi, rax
  1849 00001623 E8A9000000                      call normalize_fraction
  1850 00001628 C9                              leave
  1851 00001629 C22000                          ret AND_KILL_FRAME(2)
  1852                                          
  1853                                  L_code_ptr_raw_bin_div_zz:
  1854 0000162C C8000000                	enter 0, 0
  1855 00001630 48837D1802              	cmp COUNT, 2
  1856 00001635 0F85F5080000            	jne L_error_arg_count_2
  1857 0000163B 4C8B4520                	mov r8, PARAM(0)
  1858                                  	assert_integer(r8)
    53 0000163F 41803811            <1>  cmp byte [%1], %2
    54 00001643 0F8586090000        <1>  jne L_error_incorrect_type
  1859 00001649 4C8B4D28                	mov r9, PARAM(1)
  1860                                  	assert_integer(r9)
    53 0000164D 41803911            <1>  cmp byte [%1], %2
    54 00001651 0F8578090000        <1>  jne L_error_incorrect_type
  1861 00001657 498B7901                	mov rdi, qword [r9 + 1]
  1862 0000165B 4883FF00                	cmp rdi, 0
  1863 0000165F 0F849B090000            	je L_error_division_by_zero
  1864 00001665 498B7001                	mov rsi, qword [r8 + 1]
  1865 00001669 E863000000              	call normalize_fraction
  1866 0000166E C9                      	leave
  1867 0000166F C22000                  	ret AND_KILL_FRAME(2)
  1868                                  
  1869                                  L_code_ptr_raw_bin_div_qq:
  1870 00001672 C8000000                        enter 0, 0
  1871 00001676 48837D1802                      cmp COUNT, 2
  1872 0000167B 0F85AF080000                    jne L_error_arg_count_2
  1873 00001681 4C8B4520                        mov r8, PARAM(0)
  1874                                          assert_fraction(r8)
    53 00001685 41803812            <1>  cmp byte [%1], %2
    54 00001689 0F8540090000        <1>  jne L_error_incorrect_type
  1875 0000168F 4C8B4D28                        mov r9, PARAM(1)
  1876                                          assert_fraction(r9)
    53 00001693 41803912            <1>  cmp byte [%1], %2
    54 00001697 0F8532090000        <1>  jne L_error_incorrect_type
  1877 0000169D 4983790100                      cmp qword [r9 + 1], 0
  1878 000016A2 0F8458090000                    je L_error_division_by_zero
  1879 000016A8 498B4001                        mov rax, qword [r8 + 1] ; num1
  1880 000016AC 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1881 000016B0 4899                            cqo
  1882 000016B2 48F7EB                          imul rbx
  1883 000016B5 4889C6                          mov rsi, rax
  1884 000016B8 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1885 000016BC 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1886 000016C0 4899                            cqo
  1887 000016C2 48F7EB                          imul rbx
  1888 000016C5 4889C7                          mov rdi, rax
  1889 000016C8 E804000000                      call normalize_fraction
  1890 000016CD C9                              leave
  1891 000016CE C22000                          ret AND_KILL_FRAME(2)
  1892                                          
  1893                                  normalize_fraction:
  1894 000016D1 56                              push rsi
  1895 000016D2 57                              push rdi
  1896 000016D3 E859000000                      call gcd
  1897 000016D8 4889C3                          mov rbx, rax
  1898 000016DB 58                              pop rax
  1899 000016DC 4899                            cqo
  1900 000016DE 48F7FB                          idiv rbx
  1901 000016E1 4989C0                          mov r8, rax
  1902 000016E4 58                              pop rax
  1903 000016E5 4899                            cqo
  1904 000016E7 48F7FB                          idiv rbx
  1905 000016EA 4989C1                          mov r9, rax
  1906 000016ED 4983F900                        cmp r9, 0
  1907 000016F1 741C                            je .L_zero
  1908 000016F3 4983F801                        cmp r8, 1
  1909 000016F7 7421                            je .L_int
  1910 000016F9 BF11000000                      mov rdi, (1 + 8 + 8)
  1911 000016FE E8CAEBFFFF                      call malloc
  1912 00001703 C60012                          mov byte [rax], T_fraction
  1913 00001706 4C894801                        mov qword [rax + 1], r9
  1914 0000170A 4C894009                        mov qword [rax + 1 + 8], r8
  1915 0000170E C3                              ret
  1916                                  .L_zero:
  1917 0000170F BF00000000                      mov rdi, 0
  1918 00001714 E831070000                      call make_integer
  1919 00001719 C3                              ret
  1920                                  .L_int:
  1921 0000171A 4C89CF                          mov rdi, r9
  1922 0000171D E828070000                      call make_integer
  1923 00001722 C3                              ret
  1924                                  
  1925                                  iabs:
  1926 00001723 4889F8                          mov rax, rdi
  1927 00001726 4883F800                        cmp rax, 0
  1928 0000172A 7C01                            jl .Lneg
  1929 0000172C C3                              ret
  1930                                  .Lneg:
  1931 0000172D 48F7D8                          neg rax
  1932 00001730 C3                              ret
  1933                                  
  1934                                  gcd:
  1935 00001731 E8EDFFFFFF                      call iabs
  1936 00001736 4889C3                          mov rbx, rax
  1937 00001739 4889F7                          mov rdi, rsi
  1938 0000173C E8E2FFFFFF                      call iabs
  1939 00001741 4883F800                        cmp rax, 0
  1940 00001745 7502                            jne .L0
  1941 00001747 4893                            xchg rax, rbx
  1942                                  .L0:
  1943 00001749 4883FB00                        cmp rbx, 0
  1944 0000174D 740C                            je .L1
  1945 0000174F 4899                            cqo
  1946 00001751 48F7F3                          div rbx
  1947 00001754 4889D0                          mov rax, rdx
  1948 00001757 4893                            xchg rax, rbx
  1949 00001759 EBEE                            jmp .L0
  1950                                  .L1:
  1951 0000175B C3                              ret
  1952                                  
  1953                                  L_code_ptr_error:
  1954 0000175C C8000000                        enter 0, 0
  1955 00001760 48837D1802                      cmp COUNT, 2
  1956 00001765 0F85C5070000                    jne L_error_arg_count_2
  1957 0000176B 488B7520                        mov rsi, PARAM(0)
  1958                                          assert_interned_symbol(rsi)
    53 0000176F 803E41              <1>  cmp byte [%1], %2
    54 00001772 0F8557080000        <1>  jne L_error_incorrect_type
  1959 00001778 488B7528                        mov rsi, PARAM(1)
  1960                                          assert_string(rsi)
    53 0000177C 803E03              <1>  cmp byte [%1], %2
    54 0000177F 0F854A080000        <1>  jne L_error_incorrect_type
  1961 00001785 48BF-                           mov rdi, fmt_scheme_error_part_1
  1961 00001787 [F204000000000000] 
  1962 0000178F B800000000                      mov rax, 0
  1963                                          ENTER
    44 00001794 C8000000            <1>  enter 0, 0
    45 00001798 4883E4F0            <1>  and rsp, ~15
  1964 0000179C E8(00000000)                    call printf
  1965                                          LEAVE
    49 000017A1 C9                  <1>  leave
  1966 000017A2 488B7D20                        mov rdi, PARAM(0)
  1967 000017A6 E8A3EDFFFF                      call print_sexpr
  1968 000017AB 48BF-                           mov rdi, fmt_scheme_error_part_2
  1968 000017AD [0605000000000000] 
  1969 000017B5 B800000000                      mov rax, 0
  1970                                          ENTER
    44 000017BA C8000000            <1>  enter 0, 0
    45 000017BE 4883E4F0            <1>  and rsp, ~15
  1971 000017C2 E8(00000000)                    call printf
  1972                                          LEAVE
    49 000017C7 C9                  <1>  leave
  1973 000017C8 488B4528                        mov rax, PARAM(1)       ; sob_string
  1974 000017CC BE01000000                      mov rsi, 1              ; size = 1 byte
  1975 000017D1 488B5001                        mov rdx, qword [rax + 1] ; length
  1976 000017D5 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1977 000017D9 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1978                                  	ENTER
    44 000017E1 C8000000            <1>  enter 0, 0
    45 000017E5 4883E4F0            <1>  and rsp, ~15
  1979 000017E9 E8(00000000)                    call fwrite
  1980                                  	LEAVE
    49 000017EE C9                  <1>  leave
  1981 000017EF 48BF-                           mov rdi, fmt_scheme_error_part_3
  1981 000017F1 [4805000000000000] 
  1982 000017F9 B800000000                      mov rax, 0
  1983                                          ENTER
    44 000017FE C8000000            <1>  enter 0, 0
    45 00001802 4883E4F0            <1>  and rsp, ~15
  1984 00001806 E8(00000000)                    call printf
  1985                                          LEAVE
    49 0000180B C9                  <1>  leave
  1986 0000180C 48C7C0F7FFFFFF                  mov rax, -9
  1987 00001813 E8(00000000)                    call exit
  1988                                  
  1989                                  L_code_ptr_raw_less_than_rr:
  1990 00001818 C8000000                        enter 0, 0
  1991 0000181C 48837D1802                      cmp COUNT, 2
  1992 00001821 0F8509070000                    jne L_error_arg_count_2
  1993 00001827 488B7520                        mov rsi, PARAM(0)
  1994                                          assert_real(rsi)
    53 0000182B 803E13              <1>  cmp byte [%1], %2
    54 0000182E 0F859B070000        <1>  jne L_error_incorrect_type
  1995 00001834 488B7D28                        mov rdi, PARAM(1)
  1996                                          assert_real(rdi)
    53 00001838 803F13              <1>  cmp byte [%1], %2
    54 0000183B 0F858E070000        <1>  jne L_error_incorrect_type
  1997 00001841 F20F104601                      movsd xmm0, qword [rsi + 1]
  1998 00001846 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1999 0000184B 660F2FC1                        comisd xmm0, xmm1
  2000 0000184F 730C                            jae .L_false
  2001 00001851 48B8-                           mov rax, sob_boolean_true
  2001 00001853 [0300000000000000] 
  2002 0000185B EB0A                            jmp .L_exit
  2003                                  .L_false:
  2004 0000185D 48B8-                           mov rax, sob_boolean_false
  2004 0000185F [0200000000000000] 
  2005                                  .L_exit:
  2006 00001867 C9                              leave
  2007 00001868 C22000                          ret AND_KILL_FRAME(2)
  2008                                          
  2009                                  L_code_ptr_raw_less_than_zz:
  2010 0000186B C8000000                	enter 0, 0
  2011 0000186F 48837D1802              	cmp COUNT, 2
  2012 00001874 0F85B6060000            	jne L_error_arg_count_2
  2013 0000187A 4C8B4520                	mov r8, PARAM(0)
  2014                                  	assert_integer(r8)
    53 0000187E 41803811            <1>  cmp byte [%1], %2
    54 00001882 0F8547070000        <1>  jne L_error_incorrect_type
  2015 00001888 4C8B4D28                	mov r9, PARAM(1)
  2016                                  	assert_integer(r9)
    53 0000188C 41803911            <1>  cmp byte [%1], %2
    54 00001890 0F8539070000        <1>  jne L_error_incorrect_type
  2017 00001896 498B7801                	mov rdi, qword [r8 + 1]
  2018 0000189A 493B7901                	cmp rdi, qword [r9 + 1]
  2019 0000189E 7D0C                    	jge .L_false
  2020 000018A0 48B8-                   	mov rax, sob_boolean_true
  2020 000018A2 [0300000000000000] 
  2021 000018AA EB0A                    	jmp .L_exit
  2022                                  .L_false:
  2023 000018AC 48B8-                   	mov rax, sob_boolean_false
  2023 000018AE [0200000000000000] 
  2024                                  .L_exit:
  2025 000018B6 C9                      	leave
  2026 000018B7 C22000                  	ret AND_KILL_FRAME(2)
  2027                                  
  2028                                  L_code_ptr_raw_less_than_qq:
  2029 000018BA C8000000                        enter 0, 0
  2030 000018BE 48837D1802                      cmp COUNT, 2
  2031 000018C3 0F8567060000                    jne L_error_arg_count_2
  2032 000018C9 488B7520                        mov rsi, PARAM(0)
  2033                                          assert_fraction(rsi)
    53 000018CD 803E12              <1>  cmp byte [%1], %2
    54 000018D0 0F85F9060000        <1>  jne L_error_incorrect_type
  2034 000018D6 488B7D28                        mov rdi, PARAM(1)
  2035                                          assert_fraction(rdi)
    53 000018DA 803F12              <1>  cmp byte [%1], %2
    54 000018DD 0F85EC060000        <1>  jne L_error_incorrect_type
  2036 000018E3 488B4601                        mov rax, qword [rsi + 1] ; num1
  2037 000018E7 4899                            cqo
  2038 000018E9 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2039 000018ED 4889C1                          mov rcx, rax
  2040 000018F0 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  2041 000018F4 4899                            cqo
  2042 000018F6 48F76F01                        imul qword [rdi + 1]          ; num2
  2043 000018FA 4829C1                          sub rcx, rax
  2044 000018FD 7D0C                            jge .L_false
  2045 000018FF 48B8-                           mov rax, sob_boolean_true
  2045 00001901 [0300000000000000] 
  2046 00001909 EB0A                            jmp .L_exit
  2047                                  .L_false:
  2048 0000190B 48B8-                           mov rax, sob_boolean_false
  2048 0000190D [0200000000000000] 
  2049                                  .L_exit:
  2050 00001915 C9                              leave
  2051 00001916 C22000                          ret AND_KILL_FRAME(2)
  2052                                  
  2053                                  L_code_ptr_raw_equal_rr:
  2054 00001919 C8000000                        enter 0, 0
  2055 0000191D 48837D1802                      cmp COUNT, 2
  2056 00001922 0F8508060000                    jne L_error_arg_count_2
  2057 00001928 488B7520                        mov rsi, PARAM(0)
  2058                                          assert_real(rsi)
    53 0000192C 803E13              <1>  cmp byte [%1], %2
    54 0000192F 0F859A060000        <1>  jne L_error_incorrect_type
  2059 00001935 488B7D28                        mov rdi, PARAM(1)
  2060                                          assert_real(rdi)
    53 00001939 803F13              <1>  cmp byte [%1], %2
    54 0000193C 0F858D060000        <1>  jne L_error_incorrect_type
  2061 00001942 F20F104601                      movsd xmm0, qword [rsi + 1]
  2062 00001947 F20F104F01                      movsd xmm1, qword [rdi + 1]
  2063 0000194C 660F2FC1                        comisd xmm0, xmm1
  2064 00001950 750C                            jne .L_false
  2065 00001952 48B8-                           mov rax, sob_boolean_true
  2065 00001954 [0300000000000000] 
  2066 0000195C EB0A                            jmp .L_exit
  2067                                  .L_false:
  2068 0000195E 48B8-                           mov rax, sob_boolean_false
  2068 00001960 [0200000000000000] 
  2069                                  .L_exit:
  2070 00001968 C9                              leave
  2071 00001969 C22000                          ret AND_KILL_FRAME(2)
  2072                                          
  2073                                  L_code_ptr_raw_equal_zz:
  2074 0000196C C8000000                	enter 0, 0
  2075 00001970 48837D1802              	cmp COUNT, 2
  2076 00001975 0F85B5050000            	jne L_error_arg_count_2
  2077 0000197B 4C8B4520                	mov r8, PARAM(0)
  2078                                  	assert_integer(r8)
    53 0000197F 41803811            <1>  cmp byte [%1], %2
    54 00001983 0F8546060000        <1>  jne L_error_incorrect_type
  2079 00001989 4C8B4D28                	mov r9, PARAM(1)
  2080                                  	assert_integer(r9)
    53 0000198D 41803911            <1>  cmp byte [%1], %2
    54 00001991 0F8538060000        <1>  jne L_error_incorrect_type
  2081 00001997 498B7801                	mov rdi, qword [r8 + 1]
  2082 0000199B 493B7901                	cmp rdi, qword [r9 + 1]
  2083 0000199F 750C                    	jne .L_false
  2084 000019A1 48B8-                   	mov rax, sob_boolean_true
  2084 000019A3 [0300000000000000] 
  2085 000019AB EB0A                    	jmp .L_exit
  2086                                  .L_false:
  2087 000019AD 48B8-                   	mov rax, sob_boolean_false
  2087 000019AF [0200000000000000] 
  2088                                  .L_exit:
  2089 000019B7 C9                      	leave
  2090 000019B8 C22000                  	ret AND_KILL_FRAME(2)
  2091                                  
  2092                                  L_code_ptr_raw_equal_qq:
  2093 000019BB C8000000                        enter 0, 0
  2094 000019BF 48837D1802                      cmp COUNT, 2
  2095 000019C4 0F8566050000                    jne L_error_arg_count_2
  2096 000019CA 488B7520                        mov rsi, PARAM(0)
  2097                                          assert_fraction(rsi)
    53 000019CE 803E12              <1>  cmp byte [%1], %2
    54 000019D1 0F85F8050000        <1>  jne L_error_incorrect_type
  2098 000019D7 488B7D28                        mov rdi, PARAM(1)
  2099                                          assert_fraction(rdi)
    53 000019DB 803F12              <1>  cmp byte [%1], %2
    54 000019DE 0F85EB050000        <1>  jne L_error_incorrect_type
  2100 000019E4 488B4601                        mov rax, qword [rsi + 1] ; num1
  2101 000019E8 4899                            cqo
  2102 000019EA 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2103 000019EE 4889C1                          mov rcx, rax
  2104 000019F1 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  2105 000019F5 4899                            cqo
  2106 000019F7 48F76F01                        imul qword [rdi + 1]          ; num2
  2107 000019FB 4829C1                          sub rcx, rax
  2108 000019FE 750C                            jne .L_false
  2109 00001A00 48B8-                           mov rax, sob_boolean_true
  2109 00001A02 [0300000000000000] 
  2110 00001A0A EB0A                            jmp .L_exit
  2111                                  .L_false:
  2112 00001A0C 48B8-                           mov rax, sob_boolean_false
  2112 00001A0E [0200000000000000] 
  2113                                  .L_exit:
  2114 00001A16 C9                              leave
  2115 00001A17 C22000                          ret AND_KILL_FRAME(2)
  2116                                  
  2117                                  L_code_ptr_quotient:
  2118 00001A1A C8000000                        enter 0, 0
  2119 00001A1E 48837D1802                      cmp COUNT, 2
  2120 00001A23 0F8507050000                    jne L_error_arg_count_2
  2121 00001A29 488B7520                        mov rsi, PARAM(0)
  2122                                          assert_integer(rsi)
    53 00001A2D 803E11              <1>  cmp byte [%1], %2
    54 00001A30 0F8599050000        <1>  jne L_error_incorrect_type
  2123 00001A36 488B7D28                        mov rdi, PARAM(1)
  2124                                          assert_integer(rdi)
    53 00001A3A 803F11              <1>  cmp byte [%1], %2
    54 00001A3D 0F858C050000        <1>  jne L_error_incorrect_type
  2125 00001A43 488B4601                        mov rax, qword [rsi + 1]
  2126 00001A47 488B5F01                        mov rbx, qword [rdi + 1]
  2127 00001A4B 4883FB00                        cmp rbx, 0
  2128 00001A4F 0F84AB050000                    je L_error_division_by_zero
  2129 00001A55 4899                            cqo
  2130 00001A57 48F7FB                          idiv rbx
  2131 00001A5A 4889C7                          mov rdi, rax
  2132 00001A5D E8E8030000                      call make_integer
  2133 00001A62 C9                              leave
  2134 00001A63 C22000                          ret AND_KILL_FRAME(2)
  2135                                          
  2136                                  L_code_ptr_remainder:
  2137 00001A66 C8000000                        enter 0, 0
  2138 00001A6A 48837D1802                      cmp COUNT, 2
  2139 00001A6F 0F85BB040000                    jne L_error_arg_count_2
  2140 00001A75 488B7520                        mov rsi, PARAM(0)
  2141                                          assert_integer(rsi)
    53 00001A79 803E11              <1>  cmp byte [%1], %2
    54 00001A7C 0F854D050000        <1>  jne L_error_incorrect_type
  2142 00001A82 488B7D28                        mov rdi, PARAM(1)
  2143                                          assert_integer(rdi)
    53 00001A86 803F11              <1>  cmp byte [%1], %2
    54 00001A89 0F8540050000        <1>  jne L_error_incorrect_type
  2144 00001A8F 488B4601                        mov rax, qword [rsi + 1]
  2145 00001A93 488B5F01                        mov rbx, qword [rdi + 1]
  2146 00001A97 4883FB00                        cmp rbx, 0
  2147 00001A9B 0F845F050000                    je L_error_division_by_zero
  2148 00001AA1 4899                            cqo
  2149 00001AA3 48F7FB                          idiv rbx
  2150 00001AA6 4889D7                          mov rdi, rdx
  2151 00001AA9 E89C030000                      call make_integer
  2152 00001AAE C9                              leave
  2153 00001AAF C22000                          ret AND_KILL_FRAME(2)
  2154                                  
  2155                                  L_code_ptr_set_car:
  2156 00001AB2 C8000000                        enter 0, 0
  2157 00001AB6 48837D1802                      cmp COUNT, 2
  2158 00001ABB 0F856F040000                    jne L_error_arg_count_2
  2159 00001AC1 488B4520                        mov rax, PARAM(0)
  2160                                          assert_pair(rax)
    53 00001AC5 803821              <1>  cmp byte [%1], %2
    54 00001AC8 0F8501050000        <1>  jne L_error_incorrect_type
  2161 00001ACE 488B5D28                        mov rbx, PARAM(1)
  2162 00001AD2 48895801                        mov SOB_PAIR_CAR(rax), rbx
  2163 00001AD6 48B8-                           mov rax, sob_void
  2163 00001AD8 [0000000000000000] 
  2164 00001AE0 C9                              leave
  2165 00001AE1 C22000                          ret AND_KILL_FRAME(2)
  2166                                  
  2167                                  L_code_ptr_set_cdr:
  2168 00001AE4 C8000000                        enter 0, 0
  2169 00001AE8 48837D1802                      cmp COUNT, 2
  2170 00001AED 0F853D040000                    jne L_error_arg_count_2
  2171 00001AF3 488B4520                        mov rax, PARAM(0)
  2172                                          assert_pair(rax)
    53 00001AF7 803821              <1>  cmp byte [%1], %2
    54 00001AFA 0F85CF040000        <1>  jne L_error_incorrect_type
  2173 00001B00 488B5D28                        mov rbx, PARAM(1)
  2174 00001B04 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2175 00001B08 48B8-                           mov rax, sob_void
  2175 00001B0A [0000000000000000] 
  2176 00001B12 C9                              leave
  2177 00001B13 C22000                          ret AND_KILL_FRAME(2)
  2178                                  
  2179                                  L_code_ptr_string_ref:
  2180 00001B16 C8000000                        enter 0, 0
  2181 00001B1A 48837D1802                      cmp COUNT, 2
  2182 00001B1F 0F850B040000                    jne L_error_arg_count_2
  2183 00001B25 488B7D20                        mov rdi, PARAM(0)
  2184                                          assert_string(rdi)
    53 00001B29 803F03              <1>  cmp byte [%1], %2
    54 00001B2C 0F859D040000        <1>  jne L_error_incorrect_type
  2185 00001B32 488B7528                        mov rsi, PARAM(1)
  2186                                          assert_integer(rsi)
    53 00001B36 803E11              <1>  cmp byte [%1], %2
    54 00001B39 0F8590040000        <1>  jne L_error_incorrect_type
  2187 00001B3F 488B5701                        mov rdx, qword [rdi + 1]
  2188 00001B43 488B4E01                        mov rcx, qword [rsi + 1]
  2189 00001B47 4839D1                          cmp rcx, rdx
  2190 00001B4A 0F8D14030000                    jge L_error_integer_range
  2191 00001B50 4883F900                        cmp rcx, 0
  2192 00001B54 0F8C0A030000                    jl L_error_integer_range
  2193 00001B5A 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  2194 00001B5E BF02000000                      mov rdi, 2
  2195 00001B63 E865E7FFFF                      call malloc
  2196 00001B68 C60002                          mov byte [rax], T_char
  2197 00001B6B 885801                          mov byte [rax + 1], bl
  2198 00001B6E C9                              leave
  2199 00001B6F C22000                          ret AND_KILL_FRAME(2)
  2200                                  
  2201                                  L_code_ptr_vector_ref:
  2202 00001B72 C8000000                        enter 0, 0
  2203 00001B76 48837D1802                      cmp COUNT, 2
  2204 00001B7B 0F85AF030000                    jne L_error_arg_count_2
  2205 00001B81 488B7D20                        mov rdi, PARAM(0)
  2206                                          assert_vector(rdi)
    53 00001B85 803F22              <1>  cmp byte [%1], %2
    54 00001B88 0F8541040000        <1>  jne L_error_incorrect_type
  2207 00001B8E 488B7528                        mov rsi, PARAM(1)
  2208                                          assert_integer(rsi)
    53 00001B92 803E11              <1>  cmp byte [%1], %2
    54 00001B95 0F8534040000        <1>  jne L_error_incorrect_type
  2209 00001B9B 488B5701                        mov rdx, qword [rdi + 1]
  2210 00001B9F 488B4E01                        mov rcx, qword [rsi + 1]
  2211 00001BA3 4839D1                          cmp rcx, rdx
  2212 00001BA6 0F8DB8020000                    jge L_error_integer_range
  2213 00001BAC 4883F900                        cmp rcx, 0
  2214 00001BB0 0F8CAE020000                    jl L_error_integer_range
  2215 00001BB6 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2216 00001BBB C9                              leave
  2217 00001BBC C22000                          ret AND_KILL_FRAME(2)
  2218                                  
  2219                                  L_code_ptr_vector_set:
  2220 00001BBF C8000000                        enter 0, 0
  2221 00001BC3 48837D1803                      cmp COUNT, 3
  2222 00001BC8 0F85CC030000                    jne L_error_arg_count_3
  2223 00001BCE 488B7D20                        mov rdi, PARAM(0)
  2224                                          assert_vector(rdi)
    53 00001BD2 803F22              <1>  cmp byte [%1], %2
    54 00001BD5 0F85F4030000        <1>  jne L_error_incorrect_type
  2225 00001BDB 488B7528                        mov rsi, PARAM(1)
  2226                                          assert_integer(rsi)
    53 00001BDF 803E11              <1>  cmp byte [%1], %2
    54 00001BE2 0F85E7030000        <1>  jne L_error_incorrect_type
  2227 00001BE8 488B5701                        mov rdx, qword [rdi + 1]
  2228 00001BEC 488B4E01                        mov rcx, qword [rsi + 1]
  2229 00001BF0 4839D1                          cmp rcx, rdx
  2230 00001BF3 0F8D6B020000                    jge L_error_integer_range
  2231 00001BF9 4883F900                        cmp rcx, 0
  2232 00001BFD 0F8C61020000                    jl L_error_integer_range
  2233 00001C03 488B4530                        mov rax, PARAM(2)
  2234 00001C07 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2235 00001C0C 48B8-                           mov rax, sob_void
  2235 00001C0E [0000000000000000] 
  2236 00001C16 C9                              leave
  2237 00001C17 C22800                          ret AND_KILL_FRAME(3)
  2238                                  
  2239                                  L_code_ptr_string_set:
  2240 00001C1A C8000000                        enter 0, 0
  2241 00001C1E 48837D1803                      cmp COUNT, 3
  2242 00001C23 0F8571030000                    jne L_error_arg_count_3
  2243 00001C29 488B7D20                        mov rdi, PARAM(0)
  2244                                          assert_string(rdi)
    53 00001C2D 803F03              <1>  cmp byte [%1], %2
    54 00001C30 0F8599030000        <1>  jne L_error_incorrect_type
  2245 00001C36 488B7528                        mov rsi, PARAM(1)
  2246                                          assert_integer(rsi)
    53 00001C3A 803E11              <1>  cmp byte [%1], %2
    54 00001C3D 0F858C030000        <1>  jne L_error_incorrect_type
  2247 00001C43 488B5701                        mov rdx, qword [rdi + 1]
  2248 00001C47 488B4E01                        mov rcx, qword [rsi + 1]
  2249 00001C4B 4839D1                          cmp rcx, rdx
  2250 00001C4E 0F8D10020000                    jge L_error_integer_range
  2251 00001C54 4883F900                        cmp rcx, 0
  2252 00001C58 0F8C06020000                    jl L_error_integer_range
  2253 00001C5E 488B4530                        mov rax, PARAM(2)
  2254                                          assert_char(rax)
    53 00001C62 803802              <1>  cmp byte [%1], %2
    54 00001C65 0F8564030000        <1>  jne L_error_incorrect_type
  2255 00001C6B 8A4001                          mov al, byte [rax + 1]
  2256 00001C6E 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2257 00001C72 48B8-                           mov rax, sob_void
  2257 00001C74 [0000000000000000] 
  2258 00001C7C C9                              leave
  2259 00001C7D C22800                          ret AND_KILL_FRAME(3)
  2260                                  
  2261                                  L_code_ptr_make_vector:
  2262 00001C80 C8000000                        enter 0, 0
  2263 00001C84 48837D1802                      cmp COUNT, 2
  2264 00001C89 0F85A1020000                    jne L_error_arg_count_2
  2265 00001C8F 488B4D20                        mov rcx, PARAM(0)
  2266                                          assert_integer(rcx)
    53 00001C93 803911              <1>  cmp byte [%1], %2
    54 00001C96 0F8533030000        <1>  jne L_error_incorrect_type
  2267 00001C9C 488B4901                        mov rcx, qword [rcx + 1]
  2268 00001CA0 4883F900                        cmp rcx, 0
  2269 00001CA4 0F8CBA010000                    jl L_error_integer_range
  2270 00001CAA 488B5528                        mov rdx, PARAM(1)
  2271 00001CAE 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2272 00001CB6 E812E6FFFF                      call malloc
  2273 00001CBB C60022                          mov byte [rax], T_vector
  2274 00001CBE 48894801                        mov qword [rax + 1], rcx
  2275 00001CC2 41B800000000                    mov r8, 0
  2276                                  .L0:
  2277 00001CC8 4939C8                          cmp r8, rcx
  2278 00001CCB 740A                            je .L1
  2279 00001CCD 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2280 00001CD2 49FFC0                          inc r8
  2281 00001CD5 EBF1                            jmp .L0
  2282                                  .L1:
  2283 00001CD7 C9                              leave
  2284 00001CD8 C22000                          ret AND_KILL_FRAME(2)
  2285                                          
  2286                                  L_code_ptr_make_string:
  2287 00001CDB C8000000                        enter 0, 0
  2288 00001CDF 48837D1802                      cmp COUNT, 2
  2289 00001CE4 0F8546020000                    jne L_error_arg_count_2
  2290 00001CEA 488B4D20                        mov rcx, PARAM(0)
  2291                                          assert_integer(rcx)
    53 00001CEE 803911              <1>  cmp byte [%1], %2
    54 00001CF1 0F85D8020000        <1>  jne L_error_incorrect_type
  2292 00001CF7 488B4901                        mov rcx, qword [rcx + 1]
  2293 00001CFB 4883F900                        cmp rcx, 0
  2294 00001CFF 0F8C5F010000                    jl L_error_integer_range
  2295 00001D05 488B5528                        mov rdx, PARAM(1)
  2296                                          assert_char(rdx)
    53 00001D09 803A02              <1>  cmp byte [%1], %2
    54 00001D0C 0F85BD020000        <1>  jne L_error_incorrect_type
  2297 00001D12 8A5201                          mov dl, byte [rdx + 1]
  2298 00001D15 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2299 00001D19 E8AFE5FFFF                      call malloc
  2300 00001D1E C60003                          mov byte [rax], T_string
  2301 00001D21 48894801                        mov qword [rax + 1], rcx
  2302 00001D25 41B800000000                    mov r8, 0
  2303                                  .L0:
  2304 00001D2B 4939C8                          cmp r8, rcx
  2305 00001D2E 740A                            je .L1
  2306 00001D30 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2307 00001D35 49FFC0                          inc r8
  2308 00001D38 EBF1                            jmp .L0
  2309                                  .L1:
  2310 00001D3A C9                              leave
  2311 00001D3B C22000                          ret AND_KILL_FRAME(2)
  2312                                  
  2313                                  L_code_ptr_numerator:
  2314 00001D3E C8000000                        enter 0, 0
  2315 00001D42 48837D1801                      cmp COUNT, 1
  2316 00001D47 0F85AE010000                    jne L_error_arg_count_1
  2317 00001D4D 488B4520                        mov rax, PARAM(0)
  2318                                          assert_fraction(rax)
    53 00001D51 803812              <1>  cmp byte [%1], %2
    54 00001D54 0F8575020000        <1>  jne L_error_incorrect_type
  2319 00001D5A 488B7801                        mov rdi, qword [rax + 1]
  2320 00001D5E E8E7000000                      call make_integer
  2321 00001D63 C9                              leave
  2322 00001D64 C21800                          ret AND_KILL_FRAME(1)
  2323                                          
  2324                                  L_code_ptr_denominator:
  2325 00001D67 C8000000                        enter 0, 0
  2326 00001D6B 48837D1801                      cmp COUNT, 1
  2327 00001D70 0F8585010000                    jne L_error_arg_count_1
  2328 00001D76 488B4520                        mov rax, PARAM(0)
  2329                                          assert_fraction(rax)
    53 00001D7A 803812              <1>  cmp byte [%1], %2
    54 00001D7D 0F854C020000        <1>  jne L_error_incorrect_type
  2330 00001D83 488B7809                        mov rdi, qword [rax + 1 + 8]
  2331 00001D87 E8BE000000                      call make_integer
  2332 00001D8C C9                              leave
  2333 00001D8D C21800                          ret AND_KILL_FRAME(1)
  2334                                  
  2335                                  L_code_ptr_is_eq:
  2336 00001D90 C8000000                	enter 0, 0
  2337 00001D94 48837D1802              	cmp COUNT, 2
  2338 00001D99 0F8591010000            	jne L_error_arg_count_2
  2339 00001D9F 488B7D20                	mov rdi, PARAM(0)
  2340 00001DA3 488B7528                	mov rsi, PARAM(1)
  2341 00001DA7 4839F7                  	cmp rdi, rsi
  2342 00001DAA 746C                    	je .L_eq_true
  2343 00001DAC 8A17                    	mov dl, byte [rdi]
  2344 00001DAE 3A16                    	cmp dl, byte [rsi]
  2345 00001DB0 7572                    	jne .L_eq_false
  2346 00001DB2 80FA02                  	cmp dl, T_char
  2347 00001DB5 7459                    	je .L_char
  2348 00001DB7 80FA41                  	cmp dl, T_interned_symbol
  2349 00001DBA 7440                    	je .L_interned_symbol
  2350 00001DBC 80FA42                          cmp dl, T_uninterned_symbol
  2351 00001DBF 7443                            je .L_uninterned_symbol
  2352 00001DC1 80FA13                  	cmp dl, T_real
  2353 00001DC4 742E                    	je .L_real
  2354 00001DC6 80FA12                  	cmp dl, T_fraction
  2355 00001DC9 7413                    	je .L_fraction
  2356 00001DCB 80FA11                          cmp dl, T_integer
  2357 00001DCE 7402                            je .L_integer
  2358 00001DD0 EB52                    	jmp .L_eq_false
  2359                                  .L_integer:
  2360 00001DD2 488B4601                        mov rax, qword [rsi + 1]
  2361 00001DD6 483B4701                        cmp rax, qword [rdi + 1]
  2362 00001DDA 7548                            jne .L_eq_false
  2363 00001DDC EB3A                            jmp .L_eq_true
  2364                                  .L_fraction:
  2365 00001DDE 488B4601                	mov rax, qword [rsi + 1]
  2366 00001DE2 483B4701                	cmp rax, qword [rdi + 1]
  2367 00001DE6 753C                    	jne .L_eq_false
  2368 00001DE8 488B4609                	mov rax, qword [rsi + 1 + 8]
  2369 00001DEC 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2370 00001DF0 7532                    	jne .L_eq_false
  2371 00001DF2 EB24                    	jmp .L_eq_true
  2372                                  .L_real:
  2373 00001DF4 488B4601                	mov rax, qword [rsi + 1]
  2374 00001DF8 483B4701                	cmp rax, qword [rdi + 1]
  2375                                  .L_interned_symbol:
  2376                                  	; never reached, because interned_symbols are static!
  2377                                  	; but I'm keeping it in case, I'll ever change
  2378                                  	; the implementation
  2379 00001DFC 488B4601                	mov rax, qword [rsi + 1]
  2380 00001E00 483B4701                	cmp rax, qword [rdi + 1]
  2381                                  .L_uninterned_symbol:
  2382 00001E04 4C8B4701                        mov r8, qword [rdi + 1]
  2383 00001E08 4C3B4601                        cmp r8, qword [rsi + 1]
  2384 00001E0C 7516                            jne .L_eq_false
  2385 00001E0E EB08                            jmp .L_eq_true
  2386                                  .L_char:
  2387 00001E10 8A5E01                  	mov bl, byte [rsi + 1]
  2388 00001E13 3A5F01                  	cmp bl, byte [rdi + 1]
  2389 00001E16 750C                    	jne .L_eq_false
  2390                                  .L_eq_true:
  2391 00001E18 48B8-                   	mov rax, sob_boolean_true
  2391 00001E1A [0300000000000000] 
  2392 00001E22 EB0A                    	jmp .L_eq_exit
  2393                                  .L_eq_false:
  2394 00001E24 48B8-                   	mov rax, sob_boolean_false
  2394 00001E26 [0200000000000000] 
  2395                                  .L_eq_exit:
  2396 00001E2E C9                      	leave
  2397 00001E2F C22000                  	ret AND_KILL_FRAME(2)
  2398                                  
  2399                                  make_real:
  2400 00001E32 C8000000                        enter 0, 0
  2401 00001E36 BF09000000                      mov rdi, (1 + 8)
  2402 00001E3B E88DE4FFFF                      call malloc
  2403 00001E40 C60013                          mov byte [rax], T_real
  2404 00001E43 F20F114001                      movsd qword [rax + 1], xmm0
  2405 00001E48 C9                              leave 
  2406 00001E49 C3                              ret
  2407                                          
  2408                                  make_integer:
  2409 00001E4A C8000000                        enter 0, 0
  2410 00001E4E 4889FE                          mov rsi, rdi
  2411 00001E51 BF09000000                      mov rdi, (1 + 8)
  2412 00001E56 E872E4FFFF                      call malloc
  2413 00001E5B C60011                          mov byte [rax], T_integer
  2414 00001E5E 48897001                        mov qword [rax + 1], rsi
  2415 00001E62 C9                              leave
  2416 00001E63 C3                              ret
  2417                                          
  2418                                  L_error_integer_range:
  2419 00001E64 488B3C25[00000000]              mov rdi, qword [stderr]
  2420 00001E6C 48BE-                           mov rsi, fmt_integer_range
  2420 00001E6E [BF04000000000000] 
  2421 00001E76 B800000000                      mov rax, 0
  2422                                          ENTER
    44 00001E7B C8000000            <1>  enter 0, 0
    45 00001E7F 4883E4F0            <1>  and rsp, ~15
  2423 00001E83 E8(00000000)                    call fprintf
  2424                                          LEAVE
    49 00001E88 C9                  <1>  leave
  2425 00001E89 48C7C0FBFFFFFF                  mov rax, -5
  2426 00001E90 E8(00000000)                    call exit
  2427                                  
  2428                                  L_error_arg_negative:
  2429 00001E95 488B3C25[00000000]              mov rdi, qword [stderr]
  2430 00001E9D 48BE-                           mov rsi, fmt_arg_negative
  2430 00001E9F [9703000000000000] 
  2431 00001EA7 B800000000                      mov rax, 0
  2432                                          ENTER
    44 00001EAC C8000000            <1>  enter 0, 0
    45 00001EB0 4883E4F0            <1>  and rsp, ~15
  2433 00001EB4 E8(00000000)                    call fprintf
  2434                                          LEAVE
    49 00001EB9 C9                  <1>  leave
  2435 00001EBA 48C7C0FDFFFFFF                  mov rax, -3
  2436 00001EC1 E8(00000000)                    call exit
  2437                                  
  2438                                  L_error_arg_count_0:
  2439 00001EC6 488B3C25[00000000]              mov rdi, qword [stderr]
  2440 00001ECE 48BE-                           mov rsi, fmt_arg_count_0
  2440 00001ED0 [BD03000000000000] 
  2441 00001ED8 488B5518                        mov rdx, COUNT
  2442 00001EDC B800000000                      mov rax, 0
  2443                                          ENTER
    44 00001EE1 C8000000            <1>  enter 0, 0
    45 00001EE5 4883E4F0            <1>  and rsp, ~15
  2444 00001EE9 E8(00000000)                    call fprintf
  2445                                          LEAVE
    49 00001EEE C9                  <1>  leave
  2446 00001EEF 48C7C0FDFFFFFF                  mov rax, -3
  2447 00001EF6 E8(00000000)                    call exit
  2448                                  
  2449                                  L_error_arg_count_1:
  2450 00001EFB 488B3C25[00000000]              mov rdi, qword [stderr]
  2451 00001F03 48BE-                           mov rsi, fmt_arg_count_1
  2451 00001F05 [E503000000000000] 
  2452 00001F0D 488B5518                        mov rdx, COUNT
  2453 00001F11 B800000000                      mov rax, 0
  2454                                          ENTER
    44 00001F16 C8000000            <1>  enter 0, 0
    45 00001F1A 4883E4F0            <1>  and rsp, ~15
  2455 00001F1E E8(00000000)                    call fprintf
  2456                                          LEAVE
    49 00001F23 C9                  <1>  leave
  2457 00001F24 48C7C0FDFFFFFF                  mov rax, -3
  2458 00001F2B E8(00000000)                    call exit
  2459                                  
  2460                                  L_error_arg_count_2:
  2461 00001F30 488B3C25[00000000]              mov rdi, qword [stderr]
  2462 00001F38 48BE-                           mov rsi, fmt_arg_count_2
  2462 00001F3A [4B04000000000000] 
  2463 00001F42 488B5518                        mov rdx, COUNT
  2464 00001F46 B800000000                      mov rax, 0
  2465                                          ENTER
    44 00001F4B C8000000            <1>  enter 0, 0
    45 00001F4F 4883E4F0            <1>  and rsp, ~15
  2466 00001F53 E8(00000000)                    call fprintf
  2467                                          LEAVE
    49 00001F58 C9                  <1>  leave
  2468 00001F59 48C7C0FDFFFFFF                  mov rax, -3
  2469 00001F60 E8(00000000)                    call exit
  2470                                  
  2471                                  L_error_arg_count_12:
  2472 00001F65 488B3C25[00000000]              mov rdi, qword [stderr]
  2473 00001F6D 48BE-                           mov rsi, fmt_arg_count_12
  2473 00001F6F [0B04000000000000] 
  2474 00001F77 488B5518                        mov rdx, COUNT
  2475 00001F7B B800000000                      mov rax, 0
  2476                                          ENTER
    44 00001F80 C8000000            <1>  enter 0, 0
    45 00001F84 4883E4F0            <1>  and rsp, ~15
  2477 00001F88 E8(00000000)                    call fprintf
  2478                                          LEAVE
    49 00001F8D C9                  <1>  leave
  2479 00001F8E 48C7C0FDFFFFFF                  mov rax, -3
  2480 00001F95 E8(00000000)                    call exit
  2481                                  
  2482                                  L_error_arg_count_3:
  2483 00001F9A 488B3C25[00000000]              mov rdi, qword [stderr]
  2484 00001FA2 48BE-                           mov rsi, fmt_arg_count_3
  2484 00001FA4 [7204000000000000] 
  2485 00001FAC 488B5518                        mov rdx, COUNT
  2486 00001FB0 B800000000                      mov rax, 0
  2487                                          ENTER
    44 00001FB5 C8000000            <1>  enter 0, 0
    45 00001FB9 4883E4F0            <1>  and rsp, ~15
  2488 00001FBD E8(00000000)                    call fprintf
  2489                                          LEAVE
    49 00001FC2 C9                  <1>  leave
  2490 00001FC3 48C7C0FDFFFFFF                  mov rax, -3
  2491 00001FCA E8(00000000)                    call exit
  2492                                          
  2493                                  L_error_incorrect_type:
  2494 00001FCF 488B3C25[00000000]              mov rdi, qword [stderr]
  2495 00001FD7 48BE-                           mov rsi, fmt_type
  2495 00001FD9 [9B04000000000000] 
  2496 00001FE1 B800000000                      mov rax, 0
  2497                                          ENTER
    44 00001FE6 C8000000            <1>  enter 0, 0
    45 00001FEA 4883E4F0            <1>  and rsp, ~15
  2498 00001FEE E8(00000000)                    call fprintf
  2499                                          LEAVE
    49 00001FF3 C9                  <1>  leave
  2500 00001FF4 48C7C0FCFFFFFF                  mov rax, -4
  2501 00001FFB E8(00000000)                    call exit
  2502                                  
  2503                                  L_error_division_by_zero:
  2504 00002000 488B3C25[00000000]              mov rdi, qword [stderr]
  2505 00002008 48BE-                           mov rsi, fmt_division_by_zero
  2505 0000200A [DC04000000000000] 
  2506 00002012 B800000000                      mov rax, 0
  2507                                          ENTER
    44 00002017 C8000000            <1>  enter 0, 0
    45 0000201B 4883E4F0            <1>  and rsp, ~15
  2508 0000201F E8(00000000)                    call fprintf
  2509                                          LEAVE
    49 00002024 C9                  <1>  leave
  2510 00002025 48C7C0F8FFFFFF                  mov rax, -8
  2511 0000202C E8(00000000)                    call exit
  2512                                  
  2513                                  section .data
  2514                                  gensym_count:
  2515 0000038C 0000000000000000                dq 0
  2516                                  fmt_char:
  2517 00000394 256300                          db `%c\0`
  2518                                  fmt_arg_negative:
  2519 00000397 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
  2519 000003A0 7267756D656E742063-
  2519 000003A9 616E6E6F7420626520-
  2519 000003B2 6E656761746976652E-
  2519 000003BB 0A00               
  2520                                  fmt_arg_count_0:
  2521 000003BD 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2521 000003C6 74696E67207A65726F-
  2521 000003CF 20617267756D656E74-
  2521 000003D8 732E20466F756E6420-
  2521 000003E1 25640A00           
  2522                                  fmt_arg_count_1:
  2523 000003E5 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2523 000003EE 74696E67206F6E6520-
  2523 000003F7 617267756D656E742E-
  2523 00000400 20466F756E64202564-
  2523 00000409 0A00               
  2524                                  fmt_arg_count_12:
  2525 0000040B 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2525 00000414 74696E67206F6E6520-
  2525 0000041D 726571756972656420-
  2525 00000426 616E64206F6E65206F-
  2525 0000042F 7074696F6E616C2061-
  2525 00000438 7267756D656E742E20-
  2525 00000441 466F756E642025640A-
  2525 0000044A 00                 
  2526                                  fmt_arg_count_2:
  2527 0000044B 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2527 00000454 74696E672074776F20-
  2527 0000045D 617267756D656E7473-
  2527 00000466 2E20466F756E642025-
  2527 0000046F 640A00             
  2528                                  fmt_arg_count_3:
  2529 00000472 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2529 0000047B 74696E672074687265-
  2529 00000484 6520617267756D656E-
  2529 0000048D 74732E20466F756E64-
  2529 00000496 2025640A00         
  2530                                  fmt_type:
  2531 0000049B 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2531 000004A4 696F6E207061737365-
  2531 000004AD 6420696E636F727265-
  2531 000004B6 637420747970650A00 
  2532                                  fmt_integer_range:
  2533 000004BF 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2533 000004C8 7265637420696E7465-
  2533 000004D1 6765722072616E6765-
  2533 000004DA 0A00               
  2534                                  fmt_division_by_zero:
  2535 000004DC 212121204469766973-             db `!!! Division by zero\n\0`
  2535 000004E5 696F6E206279207A65-
  2535 000004EE 726F0A00           
  2536                                  fmt_scheme_error_part_1:
  2537 000004F2 0A2121212054686520-             db `\n!!! The procedure \0`
  2537 000004FB 70726F636564757265-
  2537 00000504 2000               
  2538                                  fmt_scheme_error_part_2:
  2539 00000506 2061736B656420746F-             db ` asked to terminate the program\n`
  2539 0000050F 207465726D696E6174-
  2539 00000518 65207468652070726F-
  2539 00000521 6772616D0A         
  2540 00000526 202020207769746820-             db `    with the following message:\n\n\0`
  2540 0000052F 74686520666F6C6C6F-
  2540 00000538 77696E67206D657373-
  2540 00000541 6167653A0A0A00     
  2541                                  fmt_scheme_error_part_3:
  2542 00000548 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2542 00000551 210A0A00           
