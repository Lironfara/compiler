     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "boolean-false?"
   441 0000056E 0E00000000000000        	dq 14
   442 00000576 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   443 0000057E 66616C73653F            	db 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3F
   444                                  	; L_constants + 1412:
   445 00000584 03                      	db T_string	; "boolean-true?"
   446 00000585 0D00000000000000        	dq 13
   447 0000058D 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   448 00000595 747275653F              	db 0x74, 0x72, 0x75, 0x65, 0x3F
   449                                  	; L_constants + 1434:
   450 0000059A 03                      	db T_string	; "primitive?"
   451 0000059B 0A00000000000000        	dq 10
   452 000005A3 7072696D69746976        	db 0x70, 0x72, 0x69, 0x6D, 0x69, 0x74, 0x69, 0x76
   453 000005AB 653F                    	db 0x65, 0x3F
   454                                  	; L_constants + 1453:
   455 000005AD 03                      	db T_string	; "length"
   456 000005AE 0600000000000000        	dq 6
   457 000005B6 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   458                                  	; L_constants + 1468:
   459 000005BC 03                      	db T_string	; "make-list"
   460 000005BD 0900000000000000        	dq 9
   461 000005C5 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   462 000005CD 74                      	db 0x74
   463                                  	; L_constants + 1486:
   464 000005CE 03                      	db T_string	; "return"
   465 000005CF 0600000000000000        	dq 6
   466 000005D7 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
   467                                  	; L_constants + 1501:
   468 000005DD 03                      	db T_string	; "caar"
   469 000005DE 0400000000000000        	dq 4
   470 000005E6 63616172                	db 0x63, 0x61, 0x61, 0x72
   471                                  	; L_constants + 1514:
   472 000005EA 03                      	db T_string	; "cadr"
   473 000005EB 0400000000000000        	dq 4
   474 000005F3 63616472                	db 0x63, 0x61, 0x64, 0x72
   475                                  	; L_constants + 1527:
   476 000005F7 03                      	db T_string	; "cdar"
   477 000005F8 0400000000000000        	dq 4
   478 00000600 63646172                	db 0x63, 0x64, 0x61, 0x72
   479                                  	; L_constants + 1540:
   480 00000604 03                      	db T_string	; "cddr"
   481 00000605 0400000000000000        	dq 4
   482 0000060D 63646472                	db 0x63, 0x64, 0x64, 0x72
   483                                  	; L_constants + 1553:
   484 00000611 03                      	db T_string	; "caaar"
   485 00000612 0500000000000000        	dq 5
   486 0000061A 6361616172              	db 0x63, 0x61, 0x61, 0x61, 0x72
   487                                  	; L_constants + 1567:
   488 0000061F 03                      	db T_string	; "caadr"
   489 00000620 0500000000000000        	dq 5
   490 00000628 6361616472              	db 0x63, 0x61, 0x61, 0x64, 0x72
   491                                  	; L_constants + 1581:
   492 0000062D 03                      	db T_string	; "cadar"
   493 0000062E 0500000000000000        	dq 5
   494 00000636 6361646172              	db 0x63, 0x61, 0x64, 0x61, 0x72
   495                                  	; L_constants + 1595:
   496 0000063B 03                      	db T_string	; "caddr"
   497 0000063C 0500000000000000        	dq 5
   498 00000644 6361646472              	db 0x63, 0x61, 0x64, 0x64, 0x72
   499                                  	; L_constants + 1609:
   500 00000649 03                      	db T_string	; "cdaar"
   501 0000064A 0500000000000000        	dq 5
   502 00000652 6364616172              	db 0x63, 0x64, 0x61, 0x61, 0x72
   503                                  	; L_constants + 1623:
   504 00000657 03                      	db T_string	; "cdadr"
   505 00000658 0500000000000000        	dq 5
   506 00000660 6364616472              	db 0x63, 0x64, 0x61, 0x64, 0x72
   507                                  	; L_constants + 1637:
   508 00000665 03                      	db T_string	; "cddar"
   509 00000666 0500000000000000        	dq 5
   510 0000066E 6364646172              	db 0x63, 0x64, 0x64, 0x61, 0x72
   511                                  	; L_constants + 1651:
   512 00000673 03                      	db T_string	; "cdddr"
   513 00000674 0500000000000000        	dq 5
   514 0000067C 6364646472              	db 0x63, 0x64, 0x64, 0x64, 0x72
   515                                  	; L_constants + 1665:
   516 00000681 03                      	db T_string	; "caaaar"
   517 00000682 0600000000000000        	dq 6
   518 0000068A 636161616172            	db 0x63, 0x61, 0x61, 0x61, 0x61, 0x72
   519                                  	; L_constants + 1680:
   520 00000690 03                      	db T_string	; "caaadr"
   521 00000691 0600000000000000        	dq 6
   522 00000699 636161616472            	db 0x63, 0x61, 0x61, 0x61, 0x64, 0x72
   523                                  	; L_constants + 1695:
   524 0000069F 03                      	db T_string	; "caadar"
   525 000006A0 0600000000000000        	dq 6
   526 000006A8 636161646172            	db 0x63, 0x61, 0x61, 0x64, 0x61, 0x72
   527                                  	; L_constants + 1710:
   528 000006AE 03                      	db T_string	; "caaddr"
   529 000006AF 0600000000000000        	dq 6
   530 000006B7 636161646472            	db 0x63, 0x61, 0x61, 0x64, 0x64, 0x72
   531                                  	; L_constants + 1725:
   532 000006BD 03                      	db T_string	; "cadaar"
   533 000006BE 0600000000000000        	dq 6
   534 000006C6 636164616172            	db 0x63, 0x61, 0x64, 0x61, 0x61, 0x72
   535                                  	; L_constants + 1740:
   536 000006CC 03                      	db T_string	; "cadadr"
   537 000006CD 0600000000000000        	dq 6
   538 000006D5 636164616472            	db 0x63, 0x61, 0x64, 0x61, 0x64, 0x72
   539                                  	; L_constants + 1755:
   540 000006DB 03                      	db T_string	; "caddar"
   541 000006DC 0600000000000000        	dq 6
   542 000006E4 636164646172            	db 0x63, 0x61, 0x64, 0x64, 0x61, 0x72
   543                                  	; L_constants + 1770:
   544 000006EA 03                      	db T_string	; "cadddr"
   545 000006EB 0600000000000000        	dq 6
   546 000006F3 636164646472            	db 0x63, 0x61, 0x64, 0x64, 0x64, 0x72
   547                                  	; L_constants + 1785:
   548 000006F9 03                      	db T_string	; "cdaaar"
   549 000006FA 0600000000000000        	dq 6
   550 00000702 636461616172            	db 0x63, 0x64, 0x61, 0x61, 0x61, 0x72
   551                                  	; L_constants + 1800:
   552 00000708 03                      	db T_string	; "cdaadr"
   553 00000709 0600000000000000        	dq 6
   554 00000711 636461616472            	db 0x63, 0x64, 0x61, 0x61, 0x64, 0x72
   555                                  	; L_constants + 1815:
   556 00000717 03                      	db T_string	; "cdadar"
   557 00000718 0600000000000000        	dq 6
   558 00000720 636461646172            	db 0x63, 0x64, 0x61, 0x64, 0x61, 0x72
   559                                  	; L_constants + 1830:
   560 00000726 03                      	db T_string	; "cdaddr"
   561 00000727 0600000000000000        	dq 6
   562 0000072F 636461646472            	db 0x63, 0x64, 0x61, 0x64, 0x64, 0x72
   563                                  	; L_constants + 1845:
   564 00000735 03                      	db T_string	; "cddaar"
   565 00000736 0600000000000000        	dq 6
   566 0000073E 636464616172            	db 0x63, 0x64, 0x64, 0x61, 0x61, 0x72
   567                                  	; L_constants + 1860:
   568 00000744 03                      	db T_string	; "cddadr"
   569 00000745 0600000000000000        	dq 6
   570 0000074D 636464616472            	db 0x63, 0x64, 0x64, 0x61, 0x64, 0x72
   571                                  	; L_constants + 1875:
   572 00000753 03                      	db T_string	; "cdddar"
   573 00000754 0600000000000000        	dq 6
   574 0000075C 636464646172            	db 0x63, 0x64, 0x64, 0x64, 0x61, 0x72
   575                                  	; L_constants + 1890:
   576 00000762 03                      	db T_string	; "cddddr"
   577 00000763 0600000000000000        	dq 6
   578 0000076B 636464646472            	db 0x63, 0x64, 0x64, 0x64, 0x64, 0x72
   579                                  	; L_constants + 1905:
   580 00000771 03                      	db T_string	; "list?"
   581 00000772 0500000000000000        	dq 5
   582 0000077A 6C6973743F              	db 0x6C, 0x69, 0x73, 0x74, 0x3F
   583                                  	; L_constants + 1919:
   584 0000077F 03                      	db T_string	; "list"
   585 00000780 0400000000000000        	dq 4
   586 00000788 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   587                                  	; L_constants + 1932:
   588 0000078C 03                      	db T_string	; "not"
   589 0000078D 0300000000000000        	dq 3
   590 00000795 6E6F74                  	db 0x6E, 0x6F, 0x74
   591                                  	; L_constants + 1944:
   592 00000798 03                      	db T_string	; "rational?"
   593 00000799 0900000000000000        	dq 9
   594 000007A1 726174696F6E616C        	db 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x61, 0x6C
   595 000007A9 3F                      	db 0x3F
   596                                  	; L_constants + 1962:
   597 000007AA 03                      	db T_string	; "list*"
   598 000007AB 0500000000000000        	dq 5
   599 000007B3 6C6973742A              	db 0x6C, 0x69, 0x73, 0x74, 0x2A
   600                                  	; L_constants + 1976:
   601 000007B8 03                      	db T_string	; "whatever"
   602 000007B9 0800000000000000        	dq 8
   603 000007C1 7768617465766572        	db 0x77, 0x68, 0x61, 0x74, 0x65, 0x76, 0x65, 0x72
   604                                  	; L_constants + 1993:
   605 000007C9 41                      	db T_interned_symbol	; whatever
   606 000007CA [B807000000000000]      	dq L_constants + 1976
   607                                  	; L_constants + 2002:
   608 000007D2 03                      	db T_string	; "apply"
   609 000007D3 0500000000000000        	dq 5
   610 000007DB 6170706C79              	db 0x61, 0x70, 0x70, 0x6C, 0x79
   611                                  	; L_constants + 2016:
   612 000007E0 03                      	db T_string	; "ormap"
   613 000007E1 0500000000000000        	dq 5
   614 000007E9 6F726D6170              	db 0x6F, 0x72, 0x6D, 0x61, 0x70
   615                                  	; L_constants + 2030:
   616 000007EE 03                      	db T_string	; "map"
   617 000007EF 0300000000000000        	dq 3
   618 000007F7 6D6170                  	db 0x6D, 0x61, 0x70
   619                                  	; L_constants + 2042:
   620 000007FA 03                      	db T_string	; "andmap"
   621 000007FB 0600000000000000        	dq 6
   622 00000803 616E646D6170            	db 0x61, 0x6E, 0x64, 0x6D, 0x61, 0x70
   623                                  	; L_constants + 2057:
   624 00000809 03                      	db T_string	; "reverse"
   625 0000080A 0700000000000000        	dq 7
   626 00000812 72657665727365          	db 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
   627                                  	; L_constants + 2073:
   628 00000819 03                      	db T_string	; "fold-left"
   629 0000081A 0900000000000000        	dq 9
   630 00000822 666F6C642D6C6566        	db 0x66, 0x6F, 0x6C, 0x64, 0x2D, 0x6C, 0x65, 0x66
   631 0000082A 74                      	db 0x74
   632                                  	; L_constants + 2091:
   633 0000082B 03                      	db T_string	; "append"
   634 0000082C 0600000000000000        	dq 6
   635 00000834 617070656E64            	db 0x61, 0x70, 0x70, 0x65, 0x6E, 0x64
   636                                  	; L_constants + 2106:
   637 0000083A 03                      	db T_string	; "fold-right"
   638 0000083B 0A00000000000000        	dq 10
   639 00000843 666F6C642D726967        	db 0x66, 0x6F, 0x6C, 0x64, 0x2D, 0x72, 0x69, 0x67
   640 0000084B 6874                    	db 0x68, 0x74
   641                                  	; L_constants + 2125:
   642 0000084D 03                      	db T_string	; "+"
   643 0000084E 0100000000000000        	dq 1
   644 00000856 2B                      	db 0x2B
   645                                  	; L_constants + 2135:
   646 00000857 11                      	db T_integer	; 0
   647 00000858 0000000000000000        	dq 0
   648                                  	; L_constants + 2144:
   649 00000860 03                      	db T_string	; "__bin_integer_to_fr...
   650 00000861 1900000000000000        	dq 25
   651 00000869 5F5F62696E5F696E        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x5F, 0x69, 0x6E
   652 00000871 74656765725F746F        	db 0x74, 0x65, 0x67, 0x65, 0x72, 0x5F, 0x74, 0x6F
   653 00000879 5F6672616374696F        	db 0x5F, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F
   654 00000881 6E                      	db 0x6E
   655                                  	; L_constants + 2178:
   656 00000882 41                      	db T_interned_symbol	; +
   657 00000883 [4D08000000000000]      	dq L_constants + 2125
   658                                  	; L_constants + 2187:
   659 0000088B 03                      	db T_string	; "all arguments need ...
   660 0000088C 2000000000000000        	dq 32
   661 00000894 616C6C2061726775        	db 0x61, 0x6C, 0x6C, 0x20, 0x61, 0x72, 0x67, 0x75
   662 0000089C 6D656E7473206E65        	db 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x20, 0x6E, 0x65
   663 000008A4 656420746F206265        	db 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x65
   664 000008AC 206E756D62657273        	db 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x73
   665                                  	; L_constants + 2228:
   666 000008B4 03                      	db T_string	; "-"
   667 000008B5 0100000000000000        	dq 1
   668 000008BD 2D                      	db 0x2D
   669                                  	; L_constants + 2238:
   670 000008BE 03                      	db T_string	; "real"
   671 000008BF 0400000000000000        	dq 4
   672 000008C7 7265616C                	db 0x72, 0x65, 0x61, 0x6C
   673                                  	; L_constants + 2251:
   674 000008CB 41                      	db T_interned_symbol	; -
   675 000008CC [B408000000000000]      	dq L_constants + 2228
   676                                  	; L_constants + 2260:
   677 000008D4 03                      	db T_string	; "*"
   678 000008D5 0100000000000000        	dq 1
   679 000008DD 2A                      	db 0x2A
   680                                  	; L_constants + 2270:
   681 000008DE 11                      	db T_integer	; 1
   682 000008DF 0100000000000000        	dq 1
   683                                  	; L_constants + 2279:
   684 000008E7 41                      	db T_interned_symbol	; *
   685 000008E8 [D408000000000000]      	dq L_constants + 2260
   686                                  	; L_constants + 2288:
   687 000008F0 03                      	db T_string	; "/"
   688 000008F1 0100000000000000        	dq 1
   689 000008F9 2F                      	db 0x2F
   690                                  	; L_constants + 2298:
   691 000008FA 41                      	db T_interned_symbol	; /
   692 000008FB [F008000000000000]      	dq L_constants + 2288
   693                                  	; L_constants + 2307:
   694 00000903 03                      	db T_string	; "fact"
   695 00000904 0400000000000000        	dq 4
   696 0000090C 66616374                	db 0x66, 0x61, 0x63, 0x74
   697                                  	; L_constants + 2320:
   698 00000910 03                      	db T_string	; "<"
   699 00000911 0100000000000000        	dq 1
   700 00000919 3C                      	db 0x3C
   701                                  	; L_constants + 2330:
   702 0000091A 03                      	db T_string	; "<="
   703 0000091B 0200000000000000        	dq 2
   704 00000923 3C3D                    	db 0x3C, 0x3D
   705                                  	; L_constants + 2341:
   706 00000925 03                      	db T_string	; ">"
   707 00000926 0100000000000000        	dq 1
   708 0000092E 3E                      	db 0x3E
   709                                  	; L_constants + 2351:
   710 0000092F 03                      	db T_string	; ">="
   711 00000930 0200000000000000        	dq 2
   712 00000938 3E3D                    	db 0x3E, 0x3D
   713                                  	; L_constants + 2362:
   714 0000093A 03                      	db T_string	; "="
   715 0000093B 0100000000000000        	dq 1
   716 00000943 3D                      	db 0x3D
   717                                  	; L_constants + 2372:
   718 00000944 03                      	db T_string	; "generic-comparator"
   719 00000945 1200000000000000        	dq 18
   720 0000094D 67656E657269632D        	db 0x67, 0x65, 0x6E, 0x65, 0x72, 0x69, 0x63, 0x2D
   721 00000955 636F6D7061726174        	db 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x72, 0x61, 0x74
   722 0000095D 6F72                    	db 0x6F, 0x72
   723                                  	; L_constants + 2399:
   724 0000095F 41                      	db T_interned_symbol	; generic-comparator
   725 00000960 [4409000000000000]      	dq L_constants + 2372
   726                                  	; L_constants + 2408:
   727 00000968 03                      	db T_string	; "all the arguments m...
   728 00000969 2100000000000000        	dq 33
   729 00000971 616C6C2074686520        	db 0x61, 0x6C, 0x6C, 0x20, 0x74, 0x68, 0x65, 0x20
   730 00000979 617267756D656E74        	db 0x61, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74
   731 00000981 73206D7573742062        	db 0x73, 0x20, 0x6D, 0x75, 0x73, 0x74, 0x20, 0x62
   732 00000989 65206E756D626572        	db 0x65, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72
   733 00000991 73                      	db 0x73
   734                                  	; L_constants + 2450:
   735 00000992 03                      	db T_string	; "char<?"
   736 00000993 0600000000000000        	dq 6
   737 0000099B 636861723C3F            	db 0x63, 0x68, 0x61, 0x72, 0x3C, 0x3F
   738                                  	; L_constants + 2465:
   739 000009A1 03                      	db T_string	; "char<=?"
   740 000009A2 0700000000000000        	dq 7
   741 000009AA 636861723C3D3F          	db 0x63, 0x68, 0x61, 0x72, 0x3C, 0x3D, 0x3F
   742                                  	; L_constants + 2481:
   743 000009B1 03                      	db T_string	; "char=?"
   744 000009B2 0600000000000000        	dq 6
   745 000009BA 636861723D3F            	db 0x63, 0x68, 0x61, 0x72, 0x3D, 0x3F
   746                                  	; L_constants + 2496:
   747 000009C0 03                      	db T_string	; "char>?"
   748 000009C1 0600000000000000        	dq 6
   749 000009C9 636861723E3F            	db 0x63, 0x68, 0x61, 0x72, 0x3E, 0x3F
   750                                  	; L_constants + 2511:
   751 000009CF 03                      	db T_string	; "char>=?"
   752 000009D0 0700000000000000        	dq 7
   753 000009D8 636861723E3D3F          	db 0x63, 0x68, 0x61, 0x72, 0x3E, 0x3D, 0x3F
   754                                  	; L_constants + 2527:
   755 000009DF 03                      	db T_string	; "char-downcase"
   756 000009E0 0D00000000000000        	dq 13
   757 000009E8 636861722D646F77        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x64, 0x6F, 0x77
   758 000009F0 6E63617365              	db 0x6E, 0x63, 0x61, 0x73, 0x65
   759                                  	; L_constants + 2549:
   760 000009F5 03                      	db T_string	; "char-upcase"
   761 000009F6 0B00000000000000        	dq 11
   762 000009FE 636861722D757063        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x75, 0x70, 0x63
   763 00000A06 617365                  	db 0x61, 0x73, 0x65
   764                                  	; L_constants + 2569:
   765 00000A09 0241                    	db T_char, 0x41	; #\A
   766                                  	; L_constants + 2571:
   767 00000A0B 025A                    	db T_char, 0x5A	; #\Z
   768                                  	; L_constants + 2573:
   769 00000A0D 0261                    	db T_char, 0x61	; #\a
   770                                  	; L_constants + 2575:
   771 00000A0F 027A                    	db T_char, 0x7A	; #\z
   772                                  	; L_constants + 2577:
   773 00000A11 03                      	db T_string	; "char-ci<?"
   774 00000A12 0900000000000000        	dq 9
   775 00000A1A 636861722D63693C        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3C
   776 00000A22 3F                      	db 0x3F
   777                                  	; L_constants + 2595:
   778 00000A23 03                      	db T_string	; "char-ci<=?"
   779 00000A24 0A00000000000000        	dq 10
   780 00000A2C 636861722D63693C        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3C
   781 00000A34 3D3F                    	db 0x3D, 0x3F
   782                                  	; L_constants + 2614:
   783 00000A36 03                      	db T_string	; "char-ci=?"
   784 00000A37 0900000000000000        	dq 9
   785 00000A3F 636861722D63693D        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3D
   786 00000A47 3F                      	db 0x3F
   787                                  	; L_constants + 2632:
   788 00000A48 03                      	db T_string	; "char-ci>?"
   789 00000A49 0900000000000000        	dq 9
   790 00000A51 636861722D63693E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3E
   791 00000A59 3F                      	db 0x3F
   792                                  	; L_constants + 2650:
   793 00000A5A 03                      	db T_string	; "char-ci>=?"
   794 00000A5B 0A00000000000000        	dq 10
   795 00000A63 636861722D63693E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3E
   796 00000A6B 3D3F                    	db 0x3D, 0x3F
   797                                  	; L_constants + 2669:
   798 00000A6D 03                      	db T_string	; "string-downcase"
   799 00000A6E 0F00000000000000        	dq 15
   800 00000A76 737472696E672D64        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x64
   801 00000A7E 6F776E63617365          	db 0x6F, 0x77, 0x6E, 0x63, 0x61, 0x73, 0x65
   802                                  	; L_constants + 2693:
   803 00000A85 03                      	db T_string	; "string-upcase"
   804 00000A86 0D00000000000000        	dq 13
   805 00000A8E 737472696E672D75        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x75
   806 00000A96 7063617365              	db 0x70, 0x63, 0x61, 0x73, 0x65
   807                                  	; L_constants + 2715:
   808 00000A9B 03                      	db T_string	; "list->string"
   809 00000A9C 0C00000000000000        	dq 12
   810 00000AA4 6C6973742D3E7374        	db 0x6C, 0x69, 0x73, 0x74, 0x2D, 0x3E, 0x73, 0x74
   811 00000AAC 72696E67                	db 0x72, 0x69, 0x6E, 0x67
   812                                  	; L_constants + 2736:
   813 00000AB0 03                      	db T_string	; "string->list"
   814 00000AB1 0C00000000000000        	dq 12
   815 00000AB9 737472696E672D3E        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x3E
   816 00000AC1 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   817                                  	; L_constants + 2757:
   818 00000AC5 03                      	db T_string	; "string<?"
   819 00000AC6 0800000000000000        	dq 8
   820 00000ACE 737472696E673C3F        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3C, 0x3F
   821                                  	; L_constants + 2774:
   822 00000AD6 03                      	db T_string	; "string<=?"
   823 00000AD7 0900000000000000        	dq 9
   824 00000ADF 737472696E673C3D        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3C, 0x3D
   825 00000AE7 3F                      	db 0x3F
   826                                  	; L_constants + 2792:
   827 00000AE8 03                      	db T_string	; "string=?"
   828 00000AE9 0800000000000000        	dq 8
   829 00000AF1 737472696E673D3F        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3D, 0x3F
   830                                  	; L_constants + 2809:
   831 00000AF9 03                      	db T_string	; "string>=?"
   832 00000AFA 0900000000000000        	dq 9
   833 00000B02 737472696E673E3D        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3E, 0x3D
   834 00000B0A 3F                      	db 0x3F
   835                                  	; L_constants + 2827:
   836 00000B0B 03                      	db T_string	; "string>?"
   837 00000B0C 0800000000000000        	dq 8
   838 00000B14 737472696E673E3F        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3E, 0x3F
   839                                  	; L_constants + 2844:
   840 00000B1C 03                      	db T_string	; "string-ci<?"
   841 00000B1D 0B00000000000000        	dq 11
   842 00000B25 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   843 00000B2D 693C3F                  	db 0x69, 0x3C, 0x3F
   844                                  	; L_constants + 2864:
   845 00000B30 03                      	db T_string	; "string-ci<=?"
   846 00000B31 0C00000000000000        	dq 12
   847 00000B39 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   848 00000B41 693C3D3F                	db 0x69, 0x3C, 0x3D, 0x3F
   849                                  	; L_constants + 2885:
   850 00000B45 03                      	db T_string	; "string-ci=?"
   851 00000B46 0B00000000000000        	dq 11
   852 00000B4E 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   853 00000B56 693D3F                  	db 0x69, 0x3D, 0x3F
   854                                  	; L_constants + 2905:
   855 00000B59 03                      	db T_string	; "string-ci>=?"
   856 00000B5A 0C00000000000000        	dq 12
   857 00000B62 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   858 00000B6A 693E3D3F                	db 0x69, 0x3E, 0x3D, 0x3F
   859                                  	; L_constants + 2926:
   860 00000B6E 03                      	db T_string	; "string-ci>?"
   861 00000B6F 0B00000000000000        	dq 11
   862 00000B77 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   863 00000B7F 693E3F                  	db 0x69, 0x3E, 0x3F
   864                                  	; L_constants + 2946:
   865 00000B82 41                      	db T_interned_symbol	; make-vector
   866 00000B83 [4804000000000000]      	dq L_constants + 1096
   867                                  	; L_constants + 2955:
   868 00000B8B 03                      	db T_string	; "Usage: (make-vector...
   869 00000B8C 2B00000000000000        	dq 43
   870 00000B94 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   871 00000B9C 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   872 00000BA4 746F722073697A65        	db 0x74, 0x6F, 0x72, 0x20, 0x73, 0x69, 0x7A, 0x65
   873 00000BAC 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   874 00000BB4 616C2D6465666175        	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
   875 00000BBC 6C7429                  	db 0x6C, 0x74, 0x29
   876                                  	; L_constants + 3007:
   877 00000BBF 41                      	db T_interned_symbol	; make-string
   878 00000BC0 [5C04000000000000]      	dq L_constants + 1116
   879                                  	; L_constants + 3016:
   880 00000BC8 03                      	db T_string	; "Usage: (make-string...
   881 00000BC9 2B00000000000000        	dq 43
   882 00000BD1 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   883 00000BD9 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   884 00000BE1 696E672073697A65        	db 0x69, 0x6E, 0x67, 0x20, 0x73, 0x69, 0x7A, 0x65
   885 00000BE9 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   886 00000BF1 616C2D6465666175        	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
   887 00000BF9 6C7429                  	db 0x6C, 0x74, 0x29
   888                                  	; L_constants + 3068:
   889 00000BFC 03                      	db T_string	; "list->vector"
   890 00000BFD 0C00000000000000        	dq 12
   891 00000C05 6C6973742D3E7665        	db 0x6C, 0x69, 0x73, 0x74, 0x2D, 0x3E, 0x76, 0x65
   892 00000C0D 63746F72                	db 0x63, 0x74, 0x6F, 0x72
   893                                  	; L_constants + 3089:
   894 00000C11 03                      	db T_string	; "vector"
   895 00000C12 0600000000000000        	dq 6
   896 00000C1A 766563746F72            	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72
   897                                  	; L_constants + 3104:
   898 00000C20 03                      	db T_string	; "vector->list"
   899 00000C21 0C00000000000000        	dq 12
   900 00000C29 766563746F722D3E        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x3E
   901 00000C31 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   902                                  	; L_constants + 3125:
   903 00000C35 03                      	db T_string	; "random"
   904 00000C36 0600000000000000        	dq 6
   905 00000C3E 72616E646F6D            	db 0x72, 0x61, 0x6E, 0x64, 0x6F, 0x6D
   906                                  	; L_constants + 3140:
   907 00000C44 03                      	db T_string	; "positive?"
   908 00000C45 0900000000000000        	dq 9
   909 00000C4D 706F736974697665        	db 0x70, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65
   910 00000C55 3F                      	db 0x3F
   911                                  	; L_constants + 3158:
   912 00000C56 03                      	db T_string	; "negative?"
   913 00000C57 0900000000000000        	dq 9
   914 00000C5F 6E65676174697665        	db 0x6E, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65
   915 00000C67 3F                      	db 0x3F
   916                                  	; L_constants + 3176:
   917 00000C68 03                      	db T_string	; "even?"
   918 00000C69 0500000000000000        	dq 5
   919 00000C71 6576656E3F              	db 0x65, 0x76, 0x65, 0x6E, 0x3F
   920                                  	; L_constants + 3190:
   921 00000C76 11                      	db T_integer	; 2
   922 00000C77 0200000000000000        	dq 2
   923                                  	; L_constants + 3199:
   924 00000C7F 03                      	db T_string	; "odd?"
   925 00000C80 0400000000000000        	dq 4
   926 00000C88 6F64643F                	db 0x6F, 0x64, 0x64, 0x3F
   927                                  	; L_constants + 3212:
   928 00000C8C 03                      	db T_string	; "abs"
   929 00000C8D 0300000000000000        	dq 3
   930 00000C95 616273                  	db 0x61, 0x62, 0x73
   931                                  	; L_constants + 3224:
   932 00000C98 03                      	db T_string	; "equal?"
   933 00000C99 0600000000000000        	dq 6
   934 00000CA1 657175616C3F            	db 0x65, 0x71, 0x75, 0x61, 0x6C, 0x3F
   935                                  	; L_constants + 3239:
   936 00000CA7 03                      	db T_string	; "assoc"
   937 00000CA8 0500000000000000        	dq 5
   938 00000CB0 6173736F63              	db 0x61, 0x73, 0x73, 0x6F, 0x63
   939                                  	; L_constants + 3253:
   940 00000CB5 03                      	db T_string	; "string-append"
   941 00000CB6 0D00000000000000        	dq 13
   942 00000CBE 737472696E672D61        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x61
   943 00000CC6 7070656E64              	db 0x70, 0x70, 0x65, 0x6E, 0x64
   944                                  	; L_constants + 3275:
   945 00000CCB 03                      	db T_string	; "vector-append"
   946 00000CCC 0D00000000000000        	dq 13
   947 00000CD4 766563746F722D61        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x61
   948 00000CDC 7070656E64              	db 0x70, 0x70, 0x65, 0x6E, 0x64
   949                                  	; L_constants + 3297:
   950 00000CE1 03                      	db T_string	; "string-reverse"
   951 00000CE2 0E00000000000000        	dq 14
   952 00000CEA 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   953 00000CF2 657665727365            	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
   954                                  	; L_constants + 3320:
   955 00000CF8 03                      	db T_string	; "vector-reverse"
   956 00000CF9 0E00000000000000        	dq 14
   957 00000D01 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   958 00000D09 657665727365            	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
   959                                  	; L_constants + 3343:
   960 00000D0F 03                      	db T_string	; "string-reverse!"
   961 00000D10 0F00000000000000        	dq 15
   962 00000D18 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   963 00000D20 65766572736521          	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x21
   964                                  	; L_constants + 3367:
   965 00000D27 03                      	db T_string	; "vector-reverse!"
   966 00000D28 0F00000000000000        	dq 15
   967 00000D30 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   968 00000D38 65766572736521          	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x21
   969                                  	; L_constants + 3391:
   970 00000D3F 03                      	db T_string	; "make-list-thunk"
   971 00000D40 0F00000000000000        	dq 15
   972 00000D48 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   973 00000D50 742D7468756E6B          	db 0x74, 0x2D, 0x74, 0x68, 0x75, 0x6E, 0x6B
   974                                  	; L_constants + 3415:
   975 00000D57 03                      	db T_string	; "make-string-thunk"
   976 00000D58 1100000000000000        	dq 17
   977 00000D60 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   978 00000D68 696E672D7468756E        	db 0x69, 0x6E, 0x67, 0x2D, 0x74, 0x68, 0x75, 0x6E
   979 00000D70 6B                      	db 0x6B
   980                                  	; L_constants + 3441:
   981 00000D71 03                      	db T_string	; "make-vector-thunk"
   982 00000D72 1100000000000000        	dq 17
   983 00000D7A 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   984 00000D82 746F722D7468756E        	db 0x74, 0x6F, 0x72, 0x2D, 0x74, 0x68, 0x75, 0x6E
   985 00000D8A 6B                      	db 0x6B
   986                                  	; L_constants + 3467:
   987 00000D8B 03                      	db T_string	; "logarithm"
   988 00000D8C 0900000000000000        	dq 9
   989 00000D94 6C6F676172697468        	db 0x6C, 0x6F, 0x67, 0x61, 0x72, 0x69, 0x74, 0x68
   990 00000D9C 6D                      	db 0x6D
   991                                  	; L_constants + 3485:
   992 00000D9D 13                      	db T_real	; 1.000000
   993 00000D9E 000000000000F03F        	dq 1.000000
   994                                  	; L_constants + 3494:
   995 00000DA6 03                      	db T_string	; "newline"
   996 00000DA7 0700000000000000        	dq 7
   997 00000DAF 6E65776C696E65          	db 0x6E, 0x65, 0x77, 0x6C, 0x69, 0x6E, 0x65
   998                                  	; L_constants + 3510:
   999 00000DB6 020A                    	db T_char, 0x0A	; #\newline
  1000                                  	; L_constants + 3512:
  1001 00000DB8 03                      	db T_string	; "void"
  1002 00000DB9 0400000000000000        	dq 4
  1003 00000DC1 766F6964                	db 0x76, 0x6F, 0x69, 0x64
  1004                                  	; L_constants + 3525:
  1005 00000DC5 11                      	db T_integer	; 6
  1006 00000DC6 0600000000000000        	dq 6
  1007                                  	; L_constants + 3534:
  1008 00000DCE 11                      	db T_integer	; 3
  1009 00000DCF 0300000000000000        	dq 3
  1010                                  free_var_0:	; location of *
  1011 00000DD7 [DF0D000000000000]      	dq .undefined_object
  1012                                  .undefined_object:
  1013 00000DDF 05                      	db T_undefined
  1014 00000DE0 [D408000000000000]      	dq L_constants + 2260
  1015                                  
  1016                                  free_var_1:	; location of +
  1017 00000DE8 [F00D000000000000]      	dq .undefined_object
  1018                                  .undefined_object:
  1019 00000DF0 05                      	db T_undefined
  1020 00000DF1 [4D08000000000000]      	dq L_constants + 2125
  1021                                  
  1022                                  free_var_2:	; location of -
  1023 00000DF9 [010E000000000000]      	dq .undefined_object
  1024                                  .undefined_object:
  1025 00000E01 05                      	db T_undefined
  1026 00000E02 [B408000000000000]      	dq L_constants + 2228
  1027                                  
  1028                                  free_var_3:	; location of /
  1029 00000E0A [120E000000000000]      	dq .undefined_object
  1030                                  .undefined_object:
  1031 00000E12 05                      	db T_undefined
  1032 00000E13 [F008000000000000]      	dq L_constants + 2288
  1033                                  
  1034                                  free_var_4:	; location of <
  1035 00000E1B [230E000000000000]      	dq .undefined_object
  1036                                  .undefined_object:
  1037 00000E23 05                      	db T_undefined
  1038 00000E24 [1009000000000000]      	dq L_constants + 2320
  1039                                  
  1040                                  free_var_5:	; location of <=
  1041 00000E2C [340E000000000000]      	dq .undefined_object
  1042                                  .undefined_object:
  1043 00000E34 05                      	db T_undefined
  1044 00000E35 [1A09000000000000]      	dq L_constants + 2330
  1045                                  
  1046                                  free_var_6:	; location of =
  1047 00000E3D [450E000000000000]      	dq .undefined_object
  1048                                  .undefined_object:
  1049 00000E45 05                      	db T_undefined
  1050 00000E46 [3A09000000000000]      	dq L_constants + 2362
  1051                                  
  1052                                  free_var_7:	; location of >
  1053 00000E4E [560E000000000000]      	dq .undefined_object
  1054                                  .undefined_object:
  1055 00000E56 05                      	db T_undefined
  1056 00000E57 [2509000000000000]      	dq L_constants + 2341
  1057                                  
  1058                                  free_var_8:	; location of >=
  1059 00000E5F [670E000000000000]      	dq .undefined_object
  1060                                  .undefined_object:
  1061 00000E67 05                      	db T_undefined
  1062 00000E68 [2F09000000000000]      	dq L_constants + 2351
  1063                                  
  1064                                  free_var_9:	; location of __bin-add-qq
  1065 00000E70 [780E000000000000]      	dq .undefined_object
  1066                                  .undefined_object:
  1067 00000E78 05                      	db T_undefined
  1068 00000E79 [6902000000000000]      	dq L_constants + 617
  1069                                  
  1070                                  free_var_10:	; location of __bin-add-rr
  1071 00000E81 [890E000000000000]      	dq .undefined_object
  1072                                  .undefined_object:
  1073 00000E89 05                      	db T_undefined
  1074 00000E8A [1502000000000000]      	dq L_constants + 533
  1075                                  
  1076                                  free_var_11:	; location of __bin-add-zz
  1077 00000E92 [9A0E000000000000]      	dq .undefined_object
  1078                                  .undefined_object:
  1079 00000E9A 05                      	db T_undefined
  1080 00000E9B [BD02000000000000]      	dq L_constants + 701
  1081                                  
  1082                                  free_var_12:	; location of __bin-apply
  1083 00000EA3 [AB0E000000000000]      	dq .undefined_object
  1084                                  .undefined_object:
  1085 00000EAB 05                      	db T_undefined
  1086 00000EAC [0102000000000000]      	dq L_constants + 513
  1087                                  
  1088                                  free_var_13:	; location of __bin-div-qq
  1089 00000EB4 [BC0E000000000000]      	dq .undefined_object
  1090                                  .undefined_object:
  1091 00000EBC 05                      	db T_undefined
  1092 00000EBD [A802000000000000]      	dq L_constants + 680
  1093                                  
  1094                                  free_var_14:	; location of __bin-div-rr
  1095 00000EC5 [CD0E000000000000]      	dq .undefined_object
  1096                                  .undefined_object:
  1097 00000ECD 05                      	db T_undefined
  1098 00000ECE [5402000000000000]      	dq L_constants + 596
  1099                                  
  1100                                  free_var_15:	; location of __bin-div-zz
  1101 00000ED6 [DE0E000000000000]      	dq .undefined_object
  1102                                  .undefined_object:
  1103 00000EDE 05                      	db T_undefined
  1104 00000EDF [FC02000000000000]      	dq L_constants + 764
  1105                                  
  1106                                  free_var_16:	; location of __bin-equal-qq
  1107 00000EE7 [EF0E000000000000]      	dq .undefined_object
  1108                                  .undefined_object:
  1109 00000EEF 05                      	db T_undefined
  1110 00000EF0 [8703000000000000]      	dq L_constants + 903
  1111                                  
  1112                                  free_var_17:	; location of __bin-equal-rr
  1113 00000EF8 [000F000000000000]      	dq .undefined_object
  1114                                  .undefined_object:
  1115 00000F00 05                      	db T_undefined
  1116 00000F01 [7003000000000000]      	dq L_constants + 880
  1117                                  
  1118                                  free_var_18:	; location of __bin-equal-zz
  1119 00000F09 [110F000000000000]      	dq .undefined_object
  1120                                  .undefined_object:
  1121 00000F11 05                      	db T_undefined
  1122 00000F12 [9E03000000000000]      	dq L_constants + 926
  1123                                  
  1124                                  free_var_19:	; location of __bin-less-than-qq
  1125 00000F1A [220F000000000000]      	dq .undefined_object
  1126                                  .undefined_object:
  1127 00000F22 05                      	db T_undefined
  1128 00000F23 [3A03000000000000]      	dq L_constants + 826
  1129                                  
  1130                                  free_var_20:	; location of __bin-less-than-rr
  1131 00000F2B [330F000000000000]      	dq .undefined_object
  1132                                  .undefined_object:
  1133 00000F33 05                      	db T_undefined
  1134 00000F34 [1F03000000000000]      	dq L_constants + 799
  1135                                  
  1136                                  free_var_21:	; location of __bin-less-than-zz
  1137 00000F3C [440F000000000000]      	dq .undefined_object
  1138                                  .undefined_object:
  1139 00000F44 05                      	db T_undefined
  1140 00000F45 [5503000000000000]      	dq L_constants + 853
  1141                                  
  1142                                  free_var_22:	; location of __bin-mul-qq
  1143 00000F4D [550F000000000000]      	dq .undefined_object
  1144                                  .undefined_object:
  1145 00000F55 05                      	db T_undefined
  1146 00000F56 [9302000000000000]      	dq L_constants + 659
  1147                                  
  1148                                  free_var_23:	; location of __bin-mul-rr
  1149 00000F5E [660F000000000000]      	dq .undefined_object
  1150                                  .undefined_object:
  1151 00000F66 05                      	db T_undefined
  1152 00000F67 [3F02000000000000]      	dq L_constants + 575
  1153                                  
  1154                                  free_var_24:	; location of __bin-mul-zz
  1155 00000F6F [770F000000000000]      	dq .undefined_object
  1156                                  .undefined_object:
  1157 00000F77 05                      	db T_undefined
  1158 00000F78 [E702000000000000]      	dq L_constants + 743
  1159                                  
  1160                                  free_var_25:	; location of __bin-sub-qq
  1161 00000F80 [880F000000000000]      	dq .undefined_object
  1162                                  .undefined_object:
  1163 00000F88 05                      	db T_undefined
  1164 00000F89 [7E02000000000000]      	dq L_constants + 638
  1165                                  
  1166                                  free_var_26:	; location of __bin-sub-rr
  1167 00000F91 [990F000000000000]      	dq .undefined_object
  1168                                  .undefined_object:
  1169 00000F99 05                      	db T_undefined
  1170 00000F9A [2A02000000000000]      	dq L_constants + 554
  1171                                  
  1172                                  free_var_27:	; location of __bin-sub-zz
  1173 00000FA2 [AA0F000000000000]      	dq .undefined_object
  1174                                  .undefined_object:
  1175 00000FAA 05                      	db T_undefined
  1176 00000FAB [D202000000000000]      	dq L_constants + 722
  1177                                  
  1178                                  free_var_28:	; location of __bin_integer_to_fraction
  1179 00000FB3 [BB0F000000000000]      	dq .undefined_object
  1180                                  .undefined_object:
  1181 00000FBB 05                      	db T_undefined
  1182 00000FBC [6008000000000000]      	dq L_constants + 2144
  1183                                  
  1184                                  free_var_29:	; location of __integer-to-fraction
  1185 00000FC4 [CC0F000000000000]      	dq .undefined_object
  1186                                  .undefined_object:
  1187 00000FCC 05                      	db T_undefined
  1188 00000FCD [A204000000000000]      	dq L_constants + 1186
  1189                                  
  1190                                  free_var_30:	; location of abs
  1191 00000FD5 [DD0F000000000000]      	dq .undefined_object
  1192                                  .undefined_object:
  1193 00000FDD 05                      	db T_undefined
  1194 00000FDE [8C0C000000000000]      	dq L_constants + 3212
  1195                                  
  1196                                  free_var_31:	; location of andmap
  1197 00000FE6 [EE0F000000000000]      	dq .undefined_object
  1198                                  .undefined_object:
  1199 00000FEE 05                      	db T_undefined
  1200 00000FEF [FA07000000000000]      	dq L_constants + 2042
  1201                                  
  1202                                  free_var_32:	; location of append
  1203 00000FF7 [FF0F000000000000]      	dq .undefined_object
  1204                                  .undefined_object:
  1205 00000FFF 05                      	db T_undefined
  1206 00001000 [2B08000000000000]      	dq L_constants + 2091
  1207                                  
  1208                                  free_var_33:	; location of apply
  1209 00001008 [1010000000000000]      	dq .undefined_object
  1210                                  .undefined_object:
  1211 00001010 05                      	db T_undefined
  1212 00001011 [D207000000000000]      	dq L_constants + 2002
  1213                                  
  1214                                  free_var_34:	; location of assoc
  1215 00001019 [2110000000000000]      	dq .undefined_object
  1216                                  .undefined_object:
  1217 00001021 05                      	db T_undefined
  1218 00001022 [A70C000000000000]      	dq L_constants + 3239
  1219                                  
  1220                                  free_var_35:	; location of caaaar
  1221 0000102A [3210000000000000]      	dq .undefined_object
  1222                                  .undefined_object:
  1223 00001032 05                      	db T_undefined
  1224 00001033 [8106000000000000]      	dq L_constants + 1665
  1225                                  
  1226                                  free_var_36:	; location of caaadr
  1227 0000103B [4310000000000000]      	dq .undefined_object
  1228                                  .undefined_object:
  1229 00001043 05                      	db T_undefined
  1230 00001044 [9006000000000000]      	dq L_constants + 1680
  1231                                  
  1232                                  free_var_37:	; location of caaar
  1233 0000104C [5410000000000000]      	dq .undefined_object
  1234                                  .undefined_object:
  1235 00001054 05                      	db T_undefined
  1236 00001055 [1106000000000000]      	dq L_constants + 1553
  1237                                  
  1238                                  free_var_38:	; location of caadar
  1239 0000105D [6510000000000000]      	dq .undefined_object
  1240                                  .undefined_object:
  1241 00001065 05                      	db T_undefined
  1242 00001066 [9F06000000000000]      	dq L_constants + 1695
  1243                                  
  1244                                  free_var_39:	; location of caaddr
  1245 0000106E [7610000000000000]      	dq .undefined_object
  1246                                  .undefined_object:
  1247 00001076 05                      	db T_undefined
  1248 00001077 [AE06000000000000]      	dq L_constants + 1710
  1249                                  
  1250                                  free_var_40:	; location of caadr
  1251 0000107F [8710000000000000]      	dq .undefined_object
  1252                                  .undefined_object:
  1253 00001087 05                      	db T_undefined
  1254 00001088 [1F06000000000000]      	dq L_constants + 1567
  1255                                  
  1256                                  free_var_41:	; location of caar
  1257 00001090 [9810000000000000]      	dq .undefined_object
  1258                                  .undefined_object:
  1259 00001098 05                      	db T_undefined
  1260 00001099 [DD05000000000000]      	dq L_constants + 1501
  1261                                  
  1262                                  free_var_42:	; location of cadaar
  1263 000010A1 [A910000000000000]      	dq .undefined_object
  1264                                  .undefined_object:
  1265 000010A9 05                      	db T_undefined
  1266 000010AA [BD06000000000000]      	dq L_constants + 1725
  1267                                  
  1268                                  free_var_43:	; location of cadadr
  1269 000010B2 [BA10000000000000]      	dq .undefined_object
  1270                                  .undefined_object:
  1271 000010BA 05                      	db T_undefined
  1272 000010BB [CC06000000000000]      	dq L_constants + 1740
  1273                                  
  1274                                  free_var_44:	; location of cadar
  1275 000010C3 [CB10000000000000]      	dq .undefined_object
  1276                                  .undefined_object:
  1277 000010CB 05                      	db T_undefined
  1278 000010CC [2D06000000000000]      	dq L_constants + 1581
  1279                                  
  1280                                  free_var_45:	; location of caddar
  1281 000010D4 [DC10000000000000]      	dq .undefined_object
  1282                                  .undefined_object:
  1283 000010DC 05                      	db T_undefined
  1284 000010DD [DB06000000000000]      	dq L_constants + 1755
  1285                                  
  1286                                  free_var_46:	; location of cadddr
  1287 000010E5 [ED10000000000000]      	dq .undefined_object
  1288                                  .undefined_object:
  1289 000010ED 05                      	db T_undefined
  1290 000010EE [EA06000000000000]      	dq L_constants + 1770
  1291                                  
  1292                                  free_var_47:	; location of caddr
  1293 000010F6 [FE10000000000000]      	dq .undefined_object
  1294                                  .undefined_object:
  1295 000010FE 05                      	db T_undefined
  1296 000010FF [3B06000000000000]      	dq L_constants + 1595
  1297                                  
  1298                                  free_var_48:	; location of cadr
  1299 00001107 [0F11000000000000]      	dq .undefined_object
  1300                                  .undefined_object:
  1301 0000110F 05                      	db T_undefined
  1302 00001110 [EA05000000000000]      	dq L_constants + 1514
  1303                                  
  1304                                  free_var_49:	; location of car
  1305 00001118 [2011000000000000]      	dq .undefined_object
  1306                                  .undefined_object:
  1307 00001120 05                      	db T_undefined
  1308 00001121 [1501000000000000]      	dq L_constants + 277
  1309                                  
  1310                                  free_var_50:	; location of cdaaar
  1311 00001129 [3111000000000000]      	dq .undefined_object
  1312                                  .undefined_object:
  1313 00001131 05                      	db T_undefined
  1314 00001132 [F906000000000000]      	dq L_constants + 1785
  1315                                  
  1316                                  free_var_51:	; location of cdaadr
  1317 0000113A [4211000000000000]      	dq .undefined_object
  1318                                  .undefined_object:
  1319 00001142 05                      	db T_undefined
  1320 00001143 [0807000000000000]      	dq L_constants + 1800
  1321                                  
  1322                                  free_var_52:	; location of cdaar
  1323 0000114B [5311000000000000]      	dq .undefined_object
  1324                                  .undefined_object:
  1325 00001153 05                      	db T_undefined
  1326 00001154 [4906000000000000]      	dq L_constants + 1609
  1327                                  
  1328                                  free_var_53:	; location of cdadar
  1329 0000115C [6411000000000000]      	dq .undefined_object
  1330                                  .undefined_object:
  1331 00001164 05                      	db T_undefined
  1332 00001165 [1707000000000000]      	dq L_constants + 1815
  1333                                  
  1334                                  free_var_54:	; location of cdaddr
  1335 0000116D [7511000000000000]      	dq .undefined_object
  1336                                  .undefined_object:
  1337 00001175 05                      	db T_undefined
  1338 00001176 [2607000000000000]      	dq L_constants + 1830
  1339                                  
  1340                                  free_var_55:	; location of cdadr
  1341 0000117E [8611000000000000]      	dq .undefined_object
  1342                                  .undefined_object:
  1343 00001186 05                      	db T_undefined
  1344 00001187 [5706000000000000]      	dq L_constants + 1623
  1345                                  
  1346                                  free_var_56:	; location of cdar
  1347 0000118F [9711000000000000]      	dq .undefined_object
  1348                                  .undefined_object:
  1349 00001197 05                      	db T_undefined
  1350 00001198 [F705000000000000]      	dq L_constants + 1527
  1351                                  
  1352                                  free_var_57:	; location of cddaar
  1353 000011A0 [A811000000000000]      	dq .undefined_object
  1354                                  .undefined_object:
  1355 000011A8 05                      	db T_undefined
  1356 000011A9 [3507000000000000]      	dq L_constants + 1845
  1357                                  
  1358                                  free_var_58:	; location of cddadr
  1359 000011B1 [B911000000000000]      	dq .undefined_object
  1360                                  .undefined_object:
  1361 000011B9 05                      	db T_undefined
  1362 000011BA [4407000000000000]      	dq L_constants + 1860
  1363                                  
  1364                                  free_var_59:	; location of cddar
  1365 000011C2 [CA11000000000000]      	dq .undefined_object
  1366                                  .undefined_object:
  1367 000011CA 05                      	db T_undefined
  1368 000011CB [6506000000000000]      	dq L_constants + 1637
  1369                                  
  1370                                  free_var_60:	; location of cdddar
  1371 000011D3 [DB11000000000000]      	dq .undefined_object
  1372                                  .undefined_object:
  1373 000011DB 05                      	db T_undefined
  1374 000011DC [5307000000000000]      	dq L_constants + 1875
  1375                                  
  1376                                  free_var_61:	; location of cddddr
  1377 000011E4 [EC11000000000000]      	dq .undefined_object
  1378                                  .undefined_object:
  1379 000011EC 05                      	db T_undefined
  1380 000011ED [6207000000000000]      	dq L_constants + 1890
  1381                                  
  1382                                  free_var_62:	; location of cdddr
  1383 000011F5 [FD11000000000000]      	dq .undefined_object
  1384                                  .undefined_object:
  1385 000011FD 05                      	db T_undefined
  1386 000011FE [7306000000000000]      	dq L_constants + 1651
  1387                                  
  1388                                  free_var_63:	; location of cddr
  1389 00001206 [0E12000000000000]      	dq .undefined_object
  1390                                  .undefined_object:
  1391 0000120E 05                      	db T_undefined
  1392 0000120F [0406000000000000]      	dq L_constants + 1540
  1393                                  
  1394                                  free_var_64:	; location of cdr
  1395 00001217 [1F12000000000000]      	dq .undefined_object
  1396                                  .undefined_object:
  1397 0000121F 05                      	db T_undefined
  1398 00001220 [2101000000000000]      	dq L_constants + 289
  1399                                  
  1400                                  free_var_65:	; location of char->integer
  1401 00001228 [3012000000000000]      	dq .undefined_object
  1402                                  .undefined_object:
  1403 00001230 05                      	db T_undefined
  1404 00001231 [A901000000000000]      	dq L_constants + 425
  1405                                  
  1406                                  free_var_66:	; location of char-ci<=?
  1407 00001239 [4112000000000000]      	dq .undefined_object
  1408                                  .undefined_object:
  1409 00001241 05                      	db T_undefined
  1410 00001242 [230A000000000000]      	dq L_constants + 2595
  1411                                  
  1412                                  free_var_67:	; location of char-ci<?
  1413 0000124A [5212000000000000]      	dq .undefined_object
  1414                                  .undefined_object:
  1415 00001252 05                      	db T_undefined
  1416 00001253 [110A000000000000]      	dq L_constants + 2577
  1417                                  
  1418                                  free_var_68:	; location of char-ci=?
  1419 0000125B [6312000000000000]      	dq .undefined_object
  1420                                  .undefined_object:
  1421 00001263 05                      	db T_undefined
  1422 00001264 [360A000000000000]      	dq L_constants + 2614
  1423                                  
  1424                                  free_var_69:	; location of char-ci>=?
  1425 0000126C [7412000000000000]      	dq .undefined_object
  1426                                  .undefined_object:
  1427 00001274 05                      	db T_undefined
  1428 00001275 [5A0A000000000000]      	dq L_constants + 2650
  1429                                  
  1430                                  free_var_70:	; location of char-ci>?
  1431 0000127D [8512000000000000]      	dq .undefined_object
  1432                                  .undefined_object:
  1433 00001285 05                      	db T_undefined
  1434 00001286 [480A000000000000]      	dq L_constants + 2632
  1435                                  
  1436                                  free_var_71:	; location of char-downcase
  1437 0000128E [9612000000000000]      	dq .undefined_object
  1438                                  .undefined_object:
  1439 00001296 05                      	db T_undefined
  1440 00001297 [DF09000000000000]      	dq L_constants + 2527
  1441                                  
  1442                                  free_var_72:	; location of char-upcase
  1443 0000129F [A712000000000000]      	dq .undefined_object
  1444                                  .undefined_object:
  1445 000012A7 05                      	db T_undefined
  1446 000012A8 [F509000000000000]      	dq L_constants + 2549
  1447                                  
  1448                                  free_var_73:	; location of char<=?
  1449 000012B0 [B812000000000000]      	dq .undefined_object
  1450                                  .undefined_object:
  1451 000012B8 05                      	db T_undefined
  1452 000012B9 [A109000000000000]      	dq L_constants + 2465
  1453                                  
  1454                                  free_var_74:	; location of char<?
  1455 000012C1 [C912000000000000]      	dq .undefined_object
  1456                                  .undefined_object:
  1457 000012C9 05                      	db T_undefined
  1458 000012CA [9209000000000000]      	dq L_constants + 2450
  1459                                  
  1460                                  free_var_75:	; location of char=?
  1461 000012D2 [DA12000000000000]      	dq .undefined_object
  1462                                  .undefined_object:
  1463 000012DA 05                      	db T_undefined
  1464 000012DB [B109000000000000]      	dq L_constants + 2481
  1465                                  
  1466                                  free_var_76:	; location of char>=?
  1467 000012E3 [EB12000000000000]      	dq .undefined_object
  1468                                  .undefined_object:
  1469 000012EB 05                      	db T_undefined
  1470 000012EC [CF09000000000000]      	dq L_constants + 2511
  1471                                  
  1472                                  free_var_77:	; location of char>?
  1473 000012F4 [FC12000000000000]      	dq .undefined_object
  1474                                  .undefined_object:
  1475 000012FC 05                      	db T_undefined
  1476 000012FD [C009000000000000]      	dq L_constants + 2496
  1477                                  
  1478                                  free_var_78:	; location of char?
  1479 00001305 [0D13000000000000]      	dq .undefined_object
  1480                                  .undefined_object:
  1481 0000130D 05                      	db T_undefined
  1482 0000130E [3000000000000000]      	dq L_constants + 48
  1483                                  
  1484                                  free_var_79:	; location of cons
  1485 00001316 [1E13000000000000]      	dq .undefined_object
  1486                                  .undefined_object:
  1487 0000131E 05                      	db T_undefined
  1488 0000131F [DF00000000000000]      	dq L_constants + 223
  1489                                  
  1490                                  free_var_80:	; location of eq?
  1491 00001327 [2F13000000000000]      	dq .undefined_object
  1492                                  .undefined_object:
  1493 0000132F 05                      	db T_undefined
  1494 00001330 [9604000000000000]      	dq L_constants + 1174
  1495                                  
  1496                                  free_var_81:	; location of equal?
  1497 00001338 [4013000000000000]      	dq .undefined_object
  1498                                  .undefined_object:
  1499 00001340 05                      	db T_undefined
  1500 00001341 [980C000000000000]      	dq L_constants + 3224
  1501                                  
  1502                                  free_var_82:	; location of error
  1503 00001349 [5113000000000000]      	dq .undefined_object
  1504                                  .undefined_object:
  1505 00001351 05                      	db T_undefined
  1506 00001352 [1103000000000000]      	dq L_constants + 785
  1507                                  
  1508                                  free_var_83:	; location of even?
  1509 0000135A [6213000000000000]      	dq .undefined_object
  1510                                  .undefined_object:
  1511 00001362 05                      	db T_undefined
  1512 00001363 [680C000000000000]      	dq L_constants + 3176
  1513                                  
  1514                                  free_var_84:	; location of fact
  1515 0000136B [7313000000000000]      	dq .undefined_object
  1516                                  .undefined_object:
  1517 00001373 05                      	db T_undefined
  1518 00001374 [0309000000000000]      	dq L_constants + 2307
  1519                                  
  1520                                  free_var_85:	; location of fold-left
  1521 0000137C [8413000000000000]      	dq .undefined_object
  1522                                  .undefined_object:
  1523 00001384 05                      	db T_undefined
  1524 00001385 [1908000000000000]      	dq L_constants + 2073
  1525                                  
  1526                                  free_var_86:	; location of fold-right
  1527 0000138D [9513000000000000]      	dq .undefined_object
  1528                                  .undefined_object:
  1529 00001395 05                      	db T_undefined
  1530 00001396 [3A08000000000000]      	dq L_constants + 2106
  1531                                  
  1532                                  free_var_87:	; location of fraction->real
  1533 0000139E [A613000000000000]      	dq .undefined_object
  1534                                  .undefined_object:
  1535 000013A6 05                      	db T_undefined
  1536 000013A7 [9201000000000000]      	dq L_constants + 402
  1537                                  
  1538                                  free_var_88:	; location of fraction?
  1539 000013AF [B713000000000000]      	dq .undefined_object
  1540                                  .undefined_object:
  1541 000013B7 05                      	db T_undefined
  1542 000013B8 [9800000000000000]      	dq L_constants + 152
  1543                                  
  1544                                  free_var_89:	; location of integer->char
  1545 000013C0 [C813000000000000]      	dq .undefined_object
  1546                                  .undefined_object:
  1547 000013C8 05                      	db T_undefined
  1548 000013C9 [BF01000000000000]      	dq L_constants + 447
  1549                                  
  1550                                  free_var_90:	; location of integer->real
  1551 000013D1 [D913000000000000]      	dq .undefined_object
  1552                                  .undefined_object:
  1553 000013D9 05                      	db T_undefined
  1554 000013DA [7C01000000000000]      	dq L_constants + 380
  1555                                  
  1556                                  free_var_91:	; location of integer?
  1557 000013E2 [EA13000000000000]      	dq .undefined_object
  1558                                  .undefined_object:
  1559 000013EA 05                      	db T_undefined
  1560 000013EB [F001000000000000]      	dq L_constants + 496
  1561                                  
  1562                                  free_var_92:	; location of list
  1563 000013F3 [FB13000000000000]      	dq .undefined_object
  1564                                  .undefined_object:
  1565 000013FB 05                      	db T_undefined
  1566 000013FC [7F07000000000000]      	dq L_constants + 1919
  1567                                  
  1568                                  free_var_93:	; location of list*
  1569 00001404 [0C14000000000000]      	dq .undefined_object
  1570                                  .undefined_object:
  1571 0000140C 05                      	db T_undefined
  1572 0000140D [AA07000000000000]      	dq L_constants + 1962
  1573                                  
  1574                                  free_var_94:	; location of list->string
  1575 00001415 [1D14000000000000]      	dq .undefined_object
  1576                                  .undefined_object:
  1577 0000141D 05                      	db T_undefined
  1578 0000141E [9B0A000000000000]      	dq L_constants + 2715
  1579                                  
  1580                                  free_var_95:	; location of list->vector
  1581 00001426 [2E14000000000000]      	dq .undefined_object
  1582                                  .undefined_object:
  1583 0000142E 05                      	db T_undefined
  1584 0000142F [FC0B000000000000]      	dq L_constants + 3068
  1585                                  
  1586                                  free_var_96:	; location of list?
  1587 00001437 [3F14000000000000]      	dq .undefined_object
  1588                                  .undefined_object:
  1589 0000143F 05                      	db T_undefined
  1590 00001440 [7107000000000000]      	dq L_constants + 1905
  1591                                  
  1592                                  free_var_97:	; location of logarithm
  1593 00001448 [5014000000000000]      	dq .undefined_object
  1594                                  .undefined_object:
  1595 00001450 05                      	db T_undefined
  1596 00001451 [8B0D000000000000]      	dq L_constants + 3467
  1597                                  
  1598                                  free_var_98:	; location of make-list-thunk
  1599 00001459 [6114000000000000]      	dq .undefined_object
  1600                                  .undefined_object:
  1601 00001461 05                      	db T_undefined
  1602 00001462 [3F0D000000000000]      	dq L_constants + 3391
  1603                                  
  1604                                  free_var_99:	; location of make-string
  1605 0000146A [7214000000000000]      	dq .undefined_object
  1606                                  .undefined_object:
  1607 00001472 05                      	db T_undefined
  1608 00001473 [5C04000000000000]      	dq L_constants + 1116
  1609                                  
  1610                                  free_var_100:	; location of make-string-thunk
  1611 0000147B [8314000000000000]      	dq .undefined_object
  1612                                  .undefined_object:
  1613 00001483 05                      	db T_undefined
  1614 00001484 [570D000000000000]      	dq L_constants + 3415
  1615                                  
  1616                                  free_var_101:	; location of make-vector
  1617 0000148C [9414000000000000]      	dq .undefined_object
  1618                                  .undefined_object:
  1619 00001494 05                      	db T_undefined
  1620 00001495 [4804000000000000]      	dq L_constants + 1096
  1621                                  
  1622                                  free_var_102:	; location of make-vector-thunk
  1623 0000149D [A514000000000000]      	dq .undefined_object
  1624                                  .undefined_object:
  1625 000014A5 05                      	db T_undefined
  1626 000014A6 [710D000000000000]      	dq L_constants + 3441
  1627                                  
  1628                                  free_var_103:	; location of map
  1629 000014AE [B614000000000000]      	dq .undefined_object
  1630                                  .undefined_object:
  1631 000014B6 05                      	db T_undefined
  1632 000014B7 [EE07000000000000]      	dq L_constants + 2030
  1633                                  
  1634                                  free_var_104:	; location of negative?
  1635 000014BF [C714000000000000]      	dq .undefined_object
  1636                                  .undefined_object:
  1637 000014C7 05                      	db T_undefined
  1638 000014C8 [560C000000000000]      	dq L_constants + 3158
  1639                                  
  1640                                  free_var_105:	; location of newline
  1641 000014D0 [D814000000000000]      	dq .undefined_object
  1642                                  .undefined_object:
  1643 000014D8 05                      	db T_undefined
  1644 000014D9 [A60D000000000000]      	dq L_constants + 3494
  1645                                  
  1646                                  free_var_106:	; location of not
  1647 000014E1 [E914000000000000]      	dq .undefined_object
  1648                                  .undefined_object:
  1649 000014E9 05                      	db T_undefined
  1650 000014EA [8C07000000000000]      	dq L_constants + 1932
  1651                                  
  1652                                  free_var_107:	; location of null?
  1653 000014F2 [FA14000000000000]      	dq .undefined_object
  1654                                  .undefined_object:
  1655 000014FA 05                      	db T_undefined
  1656 000014FB [0600000000000000]      	dq L_constants + 6
  1657                                  
  1658                                  free_var_108:	; location of number?
  1659 00001503 [0B15000000000000]      	dq .undefined_object
  1660                                  .undefined_object:
  1661 0000150B 05                      	db T_undefined
  1662 0000150C [BB00000000000000]      	dq L_constants + 187
  1663                                  
  1664                                  free_var_109:	; location of odd?
  1665 00001514 [1C15000000000000]      	dq .undefined_object
  1666                                  .undefined_object:
  1667 0000151C 05                      	db T_undefined
  1668 0000151D [7F0C000000000000]      	dq L_constants + 3199
  1669                                  
  1670                                  free_var_110:	; location of ormap
  1671 00001525 [2D15000000000000]      	dq .undefined_object
  1672                                  .undefined_object:
  1673 0000152D 05                      	db T_undefined
  1674 0000152E [E007000000000000]      	dq L_constants + 2016
  1675                                  
  1676                                  free_var_111:	; location of pair?
  1677 00001536 [3E15000000000000]      	dq .undefined_object
  1678                                  .undefined_object:
  1679 0000153E 05                      	db T_undefined
  1680 0000153F [1400000000000000]      	dq L_constants + 20
  1681                                  
  1682                                  free_var_112:	; location of positive?
  1683 00001547 [4F15000000000000]      	dq .undefined_object
  1684                                  .undefined_object:
  1685 0000154F 05                      	db T_undefined
  1686 00001550 [440C000000000000]      	dq L_constants + 3140
  1687                                  
  1688                                  free_var_113:	; location of random
  1689 00001558 [6015000000000000]      	dq .undefined_object
  1690                                  .undefined_object:
  1691 00001560 05                      	db T_undefined
  1692 00001561 [350C000000000000]      	dq L_constants + 3125
  1693                                  
  1694                                  free_var_114:	; location of rational?
  1695 00001569 [7115000000000000]      	dq .undefined_object
  1696                                  .undefined_object:
  1697 00001571 05                      	db T_undefined
  1698 00001572 [9807000000000000]      	dq L_constants + 1944
  1699                                  
  1700                                  free_var_115:	; location of real
  1701 0000157A [8215000000000000]      	dq .undefined_object
  1702                                  .undefined_object:
  1703 00001582 05                      	db T_undefined
  1704 00001583 [BE08000000000000]      	dq L_constants + 2238
  1705                                  
  1706                                  free_var_116:	; location of real?
  1707 0000158B [9315000000000000]      	dq .undefined_object
  1708                                  .undefined_object:
  1709 00001593 05                      	db T_undefined
  1710 00001594 [8A00000000000000]      	dq L_constants + 138
  1711                                  
  1712                                  free_var_117:	; location of remainder
  1713 0000159C [A415000000000000]      	dq .undefined_object
  1714                                  .undefined_object:
  1715 000015A4 05                      	db T_undefined
  1716 000015A5 [C603000000000000]      	dq L_constants + 966
  1717                                  
  1718                                  free_var_118:	; location of reverse
  1719 000015AD [B515000000000000]      	dq .undefined_object
  1720                                  .undefined_object:
  1721 000015B5 05                      	db T_undefined
  1722 000015B6 [0908000000000000]      	dq L_constants + 2057
  1723                                  
  1724                                  free_var_119:	; location of string->list
  1725 000015BE [C615000000000000]      	dq .undefined_object
  1726                                  .undefined_object:
  1727 000015C6 05                      	db T_undefined
  1728 000015C7 [B00A000000000000]      	dq L_constants + 2736
  1729                                  
  1730                                  free_var_120:	; location of string-append
  1731 000015CF [D715000000000000]      	dq .undefined_object
  1732                                  .undefined_object:
  1733 000015D7 05                      	db T_undefined
  1734 000015D8 [B50C000000000000]      	dq L_constants + 3253
  1735                                  
  1736                                  free_var_121:	; location of string-ci<=?
  1737 000015E0 [E815000000000000]      	dq .undefined_object
  1738                                  .undefined_object:
  1739 000015E8 05                      	db T_undefined
  1740 000015E9 [300B000000000000]      	dq L_constants + 2864
  1741                                  
  1742                                  free_var_122:	; location of string-ci<?
  1743 000015F1 [F915000000000000]      	dq .undefined_object
  1744                                  .undefined_object:
  1745 000015F9 05                      	db T_undefined
  1746 000015FA [1C0B000000000000]      	dq L_constants + 2844
  1747                                  
  1748                                  free_var_123:	; location of string-ci=?
  1749 00001602 [0A16000000000000]      	dq .undefined_object
  1750                                  .undefined_object:
  1751 0000160A 05                      	db T_undefined
  1752 0000160B [450B000000000000]      	dq L_constants + 2885
  1753                                  
  1754                                  free_var_124:	; location of string-ci>=?
  1755 00001613 [1B16000000000000]      	dq .undefined_object
  1756                                  .undefined_object:
  1757 0000161B 05                      	db T_undefined
  1758 0000161C [590B000000000000]      	dq L_constants + 2905
  1759                                  
  1760                                  free_var_125:	; location of string-ci>?
  1761 00001624 [2C16000000000000]      	dq .undefined_object
  1762                                  .undefined_object:
  1763 0000162C 05                      	db T_undefined
  1764 0000162D [6E0B000000000000]      	dq L_constants + 2926
  1765                                  
  1766                                  free_var_126:	; location of string-downcase
  1767 00001635 [3D16000000000000]      	dq .undefined_object
  1768                                  .undefined_object:
  1769 0000163D 05                      	db T_undefined
  1770 0000163E [6D0A000000000000]      	dq L_constants + 2669
  1771                                  
  1772                                  free_var_127:	; location of string-length
  1773 00001646 [4E16000000000000]      	dq .undefined_object
  1774                                  .undefined_object:
  1775 0000164E 05                      	db T_undefined
  1776 0000164F [2D01000000000000]      	dq L_constants + 301
  1777                                  
  1778                                  free_var_128:	; location of string-ref
  1779 00001657 [5F16000000000000]      	dq .undefined_object
  1780                                  .undefined_object:
  1781 0000165F 05                      	db T_undefined
  1782 00001660 [FA03000000000000]      	dq L_constants + 1018
  1783                                  
  1784                                  free_var_129:	; location of string-reverse
  1785 00001668 [7016000000000000]      	dq .undefined_object
  1786                                  .undefined_object:
  1787 00001670 05                      	db T_undefined
  1788 00001671 [E10C000000000000]      	dq L_constants + 3297
  1789                                  
  1790                                  free_var_130:	; location of string-reverse!
  1791 00001679 [8116000000000000]      	dq .undefined_object
  1792                                  .undefined_object:
  1793 00001681 05                      	db T_undefined
  1794 00001682 [0F0D000000000000]      	dq L_constants + 3343
  1795                                  
  1796                                  free_var_131:	; location of string-set!
  1797 0000168A [9216000000000000]      	dq .undefined_object
  1798                                  .undefined_object:
  1799 00001692 05                      	db T_undefined
  1800 00001693 [3404000000000000]      	dq L_constants + 1076
  1801                                  
  1802                                  free_var_132:	; location of string-upcase
  1803 0000169B [A316000000000000]      	dq .undefined_object
  1804                                  .undefined_object:
  1805 000016A3 05                      	db T_undefined
  1806 000016A4 [850A000000000000]      	dq L_constants + 2693
  1807                                  
  1808                                  free_var_133:	; location of string<=?
  1809 000016AC [B416000000000000]      	dq .undefined_object
  1810                                  .undefined_object:
  1811 000016B4 05                      	db T_undefined
  1812 000016B5 [D60A000000000000]      	dq L_constants + 2774
  1813                                  
  1814                                  free_var_134:	; location of string<?
  1815 000016BD [C516000000000000]      	dq .undefined_object
  1816                                  .undefined_object:
  1817 000016C5 05                      	db T_undefined
  1818 000016C6 [C50A000000000000]      	dq L_constants + 2757
  1819                                  
  1820                                  free_var_135:	; location of string=?
  1821 000016CE [D616000000000000]      	dq .undefined_object
  1822                                  .undefined_object:
  1823 000016D6 05                      	db T_undefined
  1824 000016D7 [E80A000000000000]      	dq L_constants + 2792
  1825                                  
  1826                                  free_var_136:	; location of string>=?
  1827 000016DF [E716000000000000]      	dq .undefined_object
  1828                                  .undefined_object:
  1829 000016E7 05                      	db T_undefined
  1830 000016E8 [F90A000000000000]      	dq L_constants + 2809
  1831                                  
  1832                                  free_var_137:	; location of string>?
  1833 000016F0 [F816000000000000]      	dq .undefined_object
  1834                                  .undefined_object:
  1835 000016F8 05                      	db T_undefined
  1836 000016F9 [0B0B000000000000]      	dq L_constants + 2827
  1837                                  
  1838                                  free_var_138:	; location of string?
  1839 00001701 [0917000000000000]      	dq .undefined_object
  1840                                  .undefined_object:
  1841 00001709 05                      	db T_undefined
  1842 0000170A [3E00000000000000]      	dq L_constants + 62
  1843                                  
  1844                                  free_var_139:	; location of trng
  1845 00001712 [1A17000000000000]      	dq .undefined_object
  1846                                  .undefined_object:
  1847 0000171A 05                      	db T_undefined
  1848 0000171B [D501000000000000]      	dq L_constants + 469
  1849                                  
  1850                                  free_var_140:	; location of vector
  1851 00001723 [2B17000000000000]      	dq .undefined_object
  1852                                  .undefined_object:
  1853 0000172B 05                      	db T_undefined
  1854 0000172C [110C000000000000]      	dq L_constants + 3089
  1855                                  
  1856                                  free_var_141:	; location of vector->list
  1857 00001734 [3C17000000000000]      	dq .undefined_object
  1858                                  .undefined_object:
  1859 0000173C 05                      	db T_undefined
  1860 0000173D [200C000000000000]      	dq L_constants + 3104
  1861                                  
  1862                                  free_var_142:	; location of vector-append
  1863 00001745 [4D17000000000000]      	dq .undefined_object
  1864                                  .undefined_object:
  1865 0000174D 05                      	db T_undefined
  1866 0000174E [CB0C000000000000]      	dq L_constants + 3275
  1867                                  
  1868                                  free_var_143:	; location of vector-length
  1869 00001756 [5E17000000000000]      	dq .undefined_object
  1870                                  .undefined_object:
  1871 0000175E 05                      	db T_undefined
  1872 0000175F [4301000000000000]      	dq L_constants + 323
  1873                                  
  1874                                  free_var_144:	; location of vector-ref
  1875 00001767 [6F17000000000000]      	dq .undefined_object
  1876                                  .undefined_object:
  1877 0000176F 05                      	db T_undefined
  1878 00001770 [0D04000000000000]      	dq L_constants + 1037
  1879                                  
  1880                                  free_var_145:	; location of vector-reverse
  1881 00001778 [8017000000000000]      	dq .undefined_object
  1882                                  .undefined_object:
  1883 00001780 05                      	db T_undefined
  1884 00001781 [F80C000000000000]      	dq L_constants + 3320
  1885                                  
  1886                                  free_var_146:	; location of vector-reverse!
  1887 00001789 [9117000000000000]      	dq .undefined_object
  1888                                  .undefined_object:
  1889 00001791 05                      	db T_undefined
  1890 00001792 [270D000000000000]      	dq L_constants + 3367
  1891                                  
  1892                                  free_var_147:	; location of vector-set!
  1893 0000179A [A217000000000000]      	dq .undefined_object
  1894                                  .undefined_object:
  1895 000017A2 05                      	db T_undefined
  1896 000017A3 [2004000000000000]      	dq L_constants + 1056
  1897                                  
  1898                                  free_var_148:	; location of vector?
  1899 000017AB [B317000000000000]      	dq .undefined_object
  1900                                  .undefined_object:
  1901 000017B3 05                      	db T_undefined
  1902 000017B4 [6700000000000000]      	dq L_constants + 103
  1903                                  
  1904                                  free_var_149:	; location of void
  1905 000017BC [C417000000000000]      	dq .undefined_object
  1906                                  .undefined_object:
  1907 000017C4 05                      	db T_undefined
  1908 000017C5 [B80D000000000000]      	dq L_constants + 3512
  1909                                  
  1910                                  free_var_150:	; location of write-char
  1911 000017CD [D517000000000000]      	dq .undefined_object
  1912                                  .undefined_object:
  1913 000017D5 05                      	db T_undefined
  1914 000017D6 [0201000000000000]      	dq L_constants + 258
  1915                                  
  1916                                  free_var_151:	; location of zero?
  1917 000017DE [E617000000000000]      	dq .undefined_object
  1918                                  .undefined_object:
  1919 000017E6 05                      	db T_undefined
  1920 000017E7 [E201000000000000]      	dq L_constants + 482
  1921                                  
  1922                                  
  1923                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
  1924                                  global main
  1925                                  section .text
  1926                                  main:
  1927 00000000 C8000000                        enter 0, 0
  1928 00000004 6A00                            push 0
  1929 00000006 6A00                            push 0
  1930 00000008 68[C97E0100]                    push Lend
  1931 0000000D C8000000                        enter 0, 0
  1932                                  	; building closure for null?
  1933 00000011 48BF-                   	mov rdi, free_var_107
  1933 00000013 [F214000000000000] 
  1934 0000001B 48BE-                   	mov rsi, L_code_ptr_is_null
  1934 0000001D [468A010000000000] 
  1935 00000025 E83A880100              	call bind_primitive
  1936                                  
  1937                                  	; building closure for pair?
  1938 0000002A 48BF-                   	mov rdi, free_var_111
  1938 0000002C [3615000000000000] 
  1939 00000034 48BE-                   	mov rsi, L_code_ptr_is_pair
  1939 00000036 [788A010000000000] 
  1940 0000003E E821880100              	call bind_primitive
  1941                                  
  1942                                  	; building closure for char?
  1943 00000043 48BF-                   	mov rdi, free_var_78
  1943 00000045 [0513000000000000] 
  1944 0000004D 48BE-                   	mov rsi, L_code_ptr_is_char
  1944 0000004F [DC8A010000000000] 
  1945 00000057 E808880100              	call bind_primitive
  1946                                  
  1947                                  	; building closure for string?
  1948 0000005C 48BF-                   	mov rdi, free_var_138
  1948 0000005E [0117000000000000] 
  1949 00000066 48BE-                   	mov rsi, L_code_ptr_is_string
  1949 00000068 [0E8B010000000000] 
  1950 00000070 E8EF870100              	call bind_primitive
  1951                                  
  1952                                  	; building closure for vector?
  1953 00000075 48BF-                   	mov rdi, free_var_148
  1953 00000077 [AB17000000000000] 
  1954 0000007F 48BE-                   	mov rsi, L_code_ptr_is_vector
  1954 00000081 [0C8C010000000000] 
  1955 00000089 E8D6870100              	call bind_primitive
  1956                                  
  1957                                  	; building closure for real?
  1958 0000008E 48BF-                   	mov rdi, free_var_116
  1958 00000090 [8B15000000000000] 
  1959 00000098 48BE-                   	mov rsi, L_code_ptr_is_real
  1959 0000009A [708C010000000000] 
  1960 000000A2 E8BD870100              	call bind_primitive
  1961                                  
  1962                                  	; building closure for fraction?
  1963 000000A7 48BF-                   	mov rdi, free_var_88
  1963 000000A9 [AF13000000000000] 
  1964 000000B1 48BE-                   	mov rsi, L_code_ptr_is_fraction
  1964 000000B3 [A28C010000000000] 
  1965 000000BB E8A4870100              	call bind_primitive
  1966                                  
  1967                                  	; building closure for number?
  1968 000000C0 48BF-                   	mov rdi, free_var_108
  1968 000000C2 [0315000000000000] 
  1969 000000CA 48BE-                   	mov rsi, L_code_ptr_is_number
  1969 000000CC [708D010000000000] 
  1970 000000D4 E88B870100              	call bind_primitive
  1971                                  
  1972                                  	; building closure for cons
  1973 000000D9 48BF-                   	mov rdi, free_var_79
  1973 000000DB [1613000000000000] 
  1974 000000E3 48BE-                   	mov rsi, L_code_ptr_cons
  1974 000000E5 [D88D010000000000] 
  1975 000000ED E872870100              	call bind_primitive
  1976                                  
  1977                                  	; building closure for write-char
  1978 000000F2 48BF-                   	mov rdi, free_var_150
  1978 000000F4 [CD17000000000000] 
  1979 000000FC 48BE-                   	mov rsi, L_code_ptr_write_char
  1979 000000FE [2E8E010000000000] 
  1980 00000106 E859870100              	call bind_primitive
  1981                                  
  1982                                  	; building closure for car
  1983 0000010B 48BF-                   	mov rdi, free_var_49
  1983 0000010D [1811000000000000] 
  1984 00000115 48BE-                   	mov rsi, L_code_ptr_car
  1984 00000117 [818E010000000000] 
  1985 0000011F E840870100              	call bind_primitive
  1986                                  
  1987                                  	; building closure for cdr
  1988 00000124 48BF-                   	mov rdi, free_var_64
  1988 00000126 [1712000000000000] 
  1989 0000012E 48BE-                   	mov rsi, L_code_ptr_cdr
  1989 00000130 [A58E010000000000] 
  1990 00000138 E827870100              	call bind_primitive
  1991                                  
  1992                                  	; building closure for string-length
  1993 0000013D 48BF-                   	mov rdi, free_var_127
  1993 0000013F [4616000000000000] 
  1994 00000147 48BE-                   	mov rsi, L_code_ptr_string_length
  1994 00000149 [C98E010000000000] 
  1995 00000151 E80E870100              	call bind_primitive
  1996                                  
  1997                                  	; building closure for vector-length
  1998 00000156 48BF-                   	mov rdi, free_var_143
  1998 00000158 [5617000000000000] 
  1999 00000160 48BE-                   	mov rsi, L_code_ptr_vector_length
  1999 00000162 [F28E010000000000] 
  2000 0000016A E8F5860100              	call bind_primitive
  2001                                  
  2002                                  	; building closure for integer->real
  2003 0000016F 48BF-                   	mov rdi, free_var_90
  2003 00000171 [D113000000000000] 
  2004 00000179 48BE-                   	mov rsi, L_code_ptr_integer_to_real
  2004 0000017B [638F010000000000] 
  2005 00000183 E8DC860100              	call bind_primitive
  2006                                  
  2007                                  	; building closure for fraction->real
  2008 00000188 48BF-                   	mov rdi, free_var_87
  2008 0000018A [9E13000000000000] 
  2009 00000192 48BE-                   	mov rsi, L_code_ptr_fraction_to_real
  2009 00000194 [918F010000000000] 
  2010 0000019C E8C3860100              	call bind_primitive
  2011                                  
  2012                                  	; building closure for char->integer
  2013 000001A1 48BF-                   	mov rdi, free_var_65
  2013 000001A3 [2812000000000000] 
  2014 000001AB 48BE-                   	mov rsi, L_code_ptr_char_to_integer
  2014 000001AD [CC8F010000000000] 
  2015 000001B5 E8AA860100              	call bind_primitive
  2016                                  
  2017                                  	; building closure for integer->char
  2018 000001BA 48BF-                   	mov rdi, free_var_89
  2018 000001BC [C013000000000000] 
  2019 000001C4 48BE-                   	mov rsi, L_code_ptr_integer_to_char
  2019 000001C6 [3B90010000000000] 
  2020 000001CE E891860100              	call bind_primitive
  2021                                  
  2022                                  	; building closure for trng
  2023 000001D3 48BF-                   	mov rdi, free_var_139
  2023 000001D5 [1217000000000000] 
  2024 000001DD 48BE-                   	mov rsi, L_code_ptr_trng
  2024 000001DF [8690010000000000] 
  2025 000001E7 E878860100              	call bind_primitive
  2026                                  
  2027                                  	; building closure for zero?
  2028 000001EC 48BF-                   	mov rdi, free_var_151
  2028 000001EE [DE17000000000000] 
  2029 000001F6 48BE-                   	mov rsi, L_code_ptr_is_zero
  2029 000001F8 [A590010000000000] 
  2030 00000200 E85F860100              	call bind_primitive
  2031                                  
  2032                                  	; building closure for integer?
  2033 00000205 48BF-                   	mov rdi, free_var_91
  2033 00000207 [E213000000000000] 
  2034 0000020F 48BE-                   	mov rsi, L_code_ptr_is_integer
  2034 00000211 [0A91010000000000] 
  2035 00000219 E846860100              	call bind_primitive
  2036                                  
  2037                                  	; building closure for __bin-apply
  2038 0000021E 48BF-                   	mov rdi, free_var_12
  2038 00000220 [A30E000000000000] 
  2039 00000228 48BE-                   	mov rsi, L_code_ptr_bin_apply
  2039 0000022A [D489010000000000] 
  2040 00000232 E82D860100              	call bind_primitive
  2041                                  
  2042                                  	; building closure for __bin-add-rr
  2043 00000237 48BF-                   	mov rdi, free_var_10
  2043 00000239 [810E000000000000] 
  2044 00000241 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
  2044 00000243 [3C91010000000000] 
  2045 0000024B E814860100              	call bind_primitive
  2046                                  
  2047                                  	; building closure for __bin-sub-rr
  2048 00000250 48BF-                   	mov rdi, free_var_26
  2048 00000252 [910F000000000000] 
  2049 0000025A 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
  2049 0000025C [7C91010000000000] 
  2050 00000264 E8FB850100              	call bind_primitive
  2051                                  
  2052                                  	; building closure for __bin-mul-rr
  2053 00000269 48BF-                   	mov rdi, free_var_23
  2053 0000026B [5E0F000000000000] 
  2054 00000273 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
  2054 00000275 [BC91010000000000] 
  2055 0000027D E8E2850100              	call bind_primitive
  2056                                  
  2057                                  	; building closure for __bin-div-rr
  2058 00000282 48BF-                   	mov rdi, free_var_14
  2058 00000284 [C50E000000000000] 
  2059 0000028C 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
  2059 0000028E [FC91010000000000] 
  2060 00000296 E8C9850100              	call bind_primitive
  2061                                  
  2062                                  	; building closure for __bin-add-qq
  2063 0000029B 48BF-                   	mov rdi, free_var_9
  2063 0000029D [700E000000000000] 
  2064 000002A5 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
  2064 000002A7 [8692010000000000] 
  2065 000002AF E8B0850100              	call bind_primitive
  2066                                  
  2067                                  	; building closure for __bin-sub-qq
  2068 000002B4 48BF-                   	mov rdi, free_var_25
  2068 000002B6 [800F000000000000] 
  2069 000002BE 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
  2069 000002C0 [2693010000000000] 
  2070 000002C8 E897850100              	call bind_primitive
  2071                                  
  2072                                  	; building closure for __bin-mul-qq
  2073 000002CD 48BF-                   	mov rdi, free_var_22
  2073 000002CF [4D0F000000000000] 
  2074 000002D7 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
  2074 000002D9 [CB93010000000000] 
  2075 000002E1 E87E850100              	call bind_primitive
  2076                                  
  2077                                  	; building closure for __bin-div-qq
  2078 000002E6 48BF-                   	mov rdi, free_var_13
  2078 000002E8 [B40E000000000000] 
  2079 000002F0 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
  2079 000002F2 [6594010000000000] 
  2080 000002FA E865850100              	call bind_primitive
  2081                                  
  2082                                  	; building closure for __bin-add-zz
  2083 000002FF 48BF-                   	mov rdi, free_var_11
  2083 00000301 [920E000000000000] 
  2084 00000309 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_zz
  2084 0000030B [4A92010000000000] 
  2085 00000313 E84C850100              	call bind_primitive
  2086                                  
  2087                                  	; building closure for __bin-sub-zz
  2088 00000318 48BF-                   	mov rdi, free_var_27
  2088 0000031A [A20F000000000000] 
  2089 00000322 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_zz
  2089 00000324 [EA92010000000000] 
  2090 0000032C E833850100              	call bind_primitive
  2091                                  
  2092                                  	; building closure for __bin-mul-zz
  2093 00000331 48BF-                   	mov rdi, free_var_24
  2093 00000333 [6F0F000000000000] 
  2094 0000033B 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_zz
  2094 0000033D [8A93010000000000] 
  2095 00000345 E81A850100              	call bind_primitive
  2096                                  
  2097                                  	; building closure for __bin-div-zz
  2098 0000034A 48BF-                   	mov rdi, free_var_15
  2098 0000034C [D60E000000000000] 
  2099 00000354 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_zz
  2099 00000356 [1F94010000000000] 
  2100 0000035E E801850100              	call bind_primitive
  2101                                  
  2102                                  	; building closure for error
  2103 00000363 48BF-                   	mov rdi, free_var_82
  2103 00000365 [4913000000000000] 
  2104 0000036D 48BE-                   	mov rsi, L_code_ptr_error
  2104 0000036F [4F95010000000000] 
  2105 00000377 E8E8840100              	call bind_primitive
  2106                                  
  2107                                  	; building closure for __bin-less-than-rr
  2108 0000037C 48BF-                   	mov rdi, free_var_20
  2108 0000037E [2B0F000000000000] 
  2109 00000386 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
  2109 00000388 [0B96010000000000] 
  2110 00000390 E8CF840100              	call bind_primitive
  2111                                  
  2112                                  	; building closure for __bin-less-than-qq
  2113 00000395 48BF-                   	mov rdi, free_var_19
  2113 00000397 [1A0F000000000000] 
  2114 0000039F 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
  2114 000003A1 [AD96010000000000] 
  2115 000003A9 E8B6840100              	call bind_primitive
  2116                                  
  2117                                  	; building closure for __bin-less-than-zz
  2118 000003AE 48BF-                   	mov rdi, free_var_21
  2118 000003B0 [3C0F000000000000] 
  2119 000003B8 48BE-                   	mov rsi, L_code_ptr_raw_less_than_zz
  2119 000003BA [5E96010000000000] 
  2120 000003C2 E89D840100              	call bind_primitive
  2121                                  
  2122                                  	; building closure for __bin-equal-rr
  2123 000003C7 48BF-                   	mov rdi, free_var_17
  2123 000003C9 [F80E000000000000] 
  2124 000003D1 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
  2124 000003D3 [0C97010000000000] 
  2125 000003DB E884840100              	call bind_primitive
  2126                                  
  2127                                  	; building closure for __bin-equal-qq
  2128 000003E0 48BF-                   	mov rdi, free_var_16
  2128 000003E2 [E70E000000000000] 
  2129 000003EA 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
  2129 000003EC [AE97010000000000] 
  2130 000003F4 E86B840100              	call bind_primitive
  2131                                  
  2132                                  	; building closure for __bin-equal-zz
  2133 000003F9 48BF-                   	mov rdi, free_var_18
  2133 000003FB [090F000000000000] 
  2134 00000403 48BE-                   	mov rsi, L_code_ptr_raw_equal_zz
  2134 00000405 [5F97010000000000] 
  2135 0000040D E852840100              	call bind_primitive
  2136                                  
  2137                                  	; building closure for remainder
  2138 00000412 48BF-                   	mov rdi, free_var_117
  2138 00000414 [9C15000000000000] 
  2139 0000041C 48BE-                   	mov rsi, L_code_ptr_remainder
  2139 0000041E [5998010000000000] 
  2140 00000426 E839840100              	call bind_primitive
  2141                                  
  2142                                  	; building closure for string-ref
  2143 0000042B 48BF-                   	mov rdi, free_var_128
  2143 0000042D [5716000000000000] 
  2144 00000435 48BE-                   	mov rsi, L_code_ptr_string_ref
  2144 00000437 [0999010000000000] 
  2145 0000043F E820840100              	call bind_primitive
  2146                                  
  2147                                  	; building closure for vector-ref
  2148 00000444 48BF-                   	mov rdi, free_var_144
  2148 00000446 [6717000000000000] 
  2149 0000044E 48BE-                   	mov rsi, L_code_ptr_vector_ref
  2149 00000450 [6599010000000000] 
  2150 00000458 E807840100              	call bind_primitive
  2151                                  
  2152                                  	; building closure for vector-set!
  2153 0000045D 48BF-                   	mov rdi, free_var_147
  2153 0000045F [9A17000000000000] 
  2154 00000467 48BE-                   	mov rsi, L_code_ptr_vector_set
  2154 00000469 [B299010000000000] 
  2155 00000471 E8EE830100              	call bind_primitive
  2156                                  
  2157                                  	; building closure for string-set!
  2158 00000476 48BF-                   	mov rdi, free_var_131
  2158 00000478 [8A16000000000000] 
  2159 00000480 48BE-                   	mov rsi, L_code_ptr_string_set
  2159 00000482 [0D9A010000000000] 
  2160 0000048A E8D5830100              	call bind_primitive
  2161                                  
  2162                                  	; building closure for make-vector
  2163 0000048F 48BF-                   	mov rdi, free_var_101
  2163 00000491 [8C14000000000000] 
  2164 00000499 48BE-                   	mov rsi, L_code_ptr_make_vector
  2164 0000049B [739A010000000000] 
  2165 000004A3 E8BC830100              	call bind_primitive
  2166                                  
  2167                                  	; building closure for make-string
  2168 000004A8 48BF-                   	mov rdi, free_var_99
  2168 000004AA [6A14000000000000] 
  2169 000004B2 48BE-                   	mov rsi, L_code_ptr_make_string
  2169 000004B4 [CE9A010000000000] 
  2170 000004BC E8A3830100              	call bind_primitive
  2171                                  
  2172                                  	; building closure for eq?
  2173 000004C1 48BF-                   	mov rdi, free_var_80
  2173 000004C3 [2713000000000000] 
  2174 000004CB 48BE-                   	mov rsi, L_code_ptr_is_eq
  2174 000004CD [839B010000000000] 
  2175 000004D5 E88A830100              	call bind_primitive
  2176                                  
  2177                                  	; building closure for __integer-to-fraction
  2178 000004DA 48BF-                   	mov rdi, free_var_29
  2178 000004DC [C40F000000000000] 
  2179 000004E4 48BE-                   	mov rsi, L_code_ptr_integer_to_fraction
  2179 000004E6 [FD8F010000000000] 
  2180 000004EE E871830100              	call bind_primitive
  2181                                  
  2182 000004F3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2183 000004F8 E8377B0100              	call malloc
  2184 000004FD 50                      	push rax
  2185 000004FE BF00000000              	mov rdi, 8 * 0	; new rib
  2186 00000503 E82C7B0100              	call malloc
  2187 00000508 50                      	push rax
  2188 00000509 BF08000000              	mov rdi, 8 * 1	; extended env
  2189 0000050E E8217B0100              	call malloc
  2190 00000513 488B7D10                	mov rdi, ENV
  2191 00000517 BE00000000              	mov rsi, 0
  2192 0000051C BA01000000              	mov rdx, 1
  2193                                  .L_lambda_simple_env_loop_00c4:	; ext_env[i + 1] <-- env[i]
  2194 00000521 4883FE00                	cmp rsi, 0
  2195 00000525 7410                    	je .L_lambda_simple_env_end_00c4
  2196 00000527 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2197 0000052B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2198 0000052F 48FFC6                  	inc rsi
  2199 00000532 48FFC2                  	inc rdx
  2200 00000535 EBEA                    	jmp .L_lambda_simple_env_loop_00c4
  2201                                  .L_lambda_simple_env_end_00c4:
  2202 00000537 5B                      	pop rbx
  2203 00000538 BE00000000              	mov rsi, 0
  2204                                  .L_lambda_simple_params_loop_00c4:	; copy params
  2205 0000053D 4883FE00                	cmp rsi, 0
  2206 00000541 740E                    	je .L_lambda_simple_params_end_00c4
  2207 00000543 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2208 00000548 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2209 0000054C 48FFC6                  	inc rsi
  2210 0000054F EBEC                    	jmp .L_lambda_simple_params_loop_00c4
  2211                                  .L_lambda_simple_params_end_00c4:
  2212 00000551 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2213 00000554 4889C3                  	mov rbx, rax
  2214 00000557 58                      	pop rax
  2215 00000558 C60004                  	mov byte [rax], T_closure
  2216 0000055B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2217 0000055F 48C74009[6C050000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c4
  2218 00000567 E9AA000000              	jmp .L_lambda_simple_end_00c4
  2219                                  .L_lambda_simple_code_00c4:	; lambda-simple body
  2220 0000056C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2221 00000572 740B                    	je .L_lambda_simple_arity_check_ok_00c4
  2222 00000574 FF742410                	push qword [rsp + 8 * 2]
  2223 00000578 6A01                    	push 1
  2224 0000057A E96E7A0100              	jmp L_error_incorrect_arity_simple
  2225                                  .L_lambda_simple_arity_check_ok_00c4:
  2226 0000057F C8000000                	enter 0, 0
  2227                                  	; preparing a tail-call
  2228                                  	; preparing a non-tail-call
  2229 00000583 488B4520                	mov rax, PARAM(0)	; param x
  2230 00000587 50                      	push rax
  2231 00000588 6A01                    	push 1	; arg count
  2232 0000058A 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  2233 00000592 803805                  	cmp byte [rax], T_undefined
  2234 00000595 0F846C790100            	je L_error_fvar_undefined
  2235 0000059B 803804                  	cmp byte [rax], T_closure
  2236 0000059E 0F85E7790100            	jne L_error_non_closure
  2237 000005A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2238 000005A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2239 000005AA 50                      	push rax
  2240 000005AB 6A01                    	push 1	; arg count
  2241 000005AD 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  2242 000005B5 803805                  	cmp byte [rax], T_undefined
  2243 000005B8 0F8449790100            	je L_error_fvar_undefined
  2244 000005BE 803804                  	cmp byte [rax], T_closure
  2245 000005C1 0F85C4790100            	jne L_error_non_closure
  2246 000005C7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2247 000005CA FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2248 000005CD FF7500                  	push qword[rbp]
  2249 000005D0 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2250 000005D3 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2251 000005D7 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2252 000005DB 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2253 000005DF 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2254 000005E2 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2255 000005E5 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2256 000005EA 4983C103                	add r9, 3 	 ;for getting to the params
  2257 000005EE 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2258 000005F2 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2259                                  .L_tc_recycle_frame_loop_0115:
  2260 000005F5 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2261 000005F8 7410                    	je .L_tc_recycle_frame_done_0115
  2262 000005FA 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2263 000005FD 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2264 00000600 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2265 00000604 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2266 00000608 EBEB                    	jmp .L_tc_recycle_frame_loop_0115
  2267                                  .L_tc_recycle_frame_done_0115:
  2268 0000060A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2269 0000060B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2270 0000060F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2271 00000612 C9                      	leave
  2272 00000613 C21800                  	ret AND_KILL_FRAME(1)
  2273                                  .L_lambda_simple_end_00c4:	; new closure is in rax
  2274 00000616 48890425[90100000]      	mov qword [free_var_41], rax
  2275 0000061E 48B8-                   	mov rax, sob_void
  2275 00000620 [0000000000000000] 
  2276                                  
  2277 00000628 4889C7                  	mov rdi, rax
  2278 0000062B E8597C0100              	call print_sexpr_if_not_void
  2279 00000630 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2280 00000635 E8FA790100              	call malloc
  2281 0000063A 50                      	push rax
  2282 0000063B BF00000000              	mov rdi, 8 * 0	; new rib
  2283 00000640 E8EF790100              	call malloc
  2284 00000645 50                      	push rax
  2285 00000646 BF08000000              	mov rdi, 8 * 1	; extended env
  2286 0000064B E8E4790100              	call malloc
  2287 00000650 488B7D10                	mov rdi, ENV
  2288 00000654 BE00000000              	mov rsi, 0
  2289 00000659 BA01000000              	mov rdx, 1
  2290                                  .L_lambda_simple_env_loop_00c5:	; ext_env[i + 1] <-- env[i]
  2291 0000065E 4883FE00                	cmp rsi, 0
  2292 00000662 7410                    	je .L_lambda_simple_env_end_00c5
  2293 00000664 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2294 00000668 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2295 0000066C 48FFC6                  	inc rsi
  2296 0000066F 48FFC2                  	inc rdx
  2297 00000672 EBEA                    	jmp .L_lambda_simple_env_loop_00c5
  2298                                  .L_lambda_simple_env_end_00c5:
  2299 00000674 5B                      	pop rbx
  2300 00000675 BE00000000              	mov rsi, 0
  2301                                  .L_lambda_simple_params_loop_00c5:	; copy params
  2302 0000067A 4883FE00                	cmp rsi, 0
  2303 0000067E 740E                    	je .L_lambda_simple_params_end_00c5
  2304 00000680 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2305 00000685 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2306 00000689 48FFC6                  	inc rsi
  2307 0000068C EBEC                    	jmp .L_lambda_simple_params_loop_00c5
  2308                                  .L_lambda_simple_params_end_00c5:
  2309 0000068E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2310 00000691 4889C3                  	mov rbx, rax
  2311 00000694 58                      	pop rax
  2312 00000695 C60004                  	mov byte [rax], T_closure
  2313 00000698 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2314 0000069C 48C74009[A9060000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c5
  2315 000006A4 E9AA000000              	jmp .L_lambda_simple_end_00c5
  2316                                  .L_lambda_simple_code_00c5:	; lambda-simple body
  2317 000006A9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2318 000006AF 740B                    	je .L_lambda_simple_arity_check_ok_00c5
  2319 000006B1 FF742410                	push qword [rsp + 8 * 2]
  2320 000006B5 6A01                    	push 1
  2321 000006B7 E931790100              	jmp L_error_incorrect_arity_simple
  2322                                  .L_lambda_simple_arity_check_ok_00c5:
  2323 000006BC C8000000                	enter 0, 0
  2324                                  	; preparing a tail-call
  2325                                  	; preparing a non-tail-call
  2326 000006C0 488B4520                	mov rax, PARAM(0)	; param x
  2327 000006C4 50                      	push rax
  2328 000006C5 6A01                    	push 1	; arg count
  2329 000006C7 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  2330 000006CF 803805                  	cmp byte [rax], T_undefined
  2331 000006D2 0F842F780100            	je L_error_fvar_undefined
  2332 000006D8 803804                  	cmp byte [rax], T_closure
  2333 000006DB 0F85AA780100            	jne L_error_non_closure
  2334 000006E1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2335 000006E4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2336 000006E7 50                      	push rax
  2337 000006E8 6A01                    	push 1	; arg count
  2338 000006EA 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  2339 000006F2 803805                  	cmp byte [rax], T_undefined
  2340 000006F5 0F840C780100            	je L_error_fvar_undefined
  2341 000006FB 803804                  	cmp byte [rax], T_closure
  2342 000006FE 0F8587780100            	jne L_error_non_closure
  2343 00000704 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2344 00000707 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2345 0000070A FF7500                  	push qword[rbp]
  2346 0000070D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2347 00000710 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2348 00000714 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2349 00000718 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2350 0000071C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2351 0000071F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2352 00000722 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2353 00000727 4983C103                	add r9, 3 	 ;for getting to the params
  2354 0000072B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2355 0000072F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2356                                  .L_tc_recycle_frame_loop_0116:
  2357 00000732 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2358 00000735 7410                    	je .L_tc_recycle_frame_done_0116
  2359 00000737 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2360 0000073A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2361 0000073D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2362 00000741 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2363 00000745 EBEB                    	jmp .L_tc_recycle_frame_loop_0116
  2364                                  .L_tc_recycle_frame_done_0116:
  2365 00000747 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2366 00000748 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2367 0000074C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2368 0000074F C9                      	leave
  2369 00000750 C21800                  	ret AND_KILL_FRAME(1)
  2370                                  .L_lambda_simple_end_00c5:	; new closure is in rax
  2371 00000753 48890425[07110000]      	mov qword [free_var_48], rax
  2372 0000075B 48B8-                   	mov rax, sob_void
  2372 0000075D [0000000000000000] 
  2373                                  
  2374 00000765 4889C7                  	mov rdi, rax
  2375 00000768 E81C7B0100              	call print_sexpr_if_not_void
  2376 0000076D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2377 00000772 E8BD780100              	call malloc
  2378 00000777 50                      	push rax
  2379 00000778 BF00000000              	mov rdi, 8 * 0	; new rib
  2380 0000077D E8B2780100              	call malloc
  2381 00000782 50                      	push rax
  2382 00000783 BF08000000              	mov rdi, 8 * 1	; extended env
  2383 00000788 E8A7780100              	call malloc
  2384 0000078D 488B7D10                	mov rdi, ENV
  2385 00000791 BE00000000              	mov rsi, 0
  2386 00000796 BA01000000              	mov rdx, 1
  2387                                  .L_lambda_simple_env_loop_00c6:	; ext_env[i + 1] <-- env[i]
  2388 0000079B 4883FE00                	cmp rsi, 0
  2389 0000079F 7410                    	je .L_lambda_simple_env_end_00c6
  2390 000007A1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2391 000007A5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2392 000007A9 48FFC6                  	inc rsi
  2393 000007AC 48FFC2                  	inc rdx
  2394 000007AF EBEA                    	jmp .L_lambda_simple_env_loop_00c6
  2395                                  .L_lambda_simple_env_end_00c6:
  2396 000007B1 5B                      	pop rbx
  2397 000007B2 BE00000000              	mov rsi, 0
  2398                                  .L_lambda_simple_params_loop_00c6:	; copy params
  2399 000007B7 4883FE00                	cmp rsi, 0
  2400 000007BB 740E                    	je .L_lambda_simple_params_end_00c6
  2401 000007BD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2402 000007C2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2403 000007C6 48FFC6                  	inc rsi
  2404 000007C9 EBEC                    	jmp .L_lambda_simple_params_loop_00c6
  2405                                  .L_lambda_simple_params_end_00c6:
  2406 000007CB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2407 000007CE 4889C3                  	mov rbx, rax
  2408 000007D1 58                      	pop rax
  2409 000007D2 C60004                  	mov byte [rax], T_closure
  2410 000007D5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2411 000007D9 48C74009[E6070000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c6
  2412 000007E1 E9AA000000              	jmp .L_lambda_simple_end_00c6
  2413                                  .L_lambda_simple_code_00c6:	; lambda-simple body
  2414 000007E6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2415 000007EC 740B                    	je .L_lambda_simple_arity_check_ok_00c6
  2416 000007EE FF742410                	push qword [rsp + 8 * 2]
  2417 000007F2 6A01                    	push 1
  2418 000007F4 E9F4770100              	jmp L_error_incorrect_arity_simple
  2419                                  .L_lambda_simple_arity_check_ok_00c6:
  2420 000007F9 C8000000                	enter 0, 0
  2421                                  	; preparing a tail-call
  2422                                  	; preparing a non-tail-call
  2423 000007FD 488B4520                	mov rax, PARAM(0)	; param x
  2424 00000801 50                      	push rax
  2425 00000802 6A01                    	push 1	; arg count
  2426 00000804 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  2427 0000080C 803805                  	cmp byte [rax], T_undefined
  2428 0000080F 0F84F2760100            	je L_error_fvar_undefined
  2429 00000815 803804                  	cmp byte [rax], T_closure
  2430 00000818 0F856D770100            	jne L_error_non_closure
  2431 0000081E FF7001                  	push SOB_CLOSURE_ENV(rax)
  2432 00000821 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2433 00000824 50                      	push rax
  2434 00000825 6A01                    	push 1	; arg count
  2435 00000827 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  2436 0000082F 803805                  	cmp byte [rax], T_undefined
  2437 00000832 0F84CF760100            	je L_error_fvar_undefined
  2438 00000838 803804                  	cmp byte [rax], T_closure
  2439 0000083B 0F854A770100            	jne L_error_non_closure
  2440 00000841 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2441 00000844 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2442 00000847 FF7500                  	push qword[rbp]
  2443 0000084A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2444 0000084D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2445 00000851 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2446 00000855 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2447 00000859 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2448 0000085C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2449 0000085F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2450 00000864 4983C103                	add r9, 3 	 ;for getting to the params
  2451 00000868 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2452 0000086C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2453                                  .L_tc_recycle_frame_loop_0117:
  2454 0000086F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2455 00000872 7410                    	je .L_tc_recycle_frame_done_0117
  2456 00000874 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2457 00000877 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2458 0000087A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2459 0000087E 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2460 00000882 EBEB                    	jmp .L_tc_recycle_frame_loop_0117
  2461                                  .L_tc_recycle_frame_done_0117:
  2462 00000884 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2463 00000885 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2464 00000889 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2465 0000088C C9                      	leave
  2466 0000088D C21800                  	ret AND_KILL_FRAME(1)
  2467                                  .L_lambda_simple_end_00c6:	; new closure is in rax
  2468 00000890 48890425[8F110000]      	mov qword [free_var_56], rax
  2469 00000898 48B8-                   	mov rax, sob_void
  2469 0000089A [0000000000000000] 
  2470                                  
  2471 000008A2 4889C7                  	mov rdi, rax
  2472 000008A5 E8DF790100              	call print_sexpr_if_not_void
  2473 000008AA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2474 000008AF E880770100              	call malloc
  2475 000008B4 50                      	push rax
  2476 000008B5 BF00000000              	mov rdi, 8 * 0	; new rib
  2477 000008BA E875770100              	call malloc
  2478 000008BF 50                      	push rax
  2479 000008C0 BF08000000              	mov rdi, 8 * 1	; extended env
  2480 000008C5 E86A770100              	call malloc
  2481 000008CA 488B7D10                	mov rdi, ENV
  2482 000008CE BE00000000              	mov rsi, 0
  2483 000008D3 BA01000000              	mov rdx, 1
  2484                                  .L_lambda_simple_env_loop_00c7:	; ext_env[i + 1] <-- env[i]
  2485 000008D8 4883FE00                	cmp rsi, 0
  2486 000008DC 7410                    	je .L_lambda_simple_env_end_00c7
  2487 000008DE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2488 000008E2 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2489 000008E6 48FFC6                  	inc rsi
  2490 000008E9 48FFC2                  	inc rdx
  2491 000008EC EBEA                    	jmp .L_lambda_simple_env_loop_00c7
  2492                                  .L_lambda_simple_env_end_00c7:
  2493 000008EE 5B                      	pop rbx
  2494 000008EF BE00000000              	mov rsi, 0
  2495                                  .L_lambda_simple_params_loop_00c7:	; copy params
  2496 000008F4 4883FE00                	cmp rsi, 0
  2497 000008F8 740E                    	je .L_lambda_simple_params_end_00c7
  2498 000008FA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2499 000008FF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2500 00000903 48FFC6                  	inc rsi
  2501 00000906 EBEC                    	jmp .L_lambda_simple_params_loop_00c7
  2502                                  .L_lambda_simple_params_end_00c7:
  2503 00000908 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2504 0000090B 4889C3                  	mov rbx, rax
  2505 0000090E 58                      	pop rax
  2506 0000090F C60004                  	mov byte [rax], T_closure
  2507 00000912 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2508 00000916 48C74009[23090000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c7
  2509 0000091E E9AA000000              	jmp .L_lambda_simple_end_00c7
  2510                                  .L_lambda_simple_code_00c7:	; lambda-simple body
  2511 00000923 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2512 00000929 740B                    	je .L_lambda_simple_arity_check_ok_00c7
  2513 0000092B FF742410                	push qword [rsp + 8 * 2]
  2514 0000092F 6A01                    	push 1
  2515 00000931 E9B7760100              	jmp L_error_incorrect_arity_simple
  2516                                  .L_lambda_simple_arity_check_ok_00c7:
  2517 00000936 C8000000                	enter 0, 0
  2518                                  	; preparing a tail-call
  2519                                  	; preparing a non-tail-call
  2520 0000093A 488B4520                	mov rax, PARAM(0)	; param x
  2521 0000093E 50                      	push rax
  2522 0000093F 6A01                    	push 1	; arg count
  2523 00000941 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  2524 00000949 803805                  	cmp byte [rax], T_undefined
  2525 0000094C 0F84B5750100            	je L_error_fvar_undefined
  2526 00000952 803804                  	cmp byte [rax], T_closure
  2527 00000955 0F8530760100            	jne L_error_non_closure
  2528 0000095B FF7001                  	push SOB_CLOSURE_ENV(rax)
  2529 0000095E FF5009                  	call SOB_CLOSURE_CODE(rax)
  2530 00000961 50                      	push rax
  2531 00000962 6A01                    	push 1	; arg count
  2532 00000964 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  2533 0000096C 803805                  	cmp byte [rax], T_undefined
  2534 0000096F 0F8492750100            	je L_error_fvar_undefined
  2535 00000975 803804                  	cmp byte [rax], T_closure
  2536 00000978 0F850D760100            	jne L_error_non_closure
  2537 0000097E FF7001                  	push SOB_CLOSURE_ENV(rax)
  2538 00000981 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2539 00000984 FF7500                  	push qword[rbp]
  2540 00000987 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2541 0000098A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2542 0000098E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2543 00000992 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2544 00000996 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2545 00000999 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2546 0000099C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2547 000009A1 4983C103                	add r9, 3 	 ;for getting to the params
  2548 000009A5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2549 000009A9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2550                                  .L_tc_recycle_frame_loop_0118:
  2551 000009AC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2552 000009AF 7410                    	je .L_tc_recycle_frame_done_0118
  2553 000009B1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2554 000009B4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2555 000009B7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2556 000009BB 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2557 000009BF EBEB                    	jmp .L_tc_recycle_frame_loop_0118
  2558                                  .L_tc_recycle_frame_done_0118:
  2559 000009C1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2560 000009C2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2561 000009C6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2562 000009C9 C9                      	leave
  2563 000009CA C21800                  	ret AND_KILL_FRAME(1)
  2564                                  .L_lambda_simple_end_00c7:	; new closure is in rax
  2565 000009CD 48890425[06120000]      	mov qword [free_var_63], rax
  2566 000009D5 48B8-                   	mov rax, sob_void
  2566 000009D7 [0000000000000000] 
  2567                                  
  2568 000009DF 4889C7                  	mov rdi, rax
  2569 000009E2 E8A2780100              	call print_sexpr_if_not_void
  2570 000009E7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2571 000009EC E843760100              	call malloc
  2572 000009F1 50                      	push rax
  2573 000009F2 BF00000000              	mov rdi, 8 * 0	; new rib
  2574 000009F7 E838760100              	call malloc
  2575 000009FC 50                      	push rax
  2576 000009FD BF08000000              	mov rdi, 8 * 1	; extended env
  2577 00000A02 E82D760100              	call malloc
  2578 00000A07 488B7D10                	mov rdi, ENV
  2579 00000A0B BE00000000              	mov rsi, 0
  2580 00000A10 BA01000000              	mov rdx, 1
  2581                                  .L_lambda_simple_env_loop_00c8:	; ext_env[i + 1] <-- env[i]
  2582 00000A15 4883FE00                	cmp rsi, 0
  2583 00000A19 7410                    	je .L_lambda_simple_env_end_00c8
  2584 00000A1B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2585 00000A1F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2586 00000A23 48FFC6                  	inc rsi
  2587 00000A26 48FFC2                  	inc rdx
  2588 00000A29 EBEA                    	jmp .L_lambda_simple_env_loop_00c8
  2589                                  .L_lambda_simple_env_end_00c8:
  2590 00000A2B 5B                      	pop rbx
  2591 00000A2C BE00000000              	mov rsi, 0
  2592                                  .L_lambda_simple_params_loop_00c8:	; copy params
  2593 00000A31 4883FE00                	cmp rsi, 0
  2594 00000A35 740E                    	je .L_lambda_simple_params_end_00c8
  2595 00000A37 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2596 00000A3C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2597 00000A40 48FFC6                  	inc rsi
  2598 00000A43 EBEC                    	jmp .L_lambda_simple_params_loop_00c8
  2599                                  .L_lambda_simple_params_end_00c8:
  2600 00000A45 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2601 00000A48 4889C3                  	mov rbx, rax
  2602 00000A4B 58                      	pop rax
  2603 00000A4C C60004                  	mov byte [rax], T_closure
  2604 00000A4F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2605 00000A53 48C74009[600A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c8
  2606 00000A5B E9AA000000              	jmp .L_lambda_simple_end_00c8
  2607                                  .L_lambda_simple_code_00c8:	; lambda-simple body
  2608 00000A60 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2609 00000A66 740B                    	je .L_lambda_simple_arity_check_ok_00c8
  2610 00000A68 FF742410                	push qword [rsp + 8 * 2]
  2611 00000A6C 6A01                    	push 1
  2612 00000A6E E97A750100              	jmp L_error_incorrect_arity_simple
  2613                                  .L_lambda_simple_arity_check_ok_00c8:
  2614 00000A73 C8000000                	enter 0, 0
  2615                                  	; preparing a tail-call
  2616                                  	; preparing a non-tail-call
  2617 00000A77 488B4520                	mov rax, PARAM(0)	; param x
  2618 00000A7B 50                      	push rax
  2619 00000A7C 6A01                    	push 1	; arg count
  2620 00000A7E 488B0425[90100000]      	mov rax, qword [free_var_41]	; free var caar
  2621 00000A86 803805                  	cmp byte [rax], T_undefined
  2622 00000A89 0F8478740100            	je L_error_fvar_undefined
  2623 00000A8F 803804                  	cmp byte [rax], T_closure
  2624 00000A92 0F85F3740100            	jne L_error_non_closure
  2625 00000A98 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2626 00000A9B FF5009                  	call SOB_CLOSURE_CODE(rax)
  2627 00000A9E 50                      	push rax
  2628 00000A9F 6A01                    	push 1	; arg count
  2629 00000AA1 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  2630 00000AA9 803805                  	cmp byte [rax], T_undefined
  2631 00000AAC 0F8455740100            	je L_error_fvar_undefined
  2632 00000AB2 803804                  	cmp byte [rax], T_closure
  2633 00000AB5 0F85D0740100            	jne L_error_non_closure
  2634 00000ABB FF7001                  	push SOB_CLOSURE_ENV(rax)
  2635 00000ABE FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2636 00000AC1 FF7500                  	push qword[rbp]
  2637 00000AC4 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2638 00000AC7 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2639 00000ACB 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2640 00000ACF 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2641 00000AD3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2642 00000AD6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2643 00000AD9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2644 00000ADE 4983C103                	add r9, 3 	 ;for getting to the params
  2645 00000AE2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2646 00000AE6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2647                                  .L_tc_recycle_frame_loop_0119:
  2648 00000AE9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2649 00000AEC 7410                    	je .L_tc_recycle_frame_done_0119
  2650 00000AEE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2651 00000AF1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2652 00000AF4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2653 00000AF8 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2654 00000AFC EBEB                    	jmp .L_tc_recycle_frame_loop_0119
  2655                                  .L_tc_recycle_frame_done_0119:
  2656 00000AFE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2657 00000AFF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2658 00000B03 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2659 00000B06 C9                      	leave
  2660 00000B07 C21800                  	ret AND_KILL_FRAME(1)
  2661                                  .L_lambda_simple_end_00c8:	; new closure is in rax
  2662 00000B0A 48890425[4C100000]      	mov qword [free_var_37], rax
  2663 00000B12 48B8-                   	mov rax, sob_void
  2663 00000B14 [0000000000000000] 
  2664                                  
  2665 00000B1C 4889C7                  	mov rdi, rax
  2666 00000B1F E865770100              	call print_sexpr_if_not_void
  2667 00000B24 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2668 00000B29 E806750100              	call malloc
  2669 00000B2E 50                      	push rax
  2670 00000B2F BF00000000              	mov rdi, 8 * 0	; new rib
  2671 00000B34 E8FB740100              	call malloc
  2672 00000B39 50                      	push rax
  2673 00000B3A BF08000000              	mov rdi, 8 * 1	; extended env
  2674 00000B3F E8F0740100              	call malloc
  2675 00000B44 488B7D10                	mov rdi, ENV
  2676 00000B48 BE00000000              	mov rsi, 0
  2677 00000B4D BA01000000              	mov rdx, 1
  2678                                  .L_lambda_simple_env_loop_00c9:	; ext_env[i + 1] <-- env[i]
  2679 00000B52 4883FE00                	cmp rsi, 0
  2680 00000B56 7410                    	je .L_lambda_simple_env_end_00c9
  2681 00000B58 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2682 00000B5C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2683 00000B60 48FFC6                  	inc rsi
  2684 00000B63 48FFC2                  	inc rdx
  2685 00000B66 EBEA                    	jmp .L_lambda_simple_env_loop_00c9
  2686                                  .L_lambda_simple_env_end_00c9:
  2687 00000B68 5B                      	pop rbx
  2688 00000B69 BE00000000              	mov rsi, 0
  2689                                  .L_lambda_simple_params_loop_00c9:	; copy params
  2690 00000B6E 4883FE00                	cmp rsi, 0
  2691 00000B72 740E                    	je .L_lambda_simple_params_end_00c9
  2692 00000B74 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2693 00000B79 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2694 00000B7D 48FFC6                  	inc rsi
  2695 00000B80 EBEC                    	jmp .L_lambda_simple_params_loop_00c9
  2696                                  .L_lambda_simple_params_end_00c9:
  2697 00000B82 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2698 00000B85 4889C3                  	mov rbx, rax
  2699 00000B88 58                      	pop rax
  2700 00000B89 C60004                  	mov byte [rax], T_closure
  2701 00000B8C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2702 00000B90 48C74009[9D0B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c9
  2703 00000B98 E9AA000000              	jmp .L_lambda_simple_end_00c9
  2704                                  .L_lambda_simple_code_00c9:	; lambda-simple body
  2705 00000B9D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2706 00000BA3 740B                    	je .L_lambda_simple_arity_check_ok_00c9
  2707 00000BA5 FF742410                	push qword [rsp + 8 * 2]
  2708 00000BA9 6A01                    	push 1
  2709 00000BAB E93D740100              	jmp L_error_incorrect_arity_simple
  2710                                  .L_lambda_simple_arity_check_ok_00c9:
  2711 00000BB0 C8000000                	enter 0, 0
  2712                                  	; preparing a tail-call
  2713                                  	; preparing a non-tail-call
  2714 00000BB4 488B4520                	mov rax, PARAM(0)	; param x
  2715 00000BB8 50                      	push rax
  2716 00000BB9 6A01                    	push 1	; arg count
  2717 00000BBB 488B0425[07110000]      	mov rax, qword [free_var_48]	; free var cadr
  2718 00000BC3 803805                  	cmp byte [rax], T_undefined
  2719 00000BC6 0F843B730100            	je L_error_fvar_undefined
  2720 00000BCC 803804                  	cmp byte [rax], T_closure
  2721 00000BCF 0F85B6730100            	jne L_error_non_closure
  2722 00000BD5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2723 00000BD8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2724 00000BDB 50                      	push rax
  2725 00000BDC 6A01                    	push 1	; arg count
  2726 00000BDE 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  2727 00000BE6 803805                  	cmp byte [rax], T_undefined
  2728 00000BE9 0F8418730100            	je L_error_fvar_undefined
  2729 00000BEF 803804                  	cmp byte [rax], T_closure
  2730 00000BF2 0F8593730100            	jne L_error_non_closure
  2731 00000BF8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2732 00000BFB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2733 00000BFE FF7500                  	push qword[rbp]
  2734 00000C01 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2735 00000C04 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2736 00000C08 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2737 00000C0C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2738 00000C10 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2739 00000C13 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2740 00000C16 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2741 00000C1B 4983C103                	add r9, 3 	 ;for getting to the params
  2742 00000C1F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2743 00000C23 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2744                                  .L_tc_recycle_frame_loop_011a:
  2745 00000C26 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2746 00000C29 7410                    	je .L_tc_recycle_frame_done_011a
  2747 00000C2B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2748 00000C2E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2749 00000C31 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2750 00000C35 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2751 00000C39 EBEB                    	jmp .L_tc_recycle_frame_loop_011a
  2752                                  .L_tc_recycle_frame_done_011a:
  2753 00000C3B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2754 00000C3C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2755 00000C40 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2756 00000C43 C9                      	leave
  2757 00000C44 C21800                  	ret AND_KILL_FRAME(1)
  2758                                  .L_lambda_simple_end_00c9:	; new closure is in rax
  2759 00000C47 48890425[7F100000]      	mov qword [free_var_40], rax
  2760 00000C4F 48B8-                   	mov rax, sob_void
  2760 00000C51 [0000000000000000] 
  2761                                  
  2762 00000C59 4889C7                  	mov rdi, rax
  2763 00000C5C E828760100              	call print_sexpr_if_not_void
  2764 00000C61 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2765 00000C66 E8C9730100              	call malloc
  2766 00000C6B 50                      	push rax
  2767 00000C6C BF00000000              	mov rdi, 8 * 0	; new rib
  2768 00000C71 E8BE730100              	call malloc
  2769 00000C76 50                      	push rax
  2770 00000C77 BF08000000              	mov rdi, 8 * 1	; extended env
  2771 00000C7C E8B3730100              	call malloc
  2772 00000C81 488B7D10                	mov rdi, ENV
  2773 00000C85 BE00000000              	mov rsi, 0
  2774 00000C8A BA01000000              	mov rdx, 1
  2775                                  .L_lambda_simple_env_loop_00ca:	; ext_env[i + 1] <-- env[i]
  2776 00000C8F 4883FE00                	cmp rsi, 0
  2777 00000C93 7410                    	je .L_lambda_simple_env_end_00ca
  2778 00000C95 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2779 00000C99 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2780 00000C9D 48FFC6                  	inc rsi
  2781 00000CA0 48FFC2                  	inc rdx
  2782 00000CA3 EBEA                    	jmp .L_lambda_simple_env_loop_00ca
  2783                                  .L_lambda_simple_env_end_00ca:
  2784 00000CA5 5B                      	pop rbx
  2785 00000CA6 BE00000000              	mov rsi, 0
  2786                                  .L_lambda_simple_params_loop_00ca:	; copy params
  2787 00000CAB 4883FE00                	cmp rsi, 0
  2788 00000CAF 740E                    	je .L_lambda_simple_params_end_00ca
  2789 00000CB1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2790 00000CB6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2791 00000CBA 48FFC6                  	inc rsi
  2792 00000CBD EBEC                    	jmp .L_lambda_simple_params_loop_00ca
  2793                                  .L_lambda_simple_params_end_00ca:
  2794 00000CBF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2795 00000CC2 4889C3                  	mov rbx, rax
  2796 00000CC5 58                      	pop rax
  2797 00000CC6 C60004                  	mov byte [rax], T_closure
  2798 00000CC9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2799 00000CCD 48C74009[DA0C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ca
  2800 00000CD5 E9AA000000              	jmp .L_lambda_simple_end_00ca
  2801                                  .L_lambda_simple_code_00ca:	; lambda-simple body
  2802 00000CDA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2803 00000CE0 740B                    	je .L_lambda_simple_arity_check_ok_00ca
  2804 00000CE2 FF742410                	push qword [rsp + 8 * 2]
  2805 00000CE6 6A01                    	push 1
  2806 00000CE8 E900730100              	jmp L_error_incorrect_arity_simple
  2807                                  .L_lambda_simple_arity_check_ok_00ca:
  2808 00000CED C8000000                	enter 0, 0
  2809                                  	; preparing a tail-call
  2810                                  	; preparing a non-tail-call
  2811 00000CF1 488B4520                	mov rax, PARAM(0)	; param x
  2812 00000CF5 50                      	push rax
  2813 00000CF6 6A01                    	push 1	; arg count
  2814 00000CF8 488B0425[8F110000]      	mov rax, qword [free_var_56]	; free var cdar
  2815 00000D00 803805                  	cmp byte [rax], T_undefined
  2816 00000D03 0F84FE710100            	je L_error_fvar_undefined
  2817 00000D09 803804                  	cmp byte [rax], T_closure
  2818 00000D0C 0F8579720100            	jne L_error_non_closure
  2819 00000D12 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2820 00000D15 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2821 00000D18 50                      	push rax
  2822 00000D19 6A01                    	push 1	; arg count
  2823 00000D1B 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  2824 00000D23 803805                  	cmp byte [rax], T_undefined
  2825 00000D26 0F84DB710100            	je L_error_fvar_undefined
  2826 00000D2C 803804                  	cmp byte [rax], T_closure
  2827 00000D2F 0F8556720100            	jne L_error_non_closure
  2828 00000D35 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2829 00000D38 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2830 00000D3B FF7500                  	push qword[rbp]
  2831 00000D3E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2832 00000D41 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2833 00000D45 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2834 00000D49 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2835 00000D4D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2836 00000D50 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2837 00000D53 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2838 00000D58 4983C103                	add r9, 3 	 ;for getting to the params
  2839 00000D5C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2840 00000D60 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2841                                  .L_tc_recycle_frame_loop_011b:
  2842 00000D63 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2843 00000D66 7410                    	je .L_tc_recycle_frame_done_011b
  2844 00000D68 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2845 00000D6B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2846 00000D6E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2847 00000D72 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2848 00000D76 EBEB                    	jmp .L_tc_recycle_frame_loop_011b
  2849                                  .L_tc_recycle_frame_done_011b:
  2850 00000D78 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2851 00000D79 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2852 00000D7D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2853 00000D80 C9                      	leave
  2854 00000D81 C21800                  	ret AND_KILL_FRAME(1)
  2855                                  .L_lambda_simple_end_00ca:	; new closure is in rax
  2856 00000D84 48890425[C3100000]      	mov qword [free_var_44], rax
  2857 00000D8C 48B8-                   	mov rax, sob_void
  2857 00000D8E [0000000000000000] 
  2858                                  
  2859 00000D96 4889C7                  	mov rdi, rax
  2860 00000D99 E8EB740100              	call print_sexpr_if_not_void
  2861 00000D9E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2862 00000DA3 E88C720100              	call malloc
  2863 00000DA8 50                      	push rax
  2864 00000DA9 BF00000000              	mov rdi, 8 * 0	; new rib
  2865 00000DAE E881720100              	call malloc
  2866 00000DB3 50                      	push rax
  2867 00000DB4 BF08000000              	mov rdi, 8 * 1	; extended env
  2868 00000DB9 E876720100              	call malloc
  2869 00000DBE 488B7D10                	mov rdi, ENV
  2870 00000DC2 BE00000000              	mov rsi, 0
  2871 00000DC7 BA01000000              	mov rdx, 1
  2872                                  .L_lambda_simple_env_loop_00cb:	; ext_env[i + 1] <-- env[i]
  2873 00000DCC 4883FE00                	cmp rsi, 0
  2874 00000DD0 7410                    	je .L_lambda_simple_env_end_00cb
  2875 00000DD2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2876 00000DD6 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2877 00000DDA 48FFC6                  	inc rsi
  2878 00000DDD 48FFC2                  	inc rdx
  2879 00000DE0 EBEA                    	jmp .L_lambda_simple_env_loop_00cb
  2880                                  .L_lambda_simple_env_end_00cb:
  2881 00000DE2 5B                      	pop rbx
  2882 00000DE3 BE00000000              	mov rsi, 0
  2883                                  .L_lambda_simple_params_loop_00cb:	; copy params
  2884 00000DE8 4883FE00                	cmp rsi, 0
  2885 00000DEC 740E                    	je .L_lambda_simple_params_end_00cb
  2886 00000DEE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2887 00000DF3 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2888 00000DF7 48FFC6                  	inc rsi
  2889 00000DFA EBEC                    	jmp .L_lambda_simple_params_loop_00cb
  2890                                  .L_lambda_simple_params_end_00cb:
  2891 00000DFC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2892 00000DFF 4889C3                  	mov rbx, rax
  2893 00000E02 58                      	pop rax
  2894 00000E03 C60004                  	mov byte [rax], T_closure
  2895 00000E06 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2896 00000E0A 48C74009[170E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00cb
  2897 00000E12 E9AA000000              	jmp .L_lambda_simple_end_00cb
  2898                                  .L_lambda_simple_code_00cb:	; lambda-simple body
  2899 00000E17 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2900 00000E1D 740B                    	je .L_lambda_simple_arity_check_ok_00cb
  2901 00000E1F FF742410                	push qword [rsp + 8 * 2]
  2902 00000E23 6A01                    	push 1
  2903 00000E25 E9C3710100              	jmp L_error_incorrect_arity_simple
  2904                                  .L_lambda_simple_arity_check_ok_00cb:
  2905 00000E2A C8000000                	enter 0, 0
  2906                                  	; preparing a tail-call
  2907                                  	; preparing a non-tail-call
  2908 00000E2E 488B4520                	mov rax, PARAM(0)	; param x
  2909 00000E32 50                      	push rax
  2910 00000E33 6A01                    	push 1	; arg count
  2911 00000E35 488B0425[06120000]      	mov rax, qword [free_var_63]	; free var cddr
  2912 00000E3D 803805                  	cmp byte [rax], T_undefined
  2913 00000E40 0F84C1700100            	je L_error_fvar_undefined
  2914 00000E46 803804                  	cmp byte [rax], T_closure
  2915 00000E49 0F853C710100            	jne L_error_non_closure
  2916 00000E4F FF7001                  	push SOB_CLOSURE_ENV(rax)
  2917 00000E52 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2918 00000E55 50                      	push rax
  2919 00000E56 6A01                    	push 1	; arg count
  2920 00000E58 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  2921 00000E60 803805                  	cmp byte [rax], T_undefined
  2922 00000E63 0F849E700100            	je L_error_fvar_undefined
  2923 00000E69 803804                  	cmp byte [rax], T_closure
  2924 00000E6C 0F8519710100            	jne L_error_non_closure
  2925 00000E72 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2926 00000E75 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2927 00000E78 FF7500                  	push qword[rbp]
  2928 00000E7B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2929 00000E7E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2930 00000E82 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2931 00000E86 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2932 00000E8A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2933 00000E8D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2934 00000E90 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2935 00000E95 4983C103                	add r9, 3 	 ;for getting to the params
  2936 00000E99 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2937 00000E9D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2938                                  .L_tc_recycle_frame_loop_011c:
  2939 00000EA0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2940 00000EA3 7410                    	je .L_tc_recycle_frame_done_011c
  2941 00000EA5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2942 00000EA8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2943 00000EAB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2944 00000EAF 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2945 00000EB3 EBEB                    	jmp .L_tc_recycle_frame_loop_011c
  2946                                  .L_tc_recycle_frame_done_011c:
  2947 00000EB5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2948 00000EB6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2949 00000EBA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2950 00000EBD C9                      	leave
  2951 00000EBE C21800                  	ret AND_KILL_FRAME(1)
  2952                                  .L_lambda_simple_end_00cb:	; new closure is in rax
  2953 00000EC1 48890425[F6100000]      	mov qword [free_var_47], rax
  2954 00000EC9 48B8-                   	mov rax, sob_void
  2954 00000ECB [0000000000000000] 
  2955                                  
  2956 00000ED3 4889C7                  	mov rdi, rax
  2957 00000ED6 E8AE730100              	call print_sexpr_if_not_void
  2958 00000EDB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2959 00000EE0 E84F710100              	call malloc
  2960 00000EE5 50                      	push rax
  2961 00000EE6 BF00000000              	mov rdi, 8 * 0	; new rib
  2962 00000EEB E844710100              	call malloc
  2963 00000EF0 50                      	push rax
  2964 00000EF1 BF08000000              	mov rdi, 8 * 1	; extended env
  2965 00000EF6 E839710100              	call malloc
  2966 00000EFB 488B7D10                	mov rdi, ENV
  2967 00000EFF BE00000000              	mov rsi, 0
  2968 00000F04 BA01000000              	mov rdx, 1
  2969                                  .L_lambda_simple_env_loop_00cc:	; ext_env[i + 1] <-- env[i]
  2970 00000F09 4883FE00                	cmp rsi, 0
  2971 00000F0D 7410                    	je .L_lambda_simple_env_end_00cc
  2972 00000F0F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2973 00000F13 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2974 00000F17 48FFC6                  	inc rsi
  2975 00000F1A 48FFC2                  	inc rdx
  2976 00000F1D EBEA                    	jmp .L_lambda_simple_env_loop_00cc
  2977                                  .L_lambda_simple_env_end_00cc:
  2978 00000F1F 5B                      	pop rbx
  2979 00000F20 BE00000000              	mov rsi, 0
  2980                                  .L_lambda_simple_params_loop_00cc:	; copy params
  2981 00000F25 4883FE00                	cmp rsi, 0
  2982 00000F29 740E                    	je .L_lambda_simple_params_end_00cc
  2983 00000F2B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2984 00000F30 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2985 00000F34 48FFC6                  	inc rsi
  2986 00000F37 EBEC                    	jmp .L_lambda_simple_params_loop_00cc
  2987                                  .L_lambda_simple_params_end_00cc:
  2988 00000F39 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2989 00000F3C 4889C3                  	mov rbx, rax
  2990 00000F3F 58                      	pop rax
  2991 00000F40 C60004                  	mov byte [rax], T_closure
  2992 00000F43 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2993 00000F47 48C74009[540F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00cc
  2994 00000F4F E9AA000000              	jmp .L_lambda_simple_end_00cc
  2995                                  .L_lambda_simple_code_00cc:	; lambda-simple body
  2996 00000F54 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2997 00000F5A 740B                    	je .L_lambda_simple_arity_check_ok_00cc
  2998 00000F5C FF742410                	push qword [rsp + 8 * 2]
  2999 00000F60 6A01                    	push 1
  3000 00000F62 E986700100              	jmp L_error_incorrect_arity_simple
  3001                                  .L_lambda_simple_arity_check_ok_00cc:
  3002 00000F67 C8000000                	enter 0, 0
  3003                                  	; preparing a tail-call
  3004                                  	; preparing a non-tail-call
  3005 00000F6B 488B4520                	mov rax, PARAM(0)	; param x
  3006 00000F6F 50                      	push rax
  3007 00000F70 6A01                    	push 1	; arg count
  3008 00000F72 488B0425[90100000]      	mov rax, qword [free_var_41]	; free var caar
  3009 00000F7A 803805                  	cmp byte [rax], T_undefined
  3010 00000F7D 0F84846F0100            	je L_error_fvar_undefined
  3011 00000F83 803804                  	cmp byte [rax], T_closure
  3012 00000F86 0F85FF6F0100            	jne L_error_non_closure
  3013 00000F8C FF7001                  	push SOB_CLOSURE_ENV(rax)
  3014 00000F8F FF5009                  	call SOB_CLOSURE_CODE(rax)
  3015 00000F92 50                      	push rax
  3016 00000F93 6A01                    	push 1	; arg count
  3017 00000F95 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  3018 00000F9D 803805                  	cmp byte [rax], T_undefined
  3019 00000FA0 0F84616F0100            	je L_error_fvar_undefined
  3020 00000FA6 803804                  	cmp byte [rax], T_closure
  3021 00000FA9 0F85DC6F0100            	jne L_error_non_closure
  3022 00000FAF FF7001                  	push SOB_CLOSURE_ENV(rax)
  3023 00000FB2 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3024 00000FB5 FF7500                  	push qword[rbp]
  3025 00000FB8 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3026 00000FBB 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3027 00000FBF 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3028 00000FC3 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3029 00000FC7 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3030 00000FCA 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3031 00000FCD 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3032 00000FD2 4983C103                	add r9, 3 	 ;for getting to the params
  3033 00000FD6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3034 00000FDA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3035                                  .L_tc_recycle_frame_loop_011d:
  3036 00000FDD 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3037 00000FE0 7410                    	je .L_tc_recycle_frame_done_011d
  3038 00000FE2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3039 00000FE5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3040 00000FE8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3041 00000FEC 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3042 00000FF0 EBEB                    	jmp .L_tc_recycle_frame_loop_011d
  3043                                  .L_tc_recycle_frame_done_011d:
  3044 00000FF2 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3045 00000FF3 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3046 00000FF7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3047 00000FFA C9                      	leave
  3048 00000FFB C21800                  	ret AND_KILL_FRAME(1)
  3049                                  .L_lambda_simple_end_00cc:	; new closure is in rax
  3050 00000FFE 48890425[4B110000]      	mov qword [free_var_52], rax
  3051 00001006 48B8-                   	mov rax, sob_void
  3051 00001008 [0000000000000000] 
  3052                                  
  3053 00001010 4889C7                  	mov rdi, rax
  3054 00001013 E871720100              	call print_sexpr_if_not_void
  3055 00001018 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3056 0000101D E812700100              	call malloc
  3057 00001022 50                      	push rax
  3058 00001023 BF00000000              	mov rdi, 8 * 0	; new rib
  3059 00001028 E807700100              	call malloc
  3060 0000102D 50                      	push rax
  3061 0000102E BF08000000              	mov rdi, 8 * 1	; extended env
  3062 00001033 E8FC6F0100              	call malloc
  3063 00001038 488B7D10                	mov rdi, ENV
  3064 0000103C BE00000000              	mov rsi, 0
  3065 00001041 BA01000000              	mov rdx, 1
  3066                                  .L_lambda_simple_env_loop_00cd:	; ext_env[i + 1] <-- env[i]
  3067 00001046 4883FE00                	cmp rsi, 0
  3068 0000104A 7410                    	je .L_lambda_simple_env_end_00cd
  3069 0000104C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3070 00001050 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3071 00001054 48FFC6                  	inc rsi
  3072 00001057 48FFC2                  	inc rdx
  3073 0000105A EBEA                    	jmp .L_lambda_simple_env_loop_00cd
  3074                                  .L_lambda_simple_env_end_00cd:
  3075 0000105C 5B                      	pop rbx
  3076 0000105D BE00000000              	mov rsi, 0
  3077                                  .L_lambda_simple_params_loop_00cd:	; copy params
  3078 00001062 4883FE00                	cmp rsi, 0
  3079 00001066 740E                    	je .L_lambda_simple_params_end_00cd
  3080 00001068 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3081 0000106D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3082 00001071 48FFC6                  	inc rsi
  3083 00001074 EBEC                    	jmp .L_lambda_simple_params_loop_00cd
  3084                                  .L_lambda_simple_params_end_00cd:
  3085 00001076 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3086 00001079 4889C3                  	mov rbx, rax
  3087 0000107C 58                      	pop rax
  3088 0000107D C60004                  	mov byte [rax], T_closure
  3089 00001080 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3090 00001084 48C74009[91100000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00cd
  3091 0000108C E9AA000000              	jmp .L_lambda_simple_end_00cd
  3092                                  .L_lambda_simple_code_00cd:	; lambda-simple body
  3093 00001091 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3094 00001097 740B                    	je .L_lambda_simple_arity_check_ok_00cd
  3095 00001099 FF742410                	push qword [rsp + 8 * 2]
  3096 0000109D 6A01                    	push 1
  3097 0000109F E9496F0100              	jmp L_error_incorrect_arity_simple
  3098                                  .L_lambda_simple_arity_check_ok_00cd:
  3099 000010A4 C8000000                	enter 0, 0
  3100                                  	; preparing a tail-call
  3101                                  	; preparing a non-tail-call
  3102 000010A8 488B4520                	mov rax, PARAM(0)	; param x
  3103 000010AC 50                      	push rax
  3104 000010AD 6A01                    	push 1	; arg count
  3105 000010AF 488B0425[07110000]      	mov rax, qword [free_var_48]	; free var cadr
  3106 000010B7 803805                  	cmp byte [rax], T_undefined
  3107 000010BA 0F84476E0100            	je L_error_fvar_undefined
  3108 000010C0 803804                  	cmp byte [rax], T_closure
  3109 000010C3 0F85C26E0100            	jne L_error_non_closure
  3110 000010C9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3111 000010CC FF5009                  	call SOB_CLOSURE_CODE(rax)
  3112 000010CF 50                      	push rax
  3113 000010D0 6A01                    	push 1	; arg count
  3114 000010D2 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  3115 000010DA 803805                  	cmp byte [rax], T_undefined
  3116 000010DD 0F84246E0100            	je L_error_fvar_undefined
  3117 000010E3 803804                  	cmp byte [rax], T_closure
  3118 000010E6 0F859F6E0100            	jne L_error_non_closure
  3119 000010EC FF7001                  	push SOB_CLOSURE_ENV(rax)
  3120 000010EF FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3121 000010F2 FF7500                  	push qword[rbp]
  3122 000010F5 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3123 000010F8 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3124 000010FC 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3125 00001100 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3126 00001104 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3127 00001107 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3128 0000110A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3129 0000110F 4983C103                	add r9, 3 	 ;for getting to the params
  3130 00001113 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3131 00001117 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3132                                  .L_tc_recycle_frame_loop_011e:
  3133 0000111A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3134 0000111D 7410                    	je .L_tc_recycle_frame_done_011e
  3135 0000111F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3136 00001122 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3137 00001125 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3138 00001129 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3139 0000112D EBEB                    	jmp .L_tc_recycle_frame_loop_011e
  3140                                  .L_tc_recycle_frame_done_011e:
  3141 0000112F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3142 00001130 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3143 00001134 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3144 00001137 C9                      	leave
  3145 00001138 C21800                  	ret AND_KILL_FRAME(1)
  3146                                  .L_lambda_simple_end_00cd:	; new closure is in rax
  3147 0000113B 48890425[7E110000]      	mov qword [free_var_55], rax
  3148 00001143 48B8-                   	mov rax, sob_void
  3148 00001145 [0000000000000000] 
  3149                                  
  3150 0000114D 4889C7                  	mov rdi, rax
  3151 00001150 E834710100              	call print_sexpr_if_not_void
  3152 00001155 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3153 0000115A E8D56E0100              	call malloc
  3154 0000115F 50                      	push rax
  3155 00001160 BF00000000              	mov rdi, 8 * 0	; new rib
  3156 00001165 E8CA6E0100              	call malloc
  3157 0000116A 50                      	push rax
  3158 0000116B BF08000000              	mov rdi, 8 * 1	; extended env
  3159 00001170 E8BF6E0100              	call malloc
  3160 00001175 488B7D10                	mov rdi, ENV
  3161 00001179 BE00000000              	mov rsi, 0
  3162 0000117E BA01000000              	mov rdx, 1
  3163                                  .L_lambda_simple_env_loop_00ce:	; ext_env[i + 1] <-- env[i]
  3164 00001183 4883FE00                	cmp rsi, 0
  3165 00001187 7410                    	je .L_lambda_simple_env_end_00ce
  3166 00001189 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3167 0000118D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3168 00001191 48FFC6                  	inc rsi
  3169 00001194 48FFC2                  	inc rdx
  3170 00001197 EBEA                    	jmp .L_lambda_simple_env_loop_00ce
  3171                                  .L_lambda_simple_env_end_00ce:
  3172 00001199 5B                      	pop rbx
  3173 0000119A BE00000000              	mov rsi, 0
  3174                                  .L_lambda_simple_params_loop_00ce:	; copy params
  3175 0000119F 4883FE00                	cmp rsi, 0
  3176 000011A3 740E                    	je .L_lambda_simple_params_end_00ce
  3177 000011A5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3178 000011AA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3179 000011AE 48FFC6                  	inc rsi
  3180 000011B1 EBEC                    	jmp .L_lambda_simple_params_loop_00ce
  3181                                  .L_lambda_simple_params_end_00ce:
  3182 000011B3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3183 000011B6 4889C3                  	mov rbx, rax
  3184 000011B9 58                      	pop rax
  3185 000011BA C60004                  	mov byte [rax], T_closure
  3186 000011BD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3187 000011C1 48C74009[CE110000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ce
  3188 000011C9 E9AA000000              	jmp .L_lambda_simple_end_00ce
  3189                                  .L_lambda_simple_code_00ce:	; lambda-simple body
  3190 000011CE 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3191 000011D4 740B                    	je .L_lambda_simple_arity_check_ok_00ce
  3192 000011D6 FF742410                	push qword [rsp + 8 * 2]
  3193 000011DA 6A01                    	push 1
  3194 000011DC E90C6E0100              	jmp L_error_incorrect_arity_simple
  3195                                  .L_lambda_simple_arity_check_ok_00ce:
  3196 000011E1 C8000000                	enter 0, 0
  3197                                  	; preparing a tail-call
  3198                                  	; preparing a non-tail-call
  3199 000011E5 488B4520                	mov rax, PARAM(0)	; param x
  3200 000011E9 50                      	push rax
  3201 000011EA 6A01                    	push 1	; arg count
  3202 000011EC 488B0425[8F110000]      	mov rax, qword [free_var_56]	; free var cdar
  3203 000011F4 803805                  	cmp byte [rax], T_undefined
  3204 000011F7 0F840A6D0100            	je L_error_fvar_undefined
  3205 000011FD 803804                  	cmp byte [rax], T_closure
  3206 00001200 0F85856D0100            	jne L_error_non_closure
  3207 00001206 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3208 00001209 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3209 0000120C 50                      	push rax
  3210 0000120D 6A01                    	push 1	; arg count
  3211 0000120F 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  3212 00001217 803805                  	cmp byte [rax], T_undefined
  3213 0000121A 0F84E76C0100            	je L_error_fvar_undefined
  3214 00001220 803804                  	cmp byte [rax], T_closure
  3215 00001223 0F85626D0100            	jne L_error_non_closure
  3216 00001229 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3217 0000122C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3218 0000122F FF7500                  	push qword[rbp]
  3219 00001232 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3220 00001235 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3221 00001239 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3222 0000123D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3223 00001241 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3224 00001244 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3225 00001247 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3226 0000124C 4983C103                	add r9, 3 	 ;for getting to the params
  3227 00001250 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3228 00001254 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3229                                  .L_tc_recycle_frame_loop_011f:
  3230 00001257 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3231 0000125A 7410                    	je .L_tc_recycle_frame_done_011f
  3232 0000125C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3233 0000125F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3234 00001262 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3235 00001266 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3236 0000126A EBEB                    	jmp .L_tc_recycle_frame_loop_011f
  3237                                  .L_tc_recycle_frame_done_011f:
  3238 0000126C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3239 0000126D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3240 00001271 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3241 00001274 C9                      	leave
  3242 00001275 C21800                  	ret AND_KILL_FRAME(1)
  3243                                  .L_lambda_simple_end_00ce:	; new closure is in rax
  3244 00001278 48890425[C2110000]      	mov qword [free_var_59], rax
  3245 00001280 48B8-                   	mov rax, sob_void
  3245 00001282 [0000000000000000] 
  3246                                  
  3247 0000128A 4889C7                  	mov rdi, rax
  3248 0000128D E8F76F0100              	call print_sexpr_if_not_void
  3249 00001292 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3250 00001297 E8986D0100              	call malloc
  3251 0000129C 50                      	push rax
  3252 0000129D BF00000000              	mov rdi, 8 * 0	; new rib
  3253 000012A2 E88D6D0100              	call malloc
  3254 000012A7 50                      	push rax
  3255 000012A8 BF08000000              	mov rdi, 8 * 1	; extended env
  3256 000012AD E8826D0100              	call malloc
  3257 000012B2 488B7D10                	mov rdi, ENV
  3258 000012B6 BE00000000              	mov rsi, 0
  3259 000012BB BA01000000              	mov rdx, 1
  3260                                  .L_lambda_simple_env_loop_00cf:	; ext_env[i + 1] <-- env[i]
  3261 000012C0 4883FE00                	cmp rsi, 0
  3262 000012C4 7410                    	je .L_lambda_simple_env_end_00cf
  3263 000012C6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3264 000012CA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3265 000012CE 48FFC6                  	inc rsi
  3266 000012D1 48FFC2                  	inc rdx
  3267 000012D4 EBEA                    	jmp .L_lambda_simple_env_loop_00cf
  3268                                  .L_lambda_simple_env_end_00cf:
  3269 000012D6 5B                      	pop rbx
  3270 000012D7 BE00000000              	mov rsi, 0
  3271                                  .L_lambda_simple_params_loop_00cf:	; copy params
  3272 000012DC 4883FE00                	cmp rsi, 0
  3273 000012E0 740E                    	je .L_lambda_simple_params_end_00cf
  3274 000012E2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3275 000012E7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3276 000012EB 48FFC6                  	inc rsi
  3277 000012EE EBEC                    	jmp .L_lambda_simple_params_loop_00cf
  3278                                  .L_lambda_simple_params_end_00cf:
  3279 000012F0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3280 000012F3 4889C3                  	mov rbx, rax
  3281 000012F6 58                      	pop rax
  3282 000012F7 C60004                  	mov byte [rax], T_closure
  3283 000012FA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3284 000012FE 48C74009[0B130000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00cf
  3285 00001306 E9AA000000              	jmp .L_lambda_simple_end_00cf
  3286                                  .L_lambda_simple_code_00cf:	; lambda-simple body
  3287 0000130B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3288 00001311 740B                    	je .L_lambda_simple_arity_check_ok_00cf
  3289 00001313 FF742410                	push qword [rsp + 8 * 2]
  3290 00001317 6A01                    	push 1
  3291 00001319 E9CF6C0100              	jmp L_error_incorrect_arity_simple
  3292                                  .L_lambda_simple_arity_check_ok_00cf:
  3293 0000131E C8000000                	enter 0, 0
  3294                                  	; preparing a tail-call
  3295                                  	; preparing a non-tail-call
  3296 00001322 488B4520                	mov rax, PARAM(0)	; param x
  3297 00001326 50                      	push rax
  3298 00001327 6A01                    	push 1	; arg count
  3299 00001329 488B0425[06120000]      	mov rax, qword [free_var_63]	; free var cddr
  3300 00001331 803805                  	cmp byte [rax], T_undefined
  3301 00001334 0F84CD6B0100            	je L_error_fvar_undefined
  3302 0000133A 803804                  	cmp byte [rax], T_closure
  3303 0000133D 0F85486C0100            	jne L_error_non_closure
  3304 00001343 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3305 00001346 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3306 00001349 50                      	push rax
  3307 0000134A 6A01                    	push 1	; arg count
  3308 0000134C 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  3309 00001354 803805                  	cmp byte [rax], T_undefined
  3310 00001357 0F84AA6B0100            	je L_error_fvar_undefined
  3311 0000135D 803804                  	cmp byte [rax], T_closure
  3312 00001360 0F85256C0100            	jne L_error_non_closure
  3313 00001366 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3314 00001369 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3315 0000136C FF7500                  	push qword[rbp]
  3316 0000136F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3317 00001372 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3318 00001376 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3319 0000137A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3320 0000137E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3321 00001381 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3322 00001384 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3323 00001389 4983C103                	add r9, 3 	 ;for getting to the params
  3324 0000138D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3325 00001391 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3326                                  .L_tc_recycle_frame_loop_0120:
  3327 00001394 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3328 00001397 7410                    	je .L_tc_recycle_frame_done_0120
  3329 00001399 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3330 0000139C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3331 0000139F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3332 000013A3 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3333 000013A7 EBEB                    	jmp .L_tc_recycle_frame_loop_0120
  3334                                  .L_tc_recycle_frame_done_0120:
  3335 000013A9 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3336 000013AA 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3337 000013AE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3338 000013B1 C9                      	leave
  3339 000013B2 C21800                  	ret AND_KILL_FRAME(1)
  3340                                  .L_lambda_simple_end_00cf:	; new closure is in rax
  3341 000013B5 48890425[F5110000]      	mov qword [free_var_62], rax
  3342 000013BD 48B8-                   	mov rax, sob_void
  3342 000013BF [0000000000000000] 
  3343                                  
  3344 000013C7 4889C7                  	mov rdi, rax
  3345 000013CA E8BA6E0100              	call print_sexpr_if_not_void
  3346 000013CF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3347 000013D4 E85B6C0100              	call malloc
  3348 000013D9 50                      	push rax
  3349 000013DA BF00000000              	mov rdi, 8 * 0	; new rib
  3350 000013DF E8506C0100              	call malloc
  3351 000013E4 50                      	push rax
  3352 000013E5 BF08000000              	mov rdi, 8 * 1	; extended env
  3353 000013EA E8456C0100              	call malloc
  3354 000013EF 488B7D10                	mov rdi, ENV
  3355 000013F3 BE00000000              	mov rsi, 0
  3356 000013F8 BA01000000              	mov rdx, 1
  3357                                  .L_lambda_simple_env_loop_00d0:	; ext_env[i + 1] <-- env[i]
  3358 000013FD 4883FE00                	cmp rsi, 0
  3359 00001401 7410                    	je .L_lambda_simple_env_end_00d0
  3360 00001403 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3361 00001407 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3362 0000140B 48FFC6                  	inc rsi
  3363 0000140E 48FFC2                  	inc rdx
  3364 00001411 EBEA                    	jmp .L_lambda_simple_env_loop_00d0
  3365                                  .L_lambda_simple_env_end_00d0:
  3366 00001413 5B                      	pop rbx
  3367 00001414 BE00000000              	mov rsi, 0
  3368                                  .L_lambda_simple_params_loop_00d0:	; copy params
  3369 00001419 4883FE00                	cmp rsi, 0
  3370 0000141D 740E                    	je .L_lambda_simple_params_end_00d0
  3371 0000141F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3372 00001424 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3373 00001428 48FFC6                  	inc rsi
  3374 0000142B EBEC                    	jmp .L_lambda_simple_params_loop_00d0
  3375                                  .L_lambda_simple_params_end_00d0:
  3376 0000142D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3377 00001430 4889C3                  	mov rbx, rax
  3378 00001433 58                      	pop rax
  3379 00001434 C60004                  	mov byte [rax], T_closure
  3380 00001437 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3381 0000143B 48C74009[48140000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d0
  3382 00001443 E9AA000000              	jmp .L_lambda_simple_end_00d0
  3383                                  .L_lambda_simple_code_00d0:	; lambda-simple body
  3384 00001448 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3385 0000144E 740B                    	je .L_lambda_simple_arity_check_ok_00d0
  3386 00001450 FF742410                	push qword [rsp + 8 * 2]
  3387 00001454 6A01                    	push 1
  3388 00001456 E9926B0100              	jmp L_error_incorrect_arity_simple
  3389                                  .L_lambda_simple_arity_check_ok_00d0:
  3390 0000145B C8000000                	enter 0, 0
  3391                                  	; preparing a tail-call
  3392                                  	; preparing a non-tail-call
  3393 0000145F 488B4520                	mov rax, PARAM(0)	; param x
  3394 00001463 50                      	push rax
  3395 00001464 6A01                    	push 1	; arg count
  3396 00001466 488B0425[90100000]      	mov rax, qword [free_var_41]	; free var caar
  3397 0000146E 803805                  	cmp byte [rax], T_undefined
  3398 00001471 0F84906A0100            	je L_error_fvar_undefined
  3399 00001477 803804                  	cmp byte [rax], T_closure
  3400 0000147A 0F850B6B0100            	jne L_error_non_closure
  3401 00001480 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3402 00001483 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3403 00001486 50                      	push rax
  3404 00001487 6A01                    	push 1	; arg count
  3405 00001489 488B0425[90100000]      	mov rax, qword [free_var_41]	; free var caar
  3406 00001491 803805                  	cmp byte [rax], T_undefined
  3407 00001494 0F846D6A0100            	je L_error_fvar_undefined
  3408 0000149A 803804                  	cmp byte [rax], T_closure
  3409 0000149D 0F85E86A0100            	jne L_error_non_closure
  3410 000014A3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3411 000014A6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3412 000014A9 FF7500                  	push qword[rbp]
  3413 000014AC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3414 000014AF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3415 000014B3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3416 000014B7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3417 000014BB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3418 000014BE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3419 000014C1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3420 000014C6 4983C103                	add r9, 3 	 ;for getting to the params
  3421 000014CA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3422 000014CE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3423                                  .L_tc_recycle_frame_loop_0121:
  3424 000014D1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3425 000014D4 7410                    	je .L_tc_recycle_frame_done_0121
  3426 000014D6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3427 000014D9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3428 000014DC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3429 000014E0 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3430 000014E4 EBEB                    	jmp .L_tc_recycle_frame_loop_0121
  3431                                  .L_tc_recycle_frame_done_0121:
  3432 000014E6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3433 000014E7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3434 000014EB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3435 000014EE C9                      	leave
  3436 000014EF C21800                  	ret AND_KILL_FRAME(1)
  3437                                  .L_lambda_simple_end_00d0:	; new closure is in rax
  3438 000014F2 48890425[2A100000]      	mov qword [free_var_35], rax
  3439 000014FA 48B8-                   	mov rax, sob_void
  3439 000014FC [0000000000000000] 
  3440                                  
  3441 00001504 4889C7                  	mov rdi, rax
  3442 00001507 E87D6D0100              	call print_sexpr_if_not_void
  3443 0000150C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3444 00001511 E81E6B0100              	call malloc
  3445 00001516 50                      	push rax
  3446 00001517 BF00000000              	mov rdi, 8 * 0	; new rib
  3447 0000151C E8136B0100              	call malloc
  3448 00001521 50                      	push rax
  3449 00001522 BF08000000              	mov rdi, 8 * 1	; extended env
  3450 00001527 E8086B0100              	call malloc
  3451 0000152C 488B7D10                	mov rdi, ENV
  3452 00001530 BE00000000              	mov rsi, 0
  3453 00001535 BA01000000              	mov rdx, 1
  3454                                  .L_lambda_simple_env_loop_00d1:	; ext_env[i + 1] <-- env[i]
  3455 0000153A 4883FE00                	cmp rsi, 0
  3456 0000153E 7410                    	je .L_lambda_simple_env_end_00d1
  3457 00001540 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3458 00001544 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3459 00001548 48FFC6                  	inc rsi
  3460 0000154B 48FFC2                  	inc rdx
  3461 0000154E EBEA                    	jmp .L_lambda_simple_env_loop_00d1
  3462                                  .L_lambda_simple_env_end_00d1:
  3463 00001550 5B                      	pop rbx
  3464 00001551 BE00000000              	mov rsi, 0
  3465                                  .L_lambda_simple_params_loop_00d1:	; copy params
  3466 00001556 4883FE00                	cmp rsi, 0
  3467 0000155A 740E                    	je .L_lambda_simple_params_end_00d1
  3468 0000155C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3469 00001561 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3470 00001565 48FFC6                  	inc rsi
  3471 00001568 EBEC                    	jmp .L_lambda_simple_params_loop_00d1
  3472                                  .L_lambda_simple_params_end_00d1:
  3473 0000156A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3474 0000156D 4889C3                  	mov rbx, rax
  3475 00001570 58                      	pop rax
  3476 00001571 C60004                  	mov byte [rax], T_closure
  3477 00001574 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3478 00001578 48C74009[85150000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d1
  3479 00001580 E9AA000000              	jmp .L_lambda_simple_end_00d1
  3480                                  .L_lambda_simple_code_00d1:	; lambda-simple body
  3481 00001585 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3482 0000158B 740B                    	je .L_lambda_simple_arity_check_ok_00d1
  3483 0000158D FF742410                	push qword [rsp + 8 * 2]
  3484 00001591 6A01                    	push 1
  3485 00001593 E9556A0100              	jmp L_error_incorrect_arity_simple
  3486                                  .L_lambda_simple_arity_check_ok_00d1:
  3487 00001598 C8000000                	enter 0, 0
  3488                                  	; preparing a tail-call
  3489                                  	; preparing a non-tail-call
  3490 0000159C 488B4520                	mov rax, PARAM(0)	; param x
  3491 000015A0 50                      	push rax
  3492 000015A1 6A01                    	push 1	; arg count
  3493 000015A3 488B0425[07110000]      	mov rax, qword [free_var_48]	; free var cadr
  3494 000015AB 803805                  	cmp byte [rax], T_undefined
  3495 000015AE 0F8453690100            	je L_error_fvar_undefined
  3496 000015B4 803804                  	cmp byte [rax], T_closure
  3497 000015B7 0F85CE690100            	jne L_error_non_closure
  3498 000015BD FF7001                  	push SOB_CLOSURE_ENV(rax)
  3499 000015C0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3500 000015C3 50                      	push rax
  3501 000015C4 6A01                    	push 1	; arg count
  3502 000015C6 488B0425[90100000]      	mov rax, qword [free_var_41]	; free var caar
  3503 000015CE 803805                  	cmp byte [rax], T_undefined
  3504 000015D1 0F8430690100            	je L_error_fvar_undefined
  3505 000015D7 803804                  	cmp byte [rax], T_closure
  3506 000015DA 0F85AB690100            	jne L_error_non_closure
  3507 000015E0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3508 000015E3 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3509 000015E6 FF7500                  	push qword[rbp]
  3510 000015E9 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3511 000015EC 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3512 000015F0 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3513 000015F4 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3514 000015F8 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3515 000015FB 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3516 000015FE 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3517 00001603 4983C103                	add r9, 3 	 ;for getting to the params
  3518 00001607 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3519 0000160B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3520                                  .L_tc_recycle_frame_loop_0122:
  3521 0000160E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3522 00001611 7410                    	je .L_tc_recycle_frame_done_0122
  3523 00001613 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3524 00001616 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3525 00001619 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3526 0000161D 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3527 00001621 EBEB                    	jmp .L_tc_recycle_frame_loop_0122
  3528                                  .L_tc_recycle_frame_done_0122:
  3529 00001623 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3530 00001624 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3531 00001628 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3532 0000162B C9                      	leave
  3533 0000162C C21800                  	ret AND_KILL_FRAME(1)
  3534                                  .L_lambda_simple_end_00d1:	; new closure is in rax
  3535 0000162F 48890425[3B100000]      	mov qword [free_var_36], rax
  3536 00001637 48B8-                   	mov rax, sob_void
  3536 00001639 [0000000000000000] 
  3537                                  
  3538 00001641 4889C7                  	mov rdi, rax
  3539 00001644 E8406C0100              	call print_sexpr_if_not_void
  3540 00001649 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3541 0000164E E8E1690100              	call malloc
  3542 00001653 50                      	push rax
  3543 00001654 BF00000000              	mov rdi, 8 * 0	; new rib
  3544 00001659 E8D6690100              	call malloc
  3545 0000165E 50                      	push rax
  3546 0000165F BF08000000              	mov rdi, 8 * 1	; extended env
  3547 00001664 E8CB690100              	call malloc
  3548 00001669 488B7D10                	mov rdi, ENV
  3549 0000166D BE00000000              	mov rsi, 0
  3550 00001672 BA01000000              	mov rdx, 1
  3551                                  .L_lambda_simple_env_loop_00d2:	; ext_env[i + 1] <-- env[i]
  3552 00001677 4883FE00                	cmp rsi, 0
  3553 0000167B 7410                    	je .L_lambda_simple_env_end_00d2
  3554 0000167D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3555 00001681 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3556 00001685 48FFC6                  	inc rsi
  3557 00001688 48FFC2                  	inc rdx
  3558 0000168B EBEA                    	jmp .L_lambda_simple_env_loop_00d2
  3559                                  .L_lambda_simple_env_end_00d2:
  3560 0000168D 5B                      	pop rbx
  3561 0000168E BE00000000              	mov rsi, 0
  3562                                  .L_lambda_simple_params_loop_00d2:	; copy params
  3563 00001693 4883FE00                	cmp rsi, 0
  3564 00001697 740E                    	je .L_lambda_simple_params_end_00d2
  3565 00001699 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3566 0000169E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3567 000016A2 48FFC6                  	inc rsi
  3568 000016A5 EBEC                    	jmp .L_lambda_simple_params_loop_00d2
  3569                                  .L_lambda_simple_params_end_00d2:
  3570 000016A7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3571 000016AA 4889C3                  	mov rbx, rax
  3572 000016AD 58                      	pop rax
  3573 000016AE C60004                  	mov byte [rax], T_closure
  3574 000016B1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3575 000016B5 48C74009[C2160000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d2
  3576 000016BD E9AA000000              	jmp .L_lambda_simple_end_00d2
  3577                                  .L_lambda_simple_code_00d2:	; lambda-simple body
  3578 000016C2 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3579 000016C8 740B                    	je .L_lambda_simple_arity_check_ok_00d2
  3580 000016CA FF742410                	push qword [rsp + 8 * 2]
  3581 000016CE 6A01                    	push 1
  3582 000016D0 E918690100              	jmp L_error_incorrect_arity_simple
  3583                                  .L_lambda_simple_arity_check_ok_00d2:
  3584 000016D5 C8000000                	enter 0, 0
  3585                                  	; preparing a tail-call
  3586                                  	; preparing a non-tail-call
  3587 000016D9 488B4520                	mov rax, PARAM(0)	; param x
  3588 000016DD 50                      	push rax
  3589 000016DE 6A01                    	push 1	; arg count
  3590 000016E0 488B0425[8F110000]      	mov rax, qword [free_var_56]	; free var cdar
  3591 000016E8 803805                  	cmp byte [rax], T_undefined
  3592 000016EB 0F8416680100            	je L_error_fvar_undefined
  3593 000016F1 803804                  	cmp byte [rax], T_closure
  3594 000016F4 0F8591680100            	jne L_error_non_closure
  3595 000016FA FF7001                  	push SOB_CLOSURE_ENV(rax)
  3596 000016FD FF5009                  	call SOB_CLOSURE_CODE(rax)
  3597 00001700 50                      	push rax
  3598 00001701 6A01                    	push 1	; arg count
  3599 00001703 488B0425[90100000]      	mov rax, qword [free_var_41]	; free var caar
  3600 0000170B 803805                  	cmp byte [rax], T_undefined
  3601 0000170E 0F84F3670100            	je L_error_fvar_undefined
  3602 00001714 803804                  	cmp byte [rax], T_closure
  3603 00001717 0F856E680100            	jne L_error_non_closure
  3604 0000171D FF7001                  	push SOB_CLOSURE_ENV(rax)
  3605 00001720 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3606 00001723 FF7500                  	push qword[rbp]
  3607 00001726 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3608 00001729 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3609 0000172D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3610 00001731 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3611 00001735 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3612 00001738 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3613 0000173B 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3614 00001740 4983C103                	add r9, 3 	 ;for getting to the params
  3615 00001744 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3616 00001748 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3617                                  .L_tc_recycle_frame_loop_0123:
  3618 0000174B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3619 0000174E 7410                    	je .L_tc_recycle_frame_done_0123
  3620 00001750 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3621 00001753 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3622 00001756 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3623 0000175A 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3624 0000175E EBEB                    	jmp .L_tc_recycle_frame_loop_0123
  3625                                  .L_tc_recycle_frame_done_0123:
  3626 00001760 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3627 00001761 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3628 00001765 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3629 00001768 C9                      	leave
  3630 00001769 C21800                  	ret AND_KILL_FRAME(1)
  3631                                  .L_lambda_simple_end_00d2:	; new closure is in rax
  3632 0000176C 48890425[5D100000]      	mov qword [free_var_38], rax
  3633 00001774 48B8-                   	mov rax, sob_void
  3633 00001776 [0000000000000000] 
  3634                                  
  3635 0000177E 4889C7                  	mov rdi, rax
  3636 00001781 E8036B0100              	call print_sexpr_if_not_void
  3637 00001786 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3638 0000178B E8A4680100              	call malloc
  3639 00001790 50                      	push rax
  3640 00001791 BF00000000              	mov rdi, 8 * 0	; new rib
  3641 00001796 E899680100              	call malloc
  3642 0000179B 50                      	push rax
  3643 0000179C BF08000000              	mov rdi, 8 * 1	; extended env
  3644 000017A1 E88E680100              	call malloc
  3645 000017A6 488B7D10                	mov rdi, ENV
  3646 000017AA BE00000000              	mov rsi, 0
  3647 000017AF BA01000000              	mov rdx, 1
  3648                                  .L_lambda_simple_env_loop_00d3:	; ext_env[i + 1] <-- env[i]
  3649 000017B4 4883FE00                	cmp rsi, 0
  3650 000017B8 7410                    	je .L_lambda_simple_env_end_00d3
  3651 000017BA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3652 000017BE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3653 000017C2 48FFC6                  	inc rsi
  3654 000017C5 48FFC2                  	inc rdx
  3655 000017C8 EBEA                    	jmp .L_lambda_simple_env_loop_00d3
  3656                                  .L_lambda_simple_env_end_00d3:
  3657 000017CA 5B                      	pop rbx
  3658 000017CB BE00000000              	mov rsi, 0
  3659                                  .L_lambda_simple_params_loop_00d3:	; copy params
  3660 000017D0 4883FE00                	cmp rsi, 0
  3661 000017D4 740E                    	je .L_lambda_simple_params_end_00d3
  3662 000017D6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3663 000017DB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3664 000017DF 48FFC6                  	inc rsi
  3665 000017E2 EBEC                    	jmp .L_lambda_simple_params_loop_00d3
  3666                                  .L_lambda_simple_params_end_00d3:
  3667 000017E4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3668 000017E7 4889C3                  	mov rbx, rax
  3669 000017EA 58                      	pop rax
  3670 000017EB C60004                  	mov byte [rax], T_closure
  3671 000017EE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3672 000017F2 48C74009[FF170000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d3
  3673 000017FA E9AA000000              	jmp .L_lambda_simple_end_00d3
  3674                                  .L_lambda_simple_code_00d3:	; lambda-simple body
  3675 000017FF 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3676 00001805 740B                    	je .L_lambda_simple_arity_check_ok_00d3
  3677 00001807 FF742410                	push qword [rsp + 8 * 2]
  3678 0000180B 6A01                    	push 1
  3679 0000180D E9DB670100              	jmp L_error_incorrect_arity_simple
  3680                                  .L_lambda_simple_arity_check_ok_00d3:
  3681 00001812 C8000000                	enter 0, 0
  3682                                  	; preparing a tail-call
  3683                                  	; preparing a non-tail-call
  3684 00001816 488B4520                	mov rax, PARAM(0)	; param x
  3685 0000181A 50                      	push rax
  3686 0000181B 6A01                    	push 1	; arg count
  3687 0000181D 488B0425[06120000]      	mov rax, qword [free_var_63]	; free var cddr
  3688 00001825 803805                  	cmp byte [rax], T_undefined
  3689 00001828 0F84D9660100            	je L_error_fvar_undefined
  3690 0000182E 803804                  	cmp byte [rax], T_closure
  3691 00001831 0F8554670100            	jne L_error_non_closure
  3692 00001837 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3693 0000183A FF5009                  	call SOB_CLOSURE_CODE(rax)
  3694 0000183D 50                      	push rax
  3695 0000183E 6A01                    	push 1	; arg count
  3696 00001840 488B0425[90100000]      	mov rax, qword [free_var_41]	; free var caar
  3697 00001848 803805                  	cmp byte [rax], T_undefined
  3698 0000184B 0F84B6660100            	je L_error_fvar_undefined
  3699 00001851 803804                  	cmp byte [rax], T_closure
  3700 00001854 0F8531670100            	jne L_error_non_closure
  3701 0000185A FF7001                  	push SOB_CLOSURE_ENV(rax)
  3702 0000185D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3703 00001860 FF7500                  	push qword[rbp]
  3704 00001863 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3705 00001866 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3706 0000186A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3707 0000186E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3708 00001872 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3709 00001875 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3710 00001878 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3711 0000187D 4983C103                	add r9, 3 	 ;for getting to the params
  3712 00001881 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3713 00001885 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3714                                  .L_tc_recycle_frame_loop_0124:
  3715 00001888 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3716 0000188B 7410                    	je .L_tc_recycle_frame_done_0124
  3717 0000188D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3718 00001890 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3719 00001893 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3720 00001897 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3721 0000189B EBEB                    	jmp .L_tc_recycle_frame_loop_0124
  3722                                  .L_tc_recycle_frame_done_0124:
  3723 0000189D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3724 0000189E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3725 000018A2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3726 000018A5 C9                      	leave
  3727 000018A6 C21800                  	ret AND_KILL_FRAME(1)
  3728                                  .L_lambda_simple_end_00d3:	; new closure is in rax
  3729 000018A9 48890425[6E100000]      	mov qword [free_var_39], rax
  3730 000018B1 48B8-                   	mov rax, sob_void
  3730 000018B3 [0000000000000000] 
  3731                                  
  3732 000018BB 4889C7                  	mov rdi, rax
  3733 000018BE E8C6690100              	call print_sexpr_if_not_void
  3734 000018C3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3735 000018C8 E867670100              	call malloc
  3736 000018CD 50                      	push rax
  3737 000018CE BF00000000              	mov rdi, 8 * 0	; new rib
  3738 000018D3 E85C670100              	call malloc
  3739 000018D8 50                      	push rax
  3740 000018D9 BF08000000              	mov rdi, 8 * 1	; extended env
  3741 000018DE E851670100              	call malloc
  3742 000018E3 488B7D10                	mov rdi, ENV
  3743 000018E7 BE00000000              	mov rsi, 0
  3744 000018EC BA01000000              	mov rdx, 1
  3745                                  .L_lambda_simple_env_loop_00d4:	; ext_env[i + 1] <-- env[i]
  3746 000018F1 4883FE00                	cmp rsi, 0
  3747 000018F5 7410                    	je .L_lambda_simple_env_end_00d4
  3748 000018F7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3749 000018FB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3750 000018FF 48FFC6                  	inc rsi
  3751 00001902 48FFC2                  	inc rdx
  3752 00001905 EBEA                    	jmp .L_lambda_simple_env_loop_00d4
  3753                                  .L_lambda_simple_env_end_00d4:
  3754 00001907 5B                      	pop rbx
  3755 00001908 BE00000000              	mov rsi, 0
  3756                                  .L_lambda_simple_params_loop_00d4:	; copy params
  3757 0000190D 4883FE00                	cmp rsi, 0
  3758 00001911 740E                    	je .L_lambda_simple_params_end_00d4
  3759 00001913 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3760 00001918 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3761 0000191C 48FFC6                  	inc rsi
  3762 0000191F EBEC                    	jmp .L_lambda_simple_params_loop_00d4
  3763                                  .L_lambda_simple_params_end_00d4:
  3764 00001921 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3765 00001924 4889C3                  	mov rbx, rax
  3766 00001927 58                      	pop rax
  3767 00001928 C60004                  	mov byte [rax], T_closure
  3768 0000192B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3769 0000192F 48C74009[3C190000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d4
  3770 00001937 E9AA000000              	jmp .L_lambda_simple_end_00d4
  3771                                  .L_lambda_simple_code_00d4:	; lambda-simple body
  3772 0000193C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3773 00001942 740B                    	je .L_lambda_simple_arity_check_ok_00d4
  3774 00001944 FF742410                	push qword [rsp + 8 * 2]
  3775 00001948 6A01                    	push 1
  3776 0000194A E99E660100              	jmp L_error_incorrect_arity_simple
  3777                                  .L_lambda_simple_arity_check_ok_00d4:
  3778 0000194F C8000000                	enter 0, 0
  3779                                  	; preparing a tail-call
  3780                                  	; preparing a non-tail-call
  3781 00001953 488B4520                	mov rax, PARAM(0)	; param x
  3782 00001957 50                      	push rax
  3783 00001958 6A01                    	push 1	; arg count
  3784 0000195A 488B0425[90100000]      	mov rax, qword [free_var_41]	; free var caar
  3785 00001962 803805                  	cmp byte [rax], T_undefined
  3786 00001965 0F849C650100            	je L_error_fvar_undefined
  3787 0000196B 803804                  	cmp byte [rax], T_closure
  3788 0000196E 0F8517660100            	jne L_error_non_closure
  3789 00001974 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3790 00001977 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3791 0000197A 50                      	push rax
  3792 0000197B 6A01                    	push 1	; arg count
  3793 0000197D 488B0425[07110000]      	mov rax, qword [free_var_48]	; free var cadr
  3794 00001985 803805                  	cmp byte [rax], T_undefined
  3795 00001988 0F8479650100            	je L_error_fvar_undefined
  3796 0000198E 803804                  	cmp byte [rax], T_closure
  3797 00001991 0F85F4650100            	jne L_error_non_closure
  3798 00001997 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3799 0000199A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3800 0000199D FF7500                  	push qword[rbp]
  3801 000019A0 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3802 000019A3 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3803 000019A7 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3804 000019AB 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3805 000019AF 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3806 000019B2 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3807 000019B5 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3808 000019BA 4983C103                	add r9, 3 	 ;for getting to the params
  3809 000019BE 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3810 000019C2 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3811                                  .L_tc_recycle_frame_loop_0125:
  3812 000019C5 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3813 000019C8 7410                    	je .L_tc_recycle_frame_done_0125
  3814 000019CA 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3815 000019CD 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3816 000019D0 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3817 000019D4 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3818 000019D8 EBEB                    	jmp .L_tc_recycle_frame_loop_0125
  3819                                  .L_tc_recycle_frame_done_0125:
  3820 000019DA 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3821 000019DB 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3822 000019DF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3823 000019E2 C9                      	leave
  3824 000019E3 C21800                  	ret AND_KILL_FRAME(1)
  3825                                  .L_lambda_simple_end_00d4:	; new closure is in rax
  3826 000019E6 48890425[A1100000]      	mov qword [free_var_42], rax
  3827 000019EE 48B8-                   	mov rax, sob_void
  3827 000019F0 [0000000000000000] 
  3828                                  
  3829 000019F8 4889C7                  	mov rdi, rax
  3830 000019FB E889680100              	call print_sexpr_if_not_void
  3831 00001A00 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3832 00001A05 E82A660100              	call malloc
  3833 00001A0A 50                      	push rax
  3834 00001A0B BF00000000              	mov rdi, 8 * 0	; new rib
  3835 00001A10 E81F660100              	call malloc
  3836 00001A15 50                      	push rax
  3837 00001A16 BF08000000              	mov rdi, 8 * 1	; extended env
  3838 00001A1B E814660100              	call malloc
  3839 00001A20 488B7D10                	mov rdi, ENV
  3840 00001A24 BE00000000              	mov rsi, 0
  3841 00001A29 BA01000000              	mov rdx, 1
  3842                                  .L_lambda_simple_env_loop_00d5:	; ext_env[i + 1] <-- env[i]
  3843 00001A2E 4883FE00                	cmp rsi, 0
  3844 00001A32 7410                    	je .L_lambda_simple_env_end_00d5
  3845 00001A34 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3846 00001A38 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3847 00001A3C 48FFC6                  	inc rsi
  3848 00001A3F 48FFC2                  	inc rdx
  3849 00001A42 EBEA                    	jmp .L_lambda_simple_env_loop_00d5
  3850                                  .L_lambda_simple_env_end_00d5:
  3851 00001A44 5B                      	pop rbx
  3852 00001A45 BE00000000              	mov rsi, 0
  3853                                  .L_lambda_simple_params_loop_00d5:	; copy params
  3854 00001A4A 4883FE00                	cmp rsi, 0
  3855 00001A4E 740E                    	je .L_lambda_simple_params_end_00d5
  3856 00001A50 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3857 00001A55 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3858 00001A59 48FFC6                  	inc rsi
  3859 00001A5C EBEC                    	jmp .L_lambda_simple_params_loop_00d5
  3860                                  .L_lambda_simple_params_end_00d5:
  3861 00001A5E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3862 00001A61 4889C3                  	mov rbx, rax
  3863 00001A64 58                      	pop rax
  3864 00001A65 C60004                  	mov byte [rax], T_closure
  3865 00001A68 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3866 00001A6C 48C74009[791A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d5
  3867 00001A74 E9AA000000              	jmp .L_lambda_simple_end_00d5
  3868                                  .L_lambda_simple_code_00d5:	; lambda-simple body
  3869 00001A79 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3870 00001A7F 740B                    	je .L_lambda_simple_arity_check_ok_00d5
  3871 00001A81 FF742410                	push qword [rsp + 8 * 2]
  3872 00001A85 6A01                    	push 1
  3873 00001A87 E961650100              	jmp L_error_incorrect_arity_simple
  3874                                  .L_lambda_simple_arity_check_ok_00d5:
  3875 00001A8C C8000000                	enter 0, 0
  3876                                  	; preparing a tail-call
  3877                                  	; preparing a non-tail-call
  3878 00001A90 488B4520                	mov rax, PARAM(0)	; param x
  3879 00001A94 50                      	push rax
  3880 00001A95 6A01                    	push 1	; arg count
  3881 00001A97 488B0425[07110000]      	mov rax, qword [free_var_48]	; free var cadr
  3882 00001A9F 803805                  	cmp byte [rax], T_undefined
  3883 00001AA2 0F845F640100            	je L_error_fvar_undefined
  3884 00001AA8 803804                  	cmp byte [rax], T_closure
  3885 00001AAB 0F85DA640100            	jne L_error_non_closure
  3886 00001AB1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3887 00001AB4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3888 00001AB7 50                      	push rax
  3889 00001AB8 6A01                    	push 1	; arg count
  3890 00001ABA 488B0425[07110000]      	mov rax, qword [free_var_48]	; free var cadr
  3891 00001AC2 803805                  	cmp byte [rax], T_undefined
  3892 00001AC5 0F843C640100            	je L_error_fvar_undefined
  3893 00001ACB 803804                  	cmp byte [rax], T_closure
  3894 00001ACE 0F85B7640100            	jne L_error_non_closure
  3895 00001AD4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3896 00001AD7 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3897 00001ADA FF7500                  	push qword[rbp]
  3898 00001ADD 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3899 00001AE0 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3900 00001AE4 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3901 00001AE8 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3902 00001AEC 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3903 00001AEF 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3904 00001AF2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3905 00001AF7 4983C103                	add r9, 3 	 ;for getting to the params
  3906 00001AFB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3907 00001AFF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3908                                  .L_tc_recycle_frame_loop_0126:
  3909 00001B02 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3910 00001B05 7410                    	je .L_tc_recycle_frame_done_0126
  3911 00001B07 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3912 00001B0A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3913 00001B0D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3914 00001B11 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3915 00001B15 EBEB                    	jmp .L_tc_recycle_frame_loop_0126
  3916                                  .L_tc_recycle_frame_done_0126:
  3917 00001B17 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3918 00001B18 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3919 00001B1C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3920 00001B1F C9                      	leave
  3921 00001B20 C21800                  	ret AND_KILL_FRAME(1)
  3922                                  .L_lambda_simple_end_00d5:	; new closure is in rax
  3923 00001B23 48890425[B2100000]      	mov qword [free_var_43], rax
  3924 00001B2B 48B8-                   	mov rax, sob_void
  3924 00001B2D [0000000000000000] 
  3925                                  
  3926 00001B35 4889C7                  	mov rdi, rax
  3927 00001B38 E84C670100              	call print_sexpr_if_not_void
  3928 00001B3D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3929 00001B42 E8ED640100              	call malloc
  3930 00001B47 50                      	push rax
  3931 00001B48 BF00000000              	mov rdi, 8 * 0	; new rib
  3932 00001B4D E8E2640100              	call malloc
  3933 00001B52 50                      	push rax
  3934 00001B53 BF08000000              	mov rdi, 8 * 1	; extended env
  3935 00001B58 E8D7640100              	call malloc
  3936 00001B5D 488B7D10                	mov rdi, ENV
  3937 00001B61 BE00000000              	mov rsi, 0
  3938 00001B66 BA01000000              	mov rdx, 1
  3939                                  .L_lambda_simple_env_loop_00d6:	; ext_env[i + 1] <-- env[i]
  3940 00001B6B 4883FE00                	cmp rsi, 0
  3941 00001B6F 7410                    	je .L_lambda_simple_env_end_00d6
  3942 00001B71 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3943 00001B75 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3944 00001B79 48FFC6                  	inc rsi
  3945 00001B7C 48FFC2                  	inc rdx
  3946 00001B7F EBEA                    	jmp .L_lambda_simple_env_loop_00d6
  3947                                  .L_lambda_simple_env_end_00d6:
  3948 00001B81 5B                      	pop rbx
  3949 00001B82 BE00000000              	mov rsi, 0
  3950                                  .L_lambda_simple_params_loop_00d6:	; copy params
  3951 00001B87 4883FE00                	cmp rsi, 0
  3952 00001B8B 740E                    	je .L_lambda_simple_params_end_00d6
  3953 00001B8D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3954 00001B92 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3955 00001B96 48FFC6                  	inc rsi
  3956 00001B99 EBEC                    	jmp .L_lambda_simple_params_loop_00d6
  3957                                  .L_lambda_simple_params_end_00d6:
  3958 00001B9B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3959 00001B9E 4889C3                  	mov rbx, rax
  3960 00001BA1 58                      	pop rax
  3961 00001BA2 C60004                  	mov byte [rax], T_closure
  3962 00001BA5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3963 00001BA9 48C74009[B61B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d6
  3964 00001BB1 E9AA000000              	jmp .L_lambda_simple_end_00d6
  3965                                  .L_lambda_simple_code_00d6:	; lambda-simple body
  3966 00001BB6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3967 00001BBC 740B                    	je .L_lambda_simple_arity_check_ok_00d6
  3968 00001BBE FF742410                	push qword [rsp + 8 * 2]
  3969 00001BC2 6A01                    	push 1
  3970 00001BC4 E924640100              	jmp L_error_incorrect_arity_simple
  3971                                  .L_lambda_simple_arity_check_ok_00d6:
  3972 00001BC9 C8000000                	enter 0, 0
  3973                                  	; preparing a tail-call
  3974                                  	; preparing a non-tail-call
  3975 00001BCD 488B4520                	mov rax, PARAM(0)	; param x
  3976 00001BD1 50                      	push rax
  3977 00001BD2 6A01                    	push 1	; arg count
  3978 00001BD4 488B0425[8F110000]      	mov rax, qword [free_var_56]	; free var cdar
  3979 00001BDC 803805                  	cmp byte [rax], T_undefined
  3980 00001BDF 0F8422630100            	je L_error_fvar_undefined
  3981 00001BE5 803804                  	cmp byte [rax], T_closure
  3982 00001BE8 0F859D630100            	jne L_error_non_closure
  3983 00001BEE FF7001                  	push SOB_CLOSURE_ENV(rax)
  3984 00001BF1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3985 00001BF4 50                      	push rax
  3986 00001BF5 6A01                    	push 1	; arg count
  3987 00001BF7 488B0425[07110000]      	mov rax, qword [free_var_48]	; free var cadr
  3988 00001BFF 803805                  	cmp byte [rax], T_undefined
  3989 00001C02 0F84FF620100            	je L_error_fvar_undefined
  3990 00001C08 803804                  	cmp byte [rax], T_closure
  3991 00001C0B 0F857A630100            	jne L_error_non_closure
  3992 00001C11 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3993 00001C14 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3994 00001C17 FF7500                  	push qword[rbp]
  3995 00001C1A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3996 00001C1D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3997 00001C21 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3998 00001C25 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3999 00001C29 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4000 00001C2C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4001 00001C2F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4002 00001C34 4983C103                	add r9, 3 	 ;for getting to the params
  4003 00001C38 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4004 00001C3C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4005                                  .L_tc_recycle_frame_loop_0127:
  4006 00001C3F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4007 00001C42 7410                    	je .L_tc_recycle_frame_done_0127
  4008 00001C44 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4009 00001C47 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4010 00001C4A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4011 00001C4E 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4012 00001C52 EBEB                    	jmp .L_tc_recycle_frame_loop_0127
  4013                                  .L_tc_recycle_frame_done_0127:
  4014 00001C54 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4015 00001C55 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4016 00001C59 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4017 00001C5C C9                      	leave
  4018 00001C5D C21800                  	ret AND_KILL_FRAME(1)
  4019                                  .L_lambda_simple_end_00d6:	; new closure is in rax
  4020 00001C60 48890425[D4100000]      	mov qword [free_var_45], rax
  4021 00001C68 48B8-                   	mov rax, sob_void
  4021 00001C6A [0000000000000000] 
  4022                                  
  4023 00001C72 4889C7                  	mov rdi, rax
  4024 00001C75 E80F660100              	call print_sexpr_if_not_void
  4025 00001C7A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4026 00001C7F E8B0630100              	call malloc
  4027 00001C84 50                      	push rax
  4028 00001C85 BF00000000              	mov rdi, 8 * 0	; new rib
  4029 00001C8A E8A5630100              	call malloc
  4030 00001C8F 50                      	push rax
  4031 00001C90 BF08000000              	mov rdi, 8 * 1	; extended env
  4032 00001C95 E89A630100              	call malloc
  4033 00001C9A 488B7D10                	mov rdi, ENV
  4034 00001C9E BE00000000              	mov rsi, 0
  4035 00001CA3 BA01000000              	mov rdx, 1
  4036                                  .L_lambda_simple_env_loop_00d7:	; ext_env[i + 1] <-- env[i]
  4037 00001CA8 4883FE00                	cmp rsi, 0
  4038 00001CAC 7410                    	je .L_lambda_simple_env_end_00d7
  4039 00001CAE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4040 00001CB2 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4041 00001CB6 48FFC6                  	inc rsi
  4042 00001CB9 48FFC2                  	inc rdx
  4043 00001CBC EBEA                    	jmp .L_lambda_simple_env_loop_00d7
  4044                                  .L_lambda_simple_env_end_00d7:
  4045 00001CBE 5B                      	pop rbx
  4046 00001CBF BE00000000              	mov rsi, 0
  4047                                  .L_lambda_simple_params_loop_00d7:	; copy params
  4048 00001CC4 4883FE00                	cmp rsi, 0
  4049 00001CC8 740E                    	je .L_lambda_simple_params_end_00d7
  4050 00001CCA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4051 00001CCF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4052 00001CD3 48FFC6                  	inc rsi
  4053 00001CD6 EBEC                    	jmp .L_lambda_simple_params_loop_00d7
  4054                                  .L_lambda_simple_params_end_00d7:
  4055 00001CD8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4056 00001CDB 4889C3                  	mov rbx, rax
  4057 00001CDE 58                      	pop rax
  4058 00001CDF C60004                  	mov byte [rax], T_closure
  4059 00001CE2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4060 00001CE6 48C74009[F31C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d7
  4061 00001CEE E9AA000000              	jmp .L_lambda_simple_end_00d7
  4062                                  .L_lambda_simple_code_00d7:	; lambda-simple body
  4063 00001CF3 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4064 00001CF9 740B                    	je .L_lambda_simple_arity_check_ok_00d7
  4065 00001CFB FF742410                	push qword [rsp + 8 * 2]
  4066 00001CFF 6A01                    	push 1
  4067 00001D01 E9E7620100              	jmp L_error_incorrect_arity_simple
  4068                                  .L_lambda_simple_arity_check_ok_00d7:
  4069 00001D06 C8000000                	enter 0, 0
  4070                                  	; preparing a tail-call
  4071                                  	; preparing a non-tail-call
  4072 00001D0A 488B4520                	mov rax, PARAM(0)	; param x
  4073 00001D0E 50                      	push rax
  4074 00001D0F 6A01                    	push 1	; arg count
  4075 00001D11 488B0425[06120000]      	mov rax, qword [free_var_63]	; free var cddr
  4076 00001D19 803805                  	cmp byte [rax], T_undefined
  4077 00001D1C 0F84E5610100            	je L_error_fvar_undefined
  4078 00001D22 803804                  	cmp byte [rax], T_closure
  4079 00001D25 0F8560620100            	jne L_error_non_closure
  4080 00001D2B FF7001                  	push SOB_CLOSURE_ENV(rax)
  4081 00001D2E FF5009                  	call SOB_CLOSURE_CODE(rax)
  4082 00001D31 50                      	push rax
  4083 00001D32 6A01                    	push 1	; arg count
  4084 00001D34 488B0425[07110000]      	mov rax, qword [free_var_48]	; free var cadr
  4085 00001D3C 803805                  	cmp byte [rax], T_undefined
  4086 00001D3F 0F84C2610100            	je L_error_fvar_undefined
  4087 00001D45 803804                  	cmp byte [rax], T_closure
  4088 00001D48 0F853D620100            	jne L_error_non_closure
  4089 00001D4E FF7001                  	push SOB_CLOSURE_ENV(rax)
  4090 00001D51 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4091 00001D54 FF7500                  	push qword[rbp]
  4092 00001D57 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4093 00001D5A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4094 00001D5E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4095 00001D62 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4096 00001D66 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4097 00001D69 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4098 00001D6C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4099 00001D71 4983C103                	add r9, 3 	 ;for getting to the params
  4100 00001D75 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4101 00001D79 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4102                                  .L_tc_recycle_frame_loop_0128:
  4103 00001D7C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4104 00001D7F 7410                    	je .L_tc_recycle_frame_done_0128
  4105 00001D81 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4106 00001D84 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4107 00001D87 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4108 00001D8B 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4109 00001D8F EBEB                    	jmp .L_tc_recycle_frame_loop_0128
  4110                                  .L_tc_recycle_frame_done_0128:
  4111 00001D91 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4112 00001D92 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4113 00001D96 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4114 00001D99 C9                      	leave
  4115 00001D9A C21800                  	ret AND_KILL_FRAME(1)
  4116                                  .L_lambda_simple_end_00d7:	; new closure is in rax
  4117 00001D9D 48890425[E5100000]      	mov qword [free_var_46], rax
  4118 00001DA5 48B8-                   	mov rax, sob_void
  4118 00001DA7 [0000000000000000] 
  4119                                  
  4120 00001DAF 4889C7                  	mov rdi, rax
  4121 00001DB2 E8D2640100              	call print_sexpr_if_not_void
  4122 00001DB7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4123 00001DBC E873620100              	call malloc
  4124 00001DC1 50                      	push rax
  4125 00001DC2 BF00000000              	mov rdi, 8 * 0	; new rib
  4126 00001DC7 E868620100              	call malloc
  4127 00001DCC 50                      	push rax
  4128 00001DCD BF08000000              	mov rdi, 8 * 1	; extended env
  4129 00001DD2 E85D620100              	call malloc
  4130 00001DD7 488B7D10                	mov rdi, ENV
  4131 00001DDB BE00000000              	mov rsi, 0
  4132 00001DE0 BA01000000              	mov rdx, 1
  4133                                  .L_lambda_simple_env_loop_00d8:	; ext_env[i + 1] <-- env[i]
  4134 00001DE5 4883FE00                	cmp rsi, 0
  4135 00001DE9 7410                    	je .L_lambda_simple_env_end_00d8
  4136 00001DEB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4137 00001DEF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4138 00001DF3 48FFC6                  	inc rsi
  4139 00001DF6 48FFC2                  	inc rdx
  4140 00001DF9 EBEA                    	jmp .L_lambda_simple_env_loop_00d8
  4141                                  .L_lambda_simple_env_end_00d8:
  4142 00001DFB 5B                      	pop rbx
  4143 00001DFC BE00000000              	mov rsi, 0
  4144                                  .L_lambda_simple_params_loop_00d8:	; copy params
  4145 00001E01 4883FE00                	cmp rsi, 0
  4146 00001E05 740E                    	je .L_lambda_simple_params_end_00d8
  4147 00001E07 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4148 00001E0C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4149 00001E10 48FFC6                  	inc rsi
  4150 00001E13 EBEC                    	jmp .L_lambda_simple_params_loop_00d8
  4151                                  .L_lambda_simple_params_end_00d8:
  4152 00001E15 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4153 00001E18 4889C3                  	mov rbx, rax
  4154 00001E1B 58                      	pop rax
  4155 00001E1C C60004                  	mov byte [rax], T_closure
  4156 00001E1F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4157 00001E23 48C74009[301E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d8
  4158 00001E2B E9AA000000              	jmp .L_lambda_simple_end_00d8
  4159                                  .L_lambda_simple_code_00d8:	; lambda-simple body
  4160 00001E30 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4161 00001E36 740B                    	je .L_lambda_simple_arity_check_ok_00d8
  4162 00001E38 FF742410                	push qword [rsp + 8 * 2]
  4163 00001E3C 6A01                    	push 1
  4164 00001E3E E9AA610100              	jmp L_error_incorrect_arity_simple
  4165                                  .L_lambda_simple_arity_check_ok_00d8:
  4166 00001E43 C8000000                	enter 0, 0
  4167                                  	; preparing a tail-call
  4168                                  	; preparing a non-tail-call
  4169 00001E47 488B4520                	mov rax, PARAM(0)	; param x
  4170 00001E4B 50                      	push rax
  4171 00001E4C 6A01                    	push 1	; arg count
  4172 00001E4E 488B0425[90100000]      	mov rax, qword [free_var_41]	; free var caar
  4173 00001E56 803805                  	cmp byte [rax], T_undefined
  4174 00001E59 0F84A8600100            	je L_error_fvar_undefined
  4175 00001E5F 803804                  	cmp byte [rax], T_closure
  4176 00001E62 0F8523610100            	jne L_error_non_closure
  4177 00001E68 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4178 00001E6B FF5009                  	call SOB_CLOSURE_CODE(rax)
  4179 00001E6E 50                      	push rax
  4180 00001E6F 6A01                    	push 1	; arg count
  4181 00001E71 488B0425[8F110000]      	mov rax, qword [free_var_56]	; free var cdar
  4182 00001E79 803805                  	cmp byte [rax], T_undefined
  4183 00001E7C 0F8485600100            	je L_error_fvar_undefined
  4184 00001E82 803804                  	cmp byte [rax], T_closure
  4185 00001E85 0F8500610100            	jne L_error_non_closure
  4186 00001E8B FF7001                  	push SOB_CLOSURE_ENV(rax)
  4187 00001E8E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4188 00001E91 FF7500                  	push qword[rbp]
  4189 00001E94 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4190 00001E97 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4191 00001E9B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4192 00001E9F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4193 00001EA3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4194 00001EA6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4195 00001EA9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4196 00001EAE 4983C103                	add r9, 3 	 ;for getting to the params
  4197 00001EB2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4198 00001EB6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4199                                  .L_tc_recycle_frame_loop_0129:
  4200 00001EB9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4201 00001EBC 7410                    	je .L_tc_recycle_frame_done_0129
  4202 00001EBE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4203 00001EC1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4204 00001EC4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4205 00001EC8 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4206 00001ECC EBEB                    	jmp .L_tc_recycle_frame_loop_0129
  4207                                  .L_tc_recycle_frame_done_0129:
  4208 00001ECE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4209 00001ECF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4210 00001ED3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4211 00001ED6 C9                      	leave
  4212 00001ED7 C21800                  	ret AND_KILL_FRAME(1)
  4213                                  .L_lambda_simple_end_00d8:	; new closure is in rax
  4214 00001EDA 48890425[29110000]      	mov qword [free_var_50], rax
  4215 00001EE2 48B8-                   	mov rax, sob_void
  4215 00001EE4 [0000000000000000] 
  4216                                  
  4217 00001EEC 4889C7                  	mov rdi, rax
  4218 00001EEF E895630100              	call print_sexpr_if_not_void
  4219 00001EF4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4220 00001EF9 E836610100              	call malloc
  4221 00001EFE 50                      	push rax
  4222 00001EFF BF00000000              	mov rdi, 8 * 0	; new rib
  4223 00001F04 E82B610100              	call malloc
  4224 00001F09 50                      	push rax
  4225 00001F0A BF08000000              	mov rdi, 8 * 1	; extended env
  4226 00001F0F E820610100              	call malloc
  4227 00001F14 488B7D10                	mov rdi, ENV
  4228 00001F18 BE00000000              	mov rsi, 0
  4229 00001F1D BA01000000              	mov rdx, 1
  4230                                  .L_lambda_simple_env_loop_00d9:	; ext_env[i + 1] <-- env[i]
  4231 00001F22 4883FE00                	cmp rsi, 0
  4232 00001F26 7410                    	je .L_lambda_simple_env_end_00d9
  4233 00001F28 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4234 00001F2C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4235 00001F30 48FFC6                  	inc rsi
  4236 00001F33 48FFC2                  	inc rdx
  4237 00001F36 EBEA                    	jmp .L_lambda_simple_env_loop_00d9
  4238                                  .L_lambda_simple_env_end_00d9:
  4239 00001F38 5B                      	pop rbx
  4240 00001F39 BE00000000              	mov rsi, 0
  4241                                  .L_lambda_simple_params_loop_00d9:	; copy params
  4242 00001F3E 4883FE00                	cmp rsi, 0
  4243 00001F42 740E                    	je .L_lambda_simple_params_end_00d9
  4244 00001F44 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4245 00001F49 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4246 00001F4D 48FFC6                  	inc rsi
  4247 00001F50 EBEC                    	jmp .L_lambda_simple_params_loop_00d9
  4248                                  .L_lambda_simple_params_end_00d9:
  4249 00001F52 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4250 00001F55 4889C3                  	mov rbx, rax
  4251 00001F58 58                      	pop rax
  4252 00001F59 C60004                  	mov byte [rax], T_closure
  4253 00001F5C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4254 00001F60 48C74009[6D1F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d9
  4255 00001F68 E9AA000000              	jmp .L_lambda_simple_end_00d9
  4256                                  .L_lambda_simple_code_00d9:	; lambda-simple body
  4257 00001F6D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4258 00001F73 740B                    	je .L_lambda_simple_arity_check_ok_00d9
  4259 00001F75 FF742410                	push qword [rsp + 8 * 2]
  4260 00001F79 6A01                    	push 1
  4261 00001F7B E96D600100              	jmp L_error_incorrect_arity_simple
  4262                                  .L_lambda_simple_arity_check_ok_00d9:
  4263 00001F80 C8000000                	enter 0, 0
  4264                                  	; preparing a tail-call
  4265                                  	; preparing a non-tail-call
  4266 00001F84 488B4520                	mov rax, PARAM(0)	; param x
  4267 00001F88 50                      	push rax
  4268 00001F89 6A01                    	push 1	; arg count
  4269 00001F8B 488B0425[07110000]      	mov rax, qword [free_var_48]	; free var cadr
  4270 00001F93 803805                  	cmp byte [rax], T_undefined
  4271 00001F96 0F846B5F0100            	je L_error_fvar_undefined
  4272 00001F9C 803804                  	cmp byte [rax], T_closure
  4273 00001F9F 0F85E65F0100            	jne L_error_non_closure
  4274 00001FA5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4275 00001FA8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4276 00001FAB 50                      	push rax
  4277 00001FAC 6A01                    	push 1	; arg count
  4278 00001FAE 488B0425[8F110000]      	mov rax, qword [free_var_56]	; free var cdar
  4279 00001FB6 803805                  	cmp byte [rax], T_undefined
  4280 00001FB9 0F84485F0100            	je L_error_fvar_undefined
  4281 00001FBF 803804                  	cmp byte [rax], T_closure
  4282 00001FC2 0F85C35F0100            	jne L_error_non_closure
  4283 00001FC8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4284 00001FCB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4285 00001FCE FF7500                  	push qword[rbp]
  4286 00001FD1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4287 00001FD4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4288 00001FD8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4289 00001FDC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4290 00001FE0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4291 00001FE3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4292 00001FE6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4293 00001FEB 4983C103                	add r9, 3 	 ;for getting to the params
  4294 00001FEF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4295 00001FF3 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4296                                  .L_tc_recycle_frame_loop_012a:
  4297 00001FF6 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4298 00001FF9 7410                    	je .L_tc_recycle_frame_done_012a
  4299 00001FFB 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4300 00001FFE 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4301 00002001 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4302 00002005 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4303 00002009 EBEB                    	jmp .L_tc_recycle_frame_loop_012a
  4304                                  .L_tc_recycle_frame_done_012a:
  4305 0000200B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4306 0000200C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4307 00002010 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4308 00002013 C9                      	leave
  4309 00002014 C21800                  	ret AND_KILL_FRAME(1)
  4310                                  .L_lambda_simple_end_00d9:	; new closure is in rax
  4311 00002017 48890425[3A110000]      	mov qword [free_var_51], rax
  4312 0000201F 48B8-                   	mov rax, sob_void
  4312 00002021 [0000000000000000] 
  4313                                  
  4314 00002029 4889C7                  	mov rdi, rax
  4315 0000202C E858620100              	call print_sexpr_if_not_void
  4316 00002031 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4317 00002036 E8F95F0100              	call malloc
  4318 0000203B 50                      	push rax
  4319 0000203C BF00000000              	mov rdi, 8 * 0	; new rib
  4320 00002041 E8EE5F0100              	call malloc
  4321 00002046 50                      	push rax
  4322 00002047 BF08000000              	mov rdi, 8 * 1	; extended env
  4323 0000204C E8E35F0100              	call malloc
  4324 00002051 488B7D10                	mov rdi, ENV
  4325 00002055 BE00000000              	mov rsi, 0
  4326 0000205A BA01000000              	mov rdx, 1
  4327                                  .L_lambda_simple_env_loop_00da:	; ext_env[i + 1] <-- env[i]
  4328 0000205F 4883FE00                	cmp rsi, 0
  4329 00002063 7410                    	je .L_lambda_simple_env_end_00da
  4330 00002065 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4331 00002069 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4332 0000206D 48FFC6                  	inc rsi
  4333 00002070 48FFC2                  	inc rdx
  4334 00002073 EBEA                    	jmp .L_lambda_simple_env_loop_00da
  4335                                  .L_lambda_simple_env_end_00da:
  4336 00002075 5B                      	pop rbx
  4337 00002076 BE00000000              	mov rsi, 0
  4338                                  .L_lambda_simple_params_loop_00da:	; copy params
  4339 0000207B 4883FE00                	cmp rsi, 0
  4340 0000207F 740E                    	je .L_lambda_simple_params_end_00da
  4341 00002081 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4342 00002086 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4343 0000208A 48FFC6                  	inc rsi
  4344 0000208D EBEC                    	jmp .L_lambda_simple_params_loop_00da
  4345                                  .L_lambda_simple_params_end_00da:
  4346 0000208F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4347 00002092 4889C3                  	mov rbx, rax
  4348 00002095 58                      	pop rax
  4349 00002096 C60004                  	mov byte [rax], T_closure
  4350 00002099 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4351 0000209D 48C74009[AA200000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00da
  4352 000020A5 E9AA000000              	jmp .L_lambda_simple_end_00da
  4353                                  .L_lambda_simple_code_00da:	; lambda-simple body
  4354 000020AA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4355 000020B0 740B                    	je .L_lambda_simple_arity_check_ok_00da
  4356 000020B2 FF742410                	push qword [rsp + 8 * 2]
  4357 000020B6 6A01                    	push 1
  4358 000020B8 E9305F0100              	jmp L_error_incorrect_arity_simple
  4359                                  .L_lambda_simple_arity_check_ok_00da:
  4360 000020BD C8000000                	enter 0, 0
  4361                                  	; preparing a tail-call
  4362                                  	; preparing a non-tail-call
  4363 000020C1 488B4520                	mov rax, PARAM(0)	; param x
  4364 000020C5 50                      	push rax
  4365 000020C6 6A01                    	push 1	; arg count
  4366 000020C8 488B0425[8F110000]      	mov rax, qword [free_var_56]	; free var cdar
  4367 000020D0 803805                  	cmp byte [rax], T_undefined
  4368 000020D3 0F842E5E0100            	je L_error_fvar_undefined
  4369 000020D9 803804                  	cmp byte [rax], T_closure
  4370 000020DC 0F85A95E0100            	jne L_error_non_closure
  4371 000020E2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4372 000020E5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4373 000020E8 50                      	push rax
  4374 000020E9 6A01                    	push 1	; arg count
  4375 000020EB 488B0425[8F110000]      	mov rax, qword [free_var_56]	; free var cdar
  4376 000020F3 803805                  	cmp byte [rax], T_undefined
  4377 000020F6 0F840B5E0100            	je L_error_fvar_undefined
  4378 000020FC 803804                  	cmp byte [rax], T_closure
  4379 000020FF 0F85865E0100            	jne L_error_non_closure
  4380 00002105 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4381 00002108 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4382 0000210B FF7500                  	push qword[rbp]
  4383 0000210E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4384 00002111 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4385 00002115 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4386 00002119 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4387 0000211D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4388 00002120 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4389 00002123 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4390 00002128 4983C103                	add r9, 3 	 ;for getting to the params
  4391 0000212C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4392 00002130 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4393                                  .L_tc_recycle_frame_loop_012b:
  4394 00002133 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4395 00002136 7410                    	je .L_tc_recycle_frame_done_012b
  4396 00002138 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4397 0000213B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4398 0000213E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4399 00002142 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4400 00002146 EBEB                    	jmp .L_tc_recycle_frame_loop_012b
  4401                                  .L_tc_recycle_frame_done_012b:
  4402 00002148 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4403 00002149 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4404 0000214D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4405 00002150 C9                      	leave
  4406 00002151 C21800                  	ret AND_KILL_FRAME(1)
  4407                                  .L_lambda_simple_end_00da:	; new closure is in rax
  4408 00002154 48890425[5C110000]      	mov qword [free_var_53], rax
  4409 0000215C 48B8-                   	mov rax, sob_void
  4409 0000215E [0000000000000000] 
  4410                                  
  4411 00002166 4889C7                  	mov rdi, rax
  4412 00002169 E81B610100              	call print_sexpr_if_not_void
  4413 0000216E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4414 00002173 E8BC5E0100              	call malloc
  4415 00002178 50                      	push rax
  4416 00002179 BF00000000              	mov rdi, 8 * 0	; new rib
  4417 0000217E E8B15E0100              	call malloc
  4418 00002183 50                      	push rax
  4419 00002184 BF08000000              	mov rdi, 8 * 1	; extended env
  4420 00002189 E8A65E0100              	call malloc
  4421 0000218E 488B7D10                	mov rdi, ENV
  4422 00002192 BE00000000              	mov rsi, 0
  4423 00002197 BA01000000              	mov rdx, 1
  4424                                  .L_lambda_simple_env_loop_00db:	; ext_env[i + 1] <-- env[i]
  4425 0000219C 4883FE00                	cmp rsi, 0
  4426 000021A0 7410                    	je .L_lambda_simple_env_end_00db
  4427 000021A2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4428 000021A6 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4429 000021AA 48FFC6                  	inc rsi
  4430 000021AD 48FFC2                  	inc rdx
  4431 000021B0 EBEA                    	jmp .L_lambda_simple_env_loop_00db
  4432                                  .L_lambda_simple_env_end_00db:
  4433 000021B2 5B                      	pop rbx
  4434 000021B3 BE00000000              	mov rsi, 0
  4435                                  .L_lambda_simple_params_loop_00db:	; copy params
  4436 000021B8 4883FE00                	cmp rsi, 0
  4437 000021BC 740E                    	je .L_lambda_simple_params_end_00db
  4438 000021BE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4439 000021C3 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4440 000021C7 48FFC6                  	inc rsi
  4441 000021CA EBEC                    	jmp .L_lambda_simple_params_loop_00db
  4442                                  .L_lambda_simple_params_end_00db:
  4443 000021CC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4444 000021CF 4889C3                  	mov rbx, rax
  4445 000021D2 58                      	pop rax
  4446 000021D3 C60004                  	mov byte [rax], T_closure
  4447 000021D6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4448 000021DA 48C74009[E7210000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00db
  4449 000021E2 E9AA000000              	jmp .L_lambda_simple_end_00db
  4450                                  .L_lambda_simple_code_00db:	; lambda-simple body
  4451 000021E7 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4452 000021ED 740B                    	je .L_lambda_simple_arity_check_ok_00db
  4453 000021EF FF742410                	push qword [rsp + 8 * 2]
  4454 000021F3 6A01                    	push 1
  4455 000021F5 E9F35D0100              	jmp L_error_incorrect_arity_simple
  4456                                  .L_lambda_simple_arity_check_ok_00db:
  4457 000021FA C8000000                	enter 0, 0
  4458                                  	; preparing a tail-call
  4459                                  	; preparing a non-tail-call
  4460 000021FE 488B4520                	mov rax, PARAM(0)	; param x
  4461 00002202 50                      	push rax
  4462 00002203 6A01                    	push 1	; arg count
  4463 00002205 488B0425[06120000]      	mov rax, qword [free_var_63]	; free var cddr
  4464 0000220D 803805                  	cmp byte [rax], T_undefined
  4465 00002210 0F84F15C0100            	je L_error_fvar_undefined
  4466 00002216 803804                  	cmp byte [rax], T_closure
  4467 00002219 0F856C5D0100            	jne L_error_non_closure
  4468 0000221F FF7001                  	push SOB_CLOSURE_ENV(rax)
  4469 00002222 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4470 00002225 50                      	push rax
  4471 00002226 6A01                    	push 1	; arg count
  4472 00002228 488B0425[8F110000]      	mov rax, qword [free_var_56]	; free var cdar
  4473 00002230 803805                  	cmp byte [rax], T_undefined
  4474 00002233 0F84CE5C0100            	je L_error_fvar_undefined
  4475 00002239 803804                  	cmp byte [rax], T_closure
  4476 0000223C 0F85495D0100            	jne L_error_non_closure
  4477 00002242 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4478 00002245 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4479 00002248 FF7500                  	push qword[rbp]
  4480 0000224B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4481 0000224E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4482 00002252 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4483 00002256 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4484 0000225A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4485 0000225D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4486 00002260 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4487 00002265 4983C103                	add r9, 3 	 ;for getting to the params
  4488 00002269 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4489 0000226D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4490                                  .L_tc_recycle_frame_loop_012c:
  4491 00002270 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4492 00002273 7410                    	je .L_tc_recycle_frame_done_012c
  4493 00002275 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4494 00002278 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4495 0000227B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4496 0000227F 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4497 00002283 EBEB                    	jmp .L_tc_recycle_frame_loop_012c
  4498                                  .L_tc_recycle_frame_done_012c:
  4499 00002285 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4500 00002286 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4501 0000228A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4502 0000228D C9                      	leave
  4503 0000228E C21800                  	ret AND_KILL_FRAME(1)
  4504                                  .L_lambda_simple_end_00db:	; new closure is in rax
  4505 00002291 48890425[6D110000]      	mov qword [free_var_54], rax
  4506 00002299 48B8-                   	mov rax, sob_void
  4506 0000229B [0000000000000000] 
  4507                                  
  4508 000022A3 4889C7                  	mov rdi, rax
  4509 000022A6 E8DE5F0100              	call print_sexpr_if_not_void
  4510 000022AB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4511 000022B0 E87F5D0100              	call malloc
  4512 000022B5 50                      	push rax
  4513 000022B6 BF00000000              	mov rdi, 8 * 0	; new rib
  4514 000022BB E8745D0100              	call malloc
  4515 000022C0 50                      	push rax
  4516 000022C1 BF08000000              	mov rdi, 8 * 1	; extended env
  4517 000022C6 E8695D0100              	call malloc
  4518 000022CB 488B7D10                	mov rdi, ENV
  4519 000022CF BE00000000              	mov rsi, 0
  4520 000022D4 BA01000000              	mov rdx, 1
  4521                                  .L_lambda_simple_env_loop_00dc:	; ext_env[i + 1] <-- env[i]
  4522 000022D9 4883FE00                	cmp rsi, 0
  4523 000022DD 7410                    	je .L_lambda_simple_env_end_00dc
  4524 000022DF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4525 000022E3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4526 000022E7 48FFC6                  	inc rsi
  4527 000022EA 48FFC2                  	inc rdx
  4528 000022ED EBEA                    	jmp .L_lambda_simple_env_loop_00dc
  4529                                  .L_lambda_simple_env_end_00dc:
  4530 000022EF 5B                      	pop rbx
  4531 000022F0 BE00000000              	mov rsi, 0
  4532                                  .L_lambda_simple_params_loop_00dc:	; copy params
  4533 000022F5 4883FE00                	cmp rsi, 0
  4534 000022F9 740E                    	je .L_lambda_simple_params_end_00dc
  4535 000022FB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4536 00002300 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4537 00002304 48FFC6                  	inc rsi
  4538 00002307 EBEC                    	jmp .L_lambda_simple_params_loop_00dc
  4539                                  .L_lambda_simple_params_end_00dc:
  4540 00002309 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4541 0000230C 4889C3                  	mov rbx, rax
  4542 0000230F 58                      	pop rax
  4543 00002310 C60004                  	mov byte [rax], T_closure
  4544 00002313 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4545 00002317 48C74009[24230000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00dc
  4546 0000231F E9AA000000              	jmp .L_lambda_simple_end_00dc
  4547                                  .L_lambda_simple_code_00dc:	; lambda-simple body
  4548 00002324 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4549 0000232A 740B                    	je .L_lambda_simple_arity_check_ok_00dc
  4550 0000232C FF742410                	push qword [rsp + 8 * 2]
  4551 00002330 6A01                    	push 1
  4552 00002332 E9B65C0100              	jmp L_error_incorrect_arity_simple
  4553                                  .L_lambda_simple_arity_check_ok_00dc:
  4554 00002337 C8000000                	enter 0, 0
  4555                                  	; preparing a tail-call
  4556                                  	; preparing a non-tail-call
  4557 0000233B 488B4520                	mov rax, PARAM(0)	; param x
  4558 0000233F 50                      	push rax
  4559 00002340 6A01                    	push 1	; arg count
  4560 00002342 488B0425[90100000]      	mov rax, qword [free_var_41]	; free var caar
  4561 0000234A 803805                  	cmp byte [rax], T_undefined
  4562 0000234D 0F84B45B0100            	je L_error_fvar_undefined
  4563 00002353 803804                  	cmp byte [rax], T_closure
  4564 00002356 0F852F5C0100            	jne L_error_non_closure
  4565 0000235C FF7001                  	push SOB_CLOSURE_ENV(rax)
  4566 0000235F FF5009                  	call SOB_CLOSURE_CODE(rax)
  4567 00002362 50                      	push rax
  4568 00002363 6A01                    	push 1	; arg count
  4569 00002365 488B0425[06120000]      	mov rax, qword [free_var_63]	; free var cddr
  4570 0000236D 803805                  	cmp byte [rax], T_undefined
  4571 00002370 0F84915B0100            	je L_error_fvar_undefined
  4572 00002376 803804                  	cmp byte [rax], T_closure
  4573 00002379 0F850C5C0100            	jne L_error_non_closure
  4574 0000237F FF7001                  	push SOB_CLOSURE_ENV(rax)
  4575 00002382 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4576 00002385 FF7500                  	push qword[rbp]
  4577 00002388 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4578 0000238B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4579 0000238F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4580 00002393 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4581 00002397 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4582 0000239A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4583 0000239D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4584 000023A2 4983C103                	add r9, 3 	 ;for getting to the params
  4585 000023A6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4586 000023AA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4587                                  .L_tc_recycle_frame_loop_012d:
  4588 000023AD 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4589 000023B0 7410                    	je .L_tc_recycle_frame_done_012d
  4590 000023B2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4591 000023B5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4592 000023B8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4593 000023BC 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4594 000023C0 EBEB                    	jmp .L_tc_recycle_frame_loop_012d
  4595                                  .L_tc_recycle_frame_done_012d:
  4596 000023C2 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4597 000023C3 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4598 000023C7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4599 000023CA C9                      	leave
  4600 000023CB C21800                  	ret AND_KILL_FRAME(1)
  4601                                  .L_lambda_simple_end_00dc:	; new closure is in rax
  4602 000023CE 48890425[A0110000]      	mov qword [free_var_57], rax
  4603 000023D6 48B8-                   	mov rax, sob_void
  4603 000023D8 [0000000000000000] 
  4604                                  
  4605 000023E0 4889C7                  	mov rdi, rax
  4606 000023E3 E8A15E0100              	call print_sexpr_if_not_void
  4607 000023E8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4608 000023ED E8425C0100              	call malloc
  4609 000023F2 50                      	push rax
  4610 000023F3 BF00000000              	mov rdi, 8 * 0	; new rib
  4611 000023F8 E8375C0100              	call malloc
  4612 000023FD 50                      	push rax
  4613 000023FE BF08000000              	mov rdi, 8 * 1	; extended env
  4614 00002403 E82C5C0100              	call malloc
  4615 00002408 488B7D10                	mov rdi, ENV
  4616 0000240C BE00000000              	mov rsi, 0
  4617 00002411 BA01000000              	mov rdx, 1
  4618                                  .L_lambda_simple_env_loop_00dd:	; ext_env[i + 1] <-- env[i]
  4619 00002416 4883FE00                	cmp rsi, 0
  4620 0000241A 7410                    	je .L_lambda_simple_env_end_00dd
  4621 0000241C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4622 00002420 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4623 00002424 48FFC6                  	inc rsi
  4624 00002427 48FFC2                  	inc rdx
  4625 0000242A EBEA                    	jmp .L_lambda_simple_env_loop_00dd
  4626                                  .L_lambda_simple_env_end_00dd:
  4627 0000242C 5B                      	pop rbx
  4628 0000242D BE00000000              	mov rsi, 0
  4629                                  .L_lambda_simple_params_loop_00dd:	; copy params
  4630 00002432 4883FE00                	cmp rsi, 0
  4631 00002436 740E                    	je .L_lambda_simple_params_end_00dd
  4632 00002438 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4633 0000243D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4634 00002441 48FFC6                  	inc rsi
  4635 00002444 EBEC                    	jmp .L_lambda_simple_params_loop_00dd
  4636                                  .L_lambda_simple_params_end_00dd:
  4637 00002446 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4638 00002449 4889C3                  	mov rbx, rax
  4639 0000244C 58                      	pop rax
  4640 0000244D C60004                  	mov byte [rax], T_closure
  4641 00002450 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4642 00002454 48C74009[61240000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00dd
  4643 0000245C E9AA000000              	jmp .L_lambda_simple_end_00dd
  4644                                  .L_lambda_simple_code_00dd:	; lambda-simple body
  4645 00002461 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4646 00002467 740B                    	je .L_lambda_simple_arity_check_ok_00dd
  4647 00002469 FF742410                	push qword [rsp + 8 * 2]
  4648 0000246D 6A01                    	push 1
  4649 0000246F E9795B0100              	jmp L_error_incorrect_arity_simple
  4650                                  .L_lambda_simple_arity_check_ok_00dd:
  4651 00002474 C8000000                	enter 0, 0
  4652                                  	; preparing a tail-call
  4653                                  	; preparing a non-tail-call
  4654 00002478 488B4520                	mov rax, PARAM(0)	; param x
  4655 0000247C 50                      	push rax
  4656 0000247D 6A01                    	push 1	; arg count
  4657 0000247F 488B0425[07110000]      	mov rax, qword [free_var_48]	; free var cadr
  4658 00002487 803805                  	cmp byte [rax], T_undefined
  4659 0000248A 0F84775A0100            	je L_error_fvar_undefined
  4660 00002490 803804                  	cmp byte [rax], T_closure
  4661 00002493 0F85F25A0100            	jne L_error_non_closure
  4662 00002499 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4663 0000249C FF5009                  	call SOB_CLOSURE_CODE(rax)
  4664 0000249F 50                      	push rax
  4665 000024A0 6A01                    	push 1	; arg count
  4666 000024A2 488B0425[06120000]      	mov rax, qword [free_var_63]	; free var cddr
  4667 000024AA 803805                  	cmp byte [rax], T_undefined
  4668 000024AD 0F84545A0100            	je L_error_fvar_undefined
  4669 000024B3 803804                  	cmp byte [rax], T_closure
  4670 000024B6 0F85CF5A0100            	jne L_error_non_closure
  4671 000024BC FF7001                  	push SOB_CLOSURE_ENV(rax)
  4672 000024BF FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4673 000024C2 FF7500                  	push qword[rbp]
  4674 000024C5 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4675 000024C8 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4676 000024CC 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4677 000024D0 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4678 000024D4 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4679 000024D7 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4680 000024DA 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4681 000024DF 4983C103                	add r9, 3 	 ;for getting to the params
  4682 000024E3 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4683 000024E7 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4684                                  .L_tc_recycle_frame_loop_012e:
  4685 000024EA 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4686 000024ED 7410                    	je .L_tc_recycle_frame_done_012e
  4687 000024EF 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4688 000024F2 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4689 000024F5 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4690 000024F9 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4691 000024FD EBEB                    	jmp .L_tc_recycle_frame_loop_012e
  4692                                  .L_tc_recycle_frame_done_012e:
  4693 000024FF 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4694 00002500 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4695 00002504 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4696 00002507 C9                      	leave
  4697 00002508 C21800                  	ret AND_KILL_FRAME(1)
  4698                                  .L_lambda_simple_end_00dd:	; new closure is in rax
  4699 0000250B 48890425[B1110000]      	mov qword [free_var_58], rax
  4700 00002513 48B8-                   	mov rax, sob_void
  4700 00002515 [0000000000000000] 
  4701                                  
  4702 0000251D 4889C7                  	mov rdi, rax
  4703 00002520 E8645D0100              	call print_sexpr_if_not_void
  4704 00002525 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4705 0000252A E8055B0100              	call malloc
  4706 0000252F 50                      	push rax
  4707 00002530 BF00000000              	mov rdi, 8 * 0	; new rib
  4708 00002535 E8FA5A0100              	call malloc
  4709 0000253A 50                      	push rax
  4710 0000253B BF08000000              	mov rdi, 8 * 1	; extended env
  4711 00002540 E8EF5A0100              	call malloc
  4712 00002545 488B7D10                	mov rdi, ENV
  4713 00002549 BE00000000              	mov rsi, 0
  4714 0000254E BA01000000              	mov rdx, 1
  4715                                  .L_lambda_simple_env_loop_00de:	; ext_env[i + 1] <-- env[i]
  4716 00002553 4883FE00                	cmp rsi, 0
  4717 00002557 7410                    	je .L_lambda_simple_env_end_00de
  4718 00002559 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4719 0000255D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4720 00002561 48FFC6                  	inc rsi
  4721 00002564 48FFC2                  	inc rdx
  4722 00002567 EBEA                    	jmp .L_lambda_simple_env_loop_00de
  4723                                  .L_lambda_simple_env_end_00de:
  4724 00002569 5B                      	pop rbx
  4725 0000256A BE00000000              	mov rsi, 0
  4726                                  .L_lambda_simple_params_loop_00de:	; copy params
  4727 0000256F 4883FE00                	cmp rsi, 0
  4728 00002573 740E                    	je .L_lambda_simple_params_end_00de
  4729 00002575 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4730 0000257A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4731 0000257E 48FFC6                  	inc rsi
  4732 00002581 EBEC                    	jmp .L_lambda_simple_params_loop_00de
  4733                                  .L_lambda_simple_params_end_00de:
  4734 00002583 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4735 00002586 4889C3                  	mov rbx, rax
  4736 00002589 58                      	pop rax
  4737 0000258A C60004                  	mov byte [rax], T_closure
  4738 0000258D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4739 00002591 48C74009[9E250000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00de
  4740 00002599 E9AA000000              	jmp .L_lambda_simple_end_00de
  4741                                  .L_lambda_simple_code_00de:	; lambda-simple body
  4742 0000259E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4743 000025A4 740B                    	je .L_lambda_simple_arity_check_ok_00de
  4744 000025A6 FF742410                	push qword [rsp + 8 * 2]
  4745 000025AA 6A01                    	push 1
  4746 000025AC E93C5A0100              	jmp L_error_incorrect_arity_simple
  4747                                  .L_lambda_simple_arity_check_ok_00de:
  4748 000025B1 C8000000                	enter 0, 0
  4749                                  	; preparing a tail-call
  4750                                  	; preparing a non-tail-call
  4751 000025B5 488B4520                	mov rax, PARAM(0)	; param x
  4752 000025B9 50                      	push rax
  4753 000025BA 6A01                    	push 1	; arg count
  4754 000025BC 488B0425[8F110000]      	mov rax, qword [free_var_56]	; free var cdar
  4755 000025C4 803805                  	cmp byte [rax], T_undefined
  4756 000025C7 0F843A590100            	je L_error_fvar_undefined
  4757 000025CD 803804                  	cmp byte [rax], T_closure
  4758 000025D0 0F85B5590100            	jne L_error_non_closure
  4759 000025D6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4760 000025D9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4761 000025DC 50                      	push rax
  4762 000025DD 6A01                    	push 1	; arg count
  4763 000025DF 488B0425[06120000]      	mov rax, qword [free_var_63]	; free var cddr
  4764 000025E7 803805                  	cmp byte [rax], T_undefined
  4765 000025EA 0F8417590100            	je L_error_fvar_undefined
  4766 000025F0 803804                  	cmp byte [rax], T_closure
  4767 000025F3 0F8592590100            	jne L_error_non_closure
  4768 000025F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4769 000025FC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4770 000025FF FF7500                  	push qword[rbp]
  4771 00002602 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4772 00002605 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4773 00002609 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4774 0000260D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4775 00002611 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4776 00002614 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4777 00002617 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4778 0000261C 4983C103                	add r9, 3 	 ;for getting to the params
  4779 00002620 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4780 00002624 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4781                                  .L_tc_recycle_frame_loop_012f:
  4782 00002627 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4783 0000262A 7410                    	je .L_tc_recycle_frame_done_012f
  4784 0000262C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4785 0000262F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4786 00002632 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4787 00002636 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4788 0000263A EBEB                    	jmp .L_tc_recycle_frame_loop_012f
  4789                                  .L_tc_recycle_frame_done_012f:
  4790 0000263C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4791 0000263D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4792 00002641 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4793 00002644 C9                      	leave
  4794 00002645 C21800                  	ret AND_KILL_FRAME(1)
  4795                                  .L_lambda_simple_end_00de:	; new closure is in rax
  4796 00002648 48890425[D3110000]      	mov qword [free_var_60], rax
  4797 00002650 48B8-                   	mov rax, sob_void
  4797 00002652 [0000000000000000] 
  4798                                  
  4799 0000265A 4889C7                  	mov rdi, rax
  4800 0000265D E8275C0100              	call print_sexpr_if_not_void
  4801 00002662 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4802 00002667 E8C8590100              	call malloc
  4803 0000266C 50                      	push rax
  4804 0000266D BF00000000              	mov rdi, 8 * 0	; new rib
  4805 00002672 E8BD590100              	call malloc
  4806 00002677 50                      	push rax
  4807 00002678 BF08000000              	mov rdi, 8 * 1	; extended env
  4808 0000267D E8B2590100              	call malloc
  4809 00002682 488B7D10                	mov rdi, ENV
  4810 00002686 BE00000000              	mov rsi, 0
  4811 0000268B BA01000000              	mov rdx, 1
  4812                                  .L_lambda_simple_env_loop_00df:	; ext_env[i + 1] <-- env[i]
  4813 00002690 4883FE00                	cmp rsi, 0
  4814 00002694 7410                    	je .L_lambda_simple_env_end_00df
  4815 00002696 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4816 0000269A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4817 0000269E 48FFC6                  	inc rsi
  4818 000026A1 48FFC2                  	inc rdx
  4819 000026A4 EBEA                    	jmp .L_lambda_simple_env_loop_00df
  4820                                  .L_lambda_simple_env_end_00df:
  4821 000026A6 5B                      	pop rbx
  4822 000026A7 BE00000000              	mov rsi, 0
  4823                                  .L_lambda_simple_params_loop_00df:	; copy params
  4824 000026AC 4883FE00                	cmp rsi, 0
  4825 000026B0 740E                    	je .L_lambda_simple_params_end_00df
  4826 000026B2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4827 000026B7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4828 000026BB 48FFC6                  	inc rsi
  4829 000026BE EBEC                    	jmp .L_lambda_simple_params_loop_00df
  4830                                  .L_lambda_simple_params_end_00df:
  4831 000026C0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4832 000026C3 4889C3                  	mov rbx, rax
  4833 000026C6 58                      	pop rax
  4834 000026C7 C60004                  	mov byte [rax], T_closure
  4835 000026CA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4836 000026CE 48C74009[DB260000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00df
  4837 000026D6 E9AA000000              	jmp .L_lambda_simple_end_00df
  4838                                  .L_lambda_simple_code_00df:	; lambda-simple body
  4839 000026DB 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4840 000026E1 740B                    	je .L_lambda_simple_arity_check_ok_00df
  4841 000026E3 FF742410                	push qword [rsp + 8 * 2]
  4842 000026E7 6A01                    	push 1
  4843 000026E9 E9FF580100              	jmp L_error_incorrect_arity_simple
  4844                                  .L_lambda_simple_arity_check_ok_00df:
  4845 000026EE C8000000                	enter 0, 0
  4846                                  	; preparing a tail-call
  4847                                  	; preparing a non-tail-call
  4848 000026F2 488B4520                	mov rax, PARAM(0)	; param x
  4849 000026F6 50                      	push rax
  4850 000026F7 6A01                    	push 1	; arg count
  4851 000026F9 488B0425[06120000]      	mov rax, qword [free_var_63]	; free var cddr
  4852 00002701 803805                  	cmp byte [rax], T_undefined
  4853 00002704 0F84FD570100            	je L_error_fvar_undefined
  4854 0000270A 803804                  	cmp byte [rax], T_closure
  4855 0000270D 0F8578580100            	jne L_error_non_closure
  4856 00002713 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4857 00002716 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4858 00002719 50                      	push rax
  4859 0000271A 6A01                    	push 1	; arg count
  4860 0000271C 488B0425[06120000]      	mov rax, qword [free_var_63]	; free var cddr
  4861 00002724 803805                  	cmp byte [rax], T_undefined
  4862 00002727 0F84DA570100            	je L_error_fvar_undefined
  4863 0000272D 803804                  	cmp byte [rax], T_closure
  4864 00002730 0F8555580100            	jne L_error_non_closure
  4865 00002736 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4866 00002739 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4867 0000273C FF7500                  	push qword[rbp]
  4868 0000273F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4869 00002742 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4870 00002746 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4871 0000274A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4872 0000274E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4873 00002751 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4874 00002754 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4875 00002759 4983C103                	add r9, 3 	 ;for getting to the params
  4876 0000275D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4877 00002761 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4878                                  .L_tc_recycle_frame_loop_0130:
  4879 00002764 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4880 00002767 7410                    	je .L_tc_recycle_frame_done_0130
  4881 00002769 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4882 0000276C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4883 0000276F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4884 00002773 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4885 00002777 EBEB                    	jmp .L_tc_recycle_frame_loop_0130
  4886                                  .L_tc_recycle_frame_done_0130:
  4887 00002779 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4888 0000277A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4889 0000277E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4890 00002781 C9                      	leave
  4891 00002782 C21800                  	ret AND_KILL_FRAME(1)
  4892                                  .L_lambda_simple_end_00df:	; new closure is in rax
  4893 00002785 48890425[E4110000]      	mov qword [free_var_61], rax
  4894 0000278D 48B8-                   	mov rax, sob_void
  4894 0000278F [0000000000000000] 
  4895                                  
  4896 00002797 4889C7                  	mov rdi, rax
  4897 0000279A E8EA5A0100              	call print_sexpr_if_not_void
  4898 0000279F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4899 000027A4 E88B580100              	call malloc
  4900 000027A9 50                      	push rax
  4901 000027AA BF00000000              	mov rdi, 8 * 0	; new rib
  4902 000027AF E880580100              	call malloc
  4903 000027B4 50                      	push rax
  4904 000027B5 BF08000000              	mov rdi, 8 * 1	; extended env
  4905 000027BA E875580100              	call malloc
  4906 000027BF 488B7D10                	mov rdi, ENV
  4907 000027C3 BE00000000              	mov rsi, 0
  4908 000027C8 BA01000000              	mov rdx, 1
  4909                                  .L_lambda_simple_env_loop_00e0:	; ext_env[i + 1] <-- env[i]
  4910 000027CD 4883FE00                	cmp rsi, 0
  4911 000027D1 7410                    	je .L_lambda_simple_env_end_00e0
  4912 000027D3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4913 000027D7 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4914 000027DB 48FFC6                  	inc rsi
  4915 000027DE 48FFC2                  	inc rdx
  4916 000027E1 EBEA                    	jmp .L_lambda_simple_env_loop_00e0
  4917                                  .L_lambda_simple_env_end_00e0:
  4918 000027E3 5B                      	pop rbx
  4919 000027E4 BE00000000              	mov rsi, 0
  4920                                  .L_lambda_simple_params_loop_00e0:	; copy params
  4921 000027E9 4883FE00                	cmp rsi, 0
  4922 000027ED 740E                    	je .L_lambda_simple_params_end_00e0
  4923 000027EF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4924 000027F4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4925 000027F8 48FFC6                  	inc rsi
  4926 000027FB EBEC                    	jmp .L_lambda_simple_params_loop_00e0
  4927                                  .L_lambda_simple_params_end_00e0:
  4928 000027FD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4929 00002800 4889C3                  	mov rbx, rax
  4930 00002803 58                      	pop rax
  4931 00002804 C60004                  	mov byte [rax], T_closure
  4932 00002807 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4933 0000280B 48C74009[18280000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e0
  4934 00002813 E91C010000              	jmp .L_lambda_simple_end_00e0
  4935                                  .L_lambda_simple_code_00e0:	; lambda-simple body
  4936 00002818 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4937 0000281E 740B                    	je .L_lambda_simple_arity_check_ok_00e0
  4938 00002820 FF742410                	push qword [rsp + 8 * 2]
  4939 00002824 6A01                    	push 1
  4940 00002826 E9C2570100              	jmp L_error_incorrect_arity_simple
  4941                                  .L_lambda_simple_arity_check_ok_00e0:
  4942 0000282B C8000000                	enter 0, 0
  4943                                  	; preparing a non-tail-call
  4944 0000282F 488B4520                	mov rax, PARAM(0)	; param e
  4945 00002833 50                      	push rax
  4946 00002834 6A01                    	push 1	; arg count
  4947 00002836 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
  4948 0000283E 803805                  	cmp byte [rax], T_undefined
  4949 00002841 0F84C0560100            	je L_error_fvar_undefined
  4950 00002847 803804                  	cmp byte [rax], T_closure
  4951 0000284A 0F853B570100            	jne L_error_non_closure
  4952 00002850 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4953 00002853 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4954 00002856 483D[02000000]          	cmp rax, sob_boolean_false
  4955 0000285C 0F85CE000000            	jne .L_or_end_0012
  4956                                  	; preparing a non-tail-call
  4957 00002862 488B4520                	mov rax, PARAM(0)	; param e
  4958 00002866 50                      	push rax
  4959 00002867 6A01                    	push 1	; arg count
  4960 00002869 488B0425[36150000]      	mov rax, qword [free_var_111]	; free var pair?
  4961 00002871 803805                  	cmp byte [rax], T_undefined
  4962 00002874 0F848D560100            	je L_error_fvar_undefined
  4963 0000287A 803804                  	cmp byte [rax], T_closure
  4964 0000287D 0F8508570100            	jne L_error_non_closure
  4965 00002883 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4966 00002886 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4967 00002889 483D[02000000]          	cmp rax, sob_boolean_false
  4968 0000288F 0F8491000000            	je .L_if_else_0097
  4969                                  	; preparing a tail-call
  4970                                  	; preparing a non-tail-call
  4971 00002895 488B4520                	mov rax, PARAM(0)	; param e
  4972 00002899 50                      	push rax
  4973 0000289A 6A01                    	push 1	; arg count
  4974 0000289C 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  4975 000028A4 803805                  	cmp byte [rax], T_undefined
  4976 000028A7 0F845A560100            	je L_error_fvar_undefined
  4977 000028AD 803804                  	cmp byte [rax], T_closure
  4978 000028B0 0F85D5560100            	jne L_error_non_closure
  4979 000028B6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4980 000028B9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4981 000028BC 50                      	push rax
  4982 000028BD 6A01                    	push 1	; arg count
  4983 000028BF 488B0425[37140000]      	mov rax, qword [free_var_96]	; free var list?
  4984 000028C7 803805                  	cmp byte [rax], T_undefined
  4985 000028CA 0F8437560100            	je L_error_fvar_undefined
  4986 000028D0 803804                  	cmp byte [rax], T_closure
  4987 000028D3 0F85B2560100            	jne L_error_non_closure
  4988 000028D9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4989 000028DC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4990 000028DF FF7500                  	push qword[rbp]
  4991 000028E2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4992 000028E5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4993 000028E9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4994 000028ED 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4995 000028F1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4996 000028F4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4997 000028F7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4998 000028FC 4983C103                	add r9, 3 	 ;for getting to the params
  4999 00002900 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  5000 00002904 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  5001                                  .L_tc_recycle_frame_loop_0131:
  5002 00002907 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  5003 0000290A 7410                    	je .L_tc_recycle_frame_done_0131
  5004 0000290C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  5005 0000290F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  5006 00002912 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  5007 00002916 4983E808                	sub r8, 8	 ;move the top of the stack one down
  5008 0000291A EBEB                    	jmp .L_tc_recycle_frame_loop_0131
  5009                                  .L_tc_recycle_frame_done_0131:
  5010 0000291C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  5011 0000291D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  5012 00002921 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5013 00002924 EB0A                    	jmp .L_if_end_0097
  5014                                  .L_if_else_0097:
  5015 00002926 48B8-                   	mov rax, L_constants + 2
  5015 00002928 [0200000000000000] 
  5016                                  .L_if_end_0097:
  5017                                  .L_or_end_0012:
  5018 00002930 C9                      	leave
  5019 00002931 C21800                  	ret AND_KILL_FRAME(1)
  5020                                  .L_lambda_simple_end_00e0:	; new closure is in rax
  5021 00002934 48890425[37140000]      	mov qword [free_var_96], rax
  5022 0000293C 48B8-                   	mov rax, sob_void
  5022 0000293E [0000000000000000] 
  5023                                  
  5024 00002946 4889C7                  	mov rdi, rax
  5025 00002949 E83B590100              	call print_sexpr_if_not_void
  5026 0000294E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5027 00002953 E8DC560100              	call malloc
  5028 00002958 50                      	push rax
  5029 00002959 BF00000000              	mov rdi, 8 * 0	; new rib
  5030 0000295E E8D1560100              	call malloc
  5031 00002963 50                      	push rax
  5032 00002964 BF08000000              	mov rdi, 8 * 1	; extended env
  5033 00002969 E8C6560100              	call malloc
  5034 0000296E 488B7D10                	mov rdi, ENV
  5035 00002972 BE00000000              	mov rsi, 0
  5036 00002977 BA01000000              	mov rdx, 1
  5037                                  .L_lambda_opt_env_loop_0019:	; ext_env[i + 1] <-- env[i]
  5038 0000297C 4883FE00                	cmp rsi, 0
  5039 00002980 7410                    	je .L_lambda_opt_env_end_0019
  5040 00002982 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5041 00002986 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5042 0000298A 48FFC6                  	inc rsi
  5043 0000298D 48FFC2                  	inc rdx
  5044 00002990 EBEA                    	jmp .L_lambda_opt_env_loop_0019
  5045                                  .L_lambda_opt_env_end_0019:
  5046 00002992 5B                      	pop rbx
  5047 00002993 BE00000000              	mov rsi, 0
  5048                                  .L_lambda_opt_params_loop_0019:	; copy params
  5049 00002998 4883FE00                	cmp rsi, 0
  5050 0000299C 740E                    	je .L_lambda_opt_params_end_0019
  5051 0000299E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5052 000029A3 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5053 000029A7 48FFC6                  	inc rsi
  5054 000029AA EBEC                    	jmp .L_lambda_opt_params_loop_0019
  5055                                  .L_lambda_opt_params_end_0019:
  5056 000029AC 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
  5057 000029AF 4889C3                  	mov rbx, rax
  5058 000029B2 58                      	pop rax
  5059 000029B3 C60004                  	mov byte [rax], T_closure
  5060 000029B6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5061 000029BA 48C74009[C7290000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0019
  5062 000029C2 E919010000              	jmp .L_lambda_opt_end_0019
  5063                                  .L_lambda_opt_code_0019:	; lambda-opt body
  5064 000029C7 48837C241000            	cmp qword [rsp + 8 * 2], 0
  5065 000029CD 740D                    	je .L_lambda_opt_arity_check_exact_0019
  5066 000029CF 7F4C                    	jg .L_lambda_opt_arity_check_more_0019
  5067 000029D1 FF742410                	push qword [rsp + 8 * 2]
  5068 000029D5 6A00                    	push 0
  5069 000029D7 E925560100              	jmp L_error_incorrect_arity_opt
  5070                                  .L_lambda_opt_arity_check_exact_0019:
  5071 000029DC 4883EC08                	sub rsp, 8
  5072 000029E0 488B442408              	mov rax, qword[rsp + 8 *1]
  5073 000029E5 48890424                	mov qword[rsp], rax  
  5074 000029E9 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  5075 000029EE 4889442408              	mov qword[rsp + 8 * 1], rax
  5076 000029F3 B801000000              	mov rax, 1
  5077 000029F8 4889442410              	mov qword[rsp + 8 *2], rax
  5078 000029FD 48B8-                   	mov rax, sob_nil
  5078 000029FF [0100000000000000] 
  5079 00002A07 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  5080 00002A0C C8000000                	enter 0, 0
  5081 00002A10 488B4520                	mov rax, PARAM(0)	; param args
  5082 00002A14 C9                      	leave
  5083 00002A15 C21800                  	ret AND_KILL_FRAME(1)
  5084 00002A18 E9C3000000              	jmp .L_lambda_opt_end_0019	; new closure is in rax
  5085                                  .L_lambda_opt_arity_check_more_0019:
  5086 00002A1D 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  5087 00002A22 49B9-                   	mov r9, sob_nil
  5087 00002A24 [0100000000000000] 
  5088 00002A2C 4889E3                  	mov rbx, rsp 
  5089 00002A2F 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  5090 00002A33 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  5091 00002A36 49C1E003                	shl r8, 3
  5092 00002A3A 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  5093 00002A3D 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  5094                                  .L_lambda_opt_stack_shrink_loop_0019:
  5095 00002A42 4983F800                	cmp r8, 0
  5096 00002A46 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0019
  5097 00002A48 BF11000000              	mov rdi, 1+8+8 ;for pair
  5098 00002A4D E8E2550100              	call malloc;to create the pair in the stack
  5099 00002A52 C60021                  	mov byte [rax], T_pair ; to make it a pair
  5100 00002A55 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
  5101 00002A58 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
  5102 00002A5C 4C894809                 	mov qword[rax+1+8],r9
  5103 00002A60 4989C1                  	mov r9, rax ;for the recursion 
  5104 00002A63 49FFC8                  	dec r8 ;we finished copy another opt param to the list
  5105 00002A66 4883EB08                	sub rbx, 8 ;to get the next param to copy
  5106 00002A6A EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0019
  5107                                  .L_lambda_opt_stack_shrink_loop_exit_0019:
  5108 00002A6C 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
  5109 00002A71 4883E901                	sub rcx, 1
  5110 00002A75 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
  5111 00002A79 4801CC                  	add rsp, rcx ;shrinking the stack
  5112 00002A7C 4889E0                  	mov rax, rsp
  5113 00002A7F 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
  5114 00002A82 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
  5115 00002A86 49FFC8                  	dec r8 ;we start with param 0, not 1 
  5116 00002A89 4883C018                	add rax, 3 * 8;now rax is param 0
  5117 00002A8D 49C1E003                	shl r8, 3;convert to byte
  5118 00002A91 4C01C0                  	add rax, r8;now rax is the top of the stack
  5119 00002A94 4C8908                  	mov qword[rax], r9;puting the list at the top
  5120 00002A97 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
  5121 00002A9B 4889E3                  	mov rbx, rsp 
  5122 00002A9E 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
  5123 00002AA1 41BA00000000            	mov r10, 0;r10 is the not opt params length
  5124 00002AA7 49FFCA                  	dec r10 
  5125 00002AAA 49C1E203                	shl r10, 3;to get bytes
  5126 00002AAE 4883C318                	add rbx, 3*8;rbx is the first param
  5127 00002AB2 4C01D3                  	add rbx, r10; rbx is where the address to copy to
  5128 00002AB5 4889E0                  	mov rax, rsp
  5129 00002AB8 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  5130 00002ABB 48C744241001000000      	mov qword [rsp+2*8], 1
  5131 00002AC4 488B5808                	mov rbx, qword[rax + 8 *1]
  5132 00002AC8 48895C2408              	mov qword [rsp + 1*8] ,rbx
  5133 00002ACD 488B18                  	mov rbx, qword[rax]
  5134 00002AD0 48891C24                	mov qword [rsp], rbx
  5135 00002AD4 C8000000                	enter 0, 0
  5136 00002AD8 488B4520                	mov rax, PARAM(0)	; param args
  5137 00002ADC C9                      	leave
  5138 00002ADD C21800                  	ret AND_KILL_FRAME(1)
  5139                                  .L_lambda_opt_end_0019:	; new closure is in rax
  5140 00002AE0 48890425[F3130000]      	mov qword [free_var_92], rax
  5141 00002AE8 48B8-                   	mov rax, sob_void
  5141 00002AEA [0000000000000000] 
  5142                                  
  5143 00002AF2 4889C7                  	mov rdi, rax
  5144 00002AF5 E88F570100              	call print_sexpr_if_not_void
  5145 00002AFA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5146 00002AFF E830550100              	call malloc
  5147 00002B04 50                      	push rax
  5148 00002B05 BF00000000              	mov rdi, 8 * 0	; new rib
  5149 00002B0A E825550100              	call malloc
  5150 00002B0F 50                      	push rax
  5151 00002B10 BF08000000              	mov rdi, 8 * 1	; extended env
  5152 00002B15 E81A550100              	call malloc
  5153 00002B1A 488B7D10                	mov rdi, ENV
  5154 00002B1E BE00000000              	mov rsi, 0
  5155 00002B23 BA01000000              	mov rdx, 1
  5156                                  .L_lambda_simple_env_loop_00e1:	; ext_env[i + 1] <-- env[i]
  5157 00002B28 4883FE00                	cmp rsi, 0
  5158 00002B2C 7410                    	je .L_lambda_simple_env_end_00e1
  5159 00002B2E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5160 00002B32 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5161 00002B36 48FFC6                  	inc rsi
  5162 00002B39 48FFC2                  	inc rdx
  5163 00002B3C EBEA                    	jmp .L_lambda_simple_env_loop_00e1
  5164                                  .L_lambda_simple_env_end_00e1:
  5165 00002B3E 5B                      	pop rbx
  5166 00002B3F BE00000000              	mov rsi, 0
  5167                                  .L_lambda_simple_params_loop_00e1:	; copy params
  5168 00002B44 4883FE00                	cmp rsi, 0
  5169 00002B48 740E                    	je .L_lambda_simple_params_end_00e1
  5170 00002B4A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5171 00002B4F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5172 00002B53 48FFC6                  	inc rsi
  5173 00002B56 EBEC                    	jmp .L_lambda_simple_params_loop_00e1
  5174                                  .L_lambda_simple_params_end_00e1:
  5175 00002B58 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5176 00002B5B 4889C3                  	mov rbx, rax
  5177 00002B5E 58                      	pop rax
  5178 00002B5F C60004                  	mov byte [rax], T_closure
  5179 00002B62 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5180 00002B66 48C74009[702B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e1
  5181 00002B6E EB3D                    	jmp .L_lambda_simple_end_00e1
  5182                                  .L_lambda_simple_code_00e1:	; lambda-simple body
  5183 00002B70 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5184 00002B76 740B                    	je .L_lambda_simple_arity_check_ok_00e1
  5185 00002B78 FF742410                	push qword [rsp + 8 * 2]
  5186 00002B7C 6A01                    	push 1
  5187 00002B7E E96A540100              	jmp L_error_incorrect_arity_simple
  5188                                  .L_lambda_simple_arity_check_ok_00e1:
  5189 00002B83 C8000000                	enter 0, 0
  5190 00002B87 488B4520                	mov rax, PARAM(0)	; param x
  5191 00002B8B 483D[02000000]          	cmp rax, sob_boolean_false
  5192 00002B91 740C                    	je .L_if_else_0098
  5193 00002B93 48B8-                   	mov rax, L_constants + 2
  5193 00002B95 [0200000000000000] 
  5194 00002B9D EB0A                    	jmp .L_if_end_0098
  5195                                  .L_if_else_0098:
  5196 00002B9F 48B8-                   	mov rax, L_constants + 3
  5196 00002BA1 [0300000000000000] 
  5197                                  .L_if_end_0098:
  5198 00002BA9 C9                      	leave
  5199 00002BAA C21800                  	ret AND_KILL_FRAME(1)
  5200                                  .L_lambda_simple_end_00e1:	; new closure is in rax
  5201 00002BAD 48890425[E1140000]      	mov qword [free_var_106], rax
  5202 00002BB5 48B8-                   	mov rax, sob_void
  5202 00002BB7 [0000000000000000] 
  5203                                  
  5204 00002BBF 4889C7                  	mov rdi, rax
  5205 00002BC2 E8C2560100              	call print_sexpr_if_not_void
  5206 00002BC7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5207 00002BCC E863540100              	call malloc
  5208 00002BD1 50                      	push rax
  5209 00002BD2 BF00000000              	mov rdi, 8 * 0	; new rib
  5210 00002BD7 E858540100              	call malloc
  5211 00002BDC 50                      	push rax
  5212 00002BDD BF08000000              	mov rdi, 8 * 1	; extended env
  5213 00002BE2 E84D540100              	call malloc
  5214 00002BE7 488B7D10                	mov rdi, ENV
  5215 00002BEB BE00000000              	mov rsi, 0
  5216 00002BF0 BA01000000              	mov rdx, 1
  5217                                  .L_lambda_simple_env_loop_00e2:	; ext_env[i + 1] <-- env[i]
  5218 00002BF5 4883FE00                	cmp rsi, 0
  5219 00002BF9 7410                    	je .L_lambda_simple_env_end_00e2
  5220 00002BFB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5221 00002BFF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5222 00002C03 48FFC6                  	inc rsi
  5223 00002C06 48FFC2                  	inc rdx
  5224 00002C09 EBEA                    	jmp .L_lambda_simple_env_loop_00e2
  5225                                  .L_lambda_simple_env_end_00e2:
  5226 00002C0B 5B                      	pop rbx
  5227 00002C0C BE00000000              	mov rsi, 0
  5228                                  .L_lambda_simple_params_loop_00e2:	; copy params
  5229 00002C11 4883FE00                	cmp rsi, 0
  5230 00002C15 740E                    	je .L_lambda_simple_params_end_00e2
  5231 00002C17 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5232 00002C1C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5233 00002C20 48FFC6                  	inc rsi
  5234 00002C23 EBEC                    	jmp .L_lambda_simple_params_loop_00e2
  5235                                  .L_lambda_simple_params_end_00e2:
  5236 00002C25 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5237 00002C28 4889C3                  	mov rbx, rax
  5238 00002C2B 58                      	pop rax
  5239 00002C2C C60004                  	mov byte [rax], T_closure
  5240 00002C2F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5241 00002C33 48C74009[402C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e2
  5242 00002C3B E9B6000000              	jmp .L_lambda_simple_end_00e2
  5243                                  .L_lambda_simple_code_00e2:	; lambda-simple body
  5244 00002C40 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5245 00002C46 740B                    	je .L_lambda_simple_arity_check_ok_00e2
  5246 00002C48 FF742410                	push qword [rsp + 8 * 2]
  5247 00002C4C 6A01                    	push 1
  5248 00002C4E E99A530100              	jmp L_error_incorrect_arity_simple
  5249                                  .L_lambda_simple_arity_check_ok_00e2:
  5250 00002C53 C8000000                	enter 0, 0
  5251                                  	; preparing a non-tail-call
  5252 00002C57 488B4520                	mov rax, PARAM(0)	; param q
  5253 00002C5B 50                      	push rax
  5254 00002C5C 6A01                    	push 1	; arg count
  5255 00002C5E 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
  5256 00002C66 803805                  	cmp byte [rax], T_undefined
  5257 00002C69 0F8498520100            	je L_error_fvar_undefined
  5258 00002C6F 803804                  	cmp byte [rax], T_closure
  5259 00002C72 0F8513530100            	jne L_error_non_closure
  5260 00002C78 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5261 00002C7B FF5009                  	call SOB_CLOSURE_CODE(rax)
  5262 00002C7E 483D[02000000]          	cmp rax, sob_boolean_false
  5263 00002C84 756C                    	jne .L_or_end_0013
  5264                                  	; preparing a tail-call
  5265 00002C86 488B4520                	mov rax, PARAM(0)	; param q
  5266 00002C8A 50                      	push rax
  5267 00002C8B 6A01                    	push 1	; arg count
  5268 00002C8D 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
  5269 00002C95 803805                  	cmp byte [rax], T_undefined
  5270 00002C98 0F8469520100            	je L_error_fvar_undefined
  5271 00002C9E 803804                  	cmp byte [rax], T_closure
  5272 00002CA1 0F85E4520100            	jne L_error_non_closure
  5273 00002CA7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5274 00002CAA FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5275 00002CAD FF7500                  	push qword[rbp]
  5276 00002CB0 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  5277 00002CB3 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  5278 00002CB7 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  5279 00002CBB 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  5280 00002CBF 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  5281 00002CC2 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  5282 00002CC5 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  5283 00002CCA 4983C103                	add r9, 3 	 ;for getting to the params
  5284 00002CCE 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  5285 00002CD2 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  5286                                  .L_tc_recycle_frame_loop_0132:
  5287 00002CD5 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  5288 00002CD8 7410                    	je .L_tc_recycle_frame_done_0132
  5289 00002CDA 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  5290 00002CDD 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  5291 00002CE0 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  5292 00002CE4 4983E808                	sub r8, 8	 ;move the top of the stack one down
  5293 00002CE8 EBEB                    	jmp .L_tc_recycle_frame_loop_0132
  5294                                  .L_tc_recycle_frame_done_0132:
  5295 00002CEA 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  5296 00002CEB 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  5297 00002CEF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5298                                  .L_or_end_0013:
  5299 00002CF2 C9                      	leave
  5300 00002CF3 C21800                  	ret AND_KILL_FRAME(1)
  5301                                  .L_lambda_simple_end_00e2:	; new closure is in rax
  5302 00002CF6 48890425[69150000]      	mov qword [free_var_114], rax
  5303 00002CFE 48B8-                   	mov rax, sob_void
  5303 00002D00 [0000000000000000] 
  5304                                  
  5305 00002D08 4889C7                  	mov rdi, rax
  5306 00002D0B E879550100              	call print_sexpr_if_not_void
  5307                                  	; preparing a non-tail-call
  5308 00002D10 48B8-                   	mov rax, L_constants + 1993
  5308 00002D12 [C907000000000000] 
  5309 00002D1A 50                      	push rax
  5310 00002D1B 6A01                    	push 1	; arg count
  5311 00002D1D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5312 00002D22 E80D530100              	call malloc
  5313 00002D27 50                      	push rax
  5314 00002D28 BF00000000              	mov rdi, 8 * 0	; new rib
  5315 00002D2D E802530100              	call malloc
  5316 00002D32 50                      	push rax
  5317 00002D33 BF08000000              	mov rdi, 8 * 1	; extended env
  5318 00002D38 E8F7520100              	call malloc
  5319 00002D3D 488B7D10                	mov rdi, ENV
  5320 00002D41 BE00000000              	mov rsi, 0
  5321 00002D46 BA01000000              	mov rdx, 1
  5322                                  .L_lambda_simple_env_loop_00e3:	; ext_env[i + 1] <-- env[i]
  5323 00002D4B 4883FE00                	cmp rsi, 0
  5324 00002D4F 7410                    	je .L_lambda_simple_env_end_00e3
  5325 00002D51 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5326 00002D55 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5327 00002D59 48FFC6                  	inc rsi
  5328 00002D5C 48FFC2                  	inc rdx
  5329 00002D5F EBEA                    	jmp .L_lambda_simple_env_loop_00e3
  5330                                  .L_lambda_simple_env_end_00e3:
  5331 00002D61 5B                      	pop rbx
  5332 00002D62 BE00000000              	mov rsi, 0
  5333                                  .L_lambda_simple_params_loop_00e3:	; copy params
  5334 00002D67 4883FE00                	cmp rsi, 0
  5335 00002D6B 740E                    	je .L_lambda_simple_params_end_00e3
  5336 00002D6D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5337 00002D72 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5338 00002D76 48FFC6                  	inc rsi
  5339 00002D79 EBEC                    	jmp .L_lambda_simple_params_loop_00e3
  5340                                  .L_lambda_simple_params_end_00e3:
  5341 00002D7B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5342 00002D7E 4889C3                  	mov rbx, rax
  5343 00002D81 58                      	pop rax
  5344 00002D82 C60004                  	mov byte [rax], T_closure
  5345 00002D85 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5346 00002D89 48C74009[962D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e3
  5347 00002D91 E972040000              	jmp .L_lambda_simple_end_00e3
  5348                                  .L_lambda_simple_code_00e3:	; lambda-simple body
  5349 00002D96 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5350 00002D9C 740B                    	je .L_lambda_simple_arity_check_ok_00e3
  5351 00002D9E FF742410                	push qword [rsp + 8 * 2]
  5352 00002DA2 6A01                    	push 1
  5353 00002DA4 E944520100              	jmp L_error_incorrect_arity_simple
  5354                                  .L_lambda_simple_arity_check_ok_00e3:
  5355 00002DA9 C8000000                	enter 0, 0
  5356 00002DAD BF08000000              	mov rdi, 8*1
  5357 00002DB2 E87D520100              	call malloc
  5358 00002DB7 488B5D20                	mov rbx, PARAM(0)
  5359 00002DBB 488918                  	mov qword[rax], rbx
  5360 00002DBE 48894520                	mov PARAM(0), rax
  5361 00002DC2 48B8-                   	mov rax, sob_void
  5361 00002DC4 [0000000000000000] 
  5362                                  
  5363 00002DCC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5364 00002DD1 E85E520100              	call malloc
  5365 00002DD6 50                      	push rax
  5366 00002DD7 BF08000000              	mov rdi, 8 * 1	; new rib
  5367 00002DDC E853520100              	call malloc
  5368 00002DE1 50                      	push rax
  5369 00002DE2 BF10000000              	mov rdi, 8 * 2	; extended env
  5370 00002DE7 E848520100              	call malloc
  5371 00002DEC 488B7D10                	mov rdi, ENV
  5372 00002DF0 BE00000000              	mov rsi, 0
  5373 00002DF5 BA01000000              	mov rdx, 1
  5374                                  .L_lambda_simple_env_loop_00e4:	; ext_env[i + 1] <-- env[i]
  5375 00002DFA 4883FE01                	cmp rsi, 1
  5376 00002DFE 7410                    	je .L_lambda_simple_env_end_00e4
  5377 00002E00 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5378 00002E04 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5379 00002E08 48FFC6                  	inc rsi
  5380 00002E0B 48FFC2                  	inc rdx
  5381 00002E0E EBEA                    	jmp .L_lambda_simple_env_loop_00e4
  5382                                  .L_lambda_simple_env_end_00e4:
  5383 00002E10 5B                      	pop rbx
  5384 00002E11 BE00000000              	mov rsi, 0
  5385                                  .L_lambda_simple_params_loop_00e4:	; copy params
  5386 00002E16 4883FE01                	cmp rsi, 1
  5387 00002E1A 740E                    	je .L_lambda_simple_params_end_00e4
  5388 00002E1C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5389 00002E21 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5390 00002E25 48FFC6                  	inc rsi
  5391 00002E28 EBEC                    	jmp .L_lambda_simple_params_loop_00e4
  5392                                  .L_lambda_simple_params_end_00e4:
  5393 00002E2A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5394 00002E2D 4889C3                  	mov rbx, rax
  5395 00002E30 58                      	pop rax
  5396 00002E31 C60004                  	mov byte [rax], T_closure
  5397 00002E34 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5398 00002E38 48C74009[452E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e4
  5399 00002E40 E92E010000              	jmp .L_lambda_simple_end_00e4
  5400                                  .L_lambda_simple_code_00e4:	; lambda-simple body
  5401 00002E45 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5402 00002E4B 740B                    	je .L_lambda_simple_arity_check_ok_00e4
  5403 00002E4D FF742410                	push qword [rsp + 8 * 2]
  5404 00002E51 6A02                    	push 2
  5405 00002E53 E995510100              	jmp L_error_incorrect_arity_simple
  5406                                  .L_lambda_simple_arity_check_ok_00e4:
  5407 00002E58 C8000000                	enter 0, 0
  5408                                  	; preparing a non-tail-call
  5409 00002E5C 488B4528                	mov rax, PARAM(1)	; param s
  5410 00002E60 50                      	push rax
  5411 00002E61 6A01                    	push 1	; arg count
  5412 00002E63 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
  5413 00002E6B 803805                  	cmp byte [rax], T_undefined
  5414 00002E6E 0F8493500100            	je L_error_fvar_undefined
  5415 00002E74 803804                  	cmp byte [rax], T_closure
  5416 00002E77 0F850E510100            	jne L_error_non_closure
  5417 00002E7D FF7001                  	push SOB_CLOSURE_ENV(rax)
  5418 00002E80 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5419 00002E83 483D[02000000]          	cmp rax, sob_boolean_false
  5420 00002E89 7409                    	je .L_if_else_0099
  5421 00002E8B 488B4520                	mov rax, PARAM(0)	; param a
  5422 00002E8F E9DB000000              	jmp .L_if_end_0099
  5423                                  .L_if_else_0099:
  5424                                  	; preparing a tail-call
  5425                                  	; preparing a non-tail-call
  5426                                  	; preparing a non-tail-call
  5427 00002E94 488B4528                	mov rax, PARAM(1)	; param s
  5428 00002E98 50                      	push rax
  5429 00002E99 6A01                    	push 1	; arg count
  5430 00002E9B 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  5431 00002EA3 803805                  	cmp byte [rax], T_undefined
  5432 00002EA6 0F845B500100            	je L_error_fvar_undefined
  5433 00002EAC 803804                  	cmp byte [rax], T_closure
  5434 00002EAF 0F85D6500100            	jne L_error_non_closure
  5435 00002EB5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5436 00002EB8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5437 00002EBB 50                      	push rax
  5438                                  	; preparing a non-tail-call
  5439 00002EBC 488B4528                	mov rax, PARAM(1)	; param s
  5440 00002EC0 50                      	push rax
  5441 00002EC1 6A01                    	push 1	; arg count
  5442 00002EC3 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  5443 00002ECB 803805                  	cmp byte [rax], T_undefined
  5444 00002ECE 0F8433500100            	je L_error_fvar_undefined
  5445 00002ED4 803804                  	cmp byte [rax], T_closure
  5446 00002ED7 0F85AE500100            	jne L_error_non_closure
  5447 00002EDD FF7001                  	push SOB_CLOSURE_ENV(rax)
  5448 00002EE0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5449 00002EE3 50                      	push rax
  5450 00002EE4 6A02                    	push 2	; arg count
  5451 00002EE6 488B4510                	mov rax, ENV
  5452 00002EEA 488B00                  	mov rax, qword [rax + 8 * 0]
  5453 00002EED 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  5454 00002EF0 488B00                  	mov rax, qword [rax]
  5455 00002EF3 803804                  	cmp byte [rax], T_closure
  5456 00002EF6 0F858F500100            	jne L_error_non_closure
  5457 00002EFC FF7001                  	push SOB_CLOSURE_ENV(rax)
  5458 00002EFF FF5009                  	call SOB_CLOSURE_CODE(rax)
  5459 00002F02 50                      	push rax
  5460 00002F03 488B4520                	mov rax, PARAM(0)	; param a
  5461 00002F07 50                      	push rax
  5462 00002F08 6A02                    	push 2	; arg count
  5463 00002F0A 488B0425[16130000]      	mov rax, qword [free_var_79]	; free var cons
  5464 00002F12 803805                  	cmp byte [rax], T_undefined
  5465 00002F15 0F84EC4F0100            	je L_error_fvar_undefined
  5466 00002F1B 803804                  	cmp byte [rax], T_closure
  5467 00002F1E 0F8567500100            	jne L_error_non_closure
  5468 00002F24 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5469 00002F27 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5470 00002F2A FF7500                  	push qword[rbp]
  5471 00002F2D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  5472 00002F30 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  5473 00002F34 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  5474 00002F38 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  5475 00002F3C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  5476 00002F3F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  5477 00002F42 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  5478 00002F47 4983C103                	add r9, 3 	 ;for getting to the params
  5479 00002F4B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  5480 00002F4F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  5481                                  .L_tc_recycle_frame_loop_0133:
  5482 00002F52 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  5483 00002F55 7410                    	je .L_tc_recycle_frame_done_0133
  5484 00002F57 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  5485 00002F5A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  5486 00002F5D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  5487 00002F61 4983E808                	sub r8, 8	 ;move the top of the stack one down
  5488 00002F65 EBEB                    	jmp .L_tc_recycle_frame_loop_0133
  5489                                  .L_tc_recycle_frame_done_0133:
  5490 00002F67 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  5491 00002F68 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  5492 00002F6C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5493                                  .L_if_end_0099:
  5494 00002F6F C9                      	leave
  5495 00002F70 C22000                  	ret AND_KILL_FRAME(2)
  5496                                  .L_lambda_simple_end_00e4:	; new closure is in rax
  5497 00002F73 50                      	push rax
  5498 00002F74 488B4520                	mov rax, PARAM(0)	; param run
  5499 00002F78 8F00                    	pop qword [rax]
  5500 00002F7A 48B8-                   	mov rax, sob_void
  5500 00002F7C [0000000000000000] 
  5501                                  
  5502 00002F84 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5503 00002F89 E8A6500100              	call malloc
  5504 00002F8E 50                      	push rax
  5505 00002F8F BF08000000              	mov rdi, 8 * 1	; new rib
  5506 00002F94 E89B500100              	call malloc
  5507 00002F99 50                      	push rax
  5508 00002F9A BF10000000              	mov rdi, 8 * 2	; extended env
  5509 00002F9F E890500100              	call malloc
  5510 00002FA4 488B7D10                	mov rdi, ENV
  5511 00002FA8 BE00000000              	mov rsi, 0
  5512 00002FAD BA01000000              	mov rdx, 1
  5513                                  .L_lambda_opt_env_loop_001a:	; ext_env[i + 1] <-- env[i]
  5514 00002FB2 4883FE01                	cmp rsi, 1
  5515 00002FB6 7410                    	je .L_lambda_opt_env_end_001a
  5516 00002FB8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5517 00002FBC 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5518 00002FC0 48FFC6                  	inc rsi
  5519 00002FC3 48FFC2                  	inc rdx
  5520 00002FC6 EBEA                    	jmp .L_lambda_opt_env_loop_001a
  5521                                  .L_lambda_opt_env_end_001a:
  5522 00002FC8 5B                      	pop rbx
  5523 00002FC9 BE00000000              	mov rsi, 0
  5524                                  .L_lambda_opt_params_loop_001a:	; copy params
  5525 00002FCE 4883FE01                	cmp rsi, 1
  5526 00002FD2 740E                    	je .L_lambda_opt_params_end_001a
  5527 00002FD4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5528 00002FD9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5529 00002FDD 48FFC6                  	inc rsi
  5530 00002FE0 EBEC                    	jmp .L_lambda_opt_params_loop_001a
  5531                                  .L_lambda_opt_params_end_001a:
  5532 00002FE2 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
  5533 00002FE5 4889C3                  	mov rbx, rax
  5534 00002FE8 58                      	pop rax
  5535 00002FE9 C60004                  	mov byte [rax], T_closure
  5536 00002FEC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5537 00002FF0 48C74009[FD2F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_001a
  5538 00002FF8 E907020000              	jmp .L_lambda_opt_end_001a
  5539                                  .L_lambda_opt_code_001a:	; lambda-opt body
  5540 00002FFD 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5541 00003003 7411                    	je .L_lambda_opt_arity_check_exact_001a
  5542 00003005 0F8FBF000000            	jg .L_lambda_opt_arity_check_more_001a
  5543 0000300B FF742410                	push qword [rsp + 8 * 2]
  5544 0000300F 6A01                    	push 1
  5545 00003011 E9EB4F0100              	jmp L_error_incorrect_arity_opt
  5546                                  .L_lambda_opt_arity_check_exact_001a:
  5547 00003016 4883EC08                	sub rsp, 8
  5548 0000301A 488B442408              	mov rax, qword[rsp + 8 *1]
  5549 0000301F 48890424                	mov qword[rsp], rax  
  5550 00003023 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  5551 00003028 4889442408              	mov qword[rsp + 8 * 1], rax
  5552 0000302D B802000000              	mov rax, 2
  5553 00003032 4889442410              	mov qword[rsp + 8 *2], rax
  5554 00003037 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  5555 0000303C 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  5556 00003041 48B8-                   	mov rax, sob_nil
  5556 00003043 [0100000000000000] 
  5557 0000304B 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  5558 00003050 C8000000                	enter 0, 0
  5559                                  	; preparing a tail-call
  5560 00003054 488B4528                	mov rax, PARAM(1)	; param s
  5561 00003058 50                      	push rax
  5562 00003059 488B4520                	mov rax, PARAM(0)	; param a
  5563 0000305D 50                      	push rax
  5564 0000305E 6A02                    	push 2	; arg count
  5565 00003060 488B4510                	mov rax, ENV
  5566 00003064 488B00                  	mov rax, qword [rax + 8 * 0]
  5567 00003067 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  5568 0000306A 488B00                  	mov rax, qword [rax]
  5569 0000306D 803804                  	cmp byte [rax], T_closure
  5570 00003070 0F85154F0100            	jne L_error_non_closure
  5571 00003076 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5572 00003079 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5573 0000307C FF7500                  	push qword[rbp]
  5574 0000307F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  5575 00003082 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  5576 00003086 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  5577 0000308A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  5578 0000308E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  5579 00003091 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  5580 00003094 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  5581 00003099 4983C103                	add r9, 3 	 ;for getting to the params
  5582 0000309D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  5583 000030A1 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  5584                                  .L_tc_recycle_frame_loop_0135:
  5585 000030A4 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  5586 000030A7 7410                    	je .L_tc_recycle_frame_done_0135
  5587 000030A9 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  5588 000030AC 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  5589 000030AF 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  5590 000030B3 4983E808                	sub r8, 8	 ;move the top of the stack one down
  5591 000030B7 EBEB                    	jmp .L_tc_recycle_frame_loop_0135
  5592                                  .L_tc_recycle_frame_done_0135:
  5593 000030B9 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  5594 000030BA 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  5595 000030BE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5596 000030C1 C9                      	leave
  5597 000030C2 C22000                  	ret AND_KILL_FRAME(2)
  5598 000030C5 E93A010000              	jmp .L_lambda_opt_end_001a	; new closure is in rax
  5599                                  .L_lambda_opt_arity_check_more_001a:
  5600 000030CA 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  5601 000030CF 49B9-                   	mov r9, sob_nil
  5601 000030D1 [0100000000000000] 
  5602 000030D9 4889E3                  	mov rbx, rsp 
  5603 000030DC 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  5604 000030E0 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  5605 000030E3 49C1E003                	shl r8, 3
  5606 000030E7 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  5607 000030EA 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  5608                                  .L_lambda_opt_stack_shrink_loop_001a:
  5609 000030EF 4983F801                	cmp r8, 1
  5610 000030F3 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_001a
  5611 000030F5 BF11000000              	mov rdi, 1+8+8 ;for pair
  5612 000030FA E8354F0100              	call malloc;to create the pair in the stack
  5613 000030FF C60021                  	mov byte [rax], T_pair ; to make it a pair
  5614 00003102 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
  5615 00003105 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
  5616 00003109 4C894809                 	mov qword[rax+1+8],r9
  5617 0000310D 4989C1                  	mov r9, rax ;for the recursion 
  5618 00003110 49FFC8                  	dec r8 ;we finished copy another opt param to the list
  5619 00003113 4883EB08                	sub rbx, 8 ;to get the next param to copy
  5620 00003117 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_001a
  5621                                  .L_lambda_opt_stack_shrink_loop_exit_001a:
  5622 00003119 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
  5623 0000311E 4883E902                	sub rcx, 2
  5624 00003122 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
  5625 00003126 4801CC                  	add rsp, rcx ;shrinking the stack
  5626 00003129 4889E0                  	mov rax, rsp
  5627 0000312C 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
  5628 0000312F 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
  5629 00003133 49FFC8                  	dec r8 ;we start with param 0, not 1 
  5630 00003136 4883C018                	add rax, 3 * 8;now rax is param 0
  5631 0000313A 49C1E003                	shl r8, 3;convert to byte
  5632 0000313E 4C01C0                  	add rax, r8;now rax is the top of the stack
  5633 00003141 4C8908                  	mov qword[rax], r9;puting the list at the top
  5634 00003144 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
  5635 00003148 4889E3                  	mov rbx, rsp 
  5636 0000314B 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
  5637 0000314E 41BA01000000            	mov r10, 1;r10 is the not opt params length
  5638 00003154 49FFCA                  	dec r10 
  5639 00003157 49C1E203                	shl r10, 3;to get bytes
  5640 0000315B 4883C318                	add rbx, 3*8;rbx is the first param
  5641 0000315F 4C01D3                  	add rbx, r10; rbx is where the address to copy to
  5642 00003162 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  5643 00003165 4C8900                  	mov qword[rax], r8
  5644 00003168 4883E808                	sub rax, 8
  5645 0000316C 4883EB08                	sub rbx, 8
  5646 00003170 4889E0                  	mov rax, rsp
  5647 00003173 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  5648 00003176 48C744241002000000      	mov qword [rsp+2*8], 2
  5649 0000317F 488B5808                	mov rbx, qword[rax + 8 *1]
  5650 00003183 48895C2408              	mov qword [rsp + 1*8] ,rbx
  5651 00003188 488B18                  	mov rbx, qword[rax]
  5652 0000318B 48891C24                	mov qword [rsp], rbx
  5653 0000318F C8000000                	enter 0, 0
  5654                                  	; preparing a tail-call
  5655 00003193 488B4528                	mov rax, PARAM(1)	; param s
  5656 00003197 50                      	push rax
  5657 00003198 488B4520                	mov rax, PARAM(0)	; param a
  5658 0000319C 50                      	push rax
  5659 0000319D 6A02                    	push 2	; arg count
  5660 0000319F 488B4510                	mov rax, ENV
  5661 000031A3 488B00                  	mov rax, qword [rax + 8 * 0]
  5662 000031A6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  5663 000031A9 488B00                  	mov rax, qword [rax]
  5664 000031AC 803804                  	cmp byte [rax], T_closure
  5665 000031AF 0F85D64D0100            	jne L_error_non_closure
  5666 000031B5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5667 000031B8 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5668 000031BB FF7500                  	push qword[rbp]
  5669 000031BE 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  5670 000031C1 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  5671 000031C5 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  5672 000031C9 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  5673 000031CD 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  5674 000031D0 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  5675 000031D3 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  5676 000031D8 4983C103                	add r9, 3 	 ;for getting to the params
  5677 000031DC 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  5678 000031E0 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  5679                                  .L_tc_recycle_frame_loop_0134:
  5680 000031E3 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  5681 000031E6 7410                    	je .L_tc_recycle_frame_done_0134
  5682 000031E8 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  5683 000031EB 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  5684 000031EE 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  5685 000031F2 4983E808                	sub r8, 8	 ;move the top of the stack one down
  5686 000031F6 EBEB                    	jmp .L_tc_recycle_frame_loop_0134
  5687                                  .L_tc_recycle_frame_done_0134:
  5688 000031F8 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  5689 000031F9 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  5690 000031FD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5691 00003200 C9                      	leave
  5692 00003201 C22000                  	ret AND_KILL_FRAME(2)
  5693                                  .L_lambda_opt_end_001a:	; new closure is in rax
  5694 00003204 C9                      	leave
  5695 00003205 C21800                  	ret AND_KILL_FRAME(1)
  5696                                  .L_lambda_simple_end_00e3:	; new closure is in rax
  5697 00003208 803804                  	cmp byte [rax], T_closure
  5698 0000320B 0F857A4D0100            	jne L_error_non_closure
  5699 00003211 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5700 00003214 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5701 00003217 48890425[04140000]      	mov qword [free_var_93], rax
  5702 0000321F 48B8-                   	mov rax, sob_void
  5702 00003221 [0000000000000000] 
  5703                                  
  5704 00003229 4889C7                  	mov rdi, rax
  5705 0000322C E858500100              	call print_sexpr_if_not_void
  5706                                  	; preparing a non-tail-call
  5707 00003231 48B8-                   	mov rax, L_constants + 1993
  5707 00003233 [C907000000000000] 
  5708 0000323B 50                      	push rax
  5709 0000323C 6A01                    	push 1	; arg count
  5710 0000323E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5711 00003243 E8EC4D0100              	call malloc
  5712 00003248 50                      	push rax
  5713 00003249 BF00000000              	mov rdi, 8 * 0	; new rib
  5714 0000324E E8E14D0100              	call malloc
  5715 00003253 50                      	push rax
  5716 00003254 BF08000000              	mov rdi, 8 * 1	; extended env
  5717 00003259 E8D64D0100              	call malloc
  5718 0000325E 488B7D10                	mov rdi, ENV
  5719 00003262 BE00000000              	mov rsi, 0
  5720 00003267 BA01000000              	mov rdx, 1
  5721                                  .L_lambda_simple_env_loop_00e5:	; ext_env[i + 1] <-- env[i]
  5722 0000326C 4883FE00                	cmp rsi, 0
  5723 00003270 7410                    	je .L_lambda_simple_env_end_00e5
  5724 00003272 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5725 00003276 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5726 0000327A 48FFC6                  	inc rsi
  5727 0000327D 48FFC2                  	inc rdx
  5728 00003280 EBEA                    	jmp .L_lambda_simple_env_loop_00e5
  5729                                  .L_lambda_simple_env_end_00e5:
  5730 00003282 5B                      	pop rbx
  5731 00003283 BE00000000              	mov rsi, 0
  5732                                  .L_lambda_simple_params_loop_00e5:	; copy params
  5733 00003288 4883FE00                	cmp rsi, 0
  5734 0000328C 740E                    	je .L_lambda_simple_params_end_00e5
  5735 0000328E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5736 00003293 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5737 00003297 48FFC6                  	inc rsi
  5738 0000329A EBEC                    	jmp .L_lambda_simple_params_loop_00e5
  5739                                  .L_lambda_simple_params_end_00e5:
  5740 0000329C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5741 0000329F 4889C3                  	mov rbx, rax
  5742 000032A2 58                      	pop rax
  5743 000032A3 C60004                  	mov byte [rax], T_closure
  5744 000032A6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5745 000032AA 48C74009[B7320000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e5
  5746 000032B2 E94F050000              	jmp .L_lambda_simple_end_00e5
  5747                                  .L_lambda_simple_code_00e5:	; lambda-simple body
  5748 000032B7 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5749 000032BD 740B                    	je .L_lambda_simple_arity_check_ok_00e5
  5750 000032BF FF742410                	push qword [rsp + 8 * 2]
  5751 000032C3 6A01                    	push 1
  5752 000032C5 E9234D0100              	jmp L_error_incorrect_arity_simple
  5753                                  .L_lambda_simple_arity_check_ok_00e5:
  5754 000032CA C8000000                	enter 0, 0
  5755 000032CE BF08000000              	mov rdi, 8*1
  5756 000032D3 E85C4D0100              	call malloc
  5757 000032D8 488B5D20                	mov rbx, PARAM(0)
  5758 000032DC 488918                  	mov qword[rax], rbx
  5759 000032DF 48894520                	mov PARAM(0), rax
  5760 000032E3 48B8-                   	mov rax, sob_void
  5760 000032E5 [0000000000000000] 
  5761                                  
  5762 000032ED BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5763 000032F2 E83D4D0100              	call malloc
  5764 000032F7 50                      	push rax
  5765 000032F8 BF08000000              	mov rdi, 8 * 1	; new rib
  5766 000032FD E8324D0100              	call malloc
  5767 00003302 50                      	push rax
  5768 00003303 BF10000000              	mov rdi, 8 * 2	; extended env
  5769 00003308 E8274D0100              	call malloc
  5770 0000330D 488B7D10                	mov rdi, ENV
  5771 00003311 BE00000000              	mov rsi, 0
  5772 00003316 BA01000000              	mov rdx, 1
  5773                                  .L_lambda_simple_env_loop_00e6:	; ext_env[i + 1] <-- env[i]
  5774 0000331B 4883FE01                	cmp rsi, 1
  5775 0000331F 7410                    	je .L_lambda_simple_env_end_00e6
  5776 00003321 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5777 00003325 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5778 00003329 48FFC6                  	inc rsi
  5779 0000332C 48FFC2                  	inc rdx
  5780 0000332F EBEA                    	jmp .L_lambda_simple_env_loop_00e6
  5781                                  .L_lambda_simple_env_end_00e6:
  5782 00003331 5B                      	pop rbx
  5783 00003332 BE00000000              	mov rsi, 0
  5784                                  .L_lambda_simple_params_loop_00e6:	; copy params
  5785 00003337 4883FE01                	cmp rsi, 1
  5786 0000333B 740E                    	je .L_lambda_simple_params_end_00e6
  5787 0000333D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5788 00003342 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5789 00003346 48FFC6                  	inc rsi
  5790 00003349 EBEC                    	jmp .L_lambda_simple_params_loop_00e6
  5791                                  .L_lambda_simple_params_end_00e6:
  5792 0000334B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5793 0000334E 4889C3                  	mov rbx, rax
  5794 00003351 58                      	pop rax
  5795 00003352 C60004                  	mov byte [rax], T_closure
  5796 00003355 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5797 00003359 48C74009[66330000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e6
  5798 00003361 E92F010000              	jmp .L_lambda_simple_end_00e6
  5799                                  .L_lambda_simple_code_00e6:	; lambda-simple body
  5800 00003366 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5801 0000336C 740B                    	je .L_lambda_simple_arity_check_ok_00e6
  5802 0000336E FF742410                	push qword [rsp + 8 * 2]
  5803 00003372 6A02                    	push 2
  5804 00003374 E9744C0100              	jmp L_error_incorrect_arity_simple
  5805                                  .L_lambda_simple_arity_check_ok_00e6:
  5806 00003379 C8000000                	enter 0, 0
  5807                                  	; preparing a non-tail-call
  5808 0000337D 488B4528                	mov rax, PARAM(1)	; param s
  5809 00003381 50                      	push rax
  5810 00003382 6A01                    	push 1	; arg count
  5811 00003384 488B0425[36150000]      	mov rax, qword [free_var_111]	; free var pair?
  5812 0000338C 803805                  	cmp byte [rax], T_undefined
  5813 0000338F 0F84724B0100            	je L_error_fvar_undefined
  5814 00003395 803804                  	cmp byte [rax], T_closure
  5815 00003398 0F85ED4B0100            	jne L_error_non_closure
  5816 0000339E FF7001                  	push SOB_CLOSURE_ENV(rax)
  5817 000033A1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5818 000033A4 483D[02000000]          	cmp rax, sob_boolean_false
  5819 000033AA 0F84DD000000            	je .L_if_else_009a
  5820                                  	; preparing a tail-call
  5821                                  	; preparing a non-tail-call
  5822                                  	; preparing a non-tail-call
  5823 000033B0 488B4528                	mov rax, PARAM(1)	; param s
  5824 000033B4 50                      	push rax
  5825 000033B5 6A01                    	push 1	; arg count
  5826 000033B7 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  5827 000033BF 803805                  	cmp byte [rax], T_undefined
  5828 000033C2 0F843F4B0100            	je L_error_fvar_undefined
  5829 000033C8 803804                  	cmp byte [rax], T_closure
  5830 000033CB 0F85BA4B0100            	jne L_error_non_closure
  5831 000033D1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5832 000033D4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5833 000033D7 50                      	push rax
  5834                                  	; preparing a non-tail-call
  5835 000033D8 488B4528                	mov rax, PARAM(1)	; param s
  5836 000033DC 50                      	push rax
  5837 000033DD 6A01                    	push 1	; arg count
  5838 000033DF 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  5839 000033E7 803805                  	cmp byte [rax], T_undefined
  5840 000033EA 0F84174B0100            	je L_error_fvar_undefined
  5841 000033F0 803804                  	cmp byte [rax], T_closure
  5842 000033F3 0F85924B0100            	jne L_error_non_closure
  5843 000033F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5844 000033FC FF5009                  	call SOB_CLOSURE_CODE(rax)
  5845 000033FF 50                      	push rax
  5846 00003400 6A02                    	push 2	; arg count
  5847 00003402 488B4510                	mov rax, ENV
  5848 00003406 488B00                  	mov rax, qword [rax + 8 * 0]
  5849 00003409 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  5850 0000340C 488B00                  	mov rax, qword [rax]
  5851 0000340F 803804                  	cmp byte [rax], T_closure
  5852 00003412 0F85734B0100            	jne L_error_non_closure
  5853 00003418 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5854 0000341B FF5009                  	call SOB_CLOSURE_CODE(rax)
  5855 0000341E 50                      	push rax
  5856 0000341F 488B4520                	mov rax, PARAM(0)	; param a
  5857 00003423 50                      	push rax
  5858 00003424 6A02                    	push 2	; arg count
  5859 00003426 488B0425[16130000]      	mov rax, qword [free_var_79]	; free var cons
  5860 0000342E 803805                  	cmp byte [rax], T_undefined
  5861 00003431 0F84D04A0100            	je L_error_fvar_undefined
  5862 00003437 803804                  	cmp byte [rax], T_closure
  5863 0000343A 0F854B4B0100            	jne L_error_non_closure
  5864 00003440 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5865 00003443 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5866 00003446 FF7500                  	push qword[rbp]
  5867 00003449 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  5868 0000344C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  5869 00003450 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  5870 00003454 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  5871 00003458 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  5872 0000345B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  5873 0000345E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  5874 00003463 4983C103                	add r9, 3 	 ;for getting to the params
  5875 00003467 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  5876 0000346B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  5877                                  .L_tc_recycle_frame_loop_0136:
  5878 0000346E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  5879 00003471 7410                    	je .L_tc_recycle_frame_done_0136
  5880 00003473 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  5881 00003476 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  5882 00003479 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  5883 0000347D 4983E808                	sub r8, 8	 ;move the top of the stack one down
  5884 00003481 EBEB                    	jmp .L_tc_recycle_frame_loop_0136
  5885                                  .L_tc_recycle_frame_done_0136:
  5886 00003483 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  5887 00003484 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  5888 00003488 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5889 0000348B EB04                    	jmp .L_if_end_009a
  5890                                  .L_if_else_009a:
  5891 0000348D 488B4520                	mov rax, PARAM(0)	; param a
  5892                                  .L_if_end_009a:
  5893 00003491 C9                      	leave
  5894 00003492 C22000                  	ret AND_KILL_FRAME(2)
  5895                                  .L_lambda_simple_end_00e6:	; new closure is in rax
  5896 00003495 50                      	push rax
  5897 00003496 488B4520                	mov rax, PARAM(0)	; param run
  5898 0000349A 8F00                    	pop qword [rax]
  5899 0000349C 48B8-                   	mov rax, sob_void
  5899 0000349E [0000000000000000] 
  5900                                  
  5901 000034A6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5902 000034AB E8844B0100              	call malloc
  5903 000034B0 50                      	push rax
  5904 000034B1 BF08000000              	mov rdi, 8 * 1	; new rib
  5905 000034B6 E8794B0100              	call malloc
  5906 000034BB 50                      	push rax
  5907 000034BC BF10000000              	mov rdi, 8 * 2	; extended env
  5908 000034C1 E86E4B0100              	call malloc
  5909 000034C6 488B7D10                	mov rdi, ENV
  5910 000034CA BE00000000              	mov rsi, 0
  5911 000034CF BA01000000              	mov rdx, 1
  5912                                  .L_lambda_opt_env_loop_001b:	; ext_env[i + 1] <-- env[i]
  5913 000034D4 4883FE01                	cmp rsi, 1
  5914 000034D8 7410                    	je .L_lambda_opt_env_end_001b
  5915 000034DA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5916 000034DE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5917 000034E2 48FFC6                  	inc rsi
  5918 000034E5 48FFC2                  	inc rdx
  5919 000034E8 EBEA                    	jmp .L_lambda_opt_env_loop_001b
  5920                                  .L_lambda_opt_env_end_001b:
  5921 000034EA 5B                      	pop rbx
  5922 000034EB BE00000000              	mov rsi, 0
  5923                                  .L_lambda_opt_params_loop_001b:	; copy params
  5924 000034F0 4883FE01                	cmp rsi, 1
  5925 000034F4 740E                    	je .L_lambda_opt_params_end_001b
  5926 000034F6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5927 000034FB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5928 000034FF 48FFC6                  	inc rsi
  5929 00003502 EBEC                    	jmp .L_lambda_opt_params_loop_001b
  5930                                  .L_lambda_opt_params_end_001b:
  5931 00003504 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
  5932 00003507 4889C3                  	mov rbx, rax
  5933 0000350A 58                      	pop rax
  5934 0000350B C60004                  	mov byte [rax], T_closure
  5935 0000350E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5936 00003512 48C74009[1F350000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_001b
  5937 0000351A E9E3020000              	jmp .L_lambda_opt_end_001b
  5938                                  .L_lambda_opt_code_001b:	; lambda-opt body
  5939 0000351F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5940 00003525 7411                    	je .L_lambda_opt_arity_check_exact_001b
  5941 00003527 0F8F2D010000            	jg .L_lambda_opt_arity_check_more_001b
  5942 0000352D FF742410                	push qword [rsp + 8 * 2]
  5943 00003531 6A01                    	push 1
  5944 00003533 E9C94A0100              	jmp L_error_incorrect_arity_opt
  5945                                  .L_lambda_opt_arity_check_exact_001b:
  5946 00003538 4883EC08                	sub rsp, 8
  5947 0000353C 488B442408              	mov rax, qword[rsp + 8 *1]
  5948 00003541 48890424                	mov qword[rsp], rax  
  5949 00003545 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  5950 0000354A 4889442408              	mov qword[rsp + 8 * 1], rax
  5951 0000354F B802000000              	mov rax, 2
  5952 00003554 4889442410              	mov qword[rsp + 8 *2], rax
  5953 00003559 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  5954 0000355E 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  5955 00003563 48B8-                   	mov rax, sob_nil
  5955 00003565 [0100000000000000] 
  5956 0000356D 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  5957 00003572 C8000000                	enter 0, 0
  5958                                  	; preparing a tail-call
  5959                                  	; preparing a non-tail-call
  5960                                  	; preparing a non-tail-call
  5961 00003576 488B4528                	mov rax, PARAM(1)	; param s
  5962 0000357A 50                      	push rax
  5963 0000357B 6A01                    	push 1	; arg count
  5964 0000357D 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  5965 00003585 803805                  	cmp byte [rax], T_undefined
  5966 00003588 0F8479490100            	je L_error_fvar_undefined
  5967 0000358E 803804                  	cmp byte [rax], T_closure
  5968 00003591 0F85F4490100            	jne L_error_non_closure
  5969 00003597 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5970 0000359A FF5009                  	call SOB_CLOSURE_CODE(rax)
  5971 0000359D 50                      	push rax
  5972                                  	; preparing a non-tail-call
  5973 0000359E 488B4528                	mov rax, PARAM(1)	; param s
  5974 000035A2 50                      	push rax
  5975 000035A3 6A01                    	push 1	; arg count
  5976 000035A5 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  5977 000035AD 803805                  	cmp byte [rax], T_undefined
  5978 000035B0 0F8451490100            	je L_error_fvar_undefined
  5979 000035B6 803804                  	cmp byte [rax], T_closure
  5980 000035B9 0F85CC490100            	jne L_error_non_closure
  5981 000035BF FF7001                  	push SOB_CLOSURE_ENV(rax)
  5982 000035C2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5983 000035C5 50                      	push rax
  5984 000035C6 6A02                    	push 2	; arg count
  5985 000035C8 488B4510                	mov rax, ENV
  5986 000035CC 488B00                  	mov rax, qword [rax + 8 * 0]
  5987 000035CF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  5988 000035D2 488B00                  	mov rax, qword [rax]
  5989 000035D5 803804                  	cmp byte [rax], T_closure
  5990 000035D8 0F85AD490100            	jne L_error_non_closure
  5991 000035DE FF7001                  	push SOB_CLOSURE_ENV(rax)
  5992 000035E1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5993 000035E4 50                      	push rax
  5994 000035E5 488B4520                	mov rax, PARAM(0)	; param f
  5995 000035E9 50                      	push rax
  5996 000035EA 6A02                    	push 2	; arg count
  5997 000035EC 488B0425[A30E0000]      	mov rax, qword [free_var_12]	; free var __bin-apply
  5998 000035F4 803805                  	cmp byte [rax], T_undefined
  5999 000035F7 0F840A490100            	je L_error_fvar_undefined
  6000 000035FD 803804                  	cmp byte [rax], T_closure
  6001 00003600 0F8585490100            	jne L_error_non_closure
  6002 00003606 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6003 00003609 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6004 0000360C FF7500                  	push qword[rbp]
  6005 0000360F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6006 00003612 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6007 00003616 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6008 0000361A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6009 0000361E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6010 00003621 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6011 00003624 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6012 00003629 4983C103                	add r9, 3 	 ;for getting to the params
  6013 0000362D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6014 00003631 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6015                                  .L_tc_recycle_frame_loop_0138:
  6016 00003634 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6017 00003637 7410                    	je .L_tc_recycle_frame_done_0138
  6018 00003639 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6019 0000363C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6020 0000363F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6021 00003643 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6022 00003647 EBEB                    	jmp .L_tc_recycle_frame_loop_0138
  6023                                  .L_tc_recycle_frame_done_0138:
  6024 00003649 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6025 0000364A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6026 0000364E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6027 00003651 C9                      	leave
  6028 00003652 C22000                  	ret AND_KILL_FRAME(2)
  6029 00003655 E9A8010000              	jmp .L_lambda_opt_end_001b	; new closure is in rax
  6030                                  .L_lambda_opt_arity_check_more_001b:
  6031 0000365A 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  6032 0000365F 49B9-                   	mov r9, sob_nil
  6032 00003661 [0100000000000000] 
  6033 00003669 4889E3                  	mov rbx, rsp 
  6034 0000366C 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  6035 00003670 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  6036 00003673 49C1E003                	shl r8, 3
  6037 00003677 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  6038 0000367A 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  6039                                  .L_lambda_opt_stack_shrink_loop_001b:
  6040 0000367F 4983F801                	cmp r8, 1
  6041 00003683 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_001b
  6042 00003685 BF11000000              	mov rdi, 1+8+8 ;for pair
  6043 0000368A E8A5490100              	call malloc;to create the pair in the stack
  6044 0000368F C60021                  	mov byte [rax], T_pair ; to make it a pair
  6045 00003692 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
  6046 00003695 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
  6047 00003699 4C894809                 	mov qword[rax+1+8],r9
  6048 0000369D 4989C1                  	mov r9, rax ;for the recursion 
  6049 000036A0 49FFC8                  	dec r8 ;we finished copy another opt param to the list
  6050 000036A3 4883EB08                	sub rbx, 8 ;to get the next param to copy
  6051 000036A7 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_001b
  6052                                  .L_lambda_opt_stack_shrink_loop_exit_001b:
  6053 000036A9 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
  6054 000036AE 4883E902                	sub rcx, 2
  6055 000036B2 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
  6056 000036B6 4801CC                  	add rsp, rcx ;shrinking the stack
  6057 000036B9 4889E0                  	mov rax, rsp
  6058 000036BC 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
  6059 000036BF 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
  6060 000036C3 49FFC8                  	dec r8 ;we start with param 0, not 1 
  6061 000036C6 4883C018                	add rax, 3 * 8;now rax is param 0
  6062 000036CA 49C1E003                	shl r8, 3;convert to byte
  6063 000036CE 4C01C0                  	add rax, r8;now rax is the top of the stack
  6064 000036D1 4C8908                  	mov qword[rax], r9;puting the list at the top
  6065 000036D4 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
  6066 000036D8 4889E3                  	mov rbx, rsp 
  6067 000036DB 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
  6068 000036DE 41BA01000000            	mov r10, 1;r10 is the not opt params length
  6069 000036E4 49FFCA                  	dec r10 
  6070 000036E7 49C1E203                	shl r10, 3;to get bytes
  6071 000036EB 4883C318                	add rbx, 3*8;rbx is the first param
  6072 000036EF 4C01D3                  	add rbx, r10; rbx is where the address to copy to
  6073 000036F2 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  6074 000036F5 4C8900                  	mov qword[rax], r8
  6075 000036F8 4883E808                	sub rax, 8
  6076 000036FC 4883EB08                	sub rbx, 8
  6077 00003700 4889E0                  	mov rax, rsp
  6078 00003703 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  6079 00003706 48C744241002000000      	mov qword [rsp+2*8], 2
  6080 0000370F 488B5808                	mov rbx, qword[rax + 8 *1]
  6081 00003713 48895C2408              	mov qword [rsp + 1*8] ,rbx
  6082 00003718 488B18                  	mov rbx, qword[rax]
  6083 0000371B 48891C24                	mov qword [rsp], rbx
  6084 0000371F C8000000                	enter 0, 0
  6085                                  	; preparing a tail-call
  6086                                  	; preparing a non-tail-call
  6087                                  	; preparing a non-tail-call
  6088 00003723 488B4528                	mov rax, PARAM(1)	; param s
  6089 00003727 50                      	push rax
  6090 00003728 6A01                    	push 1	; arg count
  6091 0000372A 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  6092 00003732 803805                  	cmp byte [rax], T_undefined
  6093 00003735 0F84CC470100            	je L_error_fvar_undefined
  6094 0000373B 803804                  	cmp byte [rax], T_closure
  6095 0000373E 0F8547480100            	jne L_error_non_closure
  6096 00003744 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6097 00003747 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6098 0000374A 50                      	push rax
  6099                                  	; preparing a non-tail-call
  6100 0000374B 488B4528                	mov rax, PARAM(1)	; param s
  6101 0000374F 50                      	push rax
  6102 00003750 6A01                    	push 1	; arg count
  6103 00003752 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  6104 0000375A 803805                  	cmp byte [rax], T_undefined
  6105 0000375D 0F84A4470100            	je L_error_fvar_undefined
  6106 00003763 803804                  	cmp byte [rax], T_closure
  6107 00003766 0F851F480100            	jne L_error_non_closure
  6108 0000376C FF7001                  	push SOB_CLOSURE_ENV(rax)
  6109 0000376F FF5009                  	call SOB_CLOSURE_CODE(rax)
  6110 00003772 50                      	push rax
  6111 00003773 6A02                    	push 2	; arg count
  6112 00003775 488B4510                	mov rax, ENV
  6113 00003779 488B00                  	mov rax, qword [rax + 8 * 0]
  6114 0000377C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  6115 0000377F 488B00                  	mov rax, qword [rax]
  6116 00003782 803804                  	cmp byte [rax], T_closure
  6117 00003785 0F8500480100            	jne L_error_non_closure
  6118 0000378B FF7001                  	push SOB_CLOSURE_ENV(rax)
  6119 0000378E FF5009                  	call SOB_CLOSURE_CODE(rax)
  6120 00003791 50                      	push rax
  6121 00003792 488B4520                	mov rax, PARAM(0)	; param f
  6122 00003796 50                      	push rax
  6123 00003797 6A02                    	push 2	; arg count
  6124 00003799 488B0425[A30E0000]      	mov rax, qword [free_var_12]	; free var __bin-apply
  6125 000037A1 803805                  	cmp byte [rax], T_undefined
  6126 000037A4 0F845D470100            	je L_error_fvar_undefined
  6127 000037AA 803804                  	cmp byte [rax], T_closure
  6128 000037AD 0F85D8470100            	jne L_error_non_closure
  6129 000037B3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6130 000037B6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6131 000037B9 FF7500                  	push qword[rbp]
  6132 000037BC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6133 000037BF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6134 000037C3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6135 000037C7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6136 000037CB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6137 000037CE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6138 000037D1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6139 000037D6 4983C103                	add r9, 3 	 ;for getting to the params
  6140 000037DA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6141 000037DE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6142                                  .L_tc_recycle_frame_loop_0137:
  6143 000037E1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6144 000037E4 7410                    	je .L_tc_recycle_frame_done_0137
  6145 000037E6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6146 000037E9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6147 000037EC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6148 000037F0 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6149 000037F4 EBEB                    	jmp .L_tc_recycle_frame_loop_0137
  6150                                  .L_tc_recycle_frame_done_0137:
  6151 000037F6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6152 000037F7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6153 000037FB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6154 000037FE C9                      	leave
  6155 000037FF C22000                  	ret AND_KILL_FRAME(2)
  6156                                  .L_lambda_opt_end_001b:	; new closure is in rax
  6157 00003802 C9                      	leave
  6158 00003803 C21800                  	ret AND_KILL_FRAME(1)
  6159                                  .L_lambda_simple_end_00e5:	; new closure is in rax
  6160 00003806 803804                  	cmp byte [rax], T_closure
  6161 00003809 0F857C470100            	jne L_error_non_closure
  6162 0000380F FF7001                  	push SOB_CLOSURE_ENV(rax)
  6163 00003812 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6164 00003815 48890425[08100000]      	mov qword [free_var_33], rax
  6165 0000381D 48B8-                   	mov rax, sob_void
  6165 0000381F [0000000000000000] 
  6166                                  
  6167 00003827 4889C7                  	mov rdi, rax
  6168 0000382A E85A4A0100              	call print_sexpr_if_not_void
  6169 0000382F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6170 00003834 E8FB470100              	call malloc
  6171 00003839 50                      	push rax
  6172 0000383A BF00000000              	mov rdi, 8 * 0	; new rib
  6173 0000383F E8F0470100              	call malloc
  6174 00003844 50                      	push rax
  6175 00003845 BF08000000              	mov rdi, 8 * 1	; extended env
  6176 0000384A E8E5470100              	call malloc
  6177 0000384F 488B7D10                	mov rdi, ENV
  6178 00003853 BE00000000              	mov rsi, 0
  6179 00003858 BA01000000              	mov rdx, 1
  6180                                  .L_lambda_opt_env_loop_001c:	; ext_env[i + 1] <-- env[i]
  6181 0000385D 4883FE00                	cmp rsi, 0
  6182 00003861 7410                    	je .L_lambda_opt_env_end_001c
  6183 00003863 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6184 00003867 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6185 0000386B 48FFC6                  	inc rsi
  6186 0000386E 48FFC2                  	inc rdx
  6187 00003871 EBEA                    	jmp .L_lambda_opt_env_loop_001c
  6188                                  .L_lambda_opt_env_end_001c:
  6189 00003873 5B                      	pop rbx
  6190 00003874 BE00000000              	mov rsi, 0
  6191                                  .L_lambda_opt_params_loop_001c:	; copy params
  6192 00003879 4883FE00                	cmp rsi, 0
  6193 0000387D 740E                    	je .L_lambda_opt_params_end_001c
  6194 0000387F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6195 00003884 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6196 00003888 48FFC6                  	inc rsi
  6197 0000388B EBEC                    	jmp .L_lambda_opt_params_loop_001c
  6198                                  .L_lambda_opt_params_end_001c:
  6199 0000388D 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
  6200 00003890 4889C3                  	mov rbx, rax
  6201 00003893 58                      	pop rax
  6202 00003894 C60004                  	mov byte [rax], T_closure
  6203 00003897 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6204 0000389B 48C74009[A8380000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_001c
  6205 000038A3 E9DB080000              	jmp .L_lambda_opt_end_001c
  6206                                  .L_lambda_opt_code_001c:	; lambda-opt body
  6207 000038A8 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6208 000038AE 7411                    	je .L_lambda_opt_arity_check_exact_001c
  6209 000038B0 0F8F29040000            	jg .L_lambda_opt_arity_check_more_001c
  6210 000038B6 FF742410                	push qword [rsp + 8 * 2]
  6211 000038BA 6A01                    	push 1
  6212 000038BC E940470100              	jmp L_error_incorrect_arity_opt
  6213                                  .L_lambda_opt_arity_check_exact_001c:
  6214 000038C1 4883EC08                	sub rsp, 8
  6215 000038C5 488B442408              	mov rax, qword[rsp + 8 *1]
  6216 000038CA 48890424                	mov qword[rsp], rax  
  6217 000038CE 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  6218 000038D3 4889442408              	mov qword[rsp + 8 * 1], rax
  6219 000038D8 B802000000              	mov rax, 2
  6220 000038DD 4889442410              	mov qword[rsp + 8 *2], rax
  6221 000038E2 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  6222 000038E7 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  6223 000038EC 48B8-                   	mov rax, sob_nil
  6223 000038EE [0100000000000000] 
  6224 000038F6 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  6225 000038FB C8000000                	enter 0, 0
  6226                                  	; preparing a tail-call
  6227 000038FF 48B8-                   	mov rax, L_constants + 1993
  6227 00003901 [C907000000000000] 
  6228 00003909 50                      	push rax
  6229 0000390A 6A01                    	push 1	; arg count
  6230 0000390C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6231 00003911 E81E470100              	call malloc
  6232 00003916 50                      	push rax
  6233 00003917 BF10000000              	mov rdi, 8 * 2	; new rib
  6234 0000391C E813470100              	call malloc
  6235 00003921 50                      	push rax
  6236 00003922 BF10000000              	mov rdi, 8 * 2	; extended env
  6237 00003927 E808470100              	call malloc
  6238 0000392C 488B7D10                	mov rdi, ENV
  6239 00003930 BE00000000              	mov rsi, 0
  6240 00003935 BA01000000              	mov rdx, 1
  6241                                  .L_lambda_simple_env_loop_00e9:	; ext_env[i + 1] <-- env[i]
  6242 0000393A 4883FE01                	cmp rsi, 1
  6243 0000393E 7410                    	je .L_lambda_simple_env_end_00e9
  6244 00003940 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6245 00003944 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6246 00003948 48FFC6                  	inc rsi
  6247 0000394B 48FFC2                  	inc rdx
  6248 0000394E EBEA                    	jmp .L_lambda_simple_env_loop_00e9
  6249                                  .L_lambda_simple_env_end_00e9:
  6250 00003950 5B                      	pop rbx
  6251 00003951 BE00000000              	mov rsi, 0
  6252                                  .L_lambda_simple_params_loop_00e9:	; copy params
  6253 00003956 4883FE02                	cmp rsi, 2
  6254 0000395A 740E                    	je .L_lambda_simple_params_end_00e9
  6255 0000395C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6256 00003961 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6257 00003965 48FFC6                  	inc rsi
  6258 00003968 EBEC                    	jmp .L_lambda_simple_params_loop_00e9
  6259                                  .L_lambda_simple_params_end_00e9:
  6260 0000396A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6261 0000396D 4889C3                  	mov rbx, rax
  6262 00003970 58                      	pop rax
  6263 00003971 C60004                  	mov byte [rax], T_closure
  6264 00003974 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6265 00003978 48C74009[85390000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e9
  6266 00003980 E9FD020000              	jmp .L_lambda_simple_end_00e9
  6267                                  .L_lambda_simple_code_00e9:	; lambda-simple body
  6268 00003985 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6269 0000398B 740B                    	je .L_lambda_simple_arity_check_ok_00e9
  6270 0000398D FF742410                	push qword [rsp + 8 * 2]
  6271 00003991 6A01                    	push 1
  6272 00003993 E955460100              	jmp L_error_incorrect_arity_simple
  6273                                  .L_lambda_simple_arity_check_ok_00e9:
  6274 00003998 C8000000                	enter 0, 0
  6275 0000399C BF08000000              	mov rdi, 8*1
  6276 000039A1 E88E460100              	call malloc
  6277 000039A6 488B5D20                	mov rbx, PARAM(0)
  6278 000039AA 488918                  	mov qword[rax], rbx
  6279 000039AD 48894520                	mov PARAM(0), rax
  6280 000039B1 48B8-                   	mov rax, sob_void
  6280 000039B3 [0000000000000000] 
  6281                                  
  6282 000039BB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6283 000039C0 E86F460100              	call malloc
  6284 000039C5 50                      	push rax
  6285 000039C6 BF08000000              	mov rdi, 8 * 1	; new rib
  6286 000039CB E864460100              	call malloc
  6287 000039D0 50                      	push rax
  6288 000039D1 BF18000000              	mov rdi, 8 * 3	; extended env
  6289 000039D6 E859460100              	call malloc
  6290 000039DB 488B7D10                	mov rdi, ENV
  6291 000039DF BE00000000              	mov rsi, 0
  6292 000039E4 BA01000000              	mov rdx, 1
  6293                                  .L_lambda_simple_env_loop_00ea:	; ext_env[i + 1] <-- env[i]
  6294 000039E9 4883FE02                	cmp rsi, 2
  6295 000039ED 7410                    	je .L_lambda_simple_env_end_00ea
  6296 000039EF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6297 000039F3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6298 000039F7 48FFC6                  	inc rsi
  6299 000039FA 48FFC2                  	inc rdx
  6300 000039FD EBEA                    	jmp .L_lambda_simple_env_loop_00ea
  6301                                  .L_lambda_simple_env_end_00ea:
  6302 000039FF 5B                      	pop rbx
  6303 00003A00 BE00000000              	mov rsi, 0
  6304                                  .L_lambda_simple_params_loop_00ea:	; copy params
  6305 00003A05 4883FE01                	cmp rsi, 1
  6306 00003A09 740E                    	je .L_lambda_simple_params_end_00ea
  6307 00003A0B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6308 00003A10 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6309 00003A14 48FFC6                  	inc rsi
  6310 00003A17 EBEC                    	jmp .L_lambda_simple_params_loop_00ea
  6311                                  .L_lambda_simple_params_end_00ea:
  6312 00003A19 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6313 00003A1C 4889C3                  	mov rbx, rax
  6314 00003A1F 58                      	pop rax
  6315 00003A20 C60004                  	mov byte [rax], T_closure
  6316 00003A23 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6317 00003A27 48C74009[343A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ea
  6318 00003A2F E98E010000              	jmp .L_lambda_simple_end_00ea
  6319                                  .L_lambda_simple_code_00ea:	; lambda-simple body
  6320 00003A34 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6321 00003A3A 740B                    	je .L_lambda_simple_arity_check_ok_00ea
  6322 00003A3C FF742410                	push qword [rsp + 8 * 2]
  6323 00003A40 6A01                    	push 1
  6324 00003A42 E9A6450100              	jmp L_error_incorrect_arity_simple
  6325                                  .L_lambda_simple_arity_check_ok_00ea:
  6326 00003A47 C8000000                	enter 0, 0
  6327                                  	; preparing a non-tail-call
  6328                                  	; preparing a non-tail-call
  6329 00003A4B 488B4520                	mov rax, PARAM(0)	; param s
  6330 00003A4F 50                      	push rax
  6331 00003A50 6A01                    	push 1	; arg count
  6332 00003A52 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  6333 00003A5A 803805                  	cmp byte [rax], T_undefined
  6334 00003A5D 0F84A4440100            	je L_error_fvar_undefined
  6335 00003A63 803804                  	cmp byte [rax], T_closure
  6336 00003A66 0F851F450100            	jne L_error_non_closure
  6337 00003A6C FF7001                  	push SOB_CLOSURE_ENV(rax)
  6338 00003A6F FF5009                  	call SOB_CLOSURE_CODE(rax)
  6339 00003A72 50                      	push rax
  6340 00003A73 6A01                    	push 1	; arg count
  6341 00003A75 488B0425[36150000]      	mov rax, qword [free_var_111]	; free var pair?
  6342 00003A7D 803805                  	cmp byte [rax], T_undefined
  6343 00003A80 0F8481440100            	je L_error_fvar_undefined
  6344 00003A86 803804                  	cmp byte [rax], T_closure
  6345 00003A89 0F85FC440100            	jne L_error_non_closure
  6346 00003A8F FF7001                  	push SOB_CLOSURE_ENV(rax)
  6347 00003A92 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6348 00003A95 483D[02000000]          	cmp rax, sob_boolean_false
  6349 00003A9B 0F8413010000            	je .L_if_else_009d
  6350                                  	; preparing a non-tail-call
  6351                                  	; preparing a non-tail-call
  6352 00003AA1 488B4520                	mov rax, PARAM(0)	; param s
  6353 00003AA5 50                      	push rax
  6354 00003AA6 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  6355 00003AAE 803805                  	cmp byte [rax], T_undefined
  6356 00003AB1 0F8450440100            	je L_error_fvar_undefined
  6357 00003AB7 50                      	push rax
  6358 00003AB8 6A02                    	push 2	; arg count
  6359 00003ABA 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
  6360 00003AC2 803805                  	cmp byte [rax], T_undefined
  6361 00003AC5 0F843C440100            	je L_error_fvar_undefined
  6362 00003ACB 803804                  	cmp byte [rax], T_closure
  6363 00003ACE 0F85B7440100            	jne L_error_non_closure
  6364 00003AD4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6365 00003AD7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6366 00003ADA 50                      	push rax
  6367 00003ADB 488B4510                	mov rax, ENV
  6368 00003ADF 488B4008                	mov rax, qword [rax + 8 * 1]
  6369 00003AE3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  6370 00003AE6 50                      	push rax
  6371 00003AE7 6A02                    	push 2	; arg count
  6372 00003AE9 488B0425[08100000]      	mov rax, qword [free_var_33]	; free var apply
  6373 00003AF1 803805                  	cmp byte [rax], T_undefined
  6374 00003AF4 0F840D440100            	je L_error_fvar_undefined
  6375 00003AFA 803804                  	cmp byte [rax], T_closure
  6376 00003AFD 0F8588440100            	jne L_error_non_closure
  6377 00003B03 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6378 00003B06 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6379 00003B09 483D[02000000]          	cmp rax, sob_boolean_false
  6380 00003B0F 0F859D000000            	jne .L_or_end_0015
  6381                                  	; preparing a tail-call
  6382                                  	; preparing a non-tail-call
  6383 00003B15 488B4520                	mov rax, PARAM(0)	; param s
  6384 00003B19 50                      	push rax
  6385 00003B1A 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  6386 00003B22 803805                  	cmp byte [rax], T_undefined
  6387 00003B25 0F84DC430100            	je L_error_fvar_undefined
  6388 00003B2B 50                      	push rax
  6389 00003B2C 6A02                    	push 2	; arg count
  6390 00003B2E 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
  6391 00003B36 803805                  	cmp byte [rax], T_undefined
  6392 00003B39 0F84C8430100            	je L_error_fvar_undefined
  6393 00003B3F 803804                  	cmp byte [rax], T_closure
  6394 00003B42 0F8543440100            	jne L_error_non_closure
  6395 00003B48 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6396 00003B4B FF5009                  	call SOB_CLOSURE_CODE(rax)
  6397 00003B4E 50                      	push rax
  6398 00003B4F 6A01                    	push 1	; arg count
  6399 00003B51 488B4510                	mov rax, ENV
  6400 00003B55 488B00                  	mov rax, qword [rax + 8 * 0]
  6401 00003B58 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  6402 00003B5B 488B00                  	mov rax, qword [rax]
  6403 00003B5E 803804                  	cmp byte [rax], T_closure
  6404 00003B61 0F8524440100            	jne L_error_non_closure
  6405 00003B67 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6406 00003B6A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6407 00003B6D FF7500                  	push qword[rbp]
  6408 00003B70 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6409 00003B73 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6410 00003B77 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6411 00003B7B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6412 00003B7F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6413 00003B82 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6414 00003B85 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6415 00003B8A 4983C103                	add r9, 3 	 ;for getting to the params
  6416 00003B8E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6417 00003B92 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6418                                  .L_tc_recycle_frame_loop_013c:
  6419 00003B95 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6420 00003B98 7410                    	je .L_tc_recycle_frame_done_013c
  6421 00003B9A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6422 00003B9D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6423 00003BA0 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6424 00003BA4 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6425 00003BA8 EBEB                    	jmp .L_tc_recycle_frame_loop_013c
  6426                                  .L_tc_recycle_frame_done_013c:
  6427 00003BAA 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6428 00003BAB 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6429 00003BAF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6430                                  .L_or_end_0015:
  6431 00003BB2 EB0A                    	jmp .L_if_end_009d
  6432                                  .L_if_else_009d:
  6433 00003BB4 48B8-                   	mov rax, L_constants + 2
  6433 00003BB6 [0200000000000000] 
  6434                                  .L_if_end_009d:
  6435 00003BBE C9                      	leave
  6436 00003BBF C21800                  	ret AND_KILL_FRAME(1)
  6437                                  .L_lambda_simple_end_00ea:	; new closure is in rax
  6438 00003BC2 50                      	push rax
  6439 00003BC3 488B4520                	mov rax, PARAM(0)	; param loop
  6440 00003BC7 8F00                    	pop qword [rax]
  6441 00003BC9 48B8-                   	mov rax, sob_void
  6441 00003BCB [0000000000000000] 
  6442                                  
  6443                                  	; preparing a non-tail-call
  6444 00003BD3 488B4510                	mov rax, ENV
  6445 00003BD7 488B00                  	mov rax, qword [rax + 8 * 0]
  6446 00003BDA 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6447 00003BDE 50                      	push rax
  6448 00003BDF 6A01                    	push 1	; arg count
  6449 00003BE1 488B0425[36150000]      	mov rax, qword [free_var_111]	; free var pair?
  6450 00003BE9 803805                  	cmp byte [rax], T_undefined
  6451 00003BEC 0F8415430100            	je L_error_fvar_undefined
  6452 00003BF2 803804                  	cmp byte [rax], T_closure
  6453 00003BF5 0F8590430100            	jne L_error_non_closure
  6454 00003BFB FF7001                  	push SOB_CLOSURE_ENV(rax)
  6455 00003BFE FF5009                  	call SOB_CLOSURE_CODE(rax)
  6456 00003C01 483D[02000000]          	cmp rax, sob_boolean_false
  6457 00003C07 746B                    	je .L_if_else_009e
  6458                                  	; preparing a tail-call
  6459 00003C09 488B4510                	mov rax, ENV
  6460 00003C0D 488B00                  	mov rax, qword [rax + 8 * 0]
  6461 00003C10 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6462 00003C14 50                      	push rax
  6463 00003C15 6A01                    	push 1	; arg count
  6464 00003C17 488B4520                	mov rax, PARAM(0)	; param loop
  6465 00003C1B 488B00                  	mov rax, qword [rax]
  6466 00003C1E 803804                  	cmp byte [rax], T_closure
  6467 00003C21 0F8564430100            	jne L_error_non_closure
  6468 00003C27 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6469 00003C2A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6470 00003C2D FF7500                  	push qword[rbp]
  6471 00003C30 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6472 00003C33 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6473 00003C37 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6474 00003C3B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6475 00003C3F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6476 00003C42 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6477 00003C45 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6478 00003C4A 4983C103                	add r9, 3 	 ;for getting to the params
  6479 00003C4E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6480 00003C52 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6481                                  .L_tc_recycle_frame_loop_013d:
  6482 00003C55 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6483 00003C58 7410                    	je .L_tc_recycle_frame_done_013d
  6484 00003C5A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6485 00003C5D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6486 00003C60 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6487 00003C64 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6488 00003C68 EBEB                    	jmp .L_tc_recycle_frame_loop_013d
  6489                                  .L_tc_recycle_frame_done_013d:
  6490 00003C6A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6491 00003C6B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6492 00003C6F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6493 00003C72 EB0A                    	jmp .L_if_end_009e
  6494                                  .L_if_else_009e:
  6495 00003C74 48B8-                   	mov rax, L_constants + 2
  6495 00003C76 [0200000000000000] 
  6496                                  .L_if_end_009e:
  6497 00003C7E C9                      	leave
  6498 00003C7F C21800                  	ret AND_KILL_FRAME(1)
  6499                                  .L_lambda_simple_end_00e9:	; new closure is in rax
  6500 00003C82 803804                  	cmp byte [rax], T_closure
  6501 00003C85 0F8500430100            	jne L_error_non_closure
  6502 00003C8B FF7001                  	push SOB_CLOSURE_ENV(rax)
  6503 00003C8E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6504 00003C91 FF7500                  	push qword[rbp]
  6505 00003C94 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6506 00003C97 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6507 00003C9B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6508 00003C9F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6509 00003CA3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6510 00003CA6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6511 00003CA9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6512 00003CAE 4983C103                	add r9, 3 	 ;for getting to the params
  6513 00003CB2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6514 00003CB6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6515                                  .L_tc_recycle_frame_loop_013e:
  6516 00003CB9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6517 00003CBC 7410                    	je .L_tc_recycle_frame_done_013e
  6518 00003CBE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6519 00003CC1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6520 00003CC4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6521 00003CC8 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6522 00003CCC EBEB                    	jmp .L_tc_recycle_frame_loop_013e
  6523                                  .L_tc_recycle_frame_done_013e:
  6524 00003CCE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6525 00003CCF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6526 00003CD3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6527 00003CD6 C9                      	leave
  6528 00003CD7 C22000                  	ret AND_KILL_FRAME(2)
  6529 00003CDA E9A4040000              	jmp .L_lambda_opt_end_001c	; new closure is in rax
  6530                                  .L_lambda_opt_arity_check_more_001c:
  6531 00003CDF 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  6532 00003CE4 49B9-                   	mov r9, sob_nil
  6532 00003CE6 [0100000000000000] 
  6533 00003CEE 4889E3                  	mov rbx, rsp 
  6534 00003CF1 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  6535 00003CF5 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  6536 00003CF8 49C1E003                	shl r8, 3
  6537 00003CFC 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  6538 00003CFF 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  6539                                  .L_lambda_opt_stack_shrink_loop_001c:
  6540 00003D04 4983F801                	cmp r8, 1
  6541 00003D08 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_001c
  6542 00003D0A BF11000000              	mov rdi, 1+8+8 ;for pair
  6543 00003D0F E820430100              	call malloc;to create the pair in the stack
  6544 00003D14 C60021                  	mov byte [rax], T_pair ; to make it a pair
  6545 00003D17 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
  6546 00003D1A 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
  6547 00003D1E 4C894809                 	mov qword[rax+1+8],r9
  6548 00003D22 4989C1                  	mov r9, rax ;for the recursion 
  6549 00003D25 49FFC8                  	dec r8 ;we finished copy another opt param to the list
  6550 00003D28 4883EB08                	sub rbx, 8 ;to get the next param to copy
  6551 00003D2C EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_001c
  6552                                  .L_lambda_opt_stack_shrink_loop_exit_001c:
  6553 00003D2E 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
  6554 00003D33 4883E902                	sub rcx, 2
  6555 00003D37 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
  6556 00003D3B 4801CC                  	add rsp, rcx ;shrinking the stack
  6557 00003D3E 4889E0                  	mov rax, rsp
  6558 00003D41 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
  6559 00003D44 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
  6560 00003D48 49FFC8                  	dec r8 ;we start with param 0, not 1 
  6561 00003D4B 4883C018                	add rax, 3 * 8;now rax is param 0
  6562 00003D4F 49C1E003                	shl r8, 3;convert to byte
  6563 00003D53 4C01C0                  	add rax, r8;now rax is the top of the stack
  6564 00003D56 4C8908                  	mov qword[rax], r9;puting the list at the top
  6565 00003D59 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
  6566 00003D5D 4889E3                  	mov rbx, rsp 
  6567 00003D60 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
  6568 00003D63 41BA01000000            	mov r10, 1;r10 is the not opt params length
  6569 00003D69 49FFCA                  	dec r10 
  6570 00003D6C 49C1E203                	shl r10, 3;to get bytes
  6571 00003D70 4883C318                	add rbx, 3*8;rbx is the first param
  6572 00003D74 4C01D3                  	add rbx, r10; rbx is where the address to copy to
  6573 00003D77 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  6574 00003D7A 4C8900                  	mov qword[rax], r8
  6575 00003D7D 4883E808                	sub rax, 8
  6576 00003D81 4883EB08                	sub rbx, 8
  6577 00003D85 4889E0                  	mov rax, rsp
  6578 00003D88 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  6579 00003D8B 48C744241002000000      	mov qword [rsp+2*8], 2
  6580 00003D94 488B5808                	mov rbx, qword[rax + 8 *1]
  6581 00003D98 48895C2408              	mov qword [rsp + 1*8] ,rbx
  6582 00003D9D 488B18                  	mov rbx, qword[rax]
  6583 00003DA0 48891C24                	mov qword [rsp], rbx
  6584 00003DA4 C8000000                	enter 0, 0
  6585                                  	; preparing a tail-call
  6586 00003DA8 48B8-                   	mov rax, L_constants + 1993
  6586 00003DAA [C907000000000000] 
  6587 00003DB2 50                      	push rax
  6588 00003DB3 6A01                    	push 1	; arg count
  6589 00003DB5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6590 00003DBA E875420100              	call malloc
  6591 00003DBF 50                      	push rax
  6592 00003DC0 BF10000000              	mov rdi, 8 * 2	; new rib
  6593 00003DC5 E86A420100              	call malloc
  6594 00003DCA 50                      	push rax
  6595 00003DCB BF10000000              	mov rdi, 8 * 2	; extended env
  6596 00003DD0 E85F420100              	call malloc
  6597 00003DD5 488B7D10                	mov rdi, ENV
  6598 00003DD9 BE00000000              	mov rsi, 0
  6599 00003DDE BA01000000              	mov rdx, 1
  6600                                  .L_lambda_simple_env_loop_00e7:	; ext_env[i + 1] <-- env[i]
  6601 00003DE3 4883FE01                	cmp rsi, 1
  6602 00003DE7 7410                    	je .L_lambda_simple_env_end_00e7
  6603 00003DE9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6604 00003DED 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6605 00003DF1 48FFC6                  	inc rsi
  6606 00003DF4 48FFC2                  	inc rdx
  6607 00003DF7 EBEA                    	jmp .L_lambda_simple_env_loop_00e7
  6608                                  .L_lambda_simple_env_end_00e7:
  6609 00003DF9 5B                      	pop rbx
  6610 00003DFA BE00000000              	mov rsi, 0
  6611                                  .L_lambda_simple_params_loop_00e7:	; copy params
  6612 00003DFF 4883FE02                	cmp rsi, 2
  6613 00003E03 740E                    	je .L_lambda_simple_params_end_00e7
  6614 00003E05 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6615 00003E0A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6616 00003E0E 48FFC6                  	inc rsi
  6617 00003E11 EBEC                    	jmp .L_lambda_simple_params_loop_00e7
  6618                                  .L_lambda_simple_params_end_00e7:
  6619 00003E13 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6620 00003E16 4889C3                  	mov rbx, rax
  6621 00003E19 58                      	pop rax
  6622 00003E1A C60004                  	mov byte [rax], T_closure
  6623 00003E1D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6624 00003E21 48C74009[2E3E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e7
  6625 00003E29 E9FD020000              	jmp .L_lambda_simple_end_00e7
  6626                                  .L_lambda_simple_code_00e7:	; lambda-simple body
  6627 00003E2E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6628 00003E34 740B                    	je .L_lambda_simple_arity_check_ok_00e7
  6629 00003E36 FF742410                	push qword [rsp + 8 * 2]
  6630 00003E3A 6A01                    	push 1
  6631 00003E3C E9AC410100              	jmp L_error_incorrect_arity_simple
  6632                                  .L_lambda_simple_arity_check_ok_00e7:
  6633 00003E41 C8000000                	enter 0, 0
  6634 00003E45 BF08000000              	mov rdi, 8*1
  6635 00003E4A E8E5410100              	call malloc
  6636 00003E4F 488B5D20                	mov rbx, PARAM(0)
  6637 00003E53 488918                  	mov qword[rax], rbx
  6638 00003E56 48894520                	mov PARAM(0), rax
  6639 00003E5A 48B8-                   	mov rax, sob_void
  6639 00003E5C [0000000000000000] 
  6640                                  
  6641 00003E64 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6642 00003E69 E8C6410100              	call malloc
  6643 00003E6E 50                      	push rax
  6644 00003E6F BF08000000              	mov rdi, 8 * 1	; new rib
  6645 00003E74 E8BB410100              	call malloc
  6646 00003E79 50                      	push rax
  6647 00003E7A BF18000000              	mov rdi, 8 * 3	; extended env
  6648 00003E7F E8B0410100              	call malloc
  6649 00003E84 488B7D10                	mov rdi, ENV
  6650 00003E88 BE00000000              	mov rsi, 0
  6651 00003E8D BA01000000              	mov rdx, 1
  6652                                  .L_lambda_simple_env_loop_00e8:	; ext_env[i + 1] <-- env[i]
  6653 00003E92 4883FE02                	cmp rsi, 2
  6654 00003E96 7410                    	je .L_lambda_simple_env_end_00e8
  6655 00003E98 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6656 00003E9C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6657 00003EA0 48FFC6                  	inc rsi
  6658 00003EA3 48FFC2                  	inc rdx
  6659 00003EA6 EBEA                    	jmp .L_lambda_simple_env_loop_00e8
  6660                                  .L_lambda_simple_env_end_00e8:
  6661 00003EA8 5B                      	pop rbx
  6662 00003EA9 BE00000000              	mov rsi, 0
  6663                                  .L_lambda_simple_params_loop_00e8:	; copy params
  6664 00003EAE 4883FE01                	cmp rsi, 1
  6665 00003EB2 740E                    	je .L_lambda_simple_params_end_00e8
  6666 00003EB4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6667 00003EB9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6668 00003EBD 48FFC6                  	inc rsi
  6669 00003EC0 EBEC                    	jmp .L_lambda_simple_params_loop_00e8
  6670                                  .L_lambda_simple_params_end_00e8:
  6671 00003EC2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6672 00003EC5 4889C3                  	mov rbx, rax
  6673 00003EC8 58                      	pop rax
  6674 00003EC9 C60004                  	mov byte [rax], T_closure
  6675 00003ECC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6676 00003ED0 48C74009[DD3E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e8
  6677 00003ED8 E98E010000              	jmp .L_lambda_simple_end_00e8
  6678                                  .L_lambda_simple_code_00e8:	; lambda-simple body
  6679 00003EDD 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6680 00003EE3 740B                    	je .L_lambda_simple_arity_check_ok_00e8
  6681 00003EE5 FF742410                	push qword [rsp + 8 * 2]
  6682 00003EE9 6A01                    	push 1
  6683 00003EEB E9FD400100              	jmp L_error_incorrect_arity_simple
  6684                                  .L_lambda_simple_arity_check_ok_00e8:
  6685 00003EF0 C8000000                	enter 0, 0
  6686                                  	; preparing a non-tail-call
  6687                                  	; preparing a non-tail-call
  6688 00003EF4 488B4520                	mov rax, PARAM(0)	; param s
  6689 00003EF8 50                      	push rax
  6690 00003EF9 6A01                    	push 1	; arg count
  6691 00003EFB 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  6692 00003F03 803805                  	cmp byte [rax], T_undefined
  6693 00003F06 0F84FB3F0100            	je L_error_fvar_undefined
  6694 00003F0C 803804                  	cmp byte [rax], T_closure
  6695 00003F0F 0F8576400100            	jne L_error_non_closure
  6696 00003F15 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6697 00003F18 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6698 00003F1B 50                      	push rax
  6699 00003F1C 6A01                    	push 1	; arg count
  6700 00003F1E 488B0425[36150000]      	mov rax, qword [free_var_111]	; free var pair?
  6701 00003F26 803805                  	cmp byte [rax], T_undefined
  6702 00003F29 0F84D83F0100            	je L_error_fvar_undefined
  6703 00003F2F 803804                  	cmp byte [rax], T_closure
  6704 00003F32 0F8553400100            	jne L_error_non_closure
  6705 00003F38 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6706 00003F3B FF5009                  	call SOB_CLOSURE_CODE(rax)
  6707 00003F3E 483D[02000000]          	cmp rax, sob_boolean_false
  6708 00003F44 0F8413010000            	je .L_if_else_009b
  6709                                  	; preparing a non-tail-call
  6710                                  	; preparing a non-tail-call
  6711 00003F4A 488B4520                	mov rax, PARAM(0)	; param s
  6712 00003F4E 50                      	push rax
  6713 00003F4F 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  6714 00003F57 803805                  	cmp byte [rax], T_undefined
  6715 00003F5A 0F84A73F0100            	je L_error_fvar_undefined
  6716 00003F60 50                      	push rax
  6717 00003F61 6A02                    	push 2	; arg count
  6718 00003F63 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
  6719 00003F6B 803805                  	cmp byte [rax], T_undefined
  6720 00003F6E 0F84933F0100            	je L_error_fvar_undefined
  6721 00003F74 803804                  	cmp byte [rax], T_closure
  6722 00003F77 0F850E400100            	jne L_error_non_closure
  6723 00003F7D FF7001                  	push SOB_CLOSURE_ENV(rax)
  6724 00003F80 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6725 00003F83 50                      	push rax
  6726 00003F84 488B4510                	mov rax, ENV
  6727 00003F88 488B4008                	mov rax, qword [rax + 8 * 1]
  6728 00003F8C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  6729 00003F8F 50                      	push rax
  6730 00003F90 6A02                    	push 2	; arg count
  6731 00003F92 488B0425[08100000]      	mov rax, qword [free_var_33]	; free var apply
  6732 00003F9A 803805                  	cmp byte [rax], T_undefined
  6733 00003F9D 0F84643F0100            	je L_error_fvar_undefined
  6734 00003FA3 803804                  	cmp byte [rax], T_closure
  6735 00003FA6 0F85DF3F0100            	jne L_error_non_closure
  6736 00003FAC FF7001                  	push SOB_CLOSURE_ENV(rax)
  6737 00003FAF FF5009                  	call SOB_CLOSURE_CODE(rax)
  6738 00003FB2 483D[02000000]          	cmp rax, sob_boolean_false
  6739 00003FB8 0F859D000000            	jne .L_or_end_0014
  6740                                  	; preparing a tail-call
  6741                                  	; preparing a non-tail-call
  6742 00003FBE 488B4520                	mov rax, PARAM(0)	; param s
  6743 00003FC2 50                      	push rax
  6744 00003FC3 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  6745 00003FCB 803805                  	cmp byte [rax], T_undefined
  6746 00003FCE 0F84333F0100            	je L_error_fvar_undefined
  6747 00003FD4 50                      	push rax
  6748 00003FD5 6A02                    	push 2	; arg count
  6749 00003FD7 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
  6750 00003FDF 803805                  	cmp byte [rax], T_undefined
  6751 00003FE2 0F841F3F0100            	je L_error_fvar_undefined
  6752 00003FE8 803804                  	cmp byte [rax], T_closure
  6753 00003FEB 0F859A3F0100            	jne L_error_non_closure
  6754 00003FF1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6755 00003FF4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6756 00003FF7 50                      	push rax
  6757 00003FF8 6A01                    	push 1	; arg count
  6758 00003FFA 488B4510                	mov rax, ENV
  6759 00003FFE 488B00                  	mov rax, qword [rax + 8 * 0]
  6760 00004001 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  6761 00004004 488B00                  	mov rax, qword [rax]
  6762 00004007 803804                  	cmp byte [rax], T_closure
  6763 0000400A 0F857B3F0100            	jne L_error_non_closure
  6764 00004010 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6765 00004013 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6766 00004016 FF7500                  	push qword[rbp]
  6767 00004019 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6768 0000401C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6769 00004020 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6770 00004024 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6771 00004028 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6772 0000402B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6773 0000402E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6774 00004033 4983C103                	add r9, 3 	 ;for getting to the params
  6775 00004037 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6776 0000403B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6777                                  .L_tc_recycle_frame_loop_0139:
  6778 0000403E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6779 00004041 7410                    	je .L_tc_recycle_frame_done_0139
  6780 00004043 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6781 00004046 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6782 00004049 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6783 0000404D 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6784 00004051 EBEB                    	jmp .L_tc_recycle_frame_loop_0139
  6785                                  .L_tc_recycle_frame_done_0139:
  6786 00004053 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6787 00004054 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6788 00004058 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6789                                  .L_or_end_0014:
  6790 0000405B EB0A                    	jmp .L_if_end_009b
  6791                                  .L_if_else_009b:
  6792 0000405D 48B8-                   	mov rax, L_constants + 2
  6792 0000405F [0200000000000000] 
  6793                                  .L_if_end_009b:
  6794 00004067 C9                      	leave
  6795 00004068 C21800                  	ret AND_KILL_FRAME(1)
  6796                                  .L_lambda_simple_end_00e8:	; new closure is in rax
  6797 0000406B 50                      	push rax
  6798 0000406C 488B4520                	mov rax, PARAM(0)	; param loop
  6799 00004070 8F00                    	pop qword [rax]
  6800 00004072 48B8-                   	mov rax, sob_void
  6800 00004074 [0000000000000000] 
  6801                                  
  6802                                  	; preparing a non-tail-call
  6803 0000407C 488B4510                	mov rax, ENV
  6804 00004080 488B00                  	mov rax, qword [rax + 8 * 0]
  6805 00004083 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6806 00004087 50                      	push rax
  6807 00004088 6A01                    	push 1	; arg count
  6808 0000408A 488B0425[36150000]      	mov rax, qword [free_var_111]	; free var pair?
  6809 00004092 803805                  	cmp byte [rax], T_undefined
  6810 00004095 0F846C3E0100            	je L_error_fvar_undefined
  6811 0000409B 803804                  	cmp byte [rax], T_closure
  6812 0000409E 0F85E73E0100            	jne L_error_non_closure
  6813 000040A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6814 000040A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6815 000040AA 483D[02000000]          	cmp rax, sob_boolean_false
  6816 000040B0 746B                    	je .L_if_else_009c
  6817                                  	; preparing a tail-call
  6818 000040B2 488B4510                	mov rax, ENV
  6819 000040B6 488B00                  	mov rax, qword [rax + 8 * 0]
  6820 000040B9 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6821 000040BD 50                      	push rax
  6822 000040BE 6A01                    	push 1	; arg count
  6823 000040C0 488B4520                	mov rax, PARAM(0)	; param loop
  6824 000040C4 488B00                  	mov rax, qword [rax]
  6825 000040C7 803804                  	cmp byte [rax], T_closure
  6826 000040CA 0F85BB3E0100            	jne L_error_non_closure
  6827 000040D0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6828 000040D3 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6829 000040D6 FF7500                  	push qword[rbp]
  6830 000040D9 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6831 000040DC 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6832 000040E0 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6833 000040E4 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6834 000040E8 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6835 000040EB 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6836 000040EE 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6837 000040F3 4983C103                	add r9, 3 	 ;for getting to the params
  6838 000040F7 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6839 000040FB 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6840                                  .L_tc_recycle_frame_loop_013a:
  6841 000040FE 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6842 00004101 7410                    	je .L_tc_recycle_frame_done_013a
  6843 00004103 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6844 00004106 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6845 00004109 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6846 0000410D 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6847 00004111 EBEB                    	jmp .L_tc_recycle_frame_loop_013a
  6848                                  .L_tc_recycle_frame_done_013a:
  6849 00004113 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6850 00004114 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6851 00004118 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6852 0000411B EB0A                    	jmp .L_if_end_009c
  6853                                  .L_if_else_009c:
  6854 0000411D 48B8-                   	mov rax, L_constants + 2
  6854 0000411F [0200000000000000] 
  6855                                  .L_if_end_009c:
  6856 00004127 C9                      	leave
  6857 00004128 C21800                  	ret AND_KILL_FRAME(1)
  6858                                  .L_lambda_simple_end_00e7:	; new closure is in rax
  6859 0000412B 803804                  	cmp byte [rax], T_closure
  6860 0000412E 0F85573E0100            	jne L_error_non_closure
  6861 00004134 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6862 00004137 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6863 0000413A FF7500                  	push qword[rbp]
  6864 0000413D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6865 00004140 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6866 00004144 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6867 00004148 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6868 0000414C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6869 0000414F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6870 00004152 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6871 00004157 4983C103                	add r9, 3 	 ;for getting to the params
  6872 0000415B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6873 0000415F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6874                                  .L_tc_recycle_frame_loop_013b:
  6875 00004162 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6876 00004165 7410                    	je .L_tc_recycle_frame_done_013b
  6877 00004167 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6878 0000416A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6879 0000416D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6880 00004171 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6881 00004175 EBEB                    	jmp .L_tc_recycle_frame_loop_013b
  6882                                  .L_tc_recycle_frame_done_013b:
  6883 00004177 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6884 00004178 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6885 0000417C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6886 0000417F C9                      	leave
  6887 00004180 C22000                  	ret AND_KILL_FRAME(2)
  6888                                  .L_lambda_opt_end_001c:	; new closure is in rax
  6889 00004183 48890425[25150000]      	mov qword [free_var_110], rax
  6890 0000418B 48B8-                   	mov rax, sob_void
  6890 0000418D [0000000000000000] 
  6891                                  
  6892 00004195 4889C7                  	mov rdi, rax
  6893 00004198 E8EC400100              	call print_sexpr_if_not_void
  6894 0000419D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6895 000041A2 E88D3E0100              	call malloc
  6896 000041A7 50                      	push rax
  6897 000041A8 BF00000000              	mov rdi, 8 * 0	; new rib
  6898 000041AD E8823E0100              	call malloc
  6899 000041B2 50                      	push rax
  6900 000041B3 BF08000000              	mov rdi, 8 * 1	; extended env
  6901 000041B8 E8773E0100              	call malloc
  6902 000041BD 488B7D10                	mov rdi, ENV
  6903 000041C1 BE00000000              	mov rsi, 0
  6904 000041C6 BA01000000              	mov rdx, 1
  6905                                  .L_lambda_opt_env_loop_001d:	; ext_env[i + 1] <-- env[i]
  6906 000041CB 4883FE00                	cmp rsi, 0
  6907 000041CF 7410                    	je .L_lambda_opt_env_end_001d
  6908 000041D1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6909 000041D5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6910 000041D9 48FFC6                  	inc rsi
  6911 000041DC 48FFC2                  	inc rdx
  6912 000041DF EBEA                    	jmp .L_lambda_opt_env_loop_001d
  6913                                  .L_lambda_opt_env_end_001d:
  6914 000041E1 5B                      	pop rbx
  6915 000041E2 BE00000000              	mov rsi, 0
  6916                                  .L_lambda_opt_params_loop_001d:	; copy params
  6917 000041E7 4883FE00                	cmp rsi, 0
  6918 000041EB 740E                    	je .L_lambda_opt_params_end_001d
  6919 000041ED 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6920 000041F2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6921 000041F6 48FFC6                  	inc rsi
  6922 000041F9 EBEC                    	jmp .L_lambda_opt_params_loop_001d
  6923                                  .L_lambda_opt_params_end_001d:
  6924 000041FB 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
  6925 000041FE 4889C3                  	mov rbx, rax
  6926 00004201 58                      	pop rax
  6927 00004202 C60004                  	mov byte [rax], T_closure
  6928 00004205 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6929 00004209 48C74009[16420000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_001d
  6930 00004211 E94F090000              	jmp .L_lambda_opt_end_001d
  6931                                  .L_lambda_opt_code_001d:	; lambda-opt body
  6932 00004216 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6933 0000421C 7411                    	je .L_lambda_opt_arity_check_exact_001d
  6934 0000421E 0F8F63040000            	jg .L_lambda_opt_arity_check_more_001d
  6935 00004224 FF742410                	push qword [rsp + 8 * 2]
  6936 00004228 6A01                    	push 1
  6937 0000422A E9D23D0100              	jmp L_error_incorrect_arity_opt
  6938                                  .L_lambda_opt_arity_check_exact_001d:
  6939 0000422F 4883EC08                	sub rsp, 8
  6940 00004233 488B442408              	mov rax, qword[rsp + 8 *1]
  6941 00004238 48890424                	mov qword[rsp], rax  
  6942 0000423C 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  6943 00004241 4889442408              	mov qword[rsp + 8 * 1], rax
  6944 00004246 B802000000              	mov rax, 2
  6945 0000424B 4889442410              	mov qword[rsp + 8 *2], rax
  6946 00004250 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  6947 00004255 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  6948 0000425A 48B8-                   	mov rax, sob_nil
  6948 0000425C [0100000000000000] 
  6949 00004264 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  6950 00004269 C8000000                	enter 0, 0
  6951                                  	; preparing a tail-call
  6952 0000426D 48B8-                   	mov rax, L_constants + 1993
  6952 0000426F [C907000000000000] 
  6953 00004277 50                      	push rax
  6954 00004278 6A01                    	push 1	; arg count
  6955 0000427A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6956 0000427F E8B03D0100              	call malloc
  6957 00004284 50                      	push rax
  6958 00004285 BF10000000              	mov rdi, 8 * 2	; new rib
  6959 0000428A E8A53D0100              	call malloc
  6960 0000428F 50                      	push rax
  6961 00004290 BF10000000              	mov rdi, 8 * 2	; extended env
  6962 00004295 E89A3D0100              	call malloc
  6963 0000429A 488B7D10                	mov rdi, ENV
  6964 0000429E BE00000000              	mov rsi, 0
  6965 000042A3 BA01000000              	mov rdx, 1
  6966                                  .L_lambda_simple_env_loop_00ed:	; ext_env[i + 1] <-- env[i]
  6967 000042A8 4883FE01                	cmp rsi, 1
  6968 000042AC 7410                    	je .L_lambda_simple_env_end_00ed
  6969 000042AE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6970 000042B2 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6971 000042B6 48FFC6                  	inc rsi
  6972 000042B9 48FFC2                  	inc rdx
  6973 000042BC EBEA                    	jmp .L_lambda_simple_env_loop_00ed
  6974                                  .L_lambda_simple_env_end_00ed:
  6975 000042BE 5B                      	pop rbx
  6976 000042BF BE00000000              	mov rsi, 0
  6977                                  .L_lambda_simple_params_loop_00ed:	; copy params
  6978 000042C4 4883FE02                	cmp rsi, 2
  6979 000042C8 740E                    	je .L_lambda_simple_params_end_00ed
  6980 000042CA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6981 000042CF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6982 000042D3 48FFC6                  	inc rsi
  6983 000042D6 EBEC                    	jmp .L_lambda_simple_params_loop_00ed
  6984                                  .L_lambda_simple_params_end_00ed:
  6985 000042D8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6986 000042DB 4889C3                  	mov rbx, rax
  6987 000042DE 58                      	pop rax
  6988 000042DF C60004                  	mov byte [rax], T_closure
  6989 000042E2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6990 000042E6 48C74009[F3420000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ed
  6991 000042EE E937030000              	jmp .L_lambda_simple_end_00ed
  6992                                  .L_lambda_simple_code_00ed:	; lambda-simple body
  6993 000042F3 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6994 000042F9 740B                    	je .L_lambda_simple_arity_check_ok_00ed
  6995 000042FB FF742410                	push qword [rsp + 8 * 2]
  6996 000042FF 6A01                    	push 1
  6997 00004301 E9E73C0100              	jmp L_error_incorrect_arity_simple
  6998                                  .L_lambda_simple_arity_check_ok_00ed:
  6999 00004306 C8000000                	enter 0, 0
  7000 0000430A BF08000000              	mov rdi, 8*1
  7001 0000430F E8203D0100              	call malloc
  7002 00004314 488B5D20                	mov rbx, PARAM(0)
  7003 00004318 488918                  	mov qword[rax], rbx
  7004 0000431B 48894520                	mov PARAM(0), rax
  7005 0000431F 48B8-                   	mov rax, sob_void
  7005 00004321 [0000000000000000] 
  7006                                  
  7007 00004329 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7008 0000432E E8013D0100              	call malloc
  7009 00004333 50                      	push rax
  7010 00004334 BF08000000              	mov rdi, 8 * 1	; new rib
  7011 00004339 E8F63C0100              	call malloc
  7012 0000433E 50                      	push rax
  7013 0000433F BF18000000              	mov rdi, 8 * 3	; extended env
  7014 00004344 E8EB3C0100              	call malloc
  7015 00004349 488B7D10                	mov rdi, ENV
  7016 0000434D BE00000000              	mov rsi, 0
  7017 00004352 BA01000000              	mov rdx, 1
  7018                                  .L_lambda_simple_env_loop_00ee:	; ext_env[i + 1] <-- env[i]
  7019 00004357 4883FE02                	cmp rsi, 2
  7020 0000435B 7410                    	je .L_lambda_simple_env_end_00ee
  7021 0000435D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7022 00004361 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7023 00004365 48FFC6                  	inc rsi
  7024 00004368 48FFC2                  	inc rdx
  7025 0000436B EBEA                    	jmp .L_lambda_simple_env_loop_00ee
  7026                                  .L_lambda_simple_env_end_00ee:
  7027 0000436D 5B                      	pop rbx
  7028 0000436E BE00000000              	mov rsi, 0
  7029                                  .L_lambda_simple_params_loop_00ee:	; copy params
  7030 00004373 4883FE01                	cmp rsi, 1
  7031 00004377 740E                    	je .L_lambda_simple_params_end_00ee
  7032 00004379 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7033 0000437E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7034 00004382 48FFC6                  	inc rsi
  7035 00004385 EBEC                    	jmp .L_lambda_simple_params_loop_00ee
  7036                                  .L_lambda_simple_params_end_00ee:
  7037 00004387 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7038 0000438A 4889C3                  	mov rbx, rax
  7039 0000438D 58                      	pop rax
  7040 0000438E C60004                  	mov byte [rax], T_closure
  7041 00004391 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7042 00004395 48C74009[A2430000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ee
  7043 0000439D E98E010000              	jmp .L_lambda_simple_end_00ee
  7044                                  .L_lambda_simple_code_00ee:	; lambda-simple body
  7045 000043A2 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7046 000043A8 740B                    	je .L_lambda_simple_arity_check_ok_00ee
  7047 000043AA FF742410                	push qword [rsp + 8 * 2]
  7048 000043AE 6A01                    	push 1
  7049 000043B0 E9383C0100              	jmp L_error_incorrect_arity_simple
  7050                                  .L_lambda_simple_arity_check_ok_00ee:
  7051 000043B5 C8000000                	enter 0, 0
  7052                                  	; preparing a non-tail-call
  7053                                  	; preparing a non-tail-call
  7054 000043B9 488B4520                	mov rax, PARAM(0)	; param s
  7055 000043BD 50                      	push rax
  7056 000043BE 6A01                    	push 1	; arg count
  7057 000043C0 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  7058 000043C8 803805                  	cmp byte [rax], T_undefined
  7059 000043CB 0F84363B0100            	je L_error_fvar_undefined
  7060 000043D1 803804                  	cmp byte [rax], T_closure
  7061 000043D4 0F85B13B0100            	jne L_error_non_closure
  7062 000043DA FF7001                  	push SOB_CLOSURE_ENV(rax)
  7063 000043DD FF5009                  	call SOB_CLOSURE_CODE(rax)
  7064 000043E0 50                      	push rax
  7065 000043E1 6A01                    	push 1	; arg count
  7066 000043E3 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
  7067 000043EB 803805                  	cmp byte [rax], T_undefined
  7068 000043EE 0F84133B0100            	je L_error_fvar_undefined
  7069 000043F4 803804                  	cmp byte [rax], T_closure
  7070 000043F7 0F858E3B0100            	jne L_error_non_closure
  7071 000043FD FF7001                  	push SOB_CLOSURE_ENV(rax)
  7072 00004400 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7073 00004403 483D[02000000]          	cmp rax, sob_boolean_false
  7074 00004409 0F851D010000            	jne .L_or_end_0018
  7075                                  	; preparing a non-tail-call
  7076                                  	; preparing a non-tail-call
  7077 0000440F 488B4520                	mov rax, PARAM(0)	; param s
  7078 00004413 50                      	push rax
  7079 00004414 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  7080 0000441C 803805                  	cmp byte [rax], T_undefined
  7081 0000441F 0F84E23A0100            	je L_error_fvar_undefined
  7082 00004425 50                      	push rax
  7083 00004426 6A02                    	push 2	; arg count
  7084 00004428 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
  7085 00004430 803805                  	cmp byte [rax], T_undefined
  7086 00004433 0F84CE3A0100            	je L_error_fvar_undefined
  7087 00004439 803804                  	cmp byte [rax], T_closure
  7088 0000443C 0F85493B0100            	jne L_error_non_closure
  7089 00004442 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7090 00004445 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7091 00004448 50                      	push rax
  7092 00004449 488B4510                	mov rax, ENV
  7093 0000444D 488B4008                	mov rax, qword [rax + 8 * 1]
  7094 00004451 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  7095 00004454 50                      	push rax
  7096 00004455 6A02                    	push 2	; arg count
  7097 00004457 488B0425[08100000]      	mov rax, qword [free_var_33]	; free var apply
  7098 0000445F 803805                  	cmp byte [rax], T_undefined
  7099 00004462 0F849F3A0100            	je L_error_fvar_undefined
  7100 00004468 803804                  	cmp byte [rax], T_closure
  7101 0000446B 0F851A3B0100            	jne L_error_non_closure
  7102 00004471 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7103 00004474 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7104 00004477 483D[02000000]          	cmp rax, sob_boolean_false
  7105 0000447D 0F849F000000            	je .L_if_else_00a1
  7106                                  	; preparing a tail-call
  7107                                  	; preparing a non-tail-call
  7108 00004483 488B4520                	mov rax, PARAM(0)	; param s
  7109 00004487 50                      	push rax
  7110 00004488 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  7111 00004490 803805                  	cmp byte [rax], T_undefined
  7112 00004493 0F846E3A0100            	je L_error_fvar_undefined
  7113 00004499 50                      	push rax
  7114 0000449A 6A02                    	push 2	; arg count
  7115 0000449C 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
  7116 000044A4 803805                  	cmp byte [rax], T_undefined
  7117 000044A7 0F845A3A0100            	je L_error_fvar_undefined
  7118 000044AD 803804                  	cmp byte [rax], T_closure
  7119 000044B0 0F85D53A0100            	jne L_error_non_closure
  7120 000044B6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7121 000044B9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7122 000044BC 50                      	push rax
  7123 000044BD 6A01                    	push 1	; arg count
  7124 000044BF 488B4510                	mov rax, ENV
  7125 000044C3 488B00                  	mov rax, qword [rax + 8 * 0]
  7126 000044C6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  7127 000044C9 488B00                  	mov rax, qword [rax]
  7128 000044CC 803804                  	cmp byte [rax], T_closure
  7129 000044CF 0F85B63A0100            	jne L_error_non_closure
  7130 000044D5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7131 000044D8 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7132 000044DB FF7500                  	push qword[rbp]
  7133 000044DE 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7134 000044E1 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7135 000044E5 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7136 000044E9 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7137 000044ED 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7138 000044F0 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7139 000044F3 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7140 000044F8 4983C103                	add r9, 3 	 ;for getting to the params
  7141 000044FC 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7142 00004500 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7143                                  .L_tc_recycle_frame_loop_0142:
  7144 00004503 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7145 00004506 7410                    	je .L_tc_recycle_frame_done_0142
  7146 00004508 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7147 0000450B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7148 0000450E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7149 00004512 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7150 00004516 EBEB                    	jmp .L_tc_recycle_frame_loop_0142
  7151                                  .L_tc_recycle_frame_done_0142:
  7152 00004518 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7153 00004519 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7154 0000451D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7155 00004520 EB0A                    	jmp .L_if_end_00a1
  7156                                  .L_if_else_00a1:
  7157 00004522 48B8-                   	mov rax, L_constants + 2
  7157 00004524 [0200000000000000] 
  7158                                  .L_if_end_00a1:
  7159                                  .L_or_end_0018:
  7160 0000452C C9                      	leave
  7161 0000452D C21800                  	ret AND_KILL_FRAME(1)
  7162                                  .L_lambda_simple_end_00ee:	; new closure is in rax
  7163 00004530 50                      	push rax
  7164 00004531 488B4520                	mov rax, PARAM(0)	; param loop
  7165 00004535 8F00                    	pop qword [rax]
  7166 00004537 48B8-                   	mov rax, sob_void
  7166 00004539 [0000000000000000] 
  7167                                  
  7168                                  	; preparing a non-tail-call
  7169 00004541 488B4510                	mov rax, ENV
  7170 00004545 488B00                  	mov rax, qword [rax + 8 * 0]
  7171 00004548 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  7172 0000454C 50                      	push rax
  7173 0000454D 6A01                    	push 1	; arg count
  7174 0000454F 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
  7175 00004557 803805                  	cmp byte [rax], T_undefined
  7176 0000455A 0F84A7390100            	je L_error_fvar_undefined
  7177 00004560 803804                  	cmp byte [rax], T_closure
  7178 00004563 0F85223A0100            	jne L_error_non_closure
  7179 00004569 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7180 0000456C FF5009                  	call SOB_CLOSURE_CODE(rax)
  7181 0000456F 483D[02000000]          	cmp rax, sob_boolean_false
  7182 00004575 0F85AB000000            	jne .L_or_end_0019
  7183                                  	; preparing a non-tail-call
  7184 0000457B 488B4510                	mov rax, ENV
  7185 0000457F 488B00                  	mov rax, qword [rax + 8 * 0]
  7186 00004582 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  7187 00004586 50                      	push rax
  7188 00004587 6A01                    	push 1	; arg count
  7189 00004589 488B0425[36150000]      	mov rax, qword [free_var_111]	; free var pair?
  7190 00004591 803805                  	cmp byte [rax], T_undefined
  7191 00004594 0F846D390100            	je L_error_fvar_undefined
  7192 0000459A 803804                  	cmp byte [rax], T_closure
  7193 0000459D 0F85E8390100            	jne L_error_non_closure
  7194 000045A3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7195 000045A6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7196 000045A9 483D[02000000]          	cmp rax, sob_boolean_false
  7197 000045AF 746B                    	je .L_if_else_00a2
  7198                                  	; preparing a tail-call
  7199 000045B1 488B4510                	mov rax, ENV
  7200 000045B5 488B00                  	mov rax, qword [rax + 8 * 0]
  7201 000045B8 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  7202 000045BC 50                      	push rax
  7203 000045BD 6A01                    	push 1	; arg count
  7204 000045BF 488B4520                	mov rax, PARAM(0)	; param loop
  7205 000045C3 488B00                  	mov rax, qword [rax]
  7206 000045C6 803804                  	cmp byte [rax], T_closure
  7207 000045C9 0F85BC390100            	jne L_error_non_closure
  7208 000045CF FF7001                  	push SOB_CLOSURE_ENV(rax)
  7209 000045D2 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7210 000045D5 FF7500                  	push qword[rbp]
  7211 000045D8 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7212 000045DB 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7213 000045DF 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7214 000045E3 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7215 000045E7 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7216 000045EA 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7217 000045ED 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7218 000045F2 4983C103                	add r9, 3 	 ;for getting to the params
  7219 000045F6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7220 000045FA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7221                                  .L_tc_recycle_frame_loop_0143:
  7222 000045FD 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7223 00004600 7410                    	je .L_tc_recycle_frame_done_0143
  7224 00004602 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7225 00004605 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7226 00004608 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7227 0000460C 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7228 00004610 EBEB                    	jmp .L_tc_recycle_frame_loop_0143
  7229                                  .L_tc_recycle_frame_done_0143:
  7230 00004612 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7231 00004613 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7232 00004617 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7233 0000461A EB0A                    	jmp .L_if_end_00a2
  7234                                  .L_if_else_00a2:
  7235 0000461C 48B8-                   	mov rax, L_constants + 2
  7235 0000461E [0200000000000000] 
  7236                                  .L_if_end_00a2:
  7237                                  .L_or_end_0019:
  7238 00004626 C9                      	leave
  7239 00004627 C21800                  	ret AND_KILL_FRAME(1)
  7240                                  .L_lambda_simple_end_00ed:	; new closure is in rax
  7241 0000462A 803804                  	cmp byte [rax], T_closure
  7242 0000462D 0F8558390100            	jne L_error_non_closure
  7243 00004633 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7244 00004636 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7245 00004639 FF7500                  	push qword[rbp]
  7246 0000463C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7247 0000463F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7248 00004643 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7249 00004647 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7250 0000464B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7251 0000464E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7252 00004651 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7253 00004656 4983C103                	add r9, 3 	 ;for getting to the params
  7254 0000465A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7255 0000465E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7256                                  .L_tc_recycle_frame_loop_0144:
  7257 00004661 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7258 00004664 7410                    	je .L_tc_recycle_frame_done_0144
  7259 00004666 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7260 00004669 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7261 0000466C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7262 00004670 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7263 00004674 EBEB                    	jmp .L_tc_recycle_frame_loop_0144
  7264                                  .L_tc_recycle_frame_done_0144:
  7265 00004676 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7266 00004677 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7267 0000467B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7268 0000467E C9                      	leave
  7269 0000467F C22000                  	ret AND_KILL_FRAME(2)
  7270 00004682 E9DE040000              	jmp .L_lambda_opt_end_001d	; new closure is in rax
  7271                                  .L_lambda_opt_arity_check_more_001d:
  7272 00004687 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  7273 0000468C 49B9-                   	mov r9, sob_nil
  7273 0000468E [0100000000000000] 
  7274 00004696 4889E3                  	mov rbx, rsp 
  7275 00004699 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  7276 0000469D 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  7277 000046A0 49C1E003                	shl r8, 3
  7278 000046A4 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  7279 000046A7 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  7280                                  .L_lambda_opt_stack_shrink_loop_001d:
  7281 000046AC 4983F801                	cmp r8, 1
  7282 000046B0 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_001d
  7283 000046B2 BF11000000              	mov rdi, 1+8+8 ;for pair
  7284 000046B7 E878390100              	call malloc;to create the pair in the stack
  7285 000046BC C60021                  	mov byte [rax], T_pair ; to make it a pair
  7286 000046BF 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
  7287 000046C2 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
  7288 000046C6 4C894809                 	mov qword[rax+1+8],r9
  7289 000046CA 4989C1                  	mov r9, rax ;for the recursion 
  7290 000046CD 49FFC8                  	dec r8 ;we finished copy another opt param to the list
  7291 000046D0 4883EB08                	sub rbx, 8 ;to get the next param to copy
  7292 000046D4 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_001d
  7293                                  .L_lambda_opt_stack_shrink_loop_exit_001d:
  7294 000046D6 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
  7295 000046DB 4883E902                	sub rcx, 2
  7296 000046DF 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
  7297 000046E3 4801CC                  	add rsp, rcx ;shrinking the stack
  7298 000046E6 4889E0                  	mov rax, rsp
  7299 000046E9 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
  7300 000046EC 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
  7301 000046F0 49FFC8                  	dec r8 ;we start with param 0, not 1 
  7302 000046F3 4883C018                	add rax, 3 * 8;now rax is param 0
  7303 000046F7 49C1E003                	shl r8, 3;convert to byte
  7304 000046FB 4C01C0                  	add rax, r8;now rax is the top of the stack
  7305 000046FE 4C8908                  	mov qword[rax], r9;puting the list at the top
  7306 00004701 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
  7307 00004705 4889E3                  	mov rbx, rsp 
  7308 00004708 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
  7309 0000470B 41BA01000000            	mov r10, 1;r10 is the not opt params length
  7310 00004711 49FFCA                  	dec r10 
  7311 00004714 49C1E203                	shl r10, 3;to get bytes
  7312 00004718 4883C318                	add rbx, 3*8;rbx is the first param
  7313 0000471C 4C01D3                  	add rbx, r10; rbx is where the address to copy to
  7314 0000471F 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  7315 00004722 4C8900                  	mov qword[rax], r8
  7316 00004725 4883E808                	sub rax, 8
  7317 00004729 4883EB08                	sub rbx, 8
  7318 0000472D 4889E0                  	mov rax, rsp
  7319 00004730 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  7320 00004733 48C744241002000000      	mov qword [rsp+2*8], 2
  7321 0000473C 488B5808                	mov rbx, qword[rax + 8 *1]
  7322 00004740 48895C2408              	mov qword [rsp + 1*8] ,rbx
  7323 00004745 488B18                  	mov rbx, qword[rax]
  7324 00004748 48891C24                	mov qword [rsp], rbx
  7325 0000474C C8000000                	enter 0, 0
  7326                                  	; preparing a tail-call
  7327 00004750 48B8-                   	mov rax, L_constants + 1993
  7327 00004752 [C907000000000000] 
  7328 0000475A 50                      	push rax
  7329 0000475B 6A01                    	push 1	; arg count
  7330 0000475D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7331 00004762 E8CD380100              	call malloc
  7332 00004767 50                      	push rax
  7333 00004768 BF10000000              	mov rdi, 8 * 2	; new rib
  7334 0000476D E8C2380100              	call malloc
  7335 00004772 50                      	push rax
  7336 00004773 BF10000000              	mov rdi, 8 * 2	; extended env
  7337 00004778 E8B7380100              	call malloc
  7338 0000477D 488B7D10                	mov rdi, ENV
  7339 00004781 BE00000000              	mov rsi, 0
  7340 00004786 BA01000000              	mov rdx, 1
  7341                                  .L_lambda_simple_env_loop_00eb:	; ext_env[i + 1] <-- env[i]
  7342 0000478B 4883FE01                	cmp rsi, 1
  7343 0000478F 7410                    	je .L_lambda_simple_env_end_00eb
  7344 00004791 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7345 00004795 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7346 00004799 48FFC6                  	inc rsi
  7347 0000479C 48FFC2                  	inc rdx
  7348 0000479F EBEA                    	jmp .L_lambda_simple_env_loop_00eb
  7349                                  .L_lambda_simple_env_end_00eb:
  7350 000047A1 5B                      	pop rbx
  7351 000047A2 BE00000000              	mov rsi, 0
  7352                                  .L_lambda_simple_params_loop_00eb:	; copy params
  7353 000047A7 4883FE02                	cmp rsi, 2
  7354 000047AB 740E                    	je .L_lambda_simple_params_end_00eb
  7355 000047AD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7356 000047B2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7357 000047B6 48FFC6                  	inc rsi
  7358 000047B9 EBEC                    	jmp .L_lambda_simple_params_loop_00eb
  7359                                  .L_lambda_simple_params_end_00eb:
  7360 000047BB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7361 000047BE 4889C3                  	mov rbx, rax
  7362 000047C1 58                      	pop rax
  7363 000047C2 C60004                  	mov byte [rax], T_closure
  7364 000047C5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7365 000047C9 48C74009[D6470000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00eb
  7366 000047D1 E937030000              	jmp .L_lambda_simple_end_00eb
  7367                                  .L_lambda_simple_code_00eb:	; lambda-simple body
  7368 000047D6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7369 000047DC 740B                    	je .L_lambda_simple_arity_check_ok_00eb
  7370 000047DE FF742410                	push qword [rsp + 8 * 2]
  7371 000047E2 6A01                    	push 1
  7372 000047E4 E904380100              	jmp L_error_incorrect_arity_simple
  7373                                  .L_lambda_simple_arity_check_ok_00eb:
  7374 000047E9 C8000000                	enter 0, 0
  7375 000047ED BF08000000              	mov rdi, 8*1
  7376 000047F2 E83D380100              	call malloc
  7377 000047F7 488B5D20                	mov rbx, PARAM(0)
  7378 000047FB 488918                  	mov qword[rax], rbx
  7379 000047FE 48894520                	mov PARAM(0), rax
  7380 00004802 48B8-                   	mov rax, sob_void
  7380 00004804 [0000000000000000] 
  7381                                  
  7382 0000480C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7383 00004811 E81E380100              	call malloc
  7384 00004816 50                      	push rax
  7385 00004817 BF08000000              	mov rdi, 8 * 1	; new rib
  7386 0000481C E813380100              	call malloc
  7387 00004821 50                      	push rax
  7388 00004822 BF18000000              	mov rdi, 8 * 3	; extended env
  7389 00004827 E808380100              	call malloc
  7390 0000482C 488B7D10                	mov rdi, ENV
  7391 00004830 BE00000000              	mov rsi, 0
  7392 00004835 BA01000000              	mov rdx, 1
  7393                                  .L_lambda_simple_env_loop_00ec:	; ext_env[i + 1] <-- env[i]
  7394 0000483A 4883FE02                	cmp rsi, 2
  7395 0000483E 7410                    	je .L_lambda_simple_env_end_00ec
  7396 00004840 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7397 00004844 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7398 00004848 48FFC6                  	inc rsi
  7399 0000484B 48FFC2                  	inc rdx
  7400 0000484E EBEA                    	jmp .L_lambda_simple_env_loop_00ec
  7401                                  .L_lambda_simple_env_end_00ec:
  7402 00004850 5B                      	pop rbx
  7403 00004851 BE00000000              	mov rsi, 0
  7404                                  .L_lambda_simple_params_loop_00ec:	; copy params
  7405 00004856 4883FE01                	cmp rsi, 1
  7406 0000485A 740E                    	je .L_lambda_simple_params_end_00ec
  7407 0000485C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7408 00004861 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7409 00004865 48FFC6                  	inc rsi
  7410 00004868 EBEC                    	jmp .L_lambda_simple_params_loop_00ec
  7411                                  .L_lambda_simple_params_end_00ec:
  7412 0000486A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7413 0000486D 4889C3                  	mov rbx, rax
  7414 00004870 58                      	pop rax
  7415 00004871 C60004                  	mov byte [rax], T_closure
  7416 00004874 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7417 00004878 48C74009[85480000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ec
  7418 00004880 E98E010000              	jmp .L_lambda_simple_end_00ec
  7419                                  .L_lambda_simple_code_00ec:	; lambda-simple body
  7420 00004885 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7421 0000488B 740B                    	je .L_lambda_simple_arity_check_ok_00ec
  7422 0000488D FF742410                	push qword [rsp + 8 * 2]
  7423 00004891 6A01                    	push 1
  7424 00004893 E955370100              	jmp L_error_incorrect_arity_simple
  7425                                  .L_lambda_simple_arity_check_ok_00ec:
  7426 00004898 C8000000                	enter 0, 0
  7427                                  	; preparing a non-tail-call
  7428                                  	; preparing a non-tail-call
  7429 0000489C 488B4520                	mov rax, PARAM(0)	; param s
  7430 000048A0 50                      	push rax
  7431 000048A1 6A01                    	push 1	; arg count
  7432 000048A3 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  7433 000048AB 803805                  	cmp byte [rax], T_undefined
  7434 000048AE 0F8453360100            	je L_error_fvar_undefined
  7435 000048B4 803804                  	cmp byte [rax], T_closure
  7436 000048B7 0F85CE360100            	jne L_error_non_closure
  7437 000048BD FF7001                  	push SOB_CLOSURE_ENV(rax)
  7438 000048C0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7439 000048C3 50                      	push rax
  7440 000048C4 6A01                    	push 1	; arg count
  7441 000048C6 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
  7442 000048CE 803805                  	cmp byte [rax], T_undefined
  7443 000048D1 0F8430360100            	je L_error_fvar_undefined
  7444 000048D7 803804                  	cmp byte [rax], T_closure
  7445 000048DA 0F85AB360100            	jne L_error_non_closure
  7446 000048E0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7447 000048E3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7448 000048E6 483D[02000000]          	cmp rax, sob_boolean_false
  7449 000048EC 0F851D010000            	jne .L_or_end_0016
  7450                                  	; preparing a non-tail-call
  7451                                  	; preparing a non-tail-call
  7452 000048F2 488B4520                	mov rax, PARAM(0)	; param s
  7453 000048F6 50                      	push rax
  7454 000048F7 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  7455 000048FF 803805                  	cmp byte [rax], T_undefined
  7456 00004902 0F84FF350100            	je L_error_fvar_undefined
  7457 00004908 50                      	push rax
  7458 00004909 6A02                    	push 2	; arg count
  7459 0000490B 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
  7460 00004913 803805                  	cmp byte [rax], T_undefined
  7461 00004916 0F84EB350100            	je L_error_fvar_undefined
  7462 0000491C 803804                  	cmp byte [rax], T_closure
  7463 0000491F 0F8566360100            	jne L_error_non_closure
  7464 00004925 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7465 00004928 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7466 0000492B 50                      	push rax
  7467 0000492C 488B4510                	mov rax, ENV
  7468 00004930 488B4008                	mov rax, qword [rax + 8 * 1]
  7469 00004934 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  7470 00004937 50                      	push rax
  7471 00004938 6A02                    	push 2	; arg count
  7472 0000493A 488B0425[08100000]      	mov rax, qword [free_var_33]	; free var apply
  7473 00004942 803805                  	cmp byte [rax], T_undefined
  7474 00004945 0F84BC350100            	je L_error_fvar_undefined
  7475 0000494B 803804                  	cmp byte [rax], T_closure
  7476 0000494E 0F8537360100            	jne L_error_non_closure
  7477 00004954 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7478 00004957 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7479 0000495A 483D[02000000]          	cmp rax, sob_boolean_false
  7480 00004960 0F849F000000            	je .L_if_else_009f
  7481                                  	; preparing a tail-call
  7482                                  	; preparing a non-tail-call
  7483 00004966 488B4520                	mov rax, PARAM(0)	; param s
  7484 0000496A 50                      	push rax
  7485 0000496B 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  7486 00004973 803805                  	cmp byte [rax], T_undefined
  7487 00004976 0F848B350100            	je L_error_fvar_undefined
  7488 0000497C 50                      	push rax
  7489 0000497D 6A02                    	push 2	; arg count
  7490 0000497F 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
  7491 00004987 803805                  	cmp byte [rax], T_undefined
  7492 0000498A 0F8477350100            	je L_error_fvar_undefined
  7493 00004990 803804                  	cmp byte [rax], T_closure
  7494 00004993 0F85F2350100            	jne L_error_non_closure
  7495 00004999 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7496 0000499C FF5009                  	call SOB_CLOSURE_CODE(rax)
  7497 0000499F 50                      	push rax
  7498 000049A0 6A01                    	push 1	; arg count
  7499 000049A2 488B4510                	mov rax, ENV
  7500 000049A6 488B00                  	mov rax, qword [rax + 8 * 0]
  7501 000049A9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  7502 000049AC 488B00                  	mov rax, qword [rax]
  7503 000049AF 803804                  	cmp byte [rax], T_closure
  7504 000049B2 0F85D3350100            	jne L_error_non_closure
  7505 000049B8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7506 000049BB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7507 000049BE FF7500                  	push qword[rbp]
  7508 000049C1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7509 000049C4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7510 000049C8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7511 000049CC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7512 000049D0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7513 000049D3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7514 000049D6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7515 000049DB 4983C103                	add r9, 3 	 ;for getting to the params
  7516 000049DF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7517 000049E3 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7518                                  .L_tc_recycle_frame_loop_013f:
  7519 000049E6 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7520 000049E9 7410                    	je .L_tc_recycle_frame_done_013f
  7521 000049EB 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7522 000049EE 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7523 000049F1 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7524 000049F5 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7525 000049F9 EBEB                    	jmp .L_tc_recycle_frame_loop_013f
  7526                                  .L_tc_recycle_frame_done_013f:
  7527 000049FB 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7528 000049FC 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7529 00004A00 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7530 00004A03 EB0A                    	jmp .L_if_end_009f
  7531                                  .L_if_else_009f:
  7532 00004A05 48B8-                   	mov rax, L_constants + 2
  7532 00004A07 [0200000000000000] 
  7533                                  .L_if_end_009f:
  7534                                  .L_or_end_0016:
  7535 00004A0F C9                      	leave
  7536 00004A10 C21800                  	ret AND_KILL_FRAME(1)
  7537                                  .L_lambda_simple_end_00ec:	; new closure is in rax
  7538 00004A13 50                      	push rax
  7539 00004A14 488B4520                	mov rax, PARAM(0)	; param loop
  7540 00004A18 8F00                    	pop qword [rax]
  7541 00004A1A 48B8-                   	mov rax, sob_void
  7541 00004A1C [0000000000000000] 
  7542                                  
  7543                                  	; preparing a non-tail-call
  7544 00004A24 488B4510                	mov rax, ENV
  7545 00004A28 488B00                  	mov rax, qword [rax + 8 * 0]
  7546 00004A2B 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  7547 00004A2F 50                      	push rax
  7548 00004A30 6A01                    	push 1	; arg count
  7549 00004A32 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
  7550 00004A3A 803805                  	cmp byte [rax], T_undefined
  7551 00004A3D 0F84C4340100            	je L_error_fvar_undefined
  7552 00004A43 803804                  	cmp byte [rax], T_closure
  7553 00004A46 0F853F350100            	jne L_error_non_closure
  7554 00004A4C FF7001                  	push SOB_CLOSURE_ENV(rax)
  7555 00004A4F FF5009                  	call SOB_CLOSURE_CODE(rax)
  7556 00004A52 483D[02000000]          	cmp rax, sob_boolean_false
  7557 00004A58 0F85AB000000            	jne .L_or_end_0017
  7558                                  	; preparing a non-tail-call
  7559 00004A5E 488B4510                	mov rax, ENV
  7560 00004A62 488B00                  	mov rax, qword [rax + 8 * 0]
  7561 00004A65 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  7562 00004A69 50                      	push rax
  7563 00004A6A 6A01                    	push 1	; arg count
  7564 00004A6C 488B0425[36150000]      	mov rax, qword [free_var_111]	; free var pair?
  7565 00004A74 803805                  	cmp byte [rax], T_undefined
  7566 00004A77 0F848A340100            	je L_error_fvar_undefined
  7567 00004A7D 803804                  	cmp byte [rax], T_closure
  7568 00004A80 0F8505350100            	jne L_error_non_closure
  7569 00004A86 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7570 00004A89 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7571 00004A8C 483D[02000000]          	cmp rax, sob_boolean_false
  7572 00004A92 746B                    	je .L_if_else_00a0
  7573                                  	; preparing a tail-call
  7574 00004A94 488B4510                	mov rax, ENV
  7575 00004A98 488B00                  	mov rax, qword [rax + 8 * 0]
  7576 00004A9B 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  7577 00004A9F 50                      	push rax
  7578 00004AA0 6A01                    	push 1	; arg count
  7579 00004AA2 488B4520                	mov rax, PARAM(0)	; param loop
  7580 00004AA6 488B00                  	mov rax, qword [rax]
  7581 00004AA9 803804                  	cmp byte [rax], T_closure
  7582 00004AAC 0F85D9340100            	jne L_error_non_closure
  7583 00004AB2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7584 00004AB5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7585 00004AB8 FF7500                  	push qword[rbp]
  7586 00004ABB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7587 00004ABE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7588 00004AC2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7589 00004AC6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7590 00004ACA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7591 00004ACD 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7592 00004AD0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7593 00004AD5 4983C103                	add r9, 3 	 ;for getting to the params
  7594 00004AD9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7595 00004ADD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7596                                  .L_tc_recycle_frame_loop_0140:
  7597 00004AE0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7598 00004AE3 7410                    	je .L_tc_recycle_frame_done_0140
  7599 00004AE5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7600 00004AE8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7601 00004AEB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7602 00004AEF 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7603 00004AF3 EBEB                    	jmp .L_tc_recycle_frame_loop_0140
  7604                                  .L_tc_recycle_frame_done_0140:
  7605 00004AF5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7606 00004AF6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7607 00004AFA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7608 00004AFD EB0A                    	jmp .L_if_end_00a0
  7609                                  .L_if_else_00a0:
  7610 00004AFF 48B8-                   	mov rax, L_constants + 2
  7610 00004B01 [0200000000000000] 
  7611                                  .L_if_end_00a0:
  7612                                  .L_or_end_0017:
  7613 00004B09 C9                      	leave
  7614 00004B0A C21800                  	ret AND_KILL_FRAME(1)
  7615                                  .L_lambda_simple_end_00eb:	; new closure is in rax
  7616 00004B0D 803804                  	cmp byte [rax], T_closure
  7617 00004B10 0F8575340100            	jne L_error_non_closure
  7618 00004B16 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7619 00004B19 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7620 00004B1C FF7500                  	push qword[rbp]
  7621 00004B1F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7622 00004B22 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7623 00004B26 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7624 00004B2A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7625 00004B2E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7626 00004B31 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7627 00004B34 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7628 00004B39 4983C103                	add r9, 3 	 ;for getting to the params
  7629 00004B3D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7630 00004B41 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7631                                  .L_tc_recycle_frame_loop_0141:
  7632 00004B44 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7633 00004B47 7410                    	je .L_tc_recycle_frame_done_0141
  7634 00004B49 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7635 00004B4C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7636 00004B4F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7637 00004B53 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7638 00004B57 EBEB                    	jmp .L_tc_recycle_frame_loop_0141
  7639                                  .L_tc_recycle_frame_done_0141:
  7640 00004B59 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7641 00004B5A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7642 00004B5E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7643 00004B61 C9                      	leave
  7644 00004B62 C22000                  	ret AND_KILL_FRAME(2)
  7645                                  .L_lambda_opt_end_001d:	; new closure is in rax
  7646 00004B65 48890425[E60F0000]      	mov qword [free_var_31], rax
  7647 00004B6D 48B8-                   	mov rax, sob_void
  7647 00004B6F [0000000000000000] 
  7648                                  
  7649 00004B77 4889C7                  	mov rdi, rax
  7650 00004B7A E80A370100              	call print_sexpr_if_not_void
  7651                                  	; preparing a non-tail-call
  7652 00004B7F 48B8-                   	mov rax, L_constants + 1993
  7652 00004B81 [C907000000000000] 
  7653 00004B89 50                      	push rax
  7654 00004B8A 48B8-                   	mov rax, L_constants + 1993
  7654 00004B8C [C907000000000000] 
  7655 00004B94 50                      	push rax
  7656 00004B95 6A02                    	push 2	; arg count
  7657 00004B97 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7658 00004B9C E893340100              	call malloc
  7659 00004BA1 50                      	push rax
  7660 00004BA2 BF00000000              	mov rdi, 8 * 0	; new rib
  7661 00004BA7 E888340100              	call malloc
  7662 00004BAC 50                      	push rax
  7663 00004BAD BF08000000              	mov rdi, 8 * 1	; extended env
  7664 00004BB2 E87D340100              	call malloc
  7665 00004BB7 488B7D10                	mov rdi, ENV
  7666 00004BBB BE00000000              	mov rsi, 0
  7667 00004BC0 BA01000000              	mov rdx, 1
  7668                                  .L_lambda_simple_env_loop_00ef:	; ext_env[i + 1] <-- env[i]
  7669 00004BC5 4883FE00                	cmp rsi, 0
  7670 00004BC9 7410                    	je .L_lambda_simple_env_end_00ef
  7671 00004BCB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7672 00004BCF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7673 00004BD3 48FFC6                  	inc rsi
  7674 00004BD6 48FFC2                  	inc rdx
  7675 00004BD9 EBEA                    	jmp .L_lambda_simple_env_loop_00ef
  7676                                  .L_lambda_simple_env_end_00ef:
  7677 00004BDB 5B                      	pop rbx
  7678 00004BDC BE00000000              	mov rsi, 0
  7679                                  .L_lambda_simple_params_loop_00ef:	; copy params
  7680 00004BE1 4883FE00                	cmp rsi, 0
  7681 00004BE5 740E                    	je .L_lambda_simple_params_end_00ef
  7682 00004BE7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7683 00004BEC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7684 00004BF0 48FFC6                  	inc rsi
  7685 00004BF3 EBEC                    	jmp .L_lambda_simple_params_loop_00ef
  7686                                  .L_lambda_simple_params_end_00ef:
  7687 00004BF5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7688 00004BF8 4889C3                  	mov rbx, rax
  7689 00004BFB 58                      	pop rax
  7690 00004BFC C60004                  	mov byte [rax], T_closure
  7691 00004BFF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7692 00004C03 48C74009[104C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ef
  7693 00004C0B E94B070000              	jmp .L_lambda_simple_end_00ef
  7694                                  .L_lambda_simple_code_00ef:	; lambda-simple body
  7695 00004C10 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7696 00004C16 740B                    	je .L_lambda_simple_arity_check_ok_00ef
  7697 00004C18 FF742410                	push qword [rsp + 8 * 2]
  7698 00004C1C 6A02                    	push 2
  7699 00004C1E E9CA330100              	jmp L_error_incorrect_arity_simple
  7700                                  .L_lambda_simple_arity_check_ok_00ef:
  7701 00004C23 C8000000                	enter 0, 0
  7702 00004C27 BF08000000              	mov rdi, 8*1
  7703 00004C2C E803340100              	call malloc
  7704 00004C31 488B5D20                	mov rbx, PARAM(0)
  7705 00004C35 488918                  	mov qword[rax], rbx
  7706 00004C38 48894520                	mov PARAM(0), rax
  7707 00004C3C 48B8-                   	mov rax, sob_void
  7707 00004C3E [0000000000000000] 
  7708                                  
  7709 00004C46 BF08000000              	mov rdi, 8*1
  7710 00004C4B E8E4330100              	call malloc
  7711 00004C50 488B5D28                	mov rbx, PARAM(1)
  7712 00004C54 488918                  	mov qword[rax], rbx
  7713 00004C57 48894528                	mov PARAM(1), rax
  7714 00004C5B 48B8-                   	mov rax, sob_void
  7714 00004C5D [0000000000000000] 
  7715                                  
  7716 00004C65 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7717 00004C6A E8C5330100              	call malloc
  7718 00004C6F 50                      	push rax
  7719 00004C70 BF10000000              	mov rdi, 8 * 2	; new rib
  7720 00004C75 E8BA330100              	call malloc
  7721 00004C7A 50                      	push rax
  7722 00004C7B BF10000000              	mov rdi, 8 * 2	; extended env
  7723 00004C80 E8AF330100              	call malloc
  7724 00004C85 488B7D10                	mov rdi, ENV
  7725 00004C89 BE00000000              	mov rsi, 0
  7726 00004C8E BA01000000              	mov rdx, 1
  7727                                  .L_lambda_simple_env_loop_00f0:	; ext_env[i + 1] <-- env[i]
  7728 00004C93 4883FE01                	cmp rsi, 1
  7729 00004C97 7410                    	je .L_lambda_simple_env_end_00f0
  7730 00004C99 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7731 00004C9D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7732 00004CA1 48FFC6                  	inc rsi
  7733 00004CA4 48FFC2                  	inc rdx
  7734 00004CA7 EBEA                    	jmp .L_lambda_simple_env_loop_00f0
  7735                                  .L_lambda_simple_env_end_00f0:
  7736 00004CA9 5B                      	pop rbx
  7737 00004CAA BE00000000              	mov rsi, 0
  7738                                  .L_lambda_simple_params_loop_00f0:	; copy params
  7739 00004CAF 4883FE02                	cmp rsi, 2
  7740 00004CB3 740E                    	je .L_lambda_simple_params_end_00f0
  7741 00004CB5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7742 00004CBA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7743 00004CBE 48FFC6                  	inc rsi
  7744 00004CC1 EBEC                    	jmp .L_lambda_simple_params_loop_00f0
  7745                                  .L_lambda_simple_params_end_00f0:
  7746 00004CC3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7747 00004CC6 4889C3                  	mov rbx, rax
  7748 00004CC9 58                      	pop rax
  7749 00004CCA C60004                  	mov byte [rax], T_closure
  7750 00004CCD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7751 00004CD1 48C74009[DE4C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f0
  7752 00004CD9 E94A010000              	jmp .L_lambda_simple_end_00f0
  7753                                  .L_lambda_simple_code_00f0:	; lambda-simple body
  7754 00004CDE 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7755 00004CE4 740B                    	je .L_lambda_simple_arity_check_ok_00f0
  7756 00004CE6 FF742410                	push qword [rsp + 8 * 2]
  7757 00004CEA 6A02                    	push 2
  7758 00004CEC E9FC320100              	jmp L_error_incorrect_arity_simple
  7759                                  .L_lambda_simple_arity_check_ok_00f0:
  7760 00004CF1 C8000000                	enter 0, 0
  7761                                  	; preparing a non-tail-call
  7762 00004CF5 488B4528                	mov rax, PARAM(1)	; param s
  7763 00004CF9 50                      	push rax
  7764 00004CFA 6A01                    	push 1	; arg count
  7765 00004CFC 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
  7766 00004D04 803805                  	cmp byte [rax], T_undefined
  7767 00004D07 0F84FA310100            	je L_error_fvar_undefined
  7768 00004D0D 803804                  	cmp byte [rax], T_closure
  7769 00004D10 0F8575320100            	jne L_error_non_closure
  7770 00004D16 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7771 00004D19 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7772 00004D1C 483D[02000000]          	cmp rax, sob_boolean_false
  7773 00004D22 740F                    	je .L_if_else_00a3
  7774 00004D24 48B8-                   	mov rax, L_constants + 1
  7774 00004D26 [0100000000000000] 
  7775 00004D2E E9F1000000              	jmp .L_if_end_00a3
  7776                                  .L_if_else_00a3:
  7777                                  	; preparing a tail-call
  7778                                  	; preparing a non-tail-call
  7779                                  	; preparing a non-tail-call
  7780 00004D33 488B4528                	mov rax, PARAM(1)	; param s
  7781 00004D37 50                      	push rax
  7782 00004D38 6A01                    	push 1	; arg count
  7783 00004D3A 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  7784 00004D42 803805                  	cmp byte [rax], T_undefined
  7785 00004D45 0F84BC310100            	je L_error_fvar_undefined
  7786 00004D4B 803804                  	cmp byte [rax], T_closure
  7787 00004D4E 0F8537320100            	jne L_error_non_closure
  7788 00004D54 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7789 00004D57 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7790 00004D5A 50                      	push rax
  7791 00004D5B 488B4520                	mov rax, PARAM(0)	; param f
  7792 00004D5F 50                      	push rax
  7793 00004D60 6A02                    	push 2	; arg count
  7794 00004D62 488B4510                	mov rax, ENV
  7795 00004D66 488B00                  	mov rax, qword [rax + 8 * 0]
  7796 00004D69 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  7797 00004D6C 488B00                  	mov rax, qword [rax]
  7798 00004D6F 803804                  	cmp byte [rax], T_closure
  7799 00004D72 0F8513320100            	jne L_error_non_closure
  7800 00004D78 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7801 00004D7B FF5009                  	call SOB_CLOSURE_CODE(rax)
  7802 00004D7E 50                      	push rax
  7803                                  	; preparing a non-tail-call
  7804                                  	; preparing a non-tail-call
  7805 00004D7F 488B4528                	mov rax, PARAM(1)	; param s
  7806 00004D83 50                      	push rax
  7807 00004D84 6A01                    	push 1	; arg count
  7808 00004D86 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  7809 00004D8E 803805                  	cmp byte [rax], T_undefined
  7810 00004D91 0F8470310100            	je L_error_fvar_undefined
  7811 00004D97 803804                  	cmp byte [rax], T_closure
  7812 00004D9A 0F85EB310100            	jne L_error_non_closure
  7813 00004DA0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7814 00004DA3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7815 00004DA6 50                      	push rax
  7816 00004DA7 6A01                    	push 1	; arg count
  7817 00004DA9 488B4520                	mov rax, PARAM(0)	; param f
  7818 00004DAD 803804                  	cmp byte [rax], T_closure
  7819 00004DB0 0F85D5310100            	jne L_error_non_closure
  7820 00004DB6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7821 00004DB9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7822 00004DBC 50                      	push rax
  7823 00004DBD 6A02                    	push 2	; arg count
  7824 00004DBF 488B0425[16130000]      	mov rax, qword [free_var_79]	; free var cons
  7825 00004DC7 803805                  	cmp byte [rax], T_undefined
  7826 00004DCA 0F8437310100            	je L_error_fvar_undefined
  7827 00004DD0 803804                  	cmp byte [rax], T_closure
  7828 00004DD3 0F85B2310100            	jne L_error_non_closure
  7829 00004DD9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7830 00004DDC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7831 00004DDF FF7500                  	push qword[rbp]
  7832 00004DE2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7833 00004DE5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7834 00004DE9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7835 00004DED 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7836 00004DF1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7837 00004DF4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7838 00004DF7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7839 00004DFC 4983C103                	add r9, 3 	 ;for getting to the params
  7840 00004E00 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7841 00004E04 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7842                                  .L_tc_recycle_frame_loop_0145:
  7843 00004E07 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7844 00004E0A 7410                    	je .L_tc_recycle_frame_done_0145
  7845 00004E0C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7846 00004E0F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7847 00004E12 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7848 00004E16 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7849 00004E1A EBEB                    	jmp .L_tc_recycle_frame_loop_0145
  7850                                  .L_tc_recycle_frame_done_0145:
  7851 00004E1C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7852 00004E1D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7853 00004E21 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7854                                  .L_if_end_00a3:
  7855 00004E24 C9                      	leave
  7856 00004E25 C22000                  	ret AND_KILL_FRAME(2)
  7857                                  .L_lambda_simple_end_00f0:	; new closure is in rax
  7858 00004E28 50                      	push rax
  7859 00004E29 488B4520                	mov rax, PARAM(0)	; param map1
  7860 00004E2D 8F00                    	pop qword [rax]
  7861 00004E2F 48B8-                   	mov rax, sob_void
  7861 00004E31 [0000000000000000] 
  7862                                  
  7863 00004E39 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7864 00004E3E E8F1310100              	call malloc
  7865 00004E43 50                      	push rax
  7866 00004E44 BF10000000              	mov rdi, 8 * 2	; new rib
  7867 00004E49 E8E6310100              	call malloc
  7868 00004E4E 50                      	push rax
  7869 00004E4F BF10000000              	mov rdi, 8 * 2	; extended env
  7870 00004E54 E8DB310100              	call malloc
  7871 00004E59 488B7D10                	mov rdi, ENV
  7872 00004E5D BE00000000              	mov rsi, 0
  7873 00004E62 BA01000000              	mov rdx, 1
  7874                                  .L_lambda_simple_env_loop_00f1:	; ext_env[i + 1] <-- env[i]
  7875 00004E67 4883FE01                	cmp rsi, 1
  7876 00004E6B 7410                    	je .L_lambda_simple_env_end_00f1
  7877 00004E6D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7878 00004E71 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7879 00004E75 48FFC6                  	inc rsi
  7880 00004E78 48FFC2                  	inc rdx
  7881 00004E7B EBEA                    	jmp .L_lambda_simple_env_loop_00f1
  7882                                  .L_lambda_simple_env_end_00f1:
  7883 00004E7D 5B                      	pop rbx
  7884 00004E7E BE00000000              	mov rsi, 0
  7885                                  .L_lambda_simple_params_loop_00f1:	; copy params
  7886 00004E83 4883FE02                	cmp rsi, 2
  7887 00004E87 740E                    	je .L_lambda_simple_params_end_00f1
  7888 00004E89 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7889 00004E8E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7890 00004E92 48FFC6                  	inc rsi
  7891 00004E95 EBEC                    	jmp .L_lambda_simple_params_loop_00f1
  7892                                  .L_lambda_simple_params_end_00f1:
  7893 00004E97 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7894 00004E9A 4889C3                  	mov rbx, rax
  7895 00004E9D 58                      	pop rax
  7896 00004E9E C60004                  	mov byte [rax], T_closure
  7897 00004EA1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7898 00004EA5 48C74009[B24E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f1
  7899 00004EAD E99C010000              	jmp .L_lambda_simple_end_00f1
  7900                                  .L_lambda_simple_code_00f1:	; lambda-simple body
  7901 00004EB2 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7902 00004EB8 740B                    	je .L_lambda_simple_arity_check_ok_00f1
  7903 00004EBA FF742410                	push qword [rsp + 8 * 2]
  7904 00004EBE 6A02                    	push 2
  7905 00004EC0 E928310100              	jmp L_error_incorrect_arity_simple
  7906                                  .L_lambda_simple_arity_check_ok_00f1:
  7907 00004EC5 C8000000                	enter 0, 0
  7908                                  	; preparing a non-tail-call
  7909                                  	; preparing a non-tail-call
  7910 00004EC9 488B4528                	mov rax, PARAM(1)	; param s
  7911 00004ECD 50                      	push rax
  7912 00004ECE 6A01                    	push 1	; arg count
  7913 00004ED0 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  7914 00004ED8 803805                  	cmp byte [rax], T_undefined
  7915 00004EDB 0F8426300100            	je L_error_fvar_undefined
  7916 00004EE1 803804                  	cmp byte [rax], T_closure
  7917 00004EE4 0F85A1300100            	jne L_error_non_closure
  7918 00004EEA FF7001                  	push SOB_CLOSURE_ENV(rax)
  7919 00004EED FF5009                  	call SOB_CLOSURE_CODE(rax)
  7920 00004EF0 50                      	push rax
  7921 00004EF1 6A01                    	push 1	; arg count
  7922 00004EF3 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
  7923 00004EFB 803805                  	cmp byte [rax], T_undefined
  7924 00004EFE 0F8403300100            	je L_error_fvar_undefined
  7925 00004F04 803804                  	cmp byte [rax], T_closure
  7926 00004F07 0F857E300100            	jne L_error_non_closure
  7927 00004F0D FF7001                  	push SOB_CLOSURE_ENV(rax)
  7928 00004F10 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7929 00004F13 483D[02000000]          	cmp rax, sob_boolean_false
  7930 00004F19 740F                    	je .L_if_else_00a4
  7931 00004F1B 48B8-                   	mov rax, L_constants + 1
  7931 00004F1D [0100000000000000] 
  7932 00004F25 E920010000              	jmp .L_if_end_00a4
  7933                                  .L_if_else_00a4:
  7934                                  	; preparing a tail-call
  7935                                  	; preparing a non-tail-call
  7936                                  	; preparing a non-tail-call
  7937 00004F2A 488B4528                	mov rax, PARAM(1)	; param s
  7938 00004F2E 50                      	push rax
  7939 00004F2F 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  7940 00004F37 803805                  	cmp byte [rax], T_undefined
  7941 00004F3A 0F84C72F0100            	je L_error_fvar_undefined
  7942 00004F40 50                      	push rax
  7943 00004F41 6A02                    	push 2	; arg count
  7944 00004F43 488B4510                	mov rax, ENV
  7945 00004F47 488B00                  	mov rax, qword [rax + 8 * 0]
  7946 00004F4A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  7947 00004F4D 488B00                  	mov rax, qword [rax]
  7948 00004F50 803804                  	cmp byte [rax], T_closure
  7949 00004F53 0F8532300100            	jne L_error_non_closure
  7950 00004F59 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7951 00004F5C FF5009                  	call SOB_CLOSURE_CODE(rax)
  7952 00004F5F 50                      	push rax
  7953 00004F60 488B4520                	mov rax, PARAM(0)	; param f
  7954 00004F64 50                      	push rax
  7955 00004F65 6A02                    	push 2	; arg count
  7956 00004F67 488B4510                	mov rax, ENV
  7957 00004F6B 488B00                  	mov rax, qword [rax + 8 * 0]
  7958 00004F6E 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  7959 00004F72 488B00                  	mov rax, qword [rax]
  7960 00004F75 803804                  	cmp byte [rax], T_closure
  7961 00004F78 0F850D300100            	jne L_error_non_closure
  7962 00004F7E FF7001                  	push SOB_CLOSURE_ENV(rax)
  7963 00004F81 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7964 00004F84 50                      	push rax
  7965                                  	; preparing a non-tail-call
  7966                                  	; preparing a non-tail-call
  7967 00004F85 488B4528                	mov rax, PARAM(1)	; param s
  7968 00004F89 50                      	push rax
  7969 00004F8A 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  7970 00004F92 803805                  	cmp byte [rax], T_undefined
  7971 00004F95 0F846C2F0100            	je L_error_fvar_undefined
  7972 00004F9B 50                      	push rax
  7973 00004F9C 6A02                    	push 2	; arg count
  7974 00004F9E 488B4510                	mov rax, ENV
  7975 00004FA2 488B00                  	mov rax, qword [rax + 8 * 0]
  7976 00004FA5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  7977 00004FA8 488B00                  	mov rax, qword [rax]
  7978 00004FAB 803804                  	cmp byte [rax], T_closure
  7979 00004FAE 0F85D72F0100            	jne L_error_non_closure
  7980 00004FB4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7981 00004FB7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7982 00004FBA 50                      	push rax
  7983 00004FBB 488B4520                	mov rax, PARAM(0)	; param f
  7984 00004FBF 50                      	push rax
  7985 00004FC0 6A02                    	push 2	; arg count
  7986 00004FC2 488B0425[08100000]      	mov rax, qword [free_var_33]	; free var apply
  7987 00004FCA 803805                  	cmp byte [rax], T_undefined
  7988 00004FCD 0F84342F0100            	je L_error_fvar_undefined
  7989 00004FD3 803804                  	cmp byte [rax], T_closure
  7990 00004FD6 0F85AF2F0100            	jne L_error_non_closure
  7991 00004FDC FF7001                  	push SOB_CLOSURE_ENV(rax)
  7992 00004FDF FF5009                  	call SOB_CLOSURE_CODE(rax)
  7993 00004FE2 50                      	push rax
  7994 00004FE3 6A02                    	push 2	; arg count
  7995 00004FE5 488B0425[16130000]      	mov rax, qword [free_var_79]	; free var cons
  7996 00004FED 803805                  	cmp byte [rax], T_undefined
  7997 00004FF0 0F84112F0100            	je L_error_fvar_undefined
  7998 00004FF6 803804                  	cmp byte [rax], T_closure
  7999 00004FF9 0F858C2F0100            	jne L_error_non_closure
  8000 00004FFF FF7001                  	push SOB_CLOSURE_ENV(rax)
  8001 00005002 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8002 00005005 FF7500                  	push qword[rbp]
  8003 00005008 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8004 0000500B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8005 0000500F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8006 00005013 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8007 00005017 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8008 0000501A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8009 0000501D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8010 00005022 4983C103                	add r9, 3 	 ;for getting to the params
  8011 00005026 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8012 0000502A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8013                                  .L_tc_recycle_frame_loop_0146:
  8014 0000502D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8015 00005030 7410                    	je .L_tc_recycle_frame_done_0146
  8016 00005032 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8017 00005035 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8018 00005038 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8019 0000503C 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8020 00005040 EBEB                    	jmp .L_tc_recycle_frame_loop_0146
  8021                                  .L_tc_recycle_frame_done_0146:
  8022 00005042 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8023 00005043 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8024 00005047 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8025                                  .L_if_end_00a4:
  8026 0000504A C9                      	leave
  8027 0000504B C22000                  	ret AND_KILL_FRAME(2)
  8028                                  .L_lambda_simple_end_00f1:	; new closure is in rax
  8029 0000504E 50                      	push rax
  8030 0000504F 488B4528                	mov rax, PARAM(1)	; param map-list
  8031 00005053 8F00                    	pop qword [rax]
  8032 00005055 48B8-                   	mov rax, sob_void
  8032 00005057 [0000000000000000] 
  8033                                  
  8034 0000505F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8035 00005064 E8CB2F0100              	call malloc
  8036 00005069 50                      	push rax
  8037 0000506A BF10000000              	mov rdi, 8 * 2	; new rib
  8038 0000506F E8C02F0100              	call malloc
  8039 00005074 50                      	push rax
  8040 00005075 BF10000000              	mov rdi, 8 * 2	; extended env
  8041 0000507A E8B52F0100              	call malloc
  8042 0000507F 488B7D10                	mov rdi, ENV
  8043 00005083 BE00000000              	mov rsi, 0
  8044 00005088 BA01000000              	mov rdx, 1
  8045                                  .L_lambda_opt_env_loop_001e:	; ext_env[i + 1] <-- env[i]
  8046 0000508D 4883FE01                	cmp rsi, 1
  8047 00005091 7410                    	je .L_lambda_opt_env_end_001e
  8048 00005093 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8049 00005097 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8050 0000509B 48FFC6                  	inc rsi
  8051 0000509E 48FFC2                  	inc rdx
  8052 000050A1 EBEA                    	jmp .L_lambda_opt_env_loop_001e
  8053                                  .L_lambda_opt_env_end_001e:
  8054 000050A3 5B                      	pop rbx
  8055 000050A4 BE00000000              	mov rsi, 0
  8056                                  .L_lambda_opt_params_loop_001e:	; copy params
  8057 000050A9 4883FE02                	cmp rsi, 2
  8058 000050AD 740E                    	je .L_lambda_opt_params_end_001e
  8059 000050AF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8060 000050B4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8061 000050B8 48FFC6                  	inc rsi
  8062 000050BB EBEC                    	jmp .L_lambda_opt_params_loop_001e
  8063                                  .L_lambda_opt_params_end_001e:
  8064 000050BD 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
  8065 000050C0 4889C3                  	mov rbx, rax
  8066 000050C3 58                      	pop rax
  8067 000050C4 C60004                  	mov byte [rax], T_closure
  8068 000050C7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8069 000050CB 48C74009[D8500000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_001e
  8070 000050D3 E97F020000              	jmp .L_lambda_opt_end_001e
  8071                                  .L_lambda_opt_code_001e:	; lambda-opt body
  8072 000050D8 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8073 000050DE 7411                    	je .L_lambda_opt_arity_check_exact_001e
  8074 000050E0 0F8FFB000000            	jg .L_lambda_opt_arity_check_more_001e
  8075 000050E6 FF742410                	push qword [rsp + 8 * 2]
  8076 000050EA 6A01                    	push 1
  8077 000050EC E9102F0100              	jmp L_error_incorrect_arity_opt
  8078                                  .L_lambda_opt_arity_check_exact_001e:
  8079 000050F1 4883EC08                	sub rsp, 8
  8080 000050F5 488B442408              	mov rax, qword[rsp + 8 *1]
  8081 000050FA 48890424                	mov qword[rsp], rax  
  8082 000050FE 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  8083 00005103 4889442408              	mov qword[rsp + 8 * 1], rax
  8084 00005108 B802000000              	mov rax, 2
  8085 0000510D 4889442410              	mov qword[rsp + 8 *2], rax
  8086 00005112 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  8087 00005117 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  8088 0000511C 48B8-                   	mov rax, sob_nil
  8088 0000511E [0100000000000000] 
  8089 00005126 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  8090 0000512B C8000000                	enter 0, 0
  8091                                  	; preparing a non-tail-call
  8092 0000512F 488B4528                	mov rax, PARAM(1)	; param s
  8093 00005133 50                      	push rax
  8094 00005134 6A01                    	push 1	; arg count
  8095 00005136 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
  8096 0000513E 803805                  	cmp byte [rax], T_undefined
  8097 00005141 0F84C02D0100            	je L_error_fvar_undefined
  8098 00005147 803804                  	cmp byte [rax], T_closure
  8099 0000514A 0F853B2E0100            	jne L_error_non_closure
  8100 00005150 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8101 00005153 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8102 00005156 483D[02000000]          	cmp rax, sob_boolean_false
  8103 0000515C 740C                    	je .L_if_else_00a6
  8104 0000515E 48B8-                   	mov rax, L_constants + 1
  8104 00005160 [0100000000000000] 
  8105 00005168 EB6E                    	jmp .L_if_end_00a6
  8106                                  .L_if_else_00a6:
  8107                                  	; preparing a tail-call
  8108 0000516A 488B4528                	mov rax, PARAM(1)	; param s
  8109 0000516E 50                      	push rax
  8110 0000516F 488B4520                	mov rax, PARAM(0)	; param f
  8111 00005173 50                      	push rax
  8112 00005174 6A02                    	push 2	; arg count
  8113 00005176 488B4510                	mov rax, ENV
  8114 0000517A 488B00                  	mov rax, qword [rax + 8 * 0]
  8115 0000517D 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  8116 00005181 488B00                  	mov rax, qword [rax]
  8117 00005184 803804                  	cmp byte [rax], T_closure
  8118 00005187 0F85FE2D0100            	jne L_error_non_closure
  8119 0000518D FF7001                  	push SOB_CLOSURE_ENV(rax)
  8120 00005190 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8121 00005193 FF7500                  	push qword[rbp]
  8122 00005196 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8123 00005199 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8124 0000519D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8125 000051A1 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8126 000051A5 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8127 000051A8 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8128 000051AB 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8129 000051B0 4983C103                	add r9, 3 	 ;for getting to the params
  8130 000051B4 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8131 000051B8 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8132                                  .L_tc_recycle_frame_loop_0148:
  8133 000051BB 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8134 000051BE 7410                    	je .L_tc_recycle_frame_done_0148
  8135 000051C0 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8136 000051C3 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8137 000051C6 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8138 000051CA 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8139 000051CE EBEB                    	jmp .L_tc_recycle_frame_loop_0148
  8140                                  .L_tc_recycle_frame_done_0148:
  8141 000051D0 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8142 000051D1 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8143 000051D5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8144                                  .L_if_end_00a6:
  8145 000051D8 C9                      	leave
  8146 000051D9 C22000                  	ret AND_KILL_FRAME(2)
  8147 000051DC E976010000              	jmp .L_lambda_opt_end_001e	; new closure is in rax
  8148                                  .L_lambda_opt_arity_check_more_001e:
  8149 000051E1 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  8150 000051E6 49B9-                   	mov r9, sob_nil
  8150 000051E8 [0100000000000000] 
  8151 000051F0 4889E3                  	mov rbx, rsp 
  8152 000051F3 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  8153 000051F7 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  8154 000051FA 49C1E003                	shl r8, 3
  8155 000051FE 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  8156 00005201 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  8157                                  .L_lambda_opt_stack_shrink_loop_001e:
  8158 00005206 4983F801                	cmp r8, 1
  8159 0000520A 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_001e
  8160 0000520C BF11000000              	mov rdi, 1+8+8 ;for pair
  8161 00005211 E81E2E0100              	call malloc;to create the pair in the stack
  8162 00005216 C60021                  	mov byte [rax], T_pair ; to make it a pair
  8163 00005219 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
  8164 0000521C 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
  8165 00005220 4C894809                 	mov qword[rax+1+8],r9
  8166 00005224 4989C1                  	mov r9, rax ;for the recursion 
  8167 00005227 49FFC8                  	dec r8 ;we finished copy another opt param to the list
  8168 0000522A 4883EB08                	sub rbx, 8 ;to get the next param to copy
  8169 0000522E EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_001e
  8170                                  .L_lambda_opt_stack_shrink_loop_exit_001e:
  8171 00005230 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
  8172 00005235 4883E902                	sub rcx, 2
  8173 00005239 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
  8174 0000523D 4801CC                  	add rsp, rcx ;shrinking the stack
  8175 00005240 4889E0                  	mov rax, rsp
  8176 00005243 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
  8177 00005246 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
  8178 0000524A 49FFC8                  	dec r8 ;we start with param 0, not 1 
  8179 0000524D 4883C018                	add rax, 3 * 8;now rax is param 0
  8180 00005251 49C1E003                	shl r8, 3;convert to byte
  8181 00005255 4C01C0                  	add rax, r8;now rax is the top of the stack
  8182 00005258 4C8908                  	mov qword[rax], r9;puting the list at the top
  8183 0000525B 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
  8184 0000525F 4889E3                  	mov rbx, rsp 
  8185 00005262 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
  8186 00005265 41BA01000000            	mov r10, 1;r10 is the not opt params length
  8187 0000526B 49FFCA                  	dec r10 
  8188 0000526E 49C1E203                	shl r10, 3;to get bytes
  8189 00005272 4883C318                	add rbx, 3*8;rbx is the first param
  8190 00005276 4C01D3                  	add rbx, r10; rbx is where the address to copy to
  8191 00005279 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  8192 0000527C 4C8900                  	mov qword[rax], r8
  8193 0000527F 4883E808                	sub rax, 8
  8194 00005283 4883EB08                	sub rbx, 8
  8195 00005287 4889E0                  	mov rax, rsp
  8196 0000528A 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  8197 0000528D 48C744241002000000      	mov qword [rsp+2*8], 2
  8198 00005296 488B5808                	mov rbx, qword[rax + 8 *1]
  8199 0000529A 48895C2408              	mov qword [rsp + 1*8] ,rbx
  8200 0000529F 488B18                  	mov rbx, qword[rax]
  8201 000052A2 48891C24                	mov qword [rsp], rbx
  8202 000052A6 C8000000                	enter 0, 0
  8203                                  	; preparing a non-tail-call
  8204 000052AA 488B4528                	mov rax, PARAM(1)	; param s
  8205 000052AE 50                      	push rax
  8206 000052AF 6A01                    	push 1	; arg count
  8207 000052B1 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
  8208 000052B9 803805                  	cmp byte [rax], T_undefined
  8209 000052BC 0F84452C0100            	je L_error_fvar_undefined
  8210 000052C2 803804                  	cmp byte [rax], T_closure
  8211 000052C5 0F85C02C0100            	jne L_error_non_closure
  8212 000052CB FF7001                  	push SOB_CLOSURE_ENV(rax)
  8213 000052CE FF5009                  	call SOB_CLOSURE_CODE(rax)
  8214 000052D1 483D[02000000]          	cmp rax, sob_boolean_false
  8215 000052D7 740C                    	je .L_if_else_00a5
  8216 000052D9 48B8-                   	mov rax, L_constants + 1
  8216 000052DB [0100000000000000] 
  8217 000052E3 EB6E                    	jmp .L_if_end_00a5
  8218                                  .L_if_else_00a5:
  8219                                  	; preparing a tail-call
  8220 000052E5 488B4528                	mov rax, PARAM(1)	; param s
  8221 000052E9 50                      	push rax
  8222 000052EA 488B4520                	mov rax, PARAM(0)	; param f
  8223 000052EE 50                      	push rax
  8224 000052EF 6A02                    	push 2	; arg count
  8225 000052F1 488B4510                	mov rax, ENV
  8226 000052F5 488B00                  	mov rax, qword [rax + 8 * 0]
  8227 000052F8 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  8228 000052FC 488B00                  	mov rax, qword [rax]
  8229 000052FF 803804                  	cmp byte [rax], T_closure
  8230 00005302 0F85832C0100            	jne L_error_non_closure
  8231 00005308 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8232 0000530B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8233 0000530E FF7500                  	push qword[rbp]
  8234 00005311 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8235 00005314 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8236 00005318 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8237 0000531C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8238 00005320 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8239 00005323 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8240 00005326 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8241 0000532B 4983C103                	add r9, 3 	 ;for getting to the params
  8242 0000532F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8243 00005333 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8244                                  .L_tc_recycle_frame_loop_0147:
  8245 00005336 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8246 00005339 7410                    	je .L_tc_recycle_frame_done_0147
  8247 0000533B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8248 0000533E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8249 00005341 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8250 00005345 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8251 00005349 EBEB                    	jmp .L_tc_recycle_frame_loop_0147
  8252                                  .L_tc_recycle_frame_done_0147:
  8253 0000534B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8254 0000534C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8255 00005350 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8256                                  .L_if_end_00a5:
  8257 00005353 C9                      	leave
  8258 00005354 C22000                  	ret AND_KILL_FRAME(2)
  8259                                  .L_lambda_opt_end_001e:	; new closure is in rax
  8260 00005357 C9                      	leave
  8261 00005358 C22000                  	ret AND_KILL_FRAME(2)
  8262                                  .L_lambda_simple_end_00ef:	; new closure is in rax
  8263 0000535B 803804                  	cmp byte [rax], T_closure
  8264 0000535E 0F85272C0100            	jne L_error_non_closure
  8265 00005364 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8266 00005367 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8267 0000536A 48890425[AE140000]      	mov qword [free_var_103], rax
  8268 00005372 48B8-                   	mov rax, sob_void
  8268 00005374 [0000000000000000] 
  8269                                  
  8270 0000537C 4889C7                  	mov rdi, rax
  8271 0000537F E8052F0100              	call print_sexpr_if_not_void
  8272 00005384 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8273 00005389 E8A62C0100              	call malloc
  8274 0000538E 50                      	push rax
  8275 0000538F BF00000000              	mov rdi, 8 * 0	; new rib
  8276 00005394 E89B2C0100              	call malloc
  8277 00005399 50                      	push rax
  8278 0000539A BF08000000              	mov rdi, 8 * 1	; extended env
  8279 0000539F E8902C0100              	call malloc
  8280 000053A4 488B7D10                	mov rdi, ENV
  8281 000053A8 BE00000000              	mov rsi, 0
  8282 000053AD BA01000000              	mov rdx, 1
  8283                                  .L_lambda_simple_env_loop_00f2:	; ext_env[i + 1] <-- env[i]
  8284 000053B2 4883FE00                	cmp rsi, 0
  8285 000053B6 7410                    	je .L_lambda_simple_env_end_00f2
  8286 000053B8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8287 000053BC 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8288 000053C0 48FFC6                  	inc rsi
  8289 000053C3 48FFC2                  	inc rdx
  8290 000053C6 EBEA                    	jmp .L_lambda_simple_env_loop_00f2
  8291                                  .L_lambda_simple_env_end_00f2:
  8292 000053C8 5B                      	pop rbx
  8293 000053C9 BE00000000              	mov rsi, 0
  8294                                  .L_lambda_simple_params_loop_00f2:	; copy params
  8295 000053CE 4883FE00                	cmp rsi, 0
  8296 000053D2 740E                    	je .L_lambda_simple_params_end_00f2
  8297 000053D4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8298 000053D9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8299 000053DD 48FFC6                  	inc rsi
  8300 000053E0 EBEC                    	jmp .L_lambda_simple_params_loop_00f2
  8301                                  .L_lambda_simple_params_end_00f2:
  8302 000053E2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8303 000053E5 4889C3                  	mov rbx, rax
  8304 000053E8 58                      	pop rax
  8305 000053E9 C60004                  	mov byte [rax], T_closure
  8306 000053EC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8307 000053F0 48C74009[FD530000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f2
  8308 000053F8 E998010000              	jmp .L_lambda_simple_end_00f2
  8309                                  .L_lambda_simple_code_00f2:	; lambda-simple body
  8310 000053FD 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8311 00005403 740B                    	je .L_lambda_simple_arity_check_ok_00f2
  8312 00005405 FF742410                	push qword [rsp + 8 * 2]
  8313 00005409 6A01                    	push 1
  8314 0000540B E9DD2B0100              	jmp L_error_incorrect_arity_simple
  8315                                  .L_lambda_simple_arity_check_ok_00f2:
  8316 00005410 C8000000                	enter 0, 0
  8317                                  	; preparing a tail-call
  8318 00005414 488B4520                	mov rax, PARAM(0)	; param s
  8319 00005418 50                      	push rax
  8320 00005419 48B8-                   	mov rax, L_constants + 1
  8320 0000541B [0100000000000000] 
  8321 00005423 50                      	push rax
  8322 00005424 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8323 00005429 E8062C0100              	call malloc
  8324 0000542E 50                      	push rax
  8325 0000542F BF08000000              	mov rdi, 8 * 1	; new rib
  8326 00005434 E8FB2B0100              	call malloc
  8327 00005439 50                      	push rax
  8328 0000543A BF10000000              	mov rdi, 8 * 2	; extended env
  8329 0000543F E8F02B0100              	call malloc
  8330 00005444 488B7D10                	mov rdi, ENV
  8331 00005448 BE00000000              	mov rsi, 0
  8332 0000544D BA01000000              	mov rdx, 1
  8333                                  .L_lambda_simple_env_loop_00f3:	; ext_env[i + 1] <-- env[i]
  8334 00005452 4883FE01                	cmp rsi, 1
  8335 00005456 7410                    	je .L_lambda_simple_env_end_00f3
  8336 00005458 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8337 0000545C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8338 00005460 48FFC6                  	inc rsi
  8339 00005463 48FFC2                  	inc rdx
  8340 00005466 EBEA                    	jmp .L_lambda_simple_env_loop_00f3
  8341                                  .L_lambda_simple_env_end_00f3:
  8342 00005468 5B                      	pop rbx
  8343 00005469 BE00000000              	mov rsi, 0
  8344                                  .L_lambda_simple_params_loop_00f3:	; copy params
  8345 0000546E 4883FE01                	cmp rsi, 1
  8346 00005472 740E                    	je .L_lambda_simple_params_end_00f3
  8347 00005474 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8348 00005479 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8349 0000547D 48FFC6                  	inc rsi
  8350 00005480 EBEC                    	jmp .L_lambda_simple_params_loop_00f3
  8351                                  .L_lambda_simple_params_end_00f3:
  8352 00005482 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8353 00005485 4889C3                  	mov rbx, rax
  8354 00005488 58                      	pop rax
  8355 00005489 C60004                  	mov byte [rax], T_closure
  8356 0000548C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8357 00005490 48C74009[9D540000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f3
  8358 00005498 E98C000000              	jmp .L_lambda_simple_end_00f3
  8359                                  .L_lambda_simple_code_00f3:	; lambda-simple body
  8360 0000549D 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8361 000054A3 740B                    	je .L_lambda_simple_arity_check_ok_00f3
  8362 000054A5 FF742410                	push qword [rsp + 8 * 2]
  8363 000054A9 6A02                    	push 2
  8364 000054AB E93D2B0100              	jmp L_error_incorrect_arity_simple
  8365                                  .L_lambda_simple_arity_check_ok_00f3:
  8366 000054B0 C8000000                	enter 0, 0
  8367                                  	; preparing a tail-call
  8368 000054B4 488B4520                	mov rax, PARAM(0)	; param r
  8369 000054B8 50                      	push rax
  8370 000054B9 488B4528                	mov rax, PARAM(1)	; param a
  8371 000054BD 50                      	push rax
  8372 000054BE 6A02                    	push 2	; arg count
  8373 000054C0 488B0425[16130000]      	mov rax, qword [free_var_79]	; free var cons
  8374 000054C8 803805                  	cmp byte [rax], T_undefined
  8375 000054CB 0F84362A0100            	je L_error_fvar_undefined
  8376 000054D1 803804                  	cmp byte [rax], T_closure
  8377 000054D4 0F85B12A0100            	jne L_error_non_closure
  8378 000054DA FF7001                  	push SOB_CLOSURE_ENV(rax)
  8379 000054DD FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8380 000054E0 FF7500                  	push qword[rbp]
  8381 000054E3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8382 000054E6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8383 000054EA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8384 000054EE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8385 000054F2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8386 000054F5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8387 000054F8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8388 000054FD 4983C103                	add r9, 3 	 ;for getting to the params
  8389 00005501 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8390 00005505 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8391                                  .L_tc_recycle_frame_loop_0149:
  8392 00005508 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8393 0000550B 7410                    	je .L_tc_recycle_frame_done_0149
  8394 0000550D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8395 00005510 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8396 00005513 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8397 00005517 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8398 0000551B EBEB                    	jmp .L_tc_recycle_frame_loop_0149
  8399                                  .L_tc_recycle_frame_done_0149:
  8400 0000551D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8401 0000551E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8402 00005522 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8403 00005525 C9                      	leave
  8404 00005526 C22000                  	ret AND_KILL_FRAME(2)
  8405                                  .L_lambda_simple_end_00f3:	; new closure is in rax
  8406 00005529 50                      	push rax
  8407 0000552A 6A03                    	push 3	; arg count
  8408 0000552C 488B0425[7C130000]      	mov rax, qword [free_var_85]	; free var fold-left
  8409 00005534 803805                  	cmp byte [rax], T_undefined
  8410 00005537 0F84CA290100            	je L_error_fvar_undefined
  8411 0000553D 803804                  	cmp byte [rax], T_closure
  8412 00005540 0F85452A0100            	jne L_error_non_closure
  8413 00005546 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8414 00005549 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8415 0000554C FF7500                  	push qword[rbp]
  8416 0000554F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8417 00005552 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8418 00005556 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8419 0000555A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8420 0000555E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8421 00005561 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8422 00005564 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8423 00005569 4983C103                	add r9, 3 	 ;for getting to the params
  8424 0000556D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8425 00005571 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8426                                  .L_tc_recycle_frame_loop_014a:
  8427 00005574 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8428 00005577 7410                    	je .L_tc_recycle_frame_done_014a
  8429 00005579 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8430 0000557C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8431 0000557F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8432 00005583 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8433 00005587 EBEB                    	jmp .L_tc_recycle_frame_loop_014a
  8434                                  .L_tc_recycle_frame_done_014a:
  8435 00005589 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8436 0000558A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8437 0000558E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8438 00005591 C9                      	leave
  8439 00005592 C21800                  	ret AND_KILL_FRAME(1)
  8440                                  .L_lambda_simple_end_00f2:	; new closure is in rax
  8441 00005595 48890425[AD150000]      	mov qword [free_var_118], rax
  8442 0000559D 48B8-                   	mov rax, sob_void
  8442 0000559F [0000000000000000] 
  8443                                  
  8444 000055A7 4889C7                  	mov rdi, rax
  8445 000055AA E8DA2C0100              	call print_sexpr_if_not_void
  8446                                  	; preparing a non-tail-call
  8447 000055AF 48B8-                   	mov rax, L_constants + 1993
  8447 000055B1 [C907000000000000] 
  8448 000055B9 50                      	push rax
  8449 000055BA 48B8-                   	mov rax, L_constants + 1993
  8449 000055BC [C907000000000000] 
  8450 000055C4 50                      	push rax
  8451 000055C5 6A02                    	push 2	; arg count
  8452 000055C7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8453 000055CC E8632A0100              	call malloc
  8454 000055D1 50                      	push rax
  8455 000055D2 BF00000000              	mov rdi, 8 * 0	; new rib
  8456 000055D7 E8582A0100              	call malloc
  8457 000055DC 50                      	push rax
  8458 000055DD BF08000000              	mov rdi, 8 * 1	; extended env
  8459 000055E2 E84D2A0100              	call malloc
  8460 000055E7 488B7D10                	mov rdi, ENV
  8461 000055EB BE00000000              	mov rsi, 0
  8462 000055F0 BA01000000              	mov rdx, 1
  8463                                  .L_lambda_simple_env_loop_00f4:	; ext_env[i + 1] <-- env[i]
  8464 000055F5 4883FE00                	cmp rsi, 0
  8465 000055F9 7410                    	je .L_lambda_simple_env_end_00f4
  8466 000055FB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8467 000055FF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8468 00005603 48FFC6                  	inc rsi
  8469 00005606 48FFC2                  	inc rdx
  8470 00005609 EBEA                    	jmp .L_lambda_simple_env_loop_00f4
  8471                                  .L_lambda_simple_env_end_00f4:
  8472 0000560B 5B                      	pop rbx
  8473 0000560C BE00000000              	mov rsi, 0
  8474                                  .L_lambda_simple_params_loop_00f4:	; copy params
  8475 00005611 4883FE00                	cmp rsi, 0
  8476 00005615 740E                    	je .L_lambda_simple_params_end_00f4
  8477 00005617 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8478 0000561C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8479 00005620 48FFC6                  	inc rsi
  8480 00005623 EBEC                    	jmp .L_lambda_simple_params_loop_00f4
  8481                                  .L_lambda_simple_params_end_00f4:
  8482 00005625 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8483 00005628 4889C3                  	mov rbx, rax
  8484 0000562B 58                      	pop rax
  8485 0000562C C60004                  	mov byte [rax], T_closure
  8486 0000562F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8487 00005633 48C74009[40560000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f4
  8488 0000563B E937070000              	jmp .L_lambda_simple_end_00f4
  8489                                  .L_lambda_simple_code_00f4:	; lambda-simple body
  8490 00005640 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8491 00005646 740B                    	je .L_lambda_simple_arity_check_ok_00f4
  8492 00005648 FF742410                	push qword [rsp + 8 * 2]
  8493 0000564C 6A02                    	push 2
  8494 0000564E E99A290100              	jmp L_error_incorrect_arity_simple
  8495                                  .L_lambda_simple_arity_check_ok_00f4:
  8496 00005653 C8000000                	enter 0, 0
  8497 00005657 BF08000000              	mov rdi, 8*1
  8498 0000565C E8D3290100              	call malloc
  8499 00005661 488B5D20                	mov rbx, PARAM(0)
  8500 00005665 488918                  	mov qword[rax], rbx
  8501 00005668 48894520                	mov PARAM(0), rax
  8502 0000566C 48B8-                   	mov rax, sob_void
  8502 0000566E [0000000000000000] 
  8503                                  
  8504 00005676 BF08000000              	mov rdi, 8*1
  8505 0000567B E8B4290100              	call malloc
  8506 00005680 488B5D28                	mov rbx, PARAM(1)
  8507 00005684 488918                  	mov qword[rax], rbx
  8508 00005687 48894528                	mov PARAM(1), rax
  8509 0000568B 48B8-                   	mov rax, sob_void
  8509 0000568D [0000000000000000] 
  8510                                  
  8511 00005695 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8512 0000569A E895290100              	call malloc
  8513 0000569F 50                      	push rax
  8514 000056A0 BF10000000              	mov rdi, 8 * 2	; new rib
  8515 000056A5 E88A290100              	call malloc
  8516 000056AA 50                      	push rax
  8517 000056AB BF10000000              	mov rdi, 8 * 2	; extended env
  8518 000056B0 E87F290100              	call malloc
  8519 000056B5 488B7D10                	mov rdi, ENV
  8520 000056B9 BE00000000              	mov rsi, 0
  8521 000056BE BA01000000              	mov rdx, 1
  8522                                  .L_lambda_simple_env_loop_00f5:	; ext_env[i + 1] <-- env[i]
  8523 000056C3 4883FE01                	cmp rsi, 1
  8524 000056C7 7410                    	je .L_lambda_simple_env_end_00f5
  8525 000056C9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8526 000056CD 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8527 000056D1 48FFC6                  	inc rsi
  8528 000056D4 48FFC2                  	inc rdx
  8529 000056D7 EBEA                    	jmp .L_lambda_simple_env_loop_00f5
  8530                                  .L_lambda_simple_env_end_00f5:
  8531 000056D9 5B                      	pop rbx
  8532 000056DA BE00000000              	mov rsi, 0
  8533                                  .L_lambda_simple_params_loop_00f5:	; copy params
  8534 000056DF 4883FE02                	cmp rsi, 2
  8535 000056E3 740E                    	je .L_lambda_simple_params_end_00f5
  8536 000056E5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8537 000056EA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8538 000056EE 48FFC6                  	inc rsi
  8539 000056F1 EBEC                    	jmp .L_lambda_simple_params_loop_00f5
  8540                                  .L_lambda_simple_params_end_00f5:
  8541 000056F3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8542 000056F6 4889C3                  	mov rbx, rax
  8543 000056F9 58                      	pop rax
  8544 000056FA C60004                  	mov byte [rax], T_closure
  8545 000056FD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8546 00005701 48C74009[0E570000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f5
  8547 00005709 E92B010000              	jmp .L_lambda_simple_end_00f5
  8548                                  .L_lambda_simple_code_00f5:	; lambda-simple body
  8549 0000570E 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8550 00005714 740B                    	je .L_lambda_simple_arity_check_ok_00f5
  8551 00005716 FF742410                	push qword [rsp + 8 * 2]
  8552 0000571A 6A02                    	push 2
  8553 0000571C E9CC280100              	jmp L_error_incorrect_arity_simple
  8554                                  .L_lambda_simple_arity_check_ok_00f5:
  8555 00005721 C8000000                	enter 0, 0
  8556                                  	; preparing a non-tail-call
  8557 00005725 488B4528                	mov rax, PARAM(1)	; param sr
  8558 00005729 50                      	push rax
  8559 0000572A 6A01                    	push 1	; arg count
  8560 0000572C 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
  8561 00005734 803805                  	cmp byte [rax], T_undefined
  8562 00005737 0F84CA270100            	je L_error_fvar_undefined
  8563 0000573D 803804                  	cmp byte [rax], T_closure
  8564 00005740 0F8545280100            	jne L_error_non_closure
  8565 00005746 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8566 00005749 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8567 0000574C 483D[02000000]          	cmp rax, sob_boolean_false
  8568 00005752 7409                    	je .L_if_else_00a7
  8569 00005754 488B4520                	mov rax, PARAM(0)	; param s1
  8570 00005758 E9D8000000              	jmp .L_if_end_00a7
  8571                                  .L_if_else_00a7:
  8572                                  	; preparing a tail-call
  8573                                  	; preparing a non-tail-call
  8574                                  	; preparing a non-tail-call
  8575 0000575D 488B4528                	mov rax, PARAM(1)	; param sr
  8576 00005761 50                      	push rax
  8577 00005762 6A01                    	push 1	; arg count
  8578 00005764 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  8579 0000576C 803805                  	cmp byte [rax], T_undefined
  8580 0000576F 0F8492270100            	je L_error_fvar_undefined
  8581 00005775 803804                  	cmp byte [rax], T_closure
  8582 00005778 0F850D280100            	jne L_error_non_closure
  8583 0000577E FF7001                  	push SOB_CLOSURE_ENV(rax)
  8584 00005781 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8585 00005784 50                      	push rax
  8586                                  	; preparing a non-tail-call
  8587 00005785 488B4528                	mov rax, PARAM(1)	; param sr
  8588 00005789 50                      	push rax
  8589 0000578A 6A01                    	push 1	; arg count
  8590 0000578C 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  8591 00005794 803805                  	cmp byte [rax], T_undefined
  8592 00005797 0F846A270100            	je L_error_fvar_undefined
  8593 0000579D 803804                  	cmp byte [rax], T_closure
  8594 000057A0 0F85E5270100            	jne L_error_non_closure
  8595 000057A6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8596 000057A9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8597 000057AC 50                      	push rax
  8598 000057AD 6A02                    	push 2	; arg count
  8599 000057AF 488B4510                	mov rax, ENV
  8600 000057B3 488B00                  	mov rax, qword [rax + 8 * 0]
  8601 000057B6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  8602 000057B9 488B00                  	mov rax, qword [rax]
  8603 000057BC 803804                  	cmp byte [rax], T_closure
  8604 000057BF 0F85C6270100            	jne L_error_non_closure
  8605 000057C5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8606 000057C8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8607 000057CB 50                      	push rax
  8608 000057CC 488B4520                	mov rax, PARAM(0)	; param s1
  8609 000057D0 50                      	push rax
  8610 000057D1 6A02                    	push 2	; arg count
  8611 000057D3 488B4510                	mov rax, ENV
  8612 000057D7 488B00                  	mov rax, qword [rax + 8 * 0]
  8613 000057DA 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var run-2
  8614 000057DE 488B00                  	mov rax, qword [rax]
  8615 000057E1 803804                  	cmp byte [rax], T_closure
  8616 000057E4 0F85A1270100            	jne L_error_non_closure
  8617 000057EA FF7001                  	push SOB_CLOSURE_ENV(rax)
  8618 000057ED FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8619 000057F0 FF7500                  	push qword[rbp]
  8620 000057F3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8621 000057F6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8622 000057FA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8623 000057FE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8624 00005802 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8625 00005805 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8626 00005808 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8627 0000580D 4983C103                	add r9, 3 	 ;for getting to the params
  8628 00005811 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8629 00005815 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8630                                  .L_tc_recycle_frame_loop_014b:
  8631 00005818 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8632 0000581B 7410                    	je .L_tc_recycle_frame_done_014b
  8633 0000581D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8634 00005820 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8635 00005823 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8636 00005827 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8637 0000582B EBEB                    	jmp .L_tc_recycle_frame_loop_014b
  8638                                  .L_tc_recycle_frame_done_014b:
  8639 0000582D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8640 0000582E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8641 00005832 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8642                                  .L_if_end_00a7:
  8643 00005835 C9                      	leave
  8644 00005836 C22000                  	ret AND_KILL_FRAME(2)
  8645                                  .L_lambda_simple_end_00f5:	; new closure is in rax
  8646 00005839 50                      	push rax
  8647 0000583A 488B4520                	mov rax, PARAM(0)	; param run-1
  8648 0000583E 8F00                    	pop qword [rax]
  8649 00005840 48B8-                   	mov rax, sob_void
  8649 00005842 [0000000000000000] 
  8650                                  
  8651 0000584A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8652 0000584F E8E0270100              	call malloc
  8653 00005854 50                      	push rax
  8654 00005855 BF10000000              	mov rdi, 8 * 2	; new rib
  8655 0000585A E8D5270100              	call malloc
  8656 0000585F 50                      	push rax
  8657 00005860 BF10000000              	mov rdi, 8 * 2	; extended env
  8658 00005865 E8CA270100              	call malloc
  8659 0000586A 488B7D10                	mov rdi, ENV
  8660 0000586E BE00000000              	mov rsi, 0
  8661 00005873 BA01000000              	mov rdx, 1
  8662                                  .L_lambda_simple_env_loop_00f6:	; ext_env[i + 1] <-- env[i]
  8663 00005878 4883FE01                	cmp rsi, 1
  8664 0000587C 7410                    	je .L_lambda_simple_env_end_00f6
  8665 0000587E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8666 00005882 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8667 00005886 48FFC6                  	inc rsi
  8668 00005889 48FFC2                  	inc rdx
  8669 0000588C EBEA                    	jmp .L_lambda_simple_env_loop_00f6
  8670                                  .L_lambda_simple_env_end_00f6:
  8671 0000588E 5B                      	pop rbx
  8672 0000588F BE00000000              	mov rsi, 0
  8673                                  .L_lambda_simple_params_loop_00f6:	; copy params
  8674 00005894 4883FE02                	cmp rsi, 2
  8675 00005898 740E                    	je .L_lambda_simple_params_end_00f6
  8676 0000589A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8677 0000589F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8678 000058A3 48FFC6                  	inc rsi
  8679 000058A6 EBEC                    	jmp .L_lambda_simple_params_loop_00f6
  8680                                  .L_lambda_simple_params_end_00f6:
  8681 000058A8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8682 000058AB 4889C3                  	mov rbx, rax
  8683 000058AE 58                      	pop rax
  8684 000058AF C60004                  	mov byte [rax], T_closure
  8685 000058B2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8686 000058B6 48C74009[C3580000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f6
  8687 000058BE E92F010000              	jmp .L_lambda_simple_end_00f6
  8688                                  .L_lambda_simple_code_00f6:	; lambda-simple body
  8689 000058C3 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8690 000058C9 740B                    	je .L_lambda_simple_arity_check_ok_00f6
  8691 000058CB FF742410                	push qword [rsp + 8 * 2]
  8692 000058CF 6A02                    	push 2
  8693 000058D1 E917270100              	jmp L_error_incorrect_arity_simple
  8694                                  .L_lambda_simple_arity_check_ok_00f6:
  8695 000058D6 C8000000                	enter 0, 0
  8696                                  	; preparing a non-tail-call
  8697 000058DA 488B4520                	mov rax, PARAM(0)	; param s1
  8698 000058DE 50                      	push rax
  8699 000058DF 6A01                    	push 1	; arg count
  8700 000058E1 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
  8701 000058E9 803805                  	cmp byte [rax], T_undefined
  8702 000058EC 0F8415260100            	je L_error_fvar_undefined
  8703 000058F2 803804                  	cmp byte [rax], T_closure
  8704 000058F5 0F8590260100            	jne L_error_non_closure
  8705 000058FB FF7001                  	push SOB_CLOSURE_ENV(rax)
  8706 000058FE FF5009                  	call SOB_CLOSURE_CODE(rax)
  8707 00005901 483D[02000000]          	cmp rax, sob_boolean_false
  8708 00005907 7409                    	je .L_if_else_00a8
  8709 00005909 488B4528                	mov rax, PARAM(1)	; param s2
  8710 0000590D E9DC000000              	jmp .L_if_end_00a8
  8711                                  .L_if_else_00a8:
  8712                                  	; preparing a tail-call
  8713                                  	; preparing a non-tail-call
  8714 00005912 488B4528                	mov rax, PARAM(1)	; param s2
  8715 00005916 50                      	push rax
  8716                                  	; preparing a non-tail-call
  8717 00005917 488B4520                	mov rax, PARAM(0)	; param s1
  8718 0000591B 50                      	push rax
  8719 0000591C 6A01                    	push 1	; arg count
  8720 0000591E 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  8721 00005926 803805                  	cmp byte [rax], T_undefined
  8722 00005929 0F84D8250100            	je L_error_fvar_undefined
  8723 0000592F 803804                  	cmp byte [rax], T_closure
  8724 00005932 0F8553260100            	jne L_error_non_closure
  8725 00005938 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8726 0000593B FF5009                  	call SOB_CLOSURE_CODE(rax)
  8727 0000593E 50                      	push rax
  8728 0000593F 6A02                    	push 2	; arg count
  8729 00005941 488B4510                	mov rax, ENV
  8730 00005945 488B00                  	mov rax, qword [rax + 8 * 0]
  8731 00005948 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var run-2
  8732 0000594C 488B00                  	mov rax, qword [rax]
  8733 0000594F 803804                  	cmp byte [rax], T_closure
  8734 00005952 0F8533260100            	jne L_error_non_closure
  8735 00005958 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8736 0000595B FF5009                  	call SOB_CLOSURE_CODE(rax)
  8737 0000595E 50                      	push rax
  8738                                  	; preparing a non-tail-call
  8739 0000595F 488B4520                	mov rax, PARAM(0)	; param s1
  8740 00005963 50                      	push rax
  8741 00005964 6A01                    	push 1	; arg count
  8742 00005966 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  8743 0000596E 803805                  	cmp byte [rax], T_undefined
  8744 00005971 0F8490250100            	je L_error_fvar_undefined
  8745 00005977 803804                  	cmp byte [rax], T_closure
  8746 0000597A 0F850B260100            	jne L_error_non_closure
  8747 00005980 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8748 00005983 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8749 00005986 50                      	push rax
  8750 00005987 6A02                    	push 2	; arg count
  8751 00005989 488B0425[16130000]      	mov rax, qword [free_var_79]	; free var cons
  8752 00005991 803805                  	cmp byte [rax], T_undefined
  8753 00005994 0F846D250100            	je L_error_fvar_undefined
  8754 0000599A 803804                  	cmp byte [rax], T_closure
  8755 0000599D 0F85E8250100            	jne L_error_non_closure
  8756 000059A3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8757 000059A6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8758 000059A9 FF7500                  	push qword[rbp]
  8759 000059AC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8760 000059AF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8761 000059B3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8762 000059B7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8763 000059BB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8764 000059BE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8765 000059C1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8766 000059C6 4983C103                	add r9, 3 	 ;for getting to the params
  8767 000059CA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8768 000059CE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8769                                  .L_tc_recycle_frame_loop_014c:
  8770 000059D1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8771 000059D4 7410                    	je .L_tc_recycle_frame_done_014c
  8772 000059D6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8773 000059D9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8774 000059DC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8775 000059E0 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8776 000059E4 EBEB                    	jmp .L_tc_recycle_frame_loop_014c
  8777                                  .L_tc_recycle_frame_done_014c:
  8778 000059E6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8779 000059E7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8780 000059EB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8781                                  .L_if_end_00a8:
  8782 000059EE C9                      	leave
  8783 000059EF C22000                  	ret AND_KILL_FRAME(2)
  8784                                  .L_lambda_simple_end_00f6:	; new closure is in rax
  8785 000059F2 50                      	push rax
  8786 000059F3 488B4528                	mov rax, PARAM(1)	; param run-2
  8787 000059F7 8F00                    	pop qword [rax]
  8788 000059F9 48B8-                   	mov rax, sob_void
  8788 000059FB [0000000000000000] 
  8789                                  
  8790 00005A03 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8791 00005A08 E827260100              	call malloc
  8792 00005A0D 50                      	push rax
  8793 00005A0E BF10000000              	mov rdi, 8 * 2	; new rib
  8794 00005A13 E81C260100              	call malloc
  8795 00005A18 50                      	push rax
  8796 00005A19 BF10000000              	mov rdi, 8 * 2	; extended env
  8797 00005A1E E811260100              	call malloc
  8798 00005A23 488B7D10                	mov rdi, ENV
  8799 00005A27 BE00000000              	mov rsi, 0
  8800 00005A2C BA01000000              	mov rdx, 1
  8801                                  .L_lambda_opt_env_loop_001f:	; ext_env[i + 1] <-- env[i]
  8802 00005A31 4883FE01                	cmp rsi, 1
  8803 00005A35 7410                    	je .L_lambda_opt_env_end_001f
  8804 00005A37 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8805 00005A3B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8806 00005A3F 48FFC6                  	inc rsi
  8807 00005A42 48FFC2                  	inc rdx
  8808 00005A45 EBEA                    	jmp .L_lambda_opt_env_loop_001f
  8809                                  .L_lambda_opt_env_end_001f:
  8810 00005A47 5B                      	pop rbx
  8811 00005A48 BE00000000              	mov rsi, 0
  8812                                  .L_lambda_opt_params_loop_001f:	; copy params
  8813 00005A4D 4883FE02                	cmp rsi, 2
  8814 00005A51 740E                    	je .L_lambda_opt_params_end_001f
  8815 00005A53 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8816 00005A58 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8817 00005A5C 48FFC6                  	inc rsi
  8818 00005A5F EBEC                    	jmp .L_lambda_opt_params_loop_001f
  8819                                  .L_lambda_opt_params_end_001f:
  8820 00005A61 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
  8821 00005A64 4889C3                  	mov rbx, rax
  8822 00005A67 58                      	pop rax
  8823 00005A68 C60004                  	mov byte [rax], T_closure
  8824 00005A6B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8825 00005A6F 48C74009[7C5A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_001f
  8826 00005A77 E9F7020000              	jmp .L_lambda_opt_end_001f
  8827                                  .L_lambda_opt_code_001f:	; lambda-opt body
  8828 00005A7C 48837C241000            	cmp qword [rsp + 8 * 2], 0
  8829 00005A82 7411                    	je .L_lambda_opt_arity_check_exact_001f
  8830 00005A84 0F8F39010000            	jg .L_lambda_opt_arity_check_more_001f
  8831 00005A8A FF742410                	push qword [rsp + 8 * 2]
  8832 00005A8E 6A00                    	push 0
  8833 00005A90 E96C250100              	jmp L_error_incorrect_arity_opt
  8834                                  .L_lambda_opt_arity_check_exact_001f:
  8835 00005A95 4883EC08                	sub rsp, 8
  8836 00005A99 488B442408              	mov rax, qword[rsp + 8 *1]
  8837 00005A9E 48890424                	mov qword[rsp], rax  
  8838 00005AA2 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  8839 00005AA7 4889442408              	mov qword[rsp + 8 * 1], rax
  8840 00005AAC B801000000              	mov rax, 1
  8841 00005AB1 4889442410              	mov qword[rsp + 8 *2], rax
  8842 00005AB6 48B8-                   	mov rax, sob_nil
  8842 00005AB8 [0100000000000000] 
  8843 00005AC0 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  8844 00005AC5 C8000000                	enter 0, 0
  8845                                  	; preparing a non-tail-call
  8846 00005AC9 488B4520                	mov rax, PARAM(0)	; param s
  8847 00005ACD 50                      	push rax
  8848 00005ACE 6A01                    	push 1	; arg count
  8849 00005AD0 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
  8850 00005AD8 803805                  	cmp byte [rax], T_undefined
  8851 00005ADB 0F8426240100            	je L_error_fvar_undefined
  8852 00005AE1 803804                  	cmp byte [rax], T_closure
  8853 00005AE4 0F85A1240100            	jne L_error_non_closure
  8854 00005AEA FF7001                  	push SOB_CLOSURE_ENV(rax)
  8855 00005AED FF5009                  	call SOB_CLOSURE_CODE(rax)
  8856 00005AF0 483D[02000000]          	cmp rax, sob_boolean_false
  8857 00005AF6 740F                    	je .L_if_else_00aa
  8858 00005AF8 48B8-                   	mov rax, L_constants + 1
  8858 00005AFA [0100000000000000] 
  8859 00005B02 E9B3000000              	jmp .L_if_end_00aa
  8860                                  .L_if_else_00aa:
  8861                                  	; preparing a tail-call
  8862                                  	; preparing a non-tail-call
  8863 00005B07 488B4520                	mov rax, PARAM(0)	; param s
  8864 00005B0B 50                      	push rax
  8865 00005B0C 6A01                    	push 1	; arg count
  8866 00005B0E 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  8867 00005B16 803805                  	cmp byte [rax], T_undefined
  8868 00005B19 0F84E8230100            	je L_error_fvar_undefined
  8869 00005B1F 803804                  	cmp byte [rax], T_closure
  8870 00005B22 0F8563240100            	jne L_error_non_closure
  8871 00005B28 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8872 00005B2B FF5009                  	call SOB_CLOSURE_CODE(rax)
  8873 00005B2E 50                      	push rax
  8874                                  	; preparing a non-tail-call
  8875 00005B2F 488B4520                	mov rax, PARAM(0)	; param s
  8876 00005B33 50                      	push rax
  8877 00005B34 6A01                    	push 1	; arg count
  8878 00005B36 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  8879 00005B3E 803805                  	cmp byte [rax], T_undefined
  8880 00005B41 0F84C0230100            	je L_error_fvar_undefined
  8881 00005B47 803804                  	cmp byte [rax], T_closure
  8882 00005B4A 0F853B240100            	jne L_error_non_closure
  8883 00005B50 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8884 00005B53 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8885 00005B56 50                      	push rax
  8886 00005B57 6A02                    	push 2	; arg count
  8887 00005B59 488B4510                	mov rax, ENV
  8888 00005B5D 488B00                  	mov rax, qword [rax + 8 * 0]
  8889 00005B60 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  8890 00005B63 488B00                  	mov rax, qword [rax]
  8891 00005B66 803804                  	cmp byte [rax], T_closure
  8892 00005B69 0F851C240100            	jne L_error_non_closure
  8893 00005B6F FF7001                  	push SOB_CLOSURE_ENV(rax)
  8894 00005B72 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8895 00005B75 FF7500                  	push qword[rbp]
  8896 00005B78 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8897 00005B7B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8898 00005B7F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8899 00005B83 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8900 00005B87 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8901 00005B8A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8902 00005B8D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8903 00005B92 4983C103                	add r9, 3 	 ;for getting to the params
  8904 00005B96 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8905 00005B9A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8906                                  .L_tc_recycle_frame_loop_014e:
  8907 00005B9D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8908 00005BA0 7410                    	je .L_tc_recycle_frame_done_014e
  8909 00005BA2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8910 00005BA5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8911 00005BA8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8912 00005BAC 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8913 00005BB0 EBEB                    	jmp .L_tc_recycle_frame_loop_014e
  8914                                  .L_tc_recycle_frame_done_014e:
  8915 00005BB2 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8916 00005BB3 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8917 00005BB7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8918                                  .L_if_end_00aa:
  8919 00005BBA C9                      	leave
  8920 00005BBB C21800                  	ret AND_KILL_FRAME(1)
  8921 00005BBE E9B0010000              	jmp .L_lambda_opt_end_001f	; new closure is in rax
  8922                                  .L_lambda_opt_arity_check_more_001f:
  8923 00005BC3 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  8924 00005BC8 49B9-                   	mov r9, sob_nil
  8924 00005BCA [0100000000000000] 
  8925 00005BD2 4889E3                  	mov rbx, rsp 
  8926 00005BD5 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  8927 00005BD9 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  8928 00005BDC 49C1E003                	shl r8, 3
  8929 00005BE0 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  8930 00005BE3 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  8931                                  .L_lambda_opt_stack_shrink_loop_001f:
  8932 00005BE8 4983F800                	cmp r8, 0
  8933 00005BEC 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_001f
  8934 00005BEE BF11000000              	mov rdi, 1+8+8 ;for pair
  8935 00005BF3 E83C240100              	call malloc;to create the pair in the stack
  8936 00005BF8 C60021                  	mov byte [rax], T_pair ; to make it a pair
  8937 00005BFB 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
  8938 00005BFE 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
  8939 00005C02 4C894809                 	mov qword[rax+1+8],r9
  8940 00005C06 4989C1                  	mov r9, rax ;for the recursion 
  8941 00005C09 49FFC8                  	dec r8 ;we finished copy another opt param to the list
  8942 00005C0C 4883EB08                	sub rbx, 8 ;to get the next param to copy
  8943 00005C10 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_001f
  8944                                  .L_lambda_opt_stack_shrink_loop_exit_001f:
  8945 00005C12 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
  8946 00005C17 4883E901                	sub rcx, 1
  8947 00005C1B 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
  8948 00005C1F 4801CC                  	add rsp, rcx ;shrinking the stack
  8949 00005C22 4889E0                  	mov rax, rsp
  8950 00005C25 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
  8951 00005C28 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
  8952 00005C2C 49FFC8                  	dec r8 ;we start with param 0, not 1 
  8953 00005C2F 4883C018                	add rax, 3 * 8;now rax is param 0
  8954 00005C33 49C1E003                	shl r8, 3;convert to byte
  8955 00005C37 4C01C0                  	add rax, r8;now rax is the top of the stack
  8956 00005C3A 4C8908                  	mov qword[rax], r9;puting the list at the top
  8957 00005C3D 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
  8958 00005C41 4889E3                  	mov rbx, rsp 
  8959 00005C44 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
  8960 00005C47 41BA00000000            	mov r10, 0;r10 is the not opt params length
  8961 00005C4D 49FFCA                  	dec r10 
  8962 00005C50 49C1E203                	shl r10, 3;to get bytes
  8963 00005C54 4883C318                	add rbx, 3*8;rbx is the first param
  8964 00005C58 4C01D3                  	add rbx, r10; rbx is where the address to copy to
  8965 00005C5B 4889E0                  	mov rax, rsp
  8966 00005C5E 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  8967 00005C61 48C744241001000000      	mov qword [rsp+2*8], 1
  8968 00005C6A 488B5808                	mov rbx, qword[rax + 8 *1]
  8969 00005C6E 48895C2408              	mov qword [rsp + 1*8] ,rbx
  8970 00005C73 488B18                  	mov rbx, qword[rax]
  8971 00005C76 48891C24                	mov qword [rsp], rbx
  8972 00005C7A C8000000                	enter 0, 0
  8973                                  	; preparing a non-tail-call
  8974 00005C7E 488B4520                	mov rax, PARAM(0)	; param s
  8975 00005C82 50                      	push rax
  8976 00005C83 6A01                    	push 1	; arg count
  8977 00005C85 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
  8978 00005C8D 803805                  	cmp byte [rax], T_undefined
  8979 00005C90 0F8471220100            	je L_error_fvar_undefined
  8980 00005C96 803804                  	cmp byte [rax], T_closure
  8981 00005C99 0F85EC220100            	jne L_error_non_closure
  8982 00005C9F FF7001                  	push SOB_CLOSURE_ENV(rax)
  8983 00005CA2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8984 00005CA5 483D[02000000]          	cmp rax, sob_boolean_false
  8985 00005CAB 740F                    	je .L_if_else_00a9
  8986 00005CAD 48B8-                   	mov rax, L_constants + 1
  8986 00005CAF [0100000000000000] 
  8987 00005CB7 E9B3000000              	jmp .L_if_end_00a9
  8988                                  .L_if_else_00a9:
  8989                                  	; preparing a tail-call
  8990                                  	; preparing a non-tail-call
  8991 00005CBC 488B4520                	mov rax, PARAM(0)	; param s
  8992 00005CC0 50                      	push rax
  8993 00005CC1 6A01                    	push 1	; arg count
  8994 00005CC3 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  8995 00005CCB 803805                  	cmp byte [rax], T_undefined
  8996 00005CCE 0F8433220100            	je L_error_fvar_undefined
  8997 00005CD4 803804                  	cmp byte [rax], T_closure
  8998 00005CD7 0F85AE220100            	jne L_error_non_closure
  8999 00005CDD FF7001                  	push SOB_CLOSURE_ENV(rax)
  9000 00005CE0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9001 00005CE3 50                      	push rax
  9002                                  	; preparing a non-tail-call
  9003 00005CE4 488B4520                	mov rax, PARAM(0)	; param s
  9004 00005CE8 50                      	push rax
  9005 00005CE9 6A01                    	push 1	; arg count
  9006 00005CEB 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  9007 00005CF3 803805                  	cmp byte [rax], T_undefined
  9008 00005CF6 0F840B220100            	je L_error_fvar_undefined
  9009 00005CFC 803804                  	cmp byte [rax], T_closure
  9010 00005CFF 0F8586220100            	jne L_error_non_closure
  9011 00005D05 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9012 00005D08 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9013 00005D0B 50                      	push rax
  9014 00005D0C 6A02                    	push 2	; arg count
  9015 00005D0E 488B4510                	mov rax, ENV
  9016 00005D12 488B00                  	mov rax, qword [rax + 8 * 0]
  9017 00005D15 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  9018 00005D18 488B00                  	mov rax, qword [rax]
  9019 00005D1B 803804                  	cmp byte [rax], T_closure
  9020 00005D1E 0F8567220100            	jne L_error_non_closure
  9021 00005D24 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9022 00005D27 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  9023 00005D2A FF7500                  	push qword[rbp]
  9024 00005D2D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  9025 00005D30 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  9026 00005D34 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  9027 00005D38 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  9028 00005D3C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  9029 00005D3F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  9030 00005D42 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  9031 00005D47 4983C103                	add r9, 3 	 ;for getting to the params
  9032 00005D4B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  9033 00005D4F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  9034                                  .L_tc_recycle_frame_loop_014d:
  9035 00005D52 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  9036 00005D55 7410                    	je .L_tc_recycle_frame_done_014d
  9037 00005D57 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  9038 00005D5A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  9039 00005D5D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  9040 00005D61 4983E808                	sub r8, 8	 ;move the top of the stack one down
  9041 00005D65 EBEB                    	jmp .L_tc_recycle_frame_loop_014d
  9042                                  .L_tc_recycle_frame_done_014d:
  9043 00005D67 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  9044 00005D68 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  9045 00005D6C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9046                                  .L_if_end_00a9:
  9047 00005D6F C9                      	leave
  9048 00005D70 C21800                  	ret AND_KILL_FRAME(1)
  9049                                  .L_lambda_opt_end_001f:	; new closure is in rax
  9050 00005D73 C9                      	leave
  9051 00005D74 C22000                  	ret AND_KILL_FRAME(2)
  9052                                  .L_lambda_simple_end_00f4:	; new closure is in rax
  9053 00005D77 803804                  	cmp byte [rax], T_closure
  9054 00005D7A 0F850B220100            	jne L_error_non_closure
  9055 00005D80 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9056 00005D83 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9057 00005D86 48890425[F70F0000]      	mov qword [free_var_32], rax
  9058 00005D8E 48B8-                   	mov rax, sob_void
  9058 00005D90 [0000000000000000] 
  9059                                  
  9060 00005D98 4889C7                  	mov rdi, rax
  9061 00005D9B E8E9240100              	call print_sexpr_if_not_void
  9062                                  	; preparing a non-tail-call
  9063 00005DA0 48B8-                   	mov rax, L_constants + 1993
  9063 00005DA2 [C907000000000000] 
  9064 00005DAA 50                      	push rax
  9065 00005DAB 6A01                    	push 1	; arg count
  9066 00005DAD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9067 00005DB2 E87D220100              	call malloc
  9068 00005DB7 50                      	push rax
  9069 00005DB8 BF00000000              	mov rdi, 8 * 0	; new rib
  9070 00005DBD E872220100              	call malloc
  9071 00005DC2 50                      	push rax
  9072 00005DC3 BF08000000              	mov rdi, 8 * 1	; extended env
  9073 00005DC8 E867220100              	call malloc
  9074 00005DCD 488B7D10                	mov rdi, ENV
  9075 00005DD1 BE00000000              	mov rsi, 0
  9076 00005DD6 BA01000000              	mov rdx, 1
  9077                                  .L_lambda_simple_env_loop_00f7:	; ext_env[i + 1] <-- env[i]
  9078 00005DDB 4883FE00                	cmp rsi, 0
  9079 00005DDF 7410                    	je .L_lambda_simple_env_end_00f7
  9080 00005DE1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9081 00005DE5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9082 00005DE9 48FFC6                  	inc rsi
  9083 00005DEC 48FFC2                  	inc rdx
  9084 00005DEF EBEA                    	jmp .L_lambda_simple_env_loop_00f7
  9085                                  .L_lambda_simple_env_end_00f7:
  9086 00005DF1 5B                      	pop rbx
  9087 00005DF2 BE00000000              	mov rsi, 0
  9088                                  .L_lambda_simple_params_loop_00f7:	; copy params
  9089 00005DF7 4883FE00                	cmp rsi, 0
  9090 00005DFB 740E                    	je .L_lambda_simple_params_end_00f7
  9091 00005DFD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9092 00005E02 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9093 00005E06 48FFC6                  	inc rsi
  9094 00005E09 EBEC                    	jmp .L_lambda_simple_params_loop_00f7
  9095                                  .L_lambda_simple_params_end_00f7:
  9096 00005E0B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9097 00005E0E 4889C3                  	mov rbx, rax
  9098 00005E11 58                      	pop rax
  9099 00005E12 C60004                  	mov byte [rax], T_closure
  9100 00005E15 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9101 00005E19 48C74009[265E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f7
  9102 00005E21 E9D4040000              	jmp .L_lambda_simple_end_00f7
  9103                                  .L_lambda_simple_code_00f7:	; lambda-simple body
  9104 00005E26 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9105 00005E2C 740B                    	je .L_lambda_simple_arity_check_ok_00f7
  9106 00005E2E FF742410                	push qword [rsp + 8 * 2]
  9107 00005E32 6A01                    	push 1
  9108 00005E34 E9B4210100              	jmp L_error_incorrect_arity_simple
  9109                                  .L_lambda_simple_arity_check_ok_00f7:
  9110 00005E39 C8000000                	enter 0, 0
  9111 00005E3D BF08000000              	mov rdi, 8*1
  9112 00005E42 E8ED210100              	call malloc
  9113 00005E47 488B5D20                	mov rbx, PARAM(0)
  9114 00005E4B 488918                  	mov qword[rax], rbx
  9115 00005E4E 48894520                	mov PARAM(0), rax
  9116 00005E52 48B8-                   	mov rax, sob_void
  9116 00005E54 [0000000000000000] 
  9117                                  
  9118 00005E5C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9119 00005E61 E8CE210100              	call malloc
  9120 00005E66 50                      	push rax
  9121 00005E67 BF08000000              	mov rdi, 8 * 1	; new rib
  9122 00005E6C E8C3210100              	call malloc
  9123 00005E71 50                      	push rax
  9124 00005E72 BF10000000              	mov rdi, 8 * 2	; extended env
  9125 00005E77 E8B8210100              	call malloc
  9126 00005E7C 488B7D10                	mov rdi, ENV
  9127 00005E80 BE00000000              	mov rsi, 0
  9128 00005E85 BA01000000              	mov rdx, 1
  9129                                  .L_lambda_simple_env_loop_00f8:	; ext_env[i + 1] <-- env[i]
  9130 00005E8A 4883FE01                	cmp rsi, 1
  9131 00005E8E 7410                    	je .L_lambda_simple_env_end_00f8
  9132 00005E90 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9133 00005E94 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9134 00005E98 48FFC6                  	inc rsi
  9135 00005E9B 48FFC2                  	inc rdx
  9136 00005E9E EBEA                    	jmp .L_lambda_simple_env_loop_00f8
  9137                                  .L_lambda_simple_env_end_00f8:
  9138 00005EA0 5B                      	pop rbx
  9139 00005EA1 BE00000000              	mov rsi, 0
  9140                                  .L_lambda_simple_params_loop_00f8:	; copy params
  9141 00005EA6 4883FE01                	cmp rsi, 1
  9142 00005EAA 740E                    	je .L_lambda_simple_params_end_00f8
  9143 00005EAC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9144 00005EB1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9145 00005EB5 48FFC6                  	inc rsi
  9146 00005EB8 EBEC                    	jmp .L_lambda_simple_params_loop_00f8
  9147                                  .L_lambda_simple_params_end_00f8:
  9148 00005EBA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9149 00005EBD 4889C3                  	mov rbx, rax
  9150 00005EC0 58                      	pop rax
  9151 00005EC1 C60004                  	mov byte [rax], T_closure
  9152 00005EC4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9153 00005EC8 48C74009[D55E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f8
  9154 00005ED0 E96E010000              	jmp .L_lambda_simple_end_00f8
  9155                                  .L_lambda_simple_code_00f8:	; lambda-simple body
  9156 00005ED5 48837C241003            	cmp qword [rsp + 8 * 2], 3
  9157 00005EDB 740B                    	je .L_lambda_simple_arity_check_ok_00f8
  9158 00005EDD FF742410                	push qword [rsp + 8 * 2]
  9159 00005EE1 6A03                    	push 3
  9160 00005EE3 E905210100              	jmp L_error_incorrect_arity_simple
  9161                                  .L_lambda_simple_arity_check_ok_00f8:
  9162 00005EE8 C8000000                	enter 0, 0
  9163                                  	; preparing a non-tail-call
  9164 00005EEC 488B4530                	mov rax, PARAM(2)	; param ss
  9165 00005EF0 50                      	push rax
  9166 00005EF1 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
  9167 00005EF9 803805                  	cmp byte [rax], T_undefined
  9168 00005EFC 0F8405200100            	je L_error_fvar_undefined
  9169 00005F02 50                      	push rax
  9170 00005F03 6A02                    	push 2	; arg count
  9171 00005F05 488B0425[25150000]      	mov rax, qword [free_var_110]	; free var ormap
  9172 00005F0D 803805                  	cmp byte [rax], T_undefined
  9173 00005F10 0F84F11F0100            	je L_error_fvar_undefined
  9174 00005F16 803804                  	cmp byte [rax], T_closure
  9175 00005F19 0F856C200100            	jne L_error_non_closure
  9176 00005F1F FF7001                  	push SOB_CLOSURE_ENV(rax)
  9177 00005F22 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9178 00005F25 483D[02000000]          	cmp rax, sob_boolean_false
  9179 00005F2B 7409                    	je .L_if_else_00ab
  9180 00005F2D 488B4528                	mov rax, PARAM(1)	; param unit
  9181 00005F31 E909010000              	jmp .L_if_end_00ab
  9182                                  .L_if_else_00ab:
  9183                                  	; preparing a tail-call
  9184                                  	; preparing a non-tail-call
  9185 00005F36 488B4530                	mov rax, PARAM(2)	; param ss
  9186 00005F3A 50                      	push rax
  9187 00005F3B 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  9188 00005F43 803805                  	cmp byte [rax], T_undefined
  9189 00005F46 0F84BB1F0100            	je L_error_fvar_undefined
  9190 00005F4C 50                      	push rax
  9191 00005F4D 6A02                    	push 2	; arg count
  9192 00005F4F 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
  9193 00005F57 803805                  	cmp byte [rax], T_undefined
  9194 00005F5A 0F84A71F0100            	je L_error_fvar_undefined
  9195 00005F60 803804                  	cmp byte [rax], T_closure
  9196 00005F63 0F8522200100            	jne L_error_non_closure
  9197 00005F69 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9198 00005F6C FF5009                  	call SOB_CLOSURE_CODE(rax)
  9199 00005F6F 50                      	push rax
  9200                                  	; preparing a non-tail-call
  9201                                  	; preparing a non-tail-call
  9202 00005F70 488B4530                	mov rax, PARAM(2)	; param ss
  9203 00005F74 50                      	push rax
  9204 00005F75 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  9205 00005F7D 803805                  	cmp byte [rax], T_undefined
  9206 00005F80 0F84811F0100            	je L_error_fvar_undefined
  9207 00005F86 50                      	push rax
  9208 00005F87 6A02                    	push 2	; arg count
  9209 00005F89 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
  9210 00005F91 803805                  	cmp byte [rax], T_undefined
  9211 00005F94 0F846D1F0100            	je L_error_fvar_undefined
  9212 00005F9A 803804                  	cmp byte [rax], T_closure
  9213 00005F9D 0F85E81F0100            	jne L_error_non_closure
  9214 00005FA3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9215 00005FA6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9216 00005FA9 50                      	push rax
  9217 00005FAA 488B4528                	mov rax, PARAM(1)	; param unit
  9218 00005FAE 50                      	push rax
  9219 00005FAF 488B4520                	mov rax, PARAM(0)	; param f
  9220 00005FB3 50                      	push rax
  9221 00005FB4 6A03                    	push 3	; arg count
  9222 00005FB6 488B0425[08100000]      	mov rax, qword [free_var_33]	; free var apply
  9223 00005FBE 803805                  	cmp byte [rax], T_undefined
  9224 00005FC1 0F84401F0100            	je L_error_fvar_undefined
  9225 00005FC7 803804                  	cmp byte [rax], T_closure
  9226 00005FCA 0F85BB1F0100            	jne L_error_non_closure
  9227 00005FD0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9228 00005FD3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9229 00005FD6 50                      	push rax
  9230 00005FD7 488B4520                	mov rax, PARAM(0)	; param f
  9231 00005FDB 50                      	push rax
  9232 00005FDC 6A03                    	push 3	; arg count
  9233 00005FDE 488B4510                	mov rax, ENV
  9234 00005FE2 488B00                  	mov rax, qword [rax + 8 * 0]
  9235 00005FE5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  9236 00005FE8 488B00                  	mov rax, qword [rax]
  9237 00005FEB 803804                  	cmp byte [rax], T_closure
  9238 00005FEE 0F85971F0100            	jne L_error_non_closure
  9239 00005FF4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9240 00005FF7 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  9241 00005FFA FF7500                  	push qword[rbp]
  9242 00005FFD 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  9243 00006000 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  9244 00006004 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  9245 00006008 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  9246 0000600C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  9247 0000600F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  9248 00006012 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  9249 00006017 4983C103                	add r9, 3 	 ;for getting to the params
  9250 0000601B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  9251 0000601F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  9252                                  .L_tc_recycle_frame_loop_014f:
  9253 00006022 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  9254 00006025 7410                    	je .L_tc_recycle_frame_done_014f
  9255 00006027 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  9256 0000602A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  9257 0000602D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  9258 00006031 4983E808                	sub r8, 8	 ;move the top of the stack one down
  9259 00006035 EBEB                    	jmp .L_tc_recycle_frame_loop_014f
  9260                                  .L_tc_recycle_frame_done_014f:
  9261 00006037 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  9262 00006038 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  9263 0000603C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9264                                  .L_if_end_00ab:
  9265 0000603F C9                      	leave
  9266 00006040 C22800                  	ret AND_KILL_FRAME(3)
  9267                                  .L_lambda_simple_end_00f8:	; new closure is in rax
  9268 00006043 50                      	push rax
  9269 00006044 488B4520                	mov rax, PARAM(0)	; param run
  9270 00006048 8F00                    	pop qword [rax]
  9271 0000604A 48B8-                   	mov rax, sob_void
  9271 0000604C [0000000000000000] 
  9272                                  
  9273 00006054 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9274 00006059 E8D61F0100              	call malloc
  9275 0000605E 50                      	push rax
  9276 0000605F BF08000000              	mov rdi, 8 * 1	; new rib
  9277 00006064 E8CB1F0100              	call malloc
  9278 00006069 50                      	push rax
  9279 0000606A BF10000000              	mov rdi, 8 * 2	; extended env
  9280 0000606F E8C01F0100              	call malloc
  9281 00006074 488B7D10                	mov rdi, ENV
  9282 00006078 BE00000000              	mov rsi, 0
  9283 0000607D BA01000000              	mov rdx, 1
  9284                                  .L_lambda_opt_env_loop_0020:	; ext_env[i + 1] <-- env[i]
  9285 00006082 4883FE01                	cmp rsi, 1
  9286 00006086 7410                    	je .L_lambda_opt_env_end_0020
  9287 00006088 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9288 0000608C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9289 00006090 48FFC6                  	inc rsi
  9290 00006093 48FFC2                  	inc rdx
  9291 00006096 EBEA                    	jmp .L_lambda_opt_env_loop_0020
  9292                                  .L_lambda_opt_env_end_0020:
  9293 00006098 5B                      	pop rbx
  9294 00006099 BE00000000              	mov rsi, 0
  9295                                  .L_lambda_opt_params_loop_0020:	; copy params
  9296 0000609E 4883FE01                	cmp rsi, 1
  9297 000060A2 740E                    	je .L_lambda_opt_params_end_0020
  9298 000060A4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9299 000060A9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9300 000060AD 48FFC6                  	inc rsi
  9301 000060B0 EBEC                    	jmp .L_lambda_opt_params_loop_0020
  9302                                  .L_lambda_opt_params_end_0020:
  9303 000060B2 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
  9304 000060B5 4889C3                  	mov rbx, rax
  9305 000060B8 58                      	pop rax
  9306 000060B9 C60004                  	mov byte [rax], T_closure
  9307 000060BC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9308 000060C0 48C74009[CD600000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0020
  9309 000060C8 E929020000              	jmp .L_lambda_opt_end_0020
  9310                                  .L_lambda_opt_code_0020:	; lambda-opt body
  9311 000060CD 48837C241002            	cmp qword [rsp + 8 * 2], 2
  9312 000060D3 7411                    	je .L_lambda_opt_arity_check_exact_0020
  9313 000060D5 0F8FCE000000            	jg .L_lambda_opt_arity_check_more_0020
  9314 000060DB FF742410                	push qword [rsp + 8 * 2]
  9315 000060DF 6A02                    	push 2
  9316 000060E1 E91B1F0100              	jmp L_error_incorrect_arity_opt
  9317                                  .L_lambda_opt_arity_check_exact_0020:
  9318 000060E6 4883EC08                	sub rsp, 8
  9319 000060EA 488B442408              	mov rax, qword[rsp + 8 *1]
  9320 000060EF 48890424                	mov qword[rsp], rax  
  9321 000060F3 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  9322 000060F8 4889442408              	mov qword[rsp + 8 * 1], rax
  9323 000060FD B803000000              	mov rax, 3
  9324 00006102 4889442410              	mov qword[rsp + 8 *2], rax
  9325 00006107 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  9326 0000610C 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  9327 00006111 488B442428              	mov rax, qword[rsp + 8 * (4 + 1)]
  9328 00006116 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  9329 0000611B 48B8-                   	mov rax, sob_nil
  9329 0000611D [0100000000000000] 
  9330 00006125 4889442428              	mov qword[rsp + 8 * (3 + 2)], rax
  9331 0000612A C8000000                	enter 0, 0
  9332                                  	; preparing a tail-call
  9333 0000612E 488B4530                	mov rax, PARAM(2)	; param ss
  9334 00006132 50                      	push rax
  9335 00006133 488B4528                	mov rax, PARAM(1)	; param unit
  9336 00006137 50                      	push rax
  9337 00006138 488B4520                	mov rax, PARAM(0)	; param f
  9338 0000613C 50                      	push rax
  9339 0000613D 6A03                    	push 3	; arg count
  9340 0000613F 488B4510                	mov rax, ENV
  9341 00006143 488B00                  	mov rax, qword [rax + 8 * 0]
  9342 00006146 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  9343 00006149 488B00                  	mov rax, qword [rax]
  9344 0000614C 803804                  	cmp byte [rax], T_closure
  9345 0000614F 0F85361E0100            	jne L_error_non_closure
  9346 00006155 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9347 00006158 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  9348 0000615B FF7500                  	push qword[rbp]
  9349 0000615E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  9350 00006161 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  9351 00006165 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  9352 00006169 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  9353 0000616D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  9354 00006170 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  9355 00006173 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  9356 00006178 4983C103                	add r9, 3 	 ;for getting to the params
  9357 0000617C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  9358 00006180 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  9359                                  .L_tc_recycle_frame_loop_0151:
  9360 00006183 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  9361 00006186 7410                    	je .L_tc_recycle_frame_done_0151
  9362 00006188 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  9363 0000618B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  9364 0000618E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  9365 00006192 4983E808                	sub r8, 8	 ;move the top of the stack one down
  9366 00006196 EBEB                    	jmp .L_tc_recycle_frame_loop_0151
  9367                                  .L_tc_recycle_frame_done_0151:
  9368 00006198 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  9369 00006199 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  9370 0000619D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9371 000061A0 C9                      	leave
  9372 000061A1 C22800                  	ret AND_KILL_FRAME(3)
  9373 000061A4 E94D010000              	jmp .L_lambda_opt_end_0020	; new closure is in rax
  9374                                  .L_lambda_opt_arity_check_more_0020:
  9375 000061A9 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  9376 000061AE 49B9-                   	mov r9, sob_nil
  9376 000061B0 [0100000000000000] 
  9377 000061B8 4889E3                  	mov rbx, rsp 
  9378 000061BB 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  9379 000061BF 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  9380 000061C2 49C1E003                	shl r8, 3
  9381 000061C6 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  9382 000061C9 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  9383                                  .L_lambda_opt_stack_shrink_loop_0020:
  9384 000061CE 4983F802                	cmp r8, 2
  9385 000061D2 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0020
  9386 000061D4 BF11000000              	mov rdi, 1+8+8 ;for pair
  9387 000061D9 E8561E0100              	call malloc;to create the pair in the stack
  9388 000061DE C60021                  	mov byte [rax], T_pair ; to make it a pair
  9389 000061E1 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
  9390 000061E4 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
  9391 000061E8 4C894809                 	mov qword[rax+1+8],r9
  9392 000061EC 4989C1                  	mov r9, rax ;for the recursion 
  9393 000061EF 49FFC8                  	dec r8 ;we finished copy another opt param to the list
  9394 000061F2 4883EB08                	sub rbx, 8 ;to get the next param to copy
  9395 000061F6 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0020
  9396                                  .L_lambda_opt_stack_shrink_loop_exit_0020:
  9397 000061F8 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
  9398 000061FD 4883E903                	sub rcx, 3
  9399 00006201 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
  9400 00006205 4801CC                  	add rsp, rcx ;shrinking the stack
  9401 00006208 4889E0                  	mov rax, rsp
  9402 0000620B 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
  9403 0000620E 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
  9404 00006212 49FFC8                  	dec r8 ;we start with param 0, not 1 
  9405 00006215 4883C018                	add rax, 3 * 8;now rax is param 0
  9406 00006219 49C1E003                	shl r8, 3;convert to byte
  9407 0000621D 4C01C0                  	add rax, r8;now rax is the top of the stack
  9408 00006220 4C8908                  	mov qword[rax], r9;puting the list at the top
  9409 00006223 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
  9410 00006227 4889E3                  	mov rbx, rsp 
  9411 0000622A 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
  9412 0000622D 41BA02000000            	mov r10, 2;r10 is the not opt params length
  9413 00006233 49FFCA                  	dec r10 
  9414 00006236 49C1E203                	shl r10, 3;to get bytes
  9415 0000623A 4883C318                	add rbx, 3*8;rbx is the first param
  9416 0000623E 4C01D3                  	add rbx, r10; rbx is where the address to copy to
  9417 00006241 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  9418 00006244 4C8900                  	mov qword[rax], r8
  9419 00006247 4883E808                	sub rax, 8
  9420 0000624B 4883EB08                	sub rbx, 8
  9421 0000624F 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  9422 00006252 4C8900                  	mov qword[rax], r8
  9423 00006255 4883E808                	sub rax, 8
  9424 00006259 4883EB08                	sub rbx, 8
  9425 0000625D 4889E0                  	mov rax, rsp
  9426 00006260 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  9427 00006263 48C744241003000000      	mov qword [rsp+2*8], 3
  9428 0000626C 488B5808                	mov rbx, qword[rax + 8 *1]
  9429 00006270 48895C2408              	mov qword [rsp + 1*8] ,rbx
  9430 00006275 488B18                  	mov rbx, qword[rax]
  9431 00006278 48891C24                	mov qword [rsp], rbx
  9432 0000627C C8000000                	enter 0, 0
  9433                                  	; preparing a tail-call
  9434 00006280 488B4530                	mov rax, PARAM(2)	; param ss
  9435 00006284 50                      	push rax
  9436 00006285 488B4528                	mov rax, PARAM(1)	; param unit
  9437 00006289 50                      	push rax
  9438 0000628A 488B4520                	mov rax, PARAM(0)	; param f
  9439 0000628E 50                      	push rax
  9440 0000628F 6A03                    	push 3	; arg count
  9441 00006291 488B4510                	mov rax, ENV
  9442 00006295 488B00                  	mov rax, qword [rax + 8 * 0]
  9443 00006298 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  9444 0000629B 488B00                  	mov rax, qword [rax]
  9445 0000629E 803804                  	cmp byte [rax], T_closure
  9446 000062A1 0F85E41C0100            	jne L_error_non_closure
  9447 000062A7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9448 000062AA FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  9449 000062AD FF7500                  	push qword[rbp]
  9450 000062B0 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  9451 000062B3 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  9452 000062B7 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  9453 000062BB 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  9454 000062BF 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  9455 000062C2 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  9456 000062C5 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  9457 000062CA 4983C103                	add r9, 3 	 ;for getting to the params
  9458 000062CE 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  9459 000062D2 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  9460                                  .L_tc_recycle_frame_loop_0150:
  9461 000062D5 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  9462 000062D8 7410                    	je .L_tc_recycle_frame_done_0150
  9463 000062DA 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  9464 000062DD 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  9465 000062E0 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  9466 000062E4 4983E808                	sub r8, 8	 ;move the top of the stack one down
  9467 000062E8 EBEB                    	jmp .L_tc_recycle_frame_loop_0150
  9468                                  .L_tc_recycle_frame_done_0150:
  9469 000062EA 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  9470 000062EB 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  9471 000062EF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9472 000062F2 C9                      	leave
  9473 000062F3 C22800                  	ret AND_KILL_FRAME(3)
  9474                                  .L_lambda_opt_end_0020:	; new closure is in rax
  9475 000062F6 C9                      	leave
  9476 000062F7 C21800                  	ret AND_KILL_FRAME(1)
  9477                                  .L_lambda_simple_end_00f7:	; new closure is in rax
  9478 000062FA 803804                  	cmp byte [rax], T_closure
  9479 000062FD 0F85881C0100            	jne L_error_non_closure
  9480 00006303 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9481 00006306 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9482 00006309 48890425[7C130000]      	mov qword [free_var_85], rax
  9483 00006311 48B8-                   	mov rax, sob_void
  9483 00006313 [0000000000000000] 
  9484                                  
  9485 0000631B 4889C7                  	mov rdi, rax
  9486 0000631E E8661F0100              	call print_sexpr_if_not_void
  9487                                  	; preparing a non-tail-call
  9488 00006323 48B8-                   	mov rax, L_constants + 1993
  9488 00006325 [C907000000000000] 
  9489 0000632D 50                      	push rax
  9490 0000632E 6A01                    	push 1	; arg count
  9491 00006330 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9492 00006335 E8FA1C0100              	call malloc
  9493 0000633A 50                      	push rax
  9494 0000633B BF00000000              	mov rdi, 8 * 0	; new rib
  9495 00006340 E8EF1C0100              	call malloc
  9496 00006345 50                      	push rax
  9497 00006346 BF08000000              	mov rdi, 8 * 1	; extended env
  9498 0000634B E8E41C0100              	call malloc
  9499 00006350 488B7D10                	mov rdi, ENV
  9500 00006354 BE00000000              	mov rsi, 0
  9501 00006359 BA01000000              	mov rdx, 1
  9502                                  .L_lambda_simple_env_loop_00f9:	; ext_env[i + 1] <-- env[i]
  9503 0000635E 4883FE00                	cmp rsi, 0
  9504 00006362 7410                    	je .L_lambda_simple_env_end_00f9
  9505 00006364 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9506 00006368 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9507 0000636C 48FFC6                  	inc rsi
  9508 0000636F 48FFC2                  	inc rdx
  9509 00006372 EBEA                    	jmp .L_lambda_simple_env_loop_00f9
  9510                                  .L_lambda_simple_env_end_00f9:
  9511 00006374 5B                      	pop rbx
  9512 00006375 BE00000000              	mov rsi, 0
  9513                                  .L_lambda_simple_params_loop_00f9:	; copy params
  9514 0000637A 4883FE00                	cmp rsi, 0
  9515 0000637E 740E                    	je .L_lambda_simple_params_end_00f9
  9516 00006380 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9517 00006385 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9518 00006389 48FFC6                  	inc rsi
  9519 0000638C EBEC                    	jmp .L_lambda_simple_params_loop_00f9
  9520                                  .L_lambda_simple_params_end_00f9:
  9521 0000638E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9522 00006391 4889C3                  	mov rbx, rax
  9523 00006394 58                      	pop rax
  9524 00006395 C60004                  	mov byte [rax], T_closure
  9525 00006398 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9526 0000639C 48C74009[A9630000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f9
  9527 000063A4 E925050000              	jmp .L_lambda_simple_end_00f9
  9528                                  .L_lambda_simple_code_00f9:	; lambda-simple body
  9529 000063A9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9530 000063AF 740B                    	je .L_lambda_simple_arity_check_ok_00f9
  9531 000063B1 FF742410                	push qword [rsp + 8 * 2]
  9532 000063B5 6A01                    	push 1
  9533 000063B7 E9311C0100              	jmp L_error_incorrect_arity_simple
  9534                                  .L_lambda_simple_arity_check_ok_00f9:
  9535 000063BC C8000000                	enter 0, 0
  9536 000063C0 BF08000000              	mov rdi, 8*1
  9537 000063C5 E86A1C0100              	call malloc
  9538 000063CA 488B5D20                	mov rbx, PARAM(0)
  9539 000063CE 488918                  	mov qword[rax], rbx
  9540 000063D1 48894520                	mov PARAM(0), rax
  9541 000063D5 48B8-                   	mov rax, sob_void
  9541 000063D7 [0000000000000000] 
  9542                                  
  9543 000063DF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9544 000063E4 E84B1C0100              	call malloc
  9545 000063E9 50                      	push rax
  9546 000063EA BF08000000              	mov rdi, 8 * 1	; new rib
  9547 000063EF E8401C0100              	call malloc
  9548 000063F4 50                      	push rax
  9549 000063F5 BF10000000              	mov rdi, 8 * 2	; extended env
  9550 000063FA E8351C0100              	call malloc
  9551 000063FF 488B7D10                	mov rdi, ENV
  9552 00006403 BE00000000              	mov rsi, 0
  9553 00006408 BA01000000              	mov rdx, 1
  9554                                  .L_lambda_simple_env_loop_00fa:	; ext_env[i + 1] <-- env[i]
  9555 0000640D 4883FE01                	cmp rsi, 1
  9556 00006411 7410                    	je .L_lambda_simple_env_end_00fa
  9557 00006413 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9558 00006417 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9559 0000641B 48FFC6                  	inc rsi
  9560 0000641E 48FFC2                  	inc rdx
  9561 00006421 EBEA                    	jmp .L_lambda_simple_env_loop_00fa
  9562                                  .L_lambda_simple_env_end_00fa:
  9563 00006423 5B                      	pop rbx
  9564 00006424 BE00000000              	mov rsi, 0
  9565                                  .L_lambda_simple_params_loop_00fa:	; copy params
  9566 00006429 4883FE01                	cmp rsi, 1
  9567 0000642D 740E                    	je .L_lambda_simple_params_end_00fa
  9568 0000642F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9569 00006434 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9570 00006438 48FFC6                  	inc rsi
  9571 0000643B EBEC                    	jmp .L_lambda_simple_params_loop_00fa
  9572                                  .L_lambda_simple_params_end_00fa:
  9573 0000643D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9574 00006440 4889C3                  	mov rbx, rax
  9575 00006443 58                      	pop rax
  9576 00006444 C60004                  	mov byte [rax], T_closure
  9577 00006447 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9578 0000644B 48C74009[58640000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00fa
  9579 00006453 E9BF010000              	jmp .L_lambda_simple_end_00fa
  9580                                  .L_lambda_simple_code_00fa:	; lambda-simple body
  9581 00006458 48837C241003            	cmp qword [rsp + 8 * 2], 3
  9582 0000645E 740B                    	je .L_lambda_simple_arity_check_ok_00fa
  9583 00006460 FF742410                	push qword [rsp + 8 * 2]
  9584 00006464 6A03                    	push 3
  9585 00006466 E9821B0100              	jmp L_error_incorrect_arity_simple
  9586                                  .L_lambda_simple_arity_check_ok_00fa:
  9587 0000646B C8000000                	enter 0, 0
  9588                                  	; preparing a non-tail-call
  9589 0000646F 488B4530                	mov rax, PARAM(2)	; param ss
  9590 00006473 50                      	push rax
  9591 00006474 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
  9592 0000647C 803805                  	cmp byte [rax], T_undefined
  9593 0000647F 0F84821A0100            	je L_error_fvar_undefined
  9594 00006485 50                      	push rax
  9595 00006486 6A02                    	push 2	; arg count
  9596 00006488 488B0425[25150000]      	mov rax, qword [free_var_110]	; free var ormap
  9597 00006490 803805                  	cmp byte [rax], T_undefined
  9598 00006493 0F846E1A0100            	je L_error_fvar_undefined
  9599 00006499 803804                  	cmp byte [rax], T_closure
  9600 0000649C 0F85E91A0100            	jne L_error_non_closure
  9601 000064A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9602 000064A5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9603 000064A8 483D[02000000]          	cmp rax, sob_boolean_false
  9604 000064AE 7409                    	je .L_if_else_00ac
  9605 000064B0 488B4528                	mov rax, PARAM(1)	; param unit
  9606 000064B4 E95A010000              	jmp .L_if_end_00ac
  9607                                  .L_if_else_00ac:
  9608                                  	; preparing a tail-call
  9609                                  	; preparing a non-tail-call
  9610                                  	; preparing a non-tail-call
  9611 000064B9 48B8-                   	mov rax, L_constants + 1
  9611 000064BB [0100000000000000] 
  9612 000064C3 50                      	push rax
  9613                                  	; preparing a non-tail-call
  9614                                  	; preparing a non-tail-call
  9615 000064C4 488B4530                	mov rax, PARAM(2)	; param ss
  9616 000064C8 50                      	push rax
  9617 000064C9 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
  9618 000064D1 803805                  	cmp byte [rax], T_undefined
  9619 000064D4 0F842D1A0100            	je L_error_fvar_undefined
  9620 000064DA 50                      	push rax
  9621 000064DB 6A02                    	push 2	; arg count
  9622 000064DD 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
  9623 000064E5 803805                  	cmp byte [rax], T_undefined
  9624 000064E8 0F84191A0100            	je L_error_fvar_undefined
  9625 000064EE 803804                  	cmp byte [rax], T_closure
  9626 000064F1 0F85941A0100            	jne L_error_non_closure
  9627 000064F7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9628 000064FA FF5009                  	call SOB_CLOSURE_CODE(rax)
  9629 000064FD 50                      	push rax
  9630 000064FE 488B4528                	mov rax, PARAM(1)	; param unit
  9631 00006502 50                      	push rax
  9632 00006503 488B4520                	mov rax, PARAM(0)	; param f
  9633 00006507 50                      	push rax
  9634 00006508 6A03                    	push 3	; arg count
  9635 0000650A 488B4510                	mov rax, ENV
  9636 0000650E 488B00                  	mov rax, qword [rax + 8 * 0]
  9637 00006511 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  9638 00006514 488B00                  	mov rax, qword [rax]
  9639 00006517 803804                  	cmp byte [rax], T_closure
  9640 0000651A 0F856B1A0100            	jne L_error_non_closure
  9641 00006520 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9642 00006523 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9643 00006526 50                      	push rax
  9644 00006527 6A02                    	push 2	; arg count
  9645 00006529 488B0425[16130000]      	mov rax, qword [free_var_79]	; free var cons
  9646 00006531 803805                  	cmp byte [rax], T_undefined
  9647 00006534 0F84CD190100            	je L_error_fvar_undefined
  9648 0000653A 803804                  	cmp byte [rax], T_closure
  9649 0000653D 0F85481A0100            	jne L_error_non_closure
  9650 00006543 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9651 00006546 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9652 00006549 50                      	push rax
  9653                                  	; preparing a non-tail-call
  9654 0000654A 488B4530                	mov rax, PARAM(2)	; param ss
  9655 0000654E 50                      	push rax
  9656 0000654F 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
  9657 00006557 803805                  	cmp byte [rax], T_undefined
  9658 0000655A 0F84A7190100            	je L_error_fvar_undefined
  9659 00006560 50                      	push rax
  9660 00006561 6A02                    	push 2	; arg count
  9661 00006563 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
  9662 0000656B 803805                  	cmp byte [rax], T_undefined
  9663 0000656E 0F8493190100            	je L_error_fvar_undefined
  9664 00006574 803804                  	cmp byte [rax], T_closure
  9665 00006577 0F850E1A0100            	jne L_error_non_closure
  9666 0000657D FF7001                  	push SOB_CLOSURE_ENV(rax)
  9667 00006580 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9668 00006583 50                      	push rax
  9669 00006584 6A02                    	push 2	; arg count
  9670 00006586 488B0425[F70F0000]      	mov rax, qword [free_var_32]	; free var append
  9671 0000658E 803805                  	cmp byte [rax], T_undefined
  9672 00006591 0F8470190100            	je L_error_fvar_undefined
  9673 00006597 803804                  	cmp byte [rax], T_closure
  9674 0000659A 0F85EB190100            	jne L_error_non_closure
  9675 000065A0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9676 000065A3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9677 000065A6 50                      	push rax
  9678 000065A7 488B4520                	mov rax, PARAM(0)	; param f
  9679 000065AB 50                      	push rax
  9680 000065AC 6A02                    	push 2	; arg count
  9681 000065AE 488B0425[08100000]      	mov rax, qword [free_var_33]	; free var apply
  9682 000065B6 803805                  	cmp byte [rax], T_undefined
  9683 000065B9 0F8448190100            	je L_error_fvar_undefined
  9684 000065BF 803804                  	cmp byte [rax], T_closure
  9685 000065C2 0F85C3190100            	jne L_error_non_closure
  9686 000065C8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9687 000065CB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  9688 000065CE FF7500                  	push qword[rbp]
  9689 000065D1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  9690 000065D4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  9691 000065D8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  9692 000065DC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  9693 000065E0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  9694 000065E3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  9695 000065E6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  9696 000065EB 4983C103                	add r9, 3 	 ;for getting to the params
  9697 000065EF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  9698 000065F3 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  9699                                  .L_tc_recycle_frame_loop_0152:
  9700 000065F6 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  9701 000065F9 7410                    	je .L_tc_recycle_frame_done_0152
  9702 000065FB 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  9703 000065FE 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  9704 00006601 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  9705 00006605 4983E808                	sub r8, 8	 ;move the top of the stack one down
  9706 00006609 EBEB                    	jmp .L_tc_recycle_frame_loop_0152
  9707                                  .L_tc_recycle_frame_done_0152:
  9708 0000660B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  9709 0000660C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  9710 00006610 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9711                                  .L_if_end_00ac:
  9712 00006613 C9                      	leave
  9713 00006614 C22800                  	ret AND_KILL_FRAME(3)
  9714                                  .L_lambda_simple_end_00fa:	; new closure is in rax
  9715 00006617 50                      	push rax
  9716 00006618 488B4520                	mov rax, PARAM(0)	; param run
  9717 0000661C 8F00                    	pop qword [rax]
  9718 0000661E 48B8-                   	mov rax, sob_void
  9718 00006620 [0000000000000000] 
  9719                                  
  9720 00006628 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9721 0000662D E8021A0100              	call malloc
  9722 00006632 50                      	push rax
  9723 00006633 BF08000000              	mov rdi, 8 * 1	; new rib
  9724 00006638 E8F7190100              	call malloc
  9725 0000663D 50                      	push rax
  9726 0000663E BF10000000              	mov rdi, 8 * 2	; extended env
  9727 00006643 E8EC190100              	call malloc
  9728 00006648 488B7D10                	mov rdi, ENV
  9729 0000664C BE00000000              	mov rsi, 0
  9730 00006651 BA01000000              	mov rdx, 1
  9731                                  .L_lambda_opt_env_loop_0021:	; ext_env[i + 1] <-- env[i]
  9732 00006656 4883FE01                	cmp rsi, 1
  9733 0000665A 7410                    	je .L_lambda_opt_env_end_0021
  9734 0000665C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9735 00006660 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9736 00006664 48FFC6                  	inc rsi
  9737 00006667 48FFC2                  	inc rdx
  9738 0000666A EBEA                    	jmp .L_lambda_opt_env_loop_0021
  9739                                  .L_lambda_opt_env_end_0021:
  9740 0000666C 5B                      	pop rbx
  9741 0000666D BE00000000              	mov rsi, 0
  9742                                  .L_lambda_opt_params_loop_0021:	; copy params
  9743 00006672 4883FE01                	cmp rsi, 1
  9744 00006676 740E                    	je .L_lambda_opt_params_end_0021
  9745 00006678 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9746 0000667D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9747 00006681 48FFC6                  	inc rsi
  9748 00006684 EBEC                    	jmp .L_lambda_opt_params_loop_0021
  9749                                  .L_lambda_opt_params_end_0021:
  9750 00006686 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
  9751 00006689 4889C3                  	mov rbx, rax
  9752 0000668C 58                      	pop rax
  9753 0000668D C60004                  	mov byte [rax], T_closure
  9754 00006690 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9755 00006694 48C74009[A1660000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0021
  9756 0000669C E929020000              	jmp .L_lambda_opt_end_0021
  9757                                  .L_lambda_opt_code_0021:	; lambda-opt body
  9758 000066A1 48837C241002            	cmp qword [rsp + 8 * 2], 2
  9759 000066A7 7411                    	je .L_lambda_opt_arity_check_exact_0021
  9760 000066A9 0F8FCE000000            	jg .L_lambda_opt_arity_check_more_0021
  9761 000066AF FF742410                	push qword [rsp + 8 * 2]
  9762 000066B3 6A02                    	push 2
  9763 000066B5 E947190100              	jmp L_error_incorrect_arity_opt
  9764                                  .L_lambda_opt_arity_check_exact_0021:
  9765 000066BA 4883EC08                	sub rsp, 8
  9766 000066BE 488B442408              	mov rax, qword[rsp + 8 *1]
  9767 000066C3 48890424                	mov qword[rsp], rax  
  9768 000066C7 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  9769 000066CC 4889442408              	mov qword[rsp + 8 * 1], rax
  9770 000066D1 B803000000              	mov rax, 3
  9771 000066D6 4889442410              	mov qword[rsp + 8 *2], rax
  9772 000066DB 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  9773 000066E0 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  9774 000066E5 488B442428              	mov rax, qword[rsp + 8 * (4 + 1)]
  9775 000066EA 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  9776 000066EF 48B8-                   	mov rax, sob_nil
  9776 000066F1 [0100000000000000] 
  9777 000066F9 4889442428              	mov qword[rsp + 8 * (3 + 2)], rax
  9778 000066FE C8000000                	enter 0, 0
  9779                                  	; preparing a tail-call
  9780 00006702 488B4530                	mov rax, PARAM(2)	; param ss
  9781 00006706 50                      	push rax
  9782 00006707 488B4528                	mov rax, PARAM(1)	; param unit
  9783 0000670B 50                      	push rax
  9784 0000670C 488B4520                	mov rax, PARAM(0)	; param f
  9785 00006710 50                      	push rax
  9786 00006711 6A03                    	push 3	; arg count
  9787 00006713 488B4510                	mov rax, ENV
  9788 00006717 488B00                  	mov rax, qword [rax + 8 * 0]
  9789 0000671A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  9790 0000671D 488B00                  	mov rax, qword [rax]
  9791 00006720 803804                  	cmp byte [rax], T_closure
  9792 00006723 0F8562180100            	jne L_error_non_closure
  9793 00006729 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9794 0000672C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  9795 0000672F FF7500                  	push qword[rbp]
  9796 00006732 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  9797 00006735 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  9798 00006739 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  9799 0000673D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  9800 00006741 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  9801 00006744 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  9802 00006747 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  9803 0000674C 4983C103                	add r9, 3 	 ;for getting to the params
  9804 00006750 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  9805 00006754 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  9806                                  .L_tc_recycle_frame_loop_0154:
  9807 00006757 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  9808 0000675A 7410                    	je .L_tc_recycle_frame_done_0154
  9809 0000675C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  9810 0000675F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  9811 00006762 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  9812 00006766 4983E808                	sub r8, 8	 ;move the top of the stack one down
  9813 0000676A EBEB                    	jmp .L_tc_recycle_frame_loop_0154
  9814                                  .L_tc_recycle_frame_done_0154:
  9815 0000676C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  9816 0000676D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  9817 00006771 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9818 00006774 C9                      	leave
  9819 00006775 C22800                  	ret AND_KILL_FRAME(3)
  9820 00006778 E94D010000              	jmp .L_lambda_opt_end_0021	; new closure is in rax
  9821                                  .L_lambda_opt_arity_check_more_0021:
  9822 0000677D 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  9823 00006782 49B9-                   	mov r9, sob_nil
  9823 00006784 [0100000000000000] 
  9824 0000678C 4889E3                  	mov rbx, rsp 
  9825 0000678F 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  9826 00006793 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  9827 00006796 49C1E003                	shl r8, 3
  9828 0000679A 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  9829 0000679D 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  9830                                  .L_lambda_opt_stack_shrink_loop_0021:
  9831 000067A2 4983F802                	cmp r8, 2
  9832 000067A6 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0021
  9833 000067A8 BF11000000              	mov rdi, 1+8+8 ;for pair
  9834 000067AD E882180100              	call malloc;to create the pair in the stack
  9835 000067B2 C60021                  	mov byte [rax], T_pair ; to make it a pair
  9836 000067B5 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
  9837 000067B8 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
  9838 000067BC 4C894809                 	mov qword[rax+1+8],r9
  9839 000067C0 4989C1                  	mov r9, rax ;for the recursion 
  9840 000067C3 49FFC8                  	dec r8 ;we finished copy another opt param to the list
  9841 000067C6 4883EB08                	sub rbx, 8 ;to get the next param to copy
  9842 000067CA EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0021
  9843                                  .L_lambda_opt_stack_shrink_loop_exit_0021:
  9844 000067CC 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
  9845 000067D1 4883E903                	sub rcx, 3
  9846 000067D5 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
  9847 000067D9 4801CC                  	add rsp, rcx ;shrinking the stack
  9848 000067DC 4889E0                  	mov rax, rsp
  9849 000067DF 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
  9850 000067E2 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
  9851 000067E6 49FFC8                  	dec r8 ;we start with param 0, not 1 
  9852 000067E9 4883C018                	add rax, 3 * 8;now rax is param 0
  9853 000067ED 49C1E003                	shl r8, 3;convert to byte
  9854 000067F1 4C01C0                  	add rax, r8;now rax is the top of the stack
  9855 000067F4 4C8908                  	mov qword[rax], r9;puting the list at the top
  9856 000067F7 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
  9857 000067FB 4889E3                  	mov rbx, rsp 
  9858 000067FE 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
  9859 00006801 41BA02000000            	mov r10, 2;r10 is the not opt params length
  9860 00006807 49FFCA                  	dec r10 
  9861 0000680A 49C1E203                	shl r10, 3;to get bytes
  9862 0000680E 4883C318                	add rbx, 3*8;rbx is the first param
  9863 00006812 4C01D3                  	add rbx, r10; rbx is where the address to copy to
  9864 00006815 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  9865 00006818 4C8900                  	mov qword[rax], r8
  9866 0000681B 4883E808                	sub rax, 8
  9867 0000681F 4883EB08                	sub rbx, 8
  9868 00006823 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  9869 00006826 4C8900                  	mov qword[rax], r8
  9870 00006829 4883E808                	sub rax, 8
  9871 0000682D 4883EB08                	sub rbx, 8
  9872 00006831 4889E0                  	mov rax, rsp
  9873 00006834 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  9874 00006837 48C744241003000000      	mov qword [rsp+2*8], 3
  9875 00006840 488B5808                	mov rbx, qword[rax + 8 *1]
  9876 00006844 48895C2408              	mov qword [rsp + 1*8] ,rbx
  9877 00006849 488B18                  	mov rbx, qword[rax]
  9878 0000684C 48891C24                	mov qword [rsp], rbx
  9879 00006850 C8000000                	enter 0, 0
  9880                                  	; preparing a tail-call
  9881 00006854 488B4530                	mov rax, PARAM(2)	; param ss
  9882 00006858 50                      	push rax
  9883 00006859 488B4528                	mov rax, PARAM(1)	; param unit
  9884 0000685D 50                      	push rax
  9885 0000685E 488B4520                	mov rax, PARAM(0)	; param f
  9886 00006862 50                      	push rax
  9887 00006863 6A03                    	push 3	; arg count
  9888 00006865 488B4510                	mov rax, ENV
  9889 00006869 488B00                  	mov rax, qword [rax + 8 * 0]
  9890 0000686C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  9891 0000686F 488B00                  	mov rax, qword [rax]
  9892 00006872 803804                  	cmp byte [rax], T_closure
  9893 00006875 0F8510170100            	jne L_error_non_closure
  9894 0000687B FF7001                  	push SOB_CLOSURE_ENV(rax)
  9895 0000687E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  9896 00006881 FF7500                  	push qword[rbp]
  9897 00006884 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  9898 00006887 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  9899 0000688B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  9900 0000688F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  9901 00006893 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  9902 00006896 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  9903 00006899 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  9904 0000689E 4983C103                	add r9, 3 	 ;for getting to the params
  9905 000068A2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  9906 000068A6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  9907                                  .L_tc_recycle_frame_loop_0153:
  9908 000068A9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  9909 000068AC 7410                    	je .L_tc_recycle_frame_done_0153
  9910 000068AE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  9911 000068B1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  9912 000068B4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  9913 000068B8 4983E808                	sub r8, 8	 ;move the top of the stack one down
  9914 000068BC EBEB                    	jmp .L_tc_recycle_frame_loop_0153
  9915                                  .L_tc_recycle_frame_done_0153:
  9916 000068BE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  9917 000068BF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  9918 000068C3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9919 000068C6 C9                      	leave
  9920 000068C7 C22800                  	ret AND_KILL_FRAME(3)
  9921                                  .L_lambda_opt_end_0021:	; new closure is in rax
  9922 000068CA C9                      	leave
  9923 000068CB C21800                  	ret AND_KILL_FRAME(1)
  9924                                  .L_lambda_simple_end_00f9:	; new closure is in rax
  9925 000068CE 803804                  	cmp byte [rax], T_closure
  9926 000068D1 0F85B4160100            	jne L_error_non_closure
  9927 000068D7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9928 000068DA FF5009                  	call SOB_CLOSURE_CODE(rax)
  9929 000068DD 48890425[8D130000]      	mov qword [free_var_86], rax
  9930 000068E5 48B8-                   	mov rax, sob_void
  9930 000068E7 [0000000000000000] 
  9931                                  
  9932 000068EF 4889C7                  	mov rdi, rax
  9933 000068F2 E892190100              	call print_sexpr_if_not_void
  9934                                  	; preparing a non-tail-call
  9935 000068F7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9936 000068FC E833170100              	call malloc
  9937 00006901 50                      	push rax
  9938 00006902 BF00000000              	mov rdi, 8 * 0	; new rib
  9939 00006907 E828170100              	call malloc
  9940 0000690C 50                      	push rax
  9941 0000690D BF08000000              	mov rdi, 8 * 1	; extended env
  9942 00006912 E81D170100              	call malloc
  9943 00006917 488B7D10                	mov rdi, ENV
  9944 0000691B BE00000000              	mov rsi, 0
  9945 00006920 BA01000000              	mov rdx, 1
  9946                                  .L_lambda_simple_env_loop_00fb:	; ext_env[i + 1] <-- env[i]
  9947 00006925 4883FE00                	cmp rsi, 0
  9948 00006929 7410                    	je .L_lambda_simple_env_end_00fb
  9949 0000692B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9950 0000692F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9951 00006933 48FFC6                  	inc rsi
  9952 00006936 48FFC2                  	inc rdx
  9953 00006939 EBEA                    	jmp .L_lambda_simple_env_loop_00fb
  9954                                  .L_lambda_simple_env_end_00fb:
  9955 0000693B 5B                      	pop rbx
  9956 0000693C BE00000000              	mov rsi, 0
  9957                                  .L_lambda_simple_params_loop_00fb:	; copy params
  9958 00006941 4883FE00                	cmp rsi, 0
  9959 00006945 740E                    	je .L_lambda_simple_params_end_00fb
  9960 00006947 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9961 0000694C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9962 00006950 48FFC6                  	inc rsi
  9963 00006953 EBEC                    	jmp .L_lambda_simple_params_loop_00fb
  9964                                  .L_lambda_simple_params_end_00fb:
  9965 00006955 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9966 00006958 4889C3                  	mov rbx, rax
  9967 0000695B 58                      	pop rax
  9968 0000695C C60004                  	mov byte [rax], T_closure
  9969 0000695F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9970 00006963 48C74009[70690000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00fb
  9971 0000696B E998000000              	jmp .L_lambda_simple_end_00fb
  9972                                  .L_lambda_simple_code_00fb:	; lambda-simple body
  9973 00006970 48837C241000            	cmp qword [rsp + 8 * 2], 0
  9974 00006976 740B                    	je .L_lambda_simple_arity_check_ok_00fb
  9975 00006978 FF742410                	push qword [rsp + 8 * 2]
  9976 0000697C 6A00                    	push 0
  9977 0000697E E96A160100              	jmp L_error_incorrect_arity_simple
  9978                                  .L_lambda_simple_arity_check_ok_00fb:
  9979 00006983 C8000000                	enter 0, 0
  9980                                  	; preparing a tail-call
  9981 00006987 48B8-                   	mov rax, L_constants + 2187
  9981 00006989 [8B08000000000000] 
  9982 00006991 50                      	push rax
  9983 00006992 48B8-                   	mov rax, L_constants + 2178
  9983 00006994 [8208000000000000] 
  9984 0000699C 50                      	push rax
  9985 0000699D 6A02                    	push 2	; arg count
  9986 0000699F 488B0425[49130000]      	mov rax, qword [free_var_82]	; free var error
  9987 000069A7 803805                  	cmp byte [rax], T_undefined
  9988 000069AA 0F8457150100            	je L_error_fvar_undefined
  9989 000069B0 803804                  	cmp byte [rax], T_closure
  9990 000069B3 0F85D2150100            	jne L_error_non_closure
  9991 000069B9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9992 000069BC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  9993 000069BF FF7500                  	push qword[rbp]
  9994 000069C2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  9995 000069C5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  9996 000069C9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  9997 000069CD 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  9998 000069D1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  9999 000069D4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10000 000069D7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10001 000069DC 4983C103                	add r9, 3 	 ;for getting to the params
 10002 000069E0 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10003 000069E4 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10004                                  .L_tc_recycle_frame_loop_0155:
 10005 000069E7 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10006 000069EA 7410                    	je .L_tc_recycle_frame_done_0155
 10007 000069EC 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10008 000069EF 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10009 000069F2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10010 000069F6 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10011 000069FA EBEB                    	jmp .L_tc_recycle_frame_loop_0155
 10012                                  .L_tc_recycle_frame_done_0155:
 10013 000069FC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10014 000069FD 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10015 00006A01 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10016 00006A04 C9                      	leave
 10017 00006A05 C21000                  	ret AND_KILL_FRAME(0)
 10018                                  .L_lambda_simple_end_00fb:	; new closure is in rax
 10019 00006A08 50                      	push rax
 10020 00006A09 6A01                    	push 1	; arg count
 10021 00006A0B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10022 00006A10 E81F160100              	call malloc
 10023 00006A15 50                      	push rax
 10024 00006A16 BF00000000              	mov rdi, 8 * 0	; new rib
 10025 00006A1B E814160100              	call malloc
 10026 00006A20 50                      	push rax
 10027 00006A21 BF08000000              	mov rdi, 8 * 1	; extended env
 10028 00006A26 E809160100              	call malloc
 10029 00006A2B 488B7D10                	mov rdi, ENV
 10030 00006A2F BE00000000              	mov rsi, 0
 10031 00006A34 BA01000000              	mov rdx, 1
 10032                                  .L_lambda_simple_env_loop_00fc:	; ext_env[i + 1] <-- env[i]
 10033 00006A39 4883FE00                	cmp rsi, 0
 10034 00006A3D 7410                    	je .L_lambda_simple_env_end_00fc
 10035 00006A3F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10036 00006A43 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10037 00006A47 48FFC6                  	inc rsi
 10038 00006A4A 48FFC2                  	inc rdx
 10039 00006A4D EBEA                    	jmp .L_lambda_simple_env_loop_00fc
 10040                                  .L_lambda_simple_env_end_00fc:
 10041 00006A4F 5B                      	pop rbx
 10042 00006A50 BE00000000              	mov rsi, 0
 10043                                  .L_lambda_simple_params_loop_00fc:	; copy params
 10044 00006A55 4883FE00                	cmp rsi, 0
 10045 00006A59 740E                    	je .L_lambda_simple_params_end_00fc
 10046 00006A5B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10047 00006A60 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10048 00006A64 48FFC6                  	inc rsi
 10049 00006A67 EBEC                    	jmp .L_lambda_simple_params_loop_00fc
 10050                                  .L_lambda_simple_params_end_00fc:
 10051 00006A69 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10052 00006A6C 4889C3                  	mov rbx, rax
 10053 00006A6F 58                      	pop rax
 10054 00006A70 C60004                  	mov byte [rax], T_closure
 10055 00006A73 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10056 00006A77 48C74009[846A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00fc
 10057 00006A7F E9FF0C0000              	jmp .L_lambda_simple_end_00fc
 10058                                  .L_lambda_simple_code_00fc:	; lambda-simple body
 10059 00006A84 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10060 00006A8A 740B                    	je .L_lambda_simple_arity_check_ok_00fc
 10061 00006A8C FF742410                	push qword [rsp + 8 * 2]
 10062 00006A90 6A01                    	push 1
 10063 00006A92 E956150100              	jmp L_error_incorrect_arity_simple
 10064                                  .L_lambda_simple_arity_check_ok_00fc:
 10065 00006A97 C8000000                	enter 0, 0
 10066                                  	; preparing a tail-call
 10067 00006A9B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10068 00006AA0 E88F150100              	call malloc
 10069 00006AA5 50                      	push rax
 10070 00006AA6 BF08000000              	mov rdi, 8 * 1	; new rib
 10071 00006AAB E884150100              	call malloc
 10072 00006AB0 50                      	push rax
 10073 00006AB1 BF10000000              	mov rdi, 8 * 2	; extended env
 10074 00006AB6 E879150100              	call malloc
 10075 00006ABB 488B7D10                	mov rdi, ENV
 10076 00006ABF BE00000000              	mov rsi, 0
 10077 00006AC4 BA01000000              	mov rdx, 1
 10078                                  .L_lambda_simple_env_loop_00fd:	; ext_env[i + 1] <-- env[i]
 10079 00006AC9 4883FE01                	cmp rsi, 1
 10080 00006ACD 7410                    	je .L_lambda_simple_env_end_00fd
 10081 00006ACF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10082 00006AD3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10083 00006AD7 48FFC6                  	inc rsi
 10084 00006ADA 48FFC2                  	inc rdx
 10085 00006ADD EBEA                    	jmp .L_lambda_simple_env_loop_00fd
 10086                                  .L_lambda_simple_env_end_00fd:
 10087 00006ADF 5B                      	pop rbx
 10088 00006AE0 BE00000000              	mov rsi, 0
 10089                                  .L_lambda_simple_params_loop_00fd:	; copy params
 10090 00006AE5 4883FE01                	cmp rsi, 1
 10091 00006AE9 740E                    	je .L_lambda_simple_params_end_00fd
 10092 00006AEB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10093 00006AF0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10094 00006AF4 48FFC6                  	inc rsi
 10095 00006AF7 EBEC                    	jmp .L_lambda_simple_params_loop_00fd
 10096                                  .L_lambda_simple_params_end_00fd:
 10097 00006AF9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10098 00006AFC 4889C3                  	mov rbx, rax
 10099 00006AFF 58                      	pop rax
 10100 00006B00 C60004                  	mov byte [rax], T_closure
 10101 00006B03 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10102 00006B07 48C74009[146B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00fd
 10103 00006B0F E9EE080000              	jmp .L_lambda_simple_end_00fd
 10104                                  .L_lambda_simple_code_00fd:	; lambda-simple body
 10105 00006B14 48837C241002            	cmp qword [rsp + 8 * 2], 2
 10106 00006B1A 740B                    	je .L_lambda_simple_arity_check_ok_00fd
 10107 00006B1C FF742410                	push qword [rsp + 8 * 2]
 10108 00006B20 6A02                    	push 2
 10109 00006B22 E9C6140100              	jmp L_error_incorrect_arity_simple
 10110                                  .L_lambda_simple_arity_check_ok_00fd:
 10111 00006B27 C8000000                	enter 0, 0
 10112                                  	; preparing a non-tail-call
 10113 00006B2B 488B4520                	mov rax, PARAM(0)	; param a
 10114 00006B2F 50                      	push rax
 10115 00006B30 6A01                    	push 1	; arg count
 10116 00006B32 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 10117 00006B3A 803805                  	cmp byte [rax], T_undefined
 10118 00006B3D 0F84C4130100            	je L_error_fvar_undefined
 10119 00006B43 803804                  	cmp byte [rax], T_closure
 10120 00006B46 0F853F140100            	jne L_error_non_closure
 10121 00006B4C FF7001                  	push SOB_CLOSURE_ENV(rax)
 10122 00006B4F FF5009                  	call SOB_CLOSURE_CODE(rax)
 10123 00006B52 483D[02000000]          	cmp rax, sob_boolean_false
 10124 00006B58 0F849F020000            	je .L_if_else_00b8
 10125                                  	; preparing a non-tail-call
 10126 00006B5E 488B4528                	mov rax, PARAM(1)	; param b
 10127 00006B62 50                      	push rax
 10128 00006B63 6A01                    	push 1	; arg count
 10129 00006B65 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 10130 00006B6D 803805                  	cmp byte [rax], T_undefined
 10131 00006B70 0F8491130100            	je L_error_fvar_undefined
 10132 00006B76 803804                  	cmp byte [rax], T_closure
 10133 00006B79 0F850C140100            	jne L_error_non_closure
 10134 00006B7F FF7001                  	push SOB_CLOSURE_ENV(rax)
 10135 00006B82 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10136 00006B85 483D[02000000]          	cmp rax, sob_boolean_false
 10137 00006B8B 7476                    	je .L_if_else_00af
 10138                                  	; preparing a tail-call
 10139 00006B8D 488B4528                	mov rax, PARAM(1)	; param b
 10140 00006B91 50                      	push rax
 10141 00006B92 488B4520                	mov rax, PARAM(0)	; param a
 10142 00006B96 50                      	push rax
 10143 00006B97 6A02                    	push 2	; arg count
 10144 00006B99 488B0425[920E0000]      	mov rax, qword [free_var_11]	; free var __bin-add-zz
 10145 00006BA1 803805                  	cmp byte [rax], T_undefined
 10146 00006BA4 0F845D130100            	je L_error_fvar_undefined
 10147 00006BAA 803804                  	cmp byte [rax], T_closure
 10148 00006BAD 0F85D8130100            	jne L_error_non_closure
 10149 00006BB3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10150 00006BB6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10151 00006BB9 FF7500                  	push qword[rbp]
 10152 00006BBC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10153 00006BBF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10154 00006BC3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10155 00006BC7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10156 00006BCB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10157 00006BCE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10158 00006BD1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10159 00006BD6 4983C103                	add r9, 3 	 ;for getting to the params
 10160 00006BDA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10161 00006BDE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10162                                  .L_tc_recycle_frame_loop_0156:
 10163 00006BE1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10164 00006BE4 7410                    	je .L_tc_recycle_frame_done_0156
 10165 00006BE6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10166 00006BE9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10167 00006BEC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10168 00006BF0 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10169 00006BF4 EBEB                    	jmp .L_tc_recycle_frame_loop_0156
 10170                                  .L_tc_recycle_frame_done_0156:
 10171 00006BF6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10172 00006BF7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10173 00006BFB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10174 00006BFE E9F5010000              	jmp .L_if_end_00af
 10175                                  .L_if_else_00af:
 10176                                  	; preparing a non-tail-call
 10177 00006C03 488B4528                	mov rax, PARAM(1)	; param b
 10178 00006C07 50                      	push rax
 10179 00006C08 6A01                    	push 1	; arg count
 10180 00006C0A 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 10181 00006C12 803805                  	cmp byte [rax], T_undefined
 10182 00006C15 0F84EC120100            	je L_error_fvar_undefined
 10183 00006C1B 803804                  	cmp byte [rax], T_closure
 10184 00006C1E 0F8567130100            	jne L_error_non_closure
 10185 00006C24 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10186 00006C27 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10187 00006C2A 483D[02000000]          	cmp rax, sob_boolean_false
 10188 00006C30 0F8499000000            	je .L_if_else_00ae
 10189                                  	; preparing a tail-call
 10190 00006C36 488B4528                	mov rax, PARAM(1)	; param b
 10191 00006C3A 50                      	push rax
 10192                                  	; preparing a non-tail-call
 10193 00006C3B 488B4520                	mov rax, PARAM(0)	; param a
 10194 00006C3F 50                      	push rax
 10195 00006C40 6A01                    	push 1	; arg count
 10196 00006C42 488B0425[C40F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 10197 00006C4A 803805                  	cmp byte [rax], T_undefined
 10198 00006C4D 0F84B4120100            	je L_error_fvar_undefined
 10199 00006C53 803804                  	cmp byte [rax], T_closure
 10200 00006C56 0F852F130100            	jne L_error_non_closure
 10201 00006C5C FF7001                  	push SOB_CLOSURE_ENV(rax)
 10202 00006C5F FF5009                  	call SOB_CLOSURE_CODE(rax)
 10203 00006C62 50                      	push rax
 10204 00006C63 6A02                    	push 2	; arg count
 10205 00006C65 488B0425[700E0000]      	mov rax, qword [free_var_9]	; free var __bin-add-qq
 10206 00006C6D 803805                  	cmp byte [rax], T_undefined
 10207 00006C70 0F8491120100            	je L_error_fvar_undefined
 10208 00006C76 803804                  	cmp byte [rax], T_closure
 10209 00006C79 0F850C130100            	jne L_error_non_closure
 10210 00006C7F FF7001                  	push SOB_CLOSURE_ENV(rax)
 10211 00006C82 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10212 00006C85 FF7500                  	push qword[rbp]
 10213 00006C88 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10214 00006C8B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10215 00006C8F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10216 00006C93 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10217 00006C97 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10218 00006C9A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10219 00006C9D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10220 00006CA2 4983C103                	add r9, 3 	 ;for getting to the params
 10221 00006CA6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10222 00006CAA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10223                                  .L_tc_recycle_frame_loop_0157:
 10224 00006CAD 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10225 00006CB0 7410                    	je .L_tc_recycle_frame_done_0157
 10226 00006CB2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10227 00006CB5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10228 00006CB8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10229 00006CBC 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10230 00006CC0 EBEB                    	jmp .L_tc_recycle_frame_loop_0157
 10231                                  .L_tc_recycle_frame_done_0157:
 10232 00006CC2 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10233 00006CC3 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10234 00006CC7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10235 00006CCA E929010000              	jmp .L_if_end_00ae
 10236                                  .L_if_else_00ae:
 10237                                  	; preparing a non-tail-call
 10238 00006CCF 488B4528                	mov rax, PARAM(1)	; param b
 10239 00006CD3 50                      	push rax
 10240 00006CD4 6A01                    	push 1	; arg count
 10241 00006CD6 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 10242 00006CDE 803805                  	cmp byte [rax], T_undefined
 10243 00006CE1 0F8420120100            	je L_error_fvar_undefined
 10244 00006CE7 803804                  	cmp byte [rax], T_closure
 10245 00006CEA 0F859B120100            	jne L_error_non_closure
 10246 00006CF0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10247 00006CF3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10248 00006CF6 483D[02000000]          	cmp rax, sob_boolean_false
 10249 00006CFC 0F8496000000            	je .L_if_else_00ad
 10250                                  	; preparing a tail-call
 10251 00006D02 488B4528                	mov rax, PARAM(1)	; param b
 10252 00006D06 50                      	push rax
 10253                                  	; preparing a non-tail-call
 10254 00006D07 488B4520                	mov rax, PARAM(0)	; param a
 10255 00006D0B 50                      	push rax
 10256 00006D0C 6A01                    	push 1	; arg count
 10257 00006D0E 488B0425[D1130000]      	mov rax, qword [free_var_90]	; free var integer->real
 10258 00006D16 803805                  	cmp byte [rax], T_undefined
 10259 00006D19 0F84E8110100            	je L_error_fvar_undefined
 10260 00006D1F 803804                  	cmp byte [rax], T_closure
 10261 00006D22 0F8563120100            	jne L_error_non_closure
 10262 00006D28 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10263 00006D2B FF5009                  	call SOB_CLOSURE_CODE(rax)
 10264 00006D2E 50                      	push rax
 10265 00006D2F 6A02                    	push 2	; arg count
 10266 00006D31 488B0425[810E0000]      	mov rax, qword [free_var_10]	; free var __bin-add-rr
 10267 00006D39 803805                  	cmp byte [rax], T_undefined
 10268 00006D3C 0F84C5110100            	je L_error_fvar_undefined
 10269 00006D42 803804                  	cmp byte [rax], T_closure
 10270 00006D45 0F8540120100            	jne L_error_non_closure
 10271 00006D4B FF7001                  	push SOB_CLOSURE_ENV(rax)
 10272 00006D4E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10273 00006D51 FF7500                  	push qword[rbp]
 10274 00006D54 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10275 00006D57 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10276 00006D5B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10277 00006D5F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10278 00006D63 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10279 00006D66 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10280 00006D69 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10281 00006D6E 4983C103                	add r9, 3 	 ;for getting to the params
 10282 00006D72 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10283 00006D76 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10284                                  .L_tc_recycle_frame_loop_0158:
 10285 00006D79 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10286 00006D7C 7410                    	je .L_tc_recycle_frame_done_0158
 10287 00006D7E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10288 00006D81 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10289 00006D84 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10290 00006D88 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10291 00006D8C EBEB                    	jmp .L_tc_recycle_frame_loop_0158
 10292                                  .L_tc_recycle_frame_done_0158:
 10293 00006D8E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10294 00006D8F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10295 00006D93 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10296 00006D96 EB60                    	jmp .L_if_end_00ad
 10297                                  .L_if_else_00ad:
 10298                                  	; preparing a tail-call
 10299 00006D98 6A00                    	push 0	; arg count
 10300 00006D9A 488B4510                	mov rax, ENV
 10301 00006D9E 488B00                  	mov rax, qword [rax + 8 * 0]
 10302 00006DA1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10303 00006DA4 803804                  	cmp byte [rax], T_closure
 10304 00006DA7 0F85DE110100            	jne L_error_non_closure
 10305 00006DAD FF7001                  	push SOB_CLOSURE_ENV(rax)
 10306 00006DB0 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10307 00006DB3 FF7500                  	push qword[rbp]
 10308 00006DB6 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10309 00006DB9 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10310 00006DBD 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10311 00006DC1 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10312 00006DC5 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10313 00006DC8 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10314 00006DCB 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10315 00006DD0 4983C103                	add r9, 3 	 ;for getting to the params
 10316 00006DD4 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10317 00006DD8 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10318                                  .L_tc_recycle_frame_loop_0159:
 10319 00006DDB 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10320 00006DDE 7410                    	je .L_tc_recycle_frame_done_0159
 10321 00006DE0 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10322 00006DE3 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10323 00006DE6 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10324 00006DEA 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10325 00006DEE EBEB                    	jmp .L_tc_recycle_frame_loop_0159
 10326                                  .L_tc_recycle_frame_done_0159:
 10327 00006DF0 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10328 00006DF1 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10329 00006DF5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10330                                  .L_if_end_00ad:
 10331                                  .L_if_end_00ae:
 10332                                  .L_if_end_00af:
 10333 00006DF8 E901060000              	jmp .L_if_end_00b8
 10334                                  .L_if_else_00b8:
 10335                                  	; preparing a non-tail-call
 10336 00006DFD 488B4520                	mov rax, PARAM(0)	; param a
 10337 00006E01 50                      	push rax
 10338 00006E02 6A01                    	push 1	; arg count
 10339 00006E04 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 10340 00006E0C 803805                  	cmp byte [rax], T_undefined
 10341 00006E0F 0F84F2100100            	je L_error_fvar_undefined
 10342 00006E15 803804                  	cmp byte [rax], T_closure
 10343 00006E18 0F856D110100            	jne L_error_non_closure
 10344 00006E1E FF7001                  	push SOB_CLOSURE_ENV(rax)
 10345 00006E21 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10346 00006E24 483D[02000000]          	cmp rax, sob_boolean_false
 10347 00006E2A 0F849F020000            	je .L_if_else_00b7
 10348                                  	; preparing a non-tail-call
 10349 00006E30 488B4528                	mov rax, PARAM(1)	; param b
 10350 00006E34 50                      	push rax
 10351 00006E35 6A01                    	push 1	; arg count
 10352 00006E37 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 10353 00006E3F 803805                  	cmp byte [rax], T_undefined
 10354 00006E42 0F84BF100100            	je L_error_fvar_undefined
 10355 00006E48 803804                  	cmp byte [rax], T_closure
 10356 00006E4B 0F853A110100            	jne L_error_non_closure
 10357 00006E51 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10358 00006E54 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10359 00006E57 483D[02000000]          	cmp rax, sob_boolean_false
 10360 00006E5D 0F8499000000            	je .L_if_else_00b2
 10361                                  	; preparing a tail-call
 10362                                  	; preparing a non-tail-call
 10363 00006E63 488B4528                	mov rax, PARAM(1)	; param b
 10364 00006E67 50                      	push rax
 10365 00006E68 6A01                    	push 1	; arg count
 10366 00006E6A 488B0425[B30F0000]      	mov rax, qword [free_var_28]	; free var __bin_integer_to_fraction
 10367 00006E72 803805                  	cmp byte [rax], T_undefined
 10368 00006E75 0F848C100100            	je L_error_fvar_undefined
 10369 00006E7B 803804                  	cmp byte [rax], T_closure
 10370 00006E7E 0F8507110100            	jne L_error_non_closure
 10371 00006E84 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10372 00006E87 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10373 00006E8A 50                      	push rax
 10374 00006E8B 488B4520                	mov rax, PARAM(0)	; param a
 10375 00006E8F 50                      	push rax
 10376 00006E90 6A02                    	push 2	; arg count
 10377 00006E92 488B0425[700E0000]      	mov rax, qword [free_var_9]	; free var __bin-add-qq
 10378 00006E9A 803805                  	cmp byte [rax], T_undefined
 10379 00006E9D 0F8464100100            	je L_error_fvar_undefined
 10380 00006EA3 803804                  	cmp byte [rax], T_closure
 10381 00006EA6 0F85DF100100            	jne L_error_non_closure
 10382 00006EAC FF7001                  	push SOB_CLOSURE_ENV(rax)
 10383 00006EAF FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10384 00006EB2 FF7500                  	push qword[rbp]
 10385 00006EB5 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10386 00006EB8 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10387 00006EBC 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10388 00006EC0 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10389 00006EC4 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10390 00006EC7 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10391 00006ECA 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10392 00006ECF 4983C103                	add r9, 3 	 ;for getting to the params
 10393 00006ED3 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10394 00006ED7 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10395                                  .L_tc_recycle_frame_loop_015a:
 10396 00006EDA 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10397 00006EDD 7410                    	je .L_tc_recycle_frame_done_015a
 10398 00006EDF 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10399 00006EE2 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10400 00006EE5 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10401 00006EE9 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10402 00006EED EBEB                    	jmp .L_tc_recycle_frame_loop_015a
 10403                                  .L_tc_recycle_frame_done_015a:
 10404 00006EEF 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10405 00006EF0 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10406 00006EF4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10407 00006EF7 E9CE010000              	jmp .L_if_end_00b2
 10408                                  .L_if_else_00b2:
 10409                                  	; preparing a non-tail-call
 10410 00006EFC 488B4528                	mov rax, PARAM(1)	; param b
 10411 00006F00 50                      	push rax
 10412 00006F01 6A01                    	push 1	; arg count
 10413 00006F03 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 10414 00006F0B 803805                  	cmp byte [rax], T_undefined
 10415 00006F0E 0F84F30F0100            	je L_error_fvar_undefined
 10416 00006F14 803804                  	cmp byte [rax], T_closure
 10417 00006F17 0F856E100100            	jne L_error_non_closure
 10418 00006F1D FF7001                  	push SOB_CLOSURE_ENV(rax)
 10419 00006F20 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10420 00006F23 483D[02000000]          	cmp rax, sob_boolean_false
 10421 00006F29 7476                    	je .L_if_else_00b1
 10422                                  	; preparing a tail-call
 10423 00006F2B 488B4528                	mov rax, PARAM(1)	; param b
 10424 00006F2F 50                      	push rax
 10425 00006F30 488B4520                	mov rax, PARAM(0)	; param a
 10426 00006F34 50                      	push rax
 10427 00006F35 6A02                    	push 2	; arg count
 10428 00006F37 488B0425[700E0000]      	mov rax, qword [free_var_9]	; free var __bin-add-qq
 10429 00006F3F 803805                  	cmp byte [rax], T_undefined
 10430 00006F42 0F84BF0F0100            	je L_error_fvar_undefined
 10431 00006F48 803804                  	cmp byte [rax], T_closure
 10432 00006F4B 0F853A100100            	jne L_error_non_closure
 10433 00006F51 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10434 00006F54 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10435 00006F57 FF7500                  	push qword[rbp]
 10436 00006F5A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10437 00006F5D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10438 00006F61 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10439 00006F65 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10440 00006F69 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10441 00006F6C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10442 00006F6F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10443 00006F74 4983C103                	add r9, 3 	 ;for getting to the params
 10444 00006F78 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10445 00006F7C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10446                                  .L_tc_recycle_frame_loop_015b:
 10447 00006F7F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10448 00006F82 7410                    	je .L_tc_recycle_frame_done_015b
 10449 00006F84 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10450 00006F87 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10451 00006F8A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10452 00006F8E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10453 00006F92 EBEB                    	jmp .L_tc_recycle_frame_loop_015b
 10454                                  .L_tc_recycle_frame_done_015b:
 10455 00006F94 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10456 00006F95 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10457 00006F99 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10458 00006F9C E929010000              	jmp .L_if_end_00b1
 10459                                  .L_if_else_00b1:
 10460                                  	; preparing a non-tail-call
 10461 00006FA1 488B4528                	mov rax, PARAM(1)	; param b
 10462 00006FA5 50                      	push rax
 10463 00006FA6 6A01                    	push 1	; arg count
 10464 00006FA8 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 10465 00006FB0 803805                  	cmp byte [rax], T_undefined
 10466 00006FB3 0F844E0F0100            	je L_error_fvar_undefined
 10467 00006FB9 803804                  	cmp byte [rax], T_closure
 10468 00006FBC 0F85C90F0100            	jne L_error_non_closure
 10469 00006FC2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10470 00006FC5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10471 00006FC8 483D[02000000]          	cmp rax, sob_boolean_false
 10472 00006FCE 0F8496000000            	je .L_if_else_00b0
 10473                                  	; preparing a tail-call
 10474 00006FD4 488B4528                	mov rax, PARAM(1)	; param b
 10475 00006FD8 50                      	push rax
 10476                                  	; preparing a non-tail-call
 10477 00006FD9 488B4520                	mov rax, PARAM(0)	; param a
 10478 00006FDD 50                      	push rax
 10479 00006FDE 6A01                    	push 1	; arg count
 10480 00006FE0 488B0425[9E130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 10481 00006FE8 803805                  	cmp byte [rax], T_undefined
 10482 00006FEB 0F84160F0100            	je L_error_fvar_undefined
 10483 00006FF1 803804                  	cmp byte [rax], T_closure
 10484 00006FF4 0F85910F0100            	jne L_error_non_closure
 10485 00006FFA FF7001                  	push SOB_CLOSURE_ENV(rax)
 10486 00006FFD FF5009                  	call SOB_CLOSURE_CODE(rax)
 10487 00007000 50                      	push rax
 10488 00007001 6A02                    	push 2	; arg count
 10489 00007003 488B0425[810E0000]      	mov rax, qword [free_var_10]	; free var __bin-add-rr
 10490 0000700B 803805                  	cmp byte [rax], T_undefined
 10491 0000700E 0F84F30E0100            	je L_error_fvar_undefined
 10492 00007014 803804                  	cmp byte [rax], T_closure
 10493 00007017 0F856E0F0100            	jne L_error_non_closure
 10494 0000701D FF7001                  	push SOB_CLOSURE_ENV(rax)
 10495 00007020 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10496 00007023 FF7500                  	push qword[rbp]
 10497 00007026 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10498 00007029 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10499 0000702D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10500 00007031 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10501 00007035 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10502 00007038 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10503 0000703B 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10504 00007040 4983C103                	add r9, 3 	 ;for getting to the params
 10505 00007044 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10506 00007048 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10507                                  .L_tc_recycle_frame_loop_015c:
 10508 0000704B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10509 0000704E 7410                    	je .L_tc_recycle_frame_done_015c
 10510 00007050 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10511 00007053 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10512 00007056 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10513 0000705A 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10514 0000705E EBEB                    	jmp .L_tc_recycle_frame_loop_015c
 10515                                  .L_tc_recycle_frame_done_015c:
 10516 00007060 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10517 00007061 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10518 00007065 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10519 00007068 EB60                    	jmp .L_if_end_00b0
 10520                                  .L_if_else_00b0:
 10521                                  	; preparing a tail-call
 10522 0000706A 6A00                    	push 0	; arg count
 10523 0000706C 488B4510                	mov rax, ENV
 10524 00007070 488B00                  	mov rax, qword [rax + 8 * 0]
 10525 00007073 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10526 00007076 803804                  	cmp byte [rax], T_closure
 10527 00007079 0F850C0F0100            	jne L_error_non_closure
 10528 0000707F FF7001                  	push SOB_CLOSURE_ENV(rax)
 10529 00007082 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10530 00007085 FF7500                  	push qword[rbp]
 10531 00007088 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10532 0000708B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10533 0000708F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10534 00007093 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10535 00007097 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10536 0000709A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10537 0000709D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10538 000070A2 4983C103                	add r9, 3 	 ;for getting to the params
 10539 000070A6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10540 000070AA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10541                                  .L_tc_recycle_frame_loop_015d:
 10542 000070AD 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10543 000070B0 7410                    	je .L_tc_recycle_frame_done_015d
 10544 000070B2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10545 000070B5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10546 000070B8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10547 000070BC 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10548 000070C0 EBEB                    	jmp .L_tc_recycle_frame_loop_015d
 10549                                  .L_tc_recycle_frame_done_015d:
 10550 000070C2 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10551 000070C3 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10552 000070C7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10553                                  .L_if_end_00b0:
 10554                                  .L_if_end_00b1:
 10555                                  .L_if_end_00b2:
 10556 000070CA E92F030000              	jmp .L_if_end_00b7
 10557                                  .L_if_else_00b7:
 10558                                  	; preparing a non-tail-call
 10559 000070CF 488B4520                	mov rax, PARAM(0)	; param a
 10560 000070D3 50                      	push rax
 10561 000070D4 6A01                    	push 1	; arg count
 10562 000070D6 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 10563 000070DE 803805                  	cmp byte [rax], T_undefined
 10564 000070E1 0F84200E0100            	je L_error_fvar_undefined
 10565 000070E7 803804                  	cmp byte [rax], T_closure
 10566 000070EA 0F859B0E0100            	jne L_error_non_closure
 10567 000070F0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10568 000070F3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10569 000070F6 483D[02000000]          	cmp rax, sob_boolean_false
 10570 000070FC 0F849C020000            	je .L_if_else_00b6
 10571                                  	; preparing a non-tail-call
 10572 00007102 488B4528                	mov rax, PARAM(1)	; param b
 10573 00007106 50                      	push rax
 10574 00007107 6A01                    	push 1	; arg count
 10575 00007109 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 10576 00007111 803805                  	cmp byte [rax], T_undefined
 10577 00007114 0F84ED0D0100            	je L_error_fvar_undefined
 10578 0000711A 803804                  	cmp byte [rax], T_closure
 10579 0000711D 0F85680E0100            	jne L_error_non_closure
 10580 00007123 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10581 00007126 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10582 00007129 483D[02000000]          	cmp rax, sob_boolean_false
 10583 0000712F 0F8499000000            	je .L_if_else_00b5
 10584                                  	; preparing a tail-call
 10585                                  	; preparing a non-tail-call
 10586 00007135 488B4528                	mov rax, PARAM(1)	; param b
 10587 00007139 50                      	push rax
 10588 0000713A 6A01                    	push 1	; arg count
 10589 0000713C 488B0425[D1130000]      	mov rax, qword [free_var_90]	; free var integer->real
 10590 00007144 803805                  	cmp byte [rax], T_undefined
 10591 00007147 0F84BA0D0100            	je L_error_fvar_undefined
 10592 0000714D 803804                  	cmp byte [rax], T_closure
 10593 00007150 0F85350E0100            	jne L_error_non_closure
 10594 00007156 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10595 00007159 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10596 0000715C 50                      	push rax
 10597 0000715D 488B4520                	mov rax, PARAM(0)	; param a
 10598 00007161 50                      	push rax
 10599 00007162 6A02                    	push 2	; arg count
 10600 00007164 488B0425[810E0000]      	mov rax, qword [free_var_10]	; free var __bin-add-rr
 10601 0000716C 803805                  	cmp byte [rax], T_undefined
 10602 0000716F 0F84920D0100            	je L_error_fvar_undefined
 10603 00007175 803804                  	cmp byte [rax], T_closure
 10604 00007178 0F850D0E0100            	jne L_error_non_closure
 10605 0000717E FF7001                  	push SOB_CLOSURE_ENV(rax)
 10606 00007181 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10607 00007184 FF7500                  	push qword[rbp]
 10608 00007187 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10609 0000718A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10610 0000718E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10611 00007192 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10612 00007196 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10613 00007199 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10614 0000719C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10615 000071A1 4983C103                	add r9, 3 	 ;for getting to the params
 10616 000071A5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10617 000071A9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10618                                  .L_tc_recycle_frame_loop_015e:
 10619 000071AC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10620 000071AF 7410                    	je .L_tc_recycle_frame_done_015e
 10621 000071B1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10622 000071B4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10623 000071B7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10624 000071BB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10625 000071BF EBEB                    	jmp .L_tc_recycle_frame_loop_015e
 10626                                  .L_tc_recycle_frame_done_015e:
 10627 000071C1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10628 000071C2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10629 000071C6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10630 000071C9 E9CE010000              	jmp .L_if_end_00b5
 10631                                  .L_if_else_00b5:
 10632                                  	; preparing a non-tail-call
 10633 000071CE 488B4528                	mov rax, PARAM(1)	; param b
 10634 000071D2 50                      	push rax
 10635 000071D3 6A01                    	push 1	; arg count
 10636 000071D5 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 10637 000071DD 803805                  	cmp byte [rax], T_undefined
 10638 000071E0 0F84210D0100            	je L_error_fvar_undefined
 10639 000071E6 803804                  	cmp byte [rax], T_closure
 10640 000071E9 0F859C0D0100            	jne L_error_non_closure
 10641 000071EF FF7001                  	push SOB_CLOSURE_ENV(rax)
 10642 000071F2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10643 000071F5 483D[02000000]          	cmp rax, sob_boolean_false
 10644 000071FB 0F8499000000            	je .L_if_else_00b4
 10645                                  	; preparing a tail-call
 10646                                  	; preparing a non-tail-call
 10647 00007201 488B4528                	mov rax, PARAM(1)	; param b
 10648 00007205 50                      	push rax
 10649 00007206 6A01                    	push 1	; arg count
 10650 00007208 488B0425[9E130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 10651 00007210 803805                  	cmp byte [rax], T_undefined
 10652 00007213 0F84EE0C0100            	je L_error_fvar_undefined
 10653 00007219 803804                  	cmp byte [rax], T_closure
 10654 0000721C 0F85690D0100            	jne L_error_non_closure
 10655 00007222 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10656 00007225 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10657 00007228 50                      	push rax
 10658 00007229 488B4520                	mov rax, PARAM(0)	; param a
 10659 0000722D 50                      	push rax
 10660 0000722E 6A02                    	push 2	; arg count
 10661 00007230 488B0425[810E0000]      	mov rax, qword [free_var_10]	; free var __bin-add-rr
 10662 00007238 803805                  	cmp byte [rax], T_undefined
 10663 0000723B 0F84C60C0100            	je L_error_fvar_undefined
 10664 00007241 803804                  	cmp byte [rax], T_closure
 10665 00007244 0F85410D0100            	jne L_error_non_closure
 10666 0000724A FF7001                  	push SOB_CLOSURE_ENV(rax)
 10667 0000724D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10668 00007250 FF7500                  	push qword[rbp]
 10669 00007253 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10670 00007256 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10671 0000725A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10672 0000725E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10673 00007262 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10674 00007265 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10675 00007268 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10676 0000726D 4983C103                	add r9, 3 	 ;for getting to the params
 10677 00007271 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10678 00007275 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10679                                  .L_tc_recycle_frame_loop_015f:
 10680 00007278 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10681 0000727B 7410                    	je .L_tc_recycle_frame_done_015f
 10682 0000727D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10683 00007280 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10684 00007283 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10685 00007287 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10686 0000728B EBEB                    	jmp .L_tc_recycle_frame_loop_015f
 10687                                  .L_tc_recycle_frame_done_015f:
 10688 0000728D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10689 0000728E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10690 00007292 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10691 00007295 E902010000              	jmp .L_if_end_00b4
 10692                                  .L_if_else_00b4:
 10693                                  	; preparing a non-tail-call
 10694 0000729A 488B4528                	mov rax, PARAM(1)	; param b
 10695 0000729E 50                      	push rax
 10696 0000729F 6A01                    	push 1	; arg count
 10697 000072A1 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 10698 000072A9 803805                  	cmp byte [rax], T_undefined
 10699 000072AC 0F84550C0100            	je L_error_fvar_undefined
 10700 000072B2 803804                  	cmp byte [rax], T_closure
 10701 000072B5 0F85D00C0100            	jne L_error_non_closure
 10702 000072BB FF7001                  	push SOB_CLOSURE_ENV(rax)
 10703 000072BE FF5009                  	call SOB_CLOSURE_CODE(rax)
 10704 000072C1 483D[02000000]          	cmp rax, sob_boolean_false
 10705 000072C7 7473                    	je .L_if_else_00b3
 10706                                  	; preparing a tail-call
 10707 000072C9 488B4528                	mov rax, PARAM(1)	; param b
 10708 000072CD 50                      	push rax
 10709 000072CE 488B4520                	mov rax, PARAM(0)	; param a
 10710 000072D2 50                      	push rax
 10711 000072D3 6A02                    	push 2	; arg count
 10712 000072D5 488B0425[810E0000]      	mov rax, qword [free_var_10]	; free var __bin-add-rr
 10713 000072DD 803805                  	cmp byte [rax], T_undefined
 10714 000072E0 0F84210C0100            	je L_error_fvar_undefined
 10715 000072E6 803804                  	cmp byte [rax], T_closure
 10716 000072E9 0F859C0C0100            	jne L_error_non_closure
 10717 000072EF FF7001                  	push SOB_CLOSURE_ENV(rax)
 10718 000072F2 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10719 000072F5 FF7500                  	push qword[rbp]
 10720 000072F8 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10721 000072FB 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10722 000072FF 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10723 00007303 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10724 00007307 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10725 0000730A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10726 0000730D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10727 00007312 4983C103                	add r9, 3 	 ;for getting to the params
 10728 00007316 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10729 0000731A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10730                                  .L_tc_recycle_frame_loop_0160:
 10731 0000731D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10732 00007320 7410                    	je .L_tc_recycle_frame_done_0160
 10733 00007322 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10734 00007325 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10735 00007328 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10736 0000732C 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10737 00007330 EBEB                    	jmp .L_tc_recycle_frame_loop_0160
 10738                                  .L_tc_recycle_frame_done_0160:
 10739 00007332 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10740 00007333 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10741 00007337 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10742 0000733A EB60                    	jmp .L_if_end_00b3
 10743                                  .L_if_else_00b3:
 10744                                  	; preparing a tail-call
 10745 0000733C 6A00                    	push 0	; arg count
 10746 0000733E 488B4510                	mov rax, ENV
 10747 00007342 488B00                  	mov rax, qword [rax + 8 * 0]
 10748 00007345 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10749 00007348 803804                  	cmp byte [rax], T_closure
 10750 0000734B 0F853A0C0100            	jne L_error_non_closure
 10751 00007351 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10752 00007354 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10753 00007357 FF7500                  	push qword[rbp]
 10754 0000735A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10755 0000735D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10756 00007361 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10757 00007365 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10758 00007369 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10759 0000736C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10760 0000736F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10761 00007374 4983C103                	add r9, 3 	 ;for getting to the params
 10762 00007378 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10763 0000737C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10764                                  .L_tc_recycle_frame_loop_0161:
 10765 0000737F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10766 00007382 7410                    	je .L_tc_recycle_frame_done_0161
 10767 00007384 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10768 00007387 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10769 0000738A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10770 0000738E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10771 00007392 EBEB                    	jmp .L_tc_recycle_frame_loop_0161
 10772                                  .L_tc_recycle_frame_done_0161:
 10773 00007394 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10774 00007395 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10775 00007399 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10776                                  .L_if_end_00b3:
 10777                                  .L_if_end_00b4:
 10778                                  .L_if_end_00b5:
 10779 0000739C EB60                    	jmp .L_if_end_00b6
 10780                                  .L_if_else_00b6:
 10781                                  	; preparing a tail-call
 10782 0000739E 6A00                    	push 0	; arg count
 10783 000073A0 488B4510                	mov rax, ENV
 10784 000073A4 488B00                  	mov rax, qword [rax + 8 * 0]
 10785 000073A7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10786 000073AA 803804                  	cmp byte [rax], T_closure
 10787 000073AD 0F85D80B0100            	jne L_error_non_closure
 10788 000073B3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10789 000073B6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10790 000073B9 FF7500                  	push qword[rbp]
 10791 000073BC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10792 000073BF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10793 000073C3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10794 000073C7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10795 000073CB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10796 000073CE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10797 000073D1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10798 000073D6 4983C103                	add r9, 3 	 ;for getting to the params
 10799 000073DA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10800 000073DE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10801                                  .L_tc_recycle_frame_loop_0162:
 10802 000073E1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10803 000073E4 7410                    	je .L_tc_recycle_frame_done_0162
 10804 000073E6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10805 000073E9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10806 000073EC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10807 000073F0 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10808 000073F4 EBEB                    	jmp .L_tc_recycle_frame_loop_0162
 10809                                  .L_tc_recycle_frame_done_0162:
 10810 000073F6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10811 000073F7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10812 000073FB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10813                                  .L_if_end_00b6:
 10814                                  .L_if_end_00b7:
 10815                                  .L_if_end_00b8:
 10816 000073FE C9                      	leave
 10817 000073FF C22000                  	ret AND_KILL_FRAME(2)
 10818                                  .L_lambda_simple_end_00fd:	; new closure is in rax
 10819 00007402 50                      	push rax
 10820 00007403 6A01                    	push 1	; arg count
 10821 00007405 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10822 0000740A E8250C0100              	call malloc
 10823 0000740F 50                      	push rax
 10824 00007410 BF08000000              	mov rdi, 8 * 1	; new rib
 10825 00007415 E81A0C0100              	call malloc
 10826 0000741A 50                      	push rax
 10827 0000741B BF10000000              	mov rdi, 8 * 2	; extended env
 10828 00007420 E80F0C0100              	call malloc
 10829 00007425 488B7D10                	mov rdi, ENV
 10830 00007429 BE00000000              	mov rsi, 0
 10831 0000742E BA01000000              	mov rdx, 1
 10832                                  .L_lambda_simple_env_loop_00fe:	; ext_env[i + 1] <-- env[i]
 10833 00007433 4883FE01                	cmp rsi, 1
 10834 00007437 7410                    	je .L_lambda_simple_env_end_00fe
 10835 00007439 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10836 0000743D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10837 00007441 48FFC6                  	inc rsi
 10838 00007444 48FFC2                  	inc rdx
 10839 00007447 EBEA                    	jmp .L_lambda_simple_env_loop_00fe
 10840                                  .L_lambda_simple_env_end_00fe:
 10841 00007449 5B                      	pop rbx
 10842 0000744A BE00000000              	mov rsi, 0
 10843                                  .L_lambda_simple_params_loop_00fe:	; copy params
 10844 0000744F 4883FE01                	cmp rsi, 1
 10845 00007453 740E                    	je .L_lambda_simple_params_end_00fe
 10846 00007455 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10847 0000745A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10848 0000745E 48FFC6                  	inc rsi
 10849 00007461 EBEC                    	jmp .L_lambda_simple_params_loop_00fe
 10850                                  .L_lambda_simple_params_end_00fe:
 10851 00007463 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10852 00007466 4889C3                  	mov rbx, rax
 10853 00007469 58                      	pop rax
 10854 0000746A C60004                  	mov byte [rax], T_closure
 10855 0000746D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10856 00007471 48C74009[7E740000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00fe
 10857 00007479 E9AD020000              	jmp .L_lambda_simple_end_00fe
 10858                                  .L_lambda_simple_code_00fe:	; lambda-simple body
 10859 0000747E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10860 00007484 740B                    	je .L_lambda_simple_arity_check_ok_00fe
 10861 00007486 FF742410                	push qword [rsp + 8 * 2]
 10862 0000748A 6A01                    	push 1
 10863 0000748C E95C0B0100              	jmp L_error_incorrect_arity_simple
 10864                                  .L_lambda_simple_arity_check_ok_00fe:
 10865 00007491 C8000000                	enter 0, 0
 10866 00007495 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10867 0000749A E8950B0100              	call malloc
 10868 0000749F 50                      	push rax
 10869 000074A0 BF08000000              	mov rdi, 8 * 1	; new rib
 10870 000074A5 E88A0B0100              	call malloc
 10871 000074AA 50                      	push rax
 10872 000074AB BF18000000              	mov rdi, 8 * 3	; extended env
 10873 000074B0 E87F0B0100              	call malloc
 10874 000074B5 488B7D10                	mov rdi, ENV
 10875 000074B9 BE00000000              	mov rsi, 0
 10876 000074BE BA01000000              	mov rdx, 1
 10877                                  .L_lambda_opt_env_loop_0022:	; ext_env[i + 1] <-- env[i]
 10878 000074C3 4883FE02                	cmp rsi, 2
 10879 000074C7 7410                    	je .L_lambda_opt_env_end_0022
 10880 000074C9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10881 000074CD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10882 000074D1 48FFC6                  	inc rsi
 10883 000074D4 48FFC2                  	inc rdx
 10884 000074D7 EBEA                    	jmp .L_lambda_opt_env_loop_0022
 10885                                  .L_lambda_opt_env_end_0022:
 10886 000074D9 5B                      	pop rbx
 10887 000074DA BE00000000              	mov rsi, 0
 10888                                  .L_lambda_opt_params_loop_0022:	; copy params
 10889 000074DF 4883FE01                	cmp rsi, 1
 10890 000074E3 740E                    	je .L_lambda_opt_params_end_0022
 10891 000074E5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10892 000074EA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10893 000074EE 48FFC6                  	inc rsi
 10894 000074F1 EBEC                    	jmp .L_lambda_opt_params_loop_0022
 10895                                  .L_lambda_opt_params_end_0022:
 10896 000074F3 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
 10897 000074F6 4889C3                  	mov rbx, rax
 10898 000074F9 58                      	pop rax
 10899 000074FA C60004                  	mov byte [rax], T_closure
 10900 000074FD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10901 00007501 48C74009[0E750000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0022
 10902 00007509 E919020000              	jmp .L_lambda_opt_end_0022
 10903                                  .L_lambda_opt_code_0022:	; lambda-opt body
 10904 0000750E 48837C241000            	cmp qword [rsp + 8 * 2], 0
 10905 00007514 7411                    	je .L_lambda_opt_arity_check_exact_0022
 10906 00007516 0F8FCA000000            	jg .L_lambda_opt_arity_check_more_0022
 10907 0000751C FF742410                	push qword [rsp + 8 * 2]
 10908 00007520 6A00                    	push 0
 10909 00007522 E9DA0A0100              	jmp L_error_incorrect_arity_opt
 10910                                  .L_lambda_opt_arity_check_exact_0022:
 10911 00007527 4883EC08                	sub rsp, 8
 10912 0000752B 488B442408              	mov rax, qword[rsp + 8 *1]
 10913 00007530 48890424                	mov qword[rsp], rax  
 10914 00007534 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 10915 00007539 4889442408              	mov qword[rsp + 8 * 1], rax
 10916 0000753E B801000000              	mov rax, 1
 10917 00007543 4889442410              	mov qword[rsp + 8 *2], rax
 10918 00007548 48B8-                   	mov rax, sob_nil
 10918 0000754A [0100000000000000] 
 10919 00007552 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 10920 00007557 C8000000                	enter 0, 0
 10921                                  	; preparing a tail-call
 10922 0000755B 488B4520                	mov rax, PARAM(0)	; param s
 10923 0000755F 50                      	push rax
 10924 00007560 48B8-                   	mov rax, L_constants + 2135
 10924 00007562 [5708000000000000] 
 10925 0000756A 50                      	push rax
 10926 0000756B 488B4510                	mov rax, ENV
 10927 0000756F 488B00                  	mov rax, qword [rax + 8 * 0]
 10928 00007572 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin+
 10929 00007575 50                      	push rax
 10930 00007576 6A03                    	push 3	; arg count
 10931 00007578 488B0425[7C130000]      	mov rax, qword [free_var_85]	; free var fold-left
 10932 00007580 803805                  	cmp byte [rax], T_undefined
 10933 00007583 0F847E090100            	je L_error_fvar_undefined
 10934 00007589 803804                  	cmp byte [rax], T_closure
 10935 0000758C 0F85F9090100            	jne L_error_non_closure
 10936 00007592 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10937 00007595 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10938 00007598 FF7500                  	push qword[rbp]
 10939 0000759B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10940 0000759E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10941 000075A2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10942 000075A6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10943 000075AA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10944 000075AD 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10945 000075B0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10946 000075B5 4983C103                	add r9, 3 	 ;for getting to the params
 10947 000075B9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10948 000075BD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10949                                  .L_tc_recycle_frame_loop_0164:
 10950 000075C0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10951 000075C3 7410                    	je .L_tc_recycle_frame_done_0164
 10952 000075C5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10953 000075C8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10954 000075CB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10955 000075CF 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10956 000075D3 EBEB                    	jmp .L_tc_recycle_frame_loop_0164
 10957                                  .L_tc_recycle_frame_done_0164:
 10958 000075D5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10959 000075D6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10960 000075DA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10961 000075DD C9                      	leave
 10962 000075DE C21800                  	ret AND_KILL_FRAME(1)
 10963 000075E1 E941010000              	jmp .L_lambda_opt_end_0022	; new closure is in rax
 10964                                  .L_lambda_opt_arity_check_more_0022:
 10965 000075E6 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 10966 000075EB 49B9-                   	mov r9, sob_nil
 10966 000075ED [0100000000000000] 
 10967 000075F5 4889E3                  	mov rbx, rsp 
 10968 000075F8 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 10969 000075FC 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 10970 000075FF 49C1E003                	shl r8, 3
 10971 00007603 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 10972 00007606 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 10973                                  .L_lambda_opt_stack_shrink_loop_0022:
 10974 0000760B 4983F800                	cmp r8, 0
 10975 0000760F 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0022
 10976 00007611 BF11000000              	mov rdi, 1+8+8 ;for pair
 10977 00007616 E8190A0100              	call malloc;to create the pair in the stack
 10978 0000761B C60021                  	mov byte [rax], T_pair ; to make it a pair
 10979 0000761E 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
 10980 00007621 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 10981 00007625 4C894809                 	mov qword[rax+1+8],r9
 10982 00007629 4989C1                  	mov r9, rax ;for the recursion 
 10983 0000762C 49FFC8                  	dec r8 ;we finished copy another opt param to the list
 10984 0000762F 4883EB08                	sub rbx, 8 ;to get the next param to copy
 10985 00007633 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0022
 10986                                  .L_lambda_opt_stack_shrink_loop_exit_0022:
 10987 00007635 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
 10988 0000763A 4883E901                	sub rcx, 1
 10989 0000763E 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
 10990 00007642 4801CC                  	add rsp, rcx ;shrinking the stack
 10991 00007645 4889E0                  	mov rax, rsp
 10992 00007648 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
 10993 0000764B 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
 10994 0000764F 49FFC8                  	dec r8 ;we start with param 0, not 1 
 10995 00007652 4883C018                	add rax, 3 * 8;now rax is param 0
 10996 00007656 49C1E003                	shl r8, 3;convert to byte
 10997 0000765A 4C01C0                  	add rax, r8;now rax is the top of the stack
 10998 0000765D 4C8908                  	mov qword[rax], r9;puting the list at the top
 10999 00007660 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
 11000 00007664 4889E3                  	mov rbx, rsp 
 11001 00007667 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
 11002 0000766A 41BA00000000            	mov r10, 0;r10 is the not opt params length
 11003 00007670 49FFCA                  	dec r10 
 11004 00007673 49C1E203                	shl r10, 3;to get bytes
 11005 00007677 4883C318                	add rbx, 3*8;rbx is the first param
 11006 0000767B 4C01D3                  	add rbx, r10; rbx is where the address to copy to
 11007 0000767E 4889E0                  	mov rax, rsp
 11008 00007681 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 11009 00007684 48C744241001000000      	mov qword [rsp+2*8], 1
 11010 0000768D 488B5808                	mov rbx, qword[rax + 8 *1]
 11011 00007691 48895C2408              	mov qword [rsp + 1*8] ,rbx
 11012 00007696 488B18                  	mov rbx, qword[rax]
 11013 00007699 48891C24                	mov qword [rsp], rbx
 11014 0000769D C8000000                	enter 0, 0
 11015                                  	; preparing a tail-call
 11016 000076A1 488B4520                	mov rax, PARAM(0)	; param s
 11017 000076A5 50                      	push rax
 11018 000076A6 48B8-                   	mov rax, L_constants + 2135
 11018 000076A8 [5708000000000000] 
 11019 000076B0 50                      	push rax
 11020 000076B1 488B4510                	mov rax, ENV
 11021 000076B5 488B00                  	mov rax, qword [rax + 8 * 0]
 11022 000076B8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin+
 11023 000076BB 50                      	push rax
 11024 000076BC 6A03                    	push 3	; arg count
 11025 000076BE 488B0425[7C130000]      	mov rax, qword [free_var_85]	; free var fold-left
 11026 000076C6 803805                  	cmp byte [rax], T_undefined
 11027 000076C9 0F8438080100            	je L_error_fvar_undefined
 11028 000076CF 803804                  	cmp byte [rax], T_closure
 11029 000076D2 0F85B3080100            	jne L_error_non_closure
 11030 000076D8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11031 000076DB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11032 000076DE FF7500                  	push qword[rbp]
 11033 000076E1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11034 000076E4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11035 000076E8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11036 000076EC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11037 000076F0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11038 000076F3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11039 000076F6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11040 000076FB 4983C103                	add r9, 3 	 ;for getting to the params
 11041 000076FF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11042 00007703 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11043                                  .L_tc_recycle_frame_loop_0163:
 11044 00007706 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11045 00007709 7410                    	je .L_tc_recycle_frame_done_0163
 11046 0000770B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11047 0000770E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11048 00007711 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11049 00007715 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11050 00007719 EBEB                    	jmp .L_tc_recycle_frame_loop_0163
 11051                                  .L_tc_recycle_frame_done_0163:
 11052 0000771B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11053 0000771C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11054 00007720 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11055 00007723 C9                      	leave
 11056 00007724 C21800                  	ret AND_KILL_FRAME(1)
 11057                                  .L_lambda_opt_end_0022:	; new closure is in rax
 11058 00007727 C9                      	leave
 11059 00007728 C21800                  	ret AND_KILL_FRAME(1)
 11060                                  .L_lambda_simple_end_00fe:	; new closure is in rax
 11061 0000772B 803804                  	cmp byte [rax], T_closure
 11062 0000772E 0F8557080100            	jne L_error_non_closure
 11063 00007734 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11064 00007737 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11065 0000773A FF7500                  	push qword[rbp]
 11066 0000773D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11067 00007740 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11068 00007744 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11069 00007748 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11070 0000774C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11071 0000774F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11072 00007752 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11073 00007757 4983C103                	add r9, 3 	 ;for getting to the params
 11074 0000775B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11075 0000775F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11076                                  .L_tc_recycle_frame_loop_0165:
 11077 00007762 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11078 00007765 7410                    	je .L_tc_recycle_frame_done_0165
 11079 00007767 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11080 0000776A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11081 0000776D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11082 00007771 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11083 00007775 EBEB                    	jmp .L_tc_recycle_frame_loop_0165
 11084                                  .L_tc_recycle_frame_done_0165:
 11085 00007777 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11086 00007778 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11087 0000777C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11088 0000777F C9                      	leave
 11089 00007780 C21800                  	ret AND_KILL_FRAME(1)
 11090                                  .L_lambda_simple_end_00fc:	; new closure is in rax
 11091 00007783 803804                  	cmp byte [rax], T_closure
 11092 00007786 0F85FF070100            	jne L_error_non_closure
 11093 0000778C FF7001                  	push SOB_CLOSURE_ENV(rax)
 11094 0000778F FF5009                  	call SOB_CLOSURE_CODE(rax)
 11095 00007792 48890425[E80D0000]      	mov qword [free_var_1], rax
 11096 0000779A 48B8-                   	mov rax, sob_void
 11096 0000779C [0000000000000000] 
 11097                                  
 11098 000077A4 4889C7                  	mov rdi, rax
 11099 000077A7 E8DD0A0100              	call print_sexpr_if_not_void
 11100                                  	; preparing a non-tail-call
 11101 000077AC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11102 000077B1 E87E080100              	call malloc
 11103 000077B6 50                      	push rax
 11104 000077B7 BF00000000              	mov rdi, 8 * 0	; new rib
 11105 000077BC E873080100              	call malloc
 11106 000077C1 50                      	push rax
 11107 000077C2 BF08000000              	mov rdi, 8 * 1	; extended env
 11108 000077C7 E868080100              	call malloc
 11109 000077CC 488B7D10                	mov rdi, ENV
 11110 000077D0 BE00000000              	mov rsi, 0
 11111 000077D5 BA01000000              	mov rdx, 1
 11112                                  .L_lambda_simple_env_loop_00ff:	; ext_env[i + 1] <-- env[i]
 11113 000077DA 4883FE00                	cmp rsi, 0
 11114 000077DE 7410                    	je .L_lambda_simple_env_end_00ff
 11115 000077E0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11116 000077E4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11117 000077E8 48FFC6                  	inc rsi
 11118 000077EB 48FFC2                  	inc rdx
 11119 000077EE EBEA                    	jmp .L_lambda_simple_env_loop_00ff
 11120                                  .L_lambda_simple_env_end_00ff:
 11121 000077F0 5B                      	pop rbx
 11122 000077F1 BE00000000              	mov rsi, 0
 11123                                  .L_lambda_simple_params_loop_00ff:	; copy params
 11124 000077F6 4883FE00                	cmp rsi, 0
 11125 000077FA 740E                    	je .L_lambda_simple_params_end_00ff
 11126 000077FC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11127 00007801 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11128 00007805 48FFC6                  	inc rsi
 11129 00007808 EBEC                    	jmp .L_lambda_simple_params_loop_00ff
 11130                                  .L_lambda_simple_params_end_00ff:
 11131 0000780A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11132 0000780D 4889C3                  	mov rbx, rax
 11133 00007810 58                      	pop rax
 11134 00007811 C60004                  	mov byte [rax], T_closure
 11135 00007814 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11136 00007818 48C74009[25780000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ff
 11137 00007820 E998000000              	jmp .L_lambda_simple_end_00ff
 11138                                  .L_lambda_simple_code_00ff:	; lambda-simple body
 11139 00007825 48837C241000            	cmp qword [rsp + 8 * 2], 0
 11140 0000782B 740B                    	je .L_lambda_simple_arity_check_ok_00ff
 11141 0000782D FF742410                	push qword [rsp + 8 * 2]
 11142 00007831 6A00                    	push 0
 11143 00007833 E9B5070100              	jmp L_error_incorrect_arity_simple
 11144                                  .L_lambda_simple_arity_check_ok_00ff:
 11145 00007838 C8000000                	enter 0, 0
 11146                                  	; preparing a tail-call
 11147 0000783C 48B8-                   	mov rax, L_constants + 2187
 11147 0000783E [8B08000000000000] 
 11148 00007846 50                      	push rax
 11149 00007847 48B8-                   	mov rax, L_constants + 2251
 11149 00007849 [CB08000000000000] 
 11150 00007851 50                      	push rax
 11151 00007852 6A02                    	push 2	; arg count
 11152 00007854 488B0425[49130000]      	mov rax, qword [free_var_82]	; free var error
 11153 0000785C 803805                  	cmp byte [rax], T_undefined
 11154 0000785F 0F84A2060100            	je L_error_fvar_undefined
 11155 00007865 803804                  	cmp byte [rax], T_closure
 11156 00007868 0F851D070100            	jne L_error_non_closure
 11157 0000786E FF7001                  	push SOB_CLOSURE_ENV(rax)
 11158 00007871 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11159 00007874 FF7500                  	push qword[rbp]
 11160 00007877 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11161 0000787A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11162 0000787E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11163 00007882 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11164 00007886 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11165 00007889 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11166 0000788C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11167 00007891 4983C103                	add r9, 3 	 ;for getting to the params
 11168 00007895 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11169 00007899 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11170                                  .L_tc_recycle_frame_loop_0166:
 11171 0000789C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11172 0000789F 7410                    	je .L_tc_recycle_frame_done_0166
 11173 000078A1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11174 000078A4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11175 000078A7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11176 000078AB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11177 000078AF EBEB                    	jmp .L_tc_recycle_frame_loop_0166
 11178                                  .L_tc_recycle_frame_done_0166:
 11179 000078B1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11180 000078B2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11181 000078B6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11182 000078B9 C9                      	leave
 11183 000078BA C21000                  	ret AND_KILL_FRAME(0)
 11184                                  .L_lambda_simple_end_00ff:	; new closure is in rax
 11185 000078BD 50                      	push rax
 11186 000078BE 6A01                    	push 1	; arg count
 11187 000078C0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11188 000078C5 E86A070100              	call malloc
 11189 000078CA 50                      	push rax
 11190 000078CB BF00000000              	mov rdi, 8 * 0	; new rib
 11191 000078D0 E85F070100              	call malloc
 11192 000078D5 50                      	push rax
 11193 000078D6 BF08000000              	mov rdi, 8 * 1	; extended env
 11194 000078DB E854070100              	call malloc
 11195 000078E0 488B7D10                	mov rdi, ENV
 11196 000078E4 BE00000000              	mov rsi, 0
 11197 000078E9 BA01000000              	mov rdx, 1
 11198                                  .L_lambda_simple_env_loop_0100:	; ext_env[i + 1] <-- env[i]
 11199 000078EE 4883FE00                	cmp rsi, 0
 11200 000078F2 7410                    	je .L_lambda_simple_env_end_0100
 11201 000078F4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11202 000078F8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11203 000078FC 48FFC6                  	inc rsi
 11204 000078FF 48FFC2                  	inc rdx
 11205 00007902 EBEA                    	jmp .L_lambda_simple_env_loop_0100
 11206                                  .L_lambda_simple_env_end_0100:
 11207 00007904 5B                      	pop rbx
 11208 00007905 BE00000000              	mov rsi, 0
 11209                                  .L_lambda_simple_params_loop_0100:	; copy params
 11210 0000790A 4883FE00                	cmp rsi, 0
 11211 0000790E 740E                    	je .L_lambda_simple_params_end_0100
 11212 00007910 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11213 00007915 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11214 00007919 48FFC6                  	inc rsi
 11215 0000791C EBEC                    	jmp .L_lambda_simple_params_loop_0100
 11216                                  .L_lambda_simple_params_end_0100:
 11217 0000791E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11218 00007921 4889C3                  	mov rbx, rax
 11219 00007924 58                      	pop rax
 11220 00007925 C60004                  	mov byte [rax], T_closure
 11221 00007928 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11222 0000792C 48C74009[39790000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0100
 11223 00007934 E99B100000              	jmp .L_lambda_simple_end_0100
 11224                                  .L_lambda_simple_code_0100:	; lambda-simple body
 11225 00007939 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11226 0000793F 740B                    	je .L_lambda_simple_arity_check_ok_0100
 11227 00007941 FF742410                	push qword [rsp + 8 * 2]
 11228 00007945 6A01                    	push 1
 11229 00007947 E9A1060100              	jmp L_error_incorrect_arity_simple
 11230                                  .L_lambda_simple_arity_check_ok_0100:
 11231 0000794C C8000000                	enter 0, 0
 11232                                  	; preparing a tail-call
 11233 00007950 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11234 00007955 E8DA060100              	call malloc
 11235 0000795A 50                      	push rax
 11236 0000795B BF08000000              	mov rdi, 8 * 1	; new rib
 11237 00007960 E8CF060100              	call malloc
 11238 00007965 50                      	push rax
 11239 00007966 BF10000000              	mov rdi, 8 * 2	; extended env
 11240 0000796B E8C4060100              	call malloc
 11241 00007970 488B7D10                	mov rdi, ENV
 11242 00007974 BE00000000              	mov rsi, 0
 11243 00007979 BA01000000              	mov rdx, 1
 11244                                  .L_lambda_simple_env_loop_0101:	; ext_env[i + 1] <-- env[i]
 11245 0000797E 4883FE01                	cmp rsi, 1
 11246 00007982 7410                    	je .L_lambda_simple_env_end_0101
 11247 00007984 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11248 00007988 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11249 0000798C 48FFC6                  	inc rsi
 11250 0000798F 48FFC2                  	inc rdx
 11251 00007992 EBEA                    	jmp .L_lambda_simple_env_loop_0101
 11252                                  .L_lambda_simple_env_end_0101:
 11253 00007994 5B                      	pop rbx
 11254 00007995 BE00000000              	mov rsi, 0
 11255                                  .L_lambda_simple_params_loop_0101:	; copy params
 11256 0000799A 4883FE01                	cmp rsi, 1
 11257 0000799E 740E                    	je .L_lambda_simple_params_end_0101
 11258 000079A0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11259 000079A5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11260 000079A9 48FFC6                  	inc rsi
 11261 000079AC EBEC                    	jmp .L_lambda_simple_params_loop_0101
 11262                                  .L_lambda_simple_params_end_0101:
 11263 000079AE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11264 000079B1 4889C3                  	mov rbx, rax
 11265 000079B4 58                      	pop rax
 11266 000079B5 C60004                  	mov byte [rax], T_closure
 11267 000079B8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11268 000079BC 48C74009[C9790000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0101
 11269 000079C4 E9EE080000              	jmp .L_lambda_simple_end_0101
 11270                                  .L_lambda_simple_code_0101:	; lambda-simple body
 11271 000079C9 48837C241002            	cmp qword [rsp + 8 * 2], 2
 11272 000079CF 740B                    	je .L_lambda_simple_arity_check_ok_0101
 11273 000079D1 FF742410                	push qword [rsp + 8 * 2]
 11274 000079D5 6A02                    	push 2
 11275 000079D7 E911060100              	jmp L_error_incorrect_arity_simple
 11276                                  .L_lambda_simple_arity_check_ok_0101:
 11277 000079DC C8000000                	enter 0, 0
 11278                                  	; preparing a non-tail-call
 11279 000079E0 488B4520                	mov rax, PARAM(0)	; param a
 11280 000079E4 50                      	push rax
 11281 000079E5 6A01                    	push 1	; arg count
 11282 000079E7 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 11283 000079EF 803805                  	cmp byte [rax], T_undefined
 11284 000079F2 0F840F050100            	je L_error_fvar_undefined
 11285 000079F8 803804                  	cmp byte [rax], T_closure
 11286 000079FB 0F858A050100            	jne L_error_non_closure
 11287 00007A01 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11288 00007A04 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11289 00007A07 483D[02000000]          	cmp rax, sob_boolean_false
 11290 00007A0D 0F849F020000            	je .L_if_else_00c4
 11291                                  	; preparing a non-tail-call
 11292 00007A13 488B4528                	mov rax, PARAM(1)	; param b
 11293 00007A17 50                      	push rax
 11294 00007A18 6A01                    	push 1	; arg count
 11295 00007A1A 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 11296 00007A22 803805                  	cmp byte [rax], T_undefined
 11297 00007A25 0F84DC040100            	je L_error_fvar_undefined
 11298 00007A2B 803804                  	cmp byte [rax], T_closure
 11299 00007A2E 0F8557050100            	jne L_error_non_closure
 11300 00007A34 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11301 00007A37 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11302 00007A3A 483D[02000000]          	cmp rax, sob_boolean_false
 11303 00007A40 7476                    	je .L_if_else_00bb
 11304                                  	; preparing a tail-call
 11305 00007A42 488B4528                	mov rax, PARAM(1)	; param b
 11306 00007A46 50                      	push rax
 11307 00007A47 488B4520                	mov rax, PARAM(0)	; param a
 11308 00007A4B 50                      	push rax
 11309 00007A4C 6A02                    	push 2	; arg count
 11310 00007A4E 488B0425[A20F0000]      	mov rax, qword [free_var_27]	; free var __bin-sub-zz
 11311 00007A56 803805                  	cmp byte [rax], T_undefined
 11312 00007A59 0F84A8040100            	je L_error_fvar_undefined
 11313 00007A5F 803804                  	cmp byte [rax], T_closure
 11314 00007A62 0F8523050100            	jne L_error_non_closure
 11315 00007A68 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11316 00007A6B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11317 00007A6E FF7500                  	push qword[rbp]
 11318 00007A71 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11319 00007A74 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11320 00007A78 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11321 00007A7C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11322 00007A80 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11323 00007A83 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11324 00007A86 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11325 00007A8B 4983C103                	add r9, 3 	 ;for getting to the params
 11326 00007A8F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11327 00007A93 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11328                                  .L_tc_recycle_frame_loop_0167:
 11329 00007A96 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11330 00007A99 7410                    	je .L_tc_recycle_frame_done_0167
 11331 00007A9B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11332 00007A9E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11333 00007AA1 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11334 00007AA5 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11335 00007AA9 EBEB                    	jmp .L_tc_recycle_frame_loop_0167
 11336                                  .L_tc_recycle_frame_done_0167:
 11337 00007AAB 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11338 00007AAC 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11339 00007AB0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11340 00007AB3 E9F5010000              	jmp .L_if_end_00bb
 11341                                  .L_if_else_00bb:
 11342                                  	; preparing a non-tail-call
 11343 00007AB8 488B4528                	mov rax, PARAM(1)	; param b
 11344 00007ABC 50                      	push rax
 11345 00007ABD 6A01                    	push 1	; arg count
 11346 00007ABF 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 11347 00007AC7 803805                  	cmp byte [rax], T_undefined
 11348 00007ACA 0F8437040100            	je L_error_fvar_undefined
 11349 00007AD0 803804                  	cmp byte [rax], T_closure
 11350 00007AD3 0F85B2040100            	jne L_error_non_closure
 11351 00007AD9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11352 00007ADC FF5009                  	call SOB_CLOSURE_CODE(rax)
 11353 00007ADF 483D[02000000]          	cmp rax, sob_boolean_false
 11354 00007AE5 0F8499000000            	je .L_if_else_00ba
 11355                                  	; preparing a tail-call
 11356 00007AEB 488B4528                	mov rax, PARAM(1)	; param b
 11357 00007AEF 50                      	push rax
 11358                                  	; preparing a non-tail-call
 11359 00007AF0 488B4520                	mov rax, PARAM(0)	; param a
 11360 00007AF4 50                      	push rax
 11361 00007AF5 6A01                    	push 1	; arg count
 11362 00007AF7 488B0425[C40F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 11363 00007AFF 803805                  	cmp byte [rax], T_undefined
 11364 00007B02 0F84FF030100            	je L_error_fvar_undefined
 11365 00007B08 803804                  	cmp byte [rax], T_closure
 11366 00007B0B 0F857A040100            	jne L_error_non_closure
 11367 00007B11 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11368 00007B14 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11369 00007B17 50                      	push rax
 11370 00007B18 6A02                    	push 2	; arg count
 11371 00007B1A 488B0425[800F0000]      	mov rax, qword [free_var_25]	; free var __bin-sub-qq
 11372 00007B22 803805                  	cmp byte [rax], T_undefined
 11373 00007B25 0F84DC030100            	je L_error_fvar_undefined
 11374 00007B2B 803804                  	cmp byte [rax], T_closure
 11375 00007B2E 0F8557040100            	jne L_error_non_closure
 11376 00007B34 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11377 00007B37 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11378 00007B3A FF7500                  	push qword[rbp]
 11379 00007B3D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11380 00007B40 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11381 00007B44 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11382 00007B48 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11383 00007B4C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11384 00007B4F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11385 00007B52 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11386 00007B57 4983C103                	add r9, 3 	 ;for getting to the params
 11387 00007B5B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11388 00007B5F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11389                                  .L_tc_recycle_frame_loop_0168:
 11390 00007B62 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11391 00007B65 7410                    	je .L_tc_recycle_frame_done_0168
 11392 00007B67 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11393 00007B6A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11394 00007B6D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11395 00007B71 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11396 00007B75 EBEB                    	jmp .L_tc_recycle_frame_loop_0168
 11397                                  .L_tc_recycle_frame_done_0168:
 11398 00007B77 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11399 00007B78 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11400 00007B7C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11401 00007B7F E929010000              	jmp .L_if_end_00ba
 11402                                  .L_if_else_00ba:
 11403                                  	; preparing a non-tail-call
 11404 00007B84 488B4528                	mov rax, PARAM(1)	; param b
 11405 00007B88 50                      	push rax
 11406 00007B89 6A01                    	push 1	; arg count
 11407 00007B8B 488B0425[7A150000]      	mov rax, qword [free_var_115]	; free var real
 11408 00007B93 803805                  	cmp byte [rax], T_undefined
 11409 00007B96 0F846B030100            	je L_error_fvar_undefined
 11410 00007B9C 803804                  	cmp byte [rax], T_closure
 11411 00007B9F 0F85E6030100            	jne L_error_non_closure
 11412 00007BA5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11413 00007BA8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11414 00007BAB 483D[02000000]          	cmp rax, sob_boolean_false
 11415 00007BB1 0F8496000000            	je .L_if_else_00b9
 11416                                  	; preparing a tail-call
 11417 00007BB7 488B4528                	mov rax, PARAM(1)	; param b
 11418 00007BBB 50                      	push rax
 11419                                  	; preparing a non-tail-call
 11420 00007BBC 488B4520                	mov rax, PARAM(0)	; param a
 11421 00007BC0 50                      	push rax
 11422 00007BC1 6A01                    	push 1	; arg count
 11423 00007BC3 488B0425[D1130000]      	mov rax, qword [free_var_90]	; free var integer->real
 11424 00007BCB 803805                  	cmp byte [rax], T_undefined
 11425 00007BCE 0F8433030100            	je L_error_fvar_undefined
 11426 00007BD4 803804                  	cmp byte [rax], T_closure
 11427 00007BD7 0F85AE030100            	jne L_error_non_closure
 11428 00007BDD FF7001                  	push SOB_CLOSURE_ENV(rax)
 11429 00007BE0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11430 00007BE3 50                      	push rax
 11431 00007BE4 6A02                    	push 2	; arg count
 11432 00007BE6 488B0425[910F0000]      	mov rax, qword [free_var_26]	; free var __bin-sub-rr
 11433 00007BEE 803805                  	cmp byte [rax], T_undefined
 11434 00007BF1 0F8410030100            	je L_error_fvar_undefined
 11435 00007BF7 803804                  	cmp byte [rax], T_closure
 11436 00007BFA 0F858B030100            	jne L_error_non_closure
 11437 00007C00 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11438 00007C03 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11439 00007C06 FF7500                  	push qword[rbp]
 11440 00007C09 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11441 00007C0C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11442 00007C10 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11443 00007C14 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11444 00007C18 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11445 00007C1B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11446 00007C1E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11447 00007C23 4983C103                	add r9, 3 	 ;for getting to the params
 11448 00007C27 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11449 00007C2B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11450                                  .L_tc_recycle_frame_loop_0169:
 11451 00007C2E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11452 00007C31 7410                    	je .L_tc_recycle_frame_done_0169
 11453 00007C33 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11454 00007C36 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11455 00007C39 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11456 00007C3D 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11457 00007C41 EBEB                    	jmp .L_tc_recycle_frame_loop_0169
 11458                                  .L_tc_recycle_frame_done_0169:
 11459 00007C43 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11460 00007C44 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11461 00007C48 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11462 00007C4B EB60                    	jmp .L_if_end_00b9
 11463                                  .L_if_else_00b9:
 11464                                  	; preparing a tail-call
 11465 00007C4D 6A00                    	push 0	; arg count
 11466 00007C4F 488B4510                	mov rax, ENV
 11467 00007C53 488B00                  	mov rax, qword [rax + 8 * 0]
 11468 00007C56 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 11469 00007C59 803804                  	cmp byte [rax], T_closure
 11470 00007C5C 0F8529030100            	jne L_error_non_closure
 11471 00007C62 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11472 00007C65 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11473 00007C68 FF7500                  	push qword[rbp]
 11474 00007C6B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11475 00007C6E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11476 00007C72 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11477 00007C76 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11478 00007C7A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11479 00007C7D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11480 00007C80 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11481 00007C85 4983C103                	add r9, 3 	 ;for getting to the params
 11482 00007C89 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11483 00007C8D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11484                                  .L_tc_recycle_frame_loop_016a:
 11485 00007C90 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11486 00007C93 7410                    	je .L_tc_recycle_frame_done_016a
 11487 00007C95 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11488 00007C98 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11489 00007C9B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11490 00007C9F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11491 00007CA3 EBEB                    	jmp .L_tc_recycle_frame_loop_016a
 11492                                  .L_tc_recycle_frame_done_016a:
 11493 00007CA5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11494 00007CA6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11495 00007CAA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11496                                  .L_if_end_00b9:
 11497                                  .L_if_end_00ba:
 11498                                  .L_if_end_00bb:
 11499 00007CAD E901060000              	jmp .L_if_end_00c4
 11500                                  .L_if_else_00c4:
 11501                                  	; preparing a non-tail-call
 11502 00007CB2 488B4520                	mov rax, PARAM(0)	; param a
 11503 00007CB6 50                      	push rax
 11504 00007CB7 6A01                    	push 1	; arg count
 11505 00007CB9 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 11506 00007CC1 803805                  	cmp byte [rax], T_undefined
 11507 00007CC4 0F843D020100            	je L_error_fvar_undefined
 11508 00007CCA 803804                  	cmp byte [rax], T_closure
 11509 00007CCD 0F85B8020100            	jne L_error_non_closure
 11510 00007CD3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11511 00007CD6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11512 00007CD9 483D[02000000]          	cmp rax, sob_boolean_false
 11513 00007CDF 0F849F020000            	je .L_if_else_00c3
 11514                                  	; preparing a non-tail-call
 11515 00007CE5 488B4528                	mov rax, PARAM(1)	; param b
 11516 00007CE9 50                      	push rax
 11517 00007CEA 6A01                    	push 1	; arg count
 11518 00007CEC 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 11519 00007CF4 803805                  	cmp byte [rax], T_undefined
 11520 00007CF7 0F840A020100            	je L_error_fvar_undefined
 11521 00007CFD 803804                  	cmp byte [rax], T_closure
 11522 00007D00 0F8585020100            	jne L_error_non_closure
 11523 00007D06 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11524 00007D09 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11525 00007D0C 483D[02000000]          	cmp rax, sob_boolean_false
 11526 00007D12 0F8499000000            	je .L_if_else_00be
 11527                                  	; preparing a tail-call
 11528                                  	; preparing a non-tail-call
 11529 00007D18 488B4528                	mov rax, PARAM(1)	; param b
 11530 00007D1C 50                      	push rax
 11531 00007D1D 6A01                    	push 1	; arg count
 11532 00007D1F 488B0425[C40F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 11533 00007D27 803805                  	cmp byte [rax], T_undefined
 11534 00007D2A 0F84D7010100            	je L_error_fvar_undefined
 11535 00007D30 803804                  	cmp byte [rax], T_closure
 11536 00007D33 0F8552020100            	jne L_error_non_closure
 11537 00007D39 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11538 00007D3C FF5009                  	call SOB_CLOSURE_CODE(rax)
 11539 00007D3F 50                      	push rax
 11540 00007D40 488B4520                	mov rax, PARAM(0)	; param a
 11541 00007D44 50                      	push rax
 11542 00007D45 6A02                    	push 2	; arg count
 11543 00007D47 488B0425[800F0000]      	mov rax, qword [free_var_25]	; free var __bin-sub-qq
 11544 00007D4F 803805                  	cmp byte [rax], T_undefined
 11545 00007D52 0F84AF010100            	je L_error_fvar_undefined
 11546 00007D58 803804                  	cmp byte [rax], T_closure
 11547 00007D5B 0F852A020100            	jne L_error_non_closure
 11548 00007D61 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11549 00007D64 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11550 00007D67 FF7500                  	push qword[rbp]
 11551 00007D6A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11552 00007D6D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11553 00007D71 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11554 00007D75 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11555 00007D79 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11556 00007D7C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11557 00007D7F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11558 00007D84 4983C103                	add r9, 3 	 ;for getting to the params
 11559 00007D88 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11560 00007D8C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11561                                  .L_tc_recycle_frame_loop_016b:
 11562 00007D8F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11563 00007D92 7410                    	je .L_tc_recycle_frame_done_016b
 11564 00007D94 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11565 00007D97 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11566 00007D9A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11567 00007D9E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11568 00007DA2 EBEB                    	jmp .L_tc_recycle_frame_loop_016b
 11569                                  .L_tc_recycle_frame_done_016b:
 11570 00007DA4 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11571 00007DA5 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11572 00007DA9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11573 00007DAC E9CE010000              	jmp .L_if_end_00be
 11574                                  .L_if_else_00be:
 11575                                  	; preparing a non-tail-call
 11576 00007DB1 488B4528                	mov rax, PARAM(1)	; param b
 11577 00007DB5 50                      	push rax
 11578 00007DB6 6A01                    	push 1	; arg count
 11579 00007DB8 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 11580 00007DC0 803805                  	cmp byte [rax], T_undefined
 11581 00007DC3 0F843E010100            	je L_error_fvar_undefined
 11582 00007DC9 803804                  	cmp byte [rax], T_closure
 11583 00007DCC 0F85B9010100            	jne L_error_non_closure
 11584 00007DD2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11585 00007DD5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11586 00007DD8 483D[02000000]          	cmp rax, sob_boolean_false
 11587 00007DDE 7476                    	je .L_if_else_00bd
 11588                                  	; preparing a tail-call
 11589 00007DE0 488B4528                	mov rax, PARAM(1)	; param b
 11590 00007DE4 50                      	push rax
 11591 00007DE5 488B4520                	mov rax, PARAM(0)	; param a
 11592 00007DE9 50                      	push rax
 11593 00007DEA 6A02                    	push 2	; arg count
 11594 00007DEC 488B0425[800F0000]      	mov rax, qword [free_var_25]	; free var __bin-sub-qq
 11595 00007DF4 803805                  	cmp byte [rax], T_undefined
 11596 00007DF7 0F840A010100            	je L_error_fvar_undefined
 11597 00007DFD 803804                  	cmp byte [rax], T_closure
 11598 00007E00 0F8585010100            	jne L_error_non_closure
 11599 00007E06 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11600 00007E09 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11601 00007E0C FF7500                  	push qword[rbp]
 11602 00007E0F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11603 00007E12 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11604 00007E16 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11605 00007E1A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11606 00007E1E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11607 00007E21 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11608 00007E24 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11609 00007E29 4983C103                	add r9, 3 	 ;for getting to the params
 11610 00007E2D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11611 00007E31 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11612                                  .L_tc_recycle_frame_loop_016c:
 11613 00007E34 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11614 00007E37 7410                    	je .L_tc_recycle_frame_done_016c
 11615 00007E39 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11616 00007E3C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11617 00007E3F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11618 00007E43 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11619 00007E47 EBEB                    	jmp .L_tc_recycle_frame_loop_016c
 11620                                  .L_tc_recycle_frame_done_016c:
 11621 00007E49 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11622 00007E4A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11623 00007E4E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11624 00007E51 E929010000              	jmp .L_if_end_00bd
 11625                                  .L_if_else_00bd:
 11626                                  	; preparing a non-tail-call
 11627 00007E56 488B4528                	mov rax, PARAM(1)	; param b
 11628 00007E5A 50                      	push rax
 11629 00007E5B 6A01                    	push 1	; arg count
 11630 00007E5D 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 11631 00007E65 803805                  	cmp byte [rax], T_undefined
 11632 00007E68 0F8499000100            	je L_error_fvar_undefined
 11633 00007E6E 803804                  	cmp byte [rax], T_closure
 11634 00007E71 0F8514010100            	jne L_error_non_closure
 11635 00007E77 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11636 00007E7A FF5009                  	call SOB_CLOSURE_CODE(rax)
 11637 00007E7D 483D[02000000]          	cmp rax, sob_boolean_false
 11638 00007E83 0F8496000000            	je .L_if_else_00bc
 11639                                  	; preparing a tail-call
 11640 00007E89 488B4528                	mov rax, PARAM(1)	; param b
 11641 00007E8D 50                      	push rax
 11642                                  	; preparing a non-tail-call
 11643 00007E8E 488B4520                	mov rax, PARAM(0)	; param a
 11644 00007E92 50                      	push rax
 11645 00007E93 6A01                    	push 1	; arg count
 11646 00007E95 488B0425[9E130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 11647 00007E9D 803805                  	cmp byte [rax], T_undefined
 11648 00007EA0 0F8461000100            	je L_error_fvar_undefined
 11649 00007EA6 803804                  	cmp byte [rax], T_closure
 11650 00007EA9 0F85DC000100            	jne L_error_non_closure
 11651 00007EAF FF7001                  	push SOB_CLOSURE_ENV(rax)
 11652 00007EB2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11653 00007EB5 50                      	push rax
 11654 00007EB6 6A02                    	push 2	; arg count
 11655 00007EB8 488B0425[910F0000]      	mov rax, qword [free_var_26]	; free var __bin-sub-rr
 11656 00007EC0 803805                  	cmp byte [rax], T_undefined
 11657 00007EC3 0F843E000100            	je L_error_fvar_undefined
 11658 00007EC9 803804                  	cmp byte [rax], T_closure
 11659 00007ECC 0F85B9000100            	jne L_error_non_closure
 11660 00007ED2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11661 00007ED5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11662 00007ED8 FF7500                  	push qword[rbp]
 11663 00007EDB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11664 00007EDE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11665 00007EE2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11666 00007EE6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11667 00007EEA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11668 00007EED 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11669 00007EF0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11670 00007EF5 4983C103                	add r9, 3 	 ;for getting to the params
 11671 00007EF9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11672 00007EFD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11673                                  .L_tc_recycle_frame_loop_016d:
 11674 00007F00 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11675 00007F03 7410                    	je .L_tc_recycle_frame_done_016d
 11676 00007F05 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11677 00007F08 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11678 00007F0B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11679 00007F0F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11680 00007F13 EBEB                    	jmp .L_tc_recycle_frame_loop_016d
 11681                                  .L_tc_recycle_frame_done_016d:
 11682 00007F15 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11683 00007F16 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11684 00007F1A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11685 00007F1D EB60                    	jmp .L_if_end_00bc
 11686                                  .L_if_else_00bc:
 11687                                  	; preparing a tail-call
 11688 00007F1F 6A00                    	push 0	; arg count
 11689 00007F21 488B4510                	mov rax, ENV
 11690 00007F25 488B00                  	mov rax, qword [rax + 8 * 0]
 11691 00007F28 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 11692 00007F2B 803804                  	cmp byte [rax], T_closure
 11693 00007F2E 0F8557000100            	jne L_error_non_closure
 11694 00007F34 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11695 00007F37 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11696 00007F3A FF7500                  	push qword[rbp]
 11697 00007F3D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11698 00007F40 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11699 00007F44 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11700 00007F48 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11701 00007F4C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11702 00007F4F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11703 00007F52 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11704 00007F57 4983C103                	add r9, 3 	 ;for getting to the params
 11705 00007F5B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11706 00007F5F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11707                                  .L_tc_recycle_frame_loop_016e:
 11708 00007F62 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11709 00007F65 7410                    	je .L_tc_recycle_frame_done_016e
 11710 00007F67 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11711 00007F6A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11712 00007F6D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11713 00007F71 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11714 00007F75 EBEB                    	jmp .L_tc_recycle_frame_loop_016e
 11715                                  .L_tc_recycle_frame_done_016e:
 11716 00007F77 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11717 00007F78 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11718 00007F7C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11719                                  .L_if_end_00bc:
 11720                                  .L_if_end_00bd:
 11721                                  .L_if_end_00be:
 11722 00007F7F E92F030000              	jmp .L_if_end_00c3
 11723                                  .L_if_else_00c3:
 11724                                  	; preparing a non-tail-call
 11725 00007F84 488B4520                	mov rax, PARAM(0)	; param a
 11726 00007F88 50                      	push rax
 11727 00007F89 6A01                    	push 1	; arg count
 11728 00007F8B 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 11729 00007F93 803805                  	cmp byte [rax], T_undefined
 11730 00007F96 0F846BFF0000            	je L_error_fvar_undefined
 11731 00007F9C 803804                  	cmp byte [rax], T_closure
 11732 00007F9F 0F85E6FF0000            	jne L_error_non_closure
 11733 00007FA5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11734 00007FA8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11735 00007FAB 483D[02000000]          	cmp rax, sob_boolean_false
 11736 00007FB1 0F849C020000            	je .L_if_else_00c2
 11737                                  	; preparing a non-tail-call
 11738 00007FB7 488B4528                	mov rax, PARAM(1)	; param b
 11739 00007FBB 50                      	push rax
 11740 00007FBC 6A01                    	push 1	; arg count
 11741 00007FBE 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 11742 00007FC6 803805                  	cmp byte [rax], T_undefined
 11743 00007FC9 0F8438FF0000            	je L_error_fvar_undefined
 11744 00007FCF 803804                  	cmp byte [rax], T_closure
 11745 00007FD2 0F85B3FF0000            	jne L_error_non_closure
 11746 00007FD8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11747 00007FDB FF5009                  	call SOB_CLOSURE_CODE(rax)
 11748 00007FDE 483D[02000000]          	cmp rax, sob_boolean_false
 11749 00007FE4 0F8499000000            	je .L_if_else_00c1
 11750                                  	; preparing a tail-call
 11751                                  	; preparing a non-tail-call
 11752 00007FEA 488B4528                	mov rax, PARAM(1)	; param b
 11753 00007FEE 50                      	push rax
 11754 00007FEF 6A01                    	push 1	; arg count
 11755 00007FF1 488B0425[D1130000]      	mov rax, qword [free_var_90]	; free var integer->real
 11756 00007FF9 803805                  	cmp byte [rax], T_undefined
 11757 00007FFC 0F8405FF0000            	je L_error_fvar_undefined
 11758 00008002 803804                  	cmp byte [rax], T_closure
 11759 00008005 0F8580FF0000            	jne L_error_non_closure
 11760 0000800B FF7001                  	push SOB_CLOSURE_ENV(rax)
 11761 0000800E FF5009                  	call SOB_CLOSURE_CODE(rax)
 11762 00008011 50                      	push rax
 11763 00008012 488B4520                	mov rax, PARAM(0)	; param a
 11764 00008016 50                      	push rax
 11765 00008017 6A02                    	push 2	; arg count
 11766 00008019 488B0425[910F0000]      	mov rax, qword [free_var_26]	; free var __bin-sub-rr
 11767 00008021 803805                  	cmp byte [rax], T_undefined
 11768 00008024 0F84DDFE0000            	je L_error_fvar_undefined
 11769 0000802A 803804                  	cmp byte [rax], T_closure
 11770 0000802D 0F8558FF0000            	jne L_error_non_closure
 11771 00008033 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11772 00008036 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11773 00008039 FF7500                  	push qword[rbp]
 11774 0000803C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11775 0000803F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11776 00008043 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11777 00008047 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11778 0000804B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11779 0000804E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11780 00008051 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11781 00008056 4983C103                	add r9, 3 	 ;for getting to the params
 11782 0000805A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11783 0000805E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11784                                  .L_tc_recycle_frame_loop_016f:
 11785 00008061 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11786 00008064 7410                    	je .L_tc_recycle_frame_done_016f
 11787 00008066 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11788 00008069 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11789 0000806C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11790 00008070 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11791 00008074 EBEB                    	jmp .L_tc_recycle_frame_loop_016f
 11792                                  .L_tc_recycle_frame_done_016f:
 11793 00008076 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11794 00008077 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11795 0000807B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11796 0000807E E9CE010000              	jmp .L_if_end_00c1
 11797                                  .L_if_else_00c1:
 11798                                  	; preparing a non-tail-call
 11799 00008083 488B4528                	mov rax, PARAM(1)	; param b
 11800 00008087 50                      	push rax
 11801 00008088 6A01                    	push 1	; arg count
 11802 0000808A 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 11803 00008092 803805                  	cmp byte [rax], T_undefined
 11804 00008095 0F846CFE0000            	je L_error_fvar_undefined
 11805 0000809B 803804                  	cmp byte [rax], T_closure
 11806 0000809E 0F85E7FE0000            	jne L_error_non_closure
 11807 000080A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11808 000080A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11809 000080AA 483D[02000000]          	cmp rax, sob_boolean_false
 11810 000080B0 0F8499000000            	je .L_if_else_00c0
 11811                                  	; preparing a tail-call
 11812                                  	; preparing a non-tail-call
 11813 000080B6 488B4528                	mov rax, PARAM(1)	; param b
 11814 000080BA 50                      	push rax
 11815 000080BB 6A01                    	push 1	; arg count
 11816 000080BD 488B0425[9E130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 11817 000080C5 803805                  	cmp byte [rax], T_undefined
 11818 000080C8 0F8439FE0000            	je L_error_fvar_undefined
 11819 000080CE 803804                  	cmp byte [rax], T_closure
 11820 000080D1 0F85B4FE0000            	jne L_error_non_closure
 11821 000080D7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11822 000080DA FF5009                  	call SOB_CLOSURE_CODE(rax)
 11823 000080DD 50                      	push rax
 11824 000080DE 488B4520                	mov rax, PARAM(0)	; param a
 11825 000080E2 50                      	push rax
 11826 000080E3 6A02                    	push 2	; arg count
 11827 000080E5 488B0425[910F0000]      	mov rax, qword [free_var_26]	; free var __bin-sub-rr
 11828 000080ED 803805                  	cmp byte [rax], T_undefined
 11829 000080F0 0F8411FE0000            	je L_error_fvar_undefined
 11830 000080F6 803804                  	cmp byte [rax], T_closure
 11831 000080F9 0F858CFE0000            	jne L_error_non_closure
 11832 000080FF FF7001                  	push SOB_CLOSURE_ENV(rax)
 11833 00008102 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11834 00008105 FF7500                  	push qword[rbp]
 11835 00008108 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11836 0000810B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11837 0000810F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11838 00008113 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11839 00008117 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11840 0000811A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11841 0000811D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11842 00008122 4983C103                	add r9, 3 	 ;for getting to the params
 11843 00008126 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11844 0000812A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11845                                  .L_tc_recycle_frame_loop_0170:
 11846 0000812D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11847 00008130 7410                    	je .L_tc_recycle_frame_done_0170
 11848 00008132 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11849 00008135 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11850 00008138 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11851 0000813C 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11852 00008140 EBEB                    	jmp .L_tc_recycle_frame_loop_0170
 11853                                  .L_tc_recycle_frame_done_0170:
 11854 00008142 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11855 00008143 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11856 00008147 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11857 0000814A E902010000              	jmp .L_if_end_00c0
 11858                                  .L_if_else_00c0:
 11859                                  	; preparing a non-tail-call
 11860 0000814F 488B4528                	mov rax, PARAM(1)	; param b
 11861 00008153 50                      	push rax
 11862 00008154 6A01                    	push 1	; arg count
 11863 00008156 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 11864 0000815E 803805                  	cmp byte [rax], T_undefined
 11865 00008161 0F84A0FD0000            	je L_error_fvar_undefined
 11866 00008167 803804                  	cmp byte [rax], T_closure
 11867 0000816A 0F851BFE0000            	jne L_error_non_closure
 11868 00008170 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11869 00008173 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11870 00008176 483D[02000000]          	cmp rax, sob_boolean_false
 11871 0000817C 7473                    	je .L_if_else_00bf
 11872                                  	; preparing a tail-call
 11873 0000817E 488B4528                	mov rax, PARAM(1)	; param b
 11874 00008182 50                      	push rax
 11875 00008183 488B4520                	mov rax, PARAM(0)	; param a
 11876 00008187 50                      	push rax
 11877 00008188 6A02                    	push 2	; arg count
 11878 0000818A 488B0425[910F0000]      	mov rax, qword [free_var_26]	; free var __bin-sub-rr
 11879 00008192 803805                  	cmp byte [rax], T_undefined
 11880 00008195 0F846CFD0000            	je L_error_fvar_undefined
 11881 0000819B 803804                  	cmp byte [rax], T_closure
 11882 0000819E 0F85E7FD0000            	jne L_error_non_closure
 11883 000081A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11884 000081A7 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11885 000081AA FF7500                  	push qword[rbp]
 11886 000081AD 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11887 000081B0 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11888 000081B4 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11889 000081B8 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11890 000081BC 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11891 000081BF 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11892 000081C2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11893 000081C7 4983C103                	add r9, 3 	 ;for getting to the params
 11894 000081CB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11895 000081CF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11896                                  .L_tc_recycle_frame_loop_0171:
 11897 000081D2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11898 000081D5 7410                    	je .L_tc_recycle_frame_done_0171
 11899 000081D7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11900 000081DA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11901 000081DD 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11902 000081E1 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11903 000081E5 EBEB                    	jmp .L_tc_recycle_frame_loop_0171
 11904                                  .L_tc_recycle_frame_done_0171:
 11905 000081E7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11906 000081E8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11907 000081EC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11908 000081EF EB60                    	jmp .L_if_end_00bf
 11909                                  .L_if_else_00bf:
 11910                                  	; preparing a tail-call
 11911 000081F1 6A00                    	push 0	; arg count
 11912 000081F3 488B4510                	mov rax, ENV
 11913 000081F7 488B00                  	mov rax, qword [rax + 8 * 0]
 11914 000081FA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 11915 000081FD 803804                  	cmp byte [rax], T_closure
 11916 00008200 0F8585FD0000            	jne L_error_non_closure
 11917 00008206 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11918 00008209 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11919 0000820C FF7500                  	push qword[rbp]
 11920 0000820F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11921 00008212 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11922 00008216 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11923 0000821A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11924 0000821E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11925 00008221 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11926 00008224 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11927 00008229 4983C103                	add r9, 3 	 ;for getting to the params
 11928 0000822D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11929 00008231 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11930                                  .L_tc_recycle_frame_loop_0172:
 11931 00008234 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11932 00008237 7410                    	je .L_tc_recycle_frame_done_0172
 11933 00008239 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11934 0000823C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11935 0000823F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11936 00008243 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11937 00008247 EBEB                    	jmp .L_tc_recycle_frame_loop_0172
 11938                                  .L_tc_recycle_frame_done_0172:
 11939 00008249 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11940 0000824A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11941 0000824E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11942                                  .L_if_end_00bf:
 11943                                  .L_if_end_00c0:
 11944                                  .L_if_end_00c1:
 11945 00008251 EB60                    	jmp .L_if_end_00c2
 11946                                  .L_if_else_00c2:
 11947                                  	; preparing a tail-call
 11948 00008253 6A00                    	push 0	; arg count
 11949 00008255 488B4510                	mov rax, ENV
 11950 00008259 488B00                  	mov rax, qword [rax + 8 * 0]
 11951 0000825C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 11952 0000825F 803804                  	cmp byte [rax], T_closure
 11953 00008262 0F8523FD0000            	jne L_error_non_closure
 11954 00008268 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11955 0000826B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11956 0000826E FF7500                  	push qword[rbp]
 11957 00008271 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11958 00008274 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11959 00008278 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11960 0000827C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11961 00008280 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11962 00008283 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11963 00008286 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11964 0000828B 4983C103                	add r9, 3 	 ;for getting to the params
 11965 0000828F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11966 00008293 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11967                                  .L_tc_recycle_frame_loop_0173:
 11968 00008296 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11969 00008299 7410                    	je .L_tc_recycle_frame_done_0173
 11970 0000829B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11971 0000829E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11972 000082A1 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11973 000082A5 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11974 000082A9 EBEB                    	jmp .L_tc_recycle_frame_loop_0173
 11975                                  .L_tc_recycle_frame_done_0173:
 11976 000082AB 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11977 000082AC 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11978 000082B0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11979                                  .L_if_end_00c2:
 11980                                  .L_if_end_00c3:
 11981                                  .L_if_end_00c4:
 11982 000082B3 C9                      	leave
 11983 000082B4 C22000                  	ret AND_KILL_FRAME(2)
 11984                                  .L_lambda_simple_end_0101:	; new closure is in rax
 11985 000082B7 50                      	push rax
 11986 000082B8 6A01                    	push 1	; arg count
 11987 000082BA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11988 000082BF E870FD0000              	call malloc
 11989 000082C4 50                      	push rax
 11990 000082C5 BF08000000              	mov rdi, 8 * 1	; new rib
 11991 000082CA E865FD0000              	call malloc
 11992 000082CF 50                      	push rax
 11993 000082D0 BF10000000              	mov rdi, 8 * 2	; extended env
 11994 000082D5 E85AFD0000              	call malloc
 11995 000082DA 488B7D10                	mov rdi, ENV
 11996 000082DE BE00000000              	mov rsi, 0
 11997 000082E3 BA01000000              	mov rdx, 1
 11998                                  .L_lambda_simple_env_loop_0102:	; ext_env[i + 1] <-- env[i]
 11999 000082E8 4883FE01                	cmp rsi, 1
 12000 000082EC 7410                    	je .L_lambda_simple_env_end_0102
 12001 000082EE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12002 000082F2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12003 000082F6 48FFC6                  	inc rsi
 12004 000082F9 48FFC2                  	inc rdx
 12005 000082FC EBEA                    	jmp .L_lambda_simple_env_loop_0102
 12006                                  .L_lambda_simple_env_end_0102:
 12007 000082FE 5B                      	pop rbx
 12008 000082FF BE00000000              	mov rsi, 0
 12009                                  .L_lambda_simple_params_loop_0102:	; copy params
 12010 00008304 4883FE01                	cmp rsi, 1
 12011 00008308 740E                    	je .L_lambda_simple_params_end_0102
 12012 0000830A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12013 0000830F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12014 00008313 48FFC6                  	inc rsi
 12015 00008316 EBEC                    	jmp .L_lambda_simple_params_loop_0102
 12016                                  .L_lambda_simple_params_end_0102:
 12017 00008318 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12018 0000831B 4889C3                  	mov rbx, rax
 12019 0000831E 58                      	pop rax
 12020 0000831F C60004                  	mov byte [rax], T_closure
 12021 00008322 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12022 00008326 48C74009[33830000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0102
 12023 0000832E E949060000              	jmp .L_lambda_simple_end_0102
 12024                                  .L_lambda_simple_code_0102:	; lambda-simple body
 12025 00008333 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12026 00008339 740B                    	je .L_lambda_simple_arity_check_ok_0102
 12027 0000833B FF742410                	push qword [rsp + 8 * 2]
 12028 0000833F 6A01                    	push 1
 12029 00008341 E9A7FC0000              	jmp L_error_incorrect_arity_simple
 12030                                  .L_lambda_simple_arity_check_ok_0102:
 12031 00008346 C8000000                	enter 0, 0
 12032 0000834A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12033 0000834F E8E0FC0000              	call malloc
 12034 00008354 50                      	push rax
 12035 00008355 BF08000000              	mov rdi, 8 * 1	; new rib
 12036 0000835A E8D5FC0000              	call malloc
 12037 0000835F 50                      	push rax
 12038 00008360 BF18000000              	mov rdi, 8 * 3	; extended env
 12039 00008365 E8CAFC0000              	call malloc
 12040 0000836A 488B7D10                	mov rdi, ENV
 12041 0000836E BE00000000              	mov rsi, 0
 12042 00008373 BA01000000              	mov rdx, 1
 12043                                  .L_lambda_opt_env_loop_0023:	; ext_env[i + 1] <-- env[i]
 12044 00008378 4883FE02                	cmp rsi, 2
 12045 0000837C 7410                    	je .L_lambda_opt_env_end_0023
 12046 0000837E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12047 00008382 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12048 00008386 48FFC6                  	inc rsi
 12049 00008389 48FFC2                  	inc rdx
 12050 0000838C EBEA                    	jmp .L_lambda_opt_env_loop_0023
 12051                                  .L_lambda_opt_env_end_0023:
 12052 0000838E 5B                      	pop rbx
 12053 0000838F BE00000000              	mov rsi, 0
 12054                                  .L_lambda_opt_params_loop_0023:	; copy params
 12055 00008394 4883FE01                	cmp rsi, 1
 12056 00008398 740E                    	je .L_lambda_opt_params_end_0023
 12057 0000839A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12058 0000839F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12059 000083A3 48FFC6                  	inc rsi
 12060 000083A6 EBEC                    	jmp .L_lambda_opt_params_loop_0023
 12061                                  .L_lambda_opt_params_end_0023:
 12062 000083A8 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
 12063 000083AB 4889C3                  	mov rbx, rax
 12064 000083AE 58                      	pop rax
 12065 000083AF C60004                  	mov byte [rax], T_closure
 12066 000083B2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12067 000083B6 48C74009[C3830000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0023
 12068 000083BE E9B5050000              	jmp .L_lambda_opt_end_0023
 12069                                  .L_lambda_opt_code_0023:	; lambda-opt body
 12070 000083C3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12071 000083C9 7411                    	je .L_lambda_opt_arity_check_exact_0023
 12072 000083CB 0F8F96020000            	jg .L_lambda_opt_arity_check_more_0023
 12073 000083D1 FF742410                	push qword [rsp + 8 * 2]
 12074 000083D5 6A01                    	push 1
 12075 000083D7 E925FC0000              	jmp L_error_incorrect_arity_opt
 12076                                  .L_lambda_opt_arity_check_exact_0023:
 12077 000083DC 4883EC08                	sub rsp, 8
 12078 000083E0 488B442408              	mov rax, qword[rsp + 8 *1]
 12079 000083E5 48890424                	mov qword[rsp], rax  
 12080 000083E9 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 12081 000083EE 4889442408              	mov qword[rsp + 8 * 1], rax
 12082 000083F3 B802000000              	mov rax, 2
 12083 000083F8 4889442410              	mov qword[rsp + 8 *2], rax
 12084 000083FD 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
 12085 00008402 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 12086 00008407 48B8-                   	mov rax, sob_nil
 12086 00008409 [0100000000000000] 
 12087 00008411 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
 12088 00008416 C8000000                	enter 0, 0
 12089                                  	; preparing a non-tail-call
 12090 0000841A 488B4528                	mov rax, PARAM(1)	; param s
 12091 0000841E 50                      	push rax
 12092 0000841F 6A01                    	push 1	; arg count
 12093 00008421 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 12094 00008429 803805                  	cmp byte [rax], T_undefined
 12095 0000842C 0F84D5FA0000            	je L_error_fvar_undefined
 12096 00008432 803804                  	cmp byte [rax], T_closure
 12097 00008435 0F8550FB0000            	jne L_error_non_closure
 12098 0000843B FF7001                  	push SOB_CLOSURE_ENV(rax)
 12099 0000843E FF5009                  	call SOB_CLOSURE_CODE(rax)
 12100 00008441 483D[02000000]          	cmp rax, sob_boolean_false
 12101 00008447 7475                    	je .L_if_else_00c6
 12102                                  	; preparing a tail-call
 12103 00008449 488B4520                	mov rax, PARAM(0)	; param a
 12104 0000844D 50                      	push rax
 12105 0000844E 48B8-                   	mov rax, L_constants + 2135
 12105 00008450 [5708000000000000] 
 12106 00008458 50                      	push rax
 12107 00008459 6A02                    	push 2	; arg count
 12108 0000845B 488B4510                	mov rax, ENV
 12109 0000845F 488B00                  	mov rax, qword [rax + 8 * 0]
 12110 00008462 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-
 12111 00008465 803804                  	cmp byte [rax], T_closure
 12112 00008468 0F851DFB0000            	jne L_error_non_closure
 12113 0000846E FF7001                  	push SOB_CLOSURE_ENV(rax)
 12114 00008471 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12115 00008474 FF7500                  	push qword[rbp]
 12116 00008477 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12117 0000847A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12118 0000847E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12119 00008482 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12120 00008486 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12121 00008489 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12122 0000848C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12123 00008491 4983C103                	add r9, 3 	 ;for getting to the params
 12124 00008495 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12125 00008499 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12126                                  .L_tc_recycle_frame_loop_0177:
 12127 0000849C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12128 0000849F 7410                    	je .L_tc_recycle_frame_done_0177
 12129 000084A1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12130 000084A4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12131 000084A7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12132 000084AB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12133 000084AF EBEB                    	jmp .L_tc_recycle_frame_loop_0177
 12134                                  .L_tc_recycle_frame_done_0177:
 12135 000084B1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12136 000084B2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12137 000084B6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12138 000084B9 E9A0010000              	jmp .L_if_end_00c6
 12139                                  .L_if_else_00c6:
 12140                                  	; preparing a tail-call
 12141                                  	; preparing a non-tail-call
 12142 000084BE 488B4528                	mov rax, PARAM(1)	; param s
 12143 000084C2 50                      	push rax
 12144 000084C3 48B8-                   	mov rax, L_constants + 2135
 12144 000084C5 [5708000000000000] 
 12145 000084CD 50                      	push rax
 12146 000084CE 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 12147 000084D6 803805                  	cmp byte [rax], T_undefined
 12148 000084D9 0F8428FA0000            	je L_error_fvar_undefined
 12149 000084DF 50                      	push rax
 12150 000084E0 6A03                    	push 3	; arg count
 12151 000084E2 488B0425[7C130000]      	mov rax, qword [free_var_85]	; free var fold-left
 12152 000084EA 803805                  	cmp byte [rax], T_undefined
 12153 000084ED 0F8414FA0000            	je L_error_fvar_undefined
 12154 000084F3 803804                  	cmp byte [rax], T_closure
 12155 000084F6 0F858FFA0000            	jne L_error_non_closure
 12156 000084FC FF7001                  	push SOB_CLOSURE_ENV(rax)
 12157 000084FF FF5009                  	call SOB_CLOSURE_CODE(rax)
 12158 00008502 50                      	push rax
 12159 00008503 6A01                    	push 1	; arg count
 12160 00008505 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12161 0000850A E825FB0000              	call malloc
 12162 0000850F 50                      	push rax
 12163 00008510 BF10000000              	mov rdi, 8 * 2	; new rib
 12164 00008515 E81AFB0000              	call malloc
 12165 0000851A 50                      	push rax
 12166 0000851B BF20000000              	mov rdi, 8 * 4	; extended env
 12167 00008520 E80FFB0000              	call malloc
 12168 00008525 488B7D10                	mov rdi, ENV
 12169 00008529 BE00000000              	mov rsi, 0
 12170 0000852E BA01000000              	mov rdx, 1
 12171                                  .L_lambda_simple_env_loop_0104:	; ext_env[i + 1] <-- env[i]
 12172 00008533 4883FE03                	cmp rsi, 3
 12173 00008537 7410                    	je .L_lambda_simple_env_end_0104
 12174 00008539 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12175 0000853D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12176 00008541 48FFC6                  	inc rsi
 12177 00008544 48FFC2                  	inc rdx
 12178 00008547 EBEA                    	jmp .L_lambda_simple_env_loop_0104
 12179                                  .L_lambda_simple_env_end_0104:
 12180 00008549 5B                      	pop rbx
 12181 0000854A BE00000000              	mov rsi, 0
 12182                                  .L_lambda_simple_params_loop_0104:	; copy params
 12183 0000854F 4883FE02                	cmp rsi, 2
 12184 00008553 740E                    	je .L_lambda_simple_params_end_0104
 12185 00008555 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12186 0000855A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12187 0000855E 48FFC6                  	inc rsi
 12188 00008561 EBEC                    	jmp .L_lambda_simple_params_loop_0104
 12189                                  .L_lambda_simple_params_end_0104:
 12190 00008563 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12191 00008566 4889C3                  	mov rbx, rax
 12192 00008569 58                      	pop rax
 12193 0000856A C60004                  	mov byte [rax], T_closure
 12194 0000856D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12195 00008571 48C74009[7E850000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0104
 12196 00008579 E98C000000              	jmp .L_lambda_simple_end_0104
 12197                                  .L_lambda_simple_code_0104:	; lambda-simple body
 12198 0000857E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12199 00008584 740B                    	je .L_lambda_simple_arity_check_ok_0104
 12200 00008586 FF742410                	push qword [rsp + 8 * 2]
 12201 0000858A 6A01                    	push 1
 12202 0000858C E95CFA0000              	jmp L_error_incorrect_arity_simple
 12203                                  .L_lambda_simple_arity_check_ok_0104:
 12204 00008591 C8000000                	enter 0, 0
 12205                                  	; preparing a tail-call
 12206 00008595 488B4520                	mov rax, PARAM(0)	; param b
 12207 00008599 50                      	push rax
 12208 0000859A 488B4510                	mov rax, ENV
 12209 0000859E 488B00                  	mov rax, qword [rax + 8 * 0]
 12210 000085A1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var a
 12211 000085A4 50                      	push rax
 12212 000085A5 6A02                    	push 2	; arg count
 12213 000085A7 488B4510                	mov rax, ENV
 12214 000085AB 488B4008                	mov rax, qword [rax + 8 * 1]
 12215 000085AF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-
 12216 000085B2 803804                  	cmp byte [rax], T_closure
 12217 000085B5 0F85D0F90000            	jne L_error_non_closure
 12218 000085BB FF7001                  	push SOB_CLOSURE_ENV(rax)
 12219 000085BE FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12220 000085C1 FF7500                  	push qword[rbp]
 12221 000085C4 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12222 000085C7 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12223 000085CB 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12224 000085CF 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12225 000085D3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12226 000085D6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12227 000085D9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12228 000085DE 4983C103                	add r9, 3 	 ;for getting to the params
 12229 000085E2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12230 000085E6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12231                                  .L_tc_recycle_frame_loop_0178:
 12232 000085E9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12233 000085EC 7410                    	je .L_tc_recycle_frame_done_0178
 12234 000085EE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12235 000085F1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12236 000085F4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12237 000085F8 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12238 000085FC EBEB                    	jmp .L_tc_recycle_frame_loop_0178
 12239                                  .L_tc_recycle_frame_done_0178:
 12240 000085FE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12241 000085FF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12242 00008603 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12243 00008606 C9                      	leave
 12244 00008607 C21800                  	ret AND_KILL_FRAME(1)
 12245                                  .L_lambda_simple_end_0104:	; new closure is in rax
 12246 0000860A 803804                  	cmp byte [rax], T_closure
 12247 0000860D 0F8578F90000            	jne L_error_non_closure
 12248 00008613 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12249 00008616 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12250 00008619 FF7500                  	push qword[rbp]
 12251 0000861C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12252 0000861F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12253 00008623 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12254 00008627 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12255 0000862B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12256 0000862E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12257 00008631 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12258 00008636 4983C103                	add r9, 3 	 ;for getting to the params
 12259 0000863A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12260 0000863E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12261                                  .L_tc_recycle_frame_loop_0179:
 12262 00008641 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12263 00008644 7410                    	je .L_tc_recycle_frame_done_0179
 12264 00008646 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12265 00008649 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12266 0000864C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12267 00008650 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12268 00008654 EBEB                    	jmp .L_tc_recycle_frame_loop_0179
 12269                                  .L_tc_recycle_frame_done_0179:
 12270 00008656 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12271 00008657 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12272 0000865B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12273                                  .L_if_end_00c6:
 12274 0000865E C9                      	leave
 12275 0000865F C22000                  	ret AND_KILL_FRAME(2)
 12276 00008662 E911030000              	jmp .L_lambda_opt_end_0023	; new closure is in rax
 12277                                  .L_lambda_opt_arity_check_more_0023:
 12278 00008667 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 12279 0000866C 49B9-                   	mov r9, sob_nil
 12279 0000866E [0100000000000000] 
 12280 00008676 4889E3                  	mov rbx, rsp 
 12281 00008679 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 12282 0000867D 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 12283 00008680 49C1E003                	shl r8, 3
 12284 00008684 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 12285 00008687 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 12286                                  .L_lambda_opt_stack_shrink_loop_0023:
 12287 0000868C 4983F801                	cmp r8, 1
 12288 00008690 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0023
 12289 00008692 BF11000000              	mov rdi, 1+8+8 ;for pair
 12290 00008697 E898F90000              	call malloc;to create the pair in the stack
 12291 0000869C C60021                  	mov byte [rax], T_pair ; to make it a pair
 12292 0000869F 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
 12293 000086A2 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 12294 000086A6 4C894809                 	mov qword[rax+1+8],r9
 12295 000086AA 4989C1                  	mov r9, rax ;for the recursion 
 12296 000086AD 49FFC8                  	dec r8 ;we finished copy another opt param to the list
 12297 000086B0 4883EB08                	sub rbx, 8 ;to get the next param to copy
 12298 000086B4 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0023
 12299                                  .L_lambda_opt_stack_shrink_loop_exit_0023:
 12300 000086B6 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
 12301 000086BB 4883E902                	sub rcx, 2
 12302 000086BF 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
 12303 000086C3 4801CC                  	add rsp, rcx ;shrinking the stack
 12304 000086C6 4889E0                  	mov rax, rsp
 12305 000086C9 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
 12306 000086CC 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
 12307 000086D0 49FFC8                  	dec r8 ;we start with param 0, not 1 
 12308 000086D3 4883C018                	add rax, 3 * 8;now rax is param 0
 12309 000086D7 49C1E003                	shl r8, 3;convert to byte
 12310 000086DB 4C01C0                  	add rax, r8;now rax is the top of the stack
 12311 000086DE 4C8908                  	mov qword[rax], r9;puting the list at the top
 12312 000086E1 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
 12313 000086E5 4889E3                  	mov rbx, rsp 
 12314 000086E8 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
 12315 000086EB 41BA01000000            	mov r10, 1;r10 is the not opt params length
 12316 000086F1 49FFCA                  	dec r10 
 12317 000086F4 49C1E203                	shl r10, 3;to get bytes
 12318 000086F8 4883C318                	add rbx, 3*8;rbx is the first param
 12319 000086FC 4C01D3                  	add rbx, r10; rbx is where the address to copy to
 12320 000086FF 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
 12321 00008702 4C8900                  	mov qword[rax], r8
 12322 00008705 4883E808                	sub rax, 8
 12323 00008709 4883EB08                	sub rbx, 8
 12324 0000870D 4889E0                  	mov rax, rsp
 12325 00008710 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 12326 00008713 48C744241002000000      	mov qword [rsp+2*8], 2
 12327 0000871C 488B5808                	mov rbx, qword[rax + 8 *1]
 12328 00008720 48895C2408              	mov qword [rsp + 1*8] ,rbx
 12329 00008725 488B18                  	mov rbx, qword[rax]
 12330 00008728 48891C24                	mov qword [rsp], rbx
 12331 0000872C C8000000                	enter 0, 0
 12332                                  	; preparing a non-tail-call
 12333 00008730 488B4528                	mov rax, PARAM(1)	; param s
 12334 00008734 50                      	push rax
 12335 00008735 6A01                    	push 1	; arg count
 12336 00008737 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 12337 0000873F 803805                  	cmp byte [rax], T_undefined
 12338 00008742 0F84BFF70000            	je L_error_fvar_undefined
 12339 00008748 803804                  	cmp byte [rax], T_closure
 12340 0000874B 0F853AF80000            	jne L_error_non_closure
 12341 00008751 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12342 00008754 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12343 00008757 483D[02000000]          	cmp rax, sob_boolean_false
 12344 0000875D 7475                    	je .L_if_else_00c5
 12345                                  	; preparing a tail-call
 12346 0000875F 488B4520                	mov rax, PARAM(0)	; param a
 12347 00008763 50                      	push rax
 12348 00008764 48B8-                   	mov rax, L_constants + 2135
 12348 00008766 [5708000000000000] 
 12349 0000876E 50                      	push rax
 12350 0000876F 6A02                    	push 2	; arg count
 12351 00008771 488B4510                	mov rax, ENV
 12352 00008775 488B00                  	mov rax, qword [rax + 8 * 0]
 12353 00008778 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-
 12354 0000877B 803804                  	cmp byte [rax], T_closure
 12355 0000877E 0F8507F80000            	jne L_error_non_closure
 12356 00008784 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12357 00008787 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12358 0000878A FF7500                  	push qword[rbp]
 12359 0000878D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12360 00008790 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12361 00008794 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12362 00008798 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12363 0000879C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12364 0000879F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12365 000087A2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12366 000087A7 4983C103                	add r9, 3 	 ;for getting to the params
 12367 000087AB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12368 000087AF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12369                                  .L_tc_recycle_frame_loop_0174:
 12370 000087B2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12371 000087B5 7410                    	je .L_tc_recycle_frame_done_0174
 12372 000087B7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12373 000087BA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12374 000087BD 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12375 000087C1 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12376 000087C5 EBEB                    	jmp .L_tc_recycle_frame_loop_0174
 12377                                  .L_tc_recycle_frame_done_0174:
 12378 000087C7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12379 000087C8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12380 000087CC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12381 000087CF E9A0010000              	jmp .L_if_end_00c5
 12382                                  .L_if_else_00c5:
 12383                                  	; preparing a tail-call
 12384                                  	; preparing a non-tail-call
 12385 000087D4 488B4528                	mov rax, PARAM(1)	; param s
 12386 000087D8 50                      	push rax
 12387 000087D9 48B8-                   	mov rax, L_constants + 2135
 12387 000087DB [5708000000000000] 
 12388 000087E3 50                      	push rax
 12389 000087E4 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 12390 000087EC 803805                  	cmp byte [rax], T_undefined
 12391 000087EF 0F8412F70000            	je L_error_fvar_undefined
 12392 000087F5 50                      	push rax
 12393 000087F6 6A03                    	push 3	; arg count
 12394 000087F8 488B0425[7C130000]      	mov rax, qword [free_var_85]	; free var fold-left
 12395 00008800 803805                  	cmp byte [rax], T_undefined
 12396 00008803 0F84FEF60000            	je L_error_fvar_undefined
 12397 00008809 803804                  	cmp byte [rax], T_closure
 12398 0000880C 0F8579F70000            	jne L_error_non_closure
 12399 00008812 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12400 00008815 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12401 00008818 50                      	push rax
 12402 00008819 6A01                    	push 1	; arg count
 12403 0000881B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12404 00008820 E80FF80000              	call malloc
 12405 00008825 50                      	push rax
 12406 00008826 BF10000000              	mov rdi, 8 * 2	; new rib
 12407 0000882B E804F80000              	call malloc
 12408 00008830 50                      	push rax
 12409 00008831 BF20000000              	mov rdi, 8 * 4	; extended env
 12410 00008836 E8F9F70000              	call malloc
 12411 0000883B 488B7D10                	mov rdi, ENV
 12412 0000883F BE00000000              	mov rsi, 0
 12413 00008844 BA01000000              	mov rdx, 1
 12414                                  .L_lambda_simple_env_loop_0103:	; ext_env[i + 1] <-- env[i]
 12415 00008849 4883FE03                	cmp rsi, 3
 12416 0000884D 7410                    	je .L_lambda_simple_env_end_0103
 12417 0000884F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12418 00008853 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12419 00008857 48FFC6                  	inc rsi
 12420 0000885A 48FFC2                  	inc rdx
 12421 0000885D EBEA                    	jmp .L_lambda_simple_env_loop_0103
 12422                                  .L_lambda_simple_env_end_0103:
 12423 0000885F 5B                      	pop rbx
 12424 00008860 BE00000000              	mov rsi, 0
 12425                                  .L_lambda_simple_params_loop_0103:	; copy params
 12426 00008865 4883FE02                	cmp rsi, 2
 12427 00008869 740E                    	je .L_lambda_simple_params_end_0103
 12428 0000886B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12429 00008870 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12430 00008874 48FFC6                  	inc rsi
 12431 00008877 EBEC                    	jmp .L_lambda_simple_params_loop_0103
 12432                                  .L_lambda_simple_params_end_0103:
 12433 00008879 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12434 0000887C 4889C3                  	mov rbx, rax
 12435 0000887F 58                      	pop rax
 12436 00008880 C60004                  	mov byte [rax], T_closure
 12437 00008883 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12438 00008887 48C74009[94880000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0103
 12439 0000888F E98C000000              	jmp .L_lambda_simple_end_0103
 12440                                  .L_lambda_simple_code_0103:	; lambda-simple body
 12441 00008894 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12442 0000889A 740B                    	je .L_lambda_simple_arity_check_ok_0103
 12443 0000889C FF742410                	push qword [rsp + 8 * 2]
 12444 000088A0 6A01                    	push 1
 12445 000088A2 E946F70000              	jmp L_error_incorrect_arity_simple
 12446                                  .L_lambda_simple_arity_check_ok_0103:
 12447 000088A7 C8000000                	enter 0, 0
 12448                                  	; preparing a tail-call
 12449 000088AB 488B4520                	mov rax, PARAM(0)	; param b
 12450 000088AF 50                      	push rax
 12451 000088B0 488B4510                	mov rax, ENV
 12452 000088B4 488B00                  	mov rax, qword [rax + 8 * 0]
 12453 000088B7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var a
 12454 000088BA 50                      	push rax
 12455 000088BB 6A02                    	push 2	; arg count
 12456 000088BD 488B4510                	mov rax, ENV
 12457 000088C1 488B4008                	mov rax, qword [rax + 8 * 1]
 12458 000088C5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-
 12459 000088C8 803804                  	cmp byte [rax], T_closure
 12460 000088CB 0F85BAF60000            	jne L_error_non_closure
 12461 000088D1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12462 000088D4 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12463 000088D7 FF7500                  	push qword[rbp]
 12464 000088DA 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12465 000088DD 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12466 000088E1 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12467 000088E5 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12468 000088E9 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12469 000088EC 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12470 000088EF 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12471 000088F4 4983C103                	add r9, 3 	 ;for getting to the params
 12472 000088F8 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12473 000088FC 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12474                                  .L_tc_recycle_frame_loop_0175:
 12475 000088FF 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12476 00008902 7410                    	je .L_tc_recycle_frame_done_0175
 12477 00008904 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12478 00008907 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12479 0000890A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12480 0000890E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12481 00008912 EBEB                    	jmp .L_tc_recycle_frame_loop_0175
 12482                                  .L_tc_recycle_frame_done_0175:
 12483 00008914 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12484 00008915 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12485 00008919 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12486 0000891C C9                      	leave
 12487 0000891D C21800                  	ret AND_KILL_FRAME(1)
 12488                                  .L_lambda_simple_end_0103:	; new closure is in rax
 12489 00008920 803804                  	cmp byte [rax], T_closure
 12490 00008923 0F8562F60000            	jne L_error_non_closure
 12491 00008929 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12492 0000892C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12493 0000892F FF7500                  	push qword[rbp]
 12494 00008932 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12495 00008935 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12496 00008939 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12497 0000893D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12498 00008941 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12499 00008944 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12500 00008947 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12501 0000894C 4983C103                	add r9, 3 	 ;for getting to the params
 12502 00008950 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12503 00008954 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12504                                  .L_tc_recycle_frame_loop_0176:
 12505 00008957 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12506 0000895A 7410                    	je .L_tc_recycle_frame_done_0176
 12507 0000895C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12508 0000895F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12509 00008962 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12510 00008966 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12511 0000896A EBEB                    	jmp .L_tc_recycle_frame_loop_0176
 12512                                  .L_tc_recycle_frame_done_0176:
 12513 0000896C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12514 0000896D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12515 00008971 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12516                                  .L_if_end_00c5:
 12517 00008974 C9                      	leave
 12518 00008975 C22000                  	ret AND_KILL_FRAME(2)
 12519                                  .L_lambda_opt_end_0023:	; new closure is in rax
 12520 00008978 C9                      	leave
 12521 00008979 C21800                  	ret AND_KILL_FRAME(1)
 12522                                  .L_lambda_simple_end_0102:	; new closure is in rax
 12523 0000897C 803804                  	cmp byte [rax], T_closure
 12524 0000897F 0F8506F60000            	jne L_error_non_closure
 12525 00008985 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12526 00008988 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12527 0000898B FF7500                  	push qword[rbp]
 12528 0000898E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12529 00008991 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12530 00008995 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12531 00008999 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12532 0000899D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12533 000089A0 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12534 000089A3 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12535 000089A8 4983C103                	add r9, 3 	 ;for getting to the params
 12536 000089AC 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12537 000089B0 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12538                                  .L_tc_recycle_frame_loop_017a:
 12539 000089B3 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12540 000089B6 7410                    	je .L_tc_recycle_frame_done_017a
 12541 000089B8 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12542 000089BB 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12543 000089BE 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12544 000089C2 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12545 000089C6 EBEB                    	jmp .L_tc_recycle_frame_loop_017a
 12546                                  .L_tc_recycle_frame_done_017a:
 12547 000089C8 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12548 000089C9 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12549 000089CD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12550 000089D0 C9                      	leave
 12551 000089D1 C21800                  	ret AND_KILL_FRAME(1)
 12552                                  .L_lambda_simple_end_0100:	; new closure is in rax
 12553 000089D4 803804                  	cmp byte [rax], T_closure
 12554 000089D7 0F85AEF50000            	jne L_error_non_closure
 12555 000089DD FF7001                  	push SOB_CLOSURE_ENV(rax)
 12556 000089E0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12557 000089E3 48890425[F90D0000]      	mov qword [free_var_2], rax
 12558 000089EB 48B8-                   	mov rax, sob_void
 12558 000089ED [0000000000000000] 
 12559                                  
 12560 000089F5 4889C7                  	mov rdi, rax
 12561 000089F8 E88CF80000              	call print_sexpr_if_not_void
 12562                                  	; preparing a non-tail-call
 12563 000089FD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12564 00008A02 E82DF60000              	call malloc
 12565 00008A07 50                      	push rax
 12566 00008A08 BF00000000              	mov rdi, 8 * 0	; new rib
 12567 00008A0D E822F60000              	call malloc
 12568 00008A12 50                      	push rax
 12569 00008A13 BF08000000              	mov rdi, 8 * 1	; extended env
 12570 00008A18 E817F60000              	call malloc
 12571 00008A1D 488B7D10                	mov rdi, ENV
 12572 00008A21 BE00000000              	mov rsi, 0
 12573 00008A26 BA01000000              	mov rdx, 1
 12574                                  .L_lambda_simple_env_loop_0105:	; ext_env[i + 1] <-- env[i]
 12575 00008A2B 4883FE00                	cmp rsi, 0
 12576 00008A2F 7410                    	je .L_lambda_simple_env_end_0105
 12577 00008A31 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12578 00008A35 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12579 00008A39 48FFC6                  	inc rsi
 12580 00008A3C 48FFC2                  	inc rdx
 12581 00008A3F EBEA                    	jmp .L_lambda_simple_env_loop_0105
 12582                                  .L_lambda_simple_env_end_0105:
 12583 00008A41 5B                      	pop rbx
 12584 00008A42 BE00000000              	mov rsi, 0
 12585                                  .L_lambda_simple_params_loop_0105:	; copy params
 12586 00008A47 4883FE00                	cmp rsi, 0
 12587 00008A4B 740E                    	je .L_lambda_simple_params_end_0105
 12588 00008A4D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12589 00008A52 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12590 00008A56 48FFC6                  	inc rsi
 12591 00008A59 EBEC                    	jmp .L_lambda_simple_params_loop_0105
 12592                                  .L_lambda_simple_params_end_0105:
 12593 00008A5B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12594 00008A5E 4889C3                  	mov rbx, rax
 12595 00008A61 58                      	pop rax
 12596 00008A62 C60004                  	mov byte [rax], T_closure
 12597 00008A65 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12598 00008A69 48C74009[768A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0105
 12599 00008A71 E998000000              	jmp .L_lambda_simple_end_0105
 12600                                  .L_lambda_simple_code_0105:	; lambda-simple body
 12601 00008A76 48837C241000            	cmp qword [rsp + 8 * 2], 0
 12602 00008A7C 740B                    	je .L_lambda_simple_arity_check_ok_0105
 12603 00008A7E FF742410                	push qword [rsp + 8 * 2]
 12604 00008A82 6A00                    	push 0
 12605 00008A84 E964F50000              	jmp L_error_incorrect_arity_simple
 12606                                  .L_lambda_simple_arity_check_ok_0105:
 12607 00008A89 C8000000                	enter 0, 0
 12608                                  	; preparing a tail-call
 12609 00008A8D 48B8-                   	mov rax, L_constants + 2187
 12609 00008A8F [8B08000000000000] 
 12610 00008A97 50                      	push rax
 12611 00008A98 48B8-                   	mov rax, L_constants + 2279
 12611 00008A9A [E708000000000000] 
 12612 00008AA2 50                      	push rax
 12613 00008AA3 6A02                    	push 2	; arg count
 12614 00008AA5 488B0425[49130000]      	mov rax, qword [free_var_82]	; free var error
 12615 00008AAD 803805                  	cmp byte [rax], T_undefined
 12616 00008AB0 0F8451F40000            	je L_error_fvar_undefined
 12617 00008AB6 803804                  	cmp byte [rax], T_closure
 12618 00008AB9 0F85CCF40000            	jne L_error_non_closure
 12619 00008ABF FF7001                  	push SOB_CLOSURE_ENV(rax)
 12620 00008AC2 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12621 00008AC5 FF7500                  	push qword[rbp]
 12622 00008AC8 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12623 00008ACB 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12624 00008ACF 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12625 00008AD3 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12626 00008AD7 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12627 00008ADA 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12628 00008ADD 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12629 00008AE2 4983C103                	add r9, 3 	 ;for getting to the params
 12630 00008AE6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12631 00008AEA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12632                                  .L_tc_recycle_frame_loop_017b:
 12633 00008AED 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12634 00008AF0 7410                    	je .L_tc_recycle_frame_done_017b
 12635 00008AF2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12636 00008AF5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12637 00008AF8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12638 00008AFC 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12639 00008B00 EBEB                    	jmp .L_tc_recycle_frame_loop_017b
 12640                                  .L_tc_recycle_frame_done_017b:
 12641 00008B02 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12642 00008B03 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12643 00008B07 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12644 00008B0A C9                      	leave
 12645 00008B0B C21000                  	ret AND_KILL_FRAME(0)
 12646                                  .L_lambda_simple_end_0105:	; new closure is in rax
 12647 00008B0E 50                      	push rax
 12648 00008B0F 6A01                    	push 1	; arg count
 12649 00008B11 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12650 00008B16 E819F50000              	call malloc
 12651 00008B1B 50                      	push rax
 12652 00008B1C BF00000000              	mov rdi, 8 * 0	; new rib
 12653 00008B21 E80EF50000              	call malloc
 12654 00008B26 50                      	push rax
 12655 00008B27 BF08000000              	mov rdi, 8 * 1	; extended env
 12656 00008B2C E803F50000              	call malloc
 12657 00008B31 488B7D10                	mov rdi, ENV
 12658 00008B35 BE00000000              	mov rsi, 0
 12659 00008B3A BA01000000              	mov rdx, 1
 12660                                  .L_lambda_simple_env_loop_0106:	; ext_env[i + 1] <-- env[i]
 12661 00008B3F 4883FE00                	cmp rsi, 0
 12662 00008B43 7410                    	je .L_lambda_simple_env_end_0106
 12663 00008B45 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12664 00008B49 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12665 00008B4D 48FFC6                  	inc rsi
 12666 00008B50 48FFC2                  	inc rdx
 12667 00008B53 EBEA                    	jmp .L_lambda_simple_env_loop_0106
 12668                                  .L_lambda_simple_env_end_0106:
 12669 00008B55 5B                      	pop rbx
 12670 00008B56 BE00000000              	mov rsi, 0
 12671                                  .L_lambda_simple_params_loop_0106:	; copy params
 12672 00008B5B 4883FE00                	cmp rsi, 0
 12673 00008B5F 740E                    	je .L_lambda_simple_params_end_0106
 12674 00008B61 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12675 00008B66 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12676 00008B6A 48FFC6                  	inc rsi
 12677 00008B6D EBEC                    	jmp .L_lambda_simple_params_loop_0106
 12678                                  .L_lambda_simple_params_end_0106:
 12679 00008B6F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12680 00008B72 4889C3                  	mov rbx, rax
 12681 00008B75 58                      	pop rax
 12682 00008B76 C60004                  	mov byte [rax], T_closure
 12683 00008B79 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12684 00008B7D 48C74009[8A8B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0106
 12685 00008B85 E9FF0C0000              	jmp .L_lambda_simple_end_0106
 12686                                  .L_lambda_simple_code_0106:	; lambda-simple body
 12687 00008B8A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12688 00008B90 740B                    	je .L_lambda_simple_arity_check_ok_0106
 12689 00008B92 FF742410                	push qword [rsp + 8 * 2]
 12690 00008B96 6A01                    	push 1
 12691 00008B98 E950F40000              	jmp L_error_incorrect_arity_simple
 12692                                  .L_lambda_simple_arity_check_ok_0106:
 12693 00008B9D C8000000                	enter 0, 0
 12694                                  	; preparing a tail-call
 12695 00008BA1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12696 00008BA6 E889F40000              	call malloc
 12697 00008BAB 50                      	push rax
 12698 00008BAC BF08000000              	mov rdi, 8 * 1	; new rib
 12699 00008BB1 E87EF40000              	call malloc
 12700 00008BB6 50                      	push rax
 12701 00008BB7 BF10000000              	mov rdi, 8 * 2	; extended env
 12702 00008BBC E873F40000              	call malloc
 12703 00008BC1 488B7D10                	mov rdi, ENV
 12704 00008BC5 BE00000000              	mov rsi, 0
 12705 00008BCA BA01000000              	mov rdx, 1
 12706                                  .L_lambda_simple_env_loop_0107:	; ext_env[i + 1] <-- env[i]
 12707 00008BCF 4883FE01                	cmp rsi, 1
 12708 00008BD3 7410                    	je .L_lambda_simple_env_end_0107
 12709 00008BD5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12710 00008BD9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12711 00008BDD 48FFC6                  	inc rsi
 12712 00008BE0 48FFC2                  	inc rdx
 12713 00008BE3 EBEA                    	jmp .L_lambda_simple_env_loop_0107
 12714                                  .L_lambda_simple_env_end_0107:
 12715 00008BE5 5B                      	pop rbx
 12716 00008BE6 BE00000000              	mov rsi, 0
 12717                                  .L_lambda_simple_params_loop_0107:	; copy params
 12718 00008BEB 4883FE01                	cmp rsi, 1
 12719 00008BEF 740E                    	je .L_lambda_simple_params_end_0107
 12720 00008BF1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12721 00008BF6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12722 00008BFA 48FFC6                  	inc rsi
 12723 00008BFD EBEC                    	jmp .L_lambda_simple_params_loop_0107
 12724                                  .L_lambda_simple_params_end_0107:
 12725 00008BFF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12726 00008C02 4889C3                  	mov rbx, rax
 12727 00008C05 58                      	pop rax
 12728 00008C06 C60004                  	mov byte [rax], T_closure
 12729 00008C09 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12730 00008C0D 48C74009[1A8C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0107
 12731 00008C15 E9EE080000              	jmp .L_lambda_simple_end_0107
 12732                                  .L_lambda_simple_code_0107:	; lambda-simple body
 12733 00008C1A 48837C241002            	cmp qword [rsp + 8 * 2], 2
 12734 00008C20 740B                    	je .L_lambda_simple_arity_check_ok_0107
 12735 00008C22 FF742410                	push qword [rsp + 8 * 2]
 12736 00008C26 6A02                    	push 2
 12737 00008C28 E9C0F30000              	jmp L_error_incorrect_arity_simple
 12738                                  .L_lambda_simple_arity_check_ok_0107:
 12739 00008C2D C8000000                	enter 0, 0
 12740                                  	; preparing a non-tail-call
 12741 00008C31 488B4520                	mov rax, PARAM(0)	; param a
 12742 00008C35 50                      	push rax
 12743 00008C36 6A01                    	push 1	; arg count
 12744 00008C38 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 12745 00008C40 803805                  	cmp byte [rax], T_undefined
 12746 00008C43 0F84BEF20000            	je L_error_fvar_undefined
 12747 00008C49 803804                  	cmp byte [rax], T_closure
 12748 00008C4C 0F8539F30000            	jne L_error_non_closure
 12749 00008C52 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12750 00008C55 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12751 00008C58 483D[02000000]          	cmp rax, sob_boolean_false
 12752 00008C5E 0F849F020000            	je .L_if_else_00d2
 12753                                  	; preparing a non-tail-call
 12754 00008C64 488B4528                	mov rax, PARAM(1)	; param b
 12755 00008C68 50                      	push rax
 12756 00008C69 6A01                    	push 1	; arg count
 12757 00008C6B 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 12758 00008C73 803805                  	cmp byte [rax], T_undefined
 12759 00008C76 0F848BF20000            	je L_error_fvar_undefined
 12760 00008C7C 803804                  	cmp byte [rax], T_closure
 12761 00008C7F 0F8506F30000            	jne L_error_non_closure
 12762 00008C85 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12763 00008C88 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12764 00008C8B 483D[02000000]          	cmp rax, sob_boolean_false
 12765 00008C91 7476                    	je .L_if_else_00c9
 12766                                  	; preparing a tail-call
 12767 00008C93 488B4528                	mov rax, PARAM(1)	; param b
 12768 00008C97 50                      	push rax
 12769 00008C98 488B4520                	mov rax, PARAM(0)	; param a
 12770 00008C9C 50                      	push rax
 12771 00008C9D 6A02                    	push 2	; arg count
 12772 00008C9F 488B0425[6F0F0000]      	mov rax, qword [free_var_24]	; free var __bin-mul-zz
 12773 00008CA7 803805                  	cmp byte [rax], T_undefined
 12774 00008CAA 0F8457F20000            	je L_error_fvar_undefined
 12775 00008CB0 803804                  	cmp byte [rax], T_closure
 12776 00008CB3 0F85D2F20000            	jne L_error_non_closure
 12777 00008CB9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12778 00008CBC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12779 00008CBF FF7500                  	push qword[rbp]
 12780 00008CC2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12781 00008CC5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12782 00008CC9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12783 00008CCD 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12784 00008CD1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12785 00008CD4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12786 00008CD7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12787 00008CDC 4983C103                	add r9, 3 	 ;for getting to the params
 12788 00008CE0 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12789 00008CE4 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12790                                  .L_tc_recycle_frame_loop_017c:
 12791 00008CE7 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12792 00008CEA 7410                    	je .L_tc_recycle_frame_done_017c
 12793 00008CEC 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12794 00008CEF 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12795 00008CF2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12796 00008CF6 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12797 00008CFA EBEB                    	jmp .L_tc_recycle_frame_loop_017c
 12798                                  .L_tc_recycle_frame_done_017c:
 12799 00008CFC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12800 00008CFD 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12801 00008D01 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12802 00008D04 E9F5010000              	jmp .L_if_end_00c9
 12803                                  .L_if_else_00c9:
 12804                                  	; preparing a non-tail-call
 12805 00008D09 488B4528                	mov rax, PARAM(1)	; param b
 12806 00008D0D 50                      	push rax
 12807 00008D0E 6A01                    	push 1	; arg count
 12808 00008D10 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 12809 00008D18 803805                  	cmp byte [rax], T_undefined
 12810 00008D1B 0F84E6F10000            	je L_error_fvar_undefined
 12811 00008D21 803804                  	cmp byte [rax], T_closure
 12812 00008D24 0F8561F20000            	jne L_error_non_closure
 12813 00008D2A FF7001                  	push SOB_CLOSURE_ENV(rax)
 12814 00008D2D FF5009                  	call SOB_CLOSURE_CODE(rax)
 12815 00008D30 483D[02000000]          	cmp rax, sob_boolean_false
 12816 00008D36 0F8499000000            	je .L_if_else_00c8
 12817                                  	; preparing a tail-call
 12818 00008D3C 488B4528                	mov rax, PARAM(1)	; param b
 12819 00008D40 50                      	push rax
 12820                                  	; preparing a non-tail-call
 12821 00008D41 488B4520                	mov rax, PARAM(0)	; param a
 12822 00008D45 50                      	push rax
 12823 00008D46 6A01                    	push 1	; arg count
 12824 00008D48 488B0425[C40F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 12825 00008D50 803805                  	cmp byte [rax], T_undefined
 12826 00008D53 0F84AEF10000            	je L_error_fvar_undefined
 12827 00008D59 803804                  	cmp byte [rax], T_closure
 12828 00008D5C 0F8529F20000            	jne L_error_non_closure
 12829 00008D62 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12830 00008D65 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12831 00008D68 50                      	push rax
 12832 00008D69 6A02                    	push 2	; arg count
 12833 00008D6B 488B0425[4D0F0000]      	mov rax, qword [free_var_22]	; free var __bin-mul-qq
 12834 00008D73 803805                  	cmp byte [rax], T_undefined
 12835 00008D76 0F848BF10000            	je L_error_fvar_undefined
 12836 00008D7C 803804                  	cmp byte [rax], T_closure
 12837 00008D7F 0F8506F20000            	jne L_error_non_closure
 12838 00008D85 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12839 00008D88 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12840 00008D8B FF7500                  	push qword[rbp]
 12841 00008D8E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12842 00008D91 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12843 00008D95 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12844 00008D99 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12845 00008D9D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12846 00008DA0 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12847 00008DA3 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12848 00008DA8 4983C103                	add r9, 3 	 ;for getting to the params
 12849 00008DAC 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12850 00008DB0 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12851                                  .L_tc_recycle_frame_loop_017d:
 12852 00008DB3 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12853 00008DB6 7410                    	je .L_tc_recycle_frame_done_017d
 12854 00008DB8 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12855 00008DBB 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12856 00008DBE 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12857 00008DC2 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12858 00008DC6 EBEB                    	jmp .L_tc_recycle_frame_loop_017d
 12859                                  .L_tc_recycle_frame_done_017d:
 12860 00008DC8 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12861 00008DC9 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12862 00008DCD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12863 00008DD0 E929010000              	jmp .L_if_end_00c8
 12864                                  .L_if_else_00c8:
 12865                                  	; preparing a non-tail-call
 12866 00008DD5 488B4528                	mov rax, PARAM(1)	; param b
 12867 00008DD9 50                      	push rax
 12868 00008DDA 6A01                    	push 1	; arg count
 12869 00008DDC 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 12870 00008DE4 803805                  	cmp byte [rax], T_undefined
 12871 00008DE7 0F841AF10000            	je L_error_fvar_undefined
 12872 00008DED 803804                  	cmp byte [rax], T_closure
 12873 00008DF0 0F8595F10000            	jne L_error_non_closure
 12874 00008DF6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12875 00008DF9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12876 00008DFC 483D[02000000]          	cmp rax, sob_boolean_false
 12877 00008E02 0F8496000000            	je .L_if_else_00c7
 12878                                  	; preparing a tail-call
 12879 00008E08 488B4528                	mov rax, PARAM(1)	; param b
 12880 00008E0C 50                      	push rax
 12881                                  	; preparing a non-tail-call
 12882 00008E0D 488B4520                	mov rax, PARAM(0)	; param a
 12883 00008E11 50                      	push rax
 12884 00008E12 6A01                    	push 1	; arg count
 12885 00008E14 488B0425[D1130000]      	mov rax, qword [free_var_90]	; free var integer->real
 12886 00008E1C 803805                  	cmp byte [rax], T_undefined
 12887 00008E1F 0F84E2F00000            	je L_error_fvar_undefined
 12888 00008E25 803804                  	cmp byte [rax], T_closure
 12889 00008E28 0F855DF10000            	jne L_error_non_closure
 12890 00008E2E FF7001                  	push SOB_CLOSURE_ENV(rax)
 12891 00008E31 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12892 00008E34 50                      	push rax
 12893 00008E35 6A02                    	push 2	; arg count
 12894 00008E37 488B0425[5E0F0000]      	mov rax, qword [free_var_23]	; free var __bin-mul-rr
 12895 00008E3F 803805                  	cmp byte [rax], T_undefined
 12896 00008E42 0F84BFF00000            	je L_error_fvar_undefined
 12897 00008E48 803804                  	cmp byte [rax], T_closure
 12898 00008E4B 0F853AF10000            	jne L_error_non_closure
 12899 00008E51 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12900 00008E54 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12901 00008E57 FF7500                  	push qword[rbp]
 12902 00008E5A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12903 00008E5D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12904 00008E61 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12905 00008E65 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12906 00008E69 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12907 00008E6C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12908 00008E6F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12909 00008E74 4983C103                	add r9, 3 	 ;for getting to the params
 12910 00008E78 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12911 00008E7C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12912                                  .L_tc_recycle_frame_loop_017e:
 12913 00008E7F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12914 00008E82 7410                    	je .L_tc_recycle_frame_done_017e
 12915 00008E84 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12916 00008E87 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12917 00008E8A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12918 00008E8E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12919 00008E92 EBEB                    	jmp .L_tc_recycle_frame_loop_017e
 12920                                  .L_tc_recycle_frame_done_017e:
 12921 00008E94 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12922 00008E95 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12923 00008E99 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12924 00008E9C EB60                    	jmp .L_if_end_00c7
 12925                                  .L_if_else_00c7:
 12926                                  	; preparing a tail-call
 12927 00008E9E 6A00                    	push 0	; arg count
 12928 00008EA0 488B4510                	mov rax, ENV
 12929 00008EA4 488B00                  	mov rax, qword [rax + 8 * 0]
 12930 00008EA7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 12931 00008EAA 803804                  	cmp byte [rax], T_closure
 12932 00008EAD 0F85D8F00000            	jne L_error_non_closure
 12933 00008EB3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12934 00008EB6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12935 00008EB9 FF7500                  	push qword[rbp]
 12936 00008EBC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12937 00008EBF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12938 00008EC3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12939 00008EC7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12940 00008ECB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12941 00008ECE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12942 00008ED1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12943 00008ED6 4983C103                	add r9, 3 	 ;for getting to the params
 12944 00008EDA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12945 00008EDE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12946                                  .L_tc_recycle_frame_loop_017f:
 12947 00008EE1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12948 00008EE4 7410                    	je .L_tc_recycle_frame_done_017f
 12949 00008EE6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12950 00008EE9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12951 00008EEC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12952 00008EF0 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12953 00008EF4 EBEB                    	jmp .L_tc_recycle_frame_loop_017f
 12954                                  .L_tc_recycle_frame_done_017f:
 12955 00008EF6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12956 00008EF7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12957 00008EFB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12958                                  .L_if_end_00c7:
 12959                                  .L_if_end_00c8:
 12960                                  .L_if_end_00c9:
 12961 00008EFE E901060000              	jmp .L_if_end_00d2
 12962                                  .L_if_else_00d2:
 12963                                  	; preparing a non-tail-call
 12964 00008F03 488B4520                	mov rax, PARAM(0)	; param a
 12965 00008F07 50                      	push rax
 12966 00008F08 6A01                    	push 1	; arg count
 12967 00008F0A 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 12968 00008F12 803805                  	cmp byte [rax], T_undefined
 12969 00008F15 0F84ECEF0000            	je L_error_fvar_undefined
 12970 00008F1B 803804                  	cmp byte [rax], T_closure
 12971 00008F1E 0F8567F00000            	jne L_error_non_closure
 12972 00008F24 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12973 00008F27 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12974 00008F2A 483D[02000000]          	cmp rax, sob_boolean_false
 12975 00008F30 0F849F020000            	je .L_if_else_00d1
 12976                                  	; preparing a non-tail-call
 12977 00008F36 488B4528                	mov rax, PARAM(1)	; param b
 12978 00008F3A 50                      	push rax
 12979 00008F3B 6A01                    	push 1	; arg count
 12980 00008F3D 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 12981 00008F45 803805                  	cmp byte [rax], T_undefined
 12982 00008F48 0F84B9EF0000            	je L_error_fvar_undefined
 12983 00008F4E 803804                  	cmp byte [rax], T_closure
 12984 00008F51 0F8534F00000            	jne L_error_non_closure
 12985 00008F57 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12986 00008F5A FF5009                  	call SOB_CLOSURE_CODE(rax)
 12987 00008F5D 483D[02000000]          	cmp rax, sob_boolean_false
 12988 00008F63 0F8499000000            	je .L_if_else_00cc
 12989                                  	; preparing a tail-call
 12990                                  	; preparing a non-tail-call
 12991 00008F69 488B4528                	mov rax, PARAM(1)	; param b
 12992 00008F6D 50                      	push rax
 12993 00008F6E 6A01                    	push 1	; arg count
 12994 00008F70 488B0425[C40F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 12995 00008F78 803805                  	cmp byte [rax], T_undefined
 12996 00008F7B 0F8486EF0000            	je L_error_fvar_undefined
 12997 00008F81 803804                  	cmp byte [rax], T_closure
 12998 00008F84 0F8501F00000            	jne L_error_non_closure
 12999 00008F8A FF7001                  	push SOB_CLOSURE_ENV(rax)
 13000 00008F8D FF5009                  	call SOB_CLOSURE_CODE(rax)
 13001 00008F90 50                      	push rax
 13002 00008F91 488B4520                	mov rax, PARAM(0)	; param a
 13003 00008F95 50                      	push rax
 13004 00008F96 6A02                    	push 2	; arg count
 13005 00008F98 488B0425[4D0F0000]      	mov rax, qword [free_var_22]	; free var __bin-mul-qq
 13006 00008FA0 803805                  	cmp byte [rax], T_undefined
 13007 00008FA3 0F845EEF0000            	je L_error_fvar_undefined
 13008 00008FA9 803804                  	cmp byte [rax], T_closure
 13009 00008FAC 0F85D9EF0000            	jne L_error_non_closure
 13010 00008FB2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13011 00008FB5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13012 00008FB8 FF7500                  	push qword[rbp]
 13013 00008FBB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13014 00008FBE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13015 00008FC2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13016 00008FC6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13017 00008FCA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13018 00008FCD 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13019 00008FD0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13020 00008FD5 4983C103                	add r9, 3 	 ;for getting to the params
 13021 00008FD9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13022 00008FDD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13023                                  .L_tc_recycle_frame_loop_0180:
 13024 00008FE0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13025 00008FE3 7410                    	je .L_tc_recycle_frame_done_0180
 13026 00008FE5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13027 00008FE8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13028 00008FEB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13029 00008FEF 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13030 00008FF3 EBEB                    	jmp .L_tc_recycle_frame_loop_0180
 13031                                  .L_tc_recycle_frame_done_0180:
 13032 00008FF5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13033 00008FF6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13034 00008FFA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13035 00008FFD E9CE010000              	jmp .L_if_end_00cc
 13036                                  .L_if_else_00cc:
 13037                                  	; preparing a non-tail-call
 13038 00009002 488B4528                	mov rax, PARAM(1)	; param b
 13039 00009006 50                      	push rax
 13040 00009007 6A01                    	push 1	; arg count
 13041 00009009 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 13042 00009011 803805                  	cmp byte [rax], T_undefined
 13043 00009014 0F84EDEE0000            	je L_error_fvar_undefined
 13044 0000901A 803804                  	cmp byte [rax], T_closure
 13045 0000901D 0F8568EF0000            	jne L_error_non_closure
 13046 00009023 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13047 00009026 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13048 00009029 483D[02000000]          	cmp rax, sob_boolean_false
 13049 0000902F 7476                    	je .L_if_else_00cb
 13050                                  	; preparing a tail-call
 13051 00009031 488B4528                	mov rax, PARAM(1)	; param b
 13052 00009035 50                      	push rax
 13053 00009036 488B4520                	mov rax, PARAM(0)	; param a
 13054 0000903A 50                      	push rax
 13055 0000903B 6A02                    	push 2	; arg count
 13056 0000903D 488B0425[4D0F0000]      	mov rax, qword [free_var_22]	; free var __bin-mul-qq
 13057 00009045 803805                  	cmp byte [rax], T_undefined
 13058 00009048 0F84B9EE0000            	je L_error_fvar_undefined
 13059 0000904E 803804                  	cmp byte [rax], T_closure
 13060 00009051 0F8534EF0000            	jne L_error_non_closure
 13061 00009057 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13062 0000905A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13063 0000905D FF7500                  	push qword[rbp]
 13064 00009060 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13065 00009063 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13066 00009067 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13067 0000906B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13068 0000906F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13069 00009072 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13070 00009075 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13071 0000907A 4983C103                	add r9, 3 	 ;for getting to the params
 13072 0000907E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13073 00009082 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13074                                  .L_tc_recycle_frame_loop_0181:
 13075 00009085 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13076 00009088 7410                    	je .L_tc_recycle_frame_done_0181
 13077 0000908A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13078 0000908D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13079 00009090 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13080 00009094 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13081 00009098 EBEB                    	jmp .L_tc_recycle_frame_loop_0181
 13082                                  .L_tc_recycle_frame_done_0181:
 13083 0000909A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13084 0000909B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13085 0000909F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13086 000090A2 E929010000              	jmp .L_if_end_00cb
 13087                                  .L_if_else_00cb:
 13088                                  	; preparing a non-tail-call
 13089 000090A7 488B4528                	mov rax, PARAM(1)	; param b
 13090 000090AB 50                      	push rax
 13091 000090AC 6A01                    	push 1	; arg count
 13092 000090AE 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 13093 000090B6 803805                  	cmp byte [rax], T_undefined
 13094 000090B9 0F8448EE0000            	je L_error_fvar_undefined
 13095 000090BF 803804                  	cmp byte [rax], T_closure
 13096 000090C2 0F85C3EE0000            	jne L_error_non_closure
 13097 000090C8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13098 000090CB FF5009                  	call SOB_CLOSURE_CODE(rax)
 13099 000090CE 483D[02000000]          	cmp rax, sob_boolean_false
 13100 000090D4 0F8496000000            	je .L_if_else_00ca
 13101                                  	; preparing a tail-call
 13102 000090DA 488B4528                	mov rax, PARAM(1)	; param b
 13103 000090DE 50                      	push rax
 13104                                  	; preparing a non-tail-call
 13105 000090DF 488B4520                	mov rax, PARAM(0)	; param a
 13106 000090E3 50                      	push rax
 13107 000090E4 6A01                    	push 1	; arg count
 13108 000090E6 488B0425[9E130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 13109 000090EE 803805                  	cmp byte [rax], T_undefined
 13110 000090F1 0F8410EE0000            	je L_error_fvar_undefined
 13111 000090F7 803804                  	cmp byte [rax], T_closure
 13112 000090FA 0F858BEE0000            	jne L_error_non_closure
 13113 00009100 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13114 00009103 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13115 00009106 50                      	push rax
 13116 00009107 6A02                    	push 2	; arg count
 13117 00009109 488B0425[5E0F0000]      	mov rax, qword [free_var_23]	; free var __bin-mul-rr
 13118 00009111 803805                  	cmp byte [rax], T_undefined
 13119 00009114 0F84EDED0000            	je L_error_fvar_undefined
 13120 0000911A 803804                  	cmp byte [rax], T_closure
 13121 0000911D 0F8568EE0000            	jne L_error_non_closure
 13122 00009123 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13123 00009126 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13124 00009129 FF7500                  	push qword[rbp]
 13125 0000912C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13126 0000912F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13127 00009133 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13128 00009137 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13129 0000913B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13130 0000913E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13131 00009141 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13132 00009146 4983C103                	add r9, 3 	 ;for getting to the params
 13133 0000914A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13134 0000914E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13135                                  .L_tc_recycle_frame_loop_0182:
 13136 00009151 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13137 00009154 7410                    	je .L_tc_recycle_frame_done_0182
 13138 00009156 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13139 00009159 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13140 0000915C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13141 00009160 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13142 00009164 EBEB                    	jmp .L_tc_recycle_frame_loop_0182
 13143                                  .L_tc_recycle_frame_done_0182:
 13144 00009166 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13145 00009167 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13146 0000916B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13147 0000916E EB60                    	jmp .L_if_end_00ca
 13148                                  .L_if_else_00ca:
 13149                                  	; preparing a tail-call
 13150 00009170 6A00                    	push 0	; arg count
 13151 00009172 488B4510                	mov rax, ENV
 13152 00009176 488B00                  	mov rax, qword [rax + 8 * 0]
 13153 00009179 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 13154 0000917C 803804                  	cmp byte [rax], T_closure
 13155 0000917F 0F8506EE0000            	jne L_error_non_closure
 13156 00009185 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13157 00009188 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13158 0000918B FF7500                  	push qword[rbp]
 13159 0000918E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13160 00009191 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13161 00009195 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13162 00009199 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13163 0000919D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13164 000091A0 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13165 000091A3 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13166 000091A8 4983C103                	add r9, 3 	 ;for getting to the params
 13167 000091AC 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13168 000091B0 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13169                                  .L_tc_recycle_frame_loop_0183:
 13170 000091B3 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13171 000091B6 7410                    	je .L_tc_recycle_frame_done_0183
 13172 000091B8 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13173 000091BB 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13174 000091BE 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13175 000091C2 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13176 000091C6 EBEB                    	jmp .L_tc_recycle_frame_loop_0183
 13177                                  .L_tc_recycle_frame_done_0183:
 13178 000091C8 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13179 000091C9 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13180 000091CD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13181                                  .L_if_end_00ca:
 13182                                  .L_if_end_00cb:
 13183                                  .L_if_end_00cc:
 13184 000091D0 E92F030000              	jmp .L_if_end_00d1
 13185                                  .L_if_else_00d1:
 13186                                  	; preparing a non-tail-call
 13187 000091D5 488B4520                	mov rax, PARAM(0)	; param a
 13188 000091D9 50                      	push rax
 13189 000091DA 6A01                    	push 1	; arg count
 13190 000091DC 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 13191 000091E4 803805                  	cmp byte [rax], T_undefined
 13192 000091E7 0F841AED0000            	je L_error_fvar_undefined
 13193 000091ED 803804                  	cmp byte [rax], T_closure
 13194 000091F0 0F8595ED0000            	jne L_error_non_closure
 13195 000091F6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13196 000091F9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13197 000091FC 483D[02000000]          	cmp rax, sob_boolean_false
 13198 00009202 0F849C020000            	je .L_if_else_00d0
 13199                                  	; preparing a non-tail-call
 13200 00009208 488B4528                	mov rax, PARAM(1)	; param b
 13201 0000920C 50                      	push rax
 13202 0000920D 6A01                    	push 1	; arg count
 13203 0000920F 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 13204 00009217 803805                  	cmp byte [rax], T_undefined
 13205 0000921A 0F84E7EC0000            	je L_error_fvar_undefined
 13206 00009220 803804                  	cmp byte [rax], T_closure
 13207 00009223 0F8562ED0000            	jne L_error_non_closure
 13208 00009229 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13209 0000922C FF5009                  	call SOB_CLOSURE_CODE(rax)
 13210 0000922F 483D[02000000]          	cmp rax, sob_boolean_false
 13211 00009235 0F8499000000            	je .L_if_else_00cf
 13212                                  	; preparing a tail-call
 13213                                  	; preparing a non-tail-call
 13214 0000923B 488B4528                	mov rax, PARAM(1)	; param b
 13215 0000923F 50                      	push rax
 13216 00009240 6A01                    	push 1	; arg count
 13217 00009242 488B0425[D1130000]      	mov rax, qword [free_var_90]	; free var integer->real
 13218 0000924A 803805                  	cmp byte [rax], T_undefined
 13219 0000924D 0F84B4EC0000            	je L_error_fvar_undefined
 13220 00009253 803804                  	cmp byte [rax], T_closure
 13221 00009256 0F852FED0000            	jne L_error_non_closure
 13222 0000925C FF7001                  	push SOB_CLOSURE_ENV(rax)
 13223 0000925F FF5009                  	call SOB_CLOSURE_CODE(rax)
 13224 00009262 50                      	push rax
 13225 00009263 488B4520                	mov rax, PARAM(0)	; param a
 13226 00009267 50                      	push rax
 13227 00009268 6A02                    	push 2	; arg count
 13228 0000926A 488B0425[5E0F0000]      	mov rax, qword [free_var_23]	; free var __bin-mul-rr
 13229 00009272 803805                  	cmp byte [rax], T_undefined
 13230 00009275 0F848CEC0000            	je L_error_fvar_undefined
 13231 0000927B 803804                  	cmp byte [rax], T_closure
 13232 0000927E 0F8507ED0000            	jne L_error_non_closure
 13233 00009284 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13234 00009287 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13235 0000928A FF7500                  	push qword[rbp]
 13236 0000928D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13237 00009290 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13238 00009294 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13239 00009298 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13240 0000929C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13241 0000929F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13242 000092A2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13243 000092A7 4983C103                	add r9, 3 	 ;for getting to the params
 13244 000092AB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13245 000092AF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13246                                  .L_tc_recycle_frame_loop_0184:
 13247 000092B2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13248 000092B5 7410                    	je .L_tc_recycle_frame_done_0184
 13249 000092B7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13250 000092BA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13251 000092BD 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13252 000092C1 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13253 000092C5 EBEB                    	jmp .L_tc_recycle_frame_loop_0184
 13254                                  .L_tc_recycle_frame_done_0184:
 13255 000092C7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13256 000092C8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13257 000092CC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13258 000092CF E9CE010000              	jmp .L_if_end_00cf
 13259                                  .L_if_else_00cf:
 13260                                  	; preparing a non-tail-call
 13261 000092D4 488B4528                	mov rax, PARAM(1)	; param b
 13262 000092D8 50                      	push rax
 13263 000092D9 6A01                    	push 1	; arg count
 13264 000092DB 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 13265 000092E3 803805                  	cmp byte [rax], T_undefined
 13266 000092E6 0F841BEC0000            	je L_error_fvar_undefined
 13267 000092EC 803804                  	cmp byte [rax], T_closure
 13268 000092EF 0F8596EC0000            	jne L_error_non_closure
 13269 000092F5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13270 000092F8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13271 000092FB 483D[02000000]          	cmp rax, sob_boolean_false
 13272 00009301 0F8499000000            	je .L_if_else_00ce
 13273                                  	; preparing a tail-call
 13274                                  	; preparing a non-tail-call
 13275 00009307 488B4528                	mov rax, PARAM(1)	; param b
 13276 0000930B 50                      	push rax
 13277 0000930C 6A01                    	push 1	; arg count
 13278 0000930E 488B0425[9E130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 13279 00009316 803805                  	cmp byte [rax], T_undefined
 13280 00009319 0F84E8EB0000            	je L_error_fvar_undefined
 13281 0000931F 803804                  	cmp byte [rax], T_closure
 13282 00009322 0F8563EC0000            	jne L_error_non_closure
 13283 00009328 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13284 0000932B FF5009                  	call SOB_CLOSURE_CODE(rax)
 13285 0000932E 50                      	push rax
 13286 0000932F 488B4520                	mov rax, PARAM(0)	; param a
 13287 00009333 50                      	push rax
 13288 00009334 6A02                    	push 2	; arg count
 13289 00009336 488B0425[5E0F0000]      	mov rax, qword [free_var_23]	; free var __bin-mul-rr
 13290 0000933E 803805                  	cmp byte [rax], T_undefined
 13291 00009341 0F84C0EB0000            	je L_error_fvar_undefined
 13292 00009347 803804                  	cmp byte [rax], T_closure
 13293 0000934A 0F853BEC0000            	jne L_error_non_closure
 13294 00009350 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13295 00009353 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13296 00009356 FF7500                  	push qword[rbp]
 13297 00009359 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13298 0000935C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13299 00009360 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13300 00009364 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13301 00009368 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13302 0000936B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13303 0000936E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13304 00009373 4983C103                	add r9, 3 	 ;for getting to the params
 13305 00009377 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13306 0000937B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13307                                  .L_tc_recycle_frame_loop_0185:
 13308 0000937E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13309 00009381 7410                    	je .L_tc_recycle_frame_done_0185
 13310 00009383 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13311 00009386 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13312 00009389 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13313 0000938D 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13314 00009391 EBEB                    	jmp .L_tc_recycle_frame_loop_0185
 13315                                  .L_tc_recycle_frame_done_0185:
 13316 00009393 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13317 00009394 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13318 00009398 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13319 0000939B E902010000              	jmp .L_if_end_00ce
 13320                                  .L_if_else_00ce:
 13321                                  	; preparing a non-tail-call
 13322 000093A0 488B4528                	mov rax, PARAM(1)	; param b
 13323 000093A4 50                      	push rax
 13324 000093A5 6A01                    	push 1	; arg count
 13325 000093A7 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 13326 000093AF 803805                  	cmp byte [rax], T_undefined
 13327 000093B2 0F844FEB0000            	je L_error_fvar_undefined
 13328 000093B8 803804                  	cmp byte [rax], T_closure
 13329 000093BB 0F85CAEB0000            	jne L_error_non_closure
 13330 000093C1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13331 000093C4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13332 000093C7 483D[02000000]          	cmp rax, sob_boolean_false
 13333 000093CD 7473                    	je .L_if_else_00cd
 13334                                  	; preparing a tail-call
 13335 000093CF 488B4528                	mov rax, PARAM(1)	; param b
 13336 000093D3 50                      	push rax
 13337 000093D4 488B4520                	mov rax, PARAM(0)	; param a
 13338 000093D8 50                      	push rax
 13339 000093D9 6A02                    	push 2	; arg count
 13340 000093DB 488B0425[5E0F0000]      	mov rax, qword [free_var_23]	; free var __bin-mul-rr
 13341 000093E3 803805                  	cmp byte [rax], T_undefined
 13342 000093E6 0F841BEB0000            	je L_error_fvar_undefined
 13343 000093EC 803804                  	cmp byte [rax], T_closure
 13344 000093EF 0F8596EB0000            	jne L_error_non_closure
 13345 000093F5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13346 000093F8 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13347 000093FB FF7500                  	push qword[rbp]
 13348 000093FE 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13349 00009401 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13350 00009405 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13351 00009409 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13352 0000940D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13353 00009410 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13354 00009413 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13355 00009418 4983C103                	add r9, 3 	 ;for getting to the params
 13356 0000941C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13357 00009420 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13358                                  .L_tc_recycle_frame_loop_0186:
 13359 00009423 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13360 00009426 7410                    	je .L_tc_recycle_frame_done_0186
 13361 00009428 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13362 0000942B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13363 0000942E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13364 00009432 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13365 00009436 EBEB                    	jmp .L_tc_recycle_frame_loop_0186
 13366                                  .L_tc_recycle_frame_done_0186:
 13367 00009438 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13368 00009439 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13369 0000943D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13370 00009440 EB60                    	jmp .L_if_end_00cd
 13371                                  .L_if_else_00cd:
 13372                                  	; preparing a tail-call
 13373 00009442 6A00                    	push 0	; arg count
 13374 00009444 488B4510                	mov rax, ENV
 13375 00009448 488B00                  	mov rax, qword [rax + 8 * 0]
 13376 0000944B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 13377 0000944E 803804                  	cmp byte [rax], T_closure
 13378 00009451 0F8534EB0000            	jne L_error_non_closure
 13379 00009457 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13380 0000945A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13381 0000945D FF7500                  	push qword[rbp]
 13382 00009460 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13383 00009463 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13384 00009467 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13385 0000946B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13386 0000946F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13387 00009472 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13388 00009475 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13389 0000947A 4983C103                	add r9, 3 	 ;for getting to the params
 13390 0000947E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13391 00009482 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13392                                  .L_tc_recycle_frame_loop_0187:
 13393 00009485 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13394 00009488 7410                    	je .L_tc_recycle_frame_done_0187
 13395 0000948A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13396 0000948D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13397 00009490 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13398 00009494 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13399 00009498 EBEB                    	jmp .L_tc_recycle_frame_loop_0187
 13400                                  .L_tc_recycle_frame_done_0187:
 13401 0000949A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13402 0000949B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13403 0000949F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13404                                  .L_if_end_00cd:
 13405                                  .L_if_end_00ce:
 13406                                  .L_if_end_00cf:
 13407 000094A2 EB60                    	jmp .L_if_end_00d0
 13408                                  .L_if_else_00d0:
 13409                                  	; preparing a tail-call
 13410 000094A4 6A00                    	push 0	; arg count
 13411 000094A6 488B4510                	mov rax, ENV
 13412 000094AA 488B00                  	mov rax, qword [rax + 8 * 0]
 13413 000094AD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 13414 000094B0 803804                  	cmp byte [rax], T_closure
 13415 000094B3 0F85D2EA0000            	jne L_error_non_closure
 13416 000094B9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13417 000094BC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13418 000094BF FF7500                  	push qword[rbp]
 13419 000094C2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13420 000094C5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13421 000094C9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13422 000094CD 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13423 000094D1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13424 000094D4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13425 000094D7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13426 000094DC 4983C103                	add r9, 3 	 ;for getting to the params
 13427 000094E0 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13428 000094E4 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13429                                  .L_tc_recycle_frame_loop_0188:
 13430 000094E7 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13431 000094EA 7410                    	je .L_tc_recycle_frame_done_0188
 13432 000094EC 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13433 000094EF 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13434 000094F2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13435 000094F6 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13436 000094FA EBEB                    	jmp .L_tc_recycle_frame_loop_0188
 13437                                  .L_tc_recycle_frame_done_0188:
 13438 000094FC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13439 000094FD 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13440 00009501 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13441                                  .L_if_end_00d0:
 13442                                  .L_if_end_00d1:
 13443                                  .L_if_end_00d2:
 13444 00009504 C9                      	leave
 13445 00009505 C22000                  	ret AND_KILL_FRAME(2)
 13446                                  .L_lambda_simple_end_0107:	; new closure is in rax
 13447 00009508 50                      	push rax
 13448 00009509 6A01                    	push 1	; arg count
 13449 0000950B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13450 00009510 E81FEB0000              	call malloc
 13451 00009515 50                      	push rax
 13452 00009516 BF08000000              	mov rdi, 8 * 1	; new rib
 13453 0000951B E814EB0000              	call malloc
 13454 00009520 50                      	push rax
 13455 00009521 BF10000000              	mov rdi, 8 * 2	; extended env
 13456 00009526 E809EB0000              	call malloc
 13457 0000952B 488B7D10                	mov rdi, ENV
 13458 0000952F BE00000000              	mov rsi, 0
 13459 00009534 BA01000000              	mov rdx, 1
 13460                                  .L_lambda_simple_env_loop_0108:	; ext_env[i + 1] <-- env[i]
 13461 00009539 4883FE01                	cmp rsi, 1
 13462 0000953D 7410                    	je .L_lambda_simple_env_end_0108
 13463 0000953F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13464 00009543 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13465 00009547 48FFC6                  	inc rsi
 13466 0000954A 48FFC2                  	inc rdx
 13467 0000954D EBEA                    	jmp .L_lambda_simple_env_loop_0108
 13468                                  .L_lambda_simple_env_end_0108:
 13469 0000954F 5B                      	pop rbx
 13470 00009550 BE00000000              	mov rsi, 0
 13471                                  .L_lambda_simple_params_loop_0108:	; copy params
 13472 00009555 4883FE01                	cmp rsi, 1
 13473 00009559 740E                    	je .L_lambda_simple_params_end_0108
 13474 0000955B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13475 00009560 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13476 00009564 48FFC6                  	inc rsi
 13477 00009567 EBEC                    	jmp .L_lambda_simple_params_loop_0108
 13478                                  .L_lambda_simple_params_end_0108:
 13479 00009569 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13480 0000956C 4889C3                  	mov rbx, rax
 13481 0000956F 58                      	pop rax
 13482 00009570 C60004                  	mov byte [rax], T_closure
 13483 00009573 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13484 00009577 48C74009[84950000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0108
 13485 0000957F E9AD020000              	jmp .L_lambda_simple_end_0108
 13486                                  .L_lambda_simple_code_0108:	; lambda-simple body
 13487 00009584 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13488 0000958A 740B                    	je .L_lambda_simple_arity_check_ok_0108
 13489 0000958C FF742410                	push qword [rsp + 8 * 2]
 13490 00009590 6A01                    	push 1
 13491 00009592 E956EA0000              	jmp L_error_incorrect_arity_simple
 13492                                  .L_lambda_simple_arity_check_ok_0108:
 13493 00009597 C8000000                	enter 0, 0
 13494 0000959B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13495 000095A0 E88FEA0000              	call malloc
 13496 000095A5 50                      	push rax
 13497 000095A6 BF08000000              	mov rdi, 8 * 1	; new rib
 13498 000095AB E884EA0000              	call malloc
 13499 000095B0 50                      	push rax
 13500 000095B1 BF18000000              	mov rdi, 8 * 3	; extended env
 13501 000095B6 E879EA0000              	call malloc
 13502 000095BB 488B7D10                	mov rdi, ENV
 13503 000095BF BE00000000              	mov rsi, 0
 13504 000095C4 BA01000000              	mov rdx, 1
 13505                                  .L_lambda_opt_env_loop_0024:	; ext_env[i + 1] <-- env[i]
 13506 000095C9 4883FE02                	cmp rsi, 2
 13507 000095CD 7410                    	je .L_lambda_opt_env_end_0024
 13508 000095CF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13509 000095D3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13510 000095D7 48FFC6                  	inc rsi
 13511 000095DA 48FFC2                  	inc rdx
 13512 000095DD EBEA                    	jmp .L_lambda_opt_env_loop_0024
 13513                                  .L_lambda_opt_env_end_0024:
 13514 000095DF 5B                      	pop rbx
 13515 000095E0 BE00000000              	mov rsi, 0
 13516                                  .L_lambda_opt_params_loop_0024:	; copy params
 13517 000095E5 4883FE01                	cmp rsi, 1
 13518 000095E9 740E                    	je .L_lambda_opt_params_end_0024
 13519 000095EB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13520 000095F0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13521 000095F4 48FFC6                  	inc rsi
 13522 000095F7 EBEC                    	jmp .L_lambda_opt_params_loop_0024
 13523                                  .L_lambda_opt_params_end_0024:
 13524 000095F9 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
 13525 000095FC 4889C3                  	mov rbx, rax
 13526 000095FF 58                      	pop rax
 13527 00009600 C60004                  	mov byte [rax], T_closure
 13528 00009603 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13529 00009607 48C74009[14960000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0024
 13530 0000960F E919020000              	jmp .L_lambda_opt_end_0024
 13531                                  .L_lambda_opt_code_0024:	; lambda-opt body
 13532 00009614 48837C241000            	cmp qword [rsp + 8 * 2], 0
 13533 0000961A 7411                    	je .L_lambda_opt_arity_check_exact_0024
 13534 0000961C 0F8FCA000000            	jg .L_lambda_opt_arity_check_more_0024
 13535 00009622 FF742410                	push qword [rsp + 8 * 2]
 13536 00009626 6A00                    	push 0
 13537 00009628 E9D4E90000              	jmp L_error_incorrect_arity_opt
 13538                                  .L_lambda_opt_arity_check_exact_0024:
 13539 0000962D 4883EC08                	sub rsp, 8
 13540 00009631 488B442408              	mov rax, qword[rsp + 8 *1]
 13541 00009636 48890424                	mov qword[rsp], rax  
 13542 0000963A 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 13543 0000963F 4889442408              	mov qword[rsp + 8 * 1], rax
 13544 00009644 B801000000              	mov rax, 1
 13545 00009649 4889442410              	mov qword[rsp + 8 *2], rax
 13546 0000964E 48B8-                   	mov rax, sob_nil
 13546 00009650 [0100000000000000] 
 13547 00009658 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 13548 0000965D C8000000                	enter 0, 0
 13549                                  	; preparing a tail-call
 13550 00009661 488B4520                	mov rax, PARAM(0)	; param s
 13551 00009665 50                      	push rax
 13552 00009666 48B8-                   	mov rax, L_constants + 2270
 13552 00009668 [DE08000000000000] 
 13553 00009670 50                      	push rax
 13554 00009671 488B4510                	mov rax, ENV
 13555 00009675 488B00                  	mov rax, qword [rax + 8 * 0]
 13556 00009678 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin*
 13557 0000967B 50                      	push rax
 13558 0000967C 6A03                    	push 3	; arg count
 13559 0000967E 488B0425[7C130000]      	mov rax, qword [free_var_85]	; free var fold-left
 13560 00009686 803805                  	cmp byte [rax], T_undefined
 13561 00009689 0F8478E80000            	je L_error_fvar_undefined
 13562 0000968F 803804                  	cmp byte [rax], T_closure
 13563 00009692 0F85F3E80000            	jne L_error_non_closure
 13564 00009698 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13565 0000969B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13566 0000969E FF7500                  	push qword[rbp]
 13567 000096A1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13568 000096A4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13569 000096A8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13570 000096AC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13571 000096B0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13572 000096B3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13573 000096B6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13574 000096BB 4983C103                	add r9, 3 	 ;for getting to the params
 13575 000096BF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13576 000096C3 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13577                                  .L_tc_recycle_frame_loop_018a:
 13578 000096C6 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13579 000096C9 7410                    	je .L_tc_recycle_frame_done_018a
 13580 000096CB 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13581 000096CE 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13582 000096D1 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13583 000096D5 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13584 000096D9 EBEB                    	jmp .L_tc_recycle_frame_loop_018a
 13585                                  .L_tc_recycle_frame_done_018a:
 13586 000096DB 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13587 000096DC 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13588 000096E0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13589 000096E3 C9                      	leave
 13590 000096E4 C21800                  	ret AND_KILL_FRAME(1)
 13591 000096E7 E941010000              	jmp .L_lambda_opt_end_0024	; new closure is in rax
 13592                                  .L_lambda_opt_arity_check_more_0024:
 13593 000096EC 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 13594 000096F1 49B9-                   	mov r9, sob_nil
 13594 000096F3 [0100000000000000] 
 13595 000096FB 4889E3                  	mov rbx, rsp 
 13596 000096FE 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 13597 00009702 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 13598 00009705 49C1E003                	shl r8, 3
 13599 00009709 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 13600 0000970C 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 13601                                  .L_lambda_opt_stack_shrink_loop_0024:
 13602 00009711 4983F800                	cmp r8, 0
 13603 00009715 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0024
 13604 00009717 BF11000000              	mov rdi, 1+8+8 ;for pair
 13605 0000971C E813E90000              	call malloc;to create the pair in the stack
 13606 00009721 C60021                  	mov byte [rax], T_pair ; to make it a pair
 13607 00009724 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
 13608 00009727 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 13609 0000972B 4C894809                 	mov qword[rax+1+8],r9
 13610 0000972F 4989C1                  	mov r9, rax ;for the recursion 
 13611 00009732 49FFC8                  	dec r8 ;we finished copy another opt param to the list
 13612 00009735 4883EB08                	sub rbx, 8 ;to get the next param to copy
 13613 00009739 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0024
 13614                                  .L_lambda_opt_stack_shrink_loop_exit_0024:
 13615 0000973B 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
 13616 00009740 4883E901                	sub rcx, 1
 13617 00009744 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
 13618 00009748 4801CC                  	add rsp, rcx ;shrinking the stack
 13619 0000974B 4889E0                  	mov rax, rsp
 13620 0000974E 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
 13621 00009751 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
 13622 00009755 49FFC8                  	dec r8 ;we start with param 0, not 1 
 13623 00009758 4883C018                	add rax, 3 * 8;now rax is param 0
 13624 0000975C 49C1E003                	shl r8, 3;convert to byte
 13625 00009760 4C01C0                  	add rax, r8;now rax is the top of the stack
 13626 00009763 4C8908                  	mov qword[rax], r9;puting the list at the top
 13627 00009766 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
 13628 0000976A 4889E3                  	mov rbx, rsp 
 13629 0000976D 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
 13630 00009770 41BA00000000            	mov r10, 0;r10 is the not opt params length
 13631 00009776 49FFCA                  	dec r10 
 13632 00009779 49C1E203                	shl r10, 3;to get bytes
 13633 0000977D 4883C318                	add rbx, 3*8;rbx is the first param
 13634 00009781 4C01D3                  	add rbx, r10; rbx is where the address to copy to
 13635 00009784 4889E0                  	mov rax, rsp
 13636 00009787 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 13637 0000978A 48C744241001000000      	mov qword [rsp+2*8], 1
 13638 00009793 488B5808                	mov rbx, qword[rax + 8 *1]
 13639 00009797 48895C2408              	mov qword [rsp + 1*8] ,rbx
 13640 0000979C 488B18                  	mov rbx, qword[rax]
 13641 0000979F 48891C24                	mov qword [rsp], rbx
 13642 000097A3 C8000000                	enter 0, 0
 13643                                  	; preparing a tail-call
 13644 000097A7 488B4520                	mov rax, PARAM(0)	; param s
 13645 000097AB 50                      	push rax
 13646 000097AC 48B8-                   	mov rax, L_constants + 2270
 13646 000097AE [DE08000000000000] 
 13647 000097B6 50                      	push rax
 13648 000097B7 488B4510                	mov rax, ENV
 13649 000097BB 488B00                  	mov rax, qword [rax + 8 * 0]
 13650 000097BE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin*
 13651 000097C1 50                      	push rax
 13652 000097C2 6A03                    	push 3	; arg count
 13653 000097C4 488B0425[7C130000]      	mov rax, qword [free_var_85]	; free var fold-left
 13654 000097CC 803805                  	cmp byte [rax], T_undefined
 13655 000097CF 0F8432E70000            	je L_error_fvar_undefined
 13656 000097D5 803804                  	cmp byte [rax], T_closure
 13657 000097D8 0F85ADE70000            	jne L_error_non_closure
 13658 000097DE FF7001                  	push SOB_CLOSURE_ENV(rax)
 13659 000097E1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13660 000097E4 FF7500                  	push qword[rbp]
 13661 000097E7 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13662 000097EA 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13663 000097EE 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13664 000097F2 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13665 000097F6 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13666 000097F9 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13667 000097FC 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13668 00009801 4983C103                	add r9, 3 	 ;for getting to the params
 13669 00009805 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13670 00009809 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13671                                  .L_tc_recycle_frame_loop_0189:
 13672 0000980C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13673 0000980F 7410                    	je .L_tc_recycle_frame_done_0189
 13674 00009811 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13675 00009814 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13676 00009817 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13677 0000981B 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13678 0000981F EBEB                    	jmp .L_tc_recycle_frame_loop_0189
 13679                                  .L_tc_recycle_frame_done_0189:
 13680 00009821 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13681 00009822 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13682 00009826 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13683 00009829 C9                      	leave
 13684 0000982A C21800                  	ret AND_KILL_FRAME(1)
 13685                                  .L_lambda_opt_end_0024:	; new closure is in rax
 13686 0000982D C9                      	leave
 13687 0000982E C21800                  	ret AND_KILL_FRAME(1)
 13688                                  .L_lambda_simple_end_0108:	; new closure is in rax
 13689 00009831 803804                  	cmp byte [rax], T_closure
 13690 00009834 0F8551E70000            	jne L_error_non_closure
 13691 0000983A FF7001                  	push SOB_CLOSURE_ENV(rax)
 13692 0000983D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13693 00009840 FF7500                  	push qword[rbp]
 13694 00009843 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13695 00009846 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13696 0000984A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13697 0000984E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13698 00009852 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13699 00009855 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13700 00009858 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13701 0000985D 4983C103                	add r9, 3 	 ;for getting to the params
 13702 00009861 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13703 00009865 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13704                                  .L_tc_recycle_frame_loop_018b:
 13705 00009868 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13706 0000986B 7410                    	je .L_tc_recycle_frame_done_018b
 13707 0000986D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13708 00009870 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13709 00009873 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13710 00009877 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13711 0000987B EBEB                    	jmp .L_tc_recycle_frame_loop_018b
 13712                                  .L_tc_recycle_frame_done_018b:
 13713 0000987D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13714 0000987E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13715 00009882 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13716 00009885 C9                      	leave
 13717 00009886 C21800                  	ret AND_KILL_FRAME(1)
 13718                                  .L_lambda_simple_end_0106:	; new closure is in rax
 13719 00009889 803804                  	cmp byte [rax], T_closure
 13720 0000988C 0F85F9E60000            	jne L_error_non_closure
 13721 00009892 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13722 00009895 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13723 00009898 48890425[D70D0000]      	mov qword [free_var_0], rax
 13724 000098A0 48B8-                   	mov rax, sob_void
 13724 000098A2 [0000000000000000] 
 13725                                  
 13726 000098AA 4889C7                  	mov rdi, rax
 13727 000098AD E8D7E90000              	call print_sexpr_if_not_void
 13728                                  	; preparing a non-tail-call
 13729 000098B2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13730 000098B7 E878E70000              	call malloc
 13731 000098BC 50                      	push rax
 13732 000098BD BF00000000              	mov rdi, 8 * 0	; new rib
 13733 000098C2 E86DE70000              	call malloc
 13734 000098C7 50                      	push rax
 13735 000098C8 BF08000000              	mov rdi, 8 * 1	; extended env
 13736 000098CD E862E70000              	call malloc
 13737 000098D2 488B7D10                	mov rdi, ENV
 13738 000098D6 BE00000000              	mov rsi, 0
 13739 000098DB BA01000000              	mov rdx, 1
 13740                                  .L_lambda_simple_env_loop_0109:	; ext_env[i + 1] <-- env[i]
 13741 000098E0 4883FE00                	cmp rsi, 0
 13742 000098E4 7410                    	je .L_lambda_simple_env_end_0109
 13743 000098E6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13744 000098EA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13745 000098EE 48FFC6                  	inc rsi
 13746 000098F1 48FFC2                  	inc rdx
 13747 000098F4 EBEA                    	jmp .L_lambda_simple_env_loop_0109
 13748                                  .L_lambda_simple_env_end_0109:
 13749 000098F6 5B                      	pop rbx
 13750 000098F7 BE00000000              	mov rsi, 0
 13751                                  .L_lambda_simple_params_loop_0109:	; copy params
 13752 000098FC 4883FE00                	cmp rsi, 0
 13753 00009900 740E                    	je .L_lambda_simple_params_end_0109
 13754 00009902 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13755 00009907 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13756 0000990B 48FFC6                  	inc rsi
 13757 0000990E EBEC                    	jmp .L_lambda_simple_params_loop_0109
 13758                                  .L_lambda_simple_params_end_0109:
 13759 00009910 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13760 00009913 4889C3                  	mov rbx, rax
 13761 00009916 58                      	pop rax
 13762 00009917 C60004                  	mov byte [rax], T_closure
 13763 0000991A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13764 0000991E 48C74009[2B990000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0109
 13765 00009926 E998000000              	jmp .L_lambda_simple_end_0109
 13766                                  .L_lambda_simple_code_0109:	; lambda-simple body
 13767 0000992B 48837C241000            	cmp qword [rsp + 8 * 2], 0
 13768 00009931 740B                    	je .L_lambda_simple_arity_check_ok_0109
 13769 00009933 FF742410                	push qword [rsp + 8 * 2]
 13770 00009937 6A00                    	push 0
 13771 00009939 E9AFE60000              	jmp L_error_incorrect_arity_simple
 13772                                  .L_lambda_simple_arity_check_ok_0109:
 13773 0000993E C8000000                	enter 0, 0
 13774                                  	; preparing a tail-call
 13775 00009942 48B8-                   	mov rax, L_constants + 2187
 13775 00009944 [8B08000000000000] 
 13776 0000994C 50                      	push rax
 13777 0000994D 48B8-                   	mov rax, L_constants + 2298
 13777 0000994F [FA08000000000000] 
 13778 00009957 50                      	push rax
 13779 00009958 6A02                    	push 2	; arg count
 13780 0000995A 488B0425[49130000]      	mov rax, qword [free_var_82]	; free var error
 13781 00009962 803805                  	cmp byte [rax], T_undefined
 13782 00009965 0F849CE50000            	je L_error_fvar_undefined
 13783 0000996B 803804                  	cmp byte [rax], T_closure
 13784 0000996E 0F8517E60000            	jne L_error_non_closure
 13785 00009974 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13786 00009977 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13787 0000997A FF7500                  	push qword[rbp]
 13788 0000997D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13789 00009980 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13790 00009984 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13791 00009988 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13792 0000998C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13793 0000998F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13794 00009992 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13795 00009997 4983C103                	add r9, 3 	 ;for getting to the params
 13796 0000999B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13797 0000999F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13798                                  .L_tc_recycle_frame_loop_018c:
 13799 000099A2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13800 000099A5 7410                    	je .L_tc_recycle_frame_done_018c
 13801 000099A7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13802 000099AA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13803 000099AD 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13804 000099B1 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13805 000099B5 EBEB                    	jmp .L_tc_recycle_frame_loop_018c
 13806                                  .L_tc_recycle_frame_done_018c:
 13807 000099B7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13808 000099B8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13809 000099BC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13810 000099BF C9                      	leave
 13811 000099C0 C21000                  	ret AND_KILL_FRAME(0)
 13812                                  .L_lambda_simple_end_0109:	; new closure is in rax
 13813 000099C3 50                      	push rax
 13814 000099C4 6A01                    	push 1	; arg count
 13815 000099C6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13816 000099CB E864E60000              	call malloc
 13817 000099D0 50                      	push rax
 13818 000099D1 BF00000000              	mov rdi, 8 * 0	; new rib
 13819 000099D6 E859E60000              	call malloc
 13820 000099DB 50                      	push rax
 13821 000099DC BF08000000              	mov rdi, 8 * 1	; extended env
 13822 000099E1 E84EE60000              	call malloc
 13823 000099E6 488B7D10                	mov rdi, ENV
 13824 000099EA BE00000000              	mov rsi, 0
 13825 000099EF BA01000000              	mov rdx, 1
 13826                                  .L_lambda_simple_env_loop_010a:	; ext_env[i + 1] <-- env[i]
 13827 000099F4 4883FE00                	cmp rsi, 0
 13828 000099F8 7410                    	je .L_lambda_simple_env_end_010a
 13829 000099FA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13830 000099FE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13831 00009A02 48FFC6                  	inc rsi
 13832 00009A05 48FFC2                  	inc rdx
 13833 00009A08 EBEA                    	jmp .L_lambda_simple_env_loop_010a
 13834                                  .L_lambda_simple_env_end_010a:
 13835 00009A0A 5B                      	pop rbx
 13836 00009A0B BE00000000              	mov rsi, 0
 13837                                  .L_lambda_simple_params_loop_010a:	; copy params
 13838 00009A10 4883FE00                	cmp rsi, 0
 13839 00009A14 740E                    	je .L_lambda_simple_params_end_010a
 13840 00009A16 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13841 00009A1B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13842 00009A1F 48FFC6                  	inc rsi
 13843 00009A22 EBEC                    	jmp .L_lambda_simple_params_loop_010a
 13844                                  .L_lambda_simple_params_end_010a:
 13845 00009A24 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13846 00009A27 4889C3                  	mov rbx, rax
 13847 00009A2A 58                      	pop rax
 13848 00009A2B C60004                  	mov byte [rax], T_closure
 13849 00009A2E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13850 00009A32 48C74009[3F9A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_010a
 13851 00009A3A E99B100000              	jmp .L_lambda_simple_end_010a
 13852                                  .L_lambda_simple_code_010a:	; lambda-simple body
 13853 00009A3F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13854 00009A45 740B                    	je .L_lambda_simple_arity_check_ok_010a
 13855 00009A47 FF742410                	push qword [rsp + 8 * 2]
 13856 00009A4B 6A01                    	push 1
 13857 00009A4D E99BE50000              	jmp L_error_incorrect_arity_simple
 13858                                  .L_lambda_simple_arity_check_ok_010a:
 13859 00009A52 C8000000                	enter 0, 0
 13860                                  	; preparing a tail-call
 13861 00009A56 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13862 00009A5B E8D4E50000              	call malloc
 13863 00009A60 50                      	push rax
 13864 00009A61 BF08000000              	mov rdi, 8 * 1	; new rib
 13865 00009A66 E8C9E50000              	call malloc
 13866 00009A6B 50                      	push rax
 13867 00009A6C BF10000000              	mov rdi, 8 * 2	; extended env
 13868 00009A71 E8BEE50000              	call malloc
 13869 00009A76 488B7D10                	mov rdi, ENV
 13870 00009A7A BE00000000              	mov rsi, 0
 13871 00009A7F BA01000000              	mov rdx, 1
 13872                                  .L_lambda_simple_env_loop_010b:	; ext_env[i + 1] <-- env[i]
 13873 00009A84 4883FE01                	cmp rsi, 1
 13874 00009A88 7410                    	je .L_lambda_simple_env_end_010b
 13875 00009A8A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13876 00009A8E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13877 00009A92 48FFC6                  	inc rsi
 13878 00009A95 48FFC2                  	inc rdx
 13879 00009A98 EBEA                    	jmp .L_lambda_simple_env_loop_010b
 13880                                  .L_lambda_simple_env_end_010b:
 13881 00009A9A 5B                      	pop rbx
 13882 00009A9B BE00000000              	mov rsi, 0
 13883                                  .L_lambda_simple_params_loop_010b:	; copy params
 13884 00009AA0 4883FE01                	cmp rsi, 1
 13885 00009AA4 740E                    	je .L_lambda_simple_params_end_010b
 13886 00009AA6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13887 00009AAB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13888 00009AAF 48FFC6                  	inc rsi
 13889 00009AB2 EBEC                    	jmp .L_lambda_simple_params_loop_010b
 13890                                  .L_lambda_simple_params_end_010b:
 13891 00009AB4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13892 00009AB7 4889C3                  	mov rbx, rax
 13893 00009ABA 58                      	pop rax
 13894 00009ABB C60004                  	mov byte [rax], T_closure
 13895 00009ABE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13896 00009AC2 48C74009[CF9A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_010b
 13897 00009ACA E9EE080000              	jmp .L_lambda_simple_end_010b
 13898                                  .L_lambda_simple_code_010b:	; lambda-simple body
 13899 00009ACF 48837C241002            	cmp qword [rsp + 8 * 2], 2
 13900 00009AD5 740B                    	je .L_lambda_simple_arity_check_ok_010b
 13901 00009AD7 FF742410                	push qword [rsp + 8 * 2]
 13902 00009ADB 6A02                    	push 2
 13903 00009ADD E90BE50000              	jmp L_error_incorrect_arity_simple
 13904                                  .L_lambda_simple_arity_check_ok_010b:
 13905 00009AE2 C8000000                	enter 0, 0
 13906                                  	; preparing a non-tail-call
 13907 00009AE6 488B4520                	mov rax, PARAM(0)	; param a
 13908 00009AEA 50                      	push rax
 13909 00009AEB 6A01                    	push 1	; arg count
 13910 00009AED 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 13911 00009AF5 803805                  	cmp byte [rax], T_undefined
 13912 00009AF8 0F8409E40000            	je L_error_fvar_undefined
 13913 00009AFE 803804                  	cmp byte [rax], T_closure
 13914 00009B01 0F8584E40000            	jne L_error_non_closure
 13915 00009B07 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13916 00009B0A FF5009                  	call SOB_CLOSURE_CODE(rax)
 13917 00009B0D 483D[02000000]          	cmp rax, sob_boolean_false
 13918 00009B13 0F849F020000            	je .L_if_else_00de
 13919                                  	; preparing a non-tail-call
 13920 00009B19 488B4528                	mov rax, PARAM(1)	; param b
 13921 00009B1D 50                      	push rax
 13922 00009B1E 6A01                    	push 1	; arg count
 13923 00009B20 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 13924 00009B28 803805                  	cmp byte [rax], T_undefined
 13925 00009B2B 0F84D6E30000            	je L_error_fvar_undefined
 13926 00009B31 803804                  	cmp byte [rax], T_closure
 13927 00009B34 0F8551E40000            	jne L_error_non_closure
 13928 00009B3A FF7001                  	push SOB_CLOSURE_ENV(rax)
 13929 00009B3D FF5009                  	call SOB_CLOSURE_CODE(rax)
 13930 00009B40 483D[02000000]          	cmp rax, sob_boolean_false
 13931 00009B46 7476                    	je .L_if_else_00d5
 13932                                  	; preparing a tail-call
 13933 00009B48 488B4528                	mov rax, PARAM(1)	; param b
 13934 00009B4C 50                      	push rax
 13935 00009B4D 488B4520                	mov rax, PARAM(0)	; param a
 13936 00009B51 50                      	push rax
 13937 00009B52 6A02                    	push 2	; arg count
 13938 00009B54 488B0425[D60E0000]      	mov rax, qword [free_var_15]	; free var __bin-div-zz
 13939 00009B5C 803805                  	cmp byte [rax], T_undefined
 13940 00009B5F 0F84A2E30000            	je L_error_fvar_undefined
 13941 00009B65 803804                  	cmp byte [rax], T_closure
 13942 00009B68 0F851DE40000            	jne L_error_non_closure
 13943 00009B6E FF7001                  	push SOB_CLOSURE_ENV(rax)
 13944 00009B71 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13945 00009B74 FF7500                  	push qword[rbp]
 13946 00009B77 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13947 00009B7A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13948 00009B7E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13949 00009B82 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13950 00009B86 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13951 00009B89 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13952 00009B8C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13953 00009B91 4983C103                	add r9, 3 	 ;for getting to the params
 13954 00009B95 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13955 00009B99 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13956                                  .L_tc_recycle_frame_loop_018d:
 13957 00009B9C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13958 00009B9F 7410                    	je .L_tc_recycle_frame_done_018d
 13959 00009BA1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13960 00009BA4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13961 00009BA7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13962 00009BAB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13963 00009BAF EBEB                    	jmp .L_tc_recycle_frame_loop_018d
 13964                                  .L_tc_recycle_frame_done_018d:
 13965 00009BB1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13966 00009BB2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13967 00009BB6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13968 00009BB9 E9F5010000              	jmp .L_if_end_00d5
 13969                                  .L_if_else_00d5:
 13970                                  	; preparing a non-tail-call
 13971 00009BBE 488B4528                	mov rax, PARAM(1)	; param b
 13972 00009BC2 50                      	push rax
 13973 00009BC3 6A01                    	push 1	; arg count
 13974 00009BC5 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 13975 00009BCD 803805                  	cmp byte [rax], T_undefined
 13976 00009BD0 0F8431E30000            	je L_error_fvar_undefined
 13977 00009BD6 803804                  	cmp byte [rax], T_closure
 13978 00009BD9 0F85ACE30000            	jne L_error_non_closure
 13979 00009BDF FF7001                  	push SOB_CLOSURE_ENV(rax)
 13980 00009BE2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13981 00009BE5 483D[02000000]          	cmp rax, sob_boolean_false
 13982 00009BEB 0F8499000000            	je .L_if_else_00d4
 13983                                  	; preparing a tail-call
 13984 00009BF1 488B4528                	mov rax, PARAM(1)	; param b
 13985 00009BF5 50                      	push rax
 13986                                  	; preparing a non-tail-call
 13987 00009BF6 488B4520                	mov rax, PARAM(0)	; param a
 13988 00009BFA 50                      	push rax
 13989 00009BFB 6A01                    	push 1	; arg count
 13990 00009BFD 488B0425[C40F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 13991 00009C05 803805                  	cmp byte [rax], T_undefined
 13992 00009C08 0F84F9E20000            	je L_error_fvar_undefined
 13993 00009C0E 803804                  	cmp byte [rax], T_closure
 13994 00009C11 0F8574E30000            	jne L_error_non_closure
 13995 00009C17 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13996 00009C1A FF5009                  	call SOB_CLOSURE_CODE(rax)
 13997 00009C1D 50                      	push rax
 13998 00009C1E 6A02                    	push 2	; arg count
 13999 00009C20 488B0425[B40E0000]      	mov rax, qword [free_var_13]	; free var __bin-div-qq
 14000 00009C28 803805                  	cmp byte [rax], T_undefined
 14001 00009C2B 0F84D6E20000            	je L_error_fvar_undefined
 14002 00009C31 803804                  	cmp byte [rax], T_closure
 14003 00009C34 0F8551E30000            	jne L_error_non_closure
 14004 00009C3A FF7001                  	push SOB_CLOSURE_ENV(rax)
 14005 00009C3D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14006 00009C40 FF7500                  	push qword[rbp]
 14007 00009C43 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14008 00009C46 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14009 00009C4A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14010 00009C4E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14011 00009C52 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14012 00009C55 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14013 00009C58 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14014 00009C5D 4983C103                	add r9, 3 	 ;for getting to the params
 14015 00009C61 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14016 00009C65 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14017                                  .L_tc_recycle_frame_loop_018e:
 14018 00009C68 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14019 00009C6B 7410                    	je .L_tc_recycle_frame_done_018e
 14020 00009C6D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14021 00009C70 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14022 00009C73 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14023 00009C77 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14024 00009C7B EBEB                    	jmp .L_tc_recycle_frame_loop_018e
 14025                                  .L_tc_recycle_frame_done_018e:
 14026 00009C7D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14027 00009C7E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14028 00009C82 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14029 00009C85 E929010000              	jmp .L_if_end_00d4
 14030                                  .L_if_else_00d4:
 14031                                  	; preparing a non-tail-call
 14032 00009C8A 488B4528                	mov rax, PARAM(1)	; param b
 14033 00009C8E 50                      	push rax
 14034 00009C8F 6A01                    	push 1	; arg count
 14035 00009C91 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 14036 00009C99 803805                  	cmp byte [rax], T_undefined
 14037 00009C9C 0F8465E20000            	je L_error_fvar_undefined
 14038 00009CA2 803804                  	cmp byte [rax], T_closure
 14039 00009CA5 0F85E0E20000            	jne L_error_non_closure
 14040 00009CAB FF7001                  	push SOB_CLOSURE_ENV(rax)
 14041 00009CAE FF5009                  	call SOB_CLOSURE_CODE(rax)
 14042 00009CB1 483D[02000000]          	cmp rax, sob_boolean_false
 14043 00009CB7 0F8496000000            	je .L_if_else_00d3
 14044                                  	; preparing a tail-call
 14045 00009CBD 488B4528                	mov rax, PARAM(1)	; param b
 14046 00009CC1 50                      	push rax
 14047                                  	; preparing a non-tail-call
 14048 00009CC2 488B4520                	mov rax, PARAM(0)	; param a
 14049 00009CC6 50                      	push rax
 14050 00009CC7 6A01                    	push 1	; arg count
 14051 00009CC9 488B0425[D1130000]      	mov rax, qword [free_var_90]	; free var integer->real
 14052 00009CD1 803805                  	cmp byte [rax], T_undefined
 14053 00009CD4 0F842DE20000            	je L_error_fvar_undefined
 14054 00009CDA 803804                  	cmp byte [rax], T_closure
 14055 00009CDD 0F85A8E20000            	jne L_error_non_closure
 14056 00009CE3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14057 00009CE6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14058 00009CE9 50                      	push rax
 14059 00009CEA 6A02                    	push 2	; arg count
 14060 00009CEC 488B0425[C50E0000]      	mov rax, qword [free_var_14]	; free var __bin-div-rr
 14061 00009CF4 803805                  	cmp byte [rax], T_undefined
 14062 00009CF7 0F840AE20000            	je L_error_fvar_undefined
 14063 00009CFD 803804                  	cmp byte [rax], T_closure
 14064 00009D00 0F8585E20000            	jne L_error_non_closure
 14065 00009D06 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14066 00009D09 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14067 00009D0C FF7500                  	push qword[rbp]
 14068 00009D0F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14069 00009D12 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14070 00009D16 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14071 00009D1A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14072 00009D1E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14073 00009D21 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14074 00009D24 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14075 00009D29 4983C103                	add r9, 3 	 ;for getting to the params
 14076 00009D2D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14077 00009D31 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14078                                  .L_tc_recycle_frame_loop_018f:
 14079 00009D34 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14080 00009D37 7410                    	je .L_tc_recycle_frame_done_018f
 14081 00009D39 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14082 00009D3C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14083 00009D3F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14084 00009D43 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14085 00009D47 EBEB                    	jmp .L_tc_recycle_frame_loop_018f
 14086                                  .L_tc_recycle_frame_done_018f:
 14087 00009D49 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14088 00009D4A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14089 00009D4E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14090 00009D51 EB60                    	jmp .L_if_end_00d3
 14091                                  .L_if_else_00d3:
 14092                                  	; preparing a tail-call
 14093 00009D53 6A00                    	push 0	; arg count
 14094 00009D55 488B4510                	mov rax, ENV
 14095 00009D59 488B00                  	mov rax, qword [rax + 8 * 0]
 14096 00009D5C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 14097 00009D5F 803804                  	cmp byte [rax], T_closure
 14098 00009D62 0F8523E20000            	jne L_error_non_closure
 14099 00009D68 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14100 00009D6B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14101 00009D6E FF7500                  	push qword[rbp]
 14102 00009D71 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14103 00009D74 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14104 00009D78 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14105 00009D7C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14106 00009D80 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14107 00009D83 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14108 00009D86 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14109 00009D8B 4983C103                	add r9, 3 	 ;for getting to the params
 14110 00009D8F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14111 00009D93 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14112                                  .L_tc_recycle_frame_loop_0190:
 14113 00009D96 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14114 00009D99 7410                    	je .L_tc_recycle_frame_done_0190
 14115 00009D9B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14116 00009D9E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14117 00009DA1 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14118 00009DA5 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14119 00009DA9 EBEB                    	jmp .L_tc_recycle_frame_loop_0190
 14120                                  .L_tc_recycle_frame_done_0190:
 14121 00009DAB 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14122 00009DAC 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14123 00009DB0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14124                                  .L_if_end_00d3:
 14125                                  .L_if_end_00d4:
 14126                                  .L_if_end_00d5:
 14127 00009DB3 E901060000              	jmp .L_if_end_00de
 14128                                  .L_if_else_00de:
 14129                                  	; preparing a non-tail-call
 14130 00009DB8 488B4520                	mov rax, PARAM(0)	; param a
 14131 00009DBC 50                      	push rax
 14132 00009DBD 6A01                    	push 1	; arg count
 14133 00009DBF 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 14134 00009DC7 803805                  	cmp byte [rax], T_undefined
 14135 00009DCA 0F8437E10000            	je L_error_fvar_undefined
 14136 00009DD0 803804                  	cmp byte [rax], T_closure
 14137 00009DD3 0F85B2E10000            	jne L_error_non_closure
 14138 00009DD9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14139 00009DDC FF5009                  	call SOB_CLOSURE_CODE(rax)
 14140 00009DDF 483D[02000000]          	cmp rax, sob_boolean_false
 14141 00009DE5 0F849F020000            	je .L_if_else_00dd
 14142                                  	; preparing a non-tail-call
 14143 00009DEB 488B4528                	mov rax, PARAM(1)	; param b
 14144 00009DEF 50                      	push rax
 14145 00009DF0 6A01                    	push 1	; arg count
 14146 00009DF2 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 14147 00009DFA 803805                  	cmp byte [rax], T_undefined
 14148 00009DFD 0F8404E10000            	je L_error_fvar_undefined
 14149 00009E03 803804                  	cmp byte [rax], T_closure
 14150 00009E06 0F857FE10000            	jne L_error_non_closure
 14151 00009E0C FF7001                  	push SOB_CLOSURE_ENV(rax)
 14152 00009E0F FF5009                  	call SOB_CLOSURE_CODE(rax)
 14153 00009E12 483D[02000000]          	cmp rax, sob_boolean_false
 14154 00009E18 0F8499000000            	je .L_if_else_00d8
 14155                                  	; preparing a tail-call
 14156                                  	; preparing a non-tail-call
 14157 00009E1E 488B4528                	mov rax, PARAM(1)	; param b
 14158 00009E22 50                      	push rax
 14159 00009E23 6A01                    	push 1	; arg count
 14160 00009E25 488B0425[C40F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 14161 00009E2D 803805                  	cmp byte [rax], T_undefined
 14162 00009E30 0F84D1E00000            	je L_error_fvar_undefined
 14163 00009E36 803804                  	cmp byte [rax], T_closure
 14164 00009E39 0F854CE10000            	jne L_error_non_closure
 14165 00009E3F FF7001                  	push SOB_CLOSURE_ENV(rax)
 14166 00009E42 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14167 00009E45 50                      	push rax
 14168 00009E46 488B4520                	mov rax, PARAM(0)	; param a
 14169 00009E4A 50                      	push rax
 14170 00009E4B 6A02                    	push 2	; arg count
 14171 00009E4D 488B0425[B40E0000]      	mov rax, qword [free_var_13]	; free var __bin-div-qq
 14172 00009E55 803805                  	cmp byte [rax], T_undefined
 14173 00009E58 0F84A9E00000            	je L_error_fvar_undefined
 14174 00009E5E 803804                  	cmp byte [rax], T_closure
 14175 00009E61 0F8524E10000            	jne L_error_non_closure
 14176 00009E67 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14177 00009E6A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14178 00009E6D FF7500                  	push qword[rbp]
 14179 00009E70 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14180 00009E73 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14181 00009E77 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14182 00009E7B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14183 00009E7F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14184 00009E82 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14185 00009E85 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14186 00009E8A 4983C103                	add r9, 3 	 ;for getting to the params
 14187 00009E8E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14188 00009E92 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14189                                  .L_tc_recycle_frame_loop_0191:
 14190 00009E95 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14191 00009E98 7410                    	je .L_tc_recycle_frame_done_0191
 14192 00009E9A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14193 00009E9D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14194 00009EA0 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14195 00009EA4 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14196 00009EA8 EBEB                    	jmp .L_tc_recycle_frame_loop_0191
 14197                                  .L_tc_recycle_frame_done_0191:
 14198 00009EAA 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14199 00009EAB 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14200 00009EAF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14201 00009EB2 E9CE010000              	jmp .L_if_end_00d8
 14202                                  .L_if_else_00d8:
 14203                                  	; preparing a non-tail-call
 14204 00009EB7 488B4528                	mov rax, PARAM(1)	; param b
 14205 00009EBB 50                      	push rax
 14206 00009EBC 6A01                    	push 1	; arg count
 14207 00009EBE 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 14208 00009EC6 803805                  	cmp byte [rax], T_undefined
 14209 00009EC9 0F8438E00000            	je L_error_fvar_undefined
 14210 00009ECF 803804                  	cmp byte [rax], T_closure
 14211 00009ED2 0F85B3E00000            	jne L_error_non_closure
 14212 00009ED8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14213 00009EDB FF5009                  	call SOB_CLOSURE_CODE(rax)
 14214 00009EDE 483D[02000000]          	cmp rax, sob_boolean_false
 14215 00009EE4 7476                    	je .L_if_else_00d7
 14216                                  	; preparing a tail-call
 14217 00009EE6 488B4528                	mov rax, PARAM(1)	; param b
 14218 00009EEA 50                      	push rax
 14219 00009EEB 488B4520                	mov rax, PARAM(0)	; param a
 14220 00009EEF 50                      	push rax
 14221 00009EF0 6A02                    	push 2	; arg count
 14222 00009EF2 488B0425[B40E0000]      	mov rax, qword [free_var_13]	; free var __bin-div-qq
 14223 00009EFA 803805                  	cmp byte [rax], T_undefined
 14224 00009EFD 0F8404E00000            	je L_error_fvar_undefined
 14225 00009F03 803804                  	cmp byte [rax], T_closure
 14226 00009F06 0F857FE00000            	jne L_error_non_closure
 14227 00009F0C FF7001                  	push SOB_CLOSURE_ENV(rax)
 14228 00009F0F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14229 00009F12 FF7500                  	push qword[rbp]
 14230 00009F15 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14231 00009F18 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14232 00009F1C 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14233 00009F20 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14234 00009F24 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14235 00009F27 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14236 00009F2A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14237 00009F2F 4983C103                	add r9, 3 	 ;for getting to the params
 14238 00009F33 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14239 00009F37 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14240                                  .L_tc_recycle_frame_loop_0192:
 14241 00009F3A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14242 00009F3D 7410                    	je .L_tc_recycle_frame_done_0192
 14243 00009F3F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14244 00009F42 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14245 00009F45 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14246 00009F49 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14247 00009F4D EBEB                    	jmp .L_tc_recycle_frame_loop_0192
 14248                                  .L_tc_recycle_frame_done_0192:
 14249 00009F4F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14250 00009F50 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14251 00009F54 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14252 00009F57 E929010000              	jmp .L_if_end_00d7
 14253                                  .L_if_else_00d7:
 14254                                  	; preparing a non-tail-call
 14255 00009F5C 488B4528                	mov rax, PARAM(1)	; param b
 14256 00009F60 50                      	push rax
 14257 00009F61 6A01                    	push 1	; arg count
 14258 00009F63 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 14259 00009F6B 803805                  	cmp byte [rax], T_undefined
 14260 00009F6E 0F8493DF0000            	je L_error_fvar_undefined
 14261 00009F74 803804                  	cmp byte [rax], T_closure
 14262 00009F77 0F850EE00000            	jne L_error_non_closure
 14263 00009F7D FF7001                  	push SOB_CLOSURE_ENV(rax)
 14264 00009F80 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14265 00009F83 483D[02000000]          	cmp rax, sob_boolean_false
 14266 00009F89 0F8496000000            	je .L_if_else_00d6
 14267                                  	; preparing a tail-call
 14268 00009F8F 488B4528                	mov rax, PARAM(1)	; param b
 14269 00009F93 50                      	push rax
 14270                                  	; preparing a non-tail-call
 14271 00009F94 488B4520                	mov rax, PARAM(0)	; param a
 14272 00009F98 50                      	push rax
 14273 00009F99 6A01                    	push 1	; arg count
 14274 00009F9B 488B0425[9E130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 14275 00009FA3 803805                  	cmp byte [rax], T_undefined
 14276 00009FA6 0F845BDF0000            	je L_error_fvar_undefined
 14277 00009FAC 803804                  	cmp byte [rax], T_closure
 14278 00009FAF 0F85D6DF0000            	jne L_error_non_closure
 14279 00009FB5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14280 00009FB8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14281 00009FBB 50                      	push rax
 14282 00009FBC 6A02                    	push 2	; arg count
 14283 00009FBE 488B0425[C50E0000]      	mov rax, qword [free_var_14]	; free var __bin-div-rr
 14284 00009FC6 803805                  	cmp byte [rax], T_undefined
 14285 00009FC9 0F8438DF0000            	je L_error_fvar_undefined
 14286 00009FCF 803804                  	cmp byte [rax], T_closure
 14287 00009FD2 0F85B3DF0000            	jne L_error_non_closure
 14288 00009FD8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14289 00009FDB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14290 00009FDE FF7500                  	push qword[rbp]
 14291 00009FE1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14292 00009FE4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14293 00009FE8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14294 00009FEC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14295 00009FF0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14296 00009FF3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14297 00009FF6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14298 00009FFB 4983C103                	add r9, 3 	 ;for getting to the params
 14299 00009FFF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14300 0000A003 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14301                                  .L_tc_recycle_frame_loop_0193:
 14302 0000A006 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14303 0000A009 7410                    	je .L_tc_recycle_frame_done_0193
 14304 0000A00B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14305 0000A00E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14306 0000A011 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14307 0000A015 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14308 0000A019 EBEB                    	jmp .L_tc_recycle_frame_loop_0193
 14309                                  .L_tc_recycle_frame_done_0193:
 14310 0000A01B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14311 0000A01C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14312 0000A020 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14313 0000A023 EB60                    	jmp .L_if_end_00d6
 14314                                  .L_if_else_00d6:
 14315                                  	; preparing a tail-call
 14316 0000A025 6A00                    	push 0	; arg count
 14317 0000A027 488B4510                	mov rax, ENV
 14318 0000A02B 488B00                  	mov rax, qword [rax + 8 * 0]
 14319 0000A02E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 14320 0000A031 803804                  	cmp byte [rax], T_closure
 14321 0000A034 0F8551DF0000            	jne L_error_non_closure
 14322 0000A03A FF7001                  	push SOB_CLOSURE_ENV(rax)
 14323 0000A03D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14324 0000A040 FF7500                  	push qword[rbp]
 14325 0000A043 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14326 0000A046 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14327 0000A04A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14328 0000A04E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14329 0000A052 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14330 0000A055 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14331 0000A058 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14332 0000A05D 4983C103                	add r9, 3 	 ;for getting to the params
 14333 0000A061 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14334 0000A065 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14335                                  .L_tc_recycle_frame_loop_0194:
 14336 0000A068 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14337 0000A06B 7410                    	je .L_tc_recycle_frame_done_0194
 14338 0000A06D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14339 0000A070 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14340 0000A073 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14341 0000A077 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14342 0000A07B EBEB                    	jmp .L_tc_recycle_frame_loop_0194
 14343                                  .L_tc_recycle_frame_done_0194:
 14344 0000A07D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14345 0000A07E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14346 0000A082 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14347                                  .L_if_end_00d6:
 14348                                  .L_if_end_00d7:
 14349                                  .L_if_end_00d8:
 14350 0000A085 E92F030000              	jmp .L_if_end_00dd
 14351                                  .L_if_else_00dd:
 14352                                  	; preparing a non-tail-call
 14353 0000A08A 488B4520                	mov rax, PARAM(0)	; param a
 14354 0000A08E 50                      	push rax
 14355 0000A08F 6A01                    	push 1	; arg count
 14356 0000A091 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 14357 0000A099 803805                  	cmp byte [rax], T_undefined
 14358 0000A09C 0F8465DE0000            	je L_error_fvar_undefined
 14359 0000A0A2 803804                  	cmp byte [rax], T_closure
 14360 0000A0A5 0F85E0DE0000            	jne L_error_non_closure
 14361 0000A0AB FF7001                  	push SOB_CLOSURE_ENV(rax)
 14362 0000A0AE FF5009                  	call SOB_CLOSURE_CODE(rax)
 14363 0000A0B1 483D[02000000]          	cmp rax, sob_boolean_false
 14364 0000A0B7 0F849C020000            	je .L_if_else_00dc
 14365                                  	; preparing a non-tail-call
 14366 0000A0BD 488B4528                	mov rax, PARAM(1)	; param b
 14367 0000A0C1 50                      	push rax
 14368 0000A0C2 6A01                    	push 1	; arg count
 14369 0000A0C4 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 14370 0000A0CC 803805                  	cmp byte [rax], T_undefined
 14371 0000A0CF 0F8432DE0000            	je L_error_fvar_undefined
 14372 0000A0D5 803804                  	cmp byte [rax], T_closure
 14373 0000A0D8 0F85ADDE0000            	jne L_error_non_closure
 14374 0000A0DE FF7001                  	push SOB_CLOSURE_ENV(rax)
 14375 0000A0E1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14376 0000A0E4 483D[02000000]          	cmp rax, sob_boolean_false
 14377 0000A0EA 0F8499000000            	je .L_if_else_00db
 14378                                  	; preparing a tail-call
 14379                                  	; preparing a non-tail-call
 14380 0000A0F0 488B4528                	mov rax, PARAM(1)	; param b
 14381 0000A0F4 50                      	push rax
 14382 0000A0F5 6A01                    	push 1	; arg count
 14383 0000A0F7 488B0425[D1130000]      	mov rax, qword [free_var_90]	; free var integer->real
 14384 0000A0FF 803805                  	cmp byte [rax], T_undefined
 14385 0000A102 0F84FFDD0000            	je L_error_fvar_undefined
 14386 0000A108 803804                  	cmp byte [rax], T_closure
 14387 0000A10B 0F857ADE0000            	jne L_error_non_closure
 14388 0000A111 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14389 0000A114 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14390 0000A117 50                      	push rax
 14391 0000A118 488B4520                	mov rax, PARAM(0)	; param a
 14392 0000A11C 50                      	push rax
 14393 0000A11D 6A02                    	push 2	; arg count
 14394 0000A11F 488B0425[C50E0000]      	mov rax, qword [free_var_14]	; free var __bin-div-rr
 14395 0000A127 803805                  	cmp byte [rax], T_undefined
 14396 0000A12A 0F84D7DD0000            	je L_error_fvar_undefined
 14397 0000A130 803804                  	cmp byte [rax], T_closure
 14398 0000A133 0F8552DE0000            	jne L_error_non_closure
 14399 0000A139 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14400 0000A13C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14401 0000A13F FF7500                  	push qword[rbp]
 14402 0000A142 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14403 0000A145 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14404 0000A149 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14405 0000A14D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14406 0000A151 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14407 0000A154 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14408 0000A157 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14409 0000A15C 4983C103                	add r9, 3 	 ;for getting to the params
 14410 0000A160 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14411 0000A164 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14412                                  .L_tc_recycle_frame_loop_0195:
 14413 0000A167 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14414 0000A16A 7410                    	je .L_tc_recycle_frame_done_0195
 14415 0000A16C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14416 0000A16F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14417 0000A172 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14418 0000A176 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14419 0000A17A EBEB                    	jmp .L_tc_recycle_frame_loop_0195
 14420                                  .L_tc_recycle_frame_done_0195:
 14421 0000A17C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14422 0000A17D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14423 0000A181 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14424 0000A184 E9CE010000              	jmp .L_if_end_00db
 14425                                  .L_if_else_00db:
 14426                                  	; preparing a non-tail-call
 14427 0000A189 488B4528                	mov rax, PARAM(1)	; param b
 14428 0000A18D 50                      	push rax
 14429 0000A18E 6A01                    	push 1	; arg count
 14430 0000A190 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 14431 0000A198 803805                  	cmp byte [rax], T_undefined
 14432 0000A19B 0F8466DD0000            	je L_error_fvar_undefined
 14433 0000A1A1 803804                  	cmp byte [rax], T_closure
 14434 0000A1A4 0F85E1DD0000            	jne L_error_non_closure
 14435 0000A1AA FF7001                  	push SOB_CLOSURE_ENV(rax)
 14436 0000A1AD FF5009                  	call SOB_CLOSURE_CODE(rax)
 14437 0000A1B0 483D[02000000]          	cmp rax, sob_boolean_false
 14438 0000A1B6 0F8499000000            	je .L_if_else_00da
 14439                                  	; preparing a tail-call
 14440                                  	; preparing a non-tail-call
 14441 0000A1BC 488B4528                	mov rax, PARAM(1)	; param b
 14442 0000A1C0 50                      	push rax
 14443 0000A1C1 6A01                    	push 1	; arg count
 14444 0000A1C3 488B0425[9E130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 14445 0000A1CB 803805                  	cmp byte [rax], T_undefined
 14446 0000A1CE 0F8433DD0000            	je L_error_fvar_undefined
 14447 0000A1D4 803804                  	cmp byte [rax], T_closure
 14448 0000A1D7 0F85AEDD0000            	jne L_error_non_closure
 14449 0000A1DD FF7001                  	push SOB_CLOSURE_ENV(rax)
 14450 0000A1E0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14451 0000A1E3 50                      	push rax
 14452 0000A1E4 488B4520                	mov rax, PARAM(0)	; param a
 14453 0000A1E8 50                      	push rax
 14454 0000A1E9 6A02                    	push 2	; arg count
 14455 0000A1EB 488B0425[C50E0000]      	mov rax, qword [free_var_14]	; free var __bin-div-rr
 14456 0000A1F3 803805                  	cmp byte [rax], T_undefined
 14457 0000A1F6 0F840BDD0000            	je L_error_fvar_undefined
 14458 0000A1FC 803804                  	cmp byte [rax], T_closure
 14459 0000A1FF 0F8586DD0000            	jne L_error_non_closure
 14460 0000A205 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14461 0000A208 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14462 0000A20B FF7500                  	push qword[rbp]
 14463 0000A20E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14464 0000A211 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14465 0000A215 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14466 0000A219 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14467 0000A21D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14468 0000A220 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14469 0000A223 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14470 0000A228 4983C103                	add r9, 3 	 ;for getting to the params
 14471 0000A22C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14472 0000A230 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14473                                  .L_tc_recycle_frame_loop_0196:
 14474 0000A233 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14475 0000A236 7410                    	je .L_tc_recycle_frame_done_0196
 14476 0000A238 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14477 0000A23B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14478 0000A23E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14479 0000A242 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14480 0000A246 EBEB                    	jmp .L_tc_recycle_frame_loop_0196
 14481                                  .L_tc_recycle_frame_done_0196:
 14482 0000A248 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14483 0000A249 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14484 0000A24D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14485 0000A250 E902010000              	jmp .L_if_end_00da
 14486                                  .L_if_else_00da:
 14487                                  	; preparing a non-tail-call
 14488 0000A255 488B4528                	mov rax, PARAM(1)	; param b
 14489 0000A259 50                      	push rax
 14490 0000A25A 6A01                    	push 1	; arg count
 14491 0000A25C 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 14492 0000A264 803805                  	cmp byte [rax], T_undefined
 14493 0000A267 0F849ADC0000            	je L_error_fvar_undefined
 14494 0000A26D 803804                  	cmp byte [rax], T_closure
 14495 0000A270 0F8515DD0000            	jne L_error_non_closure
 14496 0000A276 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14497 0000A279 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14498 0000A27C 483D[02000000]          	cmp rax, sob_boolean_false
 14499 0000A282 7473                    	je .L_if_else_00d9
 14500                                  	; preparing a tail-call
 14501 0000A284 488B4528                	mov rax, PARAM(1)	; param b
 14502 0000A288 50                      	push rax
 14503 0000A289 488B4520                	mov rax, PARAM(0)	; param a
 14504 0000A28D 50                      	push rax
 14505 0000A28E 6A02                    	push 2	; arg count
 14506 0000A290 488B0425[C50E0000]      	mov rax, qword [free_var_14]	; free var __bin-div-rr
 14507 0000A298 803805                  	cmp byte [rax], T_undefined
 14508 0000A29B 0F8466DC0000            	je L_error_fvar_undefined
 14509 0000A2A1 803804                  	cmp byte [rax], T_closure
 14510 0000A2A4 0F85E1DC0000            	jne L_error_non_closure
 14511 0000A2AA FF7001                  	push SOB_CLOSURE_ENV(rax)
 14512 0000A2AD FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14513 0000A2B0 FF7500                  	push qword[rbp]
 14514 0000A2B3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14515 0000A2B6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14516 0000A2BA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14517 0000A2BE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14518 0000A2C2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14519 0000A2C5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14520 0000A2C8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14521 0000A2CD 4983C103                	add r9, 3 	 ;for getting to the params
 14522 0000A2D1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14523 0000A2D5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14524                                  .L_tc_recycle_frame_loop_0197:
 14525 0000A2D8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14526 0000A2DB 7410                    	je .L_tc_recycle_frame_done_0197
 14527 0000A2DD 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14528 0000A2E0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14529 0000A2E3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14530 0000A2E7 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14531 0000A2EB EBEB                    	jmp .L_tc_recycle_frame_loop_0197
 14532                                  .L_tc_recycle_frame_done_0197:
 14533 0000A2ED 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14534 0000A2EE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14535 0000A2F2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14536 0000A2F5 EB60                    	jmp .L_if_end_00d9
 14537                                  .L_if_else_00d9:
 14538                                  	; preparing a tail-call
 14539 0000A2F7 6A00                    	push 0	; arg count
 14540 0000A2F9 488B4510                	mov rax, ENV
 14541 0000A2FD 488B00                  	mov rax, qword [rax + 8 * 0]
 14542 0000A300 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 14543 0000A303 803804                  	cmp byte [rax], T_closure
 14544 0000A306 0F857FDC0000            	jne L_error_non_closure
 14545 0000A30C FF7001                  	push SOB_CLOSURE_ENV(rax)
 14546 0000A30F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14547 0000A312 FF7500                  	push qword[rbp]
 14548 0000A315 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14549 0000A318 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14550 0000A31C 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14551 0000A320 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14552 0000A324 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14553 0000A327 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14554 0000A32A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14555 0000A32F 4983C103                	add r9, 3 	 ;for getting to the params
 14556 0000A333 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14557 0000A337 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14558                                  .L_tc_recycle_frame_loop_0198:
 14559 0000A33A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14560 0000A33D 7410                    	je .L_tc_recycle_frame_done_0198
 14561 0000A33F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14562 0000A342 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14563 0000A345 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14564 0000A349 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14565 0000A34D EBEB                    	jmp .L_tc_recycle_frame_loop_0198
 14566                                  .L_tc_recycle_frame_done_0198:
 14567 0000A34F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14568 0000A350 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14569 0000A354 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14570                                  .L_if_end_00d9:
 14571                                  .L_if_end_00da:
 14572                                  .L_if_end_00db:
 14573 0000A357 EB60                    	jmp .L_if_end_00dc
 14574                                  .L_if_else_00dc:
 14575                                  	; preparing a tail-call
 14576 0000A359 6A00                    	push 0	; arg count
 14577 0000A35B 488B4510                	mov rax, ENV
 14578 0000A35F 488B00                  	mov rax, qword [rax + 8 * 0]
 14579 0000A362 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 14580 0000A365 803804                  	cmp byte [rax], T_closure
 14581 0000A368 0F851DDC0000            	jne L_error_non_closure
 14582 0000A36E FF7001                  	push SOB_CLOSURE_ENV(rax)
 14583 0000A371 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14584 0000A374 FF7500                  	push qword[rbp]
 14585 0000A377 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14586 0000A37A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14587 0000A37E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14588 0000A382 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14589 0000A386 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14590 0000A389 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14591 0000A38C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14592 0000A391 4983C103                	add r9, 3 	 ;for getting to the params
 14593 0000A395 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14594 0000A399 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14595                                  .L_tc_recycle_frame_loop_0199:
 14596 0000A39C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14597 0000A39F 7410                    	je .L_tc_recycle_frame_done_0199
 14598 0000A3A1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14599 0000A3A4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14600 0000A3A7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14601 0000A3AB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14602 0000A3AF EBEB                    	jmp .L_tc_recycle_frame_loop_0199
 14603                                  .L_tc_recycle_frame_done_0199:
 14604 0000A3B1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14605 0000A3B2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14606 0000A3B6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14607                                  .L_if_end_00dc:
 14608                                  .L_if_end_00dd:
 14609                                  .L_if_end_00de:
 14610 0000A3B9 C9                      	leave
 14611 0000A3BA C22000                  	ret AND_KILL_FRAME(2)
 14612                                  .L_lambda_simple_end_010b:	; new closure is in rax
 14613 0000A3BD 50                      	push rax
 14614 0000A3BE 6A01                    	push 1	; arg count
 14615 0000A3C0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14616 0000A3C5 E86ADC0000              	call malloc
 14617 0000A3CA 50                      	push rax
 14618 0000A3CB BF08000000              	mov rdi, 8 * 1	; new rib
 14619 0000A3D0 E85FDC0000              	call malloc
 14620 0000A3D5 50                      	push rax
 14621 0000A3D6 BF10000000              	mov rdi, 8 * 2	; extended env
 14622 0000A3DB E854DC0000              	call malloc
 14623 0000A3E0 488B7D10                	mov rdi, ENV
 14624 0000A3E4 BE00000000              	mov rsi, 0
 14625 0000A3E9 BA01000000              	mov rdx, 1
 14626                                  .L_lambda_simple_env_loop_010c:	; ext_env[i + 1] <-- env[i]
 14627 0000A3EE 4883FE01                	cmp rsi, 1
 14628 0000A3F2 7410                    	je .L_lambda_simple_env_end_010c
 14629 0000A3F4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14630 0000A3F8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14631 0000A3FC 48FFC6                  	inc rsi
 14632 0000A3FF 48FFC2                  	inc rdx
 14633 0000A402 EBEA                    	jmp .L_lambda_simple_env_loop_010c
 14634                                  .L_lambda_simple_env_end_010c:
 14635 0000A404 5B                      	pop rbx
 14636 0000A405 BE00000000              	mov rsi, 0
 14637                                  .L_lambda_simple_params_loop_010c:	; copy params
 14638 0000A40A 4883FE01                	cmp rsi, 1
 14639 0000A40E 740E                    	je .L_lambda_simple_params_end_010c
 14640 0000A410 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14641 0000A415 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14642 0000A419 48FFC6                  	inc rsi
 14643 0000A41C EBEC                    	jmp .L_lambda_simple_params_loop_010c
 14644                                  .L_lambda_simple_params_end_010c:
 14645 0000A41E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14646 0000A421 4889C3                  	mov rbx, rax
 14647 0000A424 58                      	pop rax
 14648 0000A425 C60004                  	mov byte [rax], T_closure
 14649 0000A428 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14650 0000A42C 48C74009[39A40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_010c
 14651 0000A434 E949060000              	jmp .L_lambda_simple_end_010c
 14652                                  .L_lambda_simple_code_010c:	; lambda-simple body
 14653 0000A439 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14654 0000A43F 740B                    	je .L_lambda_simple_arity_check_ok_010c
 14655 0000A441 FF742410                	push qword [rsp + 8 * 2]
 14656 0000A445 6A01                    	push 1
 14657 0000A447 E9A1DB0000              	jmp L_error_incorrect_arity_simple
 14658                                  .L_lambda_simple_arity_check_ok_010c:
 14659 0000A44C C8000000                	enter 0, 0
 14660 0000A450 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14661 0000A455 E8DADB0000              	call malloc
 14662 0000A45A 50                      	push rax
 14663 0000A45B BF08000000              	mov rdi, 8 * 1	; new rib
 14664 0000A460 E8CFDB0000              	call malloc
 14665 0000A465 50                      	push rax
 14666 0000A466 BF18000000              	mov rdi, 8 * 3	; extended env
 14667 0000A46B E8C4DB0000              	call malloc
 14668 0000A470 488B7D10                	mov rdi, ENV
 14669 0000A474 BE00000000              	mov rsi, 0
 14670 0000A479 BA01000000              	mov rdx, 1
 14671                                  .L_lambda_opt_env_loop_0025:	; ext_env[i + 1] <-- env[i]
 14672 0000A47E 4883FE02                	cmp rsi, 2
 14673 0000A482 7410                    	je .L_lambda_opt_env_end_0025
 14674 0000A484 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14675 0000A488 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14676 0000A48C 48FFC6                  	inc rsi
 14677 0000A48F 48FFC2                  	inc rdx
 14678 0000A492 EBEA                    	jmp .L_lambda_opt_env_loop_0025
 14679                                  .L_lambda_opt_env_end_0025:
 14680 0000A494 5B                      	pop rbx
 14681 0000A495 BE00000000              	mov rsi, 0
 14682                                  .L_lambda_opt_params_loop_0025:	; copy params
 14683 0000A49A 4883FE01                	cmp rsi, 1
 14684 0000A49E 740E                    	je .L_lambda_opt_params_end_0025
 14685 0000A4A0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14686 0000A4A5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14687 0000A4A9 48FFC6                  	inc rsi
 14688 0000A4AC EBEC                    	jmp .L_lambda_opt_params_loop_0025
 14689                                  .L_lambda_opt_params_end_0025:
 14690 0000A4AE 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
 14691 0000A4B1 4889C3                  	mov rbx, rax
 14692 0000A4B4 58                      	pop rax
 14693 0000A4B5 C60004                  	mov byte [rax], T_closure
 14694 0000A4B8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14695 0000A4BC 48C74009[C9A40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0025
 14696 0000A4C4 E9B5050000              	jmp .L_lambda_opt_end_0025
 14697                                  .L_lambda_opt_code_0025:	; lambda-opt body
 14698 0000A4C9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14699 0000A4CF 7411                    	je .L_lambda_opt_arity_check_exact_0025
 14700 0000A4D1 0F8F96020000            	jg .L_lambda_opt_arity_check_more_0025
 14701 0000A4D7 FF742410                	push qword [rsp + 8 * 2]
 14702 0000A4DB 6A01                    	push 1
 14703 0000A4DD E91FDB0000              	jmp L_error_incorrect_arity_opt
 14704                                  .L_lambda_opt_arity_check_exact_0025:
 14705 0000A4E2 4883EC08                	sub rsp, 8
 14706 0000A4E6 488B442408              	mov rax, qword[rsp + 8 *1]
 14707 0000A4EB 48890424                	mov qword[rsp], rax  
 14708 0000A4EF 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 14709 0000A4F4 4889442408              	mov qword[rsp + 8 * 1], rax
 14710 0000A4F9 B802000000              	mov rax, 2
 14711 0000A4FE 4889442410              	mov qword[rsp + 8 *2], rax
 14712 0000A503 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
 14713 0000A508 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 14714 0000A50D 48B8-                   	mov rax, sob_nil
 14714 0000A50F [0100000000000000] 
 14715 0000A517 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
 14716 0000A51C C8000000                	enter 0, 0
 14717                                  	; preparing a non-tail-call
 14718 0000A520 488B4528                	mov rax, PARAM(1)	; param s
 14719 0000A524 50                      	push rax
 14720 0000A525 6A01                    	push 1	; arg count
 14721 0000A527 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 14722 0000A52F 803805                  	cmp byte [rax], T_undefined
 14723 0000A532 0F84CFD90000            	je L_error_fvar_undefined
 14724 0000A538 803804                  	cmp byte [rax], T_closure
 14725 0000A53B 0F854ADA0000            	jne L_error_non_closure
 14726 0000A541 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14727 0000A544 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14728 0000A547 483D[02000000]          	cmp rax, sob_boolean_false
 14729 0000A54D 7475                    	je .L_if_else_00e0
 14730                                  	; preparing a tail-call
 14731 0000A54F 488B4520                	mov rax, PARAM(0)	; param a
 14732 0000A553 50                      	push rax
 14733 0000A554 48B8-                   	mov rax, L_constants + 2270
 14733 0000A556 [DE08000000000000] 
 14734 0000A55E 50                      	push rax
 14735 0000A55F 6A02                    	push 2	; arg count
 14736 0000A561 488B4510                	mov rax, ENV
 14737 0000A565 488B00                  	mov rax, qword [rax + 8 * 0]
 14738 0000A568 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin/
 14739 0000A56B 803804                  	cmp byte [rax], T_closure
 14740 0000A56E 0F8517DA0000            	jne L_error_non_closure
 14741 0000A574 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14742 0000A577 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14743 0000A57A FF7500                  	push qword[rbp]
 14744 0000A57D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14745 0000A580 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14746 0000A584 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14747 0000A588 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14748 0000A58C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14749 0000A58F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14750 0000A592 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14751 0000A597 4983C103                	add r9, 3 	 ;for getting to the params
 14752 0000A59B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14753 0000A59F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14754                                  .L_tc_recycle_frame_loop_019d:
 14755 0000A5A2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14756 0000A5A5 7410                    	je .L_tc_recycle_frame_done_019d
 14757 0000A5A7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14758 0000A5AA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14759 0000A5AD 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14760 0000A5B1 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14761 0000A5B5 EBEB                    	jmp .L_tc_recycle_frame_loop_019d
 14762                                  .L_tc_recycle_frame_done_019d:
 14763 0000A5B7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14764 0000A5B8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14765 0000A5BC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14766 0000A5BF E9A0010000              	jmp .L_if_end_00e0
 14767                                  .L_if_else_00e0:
 14768                                  	; preparing a tail-call
 14769                                  	; preparing a non-tail-call
 14770 0000A5C4 488B4528                	mov rax, PARAM(1)	; param s
 14771 0000A5C8 50                      	push rax
 14772 0000A5C9 48B8-                   	mov rax, L_constants + 2270
 14772 0000A5CB [DE08000000000000] 
 14773 0000A5D3 50                      	push rax
 14774 0000A5D4 488B0425[D70D0000]      	mov rax, qword [free_var_0]	; free var *
 14775 0000A5DC 803805                  	cmp byte [rax], T_undefined
 14776 0000A5DF 0F8422D90000            	je L_error_fvar_undefined
 14777 0000A5E5 50                      	push rax
 14778 0000A5E6 6A03                    	push 3	; arg count
 14779 0000A5E8 488B0425[7C130000]      	mov rax, qword [free_var_85]	; free var fold-left
 14780 0000A5F0 803805                  	cmp byte [rax], T_undefined
 14781 0000A5F3 0F840ED90000            	je L_error_fvar_undefined
 14782 0000A5F9 803804                  	cmp byte [rax], T_closure
 14783 0000A5FC 0F8589D90000            	jne L_error_non_closure
 14784 0000A602 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14785 0000A605 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14786 0000A608 50                      	push rax
 14787 0000A609 6A01                    	push 1	; arg count
 14788 0000A60B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14789 0000A610 E81FDA0000              	call malloc
 14790 0000A615 50                      	push rax
 14791 0000A616 BF10000000              	mov rdi, 8 * 2	; new rib
 14792 0000A61B E814DA0000              	call malloc
 14793 0000A620 50                      	push rax
 14794 0000A621 BF20000000              	mov rdi, 8 * 4	; extended env
 14795 0000A626 E809DA0000              	call malloc
 14796 0000A62B 488B7D10                	mov rdi, ENV
 14797 0000A62F BE00000000              	mov rsi, 0
 14798 0000A634 BA01000000              	mov rdx, 1
 14799                                  .L_lambda_simple_env_loop_010e:	; ext_env[i + 1] <-- env[i]
 14800 0000A639 4883FE03                	cmp rsi, 3
 14801 0000A63D 7410                    	je .L_lambda_simple_env_end_010e
 14802 0000A63F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14803 0000A643 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14804 0000A647 48FFC6                  	inc rsi
 14805 0000A64A 48FFC2                  	inc rdx
 14806 0000A64D EBEA                    	jmp .L_lambda_simple_env_loop_010e
 14807                                  .L_lambda_simple_env_end_010e:
 14808 0000A64F 5B                      	pop rbx
 14809 0000A650 BE00000000              	mov rsi, 0
 14810                                  .L_lambda_simple_params_loop_010e:	; copy params
 14811 0000A655 4883FE02                	cmp rsi, 2
 14812 0000A659 740E                    	je .L_lambda_simple_params_end_010e
 14813 0000A65B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14814 0000A660 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14815 0000A664 48FFC6                  	inc rsi
 14816 0000A667 EBEC                    	jmp .L_lambda_simple_params_loop_010e
 14817                                  .L_lambda_simple_params_end_010e:
 14818 0000A669 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14819 0000A66C 4889C3                  	mov rbx, rax
 14820 0000A66F 58                      	pop rax
 14821 0000A670 C60004                  	mov byte [rax], T_closure
 14822 0000A673 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14823 0000A677 48C74009[84A60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_010e
 14824 0000A67F E98C000000              	jmp .L_lambda_simple_end_010e
 14825                                  .L_lambda_simple_code_010e:	; lambda-simple body
 14826 0000A684 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14827 0000A68A 740B                    	je .L_lambda_simple_arity_check_ok_010e
 14828 0000A68C FF742410                	push qword [rsp + 8 * 2]
 14829 0000A690 6A01                    	push 1
 14830 0000A692 E956D90000              	jmp L_error_incorrect_arity_simple
 14831                                  .L_lambda_simple_arity_check_ok_010e:
 14832 0000A697 C8000000                	enter 0, 0
 14833                                  	; preparing a tail-call
 14834 0000A69B 488B4520                	mov rax, PARAM(0)	; param b
 14835 0000A69F 50                      	push rax
 14836 0000A6A0 488B4510                	mov rax, ENV
 14837 0000A6A4 488B00                  	mov rax, qword [rax + 8 * 0]
 14838 0000A6A7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var a
 14839 0000A6AA 50                      	push rax
 14840 0000A6AB 6A02                    	push 2	; arg count
 14841 0000A6AD 488B4510                	mov rax, ENV
 14842 0000A6B1 488B4008                	mov rax, qword [rax + 8 * 1]
 14843 0000A6B5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin/
 14844 0000A6B8 803804                  	cmp byte [rax], T_closure
 14845 0000A6BB 0F85CAD80000            	jne L_error_non_closure
 14846 0000A6C1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14847 0000A6C4 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14848 0000A6C7 FF7500                  	push qword[rbp]
 14849 0000A6CA 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14850 0000A6CD 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14851 0000A6D1 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14852 0000A6D5 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14853 0000A6D9 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14854 0000A6DC 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14855 0000A6DF 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14856 0000A6E4 4983C103                	add r9, 3 	 ;for getting to the params
 14857 0000A6E8 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14858 0000A6EC 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14859                                  .L_tc_recycle_frame_loop_019e:
 14860 0000A6EF 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14861 0000A6F2 7410                    	je .L_tc_recycle_frame_done_019e
 14862 0000A6F4 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14863 0000A6F7 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14864 0000A6FA 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14865 0000A6FE 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14866 0000A702 EBEB                    	jmp .L_tc_recycle_frame_loop_019e
 14867                                  .L_tc_recycle_frame_done_019e:
 14868 0000A704 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14869 0000A705 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14870 0000A709 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14871 0000A70C C9                      	leave
 14872 0000A70D C21800                  	ret AND_KILL_FRAME(1)
 14873                                  .L_lambda_simple_end_010e:	; new closure is in rax
 14874 0000A710 803804                  	cmp byte [rax], T_closure
 14875 0000A713 0F8572D80000            	jne L_error_non_closure
 14876 0000A719 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14877 0000A71C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14878 0000A71F FF7500                  	push qword[rbp]
 14879 0000A722 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14880 0000A725 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14881 0000A729 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14882 0000A72D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14883 0000A731 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14884 0000A734 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14885 0000A737 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14886 0000A73C 4983C103                	add r9, 3 	 ;for getting to the params
 14887 0000A740 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14888 0000A744 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14889                                  .L_tc_recycle_frame_loop_019f:
 14890 0000A747 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14891 0000A74A 7410                    	je .L_tc_recycle_frame_done_019f
 14892 0000A74C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14893 0000A74F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14894 0000A752 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14895 0000A756 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14896 0000A75A EBEB                    	jmp .L_tc_recycle_frame_loop_019f
 14897                                  .L_tc_recycle_frame_done_019f:
 14898 0000A75C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14899 0000A75D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14900 0000A761 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14901                                  .L_if_end_00e0:
 14902 0000A764 C9                      	leave
 14903 0000A765 C22000                  	ret AND_KILL_FRAME(2)
 14904 0000A768 E911030000              	jmp .L_lambda_opt_end_0025	; new closure is in rax
 14905                                  .L_lambda_opt_arity_check_more_0025:
 14906 0000A76D 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 14907 0000A772 49B9-                   	mov r9, sob_nil
 14907 0000A774 [0100000000000000] 
 14908 0000A77C 4889E3                  	mov rbx, rsp 
 14909 0000A77F 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 14910 0000A783 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 14911 0000A786 49C1E003                	shl r8, 3
 14912 0000A78A 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 14913 0000A78D 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 14914                                  .L_lambda_opt_stack_shrink_loop_0025:
 14915 0000A792 4983F801                	cmp r8, 1
 14916 0000A796 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0025
 14917 0000A798 BF11000000              	mov rdi, 1+8+8 ;for pair
 14918 0000A79D E892D80000              	call malloc;to create the pair in the stack
 14919 0000A7A2 C60021                  	mov byte [rax], T_pair ; to make it a pair
 14920 0000A7A5 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
 14921 0000A7A8 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 14922 0000A7AC 4C894809                 	mov qword[rax+1+8],r9
 14923 0000A7B0 4989C1                  	mov r9, rax ;for the recursion 
 14924 0000A7B3 49FFC8                  	dec r8 ;we finished copy another opt param to the list
 14925 0000A7B6 4883EB08                	sub rbx, 8 ;to get the next param to copy
 14926 0000A7BA EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0025
 14927                                  .L_lambda_opt_stack_shrink_loop_exit_0025:
 14928 0000A7BC 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
 14929 0000A7C1 4883E902                	sub rcx, 2
 14930 0000A7C5 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
 14931 0000A7C9 4801CC                  	add rsp, rcx ;shrinking the stack
 14932 0000A7CC 4889E0                  	mov rax, rsp
 14933 0000A7CF 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
 14934 0000A7D2 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
 14935 0000A7D6 49FFC8                  	dec r8 ;we start with param 0, not 1 
 14936 0000A7D9 4883C018                	add rax, 3 * 8;now rax is param 0
 14937 0000A7DD 49C1E003                	shl r8, 3;convert to byte
 14938 0000A7E1 4C01C0                  	add rax, r8;now rax is the top of the stack
 14939 0000A7E4 4C8908                  	mov qword[rax], r9;puting the list at the top
 14940 0000A7E7 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
 14941 0000A7EB 4889E3                  	mov rbx, rsp 
 14942 0000A7EE 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
 14943 0000A7F1 41BA01000000            	mov r10, 1;r10 is the not opt params length
 14944 0000A7F7 49FFCA                  	dec r10 
 14945 0000A7FA 49C1E203                	shl r10, 3;to get bytes
 14946 0000A7FE 4883C318                	add rbx, 3*8;rbx is the first param
 14947 0000A802 4C01D3                  	add rbx, r10; rbx is where the address to copy to
 14948 0000A805 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
 14949 0000A808 4C8900                  	mov qword[rax], r8
 14950 0000A80B 4883E808                	sub rax, 8
 14951 0000A80F 4883EB08                	sub rbx, 8
 14952 0000A813 4889E0                  	mov rax, rsp
 14953 0000A816 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 14954 0000A819 48C744241002000000      	mov qword [rsp+2*8], 2
 14955 0000A822 488B5808                	mov rbx, qword[rax + 8 *1]
 14956 0000A826 48895C2408              	mov qword [rsp + 1*8] ,rbx
 14957 0000A82B 488B18                  	mov rbx, qword[rax]
 14958 0000A82E 48891C24                	mov qword [rsp], rbx
 14959 0000A832 C8000000                	enter 0, 0
 14960                                  	; preparing a non-tail-call
 14961 0000A836 488B4528                	mov rax, PARAM(1)	; param s
 14962 0000A83A 50                      	push rax
 14963 0000A83B 6A01                    	push 1	; arg count
 14964 0000A83D 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 14965 0000A845 803805                  	cmp byte [rax], T_undefined
 14966 0000A848 0F84B9D60000            	je L_error_fvar_undefined
 14967 0000A84E 803804                  	cmp byte [rax], T_closure
 14968 0000A851 0F8534D70000            	jne L_error_non_closure
 14969 0000A857 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14970 0000A85A FF5009                  	call SOB_CLOSURE_CODE(rax)
 14971 0000A85D 483D[02000000]          	cmp rax, sob_boolean_false
 14972 0000A863 7475                    	je .L_if_else_00df
 14973                                  	; preparing a tail-call
 14974 0000A865 488B4520                	mov rax, PARAM(0)	; param a
 14975 0000A869 50                      	push rax
 14976 0000A86A 48B8-                   	mov rax, L_constants + 2270
 14976 0000A86C [DE08000000000000] 
 14977 0000A874 50                      	push rax
 14978 0000A875 6A02                    	push 2	; arg count
 14979 0000A877 488B4510                	mov rax, ENV
 14980 0000A87B 488B00                  	mov rax, qword [rax + 8 * 0]
 14981 0000A87E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin/
 14982 0000A881 803804                  	cmp byte [rax], T_closure
 14983 0000A884 0F8501D70000            	jne L_error_non_closure
 14984 0000A88A FF7001                  	push SOB_CLOSURE_ENV(rax)
 14985 0000A88D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14986 0000A890 FF7500                  	push qword[rbp]
 14987 0000A893 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14988 0000A896 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14989 0000A89A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14990 0000A89E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14991 0000A8A2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14992 0000A8A5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14993 0000A8A8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14994 0000A8AD 4983C103                	add r9, 3 	 ;for getting to the params
 14995 0000A8B1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14996 0000A8B5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14997                                  .L_tc_recycle_frame_loop_019a:
 14998 0000A8B8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14999 0000A8BB 7410                    	je .L_tc_recycle_frame_done_019a
 15000 0000A8BD 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15001 0000A8C0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15002 0000A8C3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15003 0000A8C7 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15004 0000A8CB EBEB                    	jmp .L_tc_recycle_frame_loop_019a
 15005                                  .L_tc_recycle_frame_done_019a:
 15006 0000A8CD 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15007 0000A8CE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15008 0000A8D2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15009 0000A8D5 E9A0010000              	jmp .L_if_end_00df
 15010                                  .L_if_else_00df:
 15011                                  	; preparing a tail-call
 15012                                  	; preparing a non-tail-call
 15013 0000A8DA 488B4528                	mov rax, PARAM(1)	; param s
 15014 0000A8DE 50                      	push rax
 15015 0000A8DF 48B8-                   	mov rax, L_constants + 2270
 15015 0000A8E1 [DE08000000000000] 
 15016 0000A8E9 50                      	push rax
 15017 0000A8EA 488B0425[D70D0000]      	mov rax, qword [free_var_0]	; free var *
 15018 0000A8F2 803805                  	cmp byte [rax], T_undefined
 15019 0000A8F5 0F840CD60000            	je L_error_fvar_undefined
 15020 0000A8FB 50                      	push rax
 15021 0000A8FC 6A03                    	push 3	; arg count
 15022 0000A8FE 488B0425[7C130000]      	mov rax, qword [free_var_85]	; free var fold-left
 15023 0000A906 803805                  	cmp byte [rax], T_undefined
 15024 0000A909 0F84F8D50000            	je L_error_fvar_undefined
 15025 0000A90F 803804                  	cmp byte [rax], T_closure
 15026 0000A912 0F8573D60000            	jne L_error_non_closure
 15027 0000A918 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15028 0000A91B FF5009                  	call SOB_CLOSURE_CODE(rax)
 15029 0000A91E 50                      	push rax
 15030 0000A91F 6A01                    	push 1	; arg count
 15031 0000A921 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15032 0000A926 E809D70000              	call malloc
 15033 0000A92B 50                      	push rax
 15034 0000A92C BF10000000              	mov rdi, 8 * 2	; new rib
 15035 0000A931 E8FED60000              	call malloc
 15036 0000A936 50                      	push rax
 15037 0000A937 BF20000000              	mov rdi, 8 * 4	; extended env
 15038 0000A93C E8F3D60000              	call malloc
 15039 0000A941 488B7D10                	mov rdi, ENV
 15040 0000A945 BE00000000              	mov rsi, 0
 15041 0000A94A BA01000000              	mov rdx, 1
 15042                                  .L_lambda_simple_env_loop_010d:	; ext_env[i + 1] <-- env[i]
 15043 0000A94F 4883FE03                	cmp rsi, 3
 15044 0000A953 7410                    	je .L_lambda_simple_env_end_010d
 15045 0000A955 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15046 0000A959 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15047 0000A95D 48FFC6                  	inc rsi
 15048 0000A960 48FFC2                  	inc rdx
 15049 0000A963 EBEA                    	jmp .L_lambda_simple_env_loop_010d
 15050                                  .L_lambda_simple_env_end_010d:
 15051 0000A965 5B                      	pop rbx
 15052 0000A966 BE00000000              	mov rsi, 0
 15053                                  .L_lambda_simple_params_loop_010d:	; copy params
 15054 0000A96B 4883FE02                	cmp rsi, 2
 15055 0000A96F 740E                    	je .L_lambda_simple_params_end_010d
 15056 0000A971 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15057 0000A976 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15058 0000A97A 48FFC6                  	inc rsi
 15059 0000A97D EBEC                    	jmp .L_lambda_simple_params_loop_010d
 15060                                  .L_lambda_simple_params_end_010d:
 15061 0000A97F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15062 0000A982 4889C3                  	mov rbx, rax
 15063 0000A985 58                      	pop rax
 15064 0000A986 C60004                  	mov byte [rax], T_closure
 15065 0000A989 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15066 0000A98D 48C74009[9AA90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_010d
 15067 0000A995 E98C000000              	jmp .L_lambda_simple_end_010d
 15068                                  .L_lambda_simple_code_010d:	; lambda-simple body
 15069 0000A99A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15070 0000A9A0 740B                    	je .L_lambda_simple_arity_check_ok_010d
 15071 0000A9A2 FF742410                	push qword [rsp + 8 * 2]
 15072 0000A9A6 6A01                    	push 1
 15073 0000A9A8 E940D60000              	jmp L_error_incorrect_arity_simple
 15074                                  .L_lambda_simple_arity_check_ok_010d:
 15075 0000A9AD C8000000                	enter 0, 0
 15076                                  	; preparing a tail-call
 15077 0000A9B1 488B4520                	mov rax, PARAM(0)	; param b
 15078 0000A9B5 50                      	push rax
 15079 0000A9B6 488B4510                	mov rax, ENV
 15080 0000A9BA 488B00                  	mov rax, qword [rax + 8 * 0]
 15081 0000A9BD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var a
 15082 0000A9C0 50                      	push rax
 15083 0000A9C1 6A02                    	push 2	; arg count
 15084 0000A9C3 488B4510                	mov rax, ENV
 15085 0000A9C7 488B4008                	mov rax, qword [rax + 8 * 1]
 15086 0000A9CB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin/
 15087 0000A9CE 803804                  	cmp byte [rax], T_closure
 15088 0000A9D1 0F85B4D50000            	jne L_error_non_closure
 15089 0000A9D7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15090 0000A9DA FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15091 0000A9DD FF7500                  	push qword[rbp]
 15092 0000A9E0 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15093 0000A9E3 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15094 0000A9E7 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15095 0000A9EB 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15096 0000A9EF 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15097 0000A9F2 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15098 0000A9F5 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15099 0000A9FA 4983C103                	add r9, 3 	 ;for getting to the params
 15100 0000A9FE 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15101 0000AA02 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15102                                  .L_tc_recycle_frame_loop_019b:
 15103 0000AA05 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15104 0000AA08 7410                    	je .L_tc_recycle_frame_done_019b
 15105 0000AA0A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15106 0000AA0D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15107 0000AA10 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15108 0000AA14 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15109 0000AA18 EBEB                    	jmp .L_tc_recycle_frame_loop_019b
 15110                                  .L_tc_recycle_frame_done_019b:
 15111 0000AA1A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15112 0000AA1B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15113 0000AA1F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15114 0000AA22 C9                      	leave
 15115 0000AA23 C21800                  	ret AND_KILL_FRAME(1)
 15116                                  .L_lambda_simple_end_010d:	; new closure is in rax
 15117 0000AA26 803804                  	cmp byte [rax], T_closure
 15118 0000AA29 0F855CD50000            	jne L_error_non_closure
 15119 0000AA2F FF7001                  	push SOB_CLOSURE_ENV(rax)
 15120 0000AA32 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15121 0000AA35 FF7500                  	push qword[rbp]
 15122 0000AA38 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15123 0000AA3B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15124 0000AA3F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15125 0000AA43 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15126 0000AA47 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15127 0000AA4A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15128 0000AA4D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15129 0000AA52 4983C103                	add r9, 3 	 ;for getting to the params
 15130 0000AA56 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15131 0000AA5A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15132                                  .L_tc_recycle_frame_loop_019c:
 15133 0000AA5D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15134 0000AA60 7410                    	je .L_tc_recycle_frame_done_019c
 15135 0000AA62 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15136 0000AA65 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15137 0000AA68 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15138 0000AA6C 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15139 0000AA70 EBEB                    	jmp .L_tc_recycle_frame_loop_019c
 15140                                  .L_tc_recycle_frame_done_019c:
 15141 0000AA72 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15142 0000AA73 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15143 0000AA77 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15144                                  .L_if_end_00df:
 15145 0000AA7A C9                      	leave
 15146 0000AA7B C22000                  	ret AND_KILL_FRAME(2)
 15147                                  .L_lambda_opt_end_0025:	; new closure is in rax
 15148 0000AA7E C9                      	leave
 15149 0000AA7F C21800                  	ret AND_KILL_FRAME(1)
 15150                                  .L_lambda_simple_end_010c:	; new closure is in rax
 15151 0000AA82 803804                  	cmp byte [rax], T_closure
 15152 0000AA85 0F8500D50000            	jne L_error_non_closure
 15153 0000AA8B FF7001                  	push SOB_CLOSURE_ENV(rax)
 15154 0000AA8E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15155 0000AA91 FF7500                  	push qword[rbp]
 15156 0000AA94 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15157 0000AA97 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15158 0000AA9B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15159 0000AA9F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15160 0000AAA3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15161 0000AAA6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15162 0000AAA9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15163 0000AAAE 4983C103                	add r9, 3 	 ;for getting to the params
 15164 0000AAB2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15165 0000AAB6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15166                                  .L_tc_recycle_frame_loop_01a0:
 15167 0000AAB9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15168 0000AABC 7410                    	je .L_tc_recycle_frame_done_01a0
 15169 0000AABE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15170 0000AAC1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15171 0000AAC4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15172 0000AAC8 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15173 0000AACC EBEB                    	jmp .L_tc_recycle_frame_loop_01a0
 15174                                  .L_tc_recycle_frame_done_01a0:
 15175 0000AACE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15176 0000AACF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15177 0000AAD3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15178 0000AAD6 C9                      	leave
 15179 0000AAD7 C21800                  	ret AND_KILL_FRAME(1)
 15180                                  .L_lambda_simple_end_010a:	; new closure is in rax
 15181 0000AADA 803804                  	cmp byte [rax], T_closure
 15182 0000AADD 0F85A8D40000            	jne L_error_non_closure
 15183 0000AAE3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15184 0000AAE6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15185 0000AAE9 48890425[0A0E0000]      	mov qword [free_var_3], rax
 15186 0000AAF1 48B8-                   	mov rax, sob_void
 15186 0000AAF3 [0000000000000000] 
 15187                                  
 15188 0000AAFB 4889C7                  	mov rdi, rax
 15189 0000AAFE E886D70000              	call print_sexpr_if_not_void
 15190 0000AB03 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15191 0000AB08 E827D50000              	call malloc
 15192 0000AB0D 50                      	push rax
 15193 0000AB0E BF00000000              	mov rdi, 8 * 0	; new rib
 15194 0000AB13 E81CD50000              	call malloc
 15195 0000AB18 50                      	push rax
 15196 0000AB19 BF08000000              	mov rdi, 8 * 1	; extended env
 15197 0000AB1E E811D50000              	call malloc
 15198 0000AB23 488B7D10                	mov rdi, ENV
 15199 0000AB27 BE00000000              	mov rsi, 0
 15200 0000AB2C BA01000000              	mov rdx, 1
 15201                                  .L_lambda_simple_env_loop_010f:	; ext_env[i + 1] <-- env[i]
 15202 0000AB31 4883FE00                	cmp rsi, 0
 15203 0000AB35 7410                    	je .L_lambda_simple_env_end_010f
 15204 0000AB37 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15205 0000AB3B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15206 0000AB3F 48FFC6                  	inc rsi
 15207 0000AB42 48FFC2                  	inc rdx
 15208 0000AB45 EBEA                    	jmp .L_lambda_simple_env_loop_010f
 15209                                  .L_lambda_simple_env_end_010f:
 15210 0000AB47 5B                      	pop rbx
 15211 0000AB48 BE00000000              	mov rsi, 0
 15212                                  .L_lambda_simple_params_loop_010f:	; copy params
 15213 0000AB4D 4883FE00                	cmp rsi, 0
 15214 0000AB51 740E                    	je .L_lambda_simple_params_end_010f
 15215 0000AB53 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15216 0000AB58 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15217 0000AB5C 48FFC6                  	inc rsi
 15218 0000AB5F EBEC                    	jmp .L_lambda_simple_params_loop_010f
 15219                                  .L_lambda_simple_params_end_010f:
 15220 0000AB61 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15221 0000AB64 4889C3                  	mov rbx, rax
 15222 0000AB67 58                      	pop rax
 15223 0000AB68 C60004                  	mov byte [rax], T_closure
 15224 0000AB6B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15225 0000AB6F 48C74009[7CAB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_010f
 15226 0000AB77 E91B010000              	jmp .L_lambda_simple_end_010f
 15227                                  .L_lambda_simple_code_010f:	; lambda-simple body
 15228 0000AB7C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15229 0000AB82 740B                    	je .L_lambda_simple_arity_check_ok_010f
 15230 0000AB84 FF742410                	push qword [rsp + 8 * 2]
 15231 0000AB88 6A01                    	push 1
 15232 0000AB8A E95ED40000              	jmp L_error_incorrect_arity_simple
 15233                                  .L_lambda_simple_arity_check_ok_010f:
 15234 0000AB8F C8000000                	enter 0, 0
 15235                                  	; preparing a non-tail-call
 15236 0000AB93 488B4520                	mov rax, PARAM(0)	; param n
 15237 0000AB97 50                      	push rax
 15238 0000AB98 6A01                    	push 1	; arg count
 15239 0000AB9A 488B0425[DE170000]      	mov rax, qword [free_var_151]	; free var zero?
 15240 0000ABA2 803805                  	cmp byte [rax], T_undefined
 15241 0000ABA5 0F845CD30000            	je L_error_fvar_undefined
 15242 0000ABAB 803804                  	cmp byte [rax], T_closure
 15243 0000ABAE 0F85D7D30000            	jne L_error_non_closure
 15244 0000ABB4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15245 0000ABB7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15246 0000ABBA 483D[02000000]          	cmp rax, sob_boolean_false
 15247 0000ABC0 740F                    	je .L_if_else_00e1
 15248 0000ABC2 48B8-                   	mov rax, L_constants + 2270
 15248 0000ABC4 [DE08000000000000] 
 15249 0000ABCC E9C2000000              	jmp .L_if_end_00e1
 15250                                  .L_if_else_00e1:
 15251                                  	; preparing a tail-call
 15252                                  	; preparing a non-tail-call
 15253                                  	; preparing a non-tail-call
 15254 0000ABD1 48B8-                   	mov rax, L_constants + 2270
 15254 0000ABD3 [DE08000000000000] 
 15255 0000ABDB 50                      	push rax
 15256 0000ABDC 488B4520                	mov rax, PARAM(0)	; param n
 15257 0000ABE0 50                      	push rax
 15258 0000ABE1 6A02                    	push 2	; arg count
 15259 0000ABE3 488B0425[F90D0000]      	mov rax, qword [free_var_2]	; free var -
 15260 0000ABEB 803805                  	cmp byte [rax], T_undefined
 15261 0000ABEE 0F8413D30000            	je L_error_fvar_undefined
 15262 0000ABF4 803804                  	cmp byte [rax], T_closure
 15263 0000ABF7 0F858ED30000            	jne L_error_non_closure
 15264 0000ABFD FF7001                  	push SOB_CLOSURE_ENV(rax)
 15265 0000AC00 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15266 0000AC03 50                      	push rax
 15267 0000AC04 6A01                    	push 1	; arg count
 15268 0000AC06 488B0425[6B130000]      	mov rax, qword [free_var_84]	; free var fact
 15269 0000AC0E 803805                  	cmp byte [rax], T_undefined
 15270 0000AC11 0F84F0D20000            	je L_error_fvar_undefined
 15271 0000AC17 803804                  	cmp byte [rax], T_closure
 15272 0000AC1A 0F856BD30000            	jne L_error_non_closure
 15273 0000AC20 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15274 0000AC23 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15275 0000AC26 50                      	push rax
 15276 0000AC27 488B4520                	mov rax, PARAM(0)	; param n
 15277 0000AC2B 50                      	push rax
 15278 0000AC2C 6A02                    	push 2	; arg count
 15279 0000AC2E 488B0425[D70D0000]      	mov rax, qword [free_var_0]	; free var *
 15280 0000AC36 803805                  	cmp byte [rax], T_undefined
 15281 0000AC39 0F84C8D20000            	je L_error_fvar_undefined
 15282 0000AC3F 803804                  	cmp byte [rax], T_closure
 15283 0000AC42 0F8543D30000            	jne L_error_non_closure
 15284 0000AC48 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15285 0000AC4B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15286 0000AC4E FF7500                  	push qword[rbp]
 15287 0000AC51 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15288 0000AC54 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15289 0000AC58 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15290 0000AC5C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15291 0000AC60 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15292 0000AC63 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15293 0000AC66 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15294 0000AC6B 4983C103                	add r9, 3 	 ;for getting to the params
 15295 0000AC6F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15296 0000AC73 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15297                                  .L_tc_recycle_frame_loop_01a1:
 15298 0000AC76 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15299 0000AC79 7410                    	je .L_tc_recycle_frame_done_01a1
 15300 0000AC7B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15301 0000AC7E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15302 0000AC81 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15303 0000AC85 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15304 0000AC89 EBEB                    	jmp .L_tc_recycle_frame_loop_01a1
 15305                                  .L_tc_recycle_frame_done_01a1:
 15306 0000AC8B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15307 0000AC8C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15308 0000AC90 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15309                                  .L_if_end_00e1:
 15310 0000AC93 C9                      	leave
 15311 0000AC94 C21800                  	ret AND_KILL_FRAME(1)
 15312                                  .L_lambda_simple_end_010f:	; new closure is in rax
 15313 0000AC97 48890425[6B130000]      	mov qword [free_var_84], rax
 15314 0000AC9F 48B8-                   	mov rax, sob_void
 15314 0000ACA1 [0000000000000000] 
 15315                                  
 15316 0000ACA9 4889C7                  	mov rdi, rax
 15317 0000ACAC E8D8D50000              	call print_sexpr_if_not_void
 15318 0000ACB1 48B8-                   	mov rax, L_constants + 0
 15318 0000ACB3 [0000000000000000] 
 15319 0000ACBB 48890425[1B0E0000]      	mov qword [free_var_4], rax
 15320 0000ACC3 48B8-                   	mov rax, sob_void
 15320 0000ACC5 [0000000000000000] 
 15321                                  
 15322 0000ACCD 4889C7                  	mov rdi, rax
 15323 0000ACD0 E8B4D50000              	call print_sexpr_if_not_void
 15324 0000ACD5 48B8-                   	mov rax, L_constants + 0
 15324 0000ACD7 [0000000000000000] 
 15325 0000ACDF 48890425[2C0E0000]      	mov qword [free_var_5], rax
 15326 0000ACE7 48B8-                   	mov rax, sob_void
 15326 0000ACE9 [0000000000000000] 
 15327                                  
 15328 0000ACF1 4889C7                  	mov rdi, rax
 15329 0000ACF4 E890D50000              	call print_sexpr_if_not_void
 15330 0000ACF9 48B8-                   	mov rax, L_constants + 0
 15330 0000ACFB [0000000000000000] 
 15331 0000AD03 48890425[4E0E0000]      	mov qword [free_var_7], rax
 15332 0000AD0B 48B8-                   	mov rax, sob_void
 15332 0000AD0D [0000000000000000] 
 15333                                  
 15334 0000AD15 4889C7                  	mov rdi, rax
 15335 0000AD18 E86CD50000              	call print_sexpr_if_not_void
 15336 0000AD1D 48B8-                   	mov rax, L_constants + 0
 15336 0000AD1F [0000000000000000] 
 15337 0000AD27 48890425[5F0E0000]      	mov qword [free_var_8], rax
 15338 0000AD2F 48B8-                   	mov rax, sob_void
 15338 0000AD31 [0000000000000000] 
 15339                                  
 15340 0000AD39 4889C7                  	mov rdi, rax
 15341 0000AD3C E848D50000              	call print_sexpr_if_not_void
 15342 0000AD41 48B8-                   	mov rax, L_constants + 0
 15342 0000AD43 [0000000000000000] 
 15343 0000AD4B 48890425[3D0E0000]      	mov qword [free_var_6], rax
 15344 0000AD53 48B8-                   	mov rax, sob_void
 15344 0000AD55 [0000000000000000] 
 15345                                  
 15346 0000AD5D 4889C7                  	mov rdi, rax
 15347 0000AD60 E824D50000              	call print_sexpr_if_not_void
 15348                                  	; preparing a non-tail-call
 15349 0000AD65 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15350 0000AD6A E8C5D20000              	call malloc
 15351 0000AD6F 50                      	push rax
 15352 0000AD70 BF00000000              	mov rdi, 8 * 0	; new rib
 15353 0000AD75 E8BAD20000              	call malloc
 15354 0000AD7A 50                      	push rax
 15355 0000AD7B BF08000000              	mov rdi, 8 * 1	; extended env
 15356 0000AD80 E8AFD20000              	call malloc
 15357 0000AD85 488B7D10                	mov rdi, ENV
 15358 0000AD89 BE00000000              	mov rsi, 0
 15359 0000AD8E BA01000000              	mov rdx, 1
 15360                                  .L_lambda_simple_env_loop_0110:	; ext_env[i + 1] <-- env[i]
 15361 0000AD93 4883FE00                	cmp rsi, 0
 15362 0000AD97 7410                    	je .L_lambda_simple_env_end_0110
 15363 0000AD99 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15364 0000AD9D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15365 0000ADA1 48FFC6                  	inc rsi
 15366 0000ADA4 48FFC2                  	inc rdx
 15367 0000ADA7 EBEA                    	jmp .L_lambda_simple_env_loop_0110
 15368                                  .L_lambda_simple_env_end_0110:
 15369 0000ADA9 5B                      	pop rbx
 15370 0000ADAA BE00000000              	mov rsi, 0
 15371                                  .L_lambda_simple_params_loop_0110:	; copy params
 15372 0000ADAF 4883FE00                	cmp rsi, 0
 15373 0000ADB3 740E                    	je .L_lambda_simple_params_end_0110
 15374 0000ADB5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15375 0000ADBA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15376 0000ADBE 48FFC6                  	inc rsi
 15377 0000ADC1 EBEC                    	jmp .L_lambda_simple_params_loop_0110
 15378                                  .L_lambda_simple_params_end_0110:
 15379 0000ADC3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15380 0000ADC6 4889C3                  	mov rbx, rax
 15381 0000ADC9 58                      	pop rax
 15382 0000ADCA C60004                  	mov byte [rax], T_closure
 15383 0000ADCD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15384 0000ADD1 48C74009[DEAD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0110
 15385 0000ADD9 E998000000              	jmp .L_lambda_simple_end_0110
 15386                                  .L_lambda_simple_code_0110:	; lambda-simple body
 15387 0000ADDE 48837C241000            	cmp qword [rsp + 8 * 2], 0
 15388 0000ADE4 740B                    	je .L_lambda_simple_arity_check_ok_0110
 15389 0000ADE6 FF742410                	push qword [rsp + 8 * 2]
 15390 0000ADEA 6A00                    	push 0
 15391 0000ADEC E9FCD10000              	jmp L_error_incorrect_arity_simple
 15392                                  .L_lambda_simple_arity_check_ok_0110:
 15393 0000ADF1 C8000000                	enter 0, 0
 15394                                  	; preparing a tail-call
 15395 0000ADF5 48B8-                   	mov rax, L_constants + 2408
 15395 0000ADF7 [6809000000000000] 
 15396 0000ADFF 50                      	push rax
 15397 0000AE00 48B8-                   	mov rax, L_constants + 2399
 15397 0000AE02 [5F09000000000000] 
 15398 0000AE0A 50                      	push rax
 15399 0000AE0B 6A02                    	push 2	; arg count
 15400 0000AE0D 488B0425[49130000]      	mov rax, qword [free_var_82]	; free var error
 15401 0000AE15 803805                  	cmp byte [rax], T_undefined
 15402 0000AE18 0F84E9D00000            	je L_error_fvar_undefined
 15403 0000AE1E 803804                  	cmp byte [rax], T_closure
 15404 0000AE21 0F8564D10000            	jne L_error_non_closure
 15405 0000AE27 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15406 0000AE2A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15407 0000AE2D FF7500                  	push qword[rbp]
 15408 0000AE30 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15409 0000AE33 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15410 0000AE37 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15411 0000AE3B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15412 0000AE3F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15413 0000AE42 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15414 0000AE45 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15415 0000AE4A 4983C103                	add r9, 3 	 ;for getting to the params
 15416 0000AE4E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15417 0000AE52 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15418                                  .L_tc_recycle_frame_loop_01a2:
 15419 0000AE55 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15420 0000AE58 7410                    	je .L_tc_recycle_frame_done_01a2
 15421 0000AE5A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15422 0000AE5D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15423 0000AE60 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15424 0000AE64 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15425 0000AE68 EBEB                    	jmp .L_tc_recycle_frame_loop_01a2
 15426                                  .L_tc_recycle_frame_done_01a2:
 15427 0000AE6A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15428 0000AE6B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15429 0000AE6F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15430 0000AE72 C9                      	leave
 15431 0000AE73 C21000                  	ret AND_KILL_FRAME(0)
 15432                                  .L_lambda_simple_end_0110:	; new closure is in rax
 15433 0000AE76 50                      	push rax
 15434 0000AE77 6A01                    	push 1	; arg count
 15435 0000AE79 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15436 0000AE7E E8B1D10000              	call malloc
 15437 0000AE83 50                      	push rax
 15438 0000AE84 BF00000000              	mov rdi, 8 * 0	; new rib
 15439 0000AE89 E8A6D10000              	call malloc
 15440 0000AE8E 50                      	push rax
 15441 0000AE8F BF08000000              	mov rdi, 8 * 1	; extended env
 15442 0000AE94 E89BD10000              	call malloc
 15443 0000AE99 488B7D10                	mov rdi, ENV
 15444 0000AE9D BE00000000              	mov rsi, 0
 15445 0000AEA2 BA01000000              	mov rdx, 1
 15446                                  .L_lambda_simple_env_loop_0111:	; ext_env[i + 1] <-- env[i]
 15447 0000AEA7 4883FE00                	cmp rsi, 0
 15448 0000AEAB 7410                    	je .L_lambda_simple_env_end_0111
 15449 0000AEAD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15450 0000AEB1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15451 0000AEB5 48FFC6                  	inc rsi
 15452 0000AEB8 48FFC2                  	inc rdx
 15453 0000AEBB EBEA                    	jmp .L_lambda_simple_env_loop_0111
 15454                                  .L_lambda_simple_env_end_0111:
 15455 0000AEBD 5B                      	pop rbx
 15456 0000AEBE BE00000000              	mov rsi, 0
 15457                                  .L_lambda_simple_params_loop_0111:	; copy params
 15458 0000AEC3 4883FE00                	cmp rsi, 0
 15459 0000AEC7 740E                    	je .L_lambda_simple_params_end_0111
 15460 0000AEC9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15461 0000AECE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15462 0000AED2 48FFC6                  	inc rsi
 15463 0000AED5 EBEC                    	jmp .L_lambda_simple_params_loop_0111
 15464                                  .L_lambda_simple_params_end_0111:
 15465 0000AED7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15466 0000AEDA 4889C3                  	mov rbx, rax
 15467 0000AEDD 58                      	pop rax
 15468 0000AEDE C60004                  	mov byte [rax], T_closure
 15469 0000AEE1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15470 0000AEE5 48C74009[F2AE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0111
 15471 0000AEED E9401B0000              	jmp .L_lambda_simple_end_0111
 15472                                  .L_lambda_simple_code_0111:	; lambda-simple body
 15473 0000AEF2 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15474 0000AEF8 740B                    	je .L_lambda_simple_arity_check_ok_0111
 15475 0000AEFA FF742410                	push qword [rsp + 8 * 2]
 15476 0000AEFE 6A01                    	push 1
 15477 0000AF00 E9E8D00000              	jmp L_error_incorrect_arity_simple
 15478                                  .L_lambda_simple_arity_check_ok_0111:
 15479 0000AF05 C8000000                	enter 0, 0
 15480                                  	; preparing a tail-call
 15481 0000AF09 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15482 0000AF0E E821D10000              	call malloc
 15483 0000AF13 50                      	push rax
 15484 0000AF14 BF08000000              	mov rdi, 8 * 1	; new rib
 15485 0000AF19 E816D10000              	call malloc
 15486 0000AF1E 50                      	push rax
 15487 0000AF1F BF10000000              	mov rdi, 8 * 2	; extended env
 15488 0000AF24 E80BD10000              	call malloc
 15489 0000AF29 488B7D10                	mov rdi, ENV
 15490 0000AF2D BE00000000              	mov rsi, 0
 15491 0000AF32 BA01000000              	mov rdx, 1
 15492                                  .L_lambda_simple_env_loop_0112:	; ext_env[i + 1] <-- env[i]
 15493 0000AF37 4883FE01                	cmp rsi, 1
 15494 0000AF3B 7410                    	je .L_lambda_simple_env_end_0112
 15495 0000AF3D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15496 0000AF41 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15497 0000AF45 48FFC6                  	inc rsi
 15498 0000AF48 48FFC2                  	inc rdx
 15499 0000AF4B EBEA                    	jmp .L_lambda_simple_env_loop_0112
 15500                                  .L_lambda_simple_env_end_0112:
 15501 0000AF4D 5B                      	pop rbx
 15502 0000AF4E BE00000000              	mov rsi, 0
 15503                                  .L_lambda_simple_params_loop_0112:	; copy params
 15504 0000AF53 4883FE01                	cmp rsi, 1
 15505 0000AF57 740E                    	je .L_lambda_simple_params_end_0112
 15506 0000AF59 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15507 0000AF5E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15508 0000AF62 48FFC6                  	inc rsi
 15509 0000AF65 EBEC                    	jmp .L_lambda_simple_params_loop_0112
 15510                                  .L_lambda_simple_params_end_0112:
 15511 0000AF67 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15512 0000AF6A 4889C3                  	mov rbx, rax
 15513 0000AF6D 58                      	pop rax
 15514 0000AF6E C60004                  	mov byte [rax], T_closure
 15515 0000AF71 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15516 0000AF75 48C74009[82AF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0112
 15517 0000AF7D E94F090000              	jmp .L_lambda_simple_end_0112
 15518                                  .L_lambda_simple_code_0112:	; lambda-simple body
 15519 0000AF82 48837C241003            	cmp qword [rsp + 8 * 2], 3
 15520 0000AF88 740B                    	je .L_lambda_simple_arity_check_ok_0112
 15521 0000AF8A FF742410                	push qword [rsp + 8 * 2]
 15522 0000AF8E 6A03                    	push 3
 15523 0000AF90 E958D00000              	jmp L_error_incorrect_arity_simple
 15524                                  .L_lambda_simple_arity_check_ok_0112:
 15525 0000AF95 C8000000                	enter 0, 0
 15526 0000AF99 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15527 0000AF9E E891D00000              	call malloc
 15528 0000AFA3 50                      	push rax
 15529 0000AFA4 BF18000000              	mov rdi, 8 * 3	; new rib
 15530 0000AFA9 E886D00000              	call malloc
 15531 0000AFAE 50                      	push rax
 15532 0000AFAF BF18000000              	mov rdi, 8 * 3	; extended env
 15533 0000AFB4 E87BD00000              	call malloc
 15534 0000AFB9 488B7D10                	mov rdi, ENV
 15535 0000AFBD BE00000000              	mov rsi, 0
 15536 0000AFC2 BA01000000              	mov rdx, 1
 15537                                  .L_lambda_simple_env_loop_0113:	; ext_env[i + 1] <-- env[i]
 15538 0000AFC7 4883FE02                	cmp rsi, 2
 15539 0000AFCB 7410                    	je .L_lambda_simple_env_end_0113
 15540 0000AFCD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15541 0000AFD1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15542 0000AFD5 48FFC6                  	inc rsi
 15543 0000AFD8 48FFC2                  	inc rdx
 15544 0000AFDB EBEA                    	jmp .L_lambda_simple_env_loop_0113
 15545                                  .L_lambda_simple_env_end_0113:
 15546 0000AFDD 5B                      	pop rbx
 15547 0000AFDE BE00000000              	mov rsi, 0
 15548                                  .L_lambda_simple_params_loop_0113:	; copy params
 15549 0000AFE3 4883FE03                	cmp rsi, 3
 15550 0000AFE7 740E                    	je .L_lambda_simple_params_end_0113
 15551 0000AFE9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15552 0000AFEE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15553 0000AFF2 48FFC6                  	inc rsi
 15554 0000AFF5 EBEC                    	jmp .L_lambda_simple_params_loop_0113
 15555                                  .L_lambda_simple_params_end_0113:
 15556 0000AFF7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15557 0000AFFA 4889C3                  	mov rbx, rax
 15558 0000AFFD 58                      	pop rax
 15559 0000AFFE C60004                  	mov byte [rax], T_closure
 15560 0000B001 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15561 0000B005 48C74009[12B00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0113
 15562 0000B00D E9BB080000              	jmp .L_lambda_simple_end_0113
 15563                                  .L_lambda_simple_code_0113:	; lambda-simple body
 15564 0000B012 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15565 0000B018 740B                    	je .L_lambda_simple_arity_check_ok_0113
 15566 0000B01A FF742410                	push qword [rsp + 8 * 2]
 15567 0000B01E 6A02                    	push 2
 15568 0000B020 E9C8CF0000              	jmp L_error_incorrect_arity_simple
 15569                                  .L_lambda_simple_arity_check_ok_0113:
 15570 0000B025 C8000000                	enter 0, 0
 15571                                  	; preparing a non-tail-call
 15572 0000B029 488B4520                	mov rax, PARAM(0)	; param a
 15573 0000B02D 50                      	push rax
 15574 0000B02E 6A01                    	push 1	; arg count
 15575 0000B030 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 15576 0000B038 803805                  	cmp byte [rax], T_undefined
 15577 0000B03B 0F84C6CE0000            	je L_error_fvar_undefined
 15578 0000B041 803804                  	cmp byte [rax], T_closure
 15579 0000B044 0F8541CF0000            	jne L_error_non_closure
 15580 0000B04A FF7001                  	push SOB_CLOSURE_ENV(rax)
 15581 0000B04D FF5009                  	call SOB_CLOSURE_CODE(rax)
 15582 0000B050 483D[02000000]          	cmp rax, sob_boolean_false
 15583 0000B056 0F848D020000            	je .L_if_else_00ed
 15584                                  	; preparing a non-tail-call
 15585 0000B05C 488B4528                	mov rax, PARAM(1)	; param b
 15586 0000B060 50                      	push rax
 15587 0000B061 6A01                    	push 1	; arg count
 15588 0000B063 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 15589 0000B06B 803805                  	cmp byte [rax], T_undefined
 15590 0000B06E 0F8493CE0000            	je L_error_fvar_undefined
 15591 0000B074 803804                  	cmp byte [rax], T_closure
 15592 0000B077 0F850ECF0000            	jne L_error_non_closure
 15593 0000B07D FF7001                  	push SOB_CLOSURE_ENV(rax)
 15594 0000B080 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15595 0000B083 483D[02000000]          	cmp rax, sob_boolean_false
 15596 0000B089 746F                    	je .L_if_else_00e4
 15597                                  	; preparing a tail-call
 15598 0000B08B 488B4528                	mov rax, PARAM(1)	; param b
 15599 0000B08F 50                      	push rax
 15600 0000B090 488B4520                	mov rax, PARAM(0)	; param a
 15601 0000B094 50                      	push rax
 15602 0000B095 6A02                    	push 2	; arg count
 15603 0000B097 488B4510                	mov rax, ENV
 15604 0000B09B 488B00                  	mov rax, qword [rax + 8 * 0]
 15605 0000B09E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator-zz
 15606 0000B0A1 803804                  	cmp byte [rax], T_closure
 15607 0000B0A4 0F85E1CE0000            	jne L_error_non_closure
 15608 0000B0AA FF7001                  	push SOB_CLOSURE_ENV(rax)
 15609 0000B0AD FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15610 0000B0B0 FF7500                  	push qword[rbp]
 15611 0000B0B3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15612 0000B0B6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15613 0000B0BA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15614 0000B0BE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15615 0000B0C2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15616 0000B0C5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15617 0000B0C8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15618 0000B0CD 4983C103                	add r9, 3 	 ;for getting to the params
 15619 0000B0D1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15620 0000B0D5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15621                                  .L_tc_recycle_frame_loop_01a3:
 15622 0000B0D8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15623 0000B0DB 7410                    	je .L_tc_recycle_frame_done_01a3
 15624 0000B0DD 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15625 0000B0E0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15626 0000B0E3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15627 0000B0E7 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15628 0000B0EB EBEB                    	jmp .L_tc_recycle_frame_loop_01a3
 15629                                  .L_tc_recycle_frame_done_01a3:
 15630 0000B0ED 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15631 0000B0EE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15632 0000B0F2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15633 0000B0F5 E9EA010000              	jmp .L_if_end_00e4
 15634                                  .L_if_else_00e4:
 15635                                  	; preparing a non-tail-call
 15636 0000B0FA 488B4528                	mov rax, PARAM(1)	; param b
 15637 0000B0FE 50                      	push rax
 15638 0000B0FF 6A01                    	push 1	; arg count
 15639 0000B101 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 15640 0000B109 803805                  	cmp byte [rax], T_undefined
 15641 0000B10C 0F84F5CD0000            	je L_error_fvar_undefined
 15642 0000B112 803804                  	cmp byte [rax], T_closure
 15643 0000B115 0F8570CE0000            	jne L_error_non_closure
 15644 0000B11B FF7001                  	push SOB_CLOSURE_ENV(rax)
 15645 0000B11E FF5009                  	call SOB_CLOSURE_CODE(rax)
 15646 0000B121 483D[02000000]          	cmp rax, sob_boolean_false
 15647 0000B127 0F8493000000            	je .L_if_else_00e3
 15648                                  	; preparing a tail-call
 15649 0000B12D 488B4528                	mov rax, PARAM(1)	; param b
 15650 0000B131 50                      	push rax
 15651                                  	; preparing a non-tail-call
 15652 0000B132 488B4520                	mov rax, PARAM(0)	; param a
 15653 0000B136 50                      	push rax
 15654 0000B137 6A01                    	push 1	; arg count
 15655 0000B139 488B0425[C40F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 15656 0000B141 803805                  	cmp byte [rax], T_undefined
 15657 0000B144 0F84BDCD0000            	je L_error_fvar_undefined
 15658 0000B14A 803804                  	cmp byte [rax], T_closure
 15659 0000B14D 0F8538CE0000            	jne L_error_non_closure
 15660 0000B153 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15661 0000B156 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15662 0000B159 50                      	push rax
 15663 0000B15A 6A02                    	push 2	; arg count
 15664 0000B15C 488B4510                	mov rax, ENV
 15665 0000B160 488B00                  	mov rax, qword [rax + 8 * 0]
 15666 0000B163 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var comparator-qq
 15667 0000B167 803804                  	cmp byte [rax], T_closure
 15668 0000B16A 0F851BCE0000            	jne L_error_non_closure
 15669 0000B170 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15670 0000B173 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15671 0000B176 FF7500                  	push qword[rbp]
 15672 0000B179 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15673 0000B17C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15674 0000B180 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15675 0000B184 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15676 0000B188 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15677 0000B18B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15678 0000B18E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15679 0000B193 4983C103                	add r9, 3 	 ;for getting to the params
 15680 0000B197 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15681 0000B19B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15682                                  .L_tc_recycle_frame_loop_01a4:
 15683 0000B19E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15684 0000B1A1 7410                    	je .L_tc_recycle_frame_done_01a4
 15685 0000B1A3 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15686 0000B1A6 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15687 0000B1A9 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15688 0000B1AD 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15689 0000B1B1 EBEB                    	jmp .L_tc_recycle_frame_loop_01a4
 15690                                  .L_tc_recycle_frame_done_01a4:
 15691 0000B1B3 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15692 0000B1B4 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15693 0000B1B8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15694 0000B1BB E924010000              	jmp .L_if_end_00e3
 15695                                  .L_if_else_00e3:
 15696                                  	; preparing a non-tail-call
 15697 0000B1C0 488B4528                	mov rax, PARAM(1)	; param b
 15698 0000B1C4 50                      	push rax
 15699 0000B1C5 6A01                    	push 1	; arg count
 15700 0000B1C7 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 15701 0000B1CF 803805                  	cmp byte [rax], T_undefined
 15702 0000B1D2 0F842FCD0000            	je L_error_fvar_undefined
 15703 0000B1D8 803804                  	cmp byte [rax], T_closure
 15704 0000B1DB 0F85AACD0000            	jne L_error_non_closure
 15705 0000B1E1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15706 0000B1E4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15707 0000B1E7 483D[02000000]          	cmp rax, sob_boolean_false
 15708 0000B1ED 0F8490000000            	je .L_if_else_00e2
 15709                                  	; preparing a tail-call
 15710 0000B1F3 488B4528                	mov rax, PARAM(1)	; param b
 15711 0000B1F7 50                      	push rax
 15712                                  	; preparing a non-tail-call
 15713 0000B1F8 488B4520                	mov rax, PARAM(0)	; param a
 15714 0000B1FC 50                      	push rax
 15715 0000B1FD 6A01                    	push 1	; arg count
 15716 0000B1FF 488B0425[D1130000]      	mov rax, qword [free_var_90]	; free var integer->real
 15717 0000B207 803805                  	cmp byte [rax], T_undefined
 15718 0000B20A 0F84F7CC0000            	je L_error_fvar_undefined
 15719 0000B210 803804                  	cmp byte [rax], T_closure
 15720 0000B213 0F8572CD0000            	jne L_error_non_closure
 15721 0000B219 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15722 0000B21C FF5009                  	call SOB_CLOSURE_CODE(rax)
 15723 0000B21F 50                      	push rax
 15724 0000B220 6A02                    	push 2	; arg count
 15725 0000B222 488B4510                	mov rax, ENV
 15726 0000B226 488B00                  	mov rax, qword [rax + 8 * 0]
 15727 0000B229 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 15728 0000B22D 803804                  	cmp byte [rax], T_closure
 15729 0000B230 0F8555CD0000            	jne L_error_non_closure
 15730 0000B236 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15731 0000B239 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15732 0000B23C FF7500                  	push qword[rbp]
 15733 0000B23F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15734 0000B242 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15735 0000B246 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15736 0000B24A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15737 0000B24E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15738 0000B251 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15739 0000B254 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15740 0000B259 4983C103                	add r9, 3 	 ;for getting to the params
 15741 0000B25D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15742 0000B261 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15743                                  .L_tc_recycle_frame_loop_01a5:
 15744 0000B264 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15745 0000B267 7410                    	je .L_tc_recycle_frame_done_01a5
 15746 0000B269 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15747 0000B26C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15748 0000B26F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15749 0000B273 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15750 0000B277 EBEB                    	jmp .L_tc_recycle_frame_loop_01a5
 15751                                  .L_tc_recycle_frame_done_01a5:
 15752 0000B279 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15753 0000B27A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15754 0000B27E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15755 0000B281 EB61                    	jmp .L_if_end_00e2
 15756                                  .L_if_else_00e2:
 15757                                  	; preparing a tail-call
 15758 0000B283 6A00                    	push 0	; arg count
 15759 0000B285 488B4510                	mov rax, ENV
 15760 0000B289 488B4008                	mov rax, qword [rax + 8 * 1]
 15761 0000B28D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 15762 0000B290 803804                  	cmp byte [rax], T_closure
 15763 0000B293 0F85F2CC0000            	jne L_error_non_closure
 15764 0000B299 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15765 0000B29C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15766 0000B29F FF7500                  	push qword[rbp]
 15767 0000B2A2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15768 0000B2A5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15769 0000B2A9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15770 0000B2AD 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15771 0000B2B1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15772 0000B2B4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15773 0000B2B7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15774 0000B2BC 4983C103                	add r9, 3 	 ;for getting to the params
 15775 0000B2C0 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15776 0000B2C4 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15777                                  .L_tc_recycle_frame_loop_01a6:
 15778 0000B2C7 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15779 0000B2CA 7410                    	je .L_tc_recycle_frame_done_01a6
 15780 0000B2CC 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15781 0000B2CF 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15782 0000B2D2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15783 0000B2D6 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15784 0000B2DA EBEB                    	jmp .L_tc_recycle_frame_loop_01a6
 15785                                  .L_tc_recycle_frame_done_01a6:
 15786 0000B2DC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15787 0000B2DD 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15788 0000B2E1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15789                                  .L_if_end_00e2:
 15790                                  .L_if_end_00e3:
 15791                                  .L_if_end_00e4:
 15792 0000B2E4 E9E0050000              	jmp .L_if_end_00ed
 15793                                  .L_if_else_00ed:
 15794                                  	; preparing a non-tail-call
 15795 0000B2E9 488B4520                	mov rax, PARAM(0)	; param a
 15796 0000B2ED 50                      	push rax
 15797 0000B2EE 6A01                    	push 1	; arg count
 15798 0000B2F0 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 15799 0000B2F8 803805                  	cmp byte [rax], T_undefined
 15800 0000B2FB 0F8406CC0000            	je L_error_fvar_undefined
 15801 0000B301 803804                  	cmp byte [rax], T_closure
 15802 0000B304 0F8581CC0000            	jne L_error_non_closure
 15803 0000B30A FF7001                  	push SOB_CLOSURE_ENV(rax)
 15804 0000B30D FF5009                  	call SOB_CLOSURE_CODE(rax)
 15805 0000B310 483D[02000000]          	cmp rax, sob_boolean_false
 15806 0000B316 0F848E020000            	je .L_if_else_00ec
 15807                                  	; preparing a non-tail-call
 15808 0000B31C 488B4528                	mov rax, PARAM(1)	; param b
 15809 0000B320 50                      	push rax
 15810 0000B321 6A01                    	push 1	; arg count
 15811 0000B323 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 15812 0000B32B 803805                  	cmp byte [rax], T_undefined
 15813 0000B32E 0F84D3CB0000            	je L_error_fvar_undefined
 15814 0000B334 803804                  	cmp byte [rax], T_closure
 15815 0000B337 0F854ECC0000            	jne L_error_non_closure
 15816 0000B33D FF7001                  	push SOB_CLOSURE_ENV(rax)
 15817 0000B340 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15818 0000B343 483D[02000000]          	cmp rax, sob_boolean_false
 15819 0000B349 0F8493000000            	je .L_if_else_00e7
 15820                                  	; preparing a tail-call
 15821                                  	; preparing a non-tail-call
 15822 0000B34F 488B4528                	mov rax, PARAM(1)	; param b
 15823 0000B353 50                      	push rax
 15824 0000B354 6A01                    	push 1	; arg count
 15825 0000B356 488B0425[C40F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 15826 0000B35E 803805                  	cmp byte [rax], T_undefined
 15827 0000B361 0F84A0CB0000            	je L_error_fvar_undefined
 15828 0000B367 803804                  	cmp byte [rax], T_closure
 15829 0000B36A 0F851BCC0000            	jne L_error_non_closure
 15830 0000B370 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15831 0000B373 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15832 0000B376 50                      	push rax
 15833 0000B377 488B4520                	mov rax, PARAM(0)	; param a
 15834 0000B37B 50                      	push rax
 15835 0000B37C 6A02                    	push 2	; arg count
 15836 0000B37E 488B4510                	mov rax, ENV
 15837 0000B382 488B00                  	mov rax, qword [rax + 8 * 0]
 15838 0000B385 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var comparator-qq
 15839 0000B389 803804                  	cmp byte [rax], T_closure
 15840 0000B38C 0F85F9CB0000            	jne L_error_non_closure
 15841 0000B392 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15842 0000B395 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15843 0000B398 FF7500                  	push qword[rbp]
 15844 0000B39B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15845 0000B39E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15846 0000B3A2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15847 0000B3A6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15848 0000B3AA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15849 0000B3AD 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15850 0000B3B0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15851 0000B3B5 4983C103                	add r9, 3 	 ;for getting to the params
 15852 0000B3B9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15853 0000B3BD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15854                                  .L_tc_recycle_frame_loop_01a7:
 15855 0000B3C0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15856 0000B3C3 7410                    	je .L_tc_recycle_frame_done_01a7
 15857 0000B3C5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15858 0000B3C8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15859 0000B3CB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15860 0000B3CF 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15861 0000B3D3 EBEB                    	jmp .L_tc_recycle_frame_loop_01a7
 15862                                  .L_tc_recycle_frame_done_01a7:
 15863 0000B3D5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15864 0000B3D6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15865 0000B3DA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15866 0000B3DD E9C3010000              	jmp .L_if_end_00e7
 15867                                  .L_if_else_00e7:
 15868                                  	; preparing a non-tail-call
 15869 0000B3E2 488B4528                	mov rax, PARAM(1)	; param b
 15870 0000B3E6 50                      	push rax
 15871 0000B3E7 6A01                    	push 1	; arg count
 15872 0000B3E9 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 15873 0000B3F1 803805                  	cmp byte [rax], T_undefined
 15874 0000B3F4 0F840DCB0000            	je L_error_fvar_undefined
 15875 0000B3FA 803804                  	cmp byte [rax], T_closure
 15876 0000B3FD 0F8588CB0000            	jne L_error_non_closure
 15877 0000B403 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15878 0000B406 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15879 0000B409 483D[02000000]          	cmp rax, sob_boolean_false
 15880 0000B40F 7470                    	je .L_if_else_00e6
 15881                                  	; preparing a tail-call
 15882 0000B411 488B4528                	mov rax, PARAM(1)	; param b
 15883 0000B415 50                      	push rax
 15884 0000B416 488B4520                	mov rax, PARAM(0)	; param a
 15885 0000B41A 50                      	push rax
 15886 0000B41B 6A02                    	push 2	; arg count
 15887 0000B41D 488B4510                	mov rax, ENV
 15888 0000B421 488B00                  	mov rax, qword [rax + 8 * 0]
 15889 0000B424 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var comparator-qq
 15890 0000B428 803804                  	cmp byte [rax], T_closure
 15891 0000B42B 0F855ACB0000            	jne L_error_non_closure
 15892 0000B431 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15893 0000B434 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15894 0000B437 FF7500                  	push qword[rbp]
 15895 0000B43A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15896 0000B43D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15897 0000B441 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15898 0000B445 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15899 0000B449 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15900 0000B44C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15901 0000B44F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15902 0000B454 4983C103                	add r9, 3 	 ;for getting to the params
 15903 0000B458 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15904 0000B45C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15905                                  .L_tc_recycle_frame_loop_01a8:
 15906 0000B45F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15907 0000B462 7410                    	je .L_tc_recycle_frame_done_01a8
 15908 0000B464 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15909 0000B467 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15910 0000B46A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15911 0000B46E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15912 0000B472 EBEB                    	jmp .L_tc_recycle_frame_loop_01a8
 15913                                  .L_tc_recycle_frame_done_01a8:
 15914 0000B474 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15915 0000B475 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15916 0000B479 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15917 0000B47C E924010000              	jmp .L_if_end_00e6
 15918                                  .L_if_else_00e6:
 15919                                  	; preparing a non-tail-call
 15920 0000B481 488B4528                	mov rax, PARAM(1)	; param b
 15921 0000B485 50                      	push rax
 15922 0000B486 6A01                    	push 1	; arg count
 15923 0000B488 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 15924 0000B490 803805                  	cmp byte [rax], T_undefined
 15925 0000B493 0F846ECA0000            	je L_error_fvar_undefined
 15926 0000B499 803804                  	cmp byte [rax], T_closure
 15927 0000B49C 0F85E9CA0000            	jne L_error_non_closure
 15928 0000B4A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15929 0000B4A5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15930 0000B4A8 483D[02000000]          	cmp rax, sob_boolean_false
 15931 0000B4AE 0F8490000000            	je .L_if_else_00e5
 15932                                  	; preparing a tail-call
 15933 0000B4B4 488B4528                	mov rax, PARAM(1)	; param b
 15934 0000B4B8 50                      	push rax
 15935                                  	; preparing a non-tail-call
 15936 0000B4B9 488B4520                	mov rax, PARAM(0)	; param a
 15937 0000B4BD 50                      	push rax
 15938 0000B4BE 6A01                    	push 1	; arg count
 15939 0000B4C0 488B0425[9E130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 15940 0000B4C8 803805                  	cmp byte [rax], T_undefined
 15941 0000B4CB 0F8436CA0000            	je L_error_fvar_undefined
 15942 0000B4D1 803804                  	cmp byte [rax], T_closure
 15943 0000B4D4 0F85B1CA0000            	jne L_error_non_closure
 15944 0000B4DA FF7001                  	push SOB_CLOSURE_ENV(rax)
 15945 0000B4DD FF5009                  	call SOB_CLOSURE_CODE(rax)
 15946 0000B4E0 50                      	push rax
 15947 0000B4E1 6A02                    	push 2	; arg count
 15948 0000B4E3 488B4510                	mov rax, ENV
 15949 0000B4E7 488B00                  	mov rax, qword [rax + 8 * 0]
 15950 0000B4EA 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 15951 0000B4EE 803804                  	cmp byte [rax], T_closure
 15952 0000B4F1 0F8594CA0000            	jne L_error_non_closure
 15953 0000B4F7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15954 0000B4FA FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15955 0000B4FD FF7500                  	push qword[rbp]
 15956 0000B500 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15957 0000B503 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15958 0000B507 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15959 0000B50B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15960 0000B50F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15961 0000B512 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15962 0000B515 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15963 0000B51A 4983C103                	add r9, 3 	 ;for getting to the params
 15964 0000B51E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15965 0000B522 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15966                                  .L_tc_recycle_frame_loop_01a9:
 15967 0000B525 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15968 0000B528 7410                    	je .L_tc_recycle_frame_done_01a9
 15969 0000B52A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15970 0000B52D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15971 0000B530 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15972 0000B534 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15973 0000B538 EBEB                    	jmp .L_tc_recycle_frame_loop_01a9
 15974                                  .L_tc_recycle_frame_done_01a9:
 15975 0000B53A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15976 0000B53B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15977 0000B53F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15978 0000B542 EB61                    	jmp .L_if_end_00e5
 15979                                  .L_if_else_00e5:
 15980                                  	; preparing a tail-call
 15981 0000B544 6A00                    	push 0	; arg count
 15982 0000B546 488B4510                	mov rax, ENV
 15983 0000B54A 488B4008                	mov rax, qword [rax + 8 * 1]
 15984 0000B54E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 15985 0000B551 803804                  	cmp byte [rax], T_closure
 15986 0000B554 0F8531CA0000            	jne L_error_non_closure
 15987 0000B55A FF7001                  	push SOB_CLOSURE_ENV(rax)
 15988 0000B55D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15989 0000B560 FF7500                  	push qword[rbp]
 15990 0000B563 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15991 0000B566 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15992 0000B56A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15993 0000B56E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15994 0000B572 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15995 0000B575 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15996 0000B578 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15997 0000B57D 4983C103                	add r9, 3 	 ;for getting to the params
 15998 0000B581 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15999 0000B585 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16000                                  .L_tc_recycle_frame_loop_01aa:
 16001 0000B588 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16002 0000B58B 7410                    	je .L_tc_recycle_frame_done_01aa
 16003 0000B58D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16004 0000B590 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16005 0000B593 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16006 0000B597 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16007 0000B59B EBEB                    	jmp .L_tc_recycle_frame_loop_01aa
 16008                                  .L_tc_recycle_frame_done_01aa:
 16009 0000B59D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16010 0000B59E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16011 0000B5A2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16012                                  .L_if_end_00e5:
 16013                                  .L_if_end_00e6:
 16014                                  .L_if_end_00e7:
 16015 0000B5A5 E91F030000              	jmp .L_if_end_00ec
 16016                                  .L_if_else_00ec:
 16017                                  	; preparing a non-tail-call
 16018 0000B5AA 488B4520                	mov rax, PARAM(0)	; param a
 16019 0000B5AE 50                      	push rax
 16020 0000B5AF 6A01                    	push 1	; arg count
 16021 0000B5B1 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 16022 0000B5B9 803805                  	cmp byte [rax], T_undefined
 16023 0000B5BC 0F8445C90000            	je L_error_fvar_undefined
 16024 0000B5C2 803804                  	cmp byte [rax], T_closure
 16025 0000B5C5 0F85C0C90000            	jne L_error_non_closure
 16026 0000B5CB FF7001                  	push SOB_CLOSURE_ENV(rax)
 16027 0000B5CE FF5009                  	call SOB_CLOSURE_CODE(rax)
 16028 0000B5D1 483D[02000000]          	cmp rax, sob_boolean_false
 16029 0000B5D7 0F848B020000            	je .L_if_else_00eb
 16030                                  	; preparing a non-tail-call
 16031 0000B5DD 488B4528                	mov rax, PARAM(1)	; param b
 16032 0000B5E1 50                      	push rax
 16033 0000B5E2 6A01                    	push 1	; arg count
 16034 0000B5E4 488B0425[E2130000]      	mov rax, qword [free_var_91]	; free var integer?
 16035 0000B5EC 803805                  	cmp byte [rax], T_undefined
 16036 0000B5EF 0F8412C90000            	je L_error_fvar_undefined
 16037 0000B5F5 803804                  	cmp byte [rax], T_closure
 16038 0000B5F8 0F858DC90000            	jne L_error_non_closure
 16039 0000B5FE FF7001                  	push SOB_CLOSURE_ENV(rax)
 16040 0000B601 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16041 0000B604 483D[02000000]          	cmp rax, sob_boolean_false
 16042 0000B60A 0F8493000000            	je .L_if_else_00ea
 16043                                  	; preparing a tail-call
 16044                                  	; preparing a non-tail-call
 16045 0000B610 488B4528                	mov rax, PARAM(1)	; param b
 16046 0000B614 50                      	push rax
 16047 0000B615 6A01                    	push 1	; arg count
 16048 0000B617 488B0425[D1130000]      	mov rax, qword [free_var_90]	; free var integer->real
 16049 0000B61F 803805                  	cmp byte [rax], T_undefined
 16050 0000B622 0F84DFC80000            	je L_error_fvar_undefined
 16051 0000B628 803804                  	cmp byte [rax], T_closure
 16052 0000B62B 0F855AC90000            	jne L_error_non_closure
 16053 0000B631 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16054 0000B634 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16055 0000B637 50                      	push rax
 16056 0000B638 488B4520                	mov rax, PARAM(0)	; param a
 16057 0000B63C 50                      	push rax
 16058 0000B63D 6A02                    	push 2	; arg count
 16059 0000B63F 488B4510                	mov rax, ENV
 16060 0000B643 488B00                  	mov rax, qword [rax + 8 * 0]
 16061 0000B646 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 16062 0000B64A 803804                  	cmp byte [rax], T_closure
 16063 0000B64D 0F8538C90000            	jne L_error_non_closure
 16064 0000B653 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16065 0000B656 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16066 0000B659 FF7500                  	push qword[rbp]
 16067 0000B65C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16068 0000B65F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16069 0000B663 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16070 0000B667 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16071 0000B66B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16072 0000B66E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16073 0000B671 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16074 0000B676 4983C103                	add r9, 3 	 ;for getting to the params
 16075 0000B67A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16076 0000B67E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16077                                  .L_tc_recycle_frame_loop_01ab:
 16078 0000B681 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16079 0000B684 7410                    	je .L_tc_recycle_frame_done_01ab
 16080 0000B686 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16081 0000B689 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16082 0000B68C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16083 0000B690 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16084 0000B694 EBEB                    	jmp .L_tc_recycle_frame_loop_01ab
 16085                                  .L_tc_recycle_frame_done_01ab:
 16086 0000B696 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16087 0000B697 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16088 0000B69B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16089 0000B69E E9C3010000              	jmp .L_if_end_00ea
 16090                                  .L_if_else_00ea:
 16091                                  	; preparing a non-tail-call
 16092 0000B6A3 488B4528                	mov rax, PARAM(1)	; param b
 16093 0000B6A7 50                      	push rax
 16094 0000B6A8 6A01                    	push 1	; arg count
 16095 0000B6AA 488B0425[AF130000]      	mov rax, qword [free_var_88]	; free var fraction?
 16096 0000B6B2 803805                  	cmp byte [rax], T_undefined
 16097 0000B6B5 0F844CC80000            	je L_error_fvar_undefined
 16098 0000B6BB 803804                  	cmp byte [rax], T_closure
 16099 0000B6BE 0F85C7C80000            	jne L_error_non_closure
 16100 0000B6C4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16101 0000B6C7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16102 0000B6CA 483D[02000000]          	cmp rax, sob_boolean_false
 16103 0000B6D0 0F8493000000            	je .L_if_else_00e9
 16104                                  	; preparing a tail-call
 16105                                  	; preparing a non-tail-call
 16106 0000B6D6 488B4528                	mov rax, PARAM(1)	; param b
 16107 0000B6DA 50                      	push rax
 16108 0000B6DB 6A01                    	push 1	; arg count
 16109 0000B6DD 488B0425[9E130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 16110 0000B6E5 803805                  	cmp byte [rax], T_undefined
 16111 0000B6E8 0F8419C80000            	je L_error_fvar_undefined
 16112 0000B6EE 803804                  	cmp byte [rax], T_closure
 16113 0000B6F1 0F8594C80000            	jne L_error_non_closure
 16114 0000B6F7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16115 0000B6FA FF5009                  	call SOB_CLOSURE_CODE(rax)
 16116 0000B6FD 50                      	push rax
 16117 0000B6FE 488B4520                	mov rax, PARAM(0)	; param a
 16118 0000B702 50                      	push rax
 16119 0000B703 6A02                    	push 2	; arg count
 16120 0000B705 488B4510                	mov rax, ENV
 16121 0000B709 488B00                  	mov rax, qword [rax + 8 * 0]
 16122 0000B70C 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 16123 0000B710 803804                  	cmp byte [rax], T_closure
 16124 0000B713 0F8572C80000            	jne L_error_non_closure
 16125 0000B719 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16126 0000B71C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16127 0000B71F FF7500                  	push qword[rbp]
 16128 0000B722 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16129 0000B725 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16130 0000B729 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16131 0000B72D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16132 0000B731 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16133 0000B734 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16134 0000B737 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16135 0000B73C 4983C103                	add r9, 3 	 ;for getting to the params
 16136 0000B740 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16137 0000B744 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16138                                  .L_tc_recycle_frame_loop_01ac:
 16139 0000B747 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16140 0000B74A 7410                    	je .L_tc_recycle_frame_done_01ac
 16141 0000B74C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16142 0000B74F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16143 0000B752 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16144 0000B756 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16145 0000B75A EBEB                    	jmp .L_tc_recycle_frame_loop_01ac
 16146                                  .L_tc_recycle_frame_done_01ac:
 16147 0000B75C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16148 0000B75D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16149 0000B761 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16150 0000B764 E9FD000000              	jmp .L_if_end_00e9
 16151                                  .L_if_else_00e9:
 16152                                  	; preparing a non-tail-call
 16153 0000B769 488B4528                	mov rax, PARAM(1)	; param b
 16154 0000B76D 50                      	push rax
 16155 0000B76E 6A01                    	push 1	; arg count
 16156 0000B770 488B0425[8B150000]      	mov rax, qword [free_var_116]	; free var real?
 16157 0000B778 803805                  	cmp byte [rax], T_undefined
 16158 0000B77B 0F8486C70000            	je L_error_fvar_undefined
 16159 0000B781 803804                  	cmp byte [rax], T_closure
 16160 0000B784 0F8501C80000            	jne L_error_non_closure
 16161 0000B78A FF7001                  	push SOB_CLOSURE_ENV(rax)
 16162 0000B78D FF5009                  	call SOB_CLOSURE_CODE(rax)
 16163 0000B790 483D[02000000]          	cmp rax, sob_boolean_false
 16164 0000B796 746D                    	je .L_if_else_00e8
 16165                                  	; preparing a tail-call
 16166 0000B798 488B4528                	mov rax, PARAM(1)	; param b
 16167 0000B79C 50                      	push rax
 16168 0000B79D 488B4520                	mov rax, PARAM(0)	; param a
 16169 0000B7A1 50                      	push rax
 16170 0000B7A2 6A02                    	push 2	; arg count
 16171 0000B7A4 488B4510                	mov rax, ENV
 16172 0000B7A8 488B00                  	mov rax, qword [rax + 8 * 0]
 16173 0000B7AB 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 16174 0000B7AF 803804                  	cmp byte [rax], T_closure
 16175 0000B7B2 0F85D3C70000            	jne L_error_non_closure
 16176 0000B7B8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16177 0000B7BB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16178 0000B7BE FF7500                  	push qword[rbp]
 16179 0000B7C1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16180 0000B7C4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16181 0000B7C8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16182 0000B7CC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16183 0000B7D0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16184 0000B7D3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16185 0000B7D6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16186 0000B7DB 4983C103                	add r9, 3 	 ;for getting to the params
 16187 0000B7DF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16188 0000B7E3 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16189                                  .L_tc_recycle_frame_loop_01ad:
 16190 0000B7E6 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16191 0000B7E9 7410                    	je .L_tc_recycle_frame_done_01ad
 16192 0000B7EB 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16193 0000B7EE 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16194 0000B7F1 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16195 0000B7F5 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16196 0000B7F9 EBEB                    	jmp .L_tc_recycle_frame_loop_01ad
 16197                                  .L_tc_recycle_frame_done_01ad:
 16198 0000B7FB 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16199 0000B7FC 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16200 0000B800 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16201 0000B803 EB61                    	jmp .L_if_end_00e8
 16202                                  .L_if_else_00e8:
 16203                                  	; preparing a tail-call
 16204 0000B805 6A00                    	push 0	; arg count
 16205 0000B807 488B4510                	mov rax, ENV
 16206 0000B80B 488B4008                	mov rax, qword [rax + 8 * 1]
 16207 0000B80F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 16208 0000B812 803804                  	cmp byte [rax], T_closure
 16209 0000B815 0F8570C70000            	jne L_error_non_closure
 16210 0000B81B FF7001                  	push SOB_CLOSURE_ENV(rax)
 16211 0000B81E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16212 0000B821 FF7500                  	push qword[rbp]
 16213 0000B824 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16214 0000B827 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16215 0000B82B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16216 0000B82F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16217 0000B833 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16218 0000B836 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16219 0000B839 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16220 0000B83E 4983C103                	add r9, 3 	 ;for getting to the params
 16221 0000B842 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16222 0000B846 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16223                                  .L_tc_recycle_frame_loop_01ae:
 16224 0000B849 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16225 0000B84C 7410                    	je .L_tc_recycle_frame_done_01ae
 16226 0000B84E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16227 0000B851 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16228 0000B854 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16229 0000B858 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16230 0000B85C EBEB                    	jmp .L_tc_recycle_frame_loop_01ae
 16231                                  .L_tc_recycle_frame_done_01ae:
 16232 0000B85E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16233 0000B85F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16234 0000B863 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16235                                  .L_if_end_00e8:
 16236                                  .L_if_end_00e9:
 16237                                  .L_if_end_00ea:
 16238 0000B866 EB61                    	jmp .L_if_end_00eb
 16239                                  .L_if_else_00eb:
 16240                                  	; preparing a tail-call
 16241 0000B868 6A00                    	push 0	; arg count
 16242 0000B86A 488B4510                	mov rax, ENV
 16243 0000B86E 488B4008                	mov rax, qword [rax + 8 * 1]
 16244 0000B872 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 16245 0000B875 803804                  	cmp byte [rax], T_closure
 16246 0000B878 0F850DC70000            	jne L_error_non_closure
 16247 0000B87E FF7001                  	push SOB_CLOSURE_ENV(rax)
 16248 0000B881 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16249 0000B884 FF7500                  	push qword[rbp]
 16250 0000B887 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16251 0000B88A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16252 0000B88E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16253 0000B892 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16254 0000B896 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16255 0000B899 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16256 0000B89C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16257 0000B8A1 4983C103                	add r9, 3 	 ;for getting to the params
 16258 0000B8A5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16259 0000B8A9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16260                                  .L_tc_recycle_frame_loop_01af:
 16261 0000B8AC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16262 0000B8AF 7410                    	je .L_tc_recycle_frame_done_01af
 16263 0000B8B1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16264 0000B8B4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16265 0000B8B7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16266 0000B8BB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16267 0000B8BF EBEB                    	jmp .L_tc_recycle_frame_loop_01af
 16268                                  .L_tc_recycle_frame_done_01af:
 16269 0000B8C1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16270 0000B8C2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16271 0000B8C6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16272                                  .L_if_end_00eb:
 16273                                  .L_if_end_00ec:
 16274                                  .L_if_end_00ed:
 16275 0000B8C9 C9                      	leave
 16276 0000B8CA C22000                  	ret AND_KILL_FRAME(2)
 16277                                  .L_lambda_simple_end_0113:	; new closure is in rax
 16278 0000B8CD C9                      	leave
 16279 0000B8CE C22800                  	ret AND_KILL_FRAME(3)
 16280                                  .L_lambda_simple_end_0112:	; new closure is in rax
 16281 0000B8D1 50                      	push rax
 16282 0000B8D2 6A01                    	push 1	; arg count
 16283 0000B8D4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16284 0000B8D9 E856C70000              	call malloc
 16285 0000B8DE 50                      	push rax
 16286 0000B8DF BF08000000              	mov rdi, 8 * 1	; new rib
 16287 0000B8E4 E84BC70000              	call malloc
 16288 0000B8E9 50                      	push rax
 16289 0000B8EA BF10000000              	mov rdi, 8 * 2	; extended env
 16290 0000B8EF E840C70000              	call malloc
 16291 0000B8F4 488B7D10                	mov rdi, ENV
 16292 0000B8F8 BE00000000              	mov rsi, 0
 16293 0000B8FD BA01000000              	mov rdx, 1
 16294                                  .L_lambda_simple_env_loop_0114:	; ext_env[i + 1] <-- env[i]
 16295 0000B902 4883FE01                	cmp rsi, 1
 16296 0000B906 7410                    	je .L_lambda_simple_env_end_0114
 16297 0000B908 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16298 0000B90C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16299 0000B910 48FFC6                  	inc rsi
 16300 0000B913 48FFC2                  	inc rdx
 16301 0000B916 EBEA                    	jmp .L_lambda_simple_env_loop_0114
 16302                                  .L_lambda_simple_env_end_0114:
 16303 0000B918 5B                      	pop rbx
 16304 0000B919 BE00000000              	mov rsi, 0
 16305                                  .L_lambda_simple_params_loop_0114:	; copy params
 16306 0000B91E 4883FE01                	cmp rsi, 1
 16307 0000B922 740E                    	je .L_lambda_simple_params_end_0114
 16308 0000B924 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16309 0000B929 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16310 0000B92D 48FFC6                  	inc rsi
 16311 0000B930 EBEC                    	jmp .L_lambda_simple_params_loop_0114
 16312                                  .L_lambda_simple_params_end_0114:
 16313 0000B932 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16314 0000B935 4889C3                  	mov rbx, rax
 16315 0000B938 58                      	pop rax
 16316 0000B939 C60004                  	mov byte [rax], T_closure
 16317 0000B93C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16318 0000B940 48C74009[4DB90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0114
 16319 0000B948 E98D100000              	jmp .L_lambda_simple_end_0114
 16320                                  .L_lambda_simple_code_0114:	; lambda-simple body
 16321 0000B94D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16322 0000B953 740B                    	je .L_lambda_simple_arity_check_ok_0114
 16323 0000B955 FF742410                	push qword [rsp + 8 * 2]
 16324 0000B959 6A01                    	push 1
 16325 0000B95B E98DC60000              	jmp L_error_incorrect_arity_simple
 16326                                  .L_lambda_simple_arity_check_ok_0114:
 16327 0000B960 C8000000                	enter 0, 0
 16328                                  	; preparing a tail-call
 16329                                  	; preparing a non-tail-call
 16330 0000B964 488B0425[2B0F0000]      	mov rax, qword [free_var_20]	; free var __bin-less-than-rr
 16331 0000B96C 803805                  	cmp byte [rax], T_undefined
 16332 0000B96F 0F8492C50000            	je L_error_fvar_undefined
 16333 0000B975 50                      	push rax
 16334 0000B976 488B0425[1A0F0000]      	mov rax, qword [free_var_19]	; free var __bin-less-than-qq
 16335 0000B97E 803805                  	cmp byte [rax], T_undefined
 16336 0000B981 0F8480C50000            	je L_error_fvar_undefined
 16337 0000B987 50                      	push rax
 16338 0000B988 488B0425[3C0F0000]      	mov rax, qword [free_var_21]	; free var __bin-less-than-zz
 16339 0000B990 803805                  	cmp byte [rax], T_undefined
 16340 0000B993 0F846EC50000            	je L_error_fvar_undefined
 16341 0000B999 50                      	push rax
 16342 0000B99A 6A03                    	push 3	; arg count
 16343 0000B99C 488B4520                	mov rax, PARAM(0)	; param make-bin-comparator
 16344 0000B9A0 803804                  	cmp byte [rax], T_closure
 16345 0000B9A3 0F85E2C50000            	jne L_error_non_closure
 16346 0000B9A9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16347 0000B9AC FF5009                  	call SOB_CLOSURE_CODE(rax)
 16348 0000B9AF 50                      	push rax
 16349 0000B9B0 6A01                    	push 1	; arg count
 16350 0000B9B2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16351 0000B9B7 E878C60000              	call malloc
 16352 0000B9BC 50                      	push rax
 16353 0000B9BD BF08000000              	mov rdi, 8 * 1	; new rib
 16354 0000B9C2 E86DC60000              	call malloc
 16355 0000B9C7 50                      	push rax
 16356 0000B9C8 BF18000000              	mov rdi, 8 * 3	; extended env
 16357 0000B9CD E862C60000              	call malloc
 16358 0000B9D2 488B7D10                	mov rdi, ENV
 16359 0000B9D6 BE00000000              	mov rsi, 0
 16360 0000B9DB BA01000000              	mov rdx, 1
 16361                                  .L_lambda_simple_env_loop_0115:	; ext_env[i + 1] <-- env[i]
 16362 0000B9E0 4883FE02                	cmp rsi, 2
 16363 0000B9E4 7410                    	je .L_lambda_simple_env_end_0115
 16364 0000B9E6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16365 0000B9EA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16366 0000B9EE 48FFC6                  	inc rsi
 16367 0000B9F1 48FFC2                  	inc rdx
 16368 0000B9F4 EBEA                    	jmp .L_lambda_simple_env_loop_0115
 16369                                  .L_lambda_simple_env_end_0115:
 16370 0000B9F6 5B                      	pop rbx
 16371 0000B9F7 BE00000000              	mov rsi, 0
 16372                                  .L_lambda_simple_params_loop_0115:	; copy params
 16373 0000B9FC 4883FE01                	cmp rsi, 1
 16374 0000BA00 740E                    	je .L_lambda_simple_params_end_0115
 16375 0000BA02 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16376 0000BA07 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16377 0000BA0B 48FFC6                  	inc rsi
 16378 0000BA0E EBEC                    	jmp .L_lambda_simple_params_loop_0115
 16379                                  .L_lambda_simple_params_end_0115:
 16380 0000BA10 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16381 0000BA13 4889C3                  	mov rbx, rax
 16382 0000BA16 58                      	pop rax
 16383 0000BA17 C60004                  	mov byte [rax], T_closure
 16384 0000BA1A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16385 0000BA1E 48C74009[2BBA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0115
 16386 0000BA26 E9570F0000              	jmp .L_lambda_simple_end_0115
 16387                                  .L_lambda_simple_code_0115:	; lambda-simple body
 16388 0000BA2B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16389 0000BA31 740B                    	je .L_lambda_simple_arity_check_ok_0115
 16390 0000BA33 FF742410                	push qword [rsp + 8 * 2]
 16391 0000BA37 6A01                    	push 1
 16392 0000BA39 E9AFC50000              	jmp L_error_incorrect_arity_simple
 16393                                  .L_lambda_simple_arity_check_ok_0115:
 16394 0000BA3E C8000000                	enter 0, 0
 16395                                  	; preparing a tail-call
 16396                                  	; preparing a non-tail-call
 16397 0000BA42 488B0425[F80E0000]      	mov rax, qword [free_var_17]	; free var __bin-equal-rr
 16398 0000BA4A 803805                  	cmp byte [rax], T_undefined
 16399 0000BA4D 0F84B4C40000            	je L_error_fvar_undefined
 16400 0000BA53 50                      	push rax
 16401 0000BA54 488B0425[E70E0000]      	mov rax, qword [free_var_16]	; free var __bin-equal-qq
 16402 0000BA5C 803805                  	cmp byte [rax], T_undefined
 16403 0000BA5F 0F84A2C40000            	je L_error_fvar_undefined
 16404 0000BA65 50                      	push rax
 16405 0000BA66 488B0425[090F0000]      	mov rax, qword [free_var_18]	; free var __bin-equal-zz
 16406 0000BA6E 803805                  	cmp byte [rax], T_undefined
 16407 0000BA71 0F8490C40000            	je L_error_fvar_undefined
 16408 0000BA77 50                      	push rax
 16409 0000BA78 6A03                    	push 3	; arg count
 16410 0000BA7A 488B4510                	mov rax, ENV
 16411 0000BA7E 488B00                  	mov rax, qword [rax + 8 * 0]
 16412 0000BA81 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var make-bin-comparator
 16413 0000BA84 803804                  	cmp byte [rax], T_closure
 16414 0000BA87 0F85FEC40000            	jne L_error_non_closure
 16415 0000BA8D FF7001                  	push SOB_CLOSURE_ENV(rax)
 16416 0000BA90 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16417 0000BA93 50                      	push rax
 16418 0000BA94 6A01                    	push 1	; arg count
 16419 0000BA96 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16420 0000BA9B E894C50000              	call malloc
 16421 0000BAA0 50                      	push rax
 16422 0000BAA1 BF08000000              	mov rdi, 8 * 1	; new rib
 16423 0000BAA6 E889C50000              	call malloc
 16424 0000BAAB 50                      	push rax
 16425 0000BAAC BF20000000              	mov rdi, 8 * 4	; extended env
 16426 0000BAB1 E87EC50000              	call malloc
 16427 0000BAB6 488B7D10                	mov rdi, ENV
 16428 0000BABA BE00000000              	mov rsi, 0
 16429 0000BABF BA01000000              	mov rdx, 1
 16430                                  .L_lambda_simple_env_loop_0116:	; ext_env[i + 1] <-- env[i]
 16431 0000BAC4 4883FE03                	cmp rsi, 3
 16432 0000BAC8 7410                    	je .L_lambda_simple_env_end_0116
 16433 0000BACA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16434 0000BACE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16435 0000BAD2 48FFC6                  	inc rsi
 16436 0000BAD5 48FFC2                  	inc rdx
 16437 0000BAD8 EBEA                    	jmp .L_lambda_simple_env_loop_0116
 16438                                  .L_lambda_simple_env_end_0116:
 16439 0000BADA 5B                      	pop rbx
 16440 0000BADB BE00000000              	mov rsi, 0
 16441                                  .L_lambda_simple_params_loop_0116:	; copy params
 16442 0000BAE0 4883FE01                	cmp rsi, 1
 16443 0000BAE4 740E                    	je .L_lambda_simple_params_end_0116
 16444 0000BAE6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16445 0000BAEB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16446 0000BAEF 48FFC6                  	inc rsi
 16447 0000BAF2 EBEC                    	jmp .L_lambda_simple_params_loop_0116
 16448                                  .L_lambda_simple_params_end_0116:
 16449 0000BAF4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16450 0000BAF7 4889C3                  	mov rbx, rax
 16451 0000BAFA 58                      	pop rax
 16452 0000BAFB C60004                  	mov byte [rax], T_closure
 16453 0000BAFE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16454 0000BB02 48C74009[0FBB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0116
 16455 0000BB0A E91B0E0000              	jmp .L_lambda_simple_end_0116
 16456                                  .L_lambda_simple_code_0116:	; lambda-simple body
 16457 0000BB0F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16458 0000BB15 740B                    	je .L_lambda_simple_arity_check_ok_0116
 16459 0000BB17 FF742410                	push qword [rsp + 8 * 2]
 16460 0000BB1B 6A01                    	push 1
 16461 0000BB1D E9CBC40000              	jmp L_error_incorrect_arity_simple
 16462                                  .L_lambda_simple_arity_check_ok_0116:
 16463 0000BB22 C8000000                	enter 0, 0
 16464                                  	; preparing a tail-call
 16465 0000BB26 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16466 0000BB2B E804C50000              	call malloc
 16467 0000BB30 50                      	push rax
 16468 0000BB31 BF08000000              	mov rdi, 8 * 1	; new rib
 16469 0000BB36 E8F9C40000              	call malloc
 16470 0000BB3B 50                      	push rax
 16471 0000BB3C BF28000000              	mov rdi, 8 * 5	; extended env
 16472 0000BB41 E8EEC40000              	call malloc
 16473 0000BB46 488B7D10                	mov rdi, ENV
 16474 0000BB4A BE00000000              	mov rsi, 0
 16475 0000BB4F BA01000000              	mov rdx, 1
 16476                                  .L_lambda_simple_env_loop_0117:	; ext_env[i + 1] <-- env[i]
 16477 0000BB54 4883FE04                	cmp rsi, 4
 16478 0000BB58 7410                    	je .L_lambda_simple_env_end_0117
 16479 0000BB5A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16480 0000BB5E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16481 0000BB62 48FFC6                  	inc rsi
 16482 0000BB65 48FFC2                  	inc rdx
 16483 0000BB68 EBEA                    	jmp .L_lambda_simple_env_loop_0117
 16484                                  .L_lambda_simple_env_end_0117:
 16485 0000BB6A 5B                      	pop rbx
 16486 0000BB6B BE00000000              	mov rsi, 0
 16487                                  .L_lambda_simple_params_loop_0117:	; copy params
 16488 0000BB70 4883FE01                	cmp rsi, 1
 16489 0000BB74 740E                    	je .L_lambda_simple_params_end_0117
 16490 0000BB76 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16491 0000BB7B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16492 0000BB7F 48FFC6                  	inc rsi
 16493 0000BB82 EBEC                    	jmp .L_lambda_simple_params_loop_0117
 16494                                  .L_lambda_simple_params_end_0117:
 16495 0000BB84 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16496 0000BB87 4889C3                  	mov rbx, rax
 16497 0000BB8A 58                      	pop rax
 16498 0000BB8B C60004                  	mov byte [rax], T_closure
 16499 0000BB8E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16500 0000BB92 48C74009[9FBB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0117
 16501 0000BB9A E9A9000000              	jmp .L_lambda_simple_end_0117
 16502                                  .L_lambda_simple_code_0117:	; lambda-simple body
 16503 0000BB9F 48837C241002            	cmp qword [rsp + 8 * 2], 2
 16504 0000BBA5 740B                    	je .L_lambda_simple_arity_check_ok_0117
 16505 0000BBA7 FF742410                	push qword [rsp + 8 * 2]
 16506 0000BBAB 6A02                    	push 2
 16507 0000BBAD E93BC40000              	jmp L_error_incorrect_arity_simple
 16508                                  .L_lambda_simple_arity_check_ok_0117:
 16509 0000BBB2 C8000000                	enter 0, 0
 16510                                  	; preparing a tail-call
 16511                                  	; preparing a non-tail-call
 16512 0000BBB6 488B4528                	mov rax, PARAM(1)	; param b
 16513 0000BBBA 50                      	push rax
 16514 0000BBBB 488B4520                	mov rax, PARAM(0)	; param a
 16515 0000BBBF 50                      	push rax
 16516 0000BBC0 6A02                    	push 2	; arg count
 16517 0000BBC2 488B4510                	mov rax, ENV
 16518 0000BBC6 488B4008                	mov rax, qword [rax + 8 * 1]
 16519 0000BBCA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<?
 16520 0000BBCD 803804                  	cmp byte [rax], T_closure
 16521 0000BBD0 0F85B5C30000            	jne L_error_non_closure
 16522 0000BBD6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16523 0000BBD9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16524 0000BBDC 50                      	push rax
 16525 0000BBDD 6A01                    	push 1	; arg count
 16526 0000BBDF 488B0425[E1140000]      	mov rax, qword [free_var_106]	; free var not
 16527 0000BBE7 803805                  	cmp byte [rax], T_undefined
 16528 0000BBEA 0F8417C30000            	je L_error_fvar_undefined
 16529 0000BBF0 803804                  	cmp byte [rax], T_closure
 16530 0000BBF3 0F8592C30000            	jne L_error_non_closure
 16531 0000BBF9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16532 0000BBFC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16533 0000BBFF FF7500                  	push qword[rbp]
 16534 0000BC02 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16535 0000BC05 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16536 0000BC09 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16537 0000BC0D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16538 0000BC11 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16539 0000BC14 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16540 0000BC17 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16541 0000BC1C 4983C103                	add r9, 3 	 ;for getting to the params
 16542 0000BC20 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16543 0000BC24 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16544                                  .L_tc_recycle_frame_loop_01b0:
 16545 0000BC27 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16546 0000BC2A 7410                    	je .L_tc_recycle_frame_done_01b0
 16547 0000BC2C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16548 0000BC2F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16549 0000BC32 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16550 0000BC36 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16551 0000BC3A EBEB                    	jmp .L_tc_recycle_frame_loop_01b0
 16552                                  .L_tc_recycle_frame_done_01b0:
 16553 0000BC3C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16554 0000BC3D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16555 0000BC41 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16556 0000BC44 C9                      	leave
 16557 0000BC45 C22000                  	ret AND_KILL_FRAME(2)
 16558                                  .L_lambda_simple_end_0117:	; new closure is in rax
 16559 0000BC48 50                      	push rax
 16560 0000BC49 6A01                    	push 1	; arg count
 16561 0000BC4B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16562 0000BC50 E8DFC30000              	call malloc
 16563 0000BC55 50                      	push rax
 16564 0000BC56 BF08000000              	mov rdi, 8 * 1	; new rib
 16565 0000BC5B E8D4C30000              	call malloc
 16566 0000BC60 50                      	push rax
 16567 0000BC61 BF28000000              	mov rdi, 8 * 5	; extended env
 16568 0000BC66 E8C9C30000              	call malloc
 16569 0000BC6B 488B7D10                	mov rdi, ENV
 16570 0000BC6F BE00000000              	mov rsi, 0
 16571 0000BC74 BA01000000              	mov rdx, 1
 16572                                  .L_lambda_simple_env_loop_0118:	; ext_env[i + 1] <-- env[i]
 16573 0000BC79 4883FE04                	cmp rsi, 4
 16574 0000BC7D 7410                    	je .L_lambda_simple_env_end_0118
 16575 0000BC7F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16576 0000BC83 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16577 0000BC87 48FFC6                  	inc rsi
 16578 0000BC8A 48FFC2                  	inc rdx
 16579 0000BC8D EBEA                    	jmp .L_lambda_simple_env_loop_0118
 16580                                  .L_lambda_simple_env_end_0118:
 16581 0000BC8F 5B                      	pop rbx
 16582 0000BC90 BE00000000              	mov rsi, 0
 16583                                  .L_lambda_simple_params_loop_0118:	; copy params
 16584 0000BC95 4883FE01                	cmp rsi, 1
 16585 0000BC99 740E                    	je .L_lambda_simple_params_end_0118
 16586 0000BC9B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16587 0000BCA0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16588 0000BCA4 48FFC6                  	inc rsi
 16589 0000BCA7 EBEC                    	jmp .L_lambda_simple_params_loop_0118
 16590                                  .L_lambda_simple_params_end_0118:
 16591 0000BCA9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16592 0000BCAC 4889C3                  	mov rbx, rax
 16593 0000BCAF 58                      	pop rax
 16594 0000BCB0 C60004                  	mov byte [rax], T_closure
 16595 0000BCB3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16596 0000BCB7 48C74009[C4BC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0118
 16597 0000BCBF E90E0C0000              	jmp .L_lambda_simple_end_0118
 16598                                  .L_lambda_simple_code_0118:	; lambda-simple body
 16599 0000BCC4 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16600 0000BCCA 740B                    	je .L_lambda_simple_arity_check_ok_0118
 16601 0000BCCC FF742410                	push qword [rsp + 8 * 2]
 16602 0000BCD0 6A01                    	push 1
 16603 0000BCD2 E916C30000              	jmp L_error_incorrect_arity_simple
 16604                                  .L_lambda_simple_arity_check_ok_0118:
 16605 0000BCD7 C8000000                	enter 0, 0
 16606                                  	; preparing a tail-call
 16607 0000BCDB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16608 0000BCE0 E84FC30000              	call malloc
 16609 0000BCE5 50                      	push rax
 16610 0000BCE6 BF08000000              	mov rdi, 8 * 1	; new rib
 16611 0000BCEB E844C30000              	call malloc
 16612 0000BCF0 50                      	push rax
 16613 0000BCF1 BF30000000              	mov rdi, 8 * 6	; extended env
 16614 0000BCF6 E839C30000              	call malloc
 16615 0000BCFB 488B7D10                	mov rdi, ENV
 16616 0000BCFF BE00000000              	mov rsi, 0
 16617 0000BD04 BA01000000              	mov rdx, 1
 16618                                  .L_lambda_simple_env_loop_0119:	; ext_env[i + 1] <-- env[i]
 16619 0000BD09 4883FE05                	cmp rsi, 5
 16620 0000BD0D 7410                    	je .L_lambda_simple_env_end_0119
 16621 0000BD0F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16622 0000BD13 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16623 0000BD17 48FFC6                  	inc rsi
 16624 0000BD1A 48FFC2                  	inc rdx
 16625 0000BD1D EBEA                    	jmp .L_lambda_simple_env_loop_0119
 16626                                  .L_lambda_simple_env_end_0119:
 16627 0000BD1F 5B                      	pop rbx
 16628 0000BD20 BE00000000              	mov rsi, 0
 16629                                  .L_lambda_simple_params_loop_0119:	; copy params
 16630 0000BD25 4883FE01                	cmp rsi, 1
 16631 0000BD29 740E                    	je .L_lambda_simple_params_end_0119
 16632 0000BD2B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16633 0000BD30 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16634 0000BD34 48FFC6                  	inc rsi
 16635 0000BD37 EBEC                    	jmp .L_lambda_simple_params_loop_0119
 16636                                  .L_lambda_simple_params_end_0119:
 16637 0000BD39 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16638 0000BD3C 4889C3                  	mov rbx, rax
 16639 0000BD3F 58                      	pop rax
 16640 0000BD40 C60004                  	mov byte [rax], T_closure
 16641 0000BD43 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16642 0000BD47 48C74009[54BD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0119
 16643 0000BD4F E986000000              	jmp .L_lambda_simple_end_0119
 16644                                  .L_lambda_simple_code_0119:	; lambda-simple body
 16645 0000BD54 48837C241002            	cmp qword [rsp + 8 * 2], 2
 16646 0000BD5A 740B                    	je .L_lambda_simple_arity_check_ok_0119
 16647 0000BD5C FF742410                	push qword [rsp + 8 * 2]
 16648 0000BD60 6A02                    	push 2
 16649 0000BD62 E986C20000              	jmp L_error_incorrect_arity_simple
 16650                                  .L_lambda_simple_arity_check_ok_0119:
 16651 0000BD67 C8000000                	enter 0, 0
 16652                                  	; preparing a tail-call
 16653 0000BD6B 488B4520                	mov rax, PARAM(0)	; param a
 16654 0000BD6F 50                      	push rax
 16655 0000BD70 488B4528                	mov rax, PARAM(1)	; param b
 16656 0000BD74 50                      	push rax
 16657 0000BD75 6A02                    	push 2	; arg count
 16658 0000BD77 488B4510                	mov rax, ENV
 16659 0000BD7B 488B4010                	mov rax, qword [rax + 8 * 2]
 16660 0000BD7F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<?
 16661 0000BD82 803804                  	cmp byte [rax], T_closure
 16662 0000BD85 0F8500C20000            	jne L_error_non_closure
 16663 0000BD8B FF7001                  	push SOB_CLOSURE_ENV(rax)
 16664 0000BD8E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16665 0000BD91 FF7500                  	push qword[rbp]
 16666 0000BD94 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16667 0000BD97 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16668 0000BD9B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16669 0000BD9F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16670 0000BDA3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16671 0000BDA6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16672 0000BDA9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16673 0000BDAE 4983C103                	add r9, 3 	 ;for getting to the params
 16674 0000BDB2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16675 0000BDB6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16676                                  .L_tc_recycle_frame_loop_01b1:
 16677 0000BDB9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16678 0000BDBC 7410                    	je .L_tc_recycle_frame_done_01b1
 16679 0000BDBE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16680 0000BDC1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16681 0000BDC4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16682 0000BDC8 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16683 0000BDCC EBEB                    	jmp .L_tc_recycle_frame_loop_01b1
 16684                                  .L_tc_recycle_frame_done_01b1:
 16685 0000BDCE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16686 0000BDCF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16687 0000BDD3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16688 0000BDD6 C9                      	leave
 16689 0000BDD7 C22000                  	ret AND_KILL_FRAME(2)
 16690                                  .L_lambda_simple_end_0119:	; new closure is in rax
 16691 0000BDDA 50                      	push rax
 16692 0000BDDB 6A01                    	push 1	; arg count
 16693 0000BDDD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16694 0000BDE2 E84DC20000              	call malloc
 16695 0000BDE7 50                      	push rax
 16696 0000BDE8 BF08000000              	mov rdi, 8 * 1	; new rib
 16697 0000BDED E842C20000              	call malloc
 16698 0000BDF2 50                      	push rax
 16699 0000BDF3 BF30000000              	mov rdi, 8 * 6	; extended env
 16700 0000BDF8 E837C20000              	call malloc
 16701 0000BDFD 488B7D10                	mov rdi, ENV
 16702 0000BE01 BE00000000              	mov rsi, 0
 16703 0000BE06 BA01000000              	mov rdx, 1
 16704                                  .L_lambda_simple_env_loop_011a:	; ext_env[i + 1] <-- env[i]
 16705 0000BE0B 4883FE05                	cmp rsi, 5
 16706 0000BE0F 7410                    	je .L_lambda_simple_env_end_011a
 16707 0000BE11 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16708 0000BE15 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16709 0000BE19 48FFC6                  	inc rsi
 16710 0000BE1C 48FFC2                  	inc rdx
 16711 0000BE1F EBEA                    	jmp .L_lambda_simple_env_loop_011a
 16712                                  .L_lambda_simple_env_end_011a:
 16713 0000BE21 5B                      	pop rbx
 16714 0000BE22 BE00000000              	mov rsi, 0
 16715                                  .L_lambda_simple_params_loop_011a:	; copy params
 16716 0000BE27 4883FE01                	cmp rsi, 1
 16717 0000BE2B 740E                    	je .L_lambda_simple_params_end_011a
 16718 0000BE2D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16719 0000BE32 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16720 0000BE36 48FFC6                  	inc rsi
 16721 0000BE39 EBEC                    	jmp .L_lambda_simple_params_loop_011a
 16722                                  .L_lambda_simple_params_end_011a:
 16723 0000BE3B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16724 0000BE3E 4889C3                  	mov rbx, rax
 16725 0000BE41 58                      	pop rax
 16726 0000BE42 C60004                  	mov byte [rax], T_closure
 16727 0000BE45 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16728 0000BE49 48C74009[56BE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_011a
 16729 0000BE51 E9240A0000              	jmp .L_lambda_simple_end_011a
 16730                                  .L_lambda_simple_code_011a:	; lambda-simple body
 16731 0000BE56 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16732 0000BE5C 740B                    	je .L_lambda_simple_arity_check_ok_011a
 16733 0000BE5E FF742410                	push qword [rsp + 8 * 2]
 16734 0000BE62 6A01                    	push 1
 16735 0000BE64 E984C10000              	jmp L_error_incorrect_arity_simple
 16736                                  .L_lambda_simple_arity_check_ok_011a:
 16737 0000BE69 C8000000                	enter 0, 0
 16738                                  	; preparing a tail-call
 16739 0000BE6D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16740 0000BE72 E8BDC10000              	call malloc
 16741 0000BE77 50                      	push rax
 16742 0000BE78 BF08000000              	mov rdi, 8 * 1	; new rib
 16743 0000BE7D E8B2C10000              	call malloc
 16744 0000BE82 50                      	push rax
 16745 0000BE83 BF38000000              	mov rdi, 8 * 7	; extended env
 16746 0000BE88 E8A7C10000              	call malloc
 16747 0000BE8D 488B7D10                	mov rdi, ENV
 16748 0000BE91 BE00000000              	mov rsi, 0
 16749 0000BE96 BA01000000              	mov rdx, 1
 16750                                  .L_lambda_simple_env_loop_011b:	; ext_env[i + 1] <-- env[i]
 16751 0000BE9B 4883FE06                	cmp rsi, 6
 16752 0000BE9F 7410                    	je .L_lambda_simple_env_end_011b
 16753 0000BEA1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16754 0000BEA5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16755 0000BEA9 48FFC6                  	inc rsi
 16756 0000BEAC 48FFC2                  	inc rdx
 16757 0000BEAF EBEA                    	jmp .L_lambda_simple_env_loop_011b
 16758                                  .L_lambda_simple_env_end_011b:
 16759 0000BEB1 5B                      	pop rbx
 16760 0000BEB2 BE00000000              	mov rsi, 0
 16761                                  .L_lambda_simple_params_loop_011b:	; copy params
 16762 0000BEB7 4883FE01                	cmp rsi, 1
 16763 0000BEBB 740E                    	je .L_lambda_simple_params_end_011b
 16764 0000BEBD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16765 0000BEC2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16766 0000BEC6 48FFC6                  	inc rsi
 16767 0000BEC9 EBEC                    	jmp .L_lambda_simple_params_loop_011b
 16768                                  .L_lambda_simple_params_end_011b:
 16769 0000BECB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16770 0000BECE 4889C3                  	mov rbx, rax
 16771 0000BED1 58                      	pop rax
 16772 0000BED2 C60004                  	mov byte [rax], T_closure
 16773 0000BED5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16774 0000BED9 48C74009[E6BE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_011b
 16775 0000BEE1 E9A8000000              	jmp .L_lambda_simple_end_011b
 16776                                  .L_lambda_simple_code_011b:	; lambda-simple body
 16777 0000BEE6 48837C241002            	cmp qword [rsp + 8 * 2], 2
 16778 0000BEEC 740B                    	je .L_lambda_simple_arity_check_ok_011b
 16779 0000BEEE FF742410                	push qword [rsp + 8 * 2]
 16780 0000BEF2 6A02                    	push 2
 16781 0000BEF4 E9F4C00000              	jmp L_error_incorrect_arity_simple
 16782                                  .L_lambda_simple_arity_check_ok_011b:
 16783 0000BEF9 C8000000                	enter 0, 0
 16784                                  	; preparing a tail-call
 16785                                  	; preparing a non-tail-call
 16786 0000BEFD 488B4528                	mov rax, PARAM(1)	; param b
 16787 0000BF01 50                      	push rax
 16788 0000BF02 488B4520                	mov rax, PARAM(0)	; param a
 16789 0000BF06 50                      	push rax
 16790 0000BF07 6A02                    	push 2	; arg count
 16791 0000BF09 488B4510                	mov rax, ENV
 16792 0000BF0D 488B00                  	mov rax, qword [rax + 8 * 0]
 16793 0000BF10 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin>?
 16794 0000BF13 803804                  	cmp byte [rax], T_closure
 16795 0000BF16 0F856FC00000            	jne L_error_non_closure
 16796 0000BF1C FF7001                  	push SOB_CLOSURE_ENV(rax)
 16797 0000BF1F FF5009                  	call SOB_CLOSURE_CODE(rax)
 16798 0000BF22 50                      	push rax
 16799 0000BF23 6A01                    	push 1	; arg count
 16800 0000BF25 488B0425[E1140000]      	mov rax, qword [free_var_106]	; free var not
 16801 0000BF2D 803805                  	cmp byte [rax], T_undefined
 16802 0000BF30 0F84D1BF0000            	je L_error_fvar_undefined
 16803 0000BF36 803804                  	cmp byte [rax], T_closure
 16804 0000BF39 0F854CC00000            	jne L_error_non_closure
 16805 0000BF3F FF7001                  	push SOB_CLOSURE_ENV(rax)
 16806 0000BF42 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16807 0000BF45 FF7500                  	push qword[rbp]
 16808 0000BF48 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16809 0000BF4B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16810 0000BF4F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16811 0000BF53 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16812 0000BF57 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16813 0000BF5A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16814 0000BF5D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16815 0000BF62 4983C103                	add r9, 3 	 ;for getting to the params
 16816 0000BF66 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16817 0000BF6A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16818                                  .L_tc_recycle_frame_loop_01b2:
 16819 0000BF6D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16820 0000BF70 7410                    	je .L_tc_recycle_frame_done_01b2
 16821 0000BF72 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16822 0000BF75 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16823 0000BF78 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16824 0000BF7C 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16825 0000BF80 EBEB                    	jmp .L_tc_recycle_frame_loop_01b2
 16826                                  .L_tc_recycle_frame_done_01b2:
 16827 0000BF82 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16828 0000BF83 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16829 0000BF87 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16830 0000BF8A C9                      	leave
 16831 0000BF8B C22000                  	ret AND_KILL_FRAME(2)
 16832                                  .L_lambda_simple_end_011b:	; new closure is in rax
 16833 0000BF8E 50                      	push rax
 16834 0000BF8F 6A01                    	push 1	; arg count
 16835 0000BF91 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16836 0000BF96 E899C00000              	call malloc
 16837 0000BF9B 50                      	push rax
 16838 0000BF9C BF08000000              	mov rdi, 8 * 1	; new rib
 16839 0000BFA1 E88EC00000              	call malloc
 16840 0000BFA6 50                      	push rax
 16841 0000BFA7 BF38000000              	mov rdi, 8 * 7	; extended env
 16842 0000BFAC E883C00000              	call malloc
 16843 0000BFB1 488B7D10                	mov rdi, ENV
 16844 0000BFB5 BE00000000              	mov rsi, 0
 16845 0000BFBA BA01000000              	mov rdx, 1
 16846                                  .L_lambda_simple_env_loop_011c:	; ext_env[i + 1] <-- env[i]
 16847 0000BFBF 4883FE06                	cmp rsi, 6
 16848 0000BFC3 7410                    	je .L_lambda_simple_env_end_011c
 16849 0000BFC5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16850 0000BFC9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16851 0000BFCD 48FFC6                  	inc rsi
 16852 0000BFD0 48FFC2                  	inc rdx
 16853 0000BFD3 EBEA                    	jmp .L_lambda_simple_env_loop_011c
 16854                                  .L_lambda_simple_env_end_011c:
 16855 0000BFD5 5B                      	pop rbx
 16856 0000BFD6 BE00000000              	mov rsi, 0
 16857                                  .L_lambda_simple_params_loop_011c:	; copy params
 16858 0000BFDB 4883FE01                	cmp rsi, 1
 16859 0000BFDF 740E                    	je .L_lambda_simple_params_end_011c
 16860 0000BFE1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16861 0000BFE6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16862 0000BFEA 48FFC6                  	inc rsi
 16863 0000BFED EBEC                    	jmp .L_lambda_simple_params_loop_011c
 16864                                  .L_lambda_simple_params_end_011c:
 16865 0000BFEF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16866 0000BFF2 4889C3                  	mov rbx, rax
 16867 0000BFF5 58                      	pop rax
 16868 0000BFF6 C60004                  	mov byte [rax], T_closure
 16869 0000BFF9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16870 0000BFFD 48C74009[0AC00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_011c
 16871 0000C005 E918080000              	jmp .L_lambda_simple_end_011c
 16872                                  .L_lambda_simple_code_011c:	; lambda-simple body
 16873 0000C00A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16874 0000C010 740B                    	je .L_lambda_simple_arity_check_ok_011c
 16875 0000C012 FF742410                	push qword [rsp + 8 * 2]
 16876 0000C016 6A01                    	push 1
 16877 0000C018 E9D0BF0000              	jmp L_error_incorrect_arity_simple
 16878                                  .L_lambda_simple_arity_check_ok_011c:
 16879 0000C01D C8000000                	enter 0, 0
 16880                                  	; preparing a tail-call
 16881 0000C021 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16882 0000C026 E809C00000              	call malloc
 16883 0000C02B 50                      	push rax
 16884 0000C02C BF08000000              	mov rdi, 8 * 1	; new rib
 16885 0000C031 E8FEBF0000              	call malloc
 16886 0000C036 50                      	push rax
 16887 0000C037 BF40000000              	mov rdi, 8 * 8	; extended env
 16888 0000C03C E8F3BF0000              	call malloc
 16889 0000C041 488B7D10                	mov rdi, ENV
 16890 0000C045 BE00000000              	mov rsi, 0
 16891 0000C04A BA01000000              	mov rdx, 1
 16892                                  .L_lambda_simple_env_loop_011d:	; ext_env[i + 1] <-- env[i]
 16893 0000C04F 4883FE07                	cmp rsi, 7
 16894 0000C053 7410                    	je .L_lambda_simple_env_end_011d
 16895 0000C055 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16896 0000C059 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16897 0000C05D 48FFC6                  	inc rsi
 16898 0000C060 48FFC2                  	inc rdx
 16899 0000C063 EBEA                    	jmp .L_lambda_simple_env_loop_011d
 16900                                  .L_lambda_simple_env_end_011d:
 16901 0000C065 5B                      	pop rbx
 16902 0000C066 BE00000000              	mov rsi, 0
 16903                                  .L_lambda_simple_params_loop_011d:	; copy params
 16904 0000C06B 4883FE01                	cmp rsi, 1
 16905 0000C06F 740E                    	je .L_lambda_simple_params_end_011d
 16906 0000C071 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16907 0000C076 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16908 0000C07A 48FFC6                  	inc rsi
 16909 0000C07D EBEC                    	jmp .L_lambda_simple_params_loop_011d
 16910                                  .L_lambda_simple_params_end_011d:
 16911 0000C07F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16912 0000C082 4889C3                  	mov rbx, rax
 16913 0000C085 58                      	pop rax
 16914 0000C086 C60004                  	mov byte [rax], T_closure
 16915 0000C089 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16916 0000C08D 48C74009[9AC00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_011d
 16917 0000C095 E99B050000              	jmp .L_lambda_simple_end_011d
 16918                                  .L_lambda_simple_code_011d:	; lambda-simple body
 16919 0000C09A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16920 0000C0A0 740B                    	je .L_lambda_simple_arity_check_ok_011d
 16921 0000C0A2 FF742410                	push qword [rsp + 8 * 2]
 16922 0000C0A6 6A01                    	push 1
 16923 0000C0A8 E940BF0000              	jmp L_error_incorrect_arity_simple
 16924                                  .L_lambda_simple_arity_check_ok_011d:
 16925 0000C0AD C8000000                	enter 0, 0
 16926                                  	; preparing a tail-call
 16927 0000C0B1 48B8-                   	mov rax, L_constants + 1993
 16927 0000C0B3 [C907000000000000] 
 16928 0000C0BB 50                      	push rax
 16929 0000C0BC 6A01                    	push 1	; arg count
 16930 0000C0BE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16931 0000C0C3 E86CBF0000              	call malloc
 16932 0000C0C8 50                      	push rax
 16933 0000C0C9 BF08000000              	mov rdi, 8 * 1	; new rib
 16934 0000C0CE E861BF0000              	call malloc
 16935 0000C0D3 50                      	push rax
 16936 0000C0D4 BF48000000              	mov rdi, 8 * 9	; extended env
 16937 0000C0D9 E856BF0000              	call malloc
 16938 0000C0DE 488B7D10                	mov rdi, ENV
 16939 0000C0E2 BE00000000              	mov rsi, 0
 16940 0000C0E7 BA01000000              	mov rdx, 1
 16941                                  .L_lambda_simple_env_loop_011e:	; ext_env[i + 1] <-- env[i]
 16942 0000C0EC 4883FE08                	cmp rsi, 8
 16943 0000C0F0 7410                    	je .L_lambda_simple_env_end_011e
 16944 0000C0F2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16945 0000C0F6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16946 0000C0FA 48FFC6                  	inc rsi
 16947 0000C0FD 48FFC2                  	inc rdx
 16948 0000C100 EBEA                    	jmp .L_lambda_simple_env_loop_011e
 16949                                  .L_lambda_simple_env_end_011e:
 16950 0000C102 5B                      	pop rbx
 16951 0000C103 BE00000000              	mov rsi, 0
 16952                                  .L_lambda_simple_params_loop_011e:	; copy params
 16953 0000C108 4883FE01                	cmp rsi, 1
 16954 0000C10C 740E                    	je .L_lambda_simple_params_end_011e
 16955 0000C10E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16956 0000C113 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16957 0000C117 48FFC6                  	inc rsi
 16958 0000C11A EBEC                    	jmp .L_lambda_simple_params_loop_011e
 16959                                  .L_lambda_simple_params_end_011e:
 16960 0000C11C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16961 0000C11F 4889C3                  	mov rbx, rax
 16962 0000C122 58                      	pop rax
 16963 0000C123 C60004                  	mov byte [rax], T_closure
 16964 0000C126 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16965 0000C12A 48C74009[37C10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_011e
 16966 0000C132 E9A6040000              	jmp .L_lambda_simple_end_011e
 16967                                  .L_lambda_simple_code_011e:	; lambda-simple body
 16968 0000C137 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16969 0000C13D 740B                    	je .L_lambda_simple_arity_check_ok_011e
 16970 0000C13F FF742410                	push qword [rsp + 8 * 2]
 16971 0000C143 6A01                    	push 1
 16972 0000C145 E9A3BE0000              	jmp L_error_incorrect_arity_simple
 16973                                  .L_lambda_simple_arity_check_ok_011e:
 16974 0000C14A C8000000                	enter 0, 0
 16975 0000C14E BF08000000              	mov rdi, 8*1
 16976 0000C153 E8DCBE0000              	call malloc
 16977 0000C158 488B5D20                	mov rbx, PARAM(0)
 16978 0000C15C 488918                  	mov qword[rax], rbx
 16979 0000C15F 48894520                	mov PARAM(0), rax
 16980 0000C163 48B8-                   	mov rax, sob_void
 16980 0000C165 [0000000000000000] 
 16981                                  
 16982 0000C16D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16983 0000C172 E8BDBE0000              	call malloc
 16984 0000C177 50                      	push rax
 16985 0000C178 BF08000000              	mov rdi, 8 * 1	; new rib
 16986 0000C17D E8B2BE0000              	call malloc
 16987 0000C182 50                      	push rax
 16988 0000C183 BF50000000              	mov rdi, 8 * 10	; extended env
 16989 0000C188 E8A7BE0000              	call malloc
 16990 0000C18D 488B7D10                	mov rdi, ENV
 16991 0000C191 BE00000000              	mov rsi, 0
 16992 0000C196 BA01000000              	mov rdx, 1
 16993                                  .L_lambda_simple_env_loop_011f:	; ext_env[i + 1] <-- env[i]
 16994 0000C19B 4883FE09                	cmp rsi, 9
 16995 0000C19F 7410                    	je .L_lambda_simple_env_end_011f
 16996 0000C1A1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16997 0000C1A5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16998 0000C1A9 48FFC6                  	inc rsi
 16999 0000C1AC 48FFC2                  	inc rdx
 17000 0000C1AF EBEA                    	jmp .L_lambda_simple_env_loop_011f
 17001                                  .L_lambda_simple_env_end_011f:
 17002 0000C1B1 5B                      	pop rbx
 17003 0000C1B2 BE00000000              	mov rsi, 0
 17004                                  .L_lambda_simple_params_loop_011f:	; copy params
 17005 0000C1B7 4883FE01                	cmp rsi, 1
 17006 0000C1BB 740E                    	je .L_lambda_simple_params_end_011f
 17007 0000C1BD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17008 0000C1C2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17009 0000C1C6 48FFC6                  	inc rsi
 17010 0000C1C9 EBEC                    	jmp .L_lambda_simple_params_loop_011f
 17011                                  .L_lambda_simple_params_end_011f:
 17012 0000C1CB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17013 0000C1CE 4889C3                  	mov rbx, rax
 17014 0000C1D1 58                      	pop rax
 17015 0000C1D2 C60004                  	mov byte [rax], T_closure
 17016 0000C1D5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17017 0000C1D9 48C74009[E6C10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_011f
 17018 0000C1E1 E962010000              	jmp .L_lambda_simple_end_011f
 17019                                  .L_lambda_simple_code_011f:	; lambda-simple body
 17020 0000C1E6 48837C241002            	cmp qword [rsp + 8 * 2], 2
 17021 0000C1EC 740B                    	je .L_lambda_simple_arity_check_ok_011f
 17022 0000C1EE FF742410                	push qword [rsp + 8 * 2]
 17023 0000C1F2 6A02                    	push 2
 17024 0000C1F4 E9F4BD0000              	jmp L_error_incorrect_arity_simple
 17025                                  .L_lambda_simple_arity_check_ok_011f:
 17026 0000C1F9 C8000000                	enter 0, 0
 17027                                  	; preparing a non-tail-call
 17028 0000C1FD 488B4528                	mov rax, PARAM(1)	; param s
 17029 0000C201 50                      	push rax
 17030 0000C202 6A01                    	push 1	; arg count
 17031 0000C204 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 17032 0000C20C 803805                  	cmp byte [rax], T_undefined
 17033 0000C20F 0F84F2BC0000            	je L_error_fvar_undefined
 17034 0000C215 803804                  	cmp byte [rax], T_closure
 17035 0000C218 0F856DBD0000            	jne L_error_non_closure
 17036 0000C21E FF7001                  	push SOB_CLOSURE_ENV(rax)
 17037 0000C221 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17038 0000C224 483D[02000000]          	cmp rax, sob_boolean_false
 17039 0000C22A 0F8514010000            	jne .L_or_end_001a
 17040                                  	; preparing a non-tail-call
 17041                                  	; preparing a non-tail-call
 17042 0000C230 488B4528                	mov rax, PARAM(1)	; param s
 17043 0000C234 50                      	push rax
 17044 0000C235 6A01                    	push 1	; arg count
 17045 0000C237 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 17046 0000C23F 803805                  	cmp byte [rax], T_undefined
 17047 0000C242 0F84BFBC0000            	je L_error_fvar_undefined
 17048 0000C248 803804                  	cmp byte [rax], T_closure
 17049 0000C24B 0F853ABD0000            	jne L_error_non_closure
 17050 0000C251 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17051 0000C254 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17052 0000C257 50                      	push rax
 17053 0000C258 488B4520                	mov rax, PARAM(0)	; param a
 17054 0000C25C 50                      	push rax
 17055 0000C25D 6A02                    	push 2	; arg count
 17056 0000C25F 488B4510                	mov rax, ENV
 17057 0000C263 488B4008                	mov rax, qword [rax + 8 * 1]
 17058 0000C267 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-ordering
 17059 0000C26A 803804                  	cmp byte [rax], T_closure
 17060 0000C26D 0F8518BD0000            	jne L_error_non_closure
 17061 0000C273 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17062 0000C276 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17063 0000C279 483D[02000000]          	cmp rax, sob_boolean_false
 17064 0000C27F 0F84B5000000            	je .L_if_else_00ee
 17065                                  	; preparing a tail-call
 17066                                  	; preparing a non-tail-call
 17067 0000C285 488B4528                	mov rax, PARAM(1)	; param s
 17068 0000C289 50                      	push rax
 17069 0000C28A 6A01                    	push 1	; arg count
 17070 0000C28C 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
 17071 0000C294 803805                  	cmp byte [rax], T_undefined
 17072 0000C297 0F846ABC0000            	je L_error_fvar_undefined
 17073 0000C29D 803804                  	cmp byte [rax], T_closure
 17074 0000C2A0 0F85E5BC0000            	jne L_error_non_closure
 17075 0000C2A6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17076 0000C2A9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17077 0000C2AC 50                      	push rax
 17078                                  	; preparing a non-tail-call
 17079 0000C2AD 488B4528                	mov rax, PARAM(1)	; param s
 17080 0000C2B1 50                      	push rax
 17081 0000C2B2 6A01                    	push 1	; arg count
 17082 0000C2B4 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 17083 0000C2BC 803805                  	cmp byte [rax], T_undefined
 17084 0000C2BF 0F8442BC0000            	je L_error_fvar_undefined
 17085 0000C2C5 803804                  	cmp byte [rax], T_closure
 17086 0000C2C8 0F85BDBC0000            	jne L_error_non_closure
 17087 0000C2CE FF7001                  	push SOB_CLOSURE_ENV(rax)
 17088 0000C2D1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17089 0000C2D4 50                      	push rax
 17090 0000C2D5 6A02                    	push 2	; arg count
 17091 0000C2D7 488B4510                	mov rax, ENV
 17092 0000C2DB 488B00                  	mov rax, qword [rax + 8 * 0]
 17093 0000C2DE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 17094 0000C2E1 488B00                  	mov rax, qword [rax]
 17095 0000C2E4 803804                  	cmp byte [rax], T_closure
 17096 0000C2E7 0F859EBC0000            	jne L_error_non_closure
 17097 0000C2ED FF7001                  	push SOB_CLOSURE_ENV(rax)
 17098 0000C2F0 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17099 0000C2F3 FF7500                  	push qword[rbp]
 17100 0000C2F6 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17101 0000C2F9 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17102 0000C2FD 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17103 0000C301 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17104 0000C305 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17105 0000C308 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17106 0000C30B 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17107 0000C310 4983C103                	add r9, 3 	 ;for getting to the params
 17108 0000C314 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17109 0000C318 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17110                                  .L_tc_recycle_frame_loop_01b3:
 17111 0000C31B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17112 0000C31E 7410                    	je .L_tc_recycle_frame_done_01b3
 17113 0000C320 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17114 0000C323 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17115 0000C326 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17116 0000C32A 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17117 0000C32E EBEB                    	jmp .L_tc_recycle_frame_loop_01b3
 17118                                  .L_tc_recycle_frame_done_01b3:
 17119 0000C330 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17120 0000C331 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17121 0000C335 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17122 0000C338 EB0A                    	jmp .L_if_end_00ee
 17123                                  .L_if_else_00ee:
 17124 0000C33A 48B8-                   	mov rax, L_constants + 2
 17124 0000C33C [0200000000000000] 
 17125                                  .L_if_end_00ee:
 17126                                  .L_or_end_001a:
 17127 0000C344 C9                      	leave
 17128 0000C345 C22000                  	ret AND_KILL_FRAME(2)
 17129                                  .L_lambda_simple_end_011f:	; new closure is in rax
 17130 0000C348 50                      	push rax
 17131 0000C349 488B4520                	mov rax, PARAM(0)	; param run
 17132 0000C34D 8F00                    	pop qword [rax]
 17133 0000C34F 48B8-                   	mov rax, sob_void
 17133 0000C351 [0000000000000000] 
 17134                                  
 17135 0000C359 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17136 0000C35E E8D1BC0000              	call malloc
 17137 0000C363 50                      	push rax
 17138 0000C364 BF08000000              	mov rdi, 8 * 1	; new rib
 17139 0000C369 E8C6BC0000              	call malloc
 17140 0000C36E 50                      	push rax
 17141 0000C36F BF50000000              	mov rdi, 8 * 10	; extended env
 17142 0000C374 E8BBBC0000              	call malloc
 17143 0000C379 488B7D10                	mov rdi, ENV
 17144 0000C37D BE00000000              	mov rsi, 0
 17145 0000C382 BA01000000              	mov rdx, 1
 17146                                  .L_lambda_opt_env_loop_0026:	; ext_env[i + 1] <-- env[i]
 17147 0000C387 4883FE09                	cmp rsi, 9
 17148 0000C38B 7410                    	je .L_lambda_opt_env_end_0026
 17149 0000C38D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17150 0000C391 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17151 0000C395 48FFC6                  	inc rsi
 17152 0000C398 48FFC2                  	inc rdx
 17153 0000C39B EBEA                    	jmp .L_lambda_opt_env_loop_0026
 17154                                  .L_lambda_opt_env_end_0026:
 17155 0000C39D 5B                      	pop rbx
 17156 0000C39E BE00000000              	mov rsi, 0
 17157                                  .L_lambda_opt_params_loop_0026:	; copy params
 17158 0000C3A3 4883FE01                	cmp rsi, 1
 17159 0000C3A7 740E                    	je .L_lambda_opt_params_end_0026
 17160 0000C3A9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17161 0000C3AE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17162 0000C3B2 48FFC6                  	inc rsi
 17163 0000C3B5 EBEC                    	jmp .L_lambda_opt_params_loop_0026
 17164                                  .L_lambda_opt_params_end_0026:
 17165 0000C3B7 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
 17166 0000C3BA 4889C3                  	mov rbx, rax
 17167 0000C3BD 58                      	pop rax
 17168 0000C3BE C60004                  	mov byte [rax], T_closure
 17169 0000C3C1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17170 0000C3C5 48C74009[D2C30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0026
 17171 0000C3CD E907020000              	jmp .L_lambda_opt_end_0026
 17172                                  .L_lambda_opt_code_0026:	; lambda-opt body
 17173 0000C3D2 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17174 0000C3D8 7411                    	je .L_lambda_opt_arity_check_exact_0026
 17175 0000C3DA 0F8FBF000000            	jg .L_lambda_opt_arity_check_more_0026
 17176 0000C3E0 FF742410                	push qword [rsp + 8 * 2]
 17177 0000C3E4 6A01                    	push 1
 17178 0000C3E6 E916BC0000              	jmp L_error_incorrect_arity_opt
 17179                                  .L_lambda_opt_arity_check_exact_0026:
 17180 0000C3EB 4883EC08                	sub rsp, 8
 17181 0000C3EF 488B442408              	mov rax, qword[rsp + 8 *1]
 17182 0000C3F4 48890424                	mov qword[rsp], rax  
 17183 0000C3F8 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 17184 0000C3FD 4889442408              	mov qword[rsp + 8 * 1], rax
 17185 0000C402 B802000000              	mov rax, 2
 17186 0000C407 4889442410              	mov qword[rsp + 8 *2], rax
 17187 0000C40C 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
 17188 0000C411 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 17189 0000C416 48B8-                   	mov rax, sob_nil
 17189 0000C418 [0100000000000000] 
 17190 0000C420 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
 17191 0000C425 C8000000                	enter 0, 0
 17192                                  	; preparing a tail-call
 17193 0000C429 488B4528                	mov rax, PARAM(1)	; param s
 17194 0000C42D 50                      	push rax
 17195 0000C42E 488B4520                	mov rax, PARAM(0)	; param a
 17196 0000C432 50                      	push rax
 17197 0000C433 6A02                    	push 2	; arg count
 17198 0000C435 488B4510                	mov rax, ENV
 17199 0000C439 488B00                  	mov rax, qword [rax + 8 * 0]
 17200 0000C43C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 17201 0000C43F 488B00                  	mov rax, qword [rax]
 17202 0000C442 803804                  	cmp byte [rax], T_closure
 17203 0000C445 0F8540BB0000            	jne L_error_non_closure
 17204 0000C44B FF7001                  	push SOB_CLOSURE_ENV(rax)
 17205 0000C44E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17206 0000C451 FF7500                  	push qword[rbp]
 17207 0000C454 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17208 0000C457 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17209 0000C45B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17210 0000C45F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17211 0000C463 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17212 0000C466 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17213 0000C469 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17214 0000C46E 4983C103                	add r9, 3 	 ;for getting to the params
 17215 0000C472 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17216 0000C476 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17217                                  .L_tc_recycle_frame_loop_01b5:
 17218 0000C479 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17219 0000C47C 7410                    	je .L_tc_recycle_frame_done_01b5
 17220 0000C47E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17221 0000C481 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17222 0000C484 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17223 0000C488 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17224 0000C48C EBEB                    	jmp .L_tc_recycle_frame_loop_01b5
 17225                                  .L_tc_recycle_frame_done_01b5:
 17226 0000C48E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17227 0000C48F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17228 0000C493 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17229 0000C496 C9                      	leave
 17230 0000C497 C22000                  	ret AND_KILL_FRAME(2)
 17231 0000C49A E93A010000              	jmp .L_lambda_opt_end_0026	; new closure is in rax
 17232                                  .L_lambda_opt_arity_check_more_0026:
 17233 0000C49F 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 17234 0000C4A4 49B9-                   	mov r9, sob_nil
 17234 0000C4A6 [0100000000000000] 
 17235 0000C4AE 4889E3                  	mov rbx, rsp 
 17236 0000C4B1 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 17237 0000C4B5 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 17238 0000C4B8 49C1E003                	shl r8, 3
 17239 0000C4BC 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 17240 0000C4BF 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 17241                                  .L_lambda_opt_stack_shrink_loop_0026:
 17242 0000C4C4 4983F801                	cmp r8, 1
 17243 0000C4C8 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0026
 17244 0000C4CA BF11000000              	mov rdi, 1+8+8 ;for pair
 17245 0000C4CF E860BB0000              	call malloc;to create the pair in the stack
 17246 0000C4D4 C60021                  	mov byte [rax], T_pair ; to make it a pair
 17247 0000C4D7 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
 17248 0000C4DA 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 17249 0000C4DE 4C894809                 	mov qword[rax+1+8],r9
 17250 0000C4E2 4989C1                  	mov r9, rax ;for the recursion 
 17251 0000C4E5 49FFC8                  	dec r8 ;we finished copy another opt param to the list
 17252 0000C4E8 4883EB08                	sub rbx, 8 ;to get the next param to copy
 17253 0000C4EC EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0026
 17254                                  .L_lambda_opt_stack_shrink_loop_exit_0026:
 17255 0000C4EE 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
 17256 0000C4F3 4883E902                	sub rcx, 2
 17257 0000C4F7 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
 17258 0000C4FB 4801CC                  	add rsp, rcx ;shrinking the stack
 17259 0000C4FE 4889E0                  	mov rax, rsp
 17260 0000C501 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
 17261 0000C504 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
 17262 0000C508 49FFC8                  	dec r8 ;we start with param 0, not 1 
 17263 0000C50B 4883C018                	add rax, 3 * 8;now rax is param 0
 17264 0000C50F 49C1E003                	shl r8, 3;convert to byte
 17265 0000C513 4C01C0                  	add rax, r8;now rax is the top of the stack
 17266 0000C516 4C8908                  	mov qword[rax], r9;puting the list at the top
 17267 0000C519 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
 17268 0000C51D 4889E3                  	mov rbx, rsp 
 17269 0000C520 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
 17270 0000C523 41BA01000000            	mov r10, 1;r10 is the not opt params length
 17271 0000C529 49FFCA                  	dec r10 
 17272 0000C52C 49C1E203                	shl r10, 3;to get bytes
 17273 0000C530 4883C318                	add rbx, 3*8;rbx is the first param
 17274 0000C534 4C01D3                  	add rbx, r10; rbx is where the address to copy to
 17275 0000C537 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
 17276 0000C53A 4C8900                  	mov qword[rax], r8
 17277 0000C53D 4883E808                	sub rax, 8
 17278 0000C541 4883EB08                	sub rbx, 8
 17279 0000C545 4889E0                  	mov rax, rsp
 17280 0000C548 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 17281 0000C54B 48C744241002000000      	mov qword [rsp+2*8], 2
 17282 0000C554 488B5808                	mov rbx, qword[rax + 8 *1]
 17283 0000C558 48895C2408              	mov qword [rsp + 1*8] ,rbx
 17284 0000C55D 488B18                  	mov rbx, qword[rax]
 17285 0000C560 48891C24                	mov qword [rsp], rbx
 17286 0000C564 C8000000                	enter 0, 0
 17287                                  	; preparing a tail-call
 17288 0000C568 488B4528                	mov rax, PARAM(1)	; param s
 17289 0000C56C 50                      	push rax
 17290 0000C56D 488B4520                	mov rax, PARAM(0)	; param a
 17291 0000C571 50                      	push rax
 17292 0000C572 6A02                    	push 2	; arg count
 17293 0000C574 488B4510                	mov rax, ENV
 17294 0000C578 488B00                  	mov rax, qword [rax + 8 * 0]
 17295 0000C57B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 17296 0000C57E 488B00                  	mov rax, qword [rax]
 17297 0000C581 803804                  	cmp byte [rax], T_closure
 17298 0000C584 0F8501BA0000            	jne L_error_non_closure
 17299 0000C58A FF7001                  	push SOB_CLOSURE_ENV(rax)
 17300 0000C58D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17301 0000C590 FF7500                  	push qword[rbp]
 17302 0000C593 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17303 0000C596 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17304 0000C59A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17305 0000C59E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17306 0000C5A2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17307 0000C5A5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17308 0000C5A8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17309 0000C5AD 4983C103                	add r9, 3 	 ;for getting to the params
 17310 0000C5B1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17311 0000C5B5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17312                                  .L_tc_recycle_frame_loop_01b4:
 17313 0000C5B8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17314 0000C5BB 7410                    	je .L_tc_recycle_frame_done_01b4
 17315 0000C5BD 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17316 0000C5C0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17317 0000C5C3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17318 0000C5C7 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17319 0000C5CB EBEB                    	jmp .L_tc_recycle_frame_loop_01b4
 17320                                  .L_tc_recycle_frame_done_01b4:
 17321 0000C5CD 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17322 0000C5CE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17323 0000C5D2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17324 0000C5D5 C9                      	leave
 17325 0000C5D6 C22000                  	ret AND_KILL_FRAME(2)
 17326                                  .L_lambda_opt_end_0026:	; new closure is in rax
 17327 0000C5D9 C9                      	leave
 17328 0000C5DA C21800                  	ret AND_KILL_FRAME(1)
 17329                                  .L_lambda_simple_end_011e:	; new closure is in rax
 17330 0000C5DD 803804                  	cmp byte [rax], T_closure
 17331 0000C5E0 0F85A5B90000            	jne L_error_non_closure
 17332 0000C5E6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17333 0000C5E9 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17334 0000C5EC FF7500                  	push qword[rbp]
 17335 0000C5EF 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17336 0000C5F2 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17337 0000C5F6 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17338 0000C5FA 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17339 0000C5FE 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17340 0000C601 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17341 0000C604 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17342 0000C609 4983C103                	add r9, 3 	 ;for getting to the params
 17343 0000C60D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17344 0000C611 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17345                                  .L_tc_recycle_frame_loop_01b6:
 17346 0000C614 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17347 0000C617 7410                    	je .L_tc_recycle_frame_done_01b6
 17348 0000C619 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17349 0000C61C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17350 0000C61F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17351 0000C623 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17352 0000C627 EBEB                    	jmp .L_tc_recycle_frame_loop_01b6
 17353                                  .L_tc_recycle_frame_done_01b6:
 17354 0000C629 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17355 0000C62A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17356 0000C62E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17357 0000C631 C9                      	leave
 17358 0000C632 C21800                  	ret AND_KILL_FRAME(1)
 17359                                  .L_lambda_simple_end_011d:	; new closure is in rax
 17360 0000C635 50                      	push rax
 17361 0000C636 6A01                    	push 1	; arg count
 17362 0000C638 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17363 0000C63D E8F2B90000              	call malloc
 17364 0000C642 50                      	push rax
 17365 0000C643 BF08000000              	mov rdi, 8 * 1	; new rib
 17366 0000C648 E8E7B90000              	call malloc
 17367 0000C64D 50                      	push rax
 17368 0000C64E BF40000000              	mov rdi, 8 * 8	; extended env
 17369 0000C653 E8DCB90000              	call malloc
 17370 0000C658 488B7D10                	mov rdi, ENV
 17371 0000C65C BE00000000              	mov rsi, 0
 17372 0000C661 BA01000000              	mov rdx, 1
 17373                                  .L_lambda_simple_env_loop_0120:	; ext_env[i + 1] <-- env[i]
 17374 0000C666 4883FE07                	cmp rsi, 7
 17375 0000C66A 7410                    	je .L_lambda_simple_env_end_0120
 17376 0000C66C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17377 0000C670 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17378 0000C674 48FFC6                  	inc rsi
 17379 0000C677 48FFC2                  	inc rdx
 17380 0000C67A EBEA                    	jmp .L_lambda_simple_env_loop_0120
 17381                                  .L_lambda_simple_env_end_0120:
 17382 0000C67C 5B                      	pop rbx
 17383 0000C67D BE00000000              	mov rsi, 0
 17384                                  .L_lambda_simple_params_loop_0120:	; copy params
 17385 0000C682 4883FE01                	cmp rsi, 1
 17386 0000C686 740E                    	je .L_lambda_simple_params_end_0120
 17387 0000C688 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17388 0000C68D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17389 0000C691 48FFC6                  	inc rsi
 17390 0000C694 EBEC                    	jmp .L_lambda_simple_params_loop_0120
 17391                                  .L_lambda_simple_params_end_0120:
 17392 0000C696 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17393 0000C699 4889C3                  	mov rbx, rax
 17394 0000C69C 58                      	pop rax
 17395 0000C69D C60004                  	mov byte [rax], T_closure
 17396 0000C6A0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17397 0000C6A4 48C74009[B1C60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0120
 17398 0000C6AC E919010000              	jmp .L_lambda_simple_end_0120
 17399                                  .L_lambda_simple_code_0120:	; lambda-simple body
 17400 0000C6B1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17401 0000C6B7 740B                    	je .L_lambda_simple_arity_check_ok_0120
 17402 0000C6B9 FF742410                	push qword [rsp + 8 * 2]
 17403 0000C6BD 6A01                    	push 1
 17404 0000C6BF E929B90000              	jmp L_error_incorrect_arity_simple
 17405                                  .L_lambda_simple_arity_check_ok_0120:
 17406 0000C6C4 C8000000                	enter 0, 0
 17407                                  	; preparing a non-tail-call
 17408 0000C6C8 488B4510                	mov rax, ENV
 17409 0000C6CC 488B4020                	mov rax, qword [rax + 8 * 4]
 17410 0000C6D0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<?
 17411 0000C6D3 50                      	push rax
 17412 0000C6D4 6A01                    	push 1	; arg count
 17413 0000C6D6 488B4520                	mov rax, PARAM(0)	; param make-run
 17414 0000C6DA 803804                  	cmp byte [rax], T_closure
 17415 0000C6DD 0F85A8B80000            	jne L_error_non_closure
 17416 0000C6E3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17417 0000C6E6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17418 0000C6E9 48890425[1B0E0000]      	mov qword [free_var_4], rax
 17419 0000C6F1 48B8-                   	mov rax, sob_void
 17419 0000C6F3 [0000000000000000] 
 17420                                  
 17421                                  	; preparing a non-tail-call
 17422 0000C6FB 488B4510                	mov rax, ENV
 17423 0000C6FF 488B00                  	mov rax, qword [rax + 8 * 0]
 17424 0000C702 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<=?
 17425 0000C705 50                      	push rax
 17426 0000C706 6A01                    	push 1	; arg count
 17427 0000C708 488B4520                	mov rax, PARAM(0)	; param make-run
 17428 0000C70C 803804                  	cmp byte [rax], T_closure
 17429 0000C70F 0F8576B80000            	jne L_error_non_closure
 17430 0000C715 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17431 0000C718 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17432 0000C71B 48890425[2C0E0000]      	mov qword [free_var_5], rax
 17433 0000C723 48B8-                   	mov rax, sob_void
 17433 0000C725 [0000000000000000] 
 17434                                  
 17435                                  	; preparing a non-tail-call
 17436 0000C72D 488B4510                	mov rax, ENV
 17437 0000C731 488B4008                	mov rax, qword [rax + 8 * 1]
 17438 0000C735 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin>?
 17439 0000C738 50                      	push rax
 17440 0000C739 6A01                    	push 1	; arg count
 17441 0000C73B 488B4520                	mov rax, PARAM(0)	; param make-run
 17442 0000C73F 803804                  	cmp byte [rax], T_closure
 17443 0000C742 0F8543B80000            	jne L_error_non_closure
 17444 0000C748 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17445 0000C74B FF5009                  	call SOB_CLOSURE_CODE(rax)
 17446 0000C74E 48890425[4E0E0000]      	mov qword [free_var_7], rax
 17447 0000C756 48B8-                   	mov rax, sob_void
 17447 0000C758 [0000000000000000] 
 17448                                  
 17449                                  	; preparing a non-tail-call
 17450 0000C760 488B4510                	mov rax, ENV
 17451 0000C764 488B4010                	mov rax, qword [rax + 8 * 2]
 17452 0000C768 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin>=?
 17453 0000C76B 50                      	push rax
 17454 0000C76C 6A01                    	push 1	; arg count
 17455 0000C76E 488B4520                	mov rax, PARAM(0)	; param make-run
 17456 0000C772 803804                  	cmp byte [rax], T_closure
 17457 0000C775 0F8510B80000            	jne L_error_non_closure
 17458 0000C77B FF7001                  	push SOB_CLOSURE_ENV(rax)
 17459 0000C77E FF5009                  	call SOB_CLOSURE_CODE(rax)
 17460 0000C781 48890425[5F0E0000]      	mov qword [free_var_8], rax
 17461 0000C789 48B8-                   	mov rax, sob_void
 17461 0000C78B [0000000000000000] 
 17462                                  
 17463                                  	; preparing a non-tail-call
 17464 0000C793 488B4510                	mov rax, ENV
 17465 0000C797 488B4018                	mov rax, qword [rax + 8 * 3]
 17466 0000C79B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin=?
 17467 0000C79E 50                      	push rax
 17468 0000C79F 6A01                    	push 1	; arg count
 17469 0000C7A1 488B4520                	mov rax, PARAM(0)	; param make-run
 17470 0000C7A5 803804                  	cmp byte [rax], T_closure
 17471 0000C7A8 0F85DDB70000            	jne L_error_non_closure
 17472 0000C7AE FF7001                  	push SOB_CLOSURE_ENV(rax)
 17473 0000C7B1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17474 0000C7B4 48890425[3D0E0000]      	mov qword [free_var_6], rax
 17475 0000C7BC 48B8-                   	mov rax, sob_void
 17475 0000C7BE [0000000000000000] 
 17476 0000C7C6 C9                      	leave
 17477 0000C7C7 C21800                  	ret AND_KILL_FRAME(1)
 17478                                  .L_lambda_simple_end_0120:	; new closure is in rax
 17479 0000C7CA 803804                  	cmp byte [rax], T_closure
 17480 0000C7CD 0F85B8B70000            	jne L_error_non_closure
 17481 0000C7D3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17482 0000C7D6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17483 0000C7D9 FF7500                  	push qword[rbp]
 17484 0000C7DC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17485 0000C7DF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17486 0000C7E3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17487 0000C7E7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17488 0000C7EB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17489 0000C7EE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17490 0000C7F1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17491 0000C7F6 4983C103                	add r9, 3 	 ;for getting to the params
 17492 0000C7FA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17493 0000C7FE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17494                                  .L_tc_recycle_frame_loop_01b7:
 17495 0000C801 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17496 0000C804 7410                    	je .L_tc_recycle_frame_done_01b7
 17497 0000C806 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17498 0000C809 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17499 0000C80C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17500 0000C810 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17501 0000C814 EBEB                    	jmp .L_tc_recycle_frame_loop_01b7
 17502                                  .L_tc_recycle_frame_done_01b7:
 17503 0000C816 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17504 0000C817 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17505 0000C81B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17506 0000C81E C9                      	leave
 17507 0000C81F C21800                  	ret AND_KILL_FRAME(1)
 17508                                  .L_lambda_simple_end_011c:	; new closure is in rax
 17509 0000C822 803804                  	cmp byte [rax], T_closure
 17510 0000C825 0F8560B70000            	jne L_error_non_closure
 17511 0000C82B FF7001                  	push SOB_CLOSURE_ENV(rax)
 17512 0000C82E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17513 0000C831 FF7500                  	push qword[rbp]
 17514 0000C834 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17515 0000C837 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17516 0000C83B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17517 0000C83F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17518 0000C843 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17519 0000C846 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17520 0000C849 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17521 0000C84E 4983C103                	add r9, 3 	 ;for getting to the params
 17522 0000C852 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17523 0000C856 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17524                                  .L_tc_recycle_frame_loop_01b8:
 17525 0000C859 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17526 0000C85C 7410                    	je .L_tc_recycle_frame_done_01b8
 17527 0000C85E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17528 0000C861 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17529 0000C864 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17530 0000C868 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17531 0000C86C EBEB                    	jmp .L_tc_recycle_frame_loop_01b8
 17532                                  .L_tc_recycle_frame_done_01b8:
 17533 0000C86E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17534 0000C86F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17535 0000C873 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17536 0000C876 C9                      	leave
 17537 0000C877 C21800                  	ret AND_KILL_FRAME(1)
 17538                                  .L_lambda_simple_end_011a:	; new closure is in rax
 17539 0000C87A 803804                  	cmp byte [rax], T_closure
 17540 0000C87D 0F8508B70000            	jne L_error_non_closure
 17541 0000C883 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17542 0000C886 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17543 0000C889 FF7500                  	push qword[rbp]
 17544 0000C88C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17545 0000C88F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17546 0000C893 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17547 0000C897 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17548 0000C89B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17549 0000C89E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17550 0000C8A1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17551 0000C8A6 4983C103                	add r9, 3 	 ;for getting to the params
 17552 0000C8AA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17553 0000C8AE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17554                                  .L_tc_recycle_frame_loop_01b9:
 17555 0000C8B1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17556 0000C8B4 7410                    	je .L_tc_recycle_frame_done_01b9
 17557 0000C8B6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17558 0000C8B9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17559 0000C8BC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17560 0000C8C0 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17561 0000C8C4 EBEB                    	jmp .L_tc_recycle_frame_loop_01b9
 17562                                  .L_tc_recycle_frame_done_01b9:
 17563 0000C8C6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17564 0000C8C7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17565 0000C8CB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17566 0000C8CE C9                      	leave
 17567 0000C8CF C21800                  	ret AND_KILL_FRAME(1)
 17568                                  .L_lambda_simple_end_0118:	; new closure is in rax
 17569 0000C8D2 803804                  	cmp byte [rax], T_closure
 17570 0000C8D5 0F85B0B60000            	jne L_error_non_closure
 17571 0000C8DB FF7001                  	push SOB_CLOSURE_ENV(rax)
 17572 0000C8DE FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17573 0000C8E1 FF7500                  	push qword[rbp]
 17574 0000C8E4 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17575 0000C8E7 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17576 0000C8EB 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17577 0000C8EF 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17578 0000C8F3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17579 0000C8F6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17580 0000C8F9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17581 0000C8FE 4983C103                	add r9, 3 	 ;for getting to the params
 17582 0000C902 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17583 0000C906 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17584                                  .L_tc_recycle_frame_loop_01ba:
 17585 0000C909 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17586 0000C90C 7410                    	je .L_tc_recycle_frame_done_01ba
 17587 0000C90E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17588 0000C911 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17589 0000C914 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17590 0000C918 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17591 0000C91C EBEB                    	jmp .L_tc_recycle_frame_loop_01ba
 17592                                  .L_tc_recycle_frame_done_01ba:
 17593 0000C91E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17594 0000C91F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17595 0000C923 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17596 0000C926 C9                      	leave
 17597 0000C927 C21800                  	ret AND_KILL_FRAME(1)
 17598                                  .L_lambda_simple_end_0116:	; new closure is in rax
 17599 0000C92A 803804                  	cmp byte [rax], T_closure
 17600 0000C92D 0F8558B60000            	jne L_error_non_closure
 17601 0000C933 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17602 0000C936 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17603 0000C939 FF7500                  	push qword[rbp]
 17604 0000C93C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17605 0000C93F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17606 0000C943 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17607 0000C947 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17608 0000C94B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17609 0000C94E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17610 0000C951 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17611 0000C956 4983C103                	add r9, 3 	 ;for getting to the params
 17612 0000C95A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17613 0000C95E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17614                                  .L_tc_recycle_frame_loop_01bb:
 17615 0000C961 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17616 0000C964 7410                    	je .L_tc_recycle_frame_done_01bb
 17617 0000C966 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17618 0000C969 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17619 0000C96C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17620 0000C970 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17621 0000C974 EBEB                    	jmp .L_tc_recycle_frame_loop_01bb
 17622                                  .L_tc_recycle_frame_done_01bb:
 17623 0000C976 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17624 0000C977 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17625 0000C97B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17626 0000C97E C9                      	leave
 17627 0000C97F C21800                  	ret AND_KILL_FRAME(1)
 17628                                  .L_lambda_simple_end_0115:	; new closure is in rax
 17629 0000C982 803804                  	cmp byte [rax], T_closure
 17630 0000C985 0F8500B60000            	jne L_error_non_closure
 17631 0000C98B FF7001                  	push SOB_CLOSURE_ENV(rax)
 17632 0000C98E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17633 0000C991 FF7500                  	push qword[rbp]
 17634 0000C994 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17635 0000C997 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17636 0000C99B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17637 0000C99F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17638 0000C9A3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17639 0000C9A6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17640 0000C9A9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17641 0000C9AE 4983C103                	add r9, 3 	 ;for getting to the params
 17642 0000C9B2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17643 0000C9B6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17644                                  .L_tc_recycle_frame_loop_01bc:
 17645 0000C9B9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17646 0000C9BC 7410                    	je .L_tc_recycle_frame_done_01bc
 17647 0000C9BE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17648 0000C9C1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17649 0000C9C4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17650 0000C9C8 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17651 0000C9CC EBEB                    	jmp .L_tc_recycle_frame_loop_01bc
 17652                                  .L_tc_recycle_frame_done_01bc:
 17653 0000C9CE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17654 0000C9CF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17655 0000C9D3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17656 0000C9D6 C9                      	leave
 17657 0000C9D7 C21800                  	ret AND_KILL_FRAME(1)
 17658                                  .L_lambda_simple_end_0114:	; new closure is in rax
 17659 0000C9DA 803804                  	cmp byte [rax], T_closure
 17660 0000C9DD 0F85A8B50000            	jne L_error_non_closure
 17661 0000C9E3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17662 0000C9E6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17663 0000C9E9 FF7500                  	push qword[rbp]
 17664 0000C9EC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17665 0000C9EF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17666 0000C9F3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17667 0000C9F7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17668 0000C9FB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17669 0000C9FE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17670 0000CA01 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17671 0000CA06 4983C103                	add r9, 3 	 ;for getting to the params
 17672 0000CA0A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17673 0000CA0E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17674                                  .L_tc_recycle_frame_loop_01bd:
 17675 0000CA11 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17676 0000CA14 7410                    	je .L_tc_recycle_frame_done_01bd
 17677 0000CA16 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17678 0000CA19 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17679 0000CA1C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17680 0000CA20 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17681 0000CA24 EBEB                    	jmp .L_tc_recycle_frame_loop_01bd
 17682                                  .L_tc_recycle_frame_done_01bd:
 17683 0000CA26 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17684 0000CA27 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17685 0000CA2B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17686 0000CA2E C9                      	leave
 17687 0000CA2F C21800                  	ret AND_KILL_FRAME(1)
 17688                                  .L_lambda_simple_end_0111:	; new closure is in rax
 17689 0000CA32 803804                  	cmp byte [rax], T_closure
 17690 0000CA35 0F8550B50000            	jne L_error_non_closure
 17691 0000CA3B FF7001                  	push SOB_CLOSURE_ENV(rax)
 17692 0000CA3E FF5009                  	call SOB_CLOSURE_CODE(rax)
 17693                                  
 17694 0000CA41 4889C7                  	mov rdi, rax
 17695 0000CA44 E840B80000              	call print_sexpr_if_not_void
 17696 0000CA49 48B8-                   	mov rax, L_constants + 0
 17696 0000CA4B [0000000000000000] 
 17697 0000CA53 48890425[C1120000]      	mov qword [free_var_74], rax
 17698 0000CA5B 48B8-                   	mov rax, sob_void
 17698 0000CA5D [0000000000000000] 
 17699                                  
 17700 0000CA65 4889C7                  	mov rdi, rax
 17701 0000CA68 E81CB80000              	call print_sexpr_if_not_void
 17702 0000CA6D 48B8-                   	mov rax, L_constants + 0
 17702 0000CA6F [0000000000000000] 
 17703 0000CA77 48890425[B0120000]      	mov qword [free_var_73], rax
 17704 0000CA7F 48B8-                   	mov rax, sob_void
 17704 0000CA81 [0000000000000000] 
 17705                                  
 17706 0000CA89 4889C7                  	mov rdi, rax
 17707 0000CA8C E8F8B70000              	call print_sexpr_if_not_void
 17708 0000CA91 48B8-                   	mov rax, L_constants + 0
 17708 0000CA93 [0000000000000000] 
 17709 0000CA9B 48890425[D2120000]      	mov qword [free_var_75], rax
 17710 0000CAA3 48B8-                   	mov rax, sob_void
 17710 0000CAA5 [0000000000000000] 
 17711                                  
 17712 0000CAAD 4889C7                  	mov rdi, rax
 17713 0000CAB0 E8D4B70000              	call print_sexpr_if_not_void
 17714 0000CAB5 48B8-                   	mov rax, L_constants + 0
 17714 0000CAB7 [0000000000000000] 
 17715 0000CABF 48890425[F4120000]      	mov qword [free_var_77], rax
 17716 0000CAC7 48B8-                   	mov rax, sob_void
 17716 0000CAC9 [0000000000000000] 
 17717                                  
 17718 0000CAD1 4889C7                  	mov rdi, rax
 17719 0000CAD4 E8B0B70000              	call print_sexpr_if_not_void
 17720 0000CAD9 48B8-                   	mov rax, L_constants + 0
 17720 0000CADB [0000000000000000] 
 17721 0000CAE3 48890425[E3120000]      	mov qword [free_var_76], rax
 17722 0000CAEB 48B8-                   	mov rax, sob_void
 17722 0000CAED [0000000000000000] 
 17723                                  
 17724 0000CAF5 4889C7                  	mov rdi, rax
 17725 0000CAF8 E88CB70000              	call print_sexpr_if_not_void
 17726                                  	; preparing a non-tail-call
 17727 0000CAFD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17728 0000CB02 E82DB50000              	call malloc
 17729 0000CB07 50                      	push rax
 17730 0000CB08 BF00000000              	mov rdi, 8 * 0	; new rib
 17731 0000CB0D E822B50000              	call malloc
 17732 0000CB12 50                      	push rax
 17733 0000CB13 BF08000000              	mov rdi, 8 * 1	; extended env
 17734 0000CB18 E817B50000              	call malloc
 17735 0000CB1D 488B7D10                	mov rdi, ENV
 17736 0000CB21 BE00000000              	mov rsi, 0
 17737 0000CB26 BA01000000              	mov rdx, 1
 17738                                  .L_lambda_simple_env_loop_0121:	; ext_env[i + 1] <-- env[i]
 17739 0000CB2B 4883FE00                	cmp rsi, 0
 17740 0000CB2F 7410                    	je .L_lambda_simple_env_end_0121
 17741 0000CB31 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17742 0000CB35 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17743 0000CB39 48FFC6                  	inc rsi
 17744 0000CB3C 48FFC2                  	inc rdx
 17745 0000CB3F EBEA                    	jmp .L_lambda_simple_env_loop_0121
 17746                                  .L_lambda_simple_env_end_0121:
 17747 0000CB41 5B                      	pop rbx
 17748 0000CB42 BE00000000              	mov rsi, 0
 17749                                  .L_lambda_simple_params_loop_0121:	; copy params
 17750 0000CB47 4883FE00                	cmp rsi, 0
 17751 0000CB4B 740E                    	je .L_lambda_simple_params_end_0121
 17752 0000CB4D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17753 0000CB52 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17754 0000CB56 48FFC6                  	inc rsi
 17755 0000CB59 EBEC                    	jmp .L_lambda_simple_params_loop_0121
 17756                                  .L_lambda_simple_params_end_0121:
 17757 0000CB5B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17758 0000CB5E 4889C3                  	mov rbx, rax
 17759 0000CB61 58                      	pop rax
 17760 0000CB62 C60004                  	mov byte [rax], T_closure
 17761 0000CB65 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17762 0000CB69 48C74009[76CB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0121
 17763 0000CB71 E901030000              	jmp .L_lambda_simple_end_0121
 17764                                  .L_lambda_simple_code_0121:	; lambda-simple body
 17765 0000CB76 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17766 0000CB7C 740B                    	je .L_lambda_simple_arity_check_ok_0121
 17767 0000CB7E FF742410                	push qword [rsp + 8 * 2]
 17768 0000CB82 6A01                    	push 1
 17769 0000CB84 E964B40000              	jmp L_error_incorrect_arity_simple
 17770                                  .L_lambda_simple_arity_check_ok_0121:
 17771 0000CB89 C8000000                	enter 0, 0
 17772 0000CB8D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17773 0000CB92 E89DB40000              	call malloc
 17774 0000CB97 50                      	push rax
 17775 0000CB98 BF08000000              	mov rdi, 8 * 1	; new rib
 17776 0000CB9D E892B40000              	call malloc
 17777 0000CBA2 50                      	push rax
 17778 0000CBA3 BF10000000              	mov rdi, 8 * 2	; extended env
 17779 0000CBA8 E887B40000              	call malloc
 17780 0000CBAD 488B7D10                	mov rdi, ENV
 17781 0000CBB1 BE00000000              	mov rsi, 0
 17782 0000CBB6 BA01000000              	mov rdx, 1
 17783                                  .L_lambda_opt_env_loop_0027:	; ext_env[i + 1] <-- env[i]
 17784 0000CBBB 4883FE01                	cmp rsi, 1
 17785 0000CBBF 7410                    	je .L_lambda_opt_env_end_0027
 17786 0000CBC1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17787 0000CBC5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17788 0000CBC9 48FFC6                  	inc rsi
 17789 0000CBCC 48FFC2                  	inc rdx
 17790 0000CBCF EBEA                    	jmp .L_lambda_opt_env_loop_0027
 17791                                  .L_lambda_opt_env_end_0027:
 17792 0000CBD1 5B                      	pop rbx
 17793 0000CBD2 BE00000000              	mov rsi, 0
 17794                                  .L_lambda_opt_params_loop_0027:	; copy params
 17795 0000CBD7 4883FE01                	cmp rsi, 1
 17796 0000CBDB 740E                    	je .L_lambda_opt_params_end_0027
 17797 0000CBDD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17798 0000CBE2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17799 0000CBE6 48FFC6                  	inc rsi
 17800 0000CBE9 EBEC                    	jmp .L_lambda_opt_params_loop_0027
 17801                                  .L_lambda_opt_params_end_0027:
 17802 0000CBEB 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
 17803 0000CBEE 4889C3                  	mov rbx, rax
 17804 0000CBF1 58                      	pop rax
 17805 0000CBF2 C60004                  	mov byte [rax], T_closure
 17806 0000CBF5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17807 0000CBF9 48C74009[06CC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0027
 17808 0000CC01 E96D020000              	jmp .L_lambda_opt_end_0027
 17809                                  .L_lambda_opt_code_0027:	; lambda-opt body
 17810 0000CC06 48837C241000            	cmp qword [rsp + 8 * 2], 0
 17811 0000CC0C 7411                    	je .L_lambda_opt_arity_check_exact_0027
 17812 0000CC0E 0F8FF4000000            	jg .L_lambda_opt_arity_check_more_0027
 17813 0000CC14 FF742410                	push qword [rsp + 8 * 2]
 17814 0000CC18 6A00                    	push 0
 17815 0000CC1A E9E2B30000              	jmp L_error_incorrect_arity_opt
 17816                                  .L_lambda_opt_arity_check_exact_0027:
 17817 0000CC1F 4883EC08                	sub rsp, 8
 17818 0000CC23 488B442408              	mov rax, qword[rsp + 8 *1]
 17819 0000CC28 48890424                	mov qword[rsp], rax  
 17820 0000CC2C 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 17821 0000CC31 4889442408              	mov qword[rsp + 8 * 1], rax
 17822 0000CC36 B801000000              	mov rax, 1
 17823 0000CC3B 4889442410              	mov qword[rsp + 8 *2], rax
 17824 0000CC40 48B8-                   	mov rax, sob_nil
 17824 0000CC42 [0100000000000000] 
 17825 0000CC4A 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 17826 0000CC4F C8000000                	enter 0, 0
 17827                                  	; preparing a tail-call
 17828                                  	; preparing a non-tail-call
 17829 0000CC53 488B4520                	mov rax, PARAM(0)	; param s
 17830 0000CC57 50                      	push rax
 17831 0000CC58 488B0425[28120000]      	mov rax, qword [free_var_65]	; free var char->integer
 17832 0000CC60 803805                  	cmp byte [rax], T_undefined
 17833 0000CC63 0F849EB20000            	je L_error_fvar_undefined
 17834 0000CC69 50                      	push rax
 17835 0000CC6A 6A02                    	push 2	; arg count
 17836 0000CC6C 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
 17837 0000CC74 803805                  	cmp byte [rax], T_undefined
 17838 0000CC77 0F848AB20000            	je L_error_fvar_undefined
 17839 0000CC7D 803804                  	cmp byte [rax], T_closure
 17840 0000CC80 0F8505B30000            	jne L_error_non_closure
 17841 0000CC86 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17842 0000CC89 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17843 0000CC8C 50                      	push rax
 17844 0000CC8D 488B4510                	mov rax, ENV
 17845 0000CC91 488B00                  	mov rax, qword [rax + 8 * 0]
 17846 0000CC94 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator
 17847 0000CC97 50                      	push rax
 17848 0000CC98 6A02                    	push 2	; arg count
 17849 0000CC9A 488B0425[08100000]      	mov rax, qword [free_var_33]	; free var apply
 17850 0000CCA2 803805                  	cmp byte [rax], T_undefined
 17851 0000CCA5 0F845CB20000            	je L_error_fvar_undefined
 17852 0000CCAB 803804                  	cmp byte [rax], T_closure
 17853 0000CCAE 0F85D7B20000            	jne L_error_non_closure
 17854 0000CCB4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17855 0000CCB7 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17856 0000CCBA FF7500                  	push qword[rbp]
 17857 0000CCBD 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17858 0000CCC0 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17859 0000CCC4 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17860 0000CCC8 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17861 0000CCCC 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17862 0000CCCF 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17863 0000CCD2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17864 0000CCD7 4983C103                	add r9, 3 	 ;for getting to the params
 17865 0000CCDB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17866 0000CCDF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17867                                  .L_tc_recycle_frame_loop_01bf:
 17868 0000CCE2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17869 0000CCE5 7410                    	je .L_tc_recycle_frame_done_01bf
 17870 0000CCE7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17871 0000CCEA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17872 0000CCED 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17873 0000CCF1 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17874 0000CCF5 EBEB                    	jmp .L_tc_recycle_frame_loop_01bf
 17875                                  .L_tc_recycle_frame_done_01bf:
 17876 0000CCF7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17877 0000CCF8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17878 0000CCFC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17879 0000CCFF C9                      	leave
 17880 0000CD00 C21800                  	ret AND_KILL_FRAME(1)
 17881 0000CD03 E96B010000              	jmp .L_lambda_opt_end_0027	; new closure is in rax
 17882                                  .L_lambda_opt_arity_check_more_0027:
 17883 0000CD08 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 17884 0000CD0D 49B9-                   	mov r9, sob_nil
 17884 0000CD0F [0100000000000000] 
 17885 0000CD17 4889E3                  	mov rbx, rsp 
 17886 0000CD1A 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 17887 0000CD1E 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 17888 0000CD21 49C1E003                	shl r8, 3
 17889 0000CD25 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 17890 0000CD28 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 17891                                  .L_lambda_opt_stack_shrink_loop_0027:
 17892 0000CD2D 4983F800                	cmp r8, 0
 17893 0000CD31 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0027
 17894 0000CD33 BF11000000              	mov rdi, 1+8+8 ;for pair
 17895 0000CD38 E8F7B20000              	call malloc;to create the pair in the stack
 17896 0000CD3D C60021                  	mov byte [rax], T_pair ; to make it a pair
 17897 0000CD40 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
 17898 0000CD43 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 17899 0000CD47 4C894809                 	mov qword[rax+1+8],r9
 17900 0000CD4B 4989C1                  	mov r9, rax ;for the recursion 
 17901 0000CD4E 49FFC8                  	dec r8 ;we finished copy another opt param to the list
 17902 0000CD51 4883EB08                	sub rbx, 8 ;to get the next param to copy
 17903 0000CD55 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0027
 17904                                  .L_lambda_opt_stack_shrink_loop_exit_0027:
 17905 0000CD57 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
 17906 0000CD5C 4883E901                	sub rcx, 1
 17907 0000CD60 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
 17908 0000CD64 4801CC                  	add rsp, rcx ;shrinking the stack
 17909 0000CD67 4889E0                  	mov rax, rsp
 17910 0000CD6A 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
 17911 0000CD6D 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
 17912 0000CD71 49FFC8                  	dec r8 ;we start with param 0, not 1 
 17913 0000CD74 4883C018                	add rax, 3 * 8;now rax is param 0
 17914 0000CD78 49C1E003                	shl r8, 3;convert to byte
 17915 0000CD7C 4C01C0                  	add rax, r8;now rax is the top of the stack
 17916 0000CD7F 4C8908                  	mov qword[rax], r9;puting the list at the top
 17917 0000CD82 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
 17918 0000CD86 4889E3                  	mov rbx, rsp 
 17919 0000CD89 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
 17920 0000CD8C 41BA00000000            	mov r10, 0;r10 is the not opt params length
 17921 0000CD92 49FFCA                  	dec r10 
 17922 0000CD95 49C1E203                	shl r10, 3;to get bytes
 17923 0000CD99 4883C318                	add rbx, 3*8;rbx is the first param
 17924 0000CD9D 4C01D3                  	add rbx, r10; rbx is where the address to copy to
 17925 0000CDA0 4889E0                  	mov rax, rsp
 17926 0000CDA3 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 17927 0000CDA6 48C744241001000000      	mov qword [rsp+2*8], 1
 17928 0000CDAF 488B5808                	mov rbx, qword[rax + 8 *1]
 17929 0000CDB3 48895C2408              	mov qword [rsp + 1*8] ,rbx
 17930 0000CDB8 488B18                  	mov rbx, qword[rax]
 17931 0000CDBB 48891C24                	mov qword [rsp], rbx
 17932 0000CDBF C8000000                	enter 0, 0
 17933                                  	; preparing a tail-call
 17934                                  	; preparing a non-tail-call
 17935 0000CDC3 488B4520                	mov rax, PARAM(0)	; param s
 17936 0000CDC7 50                      	push rax
 17937 0000CDC8 488B0425[28120000]      	mov rax, qword [free_var_65]	; free var char->integer
 17938 0000CDD0 803805                  	cmp byte [rax], T_undefined
 17939 0000CDD3 0F842EB10000            	je L_error_fvar_undefined
 17940 0000CDD9 50                      	push rax
 17941 0000CDDA 6A02                    	push 2	; arg count
 17942 0000CDDC 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
 17943 0000CDE4 803805                  	cmp byte [rax], T_undefined
 17944 0000CDE7 0F841AB10000            	je L_error_fvar_undefined
 17945 0000CDED 803804                  	cmp byte [rax], T_closure
 17946 0000CDF0 0F8595B10000            	jne L_error_non_closure
 17947 0000CDF6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17948 0000CDF9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17949 0000CDFC 50                      	push rax
 17950 0000CDFD 488B4510                	mov rax, ENV
 17951 0000CE01 488B00                  	mov rax, qword [rax + 8 * 0]
 17952 0000CE04 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator
 17953 0000CE07 50                      	push rax
 17954 0000CE08 6A02                    	push 2	; arg count
 17955 0000CE0A 488B0425[08100000]      	mov rax, qword [free_var_33]	; free var apply
 17956 0000CE12 803805                  	cmp byte [rax], T_undefined
 17957 0000CE15 0F84ECB00000            	je L_error_fvar_undefined
 17958 0000CE1B 803804                  	cmp byte [rax], T_closure
 17959 0000CE1E 0F8567B10000            	jne L_error_non_closure
 17960 0000CE24 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17961 0000CE27 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17962 0000CE2A FF7500                  	push qword[rbp]
 17963 0000CE2D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17964 0000CE30 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17965 0000CE34 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17966 0000CE38 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17967 0000CE3C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17968 0000CE3F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17969 0000CE42 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17970 0000CE47 4983C103                	add r9, 3 	 ;for getting to the params
 17971 0000CE4B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17972 0000CE4F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17973                                  .L_tc_recycle_frame_loop_01be:
 17974 0000CE52 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17975 0000CE55 7410                    	je .L_tc_recycle_frame_done_01be
 17976 0000CE57 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17977 0000CE5A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17978 0000CE5D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17979 0000CE61 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17980 0000CE65 EBEB                    	jmp .L_tc_recycle_frame_loop_01be
 17981                                  .L_tc_recycle_frame_done_01be:
 17982 0000CE67 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17983 0000CE68 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17984 0000CE6C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17985 0000CE6F C9                      	leave
 17986 0000CE70 C21800                  	ret AND_KILL_FRAME(1)
 17987                                  .L_lambda_opt_end_0027:	; new closure is in rax
 17988 0000CE73 C9                      	leave
 17989 0000CE74 C21800                  	ret AND_KILL_FRAME(1)
 17990                                  .L_lambda_simple_end_0121:	; new closure is in rax
 17991 0000CE77 50                      	push rax
 17992 0000CE78 6A01                    	push 1	; arg count
 17993 0000CE7A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17994 0000CE7F E8B0B10000              	call malloc
 17995 0000CE84 50                      	push rax
 17996 0000CE85 BF00000000              	mov rdi, 8 * 0	; new rib
 17997 0000CE8A E8A5B10000              	call malloc
 17998 0000CE8F 50                      	push rax
 17999 0000CE90 BF08000000              	mov rdi, 8 * 1	; extended env
 18000 0000CE95 E89AB10000              	call malloc
 18001 0000CE9A 488B7D10                	mov rdi, ENV
 18002 0000CE9E BE00000000              	mov rsi, 0
 18003 0000CEA3 BA01000000              	mov rdx, 1
 18004                                  .L_lambda_simple_env_loop_0122:	; ext_env[i + 1] <-- env[i]
 18005 0000CEA8 4883FE00                	cmp rsi, 0
 18006 0000CEAC 7410                    	je .L_lambda_simple_env_end_0122
 18007 0000CEAE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18008 0000CEB2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18009 0000CEB6 48FFC6                  	inc rsi
 18010 0000CEB9 48FFC2                  	inc rdx
 18011 0000CEBC EBEA                    	jmp .L_lambda_simple_env_loop_0122
 18012                                  .L_lambda_simple_env_end_0122:
 18013 0000CEBE 5B                      	pop rbx
 18014 0000CEBF BE00000000              	mov rsi, 0
 18015                                  .L_lambda_simple_params_loop_0122:	; copy params
 18016 0000CEC4 4883FE00                	cmp rsi, 0
 18017 0000CEC8 740E                    	je .L_lambda_simple_params_end_0122
 18018 0000CECA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18019 0000CECF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18020 0000CED3 48FFC6                  	inc rsi
 18021 0000CED6 EBEC                    	jmp .L_lambda_simple_params_loop_0122
 18022                                  .L_lambda_simple_params_end_0122:
 18023 0000CED8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18024 0000CEDB 4889C3                  	mov rbx, rax
 18025 0000CEDE 58                      	pop rax
 18026 0000CEDF C60004                  	mov byte [rax], T_closure
 18027 0000CEE2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18028 0000CEE6 48C74009[F3CE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0122
 18029 0000CEEE E938010000              	jmp .L_lambda_simple_end_0122
 18030                                  .L_lambda_simple_code_0122:	; lambda-simple body
 18031 0000CEF3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18032 0000CEF9 740B                    	je .L_lambda_simple_arity_check_ok_0122
 18033 0000CEFB FF742410                	push qword [rsp + 8 * 2]
 18034 0000CEFF 6A01                    	push 1
 18035 0000CF01 E9E7B00000              	jmp L_error_incorrect_arity_simple
 18036                                  .L_lambda_simple_arity_check_ok_0122:
 18037 0000CF06 C8000000                	enter 0, 0
 18038                                  	; preparing a non-tail-call
 18039 0000CF0A 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 18040 0000CF12 803805                  	cmp byte [rax], T_undefined
 18041 0000CF15 0F84ECAF0000            	je L_error_fvar_undefined
 18042 0000CF1B 50                      	push rax
 18043 0000CF1C 6A01                    	push 1	; arg count
 18044 0000CF1E 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 18045 0000CF22 803804                  	cmp byte [rax], T_closure
 18046 0000CF25 0F8560B00000            	jne L_error_non_closure
 18047 0000CF2B FF7001                  	push SOB_CLOSURE_ENV(rax)
 18048 0000CF2E FF5009                  	call SOB_CLOSURE_CODE(rax)
 18049 0000CF31 48890425[C1120000]      	mov qword [free_var_74], rax
 18050 0000CF39 48B8-                   	mov rax, sob_void
 18050 0000CF3B [0000000000000000] 
 18051                                  
 18052                                  	; preparing a non-tail-call
 18053 0000CF43 488B0425[2C0E0000]      	mov rax, qword [free_var_5]	; free var <=
 18054 0000CF4B 803805                  	cmp byte [rax], T_undefined
 18055 0000CF4E 0F84B3AF0000            	je L_error_fvar_undefined
 18056 0000CF54 50                      	push rax
 18057 0000CF55 6A01                    	push 1	; arg count
 18058 0000CF57 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 18059 0000CF5B 803804                  	cmp byte [rax], T_closure
 18060 0000CF5E 0F8527B00000            	jne L_error_non_closure
 18061 0000CF64 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18062 0000CF67 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18063 0000CF6A 48890425[B0120000]      	mov qword [free_var_73], rax
 18064 0000CF72 48B8-                   	mov rax, sob_void
 18064 0000CF74 [0000000000000000] 
 18065                                  
 18066                                  	; preparing a non-tail-call
 18067 0000CF7C 488B0425[3D0E0000]      	mov rax, qword [free_var_6]	; free var =
 18068 0000CF84 803805                  	cmp byte [rax], T_undefined
 18069 0000CF87 0F847AAF0000            	je L_error_fvar_undefined
 18070 0000CF8D 50                      	push rax
 18071 0000CF8E 6A01                    	push 1	; arg count
 18072 0000CF90 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 18073 0000CF94 803804                  	cmp byte [rax], T_closure
 18074 0000CF97 0F85EEAF0000            	jne L_error_non_closure
 18075 0000CF9D FF7001                  	push SOB_CLOSURE_ENV(rax)
 18076 0000CFA0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18077 0000CFA3 48890425[D2120000]      	mov qword [free_var_75], rax
 18078 0000CFAB 48B8-                   	mov rax, sob_void
 18078 0000CFAD [0000000000000000] 
 18079                                  
 18080                                  	; preparing a non-tail-call
 18081 0000CFB5 488B0425[4E0E0000]      	mov rax, qword [free_var_7]	; free var >
 18082 0000CFBD 803805                  	cmp byte [rax], T_undefined
 18083 0000CFC0 0F8441AF0000            	je L_error_fvar_undefined
 18084 0000CFC6 50                      	push rax
 18085 0000CFC7 6A01                    	push 1	; arg count
 18086 0000CFC9 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 18087 0000CFCD 803804                  	cmp byte [rax], T_closure
 18088 0000CFD0 0F85B5AF0000            	jne L_error_non_closure
 18089 0000CFD6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18090 0000CFD9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18091 0000CFDC 48890425[F4120000]      	mov qword [free_var_77], rax
 18092 0000CFE4 48B8-                   	mov rax, sob_void
 18092 0000CFE6 [0000000000000000] 
 18093                                  
 18094                                  	; preparing a non-tail-call
 18095 0000CFEE 488B0425[5F0E0000]      	mov rax, qword [free_var_8]	; free var >=
 18096 0000CFF6 803805                  	cmp byte [rax], T_undefined
 18097 0000CFF9 0F8408AF0000            	je L_error_fvar_undefined
 18098 0000CFFF 50                      	push rax
 18099 0000D000 6A01                    	push 1	; arg count
 18100 0000D002 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 18101 0000D006 803804                  	cmp byte [rax], T_closure
 18102 0000D009 0F857CAF0000            	jne L_error_non_closure
 18103 0000D00F FF7001                  	push SOB_CLOSURE_ENV(rax)
 18104 0000D012 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18105 0000D015 48890425[E3120000]      	mov qword [free_var_76], rax
 18106 0000D01D 48B8-                   	mov rax, sob_void
 18106 0000D01F [0000000000000000] 
 18107 0000D027 C9                      	leave
 18108 0000D028 C21800                  	ret AND_KILL_FRAME(1)
 18109                                  .L_lambda_simple_end_0122:	; new closure is in rax
 18110 0000D02B 803804                  	cmp byte [rax], T_closure
 18111 0000D02E 0F8557AF0000            	jne L_error_non_closure
 18112 0000D034 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18113 0000D037 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18114                                  
 18115 0000D03A 4889C7                  	mov rdi, rax
 18116 0000D03D E847B20000              	call print_sexpr_if_not_void
 18117 0000D042 48B8-                   	mov rax, L_constants + 0
 18117 0000D044 [0000000000000000] 
 18118 0000D04C 48890425[8E120000]      	mov qword [free_var_71], rax
 18119 0000D054 48B8-                   	mov rax, sob_void
 18119 0000D056 [0000000000000000] 
 18120                                  
 18121 0000D05E 4889C7                  	mov rdi, rax
 18122 0000D061 E823B20000              	call print_sexpr_if_not_void
 18123 0000D066 48B8-                   	mov rax, L_constants + 0
 18123 0000D068 [0000000000000000] 
 18124 0000D070 48890425[9F120000]      	mov qword [free_var_72], rax
 18125 0000D078 48B8-                   	mov rax, sob_void
 18125 0000D07A [0000000000000000] 
 18126                                  
 18127 0000D082 4889C7                  	mov rdi, rax
 18128 0000D085 E8FFB10000              	call print_sexpr_if_not_void
 18129                                  	; preparing a non-tail-call
 18130                                  	; preparing a non-tail-call
 18131                                  	; preparing a non-tail-call
 18132 0000D08A 48B8-                   	mov rax, L_constants + 2569
 18132 0000D08C [090A000000000000] 
 18133 0000D094 50                      	push rax
 18134 0000D095 6A01                    	push 1	; arg count
 18135 0000D097 488B0425[28120000]      	mov rax, qword [free_var_65]	; free var char->integer
 18136 0000D09F 803805                  	cmp byte [rax], T_undefined
 18137 0000D0A2 0F845FAE0000            	je L_error_fvar_undefined
 18138 0000D0A8 803804                  	cmp byte [rax], T_closure
 18139 0000D0AB 0F85DAAE0000            	jne L_error_non_closure
 18140 0000D0B1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18141 0000D0B4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18142 0000D0B7 50                      	push rax
 18143                                  	; preparing a non-tail-call
 18144 0000D0B8 48B8-                   	mov rax, L_constants + 2573
 18144 0000D0BA [0D0A000000000000] 
 18145 0000D0C2 50                      	push rax
 18146 0000D0C3 6A01                    	push 1	; arg count
 18147 0000D0C5 488B0425[28120000]      	mov rax, qword [free_var_65]	; free var char->integer
 18148 0000D0CD 803805                  	cmp byte [rax], T_undefined
 18149 0000D0D0 0F8431AE0000            	je L_error_fvar_undefined
 18150 0000D0D6 803804                  	cmp byte [rax], T_closure
 18151 0000D0D9 0F85ACAE0000            	jne L_error_non_closure
 18152 0000D0DF FF7001                  	push SOB_CLOSURE_ENV(rax)
 18153 0000D0E2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18154 0000D0E5 50                      	push rax
 18155 0000D0E6 6A02                    	push 2	; arg count
 18156 0000D0E8 488B0425[F90D0000]      	mov rax, qword [free_var_2]	; free var -
 18157 0000D0F0 803805                  	cmp byte [rax], T_undefined
 18158 0000D0F3 0F840EAE0000            	je L_error_fvar_undefined
 18159 0000D0F9 803804                  	cmp byte [rax], T_closure
 18160 0000D0FC 0F8589AE0000            	jne L_error_non_closure
 18161 0000D102 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18162 0000D105 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18163 0000D108 50                      	push rax
 18164 0000D109 6A01                    	push 1	; arg count
 18165 0000D10B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18166 0000D110 E81FAF0000              	call malloc
 18167 0000D115 50                      	push rax
 18168 0000D116 BF00000000              	mov rdi, 8 * 0	; new rib
 18169 0000D11B E814AF0000              	call malloc
 18170 0000D120 50                      	push rax
 18171 0000D121 BF08000000              	mov rdi, 8 * 1	; extended env
 18172 0000D126 E809AF0000              	call malloc
 18173 0000D12B 488B7D10                	mov rdi, ENV
 18174 0000D12F BE00000000              	mov rsi, 0
 18175 0000D134 BA01000000              	mov rdx, 1
 18176                                  .L_lambda_simple_env_loop_0123:	; ext_env[i + 1] <-- env[i]
 18177 0000D139 4883FE00                	cmp rsi, 0
 18178 0000D13D 7410                    	je .L_lambda_simple_env_end_0123
 18179 0000D13F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18180 0000D143 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18181 0000D147 48FFC6                  	inc rsi
 18182 0000D14A 48FFC2                  	inc rdx
 18183 0000D14D EBEA                    	jmp .L_lambda_simple_env_loop_0123
 18184                                  .L_lambda_simple_env_end_0123:
 18185 0000D14F 5B                      	pop rbx
 18186 0000D150 BE00000000              	mov rsi, 0
 18187                                  .L_lambda_simple_params_loop_0123:	; copy params
 18188 0000D155 4883FE00                	cmp rsi, 0
 18189 0000D159 740E                    	je .L_lambda_simple_params_end_0123
 18190 0000D15B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18191 0000D160 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18192 0000D164 48FFC6                  	inc rsi
 18193 0000D167 EBEC                    	jmp .L_lambda_simple_params_loop_0123
 18194                                  .L_lambda_simple_params_end_0123:
 18195 0000D169 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18196 0000D16C 4889C3                  	mov rbx, rax
 18197 0000D16F 58                      	pop rax
 18198 0000D170 C60004                  	mov byte [rax], T_closure
 18199 0000D173 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18200 0000D177 48C74009[84D10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0123
 18201 0000D17F E97F030000              	jmp .L_lambda_simple_end_0123
 18202                                  .L_lambda_simple_code_0123:	; lambda-simple body
 18203 0000D184 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18204 0000D18A 740B                    	je .L_lambda_simple_arity_check_ok_0123
 18205 0000D18C FF742410                	push qword [rsp + 8 * 2]
 18206 0000D190 6A01                    	push 1
 18207 0000D192 E956AE0000              	jmp L_error_incorrect_arity_simple
 18208                                  .L_lambda_simple_arity_check_ok_0123:
 18209 0000D197 C8000000                	enter 0, 0
 18210 0000D19B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18211 0000D1A0 E88FAE0000              	call malloc
 18212 0000D1A5 50                      	push rax
 18213 0000D1A6 BF08000000              	mov rdi, 8 * 1	; new rib
 18214 0000D1AB E884AE0000              	call malloc
 18215 0000D1B0 50                      	push rax
 18216 0000D1B1 BF10000000              	mov rdi, 8 * 2	; extended env
 18217 0000D1B6 E879AE0000              	call malloc
 18218 0000D1BB 488B7D10                	mov rdi, ENV
 18219 0000D1BF BE00000000              	mov rsi, 0
 18220 0000D1C4 BA01000000              	mov rdx, 1
 18221                                  .L_lambda_simple_env_loop_0124:	; ext_env[i + 1] <-- env[i]
 18222 0000D1C9 4883FE01                	cmp rsi, 1
 18223 0000D1CD 7410                    	je .L_lambda_simple_env_end_0124
 18224 0000D1CF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18225 0000D1D3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18226 0000D1D7 48FFC6                  	inc rsi
 18227 0000D1DA 48FFC2                  	inc rdx
 18228 0000D1DD EBEA                    	jmp .L_lambda_simple_env_loop_0124
 18229                                  .L_lambda_simple_env_end_0124:
 18230 0000D1DF 5B                      	pop rbx
 18231 0000D1E0 BE00000000              	mov rsi, 0
 18232                                  .L_lambda_simple_params_loop_0124:	; copy params
 18233 0000D1E5 4883FE01                	cmp rsi, 1
 18234 0000D1E9 740E                    	je .L_lambda_simple_params_end_0124
 18235 0000D1EB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18236 0000D1F0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18237 0000D1F4 48FFC6                  	inc rsi
 18238 0000D1F7 EBEC                    	jmp .L_lambda_simple_params_loop_0124
 18239                                  .L_lambda_simple_params_end_0124:
 18240 0000D1F9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18241 0000D1FC 4889C3                  	mov rbx, rax
 18242 0000D1FF 58                      	pop rax
 18243 0000D200 C60004                  	mov byte [rax], T_closure
 18244 0000D203 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18245 0000D207 48C74009[14D20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0124
 18246 0000D20F E927010000              	jmp .L_lambda_simple_end_0124
 18247                                  .L_lambda_simple_code_0124:	; lambda-simple body
 18248 0000D214 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18249 0000D21A 740B                    	je .L_lambda_simple_arity_check_ok_0124
 18250 0000D21C FF742410                	push qword [rsp + 8 * 2]
 18251 0000D220 6A01                    	push 1
 18252 0000D222 E9C6AD0000              	jmp L_error_incorrect_arity_simple
 18253                                  .L_lambda_simple_arity_check_ok_0124:
 18254 0000D227 C8000000                	enter 0, 0
 18255                                  	; preparing a non-tail-call
 18256 0000D22B 48B8-                   	mov rax, L_constants + 2571
 18256 0000D22D [0B0A000000000000] 
 18257 0000D235 50                      	push rax
 18258 0000D236 488B4520                	mov rax, PARAM(0)	; param ch
 18259 0000D23A 50                      	push rax
 18260 0000D23B 48B8-                   	mov rax, L_constants + 2569
 18260 0000D23D [090A000000000000] 
 18261 0000D245 50                      	push rax
 18262 0000D246 6A03                    	push 3	; arg count
 18263 0000D248 488B0425[B0120000]      	mov rax, qword [free_var_73]	; free var char<=?
 18264 0000D250 803805                  	cmp byte [rax], T_undefined
 18265 0000D253 0F84AEAC0000            	je L_error_fvar_undefined
 18266 0000D259 803804                  	cmp byte [rax], T_closure
 18267 0000D25C 0F8529AD0000            	jne L_error_non_closure
 18268 0000D262 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18269 0000D265 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18270 0000D268 483D[02000000]          	cmp rax, sob_boolean_false
 18271 0000D26E 0F84BF000000            	je .L_if_else_00ef
 18272                                  	; preparing a tail-call
 18273                                  	; preparing a non-tail-call
 18274 0000D274 488B4510                	mov rax, ENV
 18275 0000D278 488B00                  	mov rax, qword [rax + 8 * 0]
 18276 0000D27B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var delta
 18277 0000D27E 50                      	push rax
 18278                                  	; preparing a non-tail-call
 18279 0000D27F 488B4520                	mov rax, PARAM(0)	; param ch
 18280 0000D283 50                      	push rax
 18281 0000D284 6A01                    	push 1	; arg count
 18282 0000D286 488B0425[28120000]      	mov rax, qword [free_var_65]	; free var char->integer
 18283 0000D28E 803805                  	cmp byte [rax], T_undefined
 18284 0000D291 0F8470AC0000            	je L_error_fvar_undefined
 18285 0000D297 803804                  	cmp byte [rax], T_closure
 18286 0000D29A 0F85EBAC0000            	jne L_error_non_closure
 18287 0000D2A0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18288 0000D2A3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18289 0000D2A6 50                      	push rax
 18290 0000D2A7 6A02                    	push 2	; arg count
 18291 0000D2A9 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 18292 0000D2B1 803805                  	cmp byte [rax], T_undefined
 18293 0000D2B4 0F844DAC0000            	je L_error_fvar_undefined
 18294 0000D2BA 803804                  	cmp byte [rax], T_closure
 18295 0000D2BD 0F85C8AC0000            	jne L_error_non_closure
 18296 0000D2C3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18297 0000D2C6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18298 0000D2C9 50                      	push rax
 18299 0000D2CA 6A01                    	push 1	; arg count
 18300 0000D2CC 488B0425[C0130000]      	mov rax, qword [free_var_89]	; free var integer->char
 18301 0000D2D4 803805                  	cmp byte [rax], T_undefined
 18302 0000D2D7 0F842AAC0000            	je L_error_fvar_undefined
 18303 0000D2DD 803804                  	cmp byte [rax], T_closure
 18304 0000D2E0 0F85A5AC0000            	jne L_error_non_closure
 18305 0000D2E6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18306 0000D2E9 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 18307 0000D2EC FF7500                  	push qword[rbp]
 18308 0000D2EF 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 18309 0000D2F2 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 18310 0000D2F6 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 18311 0000D2FA 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 18312 0000D2FE 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 18313 0000D301 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 18314 0000D304 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 18315 0000D309 4983C103                	add r9, 3 	 ;for getting to the params
 18316 0000D30D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 18317 0000D311 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 18318                                  .L_tc_recycle_frame_loop_01c0:
 18319 0000D314 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 18320 0000D317 7410                    	je .L_tc_recycle_frame_done_01c0
 18321 0000D319 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 18322 0000D31C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 18323 0000D31F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 18324 0000D323 4983E808                	sub r8, 8	 ;move the top of the stack one down
 18325 0000D327 EBEB                    	jmp .L_tc_recycle_frame_loop_01c0
 18326                                  .L_tc_recycle_frame_done_01c0:
 18327 0000D329 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 18328 0000D32A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 18329 0000D32E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18330 0000D331 EB04                    	jmp .L_if_end_00ef
 18331                                  .L_if_else_00ef:
 18332 0000D333 488B4520                	mov rax, PARAM(0)	; param ch
 18333                                  .L_if_end_00ef:
 18334 0000D337 C9                      	leave
 18335 0000D338 C21800                  	ret AND_KILL_FRAME(1)
 18336                                  .L_lambda_simple_end_0124:	; new closure is in rax
 18337 0000D33B 48890425[8E120000]      	mov qword [free_var_71], rax
 18338 0000D343 48B8-                   	mov rax, sob_void
 18338 0000D345 [0000000000000000] 
 18339                                  
 18340 0000D34D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18341 0000D352 E8DDAC0000              	call malloc
 18342 0000D357 50                      	push rax
 18343 0000D358 BF08000000              	mov rdi, 8 * 1	; new rib
 18344 0000D35D E8D2AC0000              	call malloc
 18345 0000D362 50                      	push rax
 18346 0000D363 BF10000000              	mov rdi, 8 * 2	; extended env
 18347 0000D368 E8C7AC0000              	call malloc
 18348 0000D36D 488B7D10                	mov rdi, ENV
 18349 0000D371 BE00000000              	mov rsi, 0
 18350 0000D376 BA01000000              	mov rdx, 1
 18351                                  .L_lambda_simple_env_loop_0125:	; ext_env[i + 1] <-- env[i]
 18352 0000D37B 4883FE01                	cmp rsi, 1
 18353 0000D37F 7410                    	je .L_lambda_simple_env_end_0125
 18354 0000D381 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18355 0000D385 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18356 0000D389 48FFC6                  	inc rsi
 18357 0000D38C 48FFC2                  	inc rdx
 18358 0000D38F EBEA                    	jmp .L_lambda_simple_env_loop_0125
 18359                                  .L_lambda_simple_env_end_0125:
 18360 0000D391 5B                      	pop rbx
 18361 0000D392 BE00000000              	mov rsi, 0
 18362                                  .L_lambda_simple_params_loop_0125:	; copy params
 18363 0000D397 4883FE01                	cmp rsi, 1
 18364 0000D39B 740E                    	je .L_lambda_simple_params_end_0125
 18365 0000D39D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18366 0000D3A2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18367 0000D3A6 48FFC6                  	inc rsi
 18368 0000D3A9 EBEC                    	jmp .L_lambda_simple_params_loop_0125
 18369                                  .L_lambda_simple_params_end_0125:
 18370 0000D3AB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18371 0000D3AE 4889C3                  	mov rbx, rax
 18372 0000D3B1 58                      	pop rax
 18373 0000D3B2 C60004                  	mov byte [rax], T_closure
 18374 0000D3B5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18375 0000D3B9 48C74009[C6D30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0125
 18376 0000D3C1 E927010000              	jmp .L_lambda_simple_end_0125
 18377                                  .L_lambda_simple_code_0125:	; lambda-simple body
 18378 0000D3C6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18379 0000D3CC 740B                    	je .L_lambda_simple_arity_check_ok_0125
 18380 0000D3CE FF742410                	push qword [rsp + 8 * 2]
 18381 0000D3D2 6A01                    	push 1
 18382 0000D3D4 E914AC0000              	jmp L_error_incorrect_arity_simple
 18383                                  .L_lambda_simple_arity_check_ok_0125:
 18384 0000D3D9 C8000000                	enter 0, 0
 18385                                  	; preparing a non-tail-call
 18386 0000D3DD 48B8-                   	mov rax, L_constants + 2575
 18386 0000D3DF [0F0A000000000000] 
 18387 0000D3E7 50                      	push rax
 18388 0000D3E8 488B4520                	mov rax, PARAM(0)	; param ch
 18389 0000D3EC 50                      	push rax
 18390 0000D3ED 48B8-                   	mov rax, L_constants + 2573
 18390 0000D3EF [0D0A000000000000] 
 18391 0000D3F7 50                      	push rax
 18392 0000D3F8 6A03                    	push 3	; arg count
 18393 0000D3FA 488B0425[B0120000]      	mov rax, qword [free_var_73]	; free var char<=?
 18394 0000D402 803805                  	cmp byte [rax], T_undefined
 18395 0000D405 0F84FCAA0000            	je L_error_fvar_undefined
 18396 0000D40B 803804                  	cmp byte [rax], T_closure
 18397 0000D40E 0F8577AB0000            	jne L_error_non_closure
 18398 0000D414 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18399 0000D417 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18400 0000D41A 483D[02000000]          	cmp rax, sob_boolean_false
 18401 0000D420 0F84BF000000            	je .L_if_else_00f0
 18402                                  	; preparing a tail-call
 18403                                  	; preparing a non-tail-call
 18404 0000D426 488B4510                	mov rax, ENV
 18405 0000D42A 488B00                  	mov rax, qword [rax + 8 * 0]
 18406 0000D42D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var delta
 18407 0000D430 50                      	push rax
 18408                                  	; preparing a non-tail-call
 18409 0000D431 488B4520                	mov rax, PARAM(0)	; param ch
 18410 0000D435 50                      	push rax
 18411 0000D436 6A01                    	push 1	; arg count
 18412 0000D438 488B0425[28120000]      	mov rax, qword [free_var_65]	; free var char->integer
 18413 0000D440 803805                  	cmp byte [rax], T_undefined
 18414 0000D443 0F84BEAA0000            	je L_error_fvar_undefined
 18415 0000D449 803804                  	cmp byte [rax], T_closure
 18416 0000D44C 0F8539AB0000            	jne L_error_non_closure
 18417 0000D452 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18418 0000D455 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18419 0000D458 50                      	push rax
 18420 0000D459 6A02                    	push 2	; arg count
 18421 0000D45B 488B0425[F90D0000]      	mov rax, qword [free_var_2]	; free var -
 18422 0000D463 803805                  	cmp byte [rax], T_undefined
 18423 0000D466 0F849BAA0000            	je L_error_fvar_undefined
 18424 0000D46C 803804                  	cmp byte [rax], T_closure
 18425 0000D46F 0F8516AB0000            	jne L_error_non_closure
 18426 0000D475 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18427 0000D478 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18428 0000D47B 50                      	push rax
 18429 0000D47C 6A01                    	push 1	; arg count
 18430 0000D47E 488B0425[C0130000]      	mov rax, qword [free_var_89]	; free var integer->char
 18431 0000D486 803805                  	cmp byte [rax], T_undefined
 18432 0000D489 0F8478AA0000            	je L_error_fvar_undefined
 18433 0000D48F 803804                  	cmp byte [rax], T_closure
 18434 0000D492 0F85F3AA0000            	jne L_error_non_closure
 18435 0000D498 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18436 0000D49B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 18437 0000D49E FF7500                  	push qword[rbp]
 18438 0000D4A1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 18439 0000D4A4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 18440 0000D4A8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 18441 0000D4AC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 18442 0000D4B0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 18443 0000D4B3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 18444 0000D4B6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 18445 0000D4BB 4983C103                	add r9, 3 	 ;for getting to the params
 18446 0000D4BF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 18447 0000D4C3 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 18448                                  .L_tc_recycle_frame_loop_01c1:
 18449 0000D4C6 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 18450 0000D4C9 7410                    	je .L_tc_recycle_frame_done_01c1
 18451 0000D4CB 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 18452 0000D4CE 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 18453 0000D4D1 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 18454 0000D4D5 4983E808                	sub r8, 8	 ;move the top of the stack one down
 18455 0000D4D9 EBEB                    	jmp .L_tc_recycle_frame_loop_01c1
 18456                                  .L_tc_recycle_frame_done_01c1:
 18457 0000D4DB 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 18458 0000D4DC 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 18459 0000D4E0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18460 0000D4E3 EB04                    	jmp .L_if_end_00f0
 18461                                  .L_if_else_00f0:
 18462 0000D4E5 488B4520                	mov rax, PARAM(0)	; param ch
 18463                                  .L_if_end_00f0:
 18464 0000D4E9 C9                      	leave
 18465 0000D4EA C21800                  	ret AND_KILL_FRAME(1)
 18466                                  .L_lambda_simple_end_0125:	; new closure is in rax
 18467 0000D4ED 48890425[9F120000]      	mov qword [free_var_72], rax
 18468 0000D4F5 48B8-                   	mov rax, sob_void
 18468 0000D4F7 [0000000000000000] 
 18469 0000D4FF C9                      	leave
 18470 0000D500 C21800                  	ret AND_KILL_FRAME(1)
 18471                                  .L_lambda_simple_end_0123:	; new closure is in rax
 18472 0000D503 803804                  	cmp byte [rax], T_closure
 18473 0000D506 0F857FAA0000            	jne L_error_non_closure
 18474 0000D50C FF7001                  	push SOB_CLOSURE_ENV(rax)
 18475 0000D50F FF5009                  	call SOB_CLOSURE_CODE(rax)
 18476                                  
 18477 0000D512 4889C7                  	mov rdi, rax
 18478 0000D515 E86FAD0000              	call print_sexpr_if_not_void
 18479 0000D51A 48B8-                   	mov rax, L_constants + 0
 18479 0000D51C [0000000000000000] 
 18480 0000D524 48890425[4A120000]      	mov qword [free_var_67], rax
 18481 0000D52C 48B8-                   	mov rax, sob_void
 18481 0000D52E [0000000000000000] 
 18482                                  
 18483 0000D536 4889C7                  	mov rdi, rax
 18484 0000D539 E84BAD0000              	call print_sexpr_if_not_void
 18485 0000D53E 48B8-                   	mov rax, L_constants + 0
 18485 0000D540 [0000000000000000] 
 18486 0000D548 48890425[39120000]      	mov qword [free_var_66], rax
 18487 0000D550 48B8-                   	mov rax, sob_void
 18487 0000D552 [0000000000000000] 
 18488                                  
 18489 0000D55A 4889C7                  	mov rdi, rax
 18490 0000D55D E827AD0000              	call print_sexpr_if_not_void
 18491 0000D562 48B8-                   	mov rax, L_constants + 0
 18491 0000D564 [0000000000000000] 
 18492 0000D56C 48890425[5B120000]      	mov qword [free_var_68], rax
 18493 0000D574 48B8-                   	mov rax, sob_void
 18493 0000D576 [0000000000000000] 
 18494                                  
 18495 0000D57E 4889C7                  	mov rdi, rax
 18496 0000D581 E803AD0000              	call print_sexpr_if_not_void
 18497 0000D586 48B8-                   	mov rax, L_constants + 0
 18497 0000D588 [0000000000000000] 
 18498 0000D590 48890425[7D120000]      	mov qword [free_var_70], rax
 18499 0000D598 48B8-                   	mov rax, sob_void
 18499 0000D59A [0000000000000000] 
 18500                                  
 18501 0000D5A2 4889C7                  	mov rdi, rax
 18502 0000D5A5 E8DFAC0000              	call print_sexpr_if_not_void
 18503 0000D5AA 48B8-                   	mov rax, L_constants + 0
 18503 0000D5AC [0000000000000000] 
 18504 0000D5B4 48890425[6C120000]      	mov qword [free_var_69], rax
 18505 0000D5BC 48B8-                   	mov rax, sob_void
 18505 0000D5BE [0000000000000000] 
 18506                                  
 18507 0000D5C6 4889C7                  	mov rdi, rax
 18508 0000D5C9 E8BBAC0000              	call print_sexpr_if_not_void
 18509                                  	; preparing a non-tail-call
 18510 0000D5CE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18511 0000D5D3 E85CAA0000              	call malloc
 18512 0000D5D8 50                      	push rax
 18513 0000D5D9 BF00000000              	mov rdi, 8 * 0	; new rib
 18514 0000D5DE E851AA0000              	call malloc
 18515 0000D5E3 50                      	push rax
 18516 0000D5E4 BF08000000              	mov rdi, 8 * 1	; extended env
 18517 0000D5E9 E846AA0000              	call malloc
 18518 0000D5EE 488B7D10                	mov rdi, ENV
 18519 0000D5F2 BE00000000              	mov rsi, 0
 18520 0000D5F7 BA01000000              	mov rdx, 1
 18521                                  .L_lambda_simple_env_loop_0126:	; ext_env[i + 1] <-- env[i]
 18522 0000D5FC 4883FE00                	cmp rsi, 0
 18523 0000D600 7410                    	je .L_lambda_simple_env_end_0126
 18524 0000D602 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18525 0000D606 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18526 0000D60A 48FFC6                  	inc rsi
 18527 0000D60D 48FFC2                  	inc rdx
 18528 0000D610 EBEA                    	jmp .L_lambda_simple_env_loop_0126
 18529                                  .L_lambda_simple_env_end_0126:
 18530 0000D612 5B                      	pop rbx
 18531 0000D613 BE00000000              	mov rsi, 0
 18532                                  .L_lambda_simple_params_loop_0126:	; copy params
 18533 0000D618 4883FE00                	cmp rsi, 0
 18534 0000D61C 740E                    	je .L_lambda_simple_params_end_0126
 18535 0000D61E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18536 0000D623 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18537 0000D627 48FFC6                  	inc rsi
 18538 0000D62A EBEC                    	jmp .L_lambda_simple_params_loop_0126
 18539                                  .L_lambda_simple_params_end_0126:
 18540 0000D62C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18541 0000D62F 4889C3                  	mov rbx, rax
 18542 0000D632 58                      	pop rax
 18543 0000D633 C60004                  	mov byte [rax], T_closure
 18544 0000D636 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18545 0000D63A 48C74009[47D60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0126
 18546 0000D642 E925050000              	jmp .L_lambda_simple_end_0126
 18547                                  .L_lambda_simple_code_0126:	; lambda-simple body
 18548 0000D647 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18549 0000D64D 740B                    	je .L_lambda_simple_arity_check_ok_0126
 18550 0000D64F FF742410                	push qword [rsp + 8 * 2]
 18551 0000D653 6A01                    	push 1
 18552 0000D655 E993A90000              	jmp L_error_incorrect_arity_simple
 18553                                  .L_lambda_simple_arity_check_ok_0126:
 18554 0000D65A C8000000                	enter 0, 0
 18555 0000D65E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18556 0000D663 E8CCA90000              	call malloc
 18557 0000D668 50                      	push rax
 18558 0000D669 BF08000000              	mov rdi, 8 * 1	; new rib
 18559 0000D66E E8C1A90000              	call malloc
 18560 0000D673 50                      	push rax
 18561 0000D674 BF10000000              	mov rdi, 8 * 2	; extended env
 18562 0000D679 E8B6A90000              	call malloc
 18563 0000D67E 488B7D10                	mov rdi, ENV
 18564 0000D682 BE00000000              	mov rsi, 0
 18565 0000D687 BA01000000              	mov rdx, 1
 18566                                  .L_lambda_opt_env_loop_0028:	; ext_env[i + 1] <-- env[i]
 18567 0000D68C 4883FE01                	cmp rsi, 1
 18568 0000D690 7410                    	je .L_lambda_opt_env_end_0028
 18569 0000D692 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18570 0000D696 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18571 0000D69A 48FFC6                  	inc rsi
 18572 0000D69D 48FFC2                  	inc rdx
 18573 0000D6A0 EBEA                    	jmp .L_lambda_opt_env_loop_0028
 18574                                  .L_lambda_opt_env_end_0028:
 18575 0000D6A2 5B                      	pop rbx
 18576 0000D6A3 BE00000000              	mov rsi, 0
 18577                                  .L_lambda_opt_params_loop_0028:	; copy params
 18578 0000D6A8 4883FE01                	cmp rsi, 1
 18579 0000D6AC 740E                    	je .L_lambda_opt_params_end_0028
 18580 0000D6AE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18581 0000D6B3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18582 0000D6B7 48FFC6                  	inc rsi
 18583 0000D6BA EBEC                    	jmp .L_lambda_opt_params_loop_0028
 18584                                  .L_lambda_opt_params_end_0028:
 18585 0000D6BC 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
 18586 0000D6BF 4889C3                  	mov rbx, rax
 18587 0000D6C2 58                      	pop rax
 18588 0000D6C3 C60004                  	mov byte [rax], T_closure
 18589 0000D6C6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18590 0000D6CA 48C74009[D7D60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0028
 18591 0000D6D2 E991040000              	jmp .L_lambda_opt_end_0028
 18592                                  .L_lambda_opt_code_0028:	; lambda-opt body
 18593 0000D6D7 48837C241000            	cmp qword [rsp + 8 * 2], 0
 18594 0000D6DD 7411                    	je .L_lambda_opt_arity_check_exact_0028
 18595 0000D6DF 0F8F06020000            	jg .L_lambda_opt_arity_check_more_0028
 18596 0000D6E5 FF742410                	push qword [rsp + 8 * 2]
 18597 0000D6E9 6A00                    	push 0
 18598 0000D6EB E911A90000              	jmp L_error_incorrect_arity_opt
 18599                                  .L_lambda_opt_arity_check_exact_0028:
 18600 0000D6F0 4883EC08                	sub rsp, 8
 18601 0000D6F4 488B442408              	mov rax, qword[rsp + 8 *1]
 18602 0000D6F9 48890424                	mov qword[rsp], rax  
 18603 0000D6FD 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 18604 0000D702 4889442408              	mov qword[rsp + 8 * 1], rax
 18605 0000D707 B801000000              	mov rax, 1
 18606 0000D70C 4889442410              	mov qword[rsp + 8 *2], rax
 18607 0000D711 48B8-                   	mov rax, sob_nil
 18607 0000D713 [0100000000000000] 
 18608 0000D71B 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 18609 0000D720 C8000000                	enter 0, 0
 18610                                  	; preparing a tail-call
 18611                                  	; preparing a non-tail-call
 18612 0000D724 488B4520                	mov rax, PARAM(0)	; param s
 18613 0000D728 50                      	push rax
 18614 0000D729 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18615 0000D72E E801A90000              	call malloc
 18616 0000D733 50                      	push rax
 18617 0000D734 BF08000000              	mov rdi, 8 * 1	; new rib
 18618 0000D739 E8F6A80000              	call malloc
 18619 0000D73E 50                      	push rax
 18620 0000D73F BF18000000              	mov rdi, 8 * 3	; extended env
 18621 0000D744 E8EBA80000              	call malloc
 18622 0000D749 488B7D10                	mov rdi, ENV
 18623 0000D74D BE00000000              	mov rsi, 0
 18624 0000D752 BA01000000              	mov rdx, 1
 18625                                  .L_lambda_simple_env_loop_0128:	; ext_env[i + 1] <-- env[i]
 18626 0000D757 4883FE02                	cmp rsi, 2
 18627 0000D75B 7410                    	je .L_lambda_simple_env_end_0128
 18628 0000D75D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18629 0000D761 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18630 0000D765 48FFC6                  	inc rsi
 18631 0000D768 48FFC2                  	inc rdx
 18632 0000D76B EBEA                    	jmp .L_lambda_simple_env_loop_0128
 18633                                  .L_lambda_simple_env_end_0128:
 18634 0000D76D 5B                      	pop rbx
 18635 0000D76E BE00000000              	mov rsi, 0
 18636                                  .L_lambda_simple_params_loop_0128:	; copy params
 18637 0000D773 4883FE01                	cmp rsi, 1
 18638 0000D777 740E                    	je .L_lambda_simple_params_end_0128
 18639 0000D779 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18640 0000D77E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18641 0000D782 48FFC6                  	inc rsi
 18642 0000D785 EBEC                    	jmp .L_lambda_simple_params_loop_0128
 18643                                  .L_lambda_simple_params_end_0128:
 18644 0000D787 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18645 0000D78A 4889C3                  	mov rbx, rax
 18646 0000D78D 58                      	pop rax
 18647 0000D78E C60004                  	mov byte [rax], T_closure
 18648 0000D791 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18649 0000D795 48C74009[A2D70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0128
 18650 0000D79D E9AA000000              	jmp .L_lambda_simple_end_0128
 18651                                  .L_lambda_simple_code_0128:	; lambda-simple body
 18652 0000D7A2 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18653 0000D7A8 740B                    	je .L_lambda_simple_arity_check_ok_0128
 18654 0000D7AA FF742410                	push qword [rsp + 8 * 2]
 18655 0000D7AE 6A01                    	push 1
 18656 0000D7B0 E938A80000              	jmp L_error_incorrect_arity_simple
 18657                                  .L_lambda_simple_arity_check_ok_0128:
 18658 0000D7B5 C8000000                	enter 0, 0
 18659                                  	; preparing a tail-call
 18660                                  	; preparing a non-tail-call
 18661 0000D7B9 488B4520                	mov rax, PARAM(0)	; param ch
 18662 0000D7BD 50                      	push rax
 18663 0000D7BE 6A01                    	push 1	; arg count
 18664 0000D7C0 488B0425[8E120000]      	mov rax, qword [free_var_71]	; free var char-downcase
 18665 0000D7C8 803805                  	cmp byte [rax], T_undefined
 18666 0000D7CB 0F8436A70000            	je L_error_fvar_undefined
 18667 0000D7D1 803804                  	cmp byte [rax], T_closure
 18668 0000D7D4 0F85B1A70000            	jne L_error_non_closure
 18669 0000D7DA FF7001                  	push SOB_CLOSURE_ENV(rax)
 18670 0000D7DD FF5009                  	call SOB_CLOSURE_CODE(rax)
 18671 0000D7E0 50                      	push rax
 18672 0000D7E1 6A01                    	push 1	; arg count
 18673 0000D7E3 488B0425[28120000]      	mov rax, qword [free_var_65]	; free var char->integer
 18674 0000D7EB 803805                  	cmp byte [rax], T_undefined
 18675 0000D7EE 0F8413A70000            	je L_error_fvar_undefined
 18676 0000D7F4 803804                  	cmp byte [rax], T_closure
 18677 0000D7F7 0F858EA70000            	jne L_error_non_closure
 18678 0000D7FD FF7001                  	push SOB_CLOSURE_ENV(rax)
 18679 0000D800 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 18680 0000D803 FF7500                  	push qword[rbp]
 18681 0000D806 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 18682 0000D809 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 18683 0000D80D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 18684 0000D811 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 18685 0000D815 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 18686 0000D818 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 18687 0000D81B 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 18688 0000D820 4983C103                	add r9, 3 	 ;for getting to the params
 18689 0000D824 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 18690 0000D828 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 18691                                  .L_tc_recycle_frame_loop_01c4:
 18692 0000D82B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 18693 0000D82E 7410                    	je .L_tc_recycle_frame_done_01c4
 18694 0000D830 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 18695 0000D833 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 18696 0000D836 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 18697 0000D83A 4983E808                	sub r8, 8	 ;move the top of the stack one down
 18698 0000D83E EBEB                    	jmp .L_tc_recycle_frame_loop_01c4
 18699                                  .L_tc_recycle_frame_done_01c4:
 18700 0000D840 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 18701 0000D841 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 18702 0000D845 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18703 0000D848 C9                      	leave
 18704 0000D849 C21800                  	ret AND_KILL_FRAME(1)
 18705                                  .L_lambda_simple_end_0128:	; new closure is in rax
 18706 0000D84C 50                      	push rax
 18707 0000D84D 6A02                    	push 2	; arg count
 18708 0000D84F 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
 18709 0000D857 803805                  	cmp byte [rax], T_undefined
 18710 0000D85A 0F84A7A60000            	je L_error_fvar_undefined
 18711 0000D860 803804                  	cmp byte [rax], T_closure
 18712 0000D863 0F8522A70000            	jne L_error_non_closure
 18713 0000D869 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18714 0000D86C FF5009                  	call SOB_CLOSURE_CODE(rax)
 18715 0000D86F 50                      	push rax
 18716 0000D870 488B4510                	mov rax, ENV
 18717 0000D874 488B00                  	mov rax, qword [rax + 8 * 0]
 18718 0000D877 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator
 18719 0000D87A 50                      	push rax
 18720 0000D87B 6A02                    	push 2	; arg count
 18721 0000D87D 488B0425[08100000]      	mov rax, qword [free_var_33]	; free var apply
 18722 0000D885 803805                  	cmp byte [rax], T_undefined
 18723 0000D888 0F8479A60000            	je L_error_fvar_undefined
 18724 0000D88E 803804                  	cmp byte [rax], T_closure
 18725 0000D891 0F85F4A60000            	jne L_error_non_closure
 18726 0000D897 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18727 0000D89A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 18728 0000D89D FF7500                  	push qword[rbp]
 18729 0000D8A0 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 18730 0000D8A3 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 18731 0000D8A7 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 18732 0000D8AB 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 18733 0000D8AF 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 18734 0000D8B2 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 18735 0000D8B5 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 18736 0000D8BA 4983C103                	add r9, 3 	 ;for getting to the params
 18737 0000D8BE 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 18738 0000D8C2 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 18739                                  .L_tc_recycle_frame_loop_01c5:
 18740 0000D8C5 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 18741 0000D8C8 7410                    	je .L_tc_recycle_frame_done_01c5
 18742 0000D8CA 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 18743 0000D8CD 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 18744 0000D8D0 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 18745 0000D8D4 4983E808                	sub r8, 8	 ;move the top of the stack one down
 18746 0000D8D8 EBEB                    	jmp .L_tc_recycle_frame_loop_01c5
 18747                                  .L_tc_recycle_frame_done_01c5:
 18748 0000D8DA 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 18749 0000D8DB 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 18750 0000D8DF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18751 0000D8E2 C9                      	leave
 18752 0000D8E3 C21800                  	ret AND_KILL_FRAME(1)
 18753 0000D8E6 E97D020000              	jmp .L_lambda_opt_end_0028	; new closure is in rax
 18754                                  .L_lambda_opt_arity_check_more_0028:
 18755 0000D8EB 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 18756 0000D8F0 49B9-                   	mov r9, sob_nil
 18756 0000D8F2 [0100000000000000] 
 18757 0000D8FA 4889E3                  	mov rbx, rsp 
 18758 0000D8FD 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 18759 0000D901 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 18760 0000D904 49C1E003                	shl r8, 3
 18761 0000D908 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 18762 0000D90B 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 18763                                  .L_lambda_opt_stack_shrink_loop_0028:
 18764 0000D910 4983F800                	cmp r8, 0
 18765 0000D914 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0028
 18766 0000D916 BF11000000              	mov rdi, 1+8+8 ;for pair
 18767 0000D91B E814A70000              	call malloc;to create the pair in the stack
 18768 0000D920 C60021                  	mov byte [rax], T_pair ; to make it a pair
 18769 0000D923 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
 18770 0000D926 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 18771 0000D92A 4C894809                 	mov qword[rax+1+8],r9
 18772 0000D92E 4989C1                  	mov r9, rax ;for the recursion 
 18773 0000D931 49FFC8                  	dec r8 ;we finished copy another opt param to the list
 18774 0000D934 4883EB08                	sub rbx, 8 ;to get the next param to copy
 18775 0000D938 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0028
 18776                                  .L_lambda_opt_stack_shrink_loop_exit_0028:
 18777 0000D93A 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
 18778 0000D93F 4883E901                	sub rcx, 1
 18779 0000D943 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
 18780 0000D947 4801CC                  	add rsp, rcx ;shrinking the stack
 18781 0000D94A 4889E0                  	mov rax, rsp
 18782 0000D94D 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
 18783 0000D950 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
 18784 0000D954 49FFC8                  	dec r8 ;we start with param 0, not 1 
 18785 0000D957 4883C018                	add rax, 3 * 8;now rax is param 0
 18786 0000D95B 49C1E003                	shl r8, 3;convert to byte
 18787 0000D95F 4C01C0                  	add rax, r8;now rax is the top of the stack
 18788 0000D962 4C8908                  	mov qword[rax], r9;puting the list at the top
 18789 0000D965 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
 18790 0000D969 4889E3                  	mov rbx, rsp 
 18791 0000D96C 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
 18792 0000D96F 41BA00000000            	mov r10, 0;r10 is the not opt params length
 18793 0000D975 49FFCA                  	dec r10 
 18794 0000D978 49C1E203                	shl r10, 3;to get bytes
 18795 0000D97C 4883C318                	add rbx, 3*8;rbx is the first param
 18796 0000D980 4C01D3                  	add rbx, r10; rbx is where the address to copy to
 18797 0000D983 4889E0                  	mov rax, rsp
 18798 0000D986 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 18799 0000D989 48C744241001000000      	mov qword [rsp+2*8], 1
 18800 0000D992 488B5808                	mov rbx, qword[rax + 8 *1]
 18801 0000D996 48895C2408              	mov qword [rsp + 1*8] ,rbx
 18802 0000D99B 488B18                  	mov rbx, qword[rax]
 18803 0000D99E 48891C24                	mov qword [rsp], rbx
 18804 0000D9A2 C8000000                	enter 0, 0
 18805                                  	; preparing a tail-call
 18806                                  	; preparing a non-tail-call
 18807 0000D9A6 488B4520                	mov rax, PARAM(0)	; param s
 18808 0000D9AA 50                      	push rax
 18809 0000D9AB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18810 0000D9B0 E87FA60000              	call malloc
 18811 0000D9B5 50                      	push rax
 18812 0000D9B6 BF08000000              	mov rdi, 8 * 1	; new rib
 18813 0000D9BB E874A60000              	call malloc
 18814 0000D9C0 50                      	push rax
 18815 0000D9C1 BF18000000              	mov rdi, 8 * 3	; extended env
 18816 0000D9C6 E869A60000              	call malloc
 18817 0000D9CB 488B7D10                	mov rdi, ENV
 18818 0000D9CF BE00000000              	mov rsi, 0
 18819 0000D9D4 BA01000000              	mov rdx, 1
 18820                                  .L_lambda_simple_env_loop_0127:	; ext_env[i + 1] <-- env[i]
 18821 0000D9D9 4883FE02                	cmp rsi, 2
 18822 0000D9DD 7410                    	je .L_lambda_simple_env_end_0127
 18823 0000D9DF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18824 0000D9E3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18825 0000D9E7 48FFC6                  	inc rsi
 18826 0000D9EA 48FFC2                  	inc rdx
 18827 0000D9ED EBEA                    	jmp .L_lambda_simple_env_loop_0127
 18828                                  .L_lambda_simple_env_end_0127:
 18829 0000D9EF 5B                      	pop rbx
 18830 0000D9F0 BE00000000              	mov rsi, 0
 18831                                  .L_lambda_simple_params_loop_0127:	; copy params
 18832 0000D9F5 4883FE01                	cmp rsi, 1
 18833 0000D9F9 740E                    	je .L_lambda_simple_params_end_0127
 18834 0000D9FB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18835 0000DA00 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18836 0000DA04 48FFC6                  	inc rsi
 18837 0000DA07 EBEC                    	jmp .L_lambda_simple_params_loop_0127
 18838                                  .L_lambda_simple_params_end_0127:
 18839 0000DA09 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18840 0000DA0C 4889C3                  	mov rbx, rax
 18841 0000DA0F 58                      	pop rax
 18842 0000DA10 C60004                  	mov byte [rax], T_closure
 18843 0000DA13 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18844 0000DA17 48C74009[24DA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0127
 18845 0000DA1F E9AA000000              	jmp .L_lambda_simple_end_0127
 18846                                  .L_lambda_simple_code_0127:	; lambda-simple body
 18847 0000DA24 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18848 0000DA2A 740B                    	je .L_lambda_simple_arity_check_ok_0127
 18849 0000DA2C FF742410                	push qword [rsp + 8 * 2]
 18850 0000DA30 6A01                    	push 1
 18851 0000DA32 E9B6A50000              	jmp L_error_incorrect_arity_simple
 18852                                  .L_lambda_simple_arity_check_ok_0127:
 18853 0000DA37 C8000000                	enter 0, 0
 18854                                  	; preparing a tail-call
 18855                                  	; preparing a non-tail-call
 18856 0000DA3B 488B4520                	mov rax, PARAM(0)	; param ch
 18857 0000DA3F 50                      	push rax
 18858 0000DA40 6A01                    	push 1	; arg count
 18859 0000DA42 488B0425[8E120000]      	mov rax, qword [free_var_71]	; free var char-downcase
 18860 0000DA4A 803805                  	cmp byte [rax], T_undefined
 18861 0000DA4D 0F84B4A40000            	je L_error_fvar_undefined
 18862 0000DA53 803804                  	cmp byte [rax], T_closure
 18863 0000DA56 0F852FA50000            	jne L_error_non_closure
 18864 0000DA5C FF7001                  	push SOB_CLOSURE_ENV(rax)
 18865 0000DA5F FF5009                  	call SOB_CLOSURE_CODE(rax)
 18866 0000DA62 50                      	push rax
 18867 0000DA63 6A01                    	push 1	; arg count
 18868 0000DA65 488B0425[28120000]      	mov rax, qword [free_var_65]	; free var char->integer
 18869 0000DA6D 803805                  	cmp byte [rax], T_undefined
 18870 0000DA70 0F8491A40000            	je L_error_fvar_undefined
 18871 0000DA76 803804                  	cmp byte [rax], T_closure
 18872 0000DA79 0F850CA50000            	jne L_error_non_closure
 18873 0000DA7F FF7001                  	push SOB_CLOSURE_ENV(rax)
 18874 0000DA82 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 18875 0000DA85 FF7500                  	push qword[rbp]
 18876 0000DA88 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 18877 0000DA8B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 18878 0000DA8F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 18879 0000DA93 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 18880 0000DA97 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 18881 0000DA9A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 18882 0000DA9D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 18883 0000DAA2 4983C103                	add r9, 3 	 ;for getting to the params
 18884 0000DAA6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 18885 0000DAAA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 18886                                  .L_tc_recycle_frame_loop_01c2:
 18887 0000DAAD 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 18888 0000DAB0 7410                    	je .L_tc_recycle_frame_done_01c2
 18889 0000DAB2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 18890 0000DAB5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 18891 0000DAB8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 18892 0000DABC 4983E808                	sub r8, 8	 ;move the top of the stack one down
 18893 0000DAC0 EBEB                    	jmp .L_tc_recycle_frame_loop_01c2
 18894                                  .L_tc_recycle_frame_done_01c2:
 18895 0000DAC2 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 18896 0000DAC3 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 18897 0000DAC7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18898 0000DACA C9                      	leave
 18899 0000DACB C21800                  	ret AND_KILL_FRAME(1)
 18900                                  .L_lambda_simple_end_0127:	; new closure is in rax
 18901 0000DACE 50                      	push rax
 18902 0000DACF 6A02                    	push 2	; arg count
 18903 0000DAD1 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
 18904 0000DAD9 803805                  	cmp byte [rax], T_undefined
 18905 0000DADC 0F8425A40000            	je L_error_fvar_undefined
 18906 0000DAE2 803804                  	cmp byte [rax], T_closure
 18907 0000DAE5 0F85A0A40000            	jne L_error_non_closure
 18908 0000DAEB FF7001                  	push SOB_CLOSURE_ENV(rax)
 18909 0000DAEE FF5009                  	call SOB_CLOSURE_CODE(rax)
 18910 0000DAF1 50                      	push rax
 18911 0000DAF2 488B4510                	mov rax, ENV
 18912 0000DAF6 488B00                  	mov rax, qword [rax + 8 * 0]
 18913 0000DAF9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator
 18914 0000DAFC 50                      	push rax
 18915 0000DAFD 6A02                    	push 2	; arg count
 18916 0000DAFF 488B0425[08100000]      	mov rax, qword [free_var_33]	; free var apply
 18917 0000DB07 803805                  	cmp byte [rax], T_undefined
 18918 0000DB0A 0F84F7A30000            	je L_error_fvar_undefined
 18919 0000DB10 803804                  	cmp byte [rax], T_closure
 18920 0000DB13 0F8572A40000            	jne L_error_non_closure
 18921 0000DB19 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18922 0000DB1C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 18923 0000DB1F FF7500                  	push qword[rbp]
 18924 0000DB22 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 18925 0000DB25 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 18926 0000DB29 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 18927 0000DB2D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 18928 0000DB31 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 18929 0000DB34 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 18930 0000DB37 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 18931 0000DB3C 4983C103                	add r9, 3 	 ;for getting to the params
 18932 0000DB40 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 18933 0000DB44 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 18934                                  .L_tc_recycle_frame_loop_01c3:
 18935 0000DB47 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 18936 0000DB4A 7410                    	je .L_tc_recycle_frame_done_01c3
 18937 0000DB4C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 18938 0000DB4F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 18939 0000DB52 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 18940 0000DB56 4983E808                	sub r8, 8	 ;move the top of the stack one down
 18941 0000DB5A EBEB                    	jmp .L_tc_recycle_frame_loop_01c3
 18942                                  .L_tc_recycle_frame_done_01c3:
 18943 0000DB5C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 18944 0000DB5D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 18945 0000DB61 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18946 0000DB64 C9                      	leave
 18947 0000DB65 C21800                  	ret AND_KILL_FRAME(1)
 18948                                  .L_lambda_opt_end_0028:	; new closure is in rax
 18949 0000DB68 C9                      	leave
 18950 0000DB69 C21800                  	ret AND_KILL_FRAME(1)
 18951                                  .L_lambda_simple_end_0126:	; new closure is in rax
 18952 0000DB6C 50                      	push rax
 18953 0000DB6D 6A01                    	push 1	; arg count
 18954 0000DB6F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18955 0000DB74 E8BBA40000              	call malloc
 18956 0000DB79 50                      	push rax
 18957 0000DB7A BF00000000              	mov rdi, 8 * 0	; new rib
 18958 0000DB7F E8B0A40000              	call malloc
 18959 0000DB84 50                      	push rax
 18960 0000DB85 BF08000000              	mov rdi, 8 * 1	; extended env
 18961 0000DB8A E8A5A40000              	call malloc
 18962 0000DB8F 488B7D10                	mov rdi, ENV
 18963 0000DB93 BE00000000              	mov rsi, 0
 18964 0000DB98 BA01000000              	mov rdx, 1
 18965                                  .L_lambda_simple_env_loop_0129:	; ext_env[i + 1] <-- env[i]
 18966 0000DB9D 4883FE00                	cmp rsi, 0
 18967 0000DBA1 7410                    	je .L_lambda_simple_env_end_0129
 18968 0000DBA3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18969 0000DBA7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18970 0000DBAB 48FFC6                  	inc rsi
 18971 0000DBAE 48FFC2                  	inc rdx
 18972 0000DBB1 EBEA                    	jmp .L_lambda_simple_env_loop_0129
 18973                                  .L_lambda_simple_env_end_0129:
 18974 0000DBB3 5B                      	pop rbx
 18975 0000DBB4 BE00000000              	mov rsi, 0
 18976                                  .L_lambda_simple_params_loop_0129:	; copy params
 18977 0000DBB9 4883FE00                	cmp rsi, 0
 18978 0000DBBD 740E                    	je .L_lambda_simple_params_end_0129
 18979 0000DBBF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18980 0000DBC4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18981 0000DBC8 48FFC6                  	inc rsi
 18982 0000DBCB EBEC                    	jmp .L_lambda_simple_params_loop_0129
 18983                                  .L_lambda_simple_params_end_0129:
 18984 0000DBCD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18985 0000DBD0 4889C3                  	mov rbx, rax
 18986 0000DBD3 58                      	pop rax
 18987 0000DBD4 C60004                  	mov byte [rax], T_closure
 18988 0000DBD7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18989 0000DBDB 48C74009[E8DB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0129
 18990 0000DBE3 E938010000              	jmp .L_lambda_simple_end_0129
 18991                                  .L_lambda_simple_code_0129:	; lambda-simple body
 18992 0000DBE8 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18993 0000DBEE 740B                    	je .L_lambda_simple_arity_check_ok_0129
 18994 0000DBF0 FF742410                	push qword [rsp + 8 * 2]
 18995 0000DBF4 6A01                    	push 1
 18996 0000DBF6 E9F2A30000              	jmp L_error_incorrect_arity_simple
 18997                                  .L_lambda_simple_arity_check_ok_0129:
 18998 0000DBFB C8000000                	enter 0, 0
 18999                                  	; preparing a non-tail-call
 19000 0000DBFF 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 19001 0000DC07 803805                  	cmp byte [rax], T_undefined
 19002 0000DC0A 0F84F7A20000            	je L_error_fvar_undefined
 19003 0000DC10 50                      	push rax
 19004 0000DC11 6A01                    	push 1	; arg count
 19005 0000DC13 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 19006 0000DC17 803804                  	cmp byte [rax], T_closure
 19007 0000DC1A 0F856BA30000            	jne L_error_non_closure
 19008 0000DC20 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19009 0000DC23 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19010 0000DC26 48890425[4A120000]      	mov qword [free_var_67], rax
 19011 0000DC2E 48B8-                   	mov rax, sob_void
 19011 0000DC30 [0000000000000000] 
 19012                                  
 19013                                  	; preparing a non-tail-call
 19014 0000DC38 488B0425[2C0E0000]      	mov rax, qword [free_var_5]	; free var <=
 19015 0000DC40 803805                  	cmp byte [rax], T_undefined
 19016 0000DC43 0F84BEA20000            	je L_error_fvar_undefined
 19017 0000DC49 50                      	push rax
 19018 0000DC4A 6A01                    	push 1	; arg count
 19019 0000DC4C 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 19020 0000DC50 803804                  	cmp byte [rax], T_closure
 19021 0000DC53 0F8532A30000            	jne L_error_non_closure
 19022 0000DC59 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19023 0000DC5C FF5009                  	call SOB_CLOSURE_CODE(rax)
 19024 0000DC5F 48890425[39120000]      	mov qword [free_var_66], rax
 19025 0000DC67 48B8-                   	mov rax, sob_void
 19025 0000DC69 [0000000000000000] 
 19026                                  
 19027                                  	; preparing a non-tail-call
 19028 0000DC71 488B0425[3D0E0000]      	mov rax, qword [free_var_6]	; free var =
 19029 0000DC79 803805                  	cmp byte [rax], T_undefined
 19030 0000DC7C 0F8485A20000            	je L_error_fvar_undefined
 19031 0000DC82 50                      	push rax
 19032 0000DC83 6A01                    	push 1	; arg count
 19033 0000DC85 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 19034 0000DC89 803804                  	cmp byte [rax], T_closure
 19035 0000DC8C 0F85F9A20000            	jne L_error_non_closure
 19036 0000DC92 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19037 0000DC95 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19038 0000DC98 48890425[5B120000]      	mov qword [free_var_68], rax
 19039 0000DCA0 48B8-                   	mov rax, sob_void
 19039 0000DCA2 [0000000000000000] 
 19040                                  
 19041                                  	; preparing a non-tail-call
 19042 0000DCAA 488B0425[4E0E0000]      	mov rax, qword [free_var_7]	; free var >
 19043 0000DCB2 803805                  	cmp byte [rax], T_undefined
 19044 0000DCB5 0F844CA20000            	je L_error_fvar_undefined
 19045 0000DCBB 50                      	push rax
 19046 0000DCBC 6A01                    	push 1	; arg count
 19047 0000DCBE 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 19048 0000DCC2 803804                  	cmp byte [rax], T_closure
 19049 0000DCC5 0F85C0A20000            	jne L_error_non_closure
 19050 0000DCCB FF7001                  	push SOB_CLOSURE_ENV(rax)
 19051 0000DCCE FF5009                  	call SOB_CLOSURE_CODE(rax)
 19052 0000DCD1 48890425[7D120000]      	mov qword [free_var_70], rax
 19053 0000DCD9 48B8-                   	mov rax, sob_void
 19053 0000DCDB [0000000000000000] 
 19054                                  
 19055                                  	; preparing a non-tail-call
 19056 0000DCE3 488B0425[5F0E0000]      	mov rax, qword [free_var_8]	; free var >=
 19057 0000DCEB 803805                  	cmp byte [rax], T_undefined
 19058 0000DCEE 0F8413A20000            	je L_error_fvar_undefined
 19059 0000DCF4 50                      	push rax
 19060 0000DCF5 6A01                    	push 1	; arg count
 19061 0000DCF7 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 19062 0000DCFB 803804                  	cmp byte [rax], T_closure
 19063 0000DCFE 0F8587A20000            	jne L_error_non_closure
 19064 0000DD04 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19065 0000DD07 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19066 0000DD0A 48890425[6C120000]      	mov qword [free_var_69], rax
 19067 0000DD12 48B8-                   	mov rax, sob_void
 19067 0000DD14 [0000000000000000] 
 19068 0000DD1C C9                      	leave
 19069 0000DD1D C21800                  	ret AND_KILL_FRAME(1)
 19070                                  .L_lambda_simple_end_0129:	; new closure is in rax
 19071 0000DD20 803804                  	cmp byte [rax], T_closure
 19072 0000DD23 0F8562A20000            	jne L_error_non_closure
 19073 0000DD29 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19074 0000DD2C FF5009                  	call SOB_CLOSURE_CODE(rax)
 19075                                  
 19076 0000DD2F 4889C7                  	mov rdi, rax
 19077 0000DD32 E852A50000              	call print_sexpr_if_not_void
 19078 0000DD37 48B8-                   	mov rax, L_constants + 0
 19078 0000DD39 [0000000000000000] 
 19079 0000DD41 48890425[35160000]      	mov qword [free_var_126], rax
 19080 0000DD49 48B8-                   	mov rax, sob_void
 19080 0000DD4B [0000000000000000] 
 19081                                  
 19082 0000DD53 4889C7                  	mov rdi, rax
 19083 0000DD56 E82EA50000              	call print_sexpr_if_not_void
 19084 0000DD5B 48B8-                   	mov rax, L_constants + 0
 19084 0000DD5D [0000000000000000] 
 19085 0000DD65 48890425[9B160000]      	mov qword [free_var_132], rax
 19086 0000DD6D 48B8-                   	mov rax, sob_void
 19086 0000DD6F [0000000000000000] 
 19087                                  
 19088 0000DD77 4889C7                  	mov rdi, rax
 19089 0000DD7A E80AA50000              	call print_sexpr_if_not_void
 19090                                  	; preparing a non-tail-call
 19091 0000DD7F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19092 0000DD84 E8ABA20000              	call malloc
 19093 0000DD89 50                      	push rax
 19094 0000DD8A BF00000000              	mov rdi, 8 * 0	; new rib
 19095 0000DD8F E8A0A20000              	call malloc
 19096 0000DD94 50                      	push rax
 19097 0000DD95 BF08000000              	mov rdi, 8 * 1	; extended env
 19098 0000DD9A E895A20000              	call malloc
 19099 0000DD9F 488B7D10                	mov rdi, ENV
 19100 0000DDA3 BE00000000              	mov rsi, 0
 19101 0000DDA8 BA01000000              	mov rdx, 1
 19102                                  .L_lambda_simple_env_loop_012a:	; ext_env[i + 1] <-- env[i]
 19103 0000DDAD 4883FE00                	cmp rsi, 0
 19104 0000DDB1 7410                    	je .L_lambda_simple_env_end_012a
 19105 0000DDB3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19106 0000DDB7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19107 0000DDBB 48FFC6                  	inc rsi
 19108 0000DDBE 48FFC2                  	inc rdx
 19109 0000DDC1 EBEA                    	jmp .L_lambda_simple_env_loop_012a
 19110                                  .L_lambda_simple_env_end_012a:
 19111 0000DDC3 5B                      	pop rbx
 19112 0000DDC4 BE00000000              	mov rsi, 0
 19113                                  .L_lambda_simple_params_loop_012a:	; copy params
 19114 0000DDC9 4883FE00                	cmp rsi, 0
 19115 0000DDCD 740E                    	je .L_lambda_simple_params_end_012a
 19116 0000DDCF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19117 0000DDD4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19118 0000DDD8 48FFC6                  	inc rsi
 19119 0000DDDB EBEC                    	jmp .L_lambda_simple_params_loop_012a
 19120                                  .L_lambda_simple_params_end_012a:
 19121 0000DDDD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19122 0000DDE0 4889C3                  	mov rbx, rax
 19123 0000DDE3 58                      	pop rax
 19124 0000DDE4 C60004                  	mov byte [rax], T_closure
 19125 0000DDE7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19126 0000DDEB 48C74009[F8DD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_012a
 19127 0000DDF3 E96C010000              	jmp .L_lambda_simple_end_012a
 19128                                  .L_lambda_simple_code_012a:	; lambda-simple body
 19129 0000DDF8 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19130 0000DDFE 740B                    	je .L_lambda_simple_arity_check_ok_012a
 19131 0000DE00 FF742410                	push qword [rsp + 8 * 2]
 19132 0000DE04 6A01                    	push 1
 19133 0000DE06 E9E2A10000              	jmp L_error_incorrect_arity_simple
 19134                                  .L_lambda_simple_arity_check_ok_012a:
 19135 0000DE0B C8000000                	enter 0, 0
 19136 0000DE0F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19137 0000DE14 E81BA20000              	call malloc
 19138 0000DE19 50                      	push rax
 19139 0000DE1A BF08000000              	mov rdi, 8 * 1	; new rib
 19140 0000DE1F E810A20000              	call malloc
 19141 0000DE24 50                      	push rax
 19142 0000DE25 BF10000000              	mov rdi, 8 * 2	; extended env
 19143 0000DE2A E805A20000              	call malloc
 19144 0000DE2F 488B7D10                	mov rdi, ENV
 19145 0000DE33 BE00000000              	mov rsi, 0
 19146 0000DE38 BA01000000              	mov rdx, 1
 19147                                  .L_lambda_simple_env_loop_012b:	; ext_env[i + 1] <-- env[i]
 19148 0000DE3D 4883FE01                	cmp rsi, 1
 19149 0000DE41 7410                    	je .L_lambda_simple_env_end_012b
 19150 0000DE43 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19151 0000DE47 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19152 0000DE4B 48FFC6                  	inc rsi
 19153 0000DE4E 48FFC2                  	inc rdx
 19154 0000DE51 EBEA                    	jmp .L_lambda_simple_env_loop_012b
 19155                                  .L_lambda_simple_env_end_012b:
 19156 0000DE53 5B                      	pop rbx
 19157 0000DE54 BE00000000              	mov rsi, 0
 19158                                  .L_lambda_simple_params_loop_012b:	; copy params
 19159 0000DE59 4883FE01                	cmp rsi, 1
 19160 0000DE5D 740E                    	je .L_lambda_simple_params_end_012b
 19161 0000DE5F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19162 0000DE64 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19163 0000DE68 48FFC6                  	inc rsi
 19164 0000DE6B EBEC                    	jmp .L_lambda_simple_params_loop_012b
 19165                                  .L_lambda_simple_params_end_012b:
 19166 0000DE6D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19167 0000DE70 4889C3                  	mov rbx, rax
 19168 0000DE73 58                      	pop rax
 19169 0000DE74 C60004                  	mov byte [rax], T_closure
 19170 0000DE77 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19171 0000DE7B 48C74009[88DE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_012b
 19172 0000DE83 E9D8000000              	jmp .L_lambda_simple_end_012b
 19173                                  .L_lambda_simple_code_012b:	; lambda-simple body
 19174 0000DE88 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19175 0000DE8E 740B                    	je .L_lambda_simple_arity_check_ok_012b
 19176 0000DE90 FF742410                	push qword [rsp + 8 * 2]
 19177 0000DE94 6A01                    	push 1
 19178 0000DE96 E952A10000              	jmp L_error_incorrect_arity_simple
 19179                                  .L_lambda_simple_arity_check_ok_012b:
 19180 0000DE9B C8000000                	enter 0, 0
 19181                                  	; preparing a tail-call
 19182                                  	; preparing a non-tail-call
 19183                                  	; preparing a non-tail-call
 19184 0000DE9F 488B4520                	mov rax, PARAM(0)	; param str
 19185 0000DEA3 50                      	push rax
 19186 0000DEA4 6A01                    	push 1	; arg count
 19187 0000DEA6 488B0425[BE150000]      	mov rax, qword [free_var_119]	; free var string->list
 19188 0000DEAE 803805                  	cmp byte [rax], T_undefined
 19189 0000DEB1 0F8450A00000            	je L_error_fvar_undefined
 19190 0000DEB7 803804                  	cmp byte [rax], T_closure
 19191 0000DEBA 0F85CBA00000            	jne L_error_non_closure
 19192 0000DEC0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19193 0000DEC3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19194 0000DEC6 50                      	push rax
 19195 0000DEC7 488B4510                	mov rax, ENV
 19196 0000DECB 488B00                  	mov rax, qword [rax + 8 * 0]
 19197 0000DECE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char-case-converter
 19198 0000DED1 50                      	push rax
 19199 0000DED2 6A02                    	push 2	; arg count
 19200 0000DED4 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
 19201 0000DEDC 803805                  	cmp byte [rax], T_undefined
 19202 0000DEDF 0F8422A00000            	je L_error_fvar_undefined
 19203 0000DEE5 803804                  	cmp byte [rax], T_closure
 19204 0000DEE8 0F859DA00000            	jne L_error_non_closure
 19205 0000DEEE FF7001                  	push SOB_CLOSURE_ENV(rax)
 19206 0000DEF1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19207 0000DEF4 50                      	push rax
 19208 0000DEF5 6A01                    	push 1	; arg count
 19209 0000DEF7 488B0425[15140000]      	mov rax, qword [free_var_94]	; free var list->string
 19210 0000DEFF 803805                  	cmp byte [rax], T_undefined
 19211 0000DF02 0F84FF9F0000            	je L_error_fvar_undefined
 19212 0000DF08 803804                  	cmp byte [rax], T_closure
 19213 0000DF0B 0F857AA00000            	jne L_error_non_closure
 19214 0000DF11 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19215 0000DF14 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 19216 0000DF17 FF7500                  	push qword[rbp]
 19217 0000DF1A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 19218 0000DF1D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 19219 0000DF21 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 19220 0000DF25 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 19221 0000DF29 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 19222 0000DF2C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 19223 0000DF2F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 19224 0000DF34 4983C103                	add r9, 3 	 ;for getting to the params
 19225 0000DF38 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 19226 0000DF3C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 19227                                  .L_tc_recycle_frame_loop_01c6:
 19228 0000DF3F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 19229 0000DF42 7410                    	je .L_tc_recycle_frame_done_01c6
 19230 0000DF44 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 19231 0000DF47 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 19232 0000DF4A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 19233 0000DF4E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 19234 0000DF52 EBEB                    	jmp .L_tc_recycle_frame_loop_01c6
 19235                                  .L_tc_recycle_frame_done_01c6:
 19236 0000DF54 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 19237 0000DF55 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 19238 0000DF59 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19239 0000DF5C C9                      	leave
 19240 0000DF5D C21800                  	ret AND_KILL_FRAME(1)
 19241                                  .L_lambda_simple_end_012b:	; new closure is in rax
 19242 0000DF60 C9                      	leave
 19243 0000DF61 C21800                  	ret AND_KILL_FRAME(1)
 19244                                  .L_lambda_simple_end_012a:	; new closure is in rax
 19245 0000DF64 50                      	push rax
 19246 0000DF65 6A01                    	push 1	; arg count
 19247 0000DF67 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19248 0000DF6C E8C3A00000              	call malloc
 19249 0000DF71 50                      	push rax
 19250 0000DF72 BF00000000              	mov rdi, 8 * 0	; new rib
 19251 0000DF77 E8B8A00000              	call malloc
 19252 0000DF7C 50                      	push rax
 19253 0000DF7D BF08000000              	mov rdi, 8 * 1	; extended env
 19254 0000DF82 E8ADA00000              	call malloc
 19255 0000DF87 488B7D10                	mov rdi, ENV
 19256 0000DF8B BE00000000              	mov rsi, 0
 19257 0000DF90 BA01000000              	mov rdx, 1
 19258                                  .L_lambda_simple_env_loop_012c:	; ext_env[i + 1] <-- env[i]
 19259 0000DF95 4883FE00                	cmp rsi, 0
 19260 0000DF99 7410                    	je .L_lambda_simple_env_end_012c
 19261 0000DF9B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19262 0000DF9F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19263 0000DFA3 48FFC6                  	inc rsi
 19264 0000DFA6 48FFC2                  	inc rdx
 19265 0000DFA9 EBEA                    	jmp .L_lambda_simple_env_loop_012c
 19266                                  .L_lambda_simple_env_end_012c:
 19267 0000DFAB 5B                      	pop rbx
 19268 0000DFAC BE00000000              	mov rsi, 0
 19269                                  .L_lambda_simple_params_loop_012c:	; copy params
 19270 0000DFB1 4883FE00                	cmp rsi, 0
 19271 0000DFB5 740E                    	je .L_lambda_simple_params_end_012c
 19272 0000DFB7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19273 0000DFBC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19274 0000DFC0 48FFC6                  	inc rsi
 19275 0000DFC3 EBEC                    	jmp .L_lambda_simple_params_loop_012c
 19276                                  .L_lambda_simple_params_end_012c:
 19277 0000DFC5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19278 0000DFC8 4889C3                  	mov rbx, rax
 19279 0000DFCB 58                      	pop rax
 19280 0000DFCC C60004                  	mov byte [rax], T_closure
 19281 0000DFCF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19282 0000DFD3 48C74009[E0DF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_012c
 19283 0000DFDB E98D000000              	jmp .L_lambda_simple_end_012c
 19284                                  .L_lambda_simple_code_012c:	; lambda-simple body
 19285 0000DFE0 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19286 0000DFE6 740B                    	je .L_lambda_simple_arity_check_ok_012c
 19287 0000DFE8 FF742410                	push qword [rsp + 8 * 2]
 19288 0000DFEC 6A01                    	push 1
 19289 0000DFEE E9FA9F0000              	jmp L_error_incorrect_arity_simple
 19290                                  .L_lambda_simple_arity_check_ok_012c:
 19291 0000DFF3 C8000000                	enter 0, 0
 19292                                  	; preparing a non-tail-call
 19293 0000DFF7 488B0425[8E120000]      	mov rax, qword [free_var_71]	; free var char-downcase
 19294 0000DFFF 803805                  	cmp byte [rax], T_undefined
 19295 0000E002 0F84FF9E0000            	je L_error_fvar_undefined
 19296 0000E008 50                      	push rax
 19297 0000E009 6A01                    	push 1	; arg count
 19298 0000E00B 488B4520                	mov rax, PARAM(0)	; param make-string-case-converter
 19299 0000E00F 803804                  	cmp byte [rax], T_closure
 19300 0000E012 0F85739F0000            	jne L_error_non_closure
 19301 0000E018 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19302 0000E01B FF5009                  	call SOB_CLOSURE_CODE(rax)
 19303 0000E01E 48890425[35160000]      	mov qword [free_var_126], rax
 19304 0000E026 48B8-                   	mov rax, sob_void
 19304 0000E028 [0000000000000000] 
 19305                                  
 19306                                  	; preparing a non-tail-call
 19307 0000E030 488B0425[9F120000]      	mov rax, qword [free_var_72]	; free var char-upcase
 19308 0000E038 803805                  	cmp byte [rax], T_undefined
 19309 0000E03B 0F84C69E0000            	je L_error_fvar_undefined
 19310 0000E041 50                      	push rax
 19311 0000E042 6A01                    	push 1	; arg count
 19312 0000E044 488B4520                	mov rax, PARAM(0)	; param make-string-case-converter
 19313 0000E048 803804                  	cmp byte [rax], T_closure
 19314 0000E04B 0F853A9F0000            	jne L_error_non_closure
 19315 0000E051 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19316 0000E054 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19317 0000E057 48890425[9B160000]      	mov qword [free_var_132], rax
 19318 0000E05F 48B8-                   	mov rax, sob_void
 19318 0000E061 [0000000000000000] 
 19319 0000E069 C9                      	leave
 19320 0000E06A C21800                  	ret AND_KILL_FRAME(1)
 19321                                  .L_lambda_simple_end_012c:	; new closure is in rax
 19322 0000E06D 803804                  	cmp byte [rax], T_closure
 19323 0000E070 0F85159F0000            	jne L_error_non_closure
 19324 0000E076 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19325 0000E079 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19326                                  
 19327 0000E07C 4889C7                  	mov rdi, rax
 19328 0000E07F E805A20000              	call print_sexpr_if_not_void
 19329 0000E084 48B8-                   	mov rax, L_constants + 0
 19329 0000E086 [0000000000000000] 
 19330 0000E08E 48890425[BD160000]      	mov qword [free_var_134], rax
 19331 0000E096 48B8-                   	mov rax, sob_void
 19331 0000E098 [0000000000000000] 
 19332                                  
 19333 0000E0A0 4889C7                  	mov rdi, rax
 19334 0000E0A3 E8E1A10000              	call print_sexpr_if_not_void
 19335 0000E0A8 48B8-                   	mov rax, L_constants + 0
 19335 0000E0AA [0000000000000000] 
 19336 0000E0B2 48890425[AC160000]      	mov qword [free_var_133], rax
 19337 0000E0BA 48B8-                   	mov rax, sob_void
 19337 0000E0BC [0000000000000000] 
 19338                                  
 19339 0000E0C4 4889C7                  	mov rdi, rax
 19340 0000E0C7 E8BDA10000              	call print_sexpr_if_not_void
 19341 0000E0CC 48B8-                   	mov rax, L_constants + 0
 19341 0000E0CE [0000000000000000] 
 19342 0000E0D6 48890425[CE160000]      	mov qword [free_var_135], rax
 19343 0000E0DE 48B8-                   	mov rax, sob_void
 19343 0000E0E0 [0000000000000000] 
 19344                                  
 19345 0000E0E8 4889C7                  	mov rdi, rax
 19346 0000E0EB E899A10000              	call print_sexpr_if_not_void
 19347 0000E0F0 48B8-                   	mov rax, L_constants + 0
 19347 0000E0F2 [0000000000000000] 
 19348 0000E0FA 48890425[DF160000]      	mov qword [free_var_136], rax
 19349 0000E102 48B8-                   	mov rax, sob_void
 19349 0000E104 [0000000000000000] 
 19350                                  
 19351 0000E10C 4889C7                  	mov rdi, rax
 19352 0000E10F E875A10000              	call print_sexpr_if_not_void
 19353 0000E114 48B8-                   	mov rax, L_constants + 0
 19353 0000E116 [0000000000000000] 
 19354 0000E11E 48890425[F0160000]      	mov qword [free_var_137], rax
 19355 0000E126 48B8-                   	mov rax, sob_void
 19355 0000E128 [0000000000000000] 
 19356                                  
 19357 0000E130 4889C7                  	mov rdi, rax
 19358 0000E133 E851A10000              	call print_sexpr_if_not_void
 19359 0000E138 48B8-                   	mov rax, L_constants + 0
 19359 0000E13A [0000000000000000] 
 19360 0000E142 48890425[F1150000]      	mov qword [free_var_122], rax
 19361 0000E14A 48B8-                   	mov rax, sob_void
 19361 0000E14C [0000000000000000] 
 19362                                  
 19363 0000E154 4889C7                  	mov rdi, rax
 19364 0000E157 E82DA10000              	call print_sexpr_if_not_void
 19365 0000E15C 48B8-                   	mov rax, L_constants + 0
 19365 0000E15E [0000000000000000] 
 19366 0000E166 48890425[E0150000]      	mov qword [free_var_121], rax
 19367 0000E16E 48B8-                   	mov rax, sob_void
 19367 0000E170 [0000000000000000] 
 19368                                  
 19369 0000E178 4889C7                  	mov rdi, rax
 19370 0000E17B E809A10000              	call print_sexpr_if_not_void
 19371 0000E180 48B8-                   	mov rax, L_constants + 0
 19371 0000E182 [0000000000000000] 
 19372 0000E18A 48890425[02160000]      	mov qword [free_var_123], rax
 19373 0000E192 48B8-                   	mov rax, sob_void
 19373 0000E194 [0000000000000000] 
 19374                                  
 19375 0000E19C 4889C7                  	mov rdi, rax
 19376 0000E19F E8E5A00000              	call print_sexpr_if_not_void
 19377 0000E1A4 48B8-                   	mov rax, L_constants + 0
 19377 0000E1A6 [0000000000000000] 
 19378 0000E1AE 48890425[13160000]      	mov qword [free_var_124], rax
 19379 0000E1B6 48B8-                   	mov rax, sob_void
 19379 0000E1B8 [0000000000000000] 
 19380                                  
 19381 0000E1C0 4889C7                  	mov rdi, rax
 19382 0000E1C3 E8C1A00000              	call print_sexpr_if_not_void
 19383 0000E1C8 48B8-                   	mov rax, L_constants + 0
 19383 0000E1CA [0000000000000000] 
 19384 0000E1D2 48890425[24160000]      	mov qword [free_var_125], rax
 19385 0000E1DA 48B8-                   	mov rax, sob_void
 19385 0000E1DC [0000000000000000] 
 19386                                  
 19387 0000E1E4 4889C7                  	mov rdi, rax
 19388 0000E1E7 E89DA00000              	call print_sexpr_if_not_void
 19389                                  	; preparing a non-tail-call
 19390 0000E1EC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19391 0000E1F1 E83E9E0000              	call malloc
 19392 0000E1F6 50                      	push rax
 19393 0000E1F7 BF00000000              	mov rdi, 8 * 0	; new rib
 19394 0000E1FC E8339E0000              	call malloc
 19395 0000E201 50                      	push rax
 19396 0000E202 BF08000000              	mov rdi, 8 * 1	; extended env
 19397 0000E207 E8289E0000              	call malloc
 19398 0000E20C 488B7D10                	mov rdi, ENV
 19399 0000E210 BE00000000              	mov rsi, 0
 19400 0000E215 BA01000000              	mov rdx, 1
 19401                                  .L_lambda_simple_env_loop_012d:	; ext_env[i + 1] <-- env[i]
 19402 0000E21A 4883FE00                	cmp rsi, 0
 19403 0000E21E 7410                    	je .L_lambda_simple_env_end_012d
 19404 0000E220 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19405 0000E224 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19406 0000E228 48FFC6                  	inc rsi
 19407 0000E22B 48FFC2                  	inc rdx
 19408 0000E22E EBEA                    	jmp .L_lambda_simple_env_loop_012d
 19409                                  .L_lambda_simple_env_end_012d:
 19410 0000E230 5B                      	pop rbx
 19411 0000E231 BE00000000              	mov rsi, 0
 19412                                  .L_lambda_simple_params_loop_012d:	; copy params
 19413 0000E236 4883FE00                	cmp rsi, 0
 19414 0000E23A 740E                    	je .L_lambda_simple_params_end_012d
 19415 0000E23C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19416 0000E241 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19417 0000E245 48FFC6                  	inc rsi
 19418 0000E248 EBEC                    	jmp .L_lambda_simple_params_loop_012d
 19419                                  .L_lambda_simple_params_end_012d:
 19420 0000E24A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19421 0000E24D 4889C3                  	mov rbx, rax
 19422 0000E250 58                      	pop rax
 19423 0000E251 C60004                  	mov byte [rax], T_closure
 19424 0000E254 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19425 0000E258 48C74009[65E20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_012d
 19426 0000E260 E9E10D0000              	jmp .L_lambda_simple_end_012d
 19427                                  .L_lambda_simple_code_012d:	; lambda-simple body
 19428 0000E265 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19429 0000E26B 740B                    	je .L_lambda_simple_arity_check_ok_012d
 19430 0000E26D FF742410                	push qword [rsp + 8 * 2]
 19431 0000E271 6A02                    	push 2
 19432 0000E273 E9759D0000              	jmp L_error_incorrect_arity_simple
 19433                                  .L_lambda_simple_arity_check_ok_012d:
 19434 0000E278 C8000000                	enter 0, 0
 19435                                  	; preparing a tail-call
 19436 0000E27C 48B8-                   	mov rax, L_constants + 1993
 19436 0000E27E [C907000000000000] 
 19437 0000E286 50                      	push rax
 19438 0000E287 6A01                    	push 1	; arg count
 19439 0000E289 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19440 0000E28E E8A19D0000              	call malloc
 19441 0000E293 50                      	push rax
 19442 0000E294 BF10000000              	mov rdi, 8 * 2	; new rib
 19443 0000E299 E8969D0000              	call malloc
 19444 0000E29E 50                      	push rax
 19445 0000E29F BF10000000              	mov rdi, 8 * 2	; extended env
 19446 0000E2A4 E88B9D0000              	call malloc
 19447 0000E2A9 488B7D10                	mov rdi, ENV
 19448 0000E2AD BE00000000              	mov rsi, 0
 19449 0000E2B2 BA01000000              	mov rdx, 1
 19450                                  .L_lambda_simple_env_loop_012e:	; ext_env[i + 1] <-- env[i]
 19451 0000E2B7 4883FE01                	cmp rsi, 1
 19452 0000E2BB 7410                    	je .L_lambda_simple_env_end_012e
 19453 0000E2BD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19454 0000E2C1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19455 0000E2C5 48FFC6                  	inc rsi
 19456 0000E2C8 48FFC2                  	inc rdx
 19457 0000E2CB EBEA                    	jmp .L_lambda_simple_env_loop_012e
 19458                                  .L_lambda_simple_env_end_012e:
 19459 0000E2CD 5B                      	pop rbx
 19460 0000E2CE BE00000000              	mov rsi, 0
 19461                                  .L_lambda_simple_params_loop_012e:	; copy params
 19462 0000E2D3 4883FE02                	cmp rsi, 2
 19463 0000E2D7 740E                    	je .L_lambda_simple_params_end_012e
 19464 0000E2D9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19465 0000E2DE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19466 0000E2E2 48FFC6                  	inc rsi
 19467 0000E2E5 EBEC                    	jmp .L_lambda_simple_params_loop_012e
 19468                                  .L_lambda_simple_params_end_012e:
 19469 0000E2E7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19470 0000E2EA 4889C3                  	mov rbx, rax
 19471 0000E2ED 58                      	pop rax
 19472 0000E2EE C60004                  	mov byte [rax], T_closure
 19473 0000E2F1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19474 0000E2F5 48C74009[02E30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_012e
 19475 0000E2FD E9EC0C0000              	jmp .L_lambda_simple_end_012e
 19476                                  .L_lambda_simple_code_012e:	; lambda-simple body
 19477 0000E302 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19478 0000E308 740B                    	je .L_lambda_simple_arity_check_ok_012e
 19479 0000E30A FF742410                	push qword [rsp + 8 * 2]
 19480 0000E30E 6A01                    	push 1
 19481 0000E310 E9D89C0000              	jmp L_error_incorrect_arity_simple
 19482                                  .L_lambda_simple_arity_check_ok_012e:
 19483 0000E315 C8000000                	enter 0, 0
 19484 0000E319 BF08000000              	mov rdi, 8*1
 19485 0000E31E E8119D0000              	call malloc
 19486 0000E323 488B5D20                	mov rbx, PARAM(0)
 19487 0000E327 488918                  	mov qword[rax], rbx
 19488 0000E32A 48894520                	mov PARAM(0), rax
 19489 0000E32E 48B8-                   	mov rax, sob_void
 19489 0000E330 [0000000000000000] 
 19490                                  
 19491 0000E338 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19492 0000E33D E8F29C0000              	call malloc
 19493 0000E342 50                      	push rax
 19494 0000E343 BF08000000              	mov rdi, 8 * 1	; new rib
 19495 0000E348 E8E79C0000              	call malloc
 19496 0000E34D 50                      	push rax
 19497 0000E34E BF18000000              	mov rdi, 8 * 3	; extended env
 19498 0000E353 E8DC9C0000              	call malloc
 19499 0000E358 488B7D10                	mov rdi, ENV
 19500 0000E35C BE00000000              	mov rsi, 0
 19501 0000E361 BA01000000              	mov rdx, 1
 19502                                  .L_lambda_simple_env_loop_012f:	; ext_env[i + 1] <-- env[i]
 19503 0000E366 4883FE02                	cmp rsi, 2
 19504 0000E36A 7410                    	je .L_lambda_simple_env_end_012f
 19505 0000E36C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19506 0000E370 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19507 0000E374 48FFC6                  	inc rsi
 19508 0000E377 48FFC2                  	inc rdx
 19509 0000E37A EBEA                    	jmp .L_lambda_simple_env_loop_012f
 19510                                  .L_lambda_simple_env_end_012f:
 19511 0000E37C 5B                      	pop rbx
 19512 0000E37D BE00000000              	mov rsi, 0
 19513                                  .L_lambda_simple_params_loop_012f:	; copy params
 19514 0000E382 4883FE01                	cmp rsi, 1
 19515 0000E386 740E                    	je .L_lambda_simple_params_end_012f
 19516 0000E388 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19517 0000E38D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19518 0000E391 48FFC6                  	inc rsi
 19519 0000E394 EBEC                    	jmp .L_lambda_simple_params_loop_012f
 19520                                  .L_lambda_simple_params_end_012f:
 19521 0000E396 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19522 0000E399 4889C3                  	mov rbx, rax
 19523 0000E39C 58                      	pop rax
 19524 0000E39D C60004                  	mov byte [rax], T_closure
 19525 0000E3A0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19526 0000E3A4 48C74009[B1E30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_012f
 19527 0000E3AC E992020000              	jmp .L_lambda_simple_end_012f
 19528                                  .L_lambda_simple_code_012f:	; lambda-simple body
 19529 0000E3B1 48837C241005            	cmp qword [rsp + 8 * 2], 5
 19530 0000E3B7 740B                    	je .L_lambda_simple_arity_check_ok_012f
 19531 0000E3B9 FF742410                	push qword [rsp + 8 * 2]
 19532 0000E3BD 6A05                    	push 5
 19533 0000E3BF E9299C0000              	jmp L_error_incorrect_arity_simple
 19534                                  .L_lambda_simple_arity_check_ok_012f:
 19535 0000E3C4 C8000000                	enter 0, 0
 19536                                  	; preparing a non-tail-call
 19537 0000E3C8 488B4530                	mov rax, PARAM(2)	; param len1
 19538 0000E3CC 50                      	push rax
 19539 0000E3CD 488B4520                	mov rax, PARAM(0)	; param i
 19540 0000E3D1 50                      	push rax
 19541 0000E3D2 6A02                    	push 2	; arg count
 19542 0000E3D4 488B0425[3D0E0000]      	mov rax, qword [free_var_6]	; free var =
 19543 0000E3DC 803805                  	cmp byte [rax], T_undefined
 19544 0000E3DF 0F84229B0000            	je L_error_fvar_undefined
 19545 0000E3E5 803804                  	cmp byte [rax], T_closure
 19546 0000E3E8 0F859D9B0000            	jne L_error_non_closure
 19547 0000E3EE FF7001                  	push SOB_CLOSURE_ENV(rax)
 19548 0000E3F1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19549 0000E3F4 483D[02000000]          	cmp rax, sob_boolean_false
 19550 0000E3FA 742E                    	je .L_if_else_00f1
 19551                                  	; preparing a non-tail-call
 19552 0000E3FC 488B4540                	mov rax, PARAM(4)	; param len2
 19553 0000E400 50                      	push rax
 19554 0000E401 488B4530                	mov rax, PARAM(2)	; param len1
 19555 0000E405 50                      	push rax
 19556 0000E406 6A02                    	push 2	; arg count
 19557 0000E408 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 19558 0000E410 803805                  	cmp byte [rax], T_undefined
 19559 0000E413 0F84EE9A0000            	je L_error_fvar_undefined
 19560 0000E419 803804                  	cmp byte [rax], T_closure
 19561 0000E41C 0F85699B0000            	jne L_error_non_closure
 19562 0000E422 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19563 0000E425 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19564 0000E428 EB0A                    	jmp .L_if_end_00f1
 19565                                  .L_if_else_00f1:
 19566 0000E42A 48B8-                   	mov rax, L_constants + 2
 19566 0000E42C [0200000000000000] 
 19567                                  .L_if_end_00f1:
 19568 0000E434 483D[02000000]          	cmp rax, sob_boolean_false
 19569 0000E43A 0F85FF010000            	jne .L_or_end_001b
 19570                                  	; preparing a non-tail-call
 19571 0000E440 488B4530                	mov rax, PARAM(2)	; param len1
 19572 0000E444 50                      	push rax
 19573 0000E445 488B4520                	mov rax, PARAM(0)	; param i
 19574 0000E449 50                      	push rax
 19575 0000E44A 6A02                    	push 2	; arg count
 19576 0000E44C 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 19577 0000E454 803805                  	cmp byte [rax], T_undefined
 19578 0000E457 0F84AA9A0000            	je L_error_fvar_undefined
 19579 0000E45D 803804                  	cmp byte [rax], T_closure
 19580 0000E460 0F85259B0000            	jne L_error_non_closure
 19581 0000E466 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19582 0000E469 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19583 0000E46C 483D[02000000]          	cmp rax, sob_boolean_false
 19584 0000E472 0F84BD010000            	je .L_if_else_00f3
 19585                                  	; preparing a non-tail-call
 19586                                  	; preparing a non-tail-call
 19587 0000E478 488B4520                	mov rax, PARAM(0)	; param i
 19588 0000E47C 50                      	push rax
 19589 0000E47D 488B4538                	mov rax, PARAM(3)	; param str2
 19590 0000E481 50                      	push rax
 19591 0000E482 6A02                    	push 2	; arg count
 19592 0000E484 488B0425[57160000]      	mov rax, qword [free_var_128]	; free var string-ref
 19593 0000E48C 803805                  	cmp byte [rax], T_undefined
 19594 0000E48F 0F84729A0000            	je L_error_fvar_undefined
 19595 0000E495 803804                  	cmp byte [rax], T_closure
 19596 0000E498 0F85ED9A0000            	jne L_error_non_closure
 19597 0000E49E FF7001                  	push SOB_CLOSURE_ENV(rax)
 19598 0000E4A1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19599 0000E4A4 50                      	push rax
 19600                                  	; preparing a non-tail-call
 19601 0000E4A5 488B4520                	mov rax, PARAM(0)	; param i
 19602 0000E4A9 50                      	push rax
 19603 0000E4AA 488B4528                	mov rax, PARAM(1)	; param str1
 19604 0000E4AE 50                      	push rax
 19605 0000E4AF 6A02                    	push 2	; arg count
 19606 0000E4B1 488B0425[57160000]      	mov rax, qword [free_var_128]	; free var string-ref
 19607 0000E4B9 803805                  	cmp byte [rax], T_undefined
 19608 0000E4BC 0F84459A0000            	je L_error_fvar_undefined
 19609 0000E4C2 803804                  	cmp byte [rax], T_closure
 19610 0000E4C5 0F85C09A0000            	jne L_error_non_closure
 19611 0000E4CB FF7001                  	push SOB_CLOSURE_ENV(rax)
 19612 0000E4CE FF5009                  	call SOB_CLOSURE_CODE(rax)
 19613 0000E4D1 50                      	push rax
 19614 0000E4D2 6A02                    	push 2	; arg count
 19615 0000E4D4 488B4510                	mov rax, ENV
 19616 0000E4D8 488B4008                	mov rax, qword [rax + 8 * 1]
 19617 0000E4DC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char<?
 19618 0000E4DF 803804                  	cmp byte [rax], T_closure
 19619 0000E4E2 0F85A39A0000            	jne L_error_non_closure
 19620 0000E4E8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19621 0000E4EB FF5009                  	call SOB_CLOSURE_CODE(rax)
 19622 0000E4EE 483D[02000000]          	cmp rax, sob_boolean_false
 19623 0000E4F4 0F8539010000            	jne .L_or_end_001c
 19624                                  	; preparing a non-tail-call
 19625                                  	; preparing a non-tail-call
 19626 0000E4FA 488B4520                	mov rax, PARAM(0)	; param i
 19627 0000E4FE 50                      	push rax
 19628 0000E4FF 488B4538                	mov rax, PARAM(3)	; param str2
 19629 0000E503 50                      	push rax
 19630 0000E504 6A02                    	push 2	; arg count
 19631 0000E506 488B0425[57160000]      	mov rax, qword [free_var_128]	; free var string-ref
 19632 0000E50E 803805                  	cmp byte [rax], T_undefined
 19633 0000E511 0F84F0990000            	je L_error_fvar_undefined
 19634 0000E517 803804                  	cmp byte [rax], T_closure
 19635 0000E51A 0F856B9A0000            	jne L_error_non_closure
 19636 0000E520 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19637 0000E523 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19638 0000E526 50                      	push rax
 19639                                  	; preparing a non-tail-call
 19640 0000E527 488B4520                	mov rax, PARAM(0)	; param i
 19641 0000E52B 50                      	push rax
 19642 0000E52C 488B4528                	mov rax, PARAM(1)	; param str1
 19643 0000E530 50                      	push rax
 19644 0000E531 6A02                    	push 2	; arg count
 19645 0000E533 488B0425[57160000]      	mov rax, qword [free_var_128]	; free var string-ref
 19646 0000E53B 803805                  	cmp byte [rax], T_undefined
 19647 0000E53E 0F84C3990000            	je L_error_fvar_undefined
 19648 0000E544 803804                  	cmp byte [rax], T_closure
 19649 0000E547 0F853E9A0000            	jne L_error_non_closure
 19650 0000E54D FF7001                  	push SOB_CLOSURE_ENV(rax)
 19651 0000E550 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19652 0000E553 50                      	push rax
 19653 0000E554 6A02                    	push 2	; arg count
 19654 0000E556 488B4510                	mov rax, ENV
 19655 0000E55A 488B4008                	mov rax, qword [rax + 8 * 1]
 19656 0000E55E 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var char=?
 19657 0000E562 803804                  	cmp byte [rax], T_closure
 19658 0000E565 0F85209A0000            	jne L_error_non_closure
 19659 0000E56B FF7001                  	push SOB_CLOSURE_ENV(rax)
 19660 0000E56E FF5009                  	call SOB_CLOSURE_CODE(rax)
 19661 0000E571 483D[02000000]          	cmp rax, sob_boolean_false
 19662 0000E577 0F84AC000000            	je .L_if_else_00f2
 19663                                  	; preparing a tail-call
 19664 0000E57D 488B4540                	mov rax, PARAM(4)	; param len2
 19665 0000E581 50                      	push rax
 19666 0000E582 488B4538                	mov rax, PARAM(3)	; param str2
 19667 0000E586 50                      	push rax
 19668 0000E587 488B4530                	mov rax, PARAM(2)	; param len1
 19669 0000E58B 50                      	push rax
 19670 0000E58C 488B4528                	mov rax, PARAM(1)	; param str1
 19671 0000E590 50                      	push rax
 19672                                  	; preparing a non-tail-call
 19673 0000E591 48B8-                   	mov rax, L_constants + 2270
 19673 0000E593 [DE08000000000000] 
 19674 0000E59B 50                      	push rax
 19675 0000E59C 488B4520                	mov rax, PARAM(0)	; param i
 19676 0000E5A0 50                      	push rax
 19677 0000E5A1 6A02                    	push 2	; arg count
 19678 0000E5A3 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 19679 0000E5AB 803805                  	cmp byte [rax], T_undefined
 19680 0000E5AE 0F8453990000            	je L_error_fvar_undefined
 19681 0000E5B4 803804                  	cmp byte [rax], T_closure
 19682 0000E5B7 0F85CE990000            	jne L_error_non_closure
 19683 0000E5BD FF7001                  	push SOB_CLOSURE_ENV(rax)
 19684 0000E5C0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19685 0000E5C3 50                      	push rax
 19686 0000E5C4 6A05                    	push 5	; arg count
 19687 0000E5C6 488B4510                	mov rax, ENV
 19688 0000E5CA 488B00                  	mov rax, qword [rax + 8 * 0]
 19689 0000E5CD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 19690 0000E5D0 488B00                  	mov rax, qword [rax]
 19691 0000E5D3 803804                  	cmp byte [rax], T_closure
 19692 0000E5D6 0F85AF990000            	jne L_error_non_closure
 19693 0000E5DC FF7001                  	push SOB_CLOSURE_ENV(rax)
 19694 0000E5DF FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 19695 0000E5E2 FF7500                  	push qword[rbp]
 19696 0000E5E5 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 19697 0000E5E8 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 19698 0000E5EC 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 19699 0000E5F0 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 19700 0000E5F4 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 19701 0000E5F7 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 19702 0000E5FA 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 19703 0000E5FF 4983C103                	add r9, 3 	 ;for getting to the params
 19704 0000E603 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 19705 0000E607 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 19706                                  .L_tc_recycle_frame_loop_01c7:
 19707 0000E60A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 19708 0000E60D 7410                    	je .L_tc_recycle_frame_done_01c7
 19709 0000E60F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 19710 0000E612 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 19711 0000E615 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 19712 0000E619 4983E808                	sub r8, 8	 ;move the top of the stack one down
 19713 0000E61D EBEB                    	jmp .L_tc_recycle_frame_loop_01c7
 19714                                  .L_tc_recycle_frame_done_01c7:
 19715 0000E61F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 19716 0000E620 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 19717 0000E624 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19718 0000E627 EB0A                    	jmp .L_if_end_00f2
 19719                                  .L_if_else_00f2:
 19720 0000E629 48B8-                   	mov rax, L_constants + 2
 19720 0000E62B [0200000000000000] 
 19721                                  .L_if_end_00f2:
 19722                                  .L_or_end_001c:
 19723 0000E633 EB0A                    	jmp .L_if_end_00f3
 19724                                  .L_if_else_00f3:
 19725 0000E635 48B8-                   	mov rax, L_constants + 2
 19725 0000E637 [0200000000000000] 
 19726                                  .L_if_end_00f3:
 19727                                  .L_or_end_001b:
 19728 0000E63F C9                      	leave
 19729 0000E640 C23800                  	ret AND_KILL_FRAME(5)
 19730                                  .L_lambda_simple_end_012f:	; new closure is in rax
 19731 0000E643 50                      	push rax
 19732 0000E644 488B4520                	mov rax, PARAM(0)	; param run
 19733 0000E648 8F00                    	pop qword [rax]
 19734 0000E64A 48B8-                   	mov rax, sob_void
 19734 0000E64C [0000000000000000] 
 19735                                  
 19736                                  	; preparing a tail-call
 19737 0000E654 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19738 0000E659 E8D6990000              	call malloc
 19739 0000E65E 50                      	push rax
 19740 0000E65F BF08000000              	mov rdi, 8 * 1	; new rib
 19741 0000E664 E8CB990000              	call malloc
 19742 0000E669 50                      	push rax
 19743 0000E66A BF18000000              	mov rdi, 8 * 3	; extended env
 19744 0000E66F E8C0990000              	call malloc
 19745 0000E674 488B7D10                	mov rdi, ENV
 19746 0000E678 BE00000000              	mov rsi, 0
 19747 0000E67D BA01000000              	mov rdx, 1
 19748                                  .L_lambda_simple_env_loop_0130:	; ext_env[i + 1] <-- env[i]
 19749 0000E682 4883FE02                	cmp rsi, 2
 19750 0000E686 7410                    	je .L_lambda_simple_env_end_0130
 19751 0000E688 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19752 0000E68C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19753 0000E690 48FFC6                  	inc rsi
 19754 0000E693 48FFC2                  	inc rdx
 19755 0000E696 EBEA                    	jmp .L_lambda_simple_env_loop_0130
 19756                                  .L_lambda_simple_env_end_0130:
 19757 0000E698 5B                      	pop rbx
 19758 0000E699 BE00000000              	mov rsi, 0
 19759                                  .L_lambda_simple_params_loop_0130:	; copy params
 19760 0000E69E 4883FE01                	cmp rsi, 1
 19761 0000E6A2 740E                    	je .L_lambda_simple_params_end_0130
 19762 0000E6A4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19763 0000E6A9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19764 0000E6AD 48FFC6                  	inc rsi
 19765 0000E6B0 EBEC                    	jmp .L_lambda_simple_params_loop_0130
 19766                                  .L_lambda_simple_params_end_0130:
 19767 0000E6B2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19768 0000E6B5 4889C3                  	mov rbx, rax
 19769 0000E6B8 58                      	pop rax
 19770 0000E6B9 C60004                  	mov byte [rax], T_closure
 19771 0000E6BC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19772 0000E6C0 48C74009[CDE60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0130
 19773 0000E6C8 E9B2020000              	jmp .L_lambda_simple_end_0130
 19774                                  .L_lambda_simple_code_0130:	; lambda-simple body
 19775 0000E6CD 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19776 0000E6D3 740B                    	je .L_lambda_simple_arity_check_ok_0130
 19777 0000E6D5 FF742410                	push qword [rsp + 8 * 2]
 19778 0000E6D9 6A02                    	push 2
 19779 0000E6DB E90D990000              	jmp L_error_incorrect_arity_simple
 19780                                  .L_lambda_simple_arity_check_ok_0130:
 19781 0000E6E0 C8000000                	enter 0, 0
 19782                                  	; preparing a tail-call
 19783                                  	; preparing a non-tail-call
 19784 0000E6E4 488B4528                	mov rax, PARAM(1)	; param str2
 19785 0000E6E8 50                      	push rax
 19786 0000E6E9 6A01                    	push 1	; arg count
 19787 0000E6EB 488B0425[46160000]      	mov rax, qword [free_var_127]	; free var string-length
 19788 0000E6F3 803805                  	cmp byte [rax], T_undefined
 19789 0000E6F6 0F840B980000            	je L_error_fvar_undefined
 19790 0000E6FC 803804                  	cmp byte [rax], T_closure
 19791 0000E6FF 0F8586980000            	jne L_error_non_closure
 19792 0000E705 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19793 0000E708 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19794 0000E70B 50                      	push rax
 19795                                  	; preparing a non-tail-call
 19796 0000E70C 488B4520                	mov rax, PARAM(0)	; param str1
 19797 0000E710 50                      	push rax
 19798 0000E711 6A01                    	push 1	; arg count
 19799 0000E713 488B0425[46160000]      	mov rax, qword [free_var_127]	; free var string-length
 19800 0000E71B 803805                  	cmp byte [rax], T_undefined
 19801 0000E71E 0F84E3970000            	je L_error_fvar_undefined
 19802 0000E724 803804                  	cmp byte [rax], T_closure
 19803 0000E727 0F855E980000            	jne L_error_non_closure
 19804 0000E72D FF7001                  	push SOB_CLOSURE_ENV(rax)
 19805 0000E730 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19806 0000E733 50                      	push rax
 19807 0000E734 6A02                    	push 2	; arg count
 19808 0000E736 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19809 0000E73B E8F4980000              	call malloc
 19810 0000E740 50                      	push rax
 19811 0000E741 BF10000000              	mov rdi, 8 * 2	; new rib
 19812 0000E746 E8E9980000              	call malloc
 19813 0000E74B 50                      	push rax
 19814 0000E74C BF20000000              	mov rdi, 8 * 4	; extended env
 19815 0000E751 E8DE980000              	call malloc
 19816 0000E756 488B7D10                	mov rdi, ENV
 19817 0000E75A BE00000000              	mov rsi, 0
 19818 0000E75F BA01000000              	mov rdx, 1
 19819                                  .L_lambda_simple_env_loop_0131:	; ext_env[i + 1] <-- env[i]
 19820 0000E764 4883FE03                	cmp rsi, 3
 19821 0000E768 7410                    	je .L_lambda_simple_env_end_0131
 19822 0000E76A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19823 0000E76E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19824 0000E772 48FFC6                  	inc rsi
 19825 0000E775 48FFC2                  	inc rdx
 19826 0000E778 EBEA                    	jmp .L_lambda_simple_env_loop_0131
 19827                                  .L_lambda_simple_env_end_0131:
 19828 0000E77A 5B                      	pop rbx
 19829 0000E77B BE00000000              	mov rsi, 0
 19830                                  .L_lambda_simple_params_loop_0131:	; copy params
 19831 0000E780 4883FE02                	cmp rsi, 2
 19832 0000E784 740E                    	je .L_lambda_simple_params_end_0131
 19833 0000E786 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19834 0000E78B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19835 0000E78F 48FFC6                  	inc rsi
 19836 0000E792 EBEC                    	jmp .L_lambda_simple_params_loop_0131
 19837                                  .L_lambda_simple_params_end_0131:
 19838 0000E794 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19839 0000E797 4889C3                  	mov rbx, rax
 19840 0000E79A 58                      	pop rax
 19841 0000E79B C60004                  	mov byte [rax], T_closure
 19842 0000E79E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19843 0000E7A2 48C74009[AFE70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0131
 19844 0000E7AA E978010000              	jmp .L_lambda_simple_end_0131
 19845                                  .L_lambda_simple_code_0131:	; lambda-simple body
 19846 0000E7AF 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19847 0000E7B5 740B                    	je .L_lambda_simple_arity_check_ok_0131
 19848 0000E7B7 FF742410                	push qword [rsp + 8 * 2]
 19849 0000E7BB 6A02                    	push 2
 19850 0000E7BD E92B980000              	jmp L_error_incorrect_arity_simple
 19851                                  .L_lambda_simple_arity_check_ok_0131:
 19852 0000E7C2 C8000000                	enter 0, 0
 19853                                  	; preparing a non-tail-call
 19854 0000E7C6 488B4528                	mov rax, PARAM(1)	; param len2
 19855 0000E7CA 50                      	push rax
 19856 0000E7CB 488B4520                	mov rax, PARAM(0)	; param len1
 19857 0000E7CF 50                      	push rax
 19858 0000E7D0 6A02                    	push 2	; arg count
 19859 0000E7D2 488B0425[2C0E0000]      	mov rax, qword [free_var_5]	; free var <=
 19860 0000E7DA 803805                  	cmp byte [rax], T_undefined
 19861 0000E7DD 0F8424970000            	je L_error_fvar_undefined
 19862 0000E7E3 803804                  	cmp byte [rax], T_closure
 19863 0000E7E6 0F859F970000            	jne L_error_non_closure
 19864 0000E7EC FF7001                  	push SOB_CLOSURE_ENV(rax)
 19865 0000E7EF FF5009                  	call SOB_CLOSURE_CODE(rax)
 19866 0000E7F2 483D[02000000]          	cmp rax, sob_boolean_false
 19867 0000E7F8 0F8495000000            	je .L_if_else_00f4
 19868                                  	; preparing a tail-call
 19869 0000E7FE 488B4528                	mov rax, PARAM(1)	; param len2
 19870 0000E802 50                      	push rax
 19871 0000E803 488B4510                	mov rax, ENV
 19872 0000E807 488B00                  	mov rax, qword [rax + 8 * 0]
 19873 0000E80A 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 19874 0000E80E 50                      	push rax
 19875 0000E80F 488B4520                	mov rax, PARAM(0)	; param len1
 19876 0000E813 50                      	push rax
 19877 0000E814 488B4510                	mov rax, ENV
 19878 0000E818 488B00                  	mov rax, qword [rax + 8 * 0]
 19879 0000E81B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 19880 0000E81E 50                      	push rax
 19881 0000E81F 48B8-                   	mov rax, L_constants + 2135
 19881 0000E821 [5708000000000000] 
 19882 0000E829 50                      	push rax
 19883 0000E82A 6A05                    	push 5	; arg count
 19884 0000E82C 488B4510                	mov rax, ENV
 19885 0000E830 488B4008                	mov rax, qword [rax + 8 * 1]
 19886 0000E834 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 19887 0000E837 488B00                  	mov rax, qword [rax]
 19888 0000E83A 803804                  	cmp byte [rax], T_closure
 19889 0000E83D 0F8548970000            	jne L_error_non_closure
 19890 0000E843 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19891 0000E846 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 19892 0000E849 FF7500                  	push qword[rbp]
 19893 0000E84C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 19894 0000E84F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 19895 0000E853 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 19896 0000E857 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 19897 0000E85B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 19898 0000E85E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 19899 0000E861 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 19900 0000E866 4983C103                	add r9, 3 	 ;for getting to the params
 19901 0000E86A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 19902 0000E86E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 19903                                  .L_tc_recycle_frame_loop_01c8:
 19904 0000E871 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 19905 0000E874 7410                    	je .L_tc_recycle_frame_done_01c8
 19906 0000E876 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 19907 0000E879 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 19908 0000E87C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 19909 0000E880 4983E808                	sub r8, 8	 ;move the top of the stack one down
 19910 0000E884 EBEB                    	jmp .L_tc_recycle_frame_loop_01c8
 19911                                  .L_tc_recycle_frame_done_01c8:
 19912 0000E886 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 19913 0000E887 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 19914 0000E88B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19915 0000E88E E990000000              	jmp .L_if_end_00f4
 19916                                  .L_if_else_00f4:
 19917                                  	; preparing a tail-call
 19918 0000E893 488B4520                	mov rax, PARAM(0)	; param len1
 19919 0000E897 50                      	push rax
 19920 0000E898 488B4510                	mov rax, ENV
 19921 0000E89C 488B00                  	mov rax, qword [rax + 8 * 0]
 19922 0000E89F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 19923 0000E8A2 50                      	push rax
 19924 0000E8A3 488B4528                	mov rax, PARAM(1)	; param len2
 19925 0000E8A7 50                      	push rax
 19926 0000E8A8 488B4510                	mov rax, ENV
 19927 0000E8AC 488B00                  	mov rax, qword [rax + 8 * 0]
 19928 0000E8AF 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 19929 0000E8B3 50                      	push rax
 19930 0000E8B4 48B8-                   	mov rax, L_constants + 2135
 19930 0000E8B6 [5708000000000000] 
 19931 0000E8BE 50                      	push rax
 19932 0000E8BF 6A05                    	push 5	; arg count
 19933 0000E8C1 488B4510                	mov rax, ENV
 19934 0000E8C5 488B4008                	mov rax, qword [rax + 8 * 1]
 19935 0000E8C9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 19936 0000E8CC 488B00                  	mov rax, qword [rax]
 19937 0000E8CF 803804                  	cmp byte [rax], T_closure
 19938 0000E8D2 0F85B3960000            	jne L_error_non_closure
 19939 0000E8D8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19940 0000E8DB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 19941 0000E8DE FF7500                  	push qword[rbp]
 19942 0000E8E1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 19943 0000E8E4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 19944 0000E8E8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 19945 0000E8EC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 19946 0000E8F0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 19947 0000E8F3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 19948 0000E8F6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 19949 0000E8FB 4983C103                	add r9, 3 	 ;for getting to the params
 19950 0000E8FF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 19951 0000E903 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 19952                                  .L_tc_recycle_frame_loop_01c9:
 19953 0000E906 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 19954 0000E909 7410                    	je .L_tc_recycle_frame_done_01c9
 19955 0000E90B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 19956 0000E90E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 19957 0000E911 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 19958 0000E915 4983E808                	sub r8, 8	 ;move the top of the stack one down
 19959 0000E919 EBEB                    	jmp .L_tc_recycle_frame_loop_01c9
 19960                                  .L_tc_recycle_frame_done_01c9:
 19961 0000E91B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 19962 0000E91C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 19963 0000E920 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19964                                  .L_if_end_00f4:
 19965 0000E923 C9                      	leave
 19966 0000E924 C22000                  	ret AND_KILL_FRAME(2)
 19967                                  .L_lambda_simple_end_0131:	; new closure is in rax
 19968 0000E927 803804                  	cmp byte [rax], T_closure
 19969 0000E92A 0F855B960000            	jne L_error_non_closure
 19970 0000E930 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19971 0000E933 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 19972 0000E936 FF7500                  	push qword[rbp]
 19973 0000E939 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 19974 0000E93C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 19975 0000E940 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 19976 0000E944 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 19977 0000E948 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 19978 0000E94B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 19979 0000E94E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 19980 0000E953 4983C103                	add r9, 3 	 ;for getting to the params
 19981 0000E957 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 19982 0000E95B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 19983                                  .L_tc_recycle_frame_loop_01ca:
 19984 0000E95E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 19985 0000E961 7410                    	je .L_tc_recycle_frame_done_01ca
 19986 0000E963 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 19987 0000E966 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 19988 0000E969 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 19989 0000E96D 4983E808                	sub r8, 8	 ;move the top of the stack one down
 19990 0000E971 EBEB                    	jmp .L_tc_recycle_frame_loop_01ca
 19991                                  .L_tc_recycle_frame_done_01ca:
 19992 0000E973 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 19993 0000E974 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 19994 0000E978 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19995 0000E97B C9                      	leave
 19996 0000E97C C22000                  	ret AND_KILL_FRAME(2)
 19997                                  .L_lambda_simple_end_0130:	; new closure is in rax
 19998 0000E97F 50                      	push rax
 19999 0000E980 6A01                    	push 1	; arg count
 20000 0000E982 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20001 0000E987 E8A8960000              	call malloc
 20002 0000E98C 50                      	push rax
 20003 0000E98D BF08000000              	mov rdi, 8 * 1	; new rib
 20004 0000E992 E89D960000              	call malloc
 20005 0000E997 50                      	push rax
 20006 0000E998 BF18000000              	mov rdi, 8 * 3	; extended env
 20007 0000E99D E892960000              	call malloc
 20008 0000E9A2 488B7D10                	mov rdi, ENV
 20009 0000E9A6 BE00000000              	mov rsi, 0
 20010 0000E9AB BA01000000              	mov rdx, 1
 20011                                  .L_lambda_simple_env_loop_0132:	; ext_env[i + 1] <-- env[i]
 20012 0000E9B0 4883FE02                	cmp rsi, 2
 20013 0000E9B4 7410                    	je .L_lambda_simple_env_end_0132
 20014 0000E9B6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20015 0000E9BA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20016 0000E9BE 48FFC6                  	inc rsi
 20017 0000E9C1 48FFC2                  	inc rdx
 20018 0000E9C4 EBEA                    	jmp .L_lambda_simple_env_loop_0132
 20019                                  .L_lambda_simple_env_end_0132:
 20020 0000E9C6 5B                      	pop rbx
 20021 0000E9C7 BE00000000              	mov rsi, 0
 20022                                  .L_lambda_simple_params_loop_0132:	; copy params
 20023 0000E9CC 4883FE01                	cmp rsi, 1
 20024 0000E9D0 740E                    	je .L_lambda_simple_params_end_0132
 20025 0000E9D2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20026 0000E9D7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20027 0000E9DB 48FFC6                  	inc rsi
 20028 0000E9DE EBEC                    	jmp .L_lambda_simple_params_loop_0132
 20029                                  .L_lambda_simple_params_end_0132:
 20030 0000E9E0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20031 0000E9E3 4889C3                  	mov rbx, rax
 20032 0000E9E6 58                      	pop rax
 20033 0000E9E7 C60004                  	mov byte [rax], T_closure
 20034 0000E9EA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20035 0000E9EE 48C74009[FBE90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0132
 20036 0000E9F6 E99B050000              	jmp .L_lambda_simple_end_0132
 20037                                  .L_lambda_simple_code_0132:	; lambda-simple body
 20038 0000E9FB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20039 0000EA01 740B                    	je .L_lambda_simple_arity_check_ok_0132
 20040 0000EA03 FF742410                	push qword [rsp + 8 * 2]
 20041 0000EA07 6A01                    	push 1
 20042 0000EA09 E9DF950000              	jmp L_error_incorrect_arity_simple
 20043                                  .L_lambda_simple_arity_check_ok_0132:
 20044 0000EA0E C8000000                	enter 0, 0
 20045                                  	; preparing a tail-call
 20046 0000EA12 48B8-                   	mov rax, L_constants + 1993
 20046 0000EA14 [C907000000000000] 
 20047 0000EA1C 50                      	push rax
 20048 0000EA1D 6A01                    	push 1	; arg count
 20049 0000EA1F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20050 0000EA24 E80B960000              	call malloc
 20051 0000EA29 50                      	push rax
 20052 0000EA2A BF08000000              	mov rdi, 8 * 1	; new rib
 20053 0000EA2F E800960000              	call malloc
 20054 0000EA34 50                      	push rax
 20055 0000EA35 BF20000000              	mov rdi, 8 * 4	; extended env
 20056 0000EA3A E8F5950000              	call malloc
 20057 0000EA3F 488B7D10                	mov rdi, ENV
 20058 0000EA43 BE00000000              	mov rsi, 0
 20059 0000EA48 BA01000000              	mov rdx, 1
 20060                                  .L_lambda_simple_env_loop_0133:	; ext_env[i + 1] <-- env[i]
 20061 0000EA4D 4883FE03                	cmp rsi, 3
 20062 0000EA51 7410                    	je .L_lambda_simple_env_end_0133
 20063 0000EA53 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20064 0000EA57 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20065 0000EA5B 48FFC6                  	inc rsi
 20066 0000EA5E 48FFC2                  	inc rdx
 20067 0000EA61 EBEA                    	jmp .L_lambda_simple_env_loop_0133
 20068                                  .L_lambda_simple_env_end_0133:
 20069 0000EA63 5B                      	pop rbx
 20070 0000EA64 BE00000000              	mov rsi, 0
 20071                                  .L_lambda_simple_params_loop_0133:	; copy params
 20072 0000EA69 4883FE01                	cmp rsi, 1
 20073 0000EA6D 740E                    	je .L_lambda_simple_params_end_0133
 20074 0000EA6F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20075 0000EA74 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20076 0000EA78 48FFC6                  	inc rsi
 20077 0000EA7B EBEC                    	jmp .L_lambda_simple_params_loop_0133
 20078                                  .L_lambda_simple_params_end_0133:
 20079 0000EA7D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20080 0000EA80 4889C3                  	mov rbx, rax
 20081 0000EA83 58                      	pop rax
 20082 0000EA84 C60004                  	mov byte [rax], T_closure
 20083 0000EA87 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20084 0000EA8B 48C74009[98EA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0133
 20085 0000EA93 E9A6040000              	jmp .L_lambda_simple_end_0133
 20086                                  .L_lambda_simple_code_0133:	; lambda-simple body
 20087 0000EA98 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20088 0000EA9E 740B                    	je .L_lambda_simple_arity_check_ok_0133
 20089 0000EAA0 FF742410                	push qword [rsp + 8 * 2]
 20090 0000EAA4 6A01                    	push 1
 20091 0000EAA6 E942950000              	jmp L_error_incorrect_arity_simple
 20092                                  .L_lambda_simple_arity_check_ok_0133:
 20093 0000EAAB C8000000                	enter 0, 0
 20094 0000EAAF BF08000000              	mov rdi, 8*1
 20095 0000EAB4 E87B950000              	call malloc
 20096 0000EAB9 488B5D20                	mov rbx, PARAM(0)
 20097 0000EABD 488918                  	mov qword[rax], rbx
 20098 0000EAC0 48894520                	mov PARAM(0), rax
 20099 0000EAC4 48B8-                   	mov rax, sob_void
 20099 0000EAC6 [0000000000000000] 
 20100                                  
 20101 0000EACE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20102 0000EAD3 E85C950000              	call malloc
 20103 0000EAD8 50                      	push rax
 20104 0000EAD9 BF08000000              	mov rdi, 8 * 1	; new rib
 20105 0000EADE E851950000              	call malloc
 20106 0000EAE3 50                      	push rax
 20107 0000EAE4 BF28000000              	mov rdi, 8 * 5	; extended env
 20108 0000EAE9 E846950000              	call malloc
 20109 0000EAEE 488B7D10                	mov rdi, ENV
 20110 0000EAF2 BE00000000              	mov rsi, 0
 20111 0000EAF7 BA01000000              	mov rdx, 1
 20112                                  .L_lambda_simple_env_loop_0134:	; ext_env[i + 1] <-- env[i]
 20113 0000EAFC 4883FE04                	cmp rsi, 4
 20114 0000EB00 7410                    	je .L_lambda_simple_env_end_0134
 20115 0000EB02 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20116 0000EB06 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20117 0000EB0A 48FFC6                  	inc rsi
 20118 0000EB0D 48FFC2                  	inc rdx
 20119 0000EB10 EBEA                    	jmp .L_lambda_simple_env_loop_0134
 20120                                  .L_lambda_simple_env_end_0134:
 20121 0000EB12 5B                      	pop rbx
 20122 0000EB13 BE00000000              	mov rsi, 0
 20123                                  .L_lambda_simple_params_loop_0134:	; copy params
 20124 0000EB18 4883FE01                	cmp rsi, 1
 20125 0000EB1C 740E                    	je .L_lambda_simple_params_end_0134
 20126 0000EB1E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20127 0000EB23 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20128 0000EB27 48FFC6                  	inc rsi
 20129 0000EB2A EBEC                    	jmp .L_lambda_simple_params_loop_0134
 20130                                  .L_lambda_simple_params_end_0134:
 20131 0000EB2C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20132 0000EB2F 4889C3                  	mov rbx, rax
 20133 0000EB32 58                      	pop rax
 20134 0000EB33 C60004                  	mov byte [rax], T_closure
 20135 0000EB36 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20136 0000EB3A 48C74009[47EB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0134
 20137 0000EB42 E962010000              	jmp .L_lambda_simple_end_0134
 20138                                  .L_lambda_simple_code_0134:	; lambda-simple body
 20139 0000EB47 48837C241002            	cmp qword [rsp + 8 * 2], 2
 20140 0000EB4D 740B                    	je .L_lambda_simple_arity_check_ok_0134
 20141 0000EB4F FF742410                	push qword [rsp + 8 * 2]
 20142 0000EB53 6A02                    	push 2
 20143 0000EB55 E993940000              	jmp L_error_incorrect_arity_simple
 20144                                  .L_lambda_simple_arity_check_ok_0134:
 20145 0000EB5A C8000000                	enter 0, 0
 20146                                  	; preparing a non-tail-call
 20147 0000EB5E 488B4528                	mov rax, PARAM(1)	; param strs
 20148 0000EB62 50                      	push rax
 20149 0000EB63 6A01                    	push 1	; arg count
 20150 0000EB65 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 20151 0000EB6D 803805                  	cmp byte [rax], T_undefined
 20152 0000EB70 0F8491930000            	je L_error_fvar_undefined
 20153 0000EB76 803804                  	cmp byte [rax], T_closure
 20154 0000EB79 0F850C940000            	jne L_error_non_closure
 20155 0000EB7F FF7001                  	push SOB_CLOSURE_ENV(rax)
 20156 0000EB82 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20157 0000EB85 483D[02000000]          	cmp rax, sob_boolean_false
 20158 0000EB8B 0F8514010000            	jne .L_or_end_001d
 20159                                  	; preparing a non-tail-call
 20160                                  	; preparing a non-tail-call
 20161 0000EB91 488B4528                	mov rax, PARAM(1)	; param strs
 20162 0000EB95 50                      	push rax
 20163 0000EB96 6A01                    	push 1	; arg count
 20164 0000EB98 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 20165 0000EBA0 803805                  	cmp byte [rax], T_undefined
 20166 0000EBA3 0F845E930000            	je L_error_fvar_undefined
 20167 0000EBA9 803804                  	cmp byte [rax], T_closure
 20168 0000EBAC 0F85D9930000            	jne L_error_non_closure
 20169 0000EBB2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20170 0000EBB5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20171 0000EBB8 50                      	push rax
 20172 0000EBB9 488B4520                	mov rax, PARAM(0)	; param str
 20173 0000EBBD 50                      	push rax
 20174 0000EBBE 6A02                    	push 2	; arg count
 20175 0000EBC0 488B4510                	mov rax, ENV
 20176 0000EBC4 488B4008                	mov rax, qword [rax + 8 * 1]
 20177 0000EBC8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var binary-string<?
 20178 0000EBCB 803804                  	cmp byte [rax], T_closure
 20179 0000EBCE 0F85B7930000            	jne L_error_non_closure
 20180 0000EBD4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20181 0000EBD7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20182 0000EBDA 483D[02000000]          	cmp rax, sob_boolean_false
 20183 0000EBE0 0F84B5000000            	je .L_if_else_00f5
 20184                                  	; preparing a tail-call
 20185                                  	; preparing a non-tail-call
 20186 0000EBE6 488B4528                	mov rax, PARAM(1)	; param strs
 20187 0000EBEA 50                      	push rax
 20188 0000EBEB 6A01                    	push 1	; arg count
 20189 0000EBED 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
 20190 0000EBF5 803805                  	cmp byte [rax], T_undefined
 20191 0000EBF8 0F8409930000            	je L_error_fvar_undefined
 20192 0000EBFE 803804                  	cmp byte [rax], T_closure
 20193 0000EC01 0F8584930000            	jne L_error_non_closure
 20194 0000EC07 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20195 0000EC0A FF5009                  	call SOB_CLOSURE_CODE(rax)
 20196 0000EC0D 50                      	push rax
 20197                                  	; preparing a non-tail-call
 20198 0000EC0E 488B4528                	mov rax, PARAM(1)	; param strs
 20199 0000EC12 50                      	push rax
 20200 0000EC13 6A01                    	push 1	; arg count
 20201 0000EC15 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 20202 0000EC1D 803805                  	cmp byte [rax], T_undefined
 20203 0000EC20 0F84E1920000            	je L_error_fvar_undefined
 20204 0000EC26 803804                  	cmp byte [rax], T_closure
 20205 0000EC29 0F855C930000            	jne L_error_non_closure
 20206 0000EC2F FF7001                  	push SOB_CLOSURE_ENV(rax)
 20207 0000EC32 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20208 0000EC35 50                      	push rax
 20209 0000EC36 6A02                    	push 2	; arg count
 20210 0000EC38 488B4510                	mov rax, ENV
 20211 0000EC3C 488B00                  	mov rax, qword [rax + 8 * 0]
 20212 0000EC3F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20213 0000EC42 488B00                  	mov rax, qword [rax]
 20214 0000EC45 803804                  	cmp byte [rax], T_closure
 20215 0000EC48 0F853D930000            	jne L_error_non_closure
 20216 0000EC4E FF7001                  	push SOB_CLOSURE_ENV(rax)
 20217 0000EC51 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 20218 0000EC54 FF7500                  	push qword[rbp]
 20219 0000EC57 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 20220 0000EC5A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 20221 0000EC5E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 20222 0000EC62 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 20223 0000EC66 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 20224 0000EC69 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 20225 0000EC6C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 20226 0000EC71 4983C103                	add r9, 3 	 ;for getting to the params
 20227 0000EC75 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 20228 0000EC79 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 20229                                  .L_tc_recycle_frame_loop_01cb:
 20230 0000EC7C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 20231 0000EC7F 7410                    	je .L_tc_recycle_frame_done_01cb
 20232 0000EC81 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 20233 0000EC84 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 20234 0000EC87 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 20235 0000EC8B 4983E808                	sub r8, 8	 ;move the top of the stack one down
 20236 0000EC8F EBEB                    	jmp .L_tc_recycle_frame_loop_01cb
 20237                                  .L_tc_recycle_frame_done_01cb:
 20238 0000EC91 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 20239 0000EC92 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 20240 0000EC96 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20241 0000EC99 EB0A                    	jmp .L_if_end_00f5
 20242                                  .L_if_else_00f5:
 20243 0000EC9B 48B8-                   	mov rax, L_constants + 2
 20243 0000EC9D [0200000000000000] 
 20244                                  .L_if_end_00f5:
 20245                                  .L_or_end_001d:
 20246 0000ECA5 C9                      	leave
 20247 0000ECA6 C22000                  	ret AND_KILL_FRAME(2)
 20248                                  .L_lambda_simple_end_0134:	; new closure is in rax
 20249 0000ECA9 50                      	push rax
 20250 0000ECAA 488B4520                	mov rax, PARAM(0)	; param run
 20251 0000ECAE 8F00                    	pop qword [rax]
 20252 0000ECB0 48B8-                   	mov rax, sob_void
 20252 0000ECB2 [0000000000000000] 
 20253                                  
 20254 0000ECBA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20255 0000ECBF E870930000              	call malloc
 20256 0000ECC4 50                      	push rax
 20257 0000ECC5 BF08000000              	mov rdi, 8 * 1	; new rib
 20258 0000ECCA E865930000              	call malloc
 20259 0000ECCF 50                      	push rax
 20260 0000ECD0 BF28000000              	mov rdi, 8 * 5	; extended env
 20261 0000ECD5 E85A930000              	call malloc
 20262 0000ECDA 488B7D10                	mov rdi, ENV
 20263 0000ECDE BE00000000              	mov rsi, 0
 20264 0000ECE3 BA01000000              	mov rdx, 1
 20265                                  .L_lambda_opt_env_loop_0029:	; ext_env[i + 1] <-- env[i]
 20266 0000ECE8 4883FE04                	cmp rsi, 4
 20267 0000ECEC 7410                    	je .L_lambda_opt_env_end_0029
 20268 0000ECEE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20269 0000ECF2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20270 0000ECF6 48FFC6                  	inc rsi
 20271 0000ECF9 48FFC2                  	inc rdx
 20272 0000ECFC EBEA                    	jmp .L_lambda_opt_env_loop_0029
 20273                                  .L_lambda_opt_env_end_0029:
 20274 0000ECFE 5B                      	pop rbx
 20275 0000ECFF BE00000000              	mov rsi, 0
 20276                                  .L_lambda_opt_params_loop_0029:	; copy params
 20277 0000ED04 4883FE01                	cmp rsi, 1
 20278 0000ED08 740E                    	je .L_lambda_opt_params_end_0029
 20279 0000ED0A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20280 0000ED0F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20281 0000ED13 48FFC6                  	inc rsi
 20282 0000ED16 EBEC                    	jmp .L_lambda_opt_params_loop_0029
 20283                                  .L_lambda_opt_params_end_0029:
 20284 0000ED18 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
 20285 0000ED1B 4889C3                  	mov rbx, rax
 20286 0000ED1E 58                      	pop rax
 20287 0000ED1F C60004                  	mov byte [rax], T_closure
 20288 0000ED22 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20289 0000ED26 48C74009[33ED0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0029
 20290 0000ED2E E907020000              	jmp .L_lambda_opt_end_0029
 20291                                  .L_lambda_opt_code_0029:	; lambda-opt body
 20292 0000ED33 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20293 0000ED39 7411                    	je .L_lambda_opt_arity_check_exact_0029
 20294 0000ED3B 0F8FBF000000            	jg .L_lambda_opt_arity_check_more_0029
 20295 0000ED41 FF742410                	push qword [rsp + 8 * 2]
 20296 0000ED45 6A01                    	push 1
 20297 0000ED47 E9B5920000              	jmp L_error_incorrect_arity_opt
 20298                                  .L_lambda_opt_arity_check_exact_0029:
 20299 0000ED4C 4883EC08                	sub rsp, 8
 20300 0000ED50 488B442408              	mov rax, qword[rsp + 8 *1]
 20301 0000ED55 48890424                	mov qword[rsp], rax  
 20302 0000ED59 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 20303 0000ED5E 4889442408              	mov qword[rsp + 8 * 1], rax
 20304 0000ED63 B802000000              	mov rax, 2
 20305 0000ED68 4889442410              	mov qword[rsp + 8 *2], rax
 20306 0000ED6D 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
 20307 0000ED72 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 20308 0000ED77 48B8-                   	mov rax, sob_nil
 20308 0000ED79 [0100000000000000] 
 20309 0000ED81 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
 20310 0000ED86 C8000000                	enter 0, 0
 20311                                  	; preparing a tail-call
 20312 0000ED8A 488B4528                	mov rax, PARAM(1)	; param strs
 20313 0000ED8E 50                      	push rax
 20314 0000ED8F 488B4520                	mov rax, PARAM(0)	; param str
 20315 0000ED93 50                      	push rax
 20316 0000ED94 6A02                    	push 2	; arg count
 20317 0000ED96 488B4510                	mov rax, ENV
 20318 0000ED9A 488B00                  	mov rax, qword [rax + 8 * 0]
 20319 0000ED9D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20320 0000EDA0 488B00                  	mov rax, qword [rax]
 20321 0000EDA3 803804                  	cmp byte [rax], T_closure
 20322 0000EDA6 0F85DF910000            	jne L_error_non_closure
 20323 0000EDAC FF7001                  	push SOB_CLOSURE_ENV(rax)
 20324 0000EDAF FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 20325 0000EDB2 FF7500                  	push qword[rbp]
 20326 0000EDB5 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 20327 0000EDB8 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 20328 0000EDBC 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 20329 0000EDC0 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 20330 0000EDC4 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 20331 0000EDC7 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 20332 0000EDCA 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 20333 0000EDCF 4983C103                	add r9, 3 	 ;for getting to the params
 20334 0000EDD3 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 20335 0000EDD7 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 20336                                  .L_tc_recycle_frame_loop_01cd:
 20337 0000EDDA 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 20338 0000EDDD 7410                    	je .L_tc_recycle_frame_done_01cd
 20339 0000EDDF 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 20340 0000EDE2 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 20341 0000EDE5 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 20342 0000EDE9 4983E808                	sub r8, 8	 ;move the top of the stack one down
 20343 0000EDED EBEB                    	jmp .L_tc_recycle_frame_loop_01cd
 20344                                  .L_tc_recycle_frame_done_01cd:
 20345 0000EDEF 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 20346 0000EDF0 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 20347 0000EDF4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20348 0000EDF7 C9                      	leave
 20349 0000EDF8 C22000                  	ret AND_KILL_FRAME(2)
 20350 0000EDFB E93A010000              	jmp .L_lambda_opt_end_0029	; new closure is in rax
 20351                                  .L_lambda_opt_arity_check_more_0029:
 20352 0000EE00 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 20353 0000EE05 49B9-                   	mov r9, sob_nil
 20353 0000EE07 [0100000000000000] 
 20354 0000EE0F 4889E3                  	mov rbx, rsp 
 20355 0000EE12 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 20356 0000EE16 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 20357 0000EE19 49C1E003                	shl r8, 3
 20358 0000EE1D 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 20359 0000EE20 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 20360                                  .L_lambda_opt_stack_shrink_loop_0029:
 20361 0000EE25 4983F801                	cmp r8, 1
 20362 0000EE29 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0029
 20363 0000EE2B BF11000000              	mov rdi, 1+8+8 ;for pair
 20364 0000EE30 E8FF910000              	call malloc;to create the pair in the stack
 20365 0000EE35 C60021                  	mov byte [rax], T_pair ; to make it a pair
 20366 0000EE38 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
 20367 0000EE3B 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 20368 0000EE3F 4C894809                 	mov qword[rax+1+8],r9
 20369 0000EE43 4989C1                  	mov r9, rax ;for the recursion 
 20370 0000EE46 49FFC8                  	dec r8 ;we finished copy another opt param to the list
 20371 0000EE49 4883EB08                	sub rbx, 8 ;to get the next param to copy
 20372 0000EE4D EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0029
 20373                                  .L_lambda_opt_stack_shrink_loop_exit_0029:
 20374 0000EE4F 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
 20375 0000EE54 4883E902                	sub rcx, 2
 20376 0000EE58 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
 20377 0000EE5C 4801CC                  	add rsp, rcx ;shrinking the stack
 20378 0000EE5F 4889E0                  	mov rax, rsp
 20379 0000EE62 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
 20380 0000EE65 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
 20381 0000EE69 49FFC8                  	dec r8 ;we start with param 0, not 1 
 20382 0000EE6C 4883C018                	add rax, 3 * 8;now rax is param 0
 20383 0000EE70 49C1E003                	shl r8, 3;convert to byte
 20384 0000EE74 4C01C0                  	add rax, r8;now rax is the top of the stack
 20385 0000EE77 4C8908                  	mov qword[rax], r9;puting the list at the top
 20386 0000EE7A 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
 20387 0000EE7E 4889E3                  	mov rbx, rsp 
 20388 0000EE81 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
 20389 0000EE84 41BA01000000            	mov r10, 1;r10 is the not opt params length
 20390 0000EE8A 49FFCA                  	dec r10 
 20391 0000EE8D 49C1E203                	shl r10, 3;to get bytes
 20392 0000EE91 4883C318                	add rbx, 3*8;rbx is the first param
 20393 0000EE95 4C01D3                  	add rbx, r10; rbx is where the address to copy to
 20394 0000EE98 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
 20395 0000EE9B 4C8900                  	mov qword[rax], r8
 20396 0000EE9E 4883E808                	sub rax, 8
 20397 0000EEA2 4883EB08                	sub rbx, 8
 20398 0000EEA6 4889E0                  	mov rax, rsp
 20399 0000EEA9 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 20400 0000EEAC 48C744241002000000      	mov qword [rsp+2*8], 2
 20401 0000EEB5 488B5808                	mov rbx, qword[rax + 8 *1]
 20402 0000EEB9 48895C2408              	mov qword [rsp + 1*8] ,rbx
 20403 0000EEBE 488B18                  	mov rbx, qword[rax]
 20404 0000EEC1 48891C24                	mov qword [rsp], rbx
 20405 0000EEC5 C8000000                	enter 0, 0
 20406                                  	; preparing a tail-call
 20407 0000EEC9 488B4528                	mov rax, PARAM(1)	; param strs
 20408 0000EECD 50                      	push rax
 20409 0000EECE 488B4520                	mov rax, PARAM(0)	; param str
 20410 0000EED2 50                      	push rax
 20411 0000EED3 6A02                    	push 2	; arg count
 20412 0000EED5 488B4510                	mov rax, ENV
 20413 0000EED9 488B00                  	mov rax, qword [rax + 8 * 0]
 20414 0000EEDC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20415 0000EEDF 488B00                  	mov rax, qword [rax]
 20416 0000EEE2 803804                  	cmp byte [rax], T_closure
 20417 0000EEE5 0F85A0900000            	jne L_error_non_closure
 20418 0000EEEB FF7001                  	push SOB_CLOSURE_ENV(rax)
 20419 0000EEEE FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 20420 0000EEF1 FF7500                  	push qword[rbp]
 20421 0000EEF4 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 20422 0000EEF7 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 20423 0000EEFB 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 20424 0000EEFF 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 20425 0000EF03 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 20426 0000EF06 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 20427 0000EF09 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 20428 0000EF0E 4983C103                	add r9, 3 	 ;for getting to the params
 20429 0000EF12 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 20430 0000EF16 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 20431                                  .L_tc_recycle_frame_loop_01cc:
 20432 0000EF19 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 20433 0000EF1C 7410                    	je .L_tc_recycle_frame_done_01cc
 20434 0000EF1E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 20435 0000EF21 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 20436 0000EF24 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 20437 0000EF28 4983E808                	sub r8, 8	 ;move the top of the stack one down
 20438 0000EF2C EBEB                    	jmp .L_tc_recycle_frame_loop_01cc
 20439                                  .L_tc_recycle_frame_done_01cc:
 20440 0000EF2E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 20441 0000EF2F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 20442 0000EF33 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20443 0000EF36 C9                      	leave
 20444 0000EF37 C22000                  	ret AND_KILL_FRAME(2)
 20445                                  .L_lambda_opt_end_0029:	; new closure is in rax
 20446 0000EF3A C9                      	leave
 20447 0000EF3B C21800                  	ret AND_KILL_FRAME(1)
 20448                                  .L_lambda_simple_end_0133:	; new closure is in rax
 20449 0000EF3E 803804                  	cmp byte [rax], T_closure
 20450 0000EF41 0F8544900000            	jne L_error_non_closure
 20451 0000EF47 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20452 0000EF4A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 20453 0000EF4D FF7500                  	push qword[rbp]
 20454 0000EF50 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 20455 0000EF53 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 20456 0000EF57 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 20457 0000EF5B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 20458 0000EF5F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 20459 0000EF62 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 20460 0000EF65 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 20461 0000EF6A 4983C103                	add r9, 3 	 ;for getting to the params
 20462 0000EF6E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 20463 0000EF72 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 20464                                  .L_tc_recycle_frame_loop_01ce:
 20465 0000EF75 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 20466 0000EF78 7410                    	je .L_tc_recycle_frame_done_01ce
 20467 0000EF7A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 20468 0000EF7D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 20469 0000EF80 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 20470 0000EF84 4983E808                	sub r8, 8	 ;move the top of the stack one down
 20471 0000EF88 EBEB                    	jmp .L_tc_recycle_frame_loop_01ce
 20472                                  .L_tc_recycle_frame_done_01ce:
 20473 0000EF8A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 20474 0000EF8B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 20475 0000EF8F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20476 0000EF92 C9                      	leave
 20477 0000EF93 C21800                  	ret AND_KILL_FRAME(1)
 20478                                  .L_lambda_simple_end_0132:	; new closure is in rax
 20479 0000EF96 803804                  	cmp byte [rax], T_closure
 20480 0000EF99 0F85EC8F0000            	jne L_error_non_closure
 20481 0000EF9F FF7001                  	push SOB_CLOSURE_ENV(rax)
 20482 0000EFA2 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 20483 0000EFA5 FF7500                  	push qword[rbp]
 20484 0000EFA8 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 20485 0000EFAB 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 20486 0000EFAF 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 20487 0000EFB3 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 20488 0000EFB7 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 20489 0000EFBA 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 20490 0000EFBD 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 20491 0000EFC2 4983C103                	add r9, 3 	 ;for getting to the params
 20492 0000EFC6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 20493 0000EFCA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 20494                                  .L_tc_recycle_frame_loop_01cf:
 20495 0000EFCD 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 20496 0000EFD0 7410                    	je .L_tc_recycle_frame_done_01cf
 20497 0000EFD2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 20498 0000EFD5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 20499 0000EFD8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 20500 0000EFDC 4983E808                	sub r8, 8	 ;move the top of the stack one down
 20501 0000EFE0 EBEB                    	jmp .L_tc_recycle_frame_loop_01cf
 20502                                  .L_tc_recycle_frame_done_01cf:
 20503 0000EFE2 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 20504 0000EFE3 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 20505 0000EFE7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20506 0000EFEA C9                      	leave
 20507 0000EFEB C21800                  	ret AND_KILL_FRAME(1)
 20508                                  .L_lambda_simple_end_012e:	; new closure is in rax
 20509 0000EFEE 803804                  	cmp byte [rax], T_closure
 20510 0000EFF1 0F85948F0000            	jne L_error_non_closure
 20511 0000EFF7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20512 0000EFFA FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 20513 0000EFFD FF7500                  	push qword[rbp]
 20514 0000F000 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 20515 0000F003 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 20516 0000F007 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 20517 0000F00B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 20518 0000F00F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 20519 0000F012 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 20520 0000F015 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 20521 0000F01A 4983C103                	add r9, 3 	 ;for getting to the params
 20522 0000F01E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 20523 0000F022 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 20524                                  .L_tc_recycle_frame_loop_01d0:
 20525 0000F025 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 20526 0000F028 7410                    	je .L_tc_recycle_frame_done_01d0
 20527 0000F02A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 20528 0000F02D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 20529 0000F030 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 20530 0000F034 4983E808                	sub r8, 8	 ;move the top of the stack one down
 20531 0000F038 EBEB                    	jmp .L_tc_recycle_frame_loop_01d0
 20532                                  .L_tc_recycle_frame_done_01d0:
 20533 0000F03A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 20534 0000F03B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 20535 0000F03F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20536 0000F042 C9                      	leave
 20537 0000F043 C22000                  	ret AND_KILL_FRAME(2)
 20538                                  .L_lambda_simple_end_012d:	; new closure is in rax
 20539 0000F046 50                      	push rax
 20540 0000F047 6A01                    	push 1	; arg count
 20541 0000F049 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20542 0000F04E E8E18F0000              	call malloc
 20543 0000F053 50                      	push rax
 20544 0000F054 BF00000000              	mov rdi, 8 * 0	; new rib
 20545 0000F059 E8D68F0000              	call malloc
 20546 0000F05E 50                      	push rax
 20547 0000F05F BF08000000              	mov rdi, 8 * 1	; extended env
 20548 0000F064 E8CB8F0000              	call malloc
 20549 0000F069 488B7D10                	mov rdi, ENV
 20550 0000F06D BE00000000              	mov rsi, 0
 20551 0000F072 BA01000000              	mov rdx, 1
 20552                                  .L_lambda_simple_env_loop_0135:	; ext_env[i + 1] <-- env[i]
 20553 0000F077 4883FE00                	cmp rsi, 0
 20554 0000F07B 7410                    	je .L_lambda_simple_env_end_0135
 20555 0000F07D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20556 0000F081 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20557 0000F085 48FFC6                  	inc rsi
 20558 0000F088 48FFC2                  	inc rdx
 20559 0000F08B EBEA                    	jmp .L_lambda_simple_env_loop_0135
 20560                                  .L_lambda_simple_env_end_0135:
 20561 0000F08D 5B                      	pop rbx
 20562 0000F08E BE00000000              	mov rsi, 0
 20563                                  .L_lambda_simple_params_loop_0135:	; copy params
 20564 0000F093 4883FE00                	cmp rsi, 0
 20565 0000F097 740E                    	je .L_lambda_simple_params_end_0135
 20566 0000F099 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20567 0000F09E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20568 0000F0A2 48FFC6                  	inc rsi
 20569 0000F0A5 EBEC                    	jmp .L_lambda_simple_params_loop_0135
 20570                                  .L_lambda_simple_params_end_0135:
 20571 0000F0A7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20572 0000F0AA 4889C3                  	mov rbx, rax
 20573 0000F0AD 58                      	pop rax
 20574 0000F0AE C60004                  	mov byte [rax], T_closure
 20575 0000F0B1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20576 0000F0B5 48C74009[C2F00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0135
 20577 0000F0BD E947010000              	jmp .L_lambda_simple_end_0135
 20578                                  .L_lambda_simple_code_0135:	; lambda-simple body
 20579 0000F0C2 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20580 0000F0C8 740B                    	je .L_lambda_simple_arity_check_ok_0135
 20581 0000F0CA FF742410                	push qword [rsp + 8 * 2]
 20582 0000F0CE 6A01                    	push 1
 20583 0000F0D0 E9188F0000              	jmp L_error_incorrect_arity_simple
 20584                                  .L_lambda_simple_arity_check_ok_0135:
 20585 0000F0D5 C8000000                	enter 0, 0
 20586                                  	; preparing a non-tail-call
 20587 0000F0D9 488B0425[D2120000]      	mov rax, qword [free_var_75]	; free var char=?
 20588 0000F0E1 803805                  	cmp byte [rax], T_undefined
 20589 0000F0E4 0F841D8E0000            	je L_error_fvar_undefined
 20590 0000F0EA 50                      	push rax
 20591 0000F0EB 488B0425[C1120000]      	mov rax, qword [free_var_74]	; free var char<?
 20592 0000F0F3 803805                  	cmp byte [rax], T_undefined
 20593 0000F0F6 0F840B8E0000            	je L_error_fvar_undefined
 20594 0000F0FC 50                      	push rax
 20595 0000F0FD 6A02                    	push 2	; arg count
 20596 0000F0FF 488B4520                	mov rax, PARAM(0)	; param make-string<?
 20597 0000F103 803804                  	cmp byte [rax], T_closure
 20598 0000F106 0F857F8E0000            	jne L_error_non_closure
 20599 0000F10C FF7001                  	push SOB_CLOSURE_ENV(rax)
 20600 0000F10F FF5009                  	call SOB_CLOSURE_CODE(rax)
 20601 0000F112 48890425[BD160000]      	mov qword [free_var_134], rax
 20602 0000F11A 48B8-                   	mov rax, sob_void
 20602 0000F11C [0000000000000000] 
 20603                                  
 20604                                  	; preparing a non-tail-call
 20605 0000F124 488B0425[5B120000]      	mov rax, qword [free_var_68]	; free var char-ci=?
 20606 0000F12C 803805                  	cmp byte [rax], T_undefined
 20607 0000F12F 0F84D28D0000            	je L_error_fvar_undefined
 20608 0000F135 50                      	push rax
 20609 0000F136 488B0425[4A120000]      	mov rax, qword [free_var_67]	; free var char-ci<?
 20610 0000F13E 803805                  	cmp byte [rax], T_undefined
 20611 0000F141 0F84C08D0000            	je L_error_fvar_undefined
 20612 0000F147 50                      	push rax
 20613 0000F148 6A02                    	push 2	; arg count
 20614 0000F14A 488B4520                	mov rax, PARAM(0)	; param make-string<?
 20615 0000F14E 803804                  	cmp byte [rax], T_closure
 20616 0000F151 0F85348E0000            	jne L_error_non_closure
 20617 0000F157 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20618 0000F15A FF5009                  	call SOB_CLOSURE_CODE(rax)
 20619 0000F15D 48890425[F1150000]      	mov qword [free_var_122], rax
 20620 0000F165 48B8-                   	mov rax, sob_void
 20620 0000F167 [0000000000000000] 
 20621                                  
 20622                                  	; preparing a non-tail-call
 20623 0000F16F 488B0425[D2120000]      	mov rax, qword [free_var_75]	; free var char=?
 20624 0000F177 803805                  	cmp byte [rax], T_undefined
 20625 0000F17A 0F84878D0000            	je L_error_fvar_undefined
 20626 0000F180 50                      	push rax
 20627 0000F181 488B0425[F4120000]      	mov rax, qword [free_var_77]	; free var char>?
 20628 0000F189 803805                  	cmp byte [rax], T_undefined
 20629 0000F18C 0F84758D0000            	je L_error_fvar_undefined
 20630 0000F192 50                      	push rax
 20631 0000F193 6A02                    	push 2	; arg count
 20632 0000F195 488B4520                	mov rax, PARAM(0)	; param make-string<?
 20633 0000F199 803804                  	cmp byte [rax], T_closure
 20634 0000F19C 0F85E98D0000            	jne L_error_non_closure
 20635 0000F1A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20636 0000F1A5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20637 0000F1A8 48890425[F0160000]      	mov qword [free_var_137], rax
 20638 0000F1B0 48B8-                   	mov rax, sob_void
 20638 0000F1B2 [0000000000000000] 
 20639                                  
 20640                                  	; preparing a non-tail-call
 20641 0000F1BA 488B0425[5B120000]      	mov rax, qword [free_var_68]	; free var char-ci=?
 20642 0000F1C2 803805                  	cmp byte [rax], T_undefined
 20643 0000F1C5 0F843C8D0000            	je L_error_fvar_undefined
 20644 0000F1CB 50                      	push rax
 20645 0000F1CC 488B0425[7D120000]      	mov rax, qword [free_var_70]	; free var char-ci>?
 20646 0000F1D4 803805                  	cmp byte [rax], T_undefined
 20647 0000F1D7 0F842A8D0000            	je L_error_fvar_undefined
 20648 0000F1DD 50                      	push rax
 20649 0000F1DE 6A02                    	push 2	; arg count
 20650 0000F1E0 488B4520                	mov rax, PARAM(0)	; param make-string<?
 20651 0000F1E4 803804                  	cmp byte [rax], T_closure
 20652 0000F1E7 0F859E8D0000            	jne L_error_non_closure
 20653 0000F1ED FF7001                  	push SOB_CLOSURE_ENV(rax)
 20654 0000F1F0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20655 0000F1F3 48890425[24160000]      	mov qword [free_var_125], rax
 20656 0000F1FB 48B8-                   	mov rax, sob_void
 20656 0000F1FD [0000000000000000] 
 20657 0000F205 C9                      	leave
 20658 0000F206 C21800                  	ret AND_KILL_FRAME(1)
 20659                                  .L_lambda_simple_end_0135:	; new closure is in rax
 20660 0000F209 803804                  	cmp byte [rax], T_closure
 20661 0000F20C 0F85798D0000            	jne L_error_non_closure
 20662 0000F212 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20663 0000F215 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20664                                  
 20665 0000F218 4889C7                  	mov rdi, rax
 20666 0000F21B E869900000              	call print_sexpr_if_not_void
 20667                                  	; preparing a non-tail-call
 20668 0000F220 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20669 0000F225 E80A8E0000              	call malloc
 20670 0000F22A 50                      	push rax
 20671 0000F22B BF00000000              	mov rdi, 8 * 0	; new rib
 20672 0000F230 E8FF8D0000              	call malloc
 20673 0000F235 50                      	push rax
 20674 0000F236 BF08000000              	mov rdi, 8 * 1	; extended env
 20675 0000F23B E8F48D0000              	call malloc
 20676 0000F240 488B7D10                	mov rdi, ENV
 20677 0000F244 BE00000000              	mov rsi, 0
 20678 0000F249 BA01000000              	mov rdx, 1
 20679                                  .L_lambda_simple_env_loop_0136:	; ext_env[i + 1] <-- env[i]
 20680 0000F24E 4883FE00                	cmp rsi, 0
 20681 0000F252 7410                    	je .L_lambda_simple_env_end_0136
 20682 0000F254 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20683 0000F258 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20684 0000F25C 48FFC6                  	inc rsi
 20685 0000F25F 48FFC2                  	inc rdx
 20686 0000F262 EBEA                    	jmp .L_lambda_simple_env_loop_0136
 20687                                  .L_lambda_simple_env_end_0136:
 20688 0000F264 5B                      	pop rbx
 20689 0000F265 BE00000000              	mov rsi, 0
 20690                                  .L_lambda_simple_params_loop_0136:	; copy params
 20691 0000F26A 4883FE00                	cmp rsi, 0
 20692 0000F26E 740E                    	je .L_lambda_simple_params_end_0136
 20693 0000F270 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20694 0000F275 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20695 0000F279 48FFC6                  	inc rsi
 20696 0000F27C EBEC                    	jmp .L_lambda_simple_params_loop_0136
 20697                                  .L_lambda_simple_params_end_0136:
 20698 0000F27E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20699 0000F281 4889C3                  	mov rbx, rax
 20700 0000F284 58                      	pop rax
 20701 0000F285 C60004                  	mov byte [rax], T_closure
 20702 0000F288 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20703 0000F28C 48C74009[99F20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0136
 20704 0000F294 E9A10D0000              	jmp .L_lambda_simple_end_0136
 20705                                  .L_lambda_simple_code_0136:	; lambda-simple body
 20706 0000F299 48837C241002            	cmp qword [rsp + 8 * 2], 2
 20707 0000F29F 740B                    	je .L_lambda_simple_arity_check_ok_0136
 20708 0000F2A1 FF742410                	push qword [rsp + 8 * 2]
 20709 0000F2A5 6A02                    	push 2
 20710 0000F2A7 E9418D0000              	jmp L_error_incorrect_arity_simple
 20711                                  .L_lambda_simple_arity_check_ok_0136:
 20712 0000F2AC C8000000                	enter 0, 0
 20713                                  	; preparing a tail-call
 20714 0000F2B0 48B8-                   	mov rax, L_constants + 1993
 20714 0000F2B2 [C907000000000000] 
 20715 0000F2BA 50                      	push rax
 20716 0000F2BB 6A01                    	push 1	; arg count
 20717 0000F2BD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20718 0000F2C2 E86D8D0000              	call malloc
 20719 0000F2C7 50                      	push rax
 20720 0000F2C8 BF10000000              	mov rdi, 8 * 2	; new rib
 20721 0000F2CD E8628D0000              	call malloc
 20722 0000F2D2 50                      	push rax
 20723 0000F2D3 BF10000000              	mov rdi, 8 * 2	; extended env
 20724 0000F2D8 E8578D0000              	call malloc
 20725 0000F2DD 488B7D10                	mov rdi, ENV
 20726 0000F2E1 BE00000000              	mov rsi, 0
 20727 0000F2E6 BA01000000              	mov rdx, 1
 20728                                  .L_lambda_simple_env_loop_0137:	; ext_env[i + 1] <-- env[i]
 20729 0000F2EB 4883FE01                	cmp rsi, 1
 20730 0000F2EF 7410                    	je .L_lambda_simple_env_end_0137
 20731 0000F2F1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20732 0000F2F5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20733 0000F2F9 48FFC6                  	inc rsi
 20734 0000F2FC 48FFC2                  	inc rdx
 20735 0000F2FF EBEA                    	jmp .L_lambda_simple_env_loop_0137
 20736                                  .L_lambda_simple_env_end_0137:
 20737 0000F301 5B                      	pop rbx
 20738 0000F302 BE00000000              	mov rsi, 0
 20739                                  .L_lambda_simple_params_loop_0137:	; copy params
 20740 0000F307 4883FE02                	cmp rsi, 2
 20741 0000F30B 740E                    	je .L_lambda_simple_params_end_0137
 20742 0000F30D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20743 0000F312 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20744 0000F316 48FFC6                  	inc rsi
 20745 0000F319 EBEC                    	jmp .L_lambda_simple_params_loop_0137
 20746                                  .L_lambda_simple_params_end_0137:
 20747 0000F31B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20748 0000F31E 4889C3                  	mov rbx, rax
 20749 0000F321 58                      	pop rax
 20750 0000F322 C60004                  	mov byte [rax], T_closure
 20751 0000F325 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20752 0000F329 48C74009[36F30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0137
 20753 0000F331 E9AC0C0000              	jmp .L_lambda_simple_end_0137
 20754                                  .L_lambda_simple_code_0137:	; lambda-simple body
 20755 0000F336 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20756 0000F33C 740B                    	je .L_lambda_simple_arity_check_ok_0137
 20757 0000F33E FF742410                	push qword [rsp + 8 * 2]
 20758 0000F342 6A01                    	push 1
 20759 0000F344 E9A48C0000              	jmp L_error_incorrect_arity_simple
 20760                                  .L_lambda_simple_arity_check_ok_0137:
 20761 0000F349 C8000000                	enter 0, 0
 20762 0000F34D BF08000000              	mov rdi, 8*1
 20763 0000F352 E8DD8C0000              	call malloc
 20764 0000F357 488B5D20                	mov rbx, PARAM(0)
 20765 0000F35B 488918                  	mov qword[rax], rbx
 20766 0000F35E 48894520                	mov PARAM(0), rax
 20767 0000F362 48B8-                   	mov rax, sob_void
 20767 0000F364 [0000000000000000] 
 20768                                  
 20769 0000F36C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20770 0000F371 E8BE8C0000              	call malloc
 20771 0000F376 50                      	push rax
 20772 0000F377 BF08000000              	mov rdi, 8 * 1	; new rib
 20773 0000F37C E8B38C0000              	call malloc
 20774 0000F381 50                      	push rax
 20775 0000F382 BF18000000              	mov rdi, 8 * 3	; extended env
 20776 0000F387 E8A88C0000              	call malloc
 20777 0000F38C 488B7D10                	mov rdi, ENV
 20778 0000F390 BE00000000              	mov rsi, 0
 20779 0000F395 BA01000000              	mov rdx, 1
 20780                                  .L_lambda_simple_env_loop_0138:	; ext_env[i + 1] <-- env[i]
 20781 0000F39A 4883FE02                	cmp rsi, 2
 20782 0000F39E 7410                    	je .L_lambda_simple_env_end_0138
 20783 0000F3A0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20784 0000F3A4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20785 0000F3A8 48FFC6                  	inc rsi
 20786 0000F3AB 48FFC2                  	inc rdx
 20787 0000F3AE EBEA                    	jmp .L_lambda_simple_env_loop_0138
 20788                                  .L_lambda_simple_env_end_0138:
 20789 0000F3B0 5B                      	pop rbx
 20790 0000F3B1 BE00000000              	mov rsi, 0
 20791                                  .L_lambda_simple_params_loop_0138:	; copy params
 20792 0000F3B6 4883FE01                	cmp rsi, 1
 20793 0000F3BA 740E                    	je .L_lambda_simple_params_end_0138
 20794 0000F3BC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20795 0000F3C1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20796 0000F3C5 48FFC6                  	inc rsi
 20797 0000F3C8 EBEC                    	jmp .L_lambda_simple_params_loop_0138
 20798                                  .L_lambda_simple_params_end_0138:
 20799 0000F3CA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20800 0000F3CD 4889C3                  	mov rbx, rax
 20801 0000F3D0 58                      	pop rax
 20802 0000F3D1 C60004                  	mov byte [rax], T_closure
 20803 0000F3D4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20804 0000F3D8 48C74009[E5F30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0138
 20805 0000F3E0 E952020000              	jmp .L_lambda_simple_end_0138
 20806                                  .L_lambda_simple_code_0138:	; lambda-simple body
 20807 0000F3E5 48837C241005            	cmp qword [rsp + 8 * 2], 5
 20808 0000F3EB 740B                    	je .L_lambda_simple_arity_check_ok_0138
 20809 0000F3ED FF742410                	push qword [rsp + 8 * 2]
 20810 0000F3F1 6A05                    	push 5
 20811 0000F3F3 E9F58B0000              	jmp L_error_incorrect_arity_simple
 20812                                  .L_lambda_simple_arity_check_ok_0138:
 20813 0000F3F8 C8000000                	enter 0, 0
 20814                                  	; preparing a non-tail-call
 20815 0000F3FC 488B4530                	mov rax, PARAM(2)	; param len1
 20816 0000F400 50                      	push rax
 20817 0000F401 488B4520                	mov rax, PARAM(0)	; param i
 20818 0000F405 50                      	push rax
 20819 0000F406 6A02                    	push 2	; arg count
 20820 0000F408 488B0425[3D0E0000]      	mov rax, qword [free_var_6]	; free var =
 20821 0000F410 803805                  	cmp byte [rax], T_undefined
 20822 0000F413 0F84EE8A0000            	je L_error_fvar_undefined
 20823 0000F419 803804                  	cmp byte [rax], T_closure
 20824 0000F41C 0F85698B0000            	jne L_error_non_closure
 20825 0000F422 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20826 0000F425 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20827 0000F428 483D[02000000]          	cmp rax, sob_boolean_false
 20828 0000F42E 0F85FF010000            	jne .L_or_end_001e
 20829                                  	; preparing a non-tail-call
 20830                                  	; preparing a non-tail-call
 20831 0000F434 488B4520                	mov rax, PARAM(0)	; param i
 20832 0000F438 50                      	push rax
 20833 0000F439 488B4538                	mov rax, PARAM(3)	; param str2
 20834 0000F43D 50                      	push rax
 20835 0000F43E 6A02                    	push 2	; arg count
 20836 0000F440 488B0425[57160000]      	mov rax, qword [free_var_128]	; free var string-ref
 20837 0000F448 803805                  	cmp byte [rax], T_undefined
 20838 0000F44B 0F84B68A0000            	je L_error_fvar_undefined
 20839 0000F451 803804                  	cmp byte [rax], T_closure
 20840 0000F454 0F85318B0000            	jne L_error_non_closure
 20841 0000F45A FF7001                  	push SOB_CLOSURE_ENV(rax)
 20842 0000F45D FF5009                  	call SOB_CLOSURE_CODE(rax)
 20843 0000F460 50                      	push rax
 20844                                  	; preparing a non-tail-call
 20845 0000F461 488B4520                	mov rax, PARAM(0)	; param i
 20846 0000F465 50                      	push rax
 20847 0000F466 488B4528                	mov rax, PARAM(1)	; param str1
 20848 0000F46A 50                      	push rax
 20849 0000F46B 6A02                    	push 2	; arg count
 20850 0000F46D 488B0425[57160000]      	mov rax, qword [free_var_128]	; free var string-ref
 20851 0000F475 803805                  	cmp byte [rax], T_undefined
 20852 0000F478 0F84898A0000            	je L_error_fvar_undefined
 20853 0000F47E 803804                  	cmp byte [rax], T_closure
 20854 0000F481 0F85048B0000            	jne L_error_non_closure
 20855 0000F487 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20856 0000F48A FF5009                  	call SOB_CLOSURE_CODE(rax)
 20857 0000F48D 50                      	push rax
 20858 0000F48E 6A02                    	push 2	; arg count
 20859 0000F490 488B4510                	mov rax, ENV
 20860 0000F494 488B4008                	mov rax, qword [rax + 8 * 1]
 20861 0000F498 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char<?
 20862 0000F49B 803804                  	cmp byte [rax], T_closure
 20863 0000F49E 0F85E78A0000            	jne L_error_non_closure
 20864 0000F4A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20865 0000F4A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20866 0000F4AA 483D[02000000]          	cmp rax, sob_boolean_false
 20867 0000F4B0 0F857D010000            	jne .L_or_end_001e
 20868                                  	; preparing a non-tail-call
 20869 0000F4B6 488B4530                	mov rax, PARAM(2)	; param len1
 20870 0000F4BA 50                      	push rax
 20871 0000F4BB 488B4520                	mov rax, PARAM(0)	; param i
 20872 0000F4BF 50                      	push rax
 20873 0000F4C0 6A02                    	push 2	; arg count
 20874 0000F4C2 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 20875 0000F4CA 803805                  	cmp byte [rax], T_undefined
 20876 0000F4CD 0F84348A0000            	je L_error_fvar_undefined
 20877 0000F4D3 803804                  	cmp byte [rax], T_closure
 20878 0000F4D6 0F85AF8A0000            	jne L_error_non_closure
 20879 0000F4DC FF7001                  	push SOB_CLOSURE_ENV(rax)
 20880 0000F4DF FF5009                  	call SOB_CLOSURE_CODE(rax)
 20881 0000F4E2 483D[02000000]          	cmp rax, sob_boolean_false
 20882 0000F4E8 0F843B010000            	je .L_if_else_00f7
 20883                                  	; preparing a non-tail-call
 20884                                  	; preparing a non-tail-call
 20885 0000F4EE 488B4520                	mov rax, PARAM(0)	; param i
 20886 0000F4F2 50                      	push rax
 20887 0000F4F3 488B4538                	mov rax, PARAM(3)	; param str2
 20888 0000F4F7 50                      	push rax
 20889 0000F4F8 6A02                    	push 2	; arg count
 20890 0000F4FA 488B0425[57160000]      	mov rax, qword [free_var_128]	; free var string-ref
 20891 0000F502 803805                  	cmp byte [rax], T_undefined
 20892 0000F505 0F84FC890000            	je L_error_fvar_undefined
 20893 0000F50B 803804                  	cmp byte [rax], T_closure
 20894 0000F50E 0F85778A0000            	jne L_error_non_closure
 20895 0000F514 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20896 0000F517 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20897 0000F51A 50                      	push rax
 20898                                  	; preparing a non-tail-call
 20899 0000F51B 488B4520                	mov rax, PARAM(0)	; param i
 20900 0000F51F 50                      	push rax
 20901 0000F520 488B4528                	mov rax, PARAM(1)	; param str1
 20902 0000F524 50                      	push rax
 20903 0000F525 6A02                    	push 2	; arg count
 20904 0000F527 488B0425[57160000]      	mov rax, qword [free_var_128]	; free var string-ref
 20905 0000F52F 803805                  	cmp byte [rax], T_undefined
 20906 0000F532 0F84CF890000            	je L_error_fvar_undefined
 20907 0000F538 803804                  	cmp byte [rax], T_closure
 20908 0000F53B 0F854A8A0000            	jne L_error_non_closure
 20909 0000F541 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20910 0000F544 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20911 0000F547 50                      	push rax
 20912 0000F548 6A02                    	push 2	; arg count
 20913 0000F54A 488B4510                	mov rax, ENV
 20914 0000F54E 488B4008                	mov rax, qword [rax + 8 * 1]
 20915 0000F552 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var char=?
 20916 0000F556 803804                  	cmp byte [rax], T_closure
 20917 0000F559 0F852C8A0000            	jne L_error_non_closure
 20918 0000F55F FF7001                  	push SOB_CLOSURE_ENV(rax)
 20919 0000F562 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20920 0000F565 483D[02000000]          	cmp rax, sob_boolean_false
 20921 0000F56B 0F84AC000000            	je .L_if_else_00f6
 20922                                  	; preparing a tail-call
 20923 0000F571 488B4540                	mov rax, PARAM(4)	; param len2
 20924 0000F575 50                      	push rax
 20925 0000F576 488B4538                	mov rax, PARAM(3)	; param str2
 20926 0000F57A 50                      	push rax
 20927 0000F57B 488B4530                	mov rax, PARAM(2)	; param len1
 20928 0000F57F 50                      	push rax
 20929 0000F580 488B4528                	mov rax, PARAM(1)	; param str1
 20930 0000F584 50                      	push rax
 20931                                  	; preparing a non-tail-call
 20932 0000F585 48B8-                   	mov rax, L_constants + 2270
 20932 0000F587 [DE08000000000000] 
 20933 0000F58F 50                      	push rax
 20934 0000F590 488B4520                	mov rax, PARAM(0)	; param i
 20935 0000F594 50                      	push rax
 20936 0000F595 6A02                    	push 2	; arg count
 20937 0000F597 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 20938 0000F59F 803805                  	cmp byte [rax], T_undefined
 20939 0000F5A2 0F845F890000            	je L_error_fvar_undefined
 20940 0000F5A8 803804                  	cmp byte [rax], T_closure
 20941 0000F5AB 0F85DA890000            	jne L_error_non_closure
 20942 0000F5B1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20943 0000F5B4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20944 0000F5B7 50                      	push rax
 20945 0000F5B8 6A05                    	push 5	; arg count
 20946 0000F5BA 488B4510                	mov rax, ENV
 20947 0000F5BE 488B00                  	mov rax, qword [rax + 8 * 0]
 20948 0000F5C1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20949 0000F5C4 488B00                  	mov rax, qword [rax]
 20950 0000F5C7 803804                  	cmp byte [rax], T_closure
 20951 0000F5CA 0F85BB890000            	jne L_error_non_closure
 20952 0000F5D0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20953 0000F5D3 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 20954 0000F5D6 FF7500                  	push qword[rbp]
 20955 0000F5D9 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 20956 0000F5DC 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 20957 0000F5E0 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 20958 0000F5E4 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 20959 0000F5E8 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 20960 0000F5EB 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 20961 0000F5EE 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 20962 0000F5F3 4983C103                	add r9, 3 	 ;for getting to the params
 20963 0000F5F7 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 20964 0000F5FB 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 20965                                  .L_tc_recycle_frame_loop_01d1:
 20966 0000F5FE 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 20967 0000F601 7410                    	je .L_tc_recycle_frame_done_01d1
 20968 0000F603 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 20969 0000F606 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 20970 0000F609 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 20971 0000F60D 4983E808                	sub r8, 8	 ;move the top of the stack one down
 20972 0000F611 EBEB                    	jmp .L_tc_recycle_frame_loop_01d1
 20973                                  .L_tc_recycle_frame_done_01d1:
 20974 0000F613 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 20975 0000F614 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 20976 0000F618 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20977 0000F61B EB0A                    	jmp .L_if_end_00f6
 20978                                  .L_if_else_00f6:
 20979 0000F61D 48B8-                   	mov rax, L_constants + 2
 20979 0000F61F [0200000000000000] 
 20980                                  .L_if_end_00f6:
 20981 0000F627 EB0A                    	jmp .L_if_end_00f7
 20982                                  .L_if_else_00f7:
 20983 0000F629 48B8-                   	mov rax, L_constants + 2
 20983 0000F62B [0200000000000000] 
 20984                                  .L_if_end_00f7:
 20985                                  .L_or_end_001e:
 20986 0000F633 C9                      	leave
 20987 0000F634 C23800                  	ret AND_KILL_FRAME(5)
 20988                                  .L_lambda_simple_end_0138:	; new closure is in rax
 20989 0000F637 50                      	push rax
 20990 0000F638 488B4520                	mov rax, PARAM(0)	; param run
 20991 0000F63C 8F00                    	pop qword [rax]
 20992 0000F63E 48B8-                   	mov rax, sob_void
 20992 0000F640 [0000000000000000] 
 20993                                  
 20994                                  	; preparing a tail-call
 20995 0000F648 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20996 0000F64D E8E2890000              	call malloc
 20997 0000F652 50                      	push rax
 20998 0000F653 BF08000000              	mov rdi, 8 * 1	; new rib
 20999 0000F658 E8D7890000              	call malloc
 21000 0000F65D 50                      	push rax
 21001 0000F65E BF18000000              	mov rdi, 8 * 3	; extended env
 21002 0000F663 E8CC890000              	call malloc
 21003 0000F668 488B7D10                	mov rdi, ENV
 21004 0000F66C BE00000000              	mov rsi, 0
 21005 0000F671 BA01000000              	mov rdx, 1
 21006                                  .L_lambda_simple_env_loop_0139:	; ext_env[i + 1] <-- env[i]
 21007 0000F676 4883FE02                	cmp rsi, 2
 21008 0000F67A 7410                    	je .L_lambda_simple_env_end_0139
 21009 0000F67C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21010 0000F680 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21011 0000F684 48FFC6                  	inc rsi
 21012 0000F687 48FFC2                  	inc rdx
 21013 0000F68A EBEA                    	jmp .L_lambda_simple_env_loop_0139
 21014                                  .L_lambda_simple_env_end_0139:
 21015 0000F68C 5B                      	pop rbx
 21016 0000F68D BE00000000              	mov rsi, 0
 21017                                  .L_lambda_simple_params_loop_0139:	; copy params
 21018 0000F692 4883FE01                	cmp rsi, 1
 21019 0000F696 740E                    	je .L_lambda_simple_params_end_0139
 21020 0000F698 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21021 0000F69D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21022 0000F6A1 48FFC6                  	inc rsi
 21023 0000F6A4 EBEC                    	jmp .L_lambda_simple_params_loop_0139
 21024                                  .L_lambda_simple_params_end_0139:
 21025 0000F6A6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21026 0000F6A9 4889C3                  	mov rbx, rax
 21027 0000F6AC 58                      	pop rax
 21028 0000F6AD C60004                  	mov byte [rax], T_closure
 21029 0000F6B0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21030 0000F6B4 48C74009[C1F60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0139
 21031 0000F6BC E9B2020000              	jmp .L_lambda_simple_end_0139
 21032                                  .L_lambda_simple_code_0139:	; lambda-simple body
 21033 0000F6C1 48837C241002            	cmp qword [rsp + 8 * 2], 2
 21034 0000F6C7 740B                    	je .L_lambda_simple_arity_check_ok_0139
 21035 0000F6C9 FF742410                	push qword [rsp + 8 * 2]
 21036 0000F6CD 6A02                    	push 2
 21037 0000F6CF E919890000              	jmp L_error_incorrect_arity_simple
 21038                                  .L_lambda_simple_arity_check_ok_0139:
 21039 0000F6D4 C8000000                	enter 0, 0
 21040                                  	; preparing a tail-call
 21041                                  	; preparing a non-tail-call
 21042 0000F6D8 488B4528                	mov rax, PARAM(1)	; param str2
 21043 0000F6DC 50                      	push rax
 21044 0000F6DD 6A01                    	push 1	; arg count
 21045 0000F6DF 488B0425[46160000]      	mov rax, qword [free_var_127]	; free var string-length
 21046 0000F6E7 803805                  	cmp byte [rax], T_undefined
 21047 0000F6EA 0F8417880000            	je L_error_fvar_undefined
 21048 0000F6F0 803804                  	cmp byte [rax], T_closure
 21049 0000F6F3 0F8592880000            	jne L_error_non_closure
 21050 0000F6F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21051 0000F6FC FF5009                  	call SOB_CLOSURE_CODE(rax)
 21052 0000F6FF 50                      	push rax
 21053                                  	; preparing a non-tail-call
 21054 0000F700 488B4520                	mov rax, PARAM(0)	; param str1
 21055 0000F704 50                      	push rax
 21056 0000F705 6A01                    	push 1	; arg count
 21057 0000F707 488B0425[46160000]      	mov rax, qword [free_var_127]	; free var string-length
 21058 0000F70F 803805                  	cmp byte [rax], T_undefined
 21059 0000F712 0F84EF870000            	je L_error_fvar_undefined
 21060 0000F718 803804                  	cmp byte [rax], T_closure
 21061 0000F71B 0F856A880000            	jne L_error_non_closure
 21062 0000F721 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21063 0000F724 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21064 0000F727 50                      	push rax
 21065 0000F728 6A02                    	push 2	; arg count
 21066 0000F72A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21067 0000F72F E800890000              	call malloc
 21068 0000F734 50                      	push rax
 21069 0000F735 BF10000000              	mov rdi, 8 * 2	; new rib
 21070 0000F73A E8F5880000              	call malloc
 21071 0000F73F 50                      	push rax
 21072 0000F740 BF20000000              	mov rdi, 8 * 4	; extended env
 21073 0000F745 E8EA880000              	call malloc
 21074 0000F74A 488B7D10                	mov rdi, ENV
 21075 0000F74E BE00000000              	mov rsi, 0
 21076 0000F753 BA01000000              	mov rdx, 1
 21077                                  .L_lambda_simple_env_loop_013a:	; ext_env[i + 1] <-- env[i]
 21078 0000F758 4883FE03                	cmp rsi, 3
 21079 0000F75C 7410                    	je .L_lambda_simple_env_end_013a
 21080 0000F75E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21081 0000F762 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21082 0000F766 48FFC6                  	inc rsi
 21083 0000F769 48FFC2                  	inc rdx
 21084 0000F76C EBEA                    	jmp .L_lambda_simple_env_loop_013a
 21085                                  .L_lambda_simple_env_end_013a:
 21086 0000F76E 5B                      	pop rbx
 21087 0000F76F BE00000000              	mov rsi, 0
 21088                                  .L_lambda_simple_params_loop_013a:	; copy params
 21089 0000F774 4883FE02                	cmp rsi, 2
 21090 0000F778 740E                    	je .L_lambda_simple_params_end_013a
 21091 0000F77A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21092 0000F77F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21093 0000F783 48FFC6                  	inc rsi
 21094 0000F786 EBEC                    	jmp .L_lambda_simple_params_loop_013a
 21095                                  .L_lambda_simple_params_end_013a:
 21096 0000F788 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21097 0000F78B 4889C3                  	mov rbx, rax
 21098 0000F78E 58                      	pop rax
 21099 0000F78F C60004                  	mov byte [rax], T_closure
 21100 0000F792 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21101 0000F796 48C74009[A3F70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_013a
 21102 0000F79E E978010000              	jmp .L_lambda_simple_end_013a
 21103                                  .L_lambda_simple_code_013a:	; lambda-simple body
 21104 0000F7A3 48837C241002            	cmp qword [rsp + 8 * 2], 2
 21105 0000F7A9 740B                    	je .L_lambda_simple_arity_check_ok_013a
 21106 0000F7AB FF742410                	push qword [rsp + 8 * 2]
 21107 0000F7AF 6A02                    	push 2
 21108 0000F7B1 E937880000              	jmp L_error_incorrect_arity_simple
 21109                                  .L_lambda_simple_arity_check_ok_013a:
 21110 0000F7B6 C8000000                	enter 0, 0
 21111                                  	; preparing a non-tail-call
 21112 0000F7BA 488B4528                	mov rax, PARAM(1)	; param len2
 21113 0000F7BE 50                      	push rax
 21114 0000F7BF 488B4520                	mov rax, PARAM(0)	; param len1
 21115 0000F7C3 50                      	push rax
 21116 0000F7C4 6A02                    	push 2	; arg count
 21117 0000F7C6 488B0425[2C0E0000]      	mov rax, qword [free_var_5]	; free var <=
 21118 0000F7CE 803805                  	cmp byte [rax], T_undefined
 21119 0000F7D1 0F8430870000            	je L_error_fvar_undefined
 21120 0000F7D7 803804                  	cmp byte [rax], T_closure
 21121 0000F7DA 0F85AB870000            	jne L_error_non_closure
 21122 0000F7E0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21123 0000F7E3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21124 0000F7E6 483D[02000000]          	cmp rax, sob_boolean_false
 21125 0000F7EC 0F8495000000            	je .L_if_else_00f8
 21126                                  	; preparing a tail-call
 21127 0000F7F2 488B4528                	mov rax, PARAM(1)	; param len2
 21128 0000F7F6 50                      	push rax
 21129 0000F7F7 488B4510                	mov rax, ENV
 21130 0000F7FB 488B00                  	mov rax, qword [rax + 8 * 0]
 21131 0000F7FE 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 21132 0000F802 50                      	push rax
 21133 0000F803 488B4520                	mov rax, PARAM(0)	; param len1
 21134 0000F807 50                      	push rax
 21135 0000F808 488B4510                	mov rax, ENV
 21136 0000F80C 488B00                  	mov rax, qword [rax + 8 * 0]
 21137 0000F80F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 21138 0000F812 50                      	push rax
 21139 0000F813 48B8-                   	mov rax, L_constants + 2135
 21139 0000F815 [5708000000000000] 
 21140 0000F81D 50                      	push rax
 21141 0000F81E 6A05                    	push 5	; arg count
 21142 0000F820 488B4510                	mov rax, ENV
 21143 0000F824 488B4008                	mov rax, qword [rax + 8 * 1]
 21144 0000F828 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 21145 0000F82B 488B00                  	mov rax, qword [rax]
 21146 0000F82E 803804                  	cmp byte [rax], T_closure
 21147 0000F831 0F8554870000            	jne L_error_non_closure
 21148 0000F837 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21149 0000F83A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21150 0000F83D FF7500                  	push qword[rbp]
 21151 0000F840 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21152 0000F843 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21153 0000F847 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21154 0000F84B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21155 0000F84F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21156 0000F852 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21157 0000F855 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21158 0000F85A 4983C103                	add r9, 3 	 ;for getting to the params
 21159 0000F85E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21160 0000F862 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21161                                  .L_tc_recycle_frame_loop_01d2:
 21162 0000F865 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21163 0000F868 7410                    	je .L_tc_recycle_frame_done_01d2
 21164 0000F86A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21165 0000F86D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21166 0000F870 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21167 0000F874 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21168 0000F878 EBEB                    	jmp .L_tc_recycle_frame_loop_01d2
 21169                                  .L_tc_recycle_frame_done_01d2:
 21170 0000F87A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21171 0000F87B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21172 0000F87F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21173 0000F882 E990000000              	jmp .L_if_end_00f8
 21174                                  .L_if_else_00f8:
 21175                                  	; preparing a tail-call
 21176 0000F887 488B4520                	mov rax, PARAM(0)	; param len1
 21177 0000F88B 50                      	push rax
 21178 0000F88C 488B4510                	mov rax, ENV
 21179 0000F890 488B00                  	mov rax, qword [rax + 8 * 0]
 21180 0000F893 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 21181 0000F896 50                      	push rax
 21182 0000F897 488B4528                	mov rax, PARAM(1)	; param len2
 21183 0000F89B 50                      	push rax
 21184 0000F89C 488B4510                	mov rax, ENV
 21185 0000F8A0 488B00                  	mov rax, qword [rax + 8 * 0]
 21186 0000F8A3 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 21187 0000F8A7 50                      	push rax
 21188 0000F8A8 48B8-                   	mov rax, L_constants + 2135
 21188 0000F8AA [5708000000000000] 
 21189 0000F8B2 50                      	push rax
 21190 0000F8B3 6A05                    	push 5	; arg count
 21191 0000F8B5 488B4510                	mov rax, ENV
 21192 0000F8B9 488B4008                	mov rax, qword [rax + 8 * 1]
 21193 0000F8BD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 21194 0000F8C0 488B00                  	mov rax, qword [rax]
 21195 0000F8C3 803804                  	cmp byte [rax], T_closure
 21196 0000F8C6 0F85BF860000            	jne L_error_non_closure
 21197 0000F8CC FF7001                  	push SOB_CLOSURE_ENV(rax)
 21198 0000F8CF FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21199 0000F8D2 FF7500                  	push qword[rbp]
 21200 0000F8D5 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21201 0000F8D8 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21202 0000F8DC 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21203 0000F8E0 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21204 0000F8E4 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21205 0000F8E7 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21206 0000F8EA 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21207 0000F8EF 4983C103                	add r9, 3 	 ;for getting to the params
 21208 0000F8F3 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21209 0000F8F7 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21210                                  .L_tc_recycle_frame_loop_01d3:
 21211 0000F8FA 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21212 0000F8FD 7410                    	je .L_tc_recycle_frame_done_01d3
 21213 0000F8FF 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21214 0000F902 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21215 0000F905 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21216 0000F909 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21217 0000F90D EBEB                    	jmp .L_tc_recycle_frame_loop_01d3
 21218                                  .L_tc_recycle_frame_done_01d3:
 21219 0000F90F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21220 0000F910 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21221 0000F914 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21222                                  .L_if_end_00f8:
 21223 0000F917 C9                      	leave
 21224 0000F918 C22000                  	ret AND_KILL_FRAME(2)
 21225                                  .L_lambda_simple_end_013a:	; new closure is in rax
 21226 0000F91B 803804                  	cmp byte [rax], T_closure
 21227 0000F91E 0F8567860000            	jne L_error_non_closure
 21228 0000F924 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21229 0000F927 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21230 0000F92A FF7500                  	push qword[rbp]
 21231 0000F92D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21232 0000F930 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21233 0000F934 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21234 0000F938 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21235 0000F93C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21236 0000F93F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21237 0000F942 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21238 0000F947 4983C103                	add r9, 3 	 ;for getting to the params
 21239 0000F94B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21240 0000F94F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21241                                  .L_tc_recycle_frame_loop_01d4:
 21242 0000F952 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21243 0000F955 7410                    	je .L_tc_recycle_frame_done_01d4
 21244 0000F957 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21245 0000F95A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21246 0000F95D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21247 0000F961 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21248 0000F965 EBEB                    	jmp .L_tc_recycle_frame_loop_01d4
 21249                                  .L_tc_recycle_frame_done_01d4:
 21250 0000F967 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21251 0000F968 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21252 0000F96C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21253 0000F96F C9                      	leave
 21254 0000F970 C22000                  	ret AND_KILL_FRAME(2)
 21255                                  .L_lambda_simple_end_0139:	; new closure is in rax
 21256 0000F973 50                      	push rax
 21257 0000F974 6A01                    	push 1	; arg count
 21258 0000F976 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21259 0000F97B E8B4860000              	call malloc
 21260 0000F980 50                      	push rax
 21261 0000F981 BF08000000              	mov rdi, 8 * 1	; new rib
 21262 0000F986 E8A9860000              	call malloc
 21263 0000F98B 50                      	push rax
 21264 0000F98C BF18000000              	mov rdi, 8 * 3	; extended env
 21265 0000F991 E89E860000              	call malloc
 21266 0000F996 488B7D10                	mov rdi, ENV
 21267 0000F99A BE00000000              	mov rsi, 0
 21268 0000F99F BA01000000              	mov rdx, 1
 21269                                  .L_lambda_simple_env_loop_013b:	; ext_env[i + 1] <-- env[i]
 21270 0000F9A4 4883FE02                	cmp rsi, 2
 21271 0000F9A8 7410                    	je .L_lambda_simple_env_end_013b
 21272 0000F9AA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21273 0000F9AE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21274 0000F9B2 48FFC6                  	inc rsi
 21275 0000F9B5 48FFC2                  	inc rdx
 21276 0000F9B8 EBEA                    	jmp .L_lambda_simple_env_loop_013b
 21277                                  .L_lambda_simple_env_end_013b:
 21278 0000F9BA 5B                      	pop rbx
 21279 0000F9BB BE00000000              	mov rsi, 0
 21280                                  .L_lambda_simple_params_loop_013b:	; copy params
 21281 0000F9C0 4883FE01                	cmp rsi, 1
 21282 0000F9C4 740E                    	je .L_lambda_simple_params_end_013b
 21283 0000F9C6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21284 0000F9CB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21285 0000F9CF 48FFC6                  	inc rsi
 21286 0000F9D2 EBEC                    	jmp .L_lambda_simple_params_loop_013b
 21287                                  .L_lambda_simple_params_end_013b:
 21288 0000F9D4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21289 0000F9D7 4889C3                  	mov rbx, rax
 21290 0000F9DA 58                      	pop rax
 21291 0000F9DB C60004                  	mov byte [rax], T_closure
 21292 0000F9DE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21293 0000F9E2 48C74009[EFF90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_013b
 21294 0000F9EA E99B050000              	jmp .L_lambda_simple_end_013b
 21295                                  .L_lambda_simple_code_013b:	; lambda-simple body
 21296 0000F9EF 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21297 0000F9F5 740B                    	je .L_lambda_simple_arity_check_ok_013b
 21298 0000F9F7 FF742410                	push qword [rsp + 8 * 2]
 21299 0000F9FB 6A01                    	push 1
 21300 0000F9FD E9EB850000              	jmp L_error_incorrect_arity_simple
 21301                                  .L_lambda_simple_arity_check_ok_013b:
 21302 0000FA02 C8000000                	enter 0, 0
 21303                                  	; preparing a tail-call
 21304 0000FA06 48B8-                   	mov rax, L_constants + 1993
 21304 0000FA08 [C907000000000000] 
 21305 0000FA10 50                      	push rax
 21306 0000FA11 6A01                    	push 1	; arg count
 21307 0000FA13 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21308 0000FA18 E817860000              	call malloc
 21309 0000FA1D 50                      	push rax
 21310 0000FA1E BF08000000              	mov rdi, 8 * 1	; new rib
 21311 0000FA23 E80C860000              	call malloc
 21312 0000FA28 50                      	push rax
 21313 0000FA29 BF20000000              	mov rdi, 8 * 4	; extended env
 21314 0000FA2E E801860000              	call malloc
 21315 0000FA33 488B7D10                	mov rdi, ENV
 21316 0000FA37 BE00000000              	mov rsi, 0
 21317 0000FA3C BA01000000              	mov rdx, 1
 21318                                  .L_lambda_simple_env_loop_013c:	; ext_env[i + 1] <-- env[i]
 21319 0000FA41 4883FE03                	cmp rsi, 3
 21320 0000FA45 7410                    	je .L_lambda_simple_env_end_013c
 21321 0000FA47 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21322 0000FA4B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21323 0000FA4F 48FFC6                  	inc rsi
 21324 0000FA52 48FFC2                  	inc rdx
 21325 0000FA55 EBEA                    	jmp .L_lambda_simple_env_loop_013c
 21326                                  .L_lambda_simple_env_end_013c:
 21327 0000FA57 5B                      	pop rbx
 21328 0000FA58 BE00000000              	mov rsi, 0
 21329                                  .L_lambda_simple_params_loop_013c:	; copy params
 21330 0000FA5D 4883FE01                	cmp rsi, 1
 21331 0000FA61 740E                    	je .L_lambda_simple_params_end_013c
 21332 0000FA63 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21333 0000FA68 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21334 0000FA6C 48FFC6                  	inc rsi
 21335 0000FA6F EBEC                    	jmp .L_lambda_simple_params_loop_013c
 21336                                  .L_lambda_simple_params_end_013c:
 21337 0000FA71 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21338 0000FA74 4889C3                  	mov rbx, rax
 21339 0000FA77 58                      	pop rax
 21340 0000FA78 C60004                  	mov byte [rax], T_closure
 21341 0000FA7B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21342 0000FA7F 48C74009[8CFA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_013c
 21343 0000FA87 E9A6040000              	jmp .L_lambda_simple_end_013c
 21344                                  .L_lambda_simple_code_013c:	; lambda-simple body
 21345 0000FA8C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21346 0000FA92 740B                    	je .L_lambda_simple_arity_check_ok_013c
 21347 0000FA94 FF742410                	push qword [rsp + 8 * 2]
 21348 0000FA98 6A01                    	push 1
 21349 0000FA9A E94E850000              	jmp L_error_incorrect_arity_simple
 21350                                  .L_lambda_simple_arity_check_ok_013c:
 21351 0000FA9F C8000000                	enter 0, 0
 21352 0000FAA3 BF08000000              	mov rdi, 8*1
 21353 0000FAA8 E887850000              	call malloc
 21354 0000FAAD 488B5D20                	mov rbx, PARAM(0)
 21355 0000FAB1 488918                  	mov qword[rax], rbx
 21356 0000FAB4 48894520                	mov PARAM(0), rax
 21357 0000FAB8 48B8-                   	mov rax, sob_void
 21357 0000FABA [0000000000000000] 
 21358                                  
 21359 0000FAC2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21360 0000FAC7 E868850000              	call malloc
 21361 0000FACC 50                      	push rax
 21362 0000FACD BF08000000              	mov rdi, 8 * 1	; new rib
 21363 0000FAD2 E85D850000              	call malloc
 21364 0000FAD7 50                      	push rax
 21365 0000FAD8 BF28000000              	mov rdi, 8 * 5	; extended env
 21366 0000FADD E852850000              	call malloc
 21367 0000FAE2 488B7D10                	mov rdi, ENV
 21368 0000FAE6 BE00000000              	mov rsi, 0
 21369 0000FAEB BA01000000              	mov rdx, 1
 21370                                  .L_lambda_simple_env_loop_013d:	; ext_env[i + 1] <-- env[i]
 21371 0000FAF0 4883FE04                	cmp rsi, 4
 21372 0000FAF4 7410                    	je .L_lambda_simple_env_end_013d
 21373 0000FAF6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21374 0000FAFA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21375 0000FAFE 48FFC6                  	inc rsi
 21376 0000FB01 48FFC2                  	inc rdx
 21377 0000FB04 EBEA                    	jmp .L_lambda_simple_env_loop_013d
 21378                                  .L_lambda_simple_env_end_013d:
 21379 0000FB06 5B                      	pop rbx
 21380 0000FB07 BE00000000              	mov rsi, 0
 21381                                  .L_lambda_simple_params_loop_013d:	; copy params
 21382 0000FB0C 4883FE01                	cmp rsi, 1
 21383 0000FB10 740E                    	je .L_lambda_simple_params_end_013d
 21384 0000FB12 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21385 0000FB17 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21386 0000FB1B 48FFC6                  	inc rsi
 21387 0000FB1E EBEC                    	jmp .L_lambda_simple_params_loop_013d
 21388                                  .L_lambda_simple_params_end_013d:
 21389 0000FB20 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21390 0000FB23 4889C3                  	mov rbx, rax
 21391 0000FB26 58                      	pop rax
 21392 0000FB27 C60004                  	mov byte [rax], T_closure
 21393 0000FB2A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21394 0000FB2E 48C74009[3BFB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_013d
 21395 0000FB36 E962010000              	jmp .L_lambda_simple_end_013d
 21396                                  .L_lambda_simple_code_013d:	; lambda-simple body
 21397 0000FB3B 48837C241002            	cmp qword [rsp + 8 * 2], 2
 21398 0000FB41 740B                    	je .L_lambda_simple_arity_check_ok_013d
 21399 0000FB43 FF742410                	push qword [rsp + 8 * 2]
 21400 0000FB47 6A02                    	push 2
 21401 0000FB49 E99F840000              	jmp L_error_incorrect_arity_simple
 21402                                  .L_lambda_simple_arity_check_ok_013d:
 21403 0000FB4E C8000000                	enter 0, 0
 21404                                  	; preparing a non-tail-call
 21405 0000FB52 488B4528                	mov rax, PARAM(1)	; param strs
 21406 0000FB56 50                      	push rax
 21407 0000FB57 6A01                    	push 1	; arg count
 21408 0000FB59 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 21409 0000FB61 803805                  	cmp byte [rax], T_undefined
 21410 0000FB64 0F849D830000            	je L_error_fvar_undefined
 21411 0000FB6A 803804                  	cmp byte [rax], T_closure
 21412 0000FB6D 0F8518840000            	jne L_error_non_closure
 21413 0000FB73 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21414 0000FB76 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21415 0000FB79 483D[02000000]          	cmp rax, sob_boolean_false
 21416 0000FB7F 0F8514010000            	jne .L_or_end_001f
 21417                                  	; preparing a non-tail-call
 21418                                  	; preparing a non-tail-call
 21419 0000FB85 488B4528                	mov rax, PARAM(1)	; param strs
 21420 0000FB89 50                      	push rax
 21421 0000FB8A 6A01                    	push 1	; arg count
 21422 0000FB8C 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 21423 0000FB94 803805                  	cmp byte [rax], T_undefined
 21424 0000FB97 0F846A830000            	je L_error_fvar_undefined
 21425 0000FB9D 803804                  	cmp byte [rax], T_closure
 21426 0000FBA0 0F85E5830000            	jne L_error_non_closure
 21427 0000FBA6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21428 0000FBA9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21429 0000FBAC 50                      	push rax
 21430 0000FBAD 488B4520                	mov rax, PARAM(0)	; param str
 21431 0000FBB1 50                      	push rax
 21432 0000FBB2 6A02                    	push 2	; arg count
 21433 0000FBB4 488B4510                	mov rax, ENV
 21434 0000FBB8 488B4008                	mov rax, qword [rax + 8 * 1]
 21435 0000FBBC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var binary-string<=?
 21436 0000FBBF 803804                  	cmp byte [rax], T_closure
 21437 0000FBC2 0F85C3830000            	jne L_error_non_closure
 21438 0000FBC8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21439 0000FBCB FF5009                  	call SOB_CLOSURE_CODE(rax)
 21440 0000FBCE 483D[02000000]          	cmp rax, sob_boolean_false
 21441 0000FBD4 0F84B5000000            	je .L_if_else_00f9
 21442                                  	; preparing a tail-call
 21443                                  	; preparing a non-tail-call
 21444 0000FBDA 488B4528                	mov rax, PARAM(1)	; param strs
 21445 0000FBDE 50                      	push rax
 21446 0000FBDF 6A01                    	push 1	; arg count
 21447 0000FBE1 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
 21448 0000FBE9 803805                  	cmp byte [rax], T_undefined
 21449 0000FBEC 0F8415830000            	je L_error_fvar_undefined
 21450 0000FBF2 803804                  	cmp byte [rax], T_closure
 21451 0000FBF5 0F8590830000            	jne L_error_non_closure
 21452 0000FBFB FF7001                  	push SOB_CLOSURE_ENV(rax)
 21453 0000FBFE FF5009                  	call SOB_CLOSURE_CODE(rax)
 21454 0000FC01 50                      	push rax
 21455                                  	; preparing a non-tail-call
 21456 0000FC02 488B4528                	mov rax, PARAM(1)	; param strs
 21457 0000FC06 50                      	push rax
 21458 0000FC07 6A01                    	push 1	; arg count
 21459 0000FC09 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 21460 0000FC11 803805                  	cmp byte [rax], T_undefined
 21461 0000FC14 0F84ED820000            	je L_error_fvar_undefined
 21462 0000FC1A 803804                  	cmp byte [rax], T_closure
 21463 0000FC1D 0F8568830000            	jne L_error_non_closure
 21464 0000FC23 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21465 0000FC26 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21466 0000FC29 50                      	push rax
 21467 0000FC2A 6A02                    	push 2	; arg count
 21468 0000FC2C 488B4510                	mov rax, ENV
 21469 0000FC30 488B00                  	mov rax, qword [rax + 8 * 0]
 21470 0000FC33 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 21471 0000FC36 488B00                  	mov rax, qword [rax]
 21472 0000FC39 803804                  	cmp byte [rax], T_closure
 21473 0000FC3C 0F8549830000            	jne L_error_non_closure
 21474 0000FC42 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21475 0000FC45 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21476 0000FC48 FF7500                  	push qword[rbp]
 21477 0000FC4B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21478 0000FC4E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21479 0000FC52 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21480 0000FC56 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21481 0000FC5A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21482 0000FC5D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21483 0000FC60 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21484 0000FC65 4983C103                	add r9, 3 	 ;for getting to the params
 21485 0000FC69 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21486 0000FC6D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21487                                  .L_tc_recycle_frame_loop_01d5:
 21488 0000FC70 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21489 0000FC73 7410                    	je .L_tc_recycle_frame_done_01d5
 21490 0000FC75 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21491 0000FC78 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21492 0000FC7B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21493 0000FC7F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21494 0000FC83 EBEB                    	jmp .L_tc_recycle_frame_loop_01d5
 21495                                  .L_tc_recycle_frame_done_01d5:
 21496 0000FC85 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21497 0000FC86 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21498 0000FC8A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21499 0000FC8D EB0A                    	jmp .L_if_end_00f9
 21500                                  .L_if_else_00f9:
 21501 0000FC8F 48B8-                   	mov rax, L_constants + 2
 21501 0000FC91 [0200000000000000] 
 21502                                  .L_if_end_00f9:
 21503                                  .L_or_end_001f:
 21504 0000FC99 C9                      	leave
 21505 0000FC9A C22000                  	ret AND_KILL_FRAME(2)
 21506                                  .L_lambda_simple_end_013d:	; new closure is in rax
 21507 0000FC9D 50                      	push rax
 21508 0000FC9E 488B4520                	mov rax, PARAM(0)	; param run
 21509 0000FCA2 8F00                    	pop qword [rax]
 21510 0000FCA4 48B8-                   	mov rax, sob_void
 21510 0000FCA6 [0000000000000000] 
 21511                                  
 21512 0000FCAE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21513 0000FCB3 E87C830000              	call malloc
 21514 0000FCB8 50                      	push rax
 21515 0000FCB9 BF08000000              	mov rdi, 8 * 1	; new rib
 21516 0000FCBE E871830000              	call malloc
 21517 0000FCC3 50                      	push rax
 21518 0000FCC4 BF28000000              	mov rdi, 8 * 5	; extended env
 21519 0000FCC9 E866830000              	call malloc
 21520 0000FCCE 488B7D10                	mov rdi, ENV
 21521 0000FCD2 BE00000000              	mov rsi, 0
 21522 0000FCD7 BA01000000              	mov rdx, 1
 21523                                  .L_lambda_opt_env_loop_002a:	; ext_env[i + 1] <-- env[i]
 21524 0000FCDC 4883FE04                	cmp rsi, 4
 21525 0000FCE0 7410                    	je .L_lambda_opt_env_end_002a
 21526 0000FCE2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21527 0000FCE6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21528 0000FCEA 48FFC6                  	inc rsi
 21529 0000FCED 48FFC2                  	inc rdx
 21530 0000FCF0 EBEA                    	jmp .L_lambda_opt_env_loop_002a
 21531                                  .L_lambda_opt_env_end_002a:
 21532 0000FCF2 5B                      	pop rbx
 21533 0000FCF3 BE00000000              	mov rsi, 0
 21534                                  .L_lambda_opt_params_loop_002a:	; copy params
 21535 0000FCF8 4883FE01                	cmp rsi, 1
 21536 0000FCFC 740E                    	je .L_lambda_opt_params_end_002a
 21537 0000FCFE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21538 0000FD03 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21539 0000FD07 48FFC6                  	inc rsi
 21540 0000FD0A EBEC                    	jmp .L_lambda_opt_params_loop_002a
 21541                                  .L_lambda_opt_params_end_002a:
 21542 0000FD0C 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
 21543 0000FD0F 4889C3                  	mov rbx, rax
 21544 0000FD12 58                      	pop rax
 21545 0000FD13 C60004                  	mov byte [rax], T_closure
 21546 0000FD16 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21547 0000FD1A 48C74009[27FD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_002a
 21548 0000FD22 E907020000              	jmp .L_lambda_opt_end_002a
 21549                                  .L_lambda_opt_code_002a:	; lambda-opt body
 21550 0000FD27 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21551 0000FD2D 7411                    	je .L_lambda_opt_arity_check_exact_002a
 21552 0000FD2F 0F8FBF000000            	jg .L_lambda_opt_arity_check_more_002a
 21553 0000FD35 FF742410                	push qword [rsp + 8 * 2]
 21554 0000FD39 6A01                    	push 1
 21555 0000FD3B E9C1820000              	jmp L_error_incorrect_arity_opt
 21556                                  .L_lambda_opt_arity_check_exact_002a:
 21557 0000FD40 4883EC08                	sub rsp, 8
 21558 0000FD44 488B442408              	mov rax, qword[rsp + 8 *1]
 21559 0000FD49 48890424                	mov qword[rsp], rax  
 21560 0000FD4D 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 21561 0000FD52 4889442408              	mov qword[rsp + 8 * 1], rax
 21562 0000FD57 B802000000              	mov rax, 2
 21563 0000FD5C 4889442410              	mov qword[rsp + 8 *2], rax
 21564 0000FD61 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
 21565 0000FD66 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 21566 0000FD6B 48B8-                   	mov rax, sob_nil
 21566 0000FD6D [0100000000000000] 
 21567 0000FD75 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
 21568 0000FD7A C8000000                	enter 0, 0
 21569                                  	; preparing a tail-call
 21570 0000FD7E 488B4528                	mov rax, PARAM(1)	; param strs
 21571 0000FD82 50                      	push rax
 21572 0000FD83 488B4520                	mov rax, PARAM(0)	; param str
 21573 0000FD87 50                      	push rax
 21574 0000FD88 6A02                    	push 2	; arg count
 21575 0000FD8A 488B4510                	mov rax, ENV
 21576 0000FD8E 488B00                  	mov rax, qword [rax + 8 * 0]
 21577 0000FD91 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 21578 0000FD94 488B00                  	mov rax, qword [rax]
 21579 0000FD97 803804                  	cmp byte [rax], T_closure
 21580 0000FD9A 0F85EB810000            	jne L_error_non_closure
 21581 0000FDA0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21582 0000FDA3 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21583 0000FDA6 FF7500                  	push qword[rbp]
 21584 0000FDA9 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21585 0000FDAC 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21586 0000FDB0 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21587 0000FDB4 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21588 0000FDB8 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21589 0000FDBB 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21590 0000FDBE 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21591 0000FDC3 4983C103                	add r9, 3 	 ;for getting to the params
 21592 0000FDC7 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21593 0000FDCB 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21594                                  .L_tc_recycle_frame_loop_01d7:
 21595 0000FDCE 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21596 0000FDD1 7410                    	je .L_tc_recycle_frame_done_01d7
 21597 0000FDD3 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21598 0000FDD6 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21599 0000FDD9 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21600 0000FDDD 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21601 0000FDE1 EBEB                    	jmp .L_tc_recycle_frame_loop_01d7
 21602                                  .L_tc_recycle_frame_done_01d7:
 21603 0000FDE3 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21604 0000FDE4 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21605 0000FDE8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21606 0000FDEB C9                      	leave
 21607 0000FDEC C22000                  	ret AND_KILL_FRAME(2)
 21608 0000FDEF E93A010000              	jmp .L_lambda_opt_end_002a	; new closure is in rax
 21609                                  .L_lambda_opt_arity_check_more_002a:
 21610 0000FDF4 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 21611 0000FDF9 49B9-                   	mov r9, sob_nil
 21611 0000FDFB [0100000000000000] 
 21612 0000FE03 4889E3                  	mov rbx, rsp 
 21613 0000FE06 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 21614 0000FE0A 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 21615 0000FE0D 49C1E003                	shl r8, 3
 21616 0000FE11 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 21617 0000FE14 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 21618                                  .L_lambda_opt_stack_shrink_loop_002a:
 21619 0000FE19 4983F801                	cmp r8, 1
 21620 0000FE1D 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_002a
 21621 0000FE1F BF11000000              	mov rdi, 1+8+8 ;for pair
 21622 0000FE24 E80B820000              	call malloc;to create the pair in the stack
 21623 0000FE29 C60021                  	mov byte [rax], T_pair ; to make it a pair
 21624 0000FE2C 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
 21625 0000FE2F 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 21626 0000FE33 4C894809                 	mov qword[rax+1+8],r9
 21627 0000FE37 4989C1                  	mov r9, rax ;for the recursion 
 21628 0000FE3A 49FFC8                  	dec r8 ;we finished copy another opt param to the list
 21629 0000FE3D 4883EB08                	sub rbx, 8 ;to get the next param to copy
 21630 0000FE41 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_002a
 21631                                  .L_lambda_opt_stack_shrink_loop_exit_002a:
 21632 0000FE43 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
 21633 0000FE48 4883E902                	sub rcx, 2
 21634 0000FE4C 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
 21635 0000FE50 4801CC                  	add rsp, rcx ;shrinking the stack
 21636 0000FE53 4889E0                  	mov rax, rsp
 21637 0000FE56 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
 21638 0000FE59 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
 21639 0000FE5D 49FFC8                  	dec r8 ;we start with param 0, not 1 
 21640 0000FE60 4883C018                	add rax, 3 * 8;now rax is param 0
 21641 0000FE64 49C1E003                	shl r8, 3;convert to byte
 21642 0000FE68 4C01C0                  	add rax, r8;now rax is the top of the stack
 21643 0000FE6B 4C8908                  	mov qword[rax], r9;puting the list at the top
 21644 0000FE6E 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
 21645 0000FE72 4889E3                  	mov rbx, rsp 
 21646 0000FE75 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
 21647 0000FE78 41BA01000000            	mov r10, 1;r10 is the not opt params length
 21648 0000FE7E 49FFCA                  	dec r10 
 21649 0000FE81 49C1E203                	shl r10, 3;to get bytes
 21650 0000FE85 4883C318                	add rbx, 3*8;rbx is the first param
 21651 0000FE89 4C01D3                  	add rbx, r10; rbx is where the address to copy to
 21652 0000FE8C 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
 21653 0000FE8F 4C8900                  	mov qword[rax], r8
 21654 0000FE92 4883E808                	sub rax, 8
 21655 0000FE96 4883EB08                	sub rbx, 8
 21656 0000FE9A 4889E0                  	mov rax, rsp
 21657 0000FE9D 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 21658 0000FEA0 48C744241002000000      	mov qword [rsp+2*8], 2
 21659 0000FEA9 488B5808                	mov rbx, qword[rax + 8 *1]
 21660 0000FEAD 48895C2408              	mov qword [rsp + 1*8] ,rbx
 21661 0000FEB2 488B18                  	mov rbx, qword[rax]
 21662 0000FEB5 48891C24                	mov qword [rsp], rbx
 21663 0000FEB9 C8000000                	enter 0, 0
 21664                                  	; preparing a tail-call
 21665 0000FEBD 488B4528                	mov rax, PARAM(1)	; param strs
 21666 0000FEC1 50                      	push rax
 21667 0000FEC2 488B4520                	mov rax, PARAM(0)	; param str
 21668 0000FEC6 50                      	push rax
 21669 0000FEC7 6A02                    	push 2	; arg count
 21670 0000FEC9 488B4510                	mov rax, ENV
 21671 0000FECD 488B00                  	mov rax, qword [rax + 8 * 0]
 21672 0000FED0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 21673 0000FED3 488B00                  	mov rax, qword [rax]
 21674 0000FED6 803804                  	cmp byte [rax], T_closure
 21675 0000FED9 0F85AC800000            	jne L_error_non_closure
 21676 0000FEDF FF7001                  	push SOB_CLOSURE_ENV(rax)
 21677 0000FEE2 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21678 0000FEE5 FF7500                  	push qword[rbp]
 21679 0000FEE8 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21680 0000FEEB 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21681 0000FEEF 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21682 0000FEF3 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21683 0000FEF7 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21684 0000FEFA 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21685 0000FEFD 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21686 0000FF02 4983C103                	add r9, 3 	 ;for getting to the params
 21687 0000FF06 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21688 0000FF0A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21689                                  .L_tc_recycle_frame_loop_01d6:
 21690 0000FF0D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21691 0000FF10 7410                    	je .L_tc_recycle_frame_done_01d6
 21692 0000FF12 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21693 0000FF15 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21694 0000FF18 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21695 0000FF1C 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21696 0000FF20 EBEB                    	jmp .L_tc_recycle_frame_loop_01d6
 21697                                  .L_tc_recycle_frame_done_01d6:
 21698 0000FF22 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21699 0000FF23 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21700 0000FF27 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21701 0000FF2A C9                      	leave
 21702 0000FF2B C22000                  	ret AND_KILL_FRAME(2)
 21703                                  .L_lambda_opt_end_002a:	; new closure is in rax
 21704 0000FF2E C9                      	leave
 21705 0000FF2F C21800                  	ret AND_KILL_FRAME(1)
 21706                                  .L_lambda_simple_end_013c:	; new closure is in rax
 21707 0000FF32 803804                  	cmp byte [rax], T_closure
 21708 0000FF35 0F8550800000            	jne L_error_non_closure
 21709 0000FF3B FF7001                  	push SOB_CLOSURE_ENV(rax)
 21710 0000FF3E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21711 0000FF41 FF7500                  	push qword[rbp]
 21712 0000FF44 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21713 0000FF47 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21714 0000FF4B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21715 0000FF4F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21716 0000FF53 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21717 0000FF56 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21718 0000FF59 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21719 0000FF5E 4983C103                	add r9, 3 	 ;for getting to the params
 21720 0000FF62 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21721 0000FF66 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21722                                  .L_tc_recycle_frame_loop_01d8:
 21723 0000FF69 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21724 0000FF6C 7410                    	je .L_tc_recycle_frame_done_01d8
 21725 0000FF6E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21726 0000FF71 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21727 0000FF74 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21728 0000FF78 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21729 0000FF7C EBEB                    	jmp .L_tc_recycle_frame_loop_01d8
 21730                                  .L_tc_recycle_frame_done_01d8:
 21731 0000FF7E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21732 0000FF7F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21733 0000FF83 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21734 0000FF86 C9                      	leave
 21735 0000FF87 C21800                  	ret AND_KILL_FRAME(1)
 21736                                  .L_lambda_simple_end_013b:	; new closure is in rax
 21737 0000FF8A 803804                  	cmp byte [rax], T_closure
 21738 0000FF8D 0F85F87F0000            	jne L_error_non_closure
 21739 0000FF93 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21740 0000FF96 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21741 0000FF99 FF7500                  	push qword[rbp]
 21742 0000FF9C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21743 0000FF9F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21744 0000FFA3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21745 0000FFA7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21746 0000FFAB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21747 0000FFAE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21748 0000FFB1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21749 0000FFB6 4983C103                	add r9, 3 	 ;for getting to the params
 21750 0000FFBA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21751 0000FFBE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21752                                  .L_tc_recycle_frame_loop_01d9:
 21753 0000FFC1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21754 0000FFC4 7410                    	je .L_tc_recycle_frame_done_01d9
 21755 0000FFC6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21756 0000FFC9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21757 0000FFCC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21758 0000FFD0 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21759 0000FFD4 EBEB                    	jmp .L_tc_recycle_frame_loop_01d9
 21760                                  .L_tc_recycle_frame_done_01d9:
 21761 0000FFD6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21762 0000FFD7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21763 0000FFDB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21764 0000FFDE C9                      	leave
 21765 0000FFDF C21800                  	ret AND_KILL_FRAME(1)
 21766                                  .L_lambda_simple_end_0137:	; new closure is in rax
 21767 0000FFE2 803804                  	cmp byte [rax], T_closure
 21768 0000FFE5 0F85A07F0000            	jne L_error_non_closure
 21769 0000FFEB FF7001                  	push SOB_CLOSURE_ENV(rax)
 21770 0000FFEE FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21771 0000FFF1 FF7500                  	push qword[rbp]
 21772 0000FFF4 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21773 0000FFF7 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21774 0000FFFB 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21775 0000FFFF 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21776 00010003 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21777 00010006 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21778 00010009 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21779 0001000E 4983C103                	add r9, 3 	 ;for getting to the params
 21780 00010012 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21781 00010016 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21782                                  .L_tc_recycle_frame_loop_01da:
 21783 00010019 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21784 0001001C 7410                    	je .L_tc_recycle_frame_done_01da
 21785 0001001E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21786 00010021 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21787 00010024 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21788 00010028 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21789 0001002C EBEB                    	jmp .L_tc_recycle_frame_loop_01da
 21790                                  .L_tc_recycle_frame_done_01da:
 21791 0001002E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21792 0001002F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21793 00010033 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21794 00010036 C9                      	leave
 21795 00010037 C22000                  	ret AND_KILL_FRAME(2)
 21796                                  .L_lambda_simple_end_0136:	; new closure is in rax
 21797 0001003A 50                      	push rax
 21798 0001003B 6A01                    	push 1	; arg count
 21799 0001003D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21800 00010042 E8ED7F0000              	call malloc
 21801 00010047 50                      	push rax
 21802 00010048 BF00000000              	mov rdi, 8 * 0	; new rib
 21803 0001004D E8E27F0000              	call malloc
 21804 00010052 50                      	push rax
 21805 00010053 BF08000000              	mov rdi, 8 * 1	; extended env
 21806 00010058 E8D77F0000              	call malloc
 21807 0001005D 488B7D10                	mov rdi, ENV
 21808 00010061 BE00000000              	mov rsi, 0
 21809 00010066 BA01000000              	mov rdx, 1
 21810                                  .L_lambda_simple_env_loop_013e:	; ext_env[i + 1] <-- env[i]
 21811 0001006B 4883FE00                	cmp rsi, 0
 21812 0001006F 7410                    	je .L_lambda_simple_env_end_013e
 21813 00010071 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21814 00010075 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21815 00010079 48FFC6                  	inc rsi
 21816 0001007C 48FFC2                  	inc rdx
 21817 0001007F EBEA                    	jmp .L_lambda_simple_env_loop_013e
 21818                                  .L_lambda_simple_env_end_013e:
 21819 00010081 5B                      	pop rbx
 21820 00010082 BE00000000              	mov rsi, 0
 21821                                  .L_lambda_simple_params_loop_013e:	; copy params
 21822 00010087 4883FE00                	cmp rsi, 0
 21823 0001008B 740E                    	je .L_lambda_simple_params_end_013e
 21824 0001008D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21825 00010092 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21826 00010096 48FFC6                  	inc rsi
 21827 00010099 EBEC                    	jmp .L_lambda_simple_params_loop_013e
 21828                                  .L_lambda_simple_params_end_013e:
 21829 0001009B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21830 0001009E 4889C3                  	mov rbx, rax
 21831 000100A1 58                      	pop rax
 21832 000100A2 C60004                  	mov byte [rax], T_closure
 21833 000100A5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21834 000100A9 48C74009[B6000100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_013e
 21835 000100B1 E947010000              	jmp .L_lambda_simple_end_013e
 21836                                  .L_lambda_simple_code_013e:	; lambda-simple body
 21837 000100B6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21838 000100BC 740B                    	je .L_lambda_simple_arity_check_ok_013e
 21839 000100BE FF742410                	push qword [rsp + 8 * 2]
 21840 000100C2 6A01                    	push 1
 21841 000100C4 E9247F0000              	jmp L_error_incorrect_arity_simple
 21842                                  .L_lambda_simple_arity_check_ok_013e:
 21843 000100C9 C8000000                	enter 0, 0
 21844                                  	; preparing a non-tail-call
 21845 000100CD 488B0425[D2120000]      	mov rax, qword [free_var_75]	; free var char=?
 21846 000100D5 803805                  	cmp byte [rax], T_undefined
 21847 000100D8 0F84297E0000            	je L_error_fvar_undefined
 21848 000100DE 50                      	push rax
 21849 000100DF 488B0425[C1120000]      	mov rax, qword [free_var_74]	; free var char<?
 21850 000100E7 803805                  	cmp byte [rax], T_undefined
 21851 000100EA 0F84177E0000            	je L_error_fvar_undefined
 21852 000100F0 50                      	push rax
 21853 000100F1 6A02                    	push 2	; arg count
 21854 000100F3 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 21855 000100F7 803804                  	cmp byte [rax], T_closure
 21856 000100FA 0F858B7E0000            	jne L_error_non_closure
 21857 00010100 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21858 00010103 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21859 00010106 48890425[AC160000]      	mov qword [free_var_133], rax
 21860 0001010E 48B8-                   	mov rax, sob_void
 21860 00010110 [0000000000000000] 
 21861                                  
 21862                                  	; preparing a non-tail-call
 21863 00010118 488B0425[5B120000]      	mov rax, qword [free_var_68]	; free var char-ci=?
 21864 00010120 803805                  	cmp byte [rax], T_undefined
 21865 00010123 0F84DE7D0000            	je L_error_fvar_undefined
 21866 00010129 50                      	push rax
 21867 0001012A 488B0425[4A120000]      	mov rax, qword [free_var_67]	; free var char-ci<?
 21868 00010132 803805                  	cmp byte [rax], T_undefined
 21869 00010135 0F84CC7D0000            	je L_error_fvar_undefined
 21870 0001013B 50                      	push rax
 21871 0001013C 6A02                    	push 2	; arg count
 21872 0001013E 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 21873 00010142 803804                  	cmp byte [rax], T_closure
 21874 00010145 0F85407E0000            	jne L_error_non_closure
 21875 0001014B FF7001                  	push SOB_CLOSURE_ENV(rax)
 21876 0001014E FF5009                  	call SOB_CLOSURE_CODE(rax)
 21877 00010151 48890425[E0150000]      	mov qword [free_var_121], rax
 21878 00010159 48B8-                   	mov rax, sob_void
 21878 0001015B [0000000000000000] 
 21879                                  
 21880                                  	; preparing a non-tail-call
 21881 00010163 488B0425[D2120000]      	mov rax, qword [free_var_75]	; free var char=?
 21882 0001016B 803805                  	cmp byte [rax], T_undefined
 21883 0001016E 0F84937D0000            	je L_error_fvar_undefined
 21884 00010174 50                      	push rax
 21885 00010175 488B0425[F4120000]      	mov rax, qword [free_var_77]	; free var char>?
 21886 0001017D 803805                  	cmp byte [rax], T_undefined
 21887 00010180 0F84817D0000            	je L_error_fvar_undefined
 21888 00010186 50                      	push rax
 21889 00010187 6A02                    	push 2	; arg count
 21890 00010189 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 21891 0001018D 803804                  	cmp byte [rax], T_closure
 21892 00010190 0F85F57D0000            	jne L_error_non_closure
 21893 00010196 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21894 00010199 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21895 0001019C 48890425[DF160000]      	mov qword [free_var_136], rax
 21896 000101A4 48B8-                   	mov rax, sob_void
 21896 000101A6 [0000000000000000] 
 21897                                  
 21898                                  	; preparing a non-tail-call
 21899 000101AE 488B0425[5B120000]      	mov rax, qword [free_var_68]	; free var char-ci=?
 21900 000101B6 803805                  	cmp byte [rax], T_undefined
 21901 000101B9 0F84487D0000            	je L_error_fvar_undefined
 21902 000101BF 50                      	push rax
 21903 000101C0 488B0425[7D120000]      	mov rax, qword [free_var_70]	; free var char-ci>?
 21904 000101C8 803805                  	cmp byte [rax], T_undefined
 21905 000101CB 0F84367D0000            	je L_error_fvar_undefined
 21906 000101D1 50                      	push rax
 21907 000101D2 6A02                    	push 2	; arg count
 21908 000101D4 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 21909 000101D8 803804                  	cmp byte [rax], T_closure
 21910 000101DB 0F85AA7D0000            	jne L_error_non_closure
 21911 000101E1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21912 000101E4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21913 000101E7 48890425[13160000]      	mov qword [free_var_124], rax
 21914 000101EF 48B8-                   	mov rax, sob_void
 21914 000101F1 [0000000000000000] 
 21915 000101F9 C9                      	leave
 21916 000101FA C21800                  	ret AND_KILL_FRAME(1)
 21917                                  .L_lambda_simple_end_013e:	; new closure is in rax
 21918 000101FD 803804                  	cmp byte [rax], T_closure
 21919 00010200 0F85857D0000            	jne L_error_non_closure
 21920 00010206 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21921 00010209 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21922                                  
 21923 0001020C 4889C7                  	mov rdi, rax
 21924 0001020F E875800000              	call print_sexpr_if_not_void
 21925                                  	; preparing a non-tail-call
 21926 00010214 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21927 00010219 E8167E0000              	call malloc
 21928 0001021E 50                      	push rax
 21929 0001021F BF00000000              	mov rdi, 8 * 0	; new rib
 21930 00010224 E80B7E0000              	call malloc
 21931 00010229 50                      	push rax
 21932 0001022A BF08000000              	mov rdi, 8 * 1	; extended env
 21933 0001022F E8007E0000              	call malloc
 21934 00010234 488B7D10                	mov rdi, ENV
 21935 00010238 BE00000000              	mov rsi, 0
 21936 0001023D BA01000000              	mov rdx, 1
 21937                                  .L_lambda_simple_env_loop_013f:	; ext_env[i + 1] <-- env[i]
 21938 00010242 4883FE00                	cmp rsi, 0
 21939 00010246 7410                    	je .L_lambda_simple_env_end_013f
 21940 00010248 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21941 0001024C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21942 00010250 48FFC6                  	inc rsi
 21943 00010253 48FFC2                  	inc rdx
 21944 00010256 EBEA                    	jmp .L_lambda_simple_env_loop_013f
 21945                                  .L_lambda_simple_env_end_013f:
 21946 00010258 5B                      	pop rbx
 21947 00010259 BE00000000              	mov rsi, 0
 21948                                  .L_lambda_simple_params_loop_013f:	; copy params
 21949 0001025E 4883FE00                	cmp rsi, 0
 21950 00010262 740E                    	je .L_lambda_simple_params_end_013f
 21951 00010264 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21952 00010269 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21953 0001026D 48FFC6                  	inc rsi
 21954 00010270 EBEC                    	jmp .L_lambda_simple_params_loop_013f
 21955                                  .L_lambda_simple_params_end_013f:
 21956 00010272 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21957 00010275 4889C3                  	mov rbx, rax
 21958 00010278 58                      	pop rax
 21959 00010279 C60004                  	mov byte [rax], T_closure
 21960 0001027C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21961 00010280 48C74009[8D020100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_013f
 21962 00010288 E98B0C0000              	jmp .L_lambda_simple_end_013f
 21963                                  .L_lambda_simple_code_013f:	; lambda-simple body
 21964 0001028D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21965 00010293 740B                    	je .L_lambda_simple_arity_check_ok_013f
 21966 00010295 FF742410                	push qword [rsp + 8 * 2]
 21967 00010299 6A01                    	push 1
 21968 0001029B E94D7D0000              	jmp L_error_incorrect_arity_simple
 21969                                  .L_lambda_simple_arity_check_ok_013f:
 21970 000102A0 C8000000                	enter 0, 0
 21971                                  	; preparing a tail-call
 21972 000102A4 48B8-                   	mov rax, L_constants + 1993
 21972 000102A6 [C907000000000000] 
 21973 000102AE 50                      	push rax
 21974 000102AF 6A01                    	push 1	; arg count
 21975 000102B1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21976 000102B6 E8797D0000              	call malloc
 21977 000102BB 50                      	push rax
 21978 000102BC BF08000000              	mov rdi, 8 * 1	; new rib
 21979 000102C1 E86E7D0000              	call malloc
 21980 000102C6 50                      	push rax
 21981 000102C7 BF10000000              	mov rdi, 8 * 2	; extended env
 21982 000102CC E8637D0000              	call malloc
 21983 000102D1 488B7D10                	mov rdi, ENV
 21984 000102D5 BE00000000              	mov rsi, 0
 21985 000102DA BA01000000              	mov rdx, 1
 21986                                  .L_lambda_simple_env_loop_0140:	; ext_env[i + 1] <-- env[i]
 21987 000102DF 4883FE01                	cmp rsi, 1
 21988 000102E3 7410                    	je .L_lambda_simple_env_end_0140
 21989 000102E5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21990 000102E9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21991 000102ED 48FFC6                  	inc rsi
 21992 000102F0 48FFC2                  	inc rdx
 21993 000102F3 EBEA                    	jmp .L_lambda_simple_env_loop_0140
 21994                                  .L_lambda_simple_env_end_0140:
 21995 000102F5 5B                      	pop rbx
 21996 000102F6 BE00000000              	mov rsi, 0
 21997                                  .L_lambda_simple_params_loop_0140:	; copy params
 21998 000102FB 4883FE01                	cmp rsi, 1
 21999 000102FF 740E                    	je .L_lambda_simple_params_end_0140
 22000 00010301 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22001 00010306 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22002 0001030A 48FFC6                  	inc rsi
 22003 0001030D EBEC                    	jmp .L_lambda_simple_params_loop_0140
 22004                                  .L_lambda_simple_params_end_0140:
 22005 0001030F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22006 00010312 4889C3                  	mov rbx, rax
 22007 00010315 58                      	pop rax
 22008 00010316 C60004                  	mov byte [rax], T_closure
 22009 00010319 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22010 0001031D 48C74009[2A030100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0140
 22011 00010325 E9960B0000              	jmp .L_lambda_simple_end_0140
 22012                                  .L_lambda_simple_code_0140:	; lambda-simple body
 22013 0001032A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22014 00010330 740B                    	je .L_lambda_simple_arity_check_ok_0140
 22015 00010332 FF742410                	push qword [rsp + 8 * 2]
 22016 00010336 6A01                    	push 1
 22017 00010338 E9B07C0000              	jmp L_error_incorrect_arity_simple
 22018                                  .L_lambda_simple_arity_check_ok_0140:
 22019 0001033D C8000000                	enter 0, 0
 22020 00010341 BF08000000              	mov rdi, 8*1
 22021 00010346 E8E97C0000              	call malloc
 22022 0001034B 488B5D20                	mov rbx, PARAM(0)
 22023 0001034F 488918                  	mov qword[rax], rbx
 22024 00010352 48894520                	mov PARAM(0), rax
 22025 00010356 48B8-                   	mov rax, sob_void
 22025 00010358 [0000000000000000] 
 22026                                  
 22027 00010360 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22028 00010365 E8CA7C0000              	call malloc
 22029 0001036A 50                      	push rax
 22030 0001036B BF08000000              	mov rdi, 8 * 1	; new rib
 22031 00010370 E8BF7C0000              	call malloc
 22032 00010375 50                      	push rax
 22033 00010376 BF18000000              	mov rdi, 8 * 3	; extended env
 22034 0001037B E8B47C0000              	call malloc
 22035 00010380 488B7D10                	mov rdi, ENV
 22036 00010384 BE00000000              	mov rsi, 0
 22037 00010389 BA01000000              	mov rdx, 1
 22038                                  .L_lambda_simple_env_loop_0141:	; ext_env[i + 1] <-- env[i]
 22039 0001038E 4883FE02                	cmp rsi, 2
 22040 00010392 7410                    	je .L_lambda_simple_env_end_0141
 22041 00010394 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22042 00010398 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22043 0001039C 48FFC6                  	inc rsi
 22044 0001039F 48FFC2                  	inc rdx
 22045 000103A2 EBEA                    	jmp .L_lambda_simple_env_loop_0141
 22046                                  .L_lambda_simple_env_end_0141:
 22047 000103A4 5B                      	pop rbx
 22048 000103A5 BE00000000              	mov rsi, 0
 22049                                  .L_lambda_simple_params_loop_0141:	; copy params
 22050 000103AA 4883FE01                	cmp rsi, 1
 22051 000103AE 740E                    	je .L_lambda_simple_params_end_0141
 22052 000103B0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22053 000103B5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22054 000103B9 48FFC6                  	inc rsi
 22055 000103BC EBEC                    	jmp .L_lambda_simple_params_loop_0141
 22056                                  .L_lambda_simple_params_end_0141:
 22057 000103BE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22058 000103C1 4889C3                  	mov rbx, rax
 22059 000103C4 58                      	pop rax
 22060 000103C5 C60004                  	mov byte [rax], T_closure
 22061 000103C8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22062 000103CC 48C74009[D9030100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0141
 22063 000103D4 E9CA010000              	jmp .L_lambda_simple_end_0141
 22064                                  .L_lambda_simple_code_0141:	; lambda-simple body
 22065 000103D9 48837C241004            	cmp qword [rsp + 8 * 2], 4
 22066 000103DF 740B                    	je .L_lambda_simple_arity_check_ok_0141
 22067 000103E1 FF742410                	push qword [rsp + 8 * 2]
 22068 000103E5 6A04                    	push 4
 22069 000103E7 E9017C0000              	jmp L_error_incorrect_arity_simple
 22070                                  .L_lambda_simple_arity_check_ok_0141:
 22071 000103EC C8000000                	enter 0, 0
 22072                                  	; preparing a non-tail-call
 22073 000103F0 488B4538                	mov rax, PARAM(3)	; param len
 22074 000103F4 50                      	push rax
 22075 000103F5 488B4520                	mov rax, PARAM(0)	; param i
 22076 000103F9 50                      	push rax
 22077 000103FA 6A02                    	push 2	; arg count
 22078 000103FC 488B0425[3D0E0000]      	mov rax, qword [free_var_6]	; free var =
 22079 00010404 803805                  	cmp byte [rax], T_undefined
 22080 00010407 0F84FA7A0000            	je L_error_fvar_undefined
 22081 0001040D 803804                  	cmp byte [rax], T_closure
 22082 00010410 0F85757B0000            	jne L_error_non_closure
 22083 00010416 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22084 00010419 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22085 0001041C 483D[02000000]          	cmp rax, sob_boolean_false
 22086 00010422 0F8577010000            	jne .L_or_end_0020
 22087                                  	; preparing a non-tail-call
 22088 00010428 488B4538                	mov rax, PARAM(3)	; param len
 22089 0001042C 50                      	push rax
 22090 0001042D 488B4520                	mov rax, PARAM(0)	; param i
 22091 00010431 50                      	push rax
 22092 00010432 6A02                    	push 2	; arg count
 22093 00010434 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 22094 0001043C 803805                  	cmp byte [rax], T_undefined
 22095 0001043F 0F84C27A0000            	je L_error_fvar_undefined
 22096 00010445 803804                  	cmp byte [rax], T_closure
 22097 00010448 0F853D7B0000            	jne L_error_non_closure
 22098 0001044E FF7001                  	push SOB_CLOSURE_ENV(rax)
 22099 00010451 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22100 00010454 483D[02000000]          	cmp rax, sob_boolean_false
 22101 0001045A 0F8435010000            	je .L_if_else_00fb
 22102                                  	; preparing a non-tail-call
 22103                                  	; preparing a non-tail-call
 22104 00010460 488B4520                	mov rax, PARAM(0)	; param i
 22105 00010464 50                      	push rax
 22106 00010465 488B4530                	mov rax, PARAM(2)	; param str2
 22107 00010469 50                      	push rax
 22108 0001046A 6A02                    	push 2	; arg count
 22109 0001046C 488B0425[57160000]      	mov rax, qword [free_var_128]	; free var string-ref
 22110 00010474 803805                  	cmp byte [rax], T_undefined
 22111 00010477 0F848A7A0000            	je L_error_fvar_undefined
 22112 0001047D 803804                  	cmp byte [rax], T_closure
 22113 00010480 0F85057B0000            	jne L_error_non_closure
 22114 00010486 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22115 00010489 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22116 0001048C 50                      	push rax
 22117                                  	; preparing a non-tail-call
 22118 0001048D 488B4520                	mov rax, PARAM(0)	; param i
 22119 00010491 50                      	push rax
 22120 00010492 488B4528                	mov rax, PARAM(1)	; param str1
 22121 00010496 50                      	push rax
 22122 00010497 6A02                    	push 2	; arg count
 22123 00010499 488B0425[57160000]      	mov rax, qword [free_var_128]	; free var string-ref
 22124 000104A1 803805                  	cmp byte [rax], T_undefined
 22125 000104A4 0F845D7A0000            	je L_error_fvar_undefined
 22126 000104AA 803804                  	cmp byte [rax], T_closure
 22127 000104AD 0F85D87A0000            	jne L_error_non_closure
 22128 000104B3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22129 000104B6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22130 000104B9 50                      	push rax
 22131 000104BA 6A02                    	push 2	; arg count
 22132 000104BC 488B4510                	mov rax, ENV
 22133 000104C0 488B4008                	mov rax, qword [rax + 8 * 1]
 22134 000104C4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char=?
 22135 000104C7 803804                  	cmp byte [rax], T_closure
 22136 000104CA 0F85BB7A0000            	jne L_error_non_closure
 22137 000104D0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22138 000104D3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22139 000104D6 483D[02000000]          	cmp rax, sob_boolean_false
 22140 000104DC 0F84A7000000            	je .L_if_else_00fa
 22141                                  	; preparing a tail-call
 22142 000104E2 488B4538                	mov rax, PARAM(3)	; param len
 22143 000104E6 50                      	push rax
 22144 000104E7 488B4530                	mov rax, PARAM(2)	; param str2
 22145 000104EB 50                      	push rax
 22146 000104EC 488B4528                	mov rax, PARAM(1)	; param str1
 22147 000104F0 50                      	push rax
 22148                                  	; preparing a non-tail-call
 22149 000104F1 48B8-                   	mov rax, L_constants + 2270
 22149 000104F3 [DE08000000000000] 
 22150 000104FB 50                      	push rax
 22151 000104FC 488B4520                	mov rax, PARAM(0)	; param i
 22152 00010500 50                      	push rax
 22153 00010501 6A02                    	push 2	; arg count
 22154 00010503 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 22155 0001050B 803805                  	cmp byte [rax], T_undefined
 22156 0001050E 0F84F3790000            	je L_error_fvar_undefined
 22157 00010514 803804                  	cmp byte [rax], T_closure
 22158 00010517 0F856E7A0000            	jne L_error_non_closure
 22159 0001051D FF7001                  	push SOB_CLOSURE_ENV(rax)
 22160 00010520 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22161 00010523 50                      	push rax
 22162 00010524 6A04                    	push 4	; arg count
 22163 00010526 488B4510                	mov rax, ENV
 22164 0001052A 488B00                  	mov rax, qword [rax + 8 * 0]
 22165 0001052D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 22166 00010530 488B00                  	mov rax, qword [rax]
 22167 00010533 803804                  	cmp byte [rax], T_closure
 22168 00010536 0F854F7A0000            	jne L_error_non_closure
 22169 0001053C FF7001                  	push SOB_CLOSURE_ENV(rax)
 22170 0001053F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22171 00010542 FF7500                  	push qword[rbp]
 22172 00010545 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22173 00010548 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22174 0001054C 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22175 00010550 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22176 00010554 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22177 00010557 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22178 0001055A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22179 0001055F 4983C103                	add r9, 3 	 ;for getting to the params
 22180 00010563 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22181 00010567 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22182                                  .L_tc_recycle_frame_loop_01db:
 22183 0001056A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22184 0001056D 7410                    	je .L_tc_recycle_frame_done_01db
 22185 0001056F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22186 00010572 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22187 00010575 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22188 00010579 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22189 0001057D EBEB                    	jmp .L_tc_recycle_frame_loop_01db
 22190                                  .L_tc_recycle_frame_done_01db:
 22191 0001057F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22192 00010580 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22193 00010584 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22194 00010587 EB0A                    	jmp .L_if_end_00fa
 22195                                  .L_if_else_00fa:
 22196 00010589 48B8-                   	mov rax, L_constants + 2
 22196 0001058B [0200000000000000] 
 22197                                  .L_if_end_00fa:
 22198 00010593 EB0A                    	jmp .L_if_end_00fb
 22199                                  .L_if_else_00fb:
 22200 00010595 48B8-                   	mov rax, L_constants + 2
 22200 00010597 [0200000000000000] 
 22201                                  .L_if_end_00fb:
 22202                                  .L_or_end_0020:
 22203 0001059F C9                      	leave
 22204 000105A0 C23000                  	ret AND_KILL_FRAME(4)
 22205                                  .L_lambda_simple_end_0141:	; new closure is in rax
 22206 000105A3 50                      	push rax
 22207 000105A4 488B4520                	mov rax, PARAM(0)	; param run
 22208 000105A8 8F00                    	pop qword [rax]
 22209 000105AA 48B8-                   	mov rax, sob_void
 22209 000105AC [0000000000000000] 
 22210                                  
 22211                                  	; preparing a tail-call
 22212 000105B4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22213 000105B9 E8767A0000              	call malloc
 22214 000105BE 50                      	push rax
 22215 000105BF BF08000000              	mov rdi, 8 * 1	; new rib
 22216 000105C4 E86B7A0000              	call malloc
 22217 000105C9 50                      	push rax
 22218 000105CA BF18000000              	mov rdi, 8 * 3	; extended env
 22219 000105CF E8607A0000              	call malloc
 22220 000105D4 488B7D10                	mov rdi, ENV
 22221 000105D8 BE00000000              	mov rsi, 0
 22222 000105DD BA01000000              	mov rdx, 1
 22223                                  .L_lambda_simple_env_loop_0142:	; ext_env[i + 1] <-- env[i]
 22224 000105E2 4883FE02                	cmp rsi, 2
 22225 000105E6 7410                    	je .L_lambda_simple_env_end_0142
 22226 000105E8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22227 000105EC 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22228 000105F0 48FFC6                  	inc rsi
 22229 000105F3 48FFC2                  	inc rdx
 22230 000105F6 EBEA                    	jmp .L_lambda_simple_env_loop_0142
 22231                                  .L_lambda_simple_env_end_0142:
 22232 000105F8 5B                      	pop rbx
 22233 000105F9 BE00000000              	mov rsi, 0
 22234                                  .L_lambda_simple_params_loop_0142:	; copy params
 22235 000105FE 4883FE01                	cmp rsi, 1
 22236 00010602 740E                    	je .L_lambda_simple_params_end_0142
 22237 00010604 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22238 00010609 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22239 0001060D 48FFC6                  	inc rsi
 22240 00010610 EBEC                    	jmp .L_lambda_simple_params_loop_0142
 22241                                  .L_lambda_simple_params_end_0142:
 22242 00010612 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22243 00010615 4889C3                  	mov rbx, rax
 22244 00010618 58                      	pop rax
 22245 00010619 C60004                  	mov byte [rax], T_closure
 22246 0001061C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22247 00010620 48C74009[2D060100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0142
 22248 00010628 E924020000              	jmp .L_lambda_simple_end_0142
 22249                                  .L_lambda_simple_code_0142:	; lambda-simple body
 22250 0001062D 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22251 00010633 740B                    	je .L_lambda_simple_arity_check_ok_0142
 22252 00010635 FF742410                	push qword [rsp + 8 * 2]
 22253 00010639 6A02                    	push 2
 22254 0001063B E9AD790000              	jmp L_error_incorrect_arity_simple
 22255                                  .L_lambda_simple_arity_check_ok_0142:
 22256 00010640 C8000000                	enter 0, 0
 22257                                  	; preparing a tail-call
 22258                                  	; preparing a non-tail-call
 22259 00010644 488B4528                	mov rax, PARAM(1)	; param str2
 22260 00010648 50                      	push rax
 22261 00010649 6A01                    	push 1	; arg count
 22262 0001064B 488B0425[46160000]      	mov rax, qword [free_var_127]	; free var string-length
 22263 00010653 803805                  	cmp byte [rax], T_undefined
 22264 00010656 0F84AB780000            	je L_error_fvar_undefined
 22265 0001065C 803804                  	cmp byte [rax], T_closure
 22266 0001065F 0F8526790000            	jne L_error_non_closure
 22267 00010665 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22268 00010668 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22269 0001066B 50                      	push rax
 22270                                  	; preparing a non-tail-call
 22271 0001066C 488B4520                	mov rax, PARAM(0)	; param str1
 22272 00010670 50                      	push rax
 22273 00010671 6A01                    	push 1	; arg count
 22274 00010673 488B0425[46160000]      	mov rax, qword [free_var_127]	; free var string-length
 22275 0001067B 803805                  	cmp byte [rax], T_undefined
 22276 0001067E 0F8483780000            	je L_error_fvar_undefined
 22277 00010684 803804                  	cmp byte [rax], T_closure
 22278 00010687 0F85FE780000            	jne L_error_non_closure
 22279 0001068D FF7001                  	push SOB_CLOSURE_ENV(rax)
 22280 00010690 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22281 00010693 50                      	push rax
 22282 00010694 6A02                    	push 2	; arg count
 22283 00010696 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22284 0001069B E894790000              	call malloc
 22285 000106A0 50                      	push rax
 22286 000106A1 BF10000000              	mov rdi, 8 * 2	; new rib
 22287 000106A6 E889790000              	call malloc
 22288 000106AB 50                      	push rax
 22289 000106AC BF20000000              	mov rdi, 8 * 4	; extended env
 22290 000106B1 E87E790000              	call malloc
 22291 000106B6 488B7D10                	mov rdi, ENV
 22292 000106BA BE00000000              	mov rsi, 0
 22293 000106BF BA01000000              	mov rdx, 1
 22294                                  .L_lambda_simple_env_loop_0143:	; ext_env[i + 1] <-- env[i]
 22295 000106C4 4883FE03                	cmp rsi, 3
 22296 000106C8 7410                    	je .L_lambda_simple_env_end_0143
 22297 000106CA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22298 000106CE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22299 000106D2 48FFC6                  	inc rsi
 22300 000106D5 48FFC2                  	inc rdx
 22301 000106D8 EBEA                    	jmp .L_lambda_simple_env_loop_0143
 22302                                  .L_lambda_simple_env_end_0143:
 22303 000106DA 5B                      	pop rbx
 22304 000106DB BE00000000              	mov rsi, 0
 22305                                  .L_lambda_simple_params_loop_0143:	; copy params
 22306 000106E0 4883FE02                	cmp rsi, 2
 22307 000106E4 740E                    	je .L_lambda_simple_params_end_0143
 22308 000106E6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22309 000106EB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22310 000106EF 48FFC6                  	inc rsi
 22311 000106F2 EBEC                    	jmp .L_lambda_simple_params_loop_0143
 22312                                  .L_lambda_simple_params_end_0143:
 22313 000106F4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22314 000106F7 4889C3                  	mov rbx, rax
 22315 000106FA 58                      	pop rax
 22316 000106FB C60004                  	mov byte [rax], T_closure
 22317 000106FE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22318 00010702 48C74009[0F070100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0143
 22319 0001070A E9EA000000              	jmp .L_lambda_simple_end_0143
 22320                                  .L_lambda_simple_code_0143:	; lambda-simple body
 22321 0001070F 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22322 00010715 740B                    	je .L_lambda_simple_arity_check_ok_0143
 22323 00010717 FF742410                	push qword [rsp + 8 * 2]
 22324 0001071B 6A02                    	push 2
 22325 0001071D E9CB780000              	jmp L_error_incorrect_arity_simple
 22326                                  .L_lambda_simple_arity_check_ok_0143:
 22327 00010722 C8000000                	enter 0, 0
 22328                                  	; preparing a non-tail-call
 22329 00010726 488B4528                	mov rax, PARAM(1)	; param len2
 22330 0001072A 50                      	push rax
 22331 0001072B 488B4520                	mov rax, PARAM(0)	; param len1
 22332 0001072F 50                      	push rax
 22333 00010730 6A02                    	push 2	; arg count
 22334 00010732 488B0425[3D0E0000]      	mov rax, qword [free_var_6]	; free var =
 22335 0001073A 803805                  	cmp byte [rax], T_undefined
 22336 0001073D 0F84C4770000            	je L_error_fvar_undefined
 22337 00010743 803804                  	cmp byte [rax], T_closure
 22338 00010746 0F853F780000            	jne L_error_non_closure
 22339 0001074C FF7001                  	push SOB_CLOSURE_ENV(rax)
 22340 0001074F FF5009                  	call SOB_CLOSURE_CODE(rax)
 22341 00010752 483D[02000000]          	cmp rax, sob_boolean_false
 22342 00010758 0F848D000000            	je .L_if_else_00fc
 22343                                  	; preparing a tail-call
 22344 0001075E 488B4520                	mov rax, PARAM(0)	; param len1
 22345 00010762 50                      	push rax
 22346 00010763 488B4510                	mov rax, ENV
 22347 00010767 488B00                  	mov rax, qword [rax + 8 * 0]
 22348 0001076A 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 22349 0001076E 50                      	push rax
 22350 0001076F 488B4510                	mov rax, ENV
 22351 00010773 488B00                  	mov rax, qword [rax + 8 * 0]
 22352 00010776 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 22353 00010779 50                      	push rax
 22354 0001077A 48B8-                   	mov rax, L_constants + 2135
 22354 0001077C [5708000000000000] 
 22355 00010784 50                      	push rax
 22356 00010785 6A04                    	push 4	; arg count
 22357 00010787 488B4510                	mov rax, ENV
 22358 0001078B 488B4008                	mov rax, qword [rax + 8 * 1]
 22359 0001078F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 22360 00010792 488B00                  	mov rax, qword [rax]
 22361 00010795 803804                  	cmp byte [rax], T_closure
 22362 00010798 0F85ED770000            	jne L_error_non_closure
 22363 0001079E FF7001                  	push SOB_CLOSURE_ENV(rax)
 22364 000107A1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22365 000107A4 FF7500                  	push qword[rbp]
 22366 000107A7 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22367 000107AA 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22368 000107AE 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22369 000107B2 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22370 000107B6 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22371 000107B9 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22372 000107BC 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22373 000107C1 4983C103                	add r9, 3 	 ;for getting to the params
 22374 000107C5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22375 000107C9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22376                                  .L_tc_recycle_frame_loop_01dc:
 22377 000107CC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22378 000107CF 7410                    	je .L_tc_recycle_frame_done_01dc
 22379 000107D1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22380 000107D4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22381 000107D7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22382 000107DB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22383 000107DF EBEB                    	jmp .L_tc_recycle_frame_loop_01dc
 22384                                  .L_tc_recycle_frame_done_01dc:
 22385 000107E1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22386 000107E2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22387 000107E6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22388 000107E9 EB0A                    	jmp .L_if_end_00fc
 22389                                  .L_if_else_00fc:
 22390 000107EB 48B8-                   	mov rax, L_constants + 2
 22390 000107ED [0200000000000000] 
 22391                                  .L_if_end_00fc:
 22392 000107F5 C9                      	leave
 22393 000107F6 C22000                  	ret AND_KILL_FRAME(2)
 22394                                  .L_lambda_simple_end_0143:	; new closure is in rax
 22395 000107F9 803804                  	cmp byte [rax], T_closure
 22396 000107FC 0F8589770000            	jne L_error_non_closure
 22397 00010802 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22398 00010805 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22399 00010808 FF7500                  	push qword[rbp]
 22400 0001080B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22401 0001080E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22402 00010812 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22403 00010816 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22404 0001081A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22405 0001081D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22406 00010820 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22407 00010825 4983C103                	add r9, 3 	 ;for getting to the params
 22408 00010829 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22409 0001082D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22410                                  .L_tc_recycle_frame_loop_01dd:
 22411 00010830 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22412 00010833 7410                    	je .L_tc_recycle_frame_done_01dd
 22413 00010835 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22414 00010838 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22415 0001083B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22416 0001083F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22417 00010843 EBEB                    	jmp .L_tc_recycle_frame_loop_01dd
 22418                                  .L_tc_recycle_frame_done_01dd:
 22419 00010845 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22420 00010846 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22421 0001084A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22422 0001084D C9                      	leave
 22423 0001084E C22000                  	ret AND_KILL_FRAME(2)
 22424                                  .L_lambda_simple_end_0142:	; new closure is in rax
 22425 00010851 50                      	push rax
 22426 00010852 6A01                    	push 1	; arg count
 22427 00010854 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22428 00010859 E8D6770000              	call malloc
 22429 0001085E 50                      	push rax
 22430 0001085F BF08000000              	mov rdi, 8 * 1	; new rib
 22431 00010864 E8CB770000              	call malloc
 22432 00010869 50                      	push rax
 22433 0001086A BF18000000              	mov rdi, 8 * 3	; extended env
 22434 0001086F E8C0770000              	call malloc
 22435 00010874 488B7D10                	mov rdi, ENV
 22436 00010878 BE00000000              	mov rsi, 0
 22437 0001087D BA01000000              	mov rdx, 1
 22438                                  .L_lambda_simple_env_loop_0144:	; ext_env[i + 1] <-- env[i]
 22439 00010882 4883FE02                	cmp rsi, 2
 22440 00010886 7410                    	je .L_lambda_simple_env_end_0144
 22441 00010888 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22442 0001088C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22443 00010890 48FFC6                  	inc rsi
 22444 00010893 48FFC2                  	inc rdx
 22445 00010896 EBEA                    	jmp .L_lambda_simple_env_loop_0144
 22446                                  .L_lambda_simple_env_end_0144:
 22447 00010898 5B                      	pop rbx
 22448 00010899 BE00000000              	mov rsi, 0
 22449                                  .L_lambda_simple_params_loop_0144:	; copy params
 22450 0001089E 4883FE01                	cmp rsi, 1
 22451 000108A2 740E                    	je .L_lambda_simple_params_end_0144
 22452 000108A4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22453 000108A9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22454 000108AD 48FFC6                  	inc rsi
 22455 000108B0 EBEC                    	jmp .L_lambda_simple_params_loop_0144
 22456                                  .L_lambda_simple_params_end_0144:
 22457 000108B2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22458 000108B5 4889C3                  	mov rbx, rax
 22459 000108B8 58                      	pop rax
 22460 000108B9 C60004                  	mov byte [rax], T_closure
 22461 000108BC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22462 000108C0 48C74009[CD080100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0144
 22463 000108C8 E99B050000              	jmp .L_lambda_simple_end_0144
 22464                                  .L_lambda_simple_code_0144:	; lambda-simple body
 22465 000108CD 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22466 000108D3 740B                    	je .L_lambda_simple_arity_check_ok_0144
 22467 000108D5 FF742410                	push qword [rsp + 8 * 2]
 22468 000108D9 6A01                    	push 1
 22469 000108DB E90D770000              	jmp L_error_incorrect_arity_simple
 22470                                  .L_lambda_simple_arity_check_ok_0144:
 22471 000108E0 C8000000                	enter 0, 0
 22472                                  	; preparing a tail-call
 22473 000108E4 48B8-                   	mov rax, L_constants + 1993
 22473 000108E6 [C907000000000000] 
 22474 000108EE 50                      	push rax
 22475 000108EF 6A01                    	push 1	; arg count
 22476 000108F1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22477 000108F6 E839770000              	call malloc
 22478 000108FB 50                      	push rax
 22479 000108FC BF08000000              	mov rdi, 8 * 1	; new rib
 22480 00010901 E82E770000              	call malloc
 22481 00010906 50                      	push rax
 22482 00010907 BF20000000              	mov rdi, 8 * 4	; extended env
 22483 0001090C E823770000              	call malloc
 22484 00010911 488B7D10                	mov rdi, ENV
 22485 00010915 BE00000000              	mov rsi, 0
 22486 0001091A BA01000000              	mov rdx, 1
 22487                                  .L_lambda_simple_env_loop_0145:	; ext_env[i + 1] <-- env[i]
 22488 0001091F 4883FE03                	cmp rsi, 3
 22489 00010923 7410                    	je .L_lambda_simple_env_end_0145
 22490 00010925 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22491 00010929 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22492 0001092D 48FFC6                  	inc rsi
 22493 00010930 48FFC2                  	inc rdx
 22494 00010933 EBEA                    	jmp .L_lambda_simple_env_loop_0145
 22495                                  .L_lambda_simple_env_end_0145:
 22496 00010935 5B                      	pop rbx
 22497 00010936 BE00000000              	mov rsi, 0
 22498                                  .L_lambda_simple_params_loop_0145:	; copy params
 22499 0001093B 4883FE01                	cmp rsi, 1
 22500 0001093F 740E                    	je .L_lambda_simple_params_end_0145
 22501 00010941 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22502 00010946 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22503 0001094A 48FFC6                  	inc rsi
 22504 0001094D EBEC                    	jmp .L_lambda_simple_params_loop_0145
 22505                                  .L_lambda_simple_params_end_0145:
 22506 0001094F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22507 00010952 4889C3                  	mov rbx, rax
 22508 00010955 58                      	pop rax
 22509 00010956 C60004                  	mov byte [rax], T_closure
 22510 00010959 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22511 0001095D 48C74009[6A090100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0145
 22512 00010965 E9A6040000              	jmp .L_lambda_simple_end_0145
 22513                                  .L_lambda_simple_code_0145:	; lambda-simple body
 22514 0001096A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22515 00010970 740B                    	je .L_lambda_simple_arity_check_ok_0145
 22516 00010972 FF742410                	push qword [rsp + 8 * 2]
 22517 00010976 6A01                    	push 1
 22518 00010978 E970760000              	jmp L_error_incorrect_arity_simple
 22519                                  .L_lambda_simple_arity_check_ok_0145:
 22520 0001097D C8000000                	enter 0, 0
 22521 00010981 BF08000000              	mov rdi, 8*1
 22522 00010986 E8A9760000              	call malloc
 22523 0001098B 488B5D20                	mov rbx, PARAM(0)
 22524 0001098F 488918                  	mov qword[rax], rbx
 22525 00010992 48894520                	mov PARAM(0), rax
 22526 00010996 48B8-                   	mov rax, sob_void
 22526 00010998 [0000000000000000] 
 22527                                  
 22528 000109A0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22529 000109A5 E88A760000              	call malloc
 22530 000109AA 50                      	push rax
 22531 000109AB BF08000000              	mov rdi, 8 * 1	; new rib
 22532 000109B0 E87F760000              	call malloc
 22533 000109B5 50                      	push rax
 22534 000109B6 BF28000000              	mov rdi, 8 * 5	; extended env
 22535 000109BB E874760000              	call malloc
 22536 000109C0 488B7D10                	mov rdi, ENV
 22537 000109C4 BE00000000              	mov rsi, 0
 22538 000109C9 BA01000000              	mov rdx, 1
 22539                                  .L_lambda_simple_env_loop_0146:	; ext_env[i + 1] <-- env[i]
 22540 000109CE 4883FE04                	cmp rsi, 4
 22541 000109D2 7410                    	je .L_lambda_simple_env_end_0146
 22542 000109D4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22543 000109D8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22544 000109DC 48FFC6                  	inc rsi
 22545 000109DF 48FFC2                  	inc rdx
 22546 000109E2 EBEA                    	jmp .L_lambda_simple_env_loop_0146
 22547                                  .L_lambda_simple_env_end_0146:
 22548 000109E4 5B                      	pop rbx
 22549 000109E5 BE00000000              	mov rsi, 0
 22550                                  .L_lambda_simple_params_loop_0146:	; copy params
 22551 000109EA 4883FE01                	cmp rsi, 1
 22552 000109EE 740E                    	je .L_lambda_simple_params_end_0146
 22553 000109F0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22554 000109F5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22555 000109F9 48FFC6                  	inc rsi
 22556 000109FC EBEC                    	jmp .L_lambda_simple_params_loop_0146
 22557                                  .L_lambda_simple_params_end_0146:
 22558 000109FE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22559 00010A01 4889C3                  	mov rbx, rax
 22560 00010A04 58                      	pop rax
 22561 00010A05 C60004                  	mov byte [rax], T_closure
 22562 00010A08 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22563 00010A0C 48C74009[190A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0146
 22564 00010A14 E962010000              	jmp .L_lambda_simple_end_0146
 22565                                  .L_lambda_simple_code_0146:	; lambda-simple body
 22566 00010A19 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22567 00010A1F 740B                    	je .L_lambda_simple_arity_check_ok_0146
 22568 00010A21 FF742410                	push qword [rsp + 8 * 2]
 22569 00010A25 6A02                    	push 2
 22570 00010A27 E9C1750000              	jmp L_error_incorrect_arity_simple
 22571                                  .L_lambda_simple_arity_check_ok_0146:
 22572 00010A2C C8000000                	enter 0, 0
 22573                                  	; preparing a non-tail-call
 22574 00010A30 488B4528                	mov rax, PARAM(1)	; param strs
 22575 00010A34 50                      	push rax
 22576 00010A35 6A01                    	push 1	; arg count
 22577 00010A37 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 22578 00010A3F 803805                  	cmp byte [rax], T_undefined
 22579 00010A42 0F84BF740000            	je L_error_fvar_undefined
 22580 00010A48 803804                  	cmp byte [rax], T_closure
 22581 00010A4B 0F853A750000            	jne L_error_non_closure
 22582 00010A51 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22583 00010A54 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22584 00010A57 483D[02000000]          	cmp rax, sob_boolean_false
 22585 00010A5D 0F8514010000            	jne .L_or_end_0021
 22586                                  	; preparing a non-tail-call
 22587                                  	; preparing a non-tail-call
 22588 00010A63 488B4528                	mov rax, PARAM(1)	; param strs
 22589 00010A67 50                      	push rax
 22590 00010A68 6A01                    	push 1	; arg count
 22591 00010A6A 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 22592 00010A72 803805                  	cmp byte [rax], T_undefined
 22593 00010A75 0F848C740000            	je L_error_fvar_undefined
 22594 00010A7B 803804                  	cmp byte [rax], T_closure
 22595 00010A7E 0F8507750000            	jne L_error_non_closure
 22596 00010A84 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22597 00010A87 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22598 00010A8A 50                      	push rax
 22599 00010A8B 488B4520                	mov rax, PARAM(0)	; param str
 22600 00010A8F 50                      	push rax
 22601 00010A90 6A02                    	push 2	; arg count
 22602 00010A92 488B4510                	mov rax, ENV
 22603 00010A96 488B4008                	mov rax, qword [rax + 8 * 1]
 22604 00010A9A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var binary-string=?
 22605 00010A9D 803804                  	cmp byte [rax], T_closure
 22606 00010AA0 0F85E5740000            	jne L_error_non_closure
 22607 00010AA6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22608 00010AA9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22609 00010AAC 483D[02000000]          	cmp rax, sob_boolean_false
 22610 00010AB2 0F84B5000000            	je .L_if_else_00fd
 22611                                  	; preparing a tail-call
 22612                                  	; preparing a non-tail-call
 22613 00010AB8 488B4528                	mov rax, PARAM(1)	; param strs
 22614 00010ABC 50                      	push rax
 22615 00010ABD 6A01                    	push 1	; arg count
 22616 00010ABF 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
 22617 00010AC7 803805                  	cmp byte [rax], T_undefined
 22618 00010ACA 0F8437740000            	je L_error_fvar_undefined
 22619 00010AD0 803804                  	cmp byte [rax], T_closure
 22620 00010AD3 0F85B2740000            	jne L_error_non_closure
 22621 00010AD9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22622 00010ADC FF5009                  	call SOB_CLOSURE_CODE(rax)
 22623 00010ADF 50                      	push rax
 22624                                  	; preparing a non-tail-call
 22625 00010AE0 488B4528                	mov rax, PARAM(1)	; param strs
 22626 00010AE4 50                      	push rax
 22627 00010AE5 6A01                    	push 1	; arg count
 22628 00010AE7 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 22629 00010AEF 803805                  	cmp byte [rax], T_undefined
 22630 00010AF2 0F840F740000            	je L_error_fvar_undefined
 22631 00010AF8 803804                  	cmp byte [rax], T_closure
 22632 00010AFB 0F858A740000            	jne L_error_non_closure
 22633 00010B01 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22634 00010B04 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22635 00010B07 50                      	push rax
 22636 00010B08 6A02                    	push 2	; arg count
 22637 00010B0A 488B4510                	mov rax, ENV
 22638 00010B0E 488B00                  	mov rax, qword [rax + 8 * 0]
 22639 00010B11 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 22640 00010B14 488B00                  	mov rax, qword [rax]
 22641 00010B17 803804                  	cmp byte [rax], T_closure
 22642 00010B1A 0F856B740000            	jne L_error_non_closure
 22643 00010B20 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22644 00010B23 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22645 00010B26 FF7500                  	push qword[rbp]
 22646 00010B29 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22647 00010B2C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22648 00010B30 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22649 00010B34 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22650 00010B38 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22651 00010B3B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22652 00010B3E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22653 00010B43 4983C103                	add r9, 3 	 ;for getting to the params
 22654 00010B47 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22655 00010B4B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22656                                  .L_tc_recycle_frame_loop_01de:
 22657 00010B4E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22658 00010B51 7410                    	je .L_tc_recycle_frame_done_01de
 22659 00010B53 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22660 00010B56 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22661 00010B59 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22662 00010B5D 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22663 00010B61 EBEB                    	jmp .L_tc_recycle_frame_loop_01de
 22664                                  .L_tc_recycle_frame_done_01de:
 22665 00010B63 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22666 00010B64 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22667 00010B68 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22668 00010B6B EB0A                    	jmp .L_if_end_00fd
 22669                                  .L_if_else_00fd:
 22670 00010B6D 48B8-                   	mov rax, L_constants + 2
 22670 00010B6F [0200000000000000] 
 22671                                  .L_if_end_00fd:
 22672                                  .L_or_end_0021:
 22673 00010B77 C9                      	leave
 22674 00010B78 C22000                  	ret AND_KILL_FRAME(2)
 22675                                  .L_lambda_simple_end_0146:	; new closure is in rax
 22676 00010B7B 50                      	push rax
 22677 00010B7C 488B4520                	mov rax, PARAM(0)	; param run
 22678 00010B80 8F00                    	pop qword [rax]
 22679 00010B82 48B8-                   	mov rax, sob_void
 22679 00010B84 [0000000000000000] 
 22680                                  
 22681 00010B8C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22682 00010B91 E89E740000              	call malloc
 22683 00010B96 50                      	push rax
 22684 00010B97 BF08000000              	mov rdi, 8 * 1	; new rib
 22685 00010B9C E893740000              	call malloc
 22686 00010BA1 50                      	push rax
 22687 00010BA2 BF28000000              	mov rdi, 8 * 5	; extended env
 22688 00010BA7 E888740000              	call malloc
 22689 00010BAC 488B7D10                	mov rdi, ENV
 22690 00010BB0 BE00000000              	mov rsi, 0
 22691 00010BB5 BA01000000              	mov rdx, 1
 22692                                  .L_lambda_opt_env_loop_002b:	; ext_env[i + 1] <-- env[i]
 22693 00010BBA 4883FE04                	cmp rsi, 4
 22694 00010BBE 7410                    	je .L_lambda_opt_env_end_002b
 22695 00010BC0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22696 00010BC4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22697 00010BC8 48FFC6                  	inc rsi
 22698 00010BCB 48FFC2                  	inc rdx
 22699 00010BCE EBEA                    	jmp .L_lambda_opt_env_loop_002b
 22700                                  .L_lambda_opt_env_end_002b:
 22701 00010BD0 5B                      	pop rbx
 22702 00010BD1 BE00000000              	mov rsi, 0
 22703                                  .L_lambda_opt_params_loop_002b:	; copy params
 22704 00010BD6 4883FE01                	cmp rsi, 1
 22705 00010BDA 740E                    	je .L_lambda_opt_params_end_002b
 22706 00010BDC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22707 00010BE1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22708 00010BE5 48FFC6                  	inc rsi
 22709 00010BE8 EBEC                    	jmp .L_lambda_opt_params_loop_002b
 22710                                  .L_lambda_opt_params_end_002b:
 22711 00010BEA 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
 22712 00010BED 4889C3                  	mov rbx, rax
 22713 00010BF0 58                      	pop rax
 22714 00010BF1 C60004                  	mov byte [rax], T_closure
 22715 00010BF4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22716 00010BF8 48C74009[050C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_002b
 22717 00010C00 E907020000              	jmp .L_lambda_opt_end_002b
 22718                                  .L_lambda_opt_code_002b:	; lambda-opt body
 22719 00010C05 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22720 00010C0B 7411                    	je .L_lambda_opt_arity_check_exact_002b
 22721 00010C0D 0F8FBF000000            	jg .L_lambda_opt_arity_check_more_002b
 22722 00010C13 FF742410                	push qword [rsp + 8 * 2]
 22723 00010C17 6A01                    	push 1
 22724 00010C19 E9E3730000              	jmp L_error_incorrect_arity_opt
 22725                                  .L_lambda_opt_arity_check_exact_002b:
 22726 00010C1E 4883EC08                	sub rsp, 8
 22727 00010C22 488B442408              	mov rax, qword[rsp + 8 *1]
 22728 00010C27 48890424                	mov qword[rsp], rax  
 22729 00010C2B 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 22730 00010C30 4889442408              	mov qword[rsp + 8 * 1], rax
 22731 00010C35 B802000000              	mov rax, 2
 22732 00010C3A 4889442410              	mov qword[rsp + 8 *2], rax
 22733 00010C3F 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
 22734 00010C44 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 22735 00010C49 48B8-                   	mov rax, sob_nil
 22735 00010C4B [0100000000000000] 
 22736 00010C53 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
 22737 00010C58 C8000000                	enter 0, 0
 22738                                  	; preparing a tail-call
 22739 00010C5C 488B4528                	mov rax, PARAM(1)	; param strs
 22740 00010C60 50                      	push rax
 22741 00010C61 488B4520                	mov rax, PARAM(0)	; param str
 22742 00010C65 50                      	push rax
 22743 00010C66 6A02                    	push 2	; arg count
 22744 00010C68 488B4510                	mov rax, ENV
 22745 00010C6C 488B00                  	mov rax, qword [rax + 8 * 0]
 22746 00010C6F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 22747 00010C72 488B00                  	mov rax, qword [rax]
 22748 00010C75 803804                  	cmp byte [rax], T_closure
 22749 00010C78 0F850D730000            	jne L_error_non_closure
 22750 00010C7E FF7001                  	push SOB_CLOSURE_ENV(rax)
 22751 00010C81 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22752 00010C84 FF7500                  	push qword[rbp]
 22753 00010C87 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22754 00010C8A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22755 00010C8E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22756 00010C92 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22757 00010C96 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22758 00010C99 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22759 00010C9C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22760 00010CA1 4983C103                	add r9, 3 	 ;for getting to the params
 22761 00010CA5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22762 00010CA9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22763                                  .L_tc_recycle_frame_loop_01e0:
 22764 00010CAC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22765 00010CAF 7410                    	je .L_tc_recycle_frame_done_01e0
 22766 00010CB1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22767 00010CB4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22768 00010CB7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22769 00010CBB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22770 00010CBF EBEB                    	jmp .L_tc_recycle_frame_loop_01e0
 22771                                  .L_tc_recycle_frame_done_01e0:
 22772 00010CC1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22773 00010CC2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22774 00010CC6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22775 00010CC9 C9                      	leave
 22776 00010CCA C22000                  	ret AND_KILL_FRAME(2)
 22777 00010CCD E93A010000              	jmp .L_lambda_opt_end_002b	; new closure is in rax
 22778                                  .L_lambda_opt_arity_check_more_002b:
 22779 00010CD2 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 22780 00010CD7 49B9-                   	mov r9, sob_nil
 22780 00010CD9 [0100000000000000] 
 22781 00010CE1 4889E3                  	mov rbx, rsp 
 22782 00010CE4 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 22783 00010CE8 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 22784 00010CEB 49C1E003                	shl r8, 3
 22785 00010CEF 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 22786 00010CF2 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 22787                                  .L_lambda_opt_stack_shrink_loop_002b:
 22788 00010CF7 4983F801                	cmp r8, 1
 22789 00010CFB 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_002b
 22790 00010CFD BF11000000              	mov rdi, 1+8+8 ;for pair
 22791 00010D02 E82D730000              	call malloc;to create the pair in the stack
 22792 00010D07 C60021                  	mov byte [rax], T_pair ; to make it a pair
 22793 00010D0A 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
 22794 00010D0D 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 22795 00010D11 4C894809                 	mov qword[rax+1+8],r9
 22796 00010D15 4989C1                  	mov r9, rax ;for the recursion 
 22797 00010D18 49FFC8                  	dec r8 ;we finished copy another opt param to the list
 22798 00010D1B 4883EB08                	sub rbx, 8 ;to get the next param to copy
 22799 00010D1F EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_002b
 22800                                  .L_lambda_opt_stack_shrink_loop_exit_002b:
 22801 00010D21 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
 22802 00010D26 4883E902                	sub rcx, 2
 22803 00010D2A 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
 22804 00010D2E 4801CC                  	add rsp, rcx ;shrinking the stack
 22805 00010D31 4889E0                  	mov rax, rsp
 22806 00010D34 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
 22807 00010D37 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
 22808 00010D3B 49FFC8                  	dec r8 ;we start with param 0, not 1 
 22809 00010D3E 4883C018                	add rax, 3 * 8;now rax is param 0
 22810 00010D42 49C1E003                	shl r8, 3;convert to byte
 22811 00010D46 4C01C0                  	add rax, r8;now rax is the top of the stack
 22812 00010D49 4C8908                  	mov qword[rax], r9;puting the list at the top
 22813 00010D4C 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
 22814 00010D50 4889E3                  	mov rbx, rsp 
 22815 00010D53 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
 22816 00010D56 41BA01000000            	mov r10, 1;r10 is the not opt params length
 22817 00010D5C 49FFCA                  	dec r10 
 22818 00010D5F 49C1E203                	shl r10, 3;to get bytes
 22819 00010D63 4883C318                	add rbx, 3*8;rbx is the first param
 22820 00010D67 4C01D3                  	add rbx, r10; rbx is where the address to copy to
 22821 00010D6A 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
 22822 00010D6D 4C8900                  	mov qword[rax], r8
 22823 00010D70 4883E808                	sub rax, 8
 22824 00010D74 4883EB08                	sub rbx, 8
 22825 00010D78 4889E0                  	mov rax, rsp
 22826 00010D7B 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 22827 00010D7E 48C744241002000000      	mov qword [rsp+2*8], 2
 22828 00010D87 488B5808                	mov rbx, qword[rax + 8 *1]
 22829 00010D8B 48895C2408              	mov qword [rsp + 1*8] ,rbx
 22830 00010D90 488B18                  	mov rbx, qword[rax]
 22831 00010D93 48891C24                	mov qword [rsp], rbx
 22832 00010D97 C8000000                	enter 0, 0
 22833                                  	; preparing a tail-call
 22834 00010D9B 488B4528                	mov rax, PARAM(1)	; param strs
 22835 00010D9F 50                      	push rax
 22836 00010DA0 488B4520                	mov rax, PARAM(0)	; param str
 22837 00010DA4 50                      	push rax
 22838 00010DA5 6A02                    	push 2	; arg count
 22839 00010DA7 488B4510                	mov rax, ENV
 22840 00010DAB 488B00                  	mov rax, qword [rax + 8 * 0]
 22841 00010DAE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 22842 00010DB1 488B00                  	mov rax, qword [rax]
 22843 00010DB4 803804                  	cmp byte [rax], T_closure
 22844 00010DB7 0F85CE710000            	jne L_error_non_closure
 22845 00010DBD FF7001                  	push SOB_CLOSURE_ENV(rax)
 22846 00010DC0 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22847 00010DC3 FF7500                  	push qword[rbp]
 22848 00010DC6 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22849 00010DC9 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22850 00010DCD 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22851 00010DD1 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22852 00010DD5 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22853 00010DD8 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22854 00010DDB 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22855 00010DE0 4983C103                	add r9, 3 	 ;for getting to the params
 22856 00010DE4 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22857 00010DE8 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22858                                  .L_tc_recycle_frame_loop_01df:
 22859 00010DEB 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22860 00010DEE 7410                    	je .L_tc_recycle_frame_done_01df
 22861 00010DF0 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22862 00010DF3 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22863 00010DF6 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22864 00010DFA 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22865 00010DFE EBEB                    	jmp .L_tc_recycle_frame_loop_01df
 22866                                  .L_tc_recycle_frame_done_01df:
 22867 00010E00 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22868 00010E01 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22869 00010E05 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22870 00010E08 C9                      	leave
 22871 00010E09 C22000                  	ret AND_KILL_FRAME(2)
 22872                                  .L_lambda_opt_end_002b:	; new closure is in rax
 22873 00010E0C C9                      	leave
 22874 00010E0D C21800                  	ret AND_KILL_FRAME(1)
 22875                                  .L_lambda_simple_end_0145:	; new closure is in rax
 22876 00010E10 803804                  	cmp byte [rax], T_closure
 22877 00010E13 0F8572710000            	jne L_error_non_closure
 22878 00010E19 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22879 00010E1C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22880 00010E1F FF7500                  	push qword[rbp]
 22881 00010E22 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22882 00010E25 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22883 00010E29 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22884 00010E2D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22885 00010E31 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22886 00010E34 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22887 00010E37 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22888 00010E3C 4983C103                	add r9, 3 	 ;for getting to the params
 22889 00010E40 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22890 00010E44 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22891                                  .L_tc_recycle_frame_loop_01e1:
 22892 00010E47 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22893 00010E4A 7410                    	je .L_tc_recycle_frame_done_01e1
 22894 00010E4C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22895 00010E4F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22896 00010E52 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22897 00010E56 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22898 00010E5A EBEB                    	jmp .L_tc_recycle_frame_loop_01e1
 22899                                  .L_tc_recycle_frame_done_01e1:
 22900 00010E5C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22901 00010E5D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22902 00010E61 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22903 00010E64 C9                      	leave
 22904 00010E65 C21800                  	ret AND_KILL_FRAME(1)
 22905                                  .L_lambda_simple_end_0144:	; new closure is in rax
 22906 00010E68 803804                  	cmp byte [rax], T_closure
 22907 00010E6B 0F851A710000            	jne L_error_non_closure
 22908 00010E71 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22909 00010E74 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22910 00010E77 FF7500                  	push qword[rbp]
 22911 00010E7A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22912 00010E7D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22913 00010E81 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22914 00010E85 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22915 00010E89 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22916 00010E8C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22917 00010E8F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22918 00010E94 4983C103                	add r9, 3 	 ;for getting to the params
 22919 00010E98 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22920 00010E9C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22921                                  .L_tc_recycle_frame_loop_01e2:
 22922 00010E9F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22923 00010EA2 7410                    	je .L_tc_recycle_frame_done_01e2
 22924 00010EA4 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22925 00010EA7 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22926 00010EAA 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22927 00010EAE 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22928 00010EB2 EBEB                    	jmp .L_tc_recycle_frame_loop_01e2
 22929                                  .L_tc_recycle_frame_done_01e2:
 22930 00010EB4 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22931 00010EB5 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22932 00010EB9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22933 00010EBC C9                      	leave
 22934 00010EBD C21800                  	ret AND_KILL_FRAME(1)
 22935                                  .L_lambda_simple_end_0140:	; new closure is in rax
 22936 00010EC0 803804                  	cmp byte [rax], T_closure
 22937 00010EC3 0F85C2700000            	jne L_error_non_closure
 22938 00010EC9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22939 00010ECC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22940 00010ECF FF7500                  	push qword[rbp]
 22941 00010ED2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22942 00010ED5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22943 00010ED9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22944 00010EDD 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22945 00010EE1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22946 00010EE4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22947 00010EE7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22948 00010EEC 4983C103                	add r9, 3 	 ;for getting to the params
 22949 00010EF0 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22950 00010EF4 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22951                                  .L_tc_recycle_frame_loop_01e3:
 22952 00010EF7 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22953 00010EFA 7410                    	je .L_tc_recycle_frame_done_01e3
 22954 00010EFC 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22955 00010EFF 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22956 00010F02 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22957 00010F06 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22958 00010F0A EBEB                    	jmp .L_tc_recycle_frame_loop_01e3
 22959                                  .L_tc_recycle_frame_done_01e3:
 22960 00010F0C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22961 00010F0D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22962 00010F11 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22963 00010F14 C9                      	leave
 22964 00010F15 C21800                  	ret AND_KILL_FRAME(1)
 22965                                  .L_lambda_simple_end_013f:	; new closure is in rax
 22966 00010F18 50                      	push rax
 22967 00010F19 6A01                    	push 1	; arg count
 22968 00010F1B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22969 00010F20 E80F710000              	call malloc
 22970 00010F25 50                      	push rax
 22971 00010F26 BF00000000              	mov rdi, 8 * 0	; new rib
 22972 00010F2B E804710000              	call malloc
 22973 00010F30 50                      	push rax
 22974 00010F31 BF08000000              	mov rdi, 8 * 1	; extended env
 22975 00010F36 E8F9700000              	call malloc
 22976 00010F3B 488B7D10                	mov rdi, ENV
 22977 00010F3F BE00000000              	mov rsi, 0
 22978 00010F44 BA01000000              	mov rdx, 1
 22979                                  .L_lambda_simple_env_loop_0147:	; ext_env[i + 1] <-- env[i]
 22980 00010F49 4883FE00                	cmp rsi, 0
 22981 00010F4D 7410                    	je .L_lambda_simple_env_end_0147
 22982 00010F4F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22983 00010F53 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22984 00010F57 48FFC6                  	inc rsi
 22985 00010F5A 48FFC2                  	inc rdx
 22986 00010F5D EBEA                    	jmp .L_lambda_simple_env_loop_0147
 22987                                  .L_lambda_simple_env_end_0147:
 22988 00010F5F 5B                      	pop rbx
 22989 00010F60 BE00000000              	mov rsi, 0
 22990                                  .L_lambda_simple_params_loop_0147:	; copy params
 22991 00010F65 4883FE00                	cmp rsi, 0
 22992 00010F69 740E                    	je .L_lambda_simple_params_end_0147
 22993 00010F6B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22994 00010F70 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22995 00010F74 48FFC6                  	inc rsi
 22996 00010F77 EBEC                    	jmp .L_lambda_simple_params_loop_0147
 22997                                  .L_lambda_simple_params_end_0147:
 22998 00010F79 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22999 00010F7C 4889C3                  	mov rbx, rax
 23000 00010F7F 58                      	pop rax
 23001 00010F80 C60004                  	mov byte [rax], T_closure
 23002 00010F83 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23003 00010F87 48C74009[940F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0147
 23004 00010F8F E98D000000              	jmp .L_lambda_simple_end_0147
 23005                                  .L_lambda_simple_code_0147:	; lambda-simple body
 23006 00010F94 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23007 00010F9A 740B                    	je .L_lambda_simple_arity_check_ok_0147
 23008 00010F9C FF742410                	push qword [rsp + 8 * 2]
 23009 00010FA0 6A01                    	push 1
 23010 00010FA2 E946700000              	jmp L_error_incorrect_arity_simple
 23011                                  .L_lambda_simple_arity_check_ok_0147:
 23012 00010FA7 C8000000                	enter 0, 0
 23013                                  	; preparing a non-tail-call
 23014 00010FAB 488B0425[D2120000]      	mov rax, qword [free_var_75]	; free var char=?
 23015 00010FB3 803805                  	cmp byte [rax], T_undefined
 23016 00010FB6 0F844B6F0000            	je L_error_fvar_undefined
 23017 00010FBC 50                      	push rax
 23018 00010FBD 6A01                    	push 1	; arg count
 23019 00010FBF 488B4520                	mov rax, PARAM(0)	; param make-string=?
 23020 00010FC3 803804                  	cmp byte [rax], T_closure
 23021 00010FC6 0F85BF6F0000            	jne L_error_non_closure
 23022 00010FCC FF7001                  	push SOB_CLOSURE_ENV(rax)
 23023 00010FCF FF5009                  	call SOB_CLOSURE_CODE(rax)
 23024 00010FD2 48890425[CE160000]      	mov qword [free_var_135], rax
 23025 00010FDA 48B8-                   	mov rax, sob_void
 23025 00010FDC [0000000000000000] 
 23026                                  
 23027                                  	; preparing a non-tail-call
 23028 00010FE4 488B0425[5B120000]      	mov rax, qword [free_var_68]	; free var char-ci=?
 23029 00010FEC 803805                  	cmp byte [rax], T_undefined
 23030 00010FEF 0F84126F0000            	je L_error_fvar_undefined
 23031 00010FF5 50                      	push rax
 23032 00010FF6 6A01                    	push 1	; arg count
 23033 00010FF8 488B4520                	mov rax, PARAM(0)	; param make-string=?
 23034 00010FFC 803804                  	cmp byte [rax], T_closure
 23035 00010FFF 0F85866F0000            	jne L_error_non_closure
 23036 00011005 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23037 00011008 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23038 0001100B 48890425[02160000]      	mov qword [free_var_123], rax
 23039 00011013 48B8-                   	mov rax, sob_void
 23039 00011015 [0000000000000000] 
 23040 0001101D C9                      	leave
 23041 0001101E C21800                  	ret AND_KILL_FRAME(1)
 23042                                  .L_lambda_simple_end_0147:	; new closure is in rax
 23043 00011021 803804                  	cmp byte [rax], T_closure
 23044 00011024 0F85616F0000            	jne L_error_non_closure
 23045 0001102A FF7001                  	push SOB_CLOSURE_ENV(rax)
 23046 0001102D FF5009                  	call SOB_CLOSURE_CODE(rax)
 23047                                  
 23048 00011030 4889C7                  	mov rdi, rax
 23049 00011033 E851720000              	call print_sexpr_if_not_void
 23050 00011038 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23051 0001103D E8F26F0000              	call malloc
 23052 00011042 50                      	push rax
 23053 00011043 BF00000000              	mov rdi, 8 * 0	; new rib
 23054 00011048 E8E76F0000              	call malloc
 23055 0001104D 50                      	push rax
 23056 0001104E BF08000000              	mov rdi, 8 * 1	; extended env
 23057 00011053 E8DC6F0000              	call malloc
 23058 00011058 488B7D10                	mov rdi, ENV
 23059 0001105C BE00000000              	mov rsi, 0
 23060 00011061 BA01000000              	mov rdx, 1
 23061                                  .L_lambda_simple_env_loop_0148:	; ext_env[i + 1] <-- env[i]
 23062 00011066 4883FE00                	cmp rsi, 0
 23063 0001106A 7410                    	je .L_lambda_simple_env_end_0148
 23064 0001106C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23065 00011070 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23066 00011074 48FFC6                  	inc rsi
 23067 00011077 48FFC2                  	inc rdx
 23068 0001107A EBEA                    	jmp .L_lambda_simple_env_loop_0148
 23069                                  .L_lambda_simple_env_end_0148:
 23070 0001107C 5B                      	pop rbx
 23071 0001107D BE00000000              	mov rsi, 0
 23072                                  .L_lambda_simple_params_loop_0148:	; copy params
 23073 00011082 4883FE00                	cmp rsi, 0
 23074 00011086 740E                    	je .L_lambda_simple_params_end_0148
 23075 00011088 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23076 0001108D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23077 00011091 48FFC6                  	inc rsi
 23078 00011094 EBEC                    	jmp .L_lambda_simple_params_loop_0148
 23079                                  .L_lambda_simple_params_end_0148:
 23080 00011096 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23081 00011099 4889C3                  	mov rbx, rax
 23082 0001109C 58                      	pop rax
 23083 0001109D C60004                  	mov byte [rax], T_closure
 23084 000110A0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23085 000110A4 48C74009[B1100100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0148
 23086 000110AC E91C010000              	jmp .L_lambda_simple_end_0148
 23087                                  .L_lambda_simple_code_0148:	; lambda-simple body
 23088 000110B1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23089 000110B7 740B                    	je .L_lambda_simple_arity_check_ok_0148
 23090 000110B9 FF742410                	push qword [rsp + 8 * 2]
 23091 000110BD 6A01                    	push 1
 23092 000110BF E9296F0000              	jmp L_error_incorrect_arity_simple
 23093                                  .L_lambda_simple_arity_check_ok_0148:
 23094 000110C4 C8000000                	enter 0, 0
 23095                                  	; preparing a non-tail-call
 23096 000110C8 488B4520                	mov rax, PARAM(0)	; param e
 23097 000110CC 50                      	push rax
 23098 000110CD 6A01                    	push 1	; arg count
 23099 000110CF 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 23100 000110D7 803805                  	cmp byte [rax], T_undefined
 23101 000110DA 0F84276E0000            	je L_error_fvar_undefined
 23102 000110E0 803804                  	cmp byte [rax], T_closure
 23103 000110E3 0F85A26E0000            	jne L_error_non_closure
 23104 000110E9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23105 000110EC FF5009                  	call SOB_CLOSURE_CODE(rax)
 23106 000110EF 483D[02000000]          	cmp rax, sob_boolean_false
 23107 000110F5 0F85CE000000            	jne .L_or_end_0022
 23108                                  	; preparing a non-tail-call
 23109 000110FB 488B4520                	mov rax, PARAM(0)	; param e
 23110 000110FF 50                      	push rax
 23111 00011100 6A01                    	push 1	; arg count
 23112 00011102 488B0425[36150000]      	mov rax, qword [free_var_111]	; free var pair?
 23113 0001110A 803805                  	cmp byte [rax], T_undefined
 23114 0001110D 0F84F46D0000            	je L_error_fvar_undefined
 23115 00011113 803804                  	cmp byte [rax], T_closure
 23116 00011116 0F856F6E0000            	jne L_error_non_closure
 23117 0001111C FF7001                  	push SOB_CLOSURE_ENV(rax)
 23118 0001111F FF5009                  	call SOB_CLOSURE_CODE(rax)
 23119 00011122 483D[02000000]          	cmp rax, sob_boolean_false
 23120 00011128 0F8491000000            	je .L_if_else_00fe
 23121                                  	; preparing a tail-call
 23122                                  	; preparing a non-tail-call
 23123 0001112E 488B4520                	mov rax, PARAM(0)	; param e
 23124 00011132 50                      	push rax
 23125 00011133 6A01                    	push 1	; arg count
 23126 00011135 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
 23127 0001113D 803805                  	cmp byte [rax], T_undefined
 23128 00011140 0F84C16D0000            	je L_error_fvar_undefined
 23129 00011146 803804                  	cmp byte [rax], T_closure
 23130 00011149 0F853C6E0000            	jne L_error_non_closure
 23131 0001114F FF7001                  	push SOB_CLOSURE_ENV(rax)
 23132 00011152 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23133 00011155 50                      	push rax
 23134 00011156 6A01                    	push 1	; arg count
 23135 00011158 488B0425[37140000]      	mov rax, qword [free_var_96]	; free var list?
 23136 00011160 803805                  	cmp byte [rax], T_undefined
 23137 00011163 0F849E6D0000            	je L_error_fvar_undefined
 23138 00011169 803804                  	cmp byte [rax], T_closure
 23139 0001116C 0F85196E0000            	jne L_error_non_closure
 23140 00011172 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23141 00011175 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 23142 00011178 FF7500                  	push qword[rbp]
 23143 0001117B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 23144 0001117E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 23145 00011182 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 23146 00011186 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 23147 0001118A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 23148 0001118D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 23149 00011190 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 23150 00011195 4983C103                	add r9, 3 	 ;for getting to the params
 23151 00011199 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 23152 0001119D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 23153                                  .L_tc_recycle_frame_loop_01e4:
 23154 000111A0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 23155 000111A3 7410                    	je .L_tc_recycle_frame_done_01e4
 23156 000111A5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 23157 000111A8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 23158 000111AB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 23159 000111AF 4983E808                	sub r8, 8	 ;move the top of the stack one down
 23160 000111B3 EBEB                    	jmp .L_tc_recycle_frame_loop_01e4
 23161                                  .L_tc_recycle_frame_done_01e4:
 23162 000111B5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 23163 000111B6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 23164 000111BA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23165 000111BD EB0A                    	jmp .L_if_end_00fe
 23166                                  .L_if_else_00fe:
 23167 000111BF 48B8-                   	mov rax, L_constants + 2
 23167 000111C1 [0200000000000000] 
 23168                                  .L_if_end_00fe:
 23169                                  .L_or_end_0022:
 23170 000111C9 C9                      	leave
 23171 000111CA C21800                  	ret AND_KILL_FRAME(1)
 23172                                  .L_lambda_simple_end_0148:	; new closure is in rax
 23173 000111CD 48890425[37140000]      	mov qword [free_var_96], rax
 23174 000111D5 48B8-                   	mov rax, sob_void
 23174 000111D7 [0000000000000000] 
 23175                                  
 23176 000111DF 4889C7                  	mov rdi, rax
 23177 000111E2 E8A2700000              	call print_sexpr_if_not_void
 23178                                  	; preparing a non-tail-call
 23179 000111E7 488B0425[8C140000]      	mov rax, qword [free_var_101]	; free var make-vector
 23180 000111EF 803805                  	cmp byte [rax], T_undefined
 23181 000111F2 0F840F6D0000            	je L_error_fvar_undefined
 23182 000111F8 50                      	push rax
 23183 000111F9 6A01                    	push 1	; arg count
 23184 000111FB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23185 00011200 E82F6E0000              	call malloc
 23186 00011205 50                      	push rax
 23187 00011206 BF00000000              	mov rdi, 8 * 0	; new rib
 23188 0001120B E8246E0000              	call malloc
 23189 00011210 50                      	push rax
 23190 00011211 BF08000000              	mov rdi, 8 * 1	; extended env
 23191 00011216 E8196E0000              	call malloc
 23192 0001121B 488B7D10                	mov rdi, ENV
 23193 0001121F BE00000000              	mov rsi, 0
 23194 00011224 BA01000000              	mov rdx, 1
 23195                                  .L_lambda_simple_env_loop_0149:	; ext_env[i + 1] <-- env[i]
 23196 00011229 4883FE00                	cmp rsi, 0
 23197 0001122D 7410                    	je .L_lambda_simple_env_end_0149
 23198 0001122F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23199 00011233 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23200 00011237 48FFC6                  	inc rsi
 23201 0001123A 48FFC2                  	inc rdx
 23202 0001123D EBEA                    	jmp .L_lambda_simple_env_loop_0149
 23203                                  .L_lambda_simple_env_end_0149:
 23204 0001123F 5B                      	pop rbx
 23205 00011240 BE00000000              	mov rsi, 0
 23206                                  .L_lambda_simple_params_loop_0149:	; copy params
 23207 00011245 4883FE00                	cmp rsi, 0
 23208 00011249 740E                    	je .L_lambda_simple_params_end_0149
 23209 0001124B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23210 00011250 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23211 00011254 48FFC6                  	inc rsi
 23212 00011257 EBEC                    	jmp .L_lambda_simple_params_loop_0149
 23213                                  .L_lambda_simple_params_end_0149:
 23214 00011259 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23215 0001125C 4889C3                  	mov rbx, rax
 23216 0001125F 58                      	pop rax
 23217 00011260 C60004                  	mov byte [rax], T_closure
 23218 00011263 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23219 00011267 48C74009[74120100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0149
 23220 0001126F E9D1060000              	jmp .L_lambda_simple_end_0149
 23221                                  .L_lambda_simple_code_0149:	; lambda-simple body
 23222 00011274 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23223 0001127A 740B                    	je .L_lambda_simple_arity_check_ok_0149
 23224 0001127C FF742410                	push qword [rsp + 8 * 2]
 23225 00011280 6A01                    	push 1
 23226 00011282 E9666D0000              	jmp L_error_incorrect_arity_simple
 23227                                  .L_lambda_simple_arity_check_ok_0149:
 23228 00011287 C8000000                	enter 0, 0
 23229 0001128B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23230 00011290 E89F6D0000              	call malloc
 23231 00011295 50                      	push rax
 23232 00011296 BF08000000              	mov rdi, 8 * 1	; new rib
 23233 0001129B E8946D0000              	call malloc
 23234 000112A0 50                      	push rax
 23235 000112A1 BF10000000              	mov rdi, 8 * 2	; extended env
 23236 000112A6 E8896D0000              	call malloc
 23237 000112AB 488B7D10                	mov rdi, ENV
 23238 000112AF BE00000000              	mov rsi, 0
 23239 000112B4 BA01000000              	mov rdx, 1
 23240                                  .L_lambda_opt_env_loop_002c:	; ext_env[i + 1] <-- env[i]
 23241 000112B9 4883FE01                	cmp rsi, 1
 23242 000112BD 7410                    	je .L_lambda_opt_env_end_002c
 23243 000112BF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23244 000112C3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23245 000112C7 48FFC6                  	inc rsi
 23246 000112CA 48FFC2                  	inc rdx
 23247 000112CD EBEA                    	jmp .L_lambda_opt_env_loop_002c
 23248                                  .L_lambda_opt_env_end_002c:
 23249 000112CF 5B                      	pop rbx
 23250 000112D0 BE00000000              	mov rsi, 0
 23251                                  .L_lambda_opt_params_loop_002c:	; copy params
 23252 000112D5 4883FE01                	cmp rsi, 1
 23253 000112D9 740E                    	je .L_lambda_opt_params_end_002c
 23254 000112DB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23255 000112E0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23256 000112E4 48FFC6                  	inc rsi
 23257 000112E7 EBEC                    	jmp .L_lambda_opt_params_loop_002c
 23258                                  .L_lambda_opt_params_end_002c:
 23259 000112E9 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
 23260 000112EC 4889C3                  	mov rbx, rax
 23261 000112EF 58                      	pop rax
 23262 000112F0 C60004                  	mov byte [rax], T_closure
 23263 000112F3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23264 000112F7 48C74009[04130100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_002c
 23265 000112FF E93D060000              	jmp .L_lambda_opt_end_002c
 23266                                  .L_lambda_opt_code_002c:	; lambda-opt body
 23267 00011304 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23268 0001130A 7411                    	je .L_lambda_opt_arity_check_exact_002c
 23269 0001130C 0F8FDA020000            	jg .L_lambda_opt_arity_check_more_002c
 23270 00011312 FF742410                	push qword [rsp + 8 * 2]
 23271 00011316 6A01                    	push 1
 23272 00011318 E9E46C0000              	jmp L_error_incorrect_arity_opt
 23273                                  .L_lambda_opt_arity_check_exact_002c:
 23274 0001131D 4883EC08                	sub rsp, 8
 23275 00011321 488B442408              	mov rax, qword[rsp + 8 *1]
 23276 00011326 48890424                	mov qword[rsp], rax  
 23277 0001132A 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 23278 0001132F 4889442408              	mov qword[rsp + 8 * 1], rax
 23279 00011334 B802000000              	mov rax, 2
 23280 00011339 4889442410              	mov qword[rsp + 8 *2], rax
 23281 0001133E 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
 23282 00011343 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 23283 00011348 48B8-                   	mov rax, sob_nil
 23283 0001134A [0100000000000000] 
 23284 00011352 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
 23285 00011357 C8000000                	enter 0, 0
 23286                                  	; preparing a tail-call
 23287                                  	; preparing a non-tail-call
 23288 0001135B 488B4528                	mov rax, PARAM(1)	; param xs
 23289 0001135F 50                      	push rax
 23290 00011360 6A01                    	push 1	; arg count
 23291 00011362 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 23292 0001136A 803805                  	cmp byte [rax], T_undefined
 23293 0001136D 0F84946B0000            	je L_error_fvar_undefined
 23294 00011373 803804                  	cmp byte [rax], T_closure
 23295 00011376 0F850F6C0000            	jne L_error_non_closure
 23296 0001137C FF7001                  	push SOB_CLOSURE_ENV(rax)
 23297 0001137F FF5009                  	call SOB_CLOSURE_CODE(rax)
 23298 00011382 483D[02000000]          	cmp rax, sob_boolean_false
 23299 00011388 740F                    	je .L_if_else_0104
 23300 0001138A 48B8-                   	mov rax, L_constants + 0
 23300 0001138C [0000000000000000] 
 23301 00011394 E9EE000000              	jmp .L_if_end_0104
 23302                                  .L_if_else_0104:
 23303                                  	; preparing a non-tail-call
 23304 00011399 488B4528                	mov rax, PARAM(1)	; param xs
 23305 0001139D 50                      	push rax
 23306 0001139E 6A01                    	push 1	; arg count
 23307 000113A0 488B0425[36150000]      	mov rax, qword [free_var_111]	; free var pair?
 23308 000113A8 803805                  	cmp byte [rax], T_undefined
 23309 000113AB 0F84566B0000            	je L_error_fvar_undefined
 23310 000113B1 803804                  	cmp byte [rax], T_closure
 23311 000113B4 0F85D16B0000            	jne L_error_non_closure
 23312 000113BA FF7001                  	push SOB_CLOSURE_ENV(rax)
 23313 000113BD FF5009                  	call SOB_CLOSURE_CODE(rax)
 23314 000113C0 483D[02000000]          	cmp rax, sob_boolean_false
 23315 000113C6 744C                    	je .L_if_else_0102
 23316                                  	; preparing a non-tail-call
 23317                                  	; preparing a non-tail-call
 23318 000113C8 488B4528                	mov rax, PARAM(1)	; param xs
 23319 000113CC 50                      	push rax
 23320 000113CD 6A01                    	push 1	; arg count
 23321 000113CF 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
 23322 000113D7 803805                  	cmp byte [rax], T_undefined
 23323 000113DA 0F84276B0000            	je L_error_fvar_undefined
 23324 000113E0 803804                  	cmp byte [rax], T_closure
 23325 000113E3 0F85A26B0000            	jne L_error_non_closure
 23326 000113E9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23327 000113EC FF5009                  	call SOB_CLOSURE_CODE(rax)
 23328 000113EF 50                      	push rax
 23329 000113F0 6A01                    	push 1	; arg count
 23330 000113F2 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 23331 000113FA 803805                  	cmp byte [rax], T_undefined
 23332 000113FD 0F84046B0000            	je L_error_fvar_undefined
 23333 00011403 803804                  	cmp byte [rax], T_closure
 23334 00011406 0F857F6B0000            	jne L_error_non_closure
 23335 0001140C FF7001                  	push SOB_CLOSURE_ENV(rax)
 23336 0001140F FF5009                  	call SOB_CLOSURE_CODE(rax)
 23337 00011412 EB0A                    	jmp .L_if_end_0102
 23338                                  .L_if_else_0102:
 23339 00011414 48B8-                   	mov rax, L_constants + 2
 23339 00011416 [0200000000000000] 
 23340                                  .L_if_end_0102:
 23341 0001141E 483D[02000000]          	cmp rax, sob_boolean_false
 23342 00011424 7429                    	je .L_if_else_0103
 23343                                  	; preparing a non-tail-call
 23344 00011426 488B4528                	mov rax, PARAM(1)	; param xs
 23345 0001142A 50                      	push rax
 23346 0001142B 6A01                    	push 1	; arg count
 23347 0001142D 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 23348 00011435 803805                  	cmp byte [rax], T_undefined
 23349 00011438 0F84C96A0000            	je L_error_fvar_undefined
 23350 0001143E 803804                  	cmp byte [rax], T_closure
 23351 00011441 0F85446B0000            	jne L_error_non_closure
 23352 00011447 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23353 0001144A FF5009                  	call SOB_CLOSURE_CODE(rax)
 23354 0001144D EB38                    	jmp .L_if_end_0103
 23355                                  .L_if_else_0103:
 23356                                  	; preparing a non-tail-call
 23357 0001144F 48B8-                   	mov rax, L_constants + 2955
 23357 00011451 [8B0B000000000000] 
 23358 00011459 50                      	push rax
 23359 0001145A 48B8-                   	mov rax, L_constants + 2946
 23359 0001145C [820B000000000000] 
 23360 00011464 50                      	push rax
 23361 00011465 6A02                    	push 2	; arg count
 23362 00011467 488B0425[49130000]      	mov rax, qword [free_var_82]	; free var error
 23363 0001146F 803805                  	cmp byte [rax], T_undefined
 23364 00011472 0F848F6A0000            	je L_error_fvar_undefined
 23365 00011478 803804                  	cmp byte [rax], T_closure
 23366 0001147B 0F850A6B0000            	jne L_error_non_closure
 23367 00011481 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23368 00011484 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23369                                  .L_if_end_0103:
 23370                                  .L_if_end_0104:
 23371 00011487 50                      	push rax
 23372 00011488 6A01                    	push 1	; arg count
 23373 0001148A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23374 0001148F E8A06B0000              	call malloc
 23375 00011494 50                      	push rax
 23376 00011495 BF10000000              	mov rdi, 8 * 2	; new rib
 23377 0001149A E8956B0000              	call malloc
 23378 0001149F 50                      	push rax
 23379 000114A0 BF18000000              	mov rdi, 8 * 3	; extended env
 23380 000114A5 E88A6B0000              	call malloc
 23381 000114AA 488B7D10                	mov rdi, ENV
 23382 000114AE BE00000000              	mov rsi, 0
 23383 000114B3 BA01000000              	mov rdx, 1
 23384                                  .L_lambda_simple_env_loop_014b:	; ext_env[i + 1] <-- env[i]
 23385 000114B8 4883FE02                	cmp rsi, 2
 23386 000114BC 7410                    	je .L_lambda_simple_env_end_014b
 23387 000114BE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23388 000114C2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23389 000114C6 48FFC6                  	inc rsi
 23390 000114C9 48FFC2                  	inc rdx
 23391 000114CC EBEA                    	jmp .L_lambda_simple_env_loop_014b
 23392                                  .L_lambda_simple_env_end_014b:
 23393 000114CE 5B                      	pop rbx
 23394 000114CF BE00000000              	mov rsi, 0
 23395                                  .L_lambda_simple_params_loop_014b:	; copy params
 23396 000114D4 4883FE02                	cmp rsi, 2
 23397 000114D8 740E                    	je .L_lambda_simple_params_end_014b
 23398 000114DA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23399 000114DF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23400 000114E3 48FFC6                  	inc rsi
 23401 000114E6 EBEC                    	jmp .L_lambda_simple_params_loop_014b
 23402                                  .L_lambda_simple_params_end_014b:
 23403 000114E8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23404 000114EB 4889C3                  	mov rbx, rax
 23405 000114EE 58                      	pop rax
 23406 000114EF C60004                  	mov byte [rax], T_closure
 23407 000114F2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23408 000114F6 48C74009[03150100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_014b
 23409 000114FE E98C000000              	jmp .L_lambda_simple_end_014b
 23410                                  .L_lambda_simple_code_014b:	; lambda-simple body
 23411 00011503 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23412 00011509 740B                    	je .L_lambda_simple_arity_check_ok_014b
 23413 0001150B FF742410                	push qword [rsp + 8 * 2]
 23414 0001150F 6A01                    	push 1
 23415 00011511 E9D76A0000              	jmp L_error_incorrect_arity_simple
 23416                                  .L_lambda_simple_arity_check_ok_014b:
 23417 00011516 C8000000                	enter 0, 0
 23418                                  	; preparing a tail-call
 23419 0001151A 488B4520                	mov rax, PARAM(0)	; param x
 23420 0001151E 50                      	push rax
 23421 0001151F 488B4510                	mov rax, ENV
 23422 00011523 488B00                  	mov rax, qword [rax + 8 * 0]
 23423 00011526 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 23424 00011529 50                      	push rax
 23425 0001152A 6A02                    	push 2	; arg count
 23426 0001152C 488B4510                	mov rax, ENV
 23427 00011530 488B4008                	mov rax, qword [rax + 8 * 1]
 23428 00011534 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var asm-make-vector
 23429 00011537 803804                  	cmp byte [rax], T_closure
 23430 0001153A 0F854B6A0000            	jne L_error_non_closure
 23431 00011540 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23432 00011543 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 23433 00011546 FF7500                  	push qword[rbp]
 23434 00011549 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 23435 0001154C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 23436 00011550 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 23437 00011554 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 23438 00011558 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 23439 0001155B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 23440 0001155E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 23441 00011563 4983C103                	add r9, 3 	 ;for getting to the params
 23442 00011567 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 23443 0001156B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 23444                                  .L_tc_recycle_frame_loop_01e7:
 23445 0001156E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 23446 00011571 7410                    	je .L_tc_recycle_frame_done_01e7
 23447 00011573 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 23448 00011576 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 23449 00011579 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 23450 0001157D 4983E808                	sub r8, 8	 ;move the top of the stack one down
 23451 00011581 EBEB                    	jmp .L_tc_recycle_frame_loop_01e7
 23452                                  .L_tc_recycle_frame_done_01e7:
 23453 00011583 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 23454 00011584 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 23455 00011588 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23456 0001158B C9                      	leave
 23457 0001158C C21800                  	ret AND_KILL_FRAME(1)
 23458                                  .L_lambda_simple_end_014b:	; new closure is in rax
 23459 0001158F 803804                  	cmp byte [rax], T_closure
 23460 00011592 0F85F3690000            	jne L_error_non_closure
 23461 00011598 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23462 0001159B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 23463 0001159E FF7500                  	push qword[rbp]
 23464 000115A1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 23465 000115A4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 23466 000115A8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 23467 000115AC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 23468 000115B0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 23469 000115B3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 23470 000115B6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 23471 000115BB 4983C103                	add r9, 3 	 ;for getting to the params
 23472 000115BF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 23473 000115C3 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 23474                                  .L_tc_recycle_frame_loop_01e8:
 23475 000115C6 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 23476 000115C9 7410                    	je .L_tc_recycle_frame_done_01e8
 23477 000115CB 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 23478 000115CE 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 23479 000115D1 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 23480 000115D5 4983E808                	sub r8, 8	 ;move the top of the stack one down
 23481 000115D9 EBEB                    	jmp .L_tc_recycle_frame_loop_01e8
 23482                                  .L_tc_recycle_frame_done_01e8:
 23483 000115DB 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 23484 000115DC 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 23485 000115E0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23486 000115E3 C9                      	leave
 23487 000115E4 C22000                  	ret AND_KILL_FRAME(2)
 23488 000115E7 E955030000              	jmp .L_lambda_opt_end_002c	; new closure is in rax
 23489                                  .L_lambda_opt_arity_check_more_002c:
 23490 000115EC 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 23491 000115F1 49B9-                   	mov r9, sob_nil
 23491 000115F3 [0100000000000000] 
 23492 000115FB 4889E3                  	mov rbx, rsp 
 23493 000115FE 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 23494 00011602 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 23495 00011605 49C1E003                	shl r8, 3
 23496 00011609 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 23497 0001160C 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 23498                                  .L_lambda_opt_stack_shrink_loop_002c:
 23499 00011611 4983F801                	cmp r8, 1
 23500 00011615 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_002c
 23501 00011617 BF11000000              	mov rdi, 1+8+8 ;for pair
 23502 0001161C E8136A0000              	call malloc;to create the pair in the stack
 23503 00011621 C60021                  	mov byte [rax], T_pair ; to make it a pair
 23504 00011624 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
 23505 00011627 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 23506 0001162B 4C894809                 	mov qword[rax+1+8],r9
 23507 0001162F 4989C1                  	mov r9, rax ;for the recursion 
 23508 00011632 49FFC8                  	dec r8 ;we finished copy another opt param to the list
 23509 00011635 4883EB08                	sub rbx, 8 ;to get the next param to copy
 23510 00011639 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_002c
 23511                                  .L_lambda_opt_stack_shrink_loop_exit_002c:
 23512 0001163B 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
 23513 00011640 4883E902                	sub rcx, 2
 23514 00011644 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
 23515 00011648 4801CC                  	add rsp, rcx ;shrinking the stack
 23516 0001164B 4889E0                  	mov rax, rsp
 23517 0001164E 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
 23518 00011651 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
 23519 00011655 49FFC8                  	dec r8 ;we start with param 0, not 1 
 23520 00011658 4883C018                	add rax, 3 * 8;now rax is param 0
 23521 0001165C 49C1E003                	shl r8, 3;convert to byte
 23522 00011660 4C01C0                  	add rax, r8;now rax is the top of the stack
 23523 00011663 4C8908                  	mov qword[rax], r9;puting the list at the top
 23524 00011666 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
 23525 0001166A 4889E3                  	mov rbx, rsp 
 23526 0001166D 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
 23527 00011670 41BA01000000            	mov r10, 1;r10 is the not opt params length
 23528 00011676 49FFCA                  	dec r10 
 23529 00011679 49C1E203                	shl r10, 3;to get bytes
 23530 0001167D 4883C318                	add rbx, 3*8;rbx is the first param
 23531 00011681 4C01D3                  	add rbx, r10; rbx is where the address to copy to
 23532 00011684 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
 23533 00011687 4C8900                  	mov qword[rax], r8
 23534 0001168A 4883E808                	sub rax, 8
 23535 0001168E 4883EB08                	sub rbx, 8
 23536 00011692 4889E0                  	mov rax, rsp
 23537 00011695 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 23538 00011698 48C744241002000000      	mov qword [rsp+2*8], 2
 23539 000116A1 488B5808                	mov rbx, qword[rax + 8 *1]
 23540 000116A5 48895C2408              	mov qword [rsp + 1*8] ,rbx
 23541 000116AA 488B18                  	mov rbx, qword[rax]
 23542 000116AD 48891C24                	mov qword [rsp], rbx
 23543 000116B1 C8000000                	enter 0, 0
 23544                                  	; preparing a tail-call
 23545                                  	; preparing a non-tail-call
 23546 000116B5 488B4528                	mov rax, PARAM(1)	; param xs
 23547 000116B9 50                      	push rax
 23548 000116BA 6A01                    	push 1	; arg count
 23549 000116BC 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 23550 000116C4 803805                  	cmp byte [rax], T_undefined
 23551 000116C7 0F843A680000            	je L_error_fvar_undefined
 23552 000116CD 803804                  	cmp byte [rax], T_closure
 23553 000116D0 0F85B5680000            	jne L_error_non_closure
 23554 000116D6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23555 000116D9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23556 000116DC 483D[02000000]          	cmp rax, sob_boolean_false
 23557 000116E2 740F                    	je .L_if_else_0101
 23558 000116E4 48B8-                   	mov rax, L_constants + 0
 23558 000116E6 [0000000000000000] 
 23559 000116EE E9EE000000              	jmp .L_if_end_0101
 23560                                  .L_if_else_0101:
 23561                                  	; preparing a non-tail-call
 23562 000116F3 488B4528                	mov rax, PARAM(1)	; param xs
 23563 000116F7 50                      	push rax
 23564 000116F8 6A01                    	push 1	; arg count
 23565 000116FA 488B0425[36150000]      	mov rax, qword [free_var_111]	; free var pair?
 23566 00011702 803805                  	cmp byte [rax], T_undefined
 23567 00011705 0F84FC670000            	je L_error_fvar_undefined
 23568 0001170B 803804                  	cmp byte [rax], T_closure
 23569 0001170E 0F8577680000            	jne L_error_non_closure
 23570 00011714 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23571 00011717 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23572 0001171A 483D[02000000]          	cmp rax, sob_boolean_false
 23573 00011720 744C                    	je .L_if_else_00ff
 23574                                  	; preparing a non-tail-call
 23575                                  	; preparing a non-tail-call
 23576 00011722 488B4528                	mov rax, PARAM(1)	; param xs
 23577 00011726 50                      	push rax
 23578 00011727 6A01                    	push 1	; arg count
 23579 00011729 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
 23580 00011731 803805                  	cmp byte [rax], T_undefined
 23581 00011734 0F84CD670000            	je L_error_fvar_undefined
 23582 0001173A 803804                  	cmp byte [rax], T_closure
 23583 0001173D 0F8548680000            	jne L_error_non_closure
 23584 00011743 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23585 00011746 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23586 00011749 50                      	push rax
 23587 0001174A 6A01                    	push 1	; arg count
 23588 0001174C 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 23589 00011754 803805                  	cmp byte [rax], T_undefined
 23590 00011757 0F84AA670000            	je L_error_fvar_undefined
 23591 0001175D 803804                  	cmp byte [rax], T_closure
 23592 00011760 0F8525680000            	jne L_error_non_closure
 23593 00011766 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23594 00011769 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23595 0001176C EB0A                    	jmp .L_if_end_00ff
 23596                                  .L_if_else_00ff:
 23597 0001176E 48B8-                   	mov rax, L_constants + 2
 23597 00011770 [0200000000000000] 
 23598                                  .L_if_end_00ff:
 23599 00011778 483D[02000000]          	cmp rax, sob_boolean_false
 23600 0001177E 7429                    	je .L_if_else_0100
 23601                                  	; preparing a non-tail-call
 23602 00011780 488B4528                	mov rax, PARAM(1)	; param xs
 23603 00011784 50                      	push rax
 23604 00011785 6A01                    	push 1	; arg count
 23605 00011787 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 23606 0001178F 803805                  	cmp byte [rax], T_undefined
 23607 00011792 0F846F670000            	je L_error_fvar_undefined
 23608 00011798 803804                  	cmp byte [rax], T_closure
 23609 0001179B 0F85EA670000            	jne L_error_non_closure
 23610 000117A1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23611 000117A4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23612 000117A7 EB38                    	jmp .L_if_end_0100
 23613                                  .L_if_else_0100:
 23614                                  	; preparing a non-tail-call
 23615 000117A9 48B8-                   	mov rax, L_constants + 2955
 23615 000117AB [8B0B000000000000] 
 23616 000117B3 50                      	push rax
 23617 000117B4 48B8-                   	mov rax, L_constants + 2946
 23617 000117B6 [820B000000000000] 
 23618 000117BE 50                      	push rax
 23619 000117BF 6A02                    	push 2	; arg count
 23620 000117C1 488B0425[49130000]      	mov rax, qword [free_var_82]	; free var error
 23621 000117C9 803805                  	cmp byte [rax], T_undefined
 23622 000117CC 0F8435670000            	je L_error_fvar_undefined
 23623 000117D2 803804                  	cmp byte [rax], T_closure
 23624 000117D5 0F85B0670000            	jne L_error_non_closure
 23625 000117DB FF7001                  	push SOB_CLOSURE_ENV(rax)
 23626 000117DE FF5009                  	call SOB_CLOSURE_CODE(rax)
 23627                                  .L_if_end_0100:
 23628                                  .L_if_end_0101:
 23629 000117E1 50                      	push rax
 23630 000117E2 6A01                    	push 1	; arg count
 23631 000117E4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23632 000117E9 E846680000              	call malloc
 23633 000117EE 50                      	push rax
 23634 000117EF BF10000000              	mov rdi, 8 * 2	; new rib
 23635 000117F4 E83B680000              	call malloc
 23636 000117F9 50                      	push rax
 23637 000117FA BF18000000              	mov rdi, 8 * 3	; extended env
 23638 000117FF E830680000              	call malloc
 23639 00011804 488B7D10                	mov rdi, ENV
 23640 00011808 BE00000000              	mov rsi, 0
 23641 0001180D BA01000000              	mov rdx, 1
 23642                                  .L_lambda_simple_env_loop_014a:	; ext_env[i + 1] <-- env[i]
 23643 00011812 4883FE02                	cmp rsi, 2
 23644 00011816 7410                    	je .L_lambda_simple_env_end_014a
 23645 00011818 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23646 0001181C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23647 00011820 48FFC6                  	inc rsi
 23648 00011823 48FFC2                  	inc rdx
 23649 00011826 EBEA                    	jmp .L_lambda_simple_env_loop_014a
 23650                                  .L_lambda_simple_env_end_014a:
 23651 00011828 5B                      	pop rbx
 23652 00011829 BE00000000              	mov rsi, 0
 23653                                  .L_lambda_simple_params_loop_014a:	; copy params
 23654 0001182E 4883FE02                	cmp rsi, 2
 23655 00011832 740E                    	je .L_lambda_simple_params_end_014a
 23656 00011834 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23657 00011839 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23658 0001183D 48FFC6                  	inc rsi
 23659 00011840 EBEC                    	jmp .L_lambda_simple_params_loop_014a
 23660                                  .L_lambda_simple_params_end_014a:
 23661 00011842 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23662 00011845 4889C3                  	mov rbx, rax
 23663 00011848 58                      	pop rax
 23664 00011849 C60004                  	mov byte [rax], T_closure
 23665 0001184C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23666 00011850 48C74009[5D180100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_014a
 23667 00011858 E98C000000              	jmp .L_lambda_simple_end_014a
 23668                                  .L_lambda_simple_code_014a:	; lambda-simple body
 23669 0001185D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23670 00011863 740B                    	je .L_lambda_simple_arity_check_ok_014a
 23671 00011865 FF742410                	push qword [rsp + 8 * 2]
 23672 00011869 6A01                    	push 1
 23673 0001186B E97D670000              	jmp L_error_incorrect_arity_simple
 23674                                  .L_lambda_simple_arity_check_ok_014a:
 23675 00011870 C8000000                	enter 0, 0
 23676                                  	; preparing a tail-call
 23677 00011874 488B4520                	mov rax, PARAM(0)	; param x
 23678 00011878 50                      	push rax
 23679 00011879 488B4510                	mov rax, ENV
 23680 0001187D 488B00                  	mov rax, qword [rax + 8 * 0]
 23681 00011880 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 23682 00011883 50                      	push rax
 23683 00011884 6A02                    	push 2	; arg count
 23684 00011886 488B4510                	mov rax, ENV
 23685 0001188A 488B4008                	mov rax, qword [rax + 8 * 1]
 23686 0001188E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var asm-make-vector
 23687 00011891 803804                  	cmp byte [rax], T_closure
 23688 00011894 0F85F1660000            	jne L_error_non_closure
 23689 0001189A FF7001                  	push SOB_CLOSURE_ENV(rax)
 23690 0001189D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 23691 000118A0 FF7500                  	push qword[rbp]
 23692 000118A3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 23693 000118A6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 23694 000118AA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 23695 000118AE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 23696 000118B2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 23697 000118B5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 23698 000118B8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 23699 000118BD 4983C103                	add r9, 3 	 ;for getting to the params
 23700 000118C1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 23701 000118C5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 23702                                  .L_tc_recycle_frame_loop_01e5:
 23703 000118C8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 23704 000118CB 7410                    	je .L_tc_recycle_frame_done_01e5
 23705 000118CD 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 23706 000118D0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 23707 000118D3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 23708 000118D7 4983E808                	sub r8, 8	 ;move the top of the stack one down
 23709 000118DB EBEB                    	jmp .L_tc_recycle_frame_loop_01e5
 23710                                  .L_tc_recycle_frame_done_01e5:
 23711 000118DD 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 23712 000118DE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 23713 000118E2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23714 000118E5 C9                      	leave
 23715 000118E6 C21800                  	ret AND_KILL_FRAME(1)
 23716                                  .L_lambda_simple_end_014a:	; new closure is in rax
 23717 000118E9 803804                  	cmp byte [rax], T_closure
 23718 000118EC 0F8599660000            	jne L_error_non_closure
 23719 000118F2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23720 000118F5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 23721 000118F8 FF7500                  	push qword[rbp]
 23722 000118FB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 23723 000118FE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 23724 00011902 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 23725 00011906 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 23726 0001190A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 23727 0001190D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 23728 00011910 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 23729 00011915 4983C103                	add r9, 3 	 ;for getting to the params
 23730 00011919 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 23731 0001191D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 23732                                  .L_tc_recycle_frame_loop_01e6:
 23733 00011920 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 23734 00011923 7410                    	je .L_tc_recycle_frame_done_01e6
 23735 00011925 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 23736 00011928 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 23737 0001192B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 23738 0001192F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 23739 00011933 EBEB                    	jmp .L_tc_recycle_frame_loop_01e6
 23740                                  .L_tc_recycle_frame_done_01e6:
 23741 00011935 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 23742 00011936 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 23743 0001193A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23744 0001193D C9                      	leave
 23745 0001193E C22000                  	ret AND_KILL_FRAME(2)
 23746                                  .L_lambda_opt_end_002c:	; new closure is in rax
 23747 00011941 C9                      	leave
 23748 00011942 C21800                  	ret AND_KILL_FRAME(1)
 23749                                  .L_lambda_simple_end_0149:	; new closure is in rax
 23750 00011945 803804                  	cmp byte [rax], T_closure
 23751 00011948 0F853D660000            	jne L_error_non_closure
 23752 0001194E FF7001                  	push SOB_CLOSURE_ENV(rax)
 23753 00011951 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23754 00011954 48890425[8C140000]      	mov qword [free_var_101], rax
 23755 0001195C 48B8-                   	mov rax, sob_void
 23755 0001195E [0000000000000000] 
 23756                                  
 23757 00011966 4889C7                  	mov rdi, rax
 23758 00011969 E81B690000              	call print_sexpr_if_not_void
 23759                                  	; preparing a non-tail-call
 23760 0001196E 488B0425[6A140000]      	mov rax, qword [free_var_99]	; free var make-string
 23761 00011976 803805                  	cmp byte [rax], T_undefined
 23762 00011979 0F8488650000            	je L_error_fvar_undefined
 23763 0001197F 50                      	push rax
 23764 00011980 6A01                    	push 1	; arg count
 23765 00011982 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23766 00011987 E8A8660000              	call malloc
 23767 0001198C 50                      	push rax
 23768 0001198D BF00000000              	mov rdi, 8 * 0	; new rib
 23769 00011992 E89D660000              	call malloc
 23770 00011997 50                      	push rax
 23771 00011998 BF08000000              	mov rdi, 8 * 1	; extended env
 23772 0001199D E892660000              	call malloc
 23773 000119A2 488B7D10                	mov rdi, ENV
 23774 000119A6 BE00000000              	mov rsi, 0
 23775 000119AB BA01000000              	mov rdx, 1
 23776                                  .L_lambda_simple_env_loop_014c:	; ext_env[i + 1] <-- env[i]
 23777 000119B0 4883FE00                	cmp rsi, 0
 23778 000119B4 7410                    	je .L_lambda_simple_env_end_014c
 23779 000119B6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23780 000119BA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23781 000119BE 48FFC6                  	inc rsi
 23782 000119C1 48FFC2                  	inc rdx
 23783 000119C4 EBEA                    	jmp .L_lambda_simple_env_loop_014c
 23784                                  .L_lambda_simple_env_end_014c:
 23785 000119C6 5B                      	pop rbx
 23786 000119C7 BE00000000              	mov rsi, 0
 23787                                  .L_lambda_simple_params_loop_014c:	; copy params
 23788 000119CC 4883FE00                	cmp rsi, 0
 23789 000119D0 740E                    	je .L_lambda_simple_params_end_014c
 23790 000119D2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23791 000119D7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23792 000119DB 48FFC6                  	inc rsi
 23793 000119DE EBEC                    	jmp .L_lambda_simple_params_loop_014c
 23794                                  .L_lambda_simple_params_end_014c:
 23795 000119E0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23796 000119E3 4889C3                  	mov rbx, rax
 23797 000119E6 58                      	pop rax
 23798 000119E7 C60004                  	mov byte [rax], T_closure
 23799 000119EA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23800 000119EE 48C74009[FB190100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_014c
 23801 000119F6 E9D1060000              	jmp .L_lambda_simple_end_014c
 23802                                  .L_lambda_simple_code_014c:	; lambda-simple body
 23803 000119FB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23804 00011A01 740B                    	je .L_lambda_simple_arity_check_ok_014c
 23805 00011A03 FF742410                	push qword [rsp + 8 * 2]
 23806 00011A07 6A01                    	push 1
 23807 00011A09 E9DF650000              	jmp L_error_incorrect_arity_simple
 23808                                  .L_lambda_simple_arity_check_ok_014c:
 23809 00011A0E C8000000                	enter 0, 0
 23810 00011A12 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23811 00011A17 E818660000              	call malloc
 23812 00011A1C 50                      	push rax
 23813 00011A1D BF08000000              	mov rdi, 8 * 1	; new rib
 23814 00011A22 E80D660000              	call malloc
 23815 00011A27 50                      	push rax
 23816 00011A28 BF10000000              	mov rdi, 8 * 2	; extended env
 23817 00011A2D E802660000              	call malloc
 23818 00011A32 488B7D10                	mov rdi, ENV
 23819 00011A36 BE00000000              	mov rsi, 0
 23820 00011A3B BA01000000              	mov rdx, 1
 23821                                  .L_lambda_opt_env_loop_002d:	; ext_env[i + 1] <-- env[i]
 23822 00011A40 4883FE01                	cmp rsi, 1
 23823 00011A44 7410                    	je .L_lambda_opt_env_end_002d
 23824 00011A46 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23825 00011A4A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23826 00011A4E 48FFC6                  	inc rsi
 23827 00011A51 48FFC2                  	inc rdx
 23828 00011A54 EBEA                    	jmp .L_lambda_opt_env_loop_002d
 23829                                  .L_lambda_opt_env_end_002d:
 23830 00011A56 5B                      	pop rbx
 23831 00011A57 BE00000000              	mov rsi, 0
 23832                                  .L_lambda_opt_params_loop_002d:	; copy params
 23833 00011A5C 4883FE01                	cmp rsi, 1
 23834 00011A60 740E                    	je .L_lambda_opt_params_end_002d
 23835 00011A62 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23836 00011A67 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23837 00011A6B 48FFC6                  	inc rsi
 23838 00011A6E EBEC                    	jmp .L_lambda_opt_params_loop_002d
 23839                                  .L_lambda_opt_params_end_002d:
 23840 00011A70 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
 23841 00011A73 4889C3                  	mov rbx, rax
 23842 00011A76 58                      	pop rax
 23843 00011A77 C60004                  	mov byte [rax], T_closure
 23844 00011A7A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23845 00011A7E 48C74009[8B1A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_002d
 23846 00011A86 E93D060000              	jmp .L_lambda_opt_end_002d
 23847                                  .L_lambda_opt_code_002d:	; lambda-opt body
 23848 00011A8B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23849 00011A91 7411                    	je .L_lambda_opt_arity_check_exact_002d
 23850 00011A93 0F8FDA020000            	jg .L_lambda_opt_arity_check_more_002d
 23851 00011A99 FF742410                	push qword [rsp + 8 * 2]
 23852 00011A9D 6A01                    	push 1
 23853 00011A9F E95D650000              	jmp L_error_incorrect_arity_opt
 23854                                  .L_lambda_opt_arity_check_exact_002d:
 23855 00011AA4 4883EC08                	sub rsp, 8
 23856 00011AA8 488B442408              	mov rax, qword[rsp + 8 *1]
 23857 00011AAD 48890424                	mov qword[rsp], rax  
 23858 00011AB1 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 23859 00011AB6 4889442408              	mov qword[rsp + 8 * 1], rax
 23860 00011ABB B802000000              	mov rax, 2
 23861 00011AC0 4889442410              	mov qword[rsp + 8 *2], rax
 23862 00011AC5 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
 23863 00011ACA 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 23864 00011ACF 48B8-                   	mov rax, sob_nil
 23864 00011AD1 [0100000000000000] 
 23865 00011AD9 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
 23866 00011ADE C8000000                	enter 0, 0
 23867                                  	; preparing a tail-call
 23868                                  	; preparing a non-tail-call
 23869 00011AE2 488B4528                	mov rax, PARAM(1)	; param chs
 23870 00011AE6 50                      	push rax
 23871 00011AE7 6A01                    	push 1	; arg count
 23872 00011AE9 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 23873 00011AF1 803805                  	cmp byte [rax], T_undefined
 23874 00011AF4 0F840D640000            	je L_error_fvar_undefined
 23875 00011AFA 803804                  	cmp byte [rax], T_closure
 23876 00011AFD 0F8588640000            	jne L_error_non_closure
 23877 00011B03 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23878 00011B06 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23879 00011B09 483D[02000000]          	cmp rax, sob_boolean_false
 23880 00011B0F 740F                    	je .L_if_else_010a
 23881 00011B11 48B8-                   	mov rax, L_constants + 4
 23881 00011B13 [0400000000000000] 
 23882 00011B1B E9EE000000              	jmp .L_if_end_010a
 23883                                  .L_if_else_010a:
 23884                                  	; preparing a non-tail-call
 23885 00011B20 488B4528                	mov rax, PARAM(1)	; param chs
 23886 00011B24 50                      	push rax
 23887 00011B25 6A01                    	push 1	; arg count
 23888 00011B27 488B0425[36150000]      	mov rax, qword [free_var_111]	; free var pair?
 23889 00011B2F 803805                  	cmp byte [rax], T_undefined
 23890 00011B32 0F84CF630000            	je L_error_fvar_undefined
 23891 00011B38 803804                  	cmp byte [rax], T_closure
 23892 00011B3B 0F854A640000            	jne L_error_non_closure
 23893 00011B41 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23894 00011B44 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23895 00011B47 483D[02000000]          	cmp rax, sob_boolean_false
 23896 00011B4D 744C                    	je .L_if_else_0108
 23897                                  	; preparing a non-tail-call
 23898                                  	; preparing a non-tail-call
 23899 00011B4F 488B4528                	mov rax, PARAM(1)	; param chs
 23900 00011B53 50                      	push rax
 23901 00011B54 6A01                    	push 1	; arg count
 23902 00011B56 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
 23903 00011B5E 803805                  	cmp byte [rax], T_undefined
 23904 00011B61 0F84A0630000            	je L_error_fvar_undefined
 23905 00011B67 803804                  	cmp byte [rax], T_closure
 23906 00011B6A 0F851B640000            	jne L_error_non_closure
 23907 00011B70 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23908 00011B73 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23909 00011B76 50                      	push rax
 23910 00011B77 6A01                    	push 1	; arg count
 23911 00011B79 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 23912 00011B81 803805                  	cmp byte [rax], T_undefined
 23913 00011B84 0F847D630000            	je L_error_fvar_undefined
 23914 00011B8A 803804                  	cmp byte [rax], T_closure
 23915 00011B8D 0F85F8630000            	jne L_error_non_closure
 23916 00011B93 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23917 00011B96 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23918 00011B99 EB0A                    	jmp .L_if_end_0108
 23919                                  .L_if_else_0108:
 23920 00011B9B 48B8-                   	mov rax, L_constants + 2
 23920 00011B9D [0200000000000000] 
 23921                                  .L_if_end_0108:
 23922 00011BA5 483D[02000000]          	cmp rax, sob_boolean_false
 23923 00011BAB 7429                    	je .L_if_else_0109
 23924                                  	; preparing a non-tail-call
 23925 00011BAD 488B4528                	mov rax, PARAM(1)	; param chs
 23926 00011BB1 50                      	push rax
 23927 00011BB2 6A01                    	push 1	; arg count
 23928 00011BB4 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 23929 00011BBC 803805                  	cmp byte [rax], T_undefined
 23930 00011BBF 0F8442630000            	je L_error_fvar_undefined
 23931 00011BC5 803804                  	cmp byte [rax], T_closure
 23932 00011BC8 0F85BD630000            	jne L_error_non_closure
 23933 00011BCE FF7001                  	push SOB_CLOSURE_ENV(rax)
 23934 00011BD1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23935 00011BD4 EB38                    	jmp .L_if_end_0109
 23936                                  .L_if_else_0109:
 23937                                  	; preparing a non-tail-call
 23938 00011BD6 48B8-                   	mov rax, L_constants + 3016
 23938 00011BD8 [C80B000000000000] 
 23939 00011BE0 50                      	push rax
 23940 00011BE1 48B8-                   	mov rax, L_constants + 3007
 23940 00011BE3 [BF0B000000000000] 
 23941 00011BEB 50                      	push rax
 23942 00011BEC 6A02                    	push 2	; arg count
 23943 00011BEE 488B0425[49130000]      	mov rax, qword [free_var_82]	; free var error
 23944 00011BF6 803805                  	cmp byte [rax], T_undefined
 23945 00011BF9 0F8408630000            	je L_error_fvar_undefined
 23946 00011BFF 803804                  	cmp byte [rax], T_closure
 23947 00011C02 0F8583630000            	jne L_error_non_closure
 23948 00011C08 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23949 00011C0B FF5009                  	call SOB_CLOSURE_CODE(rax)
 23950                                  .L_if_end_0109:
 23951                                  .L_if_end_010a:
 23952 00011C0E 50                      	push rax
 23953 00011C0F 6A01                    	push 1	; arg count
 23954 00011C11 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23955 00011C16 E819640000              	call malloc
 23956 00011C1B 50                      	push rax
 23957 00011C1C BF10000000              	mov rdi, 8 * 2	; new rib
 23958 00011C21 E80E640000              	call malloc
 23959 00011C26 50                      	push rax
 23960 00011C27 BF18000000              	mov rdi, 8 * 3	; extended env
 23961 00011C2C E803640000              	call malloc
 23962 00011C31 488B7D10                	mov rdi, ENV
 23963 00011C35 BE00000000              	mov rsi, 0
 23964 00011C3A BA01000000              	mov rdx, 1
 23965                                  .L_lambda_simple_env_loop_014e:	; ext_env[i + 1] <-- env[i]
 23966 00011C3F 4883FE02                	cmp rsi, 2
 23967 00011C43 7410                    	je .L_lambda_simple_env_end_014e
 23968 00011C45 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23969 00011C49 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23970 00011C4D 48FFC6                  	inc rsi
 23971 00011C50 48FFC2                  	inc rdx
 23972 00011C53 EBEA                    	jmp .L_lambda_simple_env_loop_014e
 23973                                  .L_lambda_simple_env_end_014e:
 23974 00011C55 5B                      	pop rbx
 23975 00011C56 BE00000000              	mov rsi, 0
 23976                                  .L_lambda_simple_params_loop_014e:	; copy params
 23977 00011C5B 4883FE02                	cmp rsi, 2
 23978 00011C5F 740E                    	je .L_lambda_simple_params_end_014e
 23979 00011C61 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23980 00011C66 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23981 00011C6A 48FFC6                  	inc rsi
 23982 00011C6D EBEC                    	jmp .L_lambda_simple_params_loop_014e
 23983                                  .L_lambda_simple_params_end_014e:
 23984 00011C6F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23985 00011C72 4889C3                  	mov rbx, rax
 23986 00011C75 58                      	pop rax
 23987 00011C76 C60004                  	mov byte [rax], T_closure
 23988 00011C79 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23989 00011C7D 48C74009[8A1C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_014e
 23990 00011C85 E98C000000              	jmp .L_lambda_simple_end_014e
 23991                                  .L_lambda_simple_code_014e:	; lambda-simple body
 23992 00011C8A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23993 00011C90 740B                    	je .L_lambda_simple_arity_check_ok_014e
 23994 00011C92 FF742410                	push qword [rsp + 8 * 2]
 23995 00011C96 6A01                    	push 1
 23996 00011C98 E950630000              	jmp L_error_incorrect_arity_simple
 23997                                  .L_lambda_simple_arity_check_ok_014e:
 23998 00011C9D C8000000                	enter 0, 0
 23999                                  	; preparing a tail-call
 24000 00011CA1 488B4520                	mov rax, PARAM(0)	; param ch
 24001 00011CA5 50                      	push rax
 24002 00011CA6 488B4510                	mov rax, ENV
 24003 00011CAA 488B00                  	mov rax, qword [rax + 8 * 0]
 24004 00011CAD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 24005 00011CB0 50                      	push rax
 24006 00011CB1 6A02                    	push 2	; arg count
 24007 00011CB3 488B4510                	mov rax, ENV
 24008 00011CB7 488B4008                	mov rax, qword [rax + 8 * 1]
 24009 00011CBB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var asm-make-string
 24010 00011CBE 803804                  	cmp byte [rax], T_closure
 24011 00011CC1 0F85C4620000            	jne L_error_non_closure
 24012 00011CC7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24013 00011CCA FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 24014 00011CCD FF7500                  	push qword[rbp]
 24015 00011CD0 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 24016 00011CD3 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 24017 00011CD7 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 24018 00011CDB 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 24019 00011CDF 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 24020 00011CE2 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 24021 00011CE5 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 24022 00011CEA 4983C103                	add r9, 3 	 ;for getting to the params
 24023 00011CEE 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 24024 00011CF2 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 24025                                  .L_tc_recycle_frame_loop_01eb:
 24026 00011CF5 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 24027 00011CF8 7410                    	je .L_tc_recycle_frame_done_01eb
 24028 00011CFA 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 24029 00011CFD 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 24030 00011D00 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 24031 00011D04 4983E808                	sub r8, 8	 ;move the top of the stack one down
 24032 00011D08 EBEB                    	jmp .L_tc_recycle_frame_loop_01eb
 24033                                  .L_tc_recycle_frame_done_01eb:
 24034 00011D0A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 24035 00011D0B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 24036 00011D0F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24037 00011D12 C9                      	leave
 24038 00011D13 C21800                  	ret AND_KILL_FRAME(1)
 24039                                  .L_lambda_simple_end_014e:	; new closure is in rax
 24040 00011D16 803804                  	cmp byte [rax], T_closure
 24041 00011D19 0F856C620000            	jne L_error_non_closure
 24042 00011D1F FF7001                  	push SOB_CLOSURE_ENV(rax)
 24043 00011D22 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 24044 00011D25 FF7500                  	push qword[rbp]
 24045 00011D28 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 24046 00011D2B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 24047 00011D2F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 24048 00011D33 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 24049 00011D37 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 24050 00011D3A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 24051 00011D3D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 24052 00011D42 4983C103                	add r9, 3 	 ;for getting to the params
 24053 00011D46 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 24054 00011D4A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 24055                                  .L_tc_recycle_frame_loop_01ec:
 24056 00011D4D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 24057 00011D50 7410                    	je .L_tc_recycle_frame_done_01ec
 24058 00011D52 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 24059 00011D55 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 24060 00011D58 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 24061 00011D5C 4983E808                	sub r8, 8	 ;move the top of the stack one down
 24062 00011D60 EBEB                    	jmp .L_tc_recycle_frame_loop_01ec
 24063                                  .L_tc_recycle_frame_done_01ec:
 24064 00011D62 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 24065 00011D63 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 24066 00011D67 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24067 00011D6A C9                      	leave
 24068 00011D6B C22000                  	ret AND_KILL_FRAME(2)
 24069 00011D6E E955030000              	jmp .L_lambda_opt_end_002d	; new closure is in rax
 24070                                  .L_lambda_opt_arity_check_more_002d:
 24071 00011D73 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 24072 00011D78 49B9-                   	mov r9, sob_nil
 24072 00011D7A [0100000000000000] 
 24073 00011D82 4889E3                  	mov rbx, rsp 
 24074 00011D85 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 24075 00011D89 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 24076 00011D8C 49C1E003                	shl r8, 3
 24077 00011D90 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 24078 00011D93 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 24079                                  .L_lambda_opt_stack_shrink_loop_002d:
 24080 00011D98 4983F801                	cmp r8, 1
 24081 00011D9C 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_002d
 24082 00011D9E BF11000000              	mov rdi, 1+8+8 ;for pair
 24083 00011DA3 E88C620000              	call malloc;to create the pair in the stack
 24084 00011DA8 C60021                  	mov byte [rax], T_pair ; to make it a pair
 24085 00011DAB 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
 24086 00011DAE 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 24087 00011DB2 4C894809                 	mov qword[rax+1+8],r9
 24088 00011DB6 4989C1                  	mov r9, rax ;for the recursion 
 24089 00011DB9 49FFC8                  	dec r8 ;we finished copy another opt param to the list
 24090 00011DBC 4883EB08                	sub rbx, 8 ;to get the next param to copy
 24091 00011DC0 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_002d
 24092                                  .L_lambda_opt_stack_shrink_loop_exit_002d:
 24093 00011DC2 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
 24094 00011DC7 4883E902                	sub rcx, 2
 24095 00011DCB 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
 24096 00011DCF 4801CC                  	add rsp, rcx ;shrinking the stack
 24097 00011DD2 4889E0                  	mov rax, rsp
 24098 00011DD5 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
 24099 00011DD8 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
 24100 00011DDC 49FFC8                  	dec r8 ;we start with param 0, not 1 
 24101 00011DDF 4883C018                	add rax, 3 * 8;now rax is param 0
 24102 00011DE3 49C1E003                	shl r8, 3;convert to byte
 24103 00011DE7 4C01C0                  	add rax, r8;now rax is the top of the stack
 24104 00011DEA 4C8908                  	mov qword[rax], r9;puting the list at the top
 24105 00011DED 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
 24106 00011DF1 4889E3                  	mov rbx, rsp 
 24107 00011DF4 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
 24108 00011DF7 41BA01000000            	mov r10, 1;r10 is the not opt params length
 24109 00011DFD 49FFCA                  	dec r10 
 24110 00011E00 49C1E203                	shl r10, 3;to get bytes
 24111 00011E04 4883C318                	add rbx, 3*8;rbx is the first param
 24112 00011E08 4C01D3                  	add rbx, r10; rbx is where the address to copy to
 24113 00011E0B 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
 24114 00011E0E 4C8900                  	mov qword[rax], r8
 24115 00011E11 4883E808                	sub rax, 8
 24116 00011E15 4883EB08                	sub rbx, 8
 24117 00011E19 4889E0                  	mov rax, rsp
 24118 00011E1C 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 24119 00011E1F 48C744241002000000      	mov qword [rsp+2*8], 2
 24120 00011E28 488B5808                	mov rbx, qword[rax + 8 *1]
 24121 00011E2C 48895C2408              	mov qword [rsp + 1*8] ,rbx
 24122 00011E31 488B18                  	mov rbx, qword[rax]
 24123 00011E34 48891C24                	mov qword [rsp], rbx
 24124 00011E38 C8000000                	enter 0, 0
 24125                                  	; preparing a tail-call
 24126                                  	; preparing a non-tail-call
 24127 00011E3C 488B4528                	mov rax, PARAM(1)	; param chs
 24128 00011E40 50                      	push rax
 24129 00011E41 6A01                    	push 1	; arg count
 24130 00011E43 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 24131 00011E4B 803805                  	cmp byte [rax], T_undefined
 24132 00011E4E 0F84B3600000            	je L_error_fvar_undefined
 24133 00011E54 803804                  	cmp byte [rax], T_closure
 24134 00011E57 0F852E610000            	jne L_error_non_closure
 24135 00011E5D FF7001                  	push SOB_CLOSURE_ENV(rax)
 24136 00011E60 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24137 00011E63 483D[02000000]          	cmp rax, sob_boolean_false
 24138 00011E69 740F                    	je .L_if_else_0107
 24139 00011E6B 48B8-                   	mov rax, L_constants + 4
 24139 00011E6D [0400000000000000] 
 24140 00011E75 E9EE000000              	jmp .L_if_end_0107
 24141                                  .L_if_else_0107:
 24142                                  	; preparing a non-tail-call
 24143 00011E7A 488B4528                	mov rax, PARAM(1)	; param chs
 24144 00011E7E 50                      	push rax
 24145 00011E7F 6A01                    	push 1	; arg count
 24146 00011E81 488B0425[36150000]      	mov rax, qword [free_var_111]	; free var pair?
 24147 00011E89 803805                  	cmp byte [rax], T_undefined
 24148 00011E8C 0F8475600000            	je L_error_fvar_undefined
 24149 00011E92 803804                  	cmp byte [rax], T_closure
 24150 00011E95 0F85F0600000            	jne L_error_non_closure
 24151 00011E9B FF7001                  	push SOB_CLOSURE_ENV(rax)
 24152 00011E9E FF5009                  	call SOB_CLOSURE_CODE(rax)
 24153 00011EA1 483D[02000000]          	cmp rax, sob_boolean_false
 24154 00011EA7 744C                    	je .L_if_else_0105
 24155                                  	; preparing a non-tail-call
 24156                                  	; preparing a non-tail-call
 24157 00011EA9 488B4528                	mov rax, PARAM(1)	; param chs
 24158 00011EAD 50                      	push rax
 24159 00011EAE 6A01                    	push 1	; arg count
 24160 00011EB0 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
 24161 00011EB8 803805                  	cmp byte [rax], T_undefined
 24162 00011EBB 0F8446600000            	je L_error_fvar_undefined
 24163 00011EC1 803804                  	cmp byte [rax], T_closure
 24164 00011EC4 0F85C1600000            	jne L_error_non_closure
 24165 00011ECA FF7001                  	push SOB_CLOSURE_ENV(rax)
 24166 00011ECD FF5009                  	call SOB_CLOSURE_CODE(rax)
 24167 00011ED0 50                      	push rax
 24168 00011ED1 6A01                    	push 1	; arg count
 24169 00011ED3 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 24170 00011EDB 803805                  	cmp byte [rax], T_undefined
 24171 00011EDE 0F8423600000            	je L_error_fvar_undefined
 24172 00011EE4 803804                  	cmp byte [rax], T_closure
 24173 00011EE7 0F859E600000            	jne L_error_non_closure
 24174 00011EED FF7001                  	push SOB_CLOSURE_ENV(rax)
 24175 00011EF0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24176 00011EF3 EB0A                    	jmp .L_if_end_0105
 24177                                  .L_if_else_0105:
 24178 00011EF5 48B8-                   	mov rax, L_constants + 2
 24178 00011EF7 [0200000000000000] 
 24179                                  .L_if_end_0105:
 24180 00011EFF 483D[02000000]          	cmp rax, sob_boolean_false
 24181 00011F05 7429                    	je .L_if_else_0106
 24182                                  	; preparing a non-tail-call
 24183 00011F07 488B4528                	mov rax, PARAM(1)	; param chs
 24184 00011F0B 50                      	push rax
 24185 00011F0C 6A01                    	push 1	; arg count
 24186 00011F0E 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 24187 00011F16 803805                  	cmp byte [rax], T_undefined
 24188 00011F19 0F84E85F0000            	je L_error_fvar_undefined
 24189 00011F1F 803804                  	cmp byte [rax], T_closure
 24190 00011F22 0F8563600000            	jne L_error_non_closure
 24191 00011F28 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24192 00011F2B FF5009                  	call SOB_CLOSURE_CODE(rax)
 24193 00011F2E EB38                    	jmp .L_if_end_0106
 24194                                  .L_if_else_0106:
 24195                                  	; preparing a non-tail-call
 24196 00011F30 48B8-                   	mov rax, L_constants + 3016
 24196 00011F32 [C80B000000000000] 
 24197 00011F3A 50                      	push rax
 24198 00011F3B 48B8-                   	mov rax, L_constants + 3007
 24198 00011F3D [BF0B000000000000] 
 24199 00011F45 50                      	push rax
 24200 00011F46 6A02                    	push 2	; arg count
 24201 00011F48 488B0425[49130000]      	mov rax, qword [free_var_82]	; free var error
 24202 00011F50 803805                  	cmp byte [rax], T_undefined
 24203 00011F53 0F84AE5F0000            	je L_error_fvar_undefined
 24204 00011F59 803804                  	cmp byte [rax], T_closure
 24205 00011F5C 0F8529600000            	jne L_error_non_closure
 24206 00011F62 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24207 00011F65 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24208                                  .L_if_end_0106:
 24209                                  .L_if_end_0107:
 24210 00011F68 50                      	push rax
 24211 00011F69 6A01                    	push 1	; arg count
 24212 00011F6B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24213 00011F70 E8BF600000              	call malloc
 24214 00011F75 50                      	push rax
 24215 00011F76 BF10000000              	mov rdi, 8 * 2	; new rib
 24216 00011F7B E8B4600000              	call malloc
 24217 00011F80 50                      	push rax
 24218 00011F81 BF18000000              	mov rdi, 8 * 3	; extended env
 24219 00011F86 E8A9600000              	call malloc
 24220 00011F8B 488B7D10                	mov rdi, ENV
 24221 00011F8F BE00000000              	mov rsi, 0
 24222 00011F94 BA01000000              	mov rdx, 1
 24223                                  .L_lambda_simple_env_loop_014d:	; ext_env[i + 1] <-- env[i]
 24224 00011F99 4883FE02                	cmp rsi, 2
 24225 00011F9D 7410                    	je .L_lambda_simple_env_end_014d
 24226 00011F9F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24227 00011FA3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24228 00011FA7 48FFC6                  	inc rsi
 24229 00011FAA 48FFC2                  	inc rdx
 24230 00011FAD EBEA                    	jmp .L_lambda_simple_env_loop_014d
 24231                                  .L_lambda_simple_env_end_014d:
 24232 00011FAF 5B                      	pop rbx
 24233 00011FB0 BE00000000              	mov rsi, 0
 24234                                  .L_lambda_simple_params_loop_014d:	; copy params
 24235 00011FB5 4883FE02                	cmp rsi, 2
 24236 00011FB9 740E                    	je .L_lambda_simple_params_end_014d
 24237 00011FBB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24238 00011FC0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24239 00011FC4 48FFC6                  	inc rsi
 24240 00011FC7 EBEC                    	jmp .L_lambda_simple_params_loop_014d
 24241                                  .L_lambda_simple_params_end_014d:
 24242 00011FC9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24243 00011FCC 4889C3                  	mov rbx, rax
 24244 00011FCF 58                      	pop rax
 24245 00011FD0 C60004                  	mov byte [rax], T_closure
 24246 00011FD3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24247 00011FD7 48C74009[E41F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_014d
 24248 00011FDF E98C000000              	jmp .L_lambda_simple_end_014d
 24249                                  .L_lambda_simple_code_014d:	; lambda-simple body
 24250 00011FE4 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24251 00011FEA 740B                    	je .L_lambda_simple_arity_check_ok_014d
 24252 00011FEC FF742410                	push qword [rsp + 8 * 2]
 24253 00011FF0 6A01                    	push 1
 24254 00011FF2 E9F65F0000              	jmp L_error_incorrect_arity_simple
 24255                                  .L_lambda_simple_arity_check_ok_014d:
 24256 00011FF7 C8000000                	enter 0, 0
 24257                                  	; preparing a tail-call
 24258 00011FFB 488B4520                	mov rax, PARAM(0)	; param ch
 24259 00011FFF 50                      	push rax
 24260 00012000 488B4510                	mov rax, ENV
 24261 00012004 488B00                  	mov rax, qword [rax + 8 * 0]
 24262 00012007 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 24263 0001200A 50                      	push rax
 24264 0001200B 6A02                    	push 2	; arg count
 24265 0001200D 488B4510                	mov rax, ENV
 24266 00012011 488B4008                	mov rax, qword [rax + 8 * 1]
 24267 00012015 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var asm-make-string
 24268 00012018 803804                  	cmp byte [rax], T_closure
 24269 0001201B 0F856A5F0000            	jne L_error_non_closure
 24270 00012021 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24271 00012024 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 24272 00012027 FF7500                  	push qword[rbp]
 24273 0001202A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 24274 0001202D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 24275 00012031 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 24276 00012035 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 24277 00012039 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 24278 0001203C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 24279 0001203F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 24280 00012044 4983C103                	add r9, 3 	 ;for getting to the params
 24281 00012048 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 24282 0001204C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 24283                                  .L_tc_recycle_frame_loop_01e9:
 24284 0001204F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 24285 00012052 7410                    	je .L_tc_recycle_frame_done_01e9
 24286 00012054 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 24287 00012057 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 24288 0001205A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 24289 0001205E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 24290 00012062 EBEB                    	jmp .L_tc_recycle_frame_loop_01e9
 24291                                  .L_tc_recycle_frame_done_01e9:
 24292 00012064 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 24293 00012065 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 24294 00012069 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24295 0001206C C9                      	leave
 24296 0001206D C21800                  	ret AND_KILL_FRAME(1)
 24297                                  .L_lambda_simple_end_014d:	; new closure is in rax
 24298 00012070 803804                  	cmp byte [rax], T_closure
 24299 00012073 0F85125F0000            	jne L_error_non_closure
 24300 00012079 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24301 0001207C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 24302 0001207F FF7500                  	push qword[rbp]
 24303 00012082 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 24304 00012085 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 24305 00012089 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 24306 0001208D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 24307 00012091 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 24308 00012094 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 24309 00012097 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 24310 0001209C 4983C103                	add r9, 3 	 ;for getting to the params
 24311 000120A0 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 24312 000120A4 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 24313                                  .L_tc_recycle_frame_loop_01ea:
 24314 000120A7 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 24315 000120AA 7410                    	je .L_tc_recycle_frame_done_01ea
 24316 000120AC 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 24317 000120AF 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 24318 000120B2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 24319 000120B6 4983E808                	sub r8, 8	 ;move the top of the stack one down
 24320 000120BA EBEB                    	jmp .L_tc_recycle_frame_loop_01ea
 24321                                  .L_tc_recycle_frame_done_01ea:
 24322 000120BC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 24323 000120BD 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 24324 000120C1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24325 000120C4 C9                      	leave
 24326 000120C5 C22000                  	ret AND_KILL_FRAME(2)
 24327                                  .L_lambda_opt_end_002d:	; new closure is in rax
 24328 000120C8 C9                      	leave
 24329 000120C9 C21800                  	ret AND_KILL_FRAME(1)
 24330                                  .L_lambda_simple_end_014c:	; new closure is in rax
 24331 000120CC 803804                  	cmp byte [rax], T_closure
 24332 000120CF 0F85B65E0000            	jne L_error_non_closure
 24333 000120D5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24334 000120D8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24335 000120DB 48890425[6A140000]      	mov qword [free_var_99], rax
 24336 000120E3 48B8-                   	mov rax, sob_void
 24336 000120E5 [0000000000000000] 
 24337                                  
 24338 000120ED 4889C7                  	mov rdi, rax
 24339 000120F0 E894610000              	call print_sexpr_if_not_void
 24340                                  	; preparing a non-tail-call
 24341 000120F5 48B8-                   	mov rax, L_constants + 1993
 24341 000120F7 [C907000000000000] 
 24342 000120FF 50                      	push rax
 24343 00012100 6A01                    	push 1	; arg count
 24344 00012102 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24345 00012107 E8285F0000              	call malloc
 24346 0001210C 50                      	push rax
 24347 0001210D BF00000000              	mov rdi, 8 * 0	; new rib
 24348 00012112 E81D5F0000              	call malloc
 24349 00012117 50                      	push rax
 24350 00012118 BF08000000              	mov rdi, 8 * 1	; extended env
 24351 0001211D E8125F0000              	call malloc
 24352 00012122 488B7D10                	mov rdi, ENV
 24353 00012126 BE00000000              	mov rsi, 0
 24354 0001212B BA01000000              	mov rdx, 1
 24355                                  .L_lambda_simple_env_loop_014f:	; ext_env[i + 1] <-- env[i]
 24356 00012130 4883FE00                	cmp rsi, 0
 24357 00012134 7410                    	je .L_lambda_simple_env_end_014f
 24358 00012136 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24359 0001213A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24360 0001213E 48FFC6                  	inc rsi
 24361 00012141 48FFC2                  	inc rdx
 24362 00012144 EBEA                    	jmp .L_lambda_simple_env_loop_014f
 24363                                  .L_lambda_simple_env_end_014f:
 24364 00012146 5B                      	pop rbx
 24365 00012147 BE00000000              	mov rsi, 0
 24366                                  .L_lambda_simple_params_loop_014f:	; copy params
 24367 0001214C 4883FE00                	cmp rsi, 0
 24368 00012150 740E                    	je .L_lambda_simple_params_end_014f
 24369 00012152 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24370 00012157 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24371 0001215B 48FFC6                  	inc rsi
 24372 0001215E EBEC                    	jmp .L_lambda_simple_params_loop_014f
 24373                                  .L_lambda_simple_params_end_014f:
 24374 00012160 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24375 00012163 4889C3                  	mov rbx, rax
 24376 00012166 58                      	pop rax
 24377 00012167 C60004                  	mov byte [rax], T_closure
 24378 0001216A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24379 0001216E 48C74009[7B210100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_014f
 24380 00012176 E95E040000              	jmp .L_lambda_simple_end_014f
 24381                                  .L_lambda_simple_code_014f:	; lambda-simple body
 24382 0001217B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24383 00012181 740B                    	je .L_lambda_simple_arity_check_ok_014f
 24384 00012183 FF742410                	push qword [rsp + 8 * 2]
 24385 00012187 6A01                    	push 1
 24386 00012189 E95F5E0000              	jmp L_error_incorrect_arity_simple
 24387                                  .L_lambda_simple_arity_check_ok_014f:
 24388 0001218E C8000000                	enter 0, 0
 24389 00012192 BF08000000              	mov rdi, 8*1
 24390 00012197 E8985E0000              	call malloc
 24391 0001219C 488B5D20                	mov rbx, PARAM(0)
 24392 000121A0 488918                  	mov qword[rax], rbx
 24393 000121A3 48894520                	mov PARAM(0), rax
 24394 000121A7 48B8-                   	mov rax, sob_void
 24394 000121A9 [0000000000000000] 
 24395                                  
 24396 000121B1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24397 000121B6 E8795E0000              	call malloc
 24398 000121BB 50                      	push rax
 24399 000121BC BF08000000              	mov rdi, 8 * 1	; new rib
 24400 000121C1 E86E5E0000              	call malloc
 24401 000121C6 50                      	push rax
 24402 000121C7 BF10000000              	mov rdi, 8 * 2	; extended env
 24403 000121CC E8635E0000              	call malloc
 24404 000121D1 488B7D10                	mov rdi, ENV
 24405 000121D5 BE00000000              	mov rsi, 0
 24406 000121DA BA01000000              	mov rdx, 1
 24407                                  .L_lambda_simple_env_loop_0150:	; ext_env[i + 1] <-- env[i]
 24408 000121DF 4883FE01                	cmp rsi, 1
 24409 000121E3 7410                    	je .L_lambda_simple_env_end_0150
 24410 000121E5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24411 000121E9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24412 000121ED 48FFC6                  	inc rsi
 24413 000121F0 48FFC2                  	inc rdx
 24414 000121F3 EBEA                    	jmp .L_lambda_simple_env_loop_0150
 24415                                  .L_lambda_simple_env_end_0150:
 24416 000121F5 5B                      	pop rbx
 24417 000121F6 BE00000000              	mov rsi, 0
 24418                                  .L_lambda_simple_params_loop_0150:	; copy params
 24419 000121FB 4883FE01                	cmp rsi, 1
 24420 000121FF 740E                    	je .L_lambda_simple_params_end_0150
 24421 00012201 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24422 00012206 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24423 0001220A 48FFC6                  	inc rsi
 24424 0001220D EBEC                    	jmp .L_lambda_simple_params_loop_0150
 24425                                  .L_lambda_simple_params_end_0150:
 24426 0001220F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24427 00012212 4889C3                  	mov rbx, rax
 24428 00012215 58                      	pop rax
 24429 00012216 C60004                  	mov byte [rax], T_closure
 24430 00012219 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24431 0001221D 48C74009[2A220100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0150
 24432 00012225 E993020000              	jmp .L_lambda_simple_end_0150
 24433                                  .L_lambda_simple_code_0150:	; lambda-simple body
 24434 0001222A 48837C241002            	cmp qword [rsp + 8 * 2], 2
 24435 00012230 740B                    	je .L_lambda_simple_arity_check_ok_0150
 24436 00012232 FF742410                	push qword [rsp + 8 * 2]
 24437 00012236 6A02                    	push 2
 24438 00012238 E9B05D0000              	jmp L_error_incorrect_arity_simple
 24439                                  .L_lambda_simple_arity_check_ok_0150:
 24440 0001223D C8000000                	enter 0, 0
 24441                                  	; preparing a non-tail-call
 24442 00012241 488B4520                	mov rax, PARAM(0)	; param s
 24443 00012245 50                      	push rax
 24444 00012246 6A01                    	push 1	; arg count
 24445 00012248 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 24446 00012250 803805                  	cmp byte [rax], T_undefined
 24447 00012253 0F84AE5C0000            	je L_error_fvar_undefined
 24448 00012259 803804                  	cmp byte [rax], T_closure
 24449 0001225C 0F85295D0000            	jne L_error_non_closure
 24450 00012262 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24451 00012265 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24452 00012268 483D[02000000]          	cmp rax, sob_boolean_false
 24453 0001226E 0F847C000000            	je .L_if_else_010b
 24454                                  	; preparing a tail-call
 24455 00012274 48B8-                   	mov rax, L_constants + 0
 24455 00012276 [0000000000000000] 
 24456 0001227E 50                      	push rax
 24457 0001227F 488B4528                	mov rax, PARAM(1)	; param i
 24458 00012283 50                      	push rax
 24459 00012284 6A02                    	push 2	; arg count
 24460 00012286 488B0425[8C140000]      	mov rax, qword [free_var_101]	; free var make-vector
 24461 0001228E 803805                  	cmp byte [rax], T_undefined
 24462 00012291 0F84705C0000            	je L_error_fvar_undefined
 24463 00012297 803804                  	cmp byte [rax], T_closure
 24464 0001229A 0F85EB5C0000            	jne L_error_non_closure
 24465 000122A0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24466 000122A3 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 24467 000122A6 FF7500                  	push qword[rbp]
 24468 000122A9 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 24469 000122AC 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 24470 000122B0 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 24471 000122B4 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 24472 000122B8 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 24473 000122BB 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 24474 000122BE 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 24475 000122C3 4983C103                	add r9, 3 	 ;for getting to the params
 24476 000122C7 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 24477 000122CB 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 24478                                  .L_tc_recycle_frame_loop_01ed:
 24479 000122CE 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 24480 000122D1 7410                    	je .L_tc_recycle_frame_done_01ed
 24481 000122D3 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 24482 000122D6 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 24483 000122D9 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 24484 000122DD 4983E808                	sub r8, 8	 ;move the top of the stack one down
 24485 000122E1 EBEB                    	jmp .L_tc_recycle_frame_loop_01ed
 24486                                  .L_tc_recycle_frame_done_01ed:
 24487 000122E3 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 24488 000122E4 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 24489 000122E8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24490 000122EB E9C9010000              	jmp .L_if_end_010b
 24491                                  .L_if_else_010b:
 24492                                  	; preparing a tail-call
 24493                                  	; preparing a non-tail-call
 24494                                  	; preparing a non-tail-call
 24495 000122F0 48B8-                   	mov rax, L_constants + 2270
 24495 000122F2 [DE08000000000000] 
 24496 000122FA 50                      	push rax
 24497 000122FB 488B4528                	mov rax, PARAM(1)	; param i
 24498 000122FF 50                      	push rax
 24499 00012300 6A02                    	push 2	; arg count
 24500 00012302 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 24501 0001230A 803805                  	cmp byte [rax], T_undefined
 24502 0001230D 0F84F45B0000            	je L_error_fvar_undefined
 24503 00012313 803804                  	cmp byte [rax], T_closure
 24504 00012316 0F856F5C0000            	jne L_error_non_closure
 24505 0001231C FF7001                  	push SOB_CLOSURE_ENV(rax)
 24506 0001231F FF5009                  	call SOB_CLOSURE_CODE(rax)
 24507 00012322 50                      	push rax
 24508                                  	; preparing a non-tail-call
 24509 00012323 488B4520                	mov rax, PARAM(0)	; param s
 24510 00012327 50                      	push rax
 24511 00012328 6A01                    	push 1	; arg count
 24512 0001232A 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
 24513 00012332 803805                  	cmp byte [rax], T_undefined
 24514 00012335 0F84CC5B0000            	je L_error_fvar_undefined
 24515 0001233B 803804                  	cmp byte [rax], T_closure
 24516 0001233E 0F85475C0000            	jne L_error_non_closure
 24517 00012344 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24518 00012347 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24519 0001234A 50                      	push rax
 24520 0001234B 6A02                    	push 2	; arg count
 24521 0001234D 488B4510                	mov rax, ENV
 24522 00012351 488B00                  	mov rax, qword [rax + 8 * 0]
 24523 00012354 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 24524 00012357 488B00                  	mov rax, qword [rax]
 24525 0001235A 803804                  	cmp byte [rax], T_closure
 24526 0001235D 0F85285C0000            	jne L_error_non_closure
 24527 00012363 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24528 00012366 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24529 00012369 50                      	push rax
 24530 0001236A 6A01                    	push 1	; arg count
 24531 0001236C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24532 00012371 E8BE5C0000              	call malloc
 24533 00012376 50                      	push rax
 24534 00012377 BF10000000              	mov rdi, 8 * 2	; new rib
 24535 0001237C E8B35C0000              	call malloc
 24536 00012381 50                      	push rax
 24537 00012382 BF18000000              	mov rdi, 8 * 3	; extended env
 24538 00012387 E8A85C0000              	call malloc
 24539 0001238C 488B7D10                	mov rdi, ENV
 24540 00012390 BE00000000              	mov rsi, 0
 24541 00012395 BA01000000              	mov rdx, 1
 24542                                  .L_lambda_simple_env_loop_0151:	; ext_env[i + 1] <-- env[i]
 24543 0001239A 4883FE02                	cmp rsi, 2
 24544 0001239E 7410                    	je .L_lambda_simple_env_end_0151
 24545 000123A0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24546 000123A4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24547 000123A8 48FFC6                  	inc rsi
 24548 000123AB 48FFC2                  	inc rdx
 24549 000123AE EBEA                    	jmp .L_lambda_simple_env_loop_0151
 24550                                  .L_lambda_simple_env_end_0151:
 24551 000123B0 5B                      	pop rbx
 24552 000123B1 BE00000000              	mov rsi, 0
 24553                                  .L_lambda_simple_params_loop_0151:	; copy params
 24554 000123B6 4883FE02                	cmp rsi, 2
 24555 000123BA 740E                    	je .L_lambda_simple_params_end_0151
 24556 000123BC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24557 000123C1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24558 000123C5 48FFC6                  	inc rsi
 24559 000123C8 EBEC                    	jmp .L_lambda_simple_params_loop_0151
 24560                                  .L_lambda_simple_params_end_0151:
 24561 000123CA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24562 000123CD 4889C3                  	mov rbx, rax
 24563 000123D0 58                      	pop rax
 24564 000123D1 C60004                  	mov byte [rax], T_closure
 24565 000123D4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24566 000123D8 48C74009[E5230100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0151
 24567 000123E0 E980000000              	jmp .L_lambda_simple_end_0151
 24568                                  .L_lambda_simple_code_0151:	; lambda-simple body
 24569 000123E5 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24570 000123EB 740B                    	je .L_lambda_simple_arity_check_ok_0151
 24571 000123ED FF742410                	push qword [rsp + 8 * 2]
 24572 000123F1 6A01                    	push 1
 24573 000123F3 E9F55B0000              	jmp L_error_incorrect_arity_simple
 24574                                  .L_lambda_simple_arity_check_ok_0151:
 24575 000123F8 C8000000                	enter 0, 0
 24576                                  	; preparing a non-tail-call
 24577                                  	; preparing a non-tail-call
 24578 000123FC 488B4510                	mov rax, ENV
 24579 00012400 488B00                  	mov rax, qword [rax + 8 * 0]
 24580 00012403 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var s
 24581 00012406 50                      	push rax
 24582 00012407 6A01                    	push 1	; arg count
 24583 00012409 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 24584 00012411 803805                  	cmp byte [rax], T_undefined
 24585 00012414 0F84ED5A0000            	je L_error_fvar_undefined
 24586 0001241A 803804                  	cmp byte [rax], T_closure
 24587 0001241D 0F85685B0000            	jne L_error_non_closure
 24588 00012423 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24589 00012426 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24590 00012429 50                      	push rax
 24591 0001242A 488B4510                	mov rax, ENV
 24592 0001242E 488B00                  	mov rax, qword [rax + 8 * 0]
 24593 00012431 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 24594 00012435 50                      	push rax
 24595 00012436 488B4520                	mov rax, PARAM(0)	; param v
 24596 0001243A 50                      	push rax
 24597 0001243B 6A03                    	push 3	; arg count
 24598 0001243D 488B0425[9A170000]      	mov rax, qword [free_var_147]	; free var vector-set!
 24599 00012445 803805                  	cmp byte [rax], T_undefined
 24600 00012448 0F84B95A0000            	je L_error_fvar_undefined
 24601 0001244E 803804                  	cmp byte [rax], T_closure
 24602 00012451 0F85345B0000            	jne L_error_non_closure
 24603 00012457 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24604 0001245A FF5009                  	call SOB_CLOSURE_CODE(rax)
 24605                                  
 24606 0001245D 488B4520                	mov rax, PARAM(0)	; param v
 24607 00012461 C9                      	leave
 24608 00012462 C21800                  	ret AND_KILL_FRAME(1)
 24609                                  .L_lambda_simple_end_0151:	; new closure is in rax
 24610 00012465 803804                  	cmp byte [rax], T_closure
 24611 00012468 0F851D5B0000            	jne L_error_non_closure
 24612 0001246E FF7001                  	push SOB_CLOSURE_ENV(rax)
 24613 00012471 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 24614 00012474 FF7500                  	push qword[rbp]
 24615 00012477 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 24616 0001247A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 24617 0001247E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 24618 00012482 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 24619 00012486 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 24620 00012489 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 24621 0001248C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 24622 00012491 4983C103                	add r9, 3 	 ;for getting to the params
 24623 00012495 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 24624 00012499 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 24625                                  .L_tc_recycle_frame_loop_01ee:
 24626 0001249C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 24627 0001249F 7410                    	je .L_tc_recycle_frame_done_01ee
 24628 000124A1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 24629 000124A4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 24630 000124A7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 24631 000124AB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 24632 000124AF EBEB                    	jmp .L_tc_recycle_frame_loop_01ee
 24633                                  .L_tc_recycle_frame_done_01ee:
 24634 000124B1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 24635 000124B2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 24636 000124B6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24637                                  .L_if_end_010b:
 24638 000124B9 C9                      	leave
 24639 000124BA C22000                  	ret AND_KILL_FRAME(2)
 24640                                  .L_lambda_simple_end_0150:	; new closure is in rax
 24641 000124BD 50                      	push rax
 24642 000124BE 488B4520                	mov rax, PARAM(0)	; param run
 24643 000124C2 8F00                    	pop qword [rax]
 24644 000124C4 48B8-                   	mov rax, sob_void
 24644 000124C6 [0000000000000000] 
 24645                                  
 24646 000124CE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24647 000124D3 E85C5B0000              	call malloc
 24648 000124D8 50                      	push rax
 24649 000124D9 BF08000000              	mov rdi, 8 * 1	; new rib
 24650 000124DE E8515B0000              	call malloc
 24651 000124E3 50                      	push rax
 24652 000124E4 BF10000000              	mov rdi, 8 * 2	; extended env
 24653 000124E9 E8465B0000              	call malloc
 24654 000124EE 488B7D10                	mov rdi, ENV
 24655 000124F2 BE00000000              	mov rsi, 0
 24656 000124F7 BA01000000              	mov rdx, 1
 24657                                  .L_lambda_simple_env_loop_0152:	; ext_env[i + 1] <-- env[i]
 24658 000124FC 4883FE01                	cmp rsi, 1
 24659 00012500 7410                    	je .L_lambda_simple_env_end_0152
 24660 00012502 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24661 00012506 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24662 0001250A 48FFC6                  	inc rsi
 24663 0001250D 48FFC2                  	inc rdx
 24664 00012510 EBEA                    	jmp .L_lambda_simple_env_loop_0152
 24665                                  .L_lambda_simple_env_end_0152:
 24666 00012512 5B                      	pop rbx
 24667 00012513 BE00000000              	mov rsi, 0
 24668                                  .L_lambda_simple_params_loop_0152:	; copy params
 24669 00012518 4883FE01                	cmp rsi, 1
 24670 0001251C 740E                    	je .L_lambda_simple_params_end_0152
 24671 0001251E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24672 00012523 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24673 00012527 48FFC6                  	inc rsi
 24674 0001252A EBEC                    	jmp .L_lambda_simple_params_loop_0152
 24675                                  .L_lambda_simple_params_end_0152:
 24676 0001252C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24677 0001252F 4889C3                  	mov rbx, rax
 24678 00012532 58                      	pop rax
 24679 00012533 C60004                  	mov byte [rax], T_closure
 24680 00012536 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24681 0001253A 48C74009[47250100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0152
 24682 00012542 E98E000000              	jmp .L_lambda_simple_end_0152
 24683                                  .L_lambda_simple_code_0152:	; lambda-simple body
 24684 00012547 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24685 0001254D 740B                    	je .L_lambda_simple_arity_check_ok_0152
 24686 0001254F FF742410                	push qword [rsp + 8 * 2]
 24687 00012553 6A01                    	push 1
 24688 00012555 E9935A0000              	jmp L_error_incorrect_arity_simple
 24689                                  .L_lambda_simple_arity_check_ok_0152:
 24690 0001255A C8000000                	enter 0, 0
 24691                                  	; preparing a tail-call
 24692 0001255E 48B8-                   	mov rax, L_constants + 2135
 24692 00012560 [5708000000000000] 
 24693 00012568 50                      	push rax
 24694 00012569 488B4520                	mov rax, PARAM(0)	; param s
 24695 0001256D 50                      	push rax
 24696 0001256E 6A02                    	push 2	; arg count
 24697 00012570 488B4510                	mov rax, ENV
 24698 00012574 488B00                  	mov rax, qword [rax + 8 * 0]
 24699 00012577 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 24700 0001257A 488B00                  	mov rax, qword [rax]
 24701 0001257D 803804                  	cmp byte [rax], T_closure
 24702 00012580 0F85055A0000            	jne L_error_non_closure
 24703 00012586 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24704 00012589 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 24705 0001258C FF7500                  	push qword[rbp]
 24706 0001258F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 24707 00012592 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 24708 00012596 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 24709 0001259A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 24710 0001259E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 24711 000125A1 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 24712 000125A4 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 24713 000125A9 4983C103                	add r9, 3 	 ;for getting to the params
 24714 000125AD 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 24715 000125B1 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 24716                                  .L_tc_recycle_frame_loop_01ef:
 24717 000125B4 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 24718 000125B7 7410                    	je .L_tc_recycle_frame_done_01ef
 24719 000125B9 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 24720 000125BC 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 24721 000125BF 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 24722 000125C3 4983E808                	sub r8, 8	 ;move the top of the stack one down
 24723 000125C7 EBEB                    	jmp .L_tc_recycle_frame_loop_01ef
 24724                                  .L_tc_recycle_frame_done_01ef:
 24725 000125C9 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 24726 000125CA 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 24727 000125CE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24728 000125D1 C9                      	leave
 24729 000125D2 C21800                  	ret AND_KILL_FRAME(1)
 24730                                  .L_lambda_simple_end_0152:	; new closure is in rax
 24731 000125D5 C9                      	leave
 24732 000125D6 C21800                  	ret AND_KILL_FRAME(1)
 24733                                  .L_lambda_simple_end_014f:	; new closure is in rax
 24734 000125D9 803804                  	cmp byte [rax], T_closure
 24735 000125DC 0F85A9590000            	jne L_error_non_closure
 24736 000125E2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24737 000125E5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24738 000125E8 48890425[26140000]      	mov qword [free_var_95], rax
 24739 000125F0 48B8-                   	mov rax, sob_void
 24739 000125F2 [0000000000000000] 
 24740                                  
 24741 000125FA 4889C7                  	mov rdi, rax
 24742 000125FD E8875C0000              	call print_sexpr_if_not_void
 24743                                  	; preparing a non-tail-call
 24744 00012602 48B8-                   	mov rax, L_constants + 1993
 24744 00012604 [C907000000000000] 
 24745 0001260C 50                      	push rax
 24746 0001260D 6A01                    	push 1	; arg count
 24747 0001260F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24748 00012614 E81B5A0000              	call malloc
 24749 00012619 50                      	push rax
 24750 0001261A BF00000000              	mov rdi, 8 * 0	; new rib
 24751 0001261F E8105A0000              	call malloc
 24752 00012624 50                      	push rax
 24753 00012625 BF08000000              	mov rdi, 8 * 1	; extended env
 24754 0001262A E8055A0000              	call malloc
 24755 0001262F 488B7D10                	mov rdi, ENV
 24756 00012633 BE00000000              	mov rsi, 0
 24757 00012638 BA01000000              	mov rdx, 1
 24758                                  .L_lambda_simple_env_loop_0153:	; ext_env[i + 1] <-- env[i]
 24759 0001263D 4883FE00                	cmp rsi, 0
 24760 00012641 7410                    	je .L_lambda_simple_env_end_0153
 24761 00012643 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24762 00012647 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24763 0001264B 48FFC6                  	inc rsi
 24764 0001264E 48FFC2                  	inc rdx
 24765 00012651 EBEA                    	jmp .L_lambda_simple_env_loop_0153
 24766                                  .L_lambda_simple_env_end_0153:
 24767 00012653 5B                      	pop rbx
 24768 00012654 BE00000000              	mov rsi, 0
 24769                                  .L_lambda_simple_params_loop_0153:	; copy params
 24770 00012659 4883FE00                	cmp rsi, 0
 24771 0001265D 740E                    	je .L_lambda_simple_params_end_0153
 24772 0001265F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24773 00012664 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24774 00012668 48FFC6                  	inc rsi
 24775 0001266B EBEC                    	jmp .L_lambda_simple_params_loop_0153
 24776                                  .L_lambda_simple_params_end_0153:
 24777 0001266D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24778 00012670 4889C3                  	mov rbx, rax
 24779 00012673 58                      	pop rax
 24780 00012674 C60004                  	mov byte [rax], T_closure
 24781 00012677 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24782 0001267B 48C74009[88260100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0153
 24783 00012683 E95E040000              	jmp .L_lambda_simple_end_0153
 24784                                  .L_lambda_simple_code_0153:	; lambda-simple body
 24785 00012688 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24786 0001268E 740B                    	je .L_lambda_simple_arity_check_ok_0153
 24787 00012690 FF742410                	push qword [rsp + 8 * 2]
 24788 00012694 6A01                    	push 1
 24789 00012696 E952590000              	jmp L_error_incorrect_arity_simple
 24790                                  .L_lambda_simple_arity_check_ok_0153:
 24791 0001269B C8000000                	enter 0, 0
 24792 0001269F BF08000000              	mov rdi, 8*1
 24793 000126A4 E88B590000              	call malloc
 24794 000126A9 488B5D20                	mov rbx, PARAM(0)
 24795 000126AD 488918                  	mov qword[rax], rbx
 24796 000126B0 48894520                	mov PARAM(0), rax
 24797 000126B4 48B8-                   	mov rax, sob_void
 24797 000126B6 [0000000000000000] 
 24798                                  
 24799 000126BE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24800 000126C3 E86C590000              	call malloc
 24801 000126C8 50                      	push rax
 24802 000126C9 BF08000000              	mov rdi, 8 * 1	; new rib
 24803 000126CE E861590000              	call malloc
 24804 000126D3 50                      	push rax
 24805 000126D4 BF10000000              	mov rdi, 8 * 2	; extended env
 24806 000126D9 E856590000              	call malloc
 24807 000126DE 488B7D10                	mov rdi, ENV
 24808 000126E2 BE00000000              	mov rsi, 0
 24809 000126E7 BA01000000              	mov rdx, 1
 24810                                  .L_lambda_simple_env_loop_0154:	; ext_env[i + 1] <-- env[i]
 24811 000126EC 4883FE01                	cmp rsi, 1
 24812 000126F0 7410                    	je .L_lambda_simple_env_end_0154
 24813 000126F2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24814 000126F6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24815 000126FA 48FFC6                  	inc rsi
 24816 000126FD 48FFC2                  	inc rdx
 24817 00012700 EBEA                    	jmp .L_lambda_simple_env_loop_0154
 24818                                  .L_lambda_simple_env_end_0154:
 24819 00012702 5B                      	pop rbx
 24820 00012703 BE00000000              	mov rsi, 0
 24821                                  .L_lambda_simple_params_loop_0154:	; copy params
 24822 00012708 4883FE01                	cmp rsi, 1
 24823 0001270C 740E                    	je .L_lambda_simple_params_end_0154
 24824 0001270E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24825 00012713 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24826 00012717 48FFC6                  	inc rsi
 24827 0001271A EBEC                    	jmp .L_lambda_simple_params_loop_0154
 24828                                  .L_lambda_simple_params_end_0154:
 24829 0001271C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24830 0001271F 4889C3                  	mov rbx, rax
 24831 00012722 58                      	pop rax
 24832 00012723 C60004                  	mov byte [rax], T_closure
 24833 00012726 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24834 0001272A 48C74009[37270100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0154
 24835 00012732 E993020000              	jmp .L_lambda_simple_end_0154
 24836                                  .L_lambda_simple_code_0154:	; lambda-simple body
 24837 00012737 48837C241002            	cmp qword [rsp + 8 * 2], 2
 24838 0001273D 740B                    	je .L_lambda_simple_arity_check_ok_0154
 24839 0001273F FF742410                	push qword [rsp + 8 * 2]
 24840 00012743 6A02                    	push 2
 24841 00012745 E9A3580000              	jmp L_error_incorrect_arity_simple
 24842                                  .L_lambda_simple_arity_check_ok_0154:
 24843 0001274A C8000000                	enter 0, 0
 24844                                  	; preparing a non-tail-call
 24845 0001274E 488B4520                	mov rax, PARAM(0)	; param s
 24846 00012752 50                      	push rax
 24847 00012753 6A01                    	push 1	; arg count
 24848 00012755 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 24849 0001275D 803805                  	cmp byte [rax], T_undefined
 24850 00012760 0F84A1570000            	je L_error_fvar_undefined
 24851 00012766 803804                  	cmp byte [rax], T_closure
 24852 00012769 0F851C580000            	jne L_error_non_closure
 24853 0001276F FF7001                  	push SOB_CLOSURE_ENV(rax)
 24854 00012772 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24855 00012775 483D[02000000]          	cmp rax, sob_boolean_false
 24856 0001277B 0F847C000000            	je .L_if_else_010c
 24857                                  	; preparing a tail-call
 24858 00012781 48B8-                   	mov rax, L_constants + 4
 24858 00012783 [0400000000000000] 
 24859 0001278B 50                      	push rax
 24860 0001278C 488B4528                	mov rax, PARAM(1)	; param i
 24861 00012790 50                      	push rax
 24862 00012791 6A02                    	push 2	; arg count
 24863 00012793 488B0425[6A140000]      	mov rax, qword [free_var_99]	; free var make-string
 24864 0001279B 803805                  	cmp byte [rax], T_undefined
 24865 0001279E 0F8463570000            	je L_error_fvar_undefined
 24866 000127A4 803804                  	cmp byte [rax], T_closure
 24867 000127A7 0F85DE570000            	jne L_error_non_closure
 24868 000127AD FF7001                  	push SOB_CLOSURE_ENV(rax)
 24869 000127B0 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 24870 000127B3 FF7500                  	push qword[rbp]
 24871 000127B6 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 24872 000127B9 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 24873 000127BD 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 24874 000127C1 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 24875 000127C5 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 24876 000127C8 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 24877 000127CB 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 24878 000127D0 4983C103                	add r9, 3 	 ;for getting to the params
 24879 000127D4 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 24880 000127D8 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 24881                                  .L_tc_recycle_frame_loop_01f0:
 24882 000127DB 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 24883 000127DE 7410                    	je .L_tc_recycle_frame_done_01f0
 24884 000127E0 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 24885 000127E3 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 24886 000127E6 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 24887 000127EA 4983E808                	sub r8, 8	 ;move the top of the stack one down
 24888 000127EE EBEB                    	jmp .L_tc_recycle_frame_loop_01f0
 24889                                  .L_tc_recycle_frame_done_01f0:
 24890 000127F0 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 24891 000127F1 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 24892 000127F5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24893 000127F8 E9C9010000              	jmp .L_if_end_010c
 24894                                  .L_if_else_010c:
 24895                                  	; preparing a tail-call
 24896                                  	; preparing a non-tail-call
 24897                                  	; preparing a non-tail-call
 24898 000127FD 48B8-                   	mov rax, L_constants + 2270
 24898 000127FF [DE08000000000000] 
 24899 00012807 50                      	push rax
 24900 00012808 488B4528                	mov rax, PARAM(1)	; param i
 24901 0001280C 50                      	push rax
 24902 0001280D 6A02                    	push 2	; arg count
 24903 0001280F 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 24904 00012817 803805                  	cmp byte [rax], T_undefined
 24905 0001281A 0F84E7560000            	je L_error_fvar_undefined
 24906 00012820 803804                  	cmp byte [rax], T_closure
 24907 00012823 0F8562570000            	jne L_error_non_closure
 24908 00012829 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24909 0001282C FF5009                  	call SOB_CLOSURE_CODE(rax)
 24910 0001282F 50                      	push rax
 24911                                  	; preparing a non-tail-call
 24912 00012830 488B4520                	mov rax, PARAM(0)	; param s
 24913 00012834 50                      	push rax
 24914 00012835 6A01                    	push 1	; arg count
 24915 00012837 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
 24916 0001283F 803805                  	cmp byte [rax], T_undefined
 24917 00012842 0F84BF560000            	je L_error_fvar_undefined
 24918 00012848 803804                  	cmp byte [rax], T_closure
 24919 0001284B 0F853A570000            	jne L_error_non_closure
 24920 00012851 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24921 00012854 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24922 00012857 50                      	push rax
 24923 00012858 6A02                    	push 2	; arg count
 24924 0001285A 488B4510                	mov rax, ENV
 24925 0001285E 488B00                  	mov rax, qword [rax + 8 * 0]
 24926 00012861 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 24927 00012864 488B00                  	mov rax, qword [rax]
 24928 00012867 803804                  	cmp byte [rax], T_closure
 24929 0001286A 0F851B570000            	jne L_error_non_closure
 24930 00012870 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24931 00012873 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24932 00012876 50                      	push rax
 24933 00012877 6A01                    	push 1	; arg count
 24934 00012879 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24935 0001287E E8B1570000              	call malloc
 24936 00012883 50                      	push rax
 24937 00012884 BF10000000              	mov rdi, 8 * 2	; new rib
 24938 00012889 E8A6570000              	call malloc
 24939 0001288E 50                      	push rax
 24940 0001288F BF18000000              	mov rdi, 8 * 3	; extended env
 24941 00012894 E89B570000              	call malloc
 24942 00012899 488B7D10                	mov rdi, ENV
 24943 0001289D BE00000000              	mov rsi, 0
 24944 000128A2 BA01000000              	mov rdx, 1
 24945                                  .L_lambda_simple_env_loop_0155:	; ext_env[i + 1] <-- env[i]
 24946 000128A7 4883FE02                	cmp rsi, 2
 24947 000128AB 7410                    	je .L_lambda_simple_env_end_0155
 24948 000128AD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24949 000128B1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24950 000128B5 48FFC6                  	inc rsi
 24951 000128B8 48FFC2                  	inc rdx
 24952 000128BB EBEA                    	jmp .L_lambda_simple_env_loop_0155
 24953                                  .L_lambda_simple_env_end_0155:
 24954 000128BD 5B                      	pop rbx
 24955 000128BE BE00000000              	mov rsi, 0
 24956                                  .L_lambda_simple_params_loop_0155:	; copy params
 24957 000128C3 4883FE02                	cmp rsi, 2
 24958 000128C7 740E                    	je .L_lambda_simple_params_end_0155
 24959 000128C9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24960 000128CE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24961 000128D2 48FFC6                  	inc rsi
 24962 000128D5 EBEC                    	jmp .L_lambda_simple_params_loop_0155
 24963                                  .L_lambda_simple_params_end_0155:
 24964 000128D7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24965 000128DA 4889C3                  	mov rbx, rax
 24966 000128DD 58                      	pop rax
 24967 000128DE C60004                  	mov byte [rax], T_closure
 24968 000128E1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24969 000128E5 48C74009[F2280100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0155
 24970 000128ED E980000000              	jmp .L_lambda_simple_end_0155
 24971                                  .L_lambda_simple_code_0155:	; lambda-simple body
 24972 000128F2 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24973 000128F8 740B                    	je .L_lambda_simple_arity_check_ok_0155
 24974 000128FA FF742410                	push qword [rsp + 8 * 2]
 24975 000128FE 6A01                    	push 1
 24976 00012900 E9E8560000              	jmp L_error_incorrect_arity_simple
 24977                                  .L_lambda_simple_arity_check_ok_0155:
 24978 00012905 C8000000                	enter 0, 0
 24979                                  	; preparing a non-tail-call
 24980                                  	; preparing a non-tail-call
 24981 00012909 488B4510                	mov rax, ENV
 24982 0001290D 488B00                  	mov rax, qword [rax + 8 * 0]
 24983 00012910 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var s
 24984 00012913 50                      	push rax
 24985 00012914 6A01                    	push 1	; arg count
 24986 00012916 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 24987 0001291E 803805                  	cmp byte [rax], T_undefined
 24988 00012921 0F84E0550000            	je L_error_fvar_undefined
 24989 00012927 803804                  	cmp byte [rax], T_closure
 24990 0001292A 0F855B560000            	jne L_error_non_closure
 24991 00012930 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24992 00012933 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24993 00012936 50                      	push rax
 24994 00012937 488B4510                	mov rax, ENV
 24995 0001293B 488B00                  	mov rax, qword [rax + 8 * 0]
 24996 0001293E 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 24997 00012942 50                      	push rax
 24998 00012943 488B4520                	mov rax, PARAM(0)	; param str
 24999 00012947 50                      	push rax
 25000 00012948 6A03                    	push 3	; arg count
 25001 0001294A 488B0425[8A160000]      	mov rax, qword [free_var_131]	; free var string-set!
 25002 00012952 803805                  	cmp byte [rax], T_undefined
 25003 00012955 0F84AC550000            	je L_error_fvar_undefined
 25004 0001295B 803804                  	cmp byte [rax], T_closure
 25005 0001295E 0F8527560000            	jne L_error_non_closure
 25006 00012964 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25007 00012967 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25008                                  
 25009 0001296A 488B4520                	mov rax, PARAM(0)	; param str
 25010 0001296E C9                      	leave
 25011 0001296F C21800                  	ret AND_KILL_FRAME(1)
 25012                                  .L_lambda_simple_end_0155:	; new closure is in rax
 25013 00012972 803804                  	cmp byte [rax], T_closure
 25014 00012975 0F8510560000            	jne L_error_non_closure
 25015 0001297B FF7001                  	push SOB_CLOSURE_ENV(rax)
 25016 0001297E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 25017 00012981 FF7500                  	push qword[rbp]
 25018 00012984 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 25019 00012987 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 25020 0001298B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 25021 0001298F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 25022 00012993 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 25023 00012996 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 25024 00012999 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 25025 0001299E 4983C103                	add r9, 3 	 ;for getting to the params
 25026 000129A2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 25027 000129A6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 25028                                  .L_tc_recycle_frame_loop_01f1:
 25029 000129A9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 25030 000129AC 7410                    	je .L_tc_recycle_frame_done_01f1
 25031 000129AE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 25032 000129B1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 25033 000129B4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 25034 000129B8 4983E808                	sub r8, 8	 ;move the top of the stack one down
 25035 000129BC EBEB                    	jmp .L_tc_recycle_frame_loop_01f1
 25036                                  .L_tc_recycle_frame_done_01f1:
 25037 000129BE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 25038 000129BF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 25039 000129C3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25040                                  .L_if_end_010c:
 25041 000129C6 C9                      	leave
 25042 000129C7 C22000                  	ret AND_KILL_FRAME(2)
 25043                                  .L_lambda_simple_end_0154:	; new closure is in rax
 25044 000129CA 50                      	push rax
 25045 000129CB 488B4520                	mov rax, PARAM(0)	; param run
 25046 000129CF 8F00                    	pop qword [rax]
 25047 000129D1 48B8-                   	mov rax, sob_void
 25047 000129D3 [0000000000000000] 
 25048                                  
 25049 000129DB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25050 000129E0 E84F560000              	call malloc
 25051 000129E5 50                      	push rax
 25052 000129E6 BF08000000              	mov rdi, 8 * 1	; new rib
 25053 000129EB E844560000              	call malloc
 25054 000129F0 50                      	push rax
 25055 000129F1 BF10000000              	mov rdi, 8 * 2	; extended env
 25056 000129F6 E839560000              	call malloc
 25057 000129FB 488B7D10                	mov rdi, ENV
 25058 000129FF BE00000000              	mov rsi, 0
 25059 00012A04 BA01000000              	mov rdx, 1
 25060                                  .L_lambda_simple_env_loop_0156:	; ext_env[i + 1] <-- env[i]
 25061 00012A09 4883FE01                	cmp rsi, 1
 25062 00012A0D 7410                    	je .L_lambda_simple_env_end_0156
 25063 00012A0F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25064 00012A13 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25065 00012A17 48FFC6                  	inc rsi
 25066 00012A1A 48FFC2                  	inc rdx
 25067 00012A1D EBEA                    	jmp .L_lambda_simple_env_loop_0156
 25068                                  .L_lambda_simple_env_end_0156:
 25069 00012A1F 5B                      	pop rbx
 25070 00012A20 BE00000000              	mov rsi, 0
 25071                                  .L_lambda_simple_params_loop_0156:	; copy params
 25072 00012A25 4883FE01                	cmp rsi, 1
 25073 00012A29 740E                    	je .L_lambda_simple_params_end_0156
 25074 00012A2B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25075 00012A30 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25076 00012A34 48FFC6                  	inc rsi
 25077 00012A37 EBEC                    	jmp .L_lambda_simple_params_loop_0156
 25078                                  .L_lambda_simple_params_end_0156:
 25079 00012A39 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25080 00012A3C 4889C3                  	mov rbx, rax
 25081 00012A3F 58                      	pop rax
 25082 00012A40 C60004                  	mov byte [rax], T_closure
 25083 00012A43 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25084 00012A47 48C74009[542A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0156
 25085 00012A4F E98E000000              	jmp .L_lambda_simple_end_0156
 25086                                  .L_lambda_simple_code_0156:	; lambda-simple body
 25087 00012A54 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25088 00012A5A 740B                    	je .L_lambda_simple_arity_check_ok_0156
 25089 00012A5C FF742410                	push qword [rsp + 8 * 2]
 25090 00012A60 6A01                    	push 1
 25091 00012A62 E986550000              	jmp L_error_incorrect_arity_simple
 25092                                  .L_lambda_simple_arity_check_ok_0156:
 25093 00012A67 C8000000                	enter 0, 0
 25094                                  	; preparing a tail-call
 25095 00012A6B 48B8-                   	mov rax, L_constants + 2135
 25095 00012A6D [5708000000000000] 
 25096 00012A75 50                      	push rax
 25097 00012A76 488B4520                	mov rax, PARAM(0)	; param s
 25098 00012A7A 50                      	push rax
 25099 00012A7B 6A02                    	push 2	; arg count
 25100 00012A7D 488B4510                	mov rax, ENV
 25101 00012A81 488B00                  	mov rax, qword [rax + 8 * 0]
 25102 00012A84 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 25103 00012A87 488B00                  	mov rax, qword [rax]
 25104 00012A8A 803804                  	cmp byte [rax], T_closure
 25105 00012A8D 0F85F8540000            	jne L_error_non_closure
 25106 00012A93 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25107 00012A96 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 25108 00012A99 FF7500                  	push qword[rbp]
 25109 00012A9C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 25110 00012A9F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 25111 00012AA3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 25112 00012AA7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 25113 00012AAB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 25114 00012AAE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 25115 00012AB1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 25116 00012AB6 4983C103                	add r9, 3 	 ;for getting to the params
 25117 00012ABA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 25118 00012ABE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 25119                                  .L_tc_recycle_frame_loop_01f2:
 25120 00012AC1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 25121 00012AC4 7410                    	je .L_tc_recycle_frame_done_01f2
 25122 00012AC6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 25123 00012AC9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 25124 00012ACC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 25125 00012AD0 4983E808                	sub r8, 8	 ;move the top of the stack one down
 25126 00012AD4 EBEB                    	jmp .L_tc_recycle_frame_loop_01f2
 25127                                  .L_tc_recycle_frame_done_01f2:
 25128 00012AD6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 25129 00012AD7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 25130 00012ADB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25131 00012ADE C9                      	leave
 25132 00012ADF C21800                  	ret AND_KILL_FRAME(1)
 25133                                  .L_lambda_simple_end_0156:	; new closure is in rax
 25134 00012AE2 C9                      	leave
 25135 00012AE3 C21800                  	ret AND_KILL_FRAME(1)
 25136                                  .L_lambda_simple_end_0153:	; new closure is in rax
 25137 00012AE6 803804                  	cmp byte [rax], T_closure
 25138 00012AE9 0F859C540000            	jne L_error_non_closure
 25139 00012AEF FF7001                  	push SOB_CLOSURE_ENV(rax)
 25140 00012AF2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25141 00012AF5 48890425[15140000]      	mov qword [free_var_94], rax
 25142 00012AFD 48B8-                   	mov rax, sob_void
 25142 00012AFF [0000000000000000] 
 25143                                  
 25144 00012B07 4889C7                  	mov rdi, rax
 25145 00012B0A E87A570000              	call print_sexpr_if_not_void
 25146 00012B0F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25147 00012B14 E81B550000              	call malloc
 25148 00012B19 50                      	push rax
 25149 00012B1A BF00000000              	mov rdi, 8 * 0	; new rib
 25150 00012B1F E810550000              	call malloc
 25151 00012B24 50                      	push rax
 25152 00012B25 BF08000000              	mov rdi, 8 * 1	; extended env
 25153 00012B2A E805550000              	call malloc
 25154 00012B2F 488B7D10                	mov rdi, ENV
 25155 00012B33 BE00000000              	mov rsi, 0
 25156 00012B38 BA01000000              	mov rdx, 1
 25157                                  .L_lambda_opt_env_loop_002e:	; ext_env[i + 1] <-- env[i]
 25158 00012B3D 4883FE00                	cmp rsi, 0
 25159 00012B41 7410                    	je .L_lambda_opt_env_end_002e
 25160 00012B43 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25161 00012B47 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25162 00012B4B 48FFC6                  	inc rsi
 25163 00012B4E 48FFC2                  	inc rdx
 25164 00012B51 EBEA                    	jmp .L_lambda_opt_env_loop_002e
 25165                                  .L_lambda_opt_env_end_002e:
 25166 00012B53 5B                      	pop rbx
 25167 00012B54 BE00000000              	mov rsi, 0
 25168                                  .L_lambda_opt_params_loop_002e:	; copy params
 25169 00012B59 4883FE00                	cmp rsi, 0
 25170 00012B5D 740E                    	je .L_lambda_opt_params_end_002e
 25171 00012B5F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25172 00012B64 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25173 00012B68 48FFC6                  	inc rsi
 25174 00012B6B EBEC                    	jmp .L_lambda_opt_params_loop_002e
 25175                                  .L_lambda_opt_params_end_002e:
 25176 00012B6D 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
 25177 00012B70 4889C3                  	mov rbx, rax
 25178 00012B73 58                      	pop rax
 25179 00012B74 C60004                  	mov byte [rax], T_closure
 25180 00012B77 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25181 00012B7B 48C74009[882B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_002e
 25182 00012B83 E9ED010000              	jmp .L_lambda_opt_end_002e
 25183                                  .L_lambda_opt_code_002e:	; lambda-opt body
 25184 00012B88 48837C241000            	cmp qword [rsp + 8 * 2], 0
 25185 00012B8E 7411                    	je .L_lambda_opt_arity_check_exact_002e
 25186 00012B90 0F8FB4000000            	jg .L_lambda_opt_arity_check_more_002e
 25187 00012B96 FF742410                	push qword [rsp + 8 * 2]
 25188 00012B9A 6A00                    	push 0
 25189 00012B9C E960540000              	jmp L_error_incorrect_arity_opt
 25190                                  .L_lambda_opt_arity_check_exact_002e:
 25191 00012BA1 4883EC08                	sub rsp, 8
 25192 00012BA5 488B442408              	mov rax, qword[rsp + 8 *1]
 25193 00012BAA 48890424                	mov qword[rsp], rax  
 25194 00012BAE 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 25195 00012BB3 4889442408              	mov qword[rsp + 8 * 1], rax
 25196 00012BB8 B801000000              	mov rax, 1
 25197 00012BBD 4889442410              	mov qword[rsp + 8 *2], rax
 25198 00012BC2 48B8-                   	mov rax, sob_nil
 25198 00012BC4 [0100000000000000] 
 25199 00012BCC 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 25200 00012BD1 C8000000                	enter 0, 0
 25201                                  	; preparing a tail-call
 25202 00012BD5 488B4520                	mov rax, PARAM(0)	; param s
 25203 00012BD9 50                      	push rax
 25204 00012BDA 6A01                    	push 1	; arg count
 25205 00012BDC 488B0425[26140000]      	mov rax, qword [free_var_95]	; free var list->vector
 25206 00012BE4 803805                  	cmp byte [rax], T_undefined
 25207 00012BE7 0F841A530000            	je L_error_fvar_undefined
 25208 00012BED 803804                  	cmp byte [rax], T_closure
 25209 00012BF0 0F8595530000            	jne L_error_non_closure
 25210 00012BF6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25211 00012BF9 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 25212 00012BFC FF7500                  	push qword[rbp]
 25213 00012BFF 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 25214 00012C02 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 25215 00012C06 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 25216 00012C0A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 25217 00012C0E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 25218 00012C11 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 25219 00012C14 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 25220 00012C19 4983C103                	add r9, 3 	 ;for getting to the params
 25221 00012C1D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 25222 00012C21 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 25223                                  .L_tc_recycle_frame_loop_01f4:
 25224 00012C24 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 25225 00012C27 7410                    	je .L_tc_recycle_frame_done_01f4
 25226 00012C29 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 25227 00012C2C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 25228 00012C2F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 25229 00012C33 4983E808                	sub r8, 8	 ;move the top of the stack one down
 25230 00012C37 EBEB                    	jmp .L_tc_recycle_frame_loop_01f4
 25231                                  .L_tc_recycle_frame_done_01f4:
 25232 00012C39 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 25233 00012C3A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 25234 00012C3E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25235 00012C41 C9                      	leave
 25236 00012C42 C21800                  	ret AND_KILL_FRAME(1)
 25237 00012C45 E92B010000              	jmp .L_lambda_opt_end_002e	; new closure is in rax
 25238                                  .L_lambda_opt_arity_check_more_002e:
 25239 00012C4A 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 25240 00012C4F 49B9-                   	mov r9, sob_nil
 25240 00012C51 [0100000000000000] 
 25241 00012C59 4889E3                  	mov rbx, rsp 
 25242 00012C5C 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 25243 00012C60 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 25244 00012C63 49C1E003                	shl r8, 3
 25245 00012C67 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 25246 00012C6A 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 25247                                  .L_lambda_opt_stack_shrink_loop_002e:
 25248 00012C6F 4983F800                	cmp r8, 0
 25249 00012C73 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_002e
 25250 00012C75 BF11000000              	mov rdi, 1+8+8 ;for pair
 25251 00012C7A E8B5530000              	call malloc;to create the pair in the stack
 25252 00012C7F C60021                  	mov byte [rax], T_pair ; to make it a pair
 25253 00012C82 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
 25254 00012C85 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 25255 00012C89 4C894809                 	mov qword[rax+1+8],r9
 25256 00012C8D 4989C1                  	mov r9, rax ;for the recursion 
 25257 00012C90 49FFC8                  	dec r8 ;we finished copy another opt param to the list
 25258 00012C93 4883EB08                	sub rbx, 8 ;to get the next param to copy
 25259 00012C97 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_002e
 25260                                  .L_lambda_opt_stack_shrink_loop_exit_002e:
 25261 00012C99 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
 25262 00012C9E 4883E901                	sub rcx, 1
 25263 00012CA2 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
 25264 00012CA6 4801CC                  	add rsp, rcx ;shrinking the stack
 25265 00012CA9 4889E0                  	mov rax, rsp
 25266 00012CAC 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
 25267 00012CAF 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
 25268 00012CB3 49FFC8                  	dec r8 ;we start with param 0, not 1 
 25269 00012CB6 4883C018                	add rax, 3 * 8;now rax is param 0
 25270 00012CBA 49C1E003                	shl r8, 3;convert to byte
 25271 00012CBE 4C01C0                  	add rax, r8;now rax is the top of the stack
 25272 00012CC1 4C8908                  	mov qword[rax], r9;puting the list at the top
 25273 00012CC4 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
 25274 00012CC8 4889E3                  	mov rbx, rsp 
 25275 00012CCB 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
 25276 00012CCE 41BA00000000            	mov r10, 0;r10 is the not opt params length
 25277 00012CD4 49FFCA                  	dec r10 
 25278 00012CD7 49C1E203                	shl r10, 3;to get bytes
 25279 00012CDB 4883C318                	add rbx, 3*8;rbx is the first param
 25280 00012CDF 4C01D3                  	add rbx, r10; rbx is where the address to copy to
 25281 00012CE2 4889E0                  	mov rax, rsp
 25282 00012CE5 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 25283 00012CE8 48C744241001000000      	mov qword [rsp+2*8], 1
 25284 00012CF1 488B5808                	mov rbx, qword[rax + 8 *1]
 25285 00012CF5 48895C2408              	mov qword [rsp + 1*8] ,rbx
 25286 00012CFA 488B18                  	mov rbx, qword[rax]
 25287 00012CFD 48891C24                	mov qword [rsp], rbx
 25288 00012D01 C8000000                	enter 0, 0
 25289                                  	; preparing a tail-call
 25290 00012D05 488B4520                	mov rax, PARAM(0)	; param s
 25291 00012D09 50                      	push rax
 25292 00012D0A 6A01                    	push 1	; arg count
 25293 00012D0C 488B0425[26140000]      	mov rax, qword [free_var_95]	; free var list->vector
 25294 00012D14 803805                  	cmp byte [rax], T_undefined
 25295 00012D17 0F84EA510000            	je L_error_fvar_undefined
 25296 00012D1D 803804                  	cmp byte [rax], T_closure
 25297 00012D20 0F8565520000            	jne L_error_non_closure
 25298 00012D26 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25299 00012D29 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 25300 00012D2C FF7500                  	push qword[rbp]
 25301 00012D2F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 25302 00012D32 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 25303 00012D36 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 25304 00012D3A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 25305 00012D3E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 25306 00012D41 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 25307 00012D44 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 25308 00012D49 4983C103                	add r9, 3 	 ;for getting to the params
 25309 00012D4D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 25310 00012D51 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 25311                                  .L_tc_recycle_frame_loop_01f3:
 25312 00012D54 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 25313 00012D57 7410                    	je .L_tc_recycle_frame_done_01f3
 25314 00012D59 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 25315 00012D5C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 25316 00012D5F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 25317 00012D63 4983E808                	sub r8, 8	 ;move the top of the stack one down
 25318 00012D67 EBEB                    	jmp .L_tc_recycle_frame_loop_01f3
 25319                                  .L_tc_recycle_frame_done_01f3:
 25320 00012D69 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 25321 00012D6A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 25322 00012D6E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25323 00012D71 C9                      	leave
 25324 00012D72 C21800                  	ret AND_KILL_FRAME(1)
 25325                                  .L_lambda_opt_end_002e:	; new closure is in rax
 25326 00012D75 48890425[23170000]      	mov qword [free_var_140], rax
 25327 00012D7D 48B8-                   	mov rax, sob_void
 25327 00012D7F [0000000000000000] 
 25328                                  
 25329 00012D87 4889C7                  	mov rdi, rax
 25330 00012D8A E8FA540000              	call print_sexpr_if_not_void
 25331                                  	; preparing a non-tail-call
 25332 00012D8F 48B8-                   	mov rax, L_constants + 1993
 25332 00012D91 [C907000000000000] 
 25333 00012D99 50                      	push rax
 25334 00012D9A 6A01                    	push 1	; arg count
 25335 00012D9C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25336 00012DA1 E88E520000              	call malloc
 25337 00012DA6 50                      	push rax
 25338 00012DA7 BF00000000              	mov rdi, 8 * 0	; new rib
 25339 00012DAC E883520000              	call malloc
 25340 00012DB1 50                      	push rax
 25341 00012DB2 BF08000000              	mov rdi, 8 * 1	; extended env
 25342 00012DB7 E878520000              	call malloc
 25343 00012DBC 488B7D10                	mov rdi, ENV
 25344 00012DC0 BE00000000              	mov rsi, 0
 25345 00012DC5 BA01000000              	mov rdx, 1
 25346                                  .L_lambda_simple_env_loop_0157:	; ext_env[i + 1] <-- env[i]
 25347 00012DCA 4883FE00                	cmp rsi, 0
 25348 00012DCE 7410                    	je .L_lambda_simple_env_end_0157
 25349 00012DD0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25350 00012DD4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25351 00012DD8 48FFC6                  	inc rsi
 25352 00012DDB 48FFC2                  	inc rdx
 25353 00012DDE EBEA                    	jmp .L_lambda_simple_env_loop_0157
 25354                                  .L_lambda_simple_env_end_0157:
 25355 00012DE0 5B                      	pop rbx
 25356 00012DE1 BE00000000              	mov rsi, 0
 25357                                  .L_lambda_simple_params_loop_0157:	; copy params
 25358 00012DE6 4883FE00                	cmp rsi, 0
 25359 00012DEA 740E                    	je .L_lambda_simple_params_end_0157
 25360 00012DEC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25361 00012DF1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25362 00012DF5 48FFC6                  	inc rsi
 25363 00012DF8 EBEC                    	jmp .L_lambda_simple_params_loop_0157
 25364                                  .L_lambda_simple_params_end_0157:
 25365 00012DFA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25366 00012DFD 4889C3                  	mov rbx, rax
 25367 00012E00 58                      	pop rax
 25368 00012E01 C60004                  	mov byte [rax], T_closure
 25369 00012E04 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25370 00012E08 48C74009[152E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0157
 25371 00012E10 E942030000              	jmp .L_lambda_simple_end_0157
 25372                                  .L_lambda_simple_code_0157:	; lambda-simple body
 25373 00012E15 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25374 00012E1B 740B                    	je .L_lambda_simple_arity_check_ok_0157
 25375 00012E1D FF742410                	push qword [rsp + 8 * 2]
 25376 00012E21 6A01                    	push 1
 25377 00012E23 E9C5510000              	jmp L_error_incorrect_arity_simple
 25378                                  .L_lambda_simple_arity_check_ok_0157:
 25379 00012E28 C8000000                	enter 0, 0
 25380 00012E2C BF08000000              	mov rdi, 8*1
 25381 00012E31 E8FE510000              	call malloc
 25382 00012E36 488B5D20                	mov rbx, PARAM(0)
 25383 00012E3A 488918                  	mov qword[rax], rbx
 25384 00012E3D 48894520                	mov PARAM(0), rax
 25385 00012E41 48B8-                   	mov rax, sob_void
 25385 00012E43 [0000000000000000] 
 25386                                  
 25387 00012E4B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25388 00012E50 E8DF510000              	call malloc
 25389 00012E55 50                      	push rax
 25390 00012E56 BF08000000              	mov rdi, 8 * 1	; new rib
 25391 00012E5B E8D4510000              	call malloc
 25392 00012E60 50                      	push rax
 25393 00012E61 BF10000000              	mov rdi, 8 * 2	; extended env
 25394 00012E66 E8C9510000              	call malloc
 25395 00012E6B 488B7D10                	mov rdi, ENV
 25396 00012E6F BE00000000              	mov rsi, 0
 25397 00012E74 BA01000000              	mov rdx, 1
 25398                                  .L_lambda_simple_env_loop_0158:	; ext_env[i + 1] <-- env[i]
 25399 00012E79 4883FE01                	cmp rsi, 1
 25400 00012E7D 7410                    	je .L_lambda_simple_env_end_0158
 25401 00012E7F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25402 00012E83 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25403 00012E87 48FFC6                  	inc rsi
 25404 00012E8A 48FFC2                  	inc rdx
 25405 00012E8D EBEA                    	jmp .L_lambda_simple_env_loop_0158
 25406                                  .L_lambda_simple_env_end_0158:
 25407 00012E8F 5B                      	pop rbx
 25408 00012E90 BE00000000              	mov rsi, 0
 25409                                  .L_lambda_simple_params_loop_0158:	; copy params
 25410 00012E95 4883FE01                	cmp rsi, 1
 25411 00012E99 740E                    	je .L_lambda_simple_params_end_0158
 25412 00012E9B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25413 00012EA0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25414 00012EA4 48FFC6                  	inc rsi
 25415 00012EA7 EBEC                    	jmp .L_lambda_simple_params_loop_0158
 25416                                  .L_lambda_simple_params_end_0158:
 25417 00012EA9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25418 00012EAC 4889C3                  	mov rbx, rax
 25419 00012EAF 58                      	pop rax
 25420 00012EB0 C60004                  	mov byte [rax], T_closure
 25421 00012EB3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25422 00012EB7 48C74009[C42E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0158
 25423 00012EBF E94F010000              	jmp .L_lambda_simple_end_0158
 25424                                  .L_lambda_simple_code_0158:	; lambda-simple body
 25425 00012EC4 48837C241003            	cmp qword [rsp + 8 * 2], 3
 25426 00012ECA 740B                    	je .L_lambda_simple_arity_check_ok_0158
 25427 00012ECC FF742410                	push qword [rsp + 8 * 2]
 25428 00012ED0 6A03                    	push 3
 25429 00012ED2 E916510000              	jmp L_error_incorrect_arity_simple
 25430                                  .L_lambda_simple_arity_check_ok_0158:
 25431 00012ED7 C8000000                	enter 0, 0
 25432                                  	; preparing a non-tail-call
 25433 00012EDB 488B4530                	mov rax, PARAM(2)	; param n
 25434 00012EDF 50                      	push rax
 25435 00012EE0 488B4528                	mov rax, PARAM(1)	; param i
 25436 00012EE4 50                      	push rax
 25437 00012EE5 6A02                    	push 2	; arg count
 25438 00012EE7 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 25439 00012EEF 803805                  	cmp byte [rax], T_undefined
 25440 00012EF2 0F840F500000            	je L_error_fvar_undefined
 25441 00012EF8 803804                  	cmp byte [rax], T_closure
 25442 00012EFB 0F858A500000            	jne L_error_non_closure
 25443 00012F01 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25444 00012F04 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25445 00012F07 483D[02000000]          	cmp rax, sob_boolean_false
 25446 00012F0D 0F84F2000000            	je .L_if_else_010d
 25447                                  	; preparing a tail-call
 25448                                  	; preparing a non-tail-call
 25449 00012F13 488B4530                	mov rax, PARAM(2)	; param n
 25450 00012F17 50                      	push rax
 25451                                  	; preparing a non-tail-call
 25452 00012F18 48B8-                   	mov rax, L_constants + 2270
 25452 00012F1A [DE08000000000000] 
 25453 00012F22 50                      	push rax
 25454 00012F23 488B4528                	mov rax, PARAM(1)	; param i
 25455 00012F27 50                      	push rax
 25456 00012F28 6A02                    	push 2	; arg count
 25457 00012F2A 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 25458 00012F32 803805                  	cmp byte [rax], T_undefined
 25459 00012F35 0F84CC4F0000            	je L_error_fvar_undefined
 25460 00012F3B 803804                  	cmp byte [rax], T_closure
 25461 00012F3E 0F8547500000            	jne L_error_non_closure
 25462 00012F44 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25463 00012F47 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25464 00012F4A 50                      	push rax
 25465 00012F4B 488B4520                	mov rax, PARAM(0)	; param str
 25466 00012F4F 50                      	push rax
 25467 00012F50 6A03                    	push 3	; arg count
 25468 00012F52 488B4510                	mov rax, ENV
 25469 00012F56 488B00                  	mov rax, qword [rax + 8 * 0]
 25470 00012F59 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 25471 00012F5C 488B00                  	mov rax, qword [rax]
 25472 00012F5F 803804                  	cmp byte [rax], T_closure
 25473 00012F62 0F8523500000            	jne L_error_non_closure
 25474 00012F68 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25475 00012F6B FF5009                  	call SOB_CLOSURE_CODE(rax)
 25476 00012F6E 50                      	push rax
 25477                                  	; preparing a non-tail-call
 25478 00012F6F 488B4528                	mov rax, PARAM(1)	; param i
 25479 00012F73 50                      	push rax
 25480 00012F74 488B4520                	mov rax, PARAM(0)	; param str
 25481 00012F78 50                      	push rax
 25482 00012F79 6A02                    	push 2	; arg count
 25483 00012F7B 488B0425[57160000]      	mov rax, qword [free_var_128]	; free var string-ref
 25484 00012F83 803805                  	cmp byte [rax], T_undefined
 25485 00012F86 0F847B4F0000            	je L_error_fvar_undefined
 25486 00012F8C 803804                  	cmp byte [rax], T_closure
 25487 00012F8F 0F85F64F0000            	jne L_error_non_closure
 25488 00012F95 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25489 00012F98 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25490 00012F9B 50                      	push rax
 25491 00012F9C 6A02                    	push 2	; arg count
 25492 00012F9E 488B0425[16130000]      	mov rax, qword [free_var_79]	; free var cons
 25493 00012FA6 803805                  	cmp byte [rax], T_undefined
 25494 00012FA9 0F84584F0000            	je L_error_fvar_undefined
 25495 00012FAF 803804                  	cmp byte [rax], T_closure
 25496 00012FB2 0F85D34F0000            	jne L_error_non_closure
 25497 00012FB8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25498 00012FBB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 25499 00012FBE FF7500                  	push qword[rbp]
 25500 00012FC1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 25501 00012FC4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 25502 00012FC8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 25503 00012FCC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 25504 00012FD0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 25505 00012FD3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 25506 00012FD6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 25507 00012FDB 4983C103                	add r9, 3 	 ;for getting to the params
 25508 00012FDF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 25509 00012FE3 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 25510                                  .L_tc_recycle_frame_loop_01f5:
 25511 00012FE6 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 25512 00012FE9 7410                    	je .L_tc_recycle_frame_done_01f5
 25513 00012FEB 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 25514 00012FEE 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 25515 00012FF1 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 25516 00012FF5 4983E808                	sub r8, 8	 ;move the top of the stack one down
 25517 00012FF9 EBEB                    	jmp .L_tc_recycle_frame_loop_01f5
 25518                                  .L_tc_recycle_frame_done_01f5:
 25519 00012FFB 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 25520 00012FFC 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 25521 00013000 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25522 00013003 EB0A                    	jmp .L_if_end_010d
 25523                                  .L_if_else_010d:
 25524 00013005 48B8-                   	mov rax, L_constants + 1
 25524 00013007 [0100000000000000] 
 25525                                  .L_if_end_010d:
 25526 0001300F C9                      	leave
 25527 00013010 C22800                  	ret AND_KILL_FRAME(3)
 25528                                  .L_lambda_simple_end_0158:	; new closure is in rax
 25529 00013013 50                      	push rax
 25530 00013014 488B4520                	mov rax, PARAM(0)	; param run
 25531 00013018 8F00                    	pop qword [rax]
 25532 0001301A 48B8-                   	mov rax, sob_void
 25532 0001301C [0000000000000000] 
 25533                                  
 25534 00013024 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25535 00013029 E806500000              	call malloc
 25536 0001302E 50                      	push rax
 25537 0001302F BF08000000              	mov rdi, 8 * 1	; new rib
 25538 00013034 E8FB4F0000              	call malloc
 25539 00013039 50                      	push rax
 25540 0001303A BF10000000              	mov rdi, 8 * 2	; extended env
 25541 0001303F E8F04F0000              	call malloc
 25542 00013044 488B7D10                	mov rdi, ENV
 25543 00013048 BE00000000              	mov rsi, 0
 25544 0001304D BA01000000              	mov rdx, 1
 25545                                  .L_lambda_simple_env_loop_0159:	; ext_env[i + 1] <-- env[i]
 25546 00013052 4883FE01                	cmp rsi, 1
 25547 00013056 7410                    	je .L_lambda_simple_env_end_0159
 25548 00013058 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25549 0001305C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25550 00013060 48FFC6                  	inc rsi
 25551 00013063 48FFC2                  	inc rdx
 25552 00013066 EBEA                    	jmp .L_lambda_simple_env_loop_0159
 25553                                  .L_lambda_simple_env_end_0159:
 25554 00013068 5B                      	pop rbx
 25555 00013069 BE00000000              	mov rsi, 0
 25556                                  .L_lambda_simple_params_loop_0159:	; copy params
 25557 0001306E 4883FE01                	cmp rsi, 1
 25558 00013072 740E                    	je .L_lambda_simple_params_end_0159
 25559 00013074 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25560 00013079 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25561 0001307D 48FFC6                  	inc rsi
 25562 00013080 EBEC                    	jmp .L_lambda_simple_params_loop_0159
 25563                                  .L_lambda_simple_params_end_0159:
 25564 00013082 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25565 00013085 4889C3                  	mov rbx, rax
 25566 00013088 58                      	pop rax
 25567 00013089 C60004                  	mov byte [rax], T_closure
 25568 0001308C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25569 00013090 48C74009[9D300100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0159
 25570 00013098 E9B6000000              	jmp .L_lambda_simple_end_0159
 25571                                  .L_lambda_simple_code_0159:	; lambda-simple body
 25572 0001309D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25573 000130A3 740B                    	je .L_lambda_simple_arity_check_ok_0159
 25574 000130A5 FF742410                	push qword [rsp + 8 * 2]
 25575 000130A9 6A01                    	push 1
 25576 000130AB E93D4F0000              	jmp L_error_incorrect_arity_simple
 25577                                  .L_lambda_simple_arity_check_ok_0159:
 25578 000130B0 C8000000                	enter 0, 0
 25579                                  	; preparing a tail-call
 25580                                  	; preparing a non-tail-call
 25581 000130B4 488B4520                	mov rax, PARAM(0)	; param str
 25582 000130B8 50                      	push rax
 25583 000130B9 6A01                    	push 1	; arg count
 25584 000130BB 488B0425[46160000]      	mov rax, qword [free_var_127]	; free var string-length
 25585 000130C3 803805                  	cmp byte [rax], T_undefined
 25586 000130C6 0F843B4E0000            	je L_error_fvar_undefined
 25587 000130CC 803804                  	cmp byte [rax], T_closure
 25588 000130CF 0F85B64E0000            	jne L_error_non_closure
 25589 000130D5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25590 000130D8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25591 000130DB 50                      	push rax
 25592 000130DC 48B8-                   	mov rax, L_constants + 2135
 25592 000130DE [5708000000000000] 
 25593 000130E6 50                      	push rax
 25594 000130E7 488B4520                	mov rax, PARAM(0)	; param str
 25595 000130EB 50                      	push rax
 25596 000130EC 6A03                    	push 3	; arg count
 25597 000130EE 488B4510                	mov rax, ENV
 25598 000130F2 488B00                  	mov rax, qword [rax + 8 * 0]
 25599 000130F5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 25600 000130F8 488B00                  	mov rax, qword [rax]
 25601 000130FB 803804                  	cmp byte [rax], T_closure
 25602 000130FE 0F85874E0000            	jne L_error_non_closure
 25603 00013104 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25604 00013107 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 25605 0001310A FF7500                  	push qword[rbp]
 25606 0001310D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 25607 00013110 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 25608 00013114 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 25609 00013118 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 25610 0001311C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 25611 0001311F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 25612 00013122 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 25613 00013127 4983C103                	add r9, 3 	 ;for getting to the params
 25614 0001312B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 25615 0001312F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 25616                                  .L_tc_recycle_frame_loop_01f6:
 25617 00013132 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 25618 00013135 7410                    	je .L_tc_recycle_frame_done_01f6
 25619 00013137 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 25620 0001313A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 25621 0001313D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 25622 00013141 4983E808                	sub r8, 8	 ;move the top of the stack one down
 25623 00013145 EBEB                    	jmp .L_tc_recycle_frame_loop_01f6
 25624                                  .L_tc_recycle_frame_done_01f6:
 25625 00013147 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 25626 00013148 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 25627 0001314C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25628 0001314F C9                      	leave
 25629 00013150 C21800                  	ret AND_KILL_FRAME(1)
 25630                                  .L_lambda_simple_end_0159:	; new closure is in rax
 25631 00013153 C9                      	leave
 25632 00013154 C21800                  	ret AND_KILL_FRAME(1)
 25633                                  .L_lambda_simple_end_0157:	; new closure is in rax
 25634 00013157 803804                  	cmp byte [rax], T_closure
 25635 0001315A 0F852B4E0000            	jne L_error_non_closure
 25636 00013160 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25637 00013163 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25638 00013166 48890425[BE150000]      	mov qword [free_var_119], rax
 25639 0001316E 48B8-                   	mov rax, sob_void
 25639 00013170 [0000000000000000] 
 25640                                  
 25641 00013178 4889C7                  	mov rdi, rax
 25642 0001317B E809510000              	call print_sexpr_if_not_void
 25643                                  	; preparing a non-tail-call
 25644 00013180 48B8-                   	mov rax, L_constants + 1993
 25644 00013182 [C907000000000000] 
 25645 0001318A 50                      	push rax
 25646 0001318B 6A01                    	push 1	; arg count
 25647 0001318D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25648 00013192 E89D4E0000              	call malloc
 25649 00013197 50                      	push rax
 25650 00013198 BF00000000              	mov rdi, 8 * 0	; new rib
 25651 0001319D E8924E0000              	call malloc
 25652 000131A2 50                      	push rax
 25653 000131A3 BF08000000              	mov rdi, 8 * 1	; extended env
 25654 000131A8 E8874E0000              	call malloc
 25655 000131AD 488B7D10                	mov rdi, ENV
 25656 000131B1 BE00000000              	mov rsi, 0
 25657 000131B6 BA01000000              	mov rdx, 1
 25658                                  .L_lambda_simple_env_loop_015a:	; ext_env[i + 1] <-- env[i]
 25659 000131BB 4883FE00                	cmp rsi, 0
 25660 000131BF 7410                    	je .L_lambda_simple_env_end_015a
 25661 000131C1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25662 000131C5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25663 000131C9 48FFC6                  	inc rsi
 25664 000131CC 48FFC2                  	inc rdx
 25665 000131CF EBEA                    	jmp .L_lambda_simple_env_loop_015a
 25666                                  .L_lambda_simple_env_end_015a:
 25667 000131D1 5B                      	pop rbx
 25668 000131D2 BE00000000              	mov rsi, 0
 25669                                  .L_lambda_simple_params_loop_015a:	; copy params
 25670 000131D7 4883FE00                	cmp rsi, 0
 25671 000131DB 740E                    	je .L_lambda_simple_params_end_015a
 25672 000131DD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25673 000131E2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25674 000131E6 48FFC6                  	inc rsi
 25675 000131E9 EBEC                    	jmp .L_lambda_simple_params_loop_015a
 25676                                  .L_lambda_simple_params_end_015a:
 25677 000131EB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25678 000131EE 4889C3                  	mov rbx, rax
 25679 000131F1 58                      	pop rax
 25680 000131F2 C60004                  	mov byte [rax], T_closure
 25681 000131F5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25682 000131F9 48C74009[06320100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_015a
 25683 00013201 E942030000              	jmp .L_lambda_simple_end_015a
 25684                                  .L_lambda_simple_code_015a:	; lambda-simple body
 25685 00013206 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25686 0001320C 740B                    	je .L_lambda_simple_arity_check_ok_015a
 25687 0001320E FF742410                	push qword [rsp + 8 * 2]
 25688 00013212 6A01                    	push 1
 25689 00013214 E9D44D0000              	jmp L_error_incorrect_arity_simple
 25690                                  .L_lambda_simple_arity_check_ok_015a:
 25691 00013219 C8000000                	enter 0, 0
 25692 0001321D BF08000000              	mov rdi, 8*1
 25693 00013222 E80D4E0000              	call malloc
 25694 00013227 488B5D20                	mov rbx, PARAM(0)
 25695 0001322B 488918                  	mov qword[rax], rbx
 25696 0001322E 48894520                	mov PARAM(0), rax
 25697 00013232 48B8-                   	mov rax, sob_void
 25697 00013234 [0000000000000000] 
 25698                                  
 25699 0001323C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25700 00013241 E8EE4D0000              	call malloc
 25701 00013246 50                      	push rax
 25702 00013247 BF08000000              	mov rdi, 8 * 1	; new rib
 25703 0001324C E8E34D0000              	call malloc
 25704 00013251 50                      	push rax
 25705 00013252 BF10000000              	mov rdi, 8 * 2	; extended env
 25706 00013257 E8D84D0000              	call malloc
 25707 0001325C 488B7D10                	mov rdi, ENV
 25708 00013260 BE00000000              	mov rsi, 0
 25709 00013265 BA01000000              	mov rdx, 1
 25710                                  .L_lambda_simple_env_loop_015b:	; ext_env[i + 1] <-- env[i]
 25711 0001326A 4883FE01                	cmp rsi, 1
 25712 0001326E 7410                    	je .L_lambda_simple_env_end_015b
 25713 00013270 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25714 00013274 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25715 00013278 48FFC6                  	inc rsi
 25716 0001327B 48FFC2                  	inc rdx
 25717 0001327E EBEA                    	jmp .L_lambda_simple_env_loop_015b
 25718                                  .L_lambda_simple_env_end_015b:
 25719 00013280 5B                      	pop rbx
 25720 00013281 BE00000000              	mov rsi, 0
 25721                                  .L_lambda_simple_params_loop_015b:	; copy params
 25722 00013286 4883FE01                	cmp rsi, 1
 25723 0001328A 740E                    	je .L_lambda_simple_params_end_015b
 25724 0001328C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25725 00013291 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25726 00013295 48FFC6                  	inc rsi
 25727 00013298 EBEC                    	jmp .L_lambda_simple_params_loop_015b
 25728                                  .L_lambda_simple_params_end_015b:
 25729 0001329A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25730 0001329D 4889C3                  	mov rbx, rax
 25731 000132A0 58                      	pop rax
 25732 000132A1 C60004                  	mov byte [rax], T_closure
 25733 000132A4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25734 000132A8 48C74009[B5320100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_015b
 25735 000132B0 E94F010000              	jmp .L_lambda_simple_end_015b
 25736                                  .L_lambda_simple_code_015b:	; lambda-simple body
 25737 000132B5 48837C241003            	cmp qword [rsp + 8 * 2], 3
 25738 000132BB 740B                    	je .L_lambda_simple_arity_check_ok_015b
 25739 000132BD FF742410                	push qword [rsp + 8 * 2]
 25740 000132C1 6A03                    	push 3
 25741 000132C3 E9254D0000              	jmp L_error_incorrect_arity_simple
 25742                                  .L_lambda_simple_arity_check_ok_015b:
 25743 000132C8 C8000000                	enter 0, 0
 25744                                  	; preparing a non-tail-call
 25745 000132CC 488B4530                	mov rax, PARAM(2)	; param n
 25746 000132D0 50                      	push rax
 25747 000132D1 488B4528                	mov rax, PARAM(1)	; param i
 25748 000132D5 50                      	push rax
 25749 000132D6 6A02                    	push 2	; arg count
 25750 000132D8 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 25751 000132E0 803805                  	cmp byte [rax], T_undefined
 25752 000132E3 0F841E4C0000            	je L_error_fvar_undefined
 25753 000132E9 803804                  	cmp byte [rax], T_closure
 25754 000132EC 0F85994C0000            	jne L_error_non_closure
 25755 000132F2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25756 000132F5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25757 000132F8 483D[02000000]          	cmp rax, sob_boolean_false
 25758 000132FE 0F84F2000000            	je .L_if_else_010e
 25759                                  	; preparing a tail-call
 25760                                  	; preparing a non-tail-call
 25761 00013304 488B4530                	mov rax, PARAM(2)	; param n
 25762 00013308 50                      	push rax
 25763                                  	; preparing a non-tail-call
 25764 00013309 48B8-                   	mov rax, L_constants + 2270
 25764 0001330B [DE08000000000000] 
 25765 00013313 50                      	push rax
 25766 00013314 488B4528                	mov rax, PARAM(1)	; param i
 25767 00013318 50                      	push rax
 25768 00013319 6A02                    	push 2	; arg count
 25769 0001331B 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 25770 00013323 803805                  	cmp byte [rax], T_undefined
 25771 00013326 0F84DB4B0000            	je L_error_fvar_undefined
 25772 0001332C 803804                  	cmp byte [rax], T_closure
 25773 0001332F 0F85564C0000            	jne L_error_non_closure
 25774 00013335 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25775 00013338 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25776 0001333B 50                      	push rax
 25777 0001333C 488B4520                	mov rax, PARAM(0)	; param v
 25778 00013340 50                      	push rax
 25779 00013341 6A03                    	push 3	; arg count
 25780 00013343 488B4510                	mov rax, ENV
 25781 00013347 488B00                  	mov rax, qword [rax + 8 * 0]
 25782 0001334A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 25783 0001334D 488B00                  	mov rax, qword [rax]
 25784 00013350 803804                  	cmp byte [rax], T_closure
 25785 00013353 0F85324C0000            	jne L_error_non_closure
 25786 00013359 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25787 0001335C FF5009                  	call SOB_CLOSURE_CODE(rax)
 25788 0001335F 50                      	push rax
 25789                                  	; preparing a non-tail-call
 25790 00013360 488B4528                	mov rax, PARAM(1)	; param i
 25791 00013364 50                      	push rax
 25792 00013365 488B4520                	mov rax, PARAM(0)	; param v
 25793 00013369 50                      	push rax
 25794 0001336A 6A02                    	push 2	; arg count
 25795 0001336C 488B0425[67170000]      	mov rax, qword [free_var_144]	; free var vector-ref
 25796 00013374 803805                  	cmp byte [rax], T_undefined
 25797 00013377 0F848A4B0000            	je L_error_fvar_undefined
 25798 0001337D 803804                  	cmp byte [rax], T_closure
 25799 00013380 0F85054C0000            	jne L_error_non_closure
 25800 00013386 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25801 00013389 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25802 0001338C 50                      	push rax
 25803 0001338D 6A02                    	push 2	; arg count
 25804 0001338F 488B0425[16130000]      	mov rax, qword [free_var_79]	; free var cons
 25805 00013397 803805                  	cmp byte [rax], T_undefined
 25806 0001339A 0F84674B0000            	je L_error_fvar_undefined
 25807 000133A0 803804                  	cmp byte [rax], T_closure
 25808 000133A3 0F85E24B0000            	jne L_error_non_closure
 25809 000133A9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25810 000133AC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 25811 000133AF FF7500                  	push qword[rbp]
 25812 000133B2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 25813 000133B5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 25814 000133B9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 25815 000133BD 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 25816 000133C1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 25817 000133C4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 25818 000133C7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 25819 000133CC 4983C103                	add r9, 3 	 ;for getting to the params
 25820 000133D0 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 25821 000133D4 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 25822                                  .L_tc_recycle_frame_loop_01f7:
 25823 000133D7 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 25824 000133DA 7410                    	je .L_tc_recycle_frame_done_01f7
 25825 000133DC 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 25826 000133DF 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 25827 000133E2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 25828 000133E6 4983E808                	sub r8, 8	 ;move the top of the stack one down
 25829 000133EA EBEB                    	jmp .L_tc_recycle_frame_loop_01f7
 25830                                  .L_tc_recycle_frame_done_01f7:
 25831 000133EC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 25832 000133ED 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 25833 000133F1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25834 000133F4 EB0A                    	jmp .L_if_end_010e
 25835                                  .L_if_else_010e:
 25836 000133F6 48B8-                   	mov rax, L_constants + 1
 25836 000133F8 [0100000000000000] 
 25837                                  .L_if_end_010e:
 25838 00013400 C9                      	leave
 25839 00013401 C22800                  	ret AND_KILL_FRAME(3)
 25840                                  .L_lambda_simple_end_015b:	; new closure is in rax
 25841 00013404 50                      	push rax
 25842 00013405 488B4520                	mov rax, PARAM(0)	; param run
 25843 00013409 8F00                    	pop qword [rax]
 25844 0001340B 48B8-                   	mov rax, sob_void
 25844 0001340D [0000000000000000] 
 25845                                  
 25846 00013415 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25847 0001341A E8154C0000              	call malloc
 25848 0001341F 50                      	push rax
 25849 00013420 BF08000000              	mov rdi, 8 * 1	; new rib
 25850 00013425 E80A4C0000              	call malloc
 25851 0001342A 50                      	push rax
 25852 0001342B BF10000000              	mov rdi, 8 * 2	; extended env
 25853 00013430 E8FF4B0000              	call malloc
 25854 00013435 488B7D10                	mov rdi, ENV
 25855 00013439 BE00000000              	mov rsi, 0
 25856 0001343E BA01000000              	mov rdx, 1
 25857                                  .L_lambda_simple_env_loop_015c:	; ext_env[i + 1] <-- env[i]
 25858 00013443 4883FE01                	cmp rsi, 1
 25859 00013447 7410                    	je .L_lambda_simple_env_end_015c
 25860 00013449 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25861 0001344D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25862 00013451 48FFC6                  	inc rsi
 25863 00013454 48FFC2                  	inc rdx
 25864 00013457 EBEA                    	jmp .L_lambda_simple_env_loop_015c
 25865                                  .L_lambda_simple_env_end_015c:
 25866 00013459 5B                      	pop rbx
 25867 0001345A BE00000000              	mov rsi, 0
 25868                                  .L_lambda_simple_params_loop_015c:	; copy params
 25869 0001345F 4883FE01                	cmp rsi, 1
 25870 00013463 740E                    	je .L_lambda_simple_params_end_015c
 25871 00013465 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25872 0001346A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25873 0001346E 48FFC6                  	inc rsi
 25874 00013471 EBEC                    	jmp .L_lambda_simple_params_loop_015c
 25875                                  .L_lambda_simple_params_end_015c:
 25876 00013473 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25877 00013476 4889C3                  	mov rbx, rax
 25878 00013479 58                      	pop rax
 25879 0001347A C60004                  	mov byte [rax], T_closure
 25880 0001347D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25881 00013481 48C74009[8E340100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_015c
 25882 00013489 E9B6000000              	jmp .L_lambda_simple_end_015c
 25883                                  .L_lambda_simple_code_015c:	; lambda-simple body
 25884 0001348E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25885 00013494 740B                    	je .L_lambda_simple_arity_check_ok_015c
 25886 00013496 FF742410                	push qword [rsp + 8 * 2]
 25887 0001349A 6A01                    	push 1
 25888 0001349C E94C4B0000              	jmp L_error_incorrect_arity_simple
 25889                                  .L_lambda_simple_arity_check_ok_015c:
 25890 000134A1 C8000000                	enter 0, 0
 25891                                  	; preparing a tail-call
 25892                                  	; preparing a non-tail-call
 25893 000134A5 488B4520                	mov rax, PARAM(0)	; param v
 25894 000134A9 50                      	push rax
 25895 000134AA 6A01                    	push 1	; arg count
 25896 000134AC 488B0425[56170000]      	mov rax, qword [free_var_143]	; free var vector-length
 25897 000134B4 803805                  	cmp byte [rax], T_undefined
 25898 000134B7 0F844A4A0000            	je L_error_fvar_undefined
 25899 000134BD 803804                  	cmp byte [rax], T_closure
 25900 000134C0 0F85C54A0000            	jne L_error_non_closure
 25901 000134C6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25902 000134C9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25903 000134CC 50                      	push rax
 25904 000134CD 48B8-                   	mov rax, L_constants + 2135
 25904 000134CF [5708000000000000] 
 25905 000134D7 50                      	push rax
 25906 000134D8 488B4520                	mov rax, PARAM(0)	; param v
 25907 000134DC 50                      	push rax
 25908 000134DD 6A03                    	push 3	; arg count
 25909 000134DF 488B4510                	mov rax, ENV
 25910 000134E3 488B00                  	mov rax, qword [rax + 8 * 0]
 25911 000134E6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 25912 000134E9 488B00                  	mov rax, qword [rax]
 25913 000134EC 803804                  	cmp byte [rax], T_closure
 25914 000134EF 0F85964A0000            	jne L_error_non_closure
 25915 000134F5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25916 000134F8 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 25917 000134FB FF7500                  	push qword[rbp]
 25918 000134FE 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 25919 00013501 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 25920 00013505 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 25921 00013509 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 25922 0001350D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 25923 00013510 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 25924 00013513 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 25925 00013518 4983C103                	add r9, 3 	 ;for getting to the params
 25926 0001351C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 25927 00013520 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 25928                                  .L_tc_recycle_frame_loop_01f8:
 25929 00013523 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 25930 00013526 7410                    	je .L_tc_recycle_frame_done_01f8
 25931 00013528 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 25932 0001352B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 25933 0001352E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 25934 00013532 4983E808                	sub r8, 8	 ;move the top of the stack one down
 25935 00013536 EBEB                    	jmp .L_tc_recycle_frame_loop_01f8
 25936                                  .L_tc_recycle_frame_done_01f8:
 25937 00013538 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 25938 00013539 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 25939 0001353D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25940 00013540 C9                      	leave
 25941 00013541 C21800                  	ret AND_KILL_FRAME(1)
 25942                                  .L_lambda_simple_end_015c:	; new closure is in rax
 25943 00013544 C9                      	leave
 25944 00013545 C21800                  	ret AND_KILL_FRAME(1)
 25945                                  .L_lambda_simple_end_015a:	; new closure is in rax
 25946 00013548 803804                  	cmp byte [rax], T_closure
 25947 0001354B 0F853A4A0000            	jne L_error_non_closure
 25948 00013551 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25949 00013554 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25950 00013557 48890425[34170000]      	mov qword [free_var_141], rax
 25951 0001355F 48B8-                   	mov rax, sob_void
 25951 00013561 [0000000000000000] 
 25952                                  
 25953 00013569 4889C7                  	mov rdi, rax
 25954 0001356C E8184D0000              	call print_sexpr_if_not_void
 25955 00013571 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25956 00013576 E8B94A0000              	call malloc
 25957 0001357B 50                      	push rax
 25958 0001357C BF00000000              	mov rdi, 8 * 0	; new rib
 25959 00013581 E8AE4A0000              	call malloc
 25960 00013586 50                      	push rax
 25961 00013587 BF08000000              	mov rdi, 8 * 1	; extended env
 25962 0001358C E8A34A0000              	call malloc
 25963 00013591 488B7D10                	mov rdi, ENV
 25964 00013595 BE00000000              	mov rsi, 0
 25965 0001359A BA01000000              	mov rdx, 1
 25966                                  .L_lambda_simple_env_loop_015d:	; ext_env[i + 1] <-- env[i]
 25967 0001359F 4883FE00                	cmp rsi, 0
 25968 000135A3 7410                    	je .L_lambda_simple_env_end_015d
 25969 000135A5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25970 000135A9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25971 000135AD 48FFC6                  	inc rsi
 25972 000135B0 48FFC2                  	inc rdx
 25973 000135B3 EBEA                    	jmp .L_lambda_simple_env_loop_015d
 25974                                  .L_lambda_simple_env_end_015d:
 25975 000135B5 5B                      	pop rbx
 25976 000135B6 BE00000000              	mov rsi, 0
 25977                                  .L_lambda_simple_params_loop_015d:	; copy params
 25978 000135BB 4883FE00                	cmp rsi, 0
 25979 000135BF 740E                    	je .L_lambda_simple_params_end_015d
 25980 000135C1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25981 000135C6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25982 000135CA 48FFC6                  	inc rsi
 25983 000135CD EBEC                    	jmp .L_lambda_simple_params_loop_015d
 25984                                  .L_lambda_simple_params_end_015d:
 25985 000135CF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25986 000135D2 4889C3                  	mov rbx, rax
 25987 000135D5 58                      	pop rax
 25988 000135D6 C60004                  	mov byte [rax], T_closure
 25989 000135D9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25990 000135DD 48C74009[EA350100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_015d
 25991 000135E5 E9AA000000              	jmp .L_lambda_simple_end_015d
 25992                                  .L_lambda_simple_code_015d:	; lambda-simple body
 25993 000135EA 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25994 000135F0 740B                    	je .L_lambda_simple_arity_check_ok_015d
 25995 000135F2 FF742410                	push qword [rsp + 8 * 2]
 25996 000135F6 6A01                    	push 1
 25997 000135F8 E9F0490000              	jmp L_error_incorrect_arity_simple
 25998                                  .L_lambda_simple_arity_check_ok_015d:
 25999 000135FD C8000000                	enter 0, 0
 26000                                  	; preparing a tail-call
 26001 00013601 488B4520                	mov rax, PARAM(0)	; param n
 26002 00013605 50                      	push rax
 26003                                  	; preparing a non-tail-call
 26004 00013606 6A00                    	push 0	; arg count
 26005 00013608 488B0425[12170000]      	mov rax, qword [free_var_139]	; free var trng
 26006 00013610 803805                  	cmp byte [rax], T_undefined
 26007 00013613 0F84EE480000            	je L_error_fvar_undefined
 26008 00013619 803804                  	cmp byte [rax], T_closure
 26009 0001361C 0F8569490000            	jne L_error_non_closure
 26010 00013622 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26011 00013625 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26012 00013628 50                      	push rax
 26013 00013629 6A02                    	push 2	; arg count
 26014 0001362B 488B0425[9C150000]      	mov rax, qword [free_var_117]	; free var remainder
 26015 00013633 803805                  	cmp byte [rax], T_undefined
 26016 00013636 0F84CB480000            	je L_error_fvar_undefined
 26017 0001363C 803804                  	cmp byte [rax], T_closure
 26018 0001363F 0F8546490000            	jne L_error_non_closure
 26019 00013645 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26020 00013648 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26021 0001364B FF7500                  	push qword[rbp]
 26022 0001364E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26023 00013651 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26024 00013655 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26025 00013659 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26026 0001365D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26027 00013660 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26028 00013663 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26029 00013668 4983C103                	add r9, 3 	 ;for getting to the params
 26030 0001366C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26031 00013670 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26032                                  .L_tc_recycle_frame_loop_01f9:
 26033 00013673 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26034 00013676 7410                    	je .L_tc_recycle_frame_done_01f9
 26035 00013678 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26036 0001367B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26037 0001367E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26038 00013682 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26039 00013686 EBEB                    	jmp .L_tc_recycle_frame_loop_01f9
 26040                                  .L_tc_recycle_frame_done_01f9:
 26041 00013688 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26042 00013689 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26043 0001368D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26044 00013690 C9                      	leave
 26045 00013691 C21800                  	ret AND_KILL_FRAME(1)
 26046                                  .L_lambda_simple_end_015d:	; new closure is in rax
 26047 00013694 48890425[58150000]      	mov qword [free_var_113], rax
 26048 0001369C 48B8-                   	mov rax, sob_void
 26048 0001369E [0000000000000000] 
 26049                                  
 26050 000136A6 4889C7                  	mov rdi, rax
 26051 000136A9 E8DB4B0000              	call print_sexpr_if_not_void
 26052 000136AE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26053 000136B3 E87C490000              	call malloc
 26054 000136B8 50                      	push rax
 26055 000136B9 BF00000000              	mov rdi, 8 * 0	; new rib
 26056 000136BE E871490000              	call malloc
 26057 000136C3 50                      	push rax
 26058 000136C4 BF08000000              	mov rdi, 8 * 1	; extended env
 26059 000136C9 E866490000              	call malloc
 26060 000136CE 488B7D10                	mov rdi, ENV
 26061 000136D2 BE00000000              	mov rsi, 0
 26062 000136D7 BA01000000              	mov rdx, 1
 26063                                  .L_lambda_simple_env_loop_015e:	; ext_env[i + 1] <-- env[i]
 26064 000136DC 4883FE00                	cmp rsi, 0
 26065 000136E0 7410                    	je .L_lambda_simple_env_end_015e
 26066 000136E2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26067 000136E6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26068 000136EA 48FFC6                  	inc rsi
 26069 000136ED 48FFC2                  	inc rdx
 26070 000136F0 EBEA                    	jmp .L_lambda_simple_env_loop_015e
 26071                                  .L_lambda_simple_env_end_015e:
 26072 000136F2 5B                      	pop rbx
 26073 000136F3 BE00000000              	mov rsi, 0
 26074                                  .L_lambda_simple_params_loop_015e:	; copy params
 26075 000136F8 4883FE00                	cmp rsi, 0
 26076 000136FC 740E                    	je .L_lambda_simple_params_end_015e
 26077 000136FE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26078 00013703 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26079 00013707 48FFC6                  	inc rsi
 26080 0001370A EBEC                    	jmp .L_lambda_simple_params_loop_015e
 26081                                  .L_lambda_simple_params_end_015e:
 26082 0001370C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26083 0001370F 4889C3                  	mov rbx, rax
 26084 00013712 58                      	pop rax
 26085 00013713 C60004                  	mov byte [rax], T_closure
 26086 00013716 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26087 0001371A 48C74009[27370100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_015e
 26088 00013722 E992000000              	jmp .L_lambda_simple_end_015e
 26089                                  .L_lambda_simple_code_015e:	; lambda-simple body
 26090 00013727 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26091 0001372D 740B                    	je .L_lambda_simple_arity_check_ok_015e
 26092 0001372F FF742410                	push qword [rsp + 8 * 2]
 26093 00013733 6A01                    	push 1
 26094 00013735 E9B3480000              	jmp L_error_incorrect_arity_simple
 26095                                  .L_lambda_simple_arity_check_ok_015e:
 26096 0001373A C8000000                	enter 0, 0
 26097                                  	; preparing a tail-call
 26098 0001373E 488B4520                	mov rax, PARAM(0)	; param x
 26099 00013742 50                      	push rax
 26100 00013743 48B8-                   	mov rax, L_constants + 2135
 26100 00013745 [5708000000000000] 
 26101 0001374D 50                      	push rax
 26102 0001374E 6A02                    	push 2	; arg count
 26103 00013750 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 26104 00013758 803805                  	cmp byte [rax], T_undefined
 26105 0001375B 0F84A6470000            	je L_error_fvar_undefined
 26106 00013761 803804                  	cmp byte [rax], T_closure
 26107 00013764 0F8521480000            	jne L_error_non_closure
 26108 0001376A FF7001                  	push SOB_CLOSURE_ENV(rax)
 26109 0001376D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26110 00013770 FF7500                  	push qword[rbp]
 26111 00013773 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26112 00013776 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26113 0001377A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26114 0001377E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26115 00013782 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26116 00013785 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26117 00013788 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26118 0001378D 4983C103                	add r9, 3 	 ;for getting to the params
 26119 00013791 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26120 00013795 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26121                                  .L_tc_recycle_frame_loop_01fa:
 26122 00013798 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26123 0001379B 7410                    	je .L_tc_recycle_frame_done_01fa
 26124 0001379D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26125 000137A0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26126 000137A3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26127 000137A7 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26128 000137AB EBEB                    	jmp .L_tc_recycle_frame_loop_01fa
 26129                                  .L_tc_recycle_frame_done_01fa:
 26130 000137AD 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26131 000137AE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26132 000137B2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26133 000137B5 C9                      	leave
 26134 000137B6 C21800                  	ret AND_KILL_FRAME(1)
 26135                                  .L_lambda_simple_end_015e:	; new closure is in rax
 26136 000137B9 48890425[47150000]      	mov qword [free_var_112], rax
 26137 000137C1 48B8-                   	mov rax, sob_void
 26137 000137C3 [0000000000000000] 
 26138                                  
 26139 000137CB 4889C7                  	mov rdi, rax
 26140 000137CE E8B64A0000              	call print_sexpr_if_not_void
 26141 000137D3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26142 000137D8 E857480000              	call malloc
 26143 000137DD 50                      	push rax
 26144 000137DE BF00000000              	mov rdi, 8 * 0	; new rib
 26145 000137E3 E84C480000              	call malloc
 26146 000137E8 50                      	push rax
 26147 000137E9 BF08000000              	mov rdi, 8 * 1	; extended env
 26148 000137EE E841480000              	call malloc
 26149 000137F3 488B7D10                	mov rdi, ENV
 26150 000137F7 BE00000000              	mov rsi, 0
 26151 000137FC BA01000000              	mov rdx, 1
 26152                                  .L_lambda_simple_env_loop_015f:	; ext_env[i + 1] <-- env[i]
 26153 00013801 4883FE00                	cmp rsi, 0
 26154 00013805 7410                    	je .L_lambda_simple_env_end_015f
 26155 00013807 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26156 0001380B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26157 0001380F 48FFC6                  	inc rsi
 26158 00013812 48FFC2                  	inc rdx
 26159 00013815 EBEA                    	jmp .L_lambda_simple_env_loop_015f
 26160                                  .L_lambda_simple_env_end_015f:
 26161 00013817 5B                      	pop rbx
 26162 00013818 BE00000000              	mov rsi, 0
 26163                                  .L_lambda_simple_params_loop_015f:	; copy params
 26164 0001381D 4883FE00                	cmp rsi, 0
 26165 00013821 740E                    	je .L_lambda_simple_params_end_015f
 26166 00013823 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26167 00013828 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26168 0001382C 48FFC6                  	inc rsi
 26169 0001382F EBEC                    	jmp .L_lambda_simple_params_loop_015f
 26170                                  .L_lambda_simple_params_end_015f:
 26171 00013831 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26172 00013834 4889C3                  	mov rbx, rax
 26173 00013837 58                      	pop rax
 26174 00013838 C60004                  	mov byte [rax], T_closure
 26175 0001383B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26176 0001383F 48C74009[4C380100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_015f
 26177 00013847 E992000000              	jmp .L_lambda_simple_end_015f
 26178                                  .L_lambda_simple_code_015f:	; lambda-simple body
 26179 0001384C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26180 00013852 740B                    	je .L_lambda_simple_arity_check_ok_015f
 26181 00013854 FF742410                	push qword [rsp + 8 * 2]
 26182 00013858 6A01                    	push 1
 26183 0001385A E98E470000              	jmp L_error_incorrect_arity_simple
 26184                                  .L_lambda_simple_arity_check_ok_015f:
 26185 0001385F C8000000                	enter 0, 0
 26186                                  	; preparing a tail-call
 26187 00013863 48B8-                   	mov rax, L_constants + 2135
 26187 00013865 [5708000000000000] 
 26188 0001386D 50                      	push rax
 26189 0001386E 488B4520                	mov rax, PARAM(0)	; param x
 26190 00013872 50                      	push rax
 26191 00013873 6A02                    	push 2	; arg count
 26192 00013875 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 26193 0001387D 803805                  	cmp byte [rax], T_undefined
 26194 00013880 0F8481460000            	je L_error_fvar_undefined
 26195 00013886 803804                  	cmp byte [rax], T_closure
 26196 00013889 0F85FC460000            	jne L_error_non_closure
 26197 0001388F FF7001                  	push SOB_CLOSURE_ENV(rax)
 26198 00013892 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26199 00013895 FF7500                  	push qword[rbp]
 26200 00013898 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26201 0001389B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26202 0001389F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26203 000138A3 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26204 000138A7 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26205 000138AA 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26206 000138AD 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26207 000138B2 4983C103                	add r9, 3 	 ;for getting to the params
 26208 000138B6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26209 000138BA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26210                                  .L_tc_recycle_frame_loop_01fb:
 26211 000138BD 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26212 000138C0 7410                    	je .L_tc_recycle_frame_done_01fb
 26213 000138C2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26214 000138C5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26215 000138C8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26216 000138CC 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26217 000138D0 EBEB                    	jmp .L_tc_recycle_frame_loop_01fb
 26218                                  .L_tc_recycle_frame_done_01fb:
 26219 000138D2 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26220 000138D3 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26221 000138D7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26222 000138DA C9                      	leave
 26223 000138DB C21800                  	ret AND_KILL_FRAME(1)
 26224                                  .L_lambda_simple_end_015f:	; new closure is in rax
 26225 000138DE 48890425[BF140000]      	mov qword [free_var_104], rax
 26226 000138E6 48B8-                   	mov rax, sob_void
 26226 000138E8 [0000000000000000] 
 26227                                  
 26228 000138F0 4889C7                  	mov rdi, rax
 26229 000138F3 E891490000              	call print_sexpr_if_not_void
 26230 000138F8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26231 000138FD E832470000              	call malloc
 26232 00013902 50                      	push rax
 26233 00013903 BF00000000              	mov rdi, 8 * 0	; new rib
 26234 00013908 E827470000              	call malloc
 26235 0001390D 50                      	push rax
 26236 0001390E BF08000000              	mov rdi, 8 * 1	; extended env
 26237 00013913 E81C470000              	call malloc
 26238 00013918 488B7D10                	mov rdi, ENV
 26239 0001391C BE00000000              	mov rsi, 0
 26240 00013921 BA01000000              	mov rdx, 1
 26241                                  .L_lambda_simple_env_loop_0160:	; ext_env[i + 1] <-- env[i]
 26242 00013926 4883FE00                	cmp rsi, 0
 26243 0001392A 7410                    	je .L_lambda_simple_env_end_0160
 26244 0001392C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26245 00013930 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26246 00013934 48FFC6                  	inc rsi
 26247 00013937 48FFC2                  	inc rdx
 26248 0001393A EBEA                    	jmp .L_lambda_simple_env_loop_0160
 26249                                  .L_lambda_simple_env_end_0160:
 26250 0001393C 5B                      	pop rbx
 26251 0001393D BE00000000              	mov rsi, 0
 26252                                  .L_lambda_simple_params_loop_0160:	; copy params
 26253 00013942 4883FE00                	cmp rsi, 0
 26254 00013946 740E                    	je .L_lambda_simple_params_end_0160
 26255 00013948 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26256 0001394D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26257 00013951 48FFC6                  	inc rsi
 26258 00013954 EBEC                    	jmp .L_lambda_simple_params_loop_0160
 26259                                  .L_lambda_simple_params_end_0160:
 26260 00013956 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26261 00013959 4889C3                  	mov rbx, rax
 26262 0001395C 58                      	pop rax
 26263 0001395D C60004                  	mov byte [rax], T_closure
 26264 00013960 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26265 00013964 48C74009[71390100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0160
 26266 0001396C E9B5000000              	jmp .L_lambda_simple_end_0160
 26267                                  .L_lambda_simple_code_0160:	; lambda-simple body
 26268 00013971 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26269 00013977 740B                    	je .L_lambda_simple_arity_check_ok_0160
 26270 00013979 FF742410                	push qword [rsp + 8 * 2]
 26271 0001397D 6A01                    	push 1
 26272 0001397F E969460000              	jmp L_error_incorrect_arity_simple
 26273                                  .L_lambda_simple_arity_check_ok_0160:
 26274 00013984 C8000000                	enter 0, 0
 26275                                  	; preparing a tail-call
 26276                                  	; preparing a non-tail-call
 26277 00013988 48B8-                   	mov rax, L_constants + 3190
 26277 0001398A [760C000000000000] 
 26278 00013992 50                      	push rax
 26279 00013993 488B4520                	mov rax, PARAM(0)	; param n
 26280 00013997 50                      	push rax
 26281 00013998 6A02                    	push 2	; arg count
 26282 0001399A 488B0425[9C150000]      	mov rax, qword [free_var_117]	; free var remainder
 26283 000139A2 803805                  	cmp byte [rax], T_undefined
 26284 000139A5 0F845C450000            	je L_error_fvar_undefined
 26285 000139AB 803804                  	cmp byte [rax], T_closure
 26286 000139AE 0F85D7450000            	jne L_error_non_closure
 26287 000139B4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26288 000139B7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26289 000139BA 50                      	push rax
 26290 000139BB 6A01                    	push 1	; arg count
 26291 000139BD 488B0425[DE170000]      	mov rax, qword [free_var_151]	; free var zero?
 26292 000139C5 803805                  	cmp byte [rax], T_undefined
 26293 000139C8 0F8439450000            	je L_error_fvar_undefined
 26294 000139CE 803804                  	cmp byte [rax], T_closure
 26295 000139D1 0F85B4450000            	jne L_error_non_closure
 26296 000139D7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26297 000139DA FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26298 000139DD FF7500                  	push qword[rbp]
 26299 000139E0 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26300 000139E3 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26301 000139E7 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26302 000139EB 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26303 000139EF 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26304 000139F2 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26305 000139F5 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26306 000139FA 4983C103                	add r9, 3 	 ;for getting to the params
 26307 000139FE 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26308 00013A02 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26309                                  .L_tc_recycle_frame_loop_01fc:
 26310 00013A05 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26311 00013A08 7410                    	je .L_tc_recycle_frame_done_01fc
 26312 00013A0A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26313 00013A0D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26314 00013A10 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26315 00013A14 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26316 00013A18 EBEB                    	jmp .L_tc_recycle_frame_loop_01fc
 26317                                  .L_tc_recycle_frame_done_01fc:
 26318 00013A1A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26319 00013A1B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26320 00013A1F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26321 00013A22 C9                      	leave
 26322 00013A23 C21800                  	ret AND_KILL_FRAME(1)
 26323                                  .L_lambda_simple_end_0160:	; new closure is in rax
 26324 00013A26 48890425[5A130000]      	mov qword [free_var_83], rax
 26325 00013A2E 48B8-                   	mov rax, sob_void
 26325 00013A30 [0000000000000000] 
 26326                                  
 26327 00013A38 4889C7                  	mov rdi, rax
 26328 00013A3B E849480000              	call print_sexpr_if_not_void
 26329 00013A40 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26330 00013A45 E8EA450000              	call malloc
 26331 00013A4A 50                      	push rax
 26332 00013A4B BF00000000              	mov rdi, 8 * 0	; new rib
 26333 00013A50 E8DF450000              	call malloc
 26334 00013A55 50                      	push rax
 26335 00013A56 BF08000000              	mov rdi, 8 * 1	; extended env
 26336 00013A5B E8D4450000              	call malloc
 26337 00013A60 488B7D10                	mov rdi, ENV
 26338 00013A64 BE00000000              	mov rsi, 0
 26339 00013A69 BA01000000              	mov rdx, 1
 26340                                  .L_lambda_simple_env_loop_0161:	; ext_env[i + 1] <-- env[i]
 26341 00013A6E 4883FE00                	cmp rsi, 0
 26342 00013A72 7410                    	je .L_lambda_simple_env_end_0161
 26343 00013A74 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26344 00013A78 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26345 00013A7C 48FFC6                  	inc rsi
 26346 00013A7F 48FFC2                  	inc rdx
 26347 00013A82 EBEA                    	jmp .L_lambda_simple_env_loop_0161
 26348                                  .L_lambda_simple_env_end_0161:
 26349 00013A84 5B                      	pop rbx
 26350 00013A85 BE00000000              	mov rsi, 0
 26351                                  .L_lambda_simple_params_loop_0161:	; copy params
 26352 00013A8A 4883FE00                	cmp rsi, 0
 26353 00013A8E 740E                    	je .L_lambda_simple_params_end_0161
 26354 00013A90 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26355 00013A95 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26356 00013A99 48FFC6                  	inc rsi
 26357 00013A9C EBEC                    	jmp .L_lambda_simple_params_loop_0161
 26358                                  .L_lambda_simple_params_end_0161:
 26359 00013A9E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26360 00013AA1 4889C3                  	mov rbx, rax
 26361 00013AA4 58                      	pop rax
 26362 00013AA5 C60004                  	mov byte [rax], T_closure
 26363 00013AA8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26364 00013AAC 48C74009[B93A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0161
 26365 00013AB4 E9AA000000              	jmp .L_lambda_simple_end_0161
 26366                                  .L_lambda_simple_code_0161:	; lambda-simple body
 26367 00013AB9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26368 00013ABF 740B                    	je .L_lambda_simple_arity_check_ok_0161
 26369 00013AC1 FF742410                	push qword [rsp + 8 * 2]
 26370 00013AC5 6A01                    	push 1
 26371 00013AC7 E921450000              	jmp L_error_incorrect_arity_simple
 26372                                  .L_lambda_simple_arity_check_ok_0161:
 26373 00013ACC C8000000                	enter 0, 0
 26374                                  	; preparing a tail-call
 26375                                  	; preparing a non-tail-call
 26376 00013AD0 488B4520                	mov rax, PARAM(0)	; param n
 26377 00013AD4 50                      	push rax
 26378 00013AD5 6A01                    	push 1	; arg count
 26379 00013AD7 488B0425[5A130000]      	mov rax, qword [free_var_83]	; free var even?
 26380 00013ADF 803805                  	cmp byte [rax], T_undefined
 26381 00013AE2 0F841F440000            	je L_error_fvar_undefined
 26382 00013AE8 803804                  	cmp byte [rax], T_closure
 26383 00013AEB 0F859A440000            	jne L_error_non_closure
 26384 00013AF1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26385 00013AF4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26386 00013AF7 50                      	push rax
 26387 00013AF8 6A01                    	push 1	; arg count
 26388 00013AFA 488B0425[E1140000]      	mov rax, qword [free_var_106]	; free var not
 26389 00013B02 803805                  	cmp byte [rax], T_undefined
 26390 00013B05 0F84FC430000            	je L_error_fvar_undefined
 26391 00013B0B 803804                  	cmp byte [rax], T_closure
 26392 00013B0E 0F8577440000            	jne L_error_non_closure
 26393 00013B14 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26394 00013B17 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26395 00013B1A FF7500                  	push qword[rbp]
 26396 00013B1D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26397 00013B20 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26398 00013B24 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26399 00013B28 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26400 00013B2C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26401 00013B2F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26402 00013B32 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26403 00013B37 4983C103                	add r9, 3 	 ;for getting to the params
 26404 00013B3B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26405 00013B3F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26406                                  .L_tc_recycle_frame_loop_01fd:
 26407 00013B42 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26408 00013B45 7410                    	je .L_tc_recycle_frame_done_01fd
 26409 00013B47 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26410 00013B4A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26411 00013B4D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26412 00013B51 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26413 00013B55 EBEB                    	jmp .L_tc_recycle_frame_loop_01fd
 26414                                  .L_tc_recycle_frame_done_01fd:
 26415 00013B57 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26416 00013B58 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26417 00013B5C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26418 00013B5F C9                      	leave
 26419 00013B60 C21800                  	ret AND_KILL_FRAME(1)
 26420                                  .L_lambda_simple_end_0161:	; new closure is in rax
 26421 00013B63 48890425[14150000]      	mov qword [free_var_109], rax
 26422 00013B6B 48B8-                   	mov rax, sob_void
 26422 00013B6D [0000000000000000] 
 26423                                  
 26424 00013B75 4889C7                  	mov rdi, rax
 26425 00013B78 E80C470000              	call print_sexpr_if_not_void
 26426 00013B7D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26427 00013B82 E8AD440000              	call malloc
 26428 00013B87 50                      	push rax
 26429 00013B88 BF00000000              	mov rdi, 8 * 0	; new rib
 26430 00013B8D E8A2440000              	call malloc
 26431 00013B92 50                      	push rax
 26432 00013B93 BF08000000              	mov rdi, 8 * 1	; extended env
 26433 00013B98 E897440000              	call malloc
 26434 00013B9D 488B7D10                	mov rdi, ENV
 26435 00013BA1 BE00000000              	mov rsi, 0
 26436 00013BA6 BA01000000              	mov rdx, 1
 26437                                  .L_lambda_simple_env_loop_0162:	; ext_env[i + 1] <-- env[i]
 26438 00013BAB 4883FE00                	cmp rsi, 0
 26439 00013BAF 7410                    	je .L_lambda_simple_env_end_0162
 26440 00013BB1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26441 00013BB5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26442 00013BB9 48FFC6                  	inc rsi
 26443 00013BBC 48FFC2                  	inc rdx
 26444 00013BBF EBEA                    	jmp .L_lambda_simple_env_loop_0162
 26445                                  .L_lambda_simple_env_end_0162:
 26446 00013BC1 5B                      	pop rbx
 26447 00013BC2 BE00000000              	mov rsi, 0
 26448                                  .L_lambda_simple_params_loop_0162:	; copy params
 26449 00013BC7 4883FE00                	cmp rsi, 0
 26450 00013BCB 740E                    	je .L_lambda_simple_params_end_0162
 26451 00013BCD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26452 00013BD2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26453 00013BD6 48FFC6                  	inc rsi
 26454 00013BD9 EBEC                    	jmp .L_lambda_simple_params_loop_0162
 26455                                  .L_lambda_simple_params_end_0162:
 26456 00013BDB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26457 00013BDE 4889C3                  	mov rbx, rax
 26458 00013BE1 58                      	pop rax
 26459 00013BE2 C60004                  	mov byte [rax], T_closure
 26460 00013BE5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26461 00013BE9 48C74009[F63B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0162
 26462 00013BF1 E9BC000000              	jmp .L_lambda_simple_end_0162
 26463                                  .L_lambda_simple_code_0162:	; lambda-simple body
 26464 00013BF6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26465 00013BFC 740B                    	je .L_lambda_simple_arity_check_ok_0162
 26466 00013BFE FF742410                	push qword [rsp + 8 * 2]
 26467 00013C02 6A01                    	push 1
 26468 00013C04 E9E4430000              	jmp L_error_incorrect_arity_simple
 26469                                  .L_lambda_simple_arity_check_ok_0162:
 26470 00013C09 C8000000                	enter 0, 0
 26471                                  	; preparing a non-tail-call
 26472 00013C0D 488B4520                	mov rax, PARAM(0)	; param x
 26473 00013C11 50                      	push rax
 26474 00013C12 6A01                    	push 1	; arg count
 26475 00013C14 488B0425[BF140000]      	mov rax, qword [free_var_104]	; free var negative?
 26476 00013C1C 803805                  	cmp byte [rax], T_undefined
 26477 00013C1F 0F84E2420000            	je L_error_fvar_undefined
 26478 00013C25 803804                  	cmp byte [rax], T_closure
 26479 00013C28 0F855D430000            	jne L_error_non_closure
 26480 00013C2E FF7001                  	push SOB_CLOSURE_ENV(rax)
 26481 00013C31 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26482 00013C34 483D[02000000]          	cmp rax, sob_boolean_false
 26483 00013C3A 746E                    	je .L_if_else_010f
 26484                                  	; preparing a tail-call
 26485 00013C3C 488B4520                	mov rax, PARAM(0)	; param x
 26486 00013C40 50                      	push rax
 26487 00013C41 6A01                    	push 1	; arg count
 26488 00013C43 488B0425[F90D0000]      	mov rax, qword [free_var_2]	; free var -
 26489 00013C4B 803805                  	cmp byte [rax], T_undefined
 26490 00013C4E 0F84B3420000            	je L_error_fvar_undefined
 26491 00013C54 803804                  	cmp byte [rax], T_closure
 26492 00013C57 0F852E430000            	jne L_error_non_closure
 26493 00013C5D FF7001                  	push SOB_CLOSURE_ENV(rax)
 26494 00013C60 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26495 00013C63 FF7500                  	push qword[rbp]
 26496 00013C66 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26497 00013C69 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26498 00013C6D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26499 00013C71 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26500 00013C75 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26501 00013C78 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26502 00013C7B 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26503 00013C80 4983C103                	add r9, 3 	 ;for getting to the params
 26504 00013C84 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26505 00013C88 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26506                                  .L_tc_recycle_frame_loop_01fe:
 26507 00013C8B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26508 00013C8E 7410                    	je .L_tc_recycle_frame_done_01fe
 26509 00013C90 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26510 00013C93 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26511 00013C96 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26512 00013C9A 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26513 00013C9E EBEB                    	jmp .L_tc_recycle_frame_loop_01fe
 26514                                  .L_tc_recycle_frame_done_01fe:
 26515 00013CA0 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26516 00013CA1 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26517 00013CA5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26518 00013CA8 EB04                    	jmp .L_if_end_010f
 26519                                  .L_if_else_010f:
 26520 00013CAA 488B4520                	mov rax, PARAM(0)	; param x
 26521                                  .L_if_end_010f:
 26522 00013CAE C9                      	leave
 26523 00013CAF C21800                  	ret AND_KILL_FRAME(1)
 26524                                  .L_lambda_simple_end_0162:	; new closure is in rax
 26525 00013CB2 48890425[D50F0000]      	mov qword [free_var_30], rax
 26526 00013CBA 48B8-                   	mov rax, sob_void
 26526 00013CBC [0000000000000000] 
 26527                                  
 26528 00013CC4 4889C7                  	mov rdi, rax
 26529 00013CC7 E8BD450000              	call print_sexpr_if_not_void
 26530 00013CCC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26531 00013CD1 E85E430000              	call malloc
 26532 00013CD6 50                      	push rax
 26533 00013CD7 BF00000000              	mov rdi, 8 * 0	; new rib
 26534 00013CDC E853430000              	call malloc
 26535 00013CE1 50                      	push rax
 26536 00013CE2 BF08000000              	mov rdi, 8 * 1	; extended env
 26537 00013CE7 E848430000              	call malloc
 26538 00013CEC 488B7D10                	mov rdi, ENV
 26539 00013CF0 BE00000000              	mov rsi, 0
 26540 00013CF5 BA01000000              	mov rdx, 1
 26541                                  .L_lambda_simple_env_loop_0163:	; ext_env[i + 1] <-- env[i]
 26542 00013CFA 4883FE00                	cmp rsi, 0
 26543 00013CFE 7410                    	je .L_lambda_simple_env_end_0163
 26544 00013D00 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26545 00013D04 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26546 00013D08 48FFC6                  	inc rsi
 26547 00013D0B 48FFC2                  	inc rdx
 26548 00013D0E EBEA                    	jmp .L_lambda_simple_env_loop_0163
 26549                                  .L_lambda_simple_env_end_0163:
 26550 00013D10 5B                      	pop rbx
 26551 00013D11 BE00000000              	mov rsi, 0
 26552                                  .L_lambda_simple_params_loop_0163:	; copy params
 26553 00013D16 4883FE00                	cmp rsi, 0
 26554 00013D1A 740E                    	je .L_lambda_simple_params_end_0163
 26555 00013D1C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26556 00013D21 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26557 00013D25 48FFC6                  	inc rsi
 26558 00013D28 EBEC                    	jmp .L_lambda_simple_params_loop_0163
 26559                                  .L_lambda_simple_params_end_0163:
 26560 00013D2A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26561 00013D2D 4889C3                  	mov rbx, rax
 26562 00013D30 58                      	pop rax
 26563 00013D31 C60004                  	mov byte [rax], T_closure
 26564 00013D34 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26565 00013D38 48C74009[453D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0163
 26566 00013D40 E91B070000              	jmp .L_lambda_simple_end_0163
 26567                                  .L_lambda_simple_code_0163:	; lambda-simple body
 26568 00013D45 48837C241002            	cmp qword [rsp + 8 * 2], 2
 26569 00013D4B 740B                    	je .L_lambda_simple_arity_check_ok_0163
 26570 00013D4D FF742410                	push qword [rsp + 8 * 2]
 26571 00013D51 6A02                    	push 2
 26572 00013D53 E995420000              	jmp L_error_incorrect_arity_simple
 26573                                  .L_lambda_simple_arity_check_ok_0163:
 26574 00013D58 C8000000                	enter 0, 0
 26575                                  	; preparing a non-tail-call
 26576 00013D5C 488B4520                	mov rax, PARAM(0)	; param e1
 26577 00013D60 50                      	push rax
 26578 00013D61 6A01                    	push 1	; arg count
 26579 00013D63 488B0425[36150000]      	mov rax, qword [free_var_111]	; free var pair?
 26580 00013D6B 803805                  	cmp byte [rax], T_undefined
 26581 00013D6E 0F8493410000            	je L_error_fvar_undefined
 26582 00013D74 803804                  	cmp byte [rax], T_closure
 26583 00013D77 0F850E420000            	jne L_error_non_closure
 26584 00013D7D FF7001                  	push SOB_CLOSURE_ENV(rax)
 26585 00013D80 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26586 00013D83 483D[02000000]          	cmp rax, sob_boolean_false
 26587 00013D89 7429                    	je .L_if_else_0110
 26588                                  	; preparing a non-tail-call
 26589 00013D8B 488B4528                	mov rax, PARAM(1)	; param e2
 26590 00013D8F 50                      	push rax
 26591 00013D90 6A01                    	push 1	; arg count
 26592 00013D92 488B0425[36150000]      	mov rax, qword [free_var_111]	; free var pair?
 26593 00013D9A 803805                  	cmp byte [rax], T_undefined
 26594 00013D9D 0F8464410000            	je L_error_fvar_undefined
 26595 00013DA3 803804                  	cmp byte [rax], T_closure
 26596 00013DA6 0F85DF410000            	jne L_error_non_closure
 26597 00013DAC FF7001                  	push SOB_CLOSURE_ENV(rax)
 26598 00013DAF FF5009                  	call SOB_CLOSURE_CODE(rax)
 26599 00013DB2 EB0A                    	jmp .L_if_end_0110
 26600                                  .L_if_else_0110:
 26601 00013DB4 48B8-                   	mov rax, L_constants + 2
 26601 00013DB6 [0200000000000000] 
 26602                                  .L_if_end_0110:
 26603 00013DBE 483D[02000000]          	cmp rax, sob_boolean_false
 26604 00013DC4 0F8446010000            	je .L_if_else_011c
 26605                                  	; preparing a non-tail-call
 26606                                  	; preparing a non-tail-call
 26607 00013DCA 488B4528                	mov rax, PARAM(1)	; param e2
 26608 00013DCE 50                      	push rax
 26609 00013DCF 6A01                    	push 1	; arg count
 26610 00013DD1 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 26611 00013DD9 803805                  	cmp byte [rax], T_undefined
 26612 00013DDC 0F8425410000            	je L_error_fvar_undefined
 26613 00013DE2 803804                  	cmp byte [rax], T_closure
 26614 00013DE5 0F85A0410000            	jne L_error_non_closure
 26615 00013DEB FF7001                  	push SOB_CLOSURE_ENV(rax)
 26616 00013DEE FF5009                  	call SOB_CLOSURE_CODE(rax)
 26617 00013DF1 50                      	push rax
 26618                                  	; preparing a non-tail-call
 26619 00013DF2 488B4520                	mov rax, PARAM(0)	; param e1
 26620 00013DF6 50                      	push rax
 26621 00013DF7 6A01                    	push 1	; arg count
 26622 00013DF9 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 26623 00013E01 803805                  	cmp byte [rax], T_undefined
 26624 00013E04 0F84FD400000            	je L_error_fvar_undefined
 26625 00013E0A 803804                  	cmp byte [rax], T_closure
 26626 00013E0D 0F8578410000            	jne L_error_non_closure
 26627 00013E13 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26628 00013E16 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26629 00013E19 50                      	push rax
 26630 00013E1A 6A02                    	push 2	; arg count
 26631 00013E1C 488B0425[38130000]      	mov rax, qword [free_var_81]	; free var equal?
 26632 00013E24 803805                  	cmp byte [rax], T_undefined
 26633 00013E27 0F84DA400000            	je L_error_fvar_undefined
 26634 00013E2D 803804                  	cmp byte [rax], T_closure
 26635 00013E30 0F8555410000            	jne L_error_non_closure
 26636 00013E36 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26637 00013E39 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26638 00013E3C 483D[02000000]          	cmp rax, sob_boolean_false
 26639 00013E42 0F84B9000000            	je .L_if_else_0111
 26640                                  	; preparing a tail-call
 26641                                  	; preparing a non-tail-call
 26642 00013E48 488B4528                	mov rax, PARAM(1)	; param e2
 26643 00013E4C 50                      	push rax
 26644 00013E4D 6A01                    	push 1	; arg count
 26645 00013E4F 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
 26646 00013E57 803805                  	cmp byte [rax], T_undefined
 26647 00013E5A 0F84A7400000            	je L_error_fvar_undefined
 26648 00013E60 803804                  	cmp byte [rax], T_closure
 26649 00013E63 0F8522410000            	jne L_error_non_closure
 26650 00013E69 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26651 00013E6C FF5009                  	call SOB_CLOSURE_CODE(rax)
 26652 00013E6F 50                      	push rax
 26653                                  	; preparing a non-tail-call
 26654 00013E70 488B4520                	mov rax, PARAM(0)	; param e1
 26655 00013E74 50                      	push rax
 26656 00013E75 6A01                    	push 1	; arg count
 26657 00013E77 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
 26658 00013E7F 803805                  	cmp byte [rax], T_undefined
 26659 00013E82 0F847F400000            	je L_error_fvar_undefined
 26660 00013E88 803804                  	cmp byte [rax], T_closure
 26661 00013E8B 0F85FA400000            	jne L_error_non_closure
 26662 00013E91 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26663 00013E94 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26664 00013E97 50                      	push rax
 26665 00013E98 6A02                    	push 2	; arg count
 26666 00013E9A 488B0425[38130000]      	mov rax, qword [free_var_81]	; free var equal?
 26667 00013EA2 803805                  	cmp byte [rax], T_undefined
 26668 00013EA5 0F845C400000            	je L_error_fvar_undefined
 26669 00013EAB 803804                  	cmp byte [rax], T_closure
 26670 00013EAE 0F85D7400000            	jne L_error_non_closure
 26671 00013EB4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26672 00013EB7 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26673 00013EBA FF7500                  	push qword[rbp]
 26674 00013EBD 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26675 00013EC0 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26676 00013EC4 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26677 00013EC8 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26678 00013ECC 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26679 00013ECF 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26680 00013ED2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26681 00013ED7 4983C103                	add r9, 3 	 ;for getting to the params
 26682 00013EDB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26683 00013EDF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26684                                  .L_tc_recycle_frame_loop_01ff:
 26685 00013EE2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26686 00013EE5 7410                    	je .L_tc_recycle_frame_done_01ff
 26687 00013EE7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26688 00013EEA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26689 00013EED 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26690 00013EF1 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26691 00013EF5 EBEB                    	jmp .L_tc_recycle_frame_loop_01ff
 26692                                  .L_tc_recycle_frame_done_01ff:
 26693 00013EF7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26694 00013EF8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26695 00013EFC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26696 00013EFF EB0A                    	jmp .L_if_end_0111
 26697                                  .L_if_else_0111:
 26698 00013F01 48B8-                   	mov rax, L_constants + 2
 26698 00013F03 [0200000000000000] 
 26699                                  .L_if_end_0111:
 26700 00013F0B E94C050000              	jmp .L_if_end_011c
 26701                                  .L_if_else_011c:
 26702                                  	; preparing a non-tail-call
 26703 00013F10 488B4520                	mov rax, PARAM(0)	; param e1
 26704 00013F14 50                      	push rax
 26705 00013F15 6A01                    	push 1	; arg count
 26706 00013F17 488B0425[AB170000]      	mov rax, qword [free_var_148]	; free var vector?
 26707 00013F1F 803805                  	cmp byte [rax], T_undefined
 26708 00013F22 0F84DF3F0000            	je L_error_fvar_undefined
 26709 00013F28 803804                  	cmp byte [rax], T_closure
 26710 00013F2B 0F855A400000            	jne L_error_non_closure
 26711 00013F31 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26712 00013F34 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26713 00013F37 483D[02000000]          	cmp rax, sob_boolean_false
 26714 00013F3D 0F84AF000000            	je .L_if_else_0113
 26715                                  	; preparing a non-tail-call
 26716 00013F43 488B4528                	mov rax, PARAM(1)	; param e2
 26717 00013F47 50                      	push rax
 26718 00013F48 6A01                    	push 1	; arg count
 26719 00013F4A 488B0425[AB170000]      	mov rax, qword [free_var_148]	; free var vector?
 26720 00013F52 803805                  	cmp byte [rax], T_undefined
 26721 00013F55 0F84AC3F0000            	je L_error_fvar_undefined
 26722 00013F5B 803804                  	cmp byte [rax], T_closure
 26723 00013F5E 0F8527400000            	jne L_error_non_closure
 26724 00013F64 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26725 00013F67 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26726 00013F6A 483D[02000000]          	cmp rax, sob_boolean_false
 26727 00013F70 7474                    	je .L_if_else_0112
 26728                                  	; preparing a non-tail-call
 26729                                  	; preparing a non-tail-call
 26730 00013F72 488B4528                	mov rax, PARAM(1)	; param e2
 26731 00013F76 50                      	push rax
 26732 00013F77 6A01                    	push 1	; arg count
 26733 00013F79 488B0425[56170000]      	mov rax, qword [free_var_143]	; free var vector-length
 26734 00013F81 803805                  	cmp byte [rax], T_undefined
 26735 00013F84 0F847D3F0000            	je L_error_fvar_undefined
 26736 00013F8A 803804                  	cmp byte [rax], T_closure
 26737 00013F8D 0F85F83F0000            	jne L_error_non_closure
 26738 00013F93 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26739 00013F96 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26740 00013F99 50                      	push rax
 26741                                  	; preparing a non-tail-call
 26742 00013F9A 488B4520                	mov rax, PARAM(0)	; param e1
 26743 00013F9E 50                      	push rax
 26744 00013F9F 6A01                    	push 1	; arg count
 26745 00013FA1 488B0425[56170000]      	mov rax, qword [free_var_143]	; free var vector-length
 26746 00013FA9 803805                  	cmp byte [rax], T_undefined
 26747 00013FAC 0F84553F0000            	je L_error_fvar_undefined
 26748 00013FB2 803804                  	cmp byte [rax], T_closure
 26749 00013FB5 0F85D03F0000            	jne L_error_non_closure
 26750 00013FBB FF7001                  	push SOB_CLOSURE_ENV(rax)
 26751 00013FBE FF5009                  	call SOB_CLOSURE_CODE(rax)
 26752 00013FC1 50                      	push rax
 26753 00013FC2 6A02                    	push 2	; arg count
 26754 00013FC4 488B0425[3D0E0000]      	mov rax, qword [free_var_6]	; free var =
 26755 00013FCC 803805                  	cmp byte [rax], T_undefined
 26756 00013FCF 0F84323F0000            	je L_error_fvar_undefined
 26757 00013FD5 803804                  	cmp byte [rax], T_closure
 26758 00013FD8 0F85AD3F0000            	jne L_error_non_closure
 26759 00013FDE FF7001                  	push SOB_CLOSURE_ENV(rax)
 26760 00013FE1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26761 00013FE4 EB0A                    	jmp .L_if_end_0112
 26762                                  .L_if_else_0112:
 26763 00013FE6 48B8-                   	mov rax, L_constants + 2
 26763 00013FE8 [0200000000000000] 
 26764                                  .L_if_end_0112:
 26765 00013FF0 EB0A                    	jmp .L_if_end_0113
 26766                                  .L_if_else_0113:
 26767 00013FF2 48B8-                   	mov rax, L_constants + 2
 26767 00013FF4 [0200000000000000] 
 26768                                  .L_if_end_0113:
 26769 00013FFC 483D[02000000]          	cmp rax, sob_boolean_false
 26770 00014002 0F84BC000000            	je .L_if_else_011b
 26771                                  	; preparing a tail-call
 26772                                  	; preparing a non-tail-call
 26773 00014008 488B4528                	mov rax, PARAM(1)	; param e2
 26774 0001400C 50                      	push rax
 26775 0001400D 6A01                    	push 1	; arg count
 26776 0001400F 488B0425[34170000]      	mov rax, qword [free_var_141]	; free var vector->list
 26777 00014017 803805                  	cmp byte [rax], T_undefined
 26778 0001401A 0F84E73E0000            	je L_error_fvar_undefined
 26779 00014020 803804                  	cmp byte [rax], T_closure
 26780 00014023 0F85623F0000            	jne L_error_non_closure
 26781 00014029 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26782 0001402C FF5009                  	call SOB_CLOSURE_CODE(rax)
 26783 0001402F 50                      	push rax
 26784                                  	; preparing a non-tail-call
 26785 00014030 488B4520                	mov rax, PARAM(0)	; param e1
 26786 00014034 50                      	push rax
 26787 00014035 6A01                    	push 1	; arg count
 26788 00014037 488B0425[34170000]      	mov rax, qword [free_var_141]	; free var vector->list
 26789 0001403F 803805                  	cmp byte [rax], T_undefined
 26790 00014042 0F84BF3E0000            	je L_error_fvar_undefined
 26791 00014048 803804                  	cmp byte [rax], T_closure
 26792 0001404B 0F853A3F0000            	jne L_error_non_closure
 26793 00014051 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26794 00014054 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26795 00014057 50                      	push rax
 26796 00014058 6A02                    	push 2	; arg count
 26797 0001405A 488B0425[38130000]      	mov rax, qword [free_var_81]	; free var equal?
 26798 00014062 803805                  	cmp byte [rax], T_undefined
 26799 00014065 0F849C3E0000            	je L_error_fvar_undefined
 26800 0001406B 803804                  	cmp byte [rax], T_closure
 26801 0001406E 0F85173F0000            	jne L_error_non_closure
 26802 00014074 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26803 00014077 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26804 0001407A FF7500                  	push qword[rbp]
 26805 0001407D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26806 00014080 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26807 00014084 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26808 00014088 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26809 0001408C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26810 0001408F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26811 00014092 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26812 00014097 4983C103                	add r9, 3 	 ;for getting to the params
 26813 0001409B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26814 0001409F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26815                                  .L_tc_recycle_frame_loop_0200:
 26816 000140A2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26817 000140A5 7410                    	je .L_tc_recycle_frame_done_0200
 26818 000140A7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26819 000140AA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26820 000140AD 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26821 000140B1 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26822 000140B5 EBEB                    	jmp .L_tc_recycle_frame_loop_0200
 26823                                  .L_tc_recycle_frame_done_0200:
 26824 000140B7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26825 000140B8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26826 000140BC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26827 000140BF E998030000              	jmp .L_if_end_011b
 26828                                  .L_if_else_011b:
 26829                                  	; preparing a non-tail-call
 26830 000140C4 488B4520                	mov rax, PARAM(0)	; param e1
 26831 000140C8 50                      	push rax
 26832 000140C9 6A01                    	push 1	; arg count
 26833 000140CB 488B0425[01170000]      	mov rax, qword [free_var_138]	; free var string?
 26834 000140D3 803805                  	cmp byte [rax], T_undefined
 26835 000140D6 0F842B3E0000            	je L_error_fvar_undefined
 26836 000140DC 803804                  	cmp byte [rax], T_closure
 26837 000140DF 0F85A63E0000            	jne L_error_non_closure
 26838 000140E5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26839 000140E8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26840 000140EB 483D[02000000]          	cmp rax, sob_boolean_false
 26841 000140F1 0F84AF000000            	je .L_if_else_0115
 26842                                  	; preparing a non-tail-call
 26843 000140F7 488B4528                	mov rax, PARAM(1)	; param e2
 26844 000140FB 50                      	push rax
 26845 000140FC 6A01                    	push 1	; arg count
 26846 000140FE 488B0425[01170000]      	mov rax, qword [free_var_138]	; free var string?
 26847 00014106 803805                  	cmp byte [rax], T_undefined
 26848 00014109 0F84F83D0000            	je L_error_fvar_undefined
 26849 0001410F 803804                  	cmp byte [rax], T_closure
 26850 00014112 0F85733E0000            	jne L_error_non_closure
 26851 00014118 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26852 0001411B FF5009                  	call SOB_CLOSURE_CODE(rax)
 26853 0001411E 483D[02000000]          	cmp rax, sob_boolean_false
 26854 00014124 7474                    	je .L_if_else_0114
 26855                                  	; preparing a non-tail-call
 26856                                  	; preparing a non-tail-call
 26857 00014126 488B4528                	mov rax, PARAM(1)	; param e2
 26858 0001412A 50                      	push rax
 26859 0001412B 6A01                    	push 1	; arg count
 26860 0001412D 488B0425[46160000]      	mov rax, qword [free_var_127]	; free var string-length
 26861 00014135 803805                  	cmp byte [rax], T_undefined
 26862 00014138 0F84C93D0000            	je L_error_fvar_undefined
 26863 0001413E 803804                  	cmp byte [rax], T_closure
 26864 00014141 0F85443E0000            	jne L_error_non_closure
 26865 00014147 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26866 0001414A FF5009                  	call SOB_CLOSURE_CODE(rax)
 26867 0001414D 50                      	push rax
 26868                                  	; preparing a non-tail-call
 26869 0001414E 488B4520                	mov rax, PARAM(0)	; param e1
 26870 00014152 50                      	push rax
 26871 00014153 6A01                    	push 1	; arg count
 26872 00014155 488B0425[46160000]      	mov rax, qword [free_var_127]	; free var string-length
 26873 0001415D 803805                  	cmp byte [rax], T_undefined
 26874 00014160 0F84A13D0000            	je L_error_fvar_undefined
 26875 00014166 803804                  	cmp byte [rax], T_closure
 26876 00014169 0F851C3E0000            	jne L_error_non_closure
 26877 0001416F FF7001                  	push SOB_CLOSURE_ENV(rax)
 26878 00014172 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26879 00014175 50                      	push rax
 26880 00014176 6A02                    	push 2	; arg count
 26881 00014178 488B0425[3D0E0000]      	mov rax, qword [free_var_6]	; free var =
 26882 00014180 803805                  	cmp byte [rax], T_undefined
 26883 00014183 0F847E3D0000            	je L_error_fvar_undefined
 26884 00014189 803804                  	cmp byte [rax], T_closure
 26885 0001418C 0F85F93D0000            	jne L_error_non_closure
 26886 00014192 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26887 00014195 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26888 00014198 EB0A                    	jmp .L_if_end_0114
 26889                                  .L_if_else_0114:
 26890 0001419A 48B8-                   	mov rax, L_constants + 2
 26890 0001419C [0200000000000000] 
 26891                                  .L_if_end_0114:
 26892 000141A4 EB0A                    	jmp .L_if_end_0115
 26893                                  .L_if_else_0115:
 26894 000141A6 48B8-                   	mov rax, L_constants + 2
 26894 000141A8 [0200000000000000] 
 26895                                  .L_if_end_0115:
 26896 000141B0 483D[02000000]          	cmp rax, sob_boolean_false
 26897 000141B6 7476                    	je .L_if_else_011a
 26898                                  	; preparing a tail-call
 26899 000141B8 488B4528                	mov rax, PARAM(1)	; param e2
 26900 000141BC 50                      	push rax
 26901 000141BD 488B4520                	mov rax, PARAM(0)	; param e1
 26902 000141C1 50                      	push rax
 26903 000141C2 6A02                    	push 2	; arg count
 26904 000141C4 488B0425[CE160000]      	mov rax, qword [free_var_135]	; free var string=?
 26905 000141CC 803805                  	cmp byte [rax], T_undefined
 26906 000141CF 0F84323D0000            	je L_error_fvar_undefined
 26907 000141D5 803804                  	cmp byte [rax], T_closure
 26908 000141D8 0F85AD3D0000            	jne L_error_non_closure
 26909 000141DE FF7001                  	push SOB_CLOSURE_ENV(rax)
 26910 000141E1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26911 000141E4 FF7500                  	push qword[rbp]
 26912 000141E7 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26913 000141EA 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26914 000141EE 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26915 000141F2 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26916 000141F6 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26917 000141F9 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26918 000141FC 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26919 00014201 4983C103                	add r9, 3 	 ;for getting to the params
 26920 00014205 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26921 00014209 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26922                                  .L_tc_recycle_frame_loop_0201:
 26923 0001420C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26924 0001420F 7410                    	je .L_tc_recycle_frame_done_0201
 26925 00014211 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26926 00014214 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26927 00014217 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26928 0001421B 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26929 0001421F EBEB                    	jmp .L_tc_recycle_frame_loop_0201
 26930                                  .L_tc_recycle_frame_done_0201:
 26931 00014221 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26932 00014222 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26933 00014226 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26934 00014229 E92E020000              	jmp .L_if_end_011a
 26935                                  .L_if_else_011a:
 26936                                  	; preparing a non-tail-call
 26937 0001422E 488B4520                	mov rax, PARAM(0)	; param e1
 26938 00014232 50                      	push rax
 26939 00014233 6A01                    	push 1	; arg count
 26940 00014235 488B0425[03150000]      	mov rax, qword [free_var_108]	; free var number?
 26941 0001423D 803805                  	cmp byte [rax], T_undefined
 26942 00014240 0F84C13C0000            	je L_error_fvar_undefined
 26943 00014246 803804                  	cmp byte [rax], T_closure
 26944 00014249 0F853C3D0000            	jne L_error_non_closure
 26945 0001424F FF7001                  	push SOB_CLOSURE_ENV(rax)
 26946 00014252 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26947 00014255 483D[02000000]          	cmp rax, sob_boolean_false
 26948 0001425B 7429                    	je .L_if_else_0116
 26949                                  	; preparing a non-tail-call
 26950 0001425D 488B4528                	mov rax, PARAM(1)	; param e2
 26951 00014261 50                      	push rax
 26952 00014262 6A01                    	push 1	; arg count
 26953 00014264 488B0425[03150000]      	mov rax, qword [free_var_108]	; free var number?
 26954 0001426C 803805                  	cmp byte [rax], T_undefined
 26955 0001426F 0F84923C0000            	je L_error_fvar_undefined
 26956 00014275 803804                  	cmp byte [rax], T_closure
 26957 00014278 0F850D3D0000            	jne L_error_non_closure
 26958 0001427E FF7001                  	push SOB_CLOSURE_ENV(rax)
 26959 00014281 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26960 00014284 EB0A                    	jmp .L_if_end_0116
 26961                                  .L_if_else_0116:
 26962 00014286 48B8-                   	mov rax, L_constants + 2
 26962 00014288 [0200000000000000] 
 26963                                  .L_if_end_0116:
 26964 00014290 483D[02000000]          	cmp rax, sob_boolean_false
 26965 00014296 7476                    	je .L_if_else_0119
 26966                                  	; preparing a tail-call
 26967 00014298 488B4528                	mov rax, PARAM(1)	; param e2
 26968 0001429C 50                      	push rax
 26969 0001429D 488B4520                	mov rax, PARAM(0)	; param e1
 26970 000142A1 50                      	push rax
 26971 000142A2 6A02                    	push 2	; arg count
 26972 000142A4 488B0425[3D0E0000]      	mov rax, qword [free_var_6]	; free var =
 26973 000142AC 803805                  	cmp byte [rax], T_undefined
 26974 000142AF 0F84523C0000            	je L_error_fvar_undefined
 26975 000142B5 803804                  	cmp byte [rax], T_closure
 26976 000142B8 0F85CD3C0000            	jne L_error_non_closure
 26977 000142BE FF7001                  	push SOB_CLOSURE_ENV(rax)
 26978 000142C1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26979 000142C4 FF7500                  	push qword[rbp]
 26980 000142C7 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26981 000142CA 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26982 000142CE 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26983 000142D2 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26984 000142D6 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26985 000142D9 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26986 000142DC 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26987 000142E1 4983C103                	add r9, 3 	 ;for getting to the params
 26988 000142E5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26989 000142E9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26990                                  .L_tc_recycle_frame_loop_0202:
 26991 000142EC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26992 000142EF 7410                    	je .L_tc_recycle_frame_done_0202
 26993 000142F1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26994 000142F4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26995 000142F7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26996 000142FB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26997 000142FF EBEB                    	jmp .L_tc_recycle_frame_loop_0202
 26998                                  .L_tc_recycle_frame_done_0202:
 26999 00014301 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27000 00014302 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27001 00014306 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27002 00014309 E94E010000              	jmp .L_if_end_0119
 27003                                  .L_if_else_0119:
 27004                                  	; preparing a non-tail-call
 27005 0001430E 488B4520                	mov rax, PARAM(0)	; param e1
 27006 00014312 50                      	push rax
 27007 00014313 6A01                    	push 1	; arg count
 27008 00014315 488B0425[05130000]      	mov rax, qword [free_var_78]	; free var char?
 27009 0001431D 803805                  	cmp byte [rax], T_undefined
 27010 00014320 0F84E13B0000            	je L_error_fvar_undefined
 27011 00014326 803804                  	cmp byte [rax], T_closure
 27012 00014329 0F855C3C0000            	jne L_error_non_closure
 27013 0001432F FF7001                  	push SOB_CLOSURE_ENV(rax)
 27014 00014332 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27015 00014335 483D[02000000]          	cmp rax, sob_boolean_false
 27016 0001433B 7429                    	je .L_if_else_0117
 27017                                  	; preparing a non-tail-call
 27018 0001433D 488B4528                	mov rax, PARAM(1)	; param e2
 27019 00014341 50                      	push rax
 27020 00014342 6A01                    	push 1	; arg count
 27021 00014344 488B0425[05130000]      	mov rax, qword [free_var_78]	; free var char?
 27022 0001434C 803805                  	cmp byte [rax], T_undefined
 27023 0001434F 0F84B23B0000            	je L_error_fvar_undefined
 27024 00014355 803804                  	cmp byte [rax], T_closure
 27025 00014358 0F852D3C0000            	jne L_error_non_closure
 27026 0001435E FF7001                  	push SOB_CLOSURE_ENV(rax)
 27027 00014361 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27028 00014364 EB0A                    	jmp .L_if_end_0117
 27029                                  .L_if_else_0117:
 27030 00014366 48B8-                   	mov rax, L_constants + 2
 27030 00014368 [0200000000000000] 
 27031                                  .L_if_end_0117:
 27032 00014370 483D[02000000]          	cmp rax, sob_boolean_false
 27033 00014376 7473                    	je .L_if_else_0118
 27034                                  	; preparing a tail-call
 27035 00014378 488B4528                	mov rax, PARAM(1)	; param e2
 27036 0001437C 50                      	push rax
 27037 0001437D 488B4520                	mov rax, PARAM(0)	; param e1
 27038 00014381 50                      	push rax
 27039 00014382 6A02                    	push 2	; arg count
 27040 00014384 488B0425[D2120000]      	mov rax, qword [free_var_75]	; free var char=?
 27041 0001438C 803805                  	cmp byte [rax], T_undefined
 27042 0001438F 0F84723B0000            	je L_error_fvar_undefined
 27043 00014395 803804                  	cmp byte [rax], T_closure
 27044 00014398 0F85ED3B0000            	jne L_error_non_closure
 27045 0001439E FF7001                  	push SOB_CLOSURE_ENV(rax)
 27046 000143A1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 27047 000143A4 FF7500                  	push qword[rbp]
 27048 000143A7 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 27049 000143AA 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 27050 000143AE 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 27051 000143B2 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 27052 000143B6 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 27053 000143B9 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 27054 000143BC 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 27055 000143C1 4983C103                	add r9, 3 	 ;for getting to the params
 27056 000143C5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 27057 000143C9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 27058                                  .L_tc_recycle_frame_loop_0203:
 27059 000143CC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 27060 000143CF 7410                    	je .L_tc_recycle_frame_done_0203
 27061 000143D1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 27062 000143D4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 27063 000143D7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 27064 000143DB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 27065 000143DF EBEB                    	jmp .L_tc_recycle_frame_loop_0203
 27066                                  .L_tc_recycle_frame_done_0203:
 27067 000143E1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27068 000143E2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27069 000143E6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27070 000143E9 EB71                    	jmp .L_if_end_0118
 27071                                  .L_if_else_0118:
 27072                                  	; preparing a tail-call
 27073 000143EB 488B4528                	mov rax, PARAM(1)	; param e2
 27074 000143EF 50                      	push rax
 27075 000143F0 488B4520                	mov rax, PARAM(0)	; param e1
 27076 000143F4 50                      	push rax
 27077 000143F5 6A02                    	push 2	; arg count
 27078 000143F7 488B0425[27130000]      	mov rax, qword [free_var_80]	; free var eq?
 27079 000143FF 803805                  	cmp byte [rax], T_undefined
 27080 00014402 0F84FF3A0000            	je L_error_fvar_undefined
 27081 00014408 803804                  	cmp byte [rax], T_closure
 27082 0001440B 0F857A3B0000            	jne L_error_non_closure
 27083 00014411 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27084 00014414 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 27085 00014417 FF7500                  	push qword[rbp]
 27086 0001441A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 27087 0001441D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 27088 00014421 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 27089 00014425 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 27090 00014429 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 27091 0001442C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 27092 0001442F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 27093 00014434 4983C103                	add r9, 3 	 ;for getting to the params
 27094 00014438 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 27095 0001443C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 27096                                  .L_tc_recycle_frame_loop_0204:
 27097 0001443F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 27098 00014442 7410                    	je .L_tc_recycle_frame_done_0204
 27099 00014444 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 27100 00014447 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 27101 0001444A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 27102 0001444E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 27103 00014452 EBEB                    	jmp .L_tc_recycle_frame_loop_0204
 27104                                  .L_tc_recycle_frame_done_0204:
 27105 00014454 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27106 00014455 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27107 00014459 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27108                                  .L_if_end_0118:
 27109                                  .L_if_end_0119:
 27110                                  .L_if_end_011a:
 27111                                  .L_if_end_011b:
 27112                                  .L_if_end_011c:
 27113 0001445C C9                      	leave
 27114 0001445D C22000                  	ret AND_KILL_FRAME(2)
 27115                                  .L_lambda_simple_end_0163:	; new closure is in rax
 27116 00014460 48890425[38130000]      	mov qword [free_var_81], rax
 27117 00014468 48B8-                   	mov rax, sob_void
 27117 0001446A [0000000000000000] 
 27118                                  
 27119 00014472 4889C7                  	mov rdi, rax
 27120 00014475 E80F3E0000              	call print_sexpr_if_not_void
 27121 0001447A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27122 0001447F E8B03B0000              	call malloc
 27123 00014484 50                      	push rax
 27124 00014485 BF00000000              	mov rdi, 8 * 0	; new rib
 27125 0001448A E8A53B0000              	call malloc
 27126 0001448F 50                      	push rax
 27127 00014490 BF08000000              	mov rdi, 8 * 1	; extended env
 27128 00014495 E89A3B0000              	call malloc
 27129 0001449A 488B7D10                	mov rdi, ENV
 27130 0001449E BE00000000              	mov rsi, 0
 27131 000144A3 BA01000000              	mov rdx, 1
 27132                                  .L_lambda_simple_env_loop_0164:	; ext_env[i + 1] <-- env[i]
 27133 000144A8 4883FE00                	cmp rsi, 0
 27134 000144AC 7410                    	je .L_lambda_simple_env_end_0164
 27135 000144AE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27136 000144B2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27137 000144B6 48FFC6                  	inc rsi
 27138 000144B9 48FFC2                  	inc rdx
 27139 000144BC EBEA                    	jmp .L_lambda_simple_env_loop_0164
 27140                                  .L_lambda_simple_env_end_0164:
 27141 000144BE 5B                      	pop rbx
 27142 000144BF BE00000000              	mov rsi, 0
 27143                                  .L_lambda_simple_params_loop_0164:	; copy params
 27144 000144C4 4883FE00                	cmp rsi, 0
 27145 000144C8 740E                    	je .L_lambda_simple_params_end_0164
 27146 000144CA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27147 000144CF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27148 000144D3 48FFC6                  	inc rsi
 27149 000144D6 EBEC                    	jmp .L_lambda_simple_params_loop_0164
 27150                                  .L_lambda_simple_params_end_0164:
 27151 000144D8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27152 000144DB 4889C3                  	mov rbx, rax
 27153 000144DE 58                      	pop rax
 27154 000144DF C60004                  	mov byte [rax], T_closure
 27155 000144E2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27156 000144E6 48C74009[F3440100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0164
 27157 000144EE E9B5010000              	jmp .L_lambda_simple_end_0164
 27158                                  .L_lambda_simple_code_0164:	; lambda-simple body
 27159 000144F3 48837C241002            	cmp qword [rsp + 8 * 2], 2
 27160 000144F9 740B                    	je .L_lambda_simple_arity_check_ok_0164
 27161 000144FB FF742410                	push qword [rsp + 8 * 2]
 27162 000144FF 6A02                    	push 2
 27163 00014501 E9E73A0000              	jmp L_error_incorrect_arity_simple
 27164                                  .L_lambda_simple_arity_check_ok_0164:
 27165 00014506 C8000000                	enter 0, 0
 27166                                  	; preparing a non-tail-call
 27167 0001450A 488B4528                	mov rax, PARAM(1)	; param s
 27168 0001450E 50                      	push rax
 27169 0001450F 6A01                    	push 1	; arg count
 27170 00014511 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 27171 00014519 803805                  	cmp byte [rax], T_undefined
 27172 0001451C 0F84E5390000            	je L_error_fvar_undefined
 27173 00014522 803804                  	cmp byte [rax], T_closure
 27174 00014525 0F85603A0000            	jne L_error_non_closure
 27175 0001452B FF7001                  	push SOB_CLOSURE_ENV(rax)
 27176 0001452E FF5009                  	call SOB_CLOSURE_CODE(rax)
 27177 00014531 483D[02000000]          	cmp rax, sob_boolean_false
 27178 00014537 740F                    	je .L_if_else_011e
 27179 00014539 48B8-                   	mov rax, L_constants + 2
 27179 0001453B [0200000000000000] 
 27180 00014543 E95C010000              	jmp .L_if_end_011e
 27181                                  .L_if_else_011e:
 27182                                  	; preparing a non-tail-call
 27183 00014548 488B4520                	mov rax, PARAM(0)	; param a
 27184 0001454C 50                      	push rax
 27185                                  	; preparing a non-tail-call
 27186 0001454D 488B4528                	mov rax, PARAM(1)	; param s
 27187 00014551 50                      	push rax
 27188 00014552 6A01                    	push 1	; arg count
 27189 00014554 488B0425[90100000]      	mov rax, qword [free_var_41]	; free var caar
 27190 0001455C 803805                  	cmp byte [rax], T_undefined
 27191 0001455F 0F84A2390000            	je L_error_fvar_undefined
 27192 00014565 803804                  	cmp byte [rax], T_closure
 27193 00014568 0F851D3A0000            	jne L_error_non_closure
 27194 0001456E FF7001                  	push SOB_CLOSURE_ENV(rax)
 27195 00014571 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27196 00014574 50                      	push rax
 27197 00014575 6A02                    	push 2	; arg count
 27198 00014577 488B0425[27130000]      	mov rax, qword [free_var_80]	; free var eq?
 27199 0001457F 803805                  	cmp byte [rax], T_undefined
 27200 00014582 0F847F390000            	je L_error_fvar_undefined
 27201 00014588 803804                  	cmp byte [rax], T_closure
 27202 0001458B 0F85FA390000            	jne L_error_non_closure
 27203 00014591 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27204 00014594 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27205 00014597 483D[02000000]          	cmp rax, sob_boolean_false
 27206 0001459D 7471                    	je .L_if_else_011d
 27207                                  	; preparing a tail-call
 27208 0001459F 488B4528                	mov rax, PARAM(1)	; param s
 27209 000145A3 50                      	push rax
 27210 000145A4 6A01                    	push 1	; arg count
 27211 000145A6 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 27212 000145AE 803805                  	cmp byte [rax], T_undefined
 27213 000145B1 0F8450390000            	je L_error_fvar_undefined
 27214 000145B7 803804                  	cmp byte [rax], T_closure
 27215 000145BA 0F85CB390000            	jne L_error_non_closure
 27216 000145C0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27217 000145C3 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 27218 000145C6 FF7500                  	push qword[rbp]
 27219 000145C9 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 27220 000145CC 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 27221 000145D0 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 27222 000145D4 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 27223 000145D8 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 27224 000145DB 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 27225 000145DE 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 27226 000145E3 4983C103                	add r9, 3 	 ;for getting to the params
 27227 000145E7 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 27228 000145EB 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 27229                                  .L_tc_recycle_frame_loop_0205:
 27230 000145EE 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 27231 000145F1 7410                    	je .L_tc_recycle_frame_done_0205
 27232 000145F3 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 27233 000145F6 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 27234 000145F9 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 27235 000145FD 4983E808                	sub r8, 8	 ;move the top of the stack one down
 27236 00014601 EBEB                    	jmp .L_tc_recycle_frame_loop_0205
 27237                                  .L_tc_recycle_frame_done_0205:
 27238 00014603 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27239 00014604 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27240 00014608 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27241 0001460B E994000000              	jmp .L_if_end_011d
 27242                                  .L_if_else_011d:
 27243                                  	; preparing a tail-call
 27244                                  	; preparing a non-tail-call
 27245 00014610 488B4528                	mov rax, PARAM(1)	; param s
 27246 00014614 50                      	push rax
 27247 00014615 6A01                    	push 1	; arg count
 27248 00014617 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
 27249 0001461F 803805                  	cmp byte [rax], T_undefined
 27250 00014622 0F84DF380000            	je L_error_fvar_undefined
 27251 00014628 803804                  	cmp byte [rax], T_closure
 27252 0001462B 0F855A390000            	jne L_error_non_closure
 27253 00014631 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27254 00014634 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27255 00014637 50                      	push rax
 27256 00014638 488B4520                	mov rax, PARAM(0)	; param a
 27257 0001463C 50                      	push rax
 27258 0001463D 6A02                    	push 2	; arg count
 27259 0001463F 488B0425[19100000]      	mov rax, qword [free_var_34]	; free var assoc
 27260 00014647 803805                  	cmp byte [rax], T_undefined
 27261 0001464A 0F84B7380000            	je L_error_fvar_undefined
 27262 00014650 803804                  	cmp byte [rax], T_closure
 27263 00014653 0F8532390000            	jne L_error_non_closure
 27264 00014659 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27265 0001465C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 27266 0001465F FF7500                  	push qword[rbp]
 27267 00014662 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 27268 00014665 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 27269 00014669 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 27270 0001466D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 27271 00014671 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 27272 00014674 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 27273 00014677 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 27274 0001467C 4983C103                	add r9, 3 	 ;for getting to the params
 27275 00014680 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 27276 00014684 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 27277                                  .L_tc_recycle_frame_loop_0206:
 27278 00014687 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 27279 0001468A 7410                    	je .L_tc_recycle_frame_done_0206
 27280 0001468C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 27281 0001468F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 27282 00014692 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 27283 00014696 4983E808                	sub r8, 8	 ;move the top of the stack one down
 27284 0001469A EBEB                    	jmp .L_tc_recycle_frame_loop_0206
 27285                                  .L_tc_recycle_frame_done_0206:
 27286 0001469C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27287 0001469D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27288 000146A1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27289                                  .L_if_end_011d:
 27290                                  .L_if_end_011e:
 27291 000146A4 C9                      	leave
 27292 000146A5 C22000                  	ret AND_KILL_FRAME(2)
 27293                                  .L_lambda_simple_end_0164:	; new closure is in rax
 27294 000146A8 48890425[19100000]      	mov qword [free_var_34], rax
 27295 000146B0 48B8-                   	mov rax, sob_void
 27295 000146B2 [0000000000000000] 
 27296                                  
 27297 000146BA 4889C7                  	mov rdi, rax
 27298 000146BD E8C73B0000              	call print_sexpr_if_not_void
 27299                                  	; preparing a non-tail-call
 27300 000146C2 48B8-                   	mov rax, L_constants + 1993
 27300 000146C4 [C907000000000000] 
 27301 000146CC 50                      	push rax
 27302 000146CD 48B8-                   	mov rax, L_constants + 1993
 27302 000146CF [C907000000000000] 
 27303 000146D7 50                      	push rax
 27304 000146D8 6A02                    	push 2	; arg count
 27305 000146DA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27306 000146DF E850390000              	call malloc
 27307 000146E4 50                      	push rax
 27308 000146E5 BF00000000              	mov rdi, 8 * 0	; new rib
 27309 000146EA E845390000              	call malloc
 27310 000146EF 50                      	push rax
 27311 000146F0 BF08000000              	mov rdi, 8 * 1	; extended env
 27312 000146F5 E83A390000              	call malloc
 27313 000146FA 488B7D10                	mov rdi, ENV
 27314 000146FE BE00000000              	mov rsi, 0
 27315 00014703 BA01000000              	mov rdx, 1
 27316                                  .L_lambda_simple_env_loop_0165:	; ext_env[i + 1] <-- env[i]
 27317 00014708 4883FE00                	cmp rsi, 0
 27318 0001470C 7410                    	je .L_lambda_simple_env_end_0165
 27319 0001470E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27320 00014712 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27321 00014716 48FFC6                  	inc rsi
 27322 00014719 48FFC2                  	inc rdx
 27323 0001471C EBEA                    	jmp .L_lambda_simple_env_loop_0165
 27324                                  .L_lambda_simple_env_end_0165:
 27325 0001471E 5B                      	pop rbx
 27326 0001471F BE00000000              	mov rsi, 0
 27327                                  .L_lambda_simple_params_loop_0165:	; copy params
 27328 00014724 4883FE00                	cmp rsi, 0
 27329 00014728 740E                    	je .L_lambda_simple_params_end_0165
 27330 0001472A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27331 0001472F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27332 00014733 48FFC6                  	inc rsi
 27333 00014736 EBEC                    	jmp .L_lambda_simple_params_loop_0165
 27334                                  .L_lambda_simple_params_end_0165:
 27335 00014738 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27336 0001473B 4889C3                  	mov rbx, rax
 27337 0001473E 58                      	pop rax
 27338 0001473F C60004                  	mov byte [rax], T_closure
 27339 00014742 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27340 00014746 48C74009[53470100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0165
 27341 0001474E E918090000              	jmp .L_lambda_simple_end_0165
 27342                                  .L_lambda_simple_code_0165:	; lambda-simple body
 27343 00014753 48837C241002            	cmp qword [rsp + 8 * 2], 2
 27344 00014759 740B                    	je .L_lambda_simple_arity_check_ok_0165
 27345 0001475B FF742410                	push qword [rsp + 8 * 2]
 27346 0001475F 6A02                    	push 2
 27347 00014761 E987380000              	jmp L_error_incorrect_arity_simple
 27348                                  .L_lambda_simple_arity_check_ok_0165:
 27349 00014766 C8000000                	enter 0, 0
 27350 0001476A BF08000000              	mov rdi, 8*1
 27351 0001476F E8C0380000              	call malloc
 27352 00014774 488B5D20                	mov rbx, PARAM(0)
 27353 00014778 488918                  	mov qword[rax], rbx
 27354 0001477B 48894520                	mov PARAM(0), rax
 27355 0001477F 48B8-                   	mov rax, sob_void
 27355 00014781 [0000000000000000] 
 27356                                  
 27357 00014789 BF08000000              	mov rdi, 8*1
 27358 0001478E E8A1380000              	call malloc
 27359 00014793 488B5D28                	mov rbx, PARAM(1)
 27360 00014797 488918                  	mov qword[rax], rbx
 27361 0001479A 48894528                	mov PARAM(1), rax
 27362 0001479E 48B8-                   	mov rax, sob_void
 27362 000147A0 [0000000000000000] 
 27363                                  
 27364 000147A8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27365 000147AD E882380000              	call malloc
 27366 000147B2 50                      	push rax
 27367 000147B3 BF10000000              	mov rdi, 8 * 2	; new rib
 27368 000147B8 E877380000              	call malloc
 27369 000147BD 50                      	push rax
 27370 000147BE BF10000000              	mov rdi, 8 * 2	; extended env
 27371 000147C3 E86C380000              	call malloc
 27372 000147C8 488B7D10                	mov rdi, ENV
 27373 000147CC BE00000000              	mov rsi, 0
 27374 000147D1 BA01000000              	mov rdx, 1
 27375                                  .L_lambda_simple_env_loop_0166:	; ext_env[i + 1] <-- env[i]
 27376 000147D6 4883FE01                	cmp rsi, 1
 27377 000147DA 7410                    	je .L_lambda_simple_env_end_0166
 27378 000147DC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27379 000147E0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27380 000147E4 48FFC6                  	inc rsi
 27381 000147E7 48FFC2                  	inc rdx
 27382 000147EA EBEA                    	jmp .L_lambda_simple_env_loop_0166
 27383                                  .L_lambda_simple_env_end_0166:
 27384 000147EC 5B                      	pop rbx
 27385 000147ED BE00000000              	mov rsi, 0
 27386                                  .L_lambda_simple_params_loop_0166:	; copy params
 27387 000147F2 4883FE02                	cmp rsi, 2
 27388 000147F6 740E                    	je .L_lambda_simple_params_end_0166
 27389 000147F8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27390 000147FD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27391 00014801 48FFC6                  	inc rsi
 27392 00014804 EBEC                    	jmp .L_lambda_simple_params_loop_0166
 27393                                  .L_lambda_simple_params_end_0166:
 27394 00014806 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27395 00014809 4889C3                  	mov rbx, rax
 27396 0001480C 58                      	pop rax
 27397 0001480D C60004                  	mov byte [rax], T_closure
 27398 00014810 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27399 00014814 48C74009[21480100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0166
 27400 0001481C E988020000              	jmp .L_lambda_simple_end_0166
 27401                                  .L_lambda_simple_code_0166:	; lambda-simple body
 27402 00014821 48837C241003            	cmp qword [rsp + 8 * 2], 3
 27403 00014827 740B                    	je .L_lambda_simple_arity_check_ok_0166
 27404 00014829 FF742410                	push qword [rsp + 8 * 2]
 27405 0001482D 6A03                    	push 3
 27406 0001482F E9B9370000              	jmp L_error_incorrect_arity_simple
 27407                                  .L_lambda_simple_arity_check_ok_0166:
 27408 00014834 C8000000                	enter 0, 0
 27409                                  	; preparing a non-tail-call
 27410 00014838 488B4530                	mov rax, PARAM(2)	; param s
 27411 0001483C 50                      	push rax
 27412 0001483D 6A01                    	push 1	; arg count
 27413 0001483F 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 27414 00014847 803805                  	cmp byte [rax], T_undefined
 27415 0001484A 0F84B7360000            	je L_error_fvar_undefined
 27416 00014850 803804                  	cmp byte [rax], T_closure
 27417 00014853 0F8532370000            	jne L_error_non_closure
 27418 00014859 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27419 0001485C FF5009                  	call SOB_CLOSURE_CODE(rax)
 27420 0001485F 483D[02000000]          	cmp rax, sob_boolean_false
 27421 00014865 7409                    	je .L_if_else_011f
 27422 00014867 488B4520                	mov rax, PARAM(0)	; param target
 27423 0001486B E935020000              	jmp .L_if_end_011f
 27424                                  .L_if_else_011f:
 27425                                  	; preparing a tail-call
 27426                                  	; preparing a non-tail-call
 27427                                  	; preparing a non-tail-call
 27428                                  	; preparing a non-tail-call
 27429 00014870 488B4530                	mov rax, PARAM(2)	; param s
 27430 00014874 50                      	push rax
 27431 00014875 6A01                    	push 1	; arg count
 27432 00014877 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 27433 0001487F 803805                  	cmp byte [rax], T_undefined
 27434 00014882 0F847F360000            	je L_error_fvar_undefined
 27435 00014888 803804                  	cmp byte [rax], T_closure
 27436 0001488B 0F85FA360000            	jne L_error_non_closure
 27437 00014891 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27438 00014894 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27439 00014897 50                      	push rax
 27440 00014898 6A01                    	push 1	; arg count
 27441 0001489A 488B0425[46160000]      	mov rax, qword [free_var_127]	; free var string-length
 27442 000148A2 803805                  	cmp byte [rax], T_undefined
 27443 000148A5 0F845C360000            	je L_error_fvar_undefined
 27444 000148AB 803804                  	cmp byte [rax], T_closure
 27445 000148AE 0F85D7360000            	jne L_error_non_closure
 27446 000148B4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27447 000148B7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27448 000148BA 50                      	push rax
 27449 000148BB 48B8-                   	mov rax, L_constants + 2135
 27449 000148BD [5708000000000000] 
 27450 000148C5 50                      	push rax
 27451                                  	; preparing a non-tail-call
 27452 000148C6 488B4530                	mov rax, PARAM(2)	; param s
 27453 000148CA 50                      	push rax
 27454 000148CB 6A01                    	push 1	; arg count
 27455 000148CD 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 27456 000148D5 803805                  	cmp byte [rax], T_undefined
 27457 000148D8 0F8429360000            	je L_error_fvar_undefined
 27458 000148DE 803804                  	cmp byte [rax], T_closure
 27459 000148E1 0F85A4360000            	jne L_error_non_closure
 27460 000148E7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27461 000148EA FF5009                  	call SOB_CLOSURE_CODE(rax)
 27462 000148ED 50                      	push rax
 27463 000148EE 488B4528                	mov rax, PARAM(1)	; param i
 27464 000148F2 50                      	push rax
 27465 000148F3 488B4520                	mov rax, PARAM(0)	; param target
 27466 000148F7 50                      	push rax
 27467 000148F8 6A05                    	push 5	; arg count
 27468 000148FA 488B4510                	mov rax, ENV
 27469 000148FE 488B00                  	mov rax, qword [rax + 8 * 0]
 27470 00014901 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 27471 00014905 488B00                  	mov rax, qword [rax]
 27472 00014908 803804                  	cmp byte [rax], T_closure
 27473 0001490B 0F857A360000            	jne L_error_non_closure
 27474 00014911 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27475 00014914 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27476 00014917 50                      	push rax
 27477 00014918 6A01                    	push 1	; arg count
 27478 0001491A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27479 0001491F E810370000              	call malloc
 27480 00014924 50                      	push rax
 27481 00014925 BF18000000              	mov rdi, 8 * 3	; new rib
 27482 0001492A E805370000              	call malloc
 27483 0001492F 50                      	push rax
 27484 00014930 BF18000000              	mov rdi, 8 * 3	; extended env
 27485 00014935 E8FA360000              	call malloc
 27486 0001493A 488B7D10                	mov rdi, ENV
 27487 0001493E BE00000000              	mov rsi, 0
 27488 00014943 BA01000000              	mov rdx, 1
 27489                                  .L_lambda_simple_env_loop_0167:	; ext_env[i + 1] <-- env[i]
 27490 00014948 4883FE02                	cmp rsi, 2
 27491 0001494C 7410                    	je .L_lambda_simple_env_end_0167
 27492 0001494E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27493 00014952 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27494 00014956 48FFC6                  	inc rsi
 27495 00014959 48FFC2                  	inc rdx
 27496 0001495C EBEA                    	jmp .L_lambda_simple_env_loop_0167
 27497                                  .L_lambda_simple_env_end_0167:
 27498 0001495E 5B                      	pop rbx
 27499 0001495F BE00000000              	mov rsi, 0
 27500                                  .L_lambda_simple_params_loop_0167:	; copy params
 27501 00014964 4883FE03                	cmp rsi, 3
 27502 00014968 740E                    	je .L_lambda_simple_params_end_0167
 27503 0001496A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27504 0001496F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27505 00014973 48FFC6                  	inc rsi
 27506 00014976 EBEC                    	jmp .L_lambda_simple_params_loop_0167
 27507                                  .L_lambda_simple_params_end_0167:
 27508 00014978 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27509 0001497B 4889C3                  	mov rbx, rax
 27510 0001497E 58                      	pop rax
 27511 0001497F C60004                  	mov byte [rax], T_closure
 27512 00014982 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27513 00014986 48C74009[93490100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0167
 27514 0001498E E9BE000000              	jmp .L_lambda_simple_end_0167
 27515                                  .L_lambda_simple_code_0167:	; lambda-simple body
 27516 00014993 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27517 00014999 740B                    	je .L_lambda_simple_arity_check_ok_0167
 27518 0001499B FF742410                	push qword [rsp + 8 * 2]
 27519 0001499F 6A01                    	push 1
 27520 000149A1 E947360000              	jmp L_error_incorrect_arity_simple
 27521                                  .L_lambda_simple_arity_check_ok_0167:
 27522 000149A6 C8000000                	enter 0, 0
 27523                                  	; preparing a tail-call
 27524                                  	; preparing a non-tail-call
 27525 000149AA 488B4510                	mov rax, ENV
 27526 000149AE 488B00                  	mov rax, qword [rax + 8 * 0]
 27527 000149B1 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var s
 27528 000149B5 50                      	push rax
 27529 000149B6 6A01                    	push 1	; arg count
 27530 000149B8 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
 27531 000149C0 803805                  	cmp byte [rax], T_undefined
 27532 000149C3 0F843E350000            	je L_error_fvar_undefined
 27533 000149C9 803804                  	cmp byte [rax], T_closure
 27534 000149CC 0F85B9350000            	jne L_error_non_closure
 27535 000149D2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27536 000149D5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27537 000149D8 50                      	push rax
 27538 000149D9 488B4520                	mov rax, PARAM(0)	; param i
 27539 000149DD 50                      	push rax
 27540 000149DE 488B4510                	mov rax, ENV
 27541 000149E2 488B00                  	mov rax, qword [rax + 8 * 0]
 27542 000149E5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var target
 27543 000149E8 50                      	push rax
 27544 000149E9 6A03                    	push 3	; arg count
 27545 000149EB 488B4510                	mov rax, ENV
 27546 000149EF 488B4008                	mov rax, qword [rax + 8 * 1]
 27547 000149F3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 27548 000149F6 488B00                  	mov rax, qword [rax]
 27549 000149F9 803804                  	cmp byte [rax], T_closure
 27550 000149FC 0F8589350000            	jne L_error_non_closure
 27551 00014A02 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27552 00014A05 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 27553 00014A08 FF7500                  	push qword[rbp]
 27554 00014A0B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 27555 00014A0E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 27556 00014A12 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 27557 00014A16 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 27558 00014A1A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 27559 00014A1D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 27560 00014A20 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 27561 00014A25 4983C103                	add r9, 3 	 ;for getting to the params
 27562 00014A29 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 27563 00014A2D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 27564                                  .L_tc_recycle_frame_loop_0207:
 27565 00014A30 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 27566 00014A33 7410                    	je .L_tc_recycle_frame_done_0207
 27567 00014A35 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 27568 00014A38 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 27569 00014A3B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 27570 00014A3F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 27571 00014A43 EBEB                    	jmp .L_tc_recycle_frame_loop_0207
 27572                                  .L_tc_recycle_frame_done_0207:
 27573 00014A45 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27574 00014A46 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27575 00014A4A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27576 00014A4D C9                      	leave
 27577 00014A4E C21800                  	ret AND_KILL_FRAME(1)
 27578                                  .L_lambda_simple_end_0167:	; new closure is in rax
 27579 00014A51 803804                  	cmp byte [rax], T_closure
 27580 00014A54 0F8531350000            	jne L_error_non_closure
 27581 00014A5A FF7001                  	push SOB_CLOSURE_ENV(rax)
 27582 00014A5D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 27583 00014A60 FF7500                  	push qword[rbp]
 27584 00014A63 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 27585 00014A66 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 27586 00014A6A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 27587 00014A6E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 27588 00014A72 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 27589 00014A75 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 27590 00014A78 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 27591 00014A7D 4983C103                	add r9, 3 	 ;for getting to the params
 27592 00014A81 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 27593 00014A85 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 27594                                  .L_tc_recycle_frame_loop_0208:
 27595 00014A88 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 27596 00014A8B 7410                    	je .L_tc_recycle_frame_done_0208
 27597 00014A8D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 27598 00014A90 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 27599 00014A93 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 27600 00014A97 4983E808                	sub r8, 8	 ;move the top of the stack one down
 27601 00014A9B EBEB                    	jmp .L_tc_recycle_frame_loop_0208
 27602                                  .L_tc_recycle_frame_done_0208:
 27603 00014A9D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27604 00014A9E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27605 00014AA2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27606                                  .L_if_end_011f:
 27607 00014AA5 C9                      	leave
 27608 00014AA6 C22800                  	ret AND_KILL_FRAME(3)
 27609                                  .L_lambda_simple_end_0166:	; new closure is in rax
 27610 00014AA9 50                      	push rax
 27611 00014AAA 488B4520                	mov rax, PARAM(0)	; param run
 27612 00014AAE 8F00                    	pop qword [rax]
 27613 00014AB0 48B8-                   	mov rax, sob_void
 27613 00014AB2 [0000000000000000] 
 27614                                  
 27615 00014ABA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27616 00014ABF E870350000              	call malloc
 27617 00014AC4 50                      	push rax
 27618 00014AC5 BF10000000              	mov rdi, 8 * 2	; new rib
 27619 00014ACA E865350000              	call malloc
 27620 00014ACF 50                      	push rax
 27621 00014AD0 BF10000000              	mov rdi, 8 * 2	; extended env
 27622 00014AD5 E85A350000              	call malloc
 27623 00014ADA 488B7D10                	mov rdi, ENV
 27624 00014ADE BE00000000              	mov rsi, 0
 27625 00014AE3 BA01000000              	mov rdx, 1
 27626                                  .L_lambda_simple_env_loop_0168:	; ext_env[i + 1] <-- env[i]
 27627 00014AE8 4883FE01                	cmp rsi, 1
 27628 00014AEC 7410                    	je .L_lambda_simple_env_end_0168
 27629 00014AEE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27630 00014AF2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27631 00014AF6 48FFC6                  	inc rsi
 27632 00014AF9 48FFC2                  	inc rdx
 27633 00014AFC EBEA                    	jmp .L_lambda_simple_env_loop_0168
 27634                                  .L_lambda_simple_env_end_0168:
 27635 00014AFE 5B                      	pop rbx
 27636 00014AFF BE00000000              	mov rsi, 0
 27637                                  .L_lambda_simple_params_loop_0168:	; copy params
 27638 00014B04 4883FE02                	cmp rsi, 2
 27639 00014B08 740E                    	je .L_lambda_simple_params_end_0168
 27640 00014B0A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27641 00014B0F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27642 00014B13 48FFC6                  	inc rsi
 27643 00014B16 EBEC                    	jmp .L_lambda_simple_params_loop_0168
 27644                                  .L_lambda_simple_params_end_0168:
 27645 00014B18 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27646 00014B1B 4889C3                  	mov rbx, rax
 27647 00014B1E 58                      	pop rax
 27648 00014B1F C60004                  	mov byte [rax], T_closure
 27649 00014B22 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27650 00014B26 48C74009[334B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0168
 27651 00014B2E E98B010000              	jmp .L_lambda_simple_end_0168
 27652                                  .L_lambda_simple_code_0168:	; lambda-simple body
 27653 00014B33 48837C241005            	cmp qword [rsp + 8 * 2], 5
 27654 00014B39 740B                    	je .L_lambda_simple_arity_check_ok_0168
 27655 00014B3B FF742410                	push qword [rsp + 8 * 2]
 27656 00014B3F 6A05                    	push 5
 27657 00014B41 E9A7340000              	jmp L_error_incorrect_arity_simple
 27658                                  .L_lambda_simple_arity_check_ok_0168:
 27659 00014B46 C8000000                	enter 0, 0
 27660                                  	; preparing a non-tail-call
 27661 00014B4A 488B4540                	mov rax, PARAM(4)	; param limit
 27662 00014B4E 50                      	push rax
 27663 00014B4F 488B4538                	mov rax, PARAM(3)	; param j
 27664 00014B53 50                      	push rax
 27665 00014B54 6A02                    	push 2	; arg count
 27666 00014B56 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 27667 00014B5E 803805                  	cmp byte [rax], T_undefined
 27668 00014B61 0F84A0330000            	je L_error_fvar_undefined
 27669 00014B67 803804                  	cmp byte [rax], T_closure
 27670 00014B6A 0F851B340000            	jne L_error_non_closure
 27671 00014B70 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27672 00014B73 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27673 00014B76 483D[02000000]          	cmp rax, sob_boolean_false
 27674 00014B7C 0F8434010000            	je .L_if_else_0120
 27675                                  	; preparing a non-tail-call
 27676                                  	; preparing a non-tail-call
 27677 00014B82 488B4538                	mov rax, PARAM(3)	; param j
 27678 00014B86 50                      	push rax
 27679 00014B87 488B4530                	mov rax, PARAM(2)	; param str
 27680 00014B8B 50                      	push rax
 27681 00014B8C 6A02                    	push 2	; arg count
 27682 00014B8E 488B0425[57160000]      	mov rax, qword [free_var_128]	; free var string-ref
 27683 00014B96 803805                  	cmp byte [rax], T_undefined
 27684 00014B99 0F8468330000            	je L_error_fvar_undefined
 27685 00014B9F 803804                  	cmp byte [rax], T_closure
 27686 00014BA2 0F85E3330000            	jne L_error_non_closure
 27687 00014BA8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27688 00014BAB FF5009                  	call SOB_CLOSURE_CODE(rax)
 27689 00014BAE 50                      	push rax
 27690 00014BAF 488B4528                	mov rax, PARAM(1)	; param i
 27691 00014BB3 50                      	push rax
 27692 00014BB4 488B4520                	mov rax, PARAM(0)	; param target
 27693 00014BB8 50                      	push rax
 27694 00014BB9 6A03                    	push 3	; arg count
 27695 00014BBB 488B0425[8A160000]      	mov rax, qword [free_var_131]	; free var string-set!
 27696 00014BC3 803805                  	cmp byte [rax], T_undefined
 27697 00014BC6 0F843B330000            	je L_error_fvar_undefined
 27698 00014BCC 803804                  	cmp byte [rax], T_closure
 27699 00014BCF 0F85B6330000            	jne L_error_non_closure
 27700 00014BD5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27701 00014BD8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27702                                  
 27703                                  	; preparing a tail-call
 27704 00014BDB 488B4540                	mov rax, PARAM(4)	; param limit
 27705 00014BDF 50                      	push rax
 27706                                  	; preparing a non-tail-call
 27707 00014BE0 48B8-                   	mov rax, L_constants + 2270
 27707 00014BE2 [DE08000000000000] 
 27708 00014BEA 50                      	push rax
 27709 00014BEB 488B4538                	mov rax, PARAM(3)	; param j
 27710 00014BEF 50                      	push rax
 27711 00014BF0 6A02                    	push 2	; arg count
 27712 00014BF2 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 27713 00014BFA 803805                  	cmp byte [rax], T_undefined
 27714 00014BFD 0F8404330000            	je L_error_fvar_undefined
 27715 00014C03 803804                  	cmp byte [rax], T_closure
 27716 00014C06 0F857F330000            	jne L_error_non_closure
 27717 00014C0C FF7001                  	push SOB_CLOSURE_ENV(rax)
 27718 00014C0F FF5009                  	call SOB_CLOSURE_CODE(rax)
 27719 00014C12 50                      	push rax
 27720 00014C13 488B4530                	mov rax, PARAM(2)	; param str
 27721 00014C17 50                      	push rax
 27722                                  	; preparing a non-tail-call
 27723 00014C18 48B8-                   	mov rax, L_constants + 2270
 27723 00014C1A [DE08000000000000] 
 27724 00014C22 50                      	push rax
 27725 00014C23 488B4528                	mov rax, PARAM(1)	; param i
 27726 00014C27 50                      	push rax
 27727 00014C28 6A02                    	push 2	; arg count
 27728 00014C2A 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 27729 00014C32 803805                  	cmp byte [rax], T_undefined
 27730 00014C35 0F84CC320000            	je L_error_fvar_undefined
 27731 00014C3B 803804                  	cmp byte [rax], T_closure
 27732 00014C3E 0F8547330000            	jne L_error_non_closure
 27733 00014C44 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27734 00014C47 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27735 00014C4A 50                      	push rax
 27736 00014C4B 488B4520                	mov rax, PARAM(0)	; param target
 27737 00014C4F 50                      	push rax
 27738 00014C50 6A05                    	push 5	; arg count
 27739 00014C52 488B4510                	mov rax, ENV
 27740 00014C56 488B00                  	mov rax, qword [rax + 8 * 0]
 27741 00014C59 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 27742 00014C5D 488B00                  	mov rax, qword [rax]
 27743 00014C60 803804                  	cmp byte [rax], T_closure
 27744 00014C63 0F8522330000            	jne L_error_non_closure
 27745 00014C69 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27746 00014C6C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 27747 00014C6F FF7500                  	push qword[rbp]
 27748 00014C72 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 27749 00014C75 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 27750 00014C79 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 27751 00014C7D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 27752 00014C81 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 27753 00014C84 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 27754 00014C87 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 27755 00014C8C 4983C103                	add r9, 3 	 ;for getting to the params
 27756 00014C90 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 27757 00014C94 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 27758                                  .L_tc_recycle_frame_loop_0209:
 27759 00014C97 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 27760 00014C9A 7410                    	je .L_tc_recycle_frame_done_0209
 27761 00014C9C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 27762 00014C9F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 27763 00014CA2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 27764 00014CA6 4983E808                	sub r8, 8	 ;move the top of the stack one down
 27765 00014CAA EBEB                    	jmp .L_tc_recycle_frame_loop_0209
 27766                                  .L_tc_recycle_frame_done_0209:
 27767 00014CAC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27768 00014CAD 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27769 00014CB1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27770 00014CB4 EB04                    	jmp .L_if_end_0120
 27771                                  .L_if_else_0120:
 27772 00014CB6 488B4528                	mov rax, PARAM(1)	; param i
 27773                                  .L_if_end_0120:
 27774 00014CBA C9                      	leave
 27775 00014CBB C23800                  	ret AND_KILL_FRAME(5)
 27776                                  .L_lambda_simple_end_0168:	; new closure is in rax
 27777 00014CBE 50                      	push rax
 27778 00014CBF 488B4528                	mov rax, PARAM(1)	; param add
 27779 00014CC3 8F00                    	pop qword [rax]
 27780 00014CC5 48B8-                   	mov rax, sob_void
 27780 00014CC7 [0000000000000000] 
 27781                                  
 27782 00014CCF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27783 00014CD4 E85B330000              	call malloc
 27784 00014CD9 50                      	push rax
 27785 00014CDA BF10000000              	mov rdi, 8 * 2	; new rib
 27786 00014CDF E850330000              	call malloc
 27787 00014CE4 50                      	push rax
 27788 00014CE5 BF10000000              	mov rdi, 8 * 2	; extended env
 27789 00014CEA E845330000              	call malloc
 27790 00014CEF 488B7D10                	mov rdi, ENV
 27791 00014CF3 BE00000000              	mov rsi, 0
 27792 00014CF8 BA01000000              	mov rdx, 1
 27793                                  .L_lambda_opt_env_loop_002f:	; ext_env[i + 1] <-- env[i]
 27794 00014CFD 4883FE01                	cmp rsi, 1
 27795 00014D01 7410                    	je .L_lambda_opt_env_end_002f
 27796 00014D03 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27797 00014D07 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27798 00014D0B 48FFC6                  	inc rsi
 27799 00014D0E 48FFC2                  	inc rdx
 27800 00014D11 EBEA                    	jmp .L_lambda_opt_env_loop_002f
 27801                                  .L_lambda_opt_env_end_002f:
 27802 00014D13 5B                      	pop rbx
 27803 00014D14 BE00000000              	mov rsi, 0
 27804                                  .L_lambda_opt_params_loop_002f:	; copy params
 27805 00014D19 4883FE02                	cmp rsi, 2
 27806 00014D1D 740E                    	je .L_lambda_opt_params_end_002f
 27807 00014D1F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27808 00014D24 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27809 00014D28 48FFC6                  	inc rsi
 27810 00014D2B EBEC                    	jmp .L_lambda_opt_params_loop_002f
 27811                                  .L_lambda_opt_params_end_002f:
 27812 00014D2D 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
 27813 00014D30 4889C3                  	mov rbx, rax
 27814 00014D33 58                      	pop rax
 27815 00014D34 C60004                  	mov byte [rax], T_closure
 27816 00014D37 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27817 00014D3B 48C74009[484D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_002f
 27818 00014D43 E91F030000              	jmp .L_lambda_opt_end_002f
 27819                                  .L_lambda_opt_code_002f:	; lambda-opt body
 27820 00014D48 48837C241000            	cmp qword [rsp + 8 * 2], 0
 27821 00014D4E 7411                    	je .L_lambda_opt_arity_check_exact_002f
 27822 00014D50 0F8F4D010000            	jg .L_lambda_opt_arity_check_more_002f
 27823 00014D56 FF742410                	push qword [rsp + 8 * 2]
 27824 00014D5A 6A00                    	push 0
 27825 00014D5C E9A0320000              	jmp L_error_incorrect_arity_opt
 27826                                  .L_lambda_opt_arity_check_exact_002f:
 27827 00014D61 4883EC08                	sub rsp, 8
 27828 00014D65 488B442408              	mov rax, qword[rsp + 8 *1]
 27829 00014D6A 48890424                	mov qword[rsp], rax  
 27830 00014D6E 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 27831 00014D73 4889442408              	mov qword[rsp + 8 * 1], rax
 27832 00014D78 B801000000              	mov rax, 1
 27833 00014D7D 4889442410              	mov qword[rsp + 8 *2], rax
 27834 00014D82 48B8-                   	mov rax, sob_nil
 27834 00014D84 [0100000000000000] 
 27835 00014D8C 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 27836 00014D91 C8000000                	enter 0, 0
 27837                                  	; preparing a tail-call
 27838 00014D95 488B4520                	mov rax, PARAM(0)	; param strings
 27839 00014D99 50                      	push rax
 27840 00014D9A 48B8-                   	mov rax, L_constants + 2135
 27840 00014D9C [5708000000000000] 
 27841 00014DA4 50                      	push rax
 27842                                  	; preparing a non-tail-call
 27843                                  	; preparing a non-tail-call
 27844                                  	; preparing a non-tail-call
 27845 00014DA5 488B4520                	mov rax, PARAM(0)	; param strings
 27846 00014DA9 50                      	push rax
 27847 00014DAA 488B0425[46160000]      	mov rax, qword [free_var_127]	; free var string-length
 27848 00014DB2 803805                  	cmp byte [rax], T_undefined
 27849 00014DB5 0F844C310000            	je L_error_fvar_undefined
 27850 00014DBB 50                      	push rax
 27851 00014DBC 6A02                    	push 2	; arg count
 27852 00014DBE 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
 27853 00014DC6 803805                  	cmp byte [rax], T_undefined
 27854 00014DC9 0F8438310000            	je L_error_fvar_undefined
 27855 00014DCF 803804                  	cmp byte [rax], T_closure
 27856 00014DD2 0F85B3310000            	jne L_error_non_closure
 27857 00014DD8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27858 00014DDB FF5009                  	call SOB_CLOSURE_CODE(rax)
 27859 00014DDE 50                      	push rax
 27860 00014DDF 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 27861 00014DE7 803805                  	cmp byte [rax], T_undefined
 27862 00014DEA 0F8417310000            	je L_error_fvar_undefined
 27863 00014DF0 50                      	push rax
 27864 00014DF1 6A02                    	push 2	; arg count
 27865 00014DF3 488B0425[08100000]      	mov rax, qword [free_var_33]	; free var apply
 27866 00014DFB 803805                  	cmp byte [rax], T_undefined
 27867 00014DFE 0F8403310000            	je L_error_fvar_undefined
 27868 00014E04 803804                  	cmp byte [rax], T_closure
 27869 00014E07 0F857E310000            	jne L_error_non_closure
 27870 00014E0D FF7001                  	push SOB_CLOSURE_ENV(rax)
 27871 00014E10 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27872 00014E13 50                      	push rax
 27873 00014E14 6A01                    	push 1	; arg count
 27874 00014E16 488B0425[6A140000]      	mov rax, qword [free_var_99]	; free var make-string
 27875 00014E1E 803805                  	cmp byte [rax], T_undefined
 27876 00014E21 0F84E0300000            	je L_error_fvar_undefined
 27877 00014E27 803804                  	cmp byte [rax], T_closure
 27878 00014E2A 0F855B310000            	jne L_error_non_closure
 27879 00014E30 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27880 00014E33 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27881 00014E36 50                      	push rax
 27882 00014E37 6A03                    	push 3	; arg count
 27883 00014E39 488B4510                	mov rax, ENV
 27884 00014E3D 488B00                  	mov rax, qword [rax + 8 * 0]
 27885 00014E40 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 27886 00014E43 488B00                  	mov rax, qword [rax]
 27887 00014E46 803804                  	cmp byte [rax], T_closure
 27888 00014E49 0F853C310000            	jne L_error_non_closure
 27889 00014E4F FF7001                  	push SOB_CLOSURE_ENV(rax)
 27890 00014E52 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 27891 00014E55 FF7500                  	push qword[rbp]
 27892 00014E58 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 27893 00014E5B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 27894 00014E5F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 27895 00014E63 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 27896 00014E67 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 27897 00014E6A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 27898 00014E6D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 27899 00014E72 4983C103                	add r9, 3 	 ;for getting to the params
 27900 00014E76 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 27901 00014E7A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 27902                                  .L_tc_recycle_frame_loop_020b:
 27903 00014E7D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 27904 00014E80 7410                    	je .L_tc_recycle_frame_done_020b
 27905 00014E82 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 27906 00014E85 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 27907 00014E88 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 27908 00014E8C 4983E808                	sub r8, 8	 ;move the top of the stack one down
 27909 00014E90 EBEB                    	jmp .L_tc_recycle_frame_loop_020b
 27910                                  .L_tc_recycle_frame_done_020b:
 27911 00014E92 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27912 00014E93 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27913 00014E97 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27914 00014E9A C9                      	leave
 27915 00014E9B C21800                  	ret AND_KILL_FRAME(1)
 27916 00014E9E E9C4010000              	jmp .L_lambda_opt_end_002f	; new closure is in rax
 27917                                  .L_lambda_opt_arity_check_more_002f:
 27918 00014EA3 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 27919 00014EA8 49B9-                   	mov r9, sob_nil
 27919 00014EAA [0100000000000000] 
 27920 00014EB2 4889E3                  	mov rbx, rsp 
 27921 00014EB5 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 27922 00014EB9 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 27923 00014EBC 49C1E003                	shl r8, 3
 27924 00014EC0 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 27925 00014EC3 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 27926                                  .L_lambda_opt_stack_shrink_loop_002f:
 27927 00014EC8 4983F800                	cmp r8, 0
 27928 00014ECC 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_002f
 27929 00014ECE BF11000000              	mov rdi, 1+8+8 ;for pair
 27930 00014ED3 E85C310000              	call malloc;to create the pair in the stack
 27931 00014ED8 C60021                  	mov byte [rax], T_pair ; to make it a pair
 27932 00014EDB 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
 27933 00014EDE 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 27934 00014EE2 4C894809                 	mov qword[rax+1+8],r9
 27935 00014EE6 4989C1                  	mov r9, rax ;for the recursion 
 27936 00014EE9 49FFC8                  	dec r8 ;we finished copy another opt param to the list
 27937 00014EEC 4883EB08                	sub rbx, 8 ;to get the next param to copy
 27938 00014EF0 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_002f
 27939                                  .L_lambda_opt_stack_shrink_loop_exit_002f:
 27940 00014EF2 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
 27941 00014EF7 4883E901                	sub rcx, 1
 27942 00014EFB 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
 27943 00014EFF 4801CC                  	add rsp, rcx ;shrinking the stack
 27944 00014F02 4889E0                  	mov rax, rsp
 27945 00014F05 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
 27946 00014F08 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
 27947 00014F0C 49FFC8                  	dec r8 ;we start with param 0, not 1 
 27948 00014F0F 4883C018                	add rax, 3 * 8;now rax is param 0
 27949 00014F13 49C1E003                	shl r8, 3;convert to byte
 27950 00014F17 4C01C0                  	add rax, r8;now rax is the top of the stack
 27951 00014F1A 4C8908                  	mov qword[rax], r9;puting the list at the top
 27952 00014F1D 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
 27953 00014F21 4889E3                  	mov rbx, rsp 
 27954 00014F24 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
 27955 00014F27 41BA00000000            	mov r10, 0;r10 is the not opt params length
 27956 00014F2D 49FFCA                  	dec r10 
 27957 00014F30 49C1E203                	shl r10, 3;to get bytes
 27958 00014F34 4883C318                	add rbx, 3*8;rbx is the first param
 27959 00014F38 4C01D3                  	add rbx, r10; rbx is where the address to copy to
 27960 00014F3B 4889E0                  	mov rax, rsp
 27961 00014F3E 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 27962 00014F41 48C744241001000000      	mov qword [rsp+2*8], 1
 27963 00014F4A 488B5808                	mov rbx, qword[rax + 8 *1]
 27964 00014F4E 48895C2408              	mov qword [rsp + 1*8] ,rbx
 27965 00014F53 488B18                  	mov rbx, qword[rax]
 27966 00014F56 48891C24                	mov qword [rsp], rbx
 27967 00014F5A C8000000                	enter 0, 0
 27968                                  	; preparing a tail-call
 27969 00014F5E 488B4520                	mov rax, PARAM(0)	; param strings
 27970 00014F62 50                      	push rax
 27971 00014F63 48B8-                   	mov rax, L_constants + 2135
 27971 00014F65 [5708000000000000] 
 27972 00014F6D 50                      	push rax
 27973                                  	; preparing a non-tail-call
 27974                                  	; preparing a non-tail-call
 27975                                  	; preparing a non-tail-call
 27976 00014F6E 488B4520                	mov rax, PARAM(0)	; param strings
 27977 00014F72 50                      	push rax
 27978 00014F73 488B0425[46160000]      	mov rax, qword [free_var_127]	; free var string-length
 27979 00014F7B 803805                  	cmp byte [rax], T_undefined
 27980 00014F7E 0F84832F0000            	je L_error_fvar_undefined
 27981 00014F84 50                      	push rax
 27982 00014F85 6A02                    	push 2	; arg count
 27983 00014F87 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
 27984 00014F8F 803805                  	cmp byte [rax], T_undefined
 27985 00014F92 0F846F2F0000            	je L_error_fvar_undefined
 27986 00014F98 803804                  	cmp byte [rax], T_closure
 27987 00014F9B 0F85EA2F0000            	jne L_error_non_closure
 27988 00014FA1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27989 00014FA4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27990 00014FA7 50                      	push rax
 27991 00014FA8 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 27992 00014FB0 803805                  	cmp byte [rax], T_undefined
 27993 00014FB3 0F844E2F0000            	je L_error_fvar_undefined
 27994 00014FB9 50                      	push rax
 27995 00014FBA 6A02                    	push 2	; arg count
 27996 00014FBC 488B0425[08100000]      	mov rax, qword [free_var_33]	; free var apply
 27997 00014FC4 803805                  	cmp byte [rax], T_undefined
 27998 00014FC7 0F843A2F0000            	je L_error_fvar_undefined
 27999 00014FCD 803804                  	cmp byte [rax], T_closure
 28000 00014FD0 0F85B52F0000            	jne L_error_non_closure
 28001 00014FD6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28002 00014FD9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28003 00014FDC 50                      	push rax
 28004 00014FDD 6A01                    	push 1	; arg count
 28005 00014FDF 488B0425[6A140000]      	mov rax, qword [free_var_99]	; free var make-string
 28006 00014FE7 803805                  	cmp byte [rax], T_undefined
 28007 00014FEA 0F84172F0000            	je L_error_fvar_undefined
 28008 00014FF0 803804                  	cmp byte [rax], T_closure
 28009 00014FF3 0F85922F0000            	jne L_error_non_closure
 28010 00014FF9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28011 00014FFC FF5009                  	call SOB_CLOSURE_CODE(rax)
 28012 00014FFF 50                      	push rax
 28013 00015000 6A03                    	push 3	; arg count
 28014 00015002 488B4510                	mov rax, ENV
 28015 00015006 488B00                  	mov rax, qword [rax + 8 * 0]
 28016 00015009 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 28017 0001500C 488B00                  	mov rax, qword [rax]
 28018 0001500F 803804                  	cmp byte [rax], T_closure
 28019 00015012 0F85732F0000            	jne L_error_non_closure
 28020 00015018 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28021 0001501B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 28022 0001501E FF7500                  	push qword[rbp]
 28023 00015021 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 28024 00015024 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 28025 00015028 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 28026 0001502C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 28027 00015030 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 28028 00015033 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 28029 00015036 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 28030 0001503B 4983C103                	add r9, 3 	 ;for getting to the params
 28031 0001503F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 28032 00015043 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 28033                                  .L_tc_recycle_frame_loop_020a:
 28034 00015046 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 28035 00015049 7410                    	je .L_tc_recycle_frame_done_020a
 28036 0001504B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 28037 0001504E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 28038 00015051 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 28039 00015055 4983E808                	sub r8, 8	 ;move the top of the stack one down
 28040 00015059 EBEB                    	jmp .L_tc_recycle_frame_loop_020a
 28041                                  .L_tc_recycle_frame_done_020a:
 28042 0001505B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 28043 0001505C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 28044 00015060 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28045 00015063 C9                      	leave
 28046 00015064 C21800                  	ret AND_KILL_FRAME(1)
 28047                                  .L_lambda_opt_end_002f:	; new closure is in rax
 28048 00015067 C9                      	leave
 28049 00015068 C22000                  	ret AND_KILL_FRAME(2)
 28050                                  .L_lambda_simple_end_0165:	; new closure is in rax
 28051 0001506B 803804                  	cmp byte [rax], T_closure
 28052 0001506E 0F85172F0000            	jne L_error_non_closure
 28053 00015074 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28054 00015077 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28055 0001507A 48890425[CF150000]      	mov qword [free_var_120], rax
 28056 00015082 48B8-                   	mov rax, sob_void
 28056 00015084 [0000000000000000] 
 28057                                  
 28058 0001508C 4889C7                  	mov rdi, rax
 28059 0001508F E8F5310000              	call print_sexpr_if_not_void
 28060                                  	; preparing a non-tail-call
 28061 00015094 48B8-                   	mov rax, L_constants + 1993
 28061 00015096 [C907000000000000] 
 28062 0001509E 50                      	push rax
 28063 0001509F 48B8-                   	mov rax, L_constants + 1993
 28063 000150A1 [C907000000000000] 
 28064 000150A9 50                      	push rax
 28065 000150AA 6A02                    	push 2	; arg count
 28066 000150AC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28067 000150B1 E87E2F0000              	call malloc
 28068 000150B6 50                      	push rax
 28069 000150B7 BF00000000              	mov rdi, 8 * 0	; new rib
 28070 000150BC E8732F0000              	call malloc
 28071 000150C1 50                      	push rax
 28072 000150C2 BF08000000              	mov rdi, 8 * 1	; extended env
 28073 000150C7 E8682F0000              	call malloc
 28074 000150CC 488B7D10                	mov rdi, ENV
 28075 000150D0 BE00000000              	mov rsi, 0
 28076 000150D5 BA01000000              	mov rdx, 1
 28077                                  .L_lambda_simple_env_loop_0169:	; ext_env[i + 1] <-- env[i]
 28078 000150DA 4883FE00                	cmp rsi, 0
 28079 000150DE 7410                    	je .L_lambda_simple_env_end_0169
 28080 000150E0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28081 000150E4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28082 000150E8 48FFC6                  	inc rsi
 28083 000150EB 48FFC2                  	inc rdx
 28084 000150EE EBEA                    	jmp .L_lambda_simple_env_loop_0169
 28085                                  .L_lambda_simple_env_end_0169:
 28086 000150F0 5B                      	pop rbx
 28087 000150F1 BE00000000              	mov rsi, 0
 28088                                  .L_lambda_simple_params_loop_0169:	; copy params
 28089 000150F6 4883FE00                	cmp rsi, 0
 28090 000150FA 740E                    	je .L_lambda_simple_params_end_0169
 28091 000150FC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28092 00015101 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28093 00015105 48FFC6                  	inc rsi
 28094 00015108 EBEC                    	jmp .L_lambda_simple_params_loop_0169
 28095                                  .L_lambda_simple_params_end_0169:
 28096 0001510A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28097 0001510D 4889C3                  	mov rbx, rax
 28098 00015110 58                      	pop rax
 28099 00015111 C60004                  	mov byte [rax], T_closure
 28100 00015114 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28101 00015118 48C74009[25510100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0169
 28102 00015120 E918090000              	jmp .L_lambda_simple_end_0169
 28103                                  .L_lambda_simple_code_0169:	; lambda-simple body
 28104 00015125 48837C241002            	cmp qword [rsp + 8 * 2], 2
 28105 0001512B 740B                    	je .L_lambda_simple_arity_check_ok_0169
 28106 0001512D FF742410                	push qword [rsp + 8 * 2]
 28107 00015131 6A02                    	push 2
 28108 00015133 E9B52E0000              	jmp L_error_incorrect_arity_simple
 28109                                  .L_lambda_simple_arity_check_ok_0169:
 28110 00015138 C8000000                	enter 0, 0
 28111 0001513C BF08000000              	mov rdi, 8*1
 28112 00015141 E8EE2E0000              	call malloc
 28113 00015146 488B5D20                	mov rbx, PARAM(0)
 28114 0001514A 488918                  	mov qword[rax], rbx
 28115 0001514D 48894520                	mov PARAM(0), rax
 28116 00015151 48B8-                   	mov rax, sob_void
 28116 00015153 [0000000000000000] 
 28117                                  
 28118 0001515B BF08000000              	mov rdi, 8*1
 28119 00015160 E8CF2E0000              	call malloc
 28120 00015165 488B5D28                	mov rbx, PARAM(1)
 28121 00015169 488918                  	mov qword[rax], rbx
 28122 0001516C 48894528                	mov PARAM(1), rax
 28123 00015170 48B8-                   	mov rax, sob_void
 28123 00015172 [0000000000000000] 
 28124                                  
 28125 0001517A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28126 0001517F E8B02E0000              	call malloc
 28127 00015184 50                      	push rax
 28128 00015185 BF10000000              	mov rdi, 8 * 2	; new rib
 28129 0001518A E8A52E0000              	call malloc
 28130 0001518F 50                      	push rax
 28131 00015190 BF10000000              	mov rdi, 8 * 2	; extended env
 28132 00015195 E89A2E0000              	call malloc
 28133 0001519A 488B7D10                	mov rdi, ENV
 28134 0001519E BE00000000              	mov rsi, 0
 28135 000151A3 BA01000000              	mov rdx, 1
 28136                                  .L_lambda_simple_env_loop_016a:	; ext_env[i + 1] <-- env[i]
 28137 000151A8 4883FE01                	cmp rsi, 1
 28138 000151AC 7410                    	je .L_lambda_simple_env_end_016a
 28139 000151AE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28140 000151B2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28141 000151B6 48FFC6                  	inc rsi
 28142 000151B9 48FFC2                  	inc rdx
 28143 000151BC EBEA                    	jmp .L_lambda_simple_env_loop_016a
 28144                                  .L_lambda_simple_env_end_016a:
 28145 000151BE 5B                      	pop rbx
 28146 000151BF BE00000000              	mov rsi, 0
 28147                                  .L_lambda_simple_params_loop_016a:	; copy params
 28148 000151C4 4883FE02                	cmp rsi, 2
 28149 000151C8 740E                    	je .L_lambda_simple_params_end_016a
 28150 000151CA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28151 000151CF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28152 000151D3 48FFC6                  	inc rsi
 28153 000151D6 EBEC                    	jmp .L_lambda_simple_params_loop_016a
 28154                                  .L_lambda_simple_params_end_016a:
 28155 000151D8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28156 000151DB 4889C3                  	mov rbx, rax
 28157 000151DE 58                      	pop rax
 28158 000151DF C60004                  	mov byte [rax], T_closure
 28159 000151E2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28160 000151E6 48C74009[F3510100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_016a
 28161 000151EE E988020000              	jmp .L_lambda_simple_end_016a
 28162                                  .L_lambda_simple_code_016a:	; lambda-simple body
 28163 000151F3 48837C241003            	cmp qword [rsp + 8 * 2], 3
 28164 000151F9 740B                    	je .L_lambda_simple_arity_check_ok_016a
 28165 000151FB FF742410                	push qword [rsp + 8 * 2]
 28166 000151FF 6A03                    	push 3
 28167 00015201 E9E72D0000              	jmp L_error_incorrect_arity_simple
 28168                                  .L_lambda_simple_arity_check_ok_016a:
 28169 00015206 C8000000                	enter 0, 0
 28170                                  	; preparing a non-tail-call
 28171 0001520A 488B4530                	mov rax, PARAM(2)	; param s
 28172 0001520E 50                      	push rax
 28173 0001520F 6A01                    	push 1	; arg count
 28174 00015211 488B0425[F2140000]      	mov rax, qword [free_var_107]	; free var null?
 28175 00015219 803805                  	cmp byte [rax], T_undefined
 28176 0001521C 0F84E52C0000            	je L_error_fvar_undefined
 28177 00015222 803804                  	cmp byte [rax], T_closure
 28178 00015225 0F85602D0000            	jne L_error_non_closure
 28179 0001522B FF7001                  	push SOB_CLOSURE_ENV(rax)
 28180 0001522E FF5009                  	call SOB_CLOSURE_CODE(rax)
 28181 00015231 483D[02000000]          	cmp rax, sob_boolean_false
 28182 00015237 7409                    	je .L_if_else_0121
 28183 00015239 488B4520                	mov rax, PARAM(0)	; param target
 28184 0001523D E935020000              	jmp .L_if_end_0121
 28185                                  .L_if_else_0121:
 28186                                  	; preparing a tail-call
 28187                                  	; preparing a non-tail-call
 28188                                  	; preparing a non-tail-call
 28189                                  	; preparing a non-tail-call
 28190 00015242 488B4530                	mov rax, PARAM(2)	; param s
 28191 00015246 50                      	push rax
 28192 00015247 6A01                    	push 1	; arg count
 28193 00015249 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 28194 00015251 803805                  	cmp byte [rax], T_undefined
 28195 00015254 0F84AD2C0000            	je L_error_fvar_undefined
 28196 0001525A 803804                  	cmp byte [rax], T_closure
 28197 0001525D 0F85282D0000            	jne L_error_non_closure
 28198 00015263 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28199 00015266 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28200 00015269 50                      	push rax
 28201 0001526A 6A01                    	push 1	; arg count
 28202 0001526C 488B0425[56170000]      	mov rax, qword [free_var_143]	; free var vector-length
 28203 00015274 803805                  	cmp byte [rax], T_undefined
 28204 00015277 0F848A2C0000            	je L_error_fvar_undefined
 28205 0001527D 803804                  	cmp byte [rax], T_closure
 28206 00015280 0F85052D0000            	jne L_error_non_closure
 28207 00015286 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28208 00015289 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28209 0001528C 50                      	push rax
 28210 0001528D 48B8-                   	mov rax, L_constants + 2135
 28210 0001528F [5708000000000000] 
 28211 00015297 50                      	push rax
 28212                                  	; preparing a non-tail-call
 28213 00015298 488B4530                	mov rax, PARAM(2)	; param s
 28214 0001529C 50                      	push rax
 28215 0001529D 6A01                    	push 1	; arg count
 28216 0001529F 488B0425[18110000]      	mov rax, qword [free_var_49]	; free var car
 28217 000152A7 803805                  	cmp byte [rax], T_undefined
 28218 000152AA 0F84572C0000            	je L_error_fvar_undefined
 28219 000152B0 803804                  	cmp byte [rax], T_closure
 28220 000152B3 0F85D22C0000            	jne L_error_non_closure
 28221 000152B9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28222 000152BC FF5009                  	call SOB_CLOSURE_CODE(rax)
 28223 000152BF 50                      	push rax
 28224 000152C0 488B4528                	mov rax, PARAM(1)	; param i
 28225 000152C4 50                      	push rax
 28226 000152C5 488B4520                	mov rax, PARAM(0)	; param target
 28227 000152C9 50                      	push rax
 28228 000152CA 6A05                    	push 5	; arg count
 28229 000152CC 488B4510                	mov rax, ENV
 28230 000152D0 488B00                  	mov rax, qword [rax + 8 * 0]
 28231 000152D3 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 28232 000152D7 488B00                  	mov rax, qword [rax]
 28233 000152DA 803804                  	cmp byte [rax], T_closure
 28234 000152DD 0F85A82C0000            	jne L_error_non_closure
 28235 000152E3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28236 000152E6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28237 000152E9 50                      	push rax
 28238 000152EA 6A01                    	push 1	; arg count
 28239 000152EC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28240 000152F1 E83E2D0000              	call malloc
 28241 000152F6 50                      	push rax
 28242 000152F7 BF18000000              	mov rdi, 8 * 3	; new rib
 28243 000152FC E8332D0000              	call malloc
 28244 00015301 50                      	push rax
 28245 00015302 BF18000000              	mov rdi, 8 * 3	; extended env
 28246 00015307 E8282D0000              	call malloc
 28247 0001530C 488B7D10                	mov rdi, ENV
 28248 00015310 BE00000000              	mov rsi, 0
 28249 00015315 BA01000000              	mov rdx, 1
 28250                                  .L_lambda_simple_env_loop_016b:	; ext_env[i + 1] <-- env[i]
 28251 0001531A 4883FE02                	cmp rsi, 2
 28252 0001531E 7410                    	je .L_lambda_simple_env_end_016b
 28253 00015320 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28254 00015324 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28255 00015328 48FFC6                  	inc rsi
 28256 0001532B 48FFC2                  	inc rdx
 28257 0001532E EBEA                    	jmp .L_lambda_simple_env_loop_016b
 28258                                  .L_lambda_simple_env_end_016b:
 28259 00015330 5B                      	pop rbx
 28260 00015331 BE00000000              	mov rsi, 0
 28261                                  .L_lambda_simple_params_loop_016b:	; copy params
 28262 00015336 4883FE03                	cmp rsi, 3
 28263 0001533A 740E                    	je .L_lambda_simple_params_end_016b
 28264 0001533C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28265 00015341 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28266 00015345 48FFC6                  	inc rsi
 28267 00015348 EBEC                    	jmp .L_lambda_simple_params_loop_016b
 28268                                  .L_lambda_simple_params_end_016b:
 28269 0001534A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28270 0001534D 4889C3                  	mov rbx, rax
 28271 00015350 58                      	pop rax
 28272 00015351 C60004                  	mov byte [rax], T_closure
 28273 00015354 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28274 00015358 48C74009[65530100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_016b
 28275 00015360 E9BE000000              	jmp .L_lambda_simple_end_016b
 28276                                  .L_lambda_simple_code_016b:	; lambda-simple body
 28277 00015365 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28278 0001536B 740B                    	je .L_lambda_simple_arity_check_ok_016b
 28279 0001536D FF742410                	push qword [rsp + 8 * 2]
 28280 00015371 6A01                    	push 1
 28281 00015373 E9752C0000              	jmp L_error_incorrect_arity_simple
 28282                                  .L_lambda_simple_arity_check_ok_016b:
 28283 00015378 C8000000                	enter 0, 0
 28284                                  	; preparing a tail-call
 28285                                  	; preparing a non-tail-call
 28286 0001537C 488B4510                	mov rax, ENV
 28287 00015380 488B00                  	mov rax, qword [rax + 8 * 0]
 28288 00015383 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var s
 28289 00015387 50                      	push rax
 28290 00015388 6A01                    	push 1	; arg count
 28291 0001538A 488B0425[17120000]      	mov rax, qword [free_var_64]	; free var cdr
 28292 00015392 803805                  	cmp byte [rax], T_undefined
 28293 00015395 0F846C2B0000            	je L_error_fvar_undefined
 28294 0001539B 803804                  	cmp byte [rax], T_closure
 28295 0001539E 0F85E72B0000            	jne L_error_non_closure
 28296 000153A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28297 000153A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28298 000153AA 50                      	push rax
 28299 000153AB 488B4520                	mov rax, PARAM(0)	; param i
 28300 000153AF 50                      	push rax
 28301 000153B0 488B4510                	mov rax, ENV
 28302 000153B4 488B00                  	mov rax, qword [rax + 8 * 0]
 28303 000153B7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var target
 28304 000153BA 50                      	push rax
 28305 000153BB 6A03                    	push 3	; arg count
 28306 000153BD 488B4510                	mov rax, ENV
 28307 000153C1 488B4008                	mov rax, qword [rax + 8 * 1]
 28308 000153C5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 28309 000153C8 488B00                  	mov rax, qword [rax]
 28310 000153CB 803804                  	cmp byte [rax], T_closure
 28311 000153CE 0F85B72B0000            	jne L_error_non_closure
 28312 000153D4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28313 000153D7 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 28314 000153DA FF7500                  	push qword[rbp]
 28315 000153DD 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 28316 000153E0 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 28317 000153E4 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 28318 000153E8 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 28319 000153EC 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 28320 000153EF 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 28321 000153F2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 28322 000153F7 4983C103                	add r9, 3 	 ;for getting to the params
 28323 000153FB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 28324 000153FF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 28325                                  .L_tc_recycle_frame_loop_020c:
 28326 00015402 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 28327 00015405 7410                    	je .L_tc_recycle_frame_done_020c
 28328 00015407 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 28329 0001540A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 28330 0001540D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 28331 00015411 4983E808                	sub r8, 8	 ;move the top of the stack one down
 28332 00015415 EBEB                    	jmp .L_tc_recycle_frame_loop_020c
 28333                                  .L_tc_recycle_frame_done_020c:
 28334 00015417 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 28335 00015418 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 28336 0001541C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28337 0001541F C9                      	leave
 28338 00015420 C21800                  	ret AND_KILL_FRAME(1)
 28339                                  .L_lambda_simple_end_016b:	; new closure is in rax
 28340 00015423 803804                  	cmp byte [rax], T_closure
 28341 00015426 0F855F2B0000            	jne L_error_non_closure
 28342 0001542C FF7001                  	push SOB_CLOSURE_ENV(rax)
 28343 0001542F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 28344 00015432 FF7500                  	push qword[rbp]
 28345 00015435 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 28346 00015438 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 28347 0001543C 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 28348 00015440 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 28349 00015444 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 28350 00015447 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 28351 0001544A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 28352 0001544F 4983C103                	add r9, 3 	 ;for getting to the params
 28353 00015453 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 28354 00015457 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 28355                                  .L_tc_recycle_frame_loop_020d:
 28356 0001545A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 28357 0001545D 7410                    	je .L_tc_recycle_frame_done_020d
 28358 0001545F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 28359 00015462 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 28360 00015465 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 28361 00015469 4983E808                	sub r8, 8	 ;move the top of the stack one down
 28362 0001546D EBEB                    	jmp .L_tc_recycle_frame_loop_020d
 28363                                  .L_tc_recycle_frame_done_020d:
 28364 0001546F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 28365 00015470 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 28366 00015474 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28367                                  .L_if_end_0121:
 28368 00015477 C9                      	leave
 28369 00015478 C22800                  	ret AND_KILL_FRAME(3)
 28370                                  .L_lambda_simple_end_016a:	; new closure is in rax
 28371 0001547B 50                      	push rax
 28372 0001547C 488B4520                	mov rax, PARAM(0)	; param run
 28373 00015480 8F00                    	pop qword [rax]
 28374 00015482 48B8-                   	mov rax, sob_void
 28374 00015484 [0000000000000000] 
 28375                                  
 28376 0001548C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28377 00015491 E89E2B0000              	call malloc
 28378 00015496 50                      	push rax
 28379 00015497 BF10000000              	mov rdi, 8 * 2	; new rib
 28380 0001549C E8932B0000              	call malloc
 28381 000154A1 50                      	push rax
 28382 000154A2 BF10000000              	mov rdi, 8 * 2	; extended env
 28383 000154A7 E8882B0000              	call malloc
 28384 000154AC 488B7D10                	mov rdi, ENV
 28385 000154B0 BE00000000              	mov rsi, 0
 28386 000154B5 BA01000000              	mov rdx, 1
 28387                                  .L_lambda_simple_env_loop_016c:	; ext_env[i + 1] <-- env[i]
 28388 000154BA 4883FE01                	cmp rsi, 1
 28389 000154BE 7410                    	je .L_lambda_simple_env_end_016c
 28390 000154C0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28391 000154C4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28392 000154C8 48FFC6                  	inc rsi
 28393 000154CB 48FFC2                  	inc rdx
 28394 000154CE EBEA                    	jmp .L_lambda_simple_env_loop_016c
 28395                                  .L_lambda_simple_env_end_016c:
 28396 000154D0 5B                      	pop rbx
 28397 000154D1 BE00000000              	mov rsi, 0
 28398                                  .L_lambda_simple_params_loop_016c:	; copy params
 28399 000154D6 4883FE02                	cmp rsi, 2
 28400 000154DA 740E                    	je .L_lambda_simple_params_end_016c
 28401 000154DC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28402 000154E1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28403 000154E5 48FFC6                  	inc rsi
 28404 000154E8 EBEC                    	jmp .L_lambda_simple_params_loop_016c
 28405                                  .L_lambda_simple_params_end_016c:
 28406 000154EA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28407 000154ED 4889C3                  	mov rbx, rax
 28408 000154F0 58                      	pop rax
 28409 000154F1 C60004                  	mov byte [rax], T_closure
 28410 000154F4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28411 000154F8 48C74009[05550100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_016c
 28412 00015500 E98B010000              	jmp .L_lambda_simple_end_016c
 28413                                  .L_lambda_simple_code_016c:	; lambda-simple body
 28414 00015505 48837C241005            	cmp qword [rsp + 8 * 2], 5
 28415 0001550B 740B                    	je .L_lambda_simple_arity_check_ok_016c
 28416 0001550D FF742410                	push qword [rsp + 8 * 2]
 28417 00015511 6A05                    	push 5
 28418 00015513 E9D52A0000              	jmp L_error_incorrect_arity_simple
 28419                                  .L_lambda_simple_arity_check_ok_016c:
 28420 00015518 C8000000                	enter 0, 0
 28421                                  	; preparing a non-tail-call
 28422 0001551C 488B4540                	mov rax, PARAM(4)	; param limit
 28423 00015520 50                      	push rax
 28424 00015521 488B4538                	mov rax, PARAM(3)	; param j
 28425 00015525 50                      	push rax
 28426 00015526 6A02                    	push 2	; arg count
 28427 00015528 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 28428 00015530 803805                  	cmp byte [rax], T_undefined
 28429 00015533 0F84CE290000            	je L_error_fvar_undefined
 28430 00015539 803804                  	cmp byte [rax], T_closure
 28431 0001553C 0F85492A0000            	jne L_error_non_closure
 28432 00015542 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28433 00015545 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28434 00015548 483D[02000000]          	cmp rax, sob_boolean_false
 28435 0001554E 0F8434010000            	je .L_if_else_0122
 28436                                  	; preparing a non-tail-call
 28437                                  	; preparing a non-tail-call
 28438 00015554 488B4538                	mov rax, PARAM(3)	; param j
 28439 00015558 50                      	push rax
 28440 00015559 488B4530                	mov rax, PARAM(2)	; param vec
 28441 0001555D 50                      	push rax
 28442 0001555E 6A02                    	push 2	; arg count
 28443 00015560 488B0425[67170000]      	mov rax, qword [free_var_144]	; free var vector-ref
 28444 00015568 803805                  	cmp byte [rax], T_undefined
 28445 0001556B 0F8496290000            	je L_error_fvar_undefined
 28446 00015571 803804                  	cmp byte [rax], T_closure
 28447 00015574 0F85112A0000            	jne L_error_non_closure
 28448 0001557A FF7001                  	push SOB_CLOSURE_ENV(rax)
 28449 0001557D FF5009                  	call SOB_CLOSURE_CODE(rax)
 28450 00015580 50                      	push rax
 28451 00015581 488B4528                	mov rax, PARAM(1)	; param i
 28452 00015585 50                      	push rax
 28453 00015586 488B4520                	mov rax, PARAM(0)	; param target
 28454 0001558A 50                      	push rax
 28455 0001558B 6A03                    	push 3	; arg count
 28456 0001558D 488B0425[9A170000]      	mov rax, qword [free_var_147]	; free var vector-set!
 28457 00015595 803805                  	cmp byte [rax], T_undefined
 28458 00015598 0F8469290000            	je L_error_fvar_undefined
 28459 0001559E 803804                  	cmp byte [rax], T_closure
 28460 000155A1 0F85E4290000            	jne L_error_non_closure
 28461 000155A7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28462 000155AA FF5009                  	call SOB_CLOSURE_CODE(rax)
 28463                                  
 28464                                  	; preparing a tail-call
 28465 000155AD 488B4540                	mov rax, PARAM(4)	; param limit
 28466 000155B1 50                      	push rax
 28467                                  	; preparing a non-tail-call
 28468 000155B2 48B8-                   	mov rax, L_constants + 2270
 28468 000155B4 [DE08000000000000] 
 28469 000155BC 50                      	push rax
 28470 000155BD 488B4538                	mov rax, PARAM(3)	; param j
 28471 000155C1 50                      	push rax
 28472 000155C2 6A02                    	push 2	; arg count
 28473 000155C4 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 28474 000155CC 803805                  	cmp byte [rax], T_undefined
 28475 000155CF 0F8432290000            	je L_error_fvar_undefined
 28476 000155D5 803804                  	cmp byte [rax], T_closure
 28477 000155D8 0F85AD290000            	jne L_error_non_closure
 28478 000155DE FF7001                  	push SOB_CLOSURE_ENV(rax)
 28479 000155E1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28480 000155E4 50                      	push rax
 28481 000155E5 488B4530                	mov rax, PARAM(2)	; param vec
 28482 000155E9 50                      	push rax
 28483                                  	; preparing a non-tail-call
 28484 000155EA 48B8-                   	mov rax, L_constants + 2270
 28484 000155EC [DE08000000000000] 
 28485 000155F4 50                      	push rax
 28486 000155F5 488B4528                	mov rax, PARAM(1)	; param i
 28487 000155F9 50                      	push rax
 28488 000155FA 6A02                    	push 2	; arg count
 28489 000155FC 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 28490 00015604 803805                  	cmp byte [rax], T_undefined
 28491 00015607 0F84FA280000            	je L_error_fvar_undefined
 28492 0001560D 803804                  	cmp byte [rax], T_closure
 28493 00015610 0F8575290000            	jne L_error_non_closure
 28494 00015616 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28495 00015619 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28496 0001561C 50                      	push rax
 28497 0001561D 488B4520                	mov rax, PARAM(0)	; param target
 28498 00015621 50                      	push rax
 28499 00015622 6A05                    	push 5	; arg count
 28500 00015624 488B4510                	mov rax, ENV
 28501 00015628 488B00                  	mov rax, qword [rax + 8 * 0]
 28502 0001562B 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 28503 0001562F 488B00                  	mov rax, qword [rax]
 28504 00015632 803804                  	cmp byte [rax], T_closure
 28505 00015635 0F8550290000            	jne L_error_non_closure
 28506 0001563B FF7001                  	push SOB_CLOSURE_ENV(rax)
 28507 0001563E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 28508 00015641 FF7500                  	push qword[rbp]
 28509 00015644 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 28510 00015647 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 28511 0001564B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 28512 0001564F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 28513 00015653 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 28514 00015656 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 28515 00015659 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 28516 0001565E 4983C103                	add r9, 3 	 ;for getting to the params
 28517 00015662 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 28518 00015666 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 28519                                  .L_tc_recycle_frame_loop_020e:
 28520 00015669 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 28521 0001566C 7410                    	je .L_tc_recycle_frame_done_020e
 28522 0001566E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 28523 00015671 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 28524 00015674 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 28525 00015678 4983E808                	sub r8, 8	 ;move the top of the stack one down
 28526 0001567C EBEB                    	jmp .L_tc_recycle_frame_loop_020e
 28527                                  .L_tc_recycle_frame_done_020e:
 28528 0001567E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 28529 0001567F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 28530 00015683 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28531 00015686 EB04                    	jmp .L_if_end_0122
 28532                                  .L_if_else_0122:
 28533 00015688 488B4528                	mov rax, PARAM(1)	; param i
 28534                                  .L_if_end_0122:
 28535 0001568C C9                      	leave
 28536 0001568D C23800                  	ret AND_KILL_FRAME(5)
 28537                                  .L_lambda_simple_end_016c:	; new closure is in rax
 28538 00015690 50                      	push rax
 28539 00015691 488B4528                	mov rax, PARAM(1)	; param add
 28540 00015695 8F00                    	pop qword [rax]
 28541 00015697 48B8-                   	mov rax, sob_void
 28541 00015699 [0000000000000000] 
 28542                                  
 28543 000156A1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28544 000156A6 E889290000              	call malloc
 28545 000156AB 50                      	push rax
 28546 000156AC BF10000000              	mov rdi, 8 * 2	; new rib
 28547 000156B1 E87E290000              	call malloc
 28548 000156B6 50                      	push rax
 28549 000156B7 BF10000000              	mov rdi, 8 * 2	; extended env
 28550 000156BC E873290000              	call malloc
 28551 000156C1 488B7D10                	mov rdi, ENV
 28552 000156C5 BE00000000              	mov rsi, 0
 28553 000156CA BA01000000              	mov rdx, 1
 28554                                  .L_lambda_opt_env_loop_0030:	; ext_env[i + 1] <-- env[i]
 28555 000156CF 4883FE01                	cmp rsi, 1
 28556 000156D3 7410                    	je .L_lambda_opt_env_end_0030
 28557 000156D5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28558 000156D9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28559 000156DD 48FFC6                  	inc rsi
 28560 000156E0 48FFC2                  	inc rdx
 28561 000156E3 EBEA                    	jmp .L_lambda_opt_env_loop_0030
 28562                                  .L_lambda_opt_env_end_0030:
 28563 000156E5 5B                      	pop rbx
 28564 000156E6 BE00000000              	mov rsi, 0
 28565                                  .L_lambda_opt_params_loop_0030:	; copy params
 28566 000156EB 4883FE02                	cmp rsi, 2
 28567 000156EF 740E                    	je .L_lambda_opt_params_end_0030
 28568 000156F1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28569 000156F6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28570 000156FA 48FFC6                  	inc rsi
 28571 000156FD EBEC                    	jmp .L_lambda_opt_params_loop_0030
 28572                                  .L_lambda_opt_params_end_0030:
 28573 000156FF 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
 28574 00015702 4889C3                  	mov rbx, rax
 28575 00015705 58                      	pop rax
 28576 00015706 C60004                  	mov byte [rax], T_closure
 28577 00015709 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28578 0001570D 48C74009[1A570100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0030
 28579 00015715 E91F030000              	jmp .L_lambda_opt_end_0030
 28580                                  .L_lambda_opt_code_0030:	; lambda-opt body
 28581 0001571A 48837C241000            	cmp qword [rsp + 8 * 2], 0
 28582 00015720 7411                    	je .L_lambda_opt_arity_check_exact_0030
 28583 00015722 0F8F4D010000            	jg .L_lambda_opt_arity_check_more_0030
 28584 00015728 FF742410                	push qword [rsp + 8 * 2]
 28585 0001572C 6A00                    	push 0
 28586 0001572E E9CE280000              	jmp L_error_incorrect_arity_opt
 28587                                  .L_lambda_opt_arity_check_exact_0030:
 28588 00015733 4883EC08                	sub rsp, 8
 28589 00015737 488B442408              	mov rax, qword[rsp + 8 *1]
 28590 0001573C 48890424                	mov qword[rsp], rax  
 28591 00015740 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 28592 00015745 4889442408              	mov qword[rsp + 8 * 1], rax
 28593 0001574A B801000000              	mov rax, 1
 28594 0001574F 4889442410              	mov qword[rsp + 8 *2], rax
 28595 00015754 48B8-                   	mov rax, sob_nil
 28595 00015756 [0100000000000000] 
 28596 0001575E 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 28597 00015763 C8000000                	enter 0, 0
 28598                                  	; preparing a tail-call
 28599 00015767 488B4520                	mov rax, PARAM(0)	; param vectors
 28600 0001576B 50                      	push rax
 28601 0001576C 48B8-                   	mov rax, L_constants + 2135
 28601 0001576E [5708000000000000] 
 28602 00015776 50                      	push rax
 28603                                  	; preparing a non-tail-call
 28604                                  	; preparing a non-tail-call
 28605                                  	; preparing a non-tail-call
 28606 00015777 488B4520                	mov rax, PARAM(0)	; param vectors
 28607 0001577B 50                      	push rax
 28608 0001577C 488B0425[56170000]      	mov rax, qword [free_var_143]	; free var vector-length
 28609 00015784 803805                  	cmp byte [rax], T_undefined
 28610 00015787 0F847A270000            	je L_error_fvar_undefined
 28611 0001578D 50                      	push rax
 28612 0001578E 6A02                    	push 2	; arg count
 28613 00015790 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
 28614 00015798 803805                  	cmp byte [rax], T_undefined
 28615 0001579B 0F8466270000            	je L_error_fvar_undefined
 28616 000157A1 803804                  	cmp byte [rax], T_closure
 28617 000157A4 0F85E1270000            	jne L_error_non_closure
 28618 000157AA FF7001                  	push SOB_CLOSURE_ENV(rax)
 28619 000157AD FF5009                  	call SOB_CLOSURE_CODE(rax)
 28620 000157B0 50                      	push rax
 28621 000157B1 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 28622 000157B9 803805                  	cmp byte [rax], T_undefined
 28623 000157BC 0F8445270000            	je L_error_fvar_undefined
 28624 000157C2 50                      	push rax
 28625 000157C3 6A02                    	push 2	; arg count
 28626 000157C5 488B0425[08100000]      	mov rax, qword [free_var_33]	; free var apply
 28627 000157CD 803805                  	cmp byte [rax], T_undefined
 28628 000157D0 0F8431270000            	je L_error_fvar_undefined
 28629 000157D6 803804                  	cmp byte [rax], T_closure
 28630 000157D9 0F85AC270000            	jne L_error_non_closure
 28631 000157DF FF7001                  	push SOB_CLOSURE_ENV(rax)
 28632 000157E2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28633 000157E5 50                      	push rax
 28634 000157E6 6A01                    	push 1	; arg count
 28635 000157E8 488B0425[8C140000]      	mov rax, qword [free_var_101]	; free var make-vector
 28636 000157F0 803805                  	cmp byte [rax], T_undefined
 28637 000157F3 0F840E270000            	je L_error_fvar_undefined
 28638 000157F9 803804                  	cmp byte [rax], T_closure
 28639 000157FC 0F8589270000            	jne L_error_non_closure
 28640 00015802 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28641 00015805 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28642 00015808 50                      	push rax
 28643 00015809 6A03                    	push 3	; arg count
 28644 0001580B 488B4510                	mov rax, ENV
 28645 0001580F 488B00                  	mov rax, qword [rax + 8 * 0]
 28646 00015812 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 28647 00015815 488B00                  	mov rax, qword [rax]
 28648 00015818 803804                  	cmp byte [rax], T_closure
 28649 0001581B 0F856A270000            	jne L_error_non_closure
 28650 00015821 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28651 00015824 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 28652 00015827 FF7500                  	push qword[rbp]
 28653 0001582A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 28654 0001582D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 28655 00015831 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 28656 00015835 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 28657 00015839 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 28658 0001583C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 28659 0001583F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 28660 00015844 4983C103                	add r9, 3 	 ;for getting to the params
 28661 00015848 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 28662 0001584C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 28663                                  .L_tc_recycle_frame_loop_0210:
 28664 0001584F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 28665 00015852 7410                    	je .L_tc_recycle_frame_done_0210
 28666 00015854 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 28667 00015857 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 28668 0001585A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 28669 0001585E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 28670 00015862 EBEB                    	jmp .L_tc_recycle_frame_loop_0210
 28671                                  .L_tc_recycle_frame_done_0210:
 28672 00015864 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 28673 00015865 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 28674 00015869 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28675 0001586C C9                      	leave
 28676 0001586D C21800                  	ret AND_KILL_FRAME(1)
 28677 00015870 E9C4010000              	jmp .L_lambda_opt_end_0030	; new closure is in rax
 28678                                  .L_lambda_opt_arity_check_more_0030:
 28679 00015875 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 28680 0001587A 49B9-                   	mov r9, sob_nil
 28680 0001587C [0100000000000000] 
 28681 00015884 4889E3                  	mov rbx, rsp 
 28682 00015887 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 28683 0001588B 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 28684 0001588E 49C1E003                	shl r8, 3
 28685 00015892 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 28686 00015895 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 28687                                  .L_lambda_opt_stack_shrink_loop_0030:
 28688 0001589A 4983F800                	cmp r8, 0
 28689 0001589E 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0030
 28690 000158A0 BF11000000              	mov rdi, 1+8+8 ;for pair
 28691 000158A5 E88A270000              	call malloc;to create the pair in the stack
 28692 000158AA C60021                  	mov byte [rax], T_pair ; to make it a pair
 28693 000158AD 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
 28694 000158B0 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 28695 000158B4 4C894809                 	mov qword[rax+1+8],r9
 28696 000158B8 4989C1                  	mov r9, rax ;for the recursion 
 28697 000158BB 49FFC8                  	dec r8 ;we finished copy another opt param to the list
 28698 000158BE 4883EB08                	sub rbx, 8 ;to get the next param to copy
 28699 000158C2 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0030
 28700                                  .L_lambda_opt_stack_shrink_loop_exit_0030:
 28701 000158C4 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
 28702 000158C9 4883E901                	sub rcx, 1
 28703 000158CD 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
 28704 000158D1 4801CC                  	add rsp, rcx ;shrinking the stack
 28705 000158D4 4889E0                  	mov rax, rsp
 28706 000158D7 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
 28707 000158DA 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
 28708 000158DE 49FFC8                  	dec r8 ;we start with param 0, not 1 
 28709 000158E1 4883C018                	add rax, 3 * 8;now rax is param 0
 28710 000158E5 49C1E003                	shl r8, 3;convert to byte
 28711 000158E9 4C01C0                  	add rax, r8;now rax is the top of the stack
 28712 000158EC 4C8908                  	mov qword[rax], r9;puting the list at the top
 28713 000158EF 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
 28714 000158F3 4889E3                  	mov rbx, rsp 
 28715 000158F6 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
 28716 000158F9 41BA00000000            	mov r10, 0;r10 is the not opt params length
 28717 000158FF 49FFCA                  	dec r10 
 28718 00015902 49C1E203                	shl r10, 3;to get bytes
 28719 00015906 4883C318                	add rbx, 3*8;rbx is the first param
 28720 0001590A 4C01D3                  	add rbx, r10; rbx is where the address to copy to
 28721 0001590D 4889E0                  	mov rax, rsp
 28722 00015910 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 28723 00015913 48C744241001000000      	mov qword [rsp+2*8], 1
 28724 0001591C 488B5808                	mov rbx, qword[rax + 8 *1]
 28725 00015920 48895C2408              	mov qword [rsp + 1*8] ,rbx
 28726 00015925 488B18                  	mov rbx, qword[rax]
 28727 00015928 48891C24                	mov qword [rsp], rbx
 28728 0001592C C8000000                	enter 0, 0
 28729                                  	; preparing a tail-call
 28730 00015930 488B4520                	mov rax, PARAM(0)	; param vectors
 28731 00015934 50                      	push rax
 28732 00015935 48B8-                   	mov rax, L_constants + 2135
 28732 00015937 [5708000000000000] 
 28733 0001593F 50                      	push rax
 28734                                  	; preparing a non-tail-call
 28735                                  	; preparing a non-tail-call
 28736                                  	; preparing a non-tail-call
 28737 00015940 488B4520                	mov rax, PARAM(0)	; param vectors
 28738 00015944 50                      	push rax
 28739 00015945 488B0425[56170000]      	mov rax, qword [free_var_143]	; free var vector-length
 28740 0001594D 803805                  	cmp byte [rax], T_undefined
 28741 00015950 0F84B1250000            	je L_error_fvar_undefined
 28742 00015956 50                      	push rax
 28743 00015957 6A02                    	push 2	; arg count
 28744 00015959 488B0425[AE140000]      	mov rax, qword [free_var_103]	; free var map
 28745 00015961 803805                  	cmp byte [rax], T_undefined
 28746 00015964 0F849D250000            	je L_error_fvar_undefined
 28747 0001596A 803804                  	cmp byte [rax], T_closure
 28748 0001596D 0F8518260000            	jne L_error_non_closure
 28749 00015973 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28750 00015976 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28751 00015979 50                      	push rax
 28752 0001597A 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 28753 00015982 803805                  	cmp byte [rax], T_undefined
 28754 00015985 0F847C250000            	je L_error_fvar_undefined
 28755 0001598B 50                      	push rax
 28756 0001598C 6A02                    	push 2	; arg count
 28757 0001598E 488B0425[08100000]      	mov rax, qword [free_var_33]	; free var apply
 28758 00015996 803805                  	cmp byte [rax], T_undefined
 28759 00015999 0F8468250000            	je L_error_fvar_undefined
 28760 0001599F 803804                  	cmp byte [rax], T_closure
 28761 000159A2 0F85E3250000            	jne L_error_non_closure
 28762 000159A8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28763 000159AB FF5009                  	call SOB_CLOSURE_CODE(rax)
 28764 000159AE 50                      	push rax
 28765 000159AF 6A01                    	push 1	; arg count
 28766 000159B1 488B0425[8C140000]      	mov rax, qword [free_var_101]	; free var make-vector
 28767 000159B9 803805                  	cmp byte [rax], T_undefined
 28768 000159BC 0F8445250000            	je L_error_fvar_undefined
 28769 000159C2 803804                  	cmp byte [rax], T_closure
 28770 000159C5 0F85C0250000            	jne L_error_non_closure
 28771 000159CB FF7001                  	push SOB_CLOSURE_ENV(rax)
 28772 000159CE FF5009                  	call SOB_CLOSURE_CODE(rax)
 28773 000159D1 50                      	push rax
 28774 000159D2 6A03                    	push 3	; arg count
 28775 000159D4 488B4510                	mov rax, ENV
 28776 000159D8 488B00                  	mov rax, qword [rax + 8 * 0]
 28777 000159DB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 28778 000159DE 488B00                  	mov rax, qword [rax]
 28779 000159E1 803804                  	cmp byte [rax], T_closure
 28780 000159E4 0F85A1250000            	jne L_error_non_closure
 28781 000159EA FF7001                  	push SOB_CLOSURE_ENV(rax)
 28782 000159ED FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 28783 000159F0 FF7500                  	push qword[rbp]
 28784 000159F3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 28785 000159F6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 28786 000159FA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 28787 000159FE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 28788 00015A02 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 28789 00015A05 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 28790 00015A08 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 28791 00015A0D 4983C103                	add r9, 3 	 ;for getting to the params
 28792 00015A11 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 28793 00015A15 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 28794                                  .L_tc_recycle_frame_loop_020f:
 28795 00015A18 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 28796 00015A1B 7410                    	je .L_tc_recycle_frame_done_020f
 28797 00015A1D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 28798 00015A20 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 28799 00015A23 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 28800 00015A27 4983E808                	sub r8, 8	 ;move the top of the stack one down
 28801 00015A2B EBEB                    	jmp .L_tc_recycle_frame_loop_020f
 28802                                  .L_tc_recycle_frame_done_020f:
 28803 00015A2D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 28804 00015A2E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 28805 00015A32 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28806 00015A35 C9                      	leave
 28807 00015A36 C21800                  	ret AND_KILL_FRAME(1)
 28808                                  .L_lambda_opt_end_0030:	; new closure is in rax
 28809 00015A39 C9                      	leave
 28810 00015A3A C22000                  	ret AND_KILL_FRAME(2)
 28811                                  .L_lambda_simple_end_0169:	; new closure is in rax
 28812 00015A3D 803804                  	cmp byte [rax], T_closure
 28813 00015A40 0F8545250000            	jne L_error_non_closure
 28814 00015A46 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28815 00015A49 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28816 00015A4C 48890425[45170000]      	mov qword [free_var_142], rax
 28817 00015A54 48B8-                   	mov rax, sob_void
 28817 00015A56 [0000000000000000] 
 28818                                  
 28819 00015A5E 4889C7                  	mov rdi, rax
 28820 00015A61 E823280000              	call print_sexpr_if_not_void
 28821 00015A66 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28822 00015A6B E8C4250000              	call malloc
 28823 00015A70 50                      	push rax
 28824 00015A71 BF00000000              	mov rdi, 8 * 0	; new rib
 28825 00015A76 E8B9250000              	call malloc
 28826 00015A7B 50                      	push rax
 28827 00015A7C BF08000000              	mov rdi, 8 * 1	; extended env
 28828 00015A81 E8AE250000              	call malloc
 28829 00015A86 488B7D10                	mov rdi, ENV
 28830 00015A8A BE00000000              	mov rsi, 0
 28831 00015A8F BA01000000              	mov rdx, 1
 28832                                  .L_lambda_simple_env_loop_016d:	; ext_env[i + 1] <-- env[i]
 28833 00015A94 4883FE00                	cmp rsi, 0
 28834 00015A98 7410                    	je .L_lambda_simple_env_end_016d
 28835 00015A9A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28836 00015A9E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28837 00015AA2 48FFC6                  	inc rsi
 28838 00015AA5 48FFC2                  	inc rdx
 28839 00015AA8 EBEA                    	jmp .L_lambda_simple_env_loop_016d
 28840                                  .L_lambda_simple_env_end_016d:
 28841 00015AAA 5B                      	pop rbx
 28842 00015AAB BE00000000              	mov rsi, 0
 28843                                  .L_lambda_simple_params_loop_016d:	; copy params
 28844 00015AB0 4883FE00                	cmp rsi, 0
 28845 00015AB4 740E                    	je .L_lambda_simple_params_end_016d
 28846 00015AB6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28847 00015ABB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28848 00015ABF 48FFC6                  	inc rsi
 28849 00015AC2 EBEC                    	jmp .L_lambda_simple_params_loop_016d
 28850                                  .L_lambda_simple_params_end_016d:
 28851 00015AC4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28852 00015AC7 4889C3                  	mov rbx, rax
 28853 00015ACA 58                      	pop rax
 28854 00015ACB C60004                  	mov byte [rax], T_closure
 28855 00015ACE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28856 00015AD2 48C74009[DF5A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_016d
 28857 00015ADA E9CD000000              	jmp .L_lambda_simple_end_016d
 28858                                  .L_lambda_simple_code_016d:	; lambda-simple body
 28859 00015ADF 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28860 00015AE5 740B                    	je .L_lambda_simple_arity_check_ok_016d
 28861 00015AE7 FF742410                	push qword [rsp + 8 * 2]
 28862 00015AEB 6A01                    	push 1
 28863 00015AED E9FB240000              	jmp L_error_incorrect_arity_simple
 28864                                  .L_lambda_simple_arity_check_ok_016d:
 28865 00015AF2 C8000000                	enter 0, 0
 28866                                  	; preparing a tail-call
 28867                                  	; preparing a non-tail-call
 28868                                  	; preparing a non-tail-call
 28869 00015AF6 488B4520                	mov rax, PARAM(0)	; param str
 28870 00015AFA 50                      	push rax
 28871 00015AFB 6A01                    	push 1	; arg count
 28872 00015AFD 488B0425[BE150000]      	mov rax, qword [free_var_119]	; free var string->list
 28873 00015B05 803805                  	cmp byte [rax], T_undefined
 28874 00015B08 0F84F9230000            	je L_error_fvar_undefined
 28875 00015B0E 803804                  	cmp byte [rax], T_closure
 28876 00015B11 0F8574240000            	jne L_error_non_closure
 28877 00015B17 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28878 00015B1A FF5009                  	call SOB_CLOSURE_CODE(rax)
 28879 00015B1D 50                      	push rax
 28880 00015B1E 6A01                    	push 1	; arg count
 28881 00015B20 488B0425[AD150000]      	mov rax, qword [free_var_118]	; free var reverse
 28882 00015B28 803805                  	cmp byte [rax], T_undefined
 28883 00015B2B 0F84D6230000            	je L_error_fvar_undefined
 28884 00015B31 803804                  	cmp byte [rax], T_closure
 28885 00015B34 0F8551240000            	jne L_error_non_closure
 28886 00015B3A FF7001                  	push SOB_CLOSURE_ENV(rax)
 28887 00015B3D FF5009                  	call SOB_CLOSURE_CODE(rax)
 28888 00015B40 50                      	push rax
 28889 00015B41 6A01                    	push 1	; arg count
 28890 00015B43 488B0425[15140000]      	mov rax, qword [free_var_94]	; free var list->string
 28891 00015B4B 803805                  	cmp byte [rax], T_undefined
 28892 00015B4E 0F84B3230000            	je L_error_fvar_undefined
 28893 00015B54 803804                  	cmp byte [rax], T_closure
 28894 00015B57 0F852E240000            	jne L_error_non_closure
 28895 00015B5D FF7001                  	push SOB_CLOSURE_ENV(rax)
 28896 00015B60 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 28897 00015B63 FF7500                  	push qword[rbp]
 28898 00015B66 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 28899 00015B69 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 28900 00015B6D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 28901 00015B71 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 28902 00015B75 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 28903 00015B78 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 28904 00015B7B 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 28905 00015B80 4983C103                	add r9, 3 	 ;for getting to the params
 28906 00015B84 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 28907 00015B88 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 28908                                  .L_tc_recycle_frame_loop_0211:
 28909 00015B8B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 28910 00015B8E 7410                    	je .L_tc_recycle_frame_done_0211
 28911 00015B90 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 28912 00015B93 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 28913 00015B96 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 28914 00015B9A 4983E808                	sub r8, 8	 ;move the top of the stack one down
 28915 00015B9E EBEB                    	jmp .L_tc_recycle_frame_loop_0211
 28916                                  .L_tc_recycle_frame_done_0211:
 28917 00015BA0 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 28918 00015BA1 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 28919 00015BA5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28920 00015BA8 C9                      	leave
 28921 00015BA9 C21800                  	ret AND_KILL_FRAME(1)
 28922                                  .L_lambda_simple_end_016d:	; new closure is in rax
 28923 00015BAC 48890425[68160000]      	mov qword [free_var_129], rax
 28924 00015BB4 48B8-                   	mov rax, sob_void
 28924 00015BB6 [0000000000000000] 
 28925                                  
 28926 00015BBE 4889C7                  	mov rdi, rax
 28927 00015BC1 E8C3260000              	call print_sexpr_if_not_void
 28928 00015BC6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28929 00015BCB E864240000              	call malloc
 28930 00015BD0 50                      	push rax
 28931 00015BD1 BF00000000              	mov rdi, 8 * 0	; new rib
 28932 00015BD6 E859240000              	call malloc
 28933 00015BDB 50                      	push rax
 28934 00015BDC BF08000000              	mov rdi, 8 * 1	; extended env
 28935 00015BE1 E84E240000              	call malloc
 28936 00015BE6 488B7D10                	mov rdi, ENV
 28937 00015BEA BE00000000              	mov rsi, 0
 28938 00015BEF BA01000000              	mov rdx, 1
 28939                                  .L_lambda_simple_env_loop_016e:	; ext_env[i + 1] <-- env[i]
 28940 00015BF4 4883FE00                	cmp rsi, 0
 28941 00015BF8 7410                    	je .L_lambda_simple_env_end_016e
 28942 00015BFA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28943 00015BFE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28944 00015C02 48FFC6                  	inc rsi
 28945 00015C05 48FFC2                  	inc rdx
 28946 00015C08 EBEA                    	jmp .L_lambda_simple_env_loop_016e
 28947                                  .L_lambda_simple_env_end_016e:
 28948 00015C0A 5B                      	pop rbx
 28949 00015C0B BE00000000              	mov rsi, 0
 28950                                  .L_lambda_simple_params_loop_016e:	; copy params
 28951 00015C10 4883FE00                	cmp rsi, 0
 28952 00015C14 740E                    	je .L_lambda_simple_params_end_016e
 28953 00015C16 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28954 00015C1B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28955 00015C1F 48FFC6                  	inc rsi
 28956 00015C22 EBEC                    	jmp .L_lambda_simple_params_loop_016e
 28957                                  .L_lambda_simple_params_end_016e:
 28958 00015C24 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28959 00015C27 4889C3                  	mov rbx, rax
 28960 00015C2A 58                      	pop rax
 28961 00015C2B C60004                  	mov byte [rax], T_closure
 28962 00015C2E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28963 00015C32 48C74009[3F5C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_016e
 28964 00015C3A E9CD000000              	jmp .L_lambda_simple_end_016e
 28965                                  .L_lambda_simple_code_016e:	; lambda-simple body
 28966 00015C3F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28967 00015C45 740B                    	je .L_lambda_simple_arity_check_ok_016e
 28968 00015C47 FF742410                	push qword [rsp + 8 * 2]
 28969 00015C4B 6A01                    	push 1
 28970 00015C4D E99B230000              	jmp L_error_incorrect_arity_simple
 28971                                  .L_lambda_simple_arity_check_ok_016e:
 28972 00015C52 C8000000                	enter 0, 0
 28973                                  	; preparing a tail-call
 28974                                  	; preparing a non-tail-call
 28975                                  	; preparing a non-tail-call
 28976 00015C56 488B4520                	mov rax, PARAM(0)	; param vec
 28977 00015C5A 50                      	push rax
 28978 00015C5B 6A01                    	push 1	; arg count
 28979 00015C5D 488B0425[34170000]      	mov rax, qword [free_var_141]	; free var vector->list
 28980 00015C65 803805                  	cmp byte [rax], T_undefined
 28981 00015C68 0F8499220000            	je L_error_fvar_undefined
 28982 00015C6E 803804                  	cmp byte [rax], T_closure
 28983 00015C71 0F8514230000            	jne L_error_non_closure
 28984 00015C77 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28985 00015C7A FF5009                  	call SOB_CLOSURE_CODE(rax)
 28986 00015C7D 50                      	push rax
 28987 00015C7E 6A01                    	push 1	; arg count
 28988 00015C80 488B0425[AD150000]      	mov rax, qword [free_var_118]	; free var reverse
 28989 00015C88 803805                  	cmp byte [rax], T_undefined
 28990 00015C8B 0F8476220000            	je L_error_fvar_undefined
 28991 00015C91 803804                  	cmp byte [rax], T_closure
 28992 00015C94 0F85F1220000            	jne L_error_non_closure
 28993 00015C9A FF7001                  	push SOB_CLOSURE_ENV(rax)
 28994 00015C9D FF5009                  	call SOB_CLOSURE_CODE(rax)
 28995 00015CA0 50                      	push rax
 28996 00015CA1 6A01                    	push 1	; arg count
 28997 00015CA3 488B0425[26140000]      	mov rax, qword [free_var_95]	; free var list->vector
 28998 00015CAB 803805                  	cmp byte [rax], T_undefined
 28999 00015CAE 0F8453220000            	je L_error_fvar_undefined
 29000 00015CB4 803804                  	cmp byte [rax], T_closure
 29001 00015CB7 0F85CE220000            	jne L_error_non_closure
 29002 00015CBD FF7001                  	push SOB_CLOSURE_ENV(rax)
 29003 00015CC0 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 29004 00015CC3 FF7500                  	push qword[rbp]
 29005 00015CC6 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 29006 00015CC9 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 29007 00015CCD 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 29008 00015CD1 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 29009 00015CD5 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 29010 00015CD8 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 29011 00015CDB 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 29012 00015CE0 4983C103                	add r9, 3 	 ;for getting to the params
 29013 00015CE4 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 29014 00015CE8 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 29015                                  .L_tc_recycle_frame_loop_0212:
 29016 00015CEB 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 29017 00015CEE 7410                    	je .L_tc_recycle_frame_done_0212
 29018 00015CF0 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 29019 00015CF3 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 29020 00015CF6 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 29021 00015CFA 4983E808                	sub r8, 8	 ;move the top of the stack one down
 29022 00015CFE EBEB                    	jmp .L_tc_recycle_frame_loop_0212
 29023                                  .L_tc_recycle_frame_done_0212:
 29024 00015D00 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 29025 00015D01 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 29026 00015D05 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29027 00015D08 C9                      	leave
 29028 00015D09 C21800                  	ret AND_KILL_FRAME(1)
 29029                                  .L_lambda_simple_end_016e:	; new closure is in rax
 29030 00015D0C 48890425[78170000]      	mov qword [free_var_145], rax
 29031 00015D14 48B8-                   	mov rax, sob_void
 29031 00015D16 [0000000000000000] 
 29032                                  
 29033 00015D1E 4889C7                  	mov rdi, rax
 29034 00015D21 E863250000              	call print_sexpr_if_not_void
 29035                                  	; preparing a non-tail-call
 29036 00015D26 48B8-                   	mov rax, L_constants + 1993
 29036 00015D28 [C907000000000000] 
 29037 00015D30 50                      	push rax
 29038 00015D31 6A01                    	push 1	; arg count
 29039 00015D33 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29040 00015D38 E8F7220000              	call malloc
 29041 00015D3D 50                      	push rax
 29042 00015D3E BF00000000              	mov rdi, 8 * 0	; new rib
 29043 00015D43 E8EC220000              	call malloc
 29044 00015D48 50                      	push rax
 29045 00015D49 BF08000000              	mov rdi, 8 * 1	; extended env
 29046 00015D4E E8E1220000              	call malloc
 29047 00015D53 488B7D10                	mov rdi, ENV
 29048 00015D57 BE00000000              	mov rsi, 0
 29049 00015D5C BA01000000              	mov rdx, 1
 29050                                  .L_lambda_simple_env_loop_016f:	; ext_env[i + 1] <-- env[i]
 29051 00015D61 4883FE00                	cmp rsi, 0
 29052 00015D65 7410                    	je .L_lambda_simple_env_end_016f
 29053 00015D67 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29054 00015D6B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29055 00015D6F 48FFC6                  	inc rsi
 29056 00015D72 48FFC2                  	inc rdx
 29057 00015D75 EBEA                    	jmp .L_lambda_simple_env_loop_016f
 29058                                  .L_lambda_simple_env_end_016f:
 29059 00015D77 5B                      	pop rbx
 29060 00015D78 BE00000000              	mov rsi, 0
 29061                                  .L_lambda_simple_params_loop_016f:	; copy params
 29062 00015D7D 4883FE00                	cmp rsi, 0
 29063 00015D81 740E                    	je .L_lambda_simple_params_end_016f
 29064 00015D83 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29065 00015D88 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29066 00015D8C 48FFC6                  	inc rsi
 29067 00015D8F EBEC                    	jmp .L_lambda_simple_params_loop_016f
 29068                                  .L_lambda_simple_params_end_016f:
 29069 00015D91 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29070 00015D94 4889C3                  	mov rbx, rax
 29071 00015D97 58                      	pop rax
 29072 00015D98 C60004                  	mov byte [rax], T_closure
 29073 00015D9B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29074 00015D9F 48C74009[AC5D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_016f
 29075 00015DA7 E959060000              	jmp .L_lambda_simple_end_016f
 29076                                  .L_lambda_simple_code_016f:	; lambda-simple body
 29077 00015DAC 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29078 00015DB2 740B                    	je .L_lambda_simple_arity_check_ok_016f
 29079 00015DB4 FF742410                	push qword [rsp + 8 * 2]
 29080 00015DB8 6A01                    	push 1
 29081 00015DBA E92E220000              	jmp L_error_incorrect_arity_simple
 29082                                  .L_lambda_simple_arity_check_ok_016f:
 29083 00015DBF C8000000                	enter 0, 0
 29084 00015DC3 BF08000000              	mov rdi, 8*1
 29085 00015DC8 E867220000              	call malloc
 29086 00015DCD 488B5D20                	mov rbx, PARAM(0)
 29087 00015DD1 488918                  	mov qword[rax], rbx
 29088 00015DD4 48894520                	mov PARAM(0), rax
 29089 00015DD8 48B8-                   	mov rax, sob_void
 29089 00015DDA [0000000000000000] 
 29090                                  
 29091 00015DE2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29092 00015DE7 E848220000              	call malloc
 29093 00015DEC 50                      	push rax
 29094 00015DED BF08000000              	mov rdi, 8 * 1	; new rib
 29095 00015DF2 E83D220000              	call malloc
 29096 00015DF7 50                      	push rax
 29097 00015DF8 BF10000000              	mov rdi, 8 * 2	; extended env
 29098 00015DFD E832220000              	call malloc
 29099 00015E02 488B7D10                	mov rdi, ENV
 29100 00015E06 BE00000000              	mov rsi, 0
 29101 00015E0B BA01000000              	mov rdx, 1
 29102                                  .L_lambda_simple_env_loop_0170:	; ext_env[i + 1] <-- env[i]
 29103 00015E10 4883FE01                	cmp rsi, 1
 29104 00015E14 7410                    	je .L_lambda_simple_env_end_0170
 29105 00015E16 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29106 00015E1A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29107 00015E1E 48FFC6                  	inc rsi
 29108 00015E21 48FFC2                  	inc rdx
 29109 00015E24 EBEA                    	jmp .L_lambda_simple_env_loop_0170
 29110                                  .L_lambda_simple_env_end_0170:
 29111 00015E26 5B                      	pop rbx
 29112 00015E27 BE00000000              	mov rsi, 0
 29113                                  .L_lambda_simple_params_loop_0170:	; copy params
 29114 00015E2C 4883FE01                	cmp rsi, 1
 29115 00015E30 740E                    	je .L_lambda_simple_params_end_0170
 29116 00015E32 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29117 00015E37 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29118 00015E3B 48FFC6                  	inc rsi
 29119 00015E3E EBEC                    	jmp .L_lambda_simple_params_loop_0170
 29120                                  .L_lambda_simple_params_end_0170:
 29121 00015E40 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29122 00015E43 4889C3                  	mov rbx, rax
 29123 00015E46 58                      	pop rax
 29124 00015E47 C60004                  	mov byte [rax], T_closure
 29125 00015E4A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29126 00015E4E 48C74009[5B5E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0170
 29127 00015E56 E904030000              	jmp .L_lambda_simple_end_0170
 29128                                  .L_lambda_simple_code_0170:	; lambda-simple body
 29129 00015E5B 48837C241003            	cmp qword [rsp + 8 * 2], 3
 29130 00015E61 740B                    	je .L_lambda_simple_arity_check_ok_0170
 29131 00015E63 FF742410                	push qword [rsp + 8 * 2]
 29132 00015E67 6A03                    	push 3
 29133 00015E69 E97F210000              	jmp L_error_incorrect_arity_simple
 29134                                  .L_lambda_simple_arity_check_ok_0170:
 29135 00015E6E C8000000                	enter 0, 0
 29136                                  	; preparing a non-tail-call
 29137 00015E72 488B4530                	mov rax, PARAM(2)	; param j
 29138 00015E76 50                      	push rax
 29139 00015E77 488B4528                	mov rax, PARAM(1)	; param i
 29140 00015E7B 50                      	push rax
 29141 00015E7C 6A02                    	push 2	; arg count
 29142 00015E7E 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 29143 00015E86 803805                  	cmp byte [rax], T_undefined
 29144 00015E89 0F8478200000            	je L_error_fvar_undefined
 29145 00015E8F 803804                  	cmp byte [rax], T_closure
 29146 00015E92 0F85F3200000            	jne L_error_non_closure
 29147 00015E98 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29148 00015E9B FF5009                  	call SOB_CLOSURE_CODE(rax)
 29149 00015E9E 483D[02000000]          	cmp rax, sob_boolean_false
 29150 00015EA4 0F84AD020000            	je .L_if_else_0123
 29151                                  	; preparing a tail-call
 29152                                  	; preparing a non-tail-call
 29153 00015EAA 488B4528                	mov rax, PARAM(1)	; param i
 29154 00015EAE 50                      	push rax
 29155 00015EAF 488B4520                	mov rax, PARAM(0)	; param str
 29156 00015EB3 50                      	push rax
 29157 00015EB4 6A02                    	push 2	; arg count
 29158 00015EB6 488B0425[57160000]      	mov rax, qword [free_var_128]	; free var string-ref
 29159 00015EBE 803805                  	cmp byte [rax], T_undefined
 29160 00015EC1 0F8440200000            	je L_error_fvar_undefined
 29161 00015EC7 803804                  	cmp byte [rax], T_closure
 29162 00015ECA 0F85BB200000            	jne L_error_non_closure
 29163 00015ED0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29164 00015ED3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29165 00015ED6 50                      	push rax
 29166 00015ED7 6A01                    	push 1	; arg count
 29167 00015ED9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29168 00015EDE E851210000              	call malloc
 29169 00015EE3 50                      	push rax
 29170 00015EE4 BF18000000              	mov rdi, 8 * 3	; new rib
 29171 00015EE9 E846210000              	call malloc
 29172 00015EEE 50                      	push rax
 29173 00015EEF BF18000000              	mov rdi, 8 * 3	; extended env
 29174 00015EF4 E83B210000              	call malloc
 29175 00015EF9 488B7D10                	mov rdi, ENV
 29176 00015EFD BE00000000              	mov rsi, 0
 29177 00015F02 BA01000000              	mov rdx, 1
 29178                                  .L_lambda_simple_env_loop_0171:	; ext_env[i + 1] <-- env[i]
 29179 00015F07 4883FE02                	cmp rsi, 2
 29180 00015F0B 7410                    	je .L_lambda_simple_env_end_0171
 29181 00015F0D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29182 00015F11 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29183 00015F15 48FFC6                  	inc rsi
 29184 00015F18 48FFC2                  	inc rdx
 29185 00015F1B EBEA                    	jmp .L_lambda_simple_env_loop_0171
 29186                                  .L_lambda_simple_env_end_0171:
 29187 00015F1D 5B                      	pop rbx
 29188 00015F1E BE00000000              	mov rsi, 0
 29189                                  .L_lambda_simple_params_loop_0171:	; copy params
 29190 00015F23 4883FE03                	cmp rsi, 3
 29191 00015F27 740E                    	je .L_lambda_simple_params_end_0171
 29192 00015F29 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29193 00015F2E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29194 00015F32 48FFC6                  	inc rsi
 29195 00015F35 EBEC                    	jmp .L_lambda_simple_params_loop_0171
 29196                                  .L_lambda_simple_params_end_0171:
 29197 00015F37 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29198 00015F3A 4889C3                  	mov rbx, rax
 29199 00015F3D 58                      	pop rax
 29200 00015F3E C60004                  	mov byte [rax], T_closure
 29201 00015F41 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29202 00015F45 48C74009[525F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0171
 29203 00015F4D E9AF010000              	jmp .L_lambda_simple_end_0171
 29204                                  .L_lambda_simple_code_0171:	; lambda-simple body
 29205 00015F52 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29206 00015F58 740B                    	je .L_lambda_simple_arity_check_ok_0171
 29207 00015F5A FF742410                	push qword [rsp + 8 * 2]
 29208 00015F5E 6A01                    	push 1
 29209 00015F60 E988200000              	jmp L_error_incorrect_arity_simple
 29210                                  .L_lambda_simple_arity_check_ok_0171:
 29211 00015F65 C8000000                	enter 0, 0
 29212                                  	; preparing a non-tail-call
 29213                                  	; preparing a non-tail-call
 29214 00015F69 488B4510                	mov rax, ENV
 29215 00015F6D 488B00                  	mov rax, qword [rax + 8 * 0]
 29216 00015F70 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 29217 00015F74 50                      	push rax
 29218 00015F75 488B4510                	mov rax, ENV
 29219 00015F79 488B00                  	mov rax, qword [rax + 8 * 0]
 29220 00015F7C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 29221 00015F7F 50                      	push rax
 29222 00015F80 6A02                    	push 2	; arg count
 29223 00015F82 488B0425[57160000]      	mov rax, qword [free_var_128]	; free var string-ref
 29224 00015F8A 803805                  	cmp byte [rax], T_undefined
 29225 00015F8D 0F84741F0000            	je L_error_fvar_undefined
 29226 00015F93 803804                  	cmp byte [rax], T_closure
 29227 00015F96 0F85EF1F0000            	jne L_error_non_closure
 29228 00015F9C FF7001                  	push SOB_CLOSURE_ENV(rax)
 29229 00015F9F FF5009                  	call SOB_CLOSURE_CODE(rax)
 29230 00015FA2 50                      	push rax
 29231 00015FA3 488B4510                	mov rax, ENV
 29232 00015FA7 488B00                  	mov rax, qword [rax + 8 * 0]
 29233 00015FAA 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 29234 00015FAE 50                      	push rax
 29235 00015FAF 488B4510                	mov rax, ENV
 29236 00015FB3 488B00                  	mov rax, qword [rax + 8 * 0]
 29237 00015FB6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 29238 00015FB9 50                      	push rax
 29239 00015FBA 6A03                    	push 3	; arg count
 29240 00015FBC 488B0425[8A160000]      	mov rax, qword [free_var_131]	; free var string-set!
 29241 00015FC4 803805                  	cmp byte [rax], T_undefined
 29242 00015FC7 0F843A1F0000            	je L_error_fvar_undefined
 29243 00015FCD 803804                  	cmp byte [rax], T_closure
 29244 00015FD0 0F85B51F0000            	jne L_error_non_closure
 29245 00015FD6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29246 00015FD9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29247                                  
 29248                                  	; preparing a non-tail-call
 29249 00015FDC 488B4520                	mov rax, PARAM(0)	; param ch
 29250 00015FE0 50                      	push rax
 29251 00015FE1 488B4510                	mov rax, ENV
 29252 00015FE5 488B00                  	mov rax, qword [rax + 8 * 0]
 29253 00015FE8 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 29254 00015FEC 50                      	push rax
 29255 00015FED 488B4510                	mov rax, ENV
 29256 00015FF1 488B00                  	mov rax, qword [rax + 8 * 0]
 29257 00015FF4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 29258 00015FF7 50                      	push rax
 29259 00015FF8 6A03                    	push 3	; arg count
 29260 00015FFA 488B0425[8A160000]      	mov rax, qword [free_var_131]	; free var string-set!
 29261 00016002 803805                  	cmp byte [rax], T_undefined
 29262 00016005 0F84FC1E0000            	je L_error_fvar_undefined
 29263 0001600B 803804                  	cmp byte [rax], T_closure
 29264 0001600E 0F85771F0000            	jne L_error_non_closure
 29265 00016014 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29266 00016017 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29267                                  
 29268                                  	; preparing a tail-call
 29269                                  	; preparing a non-tail-call
 29270 0001601A 48B8-                   	mov rax, L_constants + 2270
 29270 0001601C [DE08000000000000] 
 29271 00016024 50                      	push rax
 29272 00016025 488B4510                	mov rax, ENV
 29273 00016029 488B00                  	mov rax, qword [rax + 8 * 0]
 29274 0001602C 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 29275 00016030 50                      	push rax
 29276 00016031 6A02                    	push 2	; arg count
 29277 00016033 488B0425[F90D0000]      	mov rax, qword [free_var_2]	; free var -
 29278 0001603B 803805                  	cmp byte [rax], T_undefined
 29279 0001603E 0F84C31E0000            	je L_error_fvar_undefined
 29280 00016044 803804                  	cmp byte [rax], T_closure
 29281 00016047 0F853E1F0000            	jne L_error_non_closure
 29282 0001604D FF7001                  	push SOB_CLOSURE_ENV(rax)
 29283 00016050 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29284 00016053 50                      	push rax
 29285                                  	; preparing a non-tail-call
 29286 00016054 48B8-                   	mov rax, L_constants + 2270
 29286 00016056 [DE08000000000000] 
 29287 0001605E 50                      	push rax
 29288 0001605F 488B4510                	mov rax, ENV
 29289 00016063 488B00                  	mov rax, qword [rax + 8 * 0]
 29290 00016066 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 29291 0001606A 50                      	push rax
 29292 0001606B 6A02                    	push 2	; arg count
 29293 0001606D 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 29294 00016075 803805                  	cmp byte [rax], T_undefined
 29295 00016078 0F84891E0000            	je L_error_fvar_undefined
 29296 0001607E 803804                  	cmp byte [rax], T_closure
 29297 00016081 0F85041F0000            	jne L_error_non_closure
 29298 00016087 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29299 0001608A FF5009                  	call SOB_CLOSURE_CODE(rax)
 29300 0001608D 50                      	push rax
 29301 0001608E 488B4510                	mov rax, ENV
 29302 00016092 488B00                  	mov rax, qword [rax + 8 * 0]
 29303 00016095 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 29304 00016098 50                      	push rax
 29305 00016099 6A03                    	push 3	; arg count
 29306 0001609B 488B4510                	mov rax, ENV
 29307 0001609F 488B4008                	mov rax, qword [rax + 8 * 1]
 29308 000160A3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 29309 000160A6 488B00                  	mov rax, qword [rax]
 29310 000160A9 803804                  	cmp byte [rax], T_closure
 29311 000160AC 0F85D91E0000            	jne L_error_non_closure
 29312 000160B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29313 000160B5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 29314 000160B8 FF7500                  	push qword[rbp]
 29315 000160BB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 29316 000160BE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 29317 000160C2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 29318 000160C6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 29319 000160CA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 29320 000160CD 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 29321 000160D0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 29322 000160D5 4983C103                	add r9, 3 	 ;for getting to the params
 29323 000160D9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 29324 000160DD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 29325                                  .L_tc_recycle_frame_loop_0213:
 29326 000160E0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 29327 000160E3 7410                    	je .L_tc_recycle_frame_done_0213
 29328 000160E5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 29329 000160E8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 29330 000160EB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 29331 000160EF 4983E808                	sub r8, 8	 ;move the top of the stack one down
 29332 000160F3 EBEB                    	jmp .L_tc_recycle_frame_loop_0213
 29333                                  .L_tc_recycle_frame_done_0213:
 29334 000160F5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 29335 000160F6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 29336 000160FA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29337 000160FD C9                      	leave
 29338 000160FE C21800                  	ret AND_KILL_FRAME(1)
 29339                                  .L_lambda_simple_end_0171:	; new closure is in rax
 29340 00016101 803804                  	cmp byte [rax], T_closure
 29341 00016104 0F85811E0000            	jne L_error_non_closure
 29342 0001610A FF7001                  	push SOB_CLOSURE_ENV(rax)
 29343 0001610D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 29344 00016110 FF7500                  	push qword[rbp]
 29345 00016113 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 29346 00016116 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 29347 0001611A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 29348 0001611E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 29349 00016122 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 29350 00016125 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 29351 00016128 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 29352 0001612D 4983C103                	add r9, 3 	 ;for getting to the params
 29353 00016131 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 29354 00016135 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 29355                                  .L_tc_recycle_frame_loop_0214:
 29356 00016138 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 29357 0001613B 7410                    	je .L_tc_recycle_frame_done_0214
 29358 0001613D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 29359 00016140 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 29360 00016143 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 29361 00016147 4983E808                	sub r8, 8	 ;move the top of the stack one down
 29362 0001614B EBEB                    	jmp .L_tc_recycle_frame_loop_0214
 29363                                  .L_tc_recycle_frame_done_0214:
 29364 0001614D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 29365 0001614E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 29366 00016152 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29367 00016155 EB04                    	jmp .L_if_end_0123
 29368                                  .L_if_else_0123:
 29369 00016157 488B4520                	mov rax, PARAM(0)	; param str
 29370                                  .L_if_end_0123:
 29371 0001615B C9                      	leave
 29372 0001615C C22800                  	ret AND_KILL_FRAME(3)
 29373                                  .L_lambda_simple_end_0170:	; new closure is in rax
 29374 0001615F 50                      	push rax
 29375 00016160 488B4520                	mov rax, PARAM(0)	; param run
 29376 00016164 8F00                    	pop qword [rax]
 29377 00016166 48B8-                   	mov rax, sob_void
 29377 00016168 [0000000000000000] 
 29378                                  
 29379 00016170 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29380 00016175 E8BA1E0000              	call malloc
 29381 0001617A 50                      	push rax
 29382 0001617B BF08000000              	mov rdi, 8 * 1	; new rib
 29383 00016180 E8AF1E0000              	call malloc
 29384 00016185 50                      	push rax
 29385 00016186 BF10000000              	mov rdi, 8 * 2	; extended env
 29386 0001618B E8A41E0000              	call malloc
 29387 00016190 488B7D10                	mov rdi, ENV
 29388 00016194 BE00000000              	mov rsi, 0
 29389 00016199 BA01000000              	mov rdx, 1
 29390                                  .L_lambda_simple_env_loop_0172:	; ext_env[i + 1] <-- env[i]
 29391 0001619E 4883FE01                	cmp rsi, 1
 29392 000161A2 7410                    	je .L_lambda_simple_env_end_0172
 29393 000161A4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29394 000161A8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29395 000161AC 48FFC6                  	inc rsi
 29396 000161AF 48FFC2                  	inc rdx
 29397 000161B2 EBEA                    	jmp .L_lambda_simple_env_loop_0172
 29398                                  .L_lambda_simple_env_end_0172:
 29399 000161B4 5B                      	pop rbx
 29400 000161B5 BE00000000              	mov rsi, 0
 29401                                  .L_lambda_simple_params_loop_0172:	; copy params
 29402 000161BA 4883FE01                	cmp rsi, 1
 29403 000161BE 740E                    	je .L_lambda_simple_params_end_0172
 29404 000161C0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29405 000161C5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29406 000161C9 48FFC6                  	inc rsi
 29407 000161CC EBEC                    	jmp .L_lambda_simple_params_loop_0172
 29408                                  .L_lambda_simple_params_end_0172:
 29409 000161CE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29410 000161D1 4889C3                  	mov rbx, rax
 29411 000161D4 58                      	pop rax
 29412 000161D5 C60004                  	mov byte [rax], T_closure
 29413 000161D8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29414 000161DC 48C74009[E9610100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0172
 29415 000161E4 E918020000              	jmp .L_lambda_simple_end_0172
 29416                                  .L_lambda_simple_code_0172:	; lambda-simple body
 29417 000161E9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29418 000161EF 740B                    	je .L_lambda_simple_arity_check_ok_0172
 29419 000161F1 FF742410                	push qword [rsp + 8 * 2]
 29420 000161F5 6A01                    	push 1
 29421 000161F7 E9F11D0000              	jmp L_error_incorrect_arity_simple
 29422                                  .L_lambda_simple_arity_check_ok_0172:
 29423 000161FC C8000000                	enter 0, 0
 29424                                  	; preparing a tail-call
 29425                                  	; preparing a non-tail-call
 29426 00016200 488B4520                	mov rax, PARAM(0)	; param str
 29427 00016204 50                      	push rax
 29428 00016205 6A01                    	push 1	; arg count
 29429 00016207 488B0425[46160000]      	mov rax, qword [free_var_127]	; free var string-length
 29430 0001620F 803805                  	cmp byte [rax], T_undefined
 29431 00016212 0F84EF1C0000            	je L_error_fvar_undefined
 29432 00016218 803804                  	cmp byte [rax], T_closure
 29433 0001621B 0F856A1D0000            	jne L_error_non_closure
 29434 00016221 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29435 00016224 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29436 00016227 50                      	push rax
 29437 00016228 6A01                    	push 1	; arg count
 29438 0001622A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29439 0001622F E8001E0000              	call malloc
 29440 00016234 50                      	push rax
 29441 00016235 BF08000000              	mov rdi, 8 * 1	; new rib
 29442 0001623A E8F51D0000              	call malloc
 29443 0001623F 50                      	push rax
 29444 00016240 BF18000000              	mov rdi, 8 * 3	; extended env
 29445 00016245 E8EA1D0000              	call malloc
 29446 0001624A 488B7D10                	mov rdi, ENV
 29447 0001624E BE00000000              	mov rsi, 0
 29448 00016253 BA01000000              	mov rdx, 1
 29449                                  .L_lambda_simple_env_loop_0173:	; ext_env[i + 1] <-- env[i]
 29450 00016258 4883FE02                	cmp rsi, 2
 29451 0001625C 7410                    	je .L_lambda_simple_env_end_0173
 29452 0001625E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29453 00016262 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29454 00016266 48FFC6                  	inc rsi
 29455 00016269 48FFC2                  	inc rdx
 29456 0001626C EBEA                    	jmp .L_lambda_simple_env_loop_0173
 29457                                  .L_lambda_simple_env_end_0173:
 29458 0001626E 5B                      	pop rbx
 29459 0001626F BE00000000              	mov rsi, 0
 29460                                  .L_lambda_simple_params_loop_0173:	; copy params
 29461 00016274 4883FE01                	cmp rsi, 1
 29462 00016278 740E                    	je .L_lambda_simple_params_end_0173
 29463 0001627A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29464 0001627F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29465 00016283 48FFC6                  	inc rsi
 29466 00016286 EBEC                    	jmp .L_lambda_simple_params_loop_0173
 29467                                  .L_lambda_simple_params_end_0173:
 29468 00016288 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29469 0001628B 4889C3                  	mov rbx, rax
 29470 0001628E 58                      	pop rax
 29471 0001628F C60004                  	mov byte [rax], T_closure
 29472 00016292 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29473 00016296 48C74009[A3620100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0173
 29474 0001629E E906010000              	jmp .L_lambda_simple_end_0173
 29475                                  .L_lambda_simple_code_0173:	; lambda-simple body
 29476 000162A3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29477 000162A9 740B                    	je .L_lambda_simple_arity_check_ok_0173
 29478 000162AB FF742410                	push qword [rsp + 8 * 2]
 29479 000162AF 6A01                    	push 1
 29480 000162B1 E9371D0000              	jmp L_error_incorrect_arity_simple
 29481                                  .L_lambda_simple_arity_check_ok_0173:
 29482 000162B6 C8000000                	enter 0, 0
 29483                                  	; preparing a non-tail-call
 29484 000162BA 488B4520                	mov rax, PARAM(0)	; param n
 29485 000162BE 50                      	push rax
 29486 000162BF 6A01                    	push 1	; arg count
 29487 000162C1 488B0425[DE170000]      	mov rax, qword [free_var_151]	; free var zero?
 29488 000162C9 803805                  	cmp byte [rax], T_undefined
 29489 000162CC 0F84351C0000            	je L_error_fvar_undefined
 29490 000162D2 803804                  	cmp byte [rax], T_closure
 29491 000162D5 0F85B01C0000            	jne L_error_non_closure
 29492 000162DB FF7001                  	push SOB_CLOSURE_ENV(rax)
 29493 000162DE FF5009                  	call SOB_CLOSURE_CODE(rax)
 29494 000162E1 483D[02000000]          	cmp rax, sob_boolean_false
 29495 000162E7 740F                    	je .L_if_else_0124
 29496 000162E9 488B4510                	mov rax, ENV
 29497 000162ED 488B00                  	mov rax, qword [rax + 8 * 0]
 29498 000162F0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 29499 000162F3 E9AD000000              	jmp .L_if_end_0124
 29500                                  .L_if_else_0124:
 29501                                  	; preparing a tail-call
 29502                                  	; preparing a non-tail-call
 29503 000162F8 48B8-                   	mov rax, L_constants + 2270
 29503 000162FA [DE08000000000000] 
 29504 00016302 50                      	push rax
 29505 00016303 488B4520                	mov rax, PARAM(0)	; param n
 29506 00016307 50                      	push rax
 29507 00016308 6A02                    	push 2	; arg count
 29508 0001630A 488B0425[F90D0000]      	mov rax, qword [free_var_2]	; free var -
 29509 00016312 803805                  	cmp byte [rax], T_undefined
 29510 00016315 0F84EC1B0000            	je L_error_fvar_undefined
 29511 0001631B 803804                  	cmp byte [rax], T_closure
 29512 0001631E 0F85671C0000            	jne L_error_non_closure
 29513 00016324 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29514 00016327 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29515 0001632A 50                      	push rax
 29516 0001632B 48B8-                   	mov rax, L_constants + 2135
 29516 0001632D [5708000000000000] 
 29517 00016335 50                      	push rax
 29518 00016336 488B4510                	mov rax, ENV
 29519 0001633A 488B00                  	mov rax, qword [rax + 8 * 0]
 29520 0001633D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 29521 00016340 50                      	push rax
 29522 00016341 6A03                    	push 3	; arg count
 29523 00016343 488B4510                	mov rax, ENV
 29524 00016347 488B4008                	mov rax, qword [rax + 8 * 1]
 29525 0001634B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 29526 0001634E 488B00                  	mov rax, qword [rax]
 29527 00016351 803804                  	cmp byte [rax], T_closure
 29528 00016354 0F85311C0000            	jne L_error_non_closure
 29529 0001635A FF7001                  	push SOB_CLOSURE_ENV(rax)
 29530 0001635D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 29531 00016360 FF7500                  	push qword[rbp]
 29532 00016363 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 29533 00016366 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 29534 0001636A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 29535 0001636E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 29536 00016372 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 29537 00016375 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 29538 00016378 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 29539 0001637D 4983C103                	add r9, 3 	 ;for getting to the params
 29540 00016381 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 29541 00016385 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 29542                                  .L_tc_recycle_frame_loop_0215:
 29543 00016388 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 29544 0001638B 7410                    	je .L_tc_recycle_frame_done_0215
 29545 0001638D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 29546 00016390 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 29547 00016393 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 29548 00016397 4983E808                	sub r8, 8	 ;move the top of the stack one down
 29549 0001639B EBEB                    	jmp .L_tc_recycle_frame_loop_0215
 29550                                  .L_tc_recycle_frame_done_0215:
 29551 0001639D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 29552 0001639E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 29553 000163A2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29554                                  .L_if_end_0124:
 29555 000163A5 C9                      	leave
 29556 000163A6 C21800                  	ret AND_KILL_FRAME(1)
 29557                                  .L_lambda_simple_end_0173:	; new closure is in rax
 29558 000163A9 803804                  	cmp byte [rax], T_closure
 29559 000163AC 0F85D91B0000            	jne L_error_non_closure
 29560 000163B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29561 000163B5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 29562 000163B8 FF7500                  	push qword[rbp]
 29563 000163BB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 29564 000163BE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 29565 000163C2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 29566 000163C6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 29567 000163CA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 29568 000163CD 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 29569 000163D0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 29570 000163D5 4983C103                	add r9, 3 	 ;for getting to the params
 29571 000163D9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 29572 000163DD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 29573                                  .L_tc_recycle_frame_loop_0216:
 29574 000163E0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 29575 000163E3 7410                    	je .L_tc_recycle_frame_done_0216
 29576 000163E5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 29577 000163E8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 29578 000163EB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 29579 000163EF 4983E808                	sub r8, 8	 ;move the top of the stack one down
 29580 000163F3 EBEB                    	jmp .L_tc_recycle_frame_loop_0216
 29581                                  .L_tc_recycle_frame_done_0216:
 29582 000163F5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 29583 000163F6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 29584 000163FA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29585 000163FD C9                      	leave
 29586 000163FE C21800                  	ret AND_KILL_FRAME(1)
 29587                                  .L_lambda_simple_end_0172:	; new closure is in rax
 29588 00016401 C9                      	leave
 29589 00016402 C21800                  	ret AND_KILL_FRAME(1)
 29590                                  .L_lambda_simple_end_016f:	; new closure is in rax
 29591 00016405 803804                  	cmp byte [rax], T_closure
 29592 00016408 0F857D1B0000            	jne L_error_non_closure
 29593 0001640E FF7001                  	push SOB_CLOSURE_ENV(rax)
 29594 00016411 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29595 00016414 48890425[79160000]      	mov qword [free_var_130], rax
 29596 0001641C 48B8-                   	mov rax, sob_void
 29596 0001641E [0000000000000000] 
 29597                                  
 29598 00016426 4889C7                  	mov rdi, rax
 29599 00016429 E85B1E0000              	call print_sexpr_if_not_void
 29600                                  	; preparing a non-tail-call
 29601 0001642E 48B8-                   	mov rax, L_constants + 1993
 29601 00016430 [C907000000000000] 
 29602 00016438 50                      	push rax
 29603 00016439 6A01                    	push 1	; arg count
 29604 0001643B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29605 00016440 E8EF1B0000              	call malloc
 29606 00016445 50                      	push rax
 29607 00016446 BF00000000              	mov rdi, 8 * 0	; new rib
 29608 0001644B E8E41B0000              	call malloc
 29609 00016450 50                      	push rax
 29610 00016451 BF08000000              	mov rdi, 8 * 1	; extended env
 29611 00016456 E8D91B0000              	call malloc
 29612 0001645B 488B7D10                	mov rdi, ENV
 29613 0001645F BE00000000              	mov rsi, 0
 29614 00016464 BA01000000              	mov rdx, 1
 29615                                  .L_lambda_simple_env_loop_0174:	; ext_env[i + 1] <-- env[i]
 29616 00016469 4883FE00                	cmp rsi, 0
 29617 0001646D 7410                    	je .L_lambda_simple_env_end_0174
 29618 0001646F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29619 00016473 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29620 00016477 48FFC6                  	inc rsi
 29621 0001647A 48FFC2                  	inc rdx
 29622 0001647D EBEA                    	jmp .L_lambda_simple_env_loop_0174
 29623                                  .L_lambda_simple_env_end_0174:
 29624 0001647F 5B                      	pop rbx
 29625 00016480 BE00000000              	mov rsi, 0
 29626                                  .L_lambda_simple_params_loop_0174:	; copy params
 29627 00016485 4883FE00                	cmp rsi, 0
 29628 00016489 740E                    	je .L_lambda_simple_params_end_0174
 29629 0001648B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29630 00016490 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29631 00016494 48FFC6                  	inc rsi
 29632 00016497 EBEC                    	jmp .L_lambda_simple_params_loop_0174
 29633                                  .L_lambda_simple_params_end_0174:
 29634 00016499 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29635 0001649C 4889C3                  	mov rbx, rax
 29636 0001649F 58                      	pop rax
 29637 000164A0 C60004                  	mov byte [rax], T_closure
 29638 000164A3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29639 000164A7 48C74009[B4640100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0174
 29640 000164AF E959060000              	jmp .L_lambda_simple_end_0174
 29641                                  .L_lambda_simple_code_0174:	; lambda-simple body
 29642 000164B4 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29643 000164BA 740B                    	je .L_lambda_simple_arity_check_ok_0174
 29644 000164BC FF742410                	push qword [rsp + 8 * 2]
 29645 000164C0 6A01                    	push 1
 29646 000164C2 E9261B0000              	jmp L_error_incorrect_arity_simple
 29647                                  .L_lambda_simple_arity_check_ok_0174:
 29648 000164C7 C8000000                	enter 0, 0
 29649 000164CB BF08000000              	mov rdi, 8*1
 29650 000164D0 E85F1B0000              	call malloc
 29651 000164D5 488B5D20                	mov rbx, PARAM(0)
 29652 000164D9 488918                  	mov qword[rax], rbx
 29653 000164DC 48894520                	mov PARAM(0), rax
 29654 000164E0 48B8-                   	mov rax, sob_void
 29654 000164E2 [0000000000000000] 
 29655                                  
 29656 000164EA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29657 000164EF E8401B0000              	call malloc
 29658 000164F4 50                      	push rax
 29659 000164F5 BF08000000              	mov rdi, 8 * 1	; new rib
 29660 000164FA E8351B0000              	call malloc
 29661 000164FF 50                      	push rax
 29662 00016500 BF10000000              	mov rdi, 8 * 2	; extended env
 29663 00016505 E82A1B0000              	call malloc
 29664 0001650A 488B7D10                	mov rdi, ENV
 29665 0001650E BE00000000              	mov rsi, 0
 29666 00016513 BA01000000              	mov rdx, 1
 29667                                  .L_lambda_simple_env_loop_0175:	; ext_env[i + 1] <-- env[i]
 29668 00016518 4883FE01                	cmp rsi, 1
 29669 0001651C 7410                    	je .L_lambda_simple_env_end_0175
 29670 0001651E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29671 00016522 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29672 00016526 48FFC6                  	inc rsi
 29673 00016529 48FFC2                  	inc rdx
 29674 0001652C EBEA                    	jmp .L_lambda_simple_env_loop_0175
 29675                                  .L_lambda_simple_env_end_0175:
 29676 0001652E 5B                      	pop rbx
 29677 0001652F BE00000000              	mov rsi, 0
 29678                                  .L_lambda_simple_params_loop_0175:	; copy params
 29679 00016534 4883FE01                	cmp rsi, 1
 29680 00016538 740E                    	je .L_lambda_simple_params_end_0175
 29681 0001653A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29682 0001653F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29683 00016543 48FFC6                  	inc rsi
 29684 00016546 EBEC                    	jmp .L_lambda_simple_params_loop_0175
 29685                                  .L_lambda_simple_params_end_0175:
 29686 00016548 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29687 0001654B 4889C3                  	mov rbx, rax
 29688 0001654E 58                      	pop rax
 29689 0001654F C60004                  	mov byte [rax], T_closure
 29690 00016552 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29691 00016556 48C74009[63650100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0175
 29692 0001655E E904030000              	jmp .L_lambda_simple_end_0175
 29693                                  .L_lambda_simple_code_0175:	; lambda-simple body
 29694 00016563 48837C241003            	cmp qword [rsp + 8 * 2], 3
 29695 00016569 740B                    	je .L_lambda_simple_arity_check_ok_0175
 29696 0001656B FF742410                	push qword [rsp + 8 * 2]
 29697 0001656F 6A03                    	push 3
 29698 00016571 E9771A0000              	jmp L_error_incorrect_arity_simple
 29699                                  .L_lambda_simple_arity_check_ok_0175:
 29700 00016576 C8000000                	enter 0, 0
 29701                                  	; preparing a non-tail-call
 29702 0001657A 488B4530                	mov rax, PARAM(2)	; param j
 29703 0001657E 50                      	push rax
 29704 0001657F 488B4528                	mov rax, PARAM(1)	; param i
 29705 00016583 50                      	push rax
 29706 00016584 6A02                    	push 2	; arg count
 29707 00016586 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 29708 0001658E 803805                  	cmp byte [rax], T_undefined
 29709 00016591 0F8470190000            	je L_error_fvar_undefined
 29710 00016597 803804                  	cmp byte [rax], T_closure
 29711 0001659A 0F85EB190000            	jne L_error_non_closure
 29712 000165A0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29713 000165A3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29714 000165A6 483D[02000000]          	cmp rax, sob_boolean_false
 29715 000165AC 0F84AD020000            	je .L_if_else_0125
 29716                                  	; preparing a tail-call
 29717                                  	; preparing a non-tail-call
 29718 000165B2 488B4528                	mov rax, PARAM(1)	; param i
 29719 000165B6 50                      	push rax
 29720 000165B7 488B4520                	mov rax, PARAM(0)	; param vec
 29721 000165BB 50                      	push rax
 29722 000165BC 6A02                    	push 2	; arg count
 29723 000165BE 488B0425[67170000]      	mov rax, qword [free_var_144]	; free var vector-ref
 29724 000165C6 803805                  	cmp byte [rax], T_undefined
 29725 000165C9 0F8438190000            	je L_error_fvar_undefined
 29726 000165CF 803804                  	cmp byte [rax], T_closure
 29727 000165D2 0F85B3190000            	jne L_error_non_closure
 29728 000165D8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29729 000165DB FF5009                  	call SOB_CLOSURE_CODE(rax)
 29730 000165DE 50                      	push rax
 29731 000165DF 6A01                    	push 1	; arg count
 29732 000165E1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29733 000165E6 E8491A0000              	call malloc
 29734 000165EB 50                      	push rax
 29735 000165EC BF18000000              	mov rdi, 8 * 3	; new rib
 29736 000165F1 E83E1A0000              	call malloc
 29737 000165F6 50                      	push rax
 29738 000165F7 BF18000000              	mov rdi, 8 * 3	; extended env
 29739 000165FC E8331A0000              	call malloc
 29740 00016601 488B7D10                	mov rdi, ENV
 29741 00016605 BE00000000              	mov rsi, 0
 29742 0001660A BA01000000              	mov rdx, 1
 29743                                  .L_lambda_simple_env_loop_0176:	; ext_env[i + 1] <-- env[i]
 29744 0001660F 4883FE02                	cmp rsi, 2
 29745 00016613 7410                    	je .L_lambda_simple_env_end_0176
 29746 00016615 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29747 00016619 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29748 0001661D 48FFC6                  	inc rsi
 29749 00016620 48FFC2                  	inc rdx
 29750 00016623 EBEA                    	jmp .L_lambda_simple_env_loop_0176
 29751                                  .L_lambda_simple_env_end_0176:
 29752 00016625 5B                      	pop rbx
 29753 00016626 BE00000000              	mov rsi, 0
 29754                                  .L_lambda_simple_params_loop_0176:	; copy params
 29755 0001662B 4883FE03                	cmp rsi, 3
 29756 0001662F 740E                    	je .L_lambda_simple_params_end_0176
 29757 00016631 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29758 00016636 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29759 0001663A 48FFC6                  	inc rsi
 29760 0001663D EBEC                    	jmp .L_lambda_simple_params_loop_0176
 29761                                  .L_lambda_simple_params_end_0176:
 29762 0001663F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29763 00016642 4889C3                  	mov rbx, rax
 29764 00016645 58                      	pop rax
 29765 00016646 C60004                  	mov byte [rax], T_closure
 29766 00016649 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29767 0001664D 48C74009[5A660100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0176
 29768 00016655 E9AF010000              	jmp .L_lambda_simple_end_0176
 29769                                  .L_lambda_simple_code_0176:	; lambda-simple body
 29770 0001665A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29771 00016660 740B                    	je .L_lambda_simple_arity_check_ok_0176
 29772 00016662 FF742410                	push qword [rsp + 8 * 2]
 29773 00016666 6A01                    	push 1
 29774 00016668 E980190000              	jmp L_error_incorrect_arity_simple
 29775                                  .L_lambda_simple_arity_check_ok_0176:
 29776 0001666D C8000000                	enter 0, 0
 29777                                  	; preparing a non-tail-call
 29778                                  	; preparing a non-tail-call
 29779 00016671 488B4510                	mov rax, ENV
 29780 00016675 488B00                  	mov rax, qword [rax + 8 * 0]
 29781 00016678 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 29782 0001667C 50                      	push rax
 29783 0001667D 488B4510                	mov rax, ENV
 29784 00016681 488B00                  	mov rax, qword [rax + 8 * 0]
 29785 00016684 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 29786 00016687 50                      	push rax
 29787 00016688 6A02                    	push 2	; arg count
 29788 0001668A 488B0425[67170000]      	mov rax, qword [free_var_144]	; free var vector-ref
 29789 00016692 803805                  	cmp byte [rax], T_undefined
 29790 00016695 0F846C180000            	je L_error_fvar_undefined
 29791 0001669B 803804                  	cmp byte [rax], T_closure
 29792 0001669E 0F85E7180000            	jne L_error_non_closure
 29793 000166A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29794 000166A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29795 000166AA 50                      	push rax
 29796 000166AB 488B4510                	mov rax, ENV
 29797 000166AF 488B00                  	mov rax, qword [rax + 8 * 0]
 29798 000166B2 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 29799 000166B6 50                      	push rax
 29800 000166B7 488B4510                	mov rax, ENV
 29801 000166BB 488B00                  	mov rax, qword [rax + 8 * 0]
 29802 000166BE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 29803 000166C1 50                      	push rax
 29804 000166C2 6A03                    	push 3	; arg count
 29805 000166C4 488B0425[9A170000]      	mov rax, qword [free_var_147]	; free var vector-set!
 29806 000166CC 803805                  	cmp byte [rax], T_undefined
 29807 000166CF 0F8432180000            	je L_error_fvar_undefined
 29808 000166D5 803804                  	cmp byte [rax], T_closure
 29809 000166D8 0F85AD180000            	jne L_error_non_closure
 29810 000166DE FF7001                  	push SOB_CLOSURE_ENV(rax)
 29811 000166E1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29812                                  
 29813                                  	; preparing a non-tail-call
 29814 000166E4 488B4520                	mov rax, PARAM(0)	; param ch
 29815 000166E8 50                      	push rax
 29816 000166E9 488B4510                	mov rax, ENV
 29817 000166ED 488B00                  	mov rax, qword [rax + 8 * 0]
 29818 000166F0 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 29819 000166F4 50                      	push rax
 29820 000166F5 488B4510                	mov rax, ENV
 29821 000166F9 488B00                  	mov rax, qword [rax + 8 * 0]
 29822 000166FC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 29823 000166FF 50                      	push rax
 29824 00016700 6A03                    	push 3	; arg count
 29825 00016702 488B0425[9A170000]      	mov rax, qword [free_var_147]	; free var vector-set!
 29826 0001670A 803805                  	cmp byte [rax], T_undefined
 29827 0001670D 0F84F4170000            	je L_error_fvar_undefined
 29828 00016713 803804                  	cmp byte [rax], T_closure
 29829 00016716 0F856F180000            	jne L_error_non_closure
 29830 0001671C FF7001                  	push SOB_CLOSURE_ENV(rax)
 29831 0001671F FF5009                  	call SOB_CLOSURE_CODE(rax)
 29832                                  
 29833                                  	; preparing a tail-call
 29834                                  	; preparing a non-tail-call
 29835 00016722 48B8-                   	mov rax, L_constants + 2270
 29835 00016724 [DE08000000000000] 
 29836 0001672C 50                      	push rax
 29837 0001672D 488B4510                	mov rax, ENV
 29838 00016731 488B00                  	mov rax, qword [rax + 8 * 0]
 29839 00016734 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 29840 00016738 50                      	push rax
 29841 00016739 6A02                    	push 2	; arg count
 29842 0001673B 488B0425[F90D0000]      	mov rax, qword [free_var_2]	; free var -
 29843 00016743 803805                  	cmp byte [rax], T_undefined
 29844 00016746 0F84BB170000            	je L_error_fvar_undefined
 29845 0001674C 803804                  	cmp byte [rax], T_closure
 29846 0001674F 0F8536180000            	jne L_error_non_closure
 29847 00016755 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29848 00016758 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29849 0001675B 50                      	push rax
 29850                                  	; preparing a non-tail-call
 29851 0001675C 48B8-                   	mov rax, L_constants + 2270
 29851 0001675E [DE08000000000000] 
 29852 00016766 50                      	push rax
 29853 00016767 488B4510                	mov rax, ENV
 29854 0001676B 488B00                  	mov rax, qword [rax + 8 * 0]
 29855 0001676E 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 29856 00016772 50                      	push rax
 29857 00016773 6A02                    	push 2	; arg count
 29858 00016775 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 29859 0001677D 803805                  	cmp byte [rax], T_undefined
 29860 00016780 0F8481170000            	je L_error_fvar_undefined
 29861 00016786 803804                  	cmp byte [rax], T_closure
 29862 00016789 0F85FC170000            	jne L_error_non_closure
 29863 0001678F FF7001                  	push SOB_CLOSURE_ENV(rax)
 29864 00016792 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29865 00016795 50                      	push rax
 29866 00016796 488B4510                	mov rax, ENV
 29867 0001679A 488B00                  	mov rax, qword [rax + 8 * 0]
 29868 0001679D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 29869 000167A0 50                      	push rax
 29870 000167A1 6A03                    	push 3	; arg count
 29871 000167A3 488B4510                	mov rax, ENV
 29872 000167A7 488B4008                	mov rax, qword [rax + 8 * 1]
 29873 000167AB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 29874 000167AE 488B00                  	mov rax, qword [rax]
 29875 000167B1 803804                  	cmp byte [rax], T_closure
 29876 000167B4 0F85D1170000            	jne L_error_non_closure
 29877 000167BA FF7001                  	push SOB_CLOSURE_ENV(rax)
 29878 000167BD FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 29879 000167C0 FF7500                  	push qword[rbp]
 29880 000167C3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 29881 000167C6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 29882 000167CA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 29883 000167CE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 29884 000167D2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 29885 000167D5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 29886 000167D8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 29887 000167DD 4983C103                	add r9, 3 	 ;for getting to the params
 29888 000167E1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 29889 000167E5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 29890                                  .L_tc_recycle_frame_loop_0217:
 29891 000167E8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 29892 000167EB 7410                    	je .L_tc_recycle_frame_done_0217
 29893 000167ED 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 29894 000167F0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 29895 000167F3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 29896 000167F7 4983E808                	sub r8, 8	 ;move the top of the stack one down
 29897 000167FB EBEB                    	jmp .L_tc_recycle_frame_loop_0217
 29898                                  .L_tc_recycle_frame_done_0217:
 29899 000167FD 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 29900 000167FE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 29901 00016802 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29902 00016805 C9                      	leave
 29903 00016806 C21800                  	ret AND_KILL_FRAME(1)
 29904                                  .L_lambda_simple_end_0176:	; new closure is in rax
 29905 00016809 803804                  	cmp byte [rax], T_closure
 29906 0001680C 0F8579170000            	jne L_error_non_closure
 29907 00016812 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29908 00016815 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 29909 00016818 FF7500                  	push qword[rbp]
 29910 0001681B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 29911 0001681E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 29912 00016822 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 29913 00016826 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 29914 0001682A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 29915 0001682D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 29916 00016830 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 29917 00016835 4983C103                	add r9, 3 	 ;for getting to the params
 29918 00016839 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 29919 0001683D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 29920                                  .L_tc_recycle_frame_loop_0218:
 29921 00016840 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 29922 00016843 7410                    	je .L_tc_recycle_frame_done_0218
 29923 00016845 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 29924 00016848 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 29925 0001684B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 29926 0001684F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 29927 00016853 EBEB                    	jmp .L_tc_recycle_frame_loop_0218
 29928                                  .L_tc_recycle_frame_done_0218:
 29929 00016855 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 29930 00016856 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 29931 0001685A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29932 0001685D EB04                    	jmp .L_if_end_0125
 29933                                  .L_if_else_0125:
 29934 0001685F 488B4520                	mov rax, PARAM(0)	; param vec
 29935                                  .L_if_end_0125:
 29936 00016863 C9                      	leave
 29937 00016864 C22800                  	ret AND_KILL_FRAME(3)
 29938                                  .L_lambda_simple_end_0175:	; new closure is in rax
 29939 00016867 50                      	push rax
 29940 00016868 488B4520                	mov rax, PARAM(0)	; param run
 29941 0001686C 8F00                    	pop qword [rax]
 29942 0001686E 48B8-                   	mov rax, sob_void
 29942 00016870 [0000000000000000] 
 29943                                  
 29944 00016878 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29945 0001687D E8B2170000              	call malloc
 29946 00016882 50                      	push rax
 29947 00016883 BF08000000              	mov rdi, 8 * 1	; new rib
 29948 00016888 E8A7170000              	call malloc
 29949 0001688D 50                      	push rax
 29950 0001688E BF10000000              	mov rdi, 8 * 2	; extended env
 29951 00016893 E89C170000              	call malloc
 29952 00016898 488B7D10                	mov rdi, ENV
 29953 0001689C BE00000000              	mov rsi, 0
 29954 000168A1 BA01000000              	mov rdx, 1
 29955                                  .L_lambda_simple_env_loop_0177:	; ext_env[i + 1] <-- env[i]
 29956 000168A6 4883FE01                	cmp rsi, 1
 29957 000168AA 7410                    	je .L_lambda_simple_env_end_0177
 29958 000168AC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29959 000168B0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29960 000168B4 48FFC6                  	inc rsi
 29961 000168B7 48FFC2                  	inc rdx
 29962 000168BA EBEA                    	jmp .L_lambda_simple_env_loop_0177
 29963                                  .L_lambda_simple_env_end_0177:
 29964 000168BC 5B                      	pop rbx
 29965 000168BD BE00000000              	mov rsi, 0
 29966                                  .L_lambda_simple_params_loop_0177:	; copy params
 29967 000168C2 4883FE01                	cmp rsi, 1
 29968 000168C6 740E                    	je .L_lambda_simple_params_end_0177
 29969 000168C8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29970 000168CD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29971 000168D1 48FFC6                  	inc rsi
 29972 000168D4 EBEC                    	jmp .L_lambda_simple_params_loop_0177
 29973                                  .L_lambda_simple_params_end_0177:
 29974 000168D6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29975 000168D9 4889C3                  	mov rbx, rax
 29976 000168DC 58                      	pop rax
 29977 000168DD C60004                  	mov byte [rax], T_closure
 29978 000168E0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29979 000168E4 48C74009[F1680100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0177
 29980 000168EC E918020000              	jmp .L_lambda_simple_end_0177
 29981                                  .L_lambda_simple_code_0177:	; lambda-simple body
 29982 000168F1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29983 000168F7 740B                    	je .L_lambda_simple_arity_check_ok_0177
 29984 000168F9 FF742410                	push qword [rsp + 8 * 2]
 29985 000168FD 6A01                    	push 1
 29986 000168FF E9E9160000              	jmp L_error_incorrect_arity_simple
 29987                                  .L_lambda_simple_arity_check_ok_0177:
 29988 00016904 C8000000                	enter 0, 0
 29989                                  	; preparing a tail-call
 29990                                  	; preparing a non-tail-call
 29991 00016908 488B4520                	mov rax, PARAM(0)	; param vec
 29992 0001690C 50                      	push rax
 29993 0001690D 6A01                    	push 1	; arg count
 29994 0001690F 488B0425[56170000]      	mov rax, qword [free_var_143]	; free var vector-length
 29995 00016917 803805                  	cmp byte [rax], T_undefined
 29996 0001691A 0F84E7150000            	je L_error_fvar_undefined
 29997 00016920 803804                  	cmp byte [rax], T_closure
 29998 00016923 0F8562160000            	jne L_error_non_closure
 29999 00016929 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30000 0001692C FF5009                  	call SOB_CLOSURE_CODE(rax)
 30001 0001692F 50                      	push rax
 30002 00016930 6A01                    	push 1	; arg count
 30003 00016932 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30004 00016937 E8F8160000              	call malloc
 30005 0001693C 50                      	push rax
 30006 0001693D BF08000000              	mov rdi, 8 * 1	; new rib
 30007 00016942 E8ED160000              	call malloc
 30008 00016947 50                      	push rax
 30009 00016948 BF18000000              	mov rdi, 8 * 3	; extended env
 30010 0001694D E8E2160000              	call malloc
 30011 00016952 488B7D10                	mov rdi, ENV
 30012 00016956 BE00000000              	mov rsi, 0
 30013 0001695B BA01000000              	mov rdx, 1
 30014                                  .L_lambda_simple_env_loop_0178:	; ext_env[i + 1] <-- env[i]
 30015 00016960 4883FE02                	cmp rsi, 2
 30016 00016964 7410                    	je .L_lambda_simple_env_end_0178
 30017 00016966 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30018 0001696A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30019 0001696E 48FFC6                  	inc rsi
 30020 00016971 48FFC2                  	inc rdx
 30021 00016974 EBEA                    	jmp .L_lambda_simple_env_loop_0178
 30022                                  .L_lambda_simple_env_end_0178:
 30023 00016976 5B                      	pop rbx
 30024 00016977 BE00000000              	mov rsi, 0
 30025                                  .L_lambda_simple_params_loop_0178:	; copy params
 30026 0001697C 4883FE01                	cmp rsi, 1
 30027 00016980 740E                    	je .L_lambda_simple_params_end_0178
 30028 00016982 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30029 00016987 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30030 0001698B 48FFC6                  	inc rsi
 30031 0001698E EBEC                    	jmp .L_lambda_simple_params_loop_0178
 30032                                  .L_lambda_simple_params_end_0178:
 30033 00016990 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30034 00016993 4889C3                  	mov rbx, rax
 30035 00016996 58                      	pop rax
 30036 00016997 C60004                  	mov byte [rax], T_closure
 30037 0001699A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30038 0001699E 48C74009[AB690100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0178
 30039 000169A6 E906010000              	jmp .L_lambda_simple_end_0178
 30040                                  .L_lambda_simple_code_0178:	; lambda-simple body
 30041 000169AB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 30042 000169B1 740B                    	je .L_lambda_simple_arity_check_ok_0178
 30043 000169B3 FF742410                	push qword [rsp + 8 * 2]
 30044 000169B7 6A01                    	push 1
 30045 000169B9 E92F160000              	jmp L_error_incorrect_arity_simple
 30046                                  .L_lambda_simple_arity_check_ok_0178:
 30047 000169BE C8000000                	enter 0, 0
 30048                                  	; preparing a non-tail-call
 30049 000169C2 488B4520                	mov rax, PARAM(0)	; param n
 30050 000169C6 50                      	push rax
 30051 000169C7 6A01                    	push 1	; arg count
 30052 000169C9 488B0425[DE170000]      	mov rax, qword [free_var_151]	; free var zero?
 30053 000169D1 803805                  	cmp byte [rax], T_undefined
 30054 000169D4 0F842D150000            	je L_error_fvar_undefined
 30055 000169DA 803804                  	cmp byte [rax], T_closure
 30056 000169DD 0F85A8150000            	jne L_error_non_closure
 30057 000169E3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30058 000169E6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30059 000169E9 483D[02000000]          	cmp rax, sob_boolean_false
 30060 000169EF 740F                    	je .L_if_else_0126
 30061 000169F1 488B4510                	mov rax, ENV
 30062 000169F5 488B00                  	mov rax, qword [rax + 8 * 0]
 30063 000169F8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 30064 000169FB E9AD000000              	jmp .L_if_end_0126
 30065                                  .L_if_else_0126:
 30066                                  	; preparing a tail-call
 30067                                  	; preparing a non-tail-call
 30068 00016A00 48B8-                   	mov rax, L_constants + 2270
 30068 00016A02 [DE08000000000000] 
 30069 00016A0A 50                      	push rax
 30070 00016A0B 488B4520                	mov rax, PARAM(0)	; param n
 30071 00016A0F 50                      	push rax
 30072 00016A10 6A02                    	push 2	; arg count
 30073 00016A12 488B0425[F90D0000]      	mov rax, qword [free_var_2]	; free var -
 30074 00016A1A 803805                  	cmp byte [rax], T_undefined
 30075 00016A1D 0F84E4140000            	je L_error_fvar_undefined
 30076 00016A23 803804                  	cmp byte [rax], T_closure
 30077 00016A26 0F855F150000            	jne L_error_non_closure
 30078 00016A2C FF7001                  	push SOB_CLOSURE_ENV(rax)
 30079 00016A2F FF5009                  	call SOB_CLOSURE_CODE(rax)
 30080 00016A32 50                      	push rax
 30081 00016A33 48B8-                   	mov rax, L_constants + 2135
 30081 00016A35 [5708000000000000] 
 30082 00016A3D 50                      	push rax
 30083 00016A3E 488B4510                	mov rax, ENV
 30084 00016A42 488B00                  	mov rax, qword [rax + 8 * 0]
 30085 00016A45 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 30086 00016A48 50                      	push rax
 30087 00016A49 6A03                    	push 3	; arg count
 30088 00016A4B 488B4510                	mov rax, ENV
 30089 00016A4F 488B4008                	mov rax, qword [rax + 8 * 1]
 30090 00016A53 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 30091 00016A56 488B00                  	mov rax, qword [rax]
 30092 00016A59 803804                  	cmp byte [rax], T_closure
 30093 00016A5C 0F8529150000            	jne L_error_non_closure
 30094 00016A62 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30095 00016A65 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30096 00016A68 FF7500                  	push qword[rbp]
 30097 00016A6B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30098 00016A6E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30099 00016A72 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30100 00016A76 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30101 00016A7A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30102 00016A7D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30103 00016A80 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30104 00016A85 4983C103                	add r9, 3 	 ;for getting to the params
 30105 00016A89 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30106 00016A8D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30107                                  .L_tc_recycle_frame_loop_0219:
 30108 00016A90 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30109 00016A93 7410                    	je .L_tc_recycle_frame_done_0219
 30110 00016A95 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30111 00016A98 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30112 00016A9B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30113 00016A9F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30114 00016AA3 EBEB                    	jmp .L_tc_recycle_frame_loop_0219
 30115                                  .L_tc_recycle_frame_done_0219:
 30116 00016AA5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30117 00016AA6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30118 00016AAA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30119                                  .L_if_end_0126:
 30120 00016AAD C9                      	leave
 30121 00016AAE C21800                  	ret AND_KILL_FRAME(1)
 30122                                  .L_lambda_simple_end_0178:	; new closure is in rax
 30123 00016AB1 803804                  	cmp byte [rax], T_closure
 30124 00016AB4 0F85D1140000            	jne L_error_non_closure
 30125 00016ABA FF7001                  	push SOB_CLOSURE_ENV(rax)
 30126 00016ABD FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30127 00016AC0 FF7500                  	push qword[rbp]
 30128 00016AC3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30129 00016AC6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30130 00016ACA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30131 00016ACE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30132 00016AD2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30133 00016AD5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30134 00016AD8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30135 00016ADD 4983C103                	add r9, 3 	 ;for getting to the params
 30136 00016AE1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30137 00016AE5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30138                                  .L_tc_recycle_frame_loop_021a:
 30139 00016AE8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30140 00016AEB 7410                    	je .L_tc_recycle_frame_done_021a
 30141 00016AED 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30142 00016AF0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30143 00016AF3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30144 00016AF7 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30145 00016AFB EBEB                    	jmp .L_tc_recycle_frame_loop_021a
 30146                                  .L_tc_recycle_frame_done_021a:
 30147 00016AFD 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30148 00016AFE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30149 00016B02 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30150 00016B05 C9                      	leave
 30151 00016B06 C21800                  	ret AND_KILL_FRAME(1)
 30152                                  .L_lambda_simple_end_0177:	; new closure is in rax
 30153 00016B09 C9                      	leave
 30154 00016B0A C21800                  	ret AND_KILL_FRAME(1)
 30155                                  .L_lambda_simple_end_0174:	; new closure is in rax
 30156 00016B0D 803804                  	cmp byte [rax], T_closure
 30157 00016B10 0F8575140000            	jne L_error_non_closure
 30158 00016B16 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30159 00016B19 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30160 00016B1C 48890425[89170000]      	mov qword [free_var_146], rax
 30161 00016B24 48B8-                   	mov rax, sob_void
 30161 00016B26 [0000000000000000] 
 30162                                  
 30163 00016B2E 4889C7                  	mov rdi, rax
 30164 00016B31 E853170000              	call print_sexpr_if_not_void
 30165 00016B36 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30166 00016B3B E8F4140000              	call malloc
 30167 00016B40 50                      	push rax
 30168 00016B41 BF00000000              	mov rdi, 8 * 0	; new rib
 30169 00016B46 E8E9140000              	call malloc
 30170 00016B4B 50                      	push rax
 30171 00016B4C BF08000000              	mov rdi, 8 * 1	; extended env
 30172 00016B51 E8DE140000              	call malloc
 30173 00016B56 488B7D10                	mov rdi, ENV
 30174 00016B5A BE00000000              	mov rsi, 0
 30175 00016B5F BA01000000              	mov rdx, 1
 30176                                  .L_lambda_simple_env_loop_0179:	; ext_env[i + 1] <-- env[i]
 30177 00016B64 4883FE00                	cmp rsi, 0
 30178 00016B68 7410                    	je .L_lambda_simple_env_end_0179
 30179 00016B6A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30180 00016B6E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30181 00016B72 48FFC6                  	inc rsi
 30182 00016B75 48FFC2                  	inc rdx
 30183 00016B78 EBEA                    	jmp .L_lambda_simple_env_loop_0179
 30184                                  .L_lambda_simple_env_end_0179:
 30185 00016B7A 5B                      	pop rbx
 30186 00016B7B BE00000000              	mov rsi, 0
 30187                                  .L_lambda_simple_params_loop_0179:	; copy params
 30188 00016B80 4883FE00                	cmp rsi, 0
 30189 00016B84 740E                    	je .L_lambda_simple_params_end_0179
 30190 00016B86 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30191 00016B8B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30192 00016B8F 48FFC6                  	inc rsi
 30193 00016B92 EBEC                    	jmp .L_lambda_simple_params_loop_0179
 30194                                  .L_lambda_simple_params_end_0179:
 30195 00016B94 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30196 00016B97 4889C3                  	mov rbx, rax
 30197 00016B9A 58                      	pop rax
 30198 00016B9B C60004                  	mov byte [rax], T_closure
 30199 00016B9E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30200 00016BA2 48C74009[AF6B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0179
 30201 00016BAA E963030000              	jmp .L_lambda_simple_end_0179
 30202                                  .L_lambda_simple_code_0179:	; lambda-simple body
 30203 00016BAF 48837C241002            	cmp qword [rsp + 8 * 2], 2
 30204 00016BB5 740B                    	je .L_lambda_simple_arity_check_ok_0179
 30205 00016BB7 FF742410                	push qword [rsp + 8 * 2]
 30206 00016BBB 6A02                    	push 2
 30207 00016BBD E92B140000              	jmp L_error_incorrect_arity_simple
 30208                                  .L_lambda_simple_arity_check_ok_0179:
 30209 00016BC2 C8000000                	enter 0, 0
 30210                                  	; preparing a tail-call
 30211 00016BC6 48B8-                   	mov rax, L_constants + 1993
 30211 00016BC8 [C907000000000000] 
 30212 00016BD0 50                      	push rax
 30213 00016BD1 6A01                    	push 1	; arg count
 30214 00016BD3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30215 00016BD8 E857140000              	call malloc
 30216 00016BDD 50                      	push rax
 30217 00016BDE BF10000000              	mov rdi, 8 * 2	; new rib
 30218 00016BE3 E84C140000              	call malloc
 30219 00016BE8 50                      	push rax
 30220 00016BE9 BF10000000              	mov rdi, 8 * 2	; extended env
 30221 00016BEE E841140000              	call malloc
 30222 00016BF3 488B7D10                	mov rdi, ENV
 30223 00016BF7 BE00000000              	mov rsi, 0
 30224 00016BFC BA01000000              	mov rdx, 1
 30225                                  .L_lambda_simple_env_loop_017a:	; ext_env[i + 1] <-- env[i]
 30226 00016C01 4883FE01                	cmp rsi, 1
 30227 00016C05 7410                    	je .L_lambda_simple_env_end_017a
 30228 00016C07 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30229 00016C0B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30230 00016C0F 48FFC6                  	inc rsi
 30231 00016C12 48FFC2                  	inc rdx
 30232 00016C15 EBEA                    	jmp .L_lambda_simple_env_loop_017a
 30233                                  .L_lambda_simple_env_end_017a:
 30234 00016C17 5B                      	pop rbx
 30235 00016C18 BE00000000              	mov rsi, 0
 30236                                  .L_lambda_simple_params_loop_017a:	; copy params
 30237 00016C1D 4883FE02                	cmp rsi, 2
 30238 00016C21 740E                    	je .L_lambda_simple_params_end_017a
 30239 00016C23 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30240 00016C28 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30241 00016C2C 48FFC6                  	inc rsi
 30242 00016C2F EBEC                    	jmp .L_lambda_simple_params_loop_017a
 30243                                  .L_lambda_simple_params_end_017a:
 30244 00016C31 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30245 00016C34 4889C3                  	mov rbx, rax
 30246 00016C37 58                      	pop rax
 30247 00016C38 C60004                  	mov byte [rax], T_closure
 30248 00016C3B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30249 00016C3F 48C74009[4C6C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_017a
 30250 00016C47 E96E020000              	jmp .L_lambda_simple_end_017a
 30251                                  .L_lambda_simple_code_017a:	; lambda-simple body
 30252 00016C4C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 30253 00016C52 740B                    	je .L_lambda_simple_arity_check_ok_017a
 30254 00016C54 FF742410                	push qword [rsp + 8 * 2]
 30255 00016C58 6A01                    	push 1
 30256 00016C5A E98E130000              	jmp L_error_incorrect_arity_simple
 30257                                  .L_lambda_simple_arity_check_ok_017a:
 30258 00016C5F C8000000                	enter 0, 0
 30259 00016C63 BF08000000              	mov rdi, 8*1
 30260 00016C68 E8C7130000              	call malloc
 30261 00016C6D 488B5D20                	mov rbx, PARAM(0)
 30262 00016C71 488918                  	mov qword[rax], rbx
 30263 00016C74 48894520                	mov PARAM(0), rax
 30264 00016C78 48B8-                   	mov rax, sob_void
 30264 00016C7A [0000000000000000] 
 30265                                  
 30266 00016C82 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30267 00016C87 E8A8130000              	call malloc
 30268 00016C8C 50                      	push rax
 30269 00016C8D BF08000000              	mov rdi, 8 * 1	; new rib
 30270 00016C92 E89D130000              	call malloc
 30271 00016C97 50                      	push rax
 30272 00016C98 BF18000000              	mov rdi, 8 * 3	; extended env
 30273 00016C9D E892130000              	call malloc
 30274 00016CA2 488B7D10                	mov rdi, ENV
 30275 00016CA6 BE00000000              	mov rsi, 0
 30276 00016CAB BA01000000              	mov rdx, 1
 30277                                  .L_lambda_simple_env_loop_017b:	; ext_env[i + 1] <-- env[i]
 30278 00016CB0 4883FE02                	cmp rsi, 2
 30279 00016CB4 7410                    	je .L_lambda_simple_env_end_017b
 30280 00016CB6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30281 00016CBA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30282 00016CBE 48FFC6                  	inc rsi
 30283 00016CC1 48FFC2                  	inc rdx
 30284 00016CC4 EBEA                    	jmp .L_lambda_simple_env_loop_017b
 30285                                  .L_lambda_simple_env_end_017b:
 30286 00016CC6 5B                      	pop rbx
 30287 00016CC7 BE00000000              	mov rsi, 0
 30288                                  .L_lambda_simple_params_loop_017b:	; copy params
 30289 00016CCC 4883FE01                	cmp rsi, 1
 30290 00016CD0 740E                    	je .L_lambda_simple_params_end_017b
 30291 00016CD2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30292 00016CD7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30293 00016CDB 48FFC6                  	inc rsi
 30294 00016CDE EBEC                    	jmp .L_lambda_simple_params_loop_017b
 30295                                  .L_lambda_simple_params_end_017b:
 30296 00016CE0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30297 00016CE3 4889C3                  	mov rbx, rax
 30298 00016CE6 58                      	pop rax
 30299 00016CE7 C60004                  	mov byte [rax], T_closure
 30300 00016CEA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30301 00016CEE 48C74009[FB6C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_017b
 30302 00016CF6 E942010000              	jmp .L_lambda_simple_end_017b
 30303                                  .L_lambda_simple_code_017b:	; lambda-simple body
 30304 00016CFB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 30305 00016D01 740B                    	je .L_lambda_simple_arity_check_ok_017b
 30306 00016D03 FF742410                	push qword [rsp + 8 * 2]
 30307 00016D07 6A01                    	push 1
 30308 00016D09 E9DF120000              	jmp L_error_incorrect_arity_simple
 30309                                  .L_lambda_simple_arity_check_ok_017b:
 30310 00016D0E C8000000                	enter 0, 0
 30311                                  	; preparing a non-tail-call
 30312 00016D12 488B4510                	mov rax, ENV
 30313 00016D16 488B4008                	mov rax, qword [rax + 8 * 1]
 30314 00016D1A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 30315 00016D1D 50                      	push rax
 30316 00016D1E 488B4520                	mov rax, PARAM(0)	; param i
 30317 00016D22 50                      	push rax
 30318 00016D23 6A02                    	push 2	; arg count
 30319 00016D25 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 30320 00016D2D 803805                  	cmp byte [rax], T_undefined
 30321 00016D30 0F84D1110000            	je L_error_fvar_undefined
 30322 00016D36 803804                  	cmp byte [rax], T_closure
 30323 00016D39 0F854C120000            	jne L_error_non_closure
 30324 00016D3F FF7001                  	push SOB_CLOSURE_ENV(rax)
 30325 00016D42 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30326 00016D45 483D[02000000]          	cmp rax, sob_boolean_false
 30327 00016D4B 0F84DE000000            	je .L_if_else_0127
 30328                                  	; preparing a tail-call
 30329                                  	; preparing a non-tail-call
 30330                                  	; preparing a non-tail-call
 30331 00016D51 48B8-                   	mov rax, L_constants + 2270
 30331 00016D53 [DE08000000000000] 
 30332 00016D5B 50                      	push rax
 30333 00016D5C 488B4520                	mov rax, PARAM(0)	; param i
 30334 00016D60 50                      	push rax
 30335 00016D61 6A02                    	push 2	; arg count
 30336 00016D63 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 30337 00016D6B 803805                  	cmp byte [rax], T_undefined
 30338 00016D6E 0F8493110000            	je L_error_fvar_undefined
 30339 00016D74 803804                  	cmp byte [rax], T_closure
 30340 00016D77 0F850E120000            	jne L_error_non_closure
 30341 00016D7D FF7001                  	push SOB_CLOSURE_ENV(rax)
 30342 00016D80 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30343 00016D83 50                      	push rax
 30344 00016D84 6A01                    	push 1	; arg count
 30345 00016D86 488B4510                	mov rax, ENV
 30346 00016D8A 488B00                  	mov rax, qword [rax + 8 * 0]
 30347 00016D8D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 30348 00016D90 488B00                  	mov rax, qword [rax]
 30349 00016D93 803804                  	cmp byte [rax], T_closure
 30350 00016D96 0F85EF110000            	jne L_error_non_closure
 30351 00016D9C FF7001                  	push SOB_CLOSURE_ENV(rax)
 30352 00016D9F FF5009                  	call SOB_CLOSURE_CODE(rax)
 30353 00016DA2 50                      	push rax
 30354                                  	; preparing a non-tail-call
 30355 00016DA3 488B4520                	mov rax, PARAM(0)	; param i
 30356 00016DA7 50                      	push rax
 30357 00016DA8 6A01                    	push 1	; arg count
 30358 00016DAA 488B4510                	mov rax, ENV
 30359 00016DAE 488B4008                	mov rax, qword [rax + 8 * 1]
 30360 00016DB2 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var thunk
 30361 00016DB6 803804                  	cmp byte [rax], T_closure
 30362 00016DB9 0F85CC110000            	jne L_error_non_closure
 30363 00016DBF FF7001                  	push SOB_CLOSURE_ENV(rax)
 30364 00016DC2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30365 00016DC5 50                      	push rax
 30366 00016DC6 6A02                    	push 2	; arg count
 30367 00016DC8 488B0425[16130000]      	mov rax, qword [free_var_79]	; free var cons
 30368 00016DD0 803805                  	cmp byte [rax], T_undefined
 30369 00016DD3 0F842E110000            	je L_error_fvar_undefined
 30370 00016DD9 803804                  	cmp byte [rax], T_closure
 30371 00016DDC 0F85A9110000            	jne L_error_non_closure
 30372 00016DE2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30373 00016DE5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30374 00016DE8 FF7500                  	push qword[rbp]
 30375 00016DEB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30376 00016DEE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30377 00016DF2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30378 00016DF6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30379 00016DFA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30380 00016DFD 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30381 00016E00 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30382 00016E05 4983C103                	add r9, 3 	 ;for getting to the params
 30383 00016E09 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30384 00016E0D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30385                                  .L_tc_recycle_frame_loop_021b:
 30386 00016E10 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30387 00016E13 7410                    	je .L_tc_recycle_frame_done_021b
 30388 00016E15 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30389 00016E18 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30390 00016E1B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30391 00016E1F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30392 00016E23 EBEB                    	jmp .L_tc_recycle_frame_loop_021b
 30393                                  .L_tc_recycle_frame_done_021b:
 30394 00016E25 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30395 00016E26 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30396 00016E2A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30397 00016E2D EB0A                    	jmp .L_if_end_0127
 30398                                  .L_if_else_0127:
 30399 00016E2F 48B8-                   	mov rax, L_constants + 1
 30399 00016E31 [0100000000000000] 
 30400                                  .L_if_end_0127:
 30401 00016E39 C9                      	leave
 30402 00016E3A C21800                  	ret AND_KILL_FRAME(1)
 30403                                  .L_lambda_simple_end_017b:	; new closure is in rax
 30404 00016E3D 50                      	push rax
 30405 00016E3E 488B4520                	mov rax, PARAM(0)	; param run
 30406 00016E42 8F00                    	pop qword [rax]
 30407 00016E44 48B8-                   	mov rax, sob_void
 30407 00016E46 [0000000000000000] 
 30408                                  
 30409                                  	; preparing a tail-call
 30410 00016E4E 48B8-                   	mov rax, L_constants + 2135
 30410 00016E50 [5708000000000000] 
 30411 00016E58 50                      	push rax
 30412 00016E59 6A01                    	push 1	; arg count
 30413 00016E5B 488B4520                	mov rax, PARAM(0)	; param run
 30414 00016E5F 488B00                  	mov rax, qword [rax]
 30415 00016E62 803804                  	cmp byte [rax], T_closure
 30416 00016E65 0F8520110000            	jne L_error_non_closure
 30417 00016E6B FF7001                  	push SOB_CLOSURE_ENV(rax)
 30418 00016E6E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30419 00016E71 FF7500                  	push qword[rbp]
 30420 00016E74 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30421 00016E77 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30422 00016E7B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30423 00016E7F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30424 00016E83 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30425 00016E86 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30426 00016E89 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30427 00016E8E 4983C103                	add r9, 3 	 ;for getting to the params
 30428 00016E92 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30429 00016E96 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30430                                  .L_tc_recycle_frame_loop_021c:
 30431 00016E99 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30432 00016E9C 7410                    	je .L_tc_recycle_frame_done_021c
 30433 00016E9E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30434 00016EA1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30435 00016EA4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30436 00016EA8 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30437 00016EAC EBEB                    	jmp .L_tc_recycle_frame_loop_021c
 30438                                  .L_tc_recycle_frame_done_021c:
 30439 00016EAE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30440 00016EAF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30441 00016EB3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30442 00016EB6 C9                      	leave
 30443 00016EB7 C21800                  	ret AND_KILL_FRAME(1)
 30444                                  .L_lambda_simple_end_017a:	; new closure is in rax
 30445 00016EBA 803804                  	cmp byte [rax], T_closure
 30446 00016EBD 0F85C8100000            	jne L_error_non_closure
 30447 00016EC3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30448 00016EC6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30449 00016EC9 FF7500                  	push qword[rbp]
 30450 00016ECC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30451 00016ECF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30452 00016ED3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30453 00016ED7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30454 00016EDB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30455 00016EDE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30456 00016EE1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30457 00016EE6 4983C103                	add r9, 3 	 ;for getting to the params
 30458 00016EEA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30459 00016EEE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30460                                  .L_tc_recycle_frame_loop_021d:
 30461 00016EF1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30462 00016EF4 7410                    	je .L_tc_recycle_frame_done_021d
 30463 00016EF6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30464 00016EF9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30465 00016EFC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30466 00016F00 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30467 00016F04 EBEB                    	jmp .L_tc_recycle_frame_loop_021d
 30468                                  .L_tc_recycle_frame_done_021d:
 30469 00016F06 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30470 00016F07 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30471 00016F0B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30472 00016F0E C9                      	leave
 30473 00016F0F C22000                  	ret AND_KILL_FRAME(2)
 30474                                  .L_lambda_simple_end_0179:	; new closure is in rax
 30475 00016F12 48890425[59140000]      	mov qword [free_var_98], rax
 30476 00016F1A 48B8-                   	mov rax, sob_void
 30476 00016F1C [0000000000000000] 
 30477                                  
 30478 00016F24 4889C7                  	mov rdi, rax
 30479 00016F27 E85D130000              	call print_sexpr_if_not_void
 30480 00016F2C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30481 00016F31 E8FE100000              	call malloc
 30482 00016F36 50                      	push rax
 30483 00016F37 BF00000000              	mov rdi, 8 * 0	; new rib
 30484 00016F3C E8F3100000              	call malloc
 30485 00016F41 50                      	push rax
 30486 00016F42 BF08000000              	mov rdi, 8 * 1	; extended env
 30487 00016F47 E8E8100000              	call malloc
 30488 00016F4C 488B7D10                	mov rdi, ENV
 30489 00016F50 BE00000000              	mov rsi, 0
 30490 00016F55 BA01000000              	mov rdx, 1
 30491                                  .L_lambda_simple_env_loop_017c:	; ext_env[i + 1] <-- env[i]
 30492 00016F5A 4883FE00                	cmp rsi, 0
 30493 00016F5E 7410                    	je .L_lambda_simple_env_end_017c
 30494 00016F60 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30495 00016F64 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30496 00016F68 48FFC6                  	inc rsi
 30497 00016F6B 48FFC2                  	inc rdx
 30498 00016F6E EBEA                    	jmp .L_lambda_simple_env_loop_017c
 30499                                  .L_lambda_simple_env_end_017c:
 30500 00016F70 5B                      	pop rbx
 30501 00016F71 BE00000000              	mov rsi, 0
 30502                                  .L_lambda_simple_params_loop_017c:	; copy params
 30503 00016F76 4883FE00                	cmp rsi, 0
 30504 00016F7A 740E                    	je .L_lambda_simple_params_end_017c
 30505 00016F7C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30506 00016F81 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30507 00016F85 48FFC6                  	inc rsi
 30508 00016F88 EBEC                    	jmp .L_lambda_simple_params_loop_017c
 30509                                  .L_lambda_simple_params_end_017c:
 30510 00016F8A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30511 00016F8D 4889C3                  	mov rbx, rax
 30512 00016F90 58                      	pop rax
 30513 00016F91 C60004                  	mov byte [rax], T_closure
 30514 00016F94 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30515 00016F98 48C74009[A56F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_017c
 30516 00016FA0 E986040000              	jmp .L_lambda_simple_end_017c
 30517                                  .L_lambda_simple_code_017c:	; lambda-simple body
 30518 00016FA5 48837C241002            	cmp qword [rsp + 8 * 2], 2
 30519 00016FAB 740B                    	je .L_lambda_simple_arity_check_ok_017c
 30520 00016FAD FF742410                	push qword [rsp + 8 * 2]
 30521 00016FB1 6A02                    	push 2
 30522 00016FB3 E935100000              	jmp L_error_incorrect_arity_simple
 30523                                  .L_lambda_simple_arity_check_ok_017c:
 30524 00016FB8 C8000000                	enter 0, 0
 30525                                  	; preparing a tail-call
 30526                                  	; preparing a non-tail-call
 30527 00016FBC 488B4520                	mov rax, PARAM(0)	; param n
 30528 00016FC0 50                      	push rax
 30529 00016FC1 6A01                    	push 1	; arg count
 30530 00016FC3 488B0425[6A140000]      	mov rax, qword [free_var_99]	; free var make-string
 30531 00016FCB 803805                  	cmp byte [rax], T_undefined
 30532 00016FCE 0F84330F0000            	je L_error_fvar_undefined
 30533 00016FD4 803804                  	cmp byte [rax], T_closure
 30534 00016FD7 0F85AE0F0000            	jne L_error_non_closure
 30535 00016FDD FF7001                  	push SOB_CLOSURE_ENV(rax)
 30536 00016FE0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30537 00016FE3 50                      	push rax
 30538 00016FE4 6A01                    	push 1	; arg count
 30539 00016FE6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30540 00016FEB E844100000              	call malloc
 30541 00016FF0 50                      	push rax
 30542 00016FF1 BF10000000              	mov rdi, 8 * 2	; new rib
 30543 00016FF6 E839100000              	call malloc
 30544 00016FFB 50                      	push rax
 30545 00016FFC BF10000000              	mov rdi, 8 * 2	; extended env
 30546 00017001 E82E100000              	call malloc
 30547 00017006 488B7D10                	mov rdi, ENV
 30548 0001700A BE00000000              	mov rsi, 0
 30549 0001700F BA01000000              	mov rdx, 1
 30550                                  .L_lambda_simple_env_loop_017d:	; ext_env[i + 1] <-- env[i]
 30551 00017014 4883FE01                	cmp rsi, 1
 30552 00017018 7410                    	je .L_lambda_simple_env_end_017d
 30553 0001701A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30554 0001701E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30555 00017022 48FFC6                  	inc rsi
 30556 00017025 48FFC2                  	inc rdx
 30557 00017028 EBEA                    	jmp .L_lambda_simple_env_loop_017d
 30558                                  .L_lambda_simple_env_end_017d:
 30559 0001702A 5B                      	pop rbx
 30560 0001702B BE00000000              	mov rsi, 0
 30561                                  .L_lambda_simple_params_loop_017d:	; copy params
 30562 00017030 4883FE02                	cmp rsi, 2
 30563 00017034 740E                    	je .L_lambda_simple_params_end_017d
 30564 00017036 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30565 0001703B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30566 0001703F 48FFC6                  	inc rsi
 30567 00017042 EBEC                    	jmp .L_lambda_simple_params_loop_017d
 30568                                  .L_lambda_simple_params_end_017d:
 30569 00017044 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30570 00017047 4889C3                  	mov rbx, rax
 30571 0001704A 58                      	pop rax
 30572 0001704B C60004                  	mov byte [rax], T_closure
 30573 0001704E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30574 00017052 48C74009[5F700100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_017d
 30575 0001705A E974030000              	jmp .L_lambda_simple_end_017d
 30576                                  .L_lambda_simple_code_017d:	; lambda-simple body
 30577 0001705F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 30578 00017065 740B                    	je .L_lambda_simple_arity_check_ok_017d
 30579 00017067 FF742410                	push qword [rsp + 8 * 2]
 30580 0001706B 6A01                    	push 1
 30581 0001706D E97B0F0000              	jmp L_error_incorrect_arity_simple
 30582                                  .L_lambda_simple_arity_check_ok_017d:
 30583 00017072 C8000000                	enter 0, 0
 30584                                  	; preparing a tail-call
 30585 00017076 48B8-                   	mov rax, L_constants + 1993
 30585 00017078 [C907000000000000] 
 30586 00017080 50                      	push rax
 30587 00017081 6A01                    	push 1	; arg count
 30588 00017083 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30589 00017088 E8A70F0000              	call malloc
 30590 0001708D 50                      	push rax
 30591 0001708E BF08000000              	mov rdi, 8 * 1	; new rib
 30592 00017093 E89C0F0000              	call malloc
 30593 00017098 50                      	push rax
 30594 00017099 BF18000000              	mov rdi, 8 * 3	; extended env
 30595 0001709E E8910F0000              	call malloc
 30596 000170A3 488B7D10                	mov rdi, ENV
 30597 000170A7 BE00000000              	mov rsi, 0
 30598 000170AC BA01000000              	mov rdx, 1
 30599                                  .L_lambda_simple_env_loop_017e:	; ext_env[i + 1] <-- env[i]
 30600 000170B1 4883FE02                	cmp rsi, 2
 30601 000170B5 7410                    	je .L_lambda_simple_env_end_017e
 30602 000170B7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30603 000170BB 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30604 000170BF 48FFC6                  	inc rsi
 30605 000170C2 48FFC2                  	inc rdx
 30606 000170C5 EBEA                    	jmp .L_lambda_simple_env_loop_017e
 30607                                  .L_lambda_simple_env_end_017e:
 30608 000170C7 5B                      	pop rbx
 30609 000170C8 BE00000000              	mov rsi, 0
 30610                                  .L_lambda_simple_params_loop_017e:	; copy params
 30611 000170CD 4883FE01                	cmp rsi, 1
 30612 000170D1 740E                    	je .L_lambda_simple_params_end_017e
 30613 000170D3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30614 000170D8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30615 000170DC 48FFC6                  	inc rsi
 30616 000170DF EBEC                    	jmp .L_lambda_simple_params_loop_017e
 30617                                  .L_lambda_simple_params_end_017e:
 30618 000170E1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30619 000170E4 4889C3                  	mov rbx, rax
 30620 000170E7 58                      	pop rax
 30621 000170E8 C60004                  	mov byte [rax], T_closure
 30622 000170EB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30623 000170EF 48C74009[FC700100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_017e
 30624 000170F7 E97F020000              	jmp .L_lambda_simple_end_017e
 30625                                  .L_lambda_simple_code_017e:	; lambda-simple body
 30626 000170FC 48837C241001            	cmp qword [rsp + 8 * 2], 1
 30627 00017102 740B                    	je .L_lambda_simple_arity_check_ok_017e
 30628 00017104 FF742410                	push qword [rsp + 8 * 2]
 30629 00017108 6A01                    	push 1
 30630 0001710A E9DE0E0000              	jmp L_error_incorrect_arity_simple
 30631                                  .L_lambda_simple_arity_check_ok_017e:
 30632 0001710F C8000000                	enter 0, 0
 30633 00017113 BF08000000              	mov rdi, 8*1
 30634 00017118 E8170F0000              	call malloc
 30635 0001711D 488B5D20                	mov rbx, PARAM(0)
 30636 00017121 488918                  	mov qword[rax], rbx
 30637 00017124 48894520                	mov PARAM(0), rax
 30638 00017128 48B8-                   	mov rax, sob_void
 30638 0001712A [0000000000000000] 
 30639                                  
 30640 00017132 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30641 00017137 E8F80E0000              	call malloc
 30642 0001713C 50                      	push rax
 30643 0001713D BF08000000              	mov rdi, 8 * 1	; new rib
 30644 00017142 E8ED0E0000              	call malloc
 30645 00017147 50                      	push rax
 30646 00017148 BF20000000              	mov rdi, 8 * 4	; extended env
 30647 0001714D E8E20E0000              	call malloc
 30648 00017152 488B7D10                	mov rdi, ENV
 30649 00017156 BE00000000              	mov rsi, 0
 30650 0001715B BA01000000              	mov rdx, 1
 30651                                  .L_lambda_simple_env_loop_017f:	; ext_env[i + 1] <-- env[i]
 30652 00017160 4883FE03                	cmp rsi, 3
 30653 00017164 7410                    	je .L_lambda_simple_env_end_017f
 30654 00017166 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30655 0001716A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30656 0001716E 48FFC6                  	inc rsi
 30657 00017171 48FFC2                  	inc rdx
 30658 00017174 EBEA                    	jmp .L_lambda_simple_env_loop_017f
 30659                                  .L_lambda_simple_env_end_017f:
 30660 00017176 5B                      	pop rbx
 30661 00017177 BE00000000              	mov rsi, 0
 30662                                  .L_lambda_simple_params_loop_017f:	; copy params
 30663 0001717C 4883FE01                	cmp rsi, 1
 30664 00017180 740E                    	je .L_lambda_simple_params_end_017f
 30665 00017182 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30666 00017187 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30667 0001718B 48FFC6                  	inc rsi
 30668 0001718E EBEC                    	jmp .L_lambda_simple_params_loop_017f
 30669                                  .L_lambda_simple_params_end_017f:
 30670 00017190 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30671 00017193 4889C3                  	mov rbx, rax
 30672 00017196 58                      	pop rax
 30673 00017197 C60004                  	mov byte [rax], T_closure
 30674 0001719A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30675 0001719E 48C74009[AB710100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_017f
 30676 000171A6 E953010000              	jmp .L_lambda_simple_end_017f
 30677                                  .L_lambda_simple_code_017f:	; lambda-simple body
 30678 000171AB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 30679 000171B1 740B                    	je .L_lambda_simple_arity_check_ok_017f
 30680 000171B3 FF742410                	push qword [rsp + 8 * 2]
 30681 000171B7 6A01                    	push 1
 30682 000171B9 E92F0E0000              	jmp L_error_incorrect_arity_simple
 30683                                  .L_lambda_simple_arity_check_ok_017f:
 30684 000171BE C8000000                	enter 0, 0
 30685                                  	; preparing a non-tail-call
 30686 000171C2 488B4510                	mov rax, ENV
 30687 000171C6 488B4010                	mov rax, qword [rax + 8 * 2]
 30688 000171CA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 30689 000171CD 50                      	push rax
 30690 000171CE 488B4520                	mov rax, PARAM(0)	; param i
 30691 000171D2 50                      	push rax
 30692 000171D3 6A02                    	push 2	; arg count
 30693 000171D5 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 30694 000171DD 803805                  	cmp byte [rax], T_undefined
 30695 000171E0 0F84210D0000            	je L_error_fvar_undefined
 30696 000171E6 803804                  	cmp byte [rax], T_closure
 30697 000171E9 0F859C0D0000            	jne L_error_non_closure
 30698 000171EF FF7001                  	push SOB_CLOSURE_ENV(rax)
 30699 000171F2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30700 000171F5 483D[02000000]          	cmp rax, sob_boolean_false
 30701 000171FB 0F84EE000000            	je .L_if_else_0128
 30702                                  	; preparing a non-tail-call
 30703                                  	; preparing a non-tail-call
 30704 00017201 488B4520                	mov rax, PARAM(0)	; param i
 30705 00017205 50                      	push rax
 30706 00017206 6A01                    	push 1	; arg count
 30707 00017208 488B4510                	mov rax, ENV
 30708 0001720C 488B4010                	mov rax, qword [rax + 8 * 2]
 30709 00017210 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var thunk
 30710 00017214 803804                  	cmp byte [rax], T_closure
 30711 00017217 0F856E0D0000            	jne L_error_non_closure
 30712 0001721D FF7001                  	push SOB_CLOSURE_ENV(rax)
 30713 00017220 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30714 00017223 50                      	push rax
 30715 00017224 488B4520                	mov rax, PARAM(0)	; param i
 30716 00017228 50                      	push rax
 30717 00017229 488B4510                	mov rax, ENV
 30718 0001722D 488B4008                	mov rax, qword [rax + 8 * 1]
 30719 00017231 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 30720 00017234 50                      	push rax
 30721 00017235 6A03                    	push 3	; arg count
 30722 00017237 488B0425[8A160000]      	mov rax, qword [free_var_131]	; free var string-set!
 30723 0001723F 803805                  	cmp byte [rax], T_undefined
 30724 00017242 0F84BF0C0000            	je L_error_fvar_undefined
 30725 00017248 803804                  	cmp byte [rax], T_closure
 30726 0001724B 0F853A0D0000            	jne L_error_non_closure
 30727 00017251 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30728 00017254 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30729                                  
 30730                                  	; preparing a tail-call
 30731                                  	; preparing a non-tail-call
 30732 00017257 48B8-                   	mov rax, L_constants + 2270
 30732 00017259 [DE08000000000000] 
 30733 00017261 50                      	push rax
 30734 00017262 488B4520                	mov rax, PARAM(0)	; param i
 30735 00017266 50                      	push rax
 30736 00017267 6A02                    	push 2	; arg count
 30737 00017269 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 30738 00017271 803805                  	cmp byte [rax], T_undefined
 30739 00017274 0F848D0C0000            	je L_error_fvar_undefined
 30740 0001727A 803804                  	cmp byte [rax], T_closure
 30741 0001727D 0F85080D0000            	jne L_error_non_closure
 30742 00017283 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30743 00017286 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30744 00017289 50                      	push rax
 30745 0001728A 6A01                    	push 1	; arg count
 30746 0001728C 488B4510                	mov rax, ENV
 30747 00017290 488B00                  	mov rax, qword [rax + 8 * 0]
 30748 00017293 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 30749 00017296 488B00                  	mov rax, qword [rax]
 30750 00017299 803804                  	cmp byte [rax], T_closure
 30751 0001729C 0F85E90C0000            	jne L_error_non_closure
 30752 000172A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30753 000172A5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30754 000172A8 FF7500                  	push qword[rbp]
 30755 000172AB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30756 000172AE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30757 000172B2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30758 000172B6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30759 000172BA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30760 000172BD 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30761 000172C0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30762 000172C5 4983C103                	add r9, 3 	 ;for getting to the params
 30763 000172C9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30764 000172CD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30765                                  .L_tc_recycle_frame_loop_021e:
 30766 000172D0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30767 000172D3 7410                    	je .L_tc_recycle_frame_done_021e
 30768 000172D5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30769 000172D8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30770 000172DB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30771 000172DF 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30772 000172E3 EBEB                    	jmp .L_tc_recycle_frame_loop_021e
 30773                                  .L_tc_recycle_frame_done_021e:
 30774 000172E5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30775 000172E6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30776 000172EA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30777 000172ED EB0B                    	jmp .L_if_end_0128
 30778                                  .L_if_else_0128:
 30779 000172EF 488B4510                	mov rax, ENV
 30780 000172F3 488B4008                	mov rax, qword [rax + 8 * 1]
 30781 000172F7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 30782                                  .L_if_end_0128:
 30783 000172FA C9                      	leave
 30784 000172FB C21800                  	ret AND_KILL_FRAME(1)
 30785                                  .L_lambda_simple_end_017f:	; new closure is in rax
 30786 000172FE 50                      	push rax
 30787 000172FF 488B4520                	mov rax, PARAM(0)	; param run
 30788 00017303 8F00                    	pop qword [rax]
 30789 00017305 48B8-                   	mov rax, sob_void
 30789 00017307 [0000000000000000] 
 30790                                  
 30791                                  	; preparing a tail-call
 30792 0001730F 48B8-                   	mov rax, L_constants + 2135
 30792 00017311 [5708000000000000] 
 30793 00017319 50                      	push rax
 30794 0001731A 6A01                    	push 1	; arg count
 30795 0001731C 488B4520                	mov rax, PARAM(0)	; param run
 30796 00017320 488B00                  	mov rax, qword [rax]
 30797 00017323 803804                  	cmp byte [rax], T_closure
 30798 00017326 0F855F0C0000            	jne L_error_non_closure
 30799 0001732C FF7001                  	push SOB_CLOSURE_ENV(rax)
 30800 0001732F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30801 00017332 FF7500                  	push qword[rbp]
 30802 00017335 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30803 00017338 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30804 0001733C 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30805 00017340 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30806 00017344 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30807 00017347 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30808 0001734A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30809 0001734F 4983C103                	add r9, 3 	 ;for getting to the params
 30810 00017353 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30811 00017357 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30812                                  .L_tc_recycle_frame_loop_021f:
 30813 0001735A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30814 0001735D 7410                    	je .L_tc_recycle_frame_done_021f
 30815 0001735F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30816 00017362 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30817 00017365 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30818 00017369 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30819 0001736D EBEB                    	jmp .L_tc_recycle_frame_loop_021f
 30820                                  .L_tc_recycle_frame_done_021f:
 30821 0001736F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30822 00017370 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30823 00017374 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30824 00017377 C9                      	leave
 30825 00017378 C21800                  	ret AND_KILL_FRAME(1)
 30826                                  .L_lambda_simple_end_017e:	; new closure is in rax
 30827 0001737B 803804                  	cmp byte [rax], T_closure
 30828 0001737E 0F85070C0000            	jne L_error_non_closure
 30829 00017384 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30830 00017387 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30831 0001738A FF7500                  	push qword[rbp]
 30832 0001738D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30833 00017390 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30834 00017394 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30835 00017398 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30836 0001739C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30837 0001739F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30838 000173A2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30839 000173A7 4983C103                	add r9, 3 	 ;for getting to the params
 30840 000173AB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30841 000173AF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30842                                  .L_tc_recycle_frame_loop_0220:
 30843 000173B2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30844 000173B5 7410                    	je .L_tc_recycle_frame_done_0220
 30845 000173B7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30846 000173BA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30847 000173BD 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30848 000173C1 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30849 000173C5 EBEB                    	jmp .L_tc_recycle_frame_loop_0220
 30850                                  .L_tc_recycle_frame_done_0220:
 30851 000173C7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30852 000173C8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30853 000173CC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30854 000173CF C9                      	leave
 30855 000173D0 C21800                  	ret AND_KILL_FRAME(1)
 30856                                  .L_lambda_simple_end_017d:	; new closure is in rax
 30857 000173D3 803804                  	cmp byte [rax], T_closure
 30858 000173D6 0F85AF0B0000            	jne L_error_non_closure
 30859 000173DC FF7001                  	push SOB_CLOSURE_ENV(rax)
 30860 000173DF FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30861 000173E2 FF7500                  	push qword[rbp]
 30862 000173E5 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30863 000173E8 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30864 000173EC 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30865 000173F0 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30866 000173F4 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30867 000173F7 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30868 000173FA 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30869 000173FF 4983C103                	add r9, 3 	 ;for getting to the params
 30870 00017403 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30871 00017407 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30872                                  .L_tc_recycle_frame_loop_0221:
 30873 0001740A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30874 0001740D 7410                    	je .L_tc_recycle_frame_done_0221
 30875 0001740F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30876 00017412 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30877 00017415 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30878 00017419 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30879 0001741D EBEB                    	jmp .L_tc_recycle_frame_loop_0221
 30880                                  .L_tc_recycle_frame_done_0221:
 30881 0001741F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30882 00017420 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30883 00017424 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30884 00017427 C9                      	leave
 30885 00017428 C22000                  	ret AND_KILL_FRAME(2)
 30886                                  .L_lambda_simple_end_017c:	; new closure is in rax
 30887 0001742B 48890425[7B140000]      	mov qword [free_var_100], rax
 30888 00017433 48B8-                   	mov rax, sob_void
 30888 00017435 [0000000000000000] 
 30889                                  
 30890 0001743D 4889C7                  	mov rdi, rax
 30891 00017440 E8440E0000              	call print_sexpr_if_not_void
 30892 00017445 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30893 0001744A E8E50B0000              	call malloc
 30894 0001744F 50                      	push rax
 30895 00017450 BF00000000              	mov rdi, 8 * 0	; new rib
 30896 00017455 E8DA0B0000              	call malloc
 30897 0001745A 50                      	push rax
 30898 0001745B BF08000000              	mov rdi, 8 * 1	; extended env
 30899 00017460 E8CF0B0000              	call malloc
 30900 00017465 488B7D10                	mov rdi, ENV
 30901 00017469 BE00000000              	mov rsi, 0
 30902 0001746E BA01000000              	mov rdx, 1
 30903                                  .L_lambda_simple_env_loop_0180:	; ext_env[i + 1] <-- env[i]
 30904 00017473 4883FE00                	cmp rsi, 0
 30905 00017477 7410                    	je .L_lambda_simple_env_end_0180
 30906 00017479 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30907 0001747D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30908 00017481 48FFC6                  	inc rsi
 30909 00017484 48FFC2                  	inc rdx
 30910 00017487 EBEA                    	jmp .L_lambda_simple_env_loop_0180
 30911                                  .L_lambda_simple_env_end_0180:
 30912 00017489 5B                      	pop rbx
 30913 0001748A BE00000000              	mov rsi, 0
 30914                                  .L_lambda_simple_params_loop_0180:	; copy params
 30915 0001748F 4883FE00                	cmp rsi, 0
 30916 00017493 740E                    	je .L_lambda_simple_params_end_0180
 30917 00017495 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30918 0001749A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30919 0001749E 48FFC6                  	inc rsi
 30920 000174A1 EBEC                    	jmp .L_lambda_simple_params_loop_0180
 30921                                  .L_lambda_simple_params_end_0180:
 30922 000174A3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30923 000174A6 4889C3                  	mov rbx, rax
 30924 000174A9 58                      	pop rax
 30925 000174AA C60004                  	mov byte [rax], T_closure
 30926 000174AD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30927 000174B1 48C74009[BE740100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0180
 30928 000174B9 E986040000              	jmp .L_lambda_simple_end_0180
 30929                                  .L_lambda_simple_code_0180:	; lambda-simple body
 30930 000174BE 48837C241002            	cmp qword [rsp + 8 * 2], 2
 30931 000174C4 740B                    	je .L_lambda_simple_arity_check_ok_0180
 30932 000174C6 FF742410                	push qword [rsp + 8 * 2]
 30933 000174CA 6A02                    	push 2
 30934 000174CC E91C0B0000              	jmp L_error_incorrect_arity_simple
 30935                                  .L_lambda_simple_arity_check_ok_0180:
 30936 000174D1 C8000000                	enter 0, 0
 30937                                  	; preparing a tail-call
 30938                                  	; preparing a non-tail-call
 30939 000174D5 488B4520                	mov rax, PARAM(0)	; param n
 30940 000174D9 50                      	push rax
 30941 000174DA 6A01                    	push 1	; arg count
 30942 000174DC 488B0425[8C140000]      	mov rax, qword [free_var_101]	; free var make-vector
 30943 000174E4 803805                  	cmp byte [rax], T_undefined
 30944 000174E7 0F841A0A0000            	je L_error_fvar_undefined
 30945 000174ED 803804                  	cmp byte [rax], T_closure
 30946 000174F0 0F85950A0000            	jne L_error_non_closure
 30947 000174F6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30948 000174F9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30949 000174FC 50                      	push rax
 30950 000174FD 6A01                    	push 1	; arg count
 30951 000174FF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30952 00017504 E82B0B0000              	call malloc
 30953 00017509 50                      	push rax
 30954 0001750A BF10000000              	mov rdi, 8 * 2	; new rib
 30955 0001750F E8200B0000              	call malloc
 30956 00017514 50                      	push rax
 30957 00017515 BF10000000              	mov rdi, 8 * 2	; extended env
 30958 0001751A E8150B0000              	call malloc
 30959 0001751F 488B7D10                	mov rdi, ENV
 30960 00017523 BE00000000              	mov rsi, 0
 30961 00017528 BA01000000              	mov rdx, 1
 30962                                  .L_lambda_simple_env_loop_0181:	; ext_env[i + 1] <-- env[i]
 30963 0001752D 4883FE01                	cmp rsi, 1
 30964 00017531 7410                    	je .L_lambda_simple_env_end_0181
 30965 00017533 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30966 00017537 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30967 0001753B 48FFC6                  	inc rsi
 30968 0001753E 48FFC2                  	inc rdx
 30969 00017541 EBEA                    	jmp .L_lambda_simple_env_loop_0181
 30970                                  .L_lambda_simple_env_end_0181:
 30971 00017543 5B                      	pop rbx
 30972 00017544 BE00000000              	mov rsi, 0
 30973                                  .L_lambda_simple_params_loop_0181:	; copy params
 30974 00017549 4883FE02                	cmp rsi, 2
 30975 0001754D 740E                    	je .L_lambda_simple_params_end_0181
 30976 0001754F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30977 00017554 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30978 00017558 48FFC6                  	inc rsi
 30979 0001755B EBEC                    	jmp .L_lambda_simple_params_loop_0181
 30980                                  .L_lambda_simple_params_end_0181:
 30981 0001755D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30982 00017560 4889C3                  	mov rbx, rax
 30983 00017563 58                      	pop rax
 30984 00017564 C60004                  	mov byte [rax], T_closure
 30985 00017567 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30986 0001756B 48C74009[78750100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0181
 30987 00017573 E974030000              	jmp .L_lambda_simple_end_0181
 30988                                  .L_lambda_simple_code_0181:	; lambda-simple body
 30989 00017578 48837C241001            	cmp qword [rsp + 8 * 2], 1
 30990 0001757E 740B                    	je .L_lambda_simple_arity_check_ok_0181
 30991 00017580 FF742410                	push qword [rsp + 8 * 2]
 30992 00017584 6A01                    	push 1
 30993 00017586 E9620A0000              	jmp L_error_incorrect_arity_simple
 30994                                  .L_lambda_simple_arity_check_ok_0181:
 30995 0001758B C8000000                	enter 0, 0
 30996                                  	; preparing a tail-call
 30997 0001758F 48B8-                   	mov rax, L_constants + 1993
 30997 00017591 [C907000000000000] 
 30998 00017599 50                      	push rax
 30999 0001759A 6A01                    	push 1	; arg count
 31000 0001759C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 31001 000175A1 E88E0A0000              	call malloc
 31002 000175A6 50                      	push rax
 31003 000175A7 BF08000000              	mov rdi, 8 * 1	; new rib
 31004 000175AC E8830A0000              	call malloc
 31005 000175B1 50                      	push rax
 31006 000175B2 BF18000000              	mov rdi, 8 * 3	; extended env
 31007 000175B7 E8780A0000              	call malloc
 31008 000175BC 488B7D10                	mov rdi, ENV
 31009 000175C0 BE00000000              	mov rsi, 0
 31010 000175C5 BA01000000              	mov rdx, 1
 31011                                  .L_lambda_simple_env_loop_0182:	; ext_env[i + 1] <-- env[i]
 31012 000175CA 4883FE02                	cmp rsi, 2
 31013 000175CE 7410                    	je .L_lambda_simple_env_end_0182
 31014 000175D0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 31015 000175D4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 31016 000175D8 48FFC6                  	inc rsi
 31017 000175DB 48FFC2                  	inc rdx
 31018 000175DE EBEA                    	jmp .L_lambda_simple_env_loop_0182
 31019                                  .L_lambda_simple_env_end_0182:
 31020 000175E0 5B                      	pop rbx
 31021 000175E1 BE00000000              	mov rsi, 0
 31022                                  .L_lambda_simple_params_loop_0182:	; copy params
 31023 000175E6 4883FE01                	cmp rsi, 1
 31024 000175EA 740E                    	je .L_lambda_simple_params_end_0182
 31025 000175EC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 31026 000175F1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 31027 000175F5 48FFC6                  	inc rsi
 31028 000175F8 EBEC                    	jmp .L_lambda_simple_params_loop_0182
 31029                                  .L_lambda_simple_params_end_0182:
 31030 000175FA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 31031 000175FD 4889C3                  	mov rbx, rax
 31032 00017600 58                      	pop rax
 31033 00017601 C60004                  	mov byte [rax], T_closure
 31034 00017604 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 31035 00017608 48C74009[15760100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0182
 31036 00017610 E97F020000              	jmp .L_lambda_simple_end_0182
 31037                                  .L_lambda_simple_code_0182:	; lambda-simple body
 31038 00017615 48837C241001            	cmp qword [rsp + 8 * 2], 1
 31039 0001761B 740B                    	je .L_lambda_simple_arity_check_ok_0182
 31040 0001761D FF742410                	push qword [rsp + 8 * 2]
 31041 00017621 6A01                    	push 1
 31042 00017623 E9C5090000              	jmp L_error_incorrect_arity_simple
 31043                                  .L_lambda_simple_arity_check_ok_0182:
 31044 00017628 C8000000                	enter 0, 0
 31045 0001762C BF08000000              	mov rdi, 8*1
 31046 00017631 E8FE090000              	call malloc
 31047 00017636 488B5D20                	mov rbx, PARAM(0)
 31048 0001763A 488918                  	mov qword[rax], rbx
 31049 0001763D 48894520                	mov PARAM(0), rax
 31050 00017641 48B8-                   	mov rax, sob_void
 31050 00017643 [0000000000000000] 
 31051                                  
 31052 0001764B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 31053 00017650 E8DF090000              	call malloc
 31054 00017655 50                      	push rax
 31055 00017656 BF08000000              	mov rdi, 8 * 1	; new rib
 31056 0001765B E8D4090000              	call malloc
 31057 00017660 50                      	push rax
 31058 00017661 BF20000000              	mov rdi, 8 * 4	; extended env
 31059 00017666 E8C9090000              	call malloc
 31060 0001766B 488B7D10                	mov rdi, ENV
 31061 0001766F BE00000000              	mov rsi, 0
 31062 00017674 BA01000000              	mov rdx, 1
 31063                                  .L_lambda_simple_env_loop_0183:	; ext_env[i + 1] <-- env[i]
 31064 00017679 4883FE03                	cmp rsi, 3
 31065 0001767D 7410                    	je .L_lambda_simple_env_end_0183
 31066 0001767F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 31067 00017683 48890CD0                	mov qword [rax + 8 * rdx], rcx
 31068 00017687 48FFC6                  	inc rsi
 31069 0001768A 48FFC2                  	inc rdx
 31070 0001768D EBEA                    	jmp .L_lambda_simple_env_loop_0183
 31071                                  .L_lambda_simple_env_end_0183:
 31072 0001768F 5B                      	pop rbx
 31073 00017690 BE00000000              	mov rsi, 0
 31074                                  .L_lambda_simple_params_loop_0183:	; copy params
 31075 00017695 4883FE01                	cmp rsi, 1
 31076 00017699 740E                    	je .L_lambda_simple_params_end_0183
 31077 0001769B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 31078 000176A0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 31079 000176A4 48FFC6                  	inc rsi
 31080 000176A7 EBEC                    	jmp .L_lambda_simple_params_loop_0183
 31081                                  .L_lambda_simple_params_end_0183:
 31082 000176A9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 31083 000176AC 4889C3                  	mov rbx, rax
 31084 000176AF 58                      	pop rax
 31085 000176B0 C60004                  	mov byte [rax], T_closure
 31086 000176B3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 31087 000176B7 48C74009[C4760100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0183
 31088 000176BF E953010000              	jmp .L_lambda_simple_end_0183
 31089                                  .L_lambda_simple_code_0183:	; lambda-simple body
 31090 000176C4 48837C241001            	cmp qword [rsp + 8 * 2], 1
 31091 000176CA 740B                    	je .L_lambda_simple_arity_check_ok_0183
 31092 000176CC FF742410                	push qword [rsp + 8 * 2]
 31093 000176D0 6A01                    	push 1
 31094 000176D2 E916090000              	jmp L_error_incorrect_arity_simple
 31095                                  .L_lambda_simple_arity_check_ok_0183:
 31096 000176D7 C8000000                	enter 0, 0
 31097                                  	; preparing a non-tail-call
 31098 000176DB 488B4510                	mov rax, ENV
 31099 000176DF 488B4010                	mov rax, qword [rax + 8 * 2]
 31100 000176E3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 31101 000176E6 50                      	push rax
 31102 000176E7 488B4520                	mov rax, PARAM(0)	; param i
 31103 000176EB 50                      	push rax
 31104 000176EC 6A02                    	push 2	; arg count
 31105 000176EE 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 31106 000176F6 803805                  	cmp byte [rax], T_undefined
 31107 000176F9 0F8408080000            	je L_error_fvar_undefined
 31108 000176FF 803804                  	cmp byte [rax], T_closure
 31109 00017702 0F8583080000            	jne L_error_non_closure
 31110 00017708 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31111 0001770B FF5009                  	call SOB_CLOSURE_CODE(rax)
 31112 0001770E 483D[02000000]          	cmp rax, sob_boolean_false
 31113 00017714 0F84EE000000            	je .L_if_else_0129
 31114                                  	; preparing a non-tail-call
 31115                                  	; preparing a non-tail-call
 31116 0001771A 488B4520                	mov rax, PARAM(0)	; param i
 31117 0001771E 50                      	push rax
 31118 0001771F 6A01                    	push 1	; arg count
 31119 00017721 488B4510                	mov rax, ENV
 31120 00017725 488B4010                	mov rax, qword [rax + 8 * 2]
 31121 00017729 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var thunk
 31122 0001772D 803804                  	cmp byte [rax], T_closure
 31123 00017730 0F8555080000            	jne L_error_non_closure
 31124 00017736 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31125 00017739 FF5009                  	call SOB_CLOSURE_CODE(rax)
 31126 0001773C 50                      	push rax
 31127 0001773D 488B4520                	mov rax, PARAM(0)	; param i
 31128 00017741 50                      	push rax
 31129 00017742 488B4510                	mov rax, ENV
 31130 00017746 488B4008                	mov rax, qword [rax + 8 * 1]
 31131 0001774A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 31132 0001774D 50                      	push rax
 31133 0001774E 6A03                    	push 3	; arg count
 31134 00017750 488B0425[9A170000]      	mov rax, qword [free_var_147]	; free var vector-set!
 31135 00017758 803805                  	cmp byte [rax], T_undefined
 31136 0001775B 0F84A6070000            	je L_error_fvar_undefined
 31137 00017761 803804                  	cmp byte [rax], T_closure
 31138 00017764 0F8521080000            	jne L_error_non_closure
 31139 0001776A FF7001                  	push SOB_CLOSURE_ENV(rax)
 31140 0001776D FF5009                  	call SOB_CLOSURE_CODE(rax)
 31141                                  
 31142                                  	; preparing a tail-call
 31143                                  	; preparing a non-tail-call
 31144 00017770 48B8-                   	mov rax, L_constants + 2270
 31144 00017772 [DE08000000000000] 
 31145 0001777A 50                      	push rax
 31146 0001777B 488B4520                	mov rax, PARAM(0)	; param i
 31147 0001777F 50                      	push rax
 31148 00017780 6A02                    	push 2	; arg count
 31149 00017782 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 31150 0001778A 803805                  	cmp byte [rax], T_undefined
 31151 0001778D 0F8474070000            	je L_error_fvar_undefined
 31152 00017793 803804                  	cmp byte [rax], T_closure
 31153 00017796 0F85EF070000            	jne L_error_non_closure
 31154 0001779C FF7001                  	push SOB_CLOSURE_ENV(rax)
 31155 0001779F FF5009                  	call SOB_CLOSURE_CODE(rax)
 31156 000177A2 50                      	push rax
 31157 000177A3 6A01                    	push 1	; arg count
 31158 000177A5 488B4510                	mov rax, ENV
 31159 000177A9 488B00                  	mov rax, qword [rax + 8 * 0]
 31160 000177AC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 31161 000177AF 488B00                  	mov rax, qword [rax]
 31162 000177B2 803804                  	cmp byte [rax], T_closure
 31163 000177B5 0F85D0070000            	jne L_error_non_closure
 31164 000177BB FF7001                  	push SOB_CLOSURE_ENV(rax)
 31165 000177BE FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 31166 000177C1 FF7500                  	push qword[rbp]
 31167 000177C4 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 31168 000177C7 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 31169 000177CB 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 31170 000177CF 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 31171 000177D3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 31172 000177D6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 31173 000177D9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 31174 000177DE 4983C103                	add r9, 3 	 ;for getting to the params
 31175 000177E2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 31176 000177E6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 31177                                  .L_tc_recycle_frame_loop_0222:
 31178 000177E9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 31179 000177EC 7410                    	je .L_tc_recycle_frame_done_0222
 31180 000177EE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 31181 000177F1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 31182 000177F4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 31183 000177F8 4983E808                	sub r8, 8	 ;move the top of the stack one down
 31184 000177FC EBEB                    	jmp .L_tc_recycle_frame_loop_0222
 31185                                  .L_tc_recycle_frame_done_0222:
 31186 000177FE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 31187 000177FF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 31188 00017803 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 31189 00017806 EB0B                    	jmp .L_if_end_0129
 31190                                  .L_if_else_0129:
 31191 00017808 488B4510                	mov rax, ENV
 31192 0001780C 488B4008                	mov rax, qword [rax + 8 * 1]
 31193 00017810 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 31194                                  .L_if_end_0129:
 31195 00017813 C9                      	leave
 31196 00017814 C21800                  	ret AND_KILL_FRAME(1)
 31197                                  .L_lambda_simple_end_0183:	; new closure is in rax
 31198 00017817 50                      	push rax
 31199 00017818 488B4520                	mov rax, PARAM(0)	; param run
 31200 0001781C 8F00                    	pop qword [rax]
 31201 0001781E 48B8-                   	mov rax, sob_void
 31201 00017820 [0000000000000000] 
 31202                                  
 31203                                  	; preparing a tail-call
 31204 00017828 48B8-                   	mov rax, L_constants + 2135
 31204 0001782A [5708000000000000] 
 31205 00017832 50                      	push rax
 31206 00017833 6A01                    	push 1	; arg count
 31207 00017835 488B4520                	mov rax, PARAM(0)	; param run
 31208 00017839 488B00                  	mov rax, qword [rax]
 31209 0001783C 803804                  	cmp byte [rax], T_closure
 31210 0001783F 0F8546070000            	jne L_error_non_closure
 31211 00017845 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31212 00017848 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 31213 0001784B FF7500                  	push qword[rbp]
 31214 0001784E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 31215 00017851 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 31216 00017855 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 31217 00017859 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 31218 0001785D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 31219 00017860 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 31220 00017863 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 31221 00017868 4983C103                	add r9, 3 	 ;for getting to the params
 31222 0001786C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 31223 00017870 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 31224                                  .L_tc_recycle_frame_loop_0223:
 31225 00017873 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 31226 00017876 7410                    	je .L_tc_recycle_frame_done_0223
 31227 00017878 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 31228 0001787B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 31229 0001787E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 31230 00017882 4983E808                	sub r8, 8	 ;move the top of the stack one down
 31231 00017886 EBEB                    	jmp .L_tc_recycle_frame_loop_0223
 31232                                  .L_tc_recycle_frame_done_0223:
 31233 00017888 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 31234 00017889 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 31235 0001788D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 31236 00017890 C9                      	leave
 31237 00017891 C21800                  	ret AND_KILL_FRAME(1)
 31238                                  .L_lambda_simple_end_0182:	; new closure is in rax
 31239 00017894 803804                  	cmp byte [rax], T_closure
 31240 00017897 0F85EE060000            	jne L_error_non_closure
 31241 0001789D FF7001                  	push SOB_CLOSURE_ENV(rax)
 31242 000178A0 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 31243 000178A3 FF7500                  	push qword[rbp]
 31244 000178A6 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 31245 000178A9 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 31246 000178AD 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 31247 000178B1 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 31248 000178B5 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 31249 000178B8 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 31250 000178BB 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 31251 000178C0 4983C103                	add r9, 3 	 ;for getting to the params
 31252 000178C4 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 31253 000178C8 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 31254                                  .L_tc_recycle_frame_loop_0224:
 31255 000178CB 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 31256 000178CE 7410                    	je .L_tc_recycle_frame_done_0224
 31257 000178D0 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 31258 000178D3 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 31259 000178D6 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 31260 000178DA 4983E808                	sub r8, 8	 ;move the top of the stack one down
 31261 000178DE EBEB                    	jmp .L_tc_recycle_frame_loop_0224
 31262                                  .L_tc_recycle_frame_done_0224:
 31263 000178E0 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 31264 000178E1 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 31265 000178E5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 31266 000178E8 C9                      	leave
 31267 000178E9 C21800                  	ret AND_KILL_FRAME(1)
 31268                                  .L_lambda_simple_end_0181:	; new closure is in rax
 31269 000178EC 803804                  	cmp byte [rax], T_closure
 31270 000178EF 0F8596060000            	jne L_error_non_closure
 31271 000178F5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31272 000178F8 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 31273 000178FB FF7500                  	push qword[rbp]
 31274 000178FE 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 31275 00017901 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 31276 00017905 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 31277 00017909 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 31278 0001790D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 31279 00017910 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 31280 00017913 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 31281 00017918 4983C103                	add r9, 3 	 ;for getting to the params
 31282 0001791C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 31283 00017920 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 31284                                  .L_tc_recycle_frame_loop_0225:
 31285 00017923 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 31286 00017926 7410                    	je .L_tc_recycle_frame_done_0225
 31287 00017928 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 31288 0001792B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 31289 0001792E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 31290 00017932 4983E808                	sub r8, 8	 ;move the top of the stack one down
 31291 00017936 EBEB                    	jmp .L_tc_recycle_frame_loop_0225
 31292                                  .L_tc_recycle_frame_done_0225:
 31293 00017938 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 31294 00017939 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 31295 0001793D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 31296 00017940 C9                      	leave
 31297 00017941 C22000                  	ret AND_KILL_FRAME(2)
 31298                                  .L_lambda_simple_end_0180:	; new closure is in rax
 31299 00017944 48890425[9D140000]      	mov qword [free_var_102], rax
 31300 0001794C 48B8-                   	mov rax, sob_void
 31300 0001794E [0000000000000000] 
 31301                                  
 31302 00017956 4889C7                  	mov rdi, rax
 31303 00017959 E82B090000              	call print_sexpr_if_not_void
 31304 0001795E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 31305 00017963 E8CC060000              	call malloc
 31306 00017968 50                      	push rax
 31307 00017969 BF00000000              	mov rdi, 8 * 0	; new rib
 31308 0001796E E8C1060000              	call malloc
 31309 00017973 50                      	push rax
 31310 00017974 BF08000000              	mov rdi, 8 * 1	; extended env
 31311 00017979 E8B6060000              	call malloc
 31312 0001797E 488B7D10                	mov rdi, ENV
 31313 00017982 BE00000000              	mov rsi, 0
 31314 00017987 BA01000000              	mov rdx, 1
 31315                                  .L_lambda_simple_env_loop_0184:	; ext_env[i + 1] <-- env[i]
 31316 0001798C 4883FE00                	cmp rsi, 0
 31317 00017990 7410                    	je .L_lambda_simple_env_end_0184
 31318 00017992 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 31319 00017996 48890CD0                	mov qword [rax + 8 * rdx], rcx
 31320 0001799A 48FFC6                  	inc rsi
 31321 0001799D 48FFC2                  	inc rdx
 31322 000179A0 EBEA                    	jmp .L_lambda_simple_env_loop_0184
 31323                                  .L_lambda_simple_env_end_0184:
 31324 000179A2 5B                      	pop rbx
 31325 000179A3 BE00000000              	mov rsi, 0
 31326                                  .L_lambda_simple_params_loop_0184:	; copy params
 31327 000179A8 4883FE00                	cmp rsi, 0
 31328 000179AC 740E                    	je .L_lambda_simple_params_end_0184
 31329 000179AE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 31330 000179B3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 31331 000179B7 48FFC6                  	inc rsi
 31332 000179BA EBEC                    	jmp .L_lambda_simple_params_loop_0184
 31333                                  .L_lambda_simple_params_end_0184:
 31334 000179BC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 31335 000179BF 4889C3                  	mov rbx, rax
 31336 000179C2 58                      	pop rax
 31337 000179C3 C60004                  	mov byte [rax], T_closure
 31338 000179C6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 31339 000179CA 48C74009[D7790100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0184
 31340 000179D2 E977020000              	jmp .L_lambda_simple_end_0184
 31341                                  .L_lambda_simple_code_0184:	; lambda-simple body
 31342 000179D7 48837C241003            	cmp qword [rsp + 8 * 2], 3
 31343 000179DD 740B                    	je .L_lambda_simple_arity_check_ok_0184
 31344 000179DF FF742410                	push qword [rsp + 8 * 2]
 31345 000179E3 6A03                    	push 3
 31346 000179E5 E903060000              	jmp L_error_incorrect_arity_simple
 31347                                  .L_lambda_simple_arity_check_ok_0184:
 31348 000179EA C8000000                	enter 0, 0
 31349                                  	; preparing a non-tail-call
 31350 000179EE 488B4530                	mov rax, PARAM(2)	; param n
 31351 000179F2 50                      	push rax
 31352 000179F3 6A01                    	push 1	; arg count
 31353 000179F5 488B0425[DE170000]      	mov rax, qword [free_var_151]	; free var zero?
 31354 000179FD 803805                  	cmp byte [rax], T_undefined
 31355 00017A00 0F8401050000            	je L_error_fvar_undefined
 31356 00017A06 803804                  	cmp byte [rax], T_closure
 31357 00017A09 0F857C050000            	jne L_error_non_closure
 31358 00017A0F FF7001                  	push SOB_CLOSURE_ENV(rax)
 31359 00017A12 FF5009                  	call SOB_CLOSURE_CODE(rax)
 31360 00017A15 483D[02000000]          	cmp rax, sob_boolean_false
 31361 00017A1B 740F                    	je .L_if_else_012c
 31362 00017A1D 48B8-                   	mov rax, L_constants + 3485
 31362 00017A1F [9D0D000000000000] 
 31363 00017A27 E91E020000              	jmp .L_if_end_012c
 31364                                  .L_if_else_012c:
 31365                                  	; preparing a non-tail-call
 31366 00017A2C 488B4528                	mov rax, PARAM(1)	; param b
 31367 00017A30 50                      	push rax
 31368 00017A31 488B4520                	mov rax, PARAM(0)	; param a
 31369 00017A35 50                      	push rax
 31370 00017A36 6A02                    	push 2	; arg count
 31371 00017A38 488B0425[1B0E0000]      	mov rax, qword [free_var_4]	; free var <
 31372 00017A40 803805                  	cmp byte [rax], T_undefined
 31373 00017A43 0F84BE040000            	je L_error_fvar_undefined
 31374 00017A49 803804                  	cmp byte [rax], T_closure
 31375 00017A4C 0F8539050000            	jne L_error_non_closure
 31376 00017A52 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31377 00017A55 FF5009                  	call SOB_CLOSURE_CODE(rax)
 31378 00017A58 483D[02000000]          	cmp rax, sob_boolean_false
 31379 00017A5E 0F84D1000000            	je .L_if_else_012b
 31380                                  	; preparing a tail-call
 31381                                  	; preparing a non-tail-call
 31382 00017A64 488B4530                	mov rax, PARAM(2)	; param n
 31383 00017A68 50                      	push rax
 31384                                  	; preparing a non-tail-call
 31385 00017A69 488B4520                	mov rax, PARAM(0)	; param a
 31386 00017A6D 50                      	push rax
 31387 00017A6E 488B4528                	mov rax, PARAM(1)	; param b
 31388 00017A72 50                      	push rax
 31389 00017A73 6A02                    	push 2	; arg count
 31390 00017A75 488B0425[0A0E0000]      	mov rax, qword [free_var_3]	; free var /
 31391 00017A7D 803805                  	cmp byte [rax], T_undefined
 31392 00017A80 0F8481040000            	je L_error_fvar_undefined
 31393 00017A86 803804                  	cmp byte [rax], T_closure
 31394 00017A89 0F85FC040000            	jne L_error_non_closure
 31395 00017A8F FF7001                  	push SOB_CLOSURE_ENV(rax)
 31396 00017A92 FF5009                  	call SOB_CLOSURE_CODE(rax)
 31397 00017A95 50                      	push rax
 31398 00017A96 488B4520                	mov rax, PARAM(0)	; param a
 31399 00017A9A 50                      	push rax
 31400 00017A9B 6A03                    	push 3	; arg count
 31401 00017A9D 488B0425[48140000]      	mov rax, qword [free_var_97]	; free var logarithm
 31402 00017AA5 803805                  	cmp byte [rax], T_undefined
 31403 00017AA8 0F8459040000            	je L_error_fvar_undefined
 31404 00017AAE 803804                  	cmp byte [rax], T_closure
 31405 00017AB1 0F85D4040000            	jne L_error_non_closure
 31406 00017AB7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31407 00017ABA FF5009                  	call SOB_CLOSURE_CODE(rax)
 31408 00017ABD 50                      	push rax
 31409 00017ABE 48B8-                   	mov rax, L_constants + 3485
 31409 00017AC0 [9D0D000000000000] 
 31410 00017AC8 50                      	push rax
 31411 00017AC9 6A02                    	push 2	; arg count
 31412 00017ACB 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 31413 00017AD3 803805                  	cmp byte [rax], T_undefined
 31414 00017AD6 0F842B040000            	je L_error_fvar_undefined
 31415 00017ADC 803804                  	cmp byte [rax], T_closure
 31416 00017ADF 0F85A6040000            	jne L_error_non_closure
 31417 00017AE5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31418 00017AE8 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 31419 00017AEB FF7500                  	push qword[rbp]
 31420 00017AEE 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 31421 00017AF1 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 31422 00017AF5 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 31423 00017AF9 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 31424 00017AFD 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 31425 00017B00 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 31426 00017B03 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 31427 00017B08 4983C103                	add r9, 3 	 ;for getting to the params
 31428 00017B0C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 31429 00017B10 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 31430                                  .L_tc_recycle_frame_loop_0226:
 31431 00017B13 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 31432 00017B16 7410                    	je .L_tc_recycle_frame_done_0226
 31433 00017B18 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 31434 00017B1B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 31435 00017B1E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 31436 00017B22 4983E808                	sub r8, 8	 ;move the top of the stack one down
 31437 00017B26 EBEB                    	jmp .L_tc_recycle_frame_loop_0226
 31438                                  .L_tc_recycle_frame_done_0226:
 31439 00017B28 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 31440 00017B29 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 31441 00017B2D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 31442 00017B30 E915010000              	jmp .L_if_end_012b
 31443                                  .L_if_else_012b:
 31444                                  	; preparing a non-tail-call
 31445 00017B35 488B4528                	mov rax, PARAM(1)	; param b
 31446 00017B39 50                      	push rax
 31447 00017B3A 488B4520                	mov rax, PARAM(0)	; param a
 31448 00017B3E 50                      	push rax
 31449 00017B3F 6A02                    	push 2	; arg count
 31450 00017B41 488B0425[3D0E0000]      	mov rax, qword [free_var_6]	; free var =
 31451 00017B49 803805                  	cmp byte [rax], T_undefined
 31452 00017B4C 0F84B5030000            	je L_error_fvar_undefined
 31453 00017B52 803804                  	cmp byte [rax], T_closure
 31454 00017B55 0F8530040000            	jne L_error_non_closure
 31455 00017B5B FF7001                  	push SOB_CLOSURE_ENV(rax)
 31456 00017B5E FF5009                  	call SOB_CLOSURE_CODE(rax)
 31457 00017B61 483D[02000000]          	cmp rax, sob_boolean_false
 31458 00017B67 740F                    	je .L_if_else_012a
 31459 00017B69 48B8-                   	mov rax, L_constants + 3485
 31459 00017B6B [9D0D000000000000] 
 31460 00017B73 E9D2000000              	jmp .L_if_end_012a
 31461                                  .L_if_else_012a:
 31462                                  	; preparing a tail-call
 31463                                  	; preparing a non-tail-call
 31464                                  	; preparing a non-tail-call
 31465 00017B78 48B8-                   	mov rax, L_constants + 2270
 31465 00017B7A [DE08000000000000] 
 31466 00017B82 50                      	push rax
 31467 00017B83 488B4530                	mov rax, PARAM(2)	; param n
 31468 00017B87 50                      	push rax
 31469 00017B88 6A02                    	push 2	; arg count
 31470 00017B8A 488B0425[F90D0000]      	mov rax, qword [free_var_2]	; free var -
 31471 00017B92 803805                  	cmp byte [rax], T_undefined
 31472 00017B95 0F846C030000            	je L_error_fvar_undefined
 31473 00017B9B 803804                  	cmp byte [rax], T_closure
 31474 00017B9E 0F85E7030000            	jne L_error_non_closure
 31475 00017BA4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31476 00017BA7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 31477 00017BAA 50                      	push rax
 31478 00017BAB 488B4520                	mov rax, PARAM(0)	; param a
 31479 00017BAF 50                      	push rax
 31480 00017BB0 488B4528                	mov rax, PARAM(1)	; param b
 31481 00017BB4 50                      	push rax
 31482 00017BB5 6A03                    	push 3	; arg count
 31483 00017BB7 488B0425[48140000]      	mov rax, qword [free_var_97]	; free var logarithm
 31484 00017BBF 803805                  	cmp byte [rax], T_undefined
 31485 00017BC2 0F843F030000            	je L_error_fvar_undefined
 31486 00017BC8 803804                  	cmp byte [rax], T_closure
 31487 00017BCB 0F85BA030000            	jne L_error_non_closure
 31488 00017BD1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31489 00017BD4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 31490 00017BD7 50                      	push rax
 31491 00017BD8 48B8-                   	mov rax, L_constants + 3485
 31491 00017BDA [9D0D000000000000] 
 31492 00017BE2 50                      	push rax
 31493 00017BE3 6A02                    	push 2	; arg count
 31494 00017BE5 488B0425[0A0E0000]      	mov rax, qword [free_var_3]	; free var /
 31495 00017BED 803805                  	cmp byte [rax], T_undefined
 31496 00017BF0 0F8411030000            	je L_error_fvar_undefined
 31497 00017BF6 803804                  	cmp byte [rax], T_closure
 31498 00017BF9 0F858C030000            	jne L_error_non_closure
 31499 00017BFF FF7001                  	push SOB_CLOSURE_ENV(rax)
 31500 00017C02 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 31501 00017C05 FF7500                  	push qword[rbp]
 31502 00017C08 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 31503 00017C0B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 31504 00017C0F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 31505 00017C13 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 31506 00017C17 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 31507 00017C1A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 31508 00017C1D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 31509 00017C22 4983C103                	add r9, 3 	 ;for getting to the params
 31510 00017C26 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 31511 00017C2A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 31512                                  .L_tc_recycle_frame_loop_0227:
 31513 00017C2D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 31514 00017C30 7410                    	je .L_tc_recycle_frame_done_0227
 31515 00017C32 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 31516 00017C35 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 31517 00017C38 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 31518 00017C3C 4983E808                	sub r8, 8	 ;move the top of the stack one down
 31519 00017C40 EBEB                    	jmp .L_tc_recycle_frame_loop_0227
 31520                                  .L_tc_recycle_frame_done_0227:
 31521 00017C42 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 31522 00017C43 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 31523 00017C47 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 31524                                  .L_if_end_012a:
 31525                                  .L_if_end_012b:
 31526                                  .L_if_end_012c:
 31527 00017C4A C9                      	leave
 31528 00017C4B C22800                  	ret AND_KILL_FRAME(3)
 31529                                  .L_lambda_simple_end_0184:	; new closure is in rax
 31530 00017C4E 48890425[48140000]      	mov qword [free_var_97], rax
 31531 00017C56 48B8-                   	mov rax, sob_void
 31531 00017C58 [0000000000000000] 
 31532                                  
 31533 00017C60 4889C7                  	mov rdi, rax
 31534 00017C63 E821060000              	call print_sexpr_if_not_void
 31535 00017C68 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 31536 00017C6D E8C2030000              	call malloc
 31537 00017C72 50                      	push rax
 31538 00017C73 BF00000000              	mov rdi, 8 * 0	; new rib
 31539 00017C78 E8B7030000              	call malloc
 31540 00017C7D 50                      	push rax
 31541 00017C7E BF08000000              	mov rdi, 8 * 1	; extended env
 31542 00017C83 E8AC030000              	call malloc
 31543 00017C88 488B7D10                	mov rdi, ENV
 31544 00017C8C BE00000000              	mov rsi, 0
 31545 00017C91 BA01000000              	mov rdx, 1
 31546                                  .L_lambda_simple_env_loop_0185:	; ext_env[i + 1] <-- env[i]
 31547 00017C96 4883FE00                	cmp rsi, 0
 31548 00017C9A 7410                    	je .L_lambda_simple_env_end_0185
 31549 00017C9C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 31550 00017CA0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 31551 00017CA4 48FFC6                  	inc rsi
 31552 00017CA7 48FFC2                  	inc rdx
 31553 00017CAA EBEA                    	jmp .L_lambda_simple_env_loop_0185
 31554                                  .L_lambda_simple_env_end_0185:
 31555 00017CAC 5B                      	pop rbx
 31556 00017CAD BE00000000              	mov rsi, 0
 31557                                  .L_lambda_simple_params_loop_0185:	; copy params
 31558 00017CB2 4883FE00                	cmp rsi, 0
 31559 00017CB6 740E                    	je .L_lambda_simple_params_end_0185
 31560 00017CB8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 31561 00017CBD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 31562 00017CC1 48FFC6                  	inc rsi
 31563 00017CC4 EBEC                    	jmp .L_lambda_simple_params_loop_0185
 31564                                  .L_lambda_simple_params_end_0185:
 31565 00017CC6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 31566 00017CC9 4889C3                  	mov rbx, rax
 31567 00017CCC 58                      	pop rax
 31568 00017CCD C60004                  	mov byte [rax], T_closure
 31569 00017CD0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 31570 00017CD4 48C74009[E17C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0185
 31571 00017CDC E98D000000              	jmp .L_lambda_simple_end_0185
 31572                                  .L_lambda_simple_code_0185:	; lambda-simple body
 31573 00017CE1 48837C241000            	cmp qword [rsp + 8 * 2], 0
 31574 00017CE7 740B                    	je .L_lambda_simple_arity_check_ok_0185
 31575 00017CE9 FF742410                	push qword [rsp + 8 * 2]
 31576 00017CED 6A00                    	push 0
 31577 00017CEF E9F9020000              	jmp L_error_incorrect_arity_simple
 31578                                  .L_lambda_simple_arity_check_ok_0185:
 31579 00017CF4 C8000000                	enter 0, 0
 31580                                  	; preparing a tail-call
 31581 00017CF8 48B8-                   	mov rax, L_constants + 3510
 31581 00017CFA [B60D000000000000] 
 31582 00017D02 50                      	push rax
 31583 00017D03 6A01                    	push 1	; arg count
 31584 00017D05 488B0425[CD170000]      	mov rax, qword [free_var_150]	; free var write-char
 31585 00017D0D 803805                  	cmp byte [rax], T_undefined
 31586 00017D10 0F84F1010000            	je L_error_fvar_undefined
 31587 00017D16 803804                  	cmp byte [rax], T_closure
 31588 00017D19 0F856C020000            	jne L_error_non_closure
 31589 00017D1F FF7001                  	push SOB_CLOSURE_ENV(rax)
 31590 00017D22 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 31591 00017D25 FF7500                  	push qword[rbp]
 31592 00017D28 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 31593 00017D2B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 31594 00017D2F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 31595 00017D33 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 31596 00017D37 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 31597 00017D3A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 31598 00017D3D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 31599 00017D42 4983C103                	add r9, 3 	 ;for getting to the params
 31600 00017D46 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 31601 00017D4A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 31602                                  .L_tc_recycle_frame_loop_0228:
 31603 00017D4D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 31604 00017D50 7410                    	je .L_tc_recycle_frame_done_0228
 31605 00017D52 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 31606 00017D55 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 31607 00017D58 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 31608 00017D5C 4983E808                	sub r8, 8	 ;move the top of the stack one down
 31609 00017D60 EBEB                    	jmp .L_tc_recycle_frame_loop_0228
 31610                                  .L_tc_recycle_frame_done_0228:
 31611 00017D62 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 31612 00017D63 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 31613 00017D67 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 31614 00017D6A C9                      	leave
 31615 00017D6B C21000                  	ret AND_KILL_FRAME(0)
 31616                                  .L_lambda_simple_end_0185:	; new closure is in rax
 31617 00017D6E 48890425[D0140000]      	mov qword [free_var_105], rax
 31618 00017D76 48B8-                   	mov rax, sob_void
 31618 00017D78 [0000000000000000] 
 31619                                  
 31620 00017D80 4889C7                  	mov rdi, rax
 31621 00017D83 E801050000              	call print_sexpr_if_not_void
 31622 00017D88 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 31623 00017D8D E8A2020000              	call malloc
 31624 00017D92 50                      	push rax
 31625 00017D93 BF00000000              	mov rdi, 8 * 0	; new rib
 31626 00017D98 E897020000              	call malloc
 31627 00017D9D 50                      	push rax
 31628 00017D9E BF08000000              	mov rdi, 8 * 1	; extended env
 31629 00017DA3 E88C020000              	call malloc
 31630 00017DA8 488B7D10                	mov rdi, ENV
 31631 00017DAC BE00000000              	mov rsi, 0
 31632 00017DB1 BA01000000              	mov rdx, 1
 31633                                  .L_lambda_simple_env_loop_0186:	; ext_env[i + 1] <-- env[i]
 31634 00017DB6 4883FE00                	cmp rsi, 0
 31635 00017DBA 7410                    	je .L_lambda_simple_env_end_0186
 31636 00017DBC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 31637 00017DC0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 31638 00017DC4 48FFC6                  	inc rsi
 31639 00017DC7 48FFC2                  	inc rdx
 31640 00017DCA EBEA                    	jmp .L_lambda_simple_env_loop_0186
 31641                                  .L_lambda_simple_env_end_0186:
 31642 00017DCC 5B                      	pop rbx
 31643 00017DCD BE00000000              	mov rsi, 0
 31644                                  .L_lambda_simple_params_loop_0186:	; copy params
 31645 00017DD2 4883FE00                	cmp rsi, 0
 31646 00017DD6 740E                    	je .L_lambda_simple_params_end_0186
 31647 00017DD8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 31648 00017DDD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 31649 00017DE1 48FFC6                  	inc rsi
 31650 00017DE4 EBEC                    	jmp .L_lambda_simple_params_loop_0186
 31651                                  .L_lambda_simple_params_end_0186:
 31652 00017DE6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 31653 00017DE9 4889C3                  	mov rbx, rax
 31654 00017DEC 58                      	pop rax
 31655 00017DED C60004                  	mov byte [rax], T_closure
 31656 00017DF0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 31657 00017DF4 48C74009[FE7D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0186
 31658 00017DFC EB25                    	jmp .L_lambda_simple_end_0186
 31659                                  .L_lambda_simple_code_0186:	; lambda-simple body
 31660 00017DFE 48837C241000            	cmp qword [rsp + 8 * 2], 0
 31661 00017E04 740B                    	je .L_lambda_simple_arity_check_ok_0186
 31662 00017E06 FF742410                	push qword [rsp + 8 * 2]
 31663 00017E0A 6A00                    	push 0
 31664 00017E0C E9DC010000              	jmp L_error_incorrect_arity_simple
 31665                                  .L_lambda_simple_arity_check_ok_0186:
 31666 00017E11 C8000000                	enter 0, 0
 31667 00017E15 48B8-                   	mov rax, L_constants + 0
 31667 00017E17 [0000000000000000] 
 31668 00017E1F C9                      	leave
 31669 00017E20 C21000                  	ret AND_KILL_FRAME(0)
 31670                                  .L_lambda_simple_end_0186:	; new closure is in rax
 31671 00017E23 48890425[BC170000]      	mov qword [free_var_149], rax
 31672 00017E2B 48B8-                   	mov rax, sob_void
 31672 00017E2D [0000000000000000] 
 31673                                  
 31674 00017E35 4889C7                  	mov rdi, rax
 31675 00017E38 E84C040000              	call print_sexpr_if_not_void
 31676                                  	; preparing a non-tail-call
 31677                                  	; preparing a non-tail-call
 31678 00017E3D 48B8-                   	mov rax, L_constants + 3534
 31678 00017E3F [CE0D000000000000] 
 31679 00017E47 50                      	push rax
 31680 00017E48 48B8-                   	mov rax, L_constants + 3525
 31680 00017E4A [C50D000000000000] 
 31681 00017E52 50                      	push rax
 31682 00017E53 6A02                    	push 2	; arg count
 31683 00017E55 488B0425[0A0E0000]      	mov rax, qword [free_var_3]	; free var /
 31684 00017E5D 803805                  	cmp byte [rax], T_undefined
 31685 00017E60 0F84A1000000            	je L_error_fvar_undefined
 31686 00017E66 803804                  	cmp byte [rax], T_closure
 31687 00017E69 0F851C010000            	jne L_error_non_closure
 31688 00017E6F FF7001                  	push SOB_CLOSURE_ENV(rax)
 31689 00017E72 FF5009                  	call SOB_CLOSURE_CODE(rax)
 31690 00017E75 50                      	push rax
 31691                                  	; preparing a non-tail-call
 31692 00017E76 48B8-                   	mov rax, L_constants + 3190
 31692 00017E78 [760C000000000000] 
 31693 00017E80 50                      	push rax
 31694 00017E81 48B8-                   	mov rax, L_constants + 2270
 31694 00017E83 [DE08000000000000] 
 31695 00017E8B 50                      	push rax
 31696 00017E8C 6A02                    	push 2	; arg count
 31697 00017E8E 488B0425[D70D0000]      	mov rax, qword [free_var_0]	; free var *
 31698 00017E96 803805                  	cmp byte [rax], T_undefined
 31699 00017E99 746C                    	je L_error_fvar_undefined
 31700 00017E9B 803804                  	cmp byte [rax], T_closure
 31701 00017E9E 0F85E7000000            	jne L_error_non_closure
 31702 00017EA4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31703 00017EA7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 31704 00017EAA 50                      	push rax
 31705 00017EAB 6A02                    	push 2	; arg count
 31706 00017EAD 488B0425[E80D0000]      	mov rax, qword [free_var_1]	; free var +
 31707 00017EB5 803805                  	cmp byte [rax], T_undefined
 31708 00017EB8 744D                    	je L_error_fvar_undefined
 31709 00017EBA 803804                  	cmp byte [rax], T_closure
 31710 00017EBD 0F85C8000000            	jne L_error_non_closure
 31711 00017EC3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31712 00017EC6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 31713                                  Lend:
 31714 00017EC9 4889C7                  	mov rdi, rax
 31715 00017ECC E8B8030000              	call print_sexpr_if_not_void
 31716                                  
 31717 00017ED1 48BF-                           mov rdi, fmt_memory_usage
 31717 00017ED3 [8718000000000000] 
 31718 00017EDB 488B3425[0D190000]              mov rsi, qword [top_of_memory]
 31719 00017EE3 4881EE[00000000]                sub rsi, memory
 31720 00017EEA B800000000                      mov rax, 0
 31721                                          ENTER
    44 00017EEF C8000000            <1>  enter 0, 0
    45 00017EF3 4883E4F0            <1>  and rsp, ~15
 31722 00017EF7 E8(00000000)                    call printf
 31723                                          LEAVE
    49 00017EFC C9                  <1>  leave
 31724 00017EFD B800000000                      mov rax, 0
 31725 00017F02 E8(00000000)                    call exit
 31726                                  
 31727                                  L_error_fvar_undefined:
 31728 00017F07 50                              push rax
 31729 00017F08 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
 31730 00017F10 48BE-                           mov rsi, fmt_undefined_free_var_1
 31730 00017F12 [EF17000000000000] 
 31731 00017F1A B800000000                      mov rax, 0
 31732                                          ENTER
    44 00017F1F C8000000            <1>  enter 0, 0
    45 00017F23 4883E4F0            <1>  and rsp, ~15
 31733 00017F27 E8(00000000)                    call fprintf
 31734                                          LEAVE
    49 00017F2C C9                  <1>  leave
 31735 00017F2D 58                              pop rax
 31736 00017F2E 488B4001                        mov rax, qword [rax + 1] ; string
 31737 00017F32 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
 31738 00017F36 BE01000000                      mov rsi, 1               ; sizeof(char)
 31739 00017F3B 488B5001                        mov rdx, qword [rax + 1] ; string-length
 31740 00017F3F 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
 31741 00017F47 B800000000                      mov rax, 0
 31742                                          ENTER
    44 00017F4C C8000000            <1>  enter 0, 0
    45 00017F50 4883E4F0            <1>  and rsp, ~15
 31743 00017F54 E8(00000000)                    call fwrite
 31744                                          LEAVE
    49 00017F59 C9                  <1>  leave
 31745 00017F5A 488B3C25[00000000]              mov rdi, [stderr]       ; destination
 31746 00017F62 48BE-                           mov rsi, fmt_undefined_free_var_2
 31746 00017F64 [0618000000000000] 
 31747 00017F6C B800000000                      mov rax, 0
 31748                                          ENTER
    44 00017F71 C8000000            <1>  enter 0, 0
    45 00017F75 4883E4F0            <1>  and rsp, ~15
 31749 00017F79 E8(00000000)                    call fprintf
 31750                                          LEAVE
    49 00017F7E C9                  <1>  leave
 31751 00017F7F 48C7C0F6FFFFFF                  mov rax, -10
 31752 00017F86 E8(00000000)                    call exit
 31753                                  
 31754                                  L_error_non_closure:
 31755 00017F8B 488B3C25[00000000]              mov rdi, qword [stderr]
 31756 00017F93 48BE-                           mov rsi, fmt_non_closure
 31756 00017F95 [BD18000000000000] 
 31757 00017F9D B800000000                      mov rax, 0
 31758                                          ENTER
    44 00017FA2 C8000000            <1>  enter 0, 0
    45 00017FA6 4883E4F0            <1>  and rsp, ~15
 31759 00017FAA E8(00000000)                    call fprintf
 31760                                          LEAVE
    49 00017FAF C9                  <1>  leave
 31761 00017FB0 48C7C0FEFFFFFF                  mov rax, -2
 31762 00017FB7 E8(00000000)                    call exit
 31763                                  
 31764                                  L_error_improper_list:
 31765 00017FBC 488B3C25[00000000]      	mov rdi, qword [stderr]
 31766 00017FC4 48BE-                   	mov rsi, fmt_error_improper_list
 31766 00017FC6 [E518000000000000] 
 31767 00017FCE B800000000              	mov rax, 0
 31768                                          ENTER
    44 00017FD3 C8000000            <1>  enter 0, 0
    45 00017FD7 4883E4F0            <1>  and rsp, ~15
 31769 00017FDB E8(00000000)            	call fprintf
 31770                                          LEAVE
    49 00017FE0 C9                  <1>  leave
 31771 00017FE1 48C7C0F9FFFFFF          	mov rax, -7
 31772 00017FE8 E8(00000000)            	call exit
 31773                                  
 31774                                  L_error_incorrect_arity_simple:
 31775 00017FED 488B3C25[00000000]              mov rdi, qword [stderr]
 31776 00017FF5 48BE-                           mov rsi, fmt_incorrect_arity_simple
 31776 00017FF7 [2818000000000000] 
 31777 00017FFF EB12                            jmp L_error_incorrect_arity_common
 31778                                  L_error_incorrect_arity_opt:
 31779 00018001 488B3C25[00000000]              mov rdi, qword [stderr]
 31780 00018009 48BE-                           mov rsi, fmt_incorrect_arity_opt
 31780 0001800B [5318000000000000] 
 31781                                  L_error_incorrect_arity_common:
 31782 00018013 5A                              pop rdx
 31783 00018014 59                              pop rcx
 31784 00018015 B800000000                      mov rax, 0
 31785                                          ENTER
    44 0001801A C8000000            <1>  enter 0, 0
    45 0001801E 4883E4F0            <1>  and rsp, ~15
 31786 00018022 E8(00000000)                    call fprintf
 31787                                          LEAVE
    49 00018027 C9                  <1>  leave
 31788 00018028 48C7C0FAFFFFFF                  mov rax, -6
 31789 0001802F E8(00000000)                    call exit
 31790                                  
 31791                                  section .data
 31792                                  fmt_undefined_free_var_1:
 31793 000017EF 212121205468652066-             db `!!! The free variable \0`
 31793 000017F8 726565207661726961-
 31793 00001801 626C652000         
 31794                                  fmt_undefined_free_var_2:
 31795 00001806 207761732075736564-             db ` was used before it was defined.\n\0`
 31795 0000180F 206265666F72652069-
 31795 00001818 742077617320646566-
 31795 00001821 696E65642E0A00     
 31796                                  fmt_incorrect_arity_simple:
 31797 00001828 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
 31797 00001831 74656420256C642061-
 31797 0000183A 7267756D656E74732C-
 31797 00001843 206275742067697665-
 31797 0000184C 6E20256C640A00     
 31798                                  fmt_incorrect_arity_opt:
 31799 00001853 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
 31799 0000185C 746564206174206C65-
 31799 00001865 61737420256C642061-
 31799 0000186E 7267756D656E74732C-
 31799 00001877 206275742067697665-
 31799 00001880 6E20256C640A00     
 31800                                  fmt_memory_usage:
 31801 00001887 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
 31801 00001890 20256C642062797465-
 31801 00001899 73206F662064796E61-
 31801 000018A2 6D6963616C6C792D61-
 31801 000018AB 6C6C6F636174656420-
 31801 000018B4 6D656D6F72790A0A00 
 31802                                  fmt_non_closure:
 31803 000018BD 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
 31803 000018C6 7074696E6720746F20-
 31803 000018CF 6170706C792061206E-
 31803 000018D8 6F6E2D636C6F737572-
 31803 000018E1 65210A00           
 31804                                  fmt_error_improper_list:
 31805 000018E5 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
 31805 000018EE 7267756D656E742069-
 31805 000018F7 73206E6F7420612070-
 31805 00001900 726F706572206C6973-
 31805 00001909 74210A00           
 31806                                  
 31807                                  section .bss
 31808                                  memory:
 31809 00000000 <res 40000000h>         	resb gbytes(1)
 31810                                  
 31811                                  section .data
 31812                                  top_of_memory:
 31813 0000190D [0000000000000000]              dq memory
 31814                                  
 31815                                  section .text
 31816                                  malloc:
 31817 00018034 488B0425[0D190000]              mov rax, qword [top_of_memory]
 31818 0001803C 48013C25[0D190000]              add qword [top_of_memory], rdi
 31819 00018044 C3                              ret
 31820                                  
 31821                                  L_code_ptr_return:
 31822 00018045 48837C241002            	cmp qword [rsp + 8*2], 2
 31823 0001804B 0F85D21C0000            	jne L_error_arg_count_2
 31824 00018051 488B4C2418              	mov rcx, qword [rsp + 8*3]
 31825                                  	assert_integer(rcx)
    53 00018056 803911              <1>  cmp byte [%1], %2
    54 00018059 0F85631D0000        <1>  jne L_error_incorrect_type
 31826 0001805F 488B4901                	mov rcx, qword [rcx + 1]
 31827 00018063 4883F900                	cmp rcx, 0
 31828 00018067 0F8CEA1B0000            	jl L_error_integer_range
 31829 0001806D 488B442420              	mov rax, qword [rsp + 8*4]
 31830                                  .L0:
 31831 00018072 4883F900                        cmp rcx, 0
 31832 00018076 7409                            je .L1
 31833 00018078 488B6D00                	mov rbp, qword [rbp]
 31834 0001807C 48FFC9                  	dec rcx
 31835 0001807F 7FF1                    	jg .L0
 31836                                  .L1:
 31837 00018081 4889EC                  	mov rsp, rbp
 31838 00018084 5D                      	pop rbp
 31839 00018085 5B                              pop rbx
 31840 00018086 488B4C2408                      mov rcx, qword [rsp + 8*1]
 31841 0001808B 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
 31842 00018090 FFE3                    	jmp rbx
 31843                                  
 31844                                  L_code_ptr_make_list:
 31845 00018092 C8000000                	enter 0, 0
 31846 00018096 48837D1801                      cmp COUNT, 1
 31847 0001809B 740C                            je .L0
 31848 0001809D 48837D1802                      cmp COUNT, 2
 31849 000180A2 7411                            je .L1
 31850 000180A4 E9AF1C0000                      jmp L_error_arg_count_12
 31851                                  .L0:
 31852 000180A9 49B9-                           mov r9, sob_void
 31852 000180AB [0000000000000000] 
 31853 000180B3 EB04                            jmp .L2
 31854                                  .L1:
 31855 000180B5 4C8B4D28                        mov r9, PARAM(1)
 31856                                  .L2:
 31857 000180B9 488B4D20                        mov rcx, PARAM(0)
 31858                                          assert_integer(rcx)
    53 000180BD 803911              <1>  cmp byte [%1], %2
    54 000180C0 0F85FC1C0000        <1>  jne L_error_incorrect_type
 31859 000180C6 488B4901                        mov rcx, qword [rcx + 1]
 31860 000180CA 4883F900                        cmp rcx, 0
 31861 000180CE 0F8CB41B0000                    jl L_error_arg_negative
 31862 000180D4 49B8-                           mov r8, sob_nil
 31862 000180D6 [0100000000000000] 
 31863                                  .L3:
 31864 000180DE 4883F900                        cmp rcx, 0
 31865 000180E2 7E1D                            jle .L4
 31866 000180E4 BF11000000                      mov rdi, 1 + 8 + 8
 31867 000180E9 E846FFFFFF                      call malloc
 31868 000180EE C60021                          mov byte [rax], T_pair
 31869 000180F1 4C894801                        mov qword [rax + 1], r9
 31870 000180F5 4C894009                        mov qword [rax + 1 + 8], r8
 31871 000180F9 4989C0                          mov r8, rax
 31872 000180FC 48FFC9                          dec rcx
 31873 000180FF EBDD                            jmp .L3
 31874                                  .L4:
 31875 00018101 4C89C0                          mov rax, r8
 31876 00018104 48837D1802                      cmp COUNT, 2
 31877 00018109 7404                            je .L5
 31878 0001810B C9                              leave
 31879 0001810C C21800                          ret AND_KILL_FRAME(1)
 31880                                  .L5:
 31881 0001810F C9                      	leave
 31882 00018110 C22000                  	ret AND_KILL_FRAME(2)
 31883                                  
 31884                                  L_code_ptr_is_primitive:
 31885 00018113 C8000000                	enter 0, 0
 31886 00018117 48837D1801              	cmp COUNT, 1
 31887 0001811C 0F85CC1B0000            	jne L_error_arg_count_1
 31888 00018122 488B4520                	mov rax, PARAM(0)
 31889                                  	assert_closure(rax)
    53 00018126 803804              <1>  cmp byte [%1], %2
    54 00018129 0F85931C0000        <1>  jne L_error_incorrect_type
 31890 0001812F 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
 31891 00018134 750C                    	jne .L_false
 31892 00018136 48B8-                   	mov rax, sob_boolean_true
 31892 00018138 [0300000000000000] 
 31893 00018140 EB0A                    	jmp .L_end
 31894                                  .L_false:
 31895 00018142 48B8-                   	mov rax, sob_boolean_false
 31895 00018144 [0200000000000000] 
 31896                                  .L_end:
 31897 0001814C C9                      	leave
 31898 0001814D C21800                  	ret AND_KILL_FRAME(1)
 31899                                  
 31900                                  L_code_ptr_length:
 31901 00018150 C8000000                	enter 0, 0
 31902 00018154 48837D1801              	cmp COUNT, 1
 31903 00018159 0F858F1B0000            	jne L_error_arg_count_1
 31904 0001815F 488B5D20                	mov rbx, PARAM(0)
 31905 00018163 BF00000000              	mov rdi, 0
 31906                                  .L:
 31907 00018168 803B01                  	cmp byte [rbx], T_nil
 31908 0001816B 7412                    	je .L_end
 31909                                  	assert_pair(rbx)
    53 0001816D 803B21              <1>  cmp byte [%1], %2
    54 00018170 0F854C1C0000        <1>  jne L_error_incorrect_type
 31910 00018176 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
 31911 0001817A 48FFC7                  	inc rdi
 31912 0001817D EBE9                    	jmp .L
 31913                                  .L_end:
 31914 0001817F E8B91A0000              	call make_integer
 31915 00018184 C9                      	leave
 31916 00018185 C21800                  	ret AND_KILL_FRAME(1)
 31917                                  
 31918                                  L_code_ptr_break:
 31919 00018188 48837C241000                    cmp qword [rsp + 8 * 2], 0
 31920 0001818E 0F85251B0000                    jne L_error_arg_count_0
 31921 00018194 CC                              int3
 31922 00018195 48B8-                           mov rax, sob_void
 31922 00018197 [0000000000000000] 
 31923 0001819F C21000                          ret AND_KILL_FRAME(0)        
 31924                                  
 31925                                  L_code_ptr_frame:
 31926 000181A2 C8000000                        enter 0, 0
 31927 000181A6 48837D1800                      cmp COUNT, 0
 31928 000181AB 0F85081B0000                    jne L_error_arg_count_0
 31929                                  
 31930 000181B1 48BF-                           mov rdi, fmt_frame
 31930 000181B3 [1519000000000000] 
 31931 000181BB 488B7500                        mov rsi, qword [rbp]    ; old rbp
 31932 000181BF 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
 31933 000181C3 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
 31934 000181C7 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
 31935 000181CB 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
 31936 000181CF 6A00                            push 0
 31937 000181D1 4151                            push r9
 31938 000181D3 4150                            push r8                   ; we'll use it when printing the params
 31939 000181D5 B800000000                      mov rax, 0
 31940                                          
 31941                                          ENTER
    44 000181DA C8000000            <1>  enter 0, 0
    45 000181DE 4883E4F0            <1>  and rsp, ~15
 31942 000181E2 E8(00000000)                    call printf
 31943                                          LEAVE
    49 000181E7 C9                  <1>  leave
 31944                                  
 31945                                  .L:
 31946 000181E8 488B0C24                        mov rcx, qword [rsp]
 31947 000181EC 4883F900                        cmp rcx, 0
 31948 000181F0 7467                            je .L_out
 31949 000181F2 48BF-                           mov rdi, fmt_frame_param_prefix
 31949 000181F4 [4E19000000000000] 
 31950 000181FC 488B742410                      mov rsi, qword [rsp + 8*2]
 31951 00018201 B800000000                      mov rax, 0
 31952                                          
 31953                                          ENTER
    44 00018206 C8000000            <1>  enter 0, 0
    45 0001820A 4883E4F0            <1>  and rsp, ~15
 31954 0001820E E8(00000000)                    call printf
 31955                                          LEAVE
    49 00018213 C9                  <1>  leave
 31956                                  
 31957 00018214 488B0C24                        mov rcx, qword [rsp]
 31958 00018218 48FFC9                          dec rcx
 31959 0001821B 48890C24                        mov qword [rsp], rcx    ; dec arg count
 31960 0001821F 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
 31961 00018224 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
 31962 00018229 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
 31963 0001822D 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
 31964 00018232 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
 31965 00018235 E87B000000                      call print_sexpr
 31966 0001823A 48BF-                           mov rdi, fmt_newline
 31966 0001823C [7A19000000000000] 
 31967 00018244 B800000000                      mov rax, 0
 31968                                          ENTER
    44 00018249 C8000000            <1>  enter 0, 0
    45 0001824D 4883E4F0            <1>  and rsp, ~15
 31969 00018251 E8(00000000)                    call printf
 31970                                          LEAVE
    49 00018256 C9                  <1>  leave
 31971 00018257 EB8F                            jmp .L
 31972                                  .L_out:
 31973 00018259 48BF-                           mov rdi, fmt_frame_continue
 31973 0001825B [5F19000000000000] 
 31974 00018263 B800000000                      mov rax, 0
 31975                                          ENTER
    44 00018268 C8000000            <1>  enter 0, 0
    45 0001826C 4883E4F0            <1>  and rsp, ~15
 31976 00018270 E8(00000000)                    call printf
 31977 00018275 E8(00000000)                    call getchar
 31978                                          LEAVE
    49 0001827A C9                  <1>  leave
 31979                                          
 31980 0001827B 48B8-                           mov rax, sob_void
 31980 0001827D [0000000000000000] 
 31981 00018285 C9                              leave
 31982 00018286 C21000                          ret AND_KILL_FRAME(0)
 31983                                          
 31984                                  print_sexpr_if_not_void:
 31985 00018289 4881FF[00000000]        	cmp rdi, sob_void
 31986 00018290 7422                    	je .done
 31987 00018292 E81E000000              	call print_sexpr
 31988 00018297 48BF-                   	mov rdi, fmt_newline
 31988 00018299 [7A19000000000000] 
 31989 000182A1 B800000000              	mov rax, 0
 31990                                  	ENTER
    44 000182A6 C8000000            <1>  enter 0, 0
    45 000182AA 4883E4F0            <1>  and rsp, ~15
 31991 000182AE E8(00000000)            	call printf
 31992                                  	LEAVE
    49 000182B3 C9                  <1>  leave
 31993                                  .done:
 31994 000182B4 C3                      	ret
 31995                                  
 31996                                  section .data
 31997                                  fmt_frame:
 31998 00001915 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
 31998 0000191E 207265742061646472-
 31998 00001927 203D2025703B206C65-
 31998 00001930 7820656E76203D2025-
 31998 00001939 703B20706172616D20-
 31998 00001942 636F756E74203D2025-
 31998 0000194B 640A00             
 31999                                  fmt_frame_param_prefix:
 32000 0000194E 3D3D5B706172616D20-             db `==[param %d]==> \0`
 32000 00001957 25645D3D3D3E2000   
 32001                                  fmt_frame_continue:
 32002 0000195F 486974203C456E7465-             db `Hit <Enter> to continue...\0`
 32002 00001968 723E20746F20636F6E-
 32002 00001971 74696E75652E2E2E00 
 32003                                  fmt_newline:
 32004 0000197A 0A00                    	db `\n\0`
 32005                                  fmt_void:
 32006 0000197C 233C766F69643E00        	db `#<void>\0`
 32007                                  fmt_nil:
 32008 00001984 282900                  	db `()\0`
 32009                                  fmt_boolean_false:
 32010 00001987 236600                  	db `#f\0`
 32011                                  fmt_boolean_true:
 32012 0000198A 237400                  	db `#t\0`
 32013                                  fmt_char_backslash:
 32014 0000198D 235C5C00                	db `#\\\\\0`
 32015                                  fmt_char_dquote:
 32016 00001991 235C2200                	db `#\\"\0`
 32017                                  fmt_char_simple:
 32018 00001995 235C256300              	db `#\\%c\0`
 32019                                  fmt_char_null:
 32020 0000199A 235C6E756C00            	db `#\\nul\0`
 32021                                  fmt_char_bell:
 32022 000019A0 235C62656C6C00          	db `#\\bell\0`
 32023                                  fmt_char_backspace:
 32024 000019A7 235C6261636B737061-     	db `#\\backspace\0`
 32024 000019B0 636500             
 32025                                  fmt_char_tab:
 32026 000019B3 235C74616200            	db `#\\tab\0`
 32027                                  fmt_char_newline:
 32028 000019B9 235C6E65776C696E65-     	db `#\\newline\0`
 32028 000019C2 00                 
 32029                                  fmt_char_formfeed:
 32030 000019C3 235C7061676500          	db `#\\page\0`
 32031                                  fmt_char_return:
 32032 000019CA 235C72657475726E00      	db `#\\return\0`
 32033                                  fmt_char_escape:
 32034 000019D3 235C65736300            	db `#\\esc\0`
 32035                                  fmt_char_space:
 32036 000019D9 235C737061636500        	db `#\\space\0`
 32037                                  fmt_char_hex:
 32038 000019E1 235C782530325800        	db `#\\x%02X\0`
 32039                                  fmt_gensym:
 32040 000019E9 47256C6400                      db `G%ld\0`
 32041                                  fmt_closure:
 32042 000019EE 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
 32042 000019F7 206174203078253038-
 32042 00001A00 5820656E763D307825-
 32042 00001A09 30385820636F64653D-
 32042 00001A12 3078253038583E00   
 32043                                  fmt_lparen:
 32044 00001A1A 2800                    	db `(\0`
 32045                                  fmt_dotted_pair:
 32046 00001A1C 202E2000                	db ` . \0`
 32047                                  fmt_rparen:
 32048 00001A20 2900                    	db `)\0`
 32049                                  fmt_space:
 32050 00001A22 2000                    	db ` \0`
 32051                                  fmt_empty_vector:
 32052 00001A24 23282900                	db `#()\0`
 32053                                  fmt_vector:
 32054 00001A28 232800                  	db `#(\0`
 32055                                  fmt_real:
 32056 00001A2B 256600                  	db `%f\0`
 32057                                  fmt_fraction:
 32058 00001A2E 256C642F256C6400        	db `%ld/%ld\0`
 32059                                  fmt_zero:
 32060 00001A36 3000                    	db `0\0`
 32061                                  fmt_int:
 32062 00001A38 256C6400                	db `%ld\0`
 32063                                  fmt_unknown_scheme_object_error:
 32064 00001A3C 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
 32064 00001A45 6F723A20556E6B6E6F-
 32064 00001A4E 776E20536368656D65-
 32064 00001A57 2D6F626A6563742028-
 32064 00001A60 525454492030782530-
 32064 00001A69 32582920           
 32065 00001A6D 617420616464726573-     	db `at address 0x%08X\n\n\0`
 32065 00001A76 73203078253038580A-
 32065 00001A7F 0A00               
 32066                                  fmt_dquote:
 32067 00001A81 2200                    	db `\"\0`
 32068                                  fmt_string_char:
 32069 00001A83 256300                          db `%c\0`
 32070                                  fmt_string_char_7:
 32071 00001A86 5C6100                          db `\\a\0`
 32072                                  fmt_string_char_8:
 32073 00001A89 5C6200                          db `\\b\0`
 32074                                  fmt_string_char_9:
 32075 00001A8C 5C7400                          db `\\t\0`
 32076                                  fmt_string_char_10:
 32077 00001A8F 5C6E00                          db `\\n\0`
 32078                                  fmt_string_char_11:
 32079 00001A92 5C7600                          db `\\v\0`
 32080                                  fmt_string_char_12:
 32081 00001A95 5C6600                          db `\\f\0`
 32082                                  fmt_string_char_13:
 32083 00001A98 5C7200                          db `\\r\0`
 32084                                  fmt_string_char_34:
 32085 00001A9B 5C2200                          db `\\"\0`
 32086                                  fmt_string_char_92:
 32087 00001A9E 5C5C00                          db `\\\\\0`
 32088                                  fmt_string_char_hex:
 32089 00001AA1 5C7825583B00                    db `\\x%X;\0`
 32090                                  
 32091                                  section .text
 32092                                  
 32093                                  print_sexpr:
 32094 000182B5 C8000000                	enter 0, 0
 32095 000182B9 8A07                    	mov al, byte [rdi]
 32096 000182BB 3C00                    	cmp al, T_void
 32097 000182BD 7465                    	je .Lvoid
 32098 000182BF 3C01                    	cmp al, T_nil
 32099 000182C1 7470                    	je .Lnil
 32100 000182C3 3C09                    	cmp al, T_boolean_false
 32101 000182C5 747B                    	je .Lboolean_false
 32102 000182C7 3C0A                    	cmp al, T_boolean_true
 32103 000182C9 0F8482000000            	je .Lboolean_true
 32104 000182CF 3C02                    	cmp al, T_char
 32105 000182D1 0F8489000000            	je .Lchar
 32106 000182D7 3C41                    	cmp al, T_interned_symbol
 32107 000182D9 0F84CB010000            	je .Linterned_symbol
 32108 000182DF 3C42                            cmp al, T_uninterned_symbol
 32109 000182E1 0F84EF010000                    je .Luninterned_symbol
 32110 000182E7 3C21                    	cmp al, T_pair
 32111 000182E9 0F84FA010000            	je .Lpair
 32112 000182EF 3C22                    	cmp al, T_vector
 32113 000182F1 0F84C3020000            	je .Lvector
 32114 000182F7 3C04                    	cmp al, T_closure
 32115 000182F9 0F8491010000            	je .Lclosure
 32116 000182FF 3C13                    	cmp al, T_real
 32117 00018301 0F8454030000            	je .Lreal
 32118 00018307 3C12                    	cmp al, T_fraction
 32119 00018309 0F847A030000            	je .Lfraction
 32120 0001830F 3C11                    	cmp al, T_integer
 32121 00018311 0F84B3030000            	je .Linteger
 32122 00018317 3C03                    	cmp al, T_string
 32123 00018319 0F84BE030000            	je .Lstring
 32124                                  
 32125 0001831F E9F6040000              	jmp .Lunknown_sexpr_type
 32126                                  
 32127                                  .Lvoid:
 32128 00018324 48BF-                   	mov rdi, fmt_void
 32128 00018326 [7C19000000000000] 
 32129 0001832E E91A050000              	jmp .Lemit
 32130                                  
 32131                                  .Lnil:
 32132 00018333 48BF-                   	mov rdi, fmt_nil
 32132 00018335 [8419000000000000] 
 32133 0001833D E90B050000              	jmp .Lemit
 32134                                  
 32135                                  .Lboolean_false:
 32136 00018342 48BF-                   	mov rdi, fmt_boolean_false
 32136 00018344 [8719000000000000] 
 32137 0001834C E9FC040000              	jmp .Lemit
 32138                                  
 32139                                  .Lboolean_true:
 32140 00018351 48BF-                   	mov rdi, fmt_boolean_true
 32140 00018353 [8A19000000000000] 
 32141 0001835B E9ED040000              	jmp .Lemit
 32142                                  
 32143                                  .Lchar:
 32144 00018360 8A4701                  	mov al, byte [rdi + 1]
 32145 00018363 3C20                    	cmp al, ' '
 32146 00018365 7E28                    	jle .Lchar_whitespace
 32147 00018367 3C5C                    	cmp al, 92 		; backslash
 32148 00018369 0F847C000000            	je .Lchar_backslash
 32149 0001836F 3C22                    	cmp al, '"'
 32150 00018371 0F8483000000            	je .Lchar_dquote
 32151 00018377 4825FF000000            	and rax, 255
 32152 0001837D 48BF-                   	mov rdi, fmt_char_simple
 32152 0001837F [9519000000000000] 
 32153 00018387 4889C6                  	mov rsi, rax
 32154 0001838A E9BE040000              	jmp .Lemit
 32155                                  
 32156                                  .Lchar_whitespace:
 32157 0001838F 3C00                    	cmp al, 0
 32158 00018391 7476                    	je .Lchar_null
 32159 00018393 3C07                    	cmp al, 7
 32160 00018395 0F847D000000            	je .Lchar_bell
 32161 0001839B 3C08                    	cmp al, 8
 32162 0001839D 0F8484000000            	je .Lchar_backspace
 32163 000183A3 3C09                    	cmp al, 9
 32164 000183A5 0F848B000000            	je .Lchar_tab
 32165 000183AB 3C0A                    	cmp al, 10
 32166 000183AD 0F8492000000            	je .Lchar_newline
 32167 000183B3 3C0C                    	cmp al, 12
 32168 000183B5 0F8499000000            	je .Lchar_formfeed
 32169 000183BB 3C0D                    	cmp al, 13
 32170 000183BD 0F84A0000000            	je .Lchar_return
 32171 000183C3 3C1B                    	cmp al, 27
 32172 000183C5 0F84A7000000            	je .Lchar_escape
 32173 000183CB 4825FF000000            	and rax, 255
 32174 000183D1 3C20                    	cmp al, ' '
 32175 000183D3 0F84A8000000            	je .Lchar_space
 32176 000183D9 48BF-                   	mov rdi, fmt_char_hex
 32176 000183DB [E119000000000000] 
 32177 000183E3 4889C6                  	mov rsi, rax
 32178 000183E6 E962040000              	jmp .Lemit	
 32179                                  
 32180                                  .Lchar_backslash:
 32181 000183EB 48BF-                   	mov rdi, fmt_char_backslash
 32181 000183ED [8D19000000000000] 
 32182 000183F5 E953040000              	jmp .Lemit
 32183                                  
 32184                                  .Lchar_dquote:
 32185 000183FA 48BF-                   	mov rdi, fmt_char_dquote
 32185 000183FC [9119000000000000] 
 32186 00018404 E944040000              	jmp .Lemit
 32187                                  
 32188                                  .Lchar_null:
 32189 00018409 48BF-                   	mov rdi, fmt_char_null
 32189 0001840B [9A19000000000000] 
 32190 00018413 E935040000              	jmp .Lemit
 32191                                  
 32192                                  .Lchar_bell:
 32193 00018418 48BF-                   	mov rdi, fmt_char_bell
 32193 0001841A [A019000000000000] 
 32194 00018422 E926040000              	jmp .Lemit
 32195                                  
 32196                                  .Lchar_backspace:
 32197 00018427 48BF-                   	mov rdi, fmt_char_backspace
 32197 00018429 [A719000000000000] 
 32198 00018431 E917040000              	jmp .Lemit
 32199                                  
 32200                                  .Lchar_tab:
 32201 00018436 48BF-                   	mov rdi, fmt_char_tab
 32201 00018438 [B319000000000000] 
 32202 00018440 E908040000              	jmp .Lemit
 32203                                  
 32204                                  .Lchar_newline:
 32205 00018445 48BF-                   	mov rdi, fmt_char_newline
 32205 00018447 [B919000000000000] 
 32206 0001844F E9F9030000              	jmp .Lemit
 32207                                  
 32208                                  .Lchar_formfeed:
 32209 00018454 48BF-                   	mov rdi, fmt_char_formfeed
 32209 00018456 [C319000000000000] 
 32210 0001845E E9EA030000              	jmp .Lemit
 32211                                  
 32212                                  .Lchar_return:
 32213 00018463 48BF-                   	mov rdi, fmt_char_return
 32213 00018465 [CA19000000000000] 
 32214 0001846D E9DB030000              	jmp .Lemit
 32215                                  
 32216                                  .Lchar_escape:
 32217 00018472 48BF-                   	mov rdi, fmt_char_escape
 32217 00018474 [D319000000000000] 
 32218 0001847C E9CC030000              	jmp .Lemit
 32219                                  
 32220                                  .Lchar_space:
 32221 00018481 48BF-                   	mov rdi, fmt_char_space
 32221 00018483 [D919000000000000] 
 32222 0001848B E9BD030000              	jmp .Lemit
 32223                                  
 32224                                  .Lclosure:
 32225 00018490 4889FE                  	mov rsi, qword rdi
 32226 00018493 48BF-                   	mov rdi, fmt_closure
 32226 00018495 [EE19000000000000] 
 32227 0001849D 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
 32228 000184A1 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
 32229 000184A5 E9A3030000              	jmp .Lemit
 32230                                  
 32231                                  .Linterned_symbol:
 32232 000184AA 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
 32233 000184AE BE01000000              	mov rsi, 1		 ; size = 1 byte
 32234 000184B3 488B5701                	mov rdx, qword [rdi + 1] ; length
 32235 000184B7 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
 32236 000184BB 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
 32237                                  	ENTER
    44 000184C3 C8000000            <1>  enter 0, 0
    45 000184C7 4883E4F0            <1>  and rsp, ~15
 32238 000184CB E8(00000000)            	call fwrite
 32239                                  	LEAVE
    49 000184D0 C9                  <1>  leave
 32240 000184D1 E98C030000              	jmp .Lend
 32241                                  
 32242                                  .Luninterned_symbol:
 32243 000184D6 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
 32244 000184DA 48BF-                           mov rdi, fmt_gensym
 32244 000184DC [E919000000000000] 
 32245 000184E4 E964030000                      jmp .Lemit
 32246                                  	
 32247                                  .Lpair:
 32248 000184E9 57                      	push rdi
 32249 000184EA 48BF-                   	mov rdi, fmt_lparen
 32249 000184EC [1A1A000000000000] 
 32250 000184F4 B800000000              	mov rax, 0
 32251                                          ENTER
    44 000184F9 C8000000            <1>  enter 0, 0
    45 000184FD 4883E4F0            <1>  and rsp, ~15
 32252 00018501 E8(00000000)            	call printf
 32253                                          LEAVE
    49 00018506 C9                  <1>  leave
 32254 00018507 488B3C24                	mov rdi, qword [rsp] 	; pair
 32255 0001850B 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 32256 0001850F E8A1FDFFFF              	call print_sexpr
 32257 00018514 5F                      	pop rdi 		; pair
 32258 00018515 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 32259                                  .Lcdr:
 32260 00018519 8A07                    	mov al, byte [rdi]
 32261 0001851B 3C01                    	cmp al, T_nil
 32262 0001851D 7447                    	je .Lcdr_nil
 32263 0001851F 3C21                    	cmp al, T_pair
 32264 00018521 7462                    	je .Lcdr_pair
 32265 00018523 57                      	push rdi
 32266 00018524 48BF-                   	mov rdi, fmt_dotted_pair
 32266 00018526 [1C1A000000000000] 
 32267 0001852E B800000000              	mov rax, 0
 32268                                          ENTER
    44 00018533 C8000000            <1>  enter 0, 0
    45 00018537 4883E4F0            <1>  and rsp, ~15
 32269 0001853B E8(00000000)            	call printf
 32270                                          LEAVE
    49 00018540 C9                  <1>  leave
 32271 00018541 5F                      	pop rdi
 32272 00018542 E86EFDFFFF              	call print_sexpr
 32273 00018547 48BF-                   	mov rdi, fmt_rparen
 32273 00018549 [201A000000000000] 
 32274 00018551 B800000000              	mov rax, 0
 32275                                          ENTER
    44 00018556 C8000000            <1>  enter 0, 0
    45 0001855A 4883E4F0            <1>  and rsp, ~15
 32276 0001855E E8(00000000)            	call printf
 32277                                          LEAVE
    49 00018563 C9                  <1>  leave
 32278 00018564 C9                      	leave
 32279 00018565 C3                      	ret
 32280                                  
 32281                                  .Lcdr_nil:
 32282 00018566 48BF-                   	mov rdi, fmt_rparen
 32282 00018568 [201A000000000000] 
 32283 00018570 B800000000              	mov rax, 0
 32284                                          ENTER
    44 00018575 C8000000            <1>  enter 0, 0
    45 00018579 4883E4F0            <1>  and rsp, ~15
 32285 0001857D E8(00000000)            	call printf
 32286                                          LEAVE
    49 00018582 C9                  <1>  leave
 32287 00018583 C9                      	leave
 32288 00018584 C3                      	ret
 32289                                  
 32290                                  .Lcdr_pair:
 32291 00018585 57                      	push rdi
 32292 00018586 48BF-                   	mov rdi, fmt_space
 32292 00018588 [221A000000000000] 
 32293 00018590 B800000000              	mov rax, 0
 32294                                          ENTER
    44 00018595 C8000000            <1>  enter 0, 0
    45 00018599 4883E4F0            <1>  and rsp, ~15
 32295 0001859D E8(00000000)            	call printf
 32296                                          LEAVE
    49 000185A2 C9                  <1>  leave
 32297 000185A3 488B3C24                	mov rdi, qword [rsp]
 32298 000185A7 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 32299 000185AB E805FDFFFF              	call print_sexpr
 32300 000185B0 5F                      	pop rdi
 32301 000185B1 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 32302 000185B5 E95FFFFFFF              	jmp .Lcdr
 32303                                  
 32304                                  .Lvector:
 32305 000185BA 488B4701                	mov rax, qword [rdi + 1] ; length
 32306 000185BE 4883F800                	cmp rax, 0
 32307 000185C2 0F8484000000            	je .Lvector_empty
 32308 000185C8 57                      	push rdi
 32309 000185C9 48BF-                   	mov rdi, fmt_vector
 32309 000185CB [281A000000000000] 
 32310 000185D3 B800000000              	mov rax, 0
 32311                                          ENTER
    44 000185D8 C8000000            <1>  enter 0, 0
    45 000185DC 4883E4F0            <1>  and rsp, ~15
 32312 000185E0 E8(00000000)            	call printf
 32313                                          LEAVE
    49 000185E5 C9                  <1>  leave
 32314 000185E6 488B3C24                	mov rdi, qword [rsp]
 32315 000185EA FF7701                  	push qword [rdi + 1]
 32316 000185ED 6A01                    	push 1
 32317 000185EF 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
 32318 000185F3 E8BDFCFFFF              	call print_sexpr
 32319                                  .Lvector_loop:
 32320                                  	; [rsp] index
 32321                                  	; [rsp + 8*1] limit
 32322                                  	; [rsp + 8*2] vector
 32323 000185F8 488B0424                	mov rax, qword [rsp]
 32324 000185FC 483B442408              	cmp rax, qword [rsp + 8*1]
 32325 00018601 7436                    	je .Lvector_end
 32326 00018603 48BF-                   	mov rdi, fmt_space
 32326 00018605 [221A000000000000] 
 32327 0001860D B800000000              	mov rax, 0
 32328                                          ENTER
    44 00018612 C8000000            <1>  enter 0, 0
    45 00018616 4883E4F0            <1>  and rsp, ~15
 32329 0001861A E8(00000000)            	call printf
 32330                                          LEAVE
    49 0001861F C9                  <1>  leave
 32331 00018620 488B0424                	mov rax, qword [rsp]
 32332 00018624 488B5C2410              	mov rbx, qword [rsp + 8*2]
 32333 00018629 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
 32334 0001862E E882FCFFFF              	call print_sexpr
 32335 00018633 48FF0424                	inc qword [rsp]
 32336 00018637 EBBF                    	jmp .Lvector_loop
 32337                                  
 32338                                  .Lvector_end:
 32339 00018639 4883C418                	add rsp, 8*3
 32340 0001863D 48BF-                   	mov rdi, fmt_rparen
 32340 0001863F [201A000000000000] 
 32341 00018647 E901020000              	jmp .Lemit	
 32342                                  
 32343                                  .Lvector_empty:
 32344 0001864C 48BF-                   	mov rdi, fmt_empty_vector
 32344 0001864E [241A000000000000] 
 32345 00018656 E9F2010000              	jmp .Lemit
 32346                                  
 32347                                  .Lreal:
 32348 0001865B FF7701                  	push qword [rdi + 1]
 32349 0001865E F20F100424              	movsd xmm0, qword [rsp]
 32350 00018663 4883C408                	add rsp, 8*1
 32351 00018667 48BF-                   	mov rdi, fmt_real
 32351 00018669 [2B1A000000000000] 
 32352 00018671 B801000000              	mov rax, 1
 32353                                  	ENTER
    44 00018676 C8000000            <1>  enter 0, 0
    45 0001867A 4883E4F0            <1>  and rsp, ~15
 32354 0001867E E8(00000000)            	call printf
 32355                                  	LEAVE
    49 00018683 C9                  <1>  leave
 32356 00018684 E9D9010000              	jmp .Lend
 32357                                  
 32358                                  .Lfraction:
 32359 00018689 488B7701                	mov rsi, qword [rdi + 1]
 32360 0001868D 488B5709                	mov rdx, qword [rdi + 1 + 8]
 32361 00018691 4883FE00                	cmp rsi, 0
 32362 00018695 7415                    	je .Lrat_zero
 32363 00018697 4883FA01                	cmp rdx, 1
 32364 0001869B 741E                    	je .Lrat_int
 32365 0001869D 48BF-                   	mov rdi, fmt_fraction
 32365 0001869F [2E1A000000000000] 
 32366 000186A7 E9A1010000              	jmp .Lemit
 32367                                  
 32368                                  .Lrat_zero:
 32369 000186AC 48BF-                   	mov rdi, fmt_zero
 32369 000186AE [361A000000000000] 
 32370 000186B6 E992010000              	jmp .Lemit
 32371                                  
 32372                                  .Lrat_int:
 32373 000186BB 48BF-                   	mov rdi, fmt_int
 32373 000186BD [381A000000000000] 
 32374 000186C5 E983010000              	jmp .Lemit
 32375                                  
 32376                                  .Linteger:
 32377 000186CA 488B7701                	mov rsi, qword [rdi + 1]
 32378 000186CE 48BF-                   	mov rdi, fmt_int
 32378 000186D0 [381A000000000000] 
 32379 000186D8 E970010000              	jmp .Lemit
 32380                                  
 32381                                  .Lstring:
 32382 000186DD 488D4709                	lea rax, [rdi + 1 + 8]
 32383 000186E1 50                      	push rax
 32384 000186E2 FF7701                  	push qword [rdi + 1]
 32385 000186E5 48BF-                   	mov rdi, fmt_dquote
 32385 000186E7 [811A000000000000] 
 32386 000186EF B800000000              	mov rax, 0
 32387                                  	ENTER
    44 000186F4 C8000000            <1>  enter 0, 0
    45 000186F8 4883E4F0            <1>  and rsp, ~15
 32388 000186FC E8(00000000)            	call printf
 32389                                  	LEAVE
    49 00018701 C9                  <1>  leave
 32390                                  .Lstring_loop:
 32391                                  	; qword [rsp]: limit
 32392                                  	; qword [rsp + 8*1]: char *
 32393 00018702 48833C2400              	cmp qword [rsp], 0
 32394 00018707 0F84FD000000            	je .Lstring_end
 32395 0001870D 488B442408              	mov rax, qword [rsp + 8*1]
 32396 00018712 8A00                    	mov al, byte [rax]
 32397 00018714 4825FF000000            	and rax, 255
 32398 0001871A 3C07                    	cmp al, 7
 32399 0001871C 7468                            je .Lstring_char_7
 32400 0001871E 3C08                            cmp al, 8
 32401 00018720 7470                            je .Lstring_char_8
 32402 00018722 3C09                            cmp al, 9
 32403 00018724 7478                            je .Lstring_char_9
 32404 00018726 3C0A                            cmp al, 10
 32405 00018728 0F847C000000                    je .Lstring_char_10
 32406 0001872E 3C0B                            cmp al, 11
 32407 00018730 0F8480000000                    je .Lstring_char_11
 32408 00018736 3C0C                            cmp al, 12
 32409 00018738 0F8484000000                    je .Lstring_char_12
 32410 0001873E 3C0D                            cmp al, 13
 32411 00018740 0F8488000000                    je .Lstring_char_13
 32412 00018746 3C22                            cmp al, 34
 32413 00018748 0F848C000000                    je .Lstring_char_34
 32414 0001874E 3C5C                            cmp al, 92              ;         je .Lstring_char_92
 32416 00018750 3C20                            cmp al, ' '
 32417 00018752 0F8CA0000000                    jl .Lstring_char_hex
 32418 00018758 48BF-                           mov rdi, fmt_string_char
 32418 0001875A [831A000000000000] 
 32419 00018762 4889C6                          mov rsi, rax
 32420                                  .Lstring_char_emit:
 32421 00018765 B800000000                      mov rax, 0
 32422                                          ENTER
    44 0001876A C8000000            <1>  enter 0, 0
    45 0001876E 4883E4F0            <1>  and rsp, ~15
 32423 00018772 E8(00000000)                    call printf
 32424                                          LEAVE
    49 00018777 C9                  <1>  leave
 32425 00018778 48FF0C24                        dec qword [rsp]
 32426 0001877C 48FF442408                      inc qword [rsp + 8*1]
 32427 00018781 E97CFFFFFF                      jmp .Lstring_loop
 32428                                  
 32429                                  .Lstring_char_7:
 32430 00018786 48BF-                           mov rdi, fmt_string_char_7
 32430 00018788 [861A000000000000] 
 32431 00018790 EBD3                            jmp .Lstring_char_emit
 32432                                  
 32433                                  .Lstring_char_8:
 32434 00018792 48BF-                           mov rdi, fmt_string_char_8
 32434 00018794 [891A000000000000] 
 32435 0001879C EBC7                            jmp .Lstring_char_emit
 32436                                          
 32437                                  .Lstring_char_9:
 32438 0001879E 48BF-                           mov rdi, fmt_string_char_9
 32438 000187A0 [8C1A000000000000] 
 32439 000187A8 EBBB                            jmp .Lstring_char_emit
 32440                                  
 32441                                  .Lstring_char_10:
 32442 000187AA 48BF-                           mov rdi, fmt_string_char_10
 32442 000187AC [8F1A000000000000] 
 32443 000187B4 EBAF                            jmp .Lstring_char_emit
 32444                                  
 32445                                  .Lstring_char_11:
 32446 000187B6 48BF-                           mov rdi, fmt_string_char_11
 32446 000187B8 [921A000000000000] 
 32447 000187C0 EBA3                            jmp .Lstring_char_emit
 32448                                  
 32449                                  .Lstring_char_12:
 32450 000187C2 48BF-                           mov rdi, fmt_string_char_12
 32450 000187C4 [951A000000000000] 
 32451 000187CC EB97                            jmp .Lstring_char_emit
 32452                                  
 32453                                  .Lstring_char_13:
 32454 000187CE 48BF-                           mov rdi, fmt_string_char_13
 32454 000187D0 [981A000000000000] 
 32455 000187D8 EB8B                            jmp .Lstring_char_emit
 32456                                  
 32457                                  .Lstring_char_34:
 32458 000187DA 48BF-                           mov rdi, fmt_string_char_34
 32458 000187DC [9B1A000000000000] 
 32459 000187E4 E97CFFFFFF                      jmp .Lstring_char_emit
 32460                                  
 32461                                  .Lstring_char_92:
 32462 000187E9 48BF-                           mov rdi, fmt_string_char_92
 32462 000187EB [9E1A000000000000] 
 32463 000187F3 E96DFFFFFF                      jmp .Lstring_char_emit
 32464                                  
 32465                                  .Lstring_char_hex:
 32466 000187F8 48BF-                           mov rdi, fmt_string_char_hex
 32466 000187FA [A11A000000000000] 
 32467 00018802 4889C6                          mov rsi, rax
 32468 00018805 E95BFFFFFF                      jmp .Lstring_char_emit        
 32469                                  
 32470                                  .Lstring_end:
 32471 0001880A 4883C410                	add rsp, 8 * 2
 32472 0001880E 48BF-                   	mov rdi, fmt_dquote
 32472 00018810 [811A000000000000] 
 32473 00018818 EB33                    	jmp .Lemit
 32474                                  
 32475                                  .Lunknown_sexpr_type:
 32476 0001881A 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
 32476 0001881C [3C1A000000000000] 
 32477 00018824 4825FF000000            	and rax, 255
 32478 0001882A 4889C2                  	mov rdx, rax
 32479 0001882D 4889F9                  	mov rcx, rdi
 32480 00018830 488B3C25[00000000]      	mov rdi, qword [stderr]
 32481 00018838 B800000000              	mov rax, 0
 32482                                          ENTER
    44 0001883D C8000000            <1>  enter 0, 0
    45 00018841 4883E4F0            <1>  and rsp, ~15
 32483 00018845 E8(00000000)            	call fprintf
 32484                                          LEAVE
    49 0001884A C9                  <1>  leave
 32485 0001884B C9                              leave
 32486 0001884C C3                              ret
 32487                                  
 32488                                  .Lemit:
 32489 0001884D B800000000              	mov rax, 0
 32490                                          ENTER
    44 00018852 C8000000            <1>  enter 0, 0
    45 00018856 4883E4F0            <1>  and rsp, ~15
 32491 0001885A E8(00000000)            	call printf
 32492                                          LEAVE
    49 0001885F C9                  <1>  leave
 32493 00018860 EB00                    	jmp .Lend
 32494                                  
 32495                                  .Lend:
 32496                                  	LEAVE
    49 00018862 C9                  <1>  leave
 32497 00018863 C3                      	ret
 32498                                  
 32499                                  ;;; rdi: address of free variable
 32500                                  ;;; rsi: address of code-pointer
 32501                                  bind_primitive:
 32502 00018864 C8000000                        enter 0, 0
 32503 00018868 57                              push rdi
 32504 00018869 BF11000000                      mov rdi, (1 + 8 + 8)
 32505 0001886E E8C1F7FFFF                      call malloc
 32506 00018873 5F                              pop rdi
 32507 00018874 C60004                          mov byte [rax], T_closure
 32508 00018877 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
 32509 0001887F 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
 32510 00018883 488907                          mov qword [rdi], rax
 32511 00018886 48B8-                           mov rax, sob_void
 32511 00018888 [0000000000000000] 
 32512 00018890 C9                              leave
 32513 00018891 C3                              ret
 32514                                  
 32515                                  L_code_ptr_ash:
 32516 00018892 C8000000                        enter 0, 0
 32517 00018896 48837D1802                      cmp COUNT, 2
 32518 0001889B 0F8582140000                    jne L_error_arg_count_2
 32519 000188A1 488B7D20                        mov rdi, PARAM(0)
 32520                                          assert_integer(rdi)
    53 000188A5 803F11              <1>  cmp byte [%1], %2
    54 000188A8 0F8514150000        <1>  jne L_error_incorrect_type
 32521 000188AE 488B4D28                        mov rcx, PARAM(1)
 32522                                          assert_integer(rcx)
    53 000188B2 803911              <1>  cmp byte [%1], %2
    54 000188B5 0F8507150000        <1>  jne L_error_incorrect_type
 32523 000188BB 488B7F01                        mov rdi, qword [rdi + 1]
 32524 000188BF 488B4901                        mov rcx, qword [rcx + 1]
 32525 000188C3 4883F900                        cmp rcx, 0
 32526 000188C7 7C0F                            jl .L_negative
 32527                                  .L_loop_positive:
 32528 000188C9 4883F900                        cmp rcx, 0
 32529 000188CD 741B                            je .L_exit
 32530 000188CF 48D3E7                          sal rdi, cl
 32531 000188D2 48C1E908                        shr rcx, 8
 32532 000188D6 EBF1                            jmp .L_loop_positive
 32533                                  .L_negative:
 32534 000188D8 48F7D9                          neg rcx
 32535                                  .L_loop_negative:
 32536 000188DB 4883F900                        cmp rcx, 0
 32537 000188DF 7409                            je .L_exit
 32538 000188E1 48D3FF                          sar rdi, cl
 32539 000188E4 48C1E908                        shr rcx, 8
 32540 000188E8 EBF1                            jmp .L_loop_negative
 32541                                  .L_exit:
 32542 000188EA E84E130000                      call make_integer
 32543 000188EF C9                              leave
 32544 000188F0 C22000                          ret AND_KILL_FRAME(2)
 32545                                  
 32546                                  L_code_ptr_logand:
 32547 000188F3 C8000000                        enter 0, 0
 32548 000188F7 48837D1802                      cmp COUNT, 2
 32549 000188FC 0F8521140000                    jne L_error_arg_count_2
 32550 00018902 4C8B4520                        mov r8, PARAM(0)
 32551                                          assert_integer(r8)
    53 00018906 41803811            <1>  cmp byte [%1], %2
    54 0001890A 0F85B2140000        <1>  jne L_error_incorrect_type
 32552 00018910 4C8B4D28                        mov r9, PARAM(1)
 32553                                          assert_integer(r9)
    53 00018914 41803911            <1>  cmp byte [%1], %2
    54 00018918 0F85A4140000        <1>  jne L_error_incorrect_type
 32554 0001891E 498B7801                        mov rdi, qword [r8 + 1]
 32555 00018922 49237901                        and rdi, qword [r9 + 1]
 32556 00018926 E812130000                      call make_integer
 32557 0001892B C9                              leave
 32558 0001892C C22000                          ret AND_KILL_FRAME(2)
 32559                                  
 32560                                  L_code_ptr_logor:
 32561 0001892F C8000000                        enter 0, 0
 32562 00018933 48837D1802                      cmp COUNT, 2
 32563 00018938 0F85E5130000                    jne L_error_arg_count_2
 32564 0001893E 4C8B4520                        mov r8, PARAM(0)
 32565                                          assert_integer(r8)
    53 00018942 41803811            <1>  cmp byte [%1], %2
    54 00018946 0F8576140000        <1>  jne L_error_incorrect_type
 32566 0001894C 4C8B4D28                        mov r9, PARAM(1)
 32567                                          assert_integer(r9)
    53 00018950 41803911            <1>  cmp byte [%1], %2
    54 00018954 0F8568140000        <1>  jne L_error_incorrect_type
 32568 0001895A 498B7801                        mov rdi, qword [r8 + 1]
 32569 0001895E 490B7901                        or rdi, qword [r9 + 1]
 32570 00018962 E8D6120000                      call make_integer
 32571 00018967 C9                              leave
 32572 00018968 C22000                          ret AND_KILL_FRAME(2)
 32573                                  
 32574                                  L_code_ptr_logxor:
 32575 0001896B C8000000                        enter 0, 0
 32576 0001896F 48837D1802                      cmp COUNT, 2
 32577 00018974 0F85A9130000                    jne L_error_arg_count_2
 32578 0001897A 4C8B4520                        mov r8, PARAM(0)
 32579                                          assert_integer(r8)
    53 0001897E 41803811            <1>  cmp byte [%1], %2
    54 00018982 0F853A140000        <1>  jne L_error_incorrect_type
 32580 00018988 4C8B4D28                        mov r9, PARAM(1)
 32581                                          assert_integer(r9)
    53 0001898C 41803911            <1>  cmp byte [%1], %2
    54 00018990 0F852C140000        <1>  jne L_error_incorrect_type
 32582 00018996 498B7801                        mov rdi, qword [r8 + 1]
 32583 0001899A 49337901                        xor rdi, qword [r9 + 1]
 32584 0001899E E89A120000                      call make_integer
 32585                                          LEAVE
    49 000189A3 C9                  <1>  leave
 32586 000189A4 C22000                          ret AND_KILL_FRAME(2)
 32587                                  
 32588                                  L_code_ptr_lognot:
 32589 000189A7 C8000000                        enter 0, 0
 32590 000189AB 48837D1801                      cmp COUNT, 1
 32591 000189B0 0F8538130000                    jne L_error_arg_count_1
 32592 000189B6 4C8B4520                        mov r8, PARAM(0)
 32593                                          assert_integer(r8)
    53 000189BA 41803811            <1>  cmp byte [%1], %2
    54 000189BE 0F85FE130000        <1>  jne L_error_incorrect_type
 32594 000189C4 498B7801                        mov rdi, qword [r8 + 1]
 32595 000189C8 48F7D7                          not rdi
 32596 000189CB E86D120000                      call make_integer
 32597 000189D0 C9                              leave
 32598 000189D1 C21800                          ret AND_KILL_FRAME(1)
 32599                                  
 32600                                  L_code_ptr_bin_apply:
 32601 000189D4 C8000000                        enter 0, 0
 32602                                          ;assuming we have 2 params - f and list to apply f on it
 32603 000189D8 488B4520                        mov rax, PARAM(0) ;save f
 32604 000189DC 488B5D28                        mov rbx, PARAM(1) ;save s
 32605 000189E0 4C8B5500                        mov r10, qword [rbp] ;save old rbp
 32606 000189E4 4C8B5D08                        mov r11, qword [rbp + 8 * 1] ;saving ret
 32607 000189E8 4C8B6001                        mov r12, SOB_CLOSURE_ENV(rax) ;saving env
 32608 000189EC 41B800000000                    mov r8, 0 ;counter for list
 32609                                  
 32610                                  .list_length_loop:
 32611 000189F2 803B01                          cmp byte [rbx], T_nil ;while s!=null
 32612 000189F5 7409                            je .list_length_loop_end
 32613 000189F7 49FFC0                          inc r8
 32614 000189FA 488B5B09                        mov rbx, SOB_PAIR_CDR(rbx)
 32615 000189FE EBF2                            jmp .list_length_loop
 32616                                  
 32617                                  .list_length_loop_end:
 32618 00018A00 488B5D28                        mov rbx, PARAM(1) ;restore s
 32619 00018A04 4D89C7                          mov r15, r8 ;save list length
 32620 00018A07 4983E802                        sub r8, 2 ;the stack needs to keep the list, it's already have 2 params
 32621 00018A0B 49C1E003                        shl r8, 3 ;8 bytes for each param
 32622 00018A0F 4C29C5                          sub rbp, r8 ;allocating space for the list        
 32623 00018A12 41B800000000                    mov r8, 0 ;counter for list
 32624                                  
 32625                                  
 32626                                  .copy_params_loop:
 32627 00018A18 4D39F8                          cmp r8, r15
 32628 00018A1B 7412                            je .copy_env_ret_rbp
 32629 00018A1D 488B4B01                        mov rcx, SOB_PAIR_CAR(rbx)
 32630 00018A21 4A894CC520                      mov qword[rbp + 8 * (4 + r8)], rcx
 32631 00018A26 488B5B09                        mov rbx, SOB_PAIR_CDR(rbx)
 32632 00018A2A 49FFC0                          inc r8
 32633 00018A2D EBE9                            jmp .copy_params_loop
 32634                                  
 32635                                  .copy_env_ret_rbp:
 32636 00018A2F 4C895500                        mov qword[rbp], r10 ;in the end rbp points to the older rbp
 32637 00018A33 4C895D08                        mov qword[rbp + 8 * 1], r11 ;restore ret
 32638 00018A37 4C896510                        mov qword[rbp + 8 * 2], r12 ;restore env
 32639 00018A3B 4C897D18                        mov qword[rbp + 8 * 3], r15 ;save list length
 32640 00018A3F 4C89DC                          mov rsp, r11 ;rsp points to the ret adress
 32641 00018A42 C9                              leave
 32642 00018A43 FF6009                          jmp SOB_CLOSURE_CODE(rax)
 32643                                  
 32644                                  L_code_ptr_is_null:
 32645 00018A46 C8000000                        enter 0, 0
 32646 00018A4A 48837D1801                      cmp COUNT, 1
 32647 00018A4F 0F8599120000                    jne L_error_arg_count_1
 32648 00018A55 488B4520                        mov rax, PARAM(0)
 32649 00018A59 803801                          cmp byte [rax], T_nil
 32650 00018A5C 750C                            jne .L_false
 32651 00018A5E 48B8-                           mov rax, sob_boolean_true
 32651 00018A60 [0300000000000000] 
 32652 00018A68 EB0A                            jmp .L_end
 32653                                  .L_false:
 32654 00018A6A 48B8-                           mov rax, sob_boolean_false
 32654 00018A6C [0200000000000000] 
 32655                                  .L_end:
 32656 00018A74 C9                              leave
 32657 00018A75 C21800                          ret AND_KILL_FRAME(1)
 32658                                  
 32659                                  L_code_ptr_is_pair:
 32660 00018A78 C8000000                        enter 0, 0
 32661 00018A7C 48837D1801                      cmp COUNT, 1
 32662 00018A81 0F8567120000                    jne L_error_arg_count_1
 32663 00018A87 488B4520                        mov rax, PARAM(0)
 32664 00018A8B 803821                          cmp byte [rax], T_pair
 32665 00018A8E 750C                            jne .L_false
 32666 00018A90 48B8-                           mov rax, sob_boolean_true
 32666 00018A92 [0300000000000000] 
 32667 00018A9A EB0A                            jmp .L_end
 32668                                  .L_false:
 32669 00018A9C 48B8-                           mov rax, sob_boolean_false
 32669 00018A9E [0200000000000000] 
 32670                                  .L_end:
 32671 00018AA6 C9                              leave
 32672 00018AA7 C21800                          ret AND_KILL_FRAME(1)
 32673                                          
 32674                                  L_code_ptr_is_void:
 32675 00018AAA C8000000                        enter 0, 0
 32676 00018AAE 48837D1801                      cmp COUNT, 1
 32677 00018AB3 0F8535120000                    jne L_error_arg_count_1
 32678 00018AB9 488B4520                        mov rax, PARAM(0)
 32679 00018ABD 803800                          cmp byte [rax], T_void
 32680 00018AC0 750C                            jne .L_false
 32681 00018AC2 48B8-                           mov rax, sob_boolean_true
 32681 00018AC4 [0300000000000000] 
 32682 00018ACC EB0A                            jmp .L_end
 32683                                  .L_false:
 32684 00018ACE 48B8-                           mov rax, sob_boolean_false
 32684 00018AD0 [0200000000000000] 
 32685                                  .L_end:
 32686 00018AD8 C9                              leave
 32687 00018AD9 C21800                          ret AND_KILL_FRAME(1)
 32688                                  
 32689                                  L_code_ptr_is_char:
 32690 00018ADC C8000000                        enter 0, 0
 32691 00018AE0 48837D1801                      cmp COUNT, 1
 32692 00018AE5 0F8503120000                    jne L_error_arg_count_1
 32693 00018AEB 488B4520                        mov rax, PARAM(0)
 32694 00018AEF 803802                          cmp byte [rax], T_char
 32695 00018AF2 750C                            jne .L_false
 32696 00018AF4 48B8-                           mov rax, sob_boolean_true
 32696 00018AF6 [0300000000000000] 
 32697 00018AFE EB0A                            jmp .L_end
 32698                                  .L_false:
 32699 00018B00 48B8-                           mov rax, sob_boolean_false
 32699 00018B02 [0200000000000000] 
 32700                                  .L_end:
 32701 00018B0A C9                              leave
 32702 00018B0B C21800                          ret AND_KILL_FRAME(1)
 32703                                  
 32704                                  L_code_ptr_is_string:
 32705 00018B0E C8000000                        enter 0, 0
 32706 00018B12 48837D1801                      cmp COUNT, 1
 32707 00018B17 0F85D1110000                    jne L_error_arg_count_1
 32708 00018B1D 488B4520                        mov rax, PARAM(0)
 32709 00018B21 803803                          cmp byte [rax], T_string
 32710 00018B24 750C                            jne .L_false
 32711 00018B26 48B8-                           mov rax, sob_boolean_true
 32711 00018B28 [0300000000000000] 
 32712 00018B30 EB0A                            jmp .L_end
 32713                                  .L_false:
 32714 00018B32 48B8-                           mov rax, sob_boolean_false
 32714 00018B34 [0200000000000000] 
 32715                                  .L_end:
 32716 00018B3C C9                              leave
 32717 00018B3D C21800                          ret AND_KILL_FRAME(1)
 32718                                  
 32719                                  L_code_ptr_is_symbol:
 32720 00018B40 C8000000                        enter 0, 0
 32721 00018B44 48837D1801                      cmp COUNT, 1
 32722 00018B49 0F859F110000                    jne L_error_arg_count_1
 32723 00018B4F 4C8B4520                        mov r8, PARAM(0)
 32724 00018B53 41802040                        and byte [r8], T_symbol
 32725 00018B57 740C                            jz .L_false
 32726 00018B59 48B8-                           mov rax, sob_boolean_true
 32726 00018B5B [0300000000000000] 
 32727 00018B63 EB0A                            jmp .L_exit
 32728                                  .L_false:
 32729 00018B65 48B8-                           mov rax, sob_boolean_false
 32729 00018B67 [0200000000000000] 
 32730                                  .L_exit:
 32731 00018B6F C9                              leave
 32732 00018B70 C21800                          ret AND_KILL_FRAME(1)
 32733                                  
 32734                                  L_code_ptr_is_uninterned_symbol:
 32735 00018B73 C8000000                        enter 0, 0
 32736 00018B77 48837D1801                      cmp COUNT, 1
 32737 00018B7C 0F856C110000                    jne L_error_arg_count_1
 32738 00018B82 4C8B4520                        mov r8, PARAM(0)
 32739 00018B86 41803842                        cmp byte [r8], T_uninterned_symbol
 32740 00018B8A 750C                            jne .L_false
 32741 00018B8C 48B8-                           mov rax, sob_boolean_true
 32741 00018B8E [0300000000000000] 
 32742 00018B96 EB0A                            jmp .L_exit
 32743                                  .L_false:
 32744 00018B98 48B8-                           mov rax, sob_boolean_false
 32744 00018B9A [0200000000000000] 
 32745                                  .L_exit:
 32746 00018BA2 C9                              leave
 32747 00018BA3 C21800                          ret AND_KILL_FRAME(1)
 32748                                  
 32749                                  L_code_ptr_is_interned_symbol:
 32750 00018BA6 C8000000                        enter 0, 0
 32751 00018BAA 48837D1801                      cmp COUNT, 1
 32752 00018BAF 0F8539110000                    jne L_error_arg_count_1
 32753 00018BB5 488B4520                        mov rax, PARAM(0)
 32754 00018BB9 803841                          cmp byte [rax], T_interned_symbol
 32755 00018BBC 750C                            jne .L_false
 32756 00018BBE 48B8-                           mov rax, sob_boolean_true
 32756 00018BC0 [0300000000000000] 
 32757 00018BC8 EB0A                            jmp .L_end
 32758                                  .L_false:
 32759 00018BCA 48B8-                           mov rax, sob_boolean_false
 32759 00018BCC [0200000000000000] 
 32760                                  .L_end:
 32761 00018BD4 C9                              leave
 32762 00018BD5 C21800                          ret AND_KILL_FRAME(1)
 32763                                  
 32764                                  L_code_ptr_gensym:
 32765 00018BD8 C8000000                        enter 0, 0
 32766 00018BDC 48837D1800                      cmp COUNT, 0
 32767 00018BE1 0F85D2100000                    jne L_error_arg_count_0
 32768 00018BE7 48FF0425[A71A0000]              inc qword [gensym_count]
 32769 00018BEF BF09000000                      mov rdi, (1 + 8)
 32770 00018BF4 E83BF4FFFF                      call malloc
 32771 00018BF9 C60042                          mov byte [rax], T_uninterned_symbol
 32772 00018BFC 488B0C25[A71A0000]              mov rcx, qword [gensym_count]
 32773 00018C04 48894801                        mov qword [rax + 1], rcx
 32774 00018C08 C9                              leave
 32775 00018C09 C21000                          ret AND_KILL_FRAME(0)
 32776                                  
 32777                                  L_code_ptr_is_vector:
 32778 00018C0C C8000000                        enter 0, 0
 32779 00018C10 48837D1801                      cmp COUNT, 1
 32780 00018C15 0F85D3100000                    jne L_error_arg_count_1
 32781 00018C1B 488B4520                        mov rax, PARAM(0)
 32782 00018C1F 803822                          cmp byte [rax], T_vector
 32783 00018C22 750C                            jne .L_false
 32784 00018C24 48B8-                           mov rax, sob_boolean_true
 32784 00018C26 [0300000000000000] 
 32785 00018C2E EB0A                            jmp .L_end
 32786                                  .L_false:
 32787 00018C30 48B8-                           mov rax, sob_boolean_false
 32787 00018C32 [0200000000000000] 
 32788                                  .L_end:
 32789 00018C3A C9                              leave
 32790 00018C3B C21800                          ret AND_KILL_FRAME(1)
 32791                                  
 32792                                  L_code_ptr_is_closure:
 32793 00018C3E C8000000                        enter 0, 0
 32794 00018C42 48837D1801                      cmp COUNT, 1
 32795 00018C47 0F85A1100000                    jne L_error_arg_count_1
 32796 00018C4D 488B4520                        mov rax, PARAM(0)
 32797 00018C51 803804                          cmp byte [rax], T_closure
 32798 00018C54 750C                            jne .L_false
 32799 00018C56 48B8-                           mov rax, sob_boolean_true
 32799 00018C58 [0300000000000000] 
 32800 00018C60 EB0A                            jmp .L_end
 32801                                  .L_false:
 32802 00018C62 48B8-                           mov rax, sob_boolean_false
 32802 00018C64 [0200000000000000] 
 32803                                  .L_end:
 32804 00018C6C C9                              leave
 32805 00018C6D C21800                          ret AND_KILL_FRAME(1)
 32806                                  
 32807                                  L_code_ptr_is_real:
 32808 00018C70 C8000000                        enter 0, 0
 32809 00018C74 48837D1801                      cmp COUNT, 1
 32810 00018C79 0F856F100000                    jne L_error_arg_count_1
 32811 00018C7F 488B4520                        mov rax, PARAM(0)
 32812 00018C83 803813                          cmp byte [rax], T_real
 32813 00018C86 750C                            jne .L_false
 32814 00018C88 48B8-                           mov rax, sob_boolean_true
 32814 00018C8A [0300000000000000] 
 32815 00018C92 EB0A                            jmp .L_end
 32816                                  .L_false:
 32817 00018C94 48B8-                           mov rax, sob_boolean_false
 32817 00018C96 [0200000000000000] 
 32818                                  .L_end:
 32819 00018C9E C9                              leave
 32820 00018C9F C21800                          ret AND_KILL_FRAME(1)
 32821                                  
 32822                                  L_code_ptr_is_fraction:
 32823 00018CA2 C8000000                        enter 0, 0
 32824 00018CA6 48837D1801                      cmp COUNT, 1
 32825 00018CAB 0F853D100000                    jne L_error_arg_count_1
 32826 00018CB1 488B4520                        mov rax, PARAM(0)
 32827 00018CB5 803812                          cmp byte [rax], T_fraction
 32828 00018CB8 750C                            jne .L_false
 32829 00018CBA 48B8-                           mov rax, sob_boolean_true
 32829 00018CBC [0300000000000000] 
 32830 00018CC4 EB0A                            jmp .L_end
 32831                                  .L_false:
 32832 00018CC6 48B8-                           mov rax, sob_boolean_false
 32832 00018CC8 [0200000000000000] 
 32833                                  .L_end:
 32834 00018CD0 C9                              leave
 32835 00018CD1 C21800                          ret AND_KILL_FRAME(1)
 32836                                  
 32837                                  L_code_ptr_is_boolean:
 32838 00018CD4 C8000000                        enter 0, 0
 32839 00018CD8 48837D1801                      cmp COUNT, 1
 32840 00018CDD 0F850B100000                    jne L_error_arg_count_1
 32841 00018CE3 488B4520                        mov rax, PARAM(0)
 32842 00018CE7 8A18                            mov bl, byte [rax]
 32843 00018CE9 80E308                          and bl, T_boolean
 32844 00018CEC 740C                            je .L_false
 32845 00018CEE 48B8-                           mov rax, sob_boolean_true
 32845 00018CF0 [0300000000000000] 
 32846 00018CF8 EB0A                            jmp .L_end
 32847                                  .L_false:
 32848 00018CFA 48B8-                           mov rax, sob_boolean_false
 32848 00018CFC [0200000000000000] 
 32849                                  .L_end:
 32850 00018D04 C9                              leave
 32851 00018D05 C21800                          ret AND_KILL_FRAME(1)
 32852                                          
 32853                                  L_code_ptr_is_boolean_false:
 32854 00018D08 C8000000                        enter 0, 0
 32855 00018D0C 48837D1801                      cmp COUNT, 1
 32856 00018D11 0F85D70F0000                    jne L_error_arg_count_1
 32857 00018D17 488B4520                        mov rax, PARAM(0)
 32858 00018D1B 8A18                            mov bl, byte [rax]
 32859 00018D1D 80FB09                          cmp bl, T_boolean_false
 32860 00018D20 750C                            jne .L_false
 32861 00018D22 48B8-                           mov rax, sob_boolean_true
 32861 00018D24 [0300000000000000] 
 32862 00018D2C EB0A                            jmp .L_end
 32863                                  .L_false:
 32864 00018D2E 48B8-                           mov rax, sob_boolean_false
 32864 00018D30 [0200000000000000] 
 32865                                  .L_end:
 32866 00018D38 C9                              leave
 32867 00018D39 C21800                          ret AND_KILL_FRAME(1)
 32868                                  
 32869                                  L_code_ptr_is_boolean_true:
 32870 00018D3C C8000000                        enter 0, 0
 32871 00018D40 48837D1801                      cmp COUNT, 1
 32872 00018D45 0F85A30F0000                    jne L_error_arg_count_1
 32873 00018D4B 488B4520                        mov rax, PARAM(0)
 32874 00018D4F 8A18                            mov bl, byte [rax]
 32875 00018D51 80FB0A                          cmp bl, T_boolean_true
 32876 00018D54 750C                            jne .L_false
 32877 00018D56 48B8-                           mov rax, sob_boolean_true
 32877 00018D58 [0300000000000000] 
 32878 00018D60 EB0A                            jmp .L_end
 32879                                  .L_false:
 32880 00018D62 48B8-                           mov rax, sob_boolean_false
 32880 00018D64 [0200000000000000] 
 32881                                  .L_end:
 32882 00018D6C C9                              leave
 32883 00018D6D C21800                          ret AND_KILL_FRAME(1)
 32884                                  
 32885                                  L_code_ptr_is_number:
 32886 00018D70 C8000000                        enter 0, 0
 32887 00018D74 48837D1801                      cmp COUNT, 1
 32888 00018D79 0F856F0F0000                    jne L_error_arg_count_1
 32889 00018D7F 488B4520                        mov rax, PARAM(0)
 32890 00018D83 8A18                            mov bl, byte [rax]
 32891 00018D85 80E310                          and bl, T_number
 32892 00018D88 740C                            jz .L_false
 32893 00018D8A 48B8-                           mov rax, sob_boolean_true
 32893 00018D8C [0300000000000000] 
 32894 00018D94 EB0A                            jmp .L_end
 32895                                  .L_false:
 32896 00018D96 48B8-                           mov rax, sob_boolean_false
 32896 00018D98 [0200000000000000] 
 32897                                  .L_end:
 32898 00018DA0 C9                              leave
 32899 00018DA1 C21800                          ret AND_KILL_FRAME(1)
 32900                                          
 32901                                  L_code_ptr_is_collection:
 32902 00018DA4 C8000000                        enter 0, 0
 32903 00018DA8 48837D1801                      cmp COUNT, 1
 32904 00018DAD 0F853B0F0000                    jne L_error_arg_count_1
 32905 00018DB3 488B4520                        mov rax, PARAM(0)
 32906 00018DB7 8A18                            mov bl, byte [rax]
 32907 00018DB9 80E320                          and bl, T_collection
 32908 00018DBC 740C                            je .L_false
 32909 00018DBE 48B8-                           mov rax, sob_boolean_true
 32909 00018DC0 [0300000000000000] 
 32910 00018DC8 EB0A                            jmp .L_end
 32911                                  .L_false:
 32912 00018DCA 48B8-                           mov rax, sob_boolean_false
 32912 00018DCC [0200000000000000] 
 32913                                  .L_end:
 32914 00018DD4 C9                              leave
 32915 00018DD5 C21800                          ret AND_KILL_FRAME(1)
 32916                                  
 32917                                  L_code_ptr_cons:
 32918 00018DD8 C8000000                        enter 0, 0
 32919 00018DDC 48837D1802                      cmp COUNT, 2
 32920 00018DE1 0F853C0F0000                    jne L_error_arg_count_2
 32921 00018DE7 BF11000000                      mov rdi, (1 + 8 + 8)
 32922 00018DEC E843F2FFFF                      call malloc
 32923 00018DF1 C60021                          mov byte [rax], T_pair
 32924 00018DF4 488B5D20                        mov rbx, PARAM(0)
 32925 00018DF8 48895801                        mov SOB_PAIR_CAR(rax), rbx
 32926 00018DFC 488B5D28                        mov rbx, PARAM(1)
 32927 00018E00 48895809                        mov SOB_PAIR_CDR(rax), rbx
 32928 00018E04 C9                              leave
 32929 00018E05 C22000                          ret AND_KILL_FRAME(2)
 32930                                  
 32931                                  L_code_ptr_display_sexpr:
 32932 00018E08 C8000000                        enter 0, 0
 32933 00018E0C 48837D1801                      cmp COUNT, 1
 32934 00018E11 0F85D70E0000                    jne L_error_arg_count_1
 32935 00018E17 488B7D20                        mov rdi, PARAM(0)
 32936 00018E1B E895F4FFFF                      call print_sexpr
 32937 00018E20 48B8-                           mov rax, sob_void
 32937 00018E22 [0000000000000000] 
 32938 00018E2A C9                              leave
 32939 00018E2B C21800                          ret AND_KILL_FRAME(1)
 32940                                  
 32941                                  L_code_ptr_write_char:
 32942 00018E2E C8000000                        enter 0, 0
 32943 00018E32 48837D1801                      cmp COUNT, 1
 32944 00018E37 0F85B10E0000                    jne L_error_arg_count_1
 32945 00018E3D 488B4520                        mov rax, PARAM(0)
 32946                                          assert_char(rax)
    53 00018E41 803802              <1>  cmp byte [%1], %2
    54 00018E44 0F85780F0000        <1>  jne L_error_incorrect_type
 32947 00018E4A 8A4001                          mov al, SOB_CHAR_VALUE(rax)
 32948 00018E4D 4825FF000000                    and rax, 255
 32949 00018E53 48BF-                           mov rdi, fmt_char
 32949 00018E55 [AF1A000000000000] 
 32950 00018E5D 4889C6                          mov rsi, rax
 32951 00018E60 B800000000                      mov rax, 0
 32952                                          ENTER
    44 00018E65 C8000000            <1>  enter 0, 0
    45 00018E69 4883E4F0            <1>  and rsp, ~15
 32953 00018E6D E8(00000000)                    call printf
 32954                                          LEAVE
    49 00018E72 C9                  <1>  leave
 32955 00018E73 48B8-                           mov rax, sob_void
 32955 00018E75 [0000000000000000] 
 32956 00018E7D C9                              leave
 32957 00018E7E C21800                          ret AND_KILL_FRAME(1)
 32958                                  
 32959                                  L_code_ptr_car:
 32960 00018E81 C8000000                        enter 0, 0
 32961 00018E85 48837D1801                      cmp COUNT, 1
 32962 00018E8A 0F855E0E0000                    jne L_error_arg_count_1
 32963 00018E90 488B4520                        mov rax, PARAM(0)
 32964                                          assert_pair(rax)
    53 00018E94 803821              <1>  cmp byte [%1], %2
    54 00018E97 0F85250F0000        <1>  jne L_error_incorrect_type
 32965 00018E9D 488B4001                        mov rax, SOB_PAIR_CAR(rax)
 32966 00018EA1 C9                              leave
 32967 00018EA2 C21800                          ret AND_KILL_FRAME(1)
 32968                                          
 32969                                  L_code_ptr_cdr:
 32970 00018EA5 C8000000                        enter 0, 0
 32971 00018EA9 48837D1801                      cmp COUNT, 1
 32972 00018EAE 0F853A0E0000                    jne L_error_arg_count_1
 32973 00018EB4 488B4520                        mov rax, PARAM(0)
 32974                                          assert_pair(rax)
    53 00018EB8 803821              <1>  cmp byte [%1], %2
    54 00018EBB 0F85010F0000        <1>  jne L_error_incorrect_type
 32975 00018EC1 488B4009                        mov rax, SOB_PAIR_CDR(rax)
 32976 00018EC5 C9                              leave
 32977 00018EC6 C21800                          ret AND_KILL_FRAME(1)
 32978                                          
 32979                                  L_code_ptr_string_length:
 32980 00018EC9 C8000000                        enter 0, 0
 32981 00018ECD 48837D1801                      cmp COUNT, 1
 32982 00018ED2 0F85160E0000                    jne L_error_arg_count_1
 32983 00018ED8 488B4520                        mov rax, PARAM(0)
 32984                                          assert_string(rax)
    53 00018EDC 803803              <1>  cmp byte [%1], %2
    54 00018EDF 0F85DD0E0000        <1>  jne L_error_incorrect_type
 32985 00018EE5 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
 32986 00018EE9 E84F0D0000                      call make_integer
 32987 00018EEE C9                              leave
 32988 00018EEF C21800                          ret AND_KILL_FRAME(1)
 32989                                  
 32990                                  L_code_ptr_vector_length:
 32991 00018EF2 C8000000                        enter 0, 0
 32992 00018EF6 48837D1801                      cmp COUNT, 1
 32993 00018EFB 0F85ED0D0000                    jne L_error_arg_count_1
 32994 00018F01 488B4520                        mov rax, PARAM(0)
 32995                                          assert_vector(rax)
    53 00018F05 803822              <1>  cmp byte [%1], %2
    54 00018F08 0F85B40E0000        <1>  jne L_error_incorrect_type
 32996 00018F0E 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
 32997 00018F12 E8260D0000                      call make_integer
 32998 00018F17 C9                              leave
 32999 00018F18 C21800                          ret AND_KILL_FRAME(1)
 33000                                  
 33001                                  L_code_ptr_real_to_integer:
 33002 00018F1B C8000000                        enter 0, 0
 33003 00018F1F 48837D1801                      cmp COUNT, 1
 33004 00018F24 0F85C40D0000                    jne L_error_arg_count_1
 33005 00018F2A 488B5D20                        mov rbx, PARAM(0)
 33006                                          assert_real(rbx)
    53 00018F2E 803B13              <1>  cmp byte [%1], %2
    54 00018F31 0F858B0E0000        <1>  jne L_error_incorrect_type
 33007 00018F37 F20F104301                      movsd xmm0, qword [rbx + 1]
 33008 00018F3C F2480F2CF8                      cvttsd2si rdi, xmm0
 33009 00018F41 E8F70C0000                      call make_integer
 33010 00018F46 C9                              leave
 33011 00018F47 C21800                          ret AND_KILL_FRAME(1)
 33012                                  
 33013                                  L_code_ptr_exit:
 33014 00018F4A C8000000                        enter 0, 0
 33015 00018F4E 48837D1800                      cmp COUNT, 0
 33016 00018F53 0F85600D0000                    jne L_error_arg_count_0
 33017 00018F59 B800000000                      mov rax, 0
 33018 00018F5E E8(00000000)                    call exit
 33019                                  
 33020                                  L_code_ptr_integer_to_real:
 33021 00018F63 C8000000                        enter 0, 0
 33022 00018F67 48837D1801                      cmp COUNT, 1
 33023 00018F6C 0F857C0D0000                    jne L_error_arg_count_1
 33024 00018F72 488B4520                        mov rax, PARAM(0)
 33025                                          assert_integer(rax)
    53 00018F76 803811              <1>  cmp byte [%1], %2
    54 00018F79 0F85430E0000        <1>  jne L_error_incorrect_type
 33026 00018F7F FF7001                          push qword [rax + 1]
 33027 00018F82 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 33028 00018F88 E8980C0000                      call make_real
 33029 00018F8D C9                              leave
 33030 00018F8E C21800                          ret AND_KILL_FRAME(1)
 33031                                  
 33032                                  L_code_ptr_fraction_to_real:
 33033 00018F91 C8000000                        enter 0, 0
 33034 00018F95 48837D1801                      cmp COUNT, 1
 33035 00018F9A 0F854E0D0000                    jne L_error_arg_count_1
 33036 00018FA0 488B4520                        mov rax, PARAM(0)
 33037                                          assert_fraction(rax)
    53 00018FA4 803812              <1>  cmp byte [%1], %2
    54 00018FA7 0F85150E0000        <1>  jne L_error_incorrect_type
 33038 00018FAD FF7001                          push qword [rax + 1]
 33039 00018FB0 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 33040 00018FB6 FF7009                          push qword [rax + 1 + 8]
 33041 00018FB9 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
 33042 00018FBF F20F5EC1                        divsd xmm0, xmm1
 33043 00018FC3 E85D0C0000                      call make_real
 33044 00018FC8 C9                              leave
 33045 00018FC9 C21800                          ret AND_KILL_FRAME(1)
 33046                                  
 33047                                  L_code_ptr_char_to_integer:
 33048 00018FCC C8000000                        enter 0, 0
 33049 00018FD0 48837D1801                      cmp COUNT, 1
 33050 00018FD5 0F85130D0000                    jne L_error_arg_count_1
 33051 00018FDB 488B4520                        mov rax, PARAM(0)
 33052                                          assert_char(rax)
    53 00018FDF 803802              <1>  cmp byte [%1], %2
    54 00018FE2 0F85DA0D0000        <1>  jne L_error_incorrect_type
 33053 00018FE8 8A4001                          mov al, byte [rax + 1]
 33054 00018FEB 4825FF000000                    and rax, 255
 33055 00018FF1 4889C7                          mov rdi, rax
 33056 00018FF4 E8440C0000                      call make_integer
 33057 00018FF9 C9                              leave
 33058 00018FFA C21800                          ret AND_KILL_FRAME(1)
 33059                                  
 33060                                  L_code_ptr_integer_to_fraction:
 33061 00018FFD C8000000                        enter 0, 0
 33062 00019001 48837D1801                      cmp COUNT, 1
 33063 00019006 0F85E20C0000                    jne L_error_arg_count_1
 33064 0001900C 4C8B4520                        mov r8, PARAM(0)
 33065                                          assert_integer(r8)
    53 00019010 41803811            <1>  cmp byte [%1], %2
    54 00019014 0F85A80D0000        <1>  jne L_error_incorrect_type
 33066 0001901A BF11000000                      mov rdi, (1 + 8 + 8)
 33067 0001901F E810F0FFFF                      call malloc
 33068 00019024 498B5801                        mov rbx, qword [r8 + 1]
 33069 00019028 C60012                          mov byte [rax], T_fraction
 33070 0001902B 48895801                        mov qword [rax + 1], rbx
 33071 0001902F 48C7400901000000                mov qword [rax + 1 + 8], 1
 33072 00019037 C9                              leave
 33073 00019038 C21800                          ret AND_KILL_FRAME(1)
 33074                                  
 33075                                  L_code_ptr_integer_to_char:
 33076 0001903B C8000000                        enter 0, 0
 33077 0001903F 48837D1801                      cmp COUNT, 1
 33078 00019044 0F85A40C0000                    jne L_error_arg_count_1
 33079 0001904A 488B4520                        mov rax, PARAM(0)
 33080                                          assert_integer(rax)
    53 0001904E 803811              <1>  cmp byte [%1], %2
    54 00019051 0F856B0D0000        <1>  jne L_error_incorrect_type
 33081 00019057 488B5801                        mov rbx, qword [rax + 1]
 33082 0001905B 4883FB00                        cmp rbx, 0
 33083 0001905F 0F8EF20B0000                    jle L_error_integer_range
 33084 00019065 4881FB00010000                  cmp rbx, 256
 33085 0001906C 0F8DE50B0000                    jge L_error_integer_range
 33086 00019072 BF02000000                      mov rdi, (1 + 1)
 33087 00019077 E8B8EFFFFF                      call malloc
 33088 0001907C C60002                          mov byte [rax], T_char
 33089 0001907F 885801                          mov byte [rax + 1], bl
 33090 00019082 C9                              leave
 33091 00019083 C21800                          ret AND_KILL_FRAME(1)
 33092                                  
 33093                                  L_code_ptr_trng:
 33094 00019086 C8000000                        enter 0, 0
 33095 0001908A 48837D1800                      cmp COUNT, 0
 33096 0001908F 0F85240C0000                    jne L_error_arg_count_0
 33097 00019095 480FC7F7                        rdrand rdi
 33098 00019099 48D1EF                          shr rdi, 1
 33099 0001909C E89C0B0000                      call make_integer
 33100 000190A1 C9                              leave
 33101 000190A2 C21000                          ret AND_KILL_FRAME(0)
 33102                                  
 33103                                  L_code_ptr_is_zero:
 33104 000190A5 C8000000                        enter 0, 0
 33105 000190A9 48837D1801                      cmp COUNT, 1
 33106 000190AE 0F853A0C0000                    jne L_error_arg_count_1
 33107 000190B4 488B4520                        mov rax, PARAM(0)
 33108 000190B8 803811                          cmp byte [rax], T_integer
 33109 000190BB 740F                            je .L_integer
 33110 000190BD 803812                          cmp byte [rax], T_fraction
 33111 000190C0 7413                            je .L_fraction
 33112 000190C2 803813                          cmp byte [rax], T_real
 33113 000190C5 7417                            je .L_real
 33114 000190C7 E9F60C0000                      jmp L_error_incorrect_type
 33115                                  .L_integer:
 33116 000190CC 4883780100                      cmp qword [rax + 1], 0
 33117 000190D1 7429                            je .L_zero
 33118 000190D3 EB1B                            jmp .L_not_zero
 33119                                  .L_fraction:
 33120 000190D5 4883780100                      cmp qword [rax + 1], 0
 33121 000190DA 7420                            je .L_zero
 33122 000190DC EB12                            jmp .L_not_zero
 33123                                  .L_real:
 33124 000190DE 660FEFC0                        pxor xmm0, xmm0
 33125 000190E2 FF7001                          push qword [rax + 1]
 33126 000190E5 F20F100C24                      movsd xmm1, qword [rsp]
 33127 000190EA 660F2EC1                        ucomisd xmm0, xmm1
 33128 000190EE 740C                            je .L_zero
 33129                                  .L_not_zero:
 33130 000190F0 48B8-                           mov rax, sob_boolean_false
 33130 000190F2 [0200000000000000] 
 33131 000190FA EB0A                            jmp .L_end
 33132                                  .L_zero:
 33133 000190FC 48B8-                           mov rax, sob_boolean_true
 33133 000190FE [0300000000000000] 
 33134                                  .L_end:
 33135 00019106 C9                              leave
 33136 00019107 C21800                          ret AND_KILL_FRAME(1)
 33137                                  
 33138                                  L_code_ptr_is_integer:
 33139 0001910A C8000000                        enter 0, 0
 33140 0001910E 48837D1801                      cmp COUNT, 1
 33141 00019113 0F85D50B0000                    jne L_error_arg_count_1
 33142 00019119 488B4520                        mov rax, PARAM(0)
 33143 0001911D 803811                          cmp byte [rax], T_integer
 33144 00019120 750C                            jne .L_false
 33145 00019122 48B8-                           mov rax, sob_boolean_true
 33145 00019124 [0300000000000000] 
 33146 0001912C EB0A                            jmp .L_exit
 33147                                  .L_false:
 33148 0001912E 48B8-                           mov rax, sob_boolean_false
 33148 00019130 [0200000000000000] 
 33149                                  .L_exit:
 33150 00019138 C9                              leave
 33151 00019139 C21800                          ret AND_KILL_FRAME(1)
 33152                                  
 33153                                  L_code_ptr_raw_bin_add_rr:
 33154 0001913C C8000000                        enter 0, 0
 33155 00019140 48837D1802                      cmp COUNT, 2
 33156 00019145 0F85D80B0000                    jne L_error_arg_count_2
 33157 0001914B 488B5D20                        mov rbx, PARAM(0)
 33158                                          assert_real(rbx)
    53 0001914F 803B13              <1>  cmp byte [%1], %2
    54 00019152 0F856A0C0000        <1>  jne L_error_incorrect_type
 33159 00019158 488B4D28                        mov rcx, PARAM(1)
 33160                                          assert_real(rcx)
    53 0001915C 803913              <1>  cmp byte [%1], %2
    54 0001915F 0F855D0C0000        <1>  jne L_error_incorrect_type
 33161 00019165 F20F104301                      movsd xmm0, qword [rbx + 1]
 33162 0001916A F20F104901                      movsd xmm1, qword [rcx + 1]
 33163 0001916F F20F58C1                        addsd xmm0, xmm1
 33164 00019173 E8AD0A0000                      call make_real
 33165 00019178 C9                              leave
 33166 00019179 C22000                          ret AND_KILL_FRAME(2)
 33167                                  
 33168                                  L_code_ptr_raw_bin_sub_rr:
 33169 0001917C C8000000                        enter 0, 0
 33170 00019180 48837D1802                      cmp COUNT, 2
 33171 00019185 0F85980B0000                    jne L_error_arg_count_2
 33172 0001918B 488B5D20                        mov rbx, PARAM(0)
 33173                                          assert_real(rbx)
    53 0001918F 803B13              <1>  cmp byte [%1], %2
    54 00019192 0F852A0C0000        <1>  jne L_error_incorrect_type
 33174 00019198 488B4D28                        mov rcx, PARAM(1)
 33175                                          assert_real(rcx)
    53 0001919C 803913              <1>  cmp byte [%1], %2
    54 0001919F 0F851D0C0000        <1>  jne L_error_incorrect_type
 33176 000191A5 F20F104301                      movsd xmm0, qword [rbx + 1]
 33177 000191AA F20F104901                      movsd xmm1, qword [rcx + 1]
 33178 000191AF F20F5CC1                        subsd xmm0, xmm1
 33179 000191B3 E86D0A0000                      call make_real
 33180 000191B8 C9                              leave
 33181 000191B9 C22000                          ret AND_KILL_FRAME(2)
 33182                                  
 33183                                  L_code_ptr_raw_bin_mul_rr:
 33184 000191BC C8000000                        enter 0, 0
 33185 000191C0 48837D1802                      cmp COUNT, 2
 33186 000191C5 0F85580B0000                    jne L_error_arg_count_2
 33187 000191CB 488B5D20                        mov rbx, PARAM(0)
 33188                                          assert_real(rbx)
    53 000191CF 803B13              <1>  cmp byte [%1], %2
    54 000191D2 0F85EA0B0000        <1>  jne L_error_incorrect_type
 33189 000191D8 488B4D28                        mov rcx, PARAM(1)
 33190                                          assert_real(rcx)
    53 000191DC 803913              <1>  cmp byte [%1], %2
    54 000191DF 0F85DD0B0000        <1>  jne L_error_incorrect_type
 33191 000191E5 F20F104301                      movsd xmm0, qword [rbx + 1]
 33192 000191EA F20F104901                      movsd xmm1, qword [rcx + 1]
 33193 000191EF F20F59C1                        mulsd xmm0, xmm1
 33194 000191F3 E82D0A0000                      call make_real
 33195 000191F8 C9                              leave
 33196 000191F9 C22000                          ret AND_KILL_FRAME(2)
 33197                                  
 33198                                  L_code_ptr_raw_bin_div_rr:
 33199 000191FC C8000000                        enter 0, 0
 33200 00019200 48837D1802                      cmp COUNT, 2
 33201 00019205 0F85180B0000                    jne L_error_arg_count_2
 33202 0001920B 488B5D20                        mov rbx, PARAM(0)
 33203                                          assert_real(rbx)
    53 0001920F 803B13              <1>  cmp byte [%1], %2
    54 00019212 0F85AA0B0000        <1>  jne L_error_incorrect_type
 33204 00019218 488B4D28                        mov rcx, PARAM(1)
 33205                                          assert_real(rcx)
    53 0001921C 803913              <1>  cmp byte [%1], %2
    54 0001921F 0F859D0B0000        <1>  jne L_error_incorrect_type
 33206 00019225 F20F104301                      movsd xmm0, qword [rbx + 1]
 33207 0001922A F20F104901                      movsd xmm1, qword [rcx + 1]
 33208 0001922F 660FEFD2                        pxor xmm2, xmm2
 33209 00019233 660F2ECA                        ucomisd xmm1, xmm2
 33210 00019237 0F84B60B0000                    je L_error_division_by_zero
 33211 0001923D F20F5EC1                        divsd xmm0, xmm1
 33212 00019241 E8DF090000                      call make_real
 33213 00019246 C9                              leave
 33214 00019247 C22000                          ret AND_KILL_FRAME(2)
 33215                                  
 33216                                  L_code_ptr_raw_bin_add_zz:
 33217 0001924A C8000000                	enter 0, 0
 33218 0001924E 48837D1802              	cmp COUNT, 2
 33219 00019253 0F85CA0A0000            	jne L_error_arg_count_2
 33220 00019259 4C8B4520                	mov r8, PARAM(0)
 33221                                  	assert_integer(r8)
    53 0001925D 41803811            <1>  cmp byte [%1], %2
    54 00019261 0F855B0B0000        <1>  jne L_error_incorrect_type
 33222 00019267 4C8B4D28                	mov r9, PARAM(1)
 33223                                  	assert_integer(r9)
    53 0001926B 41803911            <1>  cmp byte [%1], %2
    54 0001926F 0F854D0B0000        <1>  jne L_error_incorrect_type
 33224 00019275 498B7801                	mov rdi, qword [r8 + 1]
 33225 00019279 49037901                	add rdi, qword [r9 + 1]
 33226 0001927D E8BB090000              	call make_integer
 33227 00019282 C9                      	leave
 33228 00019283 C22000                  	ret AND_KILL_FRAME(2)
 33229                                  
 33230                                  L_code_ptr_raw_bin_add_qq:
 33231 00019286 C8000000                        enter 0, 0
 33232 0001928A 48837D1802                      cmp COUNT, 2
 33233 0001928F 0F858E0A0000                    jne L_error_arg_count_2
 33234 00019295 4C8B4520                        mov r8, PARAM(0)
 33235                                          assert_fraction(r8)
    53 00019299 41803812            <1>  cmp byte [%1], %2
    54 0001929D 0F851F0B0000        <1>  jne L_error_incorrect_type
 33236 000192A3 4C8B4D28                        mov r9, PARAM(1)
 33237                                          assert_fraction(r9)
    53 000192A7 41803912            <1>  cmp byte [%1], %2
    54 000192AB 0F85110B0000        <1>  jne L_error_incorrect_type
 33238 000192B1 498B4001                        mov rax, qword [r8 + 1] ; num1
 33239 000192B5 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 33240 000192B9 4899                            cqo
 33241 000192BB 48F7EB                          imul rbx
 33242 000192BE 4889C6                          mov rsi, rax
 33243 000192C1 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 33244 000192C5 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 33245 000192C9 4899                            cqo
 33246 000192CB 48F7EB                          imul rbx
 33247 000192CE 4801C6                          add rsi, rax
 33248 000192D1 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 33249 000192D5 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 33250 000192D9 4899                            cqo
 33251 000192DB 48F7EB                          imul rbx
 33252 000192DE 4889C7                          mov rdi, rax
 33253 000192E1 E8DE010000                      call normalize_fraction
 33254 000192E6 C9                              leave
 33255 000192E7 C22000                          ret AND_KILL_FRAME(2)
 33256                                  
 33257                                  L_code_ptr_raw_bin_sub_zz:
 33258 000192EA C8000000                	enter 0, 0
 33259 000192EE 48837D1802              	cmp COUNT, 2
 33260 000192F3 0F852A0A0000            	jne L_error_arg_count_2
 33261 000192F9 4C8B4520                	mov r8, PARAM(0)
 33262                                  	assert_integer(r8)
    53 000192FD 41803811            <1>  cmp byte [%1], %2
    54 00019301 0F85BB0A0000        <1>  jne L_error_incorrect_type
 33263 00019307 4C8B4D28                	mov r9, PARAM(1)
 33264                                  	assert_integer(r9)
    53 0001930B 41803911            <1>  cmp byte [%1], %2
    54 0001930F 0F85AD0A0000        <1>  jne L_error_incorrect_type
 33265 00019315 498B7801                	mov rdi, qword [r8 + 1]
 33266 00019319 492B7901                	sub rdi, qword [r9 + 1]
 33267 0001931D E81B090000              	call make_integer
 33268 00019322 C9                      	leave
 33269 00019323 C22000                  	ret AND_KILL_FRAME(2)
 33270                                  
 33271                                  L_code_ptr_raw_bin_sub_qq:
 33272 00019326 C8000000                        enter 0, 0
 33273 0001932A 48837D1802                      cmp COUNT, 2
 33274 0001932F 0F85EE090000                    jne L_error_arg_count_2
 33275 00019335 4C8B4520                        mov r8, PARAM(0)
 33276                                          assert_fraction(r8)
    53 00019339 41803812            <1>  cmp byte [%1], %2
    54 0001933D 0F857F0A0000        <1>  jne L_error_incorrect_type
 33277 00019343 4C8B4D28                        mov r9, PARAM(1)
 33278                                          assert_fraction(r9)
    53 00019347 41803912            <1>  cmp byte [%1], %2
    54 0001934B 0F85710A0000        <1>  jne L_error_incorrect_type
 33279 00019351 498B4001                        mov rax, qword [r8 + 1] ; num1
 33280 00019355 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 33281 00019359 4899                            cqo
 33282 0001935B 48F7EB                          imul rbx
 33283 0001935E 4889C6                          mov rsi, rax
 33284 00019361 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 33285 00019365 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 33286 00019369 4899                            cqo
 33287 0001936B 48F7EB                          imul rbx
 33288 0001936E 4829C6                          sub rsi, rax
 33289 00019371 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 33290 00019375 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 33291 00019379 4899                            cqo
 33292 0001937B 48F7EB                          imul rbx
 33293 0001937E 4889C7                          mov rdi, rax
 33294 00019381 E83E010000                      call normalize_fraction
 33295 00019386 C9                              leave
 33296 00019387 C22000                          ret AND_KILL_FRAME(2)
 33297                                  
 33298                                  L_code_ptr_raw_bin_mul_zz:
 33299 0001938A C8000000                	enter 0, 0
 33300 0001938E 48837D1802              	cmp COUNT, 2
 33301 00019393 0F858A090000            	jne L_error_arg_count_2
 33302 00019399 4C8B4520                	mov r8, PARAM(0)
 33303                                  	assert_integer(r8)
    53 0001939D 41803811            <1>  cmp byte [%1], %2
    54 000193A1 0F851B0A0000        <1>  jne L_error_incorrect_type
 33304 000193A7 4C8B4D28                	mov r9, PARAM(1)
 33305                                  	assert_integer(r9)
    53 000193AB 41803911            <1>  cmp byte [%1], %2
    54 000193AF 0F850D0A0000        <1>  jne L_error_incorrect_type
 33306 000193B5 4899                    	cqo
 33307 000193B7 498B4001                	mov rax, qword [r8 + 1]
 33308 000193BB 49F76101                	mul qword [r9 + 1]
 33309 000193BF 4889C7                  	mov rdi, rax
 33310 000193C2 E876080000              	call make_integer
 33311 000193C7 C9                      	leave
 33312 000193C8 C22000                  	ret AND_KILL_FRAME(2)
 33313                                  
 33314                                  L_code_ptr_raw_bin_mul_qq:
 33315 000193CB C8000000                        enter 0, 0
 33316 000193CF 48837D1802                      cmp COUNT, 2
 33317 000193D4 0F8549090000                    jne L_error_arg_count_2
 33318 000193DA 4C8B4520                        mov r8, PARAM(0)
 33319                                          assert_fraction(r8)
    53 000193DE 41803812            <1>  cmp byte [%1], %2
    54 000193E2 0F85DA090000        <1>  jne L_error_incorrect_type
 33320 000193E8 4C8B4D28                        mov r9, PARAM(1)
 33321                                          assert_fraction(r9)
    53 000193EC 41803912            <1>  cmp byte [%1], %2
    54 000193F0 0F85CC090000        <1>  jne L_error_incorrect_type
 33322 000193F6 498B4001                        mov rax, qword [r8 + 1] ; num1
 33323 000193FA 498B5901                        mov rbx, qword [r9 + 1] ; num2
 33324 000193FE 4899                            cqo
 33325 00019400 48F7EB                          imul rbx
 33326 00019403 4889C6                          mov rsi, rax
 33327 00019406 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 33328 0001940A 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 33329 0001940E 4899                            cqo
 33330 00019410 48F7EB                          imul rbx
 33331 00019413 4889C7                          mov rdi, rax
 33332 00019416 E8A9000000                      call normalize_fraction
 33333 0001941B C9                              leave
 33334 0001941C C22000                          ret AND_KILL_FRAME(2)
 33335                                          
 33336                                  L_code_ptr_raw_bin_div_zz:
 33337 0001941F C8000000                	enter 0, 0
 33338 00019423 48837D1802              	cmp COUNT, 2
 33339 00019428 0F85F5080000            	jne L_error_arg_count_2
 33340 0001942E 4C8B4520                	mov r8, PARAM(0)
 33341                                  	assert_integer(r8)
    53 00019432 41803811            <1>  cmp byte [%1], %2
    54 00019436 0F8586090000        <1>  jne L_error_incorrect_type
 33342 0001943C 4C8B4D28                	mov r9, PARAM(1)
 33343                                  	assert_integer(r9)
    53 00019440 41803911            <1>  cmp byte [%1], %2
    54 00019444 0F8578090000        <1>  jne L_error_incorrect_type
 33344 0001944A 498B7901                	mov rdi, qword [r9 + 1]
 33345 0001944E 4883FF00                	cmp rdi, 0
 33346 00019452 0F849B090000            	je L_error_division_by_zero
 33347 00019458 498B7001                	mov rsi, qword [r8 + 1]
 33348 0001945C E863000000              	call normalize_fraction
 33349 00019461 C9                      	leave
 33350 00019462 C22000                  	ret AND_KILL_FRAME(2)
 33351                                  
 33352                                  L_code_ptr_raw_bin_div_qq:
 33353 00019465 C8000000                        enter 0, 0
 33354 00019469 48837D1802                      cmp COUNT, 2
 33355 0001946E 0F85AF080000                    jne L_error_arg_count_2
 33356 00019474 4C8B4520                        mov r8, PARAM(0)
 33357                                          assert_fraction(r8)
    53 00019478 41803812            <1>  cmp byte [%1], %2
    54 0001947C 0F8540090000        <1>  jne L_error_incorrect_type
 33358 00019482 4C8B4D28                        mov r9, PARAM(1)
 33359                                          assert_fraction(r9)
    53 00019486 41803912            <1>  cmp byte [%1], %2
    54 0001948A 0F8532090000        <1>  jne L_error_incorrect_type
 33360 00019490 4983790100                      cmp qword [r9 + 1], 0
 33361 00019495 0F8458090000                    je L_error_division_by_zero
 33362 0001949B 498B4001                        mov rax, qword [r8 + 1] ; num1
 33363 0001949F 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 33364 000194A3 4899                            cqo
 33365 000194A5 48F7EB                          imul rbx
 33366 000194A8 4889C6                          mov rsi, rax
 33367 000194AB 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 33368 000194AF 498B5901                        mov rbx, qword [r9 + 1] ; num2
 33369 000194B3 4899                            cqo
 33370 000194B5 48F7EB                          imul rbx
 33371 000194B8 4889C7                          mov rdi, rax
 33372 000194BB E804000000                      call normalize_fraction
 33373 000194C0 C9                              leave
 33374 000194C1 C22000                          ret AND_KILL_FRAME(2)
 33375                                          
 33376                                  normalize_fraction:
 33377 000194C4 56                              push rsi
 33378 000194C5 57                              push rdi
 33379 000194C6 E859000000                      call gcd
 33380 000194CB 4889C3                          mov rbx, rax
 33381 000194CE 58                              pop rax
 33382 000194CF 4899                            cqo
 33383 000194D1 48F7FB                          idiv rbx
 33384 000194D4 4989C0                          mov r8, rax
 33385 000194D7 58                              pop rax
 33386 000194D8 4899                            cqo
 33387 000194DA 48F7FB                          idiv rbx
 33388 000194DD 4989C1                          mov r9, rax
 33389 000194E0 4983F900                        cmp r9, 0
 33390 000194E4 741C                            je .L_zero
 33391 000194E6 4983F801                        cmp r8, 1
 33392 000194EA 7421                            je .L_int
 33393 000194EC BF11000000                      mov rdi, (1 + 8 + 8)
 33394 000194F1 E83EEBFFFF                      call malloc
 33395 000194F6 C60012                          mov byte [rax], T_fraction
 33396 000194F9 4C894801                        mov qword [rax + 1], r9
 33397 000194FD 4C894009                        mov qword [rax + 1 + 8], r8
 33398 00019501 C3                              ret
 33399                                  .L_zero:
 33400 00019502 BF00000000                      mov rdi, 0
 33401 00019507 E831070000                      call make_integer
 33402 0001950C C3                              ret
 33403                                  .L_int:
 33404 0001950D 4C89CF                          mov rdi, r9
 33405 00019510 E828070000                      call make_integer
 33406 00019515 C3                              ret
 33407                                  
 33408                                  iabs:
 33409 00019516 4889F8                          mov rax, rdi
 33410 00019519 4883F800                        cmp rax, 0
 33411 0001951D 7C01                            jl .Lneg
 33412 0001951F C3                              ret
 33413                                  .Lneg:
 33414 00019520 48F7D8                          neg rax
 33415 00019523 C3                              ret
 33416                                  
 33417                                  gcd:
 33418 00019524 E8EDFFFFFF                      call iabs
 33419 00019529 4889C3                          mov rbx, rax
 33420 0001952C 4889F7                          mov rdi, rsi
 33421 0001952F E8E2FFFFFF                      call iabs
 33422 00019534 4883F800                        cmp rax, 0
 33423 00019538 7502                            jne .L0
 33424 0001953A 4893                            xchg rax, rbx
 33425                                  .L0:
 33426 0001953C 4883FB00                        cmp rbx, 0
 33427 00019540 740C                            je .L1
 33428 00019542 4899                            cqo
 33429 00019544 48F7F3                          div rbx
 33430 00019547 4889D0                          mov rax, rdx
 33431 0001954A 4893                            xchg rax, rbx
 33432 0001954C EBEE                            jmp .L0
 33433                                  .L1:
 33434 0001954E C3                              ret
 33435                                  
 33436                                  L_code_ptr_error:
 33437 0001954F C8000000                        enter 0, 0
 33438 00019553 48837D1802                      cmp COUNT, 2
 33439 00019558 0F85C5070000                    jne L_error_arg_count_2
 33440 0001955E 488B7520                        mov rsi, PARAM(0)
 33441                                          assert_interned_symbol(rsi)
    53 00019562 803E41              <1>  cmp byte [%1], %2
    54 00019565 0F8557080000        <1>  jne L_error_incorrect_type
 33442 0001956B 488B7528                        mov rsi, PARAM(1)
 33443                                          assert_string(rsi)
    53 0001956F 803E03              <1>  cmp byte [%1], %2
    54 00019572 0F854A080000        <1>  jne L_error_incorrect_type
 33444 00019578 48BF-                           mov rdi, fmt_scheme_error_part_1
 33444 0001957A [0D1C000000000000] 
 33445 00019582 B800000000                      mov rax, 0
 33446                                          ENTER
    44 00019587 C8000000            <1>  enter 0, 0
    45 0001958B 4883E4F0            <1>  and rsp, ~15
 33447 0001958F E8(00000000)                    call printf
 33448                                          LEAVE
    49 00019594 C9                  <1>  leave
 33449 00019595 488B7D20                        mov rdi, PARAM(0)
 33450 00019599 E817EDFFFF                      call print_sexpr
 33451 0001959E 48BF-                           mov rdi, fmt_scheme_error_part_2
 33451 000195A0 [211C000000000000] 
 33452 000195A8 B800000000                      mov rax, 0
 33453                                          ENTER
    44 000195AD C8000000            <1>  enter 0, 0
    45 000195B1 4883E4F0            <1>  and rsp, ~15
 33454 000195B5 E8(00000000)                    call printf
 33455                                          LEAVE
    49 000195BA C9                  <1>  leave
 33456 000195BB 488B4528                        mov rax, PARAM(1)       ; sob_string
 33457 000195BF BE01000000                      mov rsi, 1              ; size = 1 byte
 33458 000195C4 488B5001                        mov rdx, qword [rax + 1] ; length
 33459 000195C8 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
 33460 000195CC 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
 33461                                  	ENTER
    44 000195D4 C8000000            <1>  enter 0, 0
    45 000195D8 4883E4F0            <1>  and rsp, ~15
 33462 000195DC E8(00000000)                    call fwrite
 33463                                  	LEAVE
    49 000195E1 C9                  <1>  leave
 33464 000195E2 48BF-                           mov rdi, fmt_scheme_error_part_3
 33464 000195E4 [631C000000000000] 
 33465 000195EC B800000000                      mov rax, 0
 33466                                          ENTER
    44 000195F1 C8000000            <1>  enter 0, 0
    45 000195F5 4883E4F0            <1>  and rsp, ~15
 33467 000195F9 E8(00000000)                    call printf
 33468                                          LEAVE
    49 000195FE C9                  <1>  leave
 33469 000195FF 48C7C0F7FFFFFF                  mov rax, -9
 33470 00019606 E8(00000000)                    call exit
 33471                                  
 33472                                  L_code_ptr_raw_less_than_rr:
 33473 0001960B C8000000                        enter 0, 0
 33474 0001960F 48837D1802                      cmp COUNT, 2
 33475 00019614 0F8509070000                    jne L_error_arg_count_2
 33476 0001961A 488B7520                        mov rsi, PARAM(0)
 33477                                          assert_real(rsi)
    53 0001961E 803E13              <1>  cmp byte [%1], %2
    54 00019621 0F859B070000        <1>  jne L_error_incorrect_type
 33478 00019627 488B7D28                        mov rdi, PARAM(1)
 33479                                          assert_real(rdi)
    53 0001962B 803F13              <1>  cmp byte [%1], %2
    54 0001962E 0F858E070000        <1>  jne L_error_incorrect_type
 33480 00019634 F20F104601                      movsd xmm0, qword [rsi + 1]
 33481 00019639 F20F104F01                      movsd xmm1, qword [rdi + 1]
 33482 0001963E 660F2FC1                        comisd xmm0, xmm1
 33483 00019642 730C                            jae .L_false
 33484 00019644 48B8-                           mov rax, sob_boolean_true
 33484 00019646 [0300000000000000] 
 33485 0001964E EB0A                            jmp .L_exit
 33486                                  .L_false:
 33487 00019650 48B8-                           mov rax, sob_boolean_false
 33487 00019652 [0200000000000000] 
 33488                                  .L_exit:
 33489 0001965A C9                              leave
 33490 0001965B C22000                          ret AND_KILL_FRAME(2)
 33491                                          
 33492                                  L_code_ptr_raw_less_than_zz:
 33493 0001965E C8000000                	enter 0, 0
 33494 00019662 48837D1802              	cmp COUNT, 2
 33495 00019667 0F85B6060000            	jne L_error_arg_count_2
 33496 0001966D 4C8B4520                	mov r8, PARAM(0)
 33497                                  	assert_integer(r8)
    53 00019671 41803811            <1>  cmp byte [%1], %2
    54 00019675 0F8547070000        <1>  jne L_error_incorrect_type
 33498 0001967B 4C8B4D28                	mov r9, PARAM(1)
 33499                                  	assert_integer(r9)
    53 0001967F 41803911            <1>  cmp byte [%1], %2
    54 00019683 0F8539070000        <1>  jne L_error_incorrect_type
 33500 00019689 498B7801                	mov rdi, qword [r8 + 1]
 33501 0001968D 493B7901                	cmp rdi, qword [r9 + 1]
 33502 00019691 7D0C                    	jge .L_false
 33503 00019693 48B8-                   	mov rax, sob_boolean_true
 33503 00019695 [0300000000000000] 
 33504 0001969D EB0A                    	jmp .L_exit
 33505                                  .L_false:
 33506 0001969F 48B8-                   	mov rax, sob_boolean_false
 33506 000196A1 [0200000000000000] 
 33507                                  .L_exit:
 33508 000196A9 C9                      	leave
 33509 000196AA C22000                  	ret AND_KILL_FRAME(2)
 33510                                  
 33511                                  L_code_ptr_raw_less_than_qq:
 33512 000196AD C8000000                        enter 0, 0
 33513 000196B1 48837D1802                      cmp COUNT, 2
 33514 000196B6 0F8567060000                    jne L_error_arg_count_2
 33515 000196BC 488B7520                        mov rsi, PARAM(0)
 33516                                          assert_fraction(rsi)
    53 000196C0 803E12              <1>  cmp byte [%1], %2
    54 000196C3 0F85F9060000        <1>  jne L_error_incorrect_type
 33517 000196C9 488B7D28                        mov rdi, PARAM(1)
 33518                                          assert_fraction(rdi)
    53 000196CD 803F12              <1>  cmp byte [%1], %2
    54 000196D0 0F85EC060000        <1>  jne L_error_incorrect_type
 33519 000196D6 488B4601                        mov rax, qword [rsi + 1] ; num1
 33520 000196DA 4899                            cqo
 33521 000196DC 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 33522 000196E0 4889C1                          mov rcx, rax
 33523 000196E3 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
 33524 000196E7 4899                            cqo
 33525 000196E9 48F76F01                        imul qword [rdi + 1]          ; num2
 33526 000196ED 4829C1                          sub rcx, rax
 33527 000196F0 7D0C                            jge .L_false
 33528 000196F2 48B8-                           mov rax, sob_boolean_true
 33528 000196F4 [0300000000000000] 
 33529 000196FC EB0A                            jmp .L_exit
 33530                                  .L_false:
 33531 000196FE 48B8-                           mov rax, sob_boolean_false
 33531 00019700 [0200000000000000] 
 33532                                  .L_exit:
 33533 00019708 C9                              leave
 33534 00019709 C22000                          ret AND_KILL_FRAME(2)
 33535                                  
 33536                                  L_code_ptr_raw_equal_rr:
 33537 0001970C C8000000                        enter 0, 0
 33538 00019710 48837D1802                      cmp COUNT, 2
 33539 00019715 0F8508060000                    jne L_error_arg_count_2
 33540 0001971B 488B7520                        mov rsi, PARAM(0)
 33541                                          assert_real(rsi)
    53 0001971F 803E13              <1>  cmp byte [%1], %2
    54 00019722 0F859A060000        <1>  jne L_error_incorrect_type
 33542 00019728 488B7D28                        mov rdi, PARAM(1)
 33543                                          assert_real(rdi)
    53 0001972C 803F13              <1>  cmp byte [%1], %2
    54 0001972F 0F858D060000        <1>  jne L_error_incorrect_type
 33544 00019735 F20F104601                      movsd xmm0, qword [rsi + 1]
 33545 0001973A F20F104F01                      movsd xmm1, qword [rdi + 1]
 33546 0001973F 660F2FC1                        comisd xmm0, xmm1
 33547 00019743 750C                            jne .L_false
 33548 00019745 48B8-                           mov rax, sob_boolean_true
 33548 00019747 [0300000000000000] 
 33549 0001974F EB0A                            jmp .L_exit
 33550                                  .L_false:
 33551 00019751 48B8-                           mov rax, sob_boolean_false
 33551 00019753 [0200000000000000] 
 33552                                  .L_exit:
 33553 0001975B C9                              leave
 33554 0001975C C22000                          ret AND_KILL_FRAME(2)
 33555                                          
 33556                                  L_code_ptr_raw_equal_zz:
 33557 0001975F C8000000                	enter 0, 0
 33558 00019763 48837D1802              	cmp COUNT, 2
 33559 00019768 0F85B5050000            	jne L_error_arg_count_2
 33560 0001976E 4C8B4520                	mov r8, PARAM(0)
 33561                                  	assert_integer(r8)
    53 00019772 41803811            <1>  cmp byte [%1], %2
    54 00019776 0F8546060000        <1>  jne L_error_incorrect_type
 33562 0001977C 4C8B4D28                	mov r9, PARAM(1)
 33563                                  	assert_integer(r9)
    53 00019780 41803911            <1>  cmp byte [%1], %2
    54 00019784 0F8538060000        <1>  jne L_error_incorrect_type
 33564 0001978A 498B7801                	mov rdi, qword [r8 + 1]
 33565 0001978E 493B7901                	cmp rdi, qword [r9 + 1]
 33566 00019792 750C                    	jne .L_false
 33567 00019794 48B8-                   	mov rax, sob_boolean_true
 33567 00019796 [0300000000000000] 
 33568 0001979E EB0A                    	jmp .L_exit
 33569                                  .L_false:
 33570 000197A0 48B8-                   	mov rax, sob_boolean_false
 33570 000197A2 [0200000000000000] 
 33571                                  .L_exit:
 33572 000197AA C9                      	leave
 33573 000197AB C22000                  	ret AND_KILL_FRAME(2)
 33574                                  
 33575                                  L_code_ptr_raw_equal_qq:
 33576 000197AE C8000000                        enter 0, 0
 33577 000197B2 48837D1802                      cmp COUNT, 2
 33578 000197B7 0F8566050000                    jne L_error_arg_count_2
 33579 000197BD 488B7520                        mov rsi, PARAM(0)
 33580                                          assert_fraction(rsi)
    53 000197C1 803E12              <1>  cmp byte [%1], %2
    54 000197C4 0F85F8050000        <1>  jne L_error_incorrect_type
 33581 000197CA 488B7D28                        mov rdi, PARAM(1)
 33582                                          assert_fraction(rdi)
    53 000197CE 803F12              <1>  cmp byte [%1], %2
    54 000197D1 0F85EB050000        <1>  jne L_error_incorrect_type
 33583 000197D7 488B4601                        mov rax, qword [rsi + 1] ; num1
 33584 000197DB 4899                            cqo
 33585 000197DD 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 33586 000197E1 4889C1                          mov rcx, rax
 33587 000197E4 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
 33588 000197E8 4899                            cqo
 33589 000197EA 48F76F01                        imul qword [rdi + 1]          ; num2
 33590 000197EE 4829C1                          sub rcx, rax
 33591 000197F1 750C                            jne .L_false
 33592 000197F3 48B8-                           mov rax, sob_boolean_true
 33592 000197F5 [0300000000000000] 
 33593 000197FD EB0A                            jmp .L_exit
 33594                                  .L_false:
 33595 000197FF 48B8-                           mov rax, sob_boolean_false
 33595 00019801 [0200000000000000] 
 33596                                  .L_exit:
 33597 00019809 C9                              leave
 33598 0001980A C22000                          ret AND_KILL_FRAME(2)
 33599                                  
 33600                                  L_code_ptr_quotient:
 33601 0001980D C8000000                        enter 0, 0
 33602 00019811 48837D1802                      cmp COUNT, 2
 33603 00019816 0F8507050000                    jne L_error_arg_count_2
 33604 0001981C 488B7520                        mov rsi, PARAM(0)
 33605                                          assert_integer(rsi)
    53 00019820 803E11              <1>  cmp byte [%1], %2
    54 00019823 0F8599050000        <1>  jne L_error_incorrect_type
 33606 00019829 488B7D28                        mov rdi, PARAM(1)
 33607                                          assert_integer(rdi)
    53 0001982D 803F11              <1>  cmp byte [%1], %2
    54 00019830 0F858C050000        <1>  jne L_error_incorrect_type
 33608 00019836 488B4601                        mov rax, qword [rsi + 1]
 33609 0001983A 488B5F01                        mov rbx, qword [rdi + 1]
 33610 0001983E 4883FB00                        cmp rbx, 0
 33611 00019842 0F84AB050000                    je L_error_division_by_zero
 33612 00019848 4899                            cqo
 33613 0001984A 48F7FB                          idiv rbx
 33614 0001984D 4889C7                          mov rdi, rax
 33615 00019850 E8E8030000                      call make_integer
 33616 00019855 C9                              leave
 33617 00019856 C22000                          ret AND_KILL_FRAME(2)
 33618                                          
 33619                                  L_code_ptr_remainder:
 33620 00019859 C8000000                        enter 0, 0
 33621 0001985D 48837D1802                      cmp COUNT, 2
 33622 00019862 0F85BB040000                    jne L_error_arg_count_2
 33623 00019868 488B7520                        mov rsi, PARAM(0)
 33624                                          assert_integer(rsi)
    53 0001986C 803E11              <1>  cmp byte [%1], %2
    54 0001986F 0F854D050000        <1>  jne L_error_incorrect_type
 33625 00019875 488B7D28                        mov rdi, PARAM(1)
 33626                                          assert_integer(rdi)
    53 00019879 803F11              <1>  cmp byte [%1], %2
    54 0001987C 0F8540050000        <1>  jne L_error_incorrect_type
 33627 00019882 488B4601                        mov rax, qword [rsi + 1]
 33628 00019886 488B5F01                        mov rbx, qword [rdi + 1]
 33629 0001988A 4883FB00                        cmp rbx, 0
 33630 0001988E 0F845F050000                    je L_error_division_by_zero
 33631 00019894 4899                            cqo
 33632 00019896 48F7FB                          idiv rbx
 33633 00019899 4889D7                          mov rdi, rdx
 33634 0001989C E89C030000                      call make_integer
 33635 000198A1 C9                              leave
 33636 000198A2 C22000                          ret AND_KILL_FRAME(2)
 33637                                  
 33638                                  L_code_ptr_set_car:
 33639 000198A5 C8000000                        enter 0, 0
 33640 000198A9 48837D1802                      cmp COUNT, 2
 33641 000198AE 0F856F040000                    jne L_error_arg_count_2
 33642 000198B4 488B4520                        mov rax, PARAM(0)
 33643                                          assert_pair(rax)
    53 000198B8 803821              <1>  cmp byte [%1], %2
    54 000198BB 0F8501050000        <1>  jne L_error_incorrect_type
 33644 000198C1 488B5D28                        mov rbx, PARAM(1)
 33645 000198C5 48895801                        mov SOB_PAIR_CAR(rax), rbx
 33646 000198C9 48B8-                           mov rax, sob_void
 33646 000198CB [0000000000000000] 
 33647 000198D3 C9                              leave
 33648 000198D4 C22000                          ret AND_KILL_FRAME(2)
 33649                                  
 33650                                  L_code_ptr_set_cdr:
 33651 000198D7 C8000000                        enter 0, 0
 33652 000198DB 48837D1802                      cmp COUNT, 2
 33653 000198E0 0F853D040000                    jne L_error_arg_count_2
 33654 000198E6 488B4520                        mov rax, PARAM(0)
 33655                                          assert_pair(rax)
    53 000198EA 803821              <1>  cmp byte [%1], %2
    54 000198ED 0F85CF040000        <1>  jne L_error_incorrect_type
 33656 000198F3 488B5D28                        mov rbx, PARAM(1)
 33657 000198F7 48895809                        mov SOB_PAIR_CDR(rax), rbx
 33658 000198FB 48B8-                           mov rax, sob_void
 33658 000198FD [0000000000000000] 
 33659 00019905 C9                              leave
 33660 00019906 C22000                          ret AND_KILL_FRAME(2)
 33661                                  
 33662                                  L_code_ptr_string_ref:
 33663 00019909 C8000000                        enter 0, 0
 33664 0001990D 48837D1802                      cmp COUNT, 2
 33665 00019912 0F850B040000                    jne L_error_arg_count_2
 33666 00019918 488B7D20                        mov rdi, PARAM(0)
 33667                                          assert_string(rdi)
    53 0001991C 803F03              <1>  cmp byte [%1], %2
    54 0001991F 0F859D040000        <1>  jne L_error_incorrect_type
 33668 00019925 488B7528                        mov rsi, PARAM(1)
 33669                                          assert_integer(rsi)
    53 00019929 803E11              <1>  cmp byte [%1], %2
    54 0001992C 0F8590040000        <1>  jne L_error_incorrect_type
 33670 00019932 488B5701                        mov rdx, qword [rdi + 1]
 33671 00019936 488B4E01                        mov rcx, qword [rsi + 1]
 33672 0001993A 4839D1                          cmp rcx, rdx
 33673 0001993D 0F8D14030000                    jge L_error_integer_range
 33674 00019943 4883F900                        cmp rcx, 0
 33675 00019947 0F8C0A030000                    jl L_error_integer_range
 33676 0001994D 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
 33677 00019951 BF02000000                      mov rdi, 2
 33678 00019956 E8D9E6FFFF                      call malloc
 33679 0001995B C60002                          mov byte [rax], T_char
 33680 0001995E 885801                          mov byte [rax + 1], bl
 33681 00019961 C9                              leave
 33682 00019962 C22000                          ret AND_KILL_FRAME(2)
 33683                                  
 33684                                  L_code_ptr_vector_ref:
 33685 00019965 C8000000                        enter 0, 0
 33686 00019969 48837D1802                      cmp COUNT, 2
 33687 0001996E 0F85AF030000                    jne L_error_arg_count_2
 33688 00019974 488B7D20                        mov rdi, PARAM(0)
 33689                                          assert_vector(rdi)
    53 00019978 803F22              <1>  cmp byte [%1], %2
    54 0001997B 0F8541040000        <1>  jne L_error_incorrect_type
 33690 00019981 488B7528                        mov rsi, PARAM(1)
 33691                                          assert_integer(rsi)
    53 00019985 803E11              <1>  cmp byte [%1], %2
    54 00019988 0F8534040000        <1>  jne L_error_incorrect_type
 33692 0001998E 488B5701                        mov rdx, qword [rdi + 1]
 33693 00019992 488B4E01                        mov rcx, qword [rsi + 1]
 33694 00019996 4839D1                          cmp rcx, rdx
 33695 00019999 0F8DB8020000                    jge L_error_integer_range
 33696 0001999F 4883F900                        cmp rcx, 0
 33697 000199A3 0F8CAE020000                    jl L_error_integer_range
 33698 000199A9 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
 33699 000199AE C9                              leave
 33700 000199AF C22000                          ret AND_KILL_FRAME(2)
 33701                                  
 33702                                  L_code_ptr_vector_set:
 33703 000199B2 C8000000                        enter 0, 0
 33704 000199B6 48837D1803                      cmp COUNT, 3
 33705 000199BB 0F85CC030000                    jne L_error_arg_count_3
 33706 000199C1 488B7D20                        mov rdi, PARAM(0)
 33707                                          assert_vector(rdi)
    53 000199C5 803F22              <1>  cmp byte [%1], %2
    54 000199C8 0F85F4030000        <1>  jne L_error_incorrect_type
 33708 000199CE 488B7528                        mov rsi, PARAM(1)
 33709                                          assert_integer(rsi)
    53 000199D2 803E11              <1>  cmp byte [%1], %2
    54 000199D5 0F85E7030000        <1>  jne L_error_incorrect_type
 33710 000199DB 488B5701                        mov rdx, qword [rdi + 1]
 33711 000199DF 488B4E01                        mov rcx, qword [rsi + 1]
 33712 000199E3 4839D1                          cmp rcx, rdx
 33713 000199E6 0F8D6B020000                    jge L_error_integer_range
 33714 000199EC 4883F900                        cmp rcx, 0
 33715 000199F0 0F8C61020000                    jl L_error_integer_range
 33716 000199F6 488B4530                        mov rax, PARAM(2)
 33717 000199FA 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
 33718 000199FF 48B8-                           mov rax, sob_void
 33718 00019A01 [0000000000000000] 
 33719 00019A09 C9                              leave
 33720 00019A0A C22800                          ret AND_KILL_FRAME(3)
 33721                                  
 33722                                  L_code_ptr_string_set:
 33723 00019A0D C8000000                        enter 0, 0
 33724 00019A11 48837D1803                      cmp COUNT, 3
 33725 00019A16 0F8571030000                    jne L_error_arg_count_3
 33726 00019A1C 488B7D20                        mov rdi, PARAM(0)
 33727                                          assert_string(rdi)
    53 00019A20 803F03              <1>  cmp byte [%1], %2
    54 00019A23 0F8599030000        <1>  jne L_error_incorrect_type
 33728 00019A29 488B7528                        mov rsi, PARAM(1)
 33729                                          assert_integer(rsi)
    53 00019A2D 803E11              <1>  cmp byte [%1], %2
    54 00019A30 0F858C030000        <1>  jne L_error_incorrect_type
 33730 00019A36 488B5701                        mov rdx, qword [rdi + 1]
 33731 00019A3A 488B4E01                        mov rcx, qword [rsi + 1]
 33732 00019A3E 4839D1                          cmp rcx, rdx
 33733 00019A41 0F8D10020000                    jge L_error_integer_range
 33734 00019A47 4883F900                        cmp rcx, 0
 33735 00019A4B 0F8C06020000                    jl L_error_integer_range
 33736 00019A51 488B4530                        mov rax, PARAM(2)
 33737                                          assert_char(rax)
    53 00019A55 803802              <1>  cmp byte [%1], %2
    54 00019A58 0F8564030000        <1>  jne L_error_incorrect_type
 33738 00019A5E 8A4001                          mov al, byte [rax + 1]
 33739 00019A61 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
 33740 00019A65 48B8-                           mov rax, sob_void
 33740 00019A67 [0000000000000000] 
 33741 00019A6F C9                              leave
 33742 00019A70 C22800                          ret AND_KILL_FRAME(3)
 33743                                  
 33744                                  L_code_ptr_make_vector:
 33745 00019A73 C8000000                        enter 0, 0
 33746 00019A77 48837D1802                      cmp COUNT, 2
 33747 00019A7C 0F85A1020000                    jne L_error_arg_count_2
 33748 00019A82 488B4D20                        mov rcx, PARAM(0)
 33749                                          assert_integer(rcx)
    53 00019A86 803911              <1>  cmp byte [%1], %2
    54 00019A89 0F8533030000        <1>  jne L_error_incorrect_type
 33750 00019A8F 488B4901                        mov rcx, qword [rcx + 1]
 33751 00019A93 4883F900                        cmp rcx, 0
 33752 00019A97 0F8CBA010000                    jl L_error_integer_range
 33753 00019A9D 488B5528                        mov rdx, PARAM(1)
 33754 00019AA1 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
 33755 00019AA9 E886E5FFFF                      call malloc
 33756 00019AAE C60022                          mov byte [rax], T_vector
 33757 00019AB1 48894801                        mov qword [rax + 1], rcx
 33758 00019AB5 41B800000000                    mov r8, 0
 33759                                  .L0:
 33760 00019ABB 4939C8                          cmp r8, rcx
 33761 00019ABE 740A                            je .L1
 33762 00019AC0 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
 33763 00019AC5 49FFC0                          inc r8
 33764 00019AC8 EBF1                            jmp .L0
 33765                                  .L1:
 33766 00019ACA C9                              leave
 33767 00019ACB C22000                          ret AND_KILL_FRAME(2)
 33768                                          
 33769                                  L_code_ptr_make_string:
 33770 00019ACE C8000000                        enter 0, 0
 33771 00019AD2 48837D1802                      cmp COUNT, 2
 33772 00019AD7 0F8546020000                    jne L_error_arg_count_2
 33773 00019ADD 488B4D20                        mov rcx, PARAM(0)
 33774                                          assert_integer(rcx)
    53 00019AE1 803911              <1>  cmp byte [%1], %2
    54 00019AE4 0F85D8020000        <1>  jne L_error_incorrect_type
 33775 00019AEA 488B4901                        mov rcx, qword [rcx + 1]
 33776 00019AEE 4883F900                        cmp rcx, 0
 33777 00019AF2 0F8C5F010000                    jl L_error_integer_range
 33778 00019AF8 488B5528                        mov rdx, PARAM(1)
 33779                                          assert_char(rdx)
    53 00019AFC 803A02              <1>  cmp byte [%1], %2
    54 00019AFF 0F85BD020000        <1>  jne L_error_incorrect_type
 33780 00019B05 8A5201                          mov dl, byte [rdx + 1]
 33781 00019B08 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
 33782 00019B0C E823E5FFFF                      call malloc
 33783 00019B11 C60003                          mov byte [rax], T_string
 33784 00019B14 48894801                        mov qword [rax + 1], rcx
 33785 00019B18 41B800000000                    mov r8, 0
 33786                                  .L0:
 33787 00019B1E 4939C8                          cmp r8, rcx
 33788 00019B21 740A                            je .L1
 33789 00019B23 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
 33790 00019B28 49FFC0                          inc r8
 33791 00019B2B EBF1                            jmp .L0
 33792                                  .L1:
 33793 00019B2D C9                              leave
 33794 00019B2E C22000                          ret AND_KILL_FRAME(2)
 33795                                  
 33796                                  L_code_ptr_numerator:
 33797 00019B31 C8000000                        enter 0, 0
 33798 00019B35 48837D1801                      cmp COUNT, 1
 33799 00019B3A 0F85AE010000                    jne L_error_arg_count_1
 33800 00019B40 488B4520                        mov rax, PARAM(0)
 33801                                          assert_fraction(rax)
    53 00019B44 803812              <1>  cmp byte [%1], %2
    54 00019B47 0F8575020000        <1>  jne L_error_incorrect_type
 33802 00019B4D 488B7801                        mov rdi, qword [rax + 1]
 33803 00019B51 E8E7000000                      call make_integer
 33804 00019B56 C9                              leave
 33805 00019B57 C21800                          ret AND_KILL_FRAME(1)
 33806                                          
 33807                                  L_code_ptr_denominator:
 33808 00019B5A C8000000                        enter 0, 0
 33809 00019B5E 48837D1801                      cmp COUNT, 1
 33810 00019B63 0F8585010000                    jne L_error_arg_count_1
 33811 00019B69 488B4520                        mov rax, PARAM(0)
 33812                                          assert_fraction(rax)
    53 00019B6D 803812              <1>  cmp byte [%1], %2
    54 00019B70 0F854C020000        <1>  jne L_error_incorrect_type
 33813 00019B76 488B7809                        mov rdi, qword [rax + 1 + 8]
 33814 00019B7A E8BE000000                      call make_integer
 33815 00019B7F C9                              leave
 33816 00019B80 C21800                          ret AND_KILL_FRAME(1)
 33817                                  
 33818                                  L_code_ptr_is_eq:
 33819 00019B83 C8000000                	enter 0, 0
 33820 00019B87 48837D1802              	cmp COUNT, 2
 33821 00019B8C 0F8591010000            	jne L_error_arg_count_2
 33822 00019B92 488B7D20                	mov rdi, PARAM(0)
 33823 00019B96 488B7528                	mov rsi, PARAM(1)
 33824 00019B9A 4839F7                  	cmp rdi, rsi
 33825 00019B9D 746C                    	je .L_eq_true
 33826 00019B9F 8A17                    	mov dl, byte [rdi]
 33827 00019BA1 3A16                    	cmp dl, byte [rsi]
 33828 00019BA3 7572                    	jne .L_eq_false
 33829 00019BA5 80FA02                  	cmp dl, T_char
 33830 00019BA8 7459                    	je .L_char
 33831 00019BAA 80FA41                  	cmp dl, T_interned_symbol
 33832 00019BAD 7440                    	je .L_interned_symbol
 33833 00019BAF 80FA42                          cmp dl, T_uninterned_symbol
 33834 00019BB2 7443                            je .L_uninterned_symbol
 33835 00019BB4 80FA13                  	cmp dl, T_real
 33836 00019BB7 742E                    	je .L_real
 33837 00019BB9 80FA12                  	cmp dl, T_fraction
 33838 00019BBC 7413                    	je .L_fraction
 33839 00019BBE 80FA11                          cmp dl, T_integer
 33840 00019BC1 7402                            je .L_integer
 33841 00019BC3 EB52                    	jmp .L_eq_false
 33842                                  .L_integer:
 33843 00019BC5 488B4601                        mov rax, qword [rsi + 1]
 33844 00019BC9 483B4701                        cmp rax, qword [rdi + 1]
 33845 00019BCD 7548                            jne .L_eq_false
 33846 00019BCF EB3A                            jmp .L_eq_true
 33847                                  .L_fraction:
 33848 00019BD1 488B4601                	mov rax, qword [rsi + 1]
 33849 00019BD5 483B4701                	cmp rax, qword [rdi + 1]
 33850 00019BD9 753C                    	jne .L_eq_false
 33851 00019BDB 488B4609                	mov rax, qword [rsi + 1 + 8]
 33852 00019BDF 483B4709                	cmp rax, qword [rdi + 1 + 8]
 33853 00019BE3 7532                    	jne .L_eq_false
 33854 00019BE5 EB24                    	jmp .L_eq_true
 33855                                  .L_real:
 33856 00019BE7 488B4601                	mov rax, qword [rsi + 1]
 33857 00019BEB 483B4701                	cmp rax, qword [rdi + 1]
 33858                                  .L_interned_symbol:
 33859                                  	; never reached, because interned_symbols are static!
 33860                                  	; but I'm keeping it in case, I'll ever change
 33861                                  	; the implementation
 33862 00019BEF 488B4601                	mov rax, qword [rsi + 1]
 33863 00019BF3 483B4701                	cmp rax, qword [rdi + 1]
 33864                                  .L_uninterned_symbol:
 33865 00019BF7 4C8B4701                        mov r8, qword [rdi + 1]
 33866 00019BFB 4C3B4601                        cmp r8, qword [rsi + 1]
 33867 00019BFF 7516                            jne .L_eq_false
 33868 00019C01 EB08                            jmp .L_eq_true
 33869                                  .L_char:
 33870 00019C03 8A5E01                  	mov bl, byte [rsi + 1]
 33871 00019C06 3A5F01                  	cmp bl, byte [rdi + 1]
 33872 00019C09 750C                    	jne .L_eq_false
 33873                                  .L_eq_true:
 33874 00019C0B 48B8-                   	mov rax, sob_boolean_true
 33874 00019C0D [0300000000000000] 
 33875 00019C15 EB0A                    	jmp .L_eq_exit
 33876                                  .L_eq_false:
 33877 00019C17 48B8-                   	mov rax, sob_boolean_false
 33877 00019C19 [0200000000000000] 
 33878                                  .L_eq_exit:
 33879 00019C21 C9                      	leave
 33880 00019C22 C22000                  	ret AND_KILL_FRAME(2)
 33881                                  
 33882                                  make_real:
 33883 00019C25 C8000000                        enter 0, 0
 33884 00019C29 BF09000000                      mov rdi, (1 + 8)
 33885 00019C2E E801E4FFFF                      call malloc
 33886 00019C33 C60013                          mov byte [rax], T_real
 33887 00019C36 F20F114001                      movsd qword [rax + 1], xmm0
 33888 00019C3B C9                              leave 
 33889 00019C3C C3                              ret
 33890                                          
 33891                                  make_integer:
 33892 00019C3D C8000000                        enter 0, 0
 33893 00019C41 4889FE                          mov rsi, rdi
 33894 00019C44 BF09000000                      mov rdi, (1 + 8)
 33895 00019C49 E8E6E3FFFF                      call malloc
 33896 00019C4E C60011                          mov byte [rax], T_integer
 33897 00019C51 48897001                        mov qword [rax + 1], rsi
 33898 00019C55 C9                              leave
 33899 00019C56 C3                              ret
 33900                                          
 33901                                  L_error_integer_range:
 33902 00019C57 488B3C25[00000000]              mov rdi, qword [stderr]
 33903 00019C5F 48BE-                           mov rsi, fmt_integer_range
 33903 00019C61 [DA1B000000000000] 
 33904 00019C69 B800000000                      mov rax, 0
 33905                                          ENTER
    44 00019C6E C8000000            <1>  enter 0, 0
    45 00019C72 4883E4F0            <1>  and rsp, ~15
 33906 00019C76 E8(00000000)                    call fprintf
 33907                                          LEAVE
    49 00019C7B C9                  <1>  leave
 33908 00019C7C 48C7C0FBFFFFFF                  mov rax, -5
 33909 00019C83 E8(00000000)                    call exit
 33910                                  
 33911                                  L_error_arg_negative:
 33912 00019C88 488B3C25[00000000]              mov rdi, qword [stderr]
 33913 00019C90 48BE-                           mov rsi, fmt_arg_negative
 33913 00019C92 [B21A000000000000] 
 33914 00019C9A B800000000                      mov rax, 0
 33915                                          ENTER
    44 00019C9F C8000000            <1>  enter 0, 0
    45 00019CA3 4883E4F0            <1>  and rsp, ~15
 33916 00019CA7 E8(00000000)                    call fprintf
 33917                                          LEAVE
    49 00019CAC C9                  <1>  leave
 33918 00019CAD 48C7C0FDFFFFFF                  mov rax, -3
 33919 00019CB4 E8(00000000)                    call exit
 33920                                  
 33921                                  L_error_arg_count_0:
 33922 00019CB9 488B3C25[00000000]              mov rdi, qword [stderr]
 33923 00019CC1 48BE-                           mov rsi, fmt_arg_count_0
 33923 00019CC3 [D81A000000000000] 
 33924 00019CCB 488B5518                        mov rdx, COUNT
 33925 00019CCF B800000000                      mov rax, 0
 33926                                          ENTER
    44 00019CD4 C8000000            <1>  enter 0, 0
    45 00019CD8 4883E4F0            <1>  and rsp, ~15
 33927 00019CDC E8(00000000)                    call fprintf
 33928                                          LEAVE
    49 00019CE1 C9                  <1>  leave
 33929 00019CE2 48C7C0FDFFFFFF                  mov rax, -3
 33930 00019CE9 E8(00000000)                    call exit
 33931                                  
 33932                                  L_error_arg_count_1:
 33933 00019CEE 488B3C25[00000000]              mov rdi, qword [stderr]
 33934 00019CF6 48BE-                           mov rsi, fmt_arg_count_1
 33934 00019CF8 [001B000000000000] 
 33935 00019D00 488B5518                        mov rdx, COUNT
 33936 00019D04 B800000000                      mov rax, 0
 33937                                          ENTER
    44 00019D09 C8000000            <1>  enter 0, 0
    45 00019D0D 4883E4F0            <1>  and rsp, ~15
 33938 00019D11 E8(00000000)                    call fprintf
 33939                                          LEAVE
    49 00019D16 C9                  <1>  leave
 33940 00019D17 48C7C0FDFFFFFF                  mov rax, -3
 33941 00019D1E E8(00000000)                    call exit
 33942                                  
 33943                                  L_error_arg_count_2:
 33944 00019D23 488B3C25[00000000]              mov rdi, qword [stderr]
 33945 00019D2B 48BE-                           mov rsi, fmt_arg_count_2
 33945 00019D2D [661B000000000000] 
 33946 00019D35 488B5518                        mov rdx, COUNT
 33947 00019D39 B800000000                      mov rax, 0
 33948                                          ENTER
    44 00019D3E C8000000            <1>  enter 0, 0
    45 00019D42 4883E4F0            <1>  and rsp, ~15
 33949 00019D46 E8(00000000)                    call fprintf
 33950                                          LEAVE
    49 00019D4B C9                  <1>  leave
 33951 00019D4C 48C7C0FDFFFFFF                  mov rax, -3
 33952 00019D53 E8(00000000)                    call exit
 33953                                  
 33954                                  L_error_arg_count_12:
 33955 00019D58 488B3C25[00000000]              mov rdi, qword [stderr]
 33956 00019D60 48BE-                           mov rsi, fmt_arg_count_12
 33956 00019D62 [261B000000000000] 
 33957 00019D6A 488B5518                        mov rdx, COUNT
 33958 00019D6E B800000000                      mov rax, 0
 33959                                          ENTER
    44 00019D73 C8000000            <1>  enter 0, 0
    45 00019D77 4883E4F0            <1>  and rsp, ~15
 33960 00019D7B E8(00000000)                    call fprintf
 33961                                          LEAVE
    49 00019D80 C9                  <1>  leave
 33962 00019D81 48C7C0FDFFFFFF                  mov rax, -3
 33963 00019D88 E8(00000000)                    call exit
 33964                                  
 33965                                  L_error_arg_count_3:
 33966 00019D8D 488B3C25[00000000]              mov rdi, qword [stderr]
 33967 00019D95 48BE-                           mov rsi, fmt_arg_count_3
 33967 00019D97 [8D1B000000000000] 
 33968 00019D9F 488B5518                        mov rdx, COUNT
 33969 00019DA3 B800000000                      mov rax, 0
 33970                                          ENTER
    44 00019DA8 C8000000            <1>  enter 0, 0
    45 00019DAC 4883E4F0            <1>  and rsp, ~15
 33971 00019DB0 E8(00000000)                    call fprintf
 33972                                          LEAVE
    49 00019DB5 C9                  <1>  leave
 33973 00019DB6 48C7C0FDFFFFFF                  mov rax, -3
 33974 00019DBD E8(00000000)                    call exit
 33975                                          
 33976                                  L_error_incorrect_type:
 33977 00019DC2 488B3C25[00000000]              mov rdi, qword [stderr]
 33978 00019DCA 48BE-                           mov rsi, fmt_type
 33978 00019DCC [B61B000000000000] 
 33979 00019DD4 B800000000                      mov rax, 0
 33980                                          ENTER
    44 00019DD9 C8000000            <1>  enter 0, 0
    45 00019DDD 4883E4F0            <1>  and rsp, ~15
 33981 00019DE1 E8(00000000)                    call fprintf
 33982                                          LEAVE
    49 00019DE6 C9                  <1>  leave
 33983 00019DE7 48C7C0FCFFFFFF                  mov rax, -4
 33984 00019DEE E8(00000000)                    call exit
 33985                                  
 33986                                  L_error_division_by_zero:
 33987 00019DF3 488B3C25[00000000]              mov rdi, qword [stderr]
 33988 00019DFB 48BE-                           mov rsi, fmt_division_by_zero
 33988 00019DFD [F71B000000000000] 
 33989 00019E05 B800000000                      mov rax, 0
 33990                                          ENTER
    44 00019E0A C8000000            <1>  enter 0, 0
    45 00019E0E 4883E4F0            <1>  and rsp, ~15
 33991 00019E12 E8(00000000)                    call fprintf
 33992                                          LEAVE
    49 00019E17 C9                  <1>  leave
 33993 00019E18 48C7C0F8FFFFFF                  mov rax, -8
 33994 00019E1F E8(00000000)                    call exit
 33995                                  
 33996                                  section .data
 33997                                  gensym_count:
 33998 00001AA7 0000000000000000                dq 0
 33999                                  fmt_char:
 34000 00001AAF 256300                          db `%c\0`
 34001                                  fmt_arg_negative:
 34002 00001AB2 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
 34002 00001ABB 7267756D656E742063-
 34002 00001AC4 616E6E6F7420626520-
 34002 00001ACD 6E656761746976652E-
 34002 00001AD6 0A00               
 34003                                  fmt_arg_count_0:
 34004 00001AD8 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
 34004 00001AE1 74696E67207A65726F-
 34004 00001AEA 20617267756D656E74-
 34004 00001AF3 732E20466F756E6420-
 34004 00001AFC 25640A00           
 34005                                  fmt_arg_count_1:
 34006 00001B00 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
 34006 00001B09 74696E67206F6E6520-
 34006 00001B12 617267756D656E742E-
 34006 00001B1B 20466F756E64202564-
 34006 00001B24 0A00               
 34007                                  fmt_arg_count_12:
 34008 00001B26 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
 34008 00001B2F 74696E67206F6E6520-
 34008 00001B38 726571756972656420-
 34008 00001B41 616E64206F6E65206F-
 34008 00001B4A 7074696F6E616C2061-
 34008 00001B53 7267756D656E742E20-
 34008 00001B5C 466F756E642025640A-
 34008 00001B65 00                 
 34009                                  fmt_arg_count_2:
 34010 00001B66 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
 34010 00001B6F 74696E672074776F20-
 34010 00001B78 617267756D656E7473-
 34010 00001B81 2E20466F756E642025-
 34010 00001B8A 640A00             
 34011                                  fmt_arg_count_3:
 34012 00001B8D 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
 34012 00001B96 74696E672074687265-
 34012 00001B9F 6520617267756D656E-
 34012 00001BA8 74732E20466F756E64-
 34012 00001BB1 2025640A00         
 34013                                  fmt_type:
 34014 00001BB6 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
 34014 00001BBF 696F6E207061737365-
 34014 00001BC8 6420696E636F727265-
 34014 00001BD1 637420747970650A00 
 34015                                  fmt_integer_range:
 34016 00001BDA 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
 34016 00001BE3 7265637420696E7465-
 34016 00001BEC 6765722072616E6765-
 34016 00001BF5 0A00               
 34017                                  fmt_division_by_zero:
 34018 00001BF7 212121204469766973-             db `!!! Division by zero\n\0`
 34018 00001C00 696F6E206279207A65-
 34018 00001C09 726F0A00           
 34019                                  fmt_scheme_error_part_1:
 34020 00001C0D 0A2121212054686520-             db `\n!!! The procedure \0`
 34020 00001C16 70726F636564757265-
 34020 00001C1F 2000               
 34021                                  fmt_scheme_error_part_2:
 34022 00001C21 2061736B656420746F-             db ` asked to terminate the program\n`
 34022 00001C2A 207465726D696E6174-
 34022 00001C33 65207468652070726F-
 34022 00001C3C 6772616D0A         
 34023 00001C41 202020207769746820-             db `    with the following message:\n\n\0`
 34023 00001C4A 74686520666F6C6C6F-
 34023 00001C53 77696E67206D657373-
 34023 00001C5C 6167653A0A0A00     
 34024                                  fmt_scheme_error_part_3:
 34025 00001C63 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
 34025 00001C6C 210A0A00           
